try{this.Module=Module}catch(e$$10){this.Module=Module={}}var ENVIRONMENT_IS_NODE="object"===typeof process&&"function"===typeof require,ENVIRONMENT_IS_WEB="object"===typeof window,ENVIRONMENT_IS_WORKER="function"===typeof importScripts,ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;
if(ENVIRONMENT_IS_NODE){Module.print=function(f){process.stdout.write(f+"\n")};Module.printErr=function(f){process.stderr.write(f+"\n")};var nodeFS=require("fs"),nodePath=require("path");Module.read=function(f){var f=nodePath.normalize(f),e=nodeFS.readFileSync(f).toString();!e&&f!=nodePath.resolve(f)&&(f=path.join(__dirname,"..","src",f),e=nodeFS.readFileSync(f).toString());return e};Module.load=function(f){globalEval(read(f))};Module.arguments||(Module.arguments=process.argv.slice(2))}
ENVIRONMENT_IS_SHELL&&(Module.print=print,"undefined"!=typeof printErr&&(Module.printErr=printErr),Module.read="undefined"!=typeof read?read:function(f){snarf(f)},Module.arguments||("undefined"!=typeof scriptArgs?Module.arguments=scriptArgs:"undefined"!=typeof arguments&&(Module.arguments=arguments)));ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER&&(Module.print||(Module.print=function(f){console.log(f)}),Module.printErr||(Module.printErr=function(f){console.log(f)}));
if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)Module.read=function(f){var e=new XMLHttpRequest;e.open("GET",f,!1);e.send(null);return e.responseText},Module.arguments||"undefined"!=typeof arguments&&(Module.arguments=arguments);if(ENVIRONMENT_IS_WORKER){var TRY_USE_DUMP=!1;Module.print||(Module.print=TRY_USE_DUMP&&"undefined"!==typeof dump?function(f){dump(f)}:function(){});Module.load=importScripts}
if(!ENVIRONMENT_IS_WORKER&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_SHELL)throw"Unknown runtime environment. Where are we?";function globalEval(f){eval.call(null,f)}"undefined"==!Module.load&&Module.read&&(Module.load=function(f){globalEval(Module.read(f))});Module.print||(Module.print=function(){});Module.printErr||(Module.printErr=Module.print);Module.arguments||(Module.arguments=[]);Module.print=Module.print;Module.printErr=Module.printErr;Module.preRun||(Module.preRun=[]);
Module.postRun||(Module.postRun=[]);
var Runtime={stackSave:function(){return STACKTOP},stackRestore:function(f){STACKTOP=f},forceAlign:function(f,e){e=e||4;if(1==e)return f;if(isNumber(f)&&isNumber(e))return Math.ceil(f/e)*e;if(isNumber(e)&&isPowerOfTwo(e)){var b=log2(e);return"(((("+f+")+"+(e-1)+")>>"+b+")<<"+b+")"}return"Math.ceil(("+f+")/"+e+")*"+e},isNumberType:function(f){return f in Runtime.INT_TYPES||f in Runtime.FLOAT_TYPES},isPointerType:function(f){return"*"==f[f.length-1]},isStructType:function(f){return isPointerType(f)?!1:
/^\[\d+\ x\ (.*)\]/.test(f)||/<?{ ?[^}]* ?}>?/.test(f)?!0:"%"==f[0]},INT_TYPES:{i1:0,i8:0,i16:0,i32:0,i64:0},FLOAT_TYPES:{"float":0,"double":0},bitshift64:function(f,e,b,c){var a=Math.pow(2,c)-1;if(32>c)switch(b){case "shl":return[f<<c,e<<c|(f&a<<32-c)>>>32-c];case "ashr":return[(f>>>c|(e&a)<<32-c)>>0>>>0,e>>c>>>0];case "lshr":return[(f>>>c|(e&a)<<32-c)>>>0,e>>>c]}else if(32==c)switch(b){case "shl":return[0,f];case "ashr":return[e,0>(e|0)?a:0];case "lshr":return[e,0]}else switch(b){case "shl":return[0,
f<<c-32];case "ashr":return[e>>c-32>>>0,0>(e|0)?a:0];case "lshr":return[e>>>c-32,0]}abort("unknown bitshift64 op: "+[value,b,c])},or64:function(f,e){var b=f|0|e|0,c=4294967296*(Math.round(f/4294967296)|Math.round(e/4294967296));return b+c},and64:function(f,e){var b=(f|0)&(e|0),c=4294967296*(Math.round(f/4294967296)&Math.round(e/4294967296));return b+c},xor64:function(f,e){var b=(f|0)^(e|0),c=4294967296*(Math.round(f/4294967296)^Math.round(e/4294967296));return b+c},getNativeTypeSize:function(f){if(1==
Runtime.QUANTUM_SIZE)return 1;var e={"%i1":1,"%i8":1,"%i16":2,"%i32":4,"%i64":8,"%float":4,"%double":8}["%"+f];e||("*"==f.charAt(f.length-1)?e=Runtime.QUANTUM_SIZE:"i"==f[0]&&(f=parseInt(f.substr(1)),assert(0==f%8),e=f/8));return e},getNativeFieldSize:function(f){return Math.max(Runtime.getNativeTypeSize(f),Runtime.QUANTUM_SIZE)},dedup:function(f,e){var b={};return e?f.filter(function(c){return b[c[e]]?!1:b[c[e]]=!0}):f.filter(function(c){return b[c]?!1:b[c]=!0})},set:function(){for(var f="object"===
typeof arguments[0]?arguments[0]:arguments,e={},b=0;b<f.length;b++)e[f[b]]=0;return e},calculateStructAlignment:function(f){f.flatSize=0;f.alignSize=0;var e=[],b=-1;f.flatIndexes=f.fields.map(function(c){var a;if(Runtime.isNumberType(c)||Runtime.isPointerType(c))c=a=Runtime.getNativeTypeSize(c);else if(Runtime.isStructType(c))a=Types.types[c].flatSize,c=Types.types[c].alignSize;else throw"Unclear type in struct: "+c+", in "+f.name_+" :: "+dump(Types.types[f.name_]);c=f.packed?1:Math.min(c,Runtime.QUANTUM_SIZE);
f.alignSize=Math.max(f.alignSize,c);c=Runtime.alignMemory(f.flatSize,c);f.flatSize=c+a;0<=b&&e.push(c-b);return b=c});f.flatSize=Runtime.alignMemory(f.flatSize,f.alignSize);0==e.length?f.flatFactor=f.flatSize:1==Runtime.dedup(e).length&&(f.flatFactor=e[0]);f.needsFlattening=1!=f.flatFactor;return f.flatIndexes},generateStructInfo:function(f,e,b){var c,a;if(e){b=b||0;c=("undefined"===typeof Types?Runtime.typeInfo:Types.types)[e];if(!c)return null;if(c.fields.length!=f.length)return printErr("Number of named fields must match the type for "+
e+": possibly duplicate struct names. Cannot return structInfo"),null;a=c.flatIndexes}else c={fields:f.map(function(a){return a[0]})},a=Runtime.calculateStructAlignment(c);var d={__size__:c.flatSize};e?f.forEach(function(e,f){if("string"===typeof e)d[e]=a[f]+b;else{var i,j;for(j in e)i=j;d[i]=Runtime.generateStructInfo(e[i],c.fields[f],a[f])}}):f.forEach(function(b,c){d[b[1]]=a[c]});return d},addFunction:function(f){var e=FUNCTION_TABLE.length;FUNCTION_TABLE.push(f);FUNCTION_TABLE.push(0);return e},
warnOnce:function(f){Runtime.warnOnce.shown||(Runtime.warnOnce.shown={});Runtime.warnOnce.shown[f]||(Runtime.warnOnce.shown[f]=1,Module.printErr(f))},funcWrappers:{},getFuncWrapper:function(f){Runtime.funcWrappers[f]||(Runtime.funcWrappers[f]=function(){FUNCTION_TABLE[f].apply(null,arguments)});return Runtime.funcWrappers[f]},UTF8Processor:function(){var f=[],e=0;this.processCChar=function(b){b&=255;e&&(f.push(b),e--);if(0==f.length){if(128>b)return String.fromCharCode(b);f.push(b);e=191<b&&224>b?
1:2;return""}if(0<e)return"";var b=f[0],c=f[1],a=f[2],b=191<b&&224>b?String.fromCharCode((b&31)<<6|c&63):String.fromCharCode((b&15)<<12|(c&63)<<6|a&63);f.length=0;return b};this.processJSString=function(b){for(var b=unescape(encodeURIComponent(b)),c=[],a=0;a<b.length;a++)c.push(b.charCodeAt(a));return c}},stackAlloc:function(f){var e=STACKTOP;STACKTOP+=f;STACKTOP=STACKTOP+3>>2<<2;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");return e},staticAlloc:function(f){var e=STATICTOP;STATICTOP+=
f;STATICTOP=STATICTOP+3>>2<<2;STATICTOP>=TOTAL_MEMORY&&enlargeMemory();return e},alignMemory:function(f,e){return Math.ceil(f/(e?e:4))*(e?e:4)},makeBigInt:function(f,e,b){return b?(f>>>0)+4294967296*(e>>>0):(f>>>0)+4294967296*(e|0)},QUANTUM_SIZE:4,__dummy__:0},CorrectionsMonitor={MAX_ALLOWED:0,corrections:0,sigs:{},note:function(f,e){e||(this.corrections++,this.corrections>=this.MAX_ALLOWED&&abort("\n\nToo many corrections!"))},print:function(){}},__THREW__=!1,setjmpId=1,setjmpLabels={},ABORT=!1,
undef=0,tempValue,tempInt,tempBigInt,tempInt2,tempBigInt2,tempPair,tempBigIntI,tempBigIntR,tempBigIntS,tempBigIntP,tempBigIntD,tempI64,tempI64b;function abort(f){Module.print(f+":\n"+Error().stack);ABORT=!0;throw"Assertion: "+f;}function assert(f,e){f||abort("Assertion failed: "+e)}var globalScope=this;function ccall(f,e,b,c){return ccallFunc(getCFunc(f),e,b,c)}Module.ccall=ccall;
function getCFunc(f){try{var e=eval("_"+f)}catch(b){try{e=globalScope.Module["_"+f]}catch(c){}}assert(e,"Cannot call unknown function "+f+" (perhaps LLVM optimizations or closure removed it?)");return e}
function ccallFunc(f,e,b,c){function a(a,b){if("string"==b){if(null===a||void 0===a||0===a)return 0;d||(d=Runtime.stackSave());var c=Runtime.stackAlloc(a.length+1);writeStringToMemory(a,c);return c}return"array"==b?(d||(d=Runtime.stackSave()),c=Runtime.stackAlloc(a.length),writeArrayToMemory(a,c),c):a}var d=0,g=0,c=c?c.map(function(c){return a(c,b[g++])}):[];f=f.apply(null,c);"string"==e?e=Pointer_stringify(f):(assert("array"!=e),e=f);d&&Runtime.stackRestore(d);return e}
function cwrap(f,e,b){var c=getCFunc(f);return function(){return ccallFunc(c,e,b,Array.prototype.slice.call(arguments))}}Module.cwrap=cwrap;
function setValue(f,e,b){b=b||"i8";"*"===b.charAt(b.length-1)&&(b="i32");switch(b){case "i1":HEAP8[f]=e;break;case "i8":HEAP8[f]=e;break;case "i16":HEAP16[f>>1]=e;break;case "i32":HEAP32[f>>2]=e;break;case "i64":tempI64=[e>>>0,Math.min(Math.floor(e/4294967296),4294967295)];HEAP32[f>>2]=tempI64[0];HEAP32[f+4>>2]=tempI64[1];break;case "float":HEAPF32[f>>2]=e;break;case "double":tempDoubleF64[0]=e;HEAP32[f>>2]=tempDoubleI32[0];HEAP32[f+4>>2]=tempDoubleI32[1];break;default:abort("invalid type for setValue: "+
b)}}Module.setValue=setValue;function getValue(f,e){e=e||"i8";"*"===e.charAt(e.length-1)&&(e="i32");switch(e){case "i1":return HEAP8[f];case "i8":return HEAP8[f];case "i16":return HEAP16[f>>1];case "i32":return HEAP32[f>>2];case "i64":return HEAP32[f>>2];case "float":return HEAPF32[f>>2];case "double":return tempDoubleI32[0]=HEAP32[f>>2],tempDoubleI32[1]=HEAP32[f+4>>2],tempDoubleF64[0];default:abort("invalid type for setValue: "+e)}return null}Module.getValue=getValue;
var ALLOC_NORMAL=0,ALLOC_STACK=1,ALLOC_STATIC=2,ALLOC_NONE=3;Module.ALLOC_NORMAL=ALLOC_NORMAL;Module.ALLOC_STACK=ALLOC_STACK;Module.ALLOC_STATIC=ALLOC_STATIC;Module.ALLOC_NONE=ALLOC_NONE;
function allocate(f,e,b,c){var a,d;"number"===typeof f?(a=!0,d=f):(a=!1,d=f.length);var g="string"===typeof e?e:null,b=b==ALLOC_NONE?c:[_malloc,Runtime.stackAlloc,Runtime.staticAlloc][void 0===b?ALLOC_STATIC:b](Math.max(d,g?1:e.length));if(a)return _memset(b,0,d),b;for(a=0;a<d;){var h=f[a];"function"===typeof h&&(h=Runtime.getFunctionIndex(h));c=g||e[a];0===c?a++:(assert(c,"Must know what type to store in allocate!"),"i64"==c&&(c="i32"),setValue(b+a,h,c),a+=Runtime.getNativeTypeSize(c))}return b}
Module.allocate=allocate;function Pointer_stringify(f,e){for(var b=new Runtime.UTF8Processor,c="undefined"==typeof e,a="",d=0,g;;){assert(d<TOTAL_MEMORY);g=HEAPU8[f+d];if(c&&0==g)break;a+=b.processCChar(g);d+=1;if(!c&&d==e)break}return a}Module.Pointer_stringify=Pointer_stringify;function Array_stringify(f){for(var e="",b=0;b<f.length;b++)e+=String.fromCharCode(f[b]);return e}Module.Array_stringify=Array_stringify;var FUNCTION_TABLE,PAGE_SIZE=4096;
function alignMemoryPage(f){return f+4095>>12<<12}var HEAP,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64,STACK_ROOT,STACKTOP,STACK_MAX,STATICTOP;function enlargeMemory(){abort("Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ( "+TOTAL_MEMORY+"), (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.")}
var TOTAL_STACK=Module.TOTAL_STACK||5242880,TOTAL_MEMORY=Module.TOTAL_MEMORY||10485760,FAST_MEMORY=Module.FAST_MEMORY||2097152;assert(!!Int32Array&&!!Float64Array&&!!(new Int32Array(1)).subarray&&!!(new Int32Array(1)).set,"Cannot fallback to non-typed array case: Code is too specialized");var buffer=new ArrayBuffer(TOTAL_MEMORY);HEAP8=new Int8Array(buffer);HEAP16=new Int16Array(buffer);HEAP32=new Int32Array(buffer);HEAPU8=new Uint8Array(buffer);HEAPU16=new Uint16Array(buffer);HEAPU32=new Uint32Array(buffer);
HEAPF32=new Float32Array(buffer);HEAPF64=new Float64Array(buffer);HEAP32[0]=255;assert(255===HEAPU8[0]&&0===HEAPU8[3],"Typed arrays 2 must be run on a little-endian system");Module.HEAP=HEAP;Module.HEAP8=HEAP8;Module.HEAP16=HEAP16;Module.HEAP32=HEAP32;Module.HEAPU8=HEAPU8;Module.HEAPU16=HEAPU16;Module.HEAPU32=HEAPU32;Module.HEAPF32=HEAPF32;Module.HEAPF64=HEAPF64;STACK_ROOT=STACKTOP=Runtime.alignMemory(1);STACK_MAX=STACK_ROOT+TOTAL_STACK;
var tempDoublePtr=Runtime.alignMemory(STACK_MAX,8),tempDoubleI8=HEAP8.subarray(tempDoublePtr),tempDoubleI32=HEAP32.subarray(tempDoublePtr>>2),tempDoubleF32=HEAPF32.subarray(tempDoublePtr>>2),tempDoubleF64=HEAPF64.subarray(tempDoublePtr>>3);function copyTempFloat(f){tempDoubleI8[0]=HEAP8[f];tempDoubleI8[1]=HEAP8[f+1];tempDoubleI8[2]=HEAP8[f+2];tempDoubleI8[3]=HEAP8[f+3]}
function copyTempDouble(f){tempDoubleI8[0]=HEAP8[f];tempDoubleI8[1]=HEAP8[f+1];tempDoubleI8[2]=HEAP8[f+2];tempDoubleI8[3]=HEAP8[f+3];tempDoubleI8[4]=HEAP8[f+4];tempDoubleI8[5]=HEAP8[f+5];tempDoubleI8[6]=HEAP8[f+6];tempDoubleI8[7]=HEAP8[f+7]}STACK_MAX=tempDoublePtr+8;STATICTOP=alignMemoryPage(STACK_MAX);assert(STATICTOP<TOTAL_MEMORY);var nullString=allocate(intArrayFromString("(null)"),"i8",ALLOC_STATIC);
function callRuntimeCallbacks(f){for(;0<f.length;){var e=f.shift(),b=e.func;"number"===typeof b&&(b=FUNCTION_TABLE[b]);b(void 0===e.arg?null:e.arg)}}var __ATINIT__=[],__ATMAIN__=[],__ATEXIT__=[];function initRuntime(){callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);CorrectionsMonitor.print()}function String_len(f){for(var e=f;HEAP8[e++];)assert(e<TOTAL_MEMORY);return e-f-1}Module.String_len=String_len;
function intArrayFromString(f,e,b){f=(new Runtime.UTF8Processor).processJSString(f);b&&(f.length=b);e||f.push(0);return f}Module.intArrayFromString=intArrayFromString;function intArrayToString(f){for(var e=[],b=0;b<f.length;b++){var c=f[b];255<c&&(assert(!1,"Character code "+c+" ("+String.fromCharCode(c)+")  at offset "+b+" not in 0x00-0xFF."),c&=255);e.push(String.fromCharCode(c))}return e.join("")}Module.intArrayToString=intArrayToString;
function writeStringToMemory(f,e,b){f=intArrayFromString(f,b);for(b=0;b<f.length;)HEAP8[e+b]=f[b],b+=1}Module.writeStringToMemory=writeStringToMemory;function writeArrayToMemory(f,e){for(var b=0;b<f.length;b++)HEAP8[e+b]=f[b]}Module.writeArrayToMemory=writeArrayToMemory;function unSign(f,e){return 0<=f?f:32>=e?2*Math.abs(1<<e-1)+f:Math.pow(2,e)+f}function reSign(f,e){if(0>=f)return f;var b=32>=e?Math.abs(1<<e-1):Math.pow(2,e-1);if(f>=b&&(32>=e||f>b))f=-2*b+f;return f}
var runDependencies=0,runDependencyTracking={},calledRun=!1,runDependencyWatcher=null;
function addRunDependency(f){runDependencies++;Module.monitorRunDependencies&&Module.monitorRunDependencies(runDependencies);f?(assert(!runDependencyTracking[f]),runDependencyTracking[f]=1,null===runDependencyWatcher&&"undefined"!==typeof setInterval&&(runDependencyWatcher=setInterval(function(){var e=!1,b;for(b in runDependencyTracking)e||(e=!0,Module.printErr("still waiting on run dependencies:")),Module.printErr("dependency: "+b);e&&Module.printErr("(end of list)")},6E3))):Module.printErr("warning: run dependency added without ID")}
Module.addRunDependency=addRunDependency;function removeRunDependency(f){runDependencies--;Module.monitorRunDependencies&&Module.monitorRunDependencies(runDependencies);f?(assert(runDependencyTracking[f]),delete runDependencyTracking[f]):Module.printErr("warning: run dependency removed without ID");0==runDependencies&&(null!==runDependencyWatcher&&(clearInterval(runDependencyWatcher),runDependencyWatcher=null),calledRun||run())}Module.removeRunDependency=removeRunDependency;
Module.preloadedImages={};Module.preloadedAudios={};
var _yytranslate,_yytname,_yytable,_yysyntax_error_yyunexpected,_yysyntax_error_yyor,_yysyntax_error_yyexpecting,_yystos,_yyrline,_yyrhs,_yyr2,_yyr1,_yyprhs,_yypgoto,_yypact,_yydefgoto,_yydefact,_yydebug,_yycheck,_wday_names,_type,_timezone_names,_stdout,_stderr,_stack_extend_mrb_value_zero,_scope_new_codegen_scope_zero,_scan_hex_hexdigit,_reserved_word_wordlist,_ref_func,_my_timgm_ndays,_mrblib_irep,_mrb_time_type,_mrb_run_optable,_mrb_run_msg,_mrb_run_m,_mrb_parser_new_parser_state_zero,_mrb_open_allocf_mrb_state_zero,
_mrb_obj_alloc_RVALUE_zero,_mrb_init_proc_mrb_irep_zero,_mrb_digitmap,_mrb_check_datatype_mesg,_mrb_add_irep_mrb_irep_zero,_mon_names,_load_exec_msg162,_load_exec_msg,_isspacetable,_irep_error_msg,_inspect_range_s,_inspect_range_n,_inspect_ary_tail,_inspect_ary_sep,_inspect_ary_head,_hex2bin,_hash_asso_values,_flo_to_s_s,_flo_to_s_n,_call_iseq,_builtin_types,__str9935,__str99,__str98754,__str9869,__str9827,__str98,__str97753,__str9770,__str97,__str96752,__str9665,__str962,__str96,__str95751,__str9543,
__str95,__str94750,__str942,__str94,__str93749,__str93,__str92748,__str927,__str926,__str92,__str91747,__str9171,__str91484,__str91436,__str914,__str91316,__str91262,__str91226,__str91204,__str91117,__str91051,__str91015,__str91,__str90746,__str90,__str9,__str89745,__str8934,__str89,__str88744,__str8868,__str8826,__str88,__str87743,__str8769,__str87,__str86742,__str8664,__str861,__str860,__str86,__str85741,__str85619,__str8542,__str85,__str84740,__str84618,__str841,__str84,__str83739,__str83617,__str83,
__str82738,__str82616,__str826,__str82,__str818,__str81737,__str8170,__str81615,__str81483,__str81435,__str81315,__str81261,__str81225,__str81203,__str81116,__str81050,__str81014,__str81,__str80736,__str80614,__str80,__str8,__str79735,__str79613,__str7933,__str79,__str78734,__str7867,__str78612,__str7825,__str78,__str77733,__str7768,__str77611,__str77,__str76732,__str7663,__str76610,__str761,__str760,__str76,__str75731,__str75609,__str7541,__str75,__str74730,__str74608,__str740,__str74,__str73729,
__str73607,__str731548,__str73,__str72728,__str72606,__str725,__str721547,__str72,__str71727,__str7169,__str71605,__str71482,__str71434,__str71314,__str71260,__str71224,__str71202,__str711546,__str71115,__str71049,__str71013,__str71,__str70726,__str70604,__str701545,__str70,__str7,__str69725,__str69603,__str6932,__str691544,__str69,__str68724,__str6866,__str68602,__str6824,__str681543,__str681375,__str68,__str67723,__str6767,__str67601,__str671542,__str671374,__str67,__str66722,__str6662,__str66600,
__str661541,__str661373,__str66,__str659,__str65721,__str656,__str65599,__str6540,__str651540,__str651372,__str65,__str64991,__str64720,__str64598,__str641539,__str641371,__str64,__str63990,__str639,__str63719,__str63597,__str631538,__str631370,__str63,__str62989,__str62718,__str62596,__str624,__str621537,__str621369,__str62,__str61988,__str61717,__str6168,__str61595,__str61481,__str61433,__str61313,__str61259,__str61223,__str61201,__str611536,__str611368,__str61114,__str61048,__str61012,__str61,
__str60987,__str60716,__str60594,__str601535,__str601367,__str60,__str6,__str59985,__str59715,__str59593,__str5931,__str591534,__str591366,__str59,__str58984,__str58714,__str5865,__str58592,__str5823,__str581533,__str581365,__str581100,__str58,__str57983,__str57713,__str5766,__str57591,__str571532,__str571364,__str571099,__str57,__str56982,__str56712,__str5661,__str56590,__str561531,__str561363,__str561098,__str56,__str55981,__str558,__str55711,__str55589,__str5539,__str551530,__str551362,__str551097,
__str55,__str54980,__str54710,__str54588,__str541529,__str541361,__str541096,__str54,__str53979,__str538,__str5372,__str53709,__str53587,__str534,__str533,__str532,__str531528,__str531360,__str531095,__str531,__str530,__str53,__str52978,__str529,__str528,__str52708,__str527,__str526,__str52586,__str525,__str524,__str52389,__str523,__str52214,__str522,__str521527,__str521359,__str521094,__str521,__str520,__str52,__str51977,__str519,__str518,__str51707,__str517,__str5167,__str516,__str51585,__str515,
__str51480,__str51432,__str514,__str51312,__str513,__str51258,__str51222,__str51213,__str51200,__str512,__str511526,__str511358,__str51113,__str511093,__str511,__str51047,__str51011,__str510,__str51,__str50976,__str509,__str508,__str50706,__str507,__str506,__str50584,__str505,__str504,__str503,__str50212,__str502,__str501525,__str501357,__str501092,__str501,__str500,__str50,__str5,__str49975,__str499,__str498,__str49705,__str497,__str496,__str49583,__str495,__str494,__str4930,__str493,__str49211,
__str492,__str491524,__str491356,__str491157,__str491091,__str491,__str490,__str49,__str48974,__str489,__str488,__str48704,__str487,__str4864,__str486,__str48582,__str485,__str484,__str483,__str4822,__str48210,__str482,__str481523,__str481355,__str481156,__str481090,__str481,__str480,__str48,__str47973,__str479,__str478,__str47703,__str477,__str4765,__str476,__str47581,__str475,__str474,__str473,__str47209,__str472,__str471522,__str471354,__str471155,__str471089,__str471,__str470,__str47,__str46972,
__str469,__str468,__str46702,__str467,__str4660,__str466,__str46580,__str465,__str464,__str463,__str46208,__str462,__str461521,__str461353,__str461154,__str461088,__str461,__str460,__str46,__str45971,__str45905,__str459,__str458,__str45788,__str45701,__str457,__str456,__str45579,__str455,__str454,__str4538,__str453,__str45207,__str452,__str451520,__str451352,__str451298,__str451153,__str451087,__str451,__str450,__str45,__str44970,__str44904,__str449,__str448,__str44700,__str447,__str446,__str44578,
__str445,__str444,__str443,__str44206,__str442,__str441519,__str441351,__str441297,__str441152,__str441086,__str441,__str440,__str44,__str43969,__str43903,__str439,__str438,__str43787,__str437,__str43699,__str436,__str43577,__str435,__str434,__str433,__str43205,__str432,__str431518,__str431350,__str431296,__str431151,__str431085,__str431,__str430,__str43,__str42968,__str42902,__str429,__str428,__str427,__str42698,__str426,__str42576,__str425,__str424,__str423,__str42286,__str42204,__str422,__str421517,
__str421349,__str421295,__str421150,__str421084,__str421,__str420,__str42,__str41967,__str41901,__str419,__str418,__str417,__str41697,__str4166,__str416,__str41575,__str415,__str41479,__str41431,__str414,__str41385,__str41311,__str413,__str41257,__str41221,__str41203,__str412,__str41199,__str411516,__str411348,__str411294,__str411149,__str41112,__str411083,__str411,__str41046,__str41010,__str410,__str41,__str40966,__str40900,__str409,__str408,__str407,__str40696,__str406,__str40574,__str405,__str404,
__str403,__str40202,__str402,__str401515,__str401467,__str401347,__str401293,__str401148,__str401082,__str401,__str400,__str40,__str4,__str39965,__str399,__str39899,__str398,__str397,__str39695,__str396,__str39573,__str395,__str394,__str393,__str3929,__str39201,__str392,__str391514,__str391466,__str391346,__str391292,__str391147,__str391081,__str391,__str390,__str39,__str38964,__str389,__str38898,__str388,__str387,__str38694,__str3863,__str386,__str38572,__str385,__str384,__str383,__str3821,__str38200,
__str382,__str381513,__str381465,__str381345,__str381291,__str381146,__str381080,__str381,__str380,__str38,__str37963,__str379,__str37897,__str378,__str377,__str37693,__str3764,__str376,__str37571,__str375,__str374,__str373,__str372,__str37199,__str371512,__str371464,__str371344,__str371290,__str371145,__str371079,__str371,__str370,__str37,__str36962,__str369,__str36896,__str368,__str367,__str36692,__str366,__str3659,__str36570,__str365,__str364,__str363,__str362,__str36198,__str361511,__str361463,
__str361343,__str361289,__str361144,__str361078,__str361,__str360,__str36,__str35961,__str359,__str35895,__str358,__str357,__str35691,__str35684,__str356,__str35569,__str355,__str354,__str3537,__str353,__str352,__str35197,__str351510,__str351462,__str351342,__str351288,__str351143,__str351077,__str351,__str350,__str35,__str34960,__str349,__str34894,__str348,__str34795,__str347,__str34690,__str346,__str34568,__str345,__str344,__str343,__str342,__str34196,__str341509,__str341461,__str341341,__str341287,
__str341142,__str341076,__str341,__str340,__str34,__str33959,__str339,__str33893,__str338,__str33794,__str3371,__str337,__str33689,__str33683,__str336,__str33567,__str335,__str334,__str333,__str332,__str33195,__str331508,__str331460,__str331340,__str331286,__str331141,__str331075,__str331,__str330,__str33,__str32958,__str329,__str32892,__str328,__str32793,__str327,__str32688,__str326,__str32566,__str325,__str324,__str323,__str322,__str32194,__str32182,__str321507,__str321459,__str321339,__str321285,
__str321140,__str321074,__str321,__str320,__str32,__str31957,__str319,__str31891,__str318,__str31792,__str317,__str31687,__str3165,__str316,__str31592,__str31565,__str315,__str31478,__str31430,__str314,__str31310,__str313,__str31281,__str31256,__str31220,__str312,__str31198,__str31193,__str311506,__str311458,__str311338,__str311284,__str311139,__str31111,__str311073,__str311037,__str311,__str31045,__str31009,__str310,__str31,__str30956,__str309,__str30890,__str308,__str30791,__str307,__str30686,__str306,
__str30564,__str305,__str304,__str303,__str302,__str30192,__str301505,__str301457,__str301337,__str301283,__str301138,__str301072,__str301036,__str301,__str300,__str30,__str3,__str29955,__str299,__str29889,__str298,__str29790,__str297,__str29685,__str296,__str29563,__str295,__str294,__str293,__str2928,__str292,__str29191,__str291504,__str291456,__str291336,__str291282,__str291137,__str291071,__str291035,__str291,__str290,__str29,__str28954,__str289,__str28888,__str288,__str28789,__str287,__str28684,
__str2862,__str286,__str28562,__str285,__str284,__str283,__str2820,__str282,__str28190,__str281503,__str281455,__str281335,__str281281,__str281245,__str281136,__str281070,__str281034,__str281,__str280,__str28,__str27953,__str279,__str27887,__str278,__str27788,__str277,__str27683,__str2763,__str276,__str27561,__str275,__str274,__str273,__str272,__str27189,__str271502,__str271454,__str271334,__str271280,__str271244,__str271135,__str271069,__str271033,__str271,__str270,__str27,__str26952,__str269,__str26886,
__str268,__str26787,__str267,__str26682,__str266,__str2658,__str26560,__str265,__str264,__str263,__str262,__str26188,__str261501,__str261453,__str261333,__str261279,__str261243,__str261134,__str261068,__str261032,__str261,__str260,__str26,__str25951,__str259,__str25885,__str258,__str25786,__str257,__str25681,__str256,__str25580,__str25559,__str255,__str254,__str2536,__str253,__str252,__str25187,__str251500,__str251452,__str251332,__str251278,__str251242,__str251133,__str251067,__str251031,__str251,
__str250,__str25,__str24950,__str249,__str24884,__str248,__str24785,__str247,__str24680,__str246,__str24558,__str245,__str244,__str243,__str242,__str24186,__str241499,__str241451,__str241331,__str241277,__str241241,__str241132,__str241066,__str241030,__str241,__str240,__str24,__str23949,__str239,__str23883,__str238,__str23784,__str237,__str23679,__str236,__str23579,__str23557,__str235,__str234,__str233,__str232,__str23185,__str231498,__str231450,__str231330,__str231276,__str231240,__str231131,__str231065,
__str231029,__str231,__str230,__str23,__str22948,__str229,__str22882,__str228,__str22783,__str227,__str22678,__str226,__str22556,__str225,__str224,__str223,__str222,__str22184,__str221497,__str221449,__str221329,__str221275,__str221239,__str221130,__str221064,__str221028,__str221,__str22078,__str220,__str22,__str21947,__str219,__str21881,__str218,__str21782,__str217,__str21677,__str2164,__str216,__str21591,__str21581,__str21567,__str21555,__str215,__str21477,__str21429,__str214,__str21309,__str213,
__str21255,__str21219,__str212,__str21197,__str21183,__str21177,__str211496,__str211448,__str211328,__str211274,__str211238,__str211129,__str21110,__str211063,__str211027,__str211,__str21044,__str21008,__str210,__str21,__str20946,__str209,__str20880,__str208,__str20781,__str207,__str20676,__str206,__str20554,__str205,__str204,__str203,__str202,__str20182,__str201495,__str201447,__str201327,__str201273,__str201237,__str201128,__str201062,__str201026,__str201,__str200,__str20,__str2,__str19945,__str199,
__str19879,__str198,__str19780,__str197,__str19675,__str196,__str19553,__str195,__str194,__str193,__str1927,__str192,__str19181,__str191494,__str191446,__str191326,__str191272,__str191236,__str191127,__str191061,__str191025,__str191,__str190,__str19,__str18944,__str189,__str18878,__str188,__str18779,__str1870,__str187,__str18674,__str1861,__str186,__str18552,__str185,__str184,__str183,__str182,__str1819,__str18180,__str181493,__str181445,__str181325,__str181271,__str181235,__str181126,__str181060,
__str181024,__str181,__str180,__str18,__str17943,__str179,__str17877,__str178,__str17778,__str177,__str17673,__str1762,__str176,__str17551,__str175,__str174,__str173,__str172,__str17179,__str171492,__str171444,__str171324,__str171270,__str171234,__str171125,__str171059,__str171023,__str171,__str170,__str17,__str16942,__str169,__str16876,__str168,__str16777,__str167,__str1669,__str16672,__str166,__str1657,__str16550,__str165,__str164,__str163,__str162,__str16178,__str161491,__str161443,__str161323,
__str161269,__str161233,__str161124,__str161058,__str161022,__str161,__str160,__str16,__str15941,__str159,__str1589,__str15875,__str158,__str1579,__str15776,__str157,__str1568,__str15671,__str1565,__str1562,__str156,__str1559,__str15549,__str155,__str15476,__str154,__str1535,__str153,__str152,__str15177,__str151490,__str151442,__str151322,__str151268,__str151232,__str151123,__str151057,__str151021,__str151,__str150,__str15,__str14940,__str149,__str14874,__str148,__str14775,__str1475,__str147,__str14670,
__str1467,__str146,__str14548,__str145,__str144,__str143,__str1427,__str142,__str14176,__str141593,__str141489,__str141441,__str141321,__str141267,__str141231,__str141122,__str141056,__str141020,__str141,__str140,__str14,__str13939,__str139,__str13873,__str138,__str13774,__str137,__str13669,__str1366,__str136,__str13547,__str135,__str13475,__str134,__str133,__str132,__str13175,__str131488,__str131440,__str131320,__str131266,__str131230,__str131121,__str131055,__str131019,__str131,__str1307,__str130,
__str13,__str12938,__str129,__str12872,__str128,__str12773,__str127,__str12668,__str1265,__str126,__str12546,__str1253,__str125,__str1245,__str124,__str123,__str122,__str12174,__str1217,__str121487,__str121439,__str121319,__str121265,__str121229,__str121120,__str121054,__str121018,__str121,__str120,__str12,__str11974,__str1195,__str11937,__str119,__str11871,__str118,__str11772,__str117,__str11667,__str1164,__str1163,__str116,__str11590,__str11580,__str11566,__str11545,__str115,__str11476,__str1144,
__str11428,__str114,__str11308,__str113,__str11254,__str11218,__str112,__str11196,__str11173,__str111486,__str111438,__str111318,__str111264,__str111228,__str111119,__str11109,__str111053,__str111017,__str111,__str1108,__str11073,__str11043,__str11007,__str110,__str11,__str10936,__str109,__str10870,__str10828,__str108,__str10771,__str107,__str10666,__str1063,__str106,__str10544,__str105,__str1043,__str1042,__str104,__str103,__str102,__str10172,__str101485,__str101437,__str101317,__str101263,__str101227,
__str101205,__str101118,__str101052,__str101016,__str101,__str1006,__str100,__str10,__str1,__str,___m986,___m859,___m240,___m17,___m,___func___flo_to_s,__ZTVSt9exception,__ZTVSt9bad_alloc,__ZTVSt20bad_array_new_length,__ZTVN10__cxxabiv120__si_class_type_infoE,__ZTSSt9bad_alloc,__ZTSSt20bad_array_new_length,__ZTISt9exception,__ZTISt9bad_alloc,__ZTISt20bad_array_new_length,__ZSt7nothrow,__ZL7mparams,__ZL4_gm_,__ZL13__new_handler;
_yytranslate=allocate([0,2,2,2,2,2,2,2,2,2,143,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,121,2,2,2,119,114,2,139,140,117,115,138,116,137,118,2,2,2,2,2,2,2,2,2,2,109,142,111,107,110,108,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,136,2,141,113,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,134,112,135,122,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,120,123,124,125,126,127,128,129,130,131,132,133],"i8",ALLOC_STATIC);_yytname=allocate(1168,"i8",ALLOC_STATIC);
_yytable=allocate([91,0,444,0,250,0,314,0,350,0,387,0,296,0,247,0,407,0,107,0,107,0,233,0,233,0,248,0,252,0,233,0,185,0,565,0,537,0,107,0,217,0,462,0,585,0,202,0,472,0,591,0,498,0,439,0,685,0,603,0,218,0,441,0,92,0,300,0,359,0,279,0,503,0,239,0,239,0,265,0,362,0,239,0,563,0,202,0,601,0,299,0,706,0,601,0,738,0,272,0,276,0,799,0,212,0,215,0,74,0,619,0,74,0,107,0,581,0,715,0,535,0,603,0,543,0,378,0,289,0,546,0,378,0,224,0,733,0,217,0,588,0,594,0,271,0,275,0,-96,0,353,0,107,0,857,0,699,0,218,0,745,0,
354,0,247,0,678,0,679,0,-273,0,564,0,722,0,709,0,63,0,-98,0,63,0,-95,0,427,0,236,0,241,0,353,0,-97,0,242,0,-99,0,535,0,74,0,543,0,802,0,659,0,238,0,238,0,868,0,345,0,238,0,291,0,292,0,472,0,418,0,365,0,564,0,316,0,348,0,-432,0,348,0,352,0,634,0,-94,0,622,0,218,0,425,0,851,0,-97,0,431,0,3,0,-101,0,735,0,433,0,310,0,739,0,-273,0,-273,0,-94,0,-501,0,-101,0,270,0,651,0,564,0,-435,0,-100,0,494,0,749,0,533,0,435,0,541,0,363,0,737,0,541,0,214,0,740,0,74,0,857,0,254,0,-100,0,346,0,-96,0,-98,0,-95,0,746,0,
339,0,340,0,341,0,564,0,-86,0,444,0,-93,0,533,0,818,0,541,0,-67,0,-92,0,652,0,868,0,881,0,306,0,307,0,213,0,214,0,761,0,407,0,213,0,214,0,533,0,711,0,541,0,768,0,308,0,213,0,214,0,-435,0,213,0,214,0,635,0,633,0,388,0,533,0,472,0,541,0,-96,0,-96,0,-81,0,684,0,289,0,909,0,443,0,-89,0,-500,0,-91,0,-501,0,-434,0,738,0,689,0,774,0,444,0,-98,0,-98,0,-95,0,-95,0,217,0,218,0,349,0,802,0,349,0,533,0,541,0,218,0,603,0,246,0,218,0,430,0,-86,0,405,0,405,0,233,0,273,0,233,0,233,0,733,0,-93,0,416,0,698,0,429,0,
389,0,601,0,601,0,265,0,733,0,533,0,-500,0,541,0,74,0,-97,0,-97,0,490,0,-317,0,258,0,392,0,393,0,499,0,239,0,-434,0,239,0,315,0,-436,0,754,0,217,0,-92,0,604,0,-88,0,-90,0,-87,0,606,0,311,0,438,0,-437,0,218,0,609,0,107,0,214,0,-432,0,214,0,342,0,883,0,437,0,437,0,351,0,614,0,214,0,437,0,695,0,496,0,616,0,844,0,561,0,549,0,551,0,859,0,265,0,-94,0,366,0,688,0,74,0,386,0,472,0,-317,0,-317,0,74,0,74,0,243,0,866,0,-439,0,869,0,107,0,858,0,-436,0,860,0,408,0,246,0,411,0,861,0,-438,0,-101,0,249,0,480,0,542,
0,-437,0,261,0,238,0,867,0,238,0,870,0,343,0,344,0,233,0,382,0,-88,0,416,0,481,0,482,0,483,0,484,0,426,0,-90,0,796,0,294,0,295,0,-427,0,74,0,542,0,367,0,368,0,-431,0,74,0,658,0,249,0,306,0,307,0,233,0,214,0,74,0,416,0,-439,0,500,0,918,0,542,0,556,0,718,0,498,0,721,0,575,0,618,0,-438,0,443,0,233,0,712,0,218,0,416,0,542,0,444,0,357,0,261,0,915,0,63,0,358,0,383,0,384,0,233,0,485,0,750,0,416,0,374,0,425,0,911,0,377,0,492,0,590,0,590,0,-427,0,914,0,492,0,916,0,610,0,-431,0,917,0,542,0,218,0,218,0,405,
0,405,0,-386,0,-100,0,399,0,400,0,401,0,91,0,603,0,74,0,-88,0,834,0,602,0,395,0,443,0,845,0,707,0,-90,0,687,0,74,0,925,0,708,0,542,0,202,0,213,0,214,0,601,0,74,0,423,0,381,0,447,0,233,0,360,0,361,0,416,0,-96,0,107,0,385,0,107,0,389,0,-98,0,-88,0,-433,0,-88,0,617,0,632,0,-88,0,-264,0,-90,0,391,0,-90,0,-274,0,639,0,-90,0,639,0,626,0,639,0,451,0,452,0,453,0,454,0,74,0,-386,0,396,0,397,0,790,0,586,0,875,0,473,0,292,0,74,0,873,0,476,0,477,0,655,0,394,0,718,0,891,0,383,0,424,0,448,0,449,0,663,0,728,0,-95,
0,491,0,402,0,107,0,670,0,398,0,502,0,403,0,-433,0,-433,0,646,0,477,0,63,0,-264,0,-264,0,316,0,668,0,-274,0,-274,0,421,0,671,0,615,0,406,0,-96,0,666,0,472,0,-386,0,-497,0,-386,0,-386,0,667,0,74,0,672,0,876,0,877,0,672,0,701,0,698,0,674,0,-98,0,422,0,677,0,668,0,367,0,368,0,675,0,261,0,214,0,675,0,655,0,655,0,666,0,428,0,672,0,-88,0,903,0,778,0,-66,0,725,0,-498,0,668,0,692,0,434,0,440,0,442,0,763,0,675,0,682,0,-504,0,446,0,-90,0,478,0,479,0,668,0,553,0,697,0,700,0,218,0,700,0,841,0,502,0,690,0,497,
0,691,0,-95,0,843,0,700,0,-427,0,473,0,572,0,202,0,218,0,798,0,598,0,600,0,443,0,573,0,273,0,261,0,564,0,577,0,668,0,683,0,587,0,405,0,769,0,605,0,607,0,218,0,608,0,612,0,-81,0,730,0,499,0,74,0,-87,0,757,0,759,0,625,0,-431,0,637,0,640,0,764,0,766,0,74,0,642,0,600,0,643,0,-504,0,273,0,-253,0,730,0,719,0,632,0,726,0,-497,0,645,0,-427,0,-427,0,437,0,-497,0,661,0,716,0,657,0,660,0,686,0,77,0,698,0,77,0,108,0,108,0,710,0,720,0,727,0,208,0,208,0,208,0,-254,0,741,0,225,0,208,0,208,0,756,0,777,0,208,0,576,
0,492,0,-498,0,107,0,-431,0,-431,0,762,0,-498,0,584,0,779,0,781,0,-504,0,785,0,-504,0,-504,0,656,0,-500,0,789,0,655,0,533,0,791,0,541,0,797,0,800,0,804,0,74,0,74,0,803,0,77,0,208,0,776,0,805,0,280,0,783,0,806,0,533,0,787,0,208,0,807,0,74,0,218,0,809,0,811,0,854,0,74,0,451,0,452,0,453,0,454,0,813,0,829,0,280,0,500,0,816,0,817,0,819,0,405,0,626,0,730,0,451,0,452,0,453,0,454,0,590,0,820,0,822,0,632,0,824,0,632,0,74,0,74,0,639,0,639,0,218,0,639,0,826,0,639,0,639,0,-255,0,831,0,208,0,788,0,77,0,639,0,
832,0,639,0,639,0,847,0,848,0,74,0,450,0,850,0,451,0,452,0,453,0,454,0,647,0,864,0,-256,0,694,0,871,0,872,0,874,0,74,0,74,0,74,0,882,0,886,0,626,0,890,0,451,0,452,0,453,0,454,0,900,0,892,0,894,0,908,0,450,0,897,0,451,0,452,0,453,0,454,0,107,0,717,0,-500,0,611,0,-501,0,455,0,700,0,921,0,223,0,600,0,273,0,456,0,457,0,112,0,907,0,218,0,316,0,632,0,853,0,676,0,852,0,218,0,724,0,455,0,910,0,188,0,770,0,723,0,906,0,458,0,457,0,474,0,459,0,455,0,0,0,835,0,107,0,734,0,865,0,456,0,457,0,74,0,74,0,0,0,0,0,
884,0,0,0,458,0,837,0,372,0,0,0,0,0,74,0,0,0,460,0,0,0,0,0,458,0,77,0,753,0,459,0,0,0,337,0,338,0,339,0,340,0,341,0,632,0,0,0,632,0,0,0,639,0,639,0,639,0,639,0,208,0,208,0,542,0,639,0,639,0,639,0,0,0,639,0,639,0,0,0,0,0,233,0,0,0,0,0,416,0,0,0,575,0,700,0,668,0,205,0,205,0,205,0,0,0,208,0,632,0,208,0,208,0,74,0,0,0,208,0,208,0,0,0,0,0,74,0,77,0,74,0,0,0,0,0,792,0,77,0,77,0,74,0,301,0,302,0,303,0,304,0,305,0,0,0,0,0,639,0,0,0,0,0,639,0,639,0,639,0,639,0,731,0,732,0,280,0,267,0,0,0,0,0,0,0,639,0,626,
0,0,0,451,0,452,0,453,0,454,0,742,0,0,0,0,0,0,0,0,0,751,0,0,0,0,0,0,0,827,0,77,0,208,0,208,0,208,0,208,0,77,0,208,0,208,0,0,0,0,0,208,0,0,0,77,0,280,0,743,0,208,0,451,0,452,0,453,0,454,0,771,0,772,0,0,0,627,0,0,0,0,0,0,0,0,0,0,0,450,0,356,0,451,0,452,0,453,0,454,0,0,0,0,0,0,0,0,0,0,0,784,0,0,0,0,0,208,0,273,0,743,0,0,0,451,0,452,0,453,0,454,0,208,0,208,0,455,0,793,0,794,0,795,0,0,0,0,0,456,0,457,0,0,0,0,0,0,0,0,0,0,0,0,0,208,0,455,0,77,0,208,0,0,0,0,0,0,0,456,0,457,0,0,0,458,0,0,0,77,0,459,0,0,0,
0,0,208,0,455,0,0,0,0,0,77,0,316,0,0,0,456,0,457,0,458,0,0,0,0,0,459,0,208,0,0,0,0,0,0,0,0,0,0,0,0,0,329,0,330,0,0,0,214,0,0,0,458,0,0,0,0,0,459,0,0,0,0,0,0,0,0,0,833,0,567,0,0,0,0,0,0,0,77,0,0,0,0,0,0,0,234,0,234,0,842,0,0,0,234,0,77,0,334,0,335,0,336,0,337,0,338,0,339,0,340,0,341,0,0,0,0,0,0,0,0,0,0,0,280,0,0,0,280,0,0,0,208,0,205,0,205,0,0,0,0,0,0,0,0,0,255,0,257,0,0,0,0,0,0,0,234,0,234,0,0,0,0,0,0,0,0,0,0,0,297,0,298,0,0,0,0,0,316,0,0,0,662,0,0,0,77,0,0,0,316,0,417,0,419,0,0,0,0,0,0,0,878,0,0,
0,879,0,329,0,330,0,0,0,0,0,0,0,880,0,329,0,330,0,0,0,280,0,0,0,0,0,316,0,317,0,318,0,319,0,320,0,321,0,322,0,323,0,324,0,325,0,326,0,327,0,328,0,0,0,0,0,329,0,330,0,0,0,336,0,337,0,338,0,339,0,340,0,341,0,0,0,337,0,338,0,339,0,340,0,341,0,0,0,0,0,205,0,205,0,205,0,205,0,0,0,486,0,487,0,331,0,0,0,332,0,333,0,334,0,335,0,336,0,337,0,338,0,339,0,340,0,341,0,626,0,0,0,451,0,452,0,453,0,454,0,0,0,0,0,208,0,77,0,0,0,316,0,-524,0,-524,0,-524,0,-524,0,321,0,322,0,-230,0,77,0,-524,0,-524,0,0,0,0,0,0,0,0,
0,329,0,330,0,0,0,0,0,86,0,0,0,86,0,109,0,109,0,109,0,0,0,0,0,0,0,627,0,0,0,0,0,0,0,227,0,0,0,628,0,0,0,0,0,208,0,0,0,566,0,0,0,332,0,333,0,334,0,335,0,336,0,337,0,338,0,339,0,340,0,341,0,626,0,0,0,451,0,452,0,453,0,454,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,281,0,0,0,0,0,0,0,77,0,77,0,0,0,0,0,234,0,234,0,234,0,297,0,0,0,0,0,0,0,0,0,0,0,0,0,77,0,281,0,627,0,0,0,234,0,77,0,234,0,234,0,801,0,0,0,0,0,0,0,280,0,208,0,0,0,0,0,208,0,208,0,0,0,0,0,0,0,0,0,208,0,208,0,0,0,0,0,0,0,0,0,0,0,
0,0,77,0,77,0,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,0,0,208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,0,77,0,77,0,0,0,0,0,0,0,0,0,234,0,0,0,0,0,0,0,0,0,501,0,504,0,505,0,506,0,507,0,508,0,509,0,510,0,511,0,512,0,513,0,514,0,515,0,516,0,517,0,518,0,519,0,520,0,521,0,522,0,523,0,524,0,525,0,526,0,527,0,528,0,529,0,0,0,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,550,0,552,0,0,0,208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,0,77,0,234,0,0,0,0,0,0,0,86,0,838,0,0,
0,0,0,0,0,77,0,205,0,0,0,0,0,0,0,578,0,0,0,234,0,0,0,550,0,552,0,0,0,0,0,234,0,87,0,0,0,87,0,0,0,0,0,0,0,234,0,0,0,0,0,0,0,0,0,0,0,234,0,234,0,0,0,0,0,234,0,0,0,863,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,0,0,0,0,0,0,0,0,86,0,0,0,0,0,613,0,77,0,86,0,86,0,0,0,0,0,0,0,77,0,0,0,77,0,234,0,0,0,87,0,234,0,0,0,77,0,0,0,0,0,641,0,0,0,644,0,281,0,0,0,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,0,86,0,0,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,649,0,650,0,86,0,281,0,89,0,0,
0,89,0,110,0,110,0,0,0,0,0,234,0,0,0,87,0,0,0,0,0,0,0,228,0,0,0,0,0,-523,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-523,0,-523,0,-523,0,0,0,0,0,-523,0,-523,0,-523,0,0,0,-523,0,0,0,0,0,0,0,0,0,0,0,205,0,0,0,0,0,-523,0,-523,0,0,0,0,0,0,0,89,0,0,0,0,0,0,0,282,0,0,0,-523,0,-523,0,86,0,-523,0,-523,0,-523,0,-523,0,-523,0,0,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,282,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,-523,0,0,0,0,0,0,0,0,0,86,
0,0,0,87,0,0,0,0,0,0,0,0,0,0,0,0,0,86,0,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,0,234,0,0,0,0,0,0,0,281,0,0,0,281,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,0,0,0,0,0,0,0,0,0,0,0,0,0,-523,0,-523,0,0,0,-523,0,0,0,246,0,-523,0,0,0,-523,0,-523,0,87,0,86,0,0,0,0,0,0,0,87,0,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,0,0,0,0,0,0,0,578,0,755,0,281,0,758,0,760,0,0,0,0,0,0,0,0,0,765,0,767,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,773,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,87,0,0,0,0,0,0,0,0,0,87,0,0,0,0,0,0,0,0,0,0,0,0,0,
87,0,0,0,0,0,0,0,758,0,760,0,0,0,765,0,767,0,808,0,810,0,234,0,812,0,0,0,814,0,815,0,0,0,0,0,0,0,0,0,0,0,821,0,0,0,823,0,825,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,0,0,86,0,0,0,0,0,89,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,0,0,0,0,0,0,0,828,0,87,0,282,0,0,0,0,0,0,0,0,0,830,0,0,0,0,0,0,0,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,0,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,830,0,0,0,89,0,282,0,0,0,0,0,0,0,234,0,0,0,0,0,0,0,0,0,86,0,86,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,0,
0,0,0,0,0,0,0,0,0,86,0,0,0,87,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0,0,281,0,0,0,0,0,0,0,0,0,885,0,887,0,888,0,889,0,0,0,0,0,0,0,893,0,895,0,896,0,0,0,898,0,899,0,86,0,86,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,0,0,0,0,0,0,87,0,0,0,0,0,86,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,0,0,0,0,0,0,0,86,0,86,0,86,0,0,0,0,0,0,0,919,0,0,0,0,0,920,0,922,0,923,0,924,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,926,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,282,
0,0,0,282,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,0,86,0,0,0,0,0,87,0,0,0,0,0,839,0,0,0,0,0,0,0,86,0,0,0,89,0,87,0,0,0,0,0,111,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,282,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,111,0,0,0,86,0,0,0,111,0,111,0,111,0,0,0,86,0,0,0,86,0,0,0,111,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,87,0,87,0,680,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,89,0,
0,0,0,0,87,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,316,0,317,0,318,0,319,0,320,0,321,0,322,0,323,0,324,0,325,0,326,0,327,0,328,0,0,0,0,0,329,0,330,0,87,0,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,331,0,0,0,332,0,333,0,334,0,335,0,336,0,337,0,338,0,339,0,340,0,341,0,87,0,87,0,87,0,316,0,317,0,318,0,319,0,320,0,321,0,322,0,323,0,0,0,325,0,326,0,89,0,89,0,0,0,0,0,329,0,330,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,282,0,0,0,
0,0,0,0,332,0,333,0,334,0,335,0,336,0,337,0,338,0,339,0,340,0,341,0,0,0,0,0,0,0,0,0,89,0,89,0,0,0,0,0,87,0,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,662,0,87,0,0,0,0,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,111,0,111,0,111,0,111,0,0,0,0,0,0,0,0,0,0,0,89,0,89,0,89,0,0,0,0,0,316,0,317,0,318,0,319,0,320,0,321,0,322,0,323,0,324,0,325,0,326,0,327,0,328,0,0,0,0,0,329,0,330,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,87,0,111,0,0,0,0,0,0,0,331,0,87,0,332,0,333,0,334,0,335,0,336,0,337,0,338,
0,339,0,340,0,341,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,89,0,0,0,0,0,0,0,0,0,0,0,840,0,0,0,0,0,0,0,89,0,0,0,111,0,0,0,0,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,0,0,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,89,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,0,0,0,0,111,0,111,0,0,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,530,
0,531,0,0,0,0,0,532,0,0,0,0,0,111,0,111,0,0,0,0,0,111,0,0,0,0,0,0,0,0,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,111,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,0,0,111,0,0,0,171,0,0,0,0,0,0,0,111,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,111,0,0,0,-523,0,4,0,246,0,5,0,6,0,7,0,8,0,9,0,111,0,0,0,0,0,10,0,11,0,0,0,111,0,0,0,12,0,
0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,111,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,111,0,111,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-523,0,-523,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,-504,0,0,0,111,0,0,0,111,0,0,0,0,0,0,0,-504,0,-504,0,-504,0,0,0,0,0,0,0,-504,0,-504,0,0,0,-504,0,0,0,0,0,0,0,0,0,111,0,0,0,0,0,0,0,-504,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-504,0,-504,0,0,0,-504,0,-504,0,-504,0,-504,0,-504,0,0,0,111,0,111,0,0,0,111,0,111,0,0,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-504,0,-504,0,-504,0,-504,0,-504,0,-504,0,-504,0,-504,0,-504,0,-504,0,-504,0,-504,0,-504,0,0,0,0,0,-504,0,-504,0,-504,0,0,0,664,0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,0,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-97,0,-504,0,0,0,-504,0,-504,0,-504,0,-504,0,-504,0,-504,0,-504,0,-504,0,-504,0,-504,0,0,0,0,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,-504,0,-504,0,-504,0,-504,0,-89,0,111,0,-504,0,-273,0,-504,0,-504,0,0,0,0,0,0,0,0,0,0,0,-273,0,-273,0,-273,0,
0,0,0,0,0,0,-273,0,-273,0,0,0,-273,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-273,0,-273,0,0,0,-273,0,-273,0,-273,0,-273,0,-273,0,0,0,0,0,0,0,316,0,317,0,318,0,319,0,320,0,321,0,322,0,323,0,324,0,325,0,326,0,327,0,328,0,0,0,0,0,329,0,330,0,0,0,0,0,0,0,0,0,-273,0,-273,0,-273,0,-273,0,-273,0,-273,0,-273,0,-273,0,-273,0,-273,0,-273,0,-273,0,-273,0,0,0,0,0,-273,0,-273,0,-273,0,331,0,665,0,332,0,333,0,334,0,335,0,336,0,337,0,338,0,339,0,340,0,341,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,-99,0,-273,0,0,0,-273,0,-273,0,-273,0,-273,0,-273,0,-273,0,-273,0,-273,0,-273,0,-273,0,0,0,0,0,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-273,0,-273,0,-273,0,-91,0,0,0,-273,0,0,0,-273,0,-273,0,259,0,0,0,5,0,6,0,7,0,8,0,9,0,-523,0,-523,0,-523,0,10,0,11,0,0,0,0,0,-523,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,
41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,259,0,0,0,5,0,6,0,7,0,8,0,9,0,-523,0,-523,0,-523,0,10,0,11,0,0,0,-523,0,-523,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,
0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,259,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,-523,0,10,0,11,0,-523,0,-523,0,-523,0,12,0,-523,0,13,0,14,0,15,
0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,259,0,0,0,5,0,6,0,7,
0,8,0,9,0,0,0,0,0,-523,0,10,0,11,0,-523,0,-523,0,-523,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,-523,0,-523,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,
0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-523,0,0,0,0,0,0,0,0,0,0,0,0,0,-523,0,-523,0,259,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,-523,0,-523,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,
47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,259,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,-523,0,-523,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,
36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,260,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-523,0,0,0,-523,0,-523,0,259,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,
0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-523,
0,0,0,-523,0,-523,0,259,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-523,0,0,0,0,0,0,0,0,0,0,0,0,0,-523,0,-523,0,259,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,-523,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,-523,0,-523,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,229,0,39,0,40,0,41,0,42,0,43,0,
0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,230,0,231,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,232,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,214,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,
0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,213,0,214,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,
0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,214,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,
0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,
0,12,0,391,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,391,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,0,0,0,0,0,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,145,0,146,0,0,0,0,0,0,0,0,0,0,0,147,0,148,0,149,0,150,0,151,0,152,0,153,0,154,0,35,0,36,0,155,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,
0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,0,0,-497,0,-497,0,-497,0,0,0,-497,0,0,0,0,0,0,0,-497,0,-497,0,0,0,0,0,0,0,-497,0,184,0,-497,0,-497,0,-497,0,-497,0,-497,0,-497,0,-497,0,0,0,-497,0,0,0,0,0,0,0,-497,0,-497,0,-497,0,-497,0,-497,0,-497,0,-497,0,0,0,0,0,-497,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-497,0,-497,0,0,0,-497,0,-497,0,-497,0,-497,0,-497,0,-497,0,
-497,0,-497,0,-497,0].concat([-497,0,-497,0,-497,0,0,0,-497,0,-497,0,0,0,-497,0,-497,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-497,0,0,0,0,0,-497,0,-497,0,0,0,-497,0,-497,0,0,0,-497,0,-497,0,-497,0,-497,0,0,0,0,0,0,0,-497,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-497,0,-497,0,-497,0,0,0,0,0,0,0,0,0,-499,0,-499,0,-499,0,0,0,-499,0,0,0,0,0,-497,0,-499,0,-499,0,0,0,0,0,-497,0,-499,0,0,0,-499,0,-499,0,-499,0,-499,0,-499,0,-499,0,-499,0,0,0,-499,
0,0,0,0,0,0,0,-499,0,-499,0,-499,0,-499,0,-499,0,-499,0,-499,0,0,0,0,0,-499,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-499,0,-499,0,0,0,-499,0,-499,0,-499,0,-499,0,-499,0,-499,0,-499,0,-499,0,-499,0,-499,0,-499,0,-499,0,0,0,-499,0,-499,0,0,0,-499,0,-499,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-499,0,0,0,0,0,-499,0,-499,0,0,0,-499,0,-499,0,0,0,-499,0,-499,0,-499,0,-499,0,0,0,0,0,0,0,-499,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-499,0,-499,0,-499,
0,0,0,0,0,0,0,0,0,-498,0,-498,0,-498,0,0,0,-498,0,0,0,0,0,-499,0,-498,0,-498,0,0,0,0,0,-499,0,-498,0,0,0,-498,0,-498,0,-498,0,-498,0,-498,0,-498,0,-498,0,0,0,-498,0,0,0,0,0,0,0,-498,0,-498,0,-498,0,-498,0,-498,0,-498,0,-498,0,0,0,0,0,-498,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-498,0,-498,0,0,0,-498,0,-498,0,-498,0,-498,0,-498,0,-498,0,-498,0,-498,0,-498,0,-498,0,-498,0,-498,0,0,0,-498,0,-498,0,0,0,-498,0,-498,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-498,0,0,0,0,0,-498,
0,-498,0,0,0,-498,0,-498,0,0,0,-498,0,-498,0,-498,0,-498,0,0,0,0,0,0,0,-498,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-498,0,-498,0,-498,0,0,0,0,0,0,0,0,0,-500,0,-500,0,-500,0,0,0,-500,0,0,0,0,0,-498,0,-500,0,-500,0,0,0,0,0,-498,0,-500,0,0,0,-500,0,-500,0,-500,0,-500,0,-500,0,-500,0,-500,0,0,0,0,0,0,0,0,0,0,0,-500,0,-500,0,-500,0,-500,0,-500,0,-500,0,-500,0,0,0,0,0,-500,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-500,0,-500,0,0,0,-500,0,-500,0,-500,0,-500,0,-500,0,-500,0,-500,0,-500,
0,-500,0,-500,0,-500,0,-500,0,0,0,-500,0,-500,0,0,0,-500,0,-500,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-500,0,704,0,0,0,-500,0,-500,0,0,0,-500,0,-500,0,0,0,-500,0,-500,0,-500,0,-500,0,0,0,0,0,0,0,-500,0,0,0,0,0,0,0,-97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-501,0,-501,0,-501,0,0,0,-501,0,-500,0,-500,0,-500,0,-501,0,-501,0,0,0,0,0,0,0,-501,0,0,0,-501,0,-501,0,-501,0,-501,0,-501,0,-501,0,-501,0,0,0,0,0,-500,0,0,0,0,0,-501,0,-501,0,-501,0,-501,0,-501,0,-501,0,-501,0,0,0,0,
0,-501,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-501,0,-501,0,0,0,-501,0,-501,0,-501,0,-501,0,-501,0,-501,0,-501,0,-501,0,-501,0,-501,0,-501,0,-501,0,0,0,-501,0,-501,0,0,0,-501,0,-501,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-501,0,705,0,0,0,-501,0,-501,0,0,0,-501,0,-501,0,0,0,-501,0,-501,0,-501,0,-501,0,0,0,0,0,0,0,-501,0,0,0,0,0,0,0,-99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-248,0,-248,0,-248,0,0,0,-248,0,-501,0,-501,0,-501,0,-248,0,-248,0,0,0,0,0,0,0,-248,0,0,0,-248,0,-248,0,
-248,0,-248,0,-248,0,-248,0,-248,0,0,0,0,0,-501,0,0,0,0,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,0,0,0,0,-248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-248,0,-248,0,0,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,0,0,-248,0,-248,0,0,0,-248,0,-248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-248,0,0,0,0,0,-248,0,-248,0,0,0,-248,0,-248,0,0,0,-248,0,-248,0,-248,0,-248,0,0,0,0,0,0,0,-248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,-248,0,-248,0,-248,0,0,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,0,0,0,0,0,0,-248,0,0,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,0,0,0,0,243,0,0,0,0,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,0,0,0,0,-248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-248,0,-248,0,0,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,-248,0,0,0,-248,0,-248,0,0,0,-248,0,-248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-248,0,0,0,0,0,-248,0,-248,0,0,
0,-248,0,-248,0,0,0,-248,0,-248,0,-248,0,-248,0,0,0,0,0,0,0,-248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-502,0,-502,0,-502,0,0,0,-502,0,-248,0,-248,0,-248,0,-502,0,-502,0,0,0,0,0,0,0,-502,0,0,0,-502,0,-502,0,-502,0,-502,0,-502,0,-502,0,-502,0,0,0,0,0,246,0,0,0,0,0,-502,0,-502,0,-502,0,-502,0,-502,0,-502,0,-502,0,0,0,0,0,-502,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-502,0,-502,0,0,0,-502,0,-502,0,-502,0,-502,0,-502,0,-502,0,-502,0,-502,0,-502,0,-502,0,-502,0,-502,0,0,0,-502,0,-502,0,0,0,-502,0,-502,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-502,0,0,0,0,0,-502,0,-502,0,0,0,-502,0,-502,0,0,0,-502,0,-502,0,-502,0,-502,0,0,0,0,0,0,0,-502,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-503,0,-503,0,-503,0,0,0,-503,0,-502,0,-502,0,-502,0,-503,0,-503,0,0,0,0,0,0,0,-503,0,0,0,-503,0,-503,0,-503,0,-503,0,-503,0,-503,0,-503,0,0,0,0,0,-502,0,0,0,0,0,-503,0,-503,0,-503,0,-503,0,-503,0,-503,0,-503,0,0,0,0,0,-503,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-503,0,-503,0,0,0,-503,0,-503,
0,-503,0,-503,0,-503,0,-503,0,-503,0,-503,0,-503,0,-503,0,-503,0,-503,0,0,0,-503,0,-503,0,0,0,-503,0,-503,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-503,0,0,0,0,0,-503,0,-503,0,0,0,-503,0,-503,0,0,0,-503,0,-503,0,-503,0,-503,0,0,0,0,0,0,0,-503,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,-503,0,-503,0,-503,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,-503,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,277,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,104,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,278,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,316,0,317,0,318,0,319,0,320,0,321,0,322,0,323,0,324,0,325,0,326,0,327,0,328,0,0,0,0,0,329,0,330,0,0,0,0,0,0,0,0,0,277,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,331,0,0,0,332,0,333,0,334,0,335,0,336,0,337,0,338,0,339,0,340,0,341,0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,495,0,113,0,114,0,115,0,116,0,117,0,118,0,119,
0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,0,0,0,0,0,0,137,0,138,0,139,0,190,0,191,0,192,0,193,0,144,0,145,0,146,0,0,0,0,0,0,0,0,0,0,0,147,0,148,0,149,0,194,0,195,0,152,0,196,0,154,0,284,0,285,0,197,0,286,0,0,0,0,0,0,0,0,0,0,0,287,0,0,0,0,0,0,0,0,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,288,0,0,0,0,0,0,
0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,0,0,0,0,0,0,137,0,138,0,139,0,190,0,191,0,192,0,193,0,144,0,145,0,146,0,0,0,0,0,0,0,0,0,0,0,147,0,148,0,149,0,194,0,195,0,152,0,196,0,154,0,284,0,285,0,197,0,286,0,0,0,0,0,0,0,0,0,0,0,287,0,0,0,0,0,0,0,0,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,
165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,373,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,0,0,0,0,0,0,137,0,138,0,139,0,190,0,191,0,192,0,193,0,144,0,145,0,146,0,0,0,0,0,0,0,0,0,0,0,147,0,148,0,149,0,194,0,195,0,152,0,196,0,154,
0,0,0,0,0,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,0,0,0,0,0,0,137,
0,138,0,139,0,190,0,191,0,192,0,193,0,144,0,145,0,146,0,0,0,0,0,0,0,0,0,0,0,147,0,148,0,149,0,194,0,195,0,152,0,196,0,154,0,0,0,0,0,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,
0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,58,0,59,0,12,0,0,0,
13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,58,0,59,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,
18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,229,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,230,0,231,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,
0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,229,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,599,0,231,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,
0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,229,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,230,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,
0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,229,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,231,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,229,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,599,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,229,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,
0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,489,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,
0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,230,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,
0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,489,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,
0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,752,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,599,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,58,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,
0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,99,0,34,0,35,0,36,0,100,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,0,0,0,0,0,102,0,0,0,0,0,103,0,50,0,0,
0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,104,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,222,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,
0,56,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,104,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,277,0,0,0,0,0,312,0,50,0,0,0,51,0,52,0,0,0,313,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,
0,0,10,0,11,0,0,0,0,0,0,0,12,0,104,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,99,0,34,0,35,0,36,0,100,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,104,0,13,0,14,
0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,277,0,0,0,0,0,312,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,104,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,
0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,836,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,104,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,
98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,862,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,538,0,539,0,0,0,0,0,540,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,316,0,317,0,318,0,319,0,320,
0,321,0,322,0,0,0,171,0,325,0,326,0,0,0,0,0,0,0,0,0,329,0,330,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,559,0,531,0,0,0,0,0,560,0,332,0,333,0,334,0,335,0,336,0,337,0,338,0,339,0,340,0,341,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,
179,0,180,0,181,0,0,0,182,0,183,0,0,0,544,0,539,0,0,0,0,0,545,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,579,0,531,0,0,0,0,0,580,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,
162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,582,0,539,0,0,0,0,0,583,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,592,0,531,0,0,0,0,0,593,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,595,0,539,0,0,0,0,0,596,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,620,0,531,0,0,0,0,0,621,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,623,0,539,0,0,0,0,0,624,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,
0,0,182,0,183,0,0,0,901,0,531,0,0,0,0,0,902,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,904,0,539,0,0,0,0,0,905,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,
0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,912,0,531,0,0,0,0,0,913,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,544,0,539,0,0,0,0,0,545,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,316,0,317,0,318,0,319,0,320,0,321,0,322,0,323,0,324,0,325,0,326,0,
-524,0,-524,0,0,0,0,0,329,0,330,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]).concat([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,332,0,333,0,334,0,335,0,336,0,337,0,338,0,339,0,340,0,341,0]),["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0].concat(["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0]).concat(["i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0]),ALLOC_STATIC);_yysyntax_error_yyunexpected=allocate([115,121,110,116,97,120,32,101,114,114,111,114,44,32,117,110,101,120,112,101,99,116,101,100,32,37,115,0],"i8",ALLOC_STATIC);_yysyntax_error_yyor=allocate([32,111,114,32,37,115,0],"i8",ALLOC_STATIC);
_yysyntax_error_yyexpecting=allocate([44,32,101,120,112,101,99,116,105,110,103,32,37,115,0],"i8",ALLOC_STATIC);
_yystos=allocate([0,0,145,0,146,0,0,0,1,0,3,0,4,0,5,0,6,0,7,0,11,0,12,0,16,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,39,0,45,0,46,0,47,0,48,0,49,0,51,0,52,0,53,0,54,0,55,0,56,0,58,0,59,0,60,0,61,0,62,0,64,0,65,0,67,0,68,0,87,0,90,0,91,0,93,0,94,0,96,0,98,0,99,0,103,0,120,0,121,0,122,0,147,0,148,0,149,0,154,0,156,0,157,0,159,0,160,0,163,0,164,0,166,0,167,0,168,0,170,0,171,0,181,0,194,0,212,0,231,0,232,0,242,0,243,0,247,0,248,0,249,0,251,0,252,0,253,0,254,0,255,0,278,0,
290,0,149,0,21,0,22,0,30,0,31,0,32,0,39,0,51,0,55,0,84,0,87,0,90,0,120,0,172,0,173,0,194,0,212,0,252,0,255,0,278,0,173,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,55,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,78,0,79,0,82,0,83,0,84,0,85,0,96,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,121,0,122,0,139,0,174,0,179,0,180,
0,254,0,273,0,33,0,34,0,35,0,36,0,48,0,49,0,51,0,55,0,99,0,174,0,175,0,177,0,249,0,195,0,87,0,157,0,158,0,171,0,212,0,252,0,253,0,255,0,158,0,142,0,143,0,158,0,282,0,287,0,288,0,289,0,199,0,201,0,87,0,164,0,171,0,212,0,217,0,252,0,255,0,57,0,96,0,97,0,121,0,163,0,181,0,182,0,187,0,190,0,192,0,276,0,277,0,187,0,187,0,139,0,188,0,189,0,139,0,184,0,188,0,139,0,283,0,288,0,175,0,150,0,134,0,181,0,212,0,181,0,55,0,1,0,90,0,152,0,153,0,154,0,165,0,166,0,290,0,157,0,197,0,183,0,192,0,276,0,290,0,182,0,275,
0,276,0,290,0,87,0,138,0,170,0,212,0,252,0,255,0,198,0,53,0,54,0,56,0,62,0,103,0,174,0,250,0,62,0,63,0,244,0,58,0,59,0,159,0,181,0,181,0,282,0,289,0,40,0,41,0,42,0,43,0,44,0,37,0,38,0,28,0,229,0,107,0,138,0,90,0,96,0,167,0,107,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,84,0,85,0,108,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,86,0,136,0,137,0,86,0,137,0,281,0,26,0,134,0,233,0,88,0,88,0,184,0,188,0,233,0,157,0,51,0,55,0,172,0,58,0,59,0,1,0,111,0,256,0,287,
0,86,0,136,0,137,0,208,0,274,0,209,0,281,0,103,0,138,0,151,0,152,0,55,0,13,0,213,0,287,0,107,0,86,0,136,0,137,0,88,0,88,0,213,0,282,0,17,0,236,0,142,0,158,0,158,0,55,0,86,0,136,0,137,0,25,0,182,0,182,0,182,0,89,0,138,0,191,0,290,0,138,0,191,0,187,0,283,0,284,0,187,0,186,0,187,0,192,0,276,0,290,0,157,0,284,0,157,0,155,0,134,0,152,0,86,0,137,0,88,0,154,0,165,0,140,0,282,0,289,0,284,0,196,0,284,0,141,0,138,0,286,0,288,0,138,0,286,0,135,0,286,0,55,0,167,0,168,0,169,0,138,0,86,0,136,0,137,0,51,0,53,0,
54,0,55,0,56,0,90,0,96,0,97,0,114,0,117,0,139,0,227,0,259,0,260,0,261,0,262,0,263,0,264,0,267,0,268,0,269,0,270,0,271,0,62,0,244,0,245,0,62,0,63,0,69,0,69,0,149,0,158,0,158,0,158,0,158,0,154,0,157,0,157,0,230,0,96,0,159,0,182,0,192,0,193,0,165,0,138,0,170,0,138,0,156,0,159,0,171,0,181,0,182,0,193,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,51,0,52,0,55,0,179,0,184,0,279,0,280,0,186,0,
51,0,52,0,55,0,179,0,184,0,279,0,51,0,55,0,279,0,235,0,234,0,159,0,181,0,159,0,181,0,95,0,161,0,206,0,287,0,257,0,205,0,51,0,55,0,172,0,279,0,186,0,279,0,151,0,157,0,139,0,258,0,259,0,210,0,178,0,10,0,8,0,238,0,290,0,152,0,13,0,181,0,51,0,55,0,186,0,51,0,55,0,152,0,236,0,192,0,10,0,27,0,214,0,287,0,214,0,51,0,55,0,186,0,51,0,55,0,203,0,182,0,96,0,182,0,190,0,276,0,277,0,284,0,140,0,284,0,138,0,138,0,284,0,175,0,147,0,135,0,181,0,284,0,154,0,284,0,276,0,167,0,169,0,51,0,55,0,186,0,51,0,55,0,107,0,
51,0,90,0,96,0,218,0,219,0,220,0,261,0,259,0,29,0,105,0,228,0,138,0,272,0,290,0,138,0,272,0,51,0,138,0,272,0,51,0,62,0,152,0,246,0,181,0,181,0,77,0,112,0,222,0,223,0,290,0,182,0,138,0,284,0,169,0,138,0,107,0,44,0,283,0,88,0,88,0,184,0,188,0,283,0,285,0,88,0,88,0,184,0,185,0,188,0,290,0,185,0,188,0,222,0,222,0,44,0,162,0,287,0,158,0,151,0,285,0,10,0,284,0,259,0,151,0,287,0,174,0,175,0,176,0,182,0,193,0,239,0,290,0,15,0,216,0,290,0,14,0,215,0,216,0,88,0,88,0,285,0,88,0,88,0,216,0,10,0,138,0,213,0,200,
0,202,0,285,0,158,0,182,0,191,0,276,0,135,0,286,0,285,0,182,0,220,0,138,0,261,0,138,0,284,0,224,0,283,0,152,0,152,0,262,0,267,0,269,0,271,0,263,0,264,0,269,0,263,0,135,0,152,0,51,0,221,0,224,0,263,0,265,0,266,0,269,0,271,0,152,0,96,0,182,0,169,0,181,0,109,0,159,0,181,0,159,0,181,0,161,0,141,0,88,0,159,0,181,0,159,0,181,0,161,0,233,0,229,0,152,0,152,0,181,0,222,0,207,0,287,0,10,0,284,0,10,0,211,0,89,0,240,0,290,0,152,0,9,0,241,0,290,0,158,0,10,0,88,0,10,0,182,0,152,0,152,0,152,0,214,0,138,0,284,0,
219,0,138,0,96,0,218,0,140,0,142,0,10,0,135,0,138,0,272,0,138,0,272,0,138,0,272,0,138,0,272,0,272,0,135,0,107,0,224,0,112,0,138,0,272,0,138,0,272,0,138,0,272,0,10,0,182,0,181,0,159,0,181,0,10,0,135,0,152,0,151,0,258,0,87,0,171,0,212,0,252,0,255,0,213,0,152,0,213,0,216,0,236,0,237,0,10,0,10,0,204,0,138,0,219,0,138,0,261,0,51,0,225,0,226,0,260,0,263,0,269,0,263,0,263,0,87,0,212,0,112,0,266,0,269,0,263,0,265,0,269,0,263,0,135,0,10,0,151,0,55,0,86,0,136,0,137,0,152,0,152,0,152,0,219,0,138,0,138,0,283,
0,272,0,138,0,272,0,272,0,272,0,55,0,86,0,138,0,272,0,138,0,272,0,272,0,138,0,272,0,272,0,10,0,51,0,55,0,186,0,51,0,55,0,238,0,215,0,10,0,219,0,226,0,263,0,51,0,55,0,263,0,269,0,263,0,263,0,285,0,272,0,272,0,138,0,272,0,272,0,272,0,263,0,272,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,
"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],ALLOC_STATIC);
_yyrline=allocate([0,0,996,0,996,0,996,0,1006,0,1012,0,1016,0,1020,0,1024,0,1030,0,1032,0,1031,0,1043,0,1069,0,1075,0,1079,0,1083,0,1087,0,1093,0,1093,0,1097,0,1101,0,1105,0,1109,0,1113,0,1117,0,1121,0,1126,0,1127,0,1131,0,1135,0,1139,0,1143,0,1147,0,1152,0,1156,0,1161,0,1165,0,1169,0,1173,0,1176,0,1180,0,1187,0,1188,0,1192,0,1196,0,1200,0,1204,0,1207,0,1214,0,1215,0,1218,0,1219,0,1223,0,1222,0,1235,0,1239,0,1244,0,1248,0,1253,0,1257,0,1262,0,1266,0,1270,0,1274,0,1278,0,1284,0,1288,0,1294,0,1295,
0,1301,0,1305,0,1309,0,1313,0,1317,0,1321,0,1325,0,1329,0,1333,0,1337,0,1343,0,1344,0,1350,0,1354,0,1360,0,1364,0,1370,0,1374,0,1378,0,1382,0,1386,0,1390,0,1396,0,1402,0,1409,0,1413,0,1417,0,1421,0,1425,0,1429,0,1435,0,1441,0,1448,0,1452,0,1455,0,1459,0,1463,0,1469,0,1470,0,1471,0,1472,0,1477,0,1484,0,1485,0,1488,0,1494,0,1498,0,1498,0,1504,0,1505,0,1506,0,1507,0,1508,0,1509,0,1510,0,1511,0,1512,0,1513,0,1514,0,1515,0,1516,0,1517,0,1518,0,1519,0,1520,0,1521,0,1522,0,1523,0,1524,0,1525,0,1526,0,1527,
0,1528,0,1529,0,1530,0,1531,0,1534,0,1534,0,1534,0,1535,0,1535,0,1536,0,1536,0,1536,0,1537,0,1537,0,1537,0,1537,0,1538,0,1538,0,1538,0,1539,0,1539,0,1539,0,1540,0,1540,0,1540,0,1540,0,1541,0,1541,0,1541,0,1541,0,1542,0,1542,0,1542,0,1542,0,1543,0,1543,0,1543,0,1543,0,1544,0,1544,0,1544,0,1544,0,1545,0,1545,0,1548,0,1552,0,1556,0,1560,0,1564,0,1568,0,1572,0,1576,0,1580,0,1585,0,1590,0,1595,0,1599,0,1603,0,1607,0,1611,0,1615,0,1619,0,1623,0,1627,0,1631,0,1635,0,1639,0,1643,0,1647,0,1651,0,1655,0,1659,
0,1663,0,1667,0,1671,0,1675,0,1679,0,1683,0,1687,0,1696,0,1700,0,1704,0,1708,0,1712,0,1716,0,1720,0,1724,0,1728,0,1734,0,1741,0,1742,0,1746,0,1750,0,1756,0,1762,0,1763,0,1766,0,1767,0,1768,0,1772,0,1776,0,1782,0,1786,0,1790,0,1794,0,1798,0,1804,0,1804,0,1815,0,1821,0,1825,0,1831,0,1835,0,1839,0,1843,0,1849,0,1853,0,1857,0,1863,0,1864,0,1865,0,1866,0,1867,0,1868,0,1873,0,1872,0,1883,0,1883,0,1887,0,1887,0,1891,0,1895,0,1899,0,1903,0,1907,0,1911,0,1915,0,1919,0,1923,0,1927,0,1931,0,1935,0,1939,0,1940,
0,1946,0,1945,0,1958,0,1965,0,1972,0,1972,0,1972,0,1978,0,1978,0,1978,0,1984,0,1990,0,1995,0,1997,0,1994,0,2004,0,2003,0,2016,0,2021,0,2015,0,2034,0,2033,0,2046,0,2045,0,2058,0,2059,0,2058,0,2072,0,2076,0,2080,0,2084,0,2090,0,2097,0,2098,0,2099,0,2102,0,2103,0,2106,0,2107,0,2115,0,2116,0,2122,0,2126,0,2129,0,2133,0,2139,0,2143,0,2149,0,2153,0,2157,0,2161,0,2165,0,2169,0,2173,0,2177,0,2181,0,2187,0,2191,0,2195,0,2199,0,2203,0,2207,0,2211,0,2215,0,2219,0,2223,0,2227,0,2231,0,2235,0,2239,0,2243,0,2249,
0,2250,0,2257,0,2262,0,2267,0,2274,0,2278,0,2284,0,2285,0,2288,0,2293,0,2296,0,2300,0,2306,0,2310,0,2317,0,2316,0,2329,0,2339,0,2343,0,2348,0,2355,0,2359,0,2363,0,2367,0,2371,0,2375,0,2379,0,2383,0,2387,0,2394,0,2393,0,2404,0,2403,0,2415,0,2423,0,2432,0,2435,0,2442,0,2445,0,2449,0,2450,0,2453,0,2457,0,2460,0,2464,0,2467,0,2468,0,2471,0,2472,0,2473,0,2477,0,2484,0,2483,0,2496,0,2494,0,2508,0,2511,0,2515,0,2522,0,2529,0,2530,0,2531,0,2532,0,2533,0,2537,0,2543,0,2544,0,2545,0,2549,0,2555,0,2559,0,2563,
0,2567,0,2571,0,2577,0,2583,0,2587,0,2591,0,2595,0,2599,0,2603,0,2610,0,2619,0,2620,0,2623,0,2628,0,2627,0,2636,0,2643,0,2649,0,2655,0,2659,0,2663,0,2667,0,2671,0,2675,0,2679,0,2683,0,2687,0,2691,0,2695,0,2699,0,2703,0,2707,0,2712,0,2718,0,2723,0,2728,0,2733,0,2740,0,2744,0,2751,0,2755,0,2761,0,2765,0,2771,0,2778,0,2785,0,2789,0,2795,0,2799,0,2805,0,2806,0,2809,0,2814,0,2821,0,2822,0,2825,0,2832,0,2836,0,2843,0,2848,0,2848,0,2870,0,2871,0,2877,0,2881,0,2887,0,2891,0,2897,0,2898,0,2899,0,2902,0,2903,
0,2904,0,2905,0,2908,0,2909,0,2910,0,2913,0,2914,0,2917,0,2918,0,2921,0,2922,0,2925,0,2928,0,2931,0,2932,0,2933,0,2936,0,2937,0,2940,0,2946,0,2947,0,2951,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,
"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],ALLOC_STATIC);
_yyrhs=allocate([145,0,0,0,-1,0,-1,0,146,0,147,0,-1,0,148,0,282,0,-1,0,290,0,-1,0,149,0,-1,0,148,0,289,0,149,0,-1,0,1,0,149,0,-1,0,154,0,-1,0,-1,0,46,0,150,0,134,0,147,0,135,0,-1,0,152,0,238,0,216,0,241,0,-1,0,153,0,282,0,-1,0,290,0,-1,0,154,0,-1,0,153,0,289,0,154,0,-1,0,1,0,154,0,-1,0,-1,0,45,0,175,0,155,0,175,0,-1,0,6,0,177,0,-1,0,154,0,40,0,158,0,-1,0,154,0,41,0,158,0,-1,0,154,0,42,0,158,0,-1,0,154,0,43,0,158,0,-1,0,154,0,44,0,154,0,-1,0,47,0,134,0,152,0,135,0,-1,0,156,0,-1,0,164,0,107,0,159,0,
-1,0,253,0,88,0,159,0,-1,0,212,0,136,0,186,0,285,0,88,0,159,0,-1,0,212,0,137,0,51,0,88,0,159,0,-1,0,212,0,137,0,55,0,88,0,159,0,-1,0,212,0,86,0,55,0,88,0,159,0,-1,0,212,0,86,0,51,0,88,0,159,0,-1,0,255,0,88,0,159,0,-1,0,171,0,107,0,193,0,-1,0,164,0,107,0,182,0,-1,0,164,0,107,0,193,0,-1,0,157,0,-1,0,171,0,107,0,159,0,-1,0,171,0,107,0,156,0,-1,0,159,0,-1,0,157,0,37,0,157,0,-1,0,157,0,38,0,157,0,-1,0,39,0,283,0,157,0,-1,0,121,0,159,0,-1,0,181,0,-1,0,157,0,-1,0,163,0,-1,0,160,0,-1,0,231,0,-1,0,231,0,281,
0,279,0,188,0,-1,0,-1,0,95,0,162,0,222,0,152,0,135,0,-1,0,278,0,188,0,-1,0,278,0,188,0,161,0,-1,0,212,0,137,0,279,0,188,0,-1,0,212,0,137,0,279,0,188,0,161,0,-1,0,212,0,86,0,279,0,188,0,-1,0,212,0,86,0,279,0,188,0,161,0,-1,0,32,0,188,0,-1,0,31,0,188,0,-1,0,30,0,187,0,-1,0,21,0,187,0,-1,0,22,0,187,0,-1,0,166,0,-1,0,90,0,165,0,284,0,-1,0,166,0,-1,0,90,0,165,0,284,0,-1,0,168,0,-1,0,168,0,167,0,-1,0,168,0,96,0,170,0,-1,0,168,0,96,0,170,0,138,0,169,0,-1,0,168,0,96,0,-1,0,168,0,96,0,138,0,169,0,-1,0,96,
0,170,0,-1,0,96,0,170,0,138,0,169,0,-1,0,96,0,-1,0,96,0,138,0,169,0,-1,0,170,0,-1,0,90,0,165,0,284,0,-1,0,167,0,138,0,-1,0,168,0,167,0,138,0,-1,0,167,0,-1,0,168,0,167,0,-1,0,252,0,-1,0,212,0,136,0,186,0,285,0,-1,0,212,0,137,0,51,0,-1,0,212,0,86,0,51,0,-1,0,212,0,137,0,55,0,-1,0,212,0,86,0,55,0,-1,0,87,0,55,0,-1,0,255,0,-1,0,252,0,-1,0,212,0,136,0,186,0,285,0,-1,0,212,0,137,0,51,0,-1,0,212,0,86,0,51,0,-1,0,212,0,137,0,55,0,-1,0,212,0,86,0,55,0,-1,0,87,0,55,0,-1,0,255,0,-1,0,51,0,-1,0,55,0,-1,0,87,
0,172,0,-1,0,172,0,-1,0,212,0,86,0,172,0,-1,0,51,0,-1,0,55,0,-1,0,52,0,-1,0,179,0,-1,0,180,0,-1,0,174,0,-1,0,249,0,-1,0,175,0,-1,0,175,0,-1,0,-1,0,177,0,138,0,178,0,176,0,-1,0,112,0,-1,0,113,0,-1,0,114,0,-1,0,70,0,-1,0,71,0,-1,0,72,0,-1,0,78,0,-1,0,79,0,-1,0,110,0,-1,0,74,0,-1,0,111,0,-1,0,75,0,-1,0,73,0,-1,0,84,0,-1,0,85,0,-1,0,115,0,-1,0,116,0,-1,0,117,0,-1,0,96,0,-1,0,118,0,-1,0,119,0,-1,0,69,0,-1,0,121,0,-1,0,122,0,-1,0,67,0,-1,0,68,0,-1,0,82,0,-1,0,83,0,-1,0,48,0,-1,0,49,0,-1,0,50,0,-1,0,46,
0,-1,0,47,0,-1,0,45,0,-1,0,37,0,-1,0,7,0,-1,0,21,0,-1,0,16,0,-1,0,3,0,-1,0,5,0,-1,0,26,0,-1,0,15,0,-1,0,14,0,-1,0,10,0,-1,0,9,0,-1,0,36,0,-1,0,20,0,-1,0,25,0,-1,0,4,0,-1,0,22,0,-1,0,34,0,-1,0,39,0,-1,0,38,0,-1,0,23,0,-1,0,8,0,-1,0,24,0,-1,0,30,0,-1,0,33,0,-1,0,32,0,-1,0,13,0,-1,0,35,0,-1,0,6,0,-1,0,17,0,-1,0,31,0,-1,0,11,0,-1,0,12,0,-1,0,18,0,-1,0,19,0,-1,0,171,0,107,0,181,0,-1,0,171,0,107,0,181,0,44,0,181,0,-1,0,253,0,88,0,181,0,-1,0,253,0,88,0,181,0,44,0,181,0,-1,0,212,0,136,0,186,0,285,0,88,0,
181,0,-1,0,212,0,137,0,51,0,88,0,181,0,-1,0,212,0,137,0,55,0,88,0,181,0,-1,0,212,0,86,0,51,0,88,0,181,0,-1,0,212,0,86,0,55,0,88,0,181,0,-1,0,87,0,55,0,88,0,181,0,-1,0,255,0,88,0,181,0,-1,0,181,0,80,0,181,0,-1,0,181,0,81,0,181,0,-1,0,181,0,115,0,181,0,-1,0,181,0,116,0,181,0,-1,0,181,0,117,0,181,0,-1,0,181,0,118,0,181,0,-1,0,181,0,119,0,181,0,-1,0,181,0,69,0,181,0,-1,0,120,0,58,0,69,0,181,0,-1,0,120,0,59,0,69,0,181,0,-1,0,67,0,181,0,-1,0,68,0,181,0,-1,0,181,0,112,0,181,0,-1,0,181,0,113,0,181,0,-1,0,
181,0,114,0,181,0,-1,0,181,0,70,0,181,0,-1,0,181,0,110,0,181,0,-1,0,181,0,74,0,181,0,-1,0,181,0,111,0,181,0,-1,0,181,0,75,0,181,0,-1,0,181,0,71,0,181,0,-1,0,181,0,72,0,181,0,-1,0,181,0,73,0,181,0,-1,0,181,0,78,0,181,0,-1,0,181,0,79,0,181,0,-1,0,121,0,181,0,-1,0,122,0,181,0,-1,0,181,0,84,0,181,0,-1,0,181,0,85,0,181,0,-1,0,181,0,76,0,181,0,-1,0,181,0,77,0,181,0,-1,0,181,0,108,0,181,0,283,0,109,0,181,0,-1,0,194,0,-1,0,181,0,-1,0,290,0,-1,0,192,0,286,0,-1,0,192,0,138,0,276,0,286,0,-1,0,276,0,286,0,-1,
0,139,0,186,0,284,0,-1,0,290,0,-1,0,184,0,-1,0,290,0,-1,0,187,0,-1,0,192,0,138,0,-1,0,192,0,138,0,276,0,138,0,-1,0,276,0,138,0,-1,0,163,0,-1,0,192,0,191,0,-1,0,276,0,191,0,-1,0,192,0,138,0,276,0,191,0,-1,0,190,0,-1,0,-1,0,189,0,187,0,-1,0,97,0,182,0,-1,0,138,0,190,0,-1,0,290,0,-1,0,182,0,-1,0,96,0,182,0,-1,0,192,0,138,0,182,0,-1,0,192,0,138,0,96,0,182,0,-1,0,192,0,138,0,182,0,-1,0,192,0,138,0,96,0,182,0,-1,0,96,0,182,0,-1,0,242,0,-1,0,243,0,-1,0,247,0,-1,0,254,0,-1,0,255,0,-1,0,52,0,-1,0,-1,0,7,0,
195,0,151,0,10,0,-1,0,-1,0,91,0,157,0,196,0,284,0,-1,0,-1,0,91,0,197,0,284,0,-1,0,90,0,152,0,140,0,-1,0,212,0,86,0,55,0,-1,0,87,0,55,0,-1,0,93,0,183,0,141,0,-1,0,94,0,275,0,135,0,-1,0,30,0,-1,0,31,0,139,0,187,0,284,0,-1,0,31,0,139,0,284,0,-1,0,31,0,-1,0,39,0,139,0,157,0,284,0,-1,0,39,0,139,0,284,0,-1,0,278,0,233,0,-1,0,232,0,-1,0,232,0,233,0,-1,0,-1,0,98,0,198,0,227,0,228,0,-1,0,11,0,158,0,213,0,152,0,215,0,10,0,-1,0,12,0,158,0,213,0,152,0,216,0,10,0,-1,0,-1,0,-1,0,18,0,199,0,158,0,214,0,200,0,152,
0,10,0,-1,0,-1,0,-1,0,19,0,201,0,158,0,214,0,202,0,152,0,10,0,-1,0,16,0,158,0,282,0,236,0,10,0,-1,0,16,0,282,0,236,0,10,0,-1,0,-1,0,-1,0,20,0,217,0,25,0,203,0,158,0,214,0,204,0,152,0,10,0,-1,0,-1,0,3,0,173,0,256,0,205,0,151,0,10,0,-1,0,-1,0,-1,0,3,0,84,0,157,0,206,0,287,0,207,0,151,0,10,0,-1,0,-1,0,4,0,173,0,208,0,151,0,10,0,-1,0,-1,0,5,0,174,0,209,0,258,0,151,0,10,0,-1,0,-1,0,-1,0,5,0,273,0,281,0,210,0,174,0,211,0,258,0,151,0,10,0,-1,0,21,0,-1,0,22,0,-1,0,23,0,-1,0,24,0,-1,0,194,0,-1,0,287,0,-1,
0,13,0,-1,0,287,0,13,0,-1,0,287,0,-1,0,27,0,-1,0,216,0,-1,0,14,0,158,0,213,0,152,0,215,0,-1,0,290,0,-1,0,15,0,152,0,-1,0,171,0,-1,0,164,0,-1,0,261,0,-1,0,90,0,220,0,284,0,-1,0,218,0,-1,0,219,0,138,0,218,0,-1,0,219,0,-1,0,219,0,138,0,96,0,261,0,-1,0,219,0,138,0,96,0,261,0,138,0,219,0,-1,0,219,0,138,0,96,0,-1,0,219,0,138,0,96,0,138,0,219,0,-1,0,96,0,261,0,-1,0,96,0,261,0,138,0,219,0,-1,0,96,0,-1,0,96,0,138,0,219,0,-1,0,263,0,138,0,266,0,138,0,269,0,272,0,-1,0,263,0,138,0,266,0,138,0,269,0,138,0,263,
0,272,0,-1,0,263,0,138,0,266,0,272,0,-1,0,263,0,138,0,266,0,138,0,263,0,272,0,-1,0,263,0,138,0,269,0,272,0,-1,0,263,0,138,0,-1,0,263,0,138,0,269,0,138,0,263,0,272,0,-1,0,263,0,272,0,-1,0,266,0,138,0,269,0,272,0,-1,0,266,0,138,0,269,0,138,0,263,0,272,0,-1,0,266,0,272,0,-1,0,266,0,138,0,263,0,272,0,-1,0,269,0,272,0,-1,0,269,0,138,0,263,0,272,0,-1,0,271,0,-1,0,290,0,-1,0,223,0,-1,0,112,0,224,0,112,0,-1,0,77,0,-1,0,112,0,221,0,224,0,112,0,-1,0,283,0,-1,0,283,0,142,0,225,0,283,0,-1,0,226,0,-1,0,225,0,
138,0,226,0,-1,0,51,0,-1,0,260,0,-1,0,139,0,259,0,224,0,140,0,-1,0,259,0,-1,0,105,0,152,0,135,0,-1,0,29,0,152,0,10,0,-1,0,-1,0,28,0,230,0,222,0,152,0,10,0,-1,0,163,0,229,0,-1,0,231,0,281,0,279,0,185,0,-1,0,231,0,281,0,279,0,185,0,233,0,-1,0,231,0,281,0,279,0,188,0,229,0,-1,0,278,0,184,0,-1,0,212,0,137,0,279,0,185,0,-1,0,212,0,86,0,279,0,184,0,-1,0,212,0,86,0,280,0,-1,0,212,0,137,0,184,0,-1,0,212,0,86,0,184,0,-1,0,32,0,184,0,-1,0,32,0,-1,0,212,0,136,0,186,0,285,0,-1,0,-1,0,134,0,234,0,222,0,152,0,
135,0,-1,0,-1,0,26,0,235,0,222,0,152,0,10,0,-1,0,17,0,192,0,213,0,152,0,237,0,-1,0,216,0,-1,0,236,0,-1,0,8,0,239,0,240,0,213,0,152,0,238,0,-1,0,290,0,-1,0,182,0,-1,0,193,0,-1,0,290,0,-1,0,89,0,171,0,-1,0,290,0,-1,0,9,0,152,0,-1,0,290,0,-1,0,251,0,-1,0,248,0,-1,0,60,0,-1,0,62,0,-1,0,103,0,62,0,-1,0,103,0,244,0,62,0,-1,0,-1,0,63,0,245,0,152,0,135,0,-1,0,-1,0,244,0,63,0,246,0,152,0,135,0,-1,0,61,0,-1,0,249,0,-1,0,99,0,103,0,244,0,62,0,-1,0,99,0,250,0,-1,0,174,0,-1,0,54,0,-1,0,53,0,-1,0,56,0,-1,0,62,
0,-1,0,103,0,62,0,-1,0,58,0,-1,0,59,0,-1,0,120,0,58,0,-1,0,120,0,59,0,-1,0,51,0,-1,0,54,0,-1,0,53,0,-1,0,56,0,-1,0,55,0,-1,0,252,0,-1,0,252,0,-1,0,34,0,-1,0,33,0,-1,0,35,0,-1,0,36,0,-1,0,49,0,-1,0,48,0,-1,0,64,0,-1,0,65,0,-1,0,287,0,-1,0,-1,0,111,0,257,0,158,0,287,0,-1,0,1,0,287,0,-1,0,139,0,259,0,284,0,-1,0,259,0,287,0,-1,0,263,0,138,0,267,0,138,0,269,0,272,0,-1,0,263,0,138,0,267,0,138,0,269,0,138,0,263,0,272,0,-1,0,263,0,138,0,267,0,272,0,-1,0,263,0,138,0,267,0,138,0,263,0,272,0,-1,0,263,0,138,
0,269,0,272,0,-1,0,263,0,138,0,269,0,138,0,263,0,272,0,-1,0,263,0,272,0,-1,0,267,0,138,0,269,0,272,0,-1,0,267,0,138,0,269,0,138,0,263,0,272,0,-1,0,267,0,272,0,-1,0,267,0,138,0,263,0,272,0,-1,0,269,0,272,0,-1,0,269,0,138,0,263,0,272,0,-1,0,271,0,-1,0,-1,0,55,0,-1,0,54,0,-1,0,53,0,-1,0,56,0,-1,0,260,0,-1,0,51,0,-1,0,261,0,-1,0,90,0,220,0,284,0,-1,0,262,0,-1,0,263,0,138,0,262,0,-1,0,51,0,107,0,182,0,-1,0,51,0,107,0,212,0,-1,0,265,0,-1,0,266,0,138,0,265,0,-1,0,264,0,-1,0,267,0,138,0,264,0,-1,0,117,0,
-1,0,96,0,-1,0,268,0,51,0,-1,0,268,0,-1,0,114,0,-1,0,97,0,-1,0,270,0,51,0,-1,0,138,0,271,0,-1,0,290,0,-1,0,254,0,-1,0,-1,0,139,0,274,0,157,0,284,0,-1,0,290,0,-1,0,276,0,286,0,-1,0,277,0,-1,0,276,0,138,0,277,0,-1,0,182,0,89,0,182,0,-1,0,57,0,182,0,-1,0,51,0,-1,0,55,0,-1,0,52,0,-1,0,51,0,-1,0,55,0,-1,0,52,0,-1,0,179,0,-1,0,51,0,-1,0,52,0,-1,0,179,0,-1,0,137,0,-1,0,86,0,-1,0,-1,0,289,0,-1,0,-1,0,288,0,-1,0,283,0,140,0,-1,0,283,0,141,0,-1,0,-1,0,288,0,-1,0,138,0,-1,0,142,0,-1,0,288,0,-1,0,143,0,-1,0,
287,0,-1,0,289,0,142,0,-1,0,-1,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],ALLOC_STATIC);
_yyr2=allocate([0,2,0,2,2,1,1,3,2,1,0,5,4,2,1,1,3,2,0,4,2,3,3,3,3,3,4,1,3,3,6,5,5,5,5,3,3,3,3,1,3,3,1,3,3,3,2,1,1,1,1,1,4,0,5,2,3,4,5,4,5,2,2,2,2,2,1,3,1,3,1,2,3,5,2,4,2,4,1,3,1,3,2,3,1,2,1,4,3,3,3,3,2,1,1,4,3,3,3,3,2,1,1,1,2,1,3,1,1,1,1,1,1,1,1,1,0,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,5,3,5,6,5,5,5,5,4,3,3,3,3,3,3,3,3,3,4,4,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,6,1,1,1,2,4,2,3,1,1,1,1,2,4,2,
1,2,2,4,1,0,2,2,2,1,1,2,3,4,3,4,2,1,1,1,1,1,1,0,4,0,4,0,3,3,3,2,3,3,1,4,3,1,4,3,2,1,2,0,4,6,6,0,0,7,0,0,7,5,4,0,0,9,0,6,0,0,8,0,5,0,6,0,0,9,1,1,1,1,1,1,1,2,1,1,1,5,1,2,1,1,1,3,1,3,1,4,6,3,5,2,4,1,3,6,8,4,6,4,2,6,2,4,6,2,4,2,4,1,1,1,3,1,4,1,4,1,3,1,1,4,1,3,3,0,5,2,4,5,5,2,4,4,3,3,3,2,1,4,0,5,0,5,5,1,1,6,1,1,1,1,2,1,2,1,1,1,1,1,2,3,0,4,0,5,1,1,4,2,1,1,1,1,1,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,4,2,3,2,6,8,4,6,4,6,2,4,6,2,4,2,4,1,0,1,1,1,1,1,1,1,3,1,3,3,3,1,3,1,3,1,1,2,1,1,1,2,2,1,1,0,4,1,2,1,
3,3,2,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,2,2,0,1,1,1,1,1,1,2,0],"i8",ALLOC_STATIC);
_yyr1=allocate([0,0,144,0,146,0,145,0,147,0,148,0,148,0,148,0,148,0,149,0,150,0,149,0,151,0,152,0,153,0,153,0,153,0,153,0,155,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,156,0,156,0,157,0,157,0,157,0,157,0,157,0,157,0,158,0,159,0,159,0,160,0,160,0,162,0,161,0,163,0,163,0,163,0,163,0,163,0,163,0,163,0,163,0,163,0,163,0,163,0,164,0,164,0,165,0,165,0,166,0,166,0,166,0,166,0,166,0,166,0,166,0,166,0,166,0,166,0,167,0,167,
0,168,0,168,0,169,0,169,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,171,0,171,0,171,0,171,0,171,0,171,0,171,0,171,0,172,0,172,0,173,0,173,0,173,0,174,0,174,0,174,0,174,0,174,0,175,0,175,0,176,0,177,0,178,0,177,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,
0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,181,0,182,0,183,0,183,0,183,0,183,0,184,0,185,0,185,0,186,0,186,0,186,0,186,0,186,0,187,0,187,0,187,0,187,0,187,0,189,0,188,
0,190,0,191,0,191,0,192,0,192,0,192,0,192,0,193,0,193,0,193,0,194,0,194,0,194,0,194,0,194,0,194,0,195,0,194,0,196,0,194,0,197,0,194,0,194,0,194,0,194,0,194,0,194,0,194,0,194,0,194,0,194,0,194,0,194,0,194,0,194,0,194,0,198,0,194,0,194,0,194,0,199,0,200,0,194,0,201,0,202,0,194,0,194,0,194,0,203,0,204,0,194,0,205,0,194,0,206,0,207,0,194,0,208,0,194,0,209,0,194,0,210,0,211,0,194,0,194,0,194,0,194,0,194,0,212,0,213,0,213,0,213,0,214,0,214,0,215,0,215,0,216,0,216,0,217,0,217,0,218,0,218,0,219,0,219,0,220,
0,220,0,220,0,220,0,220,0,220,0,220,0,220,0,220,0,221,0,221,0,221,0,221,0,221,0,221,0,221,0,221,0,221,0,221,0,221,0,221,0,221,0,221,0,221,0,222,0,222,0,223,0,223,0,223,0,224,0,224,0,225,0,225,0,226,0,226,0,227,0,227,0,228,0,228,0,230,0,229,0,231,0,231,0,231,0,231,0,232,0,232,0,232,0,232,0,232,0,232,0,232,0,232,0,232,0,234,0,233,0,235,0,233,0,236,0,237,0,237,0,238,0,238,0,239,0,239,0,239,0,240,0,240,0,241,0,241,0,242,0,242,0,243,0,243,0,243,0,243,0,245,0,244,0,246,0,244,0,247,0,248,0,248,0,249,0,250,
0,250,0,250,0,250,0,250,0,250,0,251,0,251,0,251,0,251,0,252,0,252,0,252,0,252,0,252,0,253,0,254,0,254,0,254,0,254,0,254,0,254,0,254,0,255,0,255,0,256,0,257,0,256,0,256,0,258,0,258,0,259,0,259,0,259,0,259,0,259,0,259,0,259,0,259,0,259,0,259,0,259,0,259,0,259,0,259,0,259,0,260,0,260,0,260,0,260,0,261,0,261,0,262,0,262,0,263,0,263,0,264,0,265,0,266,0,266,0,267,0,267,0,268,0,268,0,269,0,269,0,270,0,270,0,271,0,272,0,272,0,273,0,274,0,273,0,275,0,275,0,276,0,276,0,277,0,277,0,278,0,278,0,278,0,279,0,279,
0,279,0,279,0,280,0,280,0,280,0,281,0,281,0,282,0,282,0,283,0,283,0,284,0,285,0,286,0,286,0,286,0,287,0,287,0,288,0,289,0,289,0,290,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],ALLOC_STATIC);
_yyprhs=allocate([0,0,0,0,3,0,4,0,7,0,10,0,12,0,14,0,18,0,21,0,23,0,24,0,30,0,35,0,38,0,40,0,42,0,46,0,49,0,50,0,55,0,58,0,62,0,66,0,70,0,74,0,78,0,83,0,85,0,89,0,93,0,100,0,106,0,112,0,118,0,124,0,128,0,132,0,136,0,140,0,142,0,146,0,150,0,152,0,156,0,160,0,164,0,167,0,169,0,171,0,173,0,175,0,177,0,182,0,183,0,189,0,192,0,196,0,201,0,207,0,212,0,218,0,221,0,224,0,227,0,230,0,233,0,235,0,239,0,241,0,245,0,247,0,250,0,254,0,260,0,263,0,268,0,271,0,276,0,278,0,282,0,284,0,288,0,291,0,295,0,297,0,300,
0,302,0,307,0,311,0,315,0,319,0,323,0,326,0,328,0,330,0,335,0,339,0,343,0,347,0,351,0,354,0,356,0,358,0,360,0,363,0,365,0,369,0,371,0,373,0,375,0,377,0,379,0,381,0,383,0,385,0,387,0,388,0,393,0,395,0,397,0,399,0,401,0,403,0,405,0,407,0,409,0,411,0,413,0,415,0,417,0,419,0,421,0,423,0,425,0,427,0,429,0,431,0,433,0,435,0,437,0,439,0,441,0,443,0,445,0,447,0,449,0,451,0,453,0,455,0,457,0,459,0,461,0,463,0,465,0,467,0,469,0,471,0,473,0,475,0,477,0,479,0,481,0,483,0,485,0,487,0,489,0,491,0,493,0,495,0,497,
0,499,0,501,0,503,0,505,0,507,0,509,0,511,0,513,0,515,0,517,0,519,0,521,0,523,0,525,0,527,0,529,0,533,0,539,0,543,0,549,0,556,0,562,0,568,0,574,0,580,0,585,0,589,0,593,0,597,0,601,0,605,0,609,0,613,0,617,0,621,0,626,0,631,0,634,0,637,0,641,0,645,0,649,0,653,0,657,0,661,0,665,0,669,0,673,0,677,0,681,0,685,0,689,0,692,0,695,0,699,0,703,0,707,0,711,0,718,0,720,0,722,0,724,0,727,0,732,0,735,0,739,0,741,0,743,0,745,0,747,0,750,0,755,0,758,0,760,0,763,0,766,0,771,0,773,0,774,0,777,0,780,0,783,0,785,0,787,
0,790,0,794,0,799,0,803,0,808,0,811,0,813,0,815,0,817,0,819,0,821,0,823,0,824,0,829,0,830,0,835,0,836,0,840,0,844,0,848,0,851,0,855,0,859,0,861,0,866,0,870,0,872,0,877,0,881,0,884,0,886,0,889,0,890,0,895,0,902,0,909,0,910,0,911,0,919,0,920,0,921,0,929,0,935,0,940,0,941,0,942,0,952,0,953,0,960,0,961,0,962,0,971,0,972,0,978,0,979,0,986,0,987,0,988,0,998,0,1E3,0,1002,0,1004,0,1006,0,1008,0,1010,0,1012,0,1015,0,1017,0,1019,0,1021,0,1027,0,1029,0,1032,0,1034,0,1036,0,1038,0,1042,0,1044,0,1048,0,1050,0,
1055,0,1062,0,1066,0,1072,0,1075,0,1080,0,1082,0,1086,0,1093,0,1102,0,1107,0,1114,0,1119,0,1122,0,1129,0,1132,0,1137,0,1144,0,1147,0,1152,0,1155,0,1160,0,1162,0,1164,0,1166,0,1170,0,1172,0,1177,0,1179,0,1184,0,1186,0,1190,0,1192,0,1194,0,1199,0,1201,0,1205,0,1209,0,1210,0,1216,0,1219,0,1224,0,1230,0,1236,0,1239,0,1244,0,1249,0,1253,0,1257,0,1261,0,1264,0,1266,0,1271,0,1272,0,1278,0,1279,0,1285,0,1291,0,1293,0,1295,0,1302,0,1304,0,1306,0,1308,0,1310,0,1313,0,1315,0,1318,0,1320,0,1322,0,1324,0,1326,
0,1328,0,1331,0,1335,0,1336,0,1341,0,1342,0,1348,0,1350,0,1352,0,1357,0,1360,0,1362,0,1364,0,1366,0,1368,0,1370,0,1373,0,1375,0,1377,0,1380,0,1383,0,1385,0,1387,0,1389,0,1391,0,1393,0,1395,0,1397,0,1399,0,1401,0,1403,0,1405,0,1407,0,1409,0,1411,0,1413,0,1415,0,1416,0,1421,0,1424,0,1428,0,1431,0,1438,0,1447,0,1452,0,1459,0,1464,0,1471,0,1474,0,1479,0,1486,0,1489,0,1494,0,1497,0,1502,0,1504,0,1505,0,1507,0,1509,0,1511,0,1513,0,1515,0,1517,0,1519,0,1523,0,1525,0,1529,0,1533,0,1537,0,1539,0,1543,0,1545,
0,1549,0,1551,0,1553,0,1556,0,1558,0,1560,0,1562,0,1565,0,1568,0,1570,0,1572,0,1573,0,1578,0,1580,0,1583,0,1585,0,1589,0,1593,0,1596,0,1598,0,1600,0,1602,0,1604,0,1606,0,1608,0,1610,0,1612,0,1614,0,1616,0,1618,0,1620,0,1621,0,1623,0,1624,0,1626,0,1629,0,1632,0,1633,0,1635,0,1637,0,1639,0,1641,0,1643,0,1645,0,1648,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],ALLOC_STATIC);
_yypgoto=allocate([-728,0,-728,0,-728,0,367,0,-728,0,28,0,-728,0,-352,0,282,0,-728,0,87,0,-728,0,-289,0,869,0,41,0,-52,0,-728,0,-484,0,-728,0,-5,0,778,0,-167,0,-10,0,-69,0,-277,0,-391,0,-18,0,52,0,-68,0,792,0,9,0,-14,0,-728,0,-728,0,-728,0,-195,0,-728,0,1049,0,187,0,-728,0,-15,0,258,0,-325,0,78,0,-9,0,-728,0,-359,0,-231,0,89,0,-279,0,4,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,640,0,-207,0,-368,0,-80,0,-496,0,-728,0,-624,
0,-674,0,180,0,-728,0,-464,0,-728,0,-572,0,-728,0,-74,0,-728,0,-728,0,134,0,-728,0,-728,0,-728,0,-75,0,-728,0,-728,0,-366,0,-728,0,-65,0,-728,0,-728,0,-728,0,-728,0,-728,0,528,0,-728,0,-728,0,-728,0,-728,0,15,0,-728,0,-728,0,1217,0,1437,0,803,0,1529,0,-728,0,-728,0,40,0,-262,0,-727,0,2,0,-569,0,-489,0,-592,0,-715,0,3,0,185,0,-728,0,-506,0,-728,0,-259,0,1024,0,-728,0,-728,0,-728,0,21,0,-377,0,2003,0,-282,0,-728,0,645,0,-16,0,-25,0,-136,0,-535,0,-244,0,8,0,18,0,-28,0,-2,0],["i16",0,"i16",0,"i16",0,
"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],ALLOC_STATIC);
_yypact=allocate([-728,0,129,0,2484,0,-728,0,6830,0,8542,0,8851,0,4938,0,6590,0,-728,0,8221,0,8221,0,4419,0,-728,0,-728,0,8645,0,7044,0,7044,0,-728,0,-728,0,7044,0,5656,0,5768,0,-728,0,-728,0,-728,0,-728,0,220,0,6590,0,-728,0,23,0,-728,0,-728,0,5060,0,5184,0,-728,0,-728,0,5308,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,8328,0,8328,0,205,0,3736,0,8221,0,7258,0,7579,0,6104,0,-728,0,6350,0,48,0,291,0,8435,0,8328,0,-728,0,294,0,-728,0,862,0,-728,0,323,0,-728,0,-728,0,163,0,26,0,-728,0,
139,0,8748,0,-728,0,160,0,6211,0,173,0,200,0,22,0,91,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,30,0,202,0,-728,0,32,0,93,0,-728,0,-728,0,-728,0,-728,0,-728,0,174,0,183,0,188,0,497,0,529,0,8221,0,333,0,3879,0,386,0,-728,0,39,0,-728,0,218,0,-728,0,-728,0,93,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,57,0,128,0,182,0,193,0,-728,0,-728,0,-728,0,-728,
0,-728,0,-728,0,229,0,239,0,-728,0,265,0,-728,0,270,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,22,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,6470,0,-728,0,-728,0,257,0,-728,0,2945,0,343,0,323,0,53,0,334,0,253,0,196,0,361,0,219,0,53,0,-728,0,-728,0,294,0,434,0,-728,0,-728,0,319,0,8221,0,8221,0,432,
0,-728,0,-728,0,339,0,476,0,97,0,105,0,8328,0,8328,0,8328,0,8328,0,-728,0,6211,0,409,0,-728,0,-728,0,365,0,380,0,-728,0,-728,0,-728,0,4293,0,-728,0,7044,0,7044,0,-728,0,-728,0,4547,0,8221,0,-728,0,-728,0,381,0,4022,0,-728,0,354,0,442,0,37,0,6937,0,3736,0,408,0,294,0,862,0,400,0,446,0,-728,0,323,0,400,0,417,0,10,0,140,0,-728,0,409,0,424,0,140,0,-728,0,505,0,8954,0,427,0,356,0,368,0,373,0,700,0,-728,0,-728,0,-728,0,-728,0,418,0,-728,0,-728,0,-728,0,-728,0,422,0,498,0,499,0,-728,0,-728,0,-728,0,-728,
0,4673,0,8221,0,8221,0,8221,0,8221,0,6937,0,8221,0,8221,0,-728,0,-728,0,7686,0,-728,0,3736,0,6214,0,440,0,7686,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,8328,0,2347,0,7044,0,9214,0,-728,0,-728,0,10090,0,-728,0,-728,0,-728,0,8435,0,8435,0,-728,0,475,0,-728,0,323,0,-728,0,377,0,-728,0,-728,0,-728,0,294,0,-728,0,-728,0,-728,0,9287,0,7044,0,9360,0,2945,0,8221,0,918,0,
-728,0,522,0,-728,0,575,0,584,0,308,0,-728,0,3079,0,583,0,8328,0,9433,0,7044,0,9506,0,8328,0,8328,0,3337,0,434,0,7793,0,589,0,-728,0,43,0,43,0,133,0,9579,0,7044,0,9652,0,-728,0,-728,0,-728,0,-728,0,8328,0,7151,0,-728,0,-728,0,7365,0,-728,0,400,0,462,0,-728,0,-728,0,400,0,-728,0,465,0,467,0,-728,0,142,0,-728,0,-728,0,6590,0,3465,0,471,0,9433,0,9506,0,8328,0,862,0,400,0,-728,0,-728,0,4798,0,469,0,400,0,-728,0,-728,0,7472,0,-728,0,-728,0,7579,0,-728,0,-728,0,-728,0,377,0,139,0,8954,0,-728,0,8954,0,9725,
0,7044,0,9798,0,507,0,-728,0,-728,0,-728,0,-728,0,1138,0,-728,0,-728,0,-728,0,-728,0,728,0,92,0,-728,0,-728,0,-728,0,-728,0,478,0,-728,0,479,0,570,0,485,0,581,0,-728,0,-728,0,444,0,4022,0,-728,0,-728,0,8328,0,8328,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,-728,0,64,0,8328,0,-728,0,488,0,501,0,-728,0,400,0,8954,0,502,0,-728,0,-728,0,-728,0,530,0,1069,0,-728,0,-728,0,442,0,1131,0,1131,0,1131,0,1131,0,959,0,959,0,9233,0,2083,0,1131,0,1131,0,10144,0,10144,0,732,0,732,0,2781,0,959,0,959,0,1042,
0,1042,0,1048,0,47,0,47,0,442,0,442,0,442,0,2661,0,5880,0,2802,0,5992,0,-728,0,183,0,-728,0,400,0,412,0,-728,0,428,0,-728,0,-728,0,5768,0,-728,0,-728,0,1547,0,64,0,64,0,-728,0,2029,0,-728,0,6211,0,-728,0,-728,0,294,0,-728,0,8221,0,2945,0,538,0,-1,0,-728,0,183,0,400,0,183,0,631,0,142,0,728,0,2945,0,294,0,6710,0,6590,0,-728,0,7900,0,628,0,-728,0,518,0,-728,0,2177,0,5432,0,5544,0,400,0,340,0,345,0,628,0,637,0,50,0,-728,0,-728,0,-728,0,-728,0,-728,0,72,0,74,0,400,0,135,0,136,0,8221,0,-728,0,8328,0,409,
0,-728,0,380,0,-728,0,-728,0,-728,0,-728,0,7151,0,7365,0,-728,0,-728,0,513,0,-728,0,6211,0,67,0,862,0,-728,0,140,0,440,0,-728,0,538,0,-1,0,400,0,315,0,322,0,8328,0,-728,0,1138,0,416,0,-728,0,511,0,400,0,-728,0,400,0,4165,0,4022,0,-728,0,728,0,-728,0,-728,0,728,0,-728,0,-728,0,718,0,-728,0,-728,0,-728,0,519,0,4022,0,442,0,442,0,-728,0,903,0,4165,0,-728,0,-728,0,515,0,8007,0,-728,0,-728,0,8954,0,8435,0,8328,0,549,0,8435,0,8435,0,-728,0,475,0,526,0,473,0,8435,0,8435,0,-728,0,-728,0,475,0,-728,0,91,0,
163,0,4165,0,4022,0,8328,0,64,0,-728,0,294,0,649,0,-728,0,-728,0,-728,0,400,0,660,0,-728,0,-728,0,-728,0,-728,0,488,0,-728,0,582,0,-728,0,3608,0,664,0,-728,0,8221,0,668,0,-728,0,8328,0,8328,0,389,0,8328,0,8328,0,671,0,-728,0,8114,0,3208,0,4165,0,4165,0,137,0,43,0,-728,0,-728,0,545,0,-728,0,-728,0,388,0,-728,0,400,0,873,0,546,0,1200,0,-728,0,548,0,543,0,682,0,560,0,-728,0,561,0,564,0,-728,0,565,0,-728,0,572,0,565,0,-728,0,579,0,608,0,400,0,604,0,587,0,-728,0,588,0,590,0,-728,0,726,0,8328,0,601,0,-728,
0,6211,0,8328,0,-728,0,6211,0,-728,0,6211,0,-728,0,-728,0,8435,0,-728,0,6211,0,-728,0,6211,0,-728,0,-728,0,-728,0,730,0,610,0,6211,0,4022,0,2945,0,-728,0,-728,0,-728,0,-728,0,918,0,9057,0,53,0,-728,0,-728,0,4165,0,-728,0,-728,0,53,0,-728,0,8328,0,-728,0,-728,0,230,0,738,0,739,0,-728,0,7365,0,-728,0,614,0,873,0,667,0,-728,0,-728,0,653,0,-728,0,-728,0,728,0,-728,0,718,0,-728,0,718,0,-728,0,718,0,-728,0,-728,0,-728,0,9160,0,646,0,-728,0,934,0,-728,0,934,0,-728,0,718,0,-728,0,-728,0,621,0,6211,0,-728,
0,6211,0,-728,0,-728,0,626,0,752,0,2945,0,708,0,-728,0,393,0,368,0,373,0,2945,0,-728,0,3079,0,-728,0,-728,0,-728,0,-728,0,-728,0,4165,0,873,0,614,0,873,0,629,0,-728,0,149,0,-728,0,-728,0,565,0,630,0,565,0,565,0,715,0,403,0,-728,0,638,0,639,0,565,0,-728,0,642,0,565,0,-728,0,-728,0,765,0,377,0,9871,0,7044,0,9944,0,584,0,518,0,768,0,614,0,873,0,653,0,-728,0,-728,0,718,0,-728,0,-728,0,-728,0,-728,0,10017,0,934,0,-728,0,718,0,-728,0,-728,0,718,0,-728,0,-728,0,-728,0,114,0,-1,0,400,0,61,0,77,0,-728,0,-728,
0,-728,0,614,0,-728,0,565,0,648,0,650,0,565,0,654,0,565,0,565,0,79,0,-728,0,-728,0,718,0,-728,0,-728,0,-728,0,565,0,-728,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,
"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],ALLOC_STATIC);
_yydefgoto=allocate([-1,0,1,0,2,0,60,0,61,0,62,0,253,0,375,0,376,0,262,0,263,0,420,0,64,0,65,0,206,0,66,0,67,0,554,0,681,0,68,0,69,0,264,0,70,0,71,0,72,0,445,0,73,0,207,0,105,0,106,0,199,0,200,0,693,0,201,0,571,0,186,0,187,0,75,0,235,0,269,0,534,0,673,0,412,0,413,0,244,0,245,0,237,0,404,0,414,0,493,0,76,0,203,0,432,0,268,0,283,0,220,0,713,0,221,0,714,0,597,0,849,0,558,0,555,0,775,0,369,0,371,0,570,0,780,0,256,0,379,0,589,0,702,0,703,0,226,0,629,0,630,0,631,0,744,0,653,0,654,0,729,0,855,0,856,0,461,
0,636,0,309,0,488,0,78,0,79,0,355,0,548,0,547,0,390,0,846,0,574,0,696,0,782,0,786,0,80,0,81,0,293,0,475,0,648,0,82,0,83,0,84,0,290,0,85,0,209,0,210,0,88,0,211,0,364,0,557,0,568,0,569,0,463,0,464,0,465,0,466,0,467,0,747,0,748,0,468,0,469,0,470,0,471,0,736,0,638,0,189,0,370,0,274,0,415,0,240,0,90,0,562,0,536,0,347,0,216,0,409,0,410,0,669,0,436,0,380,0,251,0,219,0,266,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0],ALLOC_STATIC);
_yydefact=allocate([2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,266,0,0,0,0,0,509,0,290,0,293,0,0,0,313,0,314,0,315,0,316,0,277,0,280,0,385,0,435,0,434,0,436,0,437,0,511,0,0,0,10,0,0,0,439,0,438,0,427,0,265,0,429,0,428,0,431,0,430,0,423,0,424,0,405,0,413,0,406,0,440,0,441,0,0,0,0,0,0,0,0,0,270,0,523,0,523,0,78,0,286,0,0,0,0,0,0,0,0,0,0,0,3,0,509,0,6,0,9,0,27,0,39,0,42,0,50,0,49,0,0,0,66,0,0,0,70,0,80,0,0,0,47,0,229,0,0,0,51,0,284,0,260,0,261,0,262,0,404,0,414,0,403,0,433,0,0,0,263,0,264,0,248,0,5,0,8,0,313,
0,314,0,277,0,280,0,385,0,0,0,102,0,103,0,0,0,0,0,0,0,0,0,105,0,0,0,317,0,0,0,433,0,264,0,0,0,306,0,156,0,166,0,157,0,179,0,153,0,172,0,162,0,161,0,182,0,183,0,177,0,160,0,159,0,155,0,180,0,184,0,185,0,164,0,154,0,167,0,171,0,173,0,165,0,158,0,174,0,181,0,176,0,175,0,168,0,178,0,163,0,152,0,170,0,169,0,151,0,149,0,150,0,146,0,147,0,148,0,107,0,109,0,108,0,142,0,143,0,139,0,121,0,122,0,123,0,130,0,127,0,129,0,124,0,125,0,144,0,145,0,131,0,132,0,136,0,126,0,128,0,118,0,119,0,120,0,133,0,134,0,135,0,
137,0,138,0,140,0,141,0,489,0,308,0,110,0,111,0,488,0,0,0,175,0,168,0,178,0,163,0,146,0,147,0,107,0,108,0,0,0,112,0,115,0,20,0,113,0,0,0,0,0,48,0,0,0,0,0,0,0,433,0,0,0,264,0,0,0,518,0,520,0,509,0,0,0,521,0,519,0,510,0,0,0,0,0,0,0,328,0,327,0,0,0,0,0,433,0,264,0,0,0,0,0,0,0,0,0,243,0,230,0,253,0,64,0,247,0,523,0,523,0,493,0,65,0,63,0,511,0,62,0,0,0,523,0,384,0,61,0,511,0,0,0,512,0,18,0,0,0,0,0,207,0,0,0,208,0,274,0,0,0,0,0,0,0,509,0,15,0,511,0,68,0,14,0,268,0,511,0,0,0,515,0,515,0,231,0,0,0,0,0,515,
0,491,0,0,0,0,0,76,0,0,0,86,0,93,0,462,0,419,0,418,0,420,0,421,0,0,0,417,0,416,0,407,0,409,0,0,0,425,0,426,0,46,0,222,0,223,0,4,0,510,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,372,0,374,0,0,0,82,0,0,0,74,0,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,523,0,0,0,508,0,507,0,0,0,389,0,387,0,285,0,0,0,0,0,378,0,55,0,283,0,303,0,102,0,103,0,104,0,425,0,426,0,0,0,443,0,301,0,442,0,0,0,523,0,0,0,0,0,0,0,462,0,310,0,0,0,116,0,0,0,523,0,274,0,319,
0,0,0,318,0,0,0,0,0,523,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,522,0,0,0,0,0,274,0,0,0,523,0,0,0,298,0,496,0,254,0,250,0,0,0,0,0,244,0,252,0,0,0,245,0,511,0,0,0,279,0,249,0,511,0,239,0,523,0,523,0,238,0,511,0,282,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,511,0,272,0,13,0,510,0,67,0,511,0,271,0,275,0,517,0,232,0,516,0,517,0,234,0,276,0,492,0,92,0,84,0,0,0,79,0,0,0,0,0,523,0,0,0,468,0,465,0,464,0,463,0,466,0,0,0,480,0,484,0,483,0,479,0,462,0,0,0,369,0,467,0,469,0,471,0,523,0,477,0,523,0,482,0,523,0,0,0,461,0,422,
0,0,0,0,0,408,0,411,0,0,0,0,0,7,0,21,0,22,0,23,0,24,0,25,0,43,0,44,0,523,0,0,0,28,0,37,0,0,0,38,0,511,0,0,0,72,0,83,0,41,0,40,0,0,0,186,0,253,0,36,0,204,0,212,0,217,0,218,0,219,0,214,0,216,0,226,0,227,0,220,0,221,0,197,0,198,0,224,0,225,0,511,0,213,0,215,0,209,0,210,0,211,0,199,0,200,0,201,0,202,0,203,0,500,0,505,0,501,0,506,0,383,0,248,0,381,0,511,0,500,0,502,0,501,0,503,0,382,0,523,0,500,0,501,0,248,0,523,0,523,0,29,0,188,0,35,0,196,0,53,0,56,0,0,0,445,0,0,0,0,0,102,0,103,0,106,0,0,0,511,0,523,
0,0,0,511,0,462,0,0,0,0,0,0,0,0,0,267,0,523,0,523,0,395,0,523,0,320,0,186,0,504,0,273,0,511,0,500,0,501,0,523,0,0,0,0,0,297,0,322,0,291,0,321,0,294,0,504,0,273,0,511,0,500,0,501,0,0,0,495,0,0,0,255,0,251,0,523,0,494,0,278,0,513,0,235,0,240,0,242,0,281,0,19,0,0,0,26,0,195,0,69,0,16,0,269,0,515,0,85,0,77,0,89,0,91,0,511,0,500,0,501,0,0,0,468,0,0,0,340,0,331,0,333,0,511,0,329,0,511,0,0,0,0,0,287,0,0,0,454,0,487,0,0,0,457,0,481,0,0,0,459,0,485,0,415,0,0,0,0,0,205,0,206,0,360,0,511,0,0,0,358,0,357,0,259,
0,0,0,81,0,75,0,0,0,0,0,0,0,0,0,0,0,0,0,380,0,59,0,0,0,386,0,0,0,0,0,237,0,379,0,57,0,236,0,375,0,52,0,0,0,0,0,0,0,523,0,304,0,0,0,0,0,386,0,307,0,490,0,511,0,0,0,447,0,311,0,114,0,117,0,396,0,397,0,523,0,398,0,0,0,523,0,325,0,0,0,0,0,323,0,0,0,0,0,386,0,0,0,0,0,0,0,296,0,0,0,0,0,0,0,0,0,386,0,0,0,256,0,246,0,523,0,11,0,233,0,87,0,473,0,511,0,0,0,338,0,0,0,470,0,0,0,362,0,0,0,0,0,472,0,523,0,523,0,486,0,523,0,478,0,523,0,523,0,410,0,0,0,468,0,511,0,0,0,523,0,475,0,523,0,523,0,356,0,0,0,0,0,257,0,
73,0,187,0,0,0,34,0,193,0,33,0,194,0,60,0,514,0,0,0,31,0,191,0,32,0,192,0,58,0,376,0,377,0,0,0,0,0,189,0,0,0,0,0,444,0,302,0,446,0,309,0,462,0,0,0,0,0,400,0,326,0,0,0,12,0,402,0,0,0,288,0,0,0,289,0,255,0,523,0,0,0,0,0,299,0,241,0,330,0,341,0,0,0,336,0,332,0,368,0,0,0,371,0,370,0,0,0,450,0,0,0,452,0,0,0,458,0,0,0,455,0,460,0,412,0,0,0,0,0,359,0,347,0,349,0,0,0,352,0,0,0,354,0,373,0,258,0,228,0,30,0,190,0,390,0,388,0,0,0,0,0,0,0,0,0,399,0,0,0,94,0,101,0,0,0,401,0,0,0,392,0,393,0,391,0,292,0,295,0,0,
0,0,0,339,0,0,0,334,0,366,0,511,0,364,0,367,0,523,0,523,0,523,0,523,0,0,0,474,0,361,0,523,0,523,0,523,0,476,0,523,0,523,0,54,0,305,0,0,0,100,0,0,0,523,0,0,0,523,0,523,0,0,0,337,0,0,0,0,0,363,0,451,0,0,0,448,0,453,0,456,0,274,0,0,0,0,0,344,0,0,0,346,0,353,0,0,0,350,0,355,0,312,0,504,0,99,0,511,0,500,0,501,0,394,0,324,0,300,0,335,0,365,0,523,0,504,0,273,0,523,0,523,0,523,0,523,0,386,0,449,0,345,0,0,0,342,0,348,0,351,0,523,0,343,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],ALLOC_STATIC);_yydebug=allocate(4,"i8",ALLOC_STATIC);
_yycheck=allocate([2,0,278,0,27,0,72,0,79,0,212,0,58,0,22,0,239,0,5,0,6,0,16,0,17,0,22,0,28,0,20,0,7,0,369,0,343,0,15,0,12,0,283,0,388,0,8,0,283,0,393,0,315,0,271,0,563,0,406,0,12,0,275,0,4,0,61,0,102,0,53,0,315,0,16,0,17,0,49,0,1,0,20,0,367,0,28,0,403,0,61,0,581,0,406,0,640,0,51,0,52,0,725,0,11,0,12,0,2,0,446,0,4,0,53,0,383,0,594,0,342,0,438,0,344,0,13,0,55,0,347,0,13,0,15,0,637,0,61,0,27,0,396,0,51,0,52,0,13,0,90,0,72,0,804,0,574,0,61,0,652,0,90,0,97,0,547,0,548,0,86,0,368,0,622,0,584,0,2,0,13,
0,4,0,13,0,260,0,16,0,17,0,111,0,25,0,20,0,25,0,382,0,49,0,384,0,727,0,495,0,16,0,17,0,822,0,86,0,20,0,62,0,63,0,371,0,249,0,106,0,397,0,69,0,26,0,88,0,26,0,88,0,29,0,25,0,448,0,106,0,88,0,800,0,13,0,264,0,0,0,25,0,637,0,268,0,107,0,640,0,136,0,137,0,107,0,139,0,107,0,51,0,77,0,424,0,86,0,107,0,312,0,652,0,342,0,138,0,344,0,111,0,640,0,347,0,143,0,643,0,103,0,883,0,134,0,25,0,137,0,25,0,25,0,25,0,652,0,117,0,118,0,119,0,449,0,138,0,446,0,138,0,366,0,744,0,368,0,107,0,138,0,112,0,892,0,852,0,37,0,
38,0,142,0,143,0,667,0,415,0,142,0,143,0,382,0,138,0,384,0,674,0,28,0,142,0,143,0,137,0,142,0,143,0,105,0,460,0,215,0,395,0,460,0,397,0,142,0,143,0,138,0,558,0,198,0,882,0,278,0,138,0,139,0,138,0,139,0,86,0,807,0,568,0,681,0,495,0,142,0,143,0,142,0,143,0,215,0,206,0,134,0,850,0,134,0,423,0,424,0,212,0,608,0,139,0,215,0,262,0,138,0,238,0,239,0,243,0,52,0,245,0,246,0,811,0,138,0,246,0,15,0,262,0,17,0,607,0,608,0,260,0,820,0,447,0,139,0,449,0,203,0,142,0,143,0,310,0,86,0,55,0,220,0,221,0,315,0,243,0,
137,0,245,0,107,0,86,0,660,0,262,0,138,0,408,0,138,0,138,0,138,0,412,0,138,0,138,0,86,0,262,0,417,0,278,0,143,0,88,0,143,0,86,0,138,0,270,0,271,0,88,0,427,0,143,0,275,0,573,0,313,0,432,0,793,0,366,0,351,0,352,0,807,0,312,0,107,0,86,0,567,0,254,0,88,0,567,0,136,0,137,0,259,0,260,0,139,0,820,0,86,0,822,0,313,0,807,0,137,0,809,0,243,0,139,0,245,0,813,0,86,0,107,0,139,0,300,0,344,0,137,0,49,0,243,0,822,0,245,0,824,0,136,0,137,0,343,0,86,0,25,0,343,0,301,0,302,0,303,0,304,0,259,0,25,0,716,0,58,0,59,0,
86,0,300,0,368,0,136,0,137,0,86,0,305,0,494,0,139,0,37,0,38,0,367,0,143,0,312,0,367,0,137,0,315,0,903,0,384,0,362,0,602,0,661,0,617,0,376,0,444,0,137,0,446,0,383,0,586,0,362,0,383,0,397,0,660,0,51,0,103,0,892,0,300,0,55,0,136,0,137,0,396,0,305,0,652,0,396,0,138,0,88,0,886,0,55,0,310,0,392,0,393,0,137,0,892,0,315,0,894,0,420,0,137,0,897,0,424,0,392,0,393,0,414,0,415,0,26,0,107,0,229,0,230,0,231,0,421,0,797,0,369,0,107,0,775,0,403,0,86,0,495,0,793,0,88,0,107,0,566,0,379,0,921,0,88,0,449,0,420,0,142,
0,143,0,797,0,387,0,86,0,107,0,86,0,448,0,58,0,59,0,448,0,107,0,444,0,88,0,446,0,17,0,107,0,138,0,86,0,140,0,435,0,455,0,143,0,86,0,138,0,142,0,140,0,86,0,466,0,143,0,468,0,51,0,470,0,53,0,54,0,55,0,56,0,421,0,86,0,136,0,137,0,88,0,389,0,86,0,62,0,63,0,430,0,835,0,62,0,63,0,488,0,55,0,719,0,86,0,136,0,137,0,136,0,137,0,519,0,631,0,107,0,310,0,89,0,495,0,88,0,25,0,315,0,138,0,136,0,137,0,62,0,63,0,421,0,136,0,137,0,69,0,537,0,136,0,137,0,134,0,88,0,430,0,138,0,107,0,535,0,780,0,134,0,26,0,136,0,137,
0,535,0,475,0,543,0,136,0,137,0,546,0,14,0,15,0,543,0,107,0,254,0,546,0,563,0,136,0,137,0,543,0,260,0,143,0,546,0,547,0,548,0,562,0,140,0,564,0,138,0,876,0,688,0,107,0,138,0,26,0,581,0,571,0,141,0,135,0,55,0,88,0,564,0,555,0,26,0,138,0,138,0,69,0,69,0,594,0,95,0,573,0,574,0,555,0,576,0,782,0,389,0,569,0,138,0,570,0,107,0,788,0,584,0,86,0,62,0,10,0,571,0,569,0,724,0,402,0,403,0,660,0,8,0,406,0,312,0,877,0,13,0,622,0,557,0,10,0,602,0,676,0,140,0,138,0,586,0,138,0,135,0,138,0,633,0,661,0,558,0,138,0,
664,0,665,0,107,0,86,0,138,0,138,0,670,0,671,0,568,0,51,0,435,0,138,0,86,0,438,0,138,0,652,0,607,0,627,0,628,0,134,0,51,0,136,0,137,0,617,0,139,0,107,0,597,0,138,0,138,0,10,0,2,0,15,0,4,0,5,0,6,0,10,0,135,0,138,0,10,0,11,0,12,0,138,0,135,0,15,0,16,0,17,0,109,0,10,0,20,0,379,0,573,0,134,0,660,0,136,0,137,0,141,0,139,0,387,0,10,0,89,0,134,0,9,0,136,0,137,0,489,0,139,0,10,0,681,0,875,0,10,0,877,0,138,0,138,0,142,0,634,0,635,0,140,0,49,0,50,0,683,0,10,0,53,0,696,0,135,0,891,0,699,0,58,0,138,0,648,0,683,
0,138,0,138,0,51,0,653,0,53,0,54,0,55,0,56,0,138,0,763,0,72,0,661,0,135,0,107,0,112,0,719,0,51,0,744,0,53,0,54,0,55,0,56,0,716,0,138,0,138,0,725,0,138,0,727,0,678,0,679,0,734,0,735,0,716,0,737,0,10,0,739,0,740,0,138,0,10,0,101,0,701,0,103,0,746,0,135,0,748,0,749,0,10,0,10,0,698,0,51,0,138,0,53,0,54,0,55,0,56,0,475,0,112,0,138,0,573,0,135,0,10,0,55,0,712,0,713,0,714,0,138,0,138,0,51,0,55,0,53,0,54,0,55,0,56,0,10,0,138,0,138,0,10,0,51,0,138,0,53,0,54,0,55,0,56,0,781,0,599,0,139,0,421,0,139,0,90,0,793,
0,138,0,15,0,607,0,608,0,96,0,97,0,6,0,879,0,782,0,69,0,800,0,801,0,546,0,138,0,788,0,627,0,90,0,883,0,7,0,677,0,625,0,878,0,114,0,97,0,288,0,117,0,90,0,-1,0,780,0,817,0,637,0,820,0,96,0,97,0,774,0,775,0,-1,0,-1,0,855,0,-1,0,114,0,781,0,189,0,-1,0,-1,0,785,0,-1,0,139,0,-1,0,-1,0,114,0,203,0,657,0,117,0,-1,0,115,0,116,0,117,0,118,0,119,0,850,0,-1,0,852,0,-1,0,858,0,859,0,860,0,861,0,220,0,221,0,877,0,865,0,866,0,867,0,-1,0,869,0,870,0,-1,0,-1,0,876,0,-1,0,-1,0,876,0,-1,0,878,0,879,0,903,0,10,0,11,
0,12,0,-1,0,243,0,882,0,245,0,246,0,835,0,-1,0,249,0,250,0,-1,0,-1,0,841,0,254,0,843,0,-1,0,-1,0,711,0,259,0,260,0,849,0,40,0,41,0,42,0,43,0,44,0,-1,0,-1,0,911,0,-1,0,-1,0,914,0,915,0,916,0,917,0,634,0,635,0,278,0,50,0,-1,0,-1,0,-1,0,925,0,51,0,-1,0,53,0,54,0,55,0,56,0,648,0,-1,0,-1,0,-1,0,-1,0,653,0,-1,0,-1,0,-1,0,752,0,300,0,301,0,302,0,303,0,304,0,305,0,306,0,307,0,-1,0,-1,0,310,0,-1,0,312,0,313,0,51,0,315,0,53,0,54,0,55,0,56,0,678,0,679,0,-1,0,90,0,-1,0,-1,0,-1,0,-1,0,-1,0,51,0,101,0,53,0,54,
0,55,0,56,0,-1,0,-1,0,-1,0,-1,0,-1,0,698,0,-1,0,-1,0,343,0,797,0,51,0,-1,0,53,0,54,0,55,0,56,0,351,0,352,0,90,0,712,0,713,0,714,0,-1,0,-1,0,96,0,97,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,367,0,90,0,369,0,370,0,-1,0,-1,0,-1,0,96,0,97,0,-1,0,114,0,-1,0,379,0,117,0,-1,0,-1,0,383,0,90,0,-1,0,-1,0,387,0,69,0,-1,0,96,0,97,0,114,0,-1,0,-1,0,117,0,396,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,84,0,85,0,-1,0,143,0,-1,0,114,0,-1,0,-1,0,117,0,-1,0,-1,0,-1,0,-1,0,774,0,139,0,-1,0,-1,0,-1,0,421,0,-1,0,-1,0,-1,0,16,0,17,0,785,
0,-1,0,20,0,430,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,-1,0,-1,0,-1,0,-1,0,444,0,-1,0,446,0,-1,0,448,0,220,0,221,0,-1,0,-1,0,-1,0,-1,0,46,0,47,0,-1,0,-1,0,-1,0,51,0,52,0,-1,0,-1,0,-1,0,-1,0,-1,0,58,0,59,0,-1,0,-1,0,69,0,-1,0,44,0,-1,0,475,0,-1,0,69,0,249,0,250,0,-1,0,-1,0,-1,0,841,0,-1,0,843,0,84,0,85,0,-1,0,-1,0,-1,0,849,0,84,0,85,0,-1,0,495,0,-1,0,-1,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,-1,0,-1,0,84,0,85,0,-1,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,
0,115,0,116,0,117,0,118,0,119,0,-1,0,-1,0,301,0,302,0,303,0,304,0,-1,0,306,0,307,0,108,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,51,0,-1,0,53,0,54,0,55,0,56,0,-1,0,-1,0,557,0,558,0,-1,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,138,0,568,0,78,0,79,0,-1,0,-1,0,-1,0,-1,0,84,0,85,0,-1,0,-1,0,2,0,-1,0,4,0,5,0,6,0,7,0,-1,0,-1,0,-1,0,90,0,-1,0,-1,0,-1,0,15,0,-1,0,96,0,-1,0,-1,0,597,0,-1,0,370,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,51,0,-1,0,53,0,54,0,55,0,56,
0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,49,0,-1,0,-1,0,-1,0,53,0,-1,0,-1,0,-1,0,634,0,635,0,-1,0,-1,0,229,0,230,0,231,0,232,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,648,0,72,0,90,0,-1,0,243,0,653,0,245,0,246,0,96,0,-1,0,-1,0,-1,0,660,0,661,0,-1,0,-1,0,664,0,665,0,-1,0,-1,0,-1,0,-1,0,670,0,671,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,678,0,679,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,698,0,-1,0,-1,0,701,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,712,
0,713,0,714,0,-1,0,-1,0,-1,0,-1,0,310,0,-1,0,-1,0,-1,0,-1,0,315,0,316,0,317,0,318,0,319,0,320,0,321,0,322,0,323,0,324,0,325,0,326,0,327,0,328,0,329,0,330,0,331,0,332,0,333,0,334,0,335,0,336,0,337,0,338,0,339,0,340,0,341,0,-1,0,343,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,351,0,352,0,-1,0,763,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,774,0,775,0,367,0,-1,0,-1,0,-1,0,203,0,781,0,-1,0,-1,0,-1,0,785,0,557,0,-1,0,-1,0,-1,0,381,0,-1,0,383,0,-1,0,385,0,386,0,-1,0,-1,0,389,0,2,0,-1,0,4,0,-1,0,-1,0,
-1,0,396,0,-1,0,-1,0,-1,0,-1,0,-1,0,402,0,403,0,-1,0,-1,0,406,0,-1,0,817,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,597,0,-1,0,-1,0,-1,0,-1,0,254,0,-1,0,-1,0,425,0,835,0,259,0,260,0,-1,0,-1,0,-1,0,841,0,-1,0,843,0,435,0,-1,0,49,0,438,0,-1,0,849,0,-1,0,-1,0,468,0,-1,0,470,0,278,0,-1,0,448,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,876,0,300,0,-1,0,-1,0,-1,0,-1,0,305,0,-1,0,-1,0,-1,0,-1,0,478,0,479,0,312,0,313,0,2,0,-1,0,4,0,5,0,6,0,-1,0,-1,0,489,0,-1,
0,103,0,-1,0,-1,0,-1,0,15,0,-1,0,-1,0,0,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,8,0,9,0,10,0,-1,0,-1,0,13,0,14,0,15,0,-1,0,17,0,-1,0,-1,0,-1,0,-1,0,-1,0,701,0,-1,0,-1,0,26,0,27,0,-1,0,-1,0,-1,0,49,0,-1,0,-1,0,-1,0,53,0,-1,0,37,0,38,0,369,0,40,0,41,0,42,0,43,0,44,0,-1,0,-1,0,-1,0,-1,0,379,0,-1,0,-1,0,-1,0,-1,0,72,0,-1,0,-1,0,387,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,573,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,103,0,86,0,-1,0,-1,0,-1,0,-1,0,421,0,
-1,0,203,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,430,0,599,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,607,0,608,0,-1,0,-1,0,-1,0,444,0,-1,0,446,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,625,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,134,0,135,0,-1,0,137,0,-1,0,139,0,140,0,-1,0,142,0,143,0,254,0,475,0,-1,0,-1,0,-1,0,259,0,260,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,657,0,-1,0,-1,0,-1,0,661,0,662,0,495,0,664,0,665,0,-1,0,-1,0,-1,0,-1,0,670,0,671,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,680,0,-1,0,-1,0,203,0,-1,
0,-1,0,-1,0,-1,0,300,0,-1,0,-1,0,-1,0,-1,0,305,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,312,0,-1,0,-1,0,-1,0,704,0,705,0,-1,0,707,0,708,0,734,0,735,0,711,0,737,0,-1,0,739,0,740,0,-1,0,-1,0,-1,0,-1,0,-1,0,746,0,-1,0,748,0,749,0,-1,0,558,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,254,0,-1,0,568,0,-1,0,-1,0,259,0,260,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,752,0,-1,0,-1,0,-1,0,756,0,369,0,278,0,-1,0,-1,0,-1,0,-1,0,763,0,-1,0,-1,0,-1,0,379,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,387,0,-1,0,-1,0,-1,0,-1,
0,300,0,-1,0,-1,0,-1,0,-1,0,305,0,-1,0,-1,0,-1,0,-1,0,790,0,-1,0,312,0,313,0,-1,0,-1,0,-1,0,797,0,-1,0,-1,0,-1,0,-1,0,634,0,635,0,-1,0,-1,0,-1,0,-1,0,-1,0,421,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,648,0,-1,0,430,0,-1,0,-1,0,653,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,660,0,-1,0,-1,0,-1,0,-1,0,858,0,859,0,860,0,861,0,-1,0,-1,0,-1,0,865,0,866,0,867,0,-1,0,869,0,870,0,678,0,679,0,-1,0,369,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,379,0,-1,0,-1,0,-1,0,475,0,-1,0,-1,0,698,0,387,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,
-1,0,-1,0,876,0,-1,0,-1,0,-1,0,712,0,713,0,714,0,-1,0,-1,0,-1,0,911,0,-1,0,-1,0,914,0,915,0,916,0,917,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,925,0,421,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,430,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,444,0,-1,0,446,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,774,0,775,0,-1,0,-1,0,558,0,-1,0,-1,0,781,0,-1,0,-1,0,-1,0,785,0,-1,0,475,0,568,0,-1,0,-1,0,5,0,6,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,15,0,-1,
0,-1,0,-1,0,-1,0,-1,0,495,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,817,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,46,0,47,0,-1,0,835,0,-1,0,51,0,52,0,53,0,-1,0,841,0,-1,0,843,0,-1,0,59,0,-1,0,-1,0,-1,0,849,0,-1,0,-1,0,-1,0,-1,0,634,0,635,0,44,0,-1,0,72,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,648,0,-1,0,558,0,-1,0,-1,0,653,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,568,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,-1,0,-1,0,84,0,85,0,678,0,679,0,
-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,698,0,-1,0,108,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,712,0,713,0,714,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,-1,0,78,0,79,0,634,0,635,0,-1,0,-1,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,648,0,-1,0,-1,0,-1,0,-1,0,653,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,660,0,-1,0,-1,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,-1,0,-1,0,-1,0,678,0,679,0,-1,0,-1,0,
774,0,775,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,44,0,785,0,-1,0,-1,0,-1,0,-1,0,698,0,-1,0,-1,0,-1,0,-1,0,229,0,230,0,231,0,232,0,-1,0,-1,0,-1,0,-1,0,-1,0,712,0,713,0,714,0,-1,0,-1,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,-1,0,-1,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,835,0,-1,0,-1,0,-1,0,-1,0,-1,0,841,0,-1,0,843,0,278,0,-1,0,-1,0,-1,0,108,0,849,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,774,0,775,0,-1,
0,-1,0,-1,0,-1,0,-1,0,781,0,-1,0,-1,0,-1,0,785,0,-1,0,313,0,-1,0,-1,0,316,0,317,0,318,0,319,0,320,0,321,0,322,0,323,0,324,0,325,0,326,0,327,0,328,0,329,0,330,0,331,0,332,0,333,0,334,0,335,0,336,0,337,0,338,0,339,0,340,0,341,0,-1,0,817,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,835,0,-1,0,-1,0,-1,0,-1,0,-1,0,841,0,-1,0,843,0,-1,0,-1,0,-1,0,-1,0,-1,0,849,0,-1,0,-1,0,-1,0,-1,0,-1,0,381,0,-1,0,-1,0,-1,0,385,0,386,0,-1,0,-1,0,389,0,-1,0,-1,0,-1,0,-1,0,-1,0,51,
0,52,0,-1,0,-1,0,55,0,-1,0,-1,0,402,0,403,0,-1,0,-1,0,406,0,-1,0,-1,0,-1,0,-1,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,-1,0,-1,0,78,0,79,0,-1,0,425,0,82,0,83,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,435,0,-1,0,-1,0,438,0,-1,0,96,0,-1,0,-1,0,-1,0,444,0,-1,0,446,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,121,0,122,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,478,0,479,0,-1,0,0,0,1,0,139,0,3,0,4,0,5,0,6,0,7,0,489,0,-1,0,-1,0,11,
0,12,0,-1,0,495,0,-1,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,45,0,46,0,47,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,573,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,
0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,599,0,-1,0,120,0,121,0,122,0,-1,0,-1,0,-1,0,607,0,608,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,142,0,143,0,625,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,657,0,0,0,-1,0,660,0,-1,0,662,0,-1,0,-1,0,-1,0,8,0,9,0,10,0,-1,0,-1,0,-1,0,14,0,15,0,-1,0,17,0,-1,0,-1,0,-1,0,-1,0,680,0,-1,0,-1,0,-1,0,26,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,
-1,0,-1,0,-1,0,-1,0,37,0,38,0,-1,0,40,0,41,0,42,0,43,0,44,0,-1,0,704,0,705,0,-1,0,707,0,708,0,-1,0,-1,0,711,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,-1,0,-1,0,84,0,85,0,86,0,-1,0,88,0,-1,0,-1,0,-1,0,-1,0,-1,0,752,0,-1,0,-1,0,-1,0,756,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,107,0,108,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,-1,0,-1,0,781,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,
0,-1,0,-1,0,790,0,-1,0,134,0,135,0,136,0,137,0,138,0,797,0,140,0,0,0,142,0,143,0,-1,0,-1,0,-1,0,-1,0,-1,0,8,0,9,0,10,0,-1,0,-1,0,-1,0,14,0,15,0,-1,0,17,0,817,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,37,0,38,0,-1,0,40,0,41,0,42,0,43,0,44,0,-1,0,-1,0,-1,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,-1,0,-1,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,-1,0,-1,0,84,0,85,0,86,0,108,
0,88,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,107,0,108,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,-1,0,143,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,135,0,136,0,137,0,138,0,-1,0,140,0,-1,0,142,0,143,0,1,0,-1,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,-1,0,-1,0,15,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,
0,-1,0,-1,0,-1,0,-1,0,45,0,-1,0,47,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,120,0,121,0,122,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,1,0,-1,0,3,0,4,0,5,0,6,0,
7,0,142,0,143,0,10,0,11,0,12,0,-1,0,14,0,15,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,45,0,-1,0,47,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,
-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,120,0,121,0,122,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,1,0,-1,0,3,0,4,0,5,0,6,0,7,0,-1,0,-1,0,10,0,11,0,12,0,142,0,143,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,45,0,-1,0,47,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,
0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,120,0,121,0,122,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,1,0,-1,0,3,0,4,0,5,0,6,0,7,0,-1,0,-1,0,10,0,11,0,12,0,142,0,143,0,15,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,45,0,-1,0,47,0,48,0,49,0,
-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,120,0,121,0,122,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,1,0,-1,0,3,0,4,0,5,0,6,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,-1,0,142,0,143,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,
0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,45,0,46,0,47,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,120,0,121,0,122,
0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,135,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,142,0,143,0,1,0,-1,0,3,0,4,0,5,0,6,0,7,0,-1,0,9,0,10,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,45,0,-1,0,47,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,
0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,120,0,121,0,122,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,1,0,-1,0,3,0,4,0,5,0,6,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,-1,0,142,0,143,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,45,0,-1,0,47,0,48,0,49,0,-1,0,51,0,52,0,
53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,120,0,121,0,122,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,140,0,-1,0,142,0,143,0,1,0,-1,0,3,0,4,0,5,0,6,0,7,0,-1,0,-1,0,
-1,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,45,0,-1,0,47,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,
-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,120,0,121,0,122,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,140,0,-1,0,142,0,143,0,1,0,-1,0,3,0,4,0,5,0,6,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,45,0,-1,0,47,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,
0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,120,0,121,0,122,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,135,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,142,0,143,0,1,0,-1,0,3,0,4,0,5,0,6,0,7,0,-1,0,-1,0,10,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,
0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,45,0,-1,0,47,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,120,0,121,0,122,0,-1,0,
-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,-1,0,142,0,143,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,
0,97,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,120,0,121,0,122,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,143,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,
0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,-1,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,120,0,121,0,122,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,-1,0,142,0,143,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,
0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,-1,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,120,0,121,0,122,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,6,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,
143,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,45,0,46,0,47,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,
-1,0,-1,0,-1,0,120,0,121,0,122,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,6,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,142,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,45,0,-1,0,47,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,
0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,120,0,121,0,122,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,142,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,
0,54,0,55,0,56,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,-1,0,-1,0,78,0,79,0,-1,0,-1,0,82,0,83,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,96,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,121,0,122,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,139,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,26,0,-1,0,-1,0,-1,0,
30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0].concat([60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,97,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,120,0,121,0,122,0,-1,0,-1,0,-1,0,-1,0,3,0,
4,0,5,0,-1,0,7,0,-1,0,-1,0,134,0,11,0,12,0,-1,0,-1,0,139,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,26,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,97,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,
0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,120,0,121,0,122,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,134,0,11,0,12,0,-1,0,-1,0,139,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,26,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,
0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,97,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,120,0,121,0,122,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,134,0,11,0,12,0,-1,0,-1,0,139,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,
0,57,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,88,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,97,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,107,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,120,0,121,0,122,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,139,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,
0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,88,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,97,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,107,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,120,0,121,0,122,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,139,0,-1,0,-1,0,30,0,31,0,32,
0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,97,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,120,0,121,0,122,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,-1,0,18,0,19,0,20,0,
21,0,22,0,23,0,24,0,-1,0,-1,0,139,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,97,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,120,0,121,
0,122,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,139,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,97,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,
0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,120,0,121,0,122,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,139,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,97,0,
98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,120,0,121,0,122,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,139,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,
-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,-1,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,120,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,138,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,
0,80,0,81,0,-1,0,-1,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,-1,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,108,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,-1,0,-1,0,120,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,138,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,
0,-1,0,-1,0,-1,0,-1,0,-1,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,-1,0,-1,0,-1,0,-1,0,62,0,-1,0,-1,0,-1,0,-1,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,-1,0,-1,0,78,0,79,0,-1,0,-1,0,82,0,83,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,96,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,121,0,122,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,
0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,-1,0,-1,0,-1,0,-1,0,62,0,-1,0,-1,0,-1,0,-1,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,-1,0,-1,0,78,0,79,0,-1,0,-1,0,82,0,83,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,96,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,
0,118,0,119,0,-1,0,121,0,122,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,-1,0,-1,0,55,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,-1,0,-1,0,78,0,79,0,-1,0,-1,0,82,0,83,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,96,0,-1,0,-1,
0,99,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,121,0,122,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,-1,0,-1,0,55,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,-1,0,-1,0,
78,0,79,0,-1,0,-1,0,82,0,83,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,96,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,121,0,122,0,3,0,4,0,5,0,6,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,45,0,46,0,47,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,
-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,6,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,120,0,121,0,122,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,45,0,-1,0,47,0,48,0,49,0,-1,
0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,120,0,121,0,122,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,
-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,97,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,120,0,121,0,122,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,
0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,97,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,120,0,121,0,122,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,
31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,120,0,121,0,122,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,
0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,-1,0,97,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,120,0,121,0,122,0,16,0,-1,0,
18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,
12,0,120,0,121,0,122,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,-1,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,
5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,120,0,121,0,122,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,
-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,120,0,121,0,122,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,
0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,120,0,121,0,122,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,
-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,120,0,121,0,122,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,
0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,120,0,121,0,122,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,
-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,120,0,121,0,122,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,
0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,-1,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,120,0,121,0,122,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,
-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,-1,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,120,0,121,0,122,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,
0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,67,0,68,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,-1,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,120,0,121,0,122,0,16,0,-1,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,
53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,84,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,-1,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,120,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,
0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,120,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,
0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,96,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,120,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,
0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,-1,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,120,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,0,-1,0,-1,
0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,-1,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,120,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,0,-1,0,-1,
0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,-1,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,-1,0,3,0,4,0,5,0,-1,0,7,0,-1,0,-1,0,-1,0,11,0,12,0,-1,0,-1,0,-1,0,16,0,120,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,-1,0,-1,0,-1,0,-1,0,-1,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,-1,0,-1,0,39,0,-1,
0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,48,0,49,0,-1,0,51,0,52,0,53,0,54,0,55,0,56,0,-1,0,58,0,59,0,60,0,61,0,62,0,-1,0,64,0,65,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,87,0,-1,0,-1,0,90,0,91,0,-1,0,93,0,94,0,-1,0,-1,0,-1,0,98,0,99,0,-1,0,-1,0,-1,0,103,0,-1,0,51,0,52,0,-1,0,-1,0,55,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,120,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,-1,0,-1,0,78,0,79,0,-1,0,-1,0,82,0,83,0,84,0,85,0,-1,
0,-1,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,-1,0,96,0,78,0,79,0,-1,0,-1,0,-1,0,-1,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,121,0,122,0,-1,0,51,0,52,0,-1,0,-1,0,55,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,-1,0,-1,0,78,0,79,0,-1,0,-1,0,82,0,83,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,96,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,
0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,121,0,122,0,-1,0,51,0,52,0,-1,0,-1,0,55,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,-1,0,-1,0,78,0,79,0,-1,0,-1,0,82,0,83,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,96,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,121,0,122,0,-1,0,51,0,52,0,-1,0,-1,0,55,0,-1,0,-1,0,-1,0,
-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,-1,0,-1,0,78,0,79,0,-1,0,-1,0,82,0,83,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,96,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,121,0,122,0,-1,0,51,0,52,0,-1,0,-1,0,55,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,-1,0,-1,0,78,0,79,0,-1,0,-1,0,82,0,83,
0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,96,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,121,0,122,0,-1,0,51,0,52,0,-1,0,-1,0,55,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,-1,0,-1,0,78,0,79,0,-1,0,-1,0,82,0,83,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,96,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,
0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,121,0,122,0,-1,0,51,0,52,0,-1,0,-1,0,55,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,-1,0,-1,0,78,0,79,0,-1,0,-1,0,82,0,83,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,96,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,121,0,122,0,-1,0,51,0,52,0,-1,0,-1,0,55,0,-1,0,-1,0,
-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,-1,0,-1,0,78,0,79,0,-1,0,-1,0,82,0,83,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,96,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,121,0,122,0,-1,0,51,0,52,0,-1,0,-1,0,55,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,-1,0,-1,0,78,0,79,0,-1,0,-1,0,82,
0,83,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,96,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,121,0,122,0,-1,0,51,0,52,0,-1,0,-1,0,55,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,-1,0,-1,0,78,0,79,0,-1,0,-1,0,82,0,83,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,96,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,
0,-1,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,121,0,122,0,-1,0,51,0,52,0,-1,0,-1,0,55,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,-1,0,-1,0,78,0,79,0,-1,0,-1,0,82,0,83,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,96,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,121,0,122,0,-1,0,51,0,52,0,-1,0,-1,0,55,0,-1,0,
-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,-1,0,-1,0,78,0,79,0,-1,0,-1,0,82,0,83,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,96,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,121,0,122,0,-1,0,51,0,52,0,-1,0,-1,0,55,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,-1,0,-1,0,78,0,79,0,-1,0,-1,
0,82,0,83,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,96,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,-1,0,121,0,122,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,-1,0,-1,0,84,0,85,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0]).concat([-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0]),["i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0].concat(["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",
0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0]).concat(["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0]),ALLOC_STATIC);
_wday_names=allocate(28,"i8",ALLOC_STATIC);_type=allocate(4,"i8",ALLOC_STATIC);_timezone_names=allocate(16,"i8",ALLOC_STATIC);_stack_extend_mrb_value_zero=allocate([0,0,0,0,0,undef,0,0],["float",0,0,0,"i8","i8","i8","i8"],ALLOC_STATIC);_scope_new_codegen_scope_zero=allocate(128,"i8",ALLOC_STATIC);_scan_hex_hexdigit=allocate([48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0],"i8",ALLOC_STATIC);
_reserved_word_wordlist=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,276,0,0,0,276,0,0,0,6,0,0,0,0,0,0,0,270,0,0,0,270,0,0,0,0,0,0,0,0,0,0,0,289,0,0,0,289,0,0,0,1,0,0,0,0,0,0,0,264,0,0,0,264,0,0,0,0,0,0,0,0,0,0,0,265,0,0,0,265,0,0,0,1,0,0,0,0,0,0,0,268,0,0,0,268,0,0,0,0,0,
0,0,0,0,0,0,294,0,0,0,294,0,0,0,4,0,0,0,0,0,0,0,291,0,0,0,291,0,0,0,1,0,0,0,0,0,0,0,288,0,0,0,288,0,0,0,1,0,0,0,0,0,0,0,269,0,0,0,269,0,0,0,10,0,0,0,0,0,0,0,263,0,0,0,299,0,0,0,6,0,0,0,0,0,0,0,290,0,0,0,290,0,0,0,1,0,0,0,0,0,0,0,274,0,0,0,298,0,0,0,10,0,0,0,0,0,0,0,267,0,0,0,296,0,0,0,10,0,0,0,0,0,0,0,285,0,0,0,285,0,0,0,6,0,0,0,0,0,0,0,260,0,0,0,260,0,0,0,7,0,0,0,0,0,0,0,292,0,0,0,292,0,0,0,10,0,0,0,0,0,0,0,281,0,0,0,281,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,286,0,0,0,4,0,0,0,0,0,0,0,275,0,0,0,275,0,0,
0,10,0,0,0,0,0,0,0,261,0,0,0,261,0,0,0,7,0,0,0,0,0,0,0,293,0,0,0,293,0,0,0,10,0,0,0,0,0,0,0,280,0,0,0,280,0,0,0,10,0,0,0,0,0,0,0,272,0,0,0,272,0,0,0,10,0,0,0,0,0,0,0,279,0,0,0,279,0,0,0,1,0,0,0,0,0,0,0,266,0,0,0,295,0,0,0,10,0,0,0,0,0,0,0,271,0,0,0,271,0,0,0,10,0,0,0,0,0,0,0,278,0,0,0,278,0,0,0,1,0,0,0,0,0,0,0,277,0,0,0,277,0,0,0,6,0,0,0,0,0,0,0,287,0,0,0,287,0,0,0,4,0,0,0,0,0,0,0,259,0,0,0,259,0,0,0,10,0,0,0,0,0,0,0,262,0,0,0,262,0,0,0,0,0,0,0,0,0,0,0,303,0,0,0,303,0,0,0,1,0,0,0,0,0,0,0,304,0,0,
0,304,0,0,0,1,0,0,0,0,0,0,0,305,0,0,0,305,0,0,0,1,0,0,0,0,0,0,0,302,0,0,0,302,0,0,0,1,0,0,0,0,0,0,0,300,0,0,0,300,0,0,0,7,0,0,0,0,0,0,0,301,0,0,0,301,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,258,0,0,0,258,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273,0,0,0,297,0,0,0,10,0,0,0],["*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",
0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",
0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",
0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",
0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",
0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],ALLOC_STATIC);_ref_func=allocate([520,0,0,0,522,0,0,0,516,0,0,0,416,0,0,0,512,0,0,0,514,0,0,0,508,0,0,0,510,0,0,0,504,0,0,0,506,0,0,0],["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0],ALLOC_STATIC);
_my_timgm_ndays=allocate([31,0,0,0,28,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,29,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",
0,0,0,"i32",0,0,0,"i32",0,0,0],ALLOC_STATIC);
_mrblib_irep=allocate([82,73,84,69,48,48,48,57,48,48,48,48,48,48,48,57,48,48,48,48,77,65,84,90,32,32,32,32,48,48,48,57,48,48,48,48,0,0,65,237,0,148,0,0,32,32,32,32,32,32,32,32,75,184,0,0,3,99,83,67,0,1,0,3,0,2,70,159,0,0,0,132,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,128,0,5,0,128,64,68,0,128,4,69,0,128,0,5,0,128,128,68,0,128,4,197,0,128,0,5,1,0,0,5,0,128,0,67,0,128,5,69,0,128,0,5,1,0,0,5,0,128,192,67,0,128,6,69,0,128,0,5,0,128,128,68,0,128,10,197,0,128,0,5,0,128,64,68,0,128,14,69,0,128,0,5,1,0,
0,5,0,129,0,67,0,128,32,69,0,128,0,5,1,0,2,145,0,129,128,67,0,128,33,69,0,128,0,5,1,0,2,145,0,129,192,67,0,128,33,197,0,128,0,5,1,0,2,145,0,130,0,67,0,128,34,69,0,128,0,5,1,0,4,17,0,130,64,67,0,128,34,197,0,128,0,5,1,0,2,145,0,130,128,67,0,128,35,69,0,128,0,5,1,0,2,145,0,130,192,67,0,128,35,197,0,128,0,5,1,0,2,145,0,131,0,67,0,128,36,69,0,128,0,5,1,0,6,17,0,131,64,67,0,128,36,197,0,128,0,5,1,0,2,145,0,131,128,67,0,128,37,69,0,128,0,5,1,0,7,17,0,131,192,67,0,128,37,197,0,128,0,5,1,0,8,17,0,132,64,
67,0,128,38,69,0,128,0,5,1,0,0,5,0,132,128,67,0,128,38,197,0,128,0,5,0,128,64,68,0,128,50,69,0,128,0,5,1,0,0,5,0,132,128,67,0,128,50,197,0,128,0,5,0,132,192,68,0,128,51,69,0,128,0,5,1,0,0,5,0,133,0,67,0,128,53,197,0,128,0,5,0,128,128,68,0,128,56,69,0,128,0,5,1,0,0,5,0,133,64,67,0,128,56,197,0,128,0,5,0,132,192,68,0,128,57,69,0,128,0,5,1,0,0,5,0,133,128,67,0,128,62,197,0,128,0,5,0,128,64,68,0,128,63,197,0,128,0,5,1,0,0,5,0,133,128,67,0,128,64,69,0,128,0,5,1,0,0,5,0,133,192,67,0,128,64,197,0,128,0,
5,0,128,128,68,0,128,69,197,0,128,0,5,1,0,0,5,0,133,192,67,0,128,70,69,0,128,12,17,1,0,13,4,0,134,64,160,0,192,2,153,0,128,0,5,1,0,0,5,0,134,128,67,0,128,70,197,0,128,0,5,0,0,0,74,190,21,0,0,0,0,0,0,0,0,0,27,0,5,65,114,114,97,121,0,10,69,110,117,109,101,114,97,98,108,101,0,10,67,111,109,112,97,114,97,98,108,101,0,6,77,111,100,117,108,101,0,9,69,120,99,101,112,116,105,111,110,0,13,83,116,97,110,100,97,114,100,69,114,114,111,114,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,14,76,111,99,
97,108,74,117,109,112,69,114,114,111,114,0,10,82,97,110,103,101,69,114,114,111,114,0,16,70,108,111,97,116,68,111,109,97,105,110,69,114,114,111,114,0,11,82,101,103,101,120,112,69,114,114,111,114,0,9,84,121,112,101,69,114,114,111,114,0,9,78,97,109,101,69,114,114,111,114,0,13,78,111,77,101,116,104,111,100,69,114,114,111,114,0,10,73,110,100,101,120,69,114,114,111,114,0,8,75,101,121,69,114,114,111,114,0,11,83,99,114,105,112,116,69,114,114,111,114,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,
100,69,114,114,111,114,0,4,72,97,115,104,0,6,75,101,114,110,101,108,0,7,73,110,116,101,103,101,114,0,7,78,117,109,101,114,105,99,0,5,82,97,110,103,101,0,6,83,116,114,105,110,103,0,6,79,98,106,101,99,116,0,14,99,111,110,115,116,95,100,101,102,105,110,101,100,63,0,6,83,116,114,117,99,116,229,144,0,0,0,184,83,67,0,1,0,4,0,2,54,120,0,0,0,22,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,1,132,1,128,1,4,2,0,0,5,0,129,1,32,0,128,0,72,1,
0,10,192,0,129,64,70,0,128,0,72,1,0,12,192,0,129,128,70,0,0,0,5,0,0,0,41,140,174,0,0,0,0,0,0,0,0,0,7,0,4,101,97,99,104,0,10,101,97,99,104,95,105,110,100,101,120,0,8,99,111,108,108,101,99,116,33,0,4,109,97,112,33,0,12,97,108,105,97,115,95,109,101,116,104,111,100,0,10,105,110,105,116,105,97,108,105,122,101,0,6,100,101,108,101,116,101,56,114,0,0,0,124,83,67,0,3,0,6,0,2,120,90,0,0,0,18,0,0,0,166,1,63,255,131,0,64,4,23,1,128,64,1,2,0,0,6,2,128,128,1,2,0,64,160,1,128,0,160,1,128,128,1,1,128,128,173,1,0,
192,1,1,128,128,1,2,0,0,6,2,1,0,32,1,128,192,179,1,191,249,152,0,0,0,6,0,0,0,41,254,100,0,0,0,0,0,0,0,0,0,5,0,4,99,97,108,108,0,2,91,93,0,1,43,0,1,60,0,6,108,101,110,103,116,104,63,202,0,0,0,112,83,67,0,3,0,5,0,2,72,57,0,0,0,16,0,0,0,166,1,63,255,131,0,64,3,23,1,128,64,1,2,0,128,1,1,128,0,160,1,128,128,1,1,128,64,173,1,0,192,1,1,128,128,1,2,0,0,6,2,0,192,32,1,128,128,179,1,191,250,152,0,0,0,6,0,0,0,41,142,149,0,0,0,0,0,0,0,0,0,4,0,4,99,97,108,108,0,1,43,0,1,60,0,6,108,101,110,103,116,104,84,241,0,
0,0,64,83,67,0,2,0,4,0,2,111,40,0,0,0,6,0,0,0,166,1,0,0,6,1,128,3,64,1,0,0,33,0,0,0,6,0,0,0,41,250,226,0,0,0,0,0,0,0,0,0,1,0,10,101,97,99,104,95,105,110,100,101,120,182,245,0,0,0,87,83,67,0,3,0,7,0,2,104,123,0,0,0,11,2,0,0,38,1,128,64,21,2,0,0,6,2,128,64,1,2,0,64,160,1,128,0,160,2,0,0,6,2,128,64,1,3,0,192,1,2,0,129,32,1,128,0,41,117,10,0,0,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,2,91,93,0,3,91,93,61,62,138,0,0,1,140,83,67,0,5,0,9,0,2,59,21,0,0,0,57,0,32,0,166,0,64,1,23,0,64,1,23,0,64,1,23,0,191,255,131,
1,0,0,5,2,128,64,1,3,0,0,145,2,128,0,160,2,192,0,153,0,64,2,23,2,128,0,6,3,0,1,145,3,128,0,61,2,128,129,32,2,128,64,1,3,63,255,131,2,129,0,179,2,192,2,25,2,128,0,6,3,0,2,145,3,128,0,189,2,128,129,32,2,128,0,6,2,129,128,32,2,128,64,1,3,63,255,131,2,129,192,181,2,192,13,25,2,128,0,5,3,0,0,6,3,128,64,1,3,130,64,175,4,1,64,1,3,2,1,32,2,63,255,131,0,64,7,23,2,128,192,1,2,192,2,25,2,128,192,1,3,1,0,1,2,130,128,160,0,64,0,151,2,128,128,1,3,0,0,6,3,129,0,1,4,1,64,1,3,2,1,32,2,129,0,1,2,130,192,173,2,1,64,
1,2,129,0,1,3,0,64,1,2,129,0,179,2,191,247,24,0,0,0,6,0,0,0,41,2,4,0,0,0,2,17,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,17,0,19,110,101,103,97,116,105,118,101,32,97,114,114,97,121,32,115,105,122,101,54,241,0,0,0,12,0,8,107,105,110,100,95,111,102,63,0,7,73,110,116,101,103,101,114,0,5,114,97,105,115,101,0,9,84,121,112,101,69,114,114,111,114,0,1,60,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,5,99,108,
101,97,114,0,1,62,0,3,91,93,61,0,1,45,0,4,99,97,108,108,0,1,43,83,223,0,0,0,144,83,67,0,5,0,7,0,2,218,219,0,0,0,22,2,0,0,166,0,64,2,23,2,128,0,6,3,0,192,1,2,128,0,160,2,0,64,1,2,128,0,6,3,0,64,1,2,128,64,160,1,129,64,1,2,191,251,152,2,129,0,1,3,0,0,5,2,128,128,178,2,192,0,153,2,128,128,1,2,192,1,153,2,128,128,1,2,128,192,32,0,64,0,151,2,129,0,1,2,128,0,41,103,186,0,0,0,0,0,0,0,0,0,4,0,9,100,101,108,101,116,101,95,97,116,0,5,105,110,100,101,120,0,2,61,61,0,4,99,97,108,108,48,156,0,0,0,36,83,67,0,1,
0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,83,67,0,1,0,3,0,2,70,159,0,0,0,11,0,128,0,6,1,0,0,145,0,128,0,160,0,128,0,6,1,0,1,17,0,128,0,160,0,128,0,72,1,0,2,192,0,128,192,70,0,0,0,5,0,0,0,41,81,57,0,0,0,0,0,0,0,0,0,4,0,7,105,110,99,108,117,100,101,0,10,69,110,117,109,101,114,97,98,108,101,0,10,67,111,109,112,97,114,97,98,108,101,0,5,115,111,114,116,33,209,237,0,0,0,71,83,
67,0,2,0,5,0,2,127,9,0,0,0,7,0,0,0,166,1,0,0,6,1,128,0,6,2,0,64,1,1,128,64,33,1,0,0,160,1,0,0,41,64,129,0,0,0,0,0,0,0,0,0,2,0,7,114,101,112,108,97,99,101,0,4,115,111,114,116,149,228,0,0,0,131,83,67,0,1,0,2,0,2,86,190,0,0,0,14,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,8,192,0,128,64,70,0,128,0,72,1,0,14,192,0,128,128,70,0,128,0,72,1,0,16,192,0,128,192,70,0,0,0,5,0,0,0,41,208,128,0,0,0,0,0,0,0,0,0,4,0,11,97,116,116,114,95,114,101,97,100,101,114,0,11,97,116,116,114,95,119,114,105,116,101,114,0,
13,97,116,116,114,95,97,99,99,101,115,115,111,114,0,4,97,116,116,114,37,188,0,0,0,54,83,67,0,3,0,5,0,2,72,57,0,0,0,5,0,8,0,38,1,128,64,1,2,0,3,64,1,128,0,33,1,128,0,41,46,162,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,112,83,67,0,4,0,7,0,2,237,235,0,0,0,12,2,0,0,38,2,0,0,61,2,128,64,1,2,128,64,32,2,0,0,172,2,0,128,32,1,129,0,1,2,0,0,6,2,128,64,1,3,0,3,64,2,0,192,161,2,0,0,41,250,215,0,0,0,1,17,0,1,64,6,50,0,0,0,4,0,1,43,0,4,116,111,95,115,0,6,105,110,116,101,114,110,0,13,100,101,102,105,
110,101,95,109,101,116,104,111,100,39,78,0,0,0,67,83,67,0,1,0,3,0,2,70,159,0,0,0,4,0,128,0,6,1,0,192,21,0,128,0,160,0,128,0,41,251,195,0,0,0,0,0,0,0,0,0,1,0,21,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,103,101,116,121,99,0,0,0,54,83,67,0,3,0,5,0,2,72,57,0,0,0,5,0,8,0,38,1,128,64,1,2,0,3,64,1,128,0,33,1,128,0,41,46,162,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,140,83,67,0,4,0,7,0,2,237,235,0,0,0,18,2,0,0,38,2,0,0,61,2,128,64,1,2,128,64,32,2,0,0,172,2,0,128,32,1,129,
0,1,2,0,64,1,2,0,64,32,2,128,0,189,2,0,0,172,2,0,128,32,0,129,0,1,2,0,0,6,2,128,64,1,3,0,3,64,2,0,192,161,2,0,0,41,79,66,0,0,0,2,17,0,1,64,17,0,1,61,101,161,0,0,0,4,0,1,43,0,4,116,111,95,115,0,6,105,110,116,101,114,110,0,13,100,101,102,105,110,101,95,109,101,116,104,111,100,39,78,0,0,0,75,83,67,0,3,0,6,0,2,120,90,0,0,0,6,2,0,0,38,1,128,0,6,2,0,192,21,2,128,64,1,1,128,1,32,1,128,0,41,128,72,0,0,0,0,0,0,0,0,0,1,0,21,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,115,101,116,43,214,
0,0,0,102,83,67,0,3,0,6,0,2,120,90,0,0,0,12,0,8,0,38,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,127,160,1,128,0,41,173,140,0,0,0,0,0,0,0,0,0,2,0,11,97,116,116,114,95,114,101,97,100,101,114,0,11,97,116,116,114,95,119,114,105,116,101,114,111,121,0,0,0,61,83,67,0,3,0,5,0,2,72,57,0,0,0,5,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,128,0,41,250,78,0,0,0,0,0,0,0,0,0,1,0,11,97,116,116,114,95,114,101,97,100,101,114,1,235,0,0,0,136,83,67,0,1,0,2,0,2,86,
190,0,0,0,20,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,128,0,72,1,0,12,192,0,129,64,70,0,0,0,5,0,0,0,41,236,60,0,0,0,0,0,0,0,0,0,6,0,1,60,0,2,60,61,0,2,61,61,0,1,62,0,2,62,61,0,8,98,101,116,119,101,101,110,63,147,175,0,0,0,114,83,67,0,4,0,6,0,2,253,202,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,0,64,32,2,64,1,25,2,0,0,8,0,64,3,151,2,0,192,1,2,191,
255,131,2,0,128,179,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,7,190,0,0,0,0,0,0,0,0,0,3,0,3,60,61,62,0,4,110,105,108,63,0,1,60,15,171,0,0,0,115,83,67,0,4,0,6,0,2,253,202,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,0,64,32,2,64,1,25,2,0,0,8,0,64,3,151,2,0,192,1,2,191,255,131,2,0,128,180,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,61,161,0,0,0,0,0,0,0,0,0,3,0,3,60,61,62,0,4,110,105,108,63,0,2,60,61,106,177,0,0,0,89,83,67,0,4,0,6,0,2,253,202,0,0,0,13,2,0,0,38,2,0,0,6,2,
128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,191,255,131,2,0,64,178,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,66,207,0,0,0,0,0,0,0,0,0,2,0,3,60,61,62,0,2,61,61,16,55,0,0,0,114,83,67,0,4,0,6,0,2,253,202,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,0,64,32,2,64,1,25,2,0,0,8,0,64,3,151,2,0,192,1,2,191,255,131,2,0,128,181,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,227,190,0,0,0,0,0,0,0,0,0,3,0,3,60,61,62,0,4,110,105,108,63,0,1,62,15,169,0,0,0,115,83,67,0,4,0,6,0,2,253,202,0,
0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,0,64,32,2,64,1,25,2,0,0,8,0,64,3,151,2,0,192,1,2,191,255,131,2,0,128,182,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,145,190,0,0,0,0,0,0,0,0,0,3,0,3,60,61,62,0,4,110,105,108,63,0,2,62,61,104,177,0,0,0,86,83,67,0,4,0,6,0,2,253,202,0,0,0,13,4,0,0,38,2,0,0,6,2,128,64,1,2,0,0,179,2,64,1,152,2,0,0,6,2,128,128,1,2,0,64,181,2,64,1,25,2,0,0,8,0,64,0,151,2,0,0,7,2,0,0,41,215,226,0,0,0,0,0,0,0,0,0,2,0,1,60,0,1,62,50,117,0,0,2,26,83,67,0,1,
0,4,0,2,54,120,0,0,0,79,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,8,192,0,128,64,70,0,128,0,72,1,0,14,192,0,128,128,70,0,128,0,72,1,0,18,192,0,128,192,70,0,128,0,72,1,0,22,192,0,129,0,70,0,128,0,72,1,0,26,192,0,129,64,70,0,128,0,72,1,0,3,4,1,128,1,132,2,0,0,5,0,129,193,32,0,128,0,72,1,0,30,192,0,130,0,70,0,128,0,72,1,0,34,192,0,130,64,70,0,128,0,72,1,0,38,192,0,130,128,70,0,128,0,72,1,0,42,192,0,130,192,70,0,128,0,72,1,0,6,4,1,128,5,132,2,0,0,5,0,129,193,32,0,128,0,72,1,0,6,132,1,128,1,4,2,0,
0,5,0,129,193,32,0,128,0,72,1,0,48,192,0,131,128,70,0,128,0,72,1,0,52,192,0,131,192,70,0,128,0,72,1,0,8,4,1,128,5,4,2,0,0,5,0,129,193,32,0,128,0,72,1,0,56,192,0,132,64,70,0,128,0,72,1,0,60,192,0,132,128,70,0,128,0,72,1,0,9,132,1,128,4,4,2,0,0,5,0,129,193,32,0,128,0,72,1,0,64,192,0,133,0,70,0,128,0,72,1,0,68,192,0,133,64,70,0,128,0,72,1,0,11,4,1,128,2,132,2,0,0,5,0,129,193,32,1,0,0,41,94,141,0,0,0,0,0,0,0,0,0,23,0,4,97,108,108,63,0,4,97,110,121,63,0,7,99,111,108,108,101,99,116,0,6,100,101,116,101,
99,116,0,15,101,97,99,104,95,119,105,116,104,95,105,110,100,101,120,0,7,101,110,116,114,105,101,115,0,4,102,105,110,100,0,12,97,108,105,97,115,95,109,101,116,104,111,100,0,8,102,105,110,100,95,97,108,108,0,4,103,114,101,112,0,8,105,110,99,108,117,100,101,63,0,6,105,110,106,101,99,116,0,6,114,101,100,117,99,101,0,3,109,97,112,0,3,109,97,120,0,3,109,105,110,0,7,109,101,109,98,101,114,63,0,9,112,97,114,116,105,116,105,111,110,0,6,114,101,106,101,99,116,0,6,115,101,108,101,99,116,0,12,95,95,115,111,114,
116,95,115,117,98,95,95,0,4,115,111,114,116,0,4,116,111,95,97,251,32,0,0,0,82,83,67,0,3,0,5,0,2,72,57,0,0,0,12,0,0,0,166,1,0,0,7,1,128,64,1,1,192,2,25,1,128,0,6,2,0,3,64,1,128,0,33,0,64,1,151,1,128,0,6,2,0,5,64,1,128,0,33,1,0,0,41,192,183,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,74,83,67,0,3,0,5,0,2,72,57,0,0,0,10,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,0,153,0,64,1,151,1,0,0,8,1,0,128,22,1,0,64,41,1,0,0,41,169,21,0,0,0,0,0,0,0,0,0,1,0,4,99,97,108,108,56,3,0,0,0,60,83,67,0,3,0,
4,0,2,88,24,0,0,0,8,2,0,0,38,1,128,64,1,1,192,0,153,0,64,1,151,1,0,0,8,1,0,128,22,1,0,64,41,1,0,0,41,21,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,83,67,0,3,0,5,0,2,72,57,0,0,0,12,0,0,0,166,1,0,0,8,1,128,64,1,1,192,2,25,1,128,0,6,2,0,3,64,1,128,0,33,0,64,1,151,1,128,0,6,2,0,5,64,1,128,0,33,1,0,0,41,20,144,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,74,83,67,0,3,0,5,0,2,72,57,0,0,0,10,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,2,25,1,128,0,7,1,128,128,22,1,128,64,41,1,128,0,5,1,128,0,41,202,
153,0,0,0,0,0,0,0,0,0,1,0,4,99,97,108,108,56,3,0,0,0,60,83,67,0,3,0,4,0,2,88,24,0,0,0,8,2,0,0,38,1,128,64,1,1,192,2,25,1,128,0,7,1,128,128,22,1,128,64,41,1,128,0,5,1,128,0,41,118,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,83,67,0,3,0,5,0,2,72,57,0,0,0,6,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,150,177,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,68,83,67,0,3,0,6,0,2,120,90,0,0,0,7,2,0,0,38,1,128,128,21,2,0,64,21,2,128,64,1,2,0,64,160,1,128,0,160,1,128,0,41,79,89,0,0,0,0,0,0,0,0,
0,2,0,4,112,117,115,104,0,4,99,97,108,108,115,73,0,0,0,70,83,67,0,4,0,6,0,2,253,202,0,0,0,9,0,16,0,166,0,64,0,151,0,64,0,151,0,128,0,5,1,128,64,1,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,179,1,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,70,83,67,0,3,0,5,0,2,72,57,0,0,0,9,2,0,0,38,1,128,128,21,2,0,64,1,1,128,0,160,1,192,1,153,0,128,192,22,1,128,64,41,1,128,0,5,1,128,0,41,147,3,0,0,0,0,0,0,0,0,0,1,0,4,99,97,108,108,56,3,0,0,0,62,83,67,0,3,0,5,0,2,72,57,0,0,0,7,0,0,0,166,1,63,255,131,1,128,0,6,
2,0,3,64,1,128,0,33,0,0,0,6,0,0,0,41,149,53,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,73,83,67,0,3,0,6,0,2,120,90,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,2,128,128,21,1,128,1,32,1,128,128,21,1,128,64,173,1,128,128,22,1,128,0,41,210,58,0,0,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,1,43,240,9,0,0,0,58,83,67,0,3,0,5,0,2,72,57,0,0,0,6,0,0,0,38,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,4,120,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,54,83,67,0,3,0,5,0,2,72,57,0,0,0,5,2,0,0,38,1,128,
128,21,2,0,64,1,1,128,0,160,1,128,0,41,125,40,0,0,0,0,0,0,0,0,0,1,0,4,112,117,115,104,35,146,0,0,0,58,83,67,0,3,0,5,0,2,72,57,0,0,0,6,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,150,177,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,80,83,67,0,3,0,5,0,2,72,57,0,0,0,10,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,2,25,1,128,128,21,2,0,64,1,1,128,64,160,1,128,0,5,1,128,0,41,114,236,0,0,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,4,112,117,115,104,61,37,0,0,0,58,83,67,0,4,0,6,0,2,253,
202,0,0,0,6,2,0,0,166,1,129,0,55,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,211,187,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,109,83,67,0,3,0,6,0,2,120,90,0,0,0,16,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,5,25,1,128,192,21,2,0,128,21,2,64,2,25,2,0,128,21,2,128,64,1,2,0,128,160,0,64,0,151,2,0,64,1,1,128,64,160,1,128,0,5,1,128,0,41,7,25,0,0,0,0,0,0,0,0,0,3,0,3,61,61,61,0,4,112,117,115,104,0,4,99,97,108,108,94,98,0,0,0,58,83,67,0,4,0,6,0,2,253,202,0,0,0,6,2,0,0,38,1,128,0,8,2,0,0,6,2,128,
3,64,2,0,0,33,1,128,0,41,221,220,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,72,83,67,0,3,0,5,0,2,72,57,0,0,0,10,2,0,0,38,1,128,64,1,2,0,64,21,1,128,0,178,1,192,2,25,1,128,0,7,1,128,192,22,1,128,64,41,1,128,0,5,1,128,0,41,133,30,0,0,0,0,0,0,0,0,0,1,0,2,61,61,42,79,0,0,1,16,83,67,0,6,0,9,0,2,98,69,0,0,0,39,0,8,0,166,3,0,64,1,3,0,0,32,3,192,0,131,3,0,64,181,3,64,2,25,3,0,0,6,3,128,1,145,4,0,0,61,3,0,129,32,3,0,2,17,3,128,64,1,4,63,255,3,3,129,128,160,3,1,64,160,3,64,4,25,3,0,64,1,3,191,255,
3,3,1,128,160,1,129,128,1,3,0,3,192,1,1,128,1,3,0,64,1,3,1,192,32,3,0,64,1,3,2,0,32,3,64,1,153,2,0,0,7,2,128,0,5,0,64,2,151,2,0,0,8,3,0,64,1,3,191,255,131,3,1,128,160,2,129,128,1,3,0,0,6,3,128,5,64,3,2,64,33,2,128,0,41,160,39,0,0,0,1,17,0,18,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,4,136,0,0,0,10,0,4,115,105,122,101,0,1,62,0,5,114,97,105,115,101,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,6,83,121,109,98,111,108,0,3,61,61,61,0,2,91,93,0,3,112,111,112,0,6,101,
109,112,116,121,63,0,4,101,97,99,104,108,80,0,0,0,58,83,67,0,4,0,7,0,2,237,235,0,0,0,6,4,0,0,38,2,0,64,1,2,128,192,21,3,0,128,1,2,0,1,32,2,0,0,41,190,145,0,0,0,0,0,0,0,0,0,1,0,4,115,101,110,100,121,252,0,0,0,90,83,67,0,3,0,6,0,2,120,90,0,0,0,14,2,0,0,38,1,129,0,21,1,192,2,153,1,128,0,8,1,129,0,22,1,128,64,1,1,129,64,22,0,64,2,151,1,128,128,21,2,1,64,21,2,128,64,1,1,128,1,32,1,129,64,22,1,128,0,41,176,112,0,0,0,0,0,0,0,0,0,1,0,4,99,97,108,108,56,3,0,0,0,62,83,67,0,4,0,6,0,2,253,202,0,0,0,7,0,0,0,166,
1,0,0,7,1,128,0,5,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,94,85,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,162,83,67,0,3,0,6,0,2,120,90,0,0,0,30,2,0,0,38,1,128,128,21,1,192,2,25,0,128,192,22,1,128,0,8,1,128,128,22,0,64,11,23,1,128,64,21,1,192,5,153,1,128,64,21,2,0,64,1,2,128,192,21,1,128,1,32,2,63,255,131,1,128,64,181,1,192,1,153,1,128,64,1,1,128,192,22,1,128,0,5,0,64,4,151,1,128,64,1,2,0,192,21,1,128,128,160,2,63,255,131,1,128,64,181,1,192,1,153,1,128,64,1,1,128,192,22,1,128,0,5,1,128,0,
41,140,206,0,0,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,1,62,0,3,60,61,62,177,18,0,0,0,62,83,67,0,4,0,6,0,2,253,202,0,0,0,7,0,0,0,166,1,0,0,7,1,128,0,5,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,94,85,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,162,83,67,0,3,0,6,0,2,120,90,0,0,0,30,2,0,0,38,1,128,128,21,1,192,2,25,0,128,192,22,1,128,0,8,1,128,128,22,0,64,11,23,1,128,64,21,1,192,5,153,1,128,64,21,2,0,64,1,2,128,192,21,1,128,1,32,2,63,255,131,1,128,64,179,1,192,1,153,1,128,64,1,1,128,192,22,1,128,0,
5,0,64,4,151,1,128,64,1,2,0,192,21,1,128,128,160,2,63,255,131,1,128,64,179,1,192,1,153,1,128,64,1,1,128,192,22,1,128,0,5,1,128,0,41,135,105,0,0,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,1,60,0,3,60,61,62,92,122,0,0,0,74,83,67,0,4,0,6,0,2,253,202,0,0,0,10,0,0,0,166,1,1,0,55,1,129,0,55,2,0,0,6,2,128,3,64,2,0,0,33,2,0,128,1,2,128,192,1,0,1,1,55,0,0,0,41,22,41,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,92,83,67,0,3,0,5,0,2,72,57,0,0,0,13,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,2,25,1,128,128,
21,2,0,64,1,1,128,64,160,0,64,1,151,1,128,192,21,2,0,64,1,1,128,64,160,1,128,0,41,161,2,0,0,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,4,112,117,115,104,61,37,0,0,0,58,83,67,0,3,0,5,0,2,72,57,0,0,0,6,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,150,177,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,80,83,67,0,3,0,5,0,2,72,57,0,0,0,10,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,0,153,0,64,1,151,1,0,128,21,1,128,64,1,1,0,64,160,1,0,0,41,66,30,0,0,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,
4,112,117,115,104,61,37,0,0,1,144,83,67,0,12,0,19,0,2,22,255,0,0,0,81,10,0,0,166,6,1,0,1,6,129,64,1,6,0,0,178,6,64,6,25,6,0,192,1,6,192,0,3,6,0,0,178,6,64,3,153,6,0,128,1,6,129,0,1,6,0,64,160,6,128,64,1,7,1,0,1,7,131,0,1,6,128,129,32,5,128,0,41,6,0,192,1,6,191,255,131,6,0,0,178,6,64,2,153,6,0,64,1,6,128,128,1,3,131,0,1,4,3,64,1,0,64,2,23,6,0,128,1,6,128,64,1,3,131,0,1,4,3,64,1,6,1,192,1,6,129,0,1,6,0,64,160,4,131,0,1,6,1,0,1,6,129,64,1,5,3,0,1,5,131,64,1,6,1,0,1,6,0,192,173,6,129,64,1,7,0,3,64,6,
1,0,161,6,2,64,1,6,128,64,1,7,2,128,1,7,131,0,1,6,128,129,32,6,0,192,1,6,0,192,173,6,192,0,131,6,1,64,160,1,131,0,1,6,2,128,1,6,129,0,1,6,1,128,181,6,64,4,153,6,0,0,6,6,128,64,1,7,0,128,1,7,128,192,1,8,1,0,1,8,130,128,1,8,130,0,175,9,1,128,1,6,1,194,161,6,2,128,1,6,129,64,1,6,2,64,179,6,64,5,25,6,0,0,6,6,128,64,1,7,0,128,1,7,128,192,1,8,2,128,1,8,0,192,173,8,129,64,1,9,1,128,1,6,1,194,161,6,0,0,5,6,0,0,41,85,90,0,0,0,0,0,0,0,0,0,10,0,2,61,61,0,2,91,93,0,3,91,93,61,0,1,43,0,4,117,112,116,111,0,1,37,
0,1,62,0,12,95,95,115,111,114,116,95,115,117,98,95,95,0,1,45,0,1,60,220,0,0,0,0,217,83,67,0,3,0,7,0,2,104,123,0,0,0,40,2,0,0,38,1,129,128,21,1,192,3,153,1,129,128,21,2,1,192,21,2,128,64,1,2,0,64,160,2,130,64,21,1,128,1,32,0,64,2,151,1,129,192,21,2,0,64,1,1,128,64,160,2,2,64,21,1,128,128,160,2,63,255,131,1,128,192,181,1,192,5,153,1,129,192,21,2,0,64,1,1,128,64,160,2,2,0,21,2,130,192,21,3,0,192,1,2,1,1,32,1,130,192,21,1,129,64,175,1,130,192,22,0,64,5,23,1,129,192,21,2,0,64,1,1,128,64,160,2,2,0,21,2,
130,128,21,3,0,192,1,2,1,1,32,1,130,128,21,1,129,128,173,1,130,128,22,1,128,0,41,66,205,0,0,0,0,0,0,0,0,0,7,0,4,99,97,108,108,0,2,91,93,0,3,60,61,62,0,1,62,0,3,91,93,61,0,1,45,0,1,43,219,14,0,0,0,173,83,67,0,3,0,10,0,2,185,214,0,0,0,24,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,128,128,1,1,128,64,32,1,192,0,153,0,64,7,23,1,128,0,6,2,0,128,1,2,128,0,66,2,128,1,147,3,0,128,1,3,1,64,32,2,129,0,160,3,63,255,131,3,191,255,131,4,0,128,1,4,1,64,32,4,1,128,175,4,128,64,1,1,128,130,161,1,0,0,41,
231,140,0,0,0,0,0,0,0,0,0,7,0,4,101,97,99,104,0,6,101,109,112,116,121,63,0,12,95,95,115,111,114,116,95,115,117,98,95,95,0,5,65,114,114,97,121,0,3,110,101,119,0,4,115,105,122,101,0,1,45,16,16,0,0,0,54,83,67,0,3,0,5,0,2,72,57,0,0,0,5,2,0,0,38,1,128,128,21,2,0,64,1,1,128,0,160,1,128,0,41,125,40,0,0,0,0,0,0,0,0,0,1,0,4,112,117,115,104,35,146,0,0,0,63,83,67,0,1,0,2,0,2,86,190,0,0,0,6,0,128,0,6,0,128,64,71,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,42,31,0,0,0,0,0,0,0,0,0,1,0,9,101,120,99,101,112,116,105,111,
110,40,194,0,0,0,65,83,67,0,3,0,6,0,2,120,90,0,0,0,8,0,8,0,166,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,2,128,128,1,1,128,63,161,1,128,0,41,253,71,0,0,0,0,0,0,0,0,0,1,0,3,110,101,119,203,248,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,
0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,83,67,0,1,0,2,0,2,86,190,0,0,0,32,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,8,192,0,128,128,70,0,128,0,72,1,0,12,192,0,128,192,70,0,128,0,72,1,0,16,192,0,129,0,70,0,128,0,72,1,0,18,192,0,129,64,70,0,128,0,72,1,0,26,192,0,129,128,70,0,128,0,72,1,0,32,192,0,129,192,70,0,128,0,72,
1,0,36,192,0,130,0,70,0,128,0,72,1,0,42,192,0,130,64,70,0,0,0,5,0,0,0,41,136,187,0,0,0,0,0,0,0,0,0,10,0,6,100,101,108,101,116,101,0,4,101,97,99,104,0,8,101,97,99,104,95,107,101,121,0,10,101,97,99,104,95,118,97,108,117,101,0,10,105,110,105,116,105,97,108,105,122,101,0,5,109,101,114,103,101,0,7,114,101,106,101,99,116,33,0,6,114,101,106,101,99,116,0,7,115,101,108,101,99,116,33,0,6,115,101,108,101,99,116,176,65,0,0,0,121,83,67,0,3,0,5,0,2,72,57,0,0,0,16,2,0,0,166,1,128,128,1,1,192,2,25,1,128,0,6,2,0,
64,1,1,128,0,160,1,128,64,32,1,192,2,25,1,128,128,1,2,0,64,1,1,128,128,160,0,64,1,151,1,128,0,6,2,0,64,1,1,128,192,160,1,128,0,41,246,154,0,0,0,0,0,0,0,0,0,4,0,8,104,97,115,95,107,101,121,63,0,1,33,0,4,99,97,108,108,0,8,95,95,100,101,108,101,116,101,225,86,0,0,0,68,83,67,0,2,0,4,0,2,111,40,0,0,0,7,0,0,0,166,1,0,0,6,1,0,0,32,1,128,3,64,1,0,64,33,0,0,0,6,0,0,0,41,65,169,0,0,0,0,0,0,0,0,0,2,0,4,107,101,121,115,0,4,101,97,99,104,100,44,0,0,0,74,83,67,0,3,0,7,0,2,104,123,0,0,0,9,2,0,0,38,1,128,64,21,2,
0,64,1,2,128,0,6,3,0,64,1,2,128,64,160,2,1,1,55,1,128,0,160,1,128,0,41,66,100,0,0,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,2,91,93,166,33,0,0,0,68,83,67,0,2,0,4,0,2,111,40,0,0,0,7,0,0,0,166,1,0,0,6,1,0,0,32,1,128,3,64,1,0,64,33,0,0,0,6,0,0,0,41,65,169,0,0,0,0,0,0,0,0,0,2,0,4,107,101,121,115,0,4,101,97,99,104,100,44,0,0,0,54,83,67,0,3,0,5,0,2,72,57,0,0,0,5,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,128,0,41,10,201,0,0,0,0,0,0,0,0,0,1,0,4,99,97,108,108,56,3,0,0,0,68,83,67,0,2,0,4,0,2,111,40,0,0,0,7,0,0,
0,166,1,0,0,6,1,0,0,32,1,128,3,64,1,0,64,33,0,0,0,6,0,0,0,41,65,169,0,0,0,0,0,0,0,0,0,2,0,4,107,101,121,115,0,4,101,97,99,104,100,44,0,0,0,66,83,67,0,3,0,6,0,2,120,90,0,0,0,7,2,0,0,38,1,128,64,21,2,0,0,6,2,128,64,1,2,0,64,160,1,128,0,160,1,128,0,41,185,72,0,0,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,2,91,93,166,33,0,0,0,73,83,67,0,3,0,6,0,2,120,90,0,0,0,8,0,8,0,166,1,128,0,6,2,0,128,1,2,1,0,183,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,164,122,0,0,0,0,0,0,0,0,0,1,0,11,95,95,105,110,105,116,95,99,111,
114,101,195,199,0,0,0,206,83,67,0,4,0,6,0,2,253,202,0,0,0,26,2,0,0,166,1,129,0,63,2,0,64,1,2,128,0,132,2,0,0,160,2,64,0,153,0,64,1,151,2,0,0,6,2,128,0,61,2,0,128,160,2,0,64,1,2,0,64,32,0,129,0,1,2,0,0,6,2,128,3,64,2,0,192,33,2,0,128,1,2,64,2,25,2,0,64,1,2,128,5,64,2,0,192,33,0,64,1,151,2,0,64,1,2,128,7,64,2,0,192,33,1,128,0,41,92,192,0,0,0,1,17,0,32,99,97,110,39,116,32,99,111,110,118,101,114,116,32,97,114,103,117,109,101,110,116,32,105,110,116,111,32,72,97,115,104,98,192,0,0,0,4,0,11,114,101,115,
112,111,110,100,95,116,111,63,0,7,116,111,95,104,97,115,104,0,5,114,97,105,115,101,0,8,101,97,99,104,95,107,101,121,24,160,0,0,0,73,83,67,0,3,0,7,0,2,104,123,0,0,0,9,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,2,0,192,21,2,128,64,1,3,0,192,1,2,0,65,32,1,128,0,41,6,82,0,0,0,0,0,0,0,0,0,2,0,2,91,93,0,3,91,93,61,82,102,0,0,0,145,83,67,0,3,0,8,0,2,153,148,0,0,0,23,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,192,5,25,1,128,128,21,2,0,64,1,2,128,0,6,3,0,64,1,2,128,128,160,3,0,64,21,3,128,64,1,3,0,128,160,1,128,
65,160,0,64,1,151,1,128,64,21,2,0,64,1,1,128,128,160,2,0,192,21,2,128,64,1,3,0,192,1,2,0,193,32,1,128,0,41,92,81,0,0,0,0,0,0,0,0,0,4,0,8,104,97,115,95,107,101,121,63,0,4,99,97,108,108,0,2,91,93,0,3,91,93,61,253,141,0,0,0,73,83,67,0,3,0,7,0,2,104,123,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,2,0,192,21,2,128,64,1,3,0,192,1,2,0,65,32,1,128,0,41,203,144,0,0,0,0,0,0,0,0,0,2,0,2,91,93,0,3,91,93,61,82,102,0,0,0,122,83,67,0,3,0,6,0,2,120,90,0,0,0,17,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,
0,33,1,128,128,1,1,128,64,32,2,63,255,131,1,128,128,178,1,192,1,25,0,0,0,5,0,0,0,41,2,0,128,1,2,128,5,64,2,0,192,33,0,0,0,6,0,0,0,41,127,24,0,0,0,0,0,0,0,0,0,4,0,8,101,97,99,104,95,107,101,121,0,4,115,105,122,101,0,2,61,61,0,4,101,97,99,104,11,116,0,0,0,104,83,67,0,4,0,7,0,2,237,235,0,0,0,15,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,64,1,3,0,192,1,2,0,65,32,2,64,2,25,2,0,128,21,2,128,64,1,2,0,128,160,2,0,0,5,2,0,0,41,166,165,0,0,0,0,0,0,0,0,0,3,0,2,91,93,0,4,99,97,108,108,0,
4,112,117,115,104,58,58,0,0].concat([0,56,83,67,0,3,0,5,0,2,72,57,0,0,0,5,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,128,0,41,250,78,0,0,0,0,0,0,0,0,0,1,0,6,100,101,108,101,116,101,144,125,0,0,0,62,83,67,0,3,0,5,0,2,72,57,0,0,0,6,0,0,0,166,1,0,192,63,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,177,244,0,0,0,0,0,0,0,0,0,1,0,8,101,97,99,104,95,107,101,121,129,235,0,0,0,111,83,67,0,4,0,7,0,2,237,235,0,0,0,17,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,64,1,3,0,192,1,2,0,65,32,2,64,0,153,
0,64,2,151,1,128,192,1,2,0,128,21,2,128,64,1,3,0,192,1,2,0,129,32,1,128,0,41,170,50,0,0,0,0,0,0,0,0,0,3,0,2,91,93,0,4,99,97,108,108,0,3,91,93,61,55,200,0,0,0,122,83,67,0,3,0,6,0,2,120,90,0,0,0,17,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,128,128,1,1,128,64,32,2,63,255,131,1,128,128,178,1,192,1,25,0,0,0,5,0,0,0,41,2,0,128,1,2,128,5,64,2,0,192,33,0,0,0,6,0,0,0,41,127,24,0,0,0,0,0,0,0,0,0,4,0,8,101,97,99,104,95,107,101,121,0,4,115,105,122,101,0,2,61,61,0,4,101,97,99,104,11,116,0,0,0,104,83,
67,0,4,0,7,0,2,237,235,0,0,0,15,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,64,1,3,0,192,1,2,0,65,32,2,64,0,153,0,64,1,151,1,128,128,21,2,0,64,1,1,128,128,160,1,128,0,41,69,107,0,0,0,0,0,0,0,0,0,3,0,2,91,93,0,4,99,97,108,108,0,4,112,117,115,104,58,58,0,0,0,56,83,67,0,3,0,5,0,2,72,57,0,0,0,5,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,128,0,41,250,78,0,0,0,0,0,0,0,0,0,1,0,6,100,101,108,101,116,101,144,125,0,0,0,62,83,67,0,3,0,5,0,2,72,57,0,0,0,6,0,0,0,166,1,0,192,63,1,128,0,6,2,0,
3,64,1,128,0,33,1,0,0,41,177,244,0,0,0,0,0,0,0,0,0,1,0,8,101,97,99,104,95,107,101,121,129,235,0,0,0,111,83,67,0,4,0,8,0,2,28,4,0,0,0,17,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,64,1,3,0,192,1,2,0,65,32,2,64,3,25,2,0,192,1,2,128,128,21,3,0,64,1,3,129,0,1,2,128,129,32,2,0,0,5,2,0,0,41,198,45,0,0,0,0,0,0,0,0,0,3,0,2,91,93,0,4,99,97,108,108,0,3,91,93,61,55,200,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,83,67,0,1,0,3,0,2,70,
159,0,0,0,4,0,128,0,6,1,0,0,145,0,128,0,160,1,0,0,41,56,20,0,0,0,0,0,0,0,0,0,2,0,7,105,110,99,108,117,100,101,0,10,69,110,117,109,101,114,97,98,108,101,250,174,0,0,0,104,83,67,0,1,0,2,0,2,86,190,0,0,0,16,0,128,0,6,0,128,64,71,1,0,2,192,0,128,0,70,0,128,0,6,0,128,64,71,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,64,70,0,128,0,72,1,0,8,192,0,128,0,70,0,0,0,5,0,0,0,41,180,22,0,0,0,0,0,0,0,0,0,2,0,4,108,111,111,112,0,4,101,118,97,108,73,31,0,0,0,66,83,67,0,2,0,3,0,2,31,207,0,0,0,8,0,0,0,38,0,64,
1,23,1,0,0,43,1,0,0,32,1,0,0,7,1,63,254,24,0,0,0,5,0,0,0,41,206,74,0,0,0,0,0,0,0,0,0,1,0,4,99,97,108,108,56,3,0,0,0,112,83,67,0,3,0,6,0,2,120,90,0,0,0,7,2,0,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,254,232,0,0,0,1,17,0,20,101,118,97,108,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,100,250,0,0,0,3,0,5,114,97,105,115,101,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,3,110,101,119,100,39,0,0,0,62,83,67,0,3,0,5,0,2,72,57,
0,0,0,5,2,0,0,38,1,128,0,17,2,0,64,1,1,128,64,160,1,128,0,41,232,82,0,0,0,0,0,0,0,0,0,2,0,6,75,101,114,110,101,108,0,4,101,118,97,108,26,177,0,0,0,66,83,67,0,2,0,3,0,2,31,207,0,0,0,8,0,0,0,38,0,64,1,23,1,0,0,43,1,0,0,32,1,0,0,7,1,63,254,24,0,0,0,5,0,0,0,41,206,74,0,0,0,0,0,0,0,0,0,1,0,4,99,97,108,108,56,3,0,0,0,111,83,67,0,1,0,2,0,2,86,190,0,0,0,14,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,0,0,5,0,0,0,41,
171,108,0,0,0,0,0,0,0,0,0,4,0,6,100,111,119,110,116,111,0,5,116,105,109,101,115,0,4,117,112,116,111,0,4,115,116,101,112,241,135,0,0,0,101,83,67,0,4,0,6,0,2,253,202,0,0,0,15,2,0,0,166,1,128,0,6,0,64,3,23,2,0,128,1,2,128,192,1,2,0,0,160,2,0,192,1,2,0,64,175,1,129,0,1,2,0,192,1,2,128,64,1,2,0,128,182,2,63,251,24,0,0,0,6,0,0,0,41,69,130,0,0,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,1,45,0,2,62,61,174,118,0,0,0,100,83,67,0,3,0,5,0,2,72,57,0,0,0,15,0,0,0,166,1,63,255,131,0,64,3,23,1,128,64,1,2,0,128,1,1,128,
0,160,1,128,128,1,1,128,64,173,1,0,192,1,1,128,128,1,2,0,0,6,1,128,128,179,1,191,251,24,0,0,0,6,0,0,0,41,171,177,0,0,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,1,43,0,1,60,128,191,0,0,0,101,83,67,0,4,0,6,0,2,253,202,0,0,0,15,2,0,0,166,1,128,0,6,0,64,3,23,2,0,128,1,2,128,192,1,2,0,0,160,2,0,192,1,2,0,64,173,1,129,0,1,2,0,192,1,2,128,64,1,2,0,128,180,2,63,251,24,0,0,0,6,0,0,0,41,207,253,0,0,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,1,43,0,2,60,61,30,214,0,0,0,172,83,67,0,5,0,7,0,2,218,219,0,0,0,27,2,16,0,166,0,
64,0,151,0,64,0,151,1,64,0,3,2,128,64,1,3,0,0,145,2,128,0,160,2,192,1,153,2,128,0,6,2,128,128,32,0,64,0,151,2,128,0,6,2,1,64,1,0,64,3,151,2,128,192,1,3,1,0,1,2,128,192,160,2,129,0,1,3,0,128,1,2,129,0,172,2,1,64,1,2,129,0,1,3,0,64,1,2,129,64,180,2,191,250,152,0,0,0,6,0,0,0,41,98,106,0,0,0,0,0,0,0,0,0,6,0,8,107,105,110,100,95,111,102,63,0,5,70,108,111,97,116,0,4,116,111,95,102,0,4,99,97,108,108,0,1,43,0,2,60,61,210,149,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,65,83,67,0,1,0,3,0,2,70,159,0,0,0,4,0,128,0,6,1,0,0,145,0,128,0,160,1,0,0,41,56,20,0,0,0,0,0,0,0,0,0,2,0,7,105,110,99,108,117,100,101,0,10,67,111,109,112,97,114,97,98,108,101,58,19,0,0,1,12,83,67,0,1,0,3,0,2,70,159,0,0,0,43,0,128,0,17,1,0,1,4,0,128,64,160,0,192,12,153,0,128,0,17,1,0,1,132,0,128,64,160,0,192,0,153,0,64,3,23,0,128,0,72,1,0,2,192,0,129,0,70,0,128,0,72,1,0,4,192,0,128,192,70,0,128,0,72,1,0,6,192,0,129,64,70,0,128,0,72,1,0,8,192,0,129,128,70,0,128,0,72,1,0,10,192,0,129,
192,70,0,128,0,72,1,0,12,192,0,129,0,70,0,128,0,5,0,64,6,151,0,0,0,72,0,128,14,192,0,1,64,70,0,0,0,72,0,128,16,192,0,1,128,70,0,0,0,72,0,128,18,192,0,1,192,70,0,0,0,72,0,128,20,192,0,1,0,70,0,0,0,5,0,0,0,41,38,242,0,0,0,0,0,0,0,0,0,8,0,6,75,101,114,110,101,108,0,11,114,101,115,112,111,110,100,95,116,111,63,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,7,115,112,114,105,110,116,102,0,6,112,114,105,110,116,102,0,5,112,114,105,110,116,0,4,112,117,116,115,0,1,112,205,84,0,0,0,112,83,67,0,3,0,6,0,
2,120,90,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,187,233,0,0,0,1,17,0,20,112,114,105,110,116,102,32,110,111,116,32,97,118,97,105,108,97,98,108,101,39,179,0,0,0,3,0,5,114,97,105,115,101,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,3,110,101,119,100,39,0,0,0,113,83,67,0,3,0,6,0,2,120,90,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,187,233,0,0,0,1,17,0,21,115,112,114,105,110,116,102,32,
110,111,116,32,97,118,97,105,108,97,98,108,101,183,56,0,0,0,3,0,5,114,97,105,115,101,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,3,110,101,119,100,39,0,0,0,148,83,67,0,5,0,8,0,2,43,52,0,0,0,21,0,8,0,38,1,191,255,131,2,128,64,1,2,128,0,32,2,1,64,1,0,64,4,151,2,128,0,6,3,0,64,1,3,128,192,1,3,0,128,160,3,0,192,32,2,128,64,160,2,128,192,1,2,129,0,173,1,129,64,1,2,128,192,1,3,1,0,1,2,129,64,179,2,191,249,152,0,0,0,5,0,0,0,41,29,145,0,0,0,0,0,0,0,0,0,6,0,4,115,105,122,
101,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,2,91,93,0,4,116,111,95,115,0,1,43,0,1,60,32,116,0,0,0,240,83,67,0,6,0,8,0,2,114,100,0,0,0,39,0,8,0,38,1,191,255,131,3,0,64,1,3,0,0,32,2,1,128,1,0,64,10,23,3,0,64,1,3,128,192,1,3,0,64,160,3,0,128,32,2,129,128,1,3,0,0,6,3,129,64,1,3,0,192,160,3,1,64,1,3,191,255,3,3,0,64,160,3,128,0,61,3,1,0,160,3,64,1,153,3,0,0,6,3,128,0,189,3,0,192,160,3,0,192,1,3,1,64,173,1,129,128,1,3,0,192,1,3,129,0,1,3,1,128,179,3,63,244,24,3,1,0,1,3,191,255,131,3,1,192,178,
3,64,1,153,3,0,0,6,3,128,1,61,3,0,192,160,0,0,0,5,0,0,0,41,92,27,0,0,0,3,17,0,1,10,17,0,1,10,17,0,1,10,232,173,0,0,0,8,0,4,115,105,122,101,0,2,91,93,0,4,116,111,95,115,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,2,33,61,0,1,43,0,1,60,0,2,61,61,38,252,0,0,0,175,83,67,0,5,0,8,0,2,43,52,0,0,0,26,0,8,0,38,1,191,255,131,2,128,64,1,2,128,0,32,2,1,64,1,0,64,6,23,2,128,0,6,3,0,64,1,3,128,192,1,3,0,128,160,3,0,192,32,2,128,64,160,2,128,0,6,3,0,0,61,2,128,64,160,2,128,192,1,2,129,0,173,1,129,64,1,2,
128,192,1,3,1,0,1,2,129,64,179,2,191,248,24,2,128,64,1,3,63,255,131,2,128,128,160,2,128,0,41,0,26,0,0,0,1,17,0,1,10,6,120,0,0,0,6,0,4,115,105,122,101,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,2,91,93,0,7,105,110,115,112,101,99,116,0,1,43,0,1,60,121,83,0,0,0,91,83,67,0,3,0,7,0,2,104,123,0,0,0,10,0,8,0,38,1,128,0,6,2,0,0,6,2,129,64,55,3,0,64,1,2,129,128,56,2,0,127,160,1,128,0,160,0,0,0,5,0,0,0,41,192,24,0,0,0,0,0,0,0,0,0,2,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,7,115,112,114,105,
110,116,102,119,166,0,0,0,111,83,67,0,3,0,6,0,2,120,90,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,187,233,0,0,0,1,17,0,19,112,114,105,110,116,32,110,111,116,32,97,118,97,105,108,97,98,108,101,40,139,0,0,0,3,0,5,114,97,105,115,101,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,3,110,101,119,100,39,0,0,0,110,83,67,0,3,0,6,0,2,120,90,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,187,233,0,0,
0,1,17,0,18,112,117,116,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,76,97,0,0,0,3,0,5,114,97,105,115,101,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,3,110,101,119,100,39,0,0,0,107,83,67,0,3,0,6,0,2,120,90,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,187,233,0,0,0,1,17,0,15,112,32,110,111,116,32,97,118,97,105,108,97,98,108,101,207,156,0,0,0,3,0,5,114,97,105,115,101,0,19,78,111,116,73,109,112,108,101,109,101,110,116,
101,100,69,114,114,111,114,0,3,110,101,119,100,39,0,0,0,112,83,67,0,3,0,6,0,2,120,90,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,187,233,0,0,0,1,17,0,20,112,114,105,110,116,102,32,110,111,116,32,97,118,97,105,108,97,98,108,101,39,179,0,0,0,3,0,5,114,97,105,115,101,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,3,110,101,119,100,39,0,0,0,54,83,67,0,1,0,2,0,2,86,190,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,243,18,
0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,1,53,83,67,0,4,0,7,0,2,237,235,0,0,0,46,0,0,0,166,2,0,0,6,2,0,0,32,1,1,0,1,2,0,128,1,2,128,1,4,2,0,64,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,2,17,3,0,0,61,2,0,193,32,2,0,0,6,2,1,64,32,1,129,0,1,2,0,128,1,2,128,192,1,2,1,128,160,2,191,255,131,2,1,192,181,2,64,1,25,0,0,0,6,0,0,0,41,0,64,3,23,2,128,64,1,3,0,128,1,2,130,0,160,2,128,128,1,2,128,128,32,1,1,64,1,2,128,128,1,3,0,192,1,2,129,128,160,3,63,255,131,2,130,64,179,2,191,250,24,2,128,0,6,2,130,128,
32,2,192,0,153,0,64,1,151,2,128,64,1,3,0,128,1,2,130,0,160,0,0,0,6,0,0,0,41,224,239,0,0,0,1,17,0,13,99,97,110,39,116,32,105,116,101,114,97,116,101,220,143,0,0,0,11,0,5,102,105,114,115,116,0,11,114,101,115,112,111,110,100,95,116,111,63,0,4,115,117,99,99,0,5,114,97,105,115,101,0,9,84,121,112,101,69,114,114,111,114,0,4,108,97,115,116,0,3,60,61,62,0,1,62,0,4,99,97,108,108,0,1,60,0,12,101,120,99,108,117,100,101,95,101,110,100,63,71,123,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,83,67,0,1,0,3,0,2,70,159,0,0,0,4,0,128,0,6,1,0,0,145,0,128,0,160,1,0,0,41,56,20,0,0,0,0,0,0,0,0,0,2,0,7,105,110,99,108,117,100,101,0,10,69,110,117,109,101,114,97,98,108,101,250,174,0,0,0,212,83,67,0,1,0,2,0,2,86,190,0,0,0,29,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,128,0,72,1,0,12,192,0,129,64,70,0,128,0,72,1,0,14,192,0,129,128,70,0,128,0,
72,1,0,16,192,0,129,192,70,0,128,0,72,1,0,18,192,0,130,0,70,0,0,0,5,0,0,0,41,105,73,0,0,0,0,0,0,0,0,0,9,0,9,101,97,99,104,95,108,105,110,101,0,4,103,115,117,98,0,5,103,115,117,98,33,0,4,115,99,97,110,0,3,115,117,98,0,4,115,117,98,33,0,9,101,97,99,104,95,99,104,97,114,0,9,101,97,99,104,95,98,121,116,101,0,3,91,93,61,211,25,0,0,0,208,83,67,0,4,0,9,0,2,12,37,0,0,0,37,0,0,0,166,1,63,255,131,0,64,6,23,2,0,64,1,2,128,0,6,3,0,128,1,3,128,192,1,3,128,128,173,4,0,128,1,3,128,192,174,2,128,65,32,2,0,0,160,
2,0,192,1,2,0,128,173,1,1,0,1,2,0,0,6,2,192,4,131,3,0,128,1,2,1,1,32,1,129,0,1,2,63,247,24,2,0,0,6,2,1,64,32,2,128,128,1,2,1,128,181,2,64,4,153,2,0,64,1,2,128,0,6,3,0,128,1,3,128,0,6,3,129,64,32,4,0,128,1,3,128,192,174,2,128,65,32,2,0,0,160,0,0,0,6,0,0,0,41,222,138,0,0,0,0,0,0,0,0,0,7,0,4,99,97,108,108,0,2,91,93,0,1,43,0,1,45,0,5,105,110,100,101,120,0,4,115,105,122,101,0,1,62,59,238,0,0,1,24,83,67,0,3,0,6,0,2,120,90,0,0,0,28,0,8,0,166,1,128,64,1,1,128,0,32,2,64,0,3,1,128,64,178,1,192,0,153,1,128,
128,1,1,192,2,24,1,128,64,1,1,128,0,32,2,64,0,131,1,128,64,178,1,192,0,153,0,64,2,23,1,128,0,6,2,0,1,145,2,128,0,61,1,128,129,32,1,128,2,17,2,0,3,4,1,129,64,160,1,192,0,153,0,64,2,23,1,0,0,6,1,128,3,145,2,0,0,189,1,0,129,32,1,0,0,41,51,87,0,0,0,2,17,0,25,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,17,0,24,103,115,117,98,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,40,121,101,116,41,112,8,0,0,0,8,0,4,115,105,122,101,0,2,61,61,0,5,114,97,105,
115,101,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,6,79,98,106,101,99,116,0,14,99,111,110,115,116,95,100,101,102,105,110,101,100,63,0,6,82,101,103,101,120,112,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,202,197,0,0,0,123,83,67,0,4,0,7,0,2,237,235,0,0,0,19,0,8,0,166,2,0,0,6,2,129,64,55,3,0,64,1,2,129,128,56,3,0,128,1,2,0,63,161,1,129,0,1,2,0,192,1,2,128,0,6,2,0,64,160,2,64,2,153,2,0,0,6,2,128,192,1,2,0,128,160,2,0,0,6,0,64,0,151,2,0,0,5,2,0,0,41,47,181,
0,0,0,0,0,0,0,0,0,3,0,4,103,115,117,98,0,2,33,61,0,7,114,101,112,108,97,99,101,89,85,0,0,0,159,83,67,0,3,0,5,0,2,72,57,0,0,0,11,2,0,0,166,1,128,0,17,2,0,1,4,1,128,64,160,1,192,0,153,0,64,2,23,1,0,0,6,1,128,2,17,2,0,0,61,1,0,193,32,1,0,0,41,93,61,0,0,0,1,17,0,24,115,99,97,110,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,40,121,101,116,41,184,13,0,0,0,5,0,6,79,98,106,101,99,116,0,14,99,111,110,115,116,95,100,101,102,105,110,101,100,63,0,6,82,101,103,101,120,112,0,5,114,97,105,115,101,0,19,78,
111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,165,234,0,0,1,23,83,67,0,3,0,6,0,2,120,90,0,0,0,28,0,8,0,166,1,128,64,1,1,128,0,32,2,64,0,3,1,128,64,178,1,192,0,153,1,128,128,1,1,192,2,24,1,128,64,1,1,128,0,32,2,64,0,131,1,128,64,178,1,192,0,153,0,64,2,23,1,128,0,6,2,0,1,145,2,128,0,61,1,128,129,32,1,128,2,17,2,0,3,4,1,129,64,160,1,192,0,153,0,64,2,23,1,0,0,6,1,128,3,145,2,0,0,189,1,0,129,32,1,0,0,41,51,87,0,0,0,2,17,0,25,119,114,111,110,103,32,110,117,109,98,101,114,32,111,
102,32,97,114,103,117,109,101,110,116,115,17,0,23,115,117,98,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,40,121,101,116,41,247,83,0,0,0,8,0,4,115,105,122,101,0,2,61,61,0,5,114,97,105,115,101,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,6,79,98,106,101,99,116,0,14,99,111,110,115,116,95,100,101,102,105,110,101,100,63,0,6,82,101,103,101,120,112,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,202,197,0,0,0,122,83,67,0,4,0,7,0,2,237,235,0,0,0,19,0,8,0,
166,2,0,0,6,2,129,64,55,3,0,64,1,2,129,128,56,3,0,128,1,2,0,63,161,1,129,0,1,2,0,192,1,2,128,0,6,2,0,64,160,2,64,2,153,2,0,0,6,2,128,192,1,2,0,128,160,2,0,0,6,0,64,0,151,2,0,0,5,2,0,0,41,47,181,0,0,0,0,0,0,0,0,0,3,0,3,115,117,98,0,2,33,61,0,7,114,101,112,108,97,99,101,196,124,0,0,0,122,83,67,0,3,0,6,0,2,120,90,0,0,0,18,0,0,0,166,1,63,255,131,0,64,4,23,1,128,64,1,2,0,0,6,2,128,128,1,2,0,64,160,1,128,0,160,1,128,128,1,1,128,128,173,1,0,192,1,1,128,128,1,2,0,0,6,2,1,0,32,1,128,192,179,1,191,249,152,
0,0,0,6,0,0,0,41,254,100,0,0,0,0,0,0,0,0,0,5,0,4,99,97,108,108,0,2,91,93,0,1,43,0,1,60,0,4,115,105,122,101,54,45,0,0,0,141,83,67,0,4,0,7,0,2,237,235,0,0,0,21,0,0,0,166,2,0,0,6,2,0,0,32,1,1,0,1,1,191,255,131,0,64,4,23,2,0,64,1,2,128,128,1,3,0,192,1,2,128,128,160,2,0,64,160,2,0,192,1,2,0,192,173,1,129,0,1,2,0,192,1,2,128,128,1,2,129,64,32,2,1,0,179,2,63,249,152,0,0,0,6,0,0,0,41,121,14,0,0,0,0,0,0,0,0,0,6,0,5,98,121,116,101,115,0,4,99,97,108,108,0,2,91,93,0,1,43,0,1,60,0,4,115,105,122,101,105,247,0,
0,0,141,83,67,0,6,0,10,0,2,82,38,0,0,0,22,4,0,0,38,3,0,0,6,3,191,255,131,4,0,64,1,3,0,1,32,2,1,128,1,3,0,0,6,3,128,64,1,3,128,64,173,4,63,255,3,3,129,192,65,3,0,0,160,2,129,128,1,3,0,0,6,3,129,0,1,4,0,128,1,4,129,64,1,3,129,193,183,4,0,0,61,3,128,192,160,3,0,128,160,3,0,0,41,242,29,0,0,0,1,17,0,0,49,33,0,0,0,4,0,2,91,93,0,1,43,0,7,114,101,112,108,97,99,101,0,4,106,111,105,110,21,138,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,83,67,0,1,0,3,0,
2,70,159,0,0,0,4,0,128,0,6,1,0,0,145,0,128,0,160,1,0,0,41,56,20,0,0,0,0,0,0,0,0,0,2,0,7,105,110,99,108,117,100,101,0,10,67,111,109,112,97,114,97,98,108,101,58,19,0,0,0,97,83,67,0,1,0,2,0,2,86,190,0,0,0,11,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,6,192,0,128,64,70,0,128,0,72,1,0,10,192,0,128,128,70,0,0,0,5,0,0,0,41,73,77,0,0,0,0,0,0,0,0,0,3,0,4,101,97,99,104,0,9,101,97,99,104,95,112,97,105,114,0,6,115,101,108,101,99,116,221,3,0,0,0,82,83,67,0,2,0,4,0,2,111,40,0,0,0,8,0,0,0,166,1,0,0,6,1,0,0,
32,1,0,64,32,1,128,3,64,1,0,128,33,0,0,0,6,0,0,0,41,167,20,0,0,0,0,0,0,0,0,0,3,0,5,99,108,97,115,115,0,7,109,101,109,98,101,114,115,0,4,101,97,99,104,211,215,0,0,0,66,83,67,0,3,0,6,0,2,120,90,0,0,0,7,2,0,0,38,1,128,64,21,2,0,0,6,2,128,64,1,2,0,64,160,1,128,0,160,1,128,0,41,185,72,0,0,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,2,91,93,166,33,0,0,0,82,83,67,0,2,0,4,0,2,111,40,0,0,0,8,0,0,0,166,1,0,0,6,1,0,0,32,1,0,64,32,1,128,3,64,1,0,128,33,0,0,0,6,0,0,0,41,167,20,0,0,0,0,0,0,0,0,0,3,0,5,99,108,97,115,115,
0,7,109,101,109,98,101,114,115,0,4,101,97,99,104,211,215,0,0,0,82,83,67,0,3,0,7,0,2,104,123,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,2,0,64,32,2,128,0,6,3,0,64,1,2,128,128,160,1,128,1,32,1,128,0,41,170,106,0,0,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,6,116,111,95,115,121,109,0,2,91,93,146,152,0,0,0,82,83,67,0,3,0,5,0,2,72,57,0,0,0,8,0,0,0,166,1,0,192,55,1,128,0,6,1,128,0,32,1,128,64,32,2,0,3,64,1,128,128,33,1,0,0,41,92,91,0,0,0,0,0,0,0,0,0,3,0,5,99,108,97,115,115,0,7,109,101,109,98,101,114,115,0,4,101,97,
99,104,211,215,0,0,0,100,83,67,0,4,0,6,0,2,253,202,0,0,0,14,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,192,1,2,0,64,160,2,64,2,25,2,0,128,21,2,128,192,1,2,0,128,160,2,0,0,5,2,0,0,41,84,239,0,0,0,0,0,0,0,0,0,3,0,2,91,93,0,4,99,97,108,108,0,4,112,117,115,104,58,58,0,0,0,0]),"i8",ALLOC_STATIC);_mrb_time_type=allocate([0,0,0,0,250,0,0,0],["*",0,0,0,"*",0,0,0],ALLOC_STATIC);
_mrb_run_optable=allocate([8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,14,0,0,0,70,0,0,0,17,0,0,0,18,0,0,0,21,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,42,0,0,0,45,0,0,0,51,0,0,0,54,0,0,0,58,0,0,0,59,0,0,0,65,0,0,0,75,0,0,0,73,0,0,0,105,0,0,0,106,0,0,0,125,0,0,0,145,0,0,0,160,0,0,0,198,0,0,0,199,0,0,0,200,0,0,0,240,0,0,0,257,0,0,0,263,0,0,0,340,0,0,0,284,0,0,0,352,0,0,0,304,0,0,0,325,0,0,0,364,0,0,0,
414,0,0,0,459,0,0,0,504,0,0,0,549,0,0,0,594,0,0,0,595,0,0,0,596,0,0,0,597,0,0,0,606,0,0,0,607,0,0,0,631,0,0,0,632,0,0,0,633,0,0,0,637,0,0,0,662,0,0,0,643,0,0,0,644,0,0,0,648,0,0,0,652,0,0,0,657,0,0,0,658,0,0,0,659,0,0,0,663,0,0,0,664,0,0,0,671,0,0,0],["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,
"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",
0,0,0],ALLOC_STATIC);_mrb_run_msg=allocate([110,111,32,116,97,114,103,101,116,32,99,108,97,115,115,32,111,114,32,109,111,100,117,108,101,0],"i8",ALLOC_STATIC);_mrb_run_m=allocate([115,117,112,101,114,32,99,97,108,108,101,100,32,111,117,116,115,105,100,101,32,111,102,32,109,101,116,104,111,100,0],"i8",ALLOC_STATIC);_mrb_parser_new_parser_state_zero=allocate(1412,"i8",ALLOC_STATIC);_mrb_open_allocf_mrb_state_zero=allocate(608,"i8",ALLOC_STATIC);
_mrb_obj_alloc_RVALUE_zero=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,undef,0,0,0,0,0,0,0],["i8","i8","i8","i8","*",0,0,0,"*",0,0,0,"*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_STATIC);_mrb_init_proc_mrb_irep_zero=allocate(40,"i8",ALLOC_STATIC);_mrb_digitmap=allocate([48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0],"i8",ALLOC_STATIC);
_mrb_check_datatype_mesg=allocate([119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,116,121,112,101,32,37,115,32,40,101,120,112,101,99,116,101,100,32,37,115,41,0],"i8",ALLOC_STATIC);_mrb_add_irep_mrb_irep_zero=allocate(40,"i8",ALLOC_STATIC);_mon_names=allocate(48,"i8",ALLOC_STATIC);_load_exec_msg162=allocate([99,111,100,101,103,101,110,32,101,114,114,111,114,0],"i8",ALLOC_STATIC);_load_exec_msg=allocate([115,121,110,116,97,120,32,101,114,114,111,114,0],"i8",ALLOC_STATIC);
_isspacetable=allocate([0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"i8",ALLOC_STATIC);_irep_error_msg=allocate([105,114,101,112,32,108,111,97,100,32,101,114,114,111,114,0],"i8",ALLOC_STATIC);_inspect_range_s=allocate([40,46,46,46,32,46,46,46,32,46,46,46,41,0,40,46,46,46,32,46,46,32,46,46,46,41,0,0],"i8",ALLOC_STATIC);_inspect_range_n=allocate([13,0,0,0,12,0,0,0],["i32",0,0,0,"i32",0,0,0],ALLOC_STATIC);_inspect_ary_tail=allocate([93],"i8",ALLOC_STATIC);_inspect_ary_sep=allocate([44,32],"i8",ALLOC_STATIC);
_inspect_ary_head=allocate([91],"i8",ALLOC_STATIC);
_hex2bin=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"i8",ALLOC_STATIC);
_hash_asso_values=allocate([51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,14,51,16,8,11,13,51,51,51,51,10,51,13,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,11,51,13,1,26,4,1,8,28,51,23,51,1,1,27,5,19,21,51,8,3,3,11,51,21,24,16,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51],"i8",ALLOC_STATIC);_flo_to_s_s=allocate([45,105,110,102,0,105,110,102,0,0],"i8",ALLOC_STATIC);_flo_to_s_n=allocate([4,0,0,0,3,0,0,0],["i32",0,0,0,"i32",0,0,0],ALLOC_STATIC);
_call_iseq=allocate([35,0,0,0],["i32",0,0,0],ALLOC_STATIC);
_builtin_types=allocate([0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],["i8",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,
0,"i8",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0,"i8",0,0,0,"*",0,0,0],ALLOC_STATIC);__str9935=allocate([124,83,38,0],"i8",ALLOC_STATIC);__str99=allocate([78,79,68,69,95,67,65,76,76,58,10,0],"i8",ALLOC_STATIC);
__str98754=allocate([99,111,100,101,103,101,110,32,101,114,114,111,114,58,32,37,115,10,0],"i8",ALLOC_STATIC);__str9869=allocate([91,93,0],"i8",ALLOC_STATIC);__str9827=allocate([82,117,110,116,105,109,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str98=allocate([37,115,0],"i8",ALLOC_STATIC);__str97753=allocate([99,111,100,101,103,101,110,32,101,114,114,111,114,58,37,115,58,37,100,58,32,37,115,10,0],"i8",ALLOC_STATIC);__str9770=allocate([101,120,99,101,112,116,105,111,110,0],"i8",ALLOC_STATIC);
__str97=allocate([44,32,0],"i8",ALLOC_STATIC);__str96752=allocate([79,80,95,117,110,107,110,111,119,110,32,37,100,9,37,100,9,37,100,9,37,100,10,0],"i8",ALLOC_STATIC);__str9665=allocate([36,37,100,0],"i8",ALLOC_STATIC);__str962=allocate([66,69,71,73,78,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0],"i8",ALLOC_STATIC);__str96=allocate([108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,58,10,0],"i8",ALLOC_STATIC);__str95751=allocate([79,80,95,69,80,79,80,9,37,100,10,0],"i8",ALLOC_STATIC);
__str9543=allocate([119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0],"i8",ALLOC_STATIC);__str95=allocate([78,79,68,69,95,83,67,79,80,69,58,10,0],"i8",ALLOC_STATIC);__str94750=allocate([79,80,95,80,79,80,69,82,82,9,37,100,10,0],"i8",ALLOC_STATIC);__str942=allocate([84,121,112,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str94=allocate([100,111,58,10,0],"i8",ALLOC_STATIC);__str93749=allocate([79,80,95,82,65,73,83,69,9,82,37,100,10,0],"i8",ALLOC_STATIC);
__str93=allocate([105,110,58,10,0],"i8",ALLOC_STATIC);__str92748=allocate([79,80,95,82,69,83,67,85,69,9,82,37,100,10,0],"i8",ALLOC_STATIC);__str927=allocate([32,0],"i8",ALLOC_STATIC);__str926=allocate([116,111,95,115,0],"i8",ALLOC_STATIC);__str92=allocate([112,111,115,116,58,10,0],"i8",ALLOC_STATIC);__str91747=allocate([79,80,95,79,78,69,82,82,9,37,48,51,100,10,0],"i8",ALLOC_STATIC);__str9171=allocate([105,110,100,101,120,32,37,108,100,32,111,117,116,32,111,102,32,97,114,114,97,121,0],"i8",ALLOC_STATIC);
__str91484=allocate([60,61,62,0],"i8",ALLOC_STATIC);__str91436=allocate([73,110,100,101,120,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str914=allocate([58,34,0],"i8",ALLOC_STATIC);__str91316=allocate([115,116,114,105,110,103,32,102,111,114,32,70,108,111,97,116,32,99,111,110,116,97,105,110,115,32,110,117,108,108,32,98,121,116,101,0],"i8",ALLOC_STATIC);
__str91262=allocate([110,117,109,98,101,114,101,100,40,37,100,41,32,97,102,116,101,114,32,117,110,110,117,109,98,101,114,101,100,40,37,100,41,0],"i8",ALLOC_STATIC);__str91226=allocate([69,110,117,109,101,114,97,98,108,101,0],"i8",ALLOC_STATIC);__str91204=allocate([111,0],"i8",ALLOC_STATIC);__str91117=allocate([84,114,117,101,67,108,97,115,115,0],"i8",ALLOC_STATIC);__str91051=allocate([113,117,111,0],"i8",ALLOC_STATIC);__str91015=allocate([97,116,97,110,0],"i8",ALLOC_STATIC);
__str91=allocate([114,101,115,116,58,10,0],"i8",ALLOC_STATIC);__str90746=allocate([79,80,95,69,80,85,83,72,9,58,73,40,37,100,41,10,0],"i8",ALLOC_STATIC);__str90=allocate([112,114,101,58,10,0],"i8",ALLOC_STATIC);__str9=allocate([83,121,109,98,111,108,0],"i8",ALLOC_STATIC);__str89745=allocate([79,80,95,69,82,82,9,76,40,37,100,41,10,0],"i8",ALLOC_STATIC);
__str8934=allocate([105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,32,115,104,111,117,108,100,32,116,97,107,101,32,115,97,109,101,32,99,108,97,115,115,32,111,98,106,101,99,116,0],"i8",ALLOC_STATIC);__str89=allocate([118,97,114,58,10,0],"i8",ALLOC_STATIC);__str88744=allocate([79,80,95,84,67,76,65,83,83,9,82,37,100,10,0],"i8",ALLOC_STATIC);__str8868=allocate([61,61,0],"i8",ALLOC_STATIC);__str8826=allocate([105,0],"i8",ALLOC_STATIC);__str88=allocate([78,79,68,69,95,70,79,82,58,10,0],"i8",ALLOC_STATIC);
__str87743=allocate([79,80,95,83,67,76,65,83,83,9,82,37,100,9,82,37,100,10,0],"i8",ALLOC_STATIC);__str8769=allocate([82,117,110,116,105,109,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str87=allocate([78,79,68,69,95,85,78,84,73,76,58,10,0],"i8",ALLOC_STATIC);__str86742=allocate([79,80,95,69,88,69,67,9,82,37,100,9,73,40,37,100,41,10,0],"i8",ALLOC_STATIC);__str8664=allocate([36,37,99,0],"i8",ALLOC_STATIC);__str861=allocate([83,104,105,102,116,105,110,103,0],"i8",ALLOC_STATIC);
__str860=allocate([105,102,110,111,110,101,0],"i8",ALLOC_STATIC);__str86=allocate([78,79,68,69,95,87,72,73,76,69,58,10,0],"i8",ALLOC_STATIC);__str85741=allocate([79,80,95,77,79,68,85,76,69,9,82,37,100,9,58,37,115,10,0],"i8",ALLOC_STATIC);__str85619=allocate([37,115,32,105,115,32,110,111,116,32,97,32,99,108,97,115,115,47,109,111,100,117,108,101,0],"i8",ALLOC_STATIC);__str8542=allocate([65,114,103,117,109,101,110,116,69,114,114,111,114,0],"i8",ALLOC_STATIC);
__str85=allocate([99,97,115,101,58,10,0],"i8",ALLOC_STATIC);__str84740=allocate([79,80,95,67,76,65,83,83,9,82,37,100,9,58,37,115,10,0],"i8",ALLOC_STATIC);__str84618=allocate([116,111,95,115,116,114,0],"i8",ALLOC_STATIC);__str841=allocate([121,105,101,108,100,0],"i8",ALLOC_STATIC);__str84=allocate([78,79,68,69,95,67,65,83,69,58,10,0],"i8",ALLOC_STATIC);__str83739=allocate([79,80,95,79,67,76,65,83,83,9,82,37,100,10,0],"i8",ALLOC_STATIC);__str83617=allocate([83,116,114,105,110,103,0],"i8",ALLOC_STATIC);
__str83=allocate([78,79,68,69,95,79,82,58,10,0],"i8",ALLOC_STATIC);__str82738=allocate([79,80,95,72,65,83,72,9,82,37,100,9,82,37,100,9,37,100,10,0],"i8",ALLOC_STATIC);__str82616=allocate([116,111,95,97,114,121,0],"i8",ALLOC_STATIC);__str826=allocate([99,111,110,115,116,97,110,116,32,108,111,111,107,45,117,112,32,102,111,114,32,110,111,110,32,99,108,97,115,115,47,109,111,100,117,108,101,0],"i8",ALLOC_STATIC);__str82=allocate([78,79,68,69,95,65,78,68,58,10,0],"i8",ALLOC_STATIC);
__str818=allocate([71,67,0],"i8",ALLOC_STATIC);__str81737=allocate([79,80,95,83,84,82,67,65,84,9,82,37,100,9,82,37,100,10,0],"i8",ALLOC_STATIC);__str8170=allocate([73,110,100,101,120,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str81615=allocate([65,114,114,97,121,0],"i8",ALLOC_STATIC);__str81483=allocate([61,61,0],"i8",ALLOC_STATIC);__str81435=allocate([115,116,114,117,99,116,32,115,105,122,101,32,109,105,115,109,97,116,99,104,0],"i8",ALLOC_STATIC);
__str81315=allocate([105,110,118,97,108,105,100,32,115,116,114,105,110,103,32,102,111,114,32,102,108,111,97,116,40,37,115,41,0],"i8",ALLOC_STATIC);__str81261=allocate([118,97,108,117,101,32,103,105,118,101,110,32,116,119,105,99,101,32,45,32,37,100,36,0],"i8",ALLOC_STATIC);__str81225=allocate([119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,99,108,97,115,115,0],"i8",ALLOC_STATIC);
__str81203=allocate([116,114,105,101,100,32,116,111,32,99,114,101,97,116,101,32,80,114,111,99,32,111,98,106,101,99,116,32,119,105,116,104,111,117,116,32,97,32,98,108,111,99,107,0],"i8",ALLOC_STATIC);__str81116=allocate([105,110,115,112,101,99,116,0],"i8",ALLOC_STATIC);__str81050=allocate([47,0],"i8",ALLOC_STATIC);__str81014=allocate([97,99,111,115,0],"i8",ALLOC_STATIC);__str81=allocate([116,104,101,110,58,10,0],"i8",ALLOC_STATIC);
__str80736=allocate([79,80,95,83,84,82,73,78,71,9,82,37,100,9,37,115,10,0],"i8",ALLOC_STATIC);__str80614=allocate([101,120,112,101,99,116,101,100,32,37,115,0],"i8",ALLOC_STATIC);__str80=allocate([99,111,110,100,58,10,0],"i8",ALLOC_STATIC);__str8=allocate([111,0],"i8",ALLOC_STATIC);__str79735=allocate([79,80,95,65,80,79,83,84,9,82,37,100,9,37,100,9,37,100,10,0],"i8",ALLOC_STATIC);__str79613=allocate([116,111,95,104,97,115,104,0],"i8",ALLOC_STATIC);__str7933=allocate([111,0],"i8",ALLOC_STATIC);
__str79=allocate([78,79,68,69,95,73,70,58,10,0],"i8",ALLOC_STATIC);__str78734=allocate([79,80,95,65,82,69,70,9,82,37,100,9,82,37,100,9,37,100,10,0],"i8",ALLOC_STATIC);__str7867=allocate([69,110,117,109,101,114,97,98,108,101,0],"i8",ALLOC_STATIC);__str78612=allocate([72,97,115,104,0],"i8",ALLOC_STATIC);__str7825=allocate([115,116,101,112,95,114,97,116,105,111,61,0],"i8",ALLOC_STATIC);__str78=allocate([98,108,107,61,38,37,115,10,0],"i8",ALLOC_STATIC);
__str77733=allocate([79,80,95,65,82,89,80,85,83,72,9,82,37,100,9,82,37,100,10,0],"i8",ALLOC_STATIC);__str7768=allocate([115,116,97,116,117,115,0],"i8",ALLOC_STATIC);__str77611=allocate([119,114,111,110,103,32,99,111,110,115,116,97,110,116,32,110,97,109,101,32,37,115,0],"i8",ALLOC_STATIC);__str77=allocate([112,111,115,116,32,109,97,110,100,97,116,111,114,121,32,97,114,103,115,58,10,0],"i8",ALLOC_STATIC);__str76732=allocate([79,80,95,65,82,89,67,65,84,9,82,37,100,9,82,37,100,10,0],"i8",ALLOC_STATIC);
__str7663=allocate([117,110,101,120,112,101,99,116,101,100,32,114,101,116,114,121,0],"i8",ALLOC_STATIC);__str76610=allocate([37,115,32,105,115,32,110,111,116,32,97,32,115,121,109,98,111,108,0],"i8",ALLOC_STATIC);__str761=allocate([110,101,119,0],"i8",ALLOC_STATIC);__str760=allocate([10,0],"i8",ALLOC_STATIC);__str76=allocate([114,101,115,116,61,42,37,115,10,0],"i8",ALLOC_STATIC);__str75731=allocate([79,80,95,65,82,82,65,89,9,82,37,100,9,82,37,100,9,37,100,10,0],"i8",ALLOC_STATIC);
__str75609=allocate([117,110,100,101,102,105,110,101,100,32,109,101,116,104,111,100,32,39,37,115,39,32,102,111,114,32,37,115,0],"i8",ALLOC_STATIC);__str7541=allocate([110,111,32,115,117,112,101,114,32,99,108,97,115,115,32,102,111,114,32,96,37,115,58,58,37,115,39,44,32,79,98,106,101,99,116,32,97,115,115,117,109,101,100,0],"i8",ALLOC_STATIC);__str75=allocate([37,115,61,0],"i8",ALLOC_STATIC);__str74730=allocate([79,80,95,83,84,79,80,10,0],"i8",ALLOC_STATIC);
__str74608=allocate([78,111,77,101,116,104,111,100,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str740=allocate([98,114,101,97,107,0],"i8",ALLOC_STATIC);__str74=allocate([111,112,116,105,111,110,97,108,32,97,114,103,115,58,10,0],"i8",ALLOC_STATIC);__str73729=allocate([79,80,95,69,81,9,82,37,100,9,58,37,115,9,37,100,10,0],"i8",ALLOC_STATIC);__str73607=allocate([110,97,109,101,32,115,104,111,117,108,100,32,98,101,32,97,32,115,121,109,98,111,108,0],"i8",ALLOC_STATIC);
__str731548=allocate([102,124,102,0],"i8",ALLOC_STATIC);__str73=allocate([109,97,110,100,97,116,111,114,121,32,97,114,103,115,58,10,0],"i8",ALLOC_STATIC);__str72728=allocate([79,80,95,71,69,9,82,37,100,9,58,37,115,9,37,100,10,0],"i8",ALLOC_STATIC);__str72606=allocate([111,42,0],"i8",ALLOC_STATIC);__str725=allocate([84,121,112,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str721547=allocate([105,124,105,105,105,105,105,105,0],"i8",ALLOC_STATIC);
__str72=allocate([78,79,68,69,95,66,76,79,67,75,58,10,0],"i8",ALLOC_STATIC);__str71727=allocate([79,80,95,71,84,9,82,37,100,9,58,37,115,9,37,100,10,0],"i8",ALLOC_STATIC);__str7169=allocate([110,101,103,97,116,105,118,101,32,97,114,103,117,109,101,110,116,0],"i8",ALLOC_STATIC);__str71605=allocate([35,60,77,111,100,117,108,101,58,37,112,62,0],"i8",ALLOC_STATIC);__str71482=allocate([117,116,99,0],"i8",ALLOC_STATIC);
__str71434=allocate([119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,99,108,97,115,115,0],"i8",ALLOC_STATIC);__str71314=allocate([115,116,114,105,110,103,32,99,111,110,116,97,105,110,115,32,110,117,108,108,32,98,121,116,101,0],"i8",ALLOC_STATIC);__str71260=allocate([109,97,108,102,111,114,109,101,100,32,102,111,114,109,97,116,32,115,116,114,105,110,103,32,45,32,37,42,91,48,45,57,93,0],"i8",ALLOC_STATIC);__str71224=allocate([84,121,112,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);
__str71202=allocate([65,114,103,117,109,101,110,116,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str711546=allocate([102,0],"i8",ALLOC_STATIC);__str71115=allocate([116,111,95,115,0],"i8",ALLOC_STATIC);__str71049=allocate([42,42,0],"i8",ALLOC_STATIC);__str71013=allocate([97,115,105,110,0],"i8",ALLOC_STATIC);__str71=allocate([101,110,115,117,114,101,58,10,0],"i8",ALLOC_STATIC);__str70726=allocate([79,80,95,76,69,9,82,37,100,9,58,37,115,9,37,100,10,0],"i8",ALLOC_STATIC);
__str70604=allocate([35,60,67,108,97,115,115,58,37,112,62,0],"i8",ALLOC_STATIC);__str701545=allocate([83,97,116,0],"i8",ALLOC_STATIC);__str70=allocate([78,79,68,69,95,69,78,83,85,82,69,58,10,0],"i8",ALLOC_STATIC);__str7=allocate([105,110,105,116,105,97,108,105,122,101,0],"i8",ALLOC_STATIC);__str69725=allocate([79,80,95,76,84,9,82,37,100,9,58,37,115,9,37,100,10,0],"i8",ALLOC_STATIC);__str69603=allocate([62,0],"i8",ALLOC_STATIC);__str6932=allocate([42,0],"i8",ALLOC_STATIC);
__str691544=allocate([70,114,105,0],"i8",ALLOC_STATIC);__str69=allocate([101,108,115,101,58,10,0],"i8",ALLOC_STATIC);__str68724=allocate([79,80,95,68,73,86,9,82,37,100,9,58,37,115,9,37,100,10,0],"i8",ALLOC_STATIC);__str6866=allocate([72,97,115,104,0],"i8",ALLOC_STATIC);__str68602=allocate([67,108,97,115,115,58,0],"i8",ALLOC_STATIC);__str6824=allocate([115,116,101,112,95,114,97,116,105,111,0],"i8",ALLOC_STATIC);__str681543=allocate([84,104,117,0],"i8",ALLOC_STATIC);
__str681375=allocate([115,116,114,105,110,103,32,115,105,122,101,115,32,116,111,111,32,98,105,103,0],"i8",ALLOC_STATIC);__str68=allocate([114,101,115,99,117,101,32,98,111,100,121,58,10,0],"i8",ALLOC_STATIC);__str67723=allocate([79,80,95,77,85,76,9,82,37,100,9,58,37,115,9,37,100,10,0],"i8",ALLOC_STATIC);__str6767=allocate([37,115,58,32,37,115,32,40,37,100,41,0],"i8",ALLOC_STATIC);__str67601=allocate([95,95,97,116,116,97,99,104,101,100,95,95,0],"i8",ALLOC_STATIC);
__str671542=allocate([87,101,100,0],"i8",ALLOC_STATIC);__str671374=allocate([97,114,103,117,109,101,110,116,32,116,111,111,32,98,105,103,0],"i8",ALLOC_STATIC);__str67=allocate([101,120,99,95,118,97,114,58,10,0],"i8",ALLOC_STATIC);__str66722=allocate([79,80,95,83,85,66,73,9,82,37,100,9,58,37,115,9,37,100,10,0],"i8",ALLOC_STATIC);__str6662=allocate([117,110,101,120,112,101,99,116,101,100,32,114,101,100,111,0],"i8",ALLOC_STATIC);__str66600=allocate([35,60,0],"i8",ALLOC_STATIC);
__str661541=allocate([84,117,115,0],"i8",ALLOC_STATIC);__str661373=allocate([110,101,103,97,116,105,118,101,32,97,114,103,117,109,101,110,116,0],"i8",ALLOC_STATIC);__str66=allocate([104,97,110,100,108,101,32,99,108,97,115,115,101,115,58,10,0],"i8",ALLOC_STATIC);__str659=allocate([78,101,120,116,32,116,111,107,101,110,32,105,115,0],"i8",ALLOC_STATIC);__str65721=allocate([79,80,95,83,85,66,9,82,37,100,9,58,37,115,9,37,100,10,0],"i8",ALLOC_STATIC);
__str656=allocate([109,114,98,95,109,97,108,108,111,99,0],"i8",ALLOC_STATIC);__str65599=allocate([110,111,32,98,108,111,99,107,32,103,105,118,101,110,0],"i8",ALLOC_STATIC);__str6540=allocate([37,115,32,105,115,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,0],"i8",ALLOC_STATIC);__str651540=allocate([77,111,110,0],"i8",ALLOC_STATIC);__str651372=allocate([105,0],"i8",ALLOC_STATIC);__str65=allocate([114,101,115,99,117,101,58,10,0],"i8",ALLOC_STATIC);
__str64991=allocate([101,120,116,101,110,100,101,100,0],"i8",ALLOC_STATIC);__str64720=allocate([79,80,95,65,68,68,73,9,82,37,100,9,58,37,115,9,37,100,10,0],"i8",ALLOC_STATIC);__str64598=allocate([110,38,0],"i8",ALLOC_STATIC);__str641539=allocate([83,117,110,0],"i8",ALLOC_STATIC);__str641371=allocate([45,0],"i8",ALLOC_STATIC);__str64=allocate([98,111,100,121,58,10,0],"i8",ALLOC_STATIC);__str63990=allocate([101,120,116,101,110,100,95,111,98,106,101,99,116,0],"i8",ALLOC_STATIC);
__str639=allocate([114,101,116,117,114,110,0],"i8",ALLOC_STATIC);__str63719=allocate([79,80,95,65,68,68,9,82,37,100,9,58,37,115,9,37,100,10,0],"i8",ALLOC_STATIC);__str63597=allocate([61,61,61,0],"i8",ALLOC_STATIC);__str631538=allocate([68,101,99,0],"i8",ALLOC_STATIC);__str631370=allocate([119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,100,32,102,111,114,32,49,41,0],"i8",ALLOC_STATIC);
__str63=allocate([78,79,68,69,95,82,69,83,67,85,69,58,10,0],"i8",ALLOC_STATIC);__str62989=allocate([119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,97,116,32,108,101,97,115,116,32,49,41,0],"i8",ALLOC_STATIC);__str62718=allocate([79,80,95,77,69,84,72,79,68,9,82,37,100,9,58,37,115,10,0],"i8",ALLOC_STATIC);__str62596=allocate([99,108,97,115,115,95,118,97,114,105,97,98,108,101,115,0],"i8",ALLOC_STATIC);
__str624=allocate([117,110,105,110,105,116,105,97,108,105,122,101,100,32,99,111,110,115,116,97,110,116,32,37,115,0],"i8",ALLOC_STATIC);__str621537=allocate([78,111,118,0],"i8",ALLOC_STATIC);__str621369=allocate([111,124,111,0],"i8",ALLOC_STATIC);__str62=allocate([78,79,68,69,95,66,69,71,73,78,58,10,0],"i8",ALLOC_STATIC);__str61988=allocate([65,114,103,117,109,101,110,116,69,114,114,111,114,0],"i8",ALLOC_STATIC);
__str61717=allocate([79,80,95,82,65,78,71,69,9,82,37,100,9,82,37,100,9,37,100,10,0],"i8",ALLOC_STATIC);__str6168=allocate([65,114,103,117,109,101,110,116,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str61595=allocate([100,101,102,105,110,101,95,109,101,116,104,111,100,0],"i8",ALLOC_STATIC);__str61481=allocate([110,111,119,0],"i8",ALLOC_STATIC);__str61433=allocate([111,0],"i8",ALLOC_STATIC);
__str61313=allocate([105,110,118,97,108,105,100,32,115,116,114,105,110,103,32,102,111,114,32,110,117,109,98,101,114,40,37,115,41,0],"i8",ALLOC_STATIC);__str61259=allocate([119,105,100,116,104,32,116,111,111,32,98,105,103,0],"i8",ALLOC_STATIC);__str61223=allocate(1,"i8",ALLOC_STATIC);__str61201=allocate([38,0],"i8",ALLOC_STATIC);__str611536=allocate([79,99,116,0],"i8",ALLOC_STATIC);__str611368=allocate([111,0],"i8",ALLOC_STATIC);__str61114=allocate([110,105,108,63,0],"i8",ALLOC_STATIC);
__str61048=allocate([45,64,0],"i8",ALLOC_STATIC);__str61012=allocate([116,97,110,0],"i8",ALLOC_STATIC);__str61=allocate([109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,0],"i8",ALLOC_STATIC);__str60987=allocate([96,37,115,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0],"i8",ALLOC_STATIC);
__str60716=allocate([79,80,95,76,65,77,66,68,65,9,82,37,100,9,73,40,37,100,41,9,37,100,10,0],"i8",ALLOC_STATIC);__str60594=allocate([99,111,110,115,116,95,115,101,116,0],"i8",ALLOC_STATIC);__str601535=allocate([83,101,112,0],"i8",ALLOC_STATIC);__str601367=allocate([82,101,103,101,120,112,32,99,108,97,115,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0],"i8",ALLOC_STATIC);__str60=allocate([67,108,101,97,110,117,112,58,32,112,111,112,112,105,110,103,0],"i8",ALLOC_STATIC);
__str6=allocate([60,61,62,0],"i8",ALLOC_STATIC);__str59985=allocate([110,42,38,0],"i8",ALLOC_STATIC);__str59715=allocate([79,80,95,66,76,75,80,85,83,72,9,82,37,100,9,37,100,58,37,100,58,37,100,58,37,100,10,0],"i8",ALLOC_STATIC);__str59593=allocate([99,111,110,115,116,95,103,101,116,0],"i8",ALLOC_STATIC);__str5931=allocate([99,97,110,39,116,32,100,117,112,32,37,115,0],"i8",ALLOC_STATIC);__str591534=allocate([65,117,103,0],"i8",ALLOC_STATIC);__str591366=allocate([124,83,0],"i8",ALLOC_STATIC);
__str59=allocate([67,108,101,97,110,117,112,58,32,100,105,115,99,97,114,100,105,110,103,32,108,111,111,107,97,104,101,97,100,0],"i8",ALLOC_STATIC);__str58984=allocate([102,111,114,109,97,116,0],"i8",ALLOC_STATIC);__str58714=allocate([9,98,114,111,107,101,110,10,0],"i8",ALLOC_STATIC);__str5865=allocate([119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0],"i8",ALLOC_STATIC);
__str58592=allocate([99,111,110,115,116,95,100,101,102,105,110,101,100,63,0],"i8",ALLOC_STATIC);__str5823=allocate([105,110,116,101,114,118,97,108,95,114,97,116,105,111,61,0],"i8",ALLOC_STATIC);__str581533=allocate([74,117,108,0],"i8",ALLOC_STATIC);__str581365=allocate([83,0],"i8",ALLOC_STATIC);__str581100=allocate([110,111,110,32,102,108,111,97,116,32,118,97,108,117,101,0],"i8",ALLOC_STATIC);__str58=allocate([109,101,109,111,114,121,32,101,120,104,97,117,115,116,101,100,0],"i8",ALLOC_STATIC);
__str57983=allocate([115,112,114,105,110,116,102,0],"i8",ALLOC_STATIC);__str57713=allocate([9,98,114,101,97,107,10,0],"i8",ALLOC_STATIC);__str5766=allocate([37,115,58,32,37,115,32,40,37,115,41,0],"i8",ALLOC_STATIC);__str57591=allocate([117,110,100,101,102,95,109,101,116,104,111,100,0],"i8",ALLOC_STATIC);__str571532=allocate([74,117,110,0],"i8",ALLOC_STATIC);__str571364=allocate([116,121,112,101,32,109,105,115,109,97,116,99,104,58,32,37,115,32,103,105,118,101,110,0],"i8",ALLOC_STATIC);
__str571099=allocate([73,110,102,105,110,105,116,121,0],"i8",ALLOC_STATIC);__str57=allocate([69,114,114,111,114,58,32,112,111,112,112,105,110,103,0],"i8",ALLOC_STATIC);__str56982=allocate([115,105,110,103,108,101,116,111,110,95,109,101,116,104,111,100,115,0],"i8",ALLOC_STATIC);__str56712=allocate([9,114,101,116,117,114,110,10,0],"i8",ALLOC_STATIC);__str5661=allocate([117,110,101,120,112,101,99,116,101,100,32,110,101,120,116,0],"i8",ALLOC_STATIC);
__str56590=allocate([97,110,99,101,115,116,111,114,115,0],"i8",ALLOC_STATIC);__str561531=allocate([77,97,121,0],"i8",ALLOC_STATIC);__str561363=allocate([82,101,103,101,120,112,32,67,108,97,115,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0],"i8",ALLOC_STATIC);__str561098=allocate([45,73,110,102,105,110,105,116,121,0],"i8",ALLOC_STATIC);__str56=allocate([69,114,114,111,114,58,32,100,105,115,99,97,114,100,105,110,103,0],"i8",ALLOC_STATIC);__str55981=allocate([115,101,110,100,0],"i8",ALLOC_STATIC);
__str558=allocate([37,115,32,0],"i8",ALLOC_STATIC);__str55711=allocate([10,0],"i8",ALLOC_STATIC);__str55589=allocate([97,108,105,97,115,95,109,101,116,104,111,100,0],"i8",ALLOC_STATIC);__str5539=allocate([105,110,104,101,114,105,116,101,100,0],"i8",ALLOC_STATIC);__str551530=allocate([65,112,114,0],"i8",ALLOC_STATIC);__str551362=allocate([84,121,112,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str551097=allocate([70,108,111,97,116,68,111,109,97,105,110,69,114,114,111,114,0],"i8",ALLOC_STATIC);
__str55=allocate([115,121,110,116,97,120,32,101,114,114,111,114,0],"i8",ALLOC_STATIC);__str54980=allocate([114,101,115,112,111,110,100,95,116,111,63,0],"i8",ALLOC_STATIC);__str54710=allocate([79,80,95,82,69,84,85,82,78,9,82,37,100,0],"i8",ALLOC_STATIC);__str54588=allocate([116,111,95,115,0],"i8",ALLOC_STATIC);__str541529=allocate([77,97,114,0],"i8",ALLOC_STATIC);__str541361=allocate([124,111,105,0],"i8",ALLOC_STATIC);
__str541096=allocate([99,97,110,39,116,32,99,111,110,118,101,114,116,32,70,108,111,97,116,32,105,110,116,111,32,73,110,116,101,103,101,114,0],"i8",ALLOC_STATIC);__str54=allocate([45,62,32,36,36,32,61,0],"i8",ALLOC_STATIC);__str53979=allocate([114,101,109,111,118,101,95,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,0],"i8",ALLOC_STATIC);__str538=allocate([108,97,115,116,112,99,0],"i8",ALLOC_STATIC);
__str5372=allocate([99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,32,109,101,116,104,111,100,32,102,111,114,32,108,105,116,101,114,97,108,115,0],"i8",ALLOC_STATIC);__str53709=allocate([79,80,95,69,78,84,69,82,9,37,100,58,37,100,58,37,100,58,37,100,58,37,100,58,37,100,58,37,100,10,0],"i8",ALLOC_STATIC);__str53587=allocate([109,111,100,117,108,101,95,101,118,97,108,0],"i8",ALLOC_STATIC);__str534=allocate([95,95,99,108,97,115,115,105,100,95,95,0],"i8",ALLOC_STATIC);
__str533=allocate([41,0],"i8",ALLOC_STATIC);__str532=allocate([110,116,101,114,109,32,37,115,32,40,0],"i8",ALLOC_STATIC);__str531528=allocate([70,101,98,0],"i8",ALLOC_STATIC);__str531360=allocate([98,121,116,101,115,0],"i8",ALLOC_STATIC);__str531095=allocate([84,121,112,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str531=allocate([116,111,107,101,110,32,37,115,32,40,0],"i8",ALLOC_STATIC);__str530=allocate([32,32,32,36,37,100,32,61,32,0],"i8",ALLOC_STATIC);
__str53=allocate([83,116,97,114,116,105,110,103,32,112,97,114,115,101,10,0],"i8",ALLOC_STATIC);__str52978=allocate([112,117,98,108,105,99,95,109,101,116,104,111,100,115,0],"i8",ALLOC_STATIC);__str529=allocate([82,101,100,117,99,105,110,103,32,115,116,97,99,107,32,98,121,32,114,117,108,101,32,37,100,32,40,108,105,110,101,32,37,108,117,41,58,10,0],"i8",ALLOC_STATIC);
__str528=allocate([98,111,116,104,32,98,108,111,99,107,32,97,114,103,32,97,110,100,32,97,99,116,117,97,108,32,98,108,111,99,107,32,103,105,118,101,110,0],"i8",ALLOC_STATIC);__str52708=allocate([79,80,95,65,82,71,65,82,89,9,82,37,100,9,37,100,58,37,100,58,37,100,58,37,100,10,0],"i8",ALLOC_STATIC);__str527=allocate([98,108,111,99,107,32,97,114,103,117,109,101,110,116,32,115,104,111,117,108,100,32,110,111,116,32,98,101,32,103,105,118,101,110,0],"i8",ALLOC_STATIC);
__str526=allocate([32,37,100,0],"i8",ALLOC_STATIC);__str52586=allocate([105,110,115,116,97,110,99,101,95,109,101,116,104,111,100,115,0],"i8",ALLOC_STATIC);__str525=allocate([83,116,97,99,107,32,110,111,119,0],"i8",ALLOC_STATIC);__str524=allocate([110,111,110,101,0],"i8",ALLOC_STATIC);__str52389=allocate([116,101,114,109,115,0],"i8",ALLOC_STATIC);__str523=allocate([78,97,109,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);
__str52214=allocate([97,114,121,32,115,105,122,101,32,116,111,111,32,98,105,103,0],"i8",ALLOC_STATIC);__str522=allocate([110,108,0],"i8",ALLOC_STATIC);__str521527=allocate([74,97,110,0],"i8",ALLOC_STATIC);__str521359=allocate([105,110,115,112,101,99,116,0],"i8",ALLOC_STATIC);__str521094=allocate([119,105,100,116,104,40,37,100,41,32,62,32,40,37,100,58,115,105,122,101,111,102,40,109,114,98,95,105,110,116,41,42,67,72,65,82,95,66,73,84,45,49,41,0],"i8",ALLOC_STATIC);
__str521=allocate([116,101,114,109,0],"i8",ALLOC_STATIC);__str520=allocate([116,114,97,105,108,101,114,0],"i8",ALLOC_STATIC);__str52=allocate([99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,32,109,101,116,104,111,100,32,102,111,114,32,40,41,46,0],"i8",ALLOC_STATIC);__str51977=allocate([112,114,111,116,101,99,116,101,100,95,109,101,116,104,111,100,115,0],"i8",ALLOC_STATIC);__str519=allocate([114,98,114,97,99,107,101,116,0],"i8",ALLOC_STATIC);
__str518=allocate([114,112,97,114,101,110,0],"i8",ALLOC_STATIC);__str51707=allocate([79,80,95,83,85,80,69,82,9,82,37,100,9,37,100,10,0],"i8",ALLOC_STATIC);__str517=allocate([111,112,116,95,110,108,0],"i8",ALLOC_STATIC);__str5167=allocate([105,0],"i8",ALLOC_STATIC);__str516=allocate([111,112,116,95,116,101,114,109,115,0],"i8",ALLOC_STATIC);__str51585=allocate([105,110,99,108,117,100,101,100,95,109,111,100,117,108,101,115,0],"i8",ALLOC_STATIC);
__str515=allocate([100,111,116,95,111,114,95,99,111,108,111,110,0],"i8",ALLOC_STATIC);__str51480=allocate([109,107,116,105,109,101,0],"i8",ALLOC_STATIC);__str51432=allocate([37,115,32,105,115,32,110,111,116,32,115,116,114,117,99,116,32,109,101,109,98,101,114,0],"i8",ALLOC_STATIC);__str514=allocate([111,112,101,114,97,116,105,111,110,51,0],"i8",ALLOC_STATIC);__str51312=allocate([105,108,108,101,103,97,108,32,114,97,100,105,120,32,37,100,0],"i8",ALLOC_STATIC);
__str513=allocate([111,112,101,114,97,116,105,111,110,50,0],"i8",ALLOC_STATIC);__str51258=allocate([102,108,97,103,32,97,102,116,101,114,32,112,114,101,99,105,115,105,111,110,0],"i8",ALLOC_STATIC);__str51222=allocate([46,0],"i8",ALLOC_STATIC);__str51213=allocate([114,101,99,117,114,115,105,118,101,32,97,114,114,97,121,32,106,111,105,110,0],"i8",ALLOC_STATIC);__str51200=allocate([108,97,109,98,100,97,0],"i8",ALLOC_STATIC);__str512=allocate([111,112,101,114,97,116,105,111,110,0],"i8",ALLOC_STATIC);
__str511526=allocate(1,"i8",ALLOC_STATIC);__str511358=allocate([117,112,99,97,115,101,33,0],"i8",ALLOC_STATIC);__str51113=allocate([124,0],"i8",ALLOC_STATIC);__str511093=allocate([82,97,110,103,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str511=allocate([97,115,115,111,99,0],"i8",ALLOC_STATIC);__str51047=allocate([43,64,0],"i8",ALLOC_STATIC);__str51011=allocate([99,111,115,0],"i8",ALLOC_STATIC);__str510=allocate([97,115,115,111,99,115,0],"i8",ALLOC_STATIC);
__str51=allocate([102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,0],"i8",ALLOC_STATIC);__str50976=allocate([112,114,105,118,97,116,101,95,109,101,116,104,111,100,115,0],"i8",ALLOC_STATIC);__str509=allocate([97,115,115,111,99,95,108,105,115,116,0],"i8",ALLOC_STATIC);__str508=allocate([64,51,48,0],"i8",ALLOC_STATIC);
__str50706=allocate([79,80,95,84,65,73,76,67,65,76,76,9,82,37,100,9,58,37,115,9,37,100,10,0],"i8",ALLOC_STATIC);__str507=allocate([115,105,110,103,108,101,116,111,110,0],"i8",ALLOC_STATIC);__str506=allocate([111,112,116,95,102,95,98,108,111,99,107,95,97,114,103,0],"i8",ALLOC_STATIC);__str50584=allocate([105,110,99,108,117,100,101,100,0],"i8",ALLOC_STATIC);__str505=allocate([102,95,98,108,111,99,107,95,97,114,103,0],"i8",ALLOC_STATIC);
__str504=allocate([98,108,107,97,114,103,95,109,97,114,107,0],"i8",ALLOC_STATIC);__str503=allocate([102,95,114,101,115,116,95,97,114,103,0],"i8",ALLOC_STATIC);__str50212=allocate([124,83,0],"i8",ALLOC_STATIC);__str502=allocate([114,101,115,116,97,114,103,95,109,97,114,107,0],"i8",ALLOC_STATIC);__str501525=allocate([85,84,67,32,0],"i8",ALLOC_STATIC);__str501357=allocate([117,112,99,97,115,101,0],"i8",ALLOC_STATIC);__str501092=allocate([102,0],"i8",ALLOC_STATIC);
__str501=allocate([102,95,111,112,116,97,114,103,0],"i8",ALLOC_STATIC);__str500=allocate([102,95,98,108,111,99,107,95,111,112,116,97,114,103,0],"i8",ALLOC_STATIC);__str50=allocate([102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,103,108,111,98,97,108,32,118,97,114,105,97,98,108,101,0],"i8",ALLOC_STATIC);__str5=allocate([105,110,115,112,101,99,116,0],"i8",ALLOC_STATIC);__str49975=allocate([111,98,106,101,99,116,95,105,100,0],"i8",ALLOC_STATIC);
__str499=allocate([102,95,98,108,111,99,107,95,111,112,116,0],"i8",ALLOC_STATIC);__str498=allocate([102,95,111,112,116,0],"i8",ALLOC_STATIC);__str49705=allocate([79,80,95,83,69,78,68,66,9,82,37,100,9,58,37,115,9,37,100,10,0],"i8",ALLOC_STATIC);__str497=allocate([102,95,97,114,103,0],"i8",ALLOC_STATIC);__str496=allocate([102,95,97,114,103,95,105,116,101,109,0],"i8",ALLOC_STATIC);__str49583=allocate([99,108,97,115,115,95,101,118,97,108,0],"i8",ALLOC_STATIC);
__str495=allocate([102,95,110,111,114,109,95,97,114,103,0],"i8",ALLOC_STATIC);__str494=allocate([102,95,98,97,100,95,97,114,103,0],"i8",ALLOC_STATIC);__str4930=allocate([99,97,110,39,116,32,99,108,111,110,101,32,37,115,0],"i8",ALLOC_STATIC);__str493=allocate([102,95,97,114,103,115,0],"i8",ALLOC_STATIC);__str49211=allocate([91,46,46,46,93,0],"i8",ALLOC_STATIC);__str492=allocate([102,95,97,114,103,108,105,115,116,0],"i8",ALLOC_STATIC);
__str491524=allocate([37,115,32,37,115,32,37,48,50,100,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,32,37,115,37,100,0],"i8",ALLOC_STATIC);__str491356=allocate([116,111,95,115,121,109,0],"i8",ALLOC_STATIC);__str491157=allocate([111,0],"i8",ALLOC_STATIC);__str491091=allocate([110,97,110,0],"i8",ALLOC_STATIC);__str491=allocate([64,50,57,0],"i8",ALLOC_STATIC);__str490=allocate([115,117,112,101,114,99,108,97,115,115,0],"i8",ALLOC_STATIC);
__str49=allocate([102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,0],"i8",ALLOC_STATIC);__str48974=allocate([110,105,108,63,0],"i8",ALLOC_STATIC);__str489=allocate([98,97,99,107,114,101,102,0],"i8",ALLOC_STATIC);__str488=allocate([118,97,114,95,114,101,102,0],"i8",ALLOC_STATIC);__str48704=allocate([79,80,95,83,69,78,68,9,82,37,100,9,58,37,115,9,37,100,10,0],"i8",ALLOC_STATIC);
__str487=allocate([118,97,114,95,108,104,115,0],"i8",ALLOC_STATIC);__str4864=allocate([65,114,103,117,109,101,110,116,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str486=allocate([118,97,114,105,97,98,108,101,0],"i8",ALLOC_STATIC);__str48582=allocate([97,112,112,101,110,100,95,102,101,97,116,117,114,101,115,0],"i8",ALLOC_STATIC);__str485=allocate([110,117,109,101,114,105,99,0],"i8",ALLOC_STATIC);__str484=allocate([115,121,109,0],"i8",ALLOC_STATIC);
__str483=allocate([98,97,115,105,99,95,115,121,109,98,111,108,0],"i8",ALLOC_STATIC);__str4822=allocate([105,110,116,101,114,118,97,108,95,114,97,116,105,111,0],"i8",ALLOC_STATIC);__str48210=allocate([101,113,108,63,0],"i8",ALLOC_STATIC);__str482=allocate([115,121,109,98,111,108,0],"i8",ALLOC_STATIC);__str481523=allocate([76,79,67,65,76,0],"i8",ALLOC_STATIC);__str481355=allocate([116,111,95,102,0],"i8",ALLOC_STATIC);
__str481156=allocate([99,97,110,39,116,32,99,111,110,118,101,114,116,32,37,115,32,105,110,116,111,32,37,115,0],"i8",ALLOC_STATIC);__str481090=allocate([105,110,102,0],"i8",ALLOC_STATIC);__str481=allocate([114,101,103,101,120,112,0],"i8",ALLOC_STATIC);__str480=allocate([64,50,56,0],"i8",ALLOC_STATIC);__str48=allocate([102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,99,111,110,115,116,97,110,116,0],"i8",ALLOC_STATIC);
__str47973=allocate([109,101,116,104,111,100,115,0],"i8",ALLOC_STATIC);__str479=allocate([64,50,55,0],"i8",ALLOC_STATIC);__str478=allocate([115,116,114,105,110,103,95,105,110,116,101,114,112,0],"i8",ALLOC_STATIC);__str47703=allocate([79,80,95,74,77,80,78,79,84,9,82,37,100,9,37,48,51,100,10,0],"i8",ALLOC_STATIC);__str477=allocate([115,116,114,105,110,103,0],"i8",ALLOC_STATIC);__str4765=allocate([37,115,58,32,101,114,114,110,111,32,61,61,32,48,32,40,78,79,69,82,82,79,82,41,0],"i8",ALLOC_STATIC);
__str476=allocate([108,105,116,101,114,97,108,0],"i8",ALLOC_STATIC);__str47581=allocate([105,110,99,108,117,100,101,63,0],"i8",ALLOC_STATIC);__str475=allocate([111,112,116,95,101,110,115,117,114,101,0],"i8",ALLOC_STATIC);__str474=allocate([101,120,99,95,118,97,114,0],"i8",ALLOC_STATIC);__str473=allocate([101,120,99,95,108,105,115,116,0],"i8",ALLOC_STATIC);__str47209=allocate([61,61,0],"i8",ALLOC_STATIC);__str472=allocate([111,112,116,95,114,101,115,99,117,101,0],"i8",ALLOC_STATIC);
__str471522=allocate([85,84,67,0],"i8",ALLOC_STATIC);__str471354=allocate([116,111,95,105,0],"i8",ALLOC_STATIC);__str471155=allocate([77,97,116,99,104,68,97,116,97,0],"i8",ALLOC_STATIC);__str471089=allocate([111,0],"i8",ALLOC_STATIC);__str471=allocate([99,97,115,101,115,0],"i8",ALLOC_STATIC);__str470=allocate([99,97,115,101,95,98,111,100,121,0],"i8",ALLOC_STATIC);__str47=allocate([37,100,0],"i8",ALLOC_STATIC);__str46972=allocate([107,105,110,100,95,111,102,63,0],"i8",ALLOC_STATIC);
__str469=allocate([64,50,54,0],"i8",ALLOC_STATIC);__str468=allocate([64,50,53,0],"i8",ALLOC_STATIC);__str46702=allocate([79,80,95,74,77,80,73,70,9,82,37,100,9,37,48,51,100,10,0],"i8",ALLOC_STATIC);__str467=allocate([98,114,97,99,101,95,98,108,111,99,107,0],"i8",ALLOC_STATIC);__str4660=allocate([99,97,108,108,0],"i8",ALLOC_STATIC);__str466=allocate([109,101,116,104,111,100,95,99,97,108,108,0],"i8",ALLOC_STATIC);__str46580=allocate([105,110,99,108,117,100,101,0],"i8",ALLOC_STATIC);
__str465=allocate([98,108,111,99,107,95,99,97,108,108,0],"i8",ALLOC_STATIC);__str464=allocate([64,50,52,0],"i8",ALLOC_STATIC);__str463=allocate([100,111,95,98,108,111,99,107,0],"i8",ALLOC_STATIC);__str46208=allocate([116,111,95,115,0],"i8",ALLOC_STATIC);__str462=allocate([108,97,109,98,100,97,95,98,111,100,121,0],"i8",ALLOC_STATIC);__str461521=allocate([110,111,110,101,0],"i8",ALLOC_STATIC);__str461353=allocate([115,112,108,105,116,0],"i8",ALLOC_STATIC);
__str461154=allocate([68,97,116,97,0],"i8",ALLOC_STATIC);__str461088=allocate([124,105,0],"i8",ALLOC_STATIC);__str461=allocate([102,95,108,97,114,103,108,105,115,116,0],"i8",ALLOC_STATIC);__str460=allocate([98,118,97,114,0],"i8",ALLOC_STATIC);__str46=allocate([40,110,117,108,108,41,0],"i8",ALLOC_STATIC);__str45971=allocate([105,115,95,97,63,0],"i8",ALLOC_STATIC);__str45905=allocate([104,97,115,104,0],"i8",ALLOC_STATIC);__str459=allocate([98,118,95,100,101,99,108,115,0],"i8",ALLOC_STATIC);
__str458=allocate([111,112,116,95,98,118,95,100,101,99,108,0],"i8",ALLOC_STATIC);__str45788=allocate([98,108,111,99,107,95,112,97,114,97,109,95,100,101,102,0],"i8",ALLOC_STATIC);__str45701=allocate([79,80,95,74,77,80,9,9,37,48,51,100,10,0],"i8",ALLOC_STATIC);__str457=allocate([78,111,119,32,97,116,32,101,110,100,32,111,102,32,105,110,112,117,116,46,10,0],"i8",ALLOC_STATIC);__str456=allocate([111,112,116,95,98,108,111,99,107,95,112,97,114,97,109,0],"i8",ALLOC_STATIC);
__str45579=allocate([101,120,116,101,110,100,101,100,0],"i8",ALLOC_STATIC);__str455=allocate([98,108,111,99,107,95,112,97,114,97,109,0],"i8",ALLOC_STATIC);__str454=allocate([102,95,109,97,114,103,115,0],"i8",ALLOC_STATIC);__str4538=allocate([115,117,112,101,114,99,108,97,115,115,32,109,105,115,109,97,116,99,104,32,102,111,114,32,99,108,97,115,115,32,37,115,0],"i8",ALLOC_STATIC);__str453=allocate([102,95,109,97,114,103,95,108,105,115,116,0],"i8",ALLOC_STATIC);
__str45207=allocate([105,110,115,112,101,99,116,0],"i8",ALLOC_STATIC);__str452=allocate([102,95,109,97,114,103,0],"i8",ALLOC_STATIC);__str451520=allocate([78,111,116,32,97,32,118,97,108,105,100,32,116,105,109,101,46,0],"i8",ALLOC_STATIC);__str451352=allocate([115,108,105,99,101,0],"i8",ALLOC_STATIC);__str451298=allocate([116,111,95,104,97,115,104,0],"i8",ALLOC_STATIC);__str451153=allocate([70,105,108,101,0],"i8",ALLOC_STATIC);__str451087=allocate([110,32,62,61,32,48,0],"i8",ALLOC_STATIC);
__str451=allocate([102,111,114,95,118,97,114,0],"i8",ALLOC_STATIC);__str450=allocate([111,112,116,95,101,108,115,101,0],"i8",ALLOC_STATIC);__str45=allocate([99,97,108,108,0],"i8",ALLOC_STATIC);__str44970=allocate([105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,115,0],"i8",ALLOC_STATIC);__str44904=allocate([42,0],"i8",ALLOC_STATIC);__str449=allocate([105,102,95,116,97,105,108,0],"i8",ALLOC_STATIC);__str448=allocate([112,114,105,109,97,114,121,95,118,97,108,117,101,0],"i8",ALLOC_STATIC);
__str44700=allocate([79,80,95,83,69,84,67,86,9,37,115,9,82,37,100,10,0],"i8",ALLOC_STATIC);__str447=allocate([64,50,51,0],"i8",ALLOC_STATIC);__str446=allocate([64,50,50,0],"i8",ALLOC_STATIC);__str44578=allocate([101,120,116,101,110,100,95,111,98,106,101,99,116,0],"i8",ALLOC_STATIC);__str445=allocate([64,50,49,0],"i8",ALLOC_STATIC);__str444=allocate([64,50,48,0],"i8",ALLOC_STATIC);__str443=allocate([64,49,57,0],"i8",ALLOC_STATIC);__str44206=allocate([117,110,115,104,105,102,116,0],"i8",ALLOC_STATIC);
__str442=allocate([64,49,56,0],"i8",ALLOC_STATIC);__str441519=allocate([65,114,103,117,109,101,110,116,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str441351=allocate([114,105,110,100,101,120,0],"i8",ALLOC_STATIC);__str441297=allocate([72,97,115,104,0],"i8",ALLOC_STATIC);__str441152=allocate([83,116,114,117,99,116,0],"i8",ALLOC_STATIC);__str441086=allocate([110,117,109,101,114,105,99,46,99,0],"i8",ALLOC_STATIC);__str441=allocate([64,49,55,0],"i8",ALLOC_STATIC);__str440=allocate([64,49,54,0],"i8",ALLOC_STATIC);
__str44=allocate([98,108,111,99,107,32,103,105,118,101,110,32,116,111,32,121,105,101,108,100,0],"i8",ALLOC_STATIC);__str43969=allocate([105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,115,101,116,0],"i8",ALLOC_STATIC);__str43903=allocate([111,42,0],"i8",ALLOC_STATIC);__str439=allocate([64,49,53,0],"i8",ALLOC_STATIC);__str438=allocate([64,49,52,0],"i8",ALLOC_STATIC);__str43787=allocate([64,49,51,0],"i8",ALLOC_STATIC);
__str437=allocate([78,111,77,101,116,104,111,100,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str43699=allocate([79,80,95,71,69,84,67,86,9,82,37,100,9,37,115,10,0],"i8",ALLOC_STATIC);__str436=allocate([64,49,50,0],"i8",ALLOC_STATIC);__str43577=allocate([115,117,112,101,114,99,108,97,115,115,0],"i8",ALLOC_STATIC);__str435=allocate([64,49,49,0],"i8",ALLOC_STATIC);__str434=allocate([64,49,48,0],"i8",ALLOC_STATIC);__str433=allocate([64,57,0],"i8",ALLOC_STATIC);
__str43205=allocate([115,108,105,99,101,0],"i8",ALLOC_STATIC);__str432=allocate([64,56,0],"i8",ALLOC_STATIC);__str431518=allocate([124,105,105,105,105,105,105,105,0],"i8",ALLOC_STATIC);__str431350=allocate([114,101,118,101,114,115,101,33,0],"i8",ALLOC_STATIC);__str431296=allocate([111,110,101,32,104,97,115,104,32,114,101,113,117,105,114,101,100,0],"i8",ALLOC_STATIC);__str431151=allocate([82,101,103,101,120,112,0],"i8",ALLOC_STATIC);__str431085=allocate([37,46,55,103,0],"i8",ALLOC_STATIC);
__str431=allocate([64,55,0],"i8",ALLOC_STATIC);__str430=allocate([112,114,105,109,97,114,121,0],"i8",ALLOC_STATIC);__str43=allocate([109,111,100,117,108,101,32,100,101,102,105,110,105,116,105,111,110,32,105,110,32,109,101,116,104,111,100,32,98,111,100,121,0],"i8",ALLOC_STATIC);__str42968=allocate([105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,103,101,116,0],"i8",ALLOC_STATIC);__str42902=allocate([125,0],"i8",ALLOC_STATIC);__str429=allocate([109,114,104,115,0],"i8",ALLOC_STATIC);
__str428=allocate([97,114,103,115,0],"i8",ALLOC_STATIC);__str427=allocate([111,112,116,95,98,108,111,99,107,95,97,114,103,0],"i8",ALLOC_STATIC);__str42698=allocate([79,80,95,83,69,84,85,80,86,65,82,9,82,37,100,9,37,100,9,37,100,10,0],"i8",ALLOC_STATIC);__str426=allocate([98,108,111,99,107,95,97,114,103,0],"i8",ALLOC_STATIC);__str42576=allocate([109,101,116,104,111,100,95,109,105,115,115,105,110,103,0],"i8",ALLOC_STATIC);__str425=allocate([64,54,0],"i8",ALLOC_STATIC);
__str424=allocate([99,111,109,109,97,110,100,95,97,114,103,115,0],"i8",ALLOC_STATIC);__str423=allocate([99,97,108,108,95,97,114,103,115,0],"i8",ALLOC_STATIC);__str42286=allocate([111,112,116,95,99,97,108,108,95,97,114,103,115,0],"i8",ALLOC_STATIC);__str42204=allocate([115,105,122,101,0],"i8",ALLOC_STATIC);__str422=allocate([99,111,110,115,116,95,109,105,115,115,105,110,103,0],"i8",ALLOC_STATIC);
__str421517=allocate([119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,99,108,97,115,115,0],"i8",ALLOC_STATIC);__str421349=allocate([114,101,118,101,114,115,101,0],"i8",ALLOC_STATIC);__str421295=allocate([105,110,118,97,108,105,100,32,114,97,100,105,120,32,37,100,0],"i8",ALLOC_STATIC);__str421150=allocate([82,97,110,103,101,0],"i8",ALLOC_STATIC);__str421084=allocate([78,97,78,0],"i8",ALLOC_STATIC);__str421=allocate([111,112,116,95,112,97,114,101,110,95,97,114,103,115,0],"i8",ALLOC_STATIC);
__str420=allocate([112,97,114,101,110,95,97,114,103,115,0],"i8",ALLOC_STATIC);__str42=allocate([99,108,97,115,115,32,100,101,102,105,110,105,116,105,111,110,32,105,110,32,109,101,116,104,111,100,32,98,111,100,121,0],"i8",ALLOC_STATIC);__str41967=allocate([105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,100,101,102,105,110,101,100,63,0],"i8",ALLOC_STATIC);__str41901=allocate([61,62,0],"i8",ALLOC_STATIC);__str419=allocate([97,114,101,102,95,97,114,103,115,0],"i8",ALLOC_STATIC);
__str418=allocate([97,114,103,95,118,97,108,117,101,0],"i8",ALLOC_STATIC);__str417=allocate([97,114,103,0],"i8",ALLOC_STATIC);__str41697=allocate([79,80,95,71,69,84,85,80,86,65,82,9,82,37,100,9,37,100,9,37,100,10,0],"i8",ALLOC_STATIC);__str4166=allocate([65,0],"i8",ALLOC_STATIC);__str416=allocate([114,101,115,119,111,114,100,115,0],"i8",ALLOC_STATIC);__str41575=allocate([33,0],"i8",ALLOC_STATIC);__str415=allocate([111,112,0],"i8",ALLOC_STATIC);__str41479=allocate([108,111,99,97,108,0],"i8",ALLOC_STATIC);
__str41431=allocate([115,116,114,117,99,116,32,115,105,122,101,32,100,105,102,102,101,114,115,32,40,37,108,100,32,114,101,113,117,105,114,101,100,32,37,108,100,32,103,105,118,101,110,41,0],"i8",ALLOC_STATIC);__str414=allocate([64,53,0],"i8",ALLOC_STATIC);__str41385=allocate([117,110,100,101,102,95,108,105,115,116,0],"i8",ALLOC_STATIC);__str41311=allocate([116,111,95,115,0],"i8",ALLOC_STATIC);__str413=allocate([116,111,95,115,121,109,0],"i8",ALLOC_STATIC);
__str41257=allocate([102,108,97,103,32,97,102,116,101,114,32,119,105,100,116,104,0],"i8",ALLOC_STATIC);__str41221=allocate([37,108,100,46,46,37,115,37,108,100,32,111,117,116,32,111,102,32,114,97,110,103,101,0],"i8",ALLOC_STATIC);__str41203=allocate([115,104,105,102,116,0],"i8",ALLOC_STATIC);__str412=allocate([102,105,116,101,109,0],"i8",ALLOC_STATIC);__str41199=allocate([91,93,0],"i8",ALLOC_STATIC);__str411516=allocate([84,121,112,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);
__str411348=allocate([114,101,112,108,97,99,101,0],"i8",ALLOC_STATIC);__str411294=allocate([46,37,100,0],"i8",ALLOC_STATIC);__str411149=allocate([83,116,114,105,110,103,0],"i8",ALLOC_STATIC);__str41112=allocate([94,0],"i8",ALLOC_STATIC);__str411083=allocate([105,110,102,105,110,105,116,101,63,0],"i8",ALLOC_STATIC);__str411=allocate([102,115,121,109,0],"i8",ALLOC_STATIC);__str41046=allocate([67,111,109,112,97,114,97,98,108,101,0],"i8",ALLOC_STATIC);__str41010=allocate([115,105,110,0],"i8",ALLOC_STATIC);
__str410=allocate([102,110,97,109,101,0],"i8",ALLOC_STATIC);__str41=allocate([91,93,61,0],"i8",ALLOC_STATIC);__str40966=allocate([105,110,115,116,97,110,99,101,95,111,102,63,0],"i8",ALLOC_STATIC);__str40900=allocate([44,32,0],"i8",ALLOC_STATIC);__str409=allocate([99,112,97,116,104,0],"i8",ALLOC_STATIC);__str408=allocate([99,110,97,109,101,0],"i8",ALLOC_STATIC);__str407=allocate([108,104,115,0],"i8",ALLOC_STATIC);__str40696=allocate([79,80,95,83,69,84,73,86,9,37,115,9,82,37,100,10,0],"i8",ALLOC_STATIC);
__str406=allocate([109,108,104,115,95,110,111,100,101,0],"i8",ALLOC_STATIC);__str40574=allocate([105,110,105,116,105,97,108,105,122,101,0],"i8",ALLOC_STATIC);__str405=allocate([109,108,104,115,95,112,111,115,116,0],"i8",ALLOC_STATIC);__str404=allocate([109,108,104,115,95,108,105,115,116,0],"i8",ALLOC_STATIC);__str403=allocate([109,108,104,115,95,105,116,101,109,0],"i8",ALLOC_STATIC);__str40202=allocate([114,105,110,100,101,120,0],"i8",ALLOC_STATIC);
__str402=allocate([109,108,104,115,95,98,97,115,105,99,0],"i8",ALLOC_STATIC);__str401515=allocate([111,0],"i8",ALLOC_STATIC);__str401467=allocate([96,37,115,39,32,105,115,32,110,111,116,32,97,32,115,116,114,117,99,116,32,109,101,109,98,101,114,0],"i8",ALLOC_STATIC);__str401347=allocate([105,110,116,101,114,110,0],"i8",ALLOC_STATIC);__str401293=allocate([37,100,0],"i8",ALLOC_STATIC);__str401148=allocate([72,97,115,104,0],"i8",ALLOC_STATIC);__str401082=allocate([102,105,110,105,116,101,63,0],"i8",ALLOC_STATIC);
__str401=allocate([109,108,104,115,95,105,110,110,101,114,0],"i8",ALLOC_STATIC);__str400=allocate([109,108,104,115,0],"i8",ALLOC_STATIC);__str40=allocate([45,64,0],"i8",ALLOC_STATIC);__str4=allocate([109,114,117,98,121,32,45,32,67,111,112,121,114,105,103,104,116,32,40,99,41,32,50,48,49,48,45,50,48,49,50,32,109,114,117,98,121,32,100,101,118,101,108,111,112,101,114,115,10,0],"i8",ALLOC_STATIC);__str39965=allocate([105,110,115,116,97,110,99,101,95,101,118,97,108,0],"i8",ALLOC_STATIC);
__str399=allocate([99,111,109,109,97,110,100,0],"i8",ALLOC_STATIC);__str39899=allocate([123,0],"i8",ALLOC_STATIC);__str398=allocate([64,52,0],"i8",ALLOC_STATIC);__str397=allocate([99,109,100,95,98,114,97,99,101,95,98,108,111,99,107,0],"i8",ALLOC_STATIC);__str39695=allocate([79,80,95,71,69,84,73,86,9,82,37,100,9,37,115,10,0],"i8",ALLOC_STATIC);__str396=allocate([98,108,111,99,107,95,99,111,109,109,97,110,100,0],"i8",ALLOC_STATIC);__str39573=allocate([110,101,119,0],"i8",ALLOC_STATIC);
__str395=allocate([99,111,109,109,97,110,100,95,99,97,108,108,0],"i8",ALLOC_STATIC);__str394=allocate([101,120,112,114,95,118,97,108,117,101,0],"i8",ALLOC_STATIC);__str393=allocate([101,120,112,114,0],"i8",ALLOC_STATIC);__str3929=allocate([84,121,112,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str39201=allocate([114,101,118,101,114,115,101,33,0],"i8",ALLOC_STATIC);__str392=allocate([99,111,109,109,97,110,100,95,97,115,103,110,0],"i8",ALLOC_STATIC);
__str391514=allocate([105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0],"i8",ALLOC_STATIC);__str391466=allocate([114,101,100,101,102,105,110,105,110,103,32,99,111,110,115,116,97,110,116,32,83,116,114,117,99,116,58,58,37,115,0],"i8",ALLOC_STATIC);__str391346=allocate([105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0],"i8",ALLOC_STATIC);__str391292=allocate(1,"i8",ALLOC_STATIC);__str391147=allocate([65,114,114,97,121,0],"i8",ALLOC_STATIC);
__str391081=allocate([70,108,111,97,116,0],"i8",ALLOC_STATIC);__str391=allocate([64,51,0],"i8",ALLOC_STATIC);__str390=allocate([115,116,109,116,0],"i8",ALLOC_STATIC);__str39=allocate([43,64,0],"i8",ALLOC_STATIC);__str38964=allocate([105,110,115,112,101,99,116,0],"i8",ALLOC_STATIC);__str389=allocate([115,116,109,116,115,0],"i8",ALLOC_STATIC);__str38898=allocate([123,46,46,46,125,0],"i8",ALLOC_STATIC);__str388=allocate([99,111,109,112,115,116,109,116,0],"i8",ALLOC_STATIC);
__str387=allocate([98,111,100,121,115,116,109,116,0],"i8",ALLOC_STATIC);__str38694=allocate([79,80,95,83,69,84,77,67,78,83,84,9,82,37,100,58,58,37,115,9,82,37,100,10,0],"i8",ALLOC_STATIC);__str3863=allocate([111,111,0],"i8",ALLOC_STATIC);__str386=allocate([64,50,0],"i8",ALLOC_STATIC);__str38572=allocate([67,108,97,115,115,0],"i8",ALLOC_STATIC);__str385=allocate([116,111,112,95,115,116,109,116,0],"i8",ALLOC_STATIC);__str384=allocate([116,111,112,95,115,116,109,116,115,0],"i8",ALLOC_STATIC);
__str383=allocate([116,111,112,95,99,111,109,112,115,116,109,116,0],"i8",ALLOC_STATIC);__str3821=allocate([100,105,115,97,98,108,101,0],"i8",ALLOC_STATIC);__str38200=allocate([114,101,118,101,114,115,101,0],"i8",ALLOC_STATIC);__str382=allocate([64,49,0],"i8",ALLOC_STATIC);__str381513=allocate([105,110,105,116,105,97,108,105,122,101,0],"i8",ALLOC_STATIC);
__str381465=allocate([105,100,101,110,116,105,102,105,101,114,32,37,115,32,110,101,101,100,115,32,116,111,32,98,101,32,99,111,110,115,116,97,110,116,0],"i8",ALLOC_STATIC);__str381345=allocate([105,110,105,116,105,97,108,105,122,101,0],"i8",ALLOC_STATIC);__str381291=allocate([37,42,115,0],"i8",ALLOC_STATIC);__str381146=allocate([80,114,111,99,0],"i8",ALLOC_STATIC);__str381080=allocate([100,105,118,109,111,100,0],"i8",ALLOC_STATIC);__str381=allocate([112,114,111,103,114,97,109,0],"i8",ALLOC_STATIC);
__str380=allocate([36,97,99,99,101,112,116,0],"i8",ALLOC_STATIC);__str38=allocate([126,0],"i8",ALLOC_STATIC);__str37963=allocate([105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0],"i8",ALLOC_STATIC);__str379=allocate([39,92,110,39,0],"i8",ALLOC_STATIC);__str37897=allocate([123,125,0],"i8",ALLOC_STATIC);__str378=allocate([39,59,39,0],"i8",ALLOC_STATIC);__str377=allocate([39,93,39,0],"i8",ALLOC_STATIC);
__str37693=allocate([79,80,95,71,69,84,77,67,78,83,84,9,82,37,100,9,82,37,100,58,58,37,115,10,0],"i8",ALLOC_STATIC);__str3764=allocate([98,117,103,58,32,0],"i8",ALLOC_STATIC);__str376=allocate([39,41,39,0],"i8",ALLOC_STATIC);__str37571=allocate([77,111,100,117,108,101,0],"i8",ALLOC_STATIC);__str375=allocate([39,40,39,0],"i8",ALLOC_STATIC);__str374=allocate([39,44,39,0],"i8",ALLOC_STATIC);__str373=allocate([39,46,39,0],"i8",ALLOC_STATIC);__str372=allocate([39,91,39,0],"i8",ALLOC_STATIC);
__str37199=allocate([114,101,112,108,97,99,101,0],"i8",ALLOC_STATIC);__str371512=allocate([122,111,110,101,0],"i8",ALLOC_STATIC);__str371464=allocate([98,114,111,107,101,110,32,109,101,109,98,101,114,115,0],"i8",ALLOC_STATIC);__str371344=allocate([105,110,100,101,120,0],"i8",ALLOC_STATIC);__str371290=allocate([73,110,102,0],"i8",ALLOC_STATIC);__str371145=allocate([83,67,108,97,115,115,0],"i8",ALLOC_STATIC);__str371079=allocate([116,114,117,110,99,97,116,101,0],"i8",ALLOC_STATIC);
__str371=allocate([39,125,39,0],"i8",ALLOC_STATIC);__str370=allocate([39,123,39,0],"i8",ALLOC_STATIC);__str37=allocate([42,42,0],"i8",ALLOC_STATIC);__str36962=allocate([104,97,115,104,0],"i8",ALLOC_STATIC);__str369=allocate([116,76,65,83,84,95,84,79,75,69,78,0],"i8",ALLOC_STATIC);__str36896=allocate([101,113,108,63,0],"i8",ALLOC_STATIC);__str368=allocate([105,100,95,99,111,114,101,95,115,101,116,95,112,111,115,116,101,120,101,0],"i8",ALLOC_STATIC);
__str367=allocate([105,100,95,99,111,114,101,95,100,101,102,105,110,101,95,115,105,110,103,108,101,116,111,110,95,109,101,116,104,111,100,0],"i8",ALLOC_STATIC);__str36692=allocate([79,80,95,83,69,84,67,79,78,83,84,9,58,37,115,9,82,37,100,10,0],"i8",ALLOC_STATIC);__str366=allocate([105,100,95,99,111,114,101,95,100,101,102,105,110,101,95,109,101,116,104,111,100,0],"i8",ALLOC_STATIC);__str3659=allocate([61,61,61,0],"i8",ALLOC_STATIC);__str36570=allocate([79,98,106,101,99,116,0],"i8",ALLOC_STATIC);
__str365=allocate([105,100,95,99,111,114,101,95,117,110,100,101,102,95,109,101,116,104,111,100,0],"i8",ALLOC_STATIC);__str364=allocate([105,100,95,99,111,114,101,95,115,101,116,95,118,97,114,105,97,98,108,101,95,97,108,105,97,115,0],"i8",ALLOC_STATIC);__str363=allocate([105,100,95,99,111,114,101,95,115,101,116,95,109,101,116,104,111,100,95,97,108,105,97,115,0],"i8",ALLOC_STATIC);__str362=allocate([105,100,67,70,85,78,67,0],"i8",ALLOC_STATIC);__str36198=allocate([112,117,115,104,0],"i8",ALLOC_STATIC);
__str361511=allocate([121,101,97,114,0],"i8",ALLOC_STATIC);__str361463=allocate([115,116,114,117,99,116,32,115,105,122,101,32,100,105,102,102,101,114,115,0],"i8",ALLOC_STATIC);__str361343=allocate([105,110,99,108,117,100,101,63,0],"i8",ALLOC_STATIC);__str361289=allocate([78,97,78,0],"i8",ALLOC_STATIC);__str361144=allocate([105,67,108,97,115,115,0],"i8",ALLOC_STATIC);__str361078=allocate([105,110,115,112,101,99,116,0],"i8",ALLOC_STATIC);__str361=allocate([105,100,73,70,85,78,67,0],"i8",ALLOC_STATIC);
__str360=allocate([105,100,82,101,115,112,111,110,100,95,116,111,0],"i8",ALLOC_STATIC);__str36=allocate([37,0],"i8",ALLOC_STATIC);__str35961=allocate([101,120,116,101,110,100,0],"i8",ALLOC_STATIC);__str359=allocate([105,100,78,85,76,76,0],"i8",ALLOC_STATIC);__str35895=allocate([116,111,95,115,0],"i8",ALLOC_STATIC);__str358=allocate([39,126,39,0],"i8",ALLOC_STATIC);__str357=allocate([39,33,39,0],"i8",ALLOC_STATIC);
__str35691=allocate([79,80,95,71,69,84,67,79,78,83,84,9,82,37,100,9,58,37,115,10,0],"i8",ALLOC_STATIC);__str35684=allocate([116,85,77,73,78,85,83,95,78,85,77,0],"i8",ALLOC_STATIC);__str356=allocate([82,101,97,100,105,110,103,32,97,32,116,111,107,101,110,58,32,0],"i8",ALLOC_STATIC);__str35569=allocate([66,97,115,105,99,79,98,106,101,99,116,0],"i8",ALLOC_STATIC);__str355=allocate([39,37,39,0],"i8",ALLOC_STATIC);__str354=allocate([39,47,39,0],"i8",ALLOC_STATIC);
__str3537=allocate([115,117,112,101,114,99,108,97,115,115,32,109,117,115,116,32,98,101,32,97,32,67,108,97,115,115,32,40,37,115,32,103,105,118,101,110,41,0],"i8",ALLOC_STATIC);__str353=allocate([39,42,39,0],"i8",ALLOC_STATIC);__str352=allocate([39,45,39,0],"i8",ALLOC_STATIC);__str35197=allocate([112,111,112,0],"i8",ALLOC_STATIC);__str351510=allocate([121,100,97,121,0],"i8",ALLOC_STATIC);__str351462=allocate([65,114,103,117,109,101,110,116,69,114,114,111,114,0],"i8",ALLOC_STATIC);
__str351342=allocate([104,97,115,104,0],"i8",ALLOC_STATIC);__str351288=allocate([46,46,0],"i8",ALLOC_STATIC);__str351143=allocate([67,108,97,115,115,0],"i8",ALLOC_STATIC);__str351077=allocate([116,111,95,115,0],"i8",ALLOC_STATIC);__str351=allocate([39,43,39,0],"i8",ALLOC_STATIC);__str350=allocate([39,38,39,0],"i8",ALLOC_STATIC);__str35=allocate([47,0],"i8",ALLOC_STATIC);__str34960=allocate([101,113,117,97,108,63,0],"i8",ALLOC_STATIC);__str349=allocate([39,94,39,0],"i8",ALLOC_STATIC);
__str34894=allocate([105,110,115,112,101,99,116,0],"i8",ALLOC_STATIC);__str348=allocate([39,124,39,0],"i8",ALLOC_STATIC);__str34795=allocate([99,105,105,100,120,0],"i8",ALLOC_STATIC);__str347=allocate([39,60,39,0],"i8",ALLOC_STATIC);__str34690=allocate([79,80,95,83,69,84,71,76,79,66,65,76,9,58,37,115,9,82,37,100,10,0],"i8",ALLOC_STATIC);__str346=allocate([39,62,39,0],"i8",ALLOC_STATIC);__str34568=allocate([111,0],"i8",ALLOC_STATIC);__str345=allocate([39,58,39,0],"i8",ALLOC_STATIC);
__str344=allocate([39,63,39,0],"i8",ALLOC_STATIC);__str343=allocate([39,61,39,0],"i8",ALLOC_STATIC);__str342=allocate([116,76,79,87,69,83,84,0],"i8",ALLOC_STATIC);__str34196=allocate([108,101,110,103,116,104,0],"i8",ALLOC_STATIC);__str341509=allocate([119,100,97,121,0],"i8",ALLOC_STATIC);__str341461=allocate([110,111,32,109,101,109,98,101,114,32,39,37,115,39,32,105,110,32,115,116,114,117,99,116,0],"i8",ALLOC_STATIC);__str341341=allocate([101,113,108,63,0],"i8",ALLOC_STATIC);
__str341287=allocate([37,37,108,37,99,0],"i8",ALLOC_STATIC);__str341142=allocate([79,98,106,101,99,116,0],"i8",ALLOC_STATIC);__str341076=allocate([116,111,95,105,0],"i8",ALLOC_STATIC);__str341=allocate([116,76,65,77,66,69,71,0],"i8",ALLOC_STATIC);__str340=allocate([116,83,84,82,73,78,71,95,68,86,65,82,0],"i8",ALLOC_STATIC);__str34=allocate([42,0],"i8",ALLOC_STATIC);__str33959=allocate([101,113,108,63,0],"i8",ALLOC_STATIC);__str339=allocate([116,83,84,82,73,78,71,95,66,69,71,0],"i8",ALLOC_STATIC);
__str33893=allocate([116,111,95,104,97,115,104,0],"i8",ALLOC_STATIC);__str338=allocate([116,81,87,79,82,68,83,95,66,69,71,0],"i8",ALLOC_STATIC);__str33794=allocate([115,101,116,95,98,97,99,107,116,114,97,99,101,0],"i8",ALLOC_STATIC);__str3371=allocate([45,0],"i8",ALLOC_STATIC);__str337=allocate([116,87,79,82,68,83,95,66,69,71,0],"i8",ALLOC_STATIC);__str33689=allocate([79,80,95,71,69,84,71,76,79,66,65,76,9,82,37,100,9,58,37,115,10,0],"i8",ALLOC_STATIC);
__str33683=allocate([116,82,69,71,69,88,80,95,66,69,71,0],"i8",ALLOC_STATIC);__str336=allocate([109,101,116,104,111,100,95,109,105,115,115,105,110,103,0],"i8",ALLOC_STATIC);__str33567=allocate([42,0],"i8",ALLOC_STATIC);__str335=allocate([116,83,89,77,66,69,71,0],"i8",ALLOC_STATIC);__str334=allocate([116,76,65,77,66,68,65,0],"i8",ALLOC_STATIC);__str333=allocate([116,65,77,80,69,82,0],"i8",ALLOC_STATIC);__str332=allocate([116,83,84,65,82,0],"i8",ALLOC_STATIC);
__str33195=allocate([108,97,115,116,0],"i8",ALLOC_STATIC);__str331508=allocate([117,116,99,63,0],"i8",ALLOC_STATIC);__str331460=allocate([99,97,108,108,0],"i8",ALLOC_STATIC);__str331340=allocate([101,109,112,116,121,63,0],"i8",ALLOC_STATIC);__str331286=allocate([48,66,0],"i8",ALLOC_STATIC);__str331141=allocate([77,111,100,117,108,101,0],"i8",ALLOC_STATIC);__str331075=allocate([116,111,95,102,0],"i8",ALLOC_STATIC);__str331=allocate([116,76,66,82,65,67,69,95,65,82,71,0],"i8",ALLOC_STATIC);
__str330=allocate([116,76,66,82,65,67,69,0],"i8",ALLOC_STATIC);__str33=allocate([65,114,103,117,109,101,110,116,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str32958=allocate([100,117,112,0],"i8",ALLOC_STATIC);__str329=allocate([116,76,66,82,65,67,75,0],"i8",ALLOC_STATIC);__str32892=allocate([118,97,108,117,101,115,0],"i8",ALLOC_STATIC);__str328=allocate([116,82,80,65,82,69,78,0],"i8",ALLOC_STATIC);__str32793=allocate([124,111,0],"i8",ALLOC_STATIC);
__str327=allocate([116,76,80,65,82,69,78,95,65,82,71,0],"i8",ALLOC_STATIC);__str32688=allocate([79,80,95,76,79,65,68,70,9,82,37,100,10,0],"i8",ALLOC_STATIC);__str326=allocate([116,76,80,65,82,69,78,0],"i8",ALLOC_STATIC);__str32566=allocate([111,111,0],"i8",ALLOC_STATIC);__str325=allocate([116,65,83,83,79,67,0],"i8",ALLOC_STATIC);__str324=allocate([116,79,80,95,65,83,71,78,0],"i8",ALLOC_STATIC);__str323=allocate([116,67,79,76,79,78,51,0],"i8",ALLOC_STATIC);
__str322=allocate([116,67,79,76,79,78,50,0],"i8",ALLOC_STATIC);__str32194=allocate([106,111,105,110,0],"i8",ALLOC_STATIC);__str32182=allocate([116,82,83,72,70,84,0],"i8",ALLOC_STATIC);__str321507=allocate([117,115,101,99,0],"i8",ALLOC_STATIC);__str321459=allocate([42,38,0],"i8",ALLOC_STATIC);__str321339=allocate([101,97,99,104,95,108,105,110,101,0],"i8",ALLOC_STATIC);__str321285=allocate([48,98,0],"i8",ALLOC_STATIC);__str321140=allocate([116,114,117,101,0],"i8",ALLOC_STATIC);
__str321074=allocate([115,117,99,99,0],"i8",ALLOC_STATIC);__str321=allocate([95,95,99,108,97,115,115,105,100,95,95,0],"i8",ALLOC_STATIC);__str320=allocate([116,76,83,72,70,84,0],"i8",ALLOC_STATIC);__str32=allocate([43,0],"i8",ALLOC_STATIC);__str31957=allocate([99,108,111,110,101,0],"i8",ALLOC_STATIC);__str319=allocate([116,65,83,69,84,0],"i8",ALLOC_STATIC);__str31891=allocate([118,97,108,117,101,63,0],"i8",ALLOC_STATIC);__str318=allocate([116,65,82,69,70,0],"i8",ALLOC_STATIC);
__str31792=allocate([111,0],"i8",ALLOC_STATIC);__str317=allocate([116,68,79,84,51,0],"i8",ALLOC_STATIC);__str31687=allocate([79,80,95,76,79,65,68,84,9,82,37,100,10,0],"i8",ALLOC_STATIC);__str3165=allocate([60,61,62,0],"i8",ALLOC_STATIC);__str316=allocate([116,68,79,84,50,0],"i8",ALLOC_STATIC);__str31592=allocate([115,116,100,58,58,98,97,100,95,97,108,108,111,99,0],"i8",ALLOC_STATIC);
__str31565=allocate([99,97,110,39,116,32,109,97,107,101,32,115,117,98,99,108,97,115,115,32,111,102,32,67,108,97,115,115,0],"i8",ALLOC_STATIC);__str315=allocate([116,78,77,65,84,67,72,0],"i8",ALLOC_STATIC);__str31478=allocate([103,109,0],"i8",ALLOC_STATIC);__str31430=allocate([99,111,114,114,117,112,116,101,100,32,115,116,114,117,99,116,0],"i8",ALLOC_STATIC);__str314=allocate([116,77,65,84,67,72,0],"i8",ALLOC_STATIC);__str31310=allocate([83,116,114,105,110,103,0],"i8",ALLOC_STATIC);
__str313=allocate([116,79,82,79,80,0],"i8",ALLOC_STATIC);__str31281=allocate([116,65,78,68,79,80,0],"i8",ALLOC_STATIC);__str31256=allocate([109,97,108,102,111,114,109,101,100,32,102,111,114,109,97,116,32,115,116,114,105,110,103,32,45,32,37,37,37,99,0],"i8",ALLOC_STATIC);__str31220=allocate([82,97,110,103,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str312=allocate([116,111,95,115,0],"i8",ALLOC_STATIC);__str31198=allocate([99,97,108,108,0],"i8",ALLOC_STATIC);
__str31193=allocate([105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0],"i8",ALLOC_STATIC);__str311506=allocate([116,111,95,102,0],"i8",ALLOC_STATIC);__str311458=allocate([42,0],"i8",ALLOC_STATIC);__str311338=allocate([100,111,119,110,99,97,115,101,33,0],"i8",ALLOC_STATIC);__str311284=allocate([48,88,0],"i8",ALLOC_STATIC);__str311139=allocate([102,97,108,115,101,0],"i8",ALLOC_STATIC);__str31111=allocate([38,0],"i8",ALLOC_STATIC);__str311073=allocate([114,111,117,110,100,0],"i8",ALLOC_STATIC);
__str311037=allocate([102,124,102,0],"i8",ALLOC_STATIC);__str311=allocate([116,76,69,81,0],"i8",ALLOC_STATIC);__str31045=allocate([78,117,109,101,114,105,99,0],"i8",ALLOC_STATIC);__str31009=allocate([84,79,76,69,82,65,78,67,69,0],"i8",ALLOC_STATIC);__str310=allocate([116,71,69,81,0],"i8",ALLOC_STATIC);__str31=allocate([62,62,0],"i8",ALLOC_STATIC);__str30956=allocate([99,108,97,115,115,0],"i8",ALLOC_STATIC);__str309=allocate([116,78,69,81,0],"i8",ALLOC_STATIC);
__str30890=allocate([115,116,111,114,101,0],"i8",ALLOC_STATIC);__str308=allocate([116,69,81,81,0],"i8",ALLOC_STATIC);__str30791=allocate([41,0],"i8",ALLOC_STATIC);__str307=allocate([116,69,81,0],"i8",ALLOC_STATIC);__str30686=allocate([79,80,95,76,79,65,68,83,69,76,70,9,82,37,100,10,0],"i8",ALLOC_STATIC);__str306=allocate([116,67,77,80,0],"i8",ALLOC_STATIC);
__str30564=allocate([99,97,110,39,116,32,109,97,107,101,32,115,117,98,99,108,97,115,115,32,111,102,32,115,105,110,103,108,101,116,111,110,32,99,108,97,115,115,0],"i8",ALLOC_STATIC);__str305=allocate([116,80,79,87,0],"i8",ALLOC_STATIC);__str304=allocate([116,85,77,73,78,85,83,0],"i8",ALLOC_STATIC);__str303=allocate([116,85,80,76,85,83,0],"i8",ALLOC_STATIC);__str302=allocate([116,82,69,71,69,88,80,95,69,78,68,0],"i8",ALLOC_STATIC);__str30192=allocate([105,110,100,101,120,0],"i8",ALLOC_STATIC);
__str301505=allocate([116,111,95,105,0],"i8",ALLOC_STATIC);__str301457=allocate([62,0],"i8",ALLOC_STATIC);__str301337=allocate([100,111,119,110,99,97,115,101,0],"i8",ALLOC_STATIC);__str301283=allocate([48,120,0],"i8",ALLOC_STATIC);__str301138=allocate([99,97,110,39,116,32,99,111,110,118,101,114,116,32,37,115,32,116,111,32,73,110,116,101,103,101,114,32,40,37,115,35,37,115,32,103,105,118,101,115,32,37,115,41,0],"i8",ALLOC_STATIC);__str301072=allocate([110,101,120,116,0],"i8",ALLOC_STATIC);
__str301036=allocate([102,105,0],"i8",ALLOC_STATIC);__str301=allocate([116,66,65,67,75,95,82,69,70,0],"i8",ALLOC_STATIC);__str300=allocate([116,78,84,72,95,82,69,70,0],"i8",ALLOC_STATIC);__str30=allocate([60,60,0],"i8",ALLOC_STATIC);__str3=allocate([109,114,117,98,121,32,45,32,69,109,98,101,100,100,97,98,108,101,32,82,117,98,121,32,32,67,111,112,121,114,105,103,104,116,32,40,99,41,32,50,48,49,48,45,50,48,49,50,32,109,114,117,98,121,32,100,101,118,101,108,111,112,101,114,115,10,0],"i8",ALLOC_STATIC);
__str29955=allocate([95,95,115,101,110,100,95,95,0],"i8",ALLOC_STATIC);__str299=allocate([116,83,84,82,73,78,71,95,80,65,82,84,0],"i8",ALLOC_STATIC);__str29889=allocate([115,105,122,101,0],"i8",ALLOC_STATIC);__str298=allocate([116,83,84,82,73,78,71,0],"i8",ALLOC_STATIC);__str29790=allocate([32,40,0],"i8",ALLOC_STATIC);__str297=allocate([116,82,69,71,69,88,80,0],"i8",ALLOC_STATIC);__str29685=allocate([79,80,95,76,79,65,68,78,73,76,9,82,37,100,10,0],"i8",ALLOC_STATIC);
__str296=allocate([116,67,72,65,82,0],"i8",ALLOC_STATIC);__str29563=allocate([58,58,0],"i8",ALLOC_STATIC);__str295=allocate([116,70,76,79,65,84,0],"i8",ALLOC_STATIC);__str294=allocate([116,73,78,84,69,71,69,82,0],"i8",ALLOC_STATIC);__str293=allocate([116,76,65,66,69,76,0],"i8",ALLOC_STATIC);__str2928=allocate([95,95,97,116,116,97,99,104,101,100,95,95,0],"i8",ALLOC_STATIC);__str292=allocate([116,67,86,65,82,0],"i8",ALLOC_STATIC);__str29191=allocate([102,105,114,115,116,0],"i8",ALLOC_STATIC);
__str291504=allocate([115,101,99,0],"i8",ALLOC_STATIC);__str291456=allocate([61,0],"i8",ALLOC_STATIC);__str291336=allocate([99,104,111,112,33,0],"i8",ALLOC_STATIC);__str291282=allocate([48,0],"i8",ALLOC_STATIC);__str291137=allocate([116,111,95,105,0],"i8",ALLOC_STATIC);__str291071=allocate([104,97,115,104,0],"i8",ALLOC_STATIC);__str291035=allocate([102,102,0],"i8",ALLOC_STATIC);__str291=allocate([116,67,79,78,83,84,65,78,84,0],"i8",ALLOC_STATIC);__str290=allocate([116,73,86,65,82,0],"i8",ALLOC_STATIC);
__str29=allocate([33,61,0],"i8",ALLOC_STATIC);__str28954=allocate([95,95,105,100,95,95,0],"i8",ALLOC_STATIC);__str289=allocate([116,71,86,65,82,0],"i8",ALLOC_STATIC);__str28888=allocate([115,104,105,102,116,0],"i8",ALLOC_STATIC);__str288=allocate([116,70,73,68,0],"i8",ALLOC_STATIC);__str28789=allocate([58,32,0],"i8",ALLOC_STATIC);__str287=allocate([116,73,68,69,78,84,73,70,73,69,82,0],"i8",ALLOC_STATIC);__str28684=allocate([79,80,95,76,79,65,68,83,89,77,9,82,37,100,9,58,37,115,10,0],"i8",ALLOC_STATIC);
__str2862=allocate([111,0],"i8",ALLOC_STATIC);__str286=allocate([107,101,121,119,111,114,100,95,95,69,78,67,79,68,73,78,71,95,95,0],"i8",ALLOC_STATIC);__str28562=allocate([95,95,99,108,97,115,115,112,97,116,104,95,95,0],"i8",ALLOC_STATIC);__str285=allocate([107,101,121,119,111,114,100,95,95,70,73,76,69,95,95,0],"i8",ALLOC_STATIC);__str284=allocate([107,101,121,119,111,114,100,95,95,76,73,78,69,95,95,0],"i8",ALLOC_STATIC);__str283=allocate([107,101,121,119,111,114,100,95,69,78,68,0],"i8",ALLOC_STATIC);
__str2820=allocate([101,110,97,98,108,101,0],"i8",ALLOC_STATIC);__str282=allocate([107,101,121,119,111,114,100,95,66,69,71,73,78,0],"i8",ALLOC_STATIC);__str28190=allocate([101,109,112,116,121,63,0],"i8",ALLOC_STATIC);__str281503=allocate([109,111,110,116,104,0],"i8",ALLOC_STATIC);__str281455=allocate([32,0],"i8",ALLOC_STATIC);__str281335=allocate([99,104,111,112,0],"i8",ALLOC_STATIC);
__str281281=allocate([105,110,118,97,108,105,100,32,109,98,115,116,114,105,110,103,32,115,101,113,117,101,110,99,101,0],"i8",ALLOC_STATIC);__str281245=allocate([98,97,100,32,118,97,108,117,101,32,102,111,114,32,114,97,110,103,101,0],"i8",ALLOC_STATIC);__str281136=allocate([98,97,115,101,32,115,112,101,99,105,102,105,101,100,32,102,111,114,32,110,111,110,32,115,116,114,105,110,103,32,118,97,108,117,101,0],"i8",ALLOC_STATIC);__str281070=allocate([102,108,111,111,114,0],"i8",ALLOC_STATIC);
__str281034=allocate([102,0],"i8",ALLOC_STATIC);__str281=allocate([107,101,121,119,111,114,100,95,97,108,105,97,115,0],"i8",ALLOC_STATIC);__str280=allocate([109,111,100,105,102,105,101,114,95,114,101,115,99,117,101,0],"i8",ALLOC_STATIC);__str28=allocate([60,61,0],"i8",ALLOC_STATIC);__str27953=allocate([61,61,61,0],"i8",ALLOC_STATIC);__str279=allocate([109,111,100,105,102,105,101,114,95,117,110,116,105,108,0],"i8",ALLOC_STATIC);__str27887=allocate([114,101,112,108,97,99,101,0],"i8",ALLOC_STATIC);
__str278=allocate([109,111,100,105,102,105,101,114,95,119,104,105,108,101,0],"i8",ALLOC_STATIC);__str27788=allocate([58,0],"i8",ALLOC_STATIC);__str277=allocate([109,111,100,105,102,105,101,114,95,117,110,108,101,115,115,0],"i8",ALLOC_STATIC);__str27683=allocate([79,80,95,76,79,65,68,73,9,82,37,100,9,37,100,10,0],"i8",ALLOC_STATIC);__str2763=allocate([119,97,114,110,105,110,103,58,32,0],"i8",ALLOC_STATIC);__str276=allocate([109,111,100,105,102,105,101,114,95,105,102,0],"i8",ALLOC_STATIC);
__str27561=allocate([124,111,0],"i8",ALLOC_STATIC);__str275=allocate([107,101,121,119,111,114,100,95,110,111,116,0],"i8",ALLOC_STATIC);__str274=allocate([107,101,121,119,111,114,100,95,111,114,0],"i8",ALLOC_STATIC);__str273=allocate([107,101,121,119,111,114,100,95,97,110,100,0],"i8",ALLOC_STATIC);__str272=allocate([107,101,121,119,111,114,100,95,102,97,108,115,101,0],"i8",ALLOC_STATIC);__str27189=allocate([100,101,108,101,116,101,95,97,116,0],"i8",ALLOC_STATIC);
__str271502=allocate([109,111,110,0],"i8",ALLOC_STATIC);__str271454=allocate([44,32,0],"i8",ALLOC_STATIC);__str271334=allocate([99,104,111,109,112,33,0],"i8",ALLOC_STATIC);__str271280=allocate([105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,0],"i8",ALLOC_STATIC);__str271244=allocate([65,114,103,117,109,101,110,116,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str271135=allocate([65,114,103,117,109,101,110,116,69,114,114,111,114,0],"i8",ALLOC_STATIC);
__str271069=allocate([101,113,108,63,0],"i8",ALLOC_STATIC);__str271033=allocate([101,114,102,99,0],"i8",ALLOC_STATIC);__str271=allocate([107,101,121,119,111,114,100,95,116,114,117,101,0],"i8",ALLOC_STATIC);__str270=allocate([107,101,121,119,111,114,100,95,110,105,108,0],"i8",ALLOC_STATIC);__str27=allocate([60,0],"i8",ALLOC_STATIC);__str26952=allocate([33,61,0],"i8",ALLOC_STATIC);__str269=allocate([107,101,121,119,111,114,100,95,115,101,108,102,0],"i8",ALLOC_STATIC);
__str26886=allocate([109,101,109,98,101,114,63,0],"i8",ALLOC_STATIC);__str268=allocate([107,101,121,119,111,114,100,95,115,117,112,101,114,0],"i8",ALLOC_STATIC);__str26787=allocate([108,105,110,101,0],"i8",ALLOC_STATIC);__str267=allocate([107,101,121,119,111,114,100,95,121,105,101,108,100,0],"i8",ALLOC_STATIC);__str26682=allocate([79,80,95,76,79,65,68,76,9,82,37,100,9,76,40,37,100,41,10,0],"i8",ALLOC_STATIC);__str266=allocate([107,101,121,119,111,114,100,95,114,101,116,117,114,110,0],"i8",ALLOC_STATIC);
__str2658=allocate([83,116,97,110,100,97,114,100,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str26560=allocate([42,38,0],"i8",ALLOC_STATIC);__str265=allocate([107,101,121,119,111,114,100,95,100,111,95,76,65,77,66,68,65,0],"i8",ALLOC_STATIC);__str264=allocate([107,101,121,119,111,114,100,95,100,111,95,98,108,111,99,107,0],"i8",ALLOC_STATIC);__str263=allocate([107,101,121,119,111,114,100,95,100,111,95,99,111,110,100,0],"i8",ALLOC_STATIC);
__str262=allocate([107,101,121,119,111,114,100,95,100,111,0],"i8",ALLOC_STATIC);__str26188=allocate([99,111,110,99,97,116,0],"i8",ALLOC_STATIC);__str261501=allocate([109,105,110,0],"i8",ALLOC_STATIC);__str261453=allocate([58,46,46,46,62,0],"i8",ALLOC_STATIC);__str261333=allocate([99,104,111,109,112,0],"i8",ALLOC_STATIC);__str261279=allocate([37,99,32,114,101,113,117,105,114,101,115,32,97,32,99,104,97,114,97,99,116,101,114,0],"i8",ALLOC_STATIC);__str261243=allocate([60,61,62,0],"i8",ALLOC_STATIC);
__str261134=allocate([99,97,110,39,116,32,99,111,110,118,101,114,116,32,110,105,108,32,105,110,116,111,32,73,110,116,101,103,101,114,0],"i8",ALLOC_STATIC);__str261068=allocate([99,101,105,108,0],"i8",ALLOC_STATIC);__str261032=allocate([101,114,102,0],"i8",ALLOC_STATIC);__str261=allocate([107,101,121,119,111,114,100,95,105,110,0],"i8",ALLOC_STATIC);__str260=allocate([107,101,121,119,111,114,100,95,114,101,116,114,121,0],"i8",ALLOC_STATIC);__str26=allocate([62,61,0],"i8",ALLOC_STATIC);
__str25951=allocate([61,61,0],"i8",ALLOC_STATIC);__str259=allocate([107,101,121,119,111,114,100,95,114,101,100,111,0],"i8",ALLOC_STATIC);__str25885=allocate([108,101,110,103,116,104,0],"i8",ALLOC_STATIC);__str258=allocate([107,101,121,119,111,114,100,95,110,101,120,116,0],"i8",ALLOC_STATIC);__str25786=allocate([102,105,108,101,0],"i8",ALLOC_STATIC);__str257=allocate([107,101,121,119,111,114,100,95,98,114,101,97,107,0],"i8",ALLOC_STATIC);
__str25681=allocate([79,80,95,77,79,86,69,9,82,37,100,9,82,37,100,10,0],"i8",ALLOC_STATIC);__str256=allocate([107,101,121,119,111,114,100,95,102,111,114,0],"i8",ALLOC_STATIC);__str25580=allocate([107,101,121,119,111,114,100,95,117,110,116,105,108,0],"i8",ALLOC_STATIC);__str25559=allocate([117,110,100,101,102,105,110,101,100,32,109,101,116,104,111,100,32,39,37,115,39,32,102,111,114,32,99,108,97,115,115,32,37,115,0],"i8",ALLOC_STATIC);
__str255=allocate([69,110,116,101,114,105,110,103,32,115,116,97,116,101,32,37,100,10,0],"i8",ALLOC_STATIC);__str254=allocate([107,101,121,119,111,114,100,95,119,104,105,108,101,0],"i8",ALLOC_STATIC);__str2536=allocate([84,121,112,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str253=allocate([107,101,121,119,111,114,100,95,119,104,101,110,0],"i8",ALLOC_STATIC);__str252=allocate([107,101,121,119,111,114,100,95,99,97,115,101,0],"i8",ALLOC_STATIC);__str25187=allocate([99,108,101,97,114,0],"i8",ALLOC_STATIC);
__str251500=allocate([109,100,97,121,0],"i8",ALLOC_STATIC);__str251452=allocate([35,60,115,116,114,117,99,116,32,0],"i8",ALLOC_STATIC);__str251332=allocate([99,97,112,105,116,97,108,105,122,101,33,0],"i8",ALLOC_STATIC);__str251278=allocate([37,0],"i8",ALLOC_STATIC);__str251242=allocate([46,46,46,0],"i8",ALLOC_STATIC);__str251133=allocate([101,113,108,63,0],"i8",ALLOC_STATIC);__str251067=allocate([62,62,0],"i8",ALLOC_STATIC);__str251031=allocate([104,121,112,111,116,0],"i8",ALLOC_STATIC);
__str251=allocate([107,101,121,119,111,114,100,95,101,108,115,101,0],"i8",ALLOC_STATIC);__str250=allocate([107,101,121,119,111,114,100,95,101,108,115,105,102,0],"i8",ALLOC_STATIC);__str25=allocate([62,0],"i8",ALLOC_STATIC);__str24950=allocate([115,105,110,103,108,101,116,111,110,95,99,108,97,115,115,0],"i8",ALLOC_STATIC);__str249=allocate([107,101,121,119,111,114,100,95,116,104,101,110,0],"i8",ALLOC_STATIC);__str24884=allocate([107,101,121,115,0],"i8",ALLOC_STATIC);
__str248=allocate([107,101,121,119,111,114,100,95,117,110,108,101,115,115,0],"i8",ALLOC_STATIC);__str24785=allocate([109,101,115,103,0],"i8",ALLOC_STATIC);__str247=allocate([107,101,121,119,111,114,100,95,105,102,0],"i8",ALLOC_STATIC);__str24680=allocate([79,80,95,78,79,80,10,0],"i8",ALLOC_STATIC);__str246=allocate([107,101,121,119,111,114,100,95,101,110,100,0],"i8",ALLOC_STATIC);__str24558=allocate([78,97,109,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);
__str245=allocate([107,101,121,119,111,114,100,95,101,110,115,117,114,101,0],"i8",ALLOC_STATIC);__str244=allocate([107,101,121,119,111,114,100,95,114,101,115,99,117,101,0],"i8",ALLOC_STATIC);__str243=allocate([107,101,121,119,111,114,100,95,98,101,103,105,110,0],"i8",ALLOC_STATIC);__str242=allocate([107,101,121,119,111,114,100,95,117,110,100,101,102,0],"i8",ALLOC_STATIC);__str24186=allocate([91,93,61,0],"i8",ALLOC_STATIC);__str241499=allocate([108,111,99,97,108,116,105,109,101,0],"i8",ALLOC_STATIC);
__str241451=allocate([105,110,99,111,110,115,105,115,116,101,110,116,32,115,116,114,117,99,116,0],"i8",ALLOC_STATIC);__str241331=allocate([99,97,112,105,116,97,108,105,122,101,0],"i8",ALLOC_STATIC);__str241277=allocate([105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,99,104,97,114,97,99,116,101,114,32,45,32,37,0],"i8",ALLOC_STATIC);__str241241=allocate([105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0],"i8",ALLOC_STATIC);__str241132=allocate([116,111,95,102,0],"i8",ALLOC_STATIC);
__str241066=allocate([60,60,0],"i8",ALLOC_STATIC);__str241030=allocate([108,100,101,120,112,0],"i8",ALLOC_STATIC);__str241=allocate([107,101,121,119,111,114,100,95,100,101,102,0],"i8",ALLOC_STATIC);__str240=allocate([107,101,121,119,111,114,100,95,109,111,100,117,108,101,0],"i8",ALLOC_STATIC);__str24=allocate([33,126,0],"i8",ALLOC_STATIC);__str23949=allocate([114,97,105,115,101,0],"i8",ALLOC_STATIC);__str239=allocate([107,101,121,119,111,114,100,95,99,108,97,115,115,0],"i8",ALLOC_STATIC);
__str23883=allocate([107,101,121,63,0],"i8",ALLOC_STATIC);__str238=allocate([36,117,110,100,101,102,105,110,101,100,0],"i8",ALLOC_STATIC);__str23784=allocate([83,121,110,116,97,120,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str237=allocate([101,114,114,111,114,0],"i8",ALLOC_STATIC);__str23679=allocate([37,48,51,100,32,0],"i8",ALLOC_STATIC);__str236=allocate([36,101,110,100,0],"i8",ALLOC_STATIC);__str23579=allocate([68,101,108,101,116,105,110,103,0],"i8",ALLOC_STATIC);
__str23557=allocate([105,110,115,112,101,99,116,0],"i8",ALLOC_STATIC);__str235=allocate([110,101,103,97,116,105,118,101,32,97,114,103,99,32,102,111,114,32,102,117,110,99,97,108,108,32,40,37,100,41,0],"i8",ALLOC_STATIC);__str234=allocate([108,105,110,101,32,37,100,58,37,100,58,32,37,115,10,0],"i8",ALLOC_STATIC);__str233=allocate([37,115,58,37,100,58,37,100,58,32,37,115,10,0],"i8",ALLOC_STATIC);
__str232=allocate([73,110,116,101,114,110,97,108,32,101,114,114,111,114,32,105,110,32,98,97,99,107,114,101,102,95,101,114,114,111,114,40,41,32,58,32,110,61,62,99,97,114,32,61,61,32,37,100,0],"i8",ALLOC_STATIC);__str23185=allocate([60,60,0],"i8",ALLOC_STATIC);__str231498=allocate([104,111,117,114,0],"i8",ALLOC_STATIC);__str231450=allocate([101,113,108,63,0],"i8",ALLOC_STATIC);__str231330=allocate([91,93,0],"i8",ALLOC_STATIC);
__str231276=allocate([112,114,101,99,105,115,105,111,110,32,116,111,111,32,98,105,103,0],"i8",ALLOC_STATIC);__str231240=allocate([101,113,108,63,0],"i8",ALLOC_STATIC);__str231131=allocate([70,108,111,97,116,0],"i8",ALLOC_STATIC);__str231065=allocate([94,0],"i8",ALLOC_STATIC);__str231029=allocate([102,114,101,120,112,0],"i8",ALLOC_STATIC);__str231=allocate([99,97,110,39,116,32,115,101,116,32,118,97,114,105,97,98,108,101,32,36,37,99,0],"i8",ALLOC_STATIC);
__str230=allocate([99,97,110,39,116,32,115,101,116,32,118,97,114,105,97,98,108,101,32,36,37,100,0],"i8",ALLOC_STATIC);__str23=allocate([61,126,0],"i8",ALLOC_STATIC);__str22948=allocate([105,116,101,114,97,116,111,114,63,0],"i8",ALLOC_STATIC);__str229=allocate([117,110,116,101,114,109,105,110,97,116,101,100,32,115,116,114,105,110,103,32,109,101,101,116,115,32,101,110,100,32,111,102,32,102,105,108,101,0],"i8",ALLOC_STATIC);
__str22882=allocate([105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0],"i8",ALLOC_STATIC);__str228=allocate([73,110,118,97,108,105,100,32,101,115,99,97,112,101,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,0],"i8",ALLOC_STATIC);__str22783=allocate([83,99,114,105,112,116,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str227=allocate([115,116,114,105,110,103,32,116,111,111,32,108,111,110,103,32,40,116,114,117,110,99,97,116,101,100,41,0],"i8",ALLOC_STATIC);
__str22678=allocate([105,114,101,112,32,37,100,32,110,114,101,103,115,61,37,100,32,110,108,111,99,97,108,115,61,37,100,32,112,111,111,108,115,61,37,100,32,115,121,109,115,61,37,100,10,0],"i8",ALLOC_STATIC);__str226=allocate([97,109,98,105,103,117,111,117,115,32,102,105,114,115,116,32,97,114,103,117,109,101,110,116,59,32,112,117,116,32,112,97,114,101,110,116,104,101,115,101,115,32,111,114,32,101,118,101,110,32,115,112,97,99,101,115,0],"i8",ALLOC_STATIC);
__str22556=allocate([99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,0],"i8",ALLOC_STATIC);__str225=allocate([119,104,105,108,101,0],"i8",ALLOC_STATIC);__str224=allocate([99,108,97,115,115,0],"i8",ALLOC_STATIC);__str223=allocate([66,69,71,73,78,0],"i8",ALLOC_STATIC);__str222=allocate([97,108,105,97,115,0],"i8",ALLOC_STATIC);__str22184=allocate([43,0],"i8",ALLOC_STATIC);__str221497=allocate([103,109,116,105,109,101,0],"i8",ALLOC_STATIC);
__str221449=allocate([116,111,95,115,0],"i8",ALLOC_STATIC);__str221329=allocate([61,126,0],"i8",ALLOC_STATIC);__str221275=allocate([112,114,101,99,105,115,105,111,110,32,103,105,118,101,110,32,116,119,105,99,101,0],"i8",ALLOC_STATIC);__str221239=allocate([105,110,115,112,101,99,116,0],"i8",ALLOC_STATIC);__str221130=allocate([99,97,110,39,116,32,99,111,110,118,101,114,116,32,110,105,108,32,105,110,116,111,32,70,108,111,97,116,0],"i8",ALLOC_STATIC);__str221064=allocate([124,0],"i8",ALLOC_STATIC);
__str221028=allocate([99,98,114,116,0],"i8",ALLOC_STATIC);__str221=allocate([69,78,68,0],"i8",ALLOC_STATIC);__str22078=allocate([95,95,69,78,67,79,68,73,78,71,95,95,0],"i8",ALLOC_STATIC);__str220=allocate([45,60,37,115,58,37,112,0],"i8",ALLOC_STATIC);__str22=allocate([61,61,61,0],"i8",ALLOC_STATIC);__str21947=allocate([103,108,111,98,97,108,95,118,97,114,105,97,98,108,101,115,0],"i8",ALLOC_STATIC);__str219=allocate([95,95,70,73,76,69,95,95,0],"i8",ALLOC_STATIC);
__str21881=allocate([95,95,105,110,105,116,95,99,111,114,101,0],"i8",ALLOC_STATIC);__str218=allocate([95,95,76,73,78,69,95,95,0],"i8",ALLOC_STATIC);__str21782=allocate([83,116,97,110,100,97,114,100,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str217=allocate([98,101,103,105,110,0],"i8",ALLOC_STATIC);__str21677=allocate([116,111,111,32,99,111,109,112,108,101,120,32,101,120,112,114,101,115,115,105,111,110,0],"i8",ALLOC_STATIC);__str2164=allocate([111,0],"i8",ALLOC_STATIC);
__str216=allocate([109,111,100,117,108,101,0],"i8",ALLOC_STATIC);__str21591=allocate([105,110,32,117,115,101,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0],"i8",ALLOC_STATIC);__str21581=allocate([48,48,48,57,48,48,48,48,0],"i8",ALLOC_STATIC);__str21567=allocate([37,115,32,105,115,32,110,111,116,32,97,32,115,121,109,98,111,108,0],"i8",ALLOC_STATIC);
__str21555=allocate([109,111,100,117,108,101,95,101,118,97,108,47,99,108,97,115,115,95,101,118,97,108,32,119,105,116,104,32,115,116,114,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0],"i8",ALLOC_STATIC);__str215=allocate([115,117,112,101,114,0],"i8",ALLOC_STATIC);__str21477=allocate([97,116,0],"i8",ALLOC_STATIC);__str21429=allocate([117,110,105,110,105,116,105,97,108,105,122,101,100,32,115,116,114,117,99,116,0],"i8",ALLOC_STATIC);
__str214=allocate([110,101,120,116,0],"i8",ALLOC_STATIC);__str21309=allocate([116,111,95,115,116,114,0],"i8",ALLOC_STATIC);__str213=allocate([114,101,100,111,0],"i8",ALLOC_STATIC);__str21255=allocate([116,111,111,32,102,101,119,32,97,114,103,117,109,101,110,116,115,0],"i8",ALLOC_STATIC);__str21219=allocate([111,0],"i8",ALLOC_STATIC);__str212=allocate([99,97,115,101,0],"i8",ALLOC_STATIC);__str21197=allocate([105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0],"i8",ALLOC_STATIC);
__str21183=allocate([91,93,0],"i8",ALLOC_STATIC);__str21177=allocate([105,102,0],"i8",ALLOC_STATIC);__str211496=allocate([103,109,116,63,0],"i8",ALLOC_STATIC);__str211448=allocate([105,110,115,112,101,99,116,0],"i8",ALLOC_STATIC);__str211328=allocate([61,61,0],"i8",ALLOC_STATIC);__str211274=allocate([117,110,110,117,109,98,101,114,101,100,40,37,100,41,32,109,105,120,101,100,32,119,105,116,104,32,110,97,109,101,100,0],"i8",ALLOC_STATIC);__str211238=allocate([116,111,95,115,0],"i8",ALLOC_STATIC);
__str211129=allocate([116,111,95,105,110,116,0],"i8",ALLOC_STATIC);__str21110=allocate([110,101,119,0],"i8",ALLOC_STATIC);__str211063=allocate([38,0],"i8",ALLOC_STATIC);__str211027=allocate([115,113,114,116,0],"i8",ALLOC_STATIC);__str211=allocate([105,100,50,110,97,109,101,0],"i8",ALLOC_STATIC);__str21044=allocate([48,0],"i8",ALLOC_STATIC);__str21008=allocate([69,0],"i8",ALLOC_STATIC);__str210=allocate([114,101,116,114,121,0],"i8",ALLOC_STATIC);__str21=allocate([61,61,0],"i8",ALLOC_STATIC);
__str20946=allocate([98,108,111,99,107,95,103,105,118,101,110,63,0],"i8",ALLOC_STATIC);__str209=allocate([119,104,101,110,0],"i8",ALLOC_STATIC);__str20880=allocate([105,110,99,108,117,100,101,63,0],"i8",ALLOC_STATIC);__str208=allocate([105,110,0],"i8",ALLOC_STATIC);__str20781=allocate([105,110,115,112,101,99,116,0],"i8",ALLOC_STATIC);__str207=allocate([111,114,0],"i8",ALLOC_STATIC);
__str20676=allocate([98,117,103,58,32,100,105,115,112,97,116,99,104,32,111,110,32,110,111,110,32,74,77,80,32,111,112,10,0],"i8",ALLOC_STATIC);__str206=allocate([117,110,100,101,102,0],"i8",ALLOC_STATIC);__str20554=allocate([78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str205=allocate([102,111,114,0],"i8",ALLOC_STATIC);__str204=allocate([121,105,101,108,100,0],"i8",ALLOC_STATIC);__str203=allocate([100,111,0],"i8",ALLOC_STATIC);
__str202=allocate([97,110,100,0],"i8",ALLOC_STATIC);__str20182=allocate([69,110,117,109,101,114,97,98,108,101,0],"i8",ALLOC_STATIC);__str201495=allocate([103,101,116,117,116,99,0],"i8",ALLOC_STATIC);__str201447=allocate([105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0],"i8",ALLOC_STATIC);__str201327=allocate([60,61,62,0],"i8",ALLOC_STATIC);
__str201273=allocate([117,110,110,117,109,98,101,114,101,100,40,37,100,41,32,109,105,120,101,100,32,119,105,116,104,32,110,117,109,98,101,114,101,100,0],"i8",ALLOC_STATIC);__str201237=allocate([109,101,109,98,101,114,63,0],"i8",ALLOC_STATIC);__str201128=allocate([99,108,97,115,115,32,111,114,32,109,111,100,117,108,101,32,114,101,113,117,105,114,101,100,0],"i8",ALLOC_STATIC);__str201062=allocate([126,0],"i8",ALLOC_STATIC);__str201026=allocate([108,111,103,49,48,0],"i8",ALLOC_STATIC);
__str201=allocate([100,101,102,0],"i8",ALLOC_STATIC);__str200=allocate([114,101,116,117,114,110,0],"i8",ALLOC_STATIC);__str20=allocate([60,61,62,0],"i8",ALLOC_STATIC);__str2=allocate([95,95,112,114,105,110,116,115,116,114,95,95,0],"i8",ALLOC_STATIC);__str19945=allocate([75,101,114,110,101,108,0],"i8",ALLOC_STATIC);__str199=allocate([117,110,108,101,115,115,0],"i8",ALLOC_STATIC);__str19879=allocate([104,97,115,95,118,97,108,117,101,63,0],"i8",ALLOC_STATIC);
__str198=allocate([117,110,116,105,108,0],"i8",ALLOC_STATIC);__str19780=allocate([109,101,115,115,97,103,101,0],"i8",ALLOC_STATIC);__str197=allocate([116,114,117,101,0],"i8",ALLOC_STATIC);__str19675=allocate([116,111,111,32,109,97,110,121,32,115,121,109,98,111,108,115,32,40,109,97,120,32,50,53,54,41,0],"i8",ALLOC_STATIC);__str196=allocate([114,101,115,99,117,101,0],"i8",ALLOC_STATIC);__str19553=allocate([124,83,38,0],"i8",ALLOC_STATIC);__str195=allocate([101,108,115,105,102,0],"i8",ALLOC_STATIC);
__str194=allocate([115,101,108,102,0],"i8",ALLOC_STATIC);__str193=allocate([102,97,108,115,101,0],"i8",ALLOC_STATIC);__str1927=allocate([109,97,105,110,0],"i8",ALLOC_STATIC);__str192=allocate([110,111,116,0],"i8",ALLOC_STATIC);__str19181=allocate([116,111,95,97,114,121,0],"i8",ALLOC_STATIC);__str191494=allocate([103,101,116,108,111,99,97,108,0],"i8",ALLOC_STATIC);__str191446=allocate([105,110,105,116,105,97,108,105,122,101,0],"i8",ALLOC_STATIC);__str191326=allocate([42,0],"i8",ALLOC_STATIC);
__str191272=allocate([118,97,108,32,116,111,111,32,98,105,103,0],"i8",ALLOC_STATIC);__str191236=allocate([108,97,115,116,0],"i8",ALLOC_STATIC);__str191127=allocate([35,60,37,115,58,48,120,37,108,120,62,0],"i8",ALLOC_STATIC);__str191061=allocate([61,61,0],"i8",ALLOC_STATIC);__str191025=allocate([108,111,103,50,0],"i8",ALLOC_STATIC);__str191=allocate([116,104,101,110,0],"i8",ALLOC_STATIC);__str190=allocate([101,110,100,0],"i8",ALLOC_STATIC);__str19=allocate([38,0],"i8",ALLOC_STATIC);
__str18944=allocate([105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,37,115,32,110,111,116,32,100,101,102,105,110,101,100,0],"i8",ALLOC_STATIC);__str189=allocate([101,110,115,117,114,101,0],"i8",ALLOC_STATIC);__str18878=allocate([104,97,115,95,107,101,121,63,0],"i8",ALLOC_STATIC);__str188=allocate([110,105,108,0],"i8",ALLOC_STATIC);__str18779=allocate([116,111,95,115,0],"i8",ALLOC_STATIC);__str1870=allocate([94,0],"i8",ALLOC_STATIC);__str187=allocate([101,108,115,101,0],"i8",ALLOC_STATIC);
__str18674=allocate([112,111,111,108,32,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,0],"i8",ALLOC_STATIC);__str1861=allocate([99,97,108,108,0],"i8",ALLOC_STATIC);__str186=allocate([98,114,101,97,107,0],"i8",ALLOC_STATIC);__str18552=allocate([105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,115,112,101,99,105,102,105,101,114,32,37,99,0],"i8",ALLOC_STATIC);__str185=allocate(1,"i8",ALLOC_STATIC);__str184=allocate([95,95,69,78,68,95,95,0],"i8",ALLOC_STATIC);
__str183=allocate([73,110,118,97,108,105,100,32,99,104,97,114,32,96,92,120,37,48,50,88,39,32,105,110,32,101,120,112,114,101,115,115,105,111,110,0],"i8",ALLOC_STATIC);__str182=allocate([96,64,64,37,99,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0],"i8",ALLOC_STATIC);__str1819=allocate([115,116,97,114,116,0],"i8",ALLOC_STATIC);__str18180=allocate([65,114,114,97,121,0],"i8",ALLOC_STATIC);
__str181493=allocate([103,101,116,103,109,0],"i8",ALLOC_STATIC);__str181445=allocate([109,101,109,98,101,114,115,0],"i8",ALLOC_STATIC);__str181325=allocate([108,101,110,103,116,104,0],"i8",ALLOC_STATIC);__str181271=allocate([107,101,121,37,46,42,115,32,110,111,116,32,102,111,117,110,100,0],"i8",ALLOC_STATIC);__str181235=allocate([105,110,105,116,105,97,108,105,122,101,0],"i8",ALLOC_STATIC);
__str181126=allocate([117,110,107,110,111,119,110,32,116,121,112,101,32,48,120,37,120,32,40,48,120,37,120,32,103,105,118,101,110,41,0],"i8",ALLOC_STATIC);__str181060=allocate([37,0],"i8",ALLOC_STATIC);__str181024=allocate([108,111,103,0],"i8",ALLOC_STATIC);__str181=allocate([96,64,37,99,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0],"i8",ALLOC_STATIC);
__str180=allocate([117,110,116,101,114,109,105,110,97,116,101,100,32,113,117,111,116,101,100,32,115,116,114,105,110,103,32,109,101,101,116,115,32,101,110,100,32,111,102,32,102,105,108,101,0],"i8",ALLOC_STATIC);__str18=allocate([65,114,103,117,109,101,110,116,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str17943=allocate([108,97,115,116,112,99,0],"i8",ALLOC_STATIC);__str179=allocate([117,110,107,110,111,119,110,32,116,121,112,101,32,111,102,32,37,115,116,114,105,110,103,0],"i8",ALLOC_STATIC);
__str17877=allocate([101,109,112,116,121,63,0],"i8",ALLOC_STATIC);__str178=allocate([102,108,111,97,116,32,37,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0],"i8",ALLOC_STATIC);__str17778=allocate([61,61,0],"i8",ALLOC_STATIC);__str177=allocate([99,111,114,114,117,112,116,101,100,32,102,108,111,97,116,32,118,97,108,117,101,32,37,115,0],"i8",ALLOC_STATIC);__str17673=allocate([117,110,107,110,111,119,110,32,108,104,115,32,37,100,10,0],"i8",ALLOC_STATIC);
__str1762=allocate([78,97,109,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str176=allocate([116,114,97,105,108,105,110,103,32,96,37,99,39,32,105,110,32,110,117,109,98,101,114,0],"i8",ALLOC_STATIC);__str17551=allocate([116,111,95,105,110,116,0],"i8",ALLOC_STATIC);__str175=allocate([48,0],"i8",ALLOC_STATIC);__str174=allocate([73,110,118,97,108,105,100,32,111,99,116,97,108,32,100,105,103,105,116,0],"i8",ALLOC_STATIC);
__str173=allocate([110,117,109,101,114,105,99,32,108,105,116,101,114,97,108,32,119,105,116,104,111,117,116,32,100,105,103,105,116,115,0],"i8",ALLOC_STATIC);__str172=allocate([110,111,32,46,60,100,105,103,105,116,62,32,102,108,111,97,116,105,110,103,32,108,105,116,101,114,97,108,32,97,110,121,109,111,114,101,59,32,112,117,116,32,48,32,98,101,102,111,114,101,32,100,111,116,0],"i8",ALLOC_STATIC);__str17179=allocate([110,101,103,97,116,105,118,101,32,97,114,114,97,121,32,115,105,122,101,0],"i8",ALLOC_STATIC);
__str171492=allocate([100,115,116,63,0],"i8",ALLOC_STATIC);__str171444=allocate([91,93,61,0],"i8",ALLOC_STATIC);__str171324=allocate([115,105,122,101,0],"i8",ALLOC_STATIC);__str171270=allocate([75,101,121,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str171234=allocate([105,110,99,108,117,100,101,63,0],"i8",ALLOC_STATIC);__str171125=allocate([119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,116,121,112,101,32,37,115,32,40,101,120,112,101,99,116,101,100,32,37,115,41,0],"i8",ALLOC_STATIC);
__str171059=allocate([42,0],"i8",ALLOC_STATIC);__str171023=allocate([101,120,112,0],"i8",ALLOC_STATIC);__str171=allocate([124,124,0],"i8",ALLOC_STATIC);__str170=allocate([96,38,39,32,105,110,116,101,114,112,114,101,116,101,100,32,97,115,32,97,114,103,117,109,101,110,116,32,112,114,101,102,105,120,0],"i8",ALLOC_STATIC);__str17=allocate([124,0],"i8",ALLOC_STATIC);__str16942=allocate(1,"i8",ALLOC_STATIC);__str169=allocate([38,38,0],"i8",ALLOC_STATIC);
__str16876=allocate([95,95,100,101,108,101,116,101,0],"i8",ALLOC_STATIC);__str168=allocate([105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,59,32,117,115,101,32,63,92,37,99,0],"i8",ALLOC_STATIC);__str16777=allocate([105,110,105,116,105,97,108,105,122,101,0],"i8",ALLOC_STATIC);__str167=allocate([105,110,99,111,109,112,108,101,116,101,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,0],"i8",ALLOC_STATIC);
__str1669=allocate([99,108,97,115,115,47,109,111,100,117,108,101,32,110,97,109,101,32,109,117,115,116,32,98,101,32,67,79,78,83,84,65,78,84,0],"i8",ALLOC_STATIC);__str16672=allocate([101,97,99,104,0],"i8",ALLOC_STATIC);__str166=allocate([10,61,101,110,100,10,0],"i8",ALLOC_STATIC);__str1657=allocate([109,114,98,95,114,101,97,108,108,111,99,0],"i8",ALLOC_STATIC);__str16550=allocate([73,110,116,101,103,101,114,0],"i8",ALLOC_STATIC);__str165=allocate([98,101,103,105,110,10,0],"i8",ALLOC_STATIC);
__str164=allocate([96,42,39,32,105,110,116,101,114,112,114,101,116,101,100,32,97,115,32,97,114,103,117,109,101,110,116,32,112,114,101,102,105,120,0],"i8",ALLOC_STATIC);__str163=allocate([83,99,114,105,112,116,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str162=allocate([42,0],"i8",ALLOC_STATIC);__str16178=allocate([124,105,0],"i8",ALLOC_STATIC);__str161491=allocate([100,97,121,0],"i8",ALLOC_STATIC);__str161443=allocate([91,93,0],"i8",ALLOC_STATIC);
__str161323=allocate([98,121,116,101,115,105,122,101,0],"i8",ALLOC_STATIC);__str161269=allocate([110,97,109,101,100,37,46,42,115,32,97,102,116,101,114,32,110,117,109,98,101,114,101,100,0],"i8",ALLOC_STATIC);__str161233=allocate([102,105,114,115,116,0],"i8",ALLOC_STATIC);__str161124=allocate([83,121,109,98,111,108,0],"i8",ALLOC_STATIC);__str161058=allocate([45,0],"i8",ALLOC_STATIC);__str161022=allocate([97,116,97,110,104,0],"i8",ALLOC_STATIC);
__str161=allocate([83,121,110,116,97,120,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str160=allocate([108,105,110,101,32,37,100,58,32,37,115,10,0],"i8",ALLOC_STATIC);__str16=allocate([115,116,97,99,107,32,108,101,118,101,108,32,116,111,111,32,100,101,101,112,46,32,40,108,105,109,105,116,61,37,100,41,0],"i8",ALLOC_STATIC);__str15941=allocate([82,117,110,116,105,109,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);
__str159=allocate([110,111,100,101,32,116,121,112,101,58,32,37,100,32,40,48,120,37,120,41,10,0],"i8",ALLOC_STATIC);__str1589=allocate([109,97,120,32,115,121,115,116,101,109,32,98,121,116,101,115,32,61,32,37,49,48,108,117,10,0],"i8",ALLOC_STATIC);__str15875=allocate([100,101,102,97,117,108,116,95,112,114,111,99,61,0],"i8",ALLOC_STATIC);__str158=allocate([78,79,68,69,95,80,79,83,84,69,88,69,58,10,0],"i8",ALLOC_STATIC);__str1579=allocate([83,99,114,105,112,116,69,114,114,111,114,0],"i8",ALLOC_STATIC);
__str15776=allocate([69,120,99,101,112,116,105,111,110,0],"i8",ALLOC_STATIC);__str157=allocate([78,79,68,69,95,83,68,69,70,58,10,0],"i8",ALLOC_STATIC);__str1568=allocate([100,121,110,97,109,105,99,32,99,111,110,115,116,97,110,116,32,97,115,115,105,103,110,109,101,110,116,0],"i8",ALLOC_STATIC);__str15671=allocate([117,110,101,120,112,101,99,116,101,100,32,98,114,101,97,107,0],"i8",ALLOC_STATIC);__str1565=allocate([84,121,112,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);
__str1562=allocate([69,110,117,109,101,114,97,98,108,101,0],"i8",ALLOC_STATIC);__str156=allocate([37,115,10,0],"i8",ALLOC_STATIC);__str1559=allocate([67,111,109,112,97,114,97,98,108,101,0],"i8",ALLOC_STATIC);__str15549=allocate([102,108,111,97,116,32,116,111,111,32,98,105,103,32,102,111,114,32,105,110,116,0],"i8",ALLOC_STATIC);__str155=allocate([78,79,68,69,95,68,69,70,58,10,0],"i8",ALLOC_STATIC);__str15476=allocate([78,79,68,69,95,83,67,76,65,83,83,58,10,0],"i8",ALLOC_STATIC);
__str154=allocate([83,116,97,99,107,32,115,105,122,101,32,105,110,99,114,101,97,115,101,100,32,116,111,32,37,108,117,10,0],"i8",ALLOC_STATIC);__str1535=allocate([95,95,111,117,116,101,114,95,95,0],"i8",ALLOC_STATIC);__str153=allocate([78,79,68,69,95,77,79,68,85,76,69,58,10,0],"i8",ALLOC_STATIC);__str152=allocate([115,117,112,101,114,58,10,0],"i8",ALLOC_STATIC);
__str15177=allocate([101,120,112,101,99,116,101,100,32,70,105,120,110,117,109,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,0],"i8",ALLOC_STATIC);__str151490=allocate([99,116,105,109,101,0],"i8",ALLOC_STATIC);__str151442=allocate([61,61,0],"i8",ALLOC_STATIC);__str151322=allocate([43,0],"i8",ALLOC_STATIC);__str151268=allocate([110,97,109,101,100,37,46,42,115,32,97,102,116,101,114,32,117,110,110,117,109,98,101,114,101,100,40,37,100,41,0],"i8",ALLOC_STATIC);
__str151232=allocate([101,120,99,108,117,100,101,95,101,110,100,63,0],"i8",ALLOC_STATIC);__str151123=allocate([70,105,120,110,117,109,0],"i8",ALLOC_STATIC);__str151057=allocate([43,0],"i8",ALLOC_STATIC);__str151021=allocate([97,99,111,115,104,0],"i8",ALLOC_STATIC);__str151=allocate([58,37,115,10,0],"i8",ALLOC_STATIC);__str150=allocate([78,79,68,69,95,67,76,65,83,83,58,10,0],"i8",ALLOC_STATIC);
__str15=allocate([119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,100,32,102,111,114,32,37,100,41,0],"i8",ALLOC_STATIC);__str14940=allocate([124,111,111,0],"i8",ALLOC_STATIC);__str149=allocate([78,79,68,69,95,85,78,68,69,70,32,37,115,58,10,0],"i8",ALLOC_STATIC);__str14874=allocate([100,101,102,97,117,108,116,95,112,114,111,99,0],"i8",ALLOC_STATIC);__str148=allocate([78,79,68,69,95,65,76,73,65,83,32,37,115,32,37,115,58,10,0],"i8",ALLOC_STATIC);
__str14775=allocate([101,120,99,101,112,116,105,111,110,32,111,98,106,101,99,116,32,101,120,112,101,99,116,101,100,0],"i8",ALLOC_STATIC);__str1475=allocate([84,105,109,101,0],"i8",ALLOC_STATIC);__str147=allocate([78,79,68,69,95,70,65,76,83,69,10,0],"i8",ALLOC_STATIC);__str14670=allocate([109,97,108,102,111,114,109,101,100,32,114,101,97,100,105,110,116,32,105,110,112,117,116,0],"i8",ALLOC_STATIC);__str1467=allocate([33,0],"i8",ALLOC_STATIC);
__str146=allocate([78,79,68,69,95,84,82,85,69,10,0],"i8",ALLOC_STATIC);__str14548=allocate([82,97,110,103,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str145=allocate([78,79,68,69,95,78,73,76,10,0],"i8",ALLOC_STATIC);__str144=allocate([78,79,68,69,95,83,69,76,70,10,0],"i8",ALLOC_STATIC);__str143=allocate([78,79,68,69,95,83,89,77,32,58,37,115,10,0],"i8",ALLOC_STATIC);__str1427=allocate([95,95,109,101,109,98,101,114,115,95,95,0],"i8",ALLOC_STATIC);
__str142=allocate([78,79,68,69,95,68,83,84,82,10,0],"i8",ALLOC_STATIC);__str14176=allocate([119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0],"i8",ALLOC_STATIC);__str141593=allocate([98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0],"i8",ALLOC_STATIC);__str141489=allocate([97,115,99,116,105,109,101,0],"i8",ALLOC_STATIC);__str141441=allocate([110,101,119,0],"i8",ALLOC_STATIC);
__str141321=allocate([67,111,109,112,97,114,97,98,108,101,0],"i8",ALLOC_STATIC);__str141267=allocate([110,97,109,101,37,46,42,115,32,97,102,116,101,114,32,60,37,115,62,0],"i8",ALLOC_STATIC);__str141231=allocate([101,97,99,104,0],"i8",ALLOC_STATIC);__str141122=allocate([110,105,108,0],"i8",ALLOC_STATIC);__str141056=allocate([110,101,119,0],"i8",ALLOC_STATIC);__str141020=allocate([97,115,105,110,104,0],"i8",ALLOC_STATIC);
__str141=allocate([78,79,68,69,95,83,84,82,32,34,37,115,34,32,108,101,110,32,37,100,10,0],"i8",ALLOC_STATIC);__str140=allocate([78,79,68,69,95,78,69,71,65,84,69,10,0],"i8",ALLOC_STATIC);__str14=allocate([39,37,115,39,58,32,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,100,32,102,111,114,32,37,100,41,0],"i8",ALLOC_STATIC);__str13939=allocate([110,111,0],"i8",ALLOC_STATIC);
__str139=allocate([78,79,68,69,95,70,76,79,65,84,32,37,115,10,0],"i8",ALLOC_STATIC);__str13873=allocate([100,101,102,97,117,108,116,61,0],"i8",ALLOC_STATIC);__str138=allocate([78,79,68,69,95,73,78,84,32,37,115,32,98,97,115,101,32,37,100,10,0],"i8",ALLOC_STATIC);__str13774=allocate([119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,100,32,102,111,114,32,48,46,46,51,41,0],"i8",ALLOC_STATIC);
__str137=allocate([78,79,68,69,95,66,76,79,67,75,95,65,82,71,58,10,0],"i8",ALLOC_STATIC);__str13669=allocate([117,110,100,101,102,95,109,101,116,104,111,100,0],"i8",ALLOC_STATIC);__str1366=allocate([99,111,110,115,116,97,110,116,32,114,101,45,97,115,115,105,103,110,109,101,110,116,0],"i8",ALLOC_STATIC);__str136=allocate([78,79,68,69,95,65,82,71,32,37,115,10,0],"i8",ALLOC_STATIC);__str13547=allocate([116,111,95,102,0],"i8",ALLOC_STATIC);
__str135=allocate([78,79,68,69,95,78,84,72,95,82,69,70,58,32,36,37,100,10,0],"i8",ALLOC_STATIC);__str13475=allocate([78,79,68,69,95,66,65,67,75,95,82,69,70,58,32,36,37,99,10,0],"i8",ALLOC_STATIC);__str134=allocate([84,111,111,32,108,111,110,103,32,97,114,103,117,109,101,110,116,115,46,32,40,108,105,109,105,116,61,37,100,41,0],"i8",ALLOC_STATIC);__str133=allocate([78,79,68,69,95,67,79,78,83,84,32,37,115,10,0],"i8",ALLOC_STATIC);__str132=allocate([78,79,68,69,95,67,86,65,82,32,37,115,10,0],"i8",ALLOC_STATIC);
__str13175=allocate([101,120,112,101,99,116,101,100,32,70,105,120,110,117,109,0],"i8",ALLOC_STATIC);__str131488=allocate([105,110,115,112,101,99,116,0],"i8",ALLOC_STATIC);__str131440=allocate([83,116,114,117,99,116,0],"i8",ALLOC_STATIC);__str131320=allocate([92,37,48,51,111,0],"i8",ALLOC_STATIC);__str131266=allocate([119,105,100,116,104,32,97,102,116,101,114,32,112,114,101,99,105,115,105,111,110,0],"i8",ALLOC_STATIC);__str131230=allocate([61,61,61,0],"i8",ALLOC_STATIC);
__str131121=allocate([37,115,32,99,97,110,110,111,116,32,98,101,32,99,111,110,118,101,114,116,101,100,32,116,111,32,37,115,32,98,121,32,35,37,115,0],"i8",ALLOC_STATIC);__str131055=allocate([70,105,120,110,117,109,0],"i8",ALLOC_STATIC);__str131019=allocate([116,97,110,104,0],"i8",ALLOC_STATIC);__str131=allocate([78,79,68,69,95,73,86,65,82,32,37,115,10,0],"i8",ALLOC_STATIC);__str1307=allocate([65,114,103,117,109,101,110,116,69,114,114,111,114,0],"i8",ALLOC_STATIC);
__str130=allocate([78,79,68,69,95,71,86,65,82,32,37,115,10,0],"i8",ALLOC_STATIC);__str13=allocate([117,110,101,120,112,101,99,116,101,100,32,37,115,0],"i8",ALLOC_STATIC);__str12938=allocate([110,0],"i8",ALLOC_STATIC);__str129=allocate([78,79,68,69,95,76,86,65,82,32,37,115,10,0],"i8",ALLOC_STATIC);__str12872=allocate([100,101,102,97,117,108,116,0],"i8",ALLOC_STATIC);__str128=allocate([78,79,68,69,95,82,69,84,82,89,10,0],"i8",ALLOC_STATIC);
__str12773=allocate([65,114,103,117,109,101,110,116,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str127=allocate([78,79,68,69,95,82,69,68,79,10,0],"i8",ALLOC_STATIC);__str12668=allocate([97,108,105,97,115,95,109,101,116,104,111,100,0],"i8",ALLOC_STATIC);__str1265=allocate([91,93,0],"i8",ALLOC_STATIC);__str126=allocate([78,79,68,69,95,78,69,88,84,58,10,0],"i8",ALLOC_STATIC);__str12546=allocate([70,108,111,97,116,0],"i8",ALLOC_STATIC);__str1253=allocate([42,0],"i8",ALLOC_STATIC);
__str125=allocate([78,79,68,69,95,66,82,69,65,75,58,10,0],"i8",ALLOC_STATIC);__str1245=allocate([76,111,99,97,108,74,117,109,112,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str124=allocate([78,79,68,69,95,89,73,69,76,68,58,10,0],"i8",ALLOC_STATIC);__str123=allocate([78,79,68,69,95,82,69,84,85,82,78,58,10,0],"i8",ALLOC_STATIC);__str122=allocate([78,79,68,69,95,90,83,85,80,69,82,10,0],"i8",ALLOC_STATIC);__str12174=allocate([84,121,112,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);
__str1217=allocate([82,97,110,103,101,0],"i8",ALLOC_STATIC);__str121487=allocate([116,111,95,115,0],"i8",ALLOC_STATIC);__str121439=allocate([111,111,0],"i8",ALLOC_STATIC);__str121319=allocate([34,0],"i8",ALLOC_STATIC);__str121265=allocate([119,105,100,116,104,32,103,105,118,101,110,32,116,119,105,99,101,0],"i8",ALLOC_STATIC);__str121229=allocate([61,61,0],"i8",ALLOC_STATIC);__str121120=allocate([84,121,112,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);
__str121054=allocate([73,110,116,101,103,101,114,0],"i8",ALLOC_STATIC);__str121018=allocate([99,111,115,104,0],"i8",ALLOC_STATIC);__str121=allocate([78,79,68,69,95,83,85,80,69,82,58,10,0],"i8",ALLOC_STATIC);__str120=allocate([111,112,61,39,37,115,39,32,40,37,100,41,10,0],"i8",ALLOC_STATIC);__str12=allocate([111,0],"i8",ALLOC_STATIC);__str11974=allocate([78,79,68,69,95,79,80,95,65,83,71,78,58,10,0],"i8",ALLOC_STATIC);__str1195=allocate([80,114,111,99,0],"i8",ALLOC_STATIC);
__str11937=allocate([105,110,115,116,97,110,99,101,95,101,118,97,108,32,119,105,116,104,32,115,116,114,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0],"i8",ALLOC_STATIC);__str119=allocate([99,97,110,110,111,116,32,115,101,116,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,0],"i8",ALLOC_STATIC);__str11871=allocate([99,108,101,97,114,0],"i8",ALLOC_STATIC);__str118=allocate([40,101,109,112,116,121,41,10,0],"i8",ALLOC_STATIC);
__str11772=allocate([101,120,99,101,112,116,105,111,110,32,99,108,97,115,115,47,111,98,106,101,99,116,32,101,120,112,101,99,116,101,100,0],"i8",ALLOC_STATIC);__str117=allocate([109,108,104,115,58,10,0],"i8",ALLOC_STATIC);__str11667=allocate([105,110,116,101,114,110,0],"i8",ALLOC_STATIC);__str1164=allocate([69,78,68,32,110,111,116,32,115,117,112,111,114,116,101,100,0],"i8",ALLOC_STATIC);__str1163=allocate([97,0],"i8",ALLOC_STATIC);__str116=allocate([78,79,68,69,95,77,65,83,71,78,58,10,0],"i8",ALLOC_STATIC);
__str11590=allocate([115,121,115,116,101,109,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0],"i8",ALLOC_STATIC);__str11580=allocate([82,73,84,69,0],"i8",ALLOC_STATIC);__str11566=allocate([42,0],"i8",ALLOC_STATIC);__str11545=allocate([83,116,114,105,110,103,32,99,97,110,39,116,32,98,101,32,99,111,101,114,99,101,100,32,105,110,116,111,32,70,108,111,97,116,0],"i8",ALLOC_STATIC);__str115=allocate([114,104,115,58,10,0],"i8",ALLOC_STATIC);
__str11476=allocate([67,111,109,112,97,114,97,98,108,101,0],"i8",ALLOC_STATIC);__str1144=allocate([82,117,110,116,105,109,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str11428=allocate([84,121,112,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str114=allocate([108,104,115,58,10,0],"i8",ALLOC_STATIC);__str11308=allocate([78,85,76,76,32,112,111,105,110,116,101,114,32,103,105,118,101,110,0],"i8",ALLOC_STATIC);__str113=allocate([78,79,68,69,95,65,83,71,78,58,10,0],"i8",ALLOC_STATIC);
__str11254=allocate([65,114,103,117,109,101,110,116,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str11218=allocate([111,111,111,0],"i8",ALLOC_STATIC);__str112=allocate([78,79,68,69,95,83,80,76,65,84,58,10,0],"i8",ALLOC_STATIC);__str11196=allocate([105,110,105,116,105,97,108,105,122,101,0],"i8",ALLOC_STATIC);__str11173=allocate([105,42,0],"i8",ALLOC_STATIC);__str111486=allocate([45,0],"i8",ALLOC_STATIC);
__str111438=allocate([111,102,102,115,101,116,32,37,108,100,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,115,116,114,117,99,116,40,115,105,122,101,58,37,108,100,41,0],"i8",ALLOC_STATIC);__str111318=allocate([110,101,103,97,116,105,118,101,32,115,116,114,105,110,103,32,115,105,122,101,32,40,111,114,32,115,105,122,101,32,116,111,111,32,98,105,103,41,0],"i8",ALLOC_STATIC);__str111264=allocate([105,110,118,97,108,105,100,32,105,110,100,101,120,32,45,32,37,100,36,0],"i8",ALLOC_STATIC);
__str111228=allocate([101,110,100,0],"i8",ALLOC_STATIC);__str111119=allocate([73,110,116,101,103,101,114,0],"i8",ALLOC_STATIC);__str11109=allocate([78,105,108,67,108,97,115,115,0],"i8",ALLOC_STATIC);__str111053=allocate([60,61,62,0],"i8",ALLOC_STATIC);__str111017=allocate([115,105,110,104,0],"i8",ALLOC_STATIC);__str111=allocate([118,97,108,117,101,58,10,0],"i8",ALLOC_STATIC);__str1108=allocate([61,61,0],"i8",ALLOC_STATIC);__str11073=allocate([107,101,121,58,10,0],"i8",ALLOC_STATIC);
__str11043=allocate([105,110,118,97,108,105,100,32,114,97,100,105,120,32,37,100,0],"i8",ALLOC_STATIC);__str11007=allocate([80,73,0],"i8",ALLOC_STATIC);__str110=allocate([61,61,61,0],"i8",ALLOC_STATIC);__str11=allocate([61,0],"i8",ALLOC_STATIC);__str10936=allocate([78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str109=allocate([78,79,68,69,95,72,65,83,72,58,10,0],"i8",ALLOC_STATIC);__str10870=allocate([91,93,61,0],"i8",ALLOC_STATIC);
__str10828=allocate([97,114,101,110,97,32,111,118,101,114,102,108,111,119,32,101,114,114,111,114,0],"i8",ALLOC_STATIC);__str108=allocate([78,79,68,69,95,65,82,82,65,89,58,10,0],"i8",ALLOC_STATIC);__str10771=allocate([84,121,112,101,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str107=allocate([78,79,68,69,95,67,79,76,79,78,51,58,10,0],"i8",ALLOC_STATIC);__str10666=allocate([45,0],"i8",ALLOC_STATIC);
__str1063=allocate([101,108,115,101,32,119,105,116,104,111,117,116,32,114,101,115,99,117,101,32,105,115,32,117,115,101,108,101,115,115,0],"i8",ALLOC_STATIC);__str106=allocate([58,58,37,115,10,0],"i8",ALLOC_STATIC);__str10544=allocate([83,116,114,105,110,103,32,99,111,110,116,97,105,110,115,32,78,85,76,0],"i8",ALLOC_STATIC);__str105=allocate([78,79,68,69,95,67,79,76,79,78,50,58,10,0],"i8",ALLOC_STATIC);__str1043=allocate([79,80,95,68,69,66,85,71,32,37,100,32,37,100,32,37,100,10,0],"i8",ALLOC_STATIC);
__str1042=allocate([65,114,103,117,109,101,110,116,69,114,114,111,114,0],"i8",ALLOC_STATIC);__str104=allocate([78,79,68,69,95,68,79,84,51,58,10,0],"i8",ALLOC_STATIC);__str103=allocate([78,79,68,69,95,68,79,84,50,58,10,0],"i8",ALLOC_STATIC);__str102=allocate([98,108,111,99,107,58,10,0],"i8",ALLOC_STATIC);__str10172=allocate([105,110,100,101,120,32,105,115,32,111,117,116,32,111,102,32,97,114,114,97,121,0],"i8",ALLOC_STATIC);__str101485=allocate([43,0],"i8",ALLOC_STATIC);
__str101437=allocate([111,102,102,115,101,116,32,37,108,100,32,116,111,111,32,115,109,97,108,108,32,102,111,114,32,115,116,114,117,99,116,40,115,105,122,101,58,37,108,100,41,0],"i8",ALLOC_STATIC);__str101317=allocate([37,48,51,111,0],"i8",ALLOC_STATIC);__str101263=allocate([110,117,109,98,101,114,101,100,40,37,100,41,32,97,102,116,101,114,32,110,97,109,101,100,0],"i8",ALLOC_STATIC);__str101227=allocate([98,101,103,105,110,0],"i8",ALLOC_STATIC);
__str101205=allocate([110,111,116,32,97,32,112,114,111,99,0],"i8",ALLOC_STATIC);__str101118=allocate([70,97,108,115,101,67,108,97,115,115,0],"i8",ALLOC_STATIC);__str101052=allocate([97,98,115,0],"i8",ALLOC_STATIC);__str101016=allocate([97,116,97,110,50,0],"i8",ALLOC_STATIC);__str101=allocate([97,114,103,115,58,10,0],"i8",ALLOC_STATIC);__str1006=allocate([77,97,116,104,0],"i8",ALLOC_STATIC);__str100=allocate([109,101,116,104,111,100,61,39,37,115,39,32,40,37,100,41,10,0],"i8",ALLOC_STATIC);
__str10=allocate([44,32,0],"i8",ALLOC_STATIC);__str1=allocate([105,110,115,112,101,99,116,0],"i8",ALLOC_STATIC);__str=allocate([32,61,62,32,0],"i8",ALLOC_STATIC);___m986=allocate([1,2,4,8,16,32,64,128],"i8",ALLOC_STATIC);___m859=allocate([1,2,4,8,16,32,64,128],"i8",ALLOC_STATIC);___m240=allocate([1,2,4,8,16,32,64,128],"i8",ALLOC_STATIC);___m17=allocate([1,2,4,8,16,32,64,128],"i8",ALLOC_STATIC);___m=allocate([1,2,4,8,16,32,64,128],"i8",ALLOC_STATIC);
___func___flo_to_s=allocate([102,108,111,95,116,111,95,115,0],"i8",ALLOC_STATIC);__ZTVSt9bad_alloc=allocate(20,"i8",ALLOC_STATIC);allocate(1,"i8",ALLOC_STATIC);__ZTVSt20bad_array_new_length=allocate(20,"i8",ALLOC_STATIC);allocate(1,"i8",ALLOC_STATIC);__ZTSSt9bad_alloc=allocate([83,116,57,98,97,100,95,97,108,108,111,99,0],"i8",ALLOC_STATIC);__ZTSSt20bad_array_new_length=allocate([83,116,50,48,98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0],"i8",ALLOC_STATIC);
__ZTISt9bad_alloc=allocate(12,"i8",ALLOC_STATIC);__ZTISt20bad_array_new_length=allocate(12,"i8",ALLOC_STATIC);__ZSt7nothrow=allocate(1,"i8",ALLOC_STATIC);__ZL7mparams=allocate(24,"i8",ALLOC_STATIC);__ZL4_gm_=allocate(468,"i8",ALLOC_STATIC);__ZL13__new_handler=allocate(4,"i8",ALLOC_STATIC);HEAP32[_yytname>>2]=__str236|0;HEAP32[_yytname+4>>2]=__str237|0;HEAP32[_yytname+8>>2]=__str238|0;HEAP32[_yytname+12>>2]=__str239|0;HEAP32[_yytname+16>>2]=__str240|0;HEAP32[_yytname+20>>2]=__str241|0;
HEAP32[_yytname+24>>2]=__str242|0;HEAP32[_yytname+28>>2]=__str243|0;HEAP32[_yytname+32>>2]=__str244|0;HEAP32[_yytname+36>>2]=__str245|0;HEAP32[_yytname+40>>2]=__str246|0;HEAP32[_yytname+44>>2]=__str247|0;HEAP32[_yytname+48>>2]=__str248|0;HEAP32[_yytname+52>>2]=__str249|0;HEAP32[_yytname+56>>2]=__str250|0;HEAP32[_yytname+60>>2]=__str251|0;HEAP32[_yytname+64>>2]=__str252|0;HEAP32[_yytname+68>>2]=__str253|0;HEAP32[_yytname+72>>2]=__str254|0;HEAP32[_yytname+76>>2]=__str25580|0;
HEAP32[_yytname+80>>2]=__str256|0;HEAP32[_yytname+84>>2]=__str257|0;HEAP32[_yytname+88>>2]=__str258|0;HEAP32[_yytname+92>>2]=__str259|0;HEAP32[_yytname+96>>2]=__str260|0;HEAP32[_yytname+100>>2]=__str261|0;HEAP32[_yytname+104>>2]=__str262|0;HEAP32[_yytname+108>>2]=__str263|0;HEAP32[_yytname+112>>2]=__str264|0;HEAP32[_yytname+116>>2]=__str265|0;HEAP32[_yytname+120>>2]=__str266|0;HEAP32[_yytname+124>>2]=__str267|0;HEAP32[_yytname+128>>2]=__str268|0;HEAP32[_yytname+132>>2]=__str269|0;
HEAP32[_yytname+136>>2]=__str270|0;HEAP32[_yytname+140>>2]=__str271|0;HEAP32[_yytname+144>>2]=__str272|0;HEAP32[_yytname+148>>2]=__str273|0;HEAP32[_yytname+152>>2]=__str274|0;HEAP32[_yytname+156>>2]=__str275|0;HEAP32[_yytname+160>>2]=__str276|0;HEAP32[_yytname+164>>2]=__str277|0;HEAP32[_yytname+168>>2]=__str278|0;HEAP32[_yytname+172>>2]=__str279|0;HEAP32[_yytname+176>>2]=__str280|0;HEAP32[_yytname+180>>2]=__str281|0;HEAP32[_yytname+184>>2]=__str282|0;HEAP32[_yytname+188>>2]=__str283|0;
HEAP32[_yytname+192>>2]=__str284|0;HEAP32[_yytname+196>>2]=__str285|0;HEAP32[_yytname+200>>2]=__str286|0;HEAP32[_yytname+204>>2]=__str287|0;HEAP32[_yytname+208>>2]=__str288|0;HEAP32[_yytname+212>>2]=__str289|0;HEAP32[_yytname+216>>2]=__str290|0;HEAP32[_yytname+220>>2]=__str291|0;HEAP32[_yytname+224>>2]=__str292|0;HEAP32[_yytname+228>>2]=__str293|0;HEAP32[_yytname+232>>2]=__str294|0;HEAP32[_yytname+236>>2]=__str295|0;HEAP32[_yytname+240>>2]=__str296|0;HEAP32[_yytname+244>>2]=__str297|0;
HEAP32[_yytname+248>>2]=__str298|0;HEAP32[_yytname+252>>2]=__str299|0;HEAP32[_yytname+256>>2]=__str300|0;HEAP32[_yytname+260>>2]=__str301|0;HEAP32[_yytname+264>>2]=__str302|0;HEAP32[_yytname+268>>2]=__str303|0;HEAP32[_yytname+272>>2]=__str304|0;HEAP32[_yytname+276>>2]=__str305|0;HEAP32[_yytname+280>>2]=__str306|0;HEAP32[_yytname+284>>2]=__str307|0;HEAP32[_yytname+288>>2]=__str308|0;HEAP32[_yytname+292>>2]=__str309|0;HEAP32[_yytname+296>>2]=__str310|0;HEAP32[_yytname+300>>2]=__str311|0;
HEAP32[_yytname+304>>2]=__str31281|0;HEAP32[_yytname+308>>2]=__str313|0;HEAP32[_yytname+312>>2]=__str314|0;HEAP32[_yytname+316>>2]=__str315|0;HEAP32[_yytname+320>>2]=__str316|0;HEAP32[_yytname+324>>2]=__str317|0;HEAP32[_yytname+328>>2]=__str318|0;HEAP32[_yytname+332>>2]=__str319|0;HEAP32[_yytname+336>>2]=__str320|0;HEAP32[_yytname+340>>2]=__str32182|0;HEAP32[_yytname+344>>2]=__str322|0;HEAP32[_yytname+348>>2]=__str323|0;HEAP32[_yytname+352>>2]=__str324|0;HEAP32[_yytname+356>>2]=__str325|0;
HEAP32[_yytname+360>>2]=__str326|0;HEAP32[_yytname+364>>2]=__str327|0;HEAP32[_yytname+368>>2]=__str328|0;HEAP32[_yytname+372>>2]=__str329|0;HEAP32[_yytname+376>>2]=__str330|0;HEAP32[_yytname+380>>2]=__str331|0;HEAP32[_yytname+384>>2]=__str332|0;HEAP32[_yytname+388>>2]=__str333|0;HEAP32[_yytname+392>>2]=__str334|0;HEAP32[_yytname+396>>2]=__str335|0;HEAP32[_yytname+400>>2]=__str33683|0;HEAP32[_yytname+404>>2]=__str337|0;HEAP32[_yytname+408>>2]=__str338|0;HEAP32[_yytname+412>>2]=__str339|0;
HEAP32[_yytname+416>>2]=__str340|0;HEAP32[_yytname+420>>2]=__str341|0;HEAP32[_yytname+424>>2]=__str342|0;HEAP32[_yytname+428>>2]=__str343|0;HEAP32[_yytname+432>>2]=__str344|0;HEAP32[_yytname+436>>2]=__str345|0;HEAP32[_yytname+440>>2]=__str346|0;HEAP32[_yytname+444>>2]=__str347|0;HEAP32[_yytname+448>>2]=__str348|0;HEAP32[_yytname+452>>2]=__str349|0;HEAP32[_yytname+456>>2]=__str350|0;HEAP32[_yytname+460>>2]=__str351|0;HEAP32[_yytname+464>>2]=__str352|0;HEAP32[_yytname+468>>2]=__str353|0;
HEAP32[_yytname+472>>2]=__str354|0;HEAP32[_yytname+476>>2]=__str355|0;HEAP32[_yytname+480>>2]=__str35684|0;HEAP32[_yytname+484>>2]=__str357|0;HEAP32[_yytname+488>>2]=__str358|0;HEAP32[_yytname+492>>2]=__str359|0;HEAP32[_yytname+496>>2]=__str360|0;HEAP32[_yytname+500>>2]=__str361|0;HEAP32[_yytname+504>>2]=__str362|0;HEAP32[_yytname+508>>2]=__str363|0;HEAP32[_yytname+512>>2]=__str364|0;HEAP32[_yytname+516>>2]=__str365|0;HEAP32[_yytname+520>>2]=__str366|0;HEAP32[_yytname+524>>2]=__str367|0;
HEAP32[_yytname+528>>2]=__str368|0;HEAP32[_yytname+532>>2]=__str369|0;HEAP32[_yytname+536>>2]=__str370|0;HEAP32[_yytname+540>>2]=__str371|0;HEAP32[_yytname+544>>2]=__str372|0;HEAP32[_yytname+548>>2]=__str373|0;HEAP32[_yytname+552>>2]=__str374|0;HEAP32[_yytname+556>>2]=__str375|0;HEAP32[_yytname+560>>2]=__str376|0;HEAP32[_yytname+564>>2]=__str377|0;HEAP32[_yytname+568>>2]=__str378|0;HEAP32[_yytname+572>>2]=__str379|0;HEAP32[_yytname+576>>2]=__str380|0;HEAP32[_yytname+580>>2]=__str381|0;
HEAP32[_yytname+584>>2]=__str382|0;HEAP32[_yytname+588>>2]=__str383|0;HEAP32[_yytname+592>>2]=__str384|0;HEAP32[_yytname+596>>2]=__str385|0;HEAP32[_yytname+600>>2]=__str386|0;HEAP32[_yytname+604>>2]=__str387|0;HEAP32[_yytname+608>>2]=__str388|0;HEAP32[_yytname+612>>2]=__str389|0;HEAP32[_yytname+616>>2]=__str390|0;HEAP32[_yytname+620>>2]=__str391|0;HEAP32[_yytname+624>>2]=__str392|0;HEAP32[_yytname+628>>2]=__str393|0;HEAP32[_yytname+632>>2]=__str394|0;HEAP32[_yytname+636>>2]=__str395|0;
HEAP32[_yytname+640>>2]=__str396|0;HEAP32[_yytname+644>>2]=__str397|0;HEAP32[_yytname+648>>2]=__str398|0;HEAP32[_yytname+652>>2]=__str399|0;HEAP32[_yytname+656>>2]=__str400|0;HEAP32[_yytname+660>>2]=__str401|0;HEAP32[_yytname+664>>2]=__str402|0;HEAP32[_yytname+668>>2]=__str403|0;HEAP32[_yytname+672>>2]=__str404|0;HEAP32[_yytname+676>>2]=__str405|0;HEAP32[_yytname+680>>2]=__str406|0;HEAP32[_yytname+684>>2]=__str407|0;HEAP32[_yytname+688>>2]=__str408|0;HEAP32[_yytname+692>>2]=__str409|0;
HEAP32[_yytname+696>>2]=__str410|0;HEAP32[_yytname+700>>2]=__str411|0;HEAP32[_yytname+704>>2]=__str412|0;HEAP32[_yytname+708>>2]=__str41385|0;HEAP32[_yytname+712>>2]=__str414|0;HEAP32[_yytname+716>>2]=__str415|0;HEAP32[_yytname+720>>2]=__str416|0;HEAP32[_yytname+724>>2]=__str417|0;HEAP32[_yytname+728>>2]=__str418|0;HEAP32[_yytname+732>>2]=__str419|0;HEAP32[_yytname+736>>2]=__str420|0;HEAP32[_yytname+740>>2]=__str421|0;HEAP32[_yytname+744>>2]=__str42286|0;HEAP32[_yytname+748>>2]=__str423|0;
HEAP32[_yytname+752>>2]=__str424|0;HEAP32[_yytname+756>>2]=__str425|0;HEAP32[_yytname+760>>2]=__str426|0;HEAP32[_yytname+764>>2]=__str427|0;HEAP32[_yytname+768>>2]=__str428|0;HEAP32[_yytname+772>>2]=__str429|0;HEAP32[_yytname+776>>2]=__str430|0;HEAP32[_yytname+780>>2]=__str431|0;HEAP32[_yytname+784>>2]=__str432|0;HEAP32[_yytname+788>>2]=__str433|0;HEAP32[_yytname+792>>2]=__str434|0;HEAP32[_yytname+796>>2]=__str435|0;HEAP32[_yytname+800>>2]=__str436|0;HEAP32[_yytname+804>>2]=__str43787|0;
HEAP32[_yytname+808>>2]=__str438|0;HEAP32[_yytname+812>>2]=__str439|0;HEAP32[_yytname+816>>2]=__str440|0;HEAP32[_yytname+820>>2]=__str441|0;HEAP32[_yytname+824>>2]=__str442|0;HEAP32[_yytname+828>>2]=__str443|0;HEAP32[_yytname+832>>2]=__str444|0;HEAP32[_yytname+836>>2]=__str445|0;HEAP32[_yytname+840>>2]=__str446|0;HEAP32[_yytname+844>>2]=__str447|0;HEAP32[_yytname+848>>2]=__str448|0;HEAP32[_yytname+852>>2]=__str191|0;HEAP32[_yytname+856>>2]=__str203|0;HEAP32[_yytname+860>>2]=__str449|0;
HEAP32[_yytname+864>>2]=__str450|0;HEAP32[_yytname+868>>2]=__str451|0;HEAP32[_yytname+872>>2]=__str452|0;HEAP32[_yytname+876>>2]=__str453|0;HEAP32[_yytname+880>>2]=__str454|0;HEAP32[_yytname+884>>2]=__str455|0;HEAP32[_yytname+888>>2]=__str456|0;HEAP32[_yytname+892>>2]=__str45788|0;HEAP32[_yytname+896>>2]=__str458|0;HEAP32[_yytname+900>>2]=__str459|0;HEAP32[_yytname+904>>2]=__str460|0;HEAP32[_yytname+908>>2]=__str461|0;HEAP32[_yytname+912>>2]=__str462|0;HEAP32[_yytname+916>>2]=__str463|0;
HEAP32[_yytname+920>>2]=__str464|0;HEAP32[_yytname+924>>2]=__str465|0;HEAP32[_yytname+928>>2]=__str466|0;HEAP32[_yytname+932>>2]=__str467|0;HEAP32[_yytname+936>>2]=__str468|0;HEAP32[_yytname+940>>2]=__str469|0;HEAP32[_yytname+944>>2]=__str470|0;HEAP32[_yytname+948>>2]=__str471|0;HEAP32[_yytname+952>>2]=__str472|0;HEAP32[_yytname+956>>2]=__str473|0;HEAP32[_yytname+960>>2]=__str474|0;HEAP32[_yytname+964>>2]=__str475|0;HEAP32[_yytname+968>>2]=__str476|0;HEAP32[_yytname+972>>2]=__str477|0;
HEAP32[_yytname+976>>2]=__str478|0;HEAP32[_yytname+980>>2]=__str479|0;HEAP32[_yytname+984>>2]=__str480|0;HEAP32[_yytname+988>>2]=__str481|0;HEAP32[_yytname+992>>2]=__str482|0;HEAP32[_yytname+996>>2]=__str483|0;HEAP32[_yytname+1E3>>2]=__str484|0;HEAP32[_yytname+1004>>2]=__str485|0;HEAP32[_yytname+1008>>2]=__str486|0;HEAP32[_yytname+1012>>2]=__str487|0;HEAP32[_yytname+1016>>2]=__str488|0;HEAP32[_yytname+1020>>2]=__str489|0;HEAP32[_yytname+1024>>2]=__str490|0;HEAP32[_yytname+1028>>2]=__str491|0;
HEAP32[_yytname+1032>>2]=__str492|0;HEAP32[_yytname+1036>>2]=__str493|0;HEAP32[_yytname+1040>>2]=__str494|0;HEAP32[_yytname+1044>>2]=__str495|0;HEAP32[_yytname+1048>>2]=__str496|0;HEAP32[_yytname+1052>>2]=__str497|0;HEAP32[_yytname+1056>>2]=__str498|0;HEAP32[_yytname+1060>>2]=__str499|0;HEAP32[_yytname+1064>>2]=__str500|0;HEAP32[_yytname+1068>>2]=__str501|0;HEAP32[_yytname+1072>>2]=__str502|0;HEAP32[_yytname+1076>>2]=__str503|0;HEAP32[_yytname+1080>>2]=__str504|0;
HEAP32[_yytname+1084>>2]=__str505|0;HEAP32[_yytname+1088>>2]=__str506|0;HEAP32[_yytname+1092>>2]=__str507|0;HEAP32[_yytname+1096>>2]=__str508|0;HEAP32[_yytname+1100>>2]=__str509|0;HEAP32[_yytname+1104>>2]=__str510|0;HEAP32[_yytname+1108>>2]=__str511|0;HEAP32[_yytname+1112>>2]=__str512|0;HEAP32[_yytname+1116>>2]=__str513|0;HEAP32[_yytname+1120>>2]=__str514|0;HEAP32[_yytname+1124>>2]=__str515|0;HEAP32[_yytname+1128>>2]=__str516|0;HEAP32[_yytname+1132>>2]=__str517|0;
HEAP32[_yytname+1136>>2]=__str518|0;HEAP32[_yytname+1140>>2]=__str519|0;HEAP32[_yytname+1144>>2]=__str520|0;HEAP32[_yytname+1148>>2]=__str521|0;HEAP32[_yytname+1152>>2]=__str522|0;HEAP32[_yytname+1156>>2]=__str52389|0;HEAP32[_yytname+1160>>2]=__str524|0;HEAP32[_wday_names>>2]=__str641539|0;HEAP32[_wday_names+4>>2]=__str651540|0;HEAP32[_wday_names+8>>2]=__str661541|0;HEAP32[_wday_names+12>>2]=__str671542|0;HEAP32[_wday_names+16>>2]=__str681543|0;HEAP32[_wday_names+20>>2]=__str691544|0;
HEAP32[_wday_names+24>>2]=__str701545|0;HEAP32[_timezone_names>>2]=__str461521|0;HEAP32[_timezone_names+4>>2]=__str471522|0;HEAP32[_timezone_names+8>>2]=__str481523|0;HEAP32[_reserved_word_wordlist>>2]=__str185|0;HEAP32[_reserved_word_wordlist+16>>2]=__str185|0;HEAP32[_reserved_word_wordlist+32>>2]=__str185|0;HEAP32[_reserved_word_wordlist+48>>2]=__str185|0;HEAP32[_reserved_word_wordlist+64>>2]=__str185|0;HEAP32[_reserved_word_wordlist+80>>2]=__str185|0;
HEAP32[_reserved_word_wordlist+96>>2]=__str185|0;HEAP32[_reserved_word_wordlist+112>>2]=__str185|0;HEAP32[_reserved_word_wordlist+128>>2]=__str186|0;HEAP32[_reserved_word_wordlist+144>>2]=__str187|0;HEAP32[_reserved_word_wordlist+160>>2]=__str188|0;HEAP32[_reserved_word_wordlist+176>>2]=__str189|0;HEAP32[_reserved_word_wordlist+192>>2]=__str190|0;HEAP32[_reserved_word_wordlist+208>>2]=__str191|0;HEAP32[_reserved_word_wordlist+224>>2]=__str192|0;HEAP32[_reserved_word_wordlist+240>>2]=__str193|0;
HEAP32[_reserved_word_wordlist+256>>2]=__str194|0;HEAP32[_reserved_word_wordlist+272>>2]=__str195|0;HEAP32[_reserved_word_wordlist+288>>2]=__str196|0;HEAP32[_reserved_word_wordlist+304>>2]=__str197|0;HEAP32[_reserved_word_wordlist+320>>2]=__str198|0;HEAP32[_reserved_word_wordlist+336>>2]=__str199|0;HEAP32[_reserved_word_wordlist+352>>2]=__str200|0;HEAP32[_reserved_word_wordlist+368>>2]=__str201|0;HEAP32[_reserved_word_wordlist+384>>2]=__str202|0;HEAP32[_reserved_word_wordlist+400>>2]=__str203|0;
HEAP32[_reserved_word_wordlist+416>>2]=__str204|0;HEAP32[_reserved_word_wordlist+432>>2]=__str205|0;HEAP32[_reserved_word_wordlist+448>>2]=__str206|0;HEAP32[_reserved_word_wordlist+464>>2]=__str207|0;HEAP32[_reserved_word_wordlist+480>>2]=__str208|0;HEAP32[_reserved_word_wordlist+496>>2]=__str209|0;HEAP32[_reserved_word_wordlist+512>>2]=__str210|0;HEAP32[_reserved_word_wordlist+528>>2]=__str21177|0;HEAP32[_reserved_word_wordlist+544>>2]=__str212|0;HEAP32[_reserved_word_wordlist+560>>2]=__str213|0;
HEAP32[_reserved_word_wordlist+576>>2]=__str214|0;HEAP32[_reserved_word_wordlist+592>>2]=__str215|0;HEAP32[_reserved_word_wordlist+608>>2]=__str216|0;HEAP32[_reserved_word_wordlist+624>>2]=__str217|0;HEAP32[_reserved_word_wordlist+640>>2]=__str218|0;HEAP32[_reserved_word_wordlist+656>>2]=__str219|0;HEAP32[_reserved_word_wordlist+672>>2]=__str22078|0;HEAP32[_reserved_word_wordlist+688>>2]=__str221|0;HEAP32[_reserved_word_wordlist+704>>2]=__str222|0;HEAP32[_reserved_word_wordlist+720>>2]=__str223|0;
HEAP32[_reserved_word_wordlist+736>>2]=__str185|0;HEAP32[_reserved_word_wordlist+752>>2]=__str224|0;HEAP32[_reserved_word_wordlist+768>>2]=__str185|0;HEAP32[_reserved_word_wordlist+784>>2]=__str185|0;HEAP32[_reserved_word_wordlist+800>>2]=__str225|0;HEAP32[_mrb_time_type>>2]=__str1475|0;HEAP32[_mon_names>>2]=__str521527|0;HEAP32[_mon_names+4>>2]=__str531528|0;HEAP32[_mon_names+8>>2]=__str541529|0;HEAP32[_mon_names+12>>2]=__str551530|0;HEAP32[_mon_names+16>>2]=__str561531|0;
HEAP32[_mon_names+20>>2]=__str571532|0;HEAP32[_mon_names+24>>2]=__str581533|0;HEAP32[_mon_names+28>>2]=__str591534|0;HEAP32[_mon_names+32>>2]=__str601535|0;HEAP32[_mon_names+36>>2]=__str611536|0;HEAP32[_mon_names+40>>2]=__str621537|0;HEAP32[_mon_names+44>>2]=__str631538|0;HEAP32[_builtin_types+4>>2]=__str311139|0;HEAP32[_builtin_types+12>>2]=__str321140|0;HEAP32[_builtin_types+20>>2]=__str151123|0;HEAP32[_builtin_types+28>>2]=__str161124|0;HEAP32[_builtin_types+36>>2]=__str331141|0;
HEAP32[_builtin_types+44>>2]=__str341142|0;HEAP32[_builtin_types+52>>2]=__str351143|0;HEAP32[_builtin_types+60>>2]=__str361144|0;HEAP32[_builtin_types+68>>2]=__str371145|0;HEAP32[_builtin_types+76>>2]=__str381146|0;HEAP32[_builtin_types+84>>2]=__str231131|0;HEAP32[_builtin_types+92>>2]=__str391147|0;HEAP32[_builtin_types+100>>2]=__str401148|0;HEAP32[_builtin_types+108>>2]=__str411149|0;HEAP32[_builtin_types+116>>2]=__str421150|0;HEAP32[_builtin_types+124>>2]=__str431151|0;
HEAP32[_builtin_types+132>>2]=__str441152|0;HEAP32[_builtin_types+140>>2]=__str451153|0;HEAP32[_builtin_types+148>>2]=__str461154|0;HEAP32[_builtin_types+156>>2]=__str471155|0;HEAP32[__ZTVSt9bad_alloc+4>>2]=__ZTISt9bad_alloc;HEAP32[__ZTVSt9bad_alloc+8>>2]=602;HEAP32[__ZTVSt9bad_alloc+12>>2]=496;HEAP32[__ZTVSt9bad_alloc+16>>2]=48;HEAP32[__ZTVSt20bad_array_new_length+4>>2]=__ZTISt20bad_array_new_length;HEAP32[__ZTVSt20bad_array_new_length+8>>2]=26;HEAP32[__ZTVSt20bad_array_new_length+12>>2]=476;
HEAP32[__ZTVSt20bad_array_new_length+16>>2]=300;__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([2,0,0,0],["i8*",0,0,0],ALLOC_STATIC);HEAP32[__ZTISt9bad_alloc>>2]=__ZTVN10__cxxabiv120__si_class_type_infoE+8|0;HEAP32[__ZTISt9bad_alloc+4>>2]=__ZTSSt9bad_alloc|0;HEAP32[__ZTISt9bad_alloc+8>>2]=__ZTISt9exception;HEAP32[__ZTISt20bad_array_new_length>>2]=__ZTVN10__cxxabiv120__si_class_type_infoE+8|0;HEAP32[__ZTISt20bad_array_new_length+4>>2]=__ZTSSt20bad_array_new_length|0;
HEAP32[__ZTISt20bad_array_new_length+8>>2]=__ZTISt9bad_alloc;
var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,
ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
function ___setErrNo(f){___setErrNo.ret||(___setErrNo.ret=allocate([0],"i32",ALLOC_STATIC));return HEAP32[___setErrNo.ret>>2]=f}
var _stdin=0,__impure_ptr=_stderr=_stdout=0,FS={currentPath:"/",nextInode:2,streams:[null],checkStreams:function(){for(var f in FS.streams)assert(0<=f&&f<FS.streams.length);for(f=0;f<FS.streams.length;f++)assert("object"==typeof FS.streams[f])},ignorePermissions:!0,joinPath:function(f,e){for(var b=f[0],c=1;c<f.length;c++)"/"!=b[b.length-1]&&(b+="/"),b+=f[c];e&&"/"==b[0]&&(b=b.substr(1));return b},absolutePath:function(f,e){if("string"!==typeof f)return null;void 0===e&&(e=FS.currentPath);f&&"/"==
f[0]&&(e="");for(var b=(e+"/"+f).split("/").reverse(),c=[""];b.length;){var a=b.pop();""==a||"."==a||(".."==a?1<c.length&&c.pop():c.push(a))}return 1==c.length?"/":c.join("/")},analyzePath:function(f,e,b){var c={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null},f=FS.absolutePath(f);if("/"==f)c.isRoot=!0,c.exists=c.parentExists=!0,c.name="/",c.path=c.parentPath="/",c.object=c.parentObject=FS.root;else if(null!==f)for(var b=b||0,f=f.slice(1).split("/"),
a=FS.root,d=[""];f.length;){1==f.length&&a.isFolder&&(c.parentExists=!0,c.parentPath=1==d.length?"/":d.join("/"),c.parentObject=a,c.name=f[0]);var g=f.shift();if(a.isFolder)if(a.read){if(!a.contents.hasOwnProperty(g)){c.error=ERRNO_CODES.ENOENT;break}}else{c.error=ERRNO_CODES.EACCES;break}else{c.error=ERRNO_CODES.ENOTDIR;break}a=a.contents[g];if(a.link&&!(e&&0==f.length)){if(40<b){c.error=ERRNO_CODES.ELOOP;break}c=FS.absolutePath(a.link,d.join("/"));c=FS.analyzePath([c].concat(f).join("/"),e,b+1);
break}d.push(g);0==f.length&&(c.exists=!0,c.path=d.join("/"),c.object=a)}return c},findObject:function(f,e){FS.ensureRoot();var b=FS.analyzePath(f,e);if(b.exists)return b.object;___setErrNo(b.error);return null},createObject:function(f,e,b,c,a){f||(f="/");"string"===typeof f&&(f=FS.findObject(f));if(!f)throw ___setErrNo(ERRNO_CODES.EACCES),Error("Parent path must exist.");if(!f.isFolder)throw ___setErrNo(ERRNO_CODES.ENOTDIR),Error("Parent must be a folder.");if(!f.write&&!FS.ignorePermissions)throw ___setErrNo(ERRNO_CODES.EACCES),
Error("Parent folder must be writeable.");if(!e||"."==e||".."==e)throw ___setErrNo(ERRNO_CODES.ENOENT),Error("Name must not be empty.");if(f.contents.hasOwnProperty(e))throw ___setErrNo(ERRNO_CODES.EEXIST),Error("Can't overwrite object.");f.contents[e]={read:void 0===c?!0:c,write:void 0===a?!1:a,timestamp:Date.now(),inodeNumber:FS.nextInode++};for(var d in b)b.hasOwnProperty(d)&&(f.contents[e][d]=b[d]);return f.contents[e]},createFolder:function(f,e,b,c){return FS.createObject(f,e,{isFolder:!0,isDevice:!1,
contents:{}},b,c)},createPath:function(f,e,b,c){f=FS.findObject(f);if(null===f)throw Error("Invalid parent.");for(e=e.split("/").reverse();e.length;){var a=e.pop();a&&(f.contents.hasOwnProperty(a)||FS.createFolder(f,a,b,c),f=f.contents[a])}return f},createFile:function(f,e,b,c,a){b.isFolder=!1;return FS.createObject(f,e,b,c,a)},createDataFile:function(f,e,b,c,a){if("string"===typeof b){for(var d=Array(b.length),g=0,h=b.length;g<h;++g)d[g]=b.charCodeAt(g);b=d}b={isDevice:!1,contents:b.subarray?b.subarray(0):
b};return FS.createFile(f,e,b,c,a)},createLazyFile:function(f,e,b,c,a){if("undefined"!==typeof XMLHttpRequest){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var d=function(a,b){this.length=b;this.chunkSize=a;this.chunks=[]};d.prototype.get=function(a){if(!(a>this.length-1||0>a)){var b=a%j;return this.getter(Math.floor(a/j))[b]}};d.prototype.setDataGetter=function(a){this.getter=a};var g=new XMLHttpRequest;
g.open("HEAD",b,!1);g.send(null);if(!(200<=g.status&&300>g.status||304===g.status))throw Error("Couldn't load "+b+". Status: "+g.status);var h=Number(g.getResponseHeader("Content-length")),i,j=1048576;if(!((i=g.getResponseHeader("Accept-Ranges"))&&"bytes"===i))j=h;var l=new d(j,h);l.setDataGetter(function(a){var c=a*l.chunkSize,d=(a+1)*l.chunkSize-1,d=Math.min(d,h-1);if("undefined"===typeof l.chunks[a]){var e=l.chunks;if(c>d)throw Error("invalid range ("+c+", "+d+") or no bytes requested!");if(d>
h-1)throw Error("only "+h+" bytes available! programmer error!");var f=new XMLHttpRequest;f.open("GET",b,!1);h!==j&&f.setRequestHeader("Range","bytes="+c+"-"+d);"undefined"!=typeof Uint8Array&&(f.responseType="arraybuffer");f.overrideMimeType&&f.overrideMimeType("text/plain; charset=x-user-defined");f.send(null);if(!(200<=f.status&&300>f.status||304===f.status))throw Error("Couldn't load "+b+". Status: "+f.status);c=void 0!==f.response?new Uint8Array(f.response||[]):intArrayFromString(f.responseText||
"",!0);e[a]=c}if("undefined"===typeof l.chunks[a])throw Error("doXHR failed!");return l.chunks[a]});d={isDevice:!1,contents:l}}else d={isDevice:!1,url:b};return FS.createFile(f,e,d,c,a)},createPreloadedFile:function(f,e,b,c,a,d,g,h){function i(b){function i(b){h||FS.createDataFile(f,e,b,c,a);d&&d();removeRunDependency("cp "+j)}var n=!1;Module.preloadPlugins.forEach(function(a){!n&&a.canHandle(j)&&(a.handle(b,j,i,function(){g&&g();removeRunDependency("cp "+j)}),n=!0)});n||i(b)}Browser.ensureObjects();
var j=FS.joinPath([f,e],!0);addRunDependency("cp "+j);"string"==typeof b?Browser.asyncLoad(b,function(a){i(a)},g):i(b)},createLink:function(f,e,b,c,a){return FS.createFile(f,e,{isDevice:!1,link:b},c,a)},createDevice:function(f,e,b,c){if(!b&&!c)throw Error("A device must have at least one callback defined.");return FS.createFile(f,e,{isDevice:!0,input:b,output:c},Boolean(b),Boolean(c))},forceLoadFile:function(f){if(f.isDevice||f.isFolder||f.link||f.contents)return!0;var e=!0;if("undefined"!==typeof XMLHttpRequest)throw Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
if(Module.read)try{f.contents=intArrayFromString(Module.read(f.url),!0)}catch(b){e=!1}else throw Error("Cannot load without read() or XMLHttpRequest.");e||___setErrNo(ERRNO_CODES.EIO);return e},ensureRoot:function(){FS.root||(FS.root={read:!0,write:!0,isFolder:!0,isDevice:!1,timestamp:Date.now(),inodeNumber:1,contents:{}})},init:function(f,e,b){function c(a){null===a||10===a?(e.printer(e.buffer.join("")),e.buffer=[]):e.buffer.push(h.processCChar(a))}assert(!FS.init.initialized,"FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
FS.init.initialized=!0;FS.ensureRoot();var f=f||Module.stdin,e=e||Module.stdout,b=b||Module.stderr,a=!0,d=!0,g=!0;f||(a=!1,f=function(){if(!f.cache||!f.cache.length){var a;"undefined"!=typeof window&&"function"==typeof window.prompt?(a=window.prompt("Input: "),null===a&&(a=String.fromCharCode(0))):"function"==typeof readline&&(a=readline());a||(a="");f.cache=intArrayFromString(a+"\n",!0)}return f.cache.shift()});var h=new Runtime.UTF8Processor;e||(d=!1,e=c);e.printer||(e.printer=Module.print);e.buffer||
(e.buffer=[]);b||(g=!1,b=c);b.printer||(b.printer=Module.print);b.buffer||(b.buffer=[]);try{FS.createFolder("/","tmp",!0,!0)}catch(i){}var j=FS.createFolder("/","dev",!0,!0),l=FS.createDevice(j,"stdin",f),k=FS.createDevice(j,"stdout",null,e),b=FS.createDevice(j,"stderr",null,b);FS.createDevice(j,"tty",f,e);FS.streams[1]={path:"/dev/stdin",object:l,position:0,isRead:!0,isWrite:!1,isAppend:!1,isTerminal:!a,error:!1,eof:!1,ungotten:[]};FS.streams[2]={path:"/dev/stdout",object:k,position:0,isRead:!1,
isWrite:!0,isAppend:!1,isTerminal:!d,error:!1,eof:!1,ungotten:[]};FS.streams[3]={path:"/dev/stderr",object:b,position:0,isRead:!1,isWrite:!0,isAppend:!1,isTerminal:!g,error:!1,eof:!1,ungotten:[]};_stdin=allocate([1],"void*",ALLOC_STACK);_stdout=allocate([2],"void*",ALLOC_STACK);_stderr=allocate([3],"void*",ALLOC_STACK);FS.createPath("/","dev/shm/tmp",!0,!0);for(a=FS.streams.length;a<Math.max(_stdin,_stdout,_stderr)+4;a++)FS.streams[a]=null;FS.streams[_stdin]=FS.streams[1];FS.streams[_stdout]=FS.streams[2];
FS.streams[_stderr]=FS.streams[3];FS.checkStreams();assert(1024>FS.streams.length);__impure_ptr=allocate([allocate([0,0,0,0,_stdin,0,0,0,_stdout,0,0,0,_stderr,0,0,0],"void*",ALLOC_STATIC)],"void*",ALLOC_STATIC)},quit:function(){FS.init.initialized&&(FS.streams[2]&&0<FS.streams[2].object.output.buffer.length&&FS.streams[2].object.output(10),FS.streams[3]&&0<FS.streams[3].object.output.buffer.length&&FS.streams[3].object.output(10))},standardizePath:function(f){"./"==f.substr(0,2)&&(f=f.substr(2));
return f},deleteFile:function(f){f=FS.analyzePath(f);if(!f.parentExists||!f.exists)throw"Invalid path "+f;delete f.parentObject.contents[f.name]}};
function _pwrite(f,e,b,c){f=FS.streams[f];if(!f||f.object.isDevice)return ___setErrNo(ERRNO_CODES.EBADF),-1;if(f.isWrite){if(f.object.isFolder)return ___setErrNo(ERRNO_CODES.EISDIR),-1;if(0>b||0>c)return ___setErrNo(ERRNO_CODES.EINVAL),-1;for(var a=f.object.contents;a.length<c;)a.push(0);for(var d=0;d<b;d++)a[c+d]=HEAPU8[e+d];f.object.timestamp=Date.now();return d}___setErrNo(ERRNO_CODES.EACCES);return-1}
function _write(f,e,b){var c=FS.streams[f];if(c){if(c.isWrite){if(0>b)return ___setErrNo(ERRNO_CODES.EINVAL),-1;if(c.object.isDevice){if(c.object.output){for(f=0;f<b;f++)try{c.object.output(HEAP8[e+f])}catch(a){return ___setErrNo(ERRNO_CODES.EIO),-1}c.object.timestamp=Date.now();return f}___setErrNo(ERRNO_CODES.ENXIO);return-1}e=_pwrite(f,e,b,c.position);-1!=e&&(c.position+=e);return e}___setErrNo(ERRNO_CODES.EACCES);return-1}___setErrNo(ERRNO_CODES.EBADF);return-1}
function _fwrite(f,e,b,c){b*=e;if(0==b)return 0;f=_write(c,f,b);return-1==f?(FS.streams[c]&&(FS.streams[c].error=!0),0):Math.floor(f/e)}
function __formatString(f,e){function b(b){var c;"double"===b?c=(tempDoubleI32[0]=HEAP32[e+a>>2],tempDoubleI32[1]=HEAP32[e+(a+4)>>2],tempDoubleF64[0]):"i64"==b?c=[HEAP32[e+a>>2],HEAP32[e+(a+4)>>2]]:(b="i32",c=HEAP32[e+a>>2]);a+=Runtime.getNativeFieldSize(b);return c}for(var c=f,a=0,d=[],g,h;;){var i=c;g=HEAP8[c];if(0===g)break;h=HEAP8[c+1];if(37==g){var j=!1,l=!1,k=!1,n=!1;a:for(;;){switch(h){case 43:j=!0;break;case 45:l=!0;break;case 35:k=!0;break;case 48:if(n)break a;else{n=!0;break}default:break a}c++;
h=HEAP8[c+1]}var r=0;if(42==h)r=b("i32"),c++,h=HEAP8[c+1];else for(;48<=h&&57>=h;)r=10*r+(h-48),c++,h=HEAP8[c+1];var t=!1;if(46==h){var p=0,t=!0;c++;h=HEAP8[c+1];if(42==h)p=b("i32"),c++;else for(;;){h=HEAP8[c+1];if(48>h||57<h)break;p=10*p+(h-48);c++}h=HEAP8[c+1]}else p=6;var q;switch(String.fromCharCode(h)){case "h":h=HEAP8[c+2];104==h?(c++,q=1):q=2;break;case "l":h=HEAP8[c+2];108==h?(c++,q=8):q=4;break;case "L":case "q":case "j":q=8;break;case "z":case "t":case "I":q=4;break;default:q=null}q&&c++;
h=HEAP8[c+1];if(-1!="diuoxXp".split("").indexOf(String.fromCharCode(h))){var v=100==h||105==h;q=q||4;var i=g=b("i"+8*q),w;8==q&&(g=Runtime.makeBigInt(g[0],g[1],117==h));if(4>=q){var m=Math.pow(256,q)-1;g=(v?reSign:unSign)(g&m,8*q)}m=Math.abs(g);v="";if(100==h||105==h)w=8==q&&i64Math?i64Math.stringify(i[0],i[1],null):reSign(g,8*q,1).toString(10);else if(117==h)w=8==q&&i64Math?i64Math.stringify(i[0],i[1],!0):unSign(g,8*q,1).toString(10),g=Math.abs(g);else if(111==h)w=(k?"0":"")+m.toString(8);else if(120==
h||88==h){v=k?"0x":"";if(8==q&&i64Math)w=(i[1]>>>0).toString(16)+(i[0]>>>0).toString(16);else if(0>g){g=-g;w=(m-1).toString(16);i=[];for(k=0;k<w.length;k++)i.push((15-parseInt(w[k],16)).toString(16));for(w=i.join("");w.length<2*q;)w="f"+w}else w=m.toString(16);88==h&&(v=v.toUpperCase(),w=w.toUpperCase())}else 112==h&&(0===m?w="(nil)":(v="0x",w=m.toString(16)));if(t)for(;w.length<p;)w="0"+w;for(j&&(v=0>g?"-"+v:"+"+v);v.length+w.length<r;)l?w+=" ":n?w="0"+w:v=" "+v;w=v+w;w.split("").forEach(function(a){d.push(a.charCodeAt(0))})}else if(-1!=
"fFeEgG".split("").indexOf(String.fromCharCode(h))){g=b("double");if(isNaN(g))w="nan",n=!1;else if(isFinite(g)){t=!1;q=Math.min(p,20);if(103==h||71==h)t=!0,p=p||1,q=parseInt(g.toExponential(q).split("e")[1],10),p>q&&-4<=q?(h=(103==h?"f":"F").charCodeAt(0),p-=q+1):(h=(103==h?"e":"E").charCodeAt(0),p--),q=Math.min(p,20);if(101==h||69==h)w=g.toExponential(q),/[eE][-+]\d$/.test(w)&&(w=w.slice(0,-1)+"0"+w.slice(-1));else if(102==h||70==h)w=g.toFixed(q);i=w.split("e");if(t&&!k)for(;1<i[0].length&&-1!=i[0].indexOf(".")&&
("0"==i[0].slice(-1)||"."==i[0].slice(-1));)i[0]=i[0].slice(0,-1);else for(k&&-1==w.indexOf(".")&&(i[0]+=".");p>q++;)i[0]+="0";w=i[0]+(1<i.length?"e"+i[1]:"");69==h&&(w=w.toUpperCase());j&&0<=g&&(w="+"+w)}else w=(0>g?"-":"")+"inf",n=!1;for(;w.length<r;)w=l?w+" ":n&&("-"==w[0]||"+"==w[0])?w[0]+"0"+w.slice(1):(n?"0":" ")+w;97>h&&(w=w.toUpperCase());w.split("").forEach(function(a){d.push(a.charCodeAt(0))})}else if(115==h){j=b("i8*")||nullString;n=String_len(j);t&&(n=Math.min(n,p));if(!l)for(;n<r--;)d.push(32);
for(k=0;k<n;k++)d.push(HEAPU8[j++]);if(l)for(;n<r--;)d.push(32)}else if(99==h){for(l&&d.push(b("i8"));0<--r;)d.push(32);l||d.push(b("i8"))}else if(110==h)l=b("i32*"),HEAP32[l>>2]=d.length;else if(37==h)d.push(g);else for(k=i;k<c+2;k++)d.push(HEAP8[k]);c+=2}else d.push(g),c+=1}return d}function _fprintf(f,e,b){b=__formatString(e,b);e=Runtime.stackSave();f=_fwrite(allocate(b,"i8",ALLOC_STACK),1,b.length,f);Runtime.stackRestore(e);return f}
function _printf(f,e){return _fprintf(HEAP32[_stdout>>2],f,e)}
function _memcpy(f,e,b){assert(0===b%1,"memcpy given "+b+" bytes to copy. Problem with quantum=1 corrections perhaps?");if(20<=b&&e%2==f%2)if(e%4==f%4){for(b=e+b;e%4;)HEAP8[f++]=HEAP8[e++];for(var e=e>>2,f=f>>2,c=b>>2;e<c;)HEAP32[f++]=HEAP32[e++];e<<=2;for(f<<=2;e<b;)HEAP8[f++]=HEAP8[e++]}else{b=e+b;e%2&&(HEAP8[f++]=HEAP8[e++]);e>>=1;f>>=1;for(c=b>>1;e<c;)HEAP16[f++]=HEAP16[e++];e<<=1;f<<=1;e<b&&(HEAP8[f++]=HEAP8[e++])}else for(;b--;)HEAP8[f++]=HEAP8[e++]}var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
function _fputc(f,e){var b=unSign(f&255);HEAP8[_fputc.ret]=b;return-1==_write(e,_fputc.ret,1)?(FS.streams[e]&&(FS.streams[e].error=!0),-1):b}var _putc=_fputc;function _memset(f,e,b){if(20<=b){for(b=f+b;f%4;)HEAP8[f++]=e;0>e&&(e+=256);for(var f=f>>2,c=b>>2,a=e|e<<8|e<<16|e<<24;f<c;)HEAP32[f++]=a;for(f<<=2;f<b;)HEAP8[f++]=e}else for(;b--;)HEAP8[f++]=e}var _llvm_memset_p0i8_i32=_memset;function _memcmp(f,e,b){for(var c=0;c<b;c++){var a=HEAPU8[f+c],d=HEAPU8[e+c];if(a!=d)return a>d?1:-1}return 0}
function _strlen(f){return String_len(f)}function _isupper(f){return 65<=f&&90>=f}function _isalpha(f){return 97<=f&&122>=f||65<=f&&90>=f}function _isalnum(f){return 48<=f&&57>=f||97<=f&&122>=f||65<=f&&90>=f}function _isdigit(f){return 48<=f&&57>=f}var _llvm_va_start;function _llvm_va_end(){}var _setjmp;function _memmove(f,e,b,c){if(e<f&&f<e+b){e+=b;for(f+=b;b--;)f--,e--,HEAP8[f]=HEAP8[e]}else _memcpy(f,e,b,c)}var _llvm_memmove_p0i8_p0i8_i32=_memmove;
function _longjmp(f,e){throw{longjmp:!0,id:HEAP32[f>>2],value:e||1};}function _snprintf(f,e,b,c){for(var b=__formatString(b,c),c=void 0===e?b.length:Math.min(b.length,Math.max(e-1,0)),a=0;a<c;a++)HEAP8[f+a]=b[a];if(c<e||void 0===e)HEAP8[f+a]=0;return b.length}function _isspace(f){return f in{32:0,9:0,10:0,11:0,12:0,13:0}}function _isxdigit(f){return 48<=f&&57>=f||97<=f&&102>=f||65<=f&&70>=f}function _tolower(f){return 65<=f&&90>=f?f-65+97:f}function ___errno_location(){return ___setErrNo.ret}
var ___errno=___errno_location;
function _strtod(f,e){for(var b=f;_isspace(HEAP8[f]);)f++;var c=1;45==HEAP8[f]?(c=-1,f++):43==HEAP8[f]&&f++;for(var a,d=0,g=!1;;){a=HEAP8[f];if(!_isdigit(a))break;g=!0;d=10*d+a-48;f++}var h=!1;if(46==HEAP8[f]){f++;for(var i=0.1;;){a=HEAP8[f];if(!_isdigit(a))break;h=!0;d+=i*(a-48);i/=10;f++}}if(!g&&!h)return e&&(HEAP32[e>>2]=b),0;a=HEAP8[f];if(101==a||69==a){f++;b=0;g=!1;a=HEAP8[f];45==a?(g=!0,f++):43==a&&f++;for(a=HEAP8[f];_isdigit(a);)b=10*b+a-48,f++,a=HEAP8[f];g&&(b=-b);d*=Math.pow(10,b)}e&&(HEAP32[e>>
2]=f);return d*c}
function __parseInt(f,e,b,c,a,d,g){for(;_isspace(HEAP8[f]);)f++;var h=1;45==HEAP8[f]?(h=-1,f++):43==HEAP8[f]&&f++;!b&&48==HEAP8[f]&&(120==HEAP8[f+1]||88==HEAP8[f+1]?(b=16,f+=2):(b=8,f++));b||(b=10);for(var i,j=0;0!=(i=HEAP8[f])&&!(i=parseInt(String.fromCharCode(i),b),isNaN(i));)j=j*b+i,f++;j*=h;e&&(HEAP32[e>>2]=f);g&&(Math.abs(j)>a?(j=a,___setErrNo(ERRNO_CODES.ERANGE)):j=unSign(j,d));if(j>a||j<c)j=j>a?a:c,___setErrNo(ERRNO_CODES.ERANGE);64==d&&(j=[j>>>0,Math.min(Math.floor(j/4294967296),4294967295)]);
return j}function _strtol(f,e,b){return __parseInt(f,e,b,-2147483648,2147483647,32)}function _atoi(f){return _strtol(f,null,10)}function _strncmp(f,e,b){for(var c=0;c<b;){var a=HEAPU8[f+c],d=HEAPU8[e+c];if(a==d&&0==a)break;if(0==a)return-1;if(0==d)return 1;if(a==d)c++;else return a>d?1:-1}return 0}function _strcmp(f,e){return _strncmp(f,e,TOTAL_MEMORY)}function _strchr(f,e){f--;do{f++;var b=HEAP8[f];if(b==e)return f}while(b);return 0}
function _feof(f){return Number(FS.streams[f]&&FS.streams[f].eof)}
function _pread(f,e,b,c){var a=FS.streams[f];if(!a||a.object.isDevice)return ___setErrNo(ERRNO_CODES.EBADF),-1;if(a.isRead){if(a.object.isFolder)return ___setErrNo(ERRNO_CODES.EISDIR),-1;if(0>b||0>c)return ___setErrNo(ERRNO_CODES.EINVAL),-1;for(f=0;a.ungotten.length&&0<b;)HEAP8[e++]=a.ungotten.pop(),b--,f++;a=a.object.contents;b=Math.min(a.length-c,b);if(a.subarray||a.slice)for(var d=0;d<b;d++)HEAP8[e+d]=a[c+d];else for(d=0;d<b;d++)HEAP8[e+d]=a.get(c+d);return f+b}___setErrNo(ERRNO_CODES.EACCES);
return-1}
function _read(f,e,b){var c=FS.streams[f];if(c){if(c.isRead){if(0>b)return ___setErrNo(ERRNO_CODES.EINVAL),-1;if(c.object.isDevice){if(c.object.input){for(f=0;c.ungotten.length&&0<b;)HEAP8[e++]=c.ungotten.pop(),b--,f++;for(var a=0;a<b;a++){try{var d=c.object.input()}catch(g){return ___setErrNo(ERRNO_CODES.EIO),-1}if(null===d||void 0===d)break;f++;HEAP8[e+a]=d}return f}___setErrNo(ERRNO_CODES.ENXIO);return-1}d=c.ungotten.length;f=_pread(f,e,b,c.position);-1!=f&&(c.position+=c.ungotten.length-d+f);
return f}___setErrNo(ERRNO_CODES.EACCES);return-1}___setErrNo(ERRNO_CODES.EBADF);return-1}function _fgetc(f){if(!FS.streams[f])return-1;var e=FS.streams[f];if(e.eof||e.error)return-1;f=_read(f,_fgetc.ret,1);return 0==f?(e.eof=!0,-1):-1==f?(e.error=!0,-1):HEAPU8[_fgetc.ret]}var _strtof=_strtod;function __exit(f){exitRuntime();ABORT=!0;throw"exit("+f+") called, at "+Error().stack;}function _exit(f){__exit(f)}function _abort(){ABORT=!0;throw"abort() at "+Error().stack;}
var _vsnprintf=_snprintf,_vprintf=_printf,ERRNO_MESSAGES={1:"Operation not permitted",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"Input/output error",6:"No such device or address",8:"Exec format error",9:"Bad file descriptor",10:"No child processes",11:"Resource temporarily unavailable",12:"Cannot allocate memory",13:"Permission denied",14:"Bad address",16:"Device or resource busy",17:"File exists",18:"Invalid cross-device link",19:"No such device",20:"Not a directory",
21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Inappropriate ioctl for device",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read-only file system",31:"Too many links",32:"Broken pipe",33:"Numerical argument out of domain",34:"Numerical result out of range",35:"Resource deadlock avoided",36:"File name too long",37:"No locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many levels of symbolic links",
42:"No message of desired type",43:"Identifier removed",60:"Device not a stream",61:"No data available",62:"Timer expired",63:"Out of streams resources",67:"Link has been severed",71:"Protocol error",72:"Multihop attempted",74:"Bad message",75:"Value too large for defined data type",84:"Invalid or incomplete multibyte or wide character",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Protocol not supported",
95:"Operation not supported",97:"Address family not supported by protocol",98:"Address already in use",99:"Cannot assign requested address",100:"Network is down",101:"Network is unreachable",102:"Network dropped connection on reset",103:"Software caused connection abort",104:"Connection reset by peer",105:"No buffer space available",106:"Transport endpoint is already connected",107:"Transport endpoint is not connected",110:"Connection timed out",111:"Connection refused",113:"No route to host",114:"Operation already in progress",
115:"Operation now in progress",116:"Stale NFS file handle",122:"Disk quota exceeded",125:"Operation canceled",130:"Owner died",131:"State not recoverable"};function _strerror_r(f,e,b){if(f in ERRNO_MESSAGES){if(ERRNO_MESSAGES[f].length>b-1)return ___setErrNo(ERRNO_CODES.ERANGE);f=ERRNO_MESSAGES[f];for(b=0;b<f.length;b++)HEAP8[e+b]=f.charCodeAt(b);return HEAP8[e+b]=0}return ___setErrNo(ERRNO_CODES.EINVAL)}
function _strerror(f){_strerror.buffer||(_strerror.buffer=_malloc(256));_strerror_r(f,_strerror.buffer,256);return _strerror.buffer}function _erfc(f){var e=1,b=f,c=f,a=f*f+0.5,d=1,g=b/a,h;if(2.2>Math.abs(f))return 1-_erf(f);if(0>f)return 2-_erfc(-f);do h=e*d+b*f,e=b,b=h,h=c*d+a*f,c=a,a=h,d+=0.5,h=g,g=b/a;while(1E-12<Math.abs(h-g)/g);return 0.5641895835477563*Math.exp(-f*f)*g}
function _erf(f){var e=f,b=f,c=f*f,a=1;if(2.2<Math.abs(f))return 1-_erfc(f);do b*=c/a,e-=b/(2*a+1),++a,b*=c/a,e+=b/(2*a+1),++a;while(1E-12<Math.abs(b/e));return 1.1283791670955126*e}function _hypot(f,e){return Math.sqrt(f*f+e*e)}function _ldexp(f,e){return f*Math.pow(2,e)}function _frexp(f,e){var b=0,c=0;0!==f&&(b=Math.log(f)/Math.log(2),c=Math.ceil(b),c===b&&(c+=1),b=f/Math.pow(2,c));HEAP32[e>>2]=c;return b}function _cbrt(f){return Math.pow(f,1/3)}var _sqrt=Math.sqrt;
function _log10(f){return Math.log(f)/Math.LN10}var _log=Math.log,_exp=Math.exp;function _atanh(f){return Math.log((1+f)/(1-f))/2}function _acosh(f){return Math.log(1*f+Math.sqrt(f*f-1))}function _asinh(f){return Math.log(f+Math.sqrt(f*f+1))}function _sinh(f){f=Math.pow(Math.E,f);return(f-1/f)/2}function _cosh(f){f=Math.pow(Math.E,f);return(f+1/f)/2}function _tanh(f){return _sinh(f)/_cosh(f)}
var _atan2=Math.atan2,_atan=Math.atan,_acos=Math.acos,_asin=Math.asin,_tan=Math.tan,_cos=Math.cos,_sin=Math.sin,_abs=Math.abs;function ___fpclassifyf(f){return isNaN(f)?0:!isFinite(f)?1:0==f?2:4}function _sprintf(f,e,b){return _snprintf(f,void 0,e,b)}function ___assert_func(f,e,b,c){throw"Assertion failed: "+(c?Pointer_stringify(c):"unknown condition")+", at: "+[f?Pointer_stringify(f):"unknown filename",e,b?Pointer_stringify(b):"unknown function"];}
var _floorf=Math.floor,_ceilf=Math.ceil,___fpclassifyd=___fpclassifyf;function _fmod(f,e){return f%e}var _fmodf=_fmod,_llvm_pow_f64=Math.pow;function _toupper(f){return 97<=f&&122>=f?f-97+65:f}function _islower(f){return 97<=f&&122>=f}function _strtoul(f,e,b){return __parseInt(f,e,b,0,4294967295,32,!0)}function _memchr(f,e,b){for(var e=unSign(e),c=0;c<b;c++){if(HEAP8[f]==e)return f;f++}return 0}function _isprint(f){return 31<f&&127>f}
var ___tm_struct_layout={__size__:44,tm_sec:0,tm_min:4,tm_hour:8,tm_mday:12,tm_mon:16,tm_year:20,tm_wday:24,tm_yday:28,tm_isdst:32,tm_gmtoff:36,tm_zone:40},___tm_timezones={};
function _gmtime_r(f,e){var b=new Date(1E3*HEAP32[f>>2]),c=___tm_struct_layout;HEAP32[e+c.tm_sec>>2]=b.getUTCSeconds();HEAP32[e+c.tm_min>>2]=b.getUTCMinutes();HEAP32[e+c.tm_hour>>2]=b.getUTCHours();HEAP32[e+c.tm_mday>>2]=b.getUTCDate();HEAP32[e+c.tm_mon>>2]=b.getUTCMonth();HEAP32[e+c.tm_year>>2]=b.getUTCFullYear()-1900;HEAP32[e+c.tm_wday>>2]=b.getUTCDay();HEAP32[e+c.tm_gmtoff>>2]=0;HEAP32[e+c.tm_isdst>>2]=0;var a=new Date(b.getFullYear(),0,1),b=Math.round((b.getTime()-a.getTime())/864E5);HEAP32[e+
c.tm_yday>>2]=b;"GMT"in ___tm_timezones||(___tm_timezones.GMT=allocate(intArrayFromString("GMT"),"i8",ALLOC_NORMAL));HEAP32[e+c.tm_zone>>2]=___tm_timezones.GMT;return e}var __tzname=null,__daylight=null,__timezone=null;
function _tzset(){if(!__tzname){__timezone=_malloc(4);HEAP32[__timezone>>2]=60*-(new Date).getTimezoneOffset();__daylight=_malloc(4);var f=new Date(2E3,6,1);HEAP32[__daylight>>2]=Number((new Date(2E3,0,1)).getTimezoneOffset()!=f.getTimezoneOffset());var f=allocate(intArrayFromString("GMT"),"i8",ALLOC_NORMAL),e=allocate(intArrayFromString("GMT"),"i8",ALLOC_NORMAL);__tzname=_malloc(8);HEAP32[__tzname>>2]=f;HEAP32[__tzname+4>>2]=e}}
function _localtime_r(f,e){_tzset();var b=___tm_struct_layout,c=new Date(1E3*HEAP32[f>>2]);HEAP32[e+b.tm_sec>>2]=c.getSeconds();HEAP32[e+b.tm_min>>2]=c.getMinutes();HEAP32[e+b.tm_hour>>2]=c.getHours();HEAP32[e+b.tm_mday>>2]=c.getDate();HEAP32[e+b.tm_mon>>2]=c.getMonth();HEAP32[e+b.tm_year>>2]=c.getFullYear()-1900;HEAP32[e+b.tm_wday>>2]=c.getDay();var a=new Date(c.getFullYear(),0,1),d=Math.floor((c.getTime()-a.getTime())/864E5);HEAP32[e+b.tm_yday>>2]=d;HEAP32[e+b.tm_gmtoff>>2]=60*a.getTimezoneOffset();
c=Number(a.getTimezoneOffset()!=c.getTimezoneOffset());HEAP32[e+b.tm_isdst>>2]=c;"GMT"in ___tm_timezones||(___tm_timezones.GMT=allocate(intArrayFromString("GMT"),"i8",ALLOC_NORMAL));HEAP32[e+b.tm_zone>>2]=___tm_timezones.GMT;return e}
function _mktime(f){_tzset();var e=___tm_struct_layout,b=HEAP32[f+e.tm_year>>2],c=(new Date(1900<=b?b:b+1900,HEAP32[f+e.tm_mon>>2],HEAP32[f+e.tm_mday>>2],HEAP32[f+e.tm_hour>>2],HEAP32[f+e.tm_min>>2],HEAP32[f+e.tm_sec>>2],0)).getTime()/1E3;HEAP32[f+e.tm_wday>>2]=(new Date(c)).getDay();b=Math.round((c-(new Date(b,0,1)).getTime())/864E5);HEAP32[f+e.tm_yday>>2]=b;return c}
function _gettimeofday(f){var e=Runtime.calculateStructAlignment({fields:["i32","i32"]}),b=Date.now();HEAP32[f+e[0]>>2]=Math.floor(b/1E3);HEAP32[f+e[1]>>2]=Math.floor(1E3*(b-1E3*Math.floor(b/1E3)));return 0}function _strncpy(f,e,b){for(var c=!1,a,d=0;d<b;d++)a=c?0:HEAP8[e+d],HEAP8[f+d]=a,c=c||0==HEAP8[e+d];return f}function _fread(f,e,b,c){b*=e;if(0==b)return 0;f=_read(c,f,b);c=FS.streams[c];if(-1==f)return c&&(c.error=!0),0;f<b&&(c.eof=!0);return Math.floor(f/e)}var _llvm_dbg_declare,_llvm_expect_i32;
function _sysconf(f){switch(f){case 8:return PAGE_SIZE;case 54:case 56:case 21:case 61:case 63:case 22:case 67:case 23:case 24:case 25:case 26:case 27:case 69:case 28:case 101:case 70:case 71:case 29:case 30:case 199:case 75:case 76:case 32:case 43:case 44:case 80:case 46:case 47:case 45:case 48:case 49:case 42:case 82:case 33:case 7:case 108:case 109:case 107:case 112:case 119:case 121:return 200809;case 13:case 104:case 94:case 95:case 34:case 35:case 77:case 81:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 91:case 94:case 95:case 110:case 111:case 113:case 114:case 115:case 116:case 117:case 118:case 120:case 40:case 16:case 79:case 19:return-1;
case 92:case 93:case 5:case 72:case 6:case 74:case 92:case 93:case 96:case 97:case 98:case 99:case 102:case 103:case 105:return 1;case 38:case 66:case 50:case 51:case 4:return 1024;case 15:case 64:case 41:return 32;case 55:case 37:case 17:return 2147483647;case 18:case 1:return 47839;case 59:case 57:return 99;case 68:case 58:return 2048;case 0:return 2097152;case 3:return 65536;case 14:return 32768;case 73:return 32767;case 39:return 16384;case 60:return 1E3;case 106:return 700;case 52:return 256;
case 62:return 255;case 2:return 100;case 65:return 64;case 36:return 20;case 100:return 16;case 20:return 6;case 53:return 4}___setErrNo(ERRNO_CODES.EINVAL);return-1}function _time(f){var e=Math.floor(Date.now()/1E3);f&&(HEAP32[f>>2]=e);return e}function _sbrk(f){var e=_sbrk;e.called||(STATICTOP=alignMemoryPage(STATICTOP),e.called=!0,_sbrk.DYNAMIC_START=STATICTOP);e=STATICTOP;0!=f&&Runtime.staticAlloc(f);return e}function ___gxx_personality_v0(){}
function ___cxa_allocate_exception(f){return _malloc(f)}function _llvm_eh_exception(){return HEAP32[_llvm_eh_exception.buf>>2]}function __ZSt18uncaught_exceptionv(){return!!__ZSt18uncaught_exceptionv.uncaught_exception}
function ___cxa_is_number_type(f){var e=!1;try{f==__ZTIi&&(e=!0)}catch(b){}try{f==__ZTIj&&(e=!0)}catch(c){}try{f==__ZTIl&&(e=!0)}catch(a){}try{f==__ZTIm&&(e=!0)}catch(d){}try{f==__ZTIx&&(e=!0)}catch(g){}try{f==__ZTIy&&(e=!0)}catch(h){}try{f==__ZTIf&&(e=!0)}catch(i){}try{f==__ZTId&&(e=!0)}catch(j){}try{f==__ZTIe&&(e=!0)}catch(l){}try{f==__ZTIc&&(e=!0)}catch(k){}try{f==__ZTIa&&(e=!0)}catch(n){}try{f==__ZTIh&&(e=!0)}catch(r){}try{f==__ZTIs&&(e=!0)}catch(t){}try{f==__ZTIt&&(e=!0)}catch(p){}return e}
function ___cxa_does_inherit(f,e,b){if(0==b)return!1;if(0==e||e==f)return!0;switch(___cxa_is_number_type(e)?e:HEAP32[HEAP32[e>>2]-8>>2]){case 0:return 0==HEAP32[HEAP32[f>>2]-8>>2]?___cxa_does_inherit(HEAP32[f+8>>2],HEAP32[e+8>>2],b):!1;case 1:return!1;case 2:return ___cxa_does_inherit(f,HEAP32[e+8>>2],b);default:return!1}}
function ___cxa_find_matching_catch(f,e,b){0!=e&&!___cxa_is_number_type(e)&&0==HEAP32[HEAP32[e>>2]-8>>2]&&(f=HEAP32[f>>2]);for(var c=0;c<b.length;c++)if(___cxa_does_inherit(b[c],e,f))return{f0:f,f1:b[c]};return{f0:f,f1:e}}
function ___cxa_throw(f,e,b){if(!___cxa_throw.initialized){try{HEAP32[__ZTVN10__cxxabiv119__pointer_type_infoE>>2]=0}catch(c){}try{HEAP32[__ZTVN10__cxxabiv117__class_type_infoE>>2]=1}catch(a){}try{HEAP32[__ZTVN10__cxxabiv120__si_class_type_infoE>>2]=2}catch(d){}___cxa_throw.initialized=!0}Module.printErr("Compiled code throwing an exception, "+[f,e,b]+", at "+Error().stack);HEAP32[_llvm_eh_exception.buf>>2]=f;HEAP32[_llvm_eh_exception.buf+4>>2]=e;HEAP32[_llvm_eh_exception.buf+8>>2]=b;"uncaught_exception"in
__ZSt18uncaught_exceptionv?__ZSt18uncaught_exceptionv.uncaught_exception++:__ZSt18uncaught_exceptionv.uncaught_exception=1;throw f;}function ___cxa_call_unexpected(f){ABORT=!0;throw f;}function ___cxa_begin_catch(f){__ZSt18uncaught_exceptionv.uncaught_exception--;return f}function ___cxa_free_exception(f){return _free(f)}
function ___cxa_end_catch(){if(___cxa_end_catch.rethrown)___cxa_end_catch.rethrown=!1;else{__THREW__=!1;HEAP32[_llvm_eh_exception.buf+4>>2]=0;var f=HEAP32[_llvm_eh_exception.buf>>2],e=HEAP32[_llvm_eh_exception.buf+8>>2];e&&(FUNCTION_TABLE[e](f),HEAP32[_llvm_eh_exception.buf+8>>2]=0);f&&(___cxa_free_exception(f),HEAP32[_llvm_eh_exception.buf>>2]=0)}}
var __ZNSt9exceptionD2Ev,Browser={mainLoop:{scheduler:null,shouldPause:!1,paused:!1,queue:[],pause:function(){Browser.mainLoop.shouldPause=!0},resume:function(){Browser.mainLoop.paused&&(Browser.mainLoop.paused=!1,Browser.mainLoop.scheduler());Browser.mainLoop.shouldPause=!1},updateStatus:function(){if(Module.setStatus){var f=Module.statusMessage||"Please wait...",e=Browser.mainLoop.remainingBlockers,b=Browser.mainLoop.expectedBlockers;e?e<b?Module.setStatus(f+" ("+(b-e)+"/"+b+")"):Module.setStatus(f):
Module.setStatus("")}}},pointerLock:!1,moduleContextCreatedCallbacks:[],workers:[],ensureObjects:function(){function f(b){return{jpg:"image/jpeg",png:"image/png",bmp:"image/bmp",ogg:"audio/ogg",wav:"audio/wav",mp3:"audio/mpeg"}[b.substr(-3)]}if(!Browser.ensured){Browser.ensured=!0;try{new Blob,Browser.hasBlobConstructor=!0}catch(e){Browser.hasBlobConstructor=!1,console.log("warning: no blob constructor, cannot create blobs with mimetypes")}Browser.BlobBuilder="undefined"!=typeof MozBlobBuilder?MozBlobBuilder:
"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:!Browser.hasBlobConstructor?console.log("warning: no BlobBuilder"):null;Browser.URLObject="undefined"!=typeof window?window.URL?window.URL:window.webkitURL:console.log("warning: cannot create object URLs");Module.preloadPlugins||(Module.preloadPlugins=[]);Module.preloadPlugins.push({canHandle:function(b){return b.substr(-4)in{".jpg":1,".png":1,".bmp":1}},handle:function(b,c,a,d){var e=null;if(Browser.hasBlobConstructor)try{e=new Blob([b],{type:f(c)})}catch(h){Runtime.warnOnce("Blob constructor present but fails: "+
h+"; falling back to blob builder")}e||(e=new Browser.BlobBuilder,e.append((new Uint8Array(b)).buffer),e=e.getBlob());var i=Browser.URLObject.createObjectURL(e);assert("string"==typeof i,"createObjectURL must return a url as a string");var j=new Image;j.onload=function(){assert(j.complete,"Image "+c+" could not be decoded");var d=document.createElement("canvas");d.width=j.width;d.height=j.height;d.getContext("2d").drawImage(j,0,0);Module.preloadedImages[c]=d;Browser.URLObject.revokeObjectURL(i);a&&
a(b)};j.onerror=function(){console.log("Image "+i+" could not be decoded");d&&d()};j.src=i}});Module.preloadPlugins.push({canHandle:function(b){return b.substr(-4)in{".ogg":1,".wav":1,".mp3":1}},handle:function(b,c,a,d){function e(d){i||(i=!0,Module.preloadedAudios[c]=d,a&&a(b))}function h(){i||(i=!0,Module.preloadedAudios[c]=new Audio,d&&d())}var i=!1;if(Browser.hasBlobConstructor){try{var j=new Blob([b],{type:f(c)})}catch(l){return h()}j=Browser.URLObject.createObjectURL(j);assert("string"==typeof j,
"createObjectURL must return a url as a string");var k=new Audio;k.addEventListener("canplaythrough",function(){e(k)},!1);k.onerror=function(){if(!i){console.log("warning: browser could not fully decode audio "+c+", trying slower base64 approach");for(var a="data:audio/x-"+c.substr(-3)+";base64,",d="",f=0,h=0,j=0;j<b.length;j++){f=f<<8|b[j];for(h+=8;6<=h;)var l=f>>h-6&63,h=h-6,d=d+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[l]}2==h?(d+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[(f&
3)<<4],d+="=="):4==h&&(d+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[(f&15)<<2],d+="=");k.src=a+d;e(k)}};k.src=j;setTimeout(function(){e(k)},1E4)}else return h()}})}},createContext:function(f,e,b){try{var c=f.getContext(e?"experimental-webgl":"2d");if(!c)throw":(";}catch(a){return Module.print("Could not create canvas - "+a),null}e&&(f.style.backgroundColor="black",f.addEventListener("webglcontextlost",function(){alert("WebGL context lost. You will need to reload the page.")},
!1));b&&(Module.ctx=c,Module.useWebGL=e,Browser.moduleContextCreatedCallbacks.forEach(function(a){a()}));return c},requestFullScreen:function(){function f(){var c=!1;if((document.webkitFullScreenElement||document.webkitFullscreenElement||document.mozFullScreenElement||document.mozFullscreenElement||document.fullScreenElement||document.fullscreenElement)===b)b.requestPointerLock=b.requestPointerLock||b.mozRequestPointerLock||b.webkitRequestPointerLock,b.requestPointerLock(),c=!0;if(Module.onFullScreen)Module.onFullScreen(c)}
function e(){Browser.pointerLock=document.pointerLockElement===b||document.mozPointerLockElement===b||document.webkitPointerLockElement===b}var b=Module.canvas;document.addEventListener("fullscreenchange",f,!1);document.addEventListener("mozfullscreenchange",f,!1);document.addEventListener("webkitfullscreenchange",f,!1);document.addEventListener("pointerlockchange",e,!1);document.addEventListener("mozpointerlockchange",e,!1);document.addEventListener("webkitpointerlockchange",e,!1);b.requestFullScreen=
b.requestFullScreen||b.mozRequestFullScreen||(b.webkitRequestFullScreen?function(){b.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT)}:null);b.requestFullScreen()},requestAnimationFrame:function(f){window.requestAnimationFrame||(window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame||window.oRequestAnimationFrame||window.setTimeout);window.requestAnimationFrame(f)},getMovementX:function(f){return f.movementX||
f.mozMovementX||f.webkitMovementX||0},getMovementY:function(f){return f.movementY||f.mozMovementY||f.webkitMovementY||0},xhrLoad:function(f,e,b){var c=new XMLHttpRequest;c.open("GET",f,!0);c.responseType="arraybuffer";c.onload=function(){200==c.status?e(c.response):b()};c.onerror=b;c.send(null)},asyncLoad:function(f,e,b){Browser.xhrLoad(f,function(b){assert(b,'Loading data file "'+f+'" failed (no arrayBuffer).');e(new Uint8Array(b));removeRunDependency("al "+f)},function(){if(b)b();else throw'Loading data file "'+
f+'" failed.';});addRunDependency("al "+f)},resizeListeners:[],updateResizeListeners:function(){var f=Module.canvas;Browser.resizeListeners.forEach(function(e){e(f.width,f.height)})},setCanvasSize:function(f,e,b){var c=Module.canvas;c.width=f;c.height=e;b||Browser.updateResizeListeners()}};__ATINIT__.unshift({func:function(){!Module.noFSInit&&!FS.init.initialized&&FS.init()}});__ATMAIN__.push({func:function(){FS.ignorePermissions=!1}});__ATEXIT__.push({func:function(){FS.quit()}});
Module.FS_createFolder=FS.createFolder;Module.FS_createPath=FS.createPath;Module.FS_createDataFile=FS.createDataFile;Module.FS_createPreloadedFile=FS.createPreloadedFile;Module.FS_createLazyFile=FS.createLazyFile;Module.FS_createLink=FS.createLink;Module.FS_createDevice=FS.createDevice;___setErrNo(0);_fputc.ret=allocate([0],"i8",ALLOC_STATIC);_fgetc.ret=allocate([0],"i8",ALLOC_STATIC);_llvm_eh_exception.buf=allocate(12,"void*",ALLOC_STATIC);Module.requestFullScreen=function(){Browser.requestFullScreen()};
Module.requestAnimationFrame=function(f){Browser.requestAnimationFrame(f)};Module.pauseMainLoop=function(){Browser.mainLoop.pause()};Module.resumeMainLoop=function(){Browser.mainLoop.resume()};function _driver_open(){return _mrb_open()}
function _driver_execute_string(f,e){var b=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b,g=b+8;a=f;_mrb_load_string(d,a,e);c=0!=(HEAP32[(a+48|0)>>2]|0)?3:4;break;case 3:c=a;_mrb_obj_value(g,HEAP32[(a+48|0)>>2]);_mrb_p(c,g);HEAP32[(a+48|0)>>2]=0;c=5;break;case 4:_printf(__str|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>
2]=0,tempInt));_mrb_p(a,d);c=5;break;case 5:return STACKTOP=b,0;default:assert(0,"bad label: "+c)}}
function _mrb_obj_value(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b,g;g=a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|HEAP32[g>>2]&255;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+
c)}}function _driver_close(f){_mrb_close(f);return 0}
function _mrb_p(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];_mrb_funcall(b,f,e,__str1|0,0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));c=e;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[c>>2]=HEAP32[b>>2];HEAP32[c+4>>2]=HEAP32[b+4>>2];_printstr(f,e);_putc(10,HEAP32[_stdout>>2]);STACKTOP=b}
function _printstr(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a,c=17==(HEAP32[(e+4|0)>>2]&255|0)?3:4;break;case 3:a=HEAP32[(e|0)>>2];c=HEAP32[(a+20|0)>>2];a=HEAP32[(a+12|0)>>2];_fwrite(c,a,1,HEAP32[_stdout>>2]);c=4;break;case 4:STACKTOP=b;return;default:assert(0,
"bad label: "+c)}}
function _mrb_printstr(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str12|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_printstr(e,c);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>
2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=c}function _mrb_init_print(f){_mrb_define_method(f,HEAP32[(f+124|0)>>2],__str2|0,206,524288)}function _mrb_show_version(){var f=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");_printf(__str3|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));STACKTOP=f}
function _mrb_show_copyright(){var f=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");_printf(__str4|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));STACKTOP=f}
function _mrb_open_allocf(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g;a=f;d=e;g=FUNCTION_TABLE[a](0,0,608,d);b=0==(g|0)?3:4;break;case 3:c=0;b=5;break;case 4:c=g;assert(!0,"memcpy given 608 bytes to copy. Problem with quantum=1 corrections perhaps?");b=_mrb_open_allocf_mrb_state_zero>>2;c>>=2;for(var h=b+152;b<h;b++,c++)HEAP32[c]=HEAP32[b];HEAP32[(g+604|0)>>2]=d;HEAP32[(g+4|0)>>2]=a;HEAP32[(g+552|0)>>2]=1;_mrb_init_heap(g);_mrb_init_core(g);_mrb_init_ext(g);c=g;b=5;break;case 5:return c;default:assert(0,
"bad label: "+b)}}function _mrb_alloca(f,e){var b;b=_mrb_malloc(f,e+4|0);HEAP32[(b|0)>>2]=HEAP32[(f+584|0)>>2];HEAP32[(f+584|0)>>2]=b;return b+4|0}function _mrb_open(){return _mrb_open_allocf(286,0)}function _allocf(f,e,b){for(f=2;;)switch(f){case 2:var c,a,d;a=e;d=b;f=0==(d|0)?3:4;break;case 3:_free(a);c=0;f=5;break;case 4:c=_realloc(a,d);f=5;break;case 5:return c;default:assert(0,"bad label: "+f)}}
function _mrb_close(f){var e;for(e=2;;)switch(e){case 2:var b,c;b=f;_mrb_gc_free_gv(b);_mrb_free(b,HEAP32[(b+12|0)>>2]);_mrb_free(b,HEAP32[(b+24|0)>>2]);c=0;e=3;break;case 3:e=c>>>0<HEAP32[(b+60|0)>>2]>>>0?4:8;break;case 4:e=0!=((HEAP32[(HEAP32[(HEAP32[(b+56|0)>>2]+(c<<2)|0)>>2]+4|0)>>2]>>>16&255)<<24>>24&1|0)?6:5;break;case 5:_mrb_free(b,HEAP32[(HEAP32[(HEAP32[(b+56|0)>>2]+(c<<2)|0)>>2]+8|0)>>2]);e=6;break;case 6:_mrb_free(b,HEAP32[(HEAP32[(HEAP32[(b+56|0)>>2]+(c<<2)|0)>>2]+12|0)>>2]);_mrb_free(b,
HEAP32[(HEAP32[(HEAP32[(b+56|0)>>2]+(c<<2)|0)>>2]+16|0)>>2]);_mrb_free(b,HEAP32[(HEAP32[(HEAP32[(b+56|0)>>2]+(c<<2)|0)>>2]+24|0)>>2]);_mrb_free(b,HEAP32[(HEAP32[(b+56|0)>>2]+(c<<2)|0)>>2]);e=7;break;case 7:c=c+1|0;e=3;break;case 8:_mrb_free(b,HEAP32[(b+56|0)>>2]);_mrb_free(b,HEAP32[(b+32|0)>>2]);_mrb_free(b,HEAP32[(b+40|0)>>2]);_mrb_free_symtbl(b);_mrb_free_heap(b);_mrb_alloca_free(b);_mrb_free(b,b);return;default:assert(0,"bad label: "+e)}}_mrb_close.X=1;
function _mrb_alloca_free(f){var e;for(e=2;;)switch(e){case 2:var b,c;b=f;c=HEAP32[(b+584|0)>>2];e=3;break;case 3:e=0!=(c|0)?4:5;break;case 4:e=c;c=HEAP32[(c|0)>>2];_mrb_free(b,e);e=3;break;case 5:return;default:assert(0,"bad label: "+e)}}
function _mrb_add_irep(f){var e;for(e=2;;)switch(e){case 2:var b,c,a,d;b=f;e=0!=(HEAP32[(b+56|0)>>2]|0)?6:3;break;case 3:c=256;e=HEAP32[(b+60|0)>>2]>>>0>c>>>0?4:5;break;case 4:c=HEAP32[(b+60|0)>>2]+1|0;e=5;break;case 5:e=_mrb_calloc(b,c,4);HEAP32[(b+56|0)>>2]=e;HEAP32[(b+64|0)>>2]=c;e=16;break;case 6:e=HEAP32[(b+64|0)>>2]>>>0<=HEAP32[(b+60|0)>>2]>>>0?7:15;break;case 7:d=HEAP32[(b+64|0)>>2];e=8;break;case 8:e=HEAP32[(b+64|0)>>2]>>>0<=HEAP32[(b+60|0)>>2]>>>0?9:10;break;case 9:e=b+64|0;HEAP32[e>>2]=
HEAP32[e>>2]<<1|0;e=8;break;case 10:a=_mrb_realloc(b,HEAP32[(b+56|0)>>2],HEAP32[(b+64|0)>>2]<<2|0);HEAP32[(b+56|0)>>2]=a;a=d;e=11;break;case 11:e=a>>>0<HEAP32[(b+64|0)>>2]>>>0?12:14;break;case 12:HEAP32[(HEAP32[(b+56|0)>>2]+(a<<2)|0)>>2]=0;e=13;break;case 13:a=a+1|0;e=11;break;case 14:e=15;break;case 15:e=16;break;case 16:d=f=_mrb_malloc(b,40);assert(!0,"memcpy given 40 bytes to copy. Problem with quantum=1 corrections perhaps?");c=(_mrb_add_irep_mrb_irep_zero|0)>>2;d>>=2;for(a=c+10;c<a;c++,d++)HEAP32[d]=
HEAP32[c];HEAP32[(HEAP32[(b+56|0)>>2]+(HEAP32[(b+60|0)>>2]<<2)|0)>>2]=f;c=b+60|0;b=HEAP32[c>>2];HEAP32[c>>2]=b+1|0;c=f;HEAP32[c>>2]=HEAP32[c>>2]&-65536|b&65535;return f;default:assert(0,"bad label: "+e)}}_mrb_add_irep.X=1;
function _mrb_top_self(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]=HEAP32[b>>2]&-256|8;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _kh_alloc_n2s(f){var e;e=HEAP32[(f|0)>>2];HEAP32[(f+8|0)>>2]=0;HEAP32[(f+4|0)>>2]=0;HEAP32[(f+12|0)>>2]=e>>>2|e>>>1;var b=_mrb_malloc(HEAP32[(f+40|0)>>2],Math.floor(((e|0)>>>0)/4));HEAP32[(f+16|0)>>2]=b;HEAP32[(f+20|0)>>2]=HEAP32[(f+16|0)>>2]+Math.floor((e>>>0)/8)|0;_memset(HEAP32[(f+16|0)>>2],-1,Math.floor((e>>>0)/8)|0,1);_memset(HEAP32[(f+20|0)>>2],0,Math.floor((e>>>0)/8)|0,1);b=_mrb_malloc(HEAP32[(f+40|0)>>2],e<<3|0);HEAP32[(f+24|0)>>2]=b;b=_mrb_malloc(HEAP32[(f+40|0)>>2],e<<1|0);HEAP32[(f+
28|0)>>2]=b;HEAP32[(f+32|0)>>2]=e-1|0;HEAP32[(f+36|0)>>2]=Math.floor((e>>>0)/2)-1|0}_kh_alloc_n2s.X=1;function _kh_init_n2s_size(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;d=_mrb_calloc(c,1,44);b=8>a>>>0?3:4;break;case 3:a=8;b=4;break;case 4:b=5;break;case 5:a=a-1|0;a|=a>>>1;a|=a>>>2;a|=a>>>4;a|=a>>>8;a|=a>>>16;a=a+1|0;b=6;break;case 6:return HEAP32[(d|0)>>2]=a,HEAP32[(d+40|0)>>2]=c,_kh_alloc_n2s(d),d;default:assert(0,"bad label: "+b)}}_kh_init_n2s_size.X=1;
function _kh_init_n2s(f){return _kh_init_n2s_size(f,32)}function _kh_destroy_n2s(f){var e;for(e=2;;)switch(e){case 2:var b;b=f;e=0!=(b|0)?3:4;break;case 3:_mrb_free(HEAP32[(b+40|0)>>2],HEAP32[(b+24|0)>>2]);_mrb_free(HEAP32[(b+40|0)>>2],HEAP32[(b+28|0)>>2]);_mrb_free(HEAP32[(b+40|0)>>2],HEAP32[(b+16|0)>>2]);_mrb_free(HEAP32[(b+40|0)>>2],b);e=4;break;case 4:return;default:assert(0,"bad label: "+e)}}
function _kh_clear_n2s(f){var e;for(e=2;;)switch(e){case 2:var b;b=f;e=0!=(b|0)?3:5;break;case 3:e=0!=(HEAP32[(b+16|0)>>2]|0)?4:5;break;case 4:_memset(HEAP32[(b+16|0)>>2],-1,Math.floor((HEAP32[(b|0)>>2]>>>0)/8)|0,1);_memset(HEAP32[(b+20|0)>>2],0,Math.floor((HEAP32[(b|0)>>2]>>>0)/8)|0,1);HEAP32[(b+8|0)>>2]=0;HEAP32[(b+4|0)>>2]=0;e=5;break;case 5:return;default:assert(0,"bad label: "+e)}}
function _sym_hash_func(f,e,b){f=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a=f,d,g,h;HEAP32[(a|0)>>2]=e;HEAP32[(a+4|0)>>2]=b;d=0;h=HEAP32[(a+4|0)>>2];g=0;c=3;break;case 3:c=g>>>0<HEAP32[(a|0)>>2]>>>0?4:6;break;case 4:d=(d<<5)-d|0;c=h;h=c+1|0;d=d+(HEAP8[c]<<24>>24)|0;c=5;break;case 5:g=g+1|0;c=3;break;case 6:return e=d,STACKTOP=f,e;default:assert(0,"bad label: "+c)}}
function _kh_del_n2s(f,e){var b=HEAP32[(f+20|0)>>2]+Math.floor((e>>>0)/8)|0;HEAP8[b]=(HEAP8[b]&255|HEAP8[___m+(e>>>0)%8|0]&255)&255;b=f+4|0;HEAP32[b>>2]=HEAP32[b>>2]-1|0}
function _kh_get_n2s(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h=c,i;g=f;HEAP32[(h|0)>>2]=e;HEAP32[(h+4|0)>>2]=b;i=_sym_hash_func(HEAP32[(g+40|0)>>2],HEAP32[(h|0)>>2],HEAP32[(h+4|0)>>2])&HEAP32[(g+32|0)>>2];a=3;break;case 3:a=0!=(HEAP8[HEAP32[(g+16|0)>>2]+Math.floor((i>>>0)/8)|0]&255&HEAP8[___m+(i>>>0)%8|0]&255|0)^1?4:10;break;case 4:a=0!=(HEAP8[HEAP32[(g+20|0)>>2]+Math.floor((i>>>
0)/8)|0]&255&HEAP8[___m+(i>>>0)%8|0]&255|0)?9:5;break;case 5:a=(HEAP32[(HEAP32[(g+24|0)>>2]+(i<<3)|0)>>2]|0)==(HEAP32[(h|0)>>2]|0)?6:8;break;case 6:a=0==(_memcmp(HEAP32[((HEAP32[(g+24|0)>>2]+(i<<3)|0)+4|0)>>2],HEAP32[(h+4|0)>>2],HEAP32[(HEAP32[(g+24|0)>>2]+(i<<3)|0)>>2])|0)?7:8;break;case 7:d=i;a=11;break;case 8:a=9;break;case 9:i=(i+HEAP32[(g+36|0)>>2]|0)&HEAP32[(g+32|0)>>2];a=3;break;case 10:d=HEAP32[(g|0)>>2];a=11;break;case 11:return f=d,STACKTOP=c,f;default:assert(0,"bad label: "+a)}}
_kh_get_n2s.X=1;
function _kh_resize_n2s(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h,i,j;c=f;a=e;b=8>a>>>0?3:4;break;case 3:a=8;b=4;break;case 4:b=5;break;case 5:a=a-1|0;a|=a>>>1;a|=a>>>2;a|=a>>>4;a|=a>>>8;a|=a>>>16;a=a+1|0;b=6;break;case 6:d=HEAP32[(c+16|0)>>2];g=HEAP32[(c+24|0)>>2];h=HEAP32[(c+28|0)>>2];i=HEAP32[(c|0)>>2];HEAP32[(c|0)>>2]=a;_kh_alloc_n2s(c);j=0;b=7;break;case 7:b=j>>>0<i>>>0?8:12;break;case 8:b=0!=(HEAP8[d+Math.floor((j>>>0)/8)|0]&255&HEAP8[___m+(j>>>0)%8|0]&255|0)?10:9;break;case 9:b=g+
(j<<3)|0;b=_kh_put_n2s(c,HEAP32[(b|0)>>2],HEAP32[(b+4|0)>>2]);HEAP16[(HEAP32[(c+28|0)>>2]+(b<<1)|0)>>1]=HEAP16[(h+(j<<1)|0)>>1];b=10;break;case 10:b=11;break;case 11:j=j+1|0;b=7;break;case 12:_mrb_free(HEAP32[(c+40|0)>>2],d);_mrb_free(HEAP32[(c+40|0)>>2],g);_mrb_free(HEAP32[(c+40|0)>>2],h);return;default:assert(0,"bad label: "+b)}}_kh_resize_n2s.X=1;
function _kh_put_n2s(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g=c,h;d=f;HEAP32[(g|0)>>2]=e;HEAP32[(g+4|0)>>2]=b;a=HEAP32[(d+8|0)>>2]>>>0>=HEAP32[(d+12|0)>>2]>>>0?3:4;break;case 3:_kh_resize_n2s(d,HEAP32[(d|0)>>2]<<1|0);a=4;break;case 4:h=_sym_hash_func(HEAP32[(d+40|0)>>2],HEAP32[(g|0)>>2],HEAP32[(g+4|0)>>2])&HEAP32[(d+32|0)>>2];a=5;break;case 5:if(0!=(HEAP8[HEAP32[(d+16|0)>>2]+
Math.floor((h>>>0)/8)|0]&255&HEAP8[___m+(h>>>0)%8|0]&255|0)){var i=1;a=7}else a=6;break;case 6:i=0!=(HEAP8[HEAP32[(d+20|0)>>2]+Math.floor((h>>>0)/8)|0]&255&HEAP8[___m+(h>>>0)%8|0]&255|0);a=7;break;case 7:a=i^1?8:12;break;case 8:a=(HEAP32[(HEAP32[(d+24|0)>>2]+(h<<3)|0)>>2]|0)==(HEAP32[(g|0)>>2]|0)?9:11;break;case 9:a=0==(_memcmp(HEAP32[((HEAP32[(d+24|0)>>2]+(h<<3)|0)+4|0)>>2],HEAP32[(g+4|0)>>2],HEAP32[(HEAP32[(d+24|0)>>2]+(h<<3)|0)>>2])|0)?10:11;break;case 10:a=12;break;case 11:h=(h+HEAP32[(d+36|0)>>
2]|0)&HEAP32[(d+32|0)>>2];a=5;break;case 12:a=0!=(HEAP8[HEAP32[(d+16|0)>>2]+Math.floor((h>>>0)/8)|0]&255&HEAP8[___m+(h>>>0)%8|0]&255|0)?13:14;break;case 13:a=HEAP32[(d+24|0)>>2]+(h<<3)|0;var j=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[j>>2];HEAP32[a+4>>2]=HEAP32[j+4>>2];a=HEAP32[(d+16|0)>>2]+Math.floor((h>>>0)/8)|0;HEAP8[a]=HEAP8[a]&255&(HEAP8[___m+(h>>>0)%8|0]&255^-1)&255;a=d+4|0;HEAP32[a>>2]=HEAP32[a>>2]+1|0;a=d+8|0;HEAP32[a>>2]=
HEAP32[a>>2]+1|0;a=17;break;case 14:a=0!=(HEAP8[HEAP32[(d+20|0)>>2]+Math.floor((h>>>0)/8)|0]&255&HEAP8[___m+(h>>>0)%8|0]&255|0)?15:16;break;case 15:a=HEAP32[(d+24|0)>>2]+(h<<3)|0;j=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[j>>2];HEAP32[a+4>>2]=HEAP32[j+4>>2];a=HEAP32[(d+20|0)>>2]+Math.floor((h>>>0)/8)|0;HEAP8[a]=HEAP8[a]&255&(HEAP8[___m+(h>>>0)%8|0]&255^-1)&255;a=d+4|0;HEAP32[a>>2]=HEAP32[a>>2]+1|0;a=16;break;case 16:a=17;break;case 17:return f=
h,STACKTOP=c,f;default:assert(0,"bad label: "+a)}}_kh_put_n2s.X=1;
function _kh_copy_n2s(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;c=_kh_init_n2s(c);d=0;b=3;break;case 3:b=(d|0)!=(HEAP32[(a|0)>>2]|0)?4:9;break;case 4:b=0!=(HEAP8[HEAP32[(a+16|0)>>2]+Math.floor((d>>>0)/8)|0]&255&HEAP8[___m+(d>>>0)%8|0]&255|0)?7:5;break;case 5:b=0!=(HEAP8[HEAP32[(a+20|0)>>2]+Math.floor((d>>>0)/8)|0]&255&HEAP8[___m+(d>>>0)%8|0]&255|0)?7:6;break;case 6:b=HEAP32[(a+24|0)>>2]+(d<<3)|0;b=_kh_put_n2s(c,HEAP32[(b|0)>>2],HEAP32[(b+4|0)>>2]);HEAP16[(HEAP32[(c+28|0)>>2]+(b<<1)|
0)>>1]=HEAP16[(HEAP32[(a+28|0)>>2]+(d<<1)|0)>>1];b=7;break;case 7:b=8;break;case 8:d=d+1|0;b=3;break;case 9:return c;default:assert(0,"bad label: "+b)}}_kh_copy_n2s.X=1;
function _mrb_intern2(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j,l=c,k;g=f;h=e;i=b;j=HEAP32[(g+592|0)>>2];HEAP32[(l|0)>>2]=i;HEAP32[(l+4|0)>>2]=h;k=_kh_get_n2s(j,HEAP32[(l|0)>>2],HEAP32[(l+4|0)>>2]);a=(k|0)!=(HEAP32[(j|0)>>2]|0)?3:4;break;case 3:d=HEAP16[(HEAP32[(j+28|0)>>2]+(k<<1)|0)>>1];a=5;break;case 4:a=g+588|0;k=HEAP16[a>>1]+1&65535;a=HEAP16[a>>1]=k;d=k=_mrb_malloc(g,
i+1|0);var n=h,r=i;assert(0===r%1,"memcpy given "+r+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(d,n,r,1);HEAP8[k+i|0]=0;HEAP32[(l+4|0)>>2]=k;k=_kh_put_n2s(j,HEAP32[(l|0)>>2],HEAP32[(l+4|0)>>2]);d=HEAP16[(HEAP32[(j+28|0)>>2]+(k<<1)|0)>>1]=a;a=5;break;case 5:return f=d,STACKTOP=c,f;default:assert(0,"bad label: "+a)}}_mrb_intern2.X=1;function _mrb_intern(f,e){var b=_strlen(e);return _mrb_intern2(f,e,b)}
function _mrb_intern_str(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];c=_mrb_intern2(f,HEAP32[(HEAP32[(e|0)>>2]+20|0)>>2],HEAP32[(HEAP32[(e|0)>>2]+12|0)>>2]);STACKTOP=b;return c}
function _mrb_sym2name_len(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j,l=c;g=f;h=e;i=b;g=HEAP32[(g+592|0)>>2];j=0;a=3;break;case 3:a=(j|0)!=(HEAP32[(g|0)>>2]|0)?4:11;break;case 4:a=0!=(HEAP8[HEAP32[(g+16|0)>>2]+Math.floor((j>>>0)/8)|0]&255&HEAP8[___m+(j>>>0)%8|0]&255|0)?9:5;break;case 5:a=0!=(HEAP8[HEAP32[(g+20|0)>>2]+Math.floor((j>>>0)/8)|0]&255&HEAP8[___m+(j>>>0)%8|0]&255|
0)?9:6;break;case 6:a=(HEAP16[(HEAP32[(g+28|0)>>2]+(j<<1)|0)>>1]<<16>>16|0)==(h<<16>>16|0)?7:8;break;case 7:a=11;break;case 8:a=9;break;case 9:a=10;break;case 10:j=j+1|0;a=3;break;case 11:a=(j|0)==(HEAP32[(g|0)>>2]|0)?12:13;break;case 12:d=HEAP32[i>>2]=0;a=14;break;case 13:d=l;a=HEAP32[(g+24|0)>>2]+(j<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[a>>2];HEAP32[d+4>>2]=HEAP32[a+4>>2];HEAP32[i>>2]=HEAP32[(l|0)>>2];d=HEAP32[(l+4|0)>>2];
a=14;break;case 14:return f=d,STACKTOP=c,f;default:assert(0,"bad label: "+a)}}_mrb_sym2name_len.X=1;
function _mrb_free_symtbl(f){var e;for(e=2;;)switch(e){case 2:var b,c,a;b=f;c=HEAP32[(b+592|0)>>2];a=0;e=3;break;case 3:e=(a|0)!=(HEAP32[(c|0)>>2]|0)?4:9;break;case 4:e=0!=(HEAP8[HEAP32[(c+16|0)>>2]+Math.floor((a>>>0)/8)|0]&255&HEAP8[___m+(a>>>0)%8|0]&255|0)?7:5;break;case 5:e=0!=(HEAP8[HEAP32[(c+20|0)>>2]+Math.floor((a>>>0)/8)|0]&255&HEAP8[___m+(a>>>0)%8|0]&255|0)?7:6;break;case 6:_mrb_free(b,HEAP32[((HEAP32[(c+24|0)>>2]+(a<<3)|0)+4|0)>>2]);e=7;break;case 7:e=8;break;case 8:a=a+1|0;e=3;break;case 9:_kh_destroy_n2s(HEAP32[(b+
592|0)>>2]);return;default:assert(0,"bad label: "+e)}}_mrb_free_symtbl.X=1;function _mrb_init_symtbl(f){var e=_kh_init_n2s(f);HEAP32[(f+592|0)>>2]=e}
function _mrb_sym_to_s(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=_mrb_sym2name_len(e,HEAP16[(b|0)>>1],c);_mrb_str_new(f,e,b,HEAP32[c>>2]);STACKTOP=c}
function _mrb_sym2name(f,e){var b=STACKTOP;STACKTOP+=20;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d,g=b,h,i=b+4,j=b+12;d=f;h=_mrb_sym2name_len(d,e,g);c=0!=(h|0)?4:3;break;case 3:a=0;c=8;break;case 4:c=0!=(_symname_p(h)|0)?5:7;break;case 5:c=(_strlen(h)|0)==(HEAP32[g>>2]|0)?6:7;break;case 6:a=h;c=8;break;case 7:c=d;_mrb_str_new(j,d,h,HEAP32[g>>2]);_mrb_str_dump(i,c,j);a=HEAP32[(HEAP32[(i|0)>>2]+20|0)>>2];c=8;break;
case 8:return d=a,STACKTOP=b,d;default:assert(0,"bad label: "+c)}}
function _symname_p(f){var e;for(e=2;;)switch(e){case 2:var b,c,a;c=f;a=0;e=0!=(c|0)?4:3;break;case 3:b=0;e=69;break;case 4:e=HEAP8[c]<<24>>24;e=0==(e|0)?5:36==(e|0)?6:64==(e|0)?9:60==(e|0)?12:62==(e|0)?19:61==(e|0)?23:42==(e|0)?30:33==(e|0)?33:43==(e|0)||45==(e|0)?36:124==(e|0)?39:38==(e|0)?42:94==(e|0)||47==(e|0)||37==(e|0)||126==(e|0)||96==(e|0)?45:91==(e|0)?46:51;break;case 5:b=0;e=69;break;case 6:c=e=c+1|0;e=0!=(_is_special_global_name(e)|0)?7:8;break;case 7:b=1;e=69;break;case 8:e=52;break;
case 9:c=e=c+1|0;e=64==(HEAP8[e]<<24>>24|0)?10:11;break;case 10:c=c+1|0;e=11;break;case 11:e=52;break;case 12:c=e=c+1|0;e=HEAP8[e]<<24>>24;e=60==(e|0)?13:61==(e|0)?14:17;break;case 13:c=c+1|0;e=18;break;case 14:c=e=c+1|0;e=62==(HEAP8[e]<<24>>24|0)?15:16;break;case 15:c=c+1|0;e=16;break;case 16:e=18;break;case 17:e=18;break;case 18:e=68;break;case 19:c=e=c+1|0;e=HEAP8[e]<<24>>24;e=62==(e|0)||61==(e|0)?20:21;break;case 20:c=c+1|0;e=22;break;case 21:e=22;break;case 22:e=68;break;case 23:c=e=c+1|0;e=
HEAP8[e]<<24>>24;e=126==(e|0)?24:61==(e|0)?25:28;break;case 24:c=c+1|0;e=29;break;case 25:c=e=c+1|0;e=61==(HEAP8[e]<<24>>24|0)?26:27;break;case 26:c=c+1|0;e=27;break;case 27:e=29;break;case 28:b=0;e=69;break;case 29:e=68;break;case 30:c=e=c+1|0;e=42==(HEAP8[e]<<24>>24|0)?31:32;break;case 31:c=c+1|0;e=32;break;case 32:e=68;break;case 33:c=e=c+1|0;e=61==(HEAP8[e]<<24>>24|0)?34:35;break;case 34:c=c+1|0;e=35;break;case 35:e=68;break;case 36:c=e=c+1|0;e=64==(HEAP8[e]<<24>>24|0)?37:38;break;case 37:c=c+
1|0;e=38;break;case 38:e=68;break;case 39:c=e=c+1|0;e=124==(HEAP8[e]<<24>>24|0)?40:41;break;case 40:c=c+1|0;e=41;break;case 41:e=68;break;case 42:c=e=c+1|0;e=38==(HEAP8[e]<<24>>24|0)?43:44;break;case 43:c=c+1|0;e=44;break;case 44:e=68;break;case 45:c=c+1|0;e=68;break;case 46:c=e=c+1|0;e=93!=(HEAP8[e]<<24>>24|0)?47:48;break;case 47:b=0;e=69;break;case 48:c=e=c+1|0;e=61==(HEAP8[e]<<24>>24|0)?49:50;break;case 49:c=c+1|0;e=50;break;case 50:e=68;break;case 51:a=(0!=(_isupper(HEAP8[c]&255)|0)^1)&1;e=52;
break;case 52:e=95!=(HEAP8[c]<<24>>24|0)?53:55;break;case 53:e=0!=(_isalpha(HEAP8[c]&255)|0)?55:54;break;case 54:b=0;e=69;break;case 55:e=56;break;case 56:if(-1!=(HEAP8[c]<<24>>24|0))e=57;else{var d=0;e=60}break;case 57:if(0!=(_isalnum(HEAP8[c]&255)|0)){var g=1;e=59}else e=58;break;case 58:g=95==(HEAP8[c]<<24>>24|0);e=59;break;case 59:d=g;e=60;break;case 60:e=d?61:62;break;case 61:c=c+1|0;e=56;break;case 62:e=0!=(a|0)?63:67;break;case 63:e=HEAP8[c]<<24>>24;e=33==(e|0)||63==(e|0)||61==(e|0)?64:65;
break;case 64:c=c+1|0;e=65;break;case 65:e=66;break;case 66:e=67;break;case 67:e=68;break;case 68:b=0!=(HEAP8[c]<<24>>24|0)?0:1;e=69;break;case 69:return b;default:assert(0,"bad label: "+e)}}_symname_p.X=1;
function _mrb_init_symbol(f){var e=_mrb_define_class(f,__str9|0,HEAP32[(f+72|0)>>2]);HEAP32[(f+120|0)>>2]=e;_mrb_define_method(f,e,__str110|0,244,524288);_mrb_define_method(f,e,__str211|0,158,0);_mrb_define_method(f,e,__str312|0,158,0);_mrb_define_method(f,e,__str413|0,622,0);_mrb_define_method(f,e,__str5|0,532,0);_mrb_define_method(f,e,__str6|0,170,524288);e=_mrb_intern(f,__str7|0);HEAP16[(f+68|0)>>1]=e}
function _sym_equal(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d=c,a=e;_mrb_get_args(a,__str8|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=d,tempInt));a=0!=(_mrb_obj_equal(a,b,d)|0)?3:
4;break;case 3:_mrb_true_value(f);a=5;break;case 4:_mrb_false_value(f);a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _sym_to_sym(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=e}
function _sym_inspect(f,e,b){var c=STACKTOP;STACKTOP+=28;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h,i=c+8,j=c+12,l=c+20;d=e;h=_mrb_sym2name_len(d,HEAP16[(b|0)>>1],i);_mrb_str_new(j,d,0,HEAP32[i>>2]+1|0);a=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[j>>2];HEAP32[a+4>>2]=HEAP32[j+4>>2];HEAP8[HEAP32[(HEAP32[(g|0)>>2]+20|0)>>2]|0]=58;var a=HEAP32[(HEAP32[(g|0)>>2]+20|0)>>2]+1|0,j=h,k=HEAP32[i>>2];assert(0===k%1,"memcpy given "+k+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(a,j,k,1);a=0!=(_symname_p(h)|0)?3:4;break;case 3:a=(_strlen(h)|0)!=(HEAP32[i>>2]|0)?4:5;break;case 4:_mrb_str_dump(l,d,g);a=g;j=l;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=
HEAP32[j>>2];HEAP32[a+4>>2]=HEAP32[j+4>>2];a=HEAP32[(HEAP32[(g|0)>>2]+20|0)>>2];assert(!0,"memcpy given 2 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP8[a]=HEAP8[__str914|0];HEAP8[a+1]=HEAP8[(__str914|0)+1];a=5;break;case 5:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[g>>2];HEAP32[f+4>>2]=HEAP32[g+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_sym_inspect.X=1;
function _sym_cmp(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h,i,j,l,k,n=c+8,r=c+12;d=e;_mrb_get_args(d,__str8|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));a=4!=(HEAP32[(g+
4|0)>>2]&255|0)?3:4;break;case 3:_mrb_nil_value(f);a=18;break;case 4:h=HEAP16[(b|0)>>1];i=HEAP16[(g|0)>>1];a=(h<<16>>16|0)==(i<<16>>16|0)?5:6;break;case 5:_mrb_fixnum_value(f,0);a=18;break;case 6:j=_mrb_sym2name_len(d,h,n);l=_mrb_sym2name_len(d,i,r);a=(HEAP32[n>>2]|0)>(HEAP32[r>>2]|0)?7:8;break;case 7:var t=HEAP32[r>>2],a=9;break;case 8:t=HEAP32[n>>2];a=9;break;case 9:k=t;k=_memcmp(j,l,k);a=0==(k|0)?10:15;break;case 10:a=(HEAP32[n>>2]|0)==(HEAP32[r>>2]|0)?11:12;break;case 11:_mrb_fixnum_value(f,0);
a=18;break;case 12:a=(HEAP32[n>>2]|0)>(HEAP32[r>>2]|0)?13:14;break;case 13:_mrb_fixnum_value(f,1);a=18;break;case 14:_mrb_fixnum_value(f,-1);a=18;break;case 15:a=0<(k|0)?16:17;break;case 16:_mrb_fixnum_value(f,1);a=18;break;case 17:_mrb_fixnum_value(f,-1);a=18;break;case 18:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_sym_cmp.X=1;
function _mrb_nil_value(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_fixnum_value(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|3;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_true_value(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]=HEAP32[b>>2]&-256|2;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_false_value(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _kh_get_iv(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g;a=f;d=e;g=(d<<16>>16^d<<16>>16<<2^d<<16>>16>>2)&HEAP32[(a+32|0)>>2];b=3;break;case 3:b=0!=(HEAP8[HEAP32[(a+16|0)>>2]+Math.floor((g>>>0)/8)|0]&255&HEAP8[___m17+(g>>>0)%8|0]&255|0)^1?4:9;break;case 4:b=0!=(HEAP8[HEAP32[(a+20|0)>>2]+Math.floor((g>>>0)/8)|0]&255&HEAP8[___m17+(g>>>0)%8|0]&255|0)?8:5;break;case 5:b=(HEAP16[(HEAP32[(a+24|0)>>2]+(g<<1)|0)>>1]<<16>>16|0)==(d<<16>>16|0)?6:7;break;case 6:c=g;b=10;break;case 7:b=8;break;case 8:g=
(g+HEAP32[(a+36|0)>>2]|0)&HEAP32[(a+32|0)>>2];b=3;break;case 9:c=HEAP32[(a|0)>>2];b=10;break;case 10:return c;default:assert(0,"bad label: "+b)}}_kh_get_iv.X=1;function _kh_del_iv(f,e){var b=HEAP32[(f+20|0)>>2]+Math.floor((e>>>0)/8)|0;HEAP8[b]=(HEAP8[b]&255|HEAP8[___m17+(e>>>0)%8|0]&255)&255;b=f+4|0;HEAP32[b>>2]=HEAP32[b>>2]-1|0}
function _is_special_global_name(f){var e;for(e=2;;)switch(e){case 2:var b,c;c=f;e=HEAP8[c]<<24>>24;e=126==(e|0)||42==(e|0)||36==(e|0)||63==(e|0)||33==(e|0)||64==(e|0)||47==(e|0)||92==(e|0)||59==(e|0)||44==(e|0)||46==(e|0)||61==(e|0)||58==(e|0)||60==(e|0)||62==(e|0)||34==(e|0)||38==(e|0)||96==(e|0)||39==(e|0)||43==(e|0)||48==(e|0)?3:45==(e|0)?4:9;break;case 3:c=c+1|0;e=15;break;case 4:c=c+1|0;e=-1!=(HEAP8[c]<<24>>24|0)?5:8;break;case 5:e=0!=(_isalnum(HEAP8[c]&255)|0)?7:6;break;case 6:e=95==(HEAP8[c]<<
24>>24|0)?7:8;break;case 7:c=c+1|0;e=8;break;case 8:e=15;break;case 9:e=0!=(_isdigit(HEAP8[c]&255)|0)?11:10;break;case 10:b=0;e=16;break;case 11:e=12;break;case 12:c=c+1|0;e=13;break;case 13:e=0!=(_isdigit(HEAP8[c]&255)|0)?12:14;break;case 14:e=15;break;case 15:b=(0!=HEAP8[c]<<24>>24^1)&1;e=16;break;case 16:return b;default:assert(0,"bad label: "+e)}}_is_special_global_name.X=1;
function _kh_alloc_iv(f){var e;e=HEAP32[(f|0)>>2];HEAP32[(f+8|0)>>2]=0;HEAP32[(f+4|0)>>2]=0;HEAP32[(f+12|0)>>2]=e>>>2|e>>>1;var b=_mrb_malloc(HEAP32[(f+40|0)>>2],Math.floor(((e|0)>>>0)/4));HEAP32[(f+16|0)>>2]=b;HEAP32[(f+20|0)>>2]=HEAP32[(f+16|0)>>2]+Math.floor((e>>>0)/8)|0;_memset(HEAP32[(f+16|0)>>2],-1,Math.floor((e>>>0)/8)|0,1);_memset(HEAP32[(f+20|0)>>2],0,Math.floor((e>>>0)/8)|0,1);b=_mrb_malloc(HEAP32[(f+40|0)>>2],e<<1|0);HEAP32[(f+24|0)>>2]=b;b=_mrb_malloc(HEAP32[(f+40|0)>>2],e<<3|0);HEAP32[(f+
28|0)>>2]=b;HEAP32[(f+32|0)>>2]=e-1|0;HEAP32[(f+36|0)>>2]=Math.floor((e>>>0)/2)-1|0}_kh_alloc_iv.X=1;function _kh_init_iv_size(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;d=_mrb_calloc(c,1,44);b=8>a>>>0?3:4;break;case 3:a=8;b=4;break;case 4:b=5;break;case 5:a=a-1|0;a|=a>>>1;a|=a>>>2;a|=a>>>4;a|=a>>>8;a|=a>>>16;a=a+1|0;b=6;break;case 6:return HEAP32[(d|0)>>2]=a,HEAP32[(d+40|0)>>2]=c,_kh_alloc_iv(d),d;default:assert(0,"bad label: "+b)}}_kh_init_iv_size.X=1;
function _kh_init_iv(f){return _kh_init_iv_size(f,32)}function _kh_destroy_iv(f){var e;for(e=2;;)switch(e){case 2:var b;b=f;e=0!=(b|0)?3:4;break;case 3:_mrb_free(HEAP32[(b+40|0)>>2],HEAP32[(b+24|0)>>2]);_mrb_free(HEAP32[(b+40|0)>>2],HEAP32[(b+28|0)>>2]);_mrb_free(HEAP32[(b+40|0)>>2],HEAP32[(b+16|0)>>2]);_mrb_free(HEAP32[(b+40|0)>>2],b);e=4;break;case 4:return;default:assert(0,"bad label: "+e)}}
function _kh_clear_iv(f){var e;for(e=2;;)switch(e){case 2:var b;b=f;e=0!=(b|0)?3:5;break;case 3:e=0!=(HEAP32[(b+16|0)>>2]|0)?4:5;break;case 4:_memset(HEAP32[(b+16|0)>>2],-1,Math.floor((HEAP32[(b|0)>>2]>>>0)/8)|0,1);_memset(HEAP32[(b+20|0)>>2],0,Math.floor((HEAP32[(b|0)>>2]>>>0)/8)|0,1);HEAP32[(b+8|0)>>2]=0;HEAP32[(b+4|0)>>2]=0;e=5;break;case 5:return;default:assert(0,"bad label: "+e)}}
function _kh_resize_iv(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h,i,j;c=f;a=e;b=8>a>>>0?3:4;break;case 3:a=8;b=4;break;case 4:b=5;break;case 5:a=a-1|0;a|=a>>>1;a|=a>>>2;a|=a>>>4;a|=a>>>8;a|=a>>>16;a=a+1|0;b=6;break;case 6:d=HEAP32[(c+16|0)>>2];g=HEAP32[(c+24|0)>>2];h=HEAP32[(c+28|0)>>2];i=HEAP32[(c|0)>>2];HEAP32[(c|0)>>2]=a;_kh_alloc_iv(c);j=0;b=7;break;case 7:b=j>>>0<i>>>0?8:12;break;case 8:b=0!=(HEAP8[d+Math.floor((j>>>0)/8)|0]&255&HEAP8[___m17+(j>>>0)%8|0]&255|0)?10:9;break;case 9:b=_kh_put_iv(c,
HEAP16[(g+(j<<1)|0)>>1]);b=HEAP32[(c+28|0)>>2]+(b<<3)|0;var l=h+(j<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[b>>2]=HEAP32[l>>2];HEAP32[b+4>>2]=HEAP32[l+4>>2];b=10;break;case 10:b=11;break;case 11:j=j+1|0;b=7;break;case 12:_mrb_free(HEAP32[(c+40|0)>>2],d);_mrb_free(HEAP32[(c+40|0)>>2],g);_mrb_free(HEAP32[(c+40|0)>>2],h);return;default:assert(0,"bad label: "+b)}}_kh_resize_iv.X=1;
function _kh_put_iv(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;b=HEAP32[(c+8|0)>>2]>>>0>=HEAP32[(c+12|0)>>2]>>>0?3:4;break;case 3:_kh_resize_iv(c,HEAP32[(c|0)>>2]<<1|0);b=4;break;case 4:d=(a<<16>>16^a<<16>>16<<2^a<<16>>16>>2)&HEAP32[(c+32|0)>>2];b=5;break;case 5:if(0!=(HEAP8[HEAP32[(c+16|0)>>2]+Math.floor((d>>>0)/8)|0]&255&HEAP8[___m17+(d>>>0)%8|0]&255|0)){var g=1;b=7}else b=6;break;case 6:g=0!=(HEAP8[HEAP32[(c+20|0)>>2]+Math.floor((d>>>0)/8)|0]&255&HEAP8[___m17+(d>>>0)%8|0]&255|0);b=
7;break;case 7:b=g^1?8:11;break;case 8:b=(HEAP16[(HEAP32[(c+24|0)>>2]+(d<<1)|0)>>1]<<16>>16|0)==(a<<16>>16|0)?9:10;break;case 9:b=11;break;case 10:d=(d+HEAP32[(c+36|0)>>2]|0)&HEAP32[(c+32|0)>>2];b=5;break;case 11:b=0!=(HEAP8[HEAP32[(c+16|0)>>2]+Math.floor((d>>>0)/8)|0]&255&HEAP8[___m17+(d>>>0)%8|0]&255|0)?12:13;break;case 12:HEAP16[(HEAP32[(c+24|0)>>2]+(d<<1)|0)>>1]=a;b=HEAP32[(c+16|0)>>2]+Math.floor((d>>>0)/8)|0;HEAP8[b]=HEAP8[b]&255&(HEAP8[___m17+(d>>>0)%8|0]&255^-1)&255;b=c+4|0;HEAP32[b>>2]=HEAP32[b>>
2]+1|0;b=c+8|0;HEAP32[b>>2]=HEAP32[b>>2]+1|0;b=16;break;case 13:b=0!=(HEAP8[HEAP32[(c+20|0)>>2]+Math.floor((d>>>0)/8)|0]&255&HEAP8[___m17+(d>>>0)%8|0]&255|0)?14:15;break;case 14:HEAP16[(HEAP32[(c+24|0)>>2]+(d<<1)|0)>>1]=a;b=HEAP32[(c+20|0)>>2]+Math.floor((d>>>0)/8)|0;HEAP8[b]=HEAP8[b]&255&(HEAP8[___m17+(d>>>0)%8|0]&255^-1)&255;b=c+4|0;HEAP32[b>>2]=HEAP32[b>>2]+1|0;b=15;break;case 15:b=16;break;case 16:return d;default:assert(0,"bad label: "+b)}}_kh_put_iv.X=1;
function _kh_copy_iv(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;c=_kh_init_iv(c);d=0;b=3;break;case 3:b=(d|0)!=(HEAP32[(a|0)>>2]|0)?4:9;break;case 4:b=0!=(HEAP8[HEAP32[(a+16|0)>>2]+Math.floor((d>>>0)/8)|0]&255&HEAP8[___m17+(d>>>0)%8|0]&255|0)?7:5;break;case 5:b=0!=(HEAP8[HEAP32[(a+20|0)>>2]+Math.floor((d>>>0)/8)|0]&255&HEAP8[___m17+(d>>>0)%8|0]&255|0)?7:6;break;case 6:b=_kh_put_iv(c,HEAP16[(HEAP32[(a+24|0)>>2]+(d<<1)|0)>>1]);b=HEAP32[(c+28|0)>>2]+(b<<3)|0;var g=HEAP32[(a+28|0)>>2]+(d<<
3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[b>>2]=HEAP32[g>>2];HEAP32[b+4>>2]=HEAP32[g+4>>2];b=7;break;case 7:b=8;break;case 8:d=d+1|0;b=3;break;case 9:return c;default:assert(0,"bad label: "+b)}}_kh_copy_iv.X=1;function _mrb_gc_mark_gv(f){_mark_tbl(f,HEAP32[(f+52|0)>>2])}
function _mrb_vm_special_set(f,e,b){f=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");e=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[e>>2];HEAP32[b+4>>2]=HEAP32[e+4>>2];STACKTOP=f}function _iv_size(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;a=e|0;b=0!=(a|0)?4:3;break;case 3:c=0;b=5;break;case 4:c=HEAP32[(a+4|0)>>2];b=5;break;case 5:return c;default:assert(0,"bad label: "+b)}}
function _obj_iv_p(f){var e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b=f,f=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];for(b=2;;)switch(b){case 2:var c,b=HEAP32[(f+4|0)>>2]&255,b=9==(b|0)||10==(b|0)||11==(b|0)||13==(b|0)||16==(b|0)||25==(b|0)?3:4;break;case 3:c=1;b=5;break;case 4:c=0;b=5;break;case 5:return f=c,STACKTOP=e,f;default:assert(0,"bad label: "+
b)}}function _mark_tbl(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;b=0!=(a|0)?3:4;break;case 3:_iv_foreach(c,a,108,0);b=4;break;case 4:return;default:assert(0,"bad label: "+b)}}function _mrb_gc_free_gv(f){var e;for(e=2;;)switch(e){case 2:var b;b=f;e=0!=(HEAP32[(b+52|0)>>2]|0)?3:4;break;case 3:_iv_free(b,HEAP32[(b+52|0)>>2]);e=4;break;case 4:return;default:assert(0,"bad label: "+e)}}function _iv_free(f,e){_kh_destroy_iv(e|0)}
function _mrb_gc_mark_iv(f,e){_mark_tbl(f,HEAP32[(e+12|0)>>2])}function _mrb_gc_mark_iv_size(f,e){return _iv_size(f,HEAP32[(e+12|0)>>2])}function _mrb_gc_free_iv(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;b=0!=(HEAP32[(a+12|0)>>2]|0)?3:4;break;case 3:_iv_free(c,HEAP32[(a+12|0)>>2]);b=4;break;case 4:return;default:assert(0,"bad label: "+b)}}function _mrb_vm_special_get(f){_mrb_fixnum_value30(f,0)}
function _mrb_fixnum_value30(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|3;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_obj_iv_get(f,e,b,c){var a=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d;for(d=2;;)switch(d){case 2:var g,h,i,j=a;g=e;h=b;i=c;d=0!=(HEAP32[(h+12|0)>>2]|0)?3:5;break;case 3:d=0!=(_iv_get(g,HEAP32[(h+12|0)>>2],i,j)|0)?4:5;break;case 4:d=f;var l=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[l>>2];HEAP32[d+4>>2]=HEAP32[l+4>>2];d=6;break;case 5:_mrb_nil_value31(f);
d=6;break;case 6:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}
function _iv_get(f,e,b,c){for(f=2;;)switch(f){case 2:var a,d,g,h;d=e;g=b;h=c;d|=0;g=_kh_get_iv(d,g);f=(g|0)!=(HEAP32[(d|0)>>2]|0)?3:6;break;case 3:f=0!=(h|0)?4:5;break;case 4:var f=h,i=HEAP32[(d+28|0)>>2]+(g<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[i>>2];HEAP32[f+4>>2]=HEAP32[i+4>>2];f=5;break;case 5:a=1;f=7;break;case 6:a=0;f=7;break;case 7:return a;default:assert(0,"bad label: "+f)}}
function _mrb_nil_value31(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_iv_get(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h;g=e;h=c;d=0!=(_obj_iv_p(b)|0)?3:4;break;case 3:_mrb_obj_iv_get(f,g,HEAP32[(b|0)>>2],h);d=5;break;case 4:_mrb_nil_value31(f);d=5;break;case 5:STACKTOP=a;return;default:assert(0,"bad label: "+
d)}}
function _mrb_obj_iv_set(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=c,c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i,j;g=f;h=e;i=b;j=HEAP32[(h+12|0)>>2];d=0!=(j|0)?4:3;break;case 3:j=_iv_new(g);HEAP32[(h+12|0)>>2]=j;d=4;break;case 4:_mrb_write_barrier(g,h);_iv_put(g,j,i,c);STACKTOP=a;return;default:assert(0,"bad label: "+
d)}}function _iv_new(f){return _kh_init_iv_size(f,8)}
function _iv_put(f,e,b,c){f=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=c,c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[a>>2];HEAP32[c+4>>2]=HEAP32[a+4>>2];e|=0;b=_kh_put_iv(e,b);b=HEAP32[(e+28|0)>>2]+(b<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];STACKTOP=f}
function _mrb_obj_iv_ifnone(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=c,c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i,j;g=f;h=e;i=b;j=HEAP32[(h+12|0)>>2];d=0!=(j|0)?4:3;break;case 3:j=_iv_new(g);HEAP32[(h+12|0)>>2]=j;d=7;break;case 4:d=0!=(_iv_get(g,j,i,c)|0)?5:6;break;case 5:d=8;break;case 6:d=7;
break;case 7:_mrb_write_barrier(g,h);_iv_put(g,j,i,c);d=8;break;case 8:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}
function _mrb_iv_set(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[d>>2];HEAP32[e+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h;g=f;h=b;d=0!=(_obj_iv_p(e)|0)?3:4;break;case 3:_mrb_obj_iv_set(g,
HEAP32[(e|0)>>2],h,c);d=5;break;case 4:var d=g,i=_mrb_class_obj_get(g,__str18|0);_mrb_raise(d,i,__str119|0);d=5;break;case 5:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}function _mrb_class_obj_get(f,e){var b=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b+8;_mrb_obj_value32(b,HEAP32[(f+72|0)>>2]);var a=_mrb_intern(f,e);_mrb_const_get(c,f,b,a);c=HEAP32[(c|0)>>2];STACKTOP=b;return c}
function _mrb_obj_iv_defined(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h;d=f;c=e;g=b;h=HEAP32[(c+12|0)>>2];c=0!=(h|0)?3:4;break;case 3:a=_iv_get(d,h,g,0);c=5;break;case 4:a=0;c=5;break;case 5:return a;default:assert(0,"bad label: "+c)}}
function _mrb_iv_defined(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h;g=f;h=b;a=0!=(_obj_iv_p(e)|0)?4:3;break;case 3:d=0;a=5;break;case 4:d=_mrb_obj_iv_defined(g,HEAP32[(e|0)>>2],h);a=5;break;case 5:return f=d,STACKTOP=c,f;default:assert(0,"bad label: "+
a)}}
function _mrb_iv_copy(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];a=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h;d=f;g=HEAP32[(e|0)>>2];h=HEAP32[(b|0)>>2];a=0!=
(HEAP32[(g+12|0)>>2]|0)?3:4;break;case 3:_iv_free(d,HEAP32[(g+12|0)>>2]);HEAP32[(g+12|0)>>2]=0;a=4;break;case 4:a=0!=(HEAP32[(h+12|0)>>2]|0)?5:6;break;case 5:a=_iv_copy(d,HEAP32[(h+12|0)>>2]);HEAP32[(g+12|0)>>2]=a;a=6;break;case 6:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}function _iv_copy(f,e){return _kh_copy_iv(f,e|0)}
function _mrb_obj_iv_inspect(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h,i=c,j=c+8,l=c+16;d=e;g=b;h=HEAP32[(g+12|0)>>2];a=0<(_iv_size(d,h)|0)?3:4;break;case 3:a=d;_mrb_obj_value32(i,g);a=_mrb_obj_classname(a,i);var k=g;_mrb_sprintf(j,d,__str220|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,HEAP32[tempInt+4>>2]=k,
tempInt));_iv_foreach(d,h,408,j);a=f;k=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[k>>2];HEAP32[a+4>>2]=HEAP32[k+4>>2];a=5;break;case 4:a=d;_mrb_obj_value32(l,g);_mrb_any_to_s(f,a,l);a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_obj_value32(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b,g;g=a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|HEAP32[g>>2]&255;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+
c)}}
function _iv_foreach(f,e,b,c){var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j,l,k;g=f;a=e;h=b;i=c;j=a|0;a=0!=(j|0)?3:15;break;case 3:l=0;a=4;break;case 4:a=(l|0)!=(HEAP32[(j|0)>>2]|0)?5:14;break;case 5:a=0!=(HEAP8[HEAP32[(j+16|0)>>2]+Math.floor((l>>>0)/8)|0]&255&HEAP8[___m17+(l>>>0)%8|0]&255|0)?12:6;break;case 6:a=0!=(HEAP8[HEAP32[(j+20|0)>>2]+Math.floor((l>>>0)/8)|0]&255&HEAP8[___m17+(l>>>0)%8|0]&255|0)?12:7;break;case 7:k=FUNCTION_TABLE[h](g,HEAP16[(HEAP32[(j+24|0)>>2]+(l<<1)|0)>>1],HEAP32[(j+28|
0)>>2]+(l<<3)|0,i);a=0<(k|0)?8:9;break;case 8:d=0;a=16;break;case 9:a=0>(k|0)?10:11;break;case 10:_kh_del_iv(j,l);a=11;break;case 11:a=12;break;case 12:a=13;break;case 13:l=l+1|0;a=4;break;case 14:a=15;break;case 15:d=1;a=16;break;case 16:return d;default:assert(0,"bad label: "+a)}}_iv_foreach.X=1;
function _inspect_i(f,e,b,c){var a=STACKTOP;STACKTOP+=60;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i=a,j=a+8,l=a+12,k=a+20,n=a+28,r=a+36,t=a+44,p=a+52;g=f;h=e;var d=i,q=c;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[q>>
2];HEAP32[d+4>>2]=HEAP32[q+4>>2];d=45==(HEAP8[HEAP32[(HEAP32[(i|0)>>2]+20|0)>>2]|0]<<24>>24|0)?3:4;break;case 3:HEAP8[HEAP32[(HEAP32[(i|0)>>2]+20|0)>>2]|0]=35;_mrb_str_cat2(l,g,i,__str927|0);d=5;break;case 4:_mrb_str_cat2(k,g,i,__str10|0);d=5;break;case 5:return f=_mrb_sym2name_len(g,h,j),_mrb_str_cat(n,g,i,f,HEAP32[j>>2]),_mrb_str_cat(r,g,i,__str11|0,1),j=g,_mrb_inspect(t,g,b),_mrb_str_append(p,j,i,t),STACKTOP=a,0;default:assert(0,"bad label: "+d)}}_inspect_i.X=1;
function _mrb_iv_remove(f,e,b,c){var a=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i,j=a;g=e;h=c;d=0!=(_obj_iv_p(b)|0)?3:7;break;case 3:i=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2];d=0!=(i|0)?4:6;break;case 4:d=0!=(_iv_del(g,i,h,j)|0)?5:6;break;case 5:var d=f,l=j;
assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[l>>2];HEAP32[d+4>>2]=HEAP32[l+4>>2];d=8;break;case 6:d=7;break;case 7:_mrb_undef_value(f);d=8;break;case 8:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}
function _iv_del(f,e,b,c){f=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j,l=f;g=e;h=b;i=c;g|=0;a=0!=(g|0)?3:8;break;case 3:j=_kh_get_iv(g,h);a=(j|0)!=(HEAP32[(g|0)>>2]|0)?4:7;break;case 4:a=l;var k=HEAP32[(g+28|0)>>2]+(j<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[k>>2];HEAP32[a+4>>2]=HEAP32[k+4>>2];_kh_del_iv(g,j);a=0!=
(i|0)?5:6;break;case 5:a=i;k=l;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[k>>2];HEAP32[a+4>>2]=HEAP32[k+4>>2];a=6;break;case 6:d=1;a=9;break;case 7:a=8;break;case 8:d=0;a=9;break;case 9:return e=d,STACKTOP=f,e;default:assert(0,"bad label: "+a)}}_iv_del.X=1;
function _mrb_undef_value(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]=HEAP32[b>>2]&-256|5;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_vm_iv_get(f,e,b){_mrb_iv_get(f,e,HEAP32[(e+8|0)>>2]|0,b)}function _mrb_vm_iv_set(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_iv_set(f,HEAP32[(f+8|0)>>2]|0,e,b);STACKTOP=c}
function _mrb_obj_instance_variables(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+8;d=e;_mrb_ary_new(h,d);a=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[h>>2];HEAP32[a+4>>2]=
HEAP32[h+4>>2];a=0!=(_obj_iv_p(b)|0)?3:5;break;case 3:a=0!=(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)?4:5;break;case 4:_iv_foreach(d,HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2],346,g);a=5;break;case 5:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[g>>2];HEAP32[f+4>>2]=HEAP32[g+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _iv_i(f,e,b,c){var a=STACKTOP;STACKTOP+=20;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];for(b=2;;)switch(b){case 2:var g,h,i=a,j,b=a+8,l=a+12;g=f;h=e;j=i;d=c;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[j>>2]=HEAP32[d>>2];HEAP32[j+4>>2]=HEAP32[d+4>>2];j=_mrb_sym2name_len(g,
h,b);b=1<(HEAP32[b>>2]|0)?3:6;break;case 3:b=64==(HEAP8[j|0]<<24>>24|0)?4:6;break;case 4:b=64!=(HEAP8[j+1|0]<<24>>24|0)?5:6;break;case 5:b=g;_mrb_symbol_value(l,h);_mrb_ary_push(b,i,l);b=6;break;case 6:return STACKTOP=a,0;default:assert(0,"bad label: "+b)}}
function _mrb_mod_class_variables(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+8;d=e;_mrb_ary_new(h,d);a=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[h>>2];HEAP32[a+4>>2]=HEAP32[h+
4>>2];a=0!=(_obj_iv_p(b)|0)?3:5;break;case 3:a=0!=(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)?4:5;break;case 4:_iv_foreach(d,HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2],518,g);a=5;break;case 5:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[g>>2];HEAP32[f+4>>2]=HEAP32[g+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _cv_i(f,e,b,c){var a=STACKTOP;STACKTOP+=20;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];for(b=2;;)switch(b){case 2:var g,h,i=a,j,b=a+8,l=a+12;g=f;h=e;j=i;d=c;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[j>>2]=HEAP32[d>>2];HEAP32[j+4>>2]=HEAP32[d+4>>2];j=_mrb_sym2name_len(g,
h,b);b=2<(HEAP32[b>>2]|0)?3:6;break;case 3:b=64==(HEAP8[j|0]<<24>>24|0)?4:6;break;case 4:b=64==(HEAP8[j+1|0]<<24>>24|0)?5:6;break;case 5:b=g;_mrb_symbol_value(l,h);_mrb_ary_push(b,i,l);b=6;break;case 6:return STACKTOP=a,0;default:assert(0,"bad label: "+b)}}
function _mrb_vm_cv_get(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h,i=c;d=e;g=b;h=HEAP32[(HEAP32[(HEAP32[(d+20|0)>>2]+4|0)>>2]+16|0)>>2];a=0!=(h|0)?4:3;break;case 3:h=HEAP32[(HEAP32[(d+20|0)>>2]+28|0)>>2];a=4;break;case 4:a=5;break;case 5:a=0!=(h|0)?6:11;break;case 6:a=0!=(HEAP32[(h+12|0)>>2]|0)?7:10;break;case 7:a=HEAP32[(h+12|0)>>2];a=0!=(_iv_get(d,a,g,i)|0)?8:9;break;case 8:a=
f;var j=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[j>>2];HEAP32[a+4>>2]=HEAP32[j+4>>2];a=12;break;case 9:a=10;break;case 10:var $super=h+20|0;h=HEAP32[$super>>2];a=5;break;case 11:_mrb_nil_value31(f);a=12;break;case 12:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_vm_cv_get.X=1;
function _mrb_vm_cv_set(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i;d=f;g=e;h=HEAP32[(HEAP32[(HEAP32[(d+20|0)>>2]+4|0)>>2]+16|0)>>2];a=0!=(h|0)?4:3;break;case 3:h=HEAP32[(HEAP32[(d+20|0)>>2]+28|0)>>2];a=4;break;case 4:a=5;break;case 5:a=0!=(h|0)?6:11;
break;case 6:a=0!=(HEAP32[(h+12|0)>>2]|0)?7:10;break;case 7:i=HEAP32[(h+12|0)>>2];a=0!=(_iv_get(d,i,g,0)|0)?8:9;break;case 8:_iv_put(d,i,g,b);a=14;break;case 9:a=10;break;case 10:var $super=h+20|0;h=HEAP32[$super>>2];a=5;break;case 11:h=HEAP32[(HEAP32[(d+20|0)>>2]+28|0)>>2];a=0!=(HEAP32[(h+12|0)>>2]|0)?13:12;break;case 12:a=_iv_new(d);HEAP32[(h+12|0)>>2]=a;a=13;break;case 13:_iv_put(d,HEAP32[(h+12|0)>>2],g,b);a=14;break;case 14:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
_mrb_vm_cv_set.X=1;
function _mrb_const_defined(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i;g=f;h=b;i=HEAP32[(HEAP32[(e|0)>>2]+12|0)>>2];a=0!=(i|0)?4:3;break;case 3:d=0;a=5;break;case 4:d=_iv_get(g,i,h,0);a=5;break;case 5:return f=d,STACKTOP=c,f;default:assert(0,"bad label: "+
a)}}function _mrb_const_get(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];_mod_const_check(e,b);_const_get(f,e,HEAP32[(b|0)>>2],c);STACKTOP=a}
function _mod_const_check(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a;a=f;c=HEAP32[(e+4|0)>>2]&255;c=10==(c|0)||11==(c|0)||13==(c|0)?3:4;break;case 3:c=5;break;case 4:var c=a,d=_mrb_class_obj_get(a,__str725|0);_mrb_raise(c,d,__str826|0);c=5;break;case 5:STACKTOP=
b;return;default:assert(0,"bad label: "+c)}}
function _const_get(f,e,b,c){var a=STACKTOP;STACKTOP+=32;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d;for(d=2;;)switch(d){case 2:var g,h,i,j,l=a,k,n,r=a+8,t=a+16,p=a+24;g=e;h=b;i=c;j=h;k=0;d=3;break;case 3:d=4;break;case 4:d=0!=(j|0)?5:10;break;case 5:d=0!=(HEAP32[(j+12|0)>>2]|0)?6:9;break;case 6:d=HEAP32[(j+12|0)>>2];d=0!=(_iv_get(g,d,i,l)|0)?7:8;break;case 7:d=f;var q=l;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>
2]=HEAP32[q>>2];HEAP32[d+4>>2]=HEAP32[q+4>>2];d=20;break;case 8:d=9;break;case 9:var $super=j+20|0;j=HEAP32[$super>>2];d=4;break;case 10:d=0!=(k|0)?14:11;break;case 11:d=0!=(h|0)?12:14;break;case 12:d=11==(HEAP32[h>>2]&255|0)?13:14;break;case 13:j=HEAP32[(g+72|0)>>2];k=1;d=3;break;case 14:j=h;n=_mrb_intern(g,__str422|0);d=15;break;case 15:d=0!=(j|0)?16:19;break;case 16:d=g;_mrb_obj_value32(r,j);d=0!=(_mrb_respond_to(d,r,n)|0)?17:18;break;case 17:_mrb_symbol_value(t,i);d=g;_mrb_obj_value32(p,j);_mrb_funcall_argv(f,
d,p,n,1,t);d=20;break;case 18:var $super20=j+20|0;j=HEAP32[$super20>>2];d=15;break;case 19:d=g;var q=_mrb_class_obj_get(g,__str523|0),m=_mrb_sym2name(g,i);_mrb_raisef(d,q,__str624|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=m,tempInt));_mrb_nil_value31(f);d=20;break;case 20:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_const_get.X=1;
function _mrb_vm_const_get(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j=c;d=e;g=b;h=HEAP32[(HEAP32[(HEAP32[(d+20|0)>>2]+4|0)>>2]+16|0)>>2];a=0!=(h|0)?4:3;break;case 3:h=HEAP32[(HEAP32[(d+20|0)>>2]+28|0)>>2];a=4;break;case 4:a=0!=(h|0)?5:16;break;case 5:i=h;a=0!=(HEAP32[(h+12|0)>>2]|0)?6:8;break;case 6:a=0!=(_iv_get(d,HEAP32[(h+12|0)>>2],g,j)|0)?7:8;break;case 7:a=f;var l=j;
assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+4>>2]=HEAP32[l+4>>2];a=17;break;case 8:i=h;a=9;break;case 9:i=_mrb_class_outer_module(d,i);a=0!=(i|0)?11:10;break;case 10:a=15;break;case 11:a=0!=(HEAP32[(i+12|0)>>2]|0)?12:14;break;case 12:a=0!=(_iv_get(d,HEAP32[(i+12|0)>>2],g,j)|0)?13:14;break;case 13:a=f;l=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+
4>>2]=HEAP32[l+4>>2];a=17;break;case 14:a=9;break;case 15:a=16;break;case 16:_const_get(f,d,h,g);a=17;break;case 17:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_vm_const_get.X=1;
function _mrb_const_set(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[d>>2];HEAP32[e+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];_mod_const_check(f,e);_mrb_iv_set(f,e,b,c);STACKTOP=a}
function _mrb_vm_const_set(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h;d=f;g=e;h=HEAP32[(HEAP32[(HEAP32[(d+20|0)>>2]+4|0)>>2]+16|0)>>2];a=0!=(h|0)?4:3;break;case 3:h=HEAP32[(HEAP32[(d+20|0)>>2]+28|0)>>2];a=4;break;case 4:_mrb_obj_iv_set(d,h,g,b);STACKTOP=
c;return;default:assert(0,"bad label: "+a)}}function _mrb_define_const(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=c,c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];b=_mrb_intern(f,b);_mrb_obj_iv_set(f,e,b,c);STACKTOP=a}
function _mrb_define_global_const(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_define_const(f,HEAP32[(f+72|0)>>2],e,b);STACKTOP=c}
function _mrb_gv_get(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h=c;d=e;g=b;a=0!=(HEAP32[(d+52|0)>>2]|0)?4:3;break;case 3:_mrb_nil_value31(f);a=7;break;case 4:a=0!=(_iv_get(d,HEAP32[(d+52|0)>>2],g,h)|0)?5:6;break;case 5:a=f;var i=h;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[i>>2];HEAP32[a+4>>2]=HEAP32[i+4>>2];a=7;break;
case 6:_mrb_nil_value31(f);a=7;break;case 7:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_gv_set(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h;d=f;g=e;a=0!=(HEAP32[(d+52|0)>>2]|0)?4:3;break;case 3:h=_iv_new(d);HEAP32[(d+52|0)>>2]=h;a=5;break;case 4:h=HEAP32[(d+52|0)>>2];a=5;break;case 5:_iv_put(d,h,g,b);STACKTOP=c;return;default:assert(0,
"bad label: "+a)}}
function _csym_i(f,e,b,c){f=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i;g=e;h=c;i=HEAP32[(h|0)>>2];a=(HEAP32[(b+4|0)>>2]&255|0)==(HEAP32[i>>2]&255|0)?3:5;break;case 3:a=(HEAP32[(b|0)>>2]|0)==(i|0)?4:5;break;case 4:HEAP16[(h+4|0)>>1]=g;d=1;a=6;break;case 5:d=0;a=6;
break;case 6:return e=d,STACKTOP=f,e;default:assert(0,"bad label: "+a)}}function _uvenv(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;a=f;d=e;a=HEAP32[(HEAP32[(HEAP32[(a+20|0)>>2]+4|0)>>2]+20|0)>>2];b=3;break;case 3:b=d;d=b-1|0;b=0!=(b|0)?4:7;break;case 4:b=0!=(a|0)?6:5;break;case 5:c=0;b=8;break;case 6:a=HEAP32[(a+4|0)>>2];b=3;break;case 7:c=a;b=8;break;case 8:return c;default:assert(0,"bad label: "+b)}}
function _is_strict(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;a=f;d=HEAP32[(e+20|0)>>2];b=0<=(d|0)?3:6;break;case 3:b=0!=(HEAP32[((HEAP32[(a+24|0)>>2]+44*d|0)+4|0)>>2]|0)?4:6;break;case 4:b=0!=(HEAP32[HEAP32[((HEAP32[(a+24|0)>>2]+44*d|0)+4|0)>>2]>>2]>>>11&256|0)?5:6;break;case 5:c=1;b=7;break;case 6:c=0;b=7;break;case 7:return c;default:assert(0,"bad label: "+b)}}
function _mrb_f_global_variables(f,e,b){var c=STACKTOP;STACKTOP+=20;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(b=2;;)switch(b){case 2:var d,g,h=c,i,j=c+8,l=c+12;d=e;g=HEAP32[(d+52|0)>>2];_mrb_ary_new(h,d);b=0!=(g|0)?3:4;break;case 3:_iv_foreach(d,g,226,h);b=4;break;case 4:HEAP8[j|0]=36;HEAP8[j+2|0]=0;i=1;b=
5;break;case 5:b=9>=(i|0)?6:8;break;case 6:HEAP8[j+1|0]=(i+48|0)&255;b=d;a=_mrb_intern2(d,j|0,2);_mrb_symbol_value(l,a);_mrb_ary_push(b,h,l);b=7;break;case 7:i=i+1|0;b=5;break;case 8:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[h>>2];HEAP32[f+4>>2]=HEAP32[h+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+b)}}_mrb_f_global_variables.X=1;
function _gv_i(f,e,b,c){var a=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];b=a+8;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[c>>2];HEAP32[a+4>>2]=HEAP32[c+4>>2];_mrb_symbol_value(b,e);_mrb_ary_push(f,a,b);STACKTOP=a;return 0}
function _mrb_symbol_value(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|4;HEAP16[(d|0)>>1]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_const_defined_at(f,e,b){return _mrb_const_defined_0(f,e,b,1,0)}
function _mrb_const_defined_0(f,e,b,c,a){var d;for(d=2;;)switch(d){case 2:var g,h,i,j,l,k,n,r;h=f;i=e;j=b;l=c;k=a;r=0;n=i;d=3;break;case 3:d=4;break;case 4:d=0!=(n|0)?5:12;break;case 5:d=0!=(HEAP32[(n+12|0)>>2]|0)?6:8;break;case 6:d=0!=(_iv_get(h,HEAP32[(n+12|0)>>2],j,0)|0)?7:8;break;case 7:g=1;d=17;break;case 8:d=0!=(k|0)?11:9;break;case 9:d=(i|0)!=(HEAP32[(h+72|0)>>2]|0)?10:11;break;case 10:d=12;break;case 11:var $super=n+20|0;n=HEAP32[$super>>2];d=4;break;case 12:d=0!=(l|0)?16:13;break;case 13:d=
0!=(r|0)?16:14;break;case 14:d=11==(HEAP32[i>>2]&255|0)?15:16;break;case 15:r=1;n=HEAP32[(h+72|0)>>2];d=3;break;case 16:g=0;d=17;break;case 17:return g;default:assert(0,"bad label: "+d)}}_mrb_const_defined_0.X=1;
function _mrb_attr_get(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];_mrb_iv_get(f,e,b,c);STACKTOP=a}
function _mrb_class_sym(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j=c;a=c+8;var l=c+16;g=f;h=e;i=b;var k=g,n=h,r=_mrb_intern(g,__str321|0);_mrb_obj_iv_get(a,k,n,r);k=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[k>>2]=HEAP32[a>>2];HEAP32[k+4>>2]=HEAP32[a+4>>2];a=0==(HEAP32[(j+4|0)>>2]&255|0)?3:7;break;case 3:a=0!=(HEAP32[(j|
0)>>2]|0)?7:4;break;case 4:a=0!=(i|0)?6:5;break;case 5:d=0;a=8;break;case 6:HEAP32[(l|0)>>2]=h;HEAP16[(l+4|0)>>1]=0;_iv_foreach(g,HEAP32[(i+12|0)>>2],500,l);d=HEAP16[(l+4|0)>>1];a=8;break;case 7:d=HEAP16[(j|0)>>1];a=8;break;case 8:return f=d,STACKTOP=c,f;default:assert(0,"bad label: "+a)}}_mrb_class_sym.X=1;
function _iv_mark_i(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a;a=f;c=3;break;case 3:c=9<=(HEAP32[(b+4|0)>>2]&255|0)?4:5;break;case 4:_mrb_gc_mark(a,HEAP32[(b|0)>>2]);c=5;break;case 5:c=6;break;case 6:return STACKTOP=e,0;default:assert(0,"bad label: "+c)}}
function _mrb_checkstack(f,e){_stack_extend(f,e+1|0,1);return 0}
function _stack_extend(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j,l,k;d=f;g=e;h=b;a=(HEAP32[(d+8|0)>>2]+(g<<3)|0)>>>0>=HEAP32[(d+16|0)>>2]>>>0?3:9;break;case 3:l=HEAP32[(d+12|0)>>2];i=(HEAP32[(d+16|0)>>2]-HEAP32[(d+12|0)>>2]|0)/8&-1;j=(HEAP32[(d+8|0)>>2]-HEAP32[(d+12|0)>>2]|0)/8&-1;a=(g|0)<=(i|0)?4:5;break;case 4:i=i+128|0;a=6;break;case 5:i=i+g|0;a=6;break;case 6:a=_mrb_realloc(d,HEAP32[(d+
12|0)>>2],i<<3|0);HEAP32[(d+12|0)>>2]=a;HEAP32[(d+8|0)>>2]=HEAP32[(d+12|0)>>2]+(j<<3)|0;HEAP32[(d+16|0)>>2]=HEAP32[(d+12|0)>>2]+(i<<3)|0;_envadjust(d,l,HEAP32[(d+12|0)>>2]);a=262016<(i|0)?7:8;break;case 7:a=d;var n=_mrb_class_obj_get(d,__str1144|0);_mrb_raisef(a,n,__str16|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=262016,tempInt));a=8;break;case 8:a=9;break;case 9:a=(g|0)>(h|0)?10:15;break;case 10:k=h;a=11;break;case 11:a=(k|0)<(g|0)?
12:14;break;case 12:a=HEAP32[(d+8|0)>>2]+(k<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[_stack_extend_mrb_value_zero>>2];HEAP32[a+4>>2]=HEAP32[_stack_extend_mrb_value_zero+4>>2];a=13;break;case 13:k=k+1|0;a=11;break;case 14:a=15;break;case 15:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_stack_extend.X=1;
function _top_env(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;a=f;d=HEAP32[(e+20|0)>>2];b=0!=(_is_strict(a,d)|0)?3:4;break;case 3:c=d;b=10;break;case 4:b=5;break;case 5:b=0!=(HEAP32[(d+4|0)>>2]|0)?6:9;break;case 6:d=HEAP32[(d+4|0)>>2];b=0!=(_is_strict(a,d)|0)?7:8;break;case 7:c=d;b=10;break;case 8:b=5;break;case 9:c=d;b=10;break;case 10:return c;default:assert(0,"bad label: "+b)}}
function _mrb_funcall(f,e,b,c,a){var d=STACKTOP;STACKTOP+=140;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[g>>2];HEAP32[b+4>>2]=HEAP32[g+4>>2];for(g=2;;)switch(g){case 2:var h,i,j,l=d,k,n=d+4,r=d+12;h=e;i=c;j=a;i=_mrb_intern(h,i);g=0==(j|0)?3:4;break;case 3:_mrb_funcall_argv(f,h,b,i,0,0);g=13;break;case 4:g=1==(j|0)?5:6;break;case 5:HEAP32[l>>2]=arguments[_mrb_funcall.length];
var t=HEAP32[l>>2],g=t;HEAP32[l>>2]=t+8|0;t=n;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[t>>2]=HEAP32[g>>2];HEAP32[t+4>>2]=HEAP32[g+4>>2];_mrb_funcall_argv(f,h,b,i,1,n);g=13;break;case 6:g=16<(j|0)?7:8;break;case 7:g=h;t=_mrb_class_obj_get(h,__str33|0);_mrb_raisef(g,t,__str134|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=16,tempInt));g=8;break;case 8:HEAP32[l>>2]=arguments[_mrb_funcall.length];
k=0;g=9;break;case 9:g=(k|0)<(j|0)?10:12;break;case 10:var t=r+(k<<3)|0,p=HEAP32[l>>2],g=p;HEAP32[l>>2]=p+8|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[t>>2]=HEAP32[g>>2];HEAP32[t+4>>2]=HEAP32[g+4>>2];g=11;break;case 11:k=k+1|0;g=9;break;case 12:_mrb_funcall_argv(f,h,b,i,j,r|0);g=13;break;case 13:STACKTOP=d;return;default:assert(0,"bad label: "+g)}}_mrb_funcall.X=1;
function _mrb_funcall_argv(f,e,b,c,a,d){var g=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var h=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[h>>2];HEAP32[b+4>>2]=HEAP32[h+4>>2];_mrb_nil_value50(g);_mrb_funcall_with_block(f,e,b,c,a,d,g);STACKTOP=g}
function _mrb_class(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a,d;d=f;c=HEAP32[(e+4|0)>>2]&255;c=0==(c|0)?3:2==(c|0)?6:4==(c|0)?7:3==(c|0)?8:6==(c|0)?9:8==(c|0)?10:11;break;case 3:c=0!=(HEAP32[(e|0)>>2]|0)?4:5;break;case 4:a=HEAP32[(d+112|0)>>2];c=12;break;case 5:a=
HEAP32[(d+116|0)>>2];c=12;break;case 6:a=HEAP32[(d+108|0)>>2];c=12;break;case 7:a=HEAP32[(d+120|0)>>2];c=12;break;case 8:a=HEAP32[(d+104|0)>>2];c=12;break;case 9:a=HEAP32[(d+100|0)>>2];c=12;break;case 10:a=HEAP32[(d+72|0)>>2];c=12;break;case 11:a=HEAP32[(HEAP32[(e|0)>>2]+4|0)>>2];c=12;break;case 12:return STACKTOP=b,a;default:assert(0,"bad label: "+c)}}_mrb_class.X=1;
function _mrb_funcall_with_block(f,e,b,c,a,d,g){var h=STACKTOP;STACKTOP+=84;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var i=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[i>>2];HEAP32[b+4>>2]=HEAP32[i+4>>2];i=g;g=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[g>>2]=HEAP32[i>>2];HEAP32[g+4>>2]=HEAP32[i+4>>2];var j;j=2;for(var i={},l={3:function(a){j=25;M=a},dummy:0};;)try{switch(j){case 2:var k,
n,r,t,p,q=h,v,w,m,x=h+4,s=h+12,y=h+52,B=h+60,A,G=h+68,z=h+76;k=e;n=c;r=a;t=d;v=0;j=0!=(HEAP32[(k|0)>>2]|0)?6:3;break;case 3:var E=s|0,M=(tempInt=setjmpId++,i[tempInt]=1,setjmpLabels[tempInt]=j,HEAP32[E>>2]=tempInt,0);j=25;break;case 25:j=0!=(M|0)?4:5;break;case 4:HEAP32[(k|0)>>2]=0;_mrb_nil_value50(f);j=24;break;case 5:HEAP32[(k|0)>>2]=s;_mrb_funcall_with_block(y,k,b,n,r,t,g);var E=x,C=y;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[E>>2]=HEAP32[C>>
2];HEAP32[E+4>>2]=HEAP32[C+4>>2];HEAP32[(k|0)>>2]=0;E=f;C=x;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[E>>2]=HEAP32[C>>2];HEAP32[E+4>>2]=HEAP32[C+4>>2];j=24;break;case 6:j=0!=(HEAP32[(k+8|0)>>2]|0)?8:7;break;case 7:_stack_init(k);j=8;break;case 8:m=HEAP32[(HEAP32[(k+20|0)>>2]+12|0)>>2];j=0>(r|0)?9:10;break;case 9:var E=k,H=_mrb_class_obj_get(k,__str33|0),C=r;_mrb_raisef(E,H,__str235|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,
"Ran out of stack"),HEAP32[tempInt>>2]=C,tempInt));j=10;break;case 10:var L=_mrb_class(k,b);HEAP32[q>>2]=L;p=_mrb_method_search_vm(k,q,n);j=0!=(p|0)?12:11;break;case 11:v=n;n=_mrb_intern(k,__str336|0);p=_mrb_method_search_vm(k,q,n);m=m+1|0;r=r+1|0;j=12;break;case 12:w=_cipush(k);HEAP16[(w|0)>>1]=n;HEAP32[(w+4|0)>>2]=p;HEAP32[(w+8|0)>>2]=(HEAP32[(k+8|0)>>2]-HEAP32[(k+12|0)>>2]|0)/8&-1;HEAP32[(w+16|0)>>2]=r;HEAP32[(w+28|0)>>2]=HEAP32[(p+16|0)>>2];j=0!=(HEAP32[p>>2]>>>11&128|0)?13:14;break;case 13:HEAP32[(w+
12|0)>>2]=r+2|0;j=15;break;case 14:HEAP32[(w+12|0)>>2]=((HEAP32[(HEAP32[(p+12|0)>>2]+4|0)>>2]&65535)<<16>>16)+2|0;j=15;break;case 15:HEAP32[(w+24|0)>>2]=-1;HEAP32[(k+8|0)>>2]=HEAP32[(k+8|0)>>2]+(m<<3)|0;_stack_extend(k,HEAP32[(w+12|0)>>2],0);var R=HEAP32[(k+8|0)>>2]|0,E=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[R>>2]=HEAP32[E>>2];HEAP32[R+4>>2]=HEAP32[E+4>>2];j=0!=v<<16>>16?16:17;break;case 16:var I=HEAP32[(k+8|0)>>2]+8|0;_mrb_symbol_value51(B,
v);E=I;C=B;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[E>>2]=HEAP32[C>>2];HEAP32[E+4>>2]=HEAP32[C+4>>2];_stack_copy(HEAP32[(k+8|0)>>2]+16|0,t,r-1|0);j=20;break;case 17:j=0<(r|0)?18:19;break;case 18:_stack_copy(HEAP32[(k+8|0)>>2]+8|0,t,r);j=19;break;case 19:j=20;break;case 20:var K=HEAP32[(k+8|0)>>2]+((r+1|0)<<3)|0,E=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[K>>2]=HEAP32[E>>2];HEAP32[K+4>>2]=HEAP32[E+
4>>2];j=0!=(HEAP32[p>>2]>>>11&128|0)?21:22;break;case 21:A=_mrb_gc_arena_save(k);FUNCTION_TABLE[HEAP32[(p+12|0)>>2]](G,k,b);E=x;C=G;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[E>>2]=HEAP32[C>>2];HEAP32[E+4>>2]=HEAP32[C+4>>2];_mrb_gc_arena_restore(k,A);_mrb_gc_protect(k,x);HEAP32[(k+8|0)>>2]=HEAP32[(k+12|0)>>2]+(HEAP32[(HEAP32[(k+20|0)>>2]+8|0)>>2]<<3)|0;_cipop(k);j=23;break;case 22:_mrb_run(z,k,p,b);E=x;C=z;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[E>>2]=HEAP32[C>>2];HEAP32[E+4>>2]=HEAP32[C+4>>2];j=23;break;case 23:E=f;C=x;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[E>>2]=HEAP32[C>>2];HEAP32[E+4>>2]=HEAP32[C+4>>2];j=24;break;case 24:STACKTOP=h;return;default:assert(0,"bad label: "+j)}}catch(Q){if(!Q.longjmp||!(Q.id in i))throw Q;l[setjmpLabels[Q.id]](Q.value)}}_mrb_funcall_with_block.X=1;
function _mrb_nil_value50(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _stack_init(f){var e=_mrb_calloc(f,128,8);HEAP32[(f+12|0)>>2]=e;HEAP32[(f+16|0)>>2]=HEAP32[(f+12|0)>>2]+1024|0;HEAP32[(f+8|0)>>2]=HEAP32[(f+12|0)>>2];e=_mrb_calloc(f,32,44);HEAP32[(f+24|0)>>2]=e;HEAP32[(f+28|0)>>2]=HEAP32[(f+24|0)>>2]+1408|0;HEAP32[(f+20|0)>>2]=HEAP32[(f+24|0)>>2];HEAP32[(HEAP32[(f+20|0)>>2]+28|0)>>2]=HEAP32[(f+72|0)>>2]}
function _cipush(f){var e;for(e=2;;)switch(e){case 2:var b,c,a;b=f;c=HEAP32[(HEAP32[(b+20|0)>>2]+36|0)>>2];a=HEAP32[(HEAP32[(b+20|0)>>2]+32|0)>>2];e=(HEAP32[(b+20|0)>>2]+44|0)==(HEAP32[(b+28|0)>>2]|0)?3:4;break;case 3:e=(HEAP32[(b+20|0)>>2]-HEAP32[(b+24|0)>>2]|0)/44&-1;var d=_mrb_realloc(b,HEAP32[(b+24|0)>>2],(44*e|0)<<1|0);HEAP32[(b+24|0)>>2]=d;HEAP32[(b+20|0)>>2]=HEAP32[(b+24|0)>>2]+44*e|0;HEAP32[(b+28|0)>>2]=HEAP32[(b+24|0)>>2]+44*(e<<1|0)|0;e=4;break;case 4:return f=b+20|0,HEAP32[f>>2]=HEAP32[f>>
2]+44|0,HEAP32[(HEAP32[(b+20|0)>>2]+12|0)>>2]=2,HEAP32[(HEAP32[(b+20|0)>>2]+36|0)>>2]=c,HEAP32[(HEAP32[(b+20|0)>>2]+32|0)>>2]=a,HEAP32[(HEAP32[(b+20|0)>>2]+40|0)>>2]=0,HEAP32[(b+20|0)>>2];default:assert(0,"bad label: "+e)}}_cipush.X=1;
function _mrb_symbol_value51(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|4;HEAP16[(d|0)>>1]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _stack_copy(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h;a=f;d=e;g=b;h=0;c=3;break;case 3:c=h>>>0<g>>>0?4:6;break;case 4:c=a+(h<<3)|0;var i=d+(h<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[i>>2];HEAP32[c+4>>2]=HEAP32[i+4>>2];c=5;break;case 5:h=h+1|0;c=3;break;case 6:return;default:assert(0,"bad label: "+c)}}
function _cipop(f){var e;for(e=2;;)switch(e){case 2:var b,c,a;b=f;e=0!=(HEAP32[(HEAP32[(b+20|0)>>2]+40|0)>>2]|0)?3:4;break;case 3:e=HEAP32[(HEAP32[(b+20|0)>>2]+40|0)>>2];c=HEAP32[e>>2]>>>11&2097151;a=_mrb_malloc(b,c<<3|0);HEAP32[(e+20|0)>>2]=-1;_stack_copy(a,HEAP32[(e+12|0)>>2],c);HEAP32[(e+12|0)>>2]=a;e=4;break;case 4:f=b+20|0;HEAP32[f>>2]=HEAP32[f>>2]-44|0;return;default:assert(0,"bad label: "+e)}}_cipop.X=1;
function _mrb_run(f,e,b,c){var a=STACKTOP;STACKTOP+=540;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=c,c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];var g;g=2;for(var h={},i={2:function(a){g=677;pd=a},dummy:0};;)try{switch(g){case 2:var j,l,k,n,r,t,p,q,v,w,m=a,x=a+40,s=a+48,y=a+56,B=a+64,A=a+72,G,z=a+80,E,M=a+88,C,H,L,R,I,K,Q,O,aa=a+96,J,la=a+100,ba=a+108,U,T=
a+116,ua=a+124,N=a+132,u,na=a+140,Z,Aa=a+148,Da=a+156,ja=a+164,X,ya,ca=a+172,Na,Ba,va,pb=a+176,Db=a+184,Ra=a+192,Pa,$a,pa,ub,Ha,Ia,ma,Ja,Sa=a+200,qb=a+208,Sb=a+216,Eb,eb,ab,Fb,Ta=a+224,Ea,wa,Ka,bb,xa,W,qa,fb,Ua,ga,gb,hb=a+232,ra=a+240,Y,cb,ib=a+248,Ca,oa,jb,za=a+256,sa,Va,db,Fa,kb=a+264,La,vb=a+268,Wa,rb=a+276,Gb=a+284,lb=a+292,Xa,Ma,mb,Ya,Hb,Qa,S,wb,ka,xb,sb,yb,Nb,Ib,Oa=a+300,V,Za,$,Jb,tb,zb,D,Ab,Bb,Kb,Cb,Tb,ta,Yb,Ob,Ub,Pb,P,Vb,Zb,$b,nb,Qb,Wb,ic,Xb,da,ea,fa,ha,ia,Fc=a+308,Gc=a+316,jc,rc,kc=a+324,
sc=a+332,Ga,tc=a+340,ac,Lb,uc=a+348,cc,bc,ob,vc=a+356,wc=a+364,xc=a+372,Rb,lc,yc,mc=a+380,dc,ec,nc=a+388,zc=a+396,oc,Ac,fc=a+404,$super2989=a+412,Tc,Uc=a+420,Vc=a+428,Bc,Cc,pc=a+436,qd,Wc=a+444,Xc=a+452,Dc,Mb,Hc=a+460,gc,Yc=a+468,Zc,$c,rd=a+476,sd=a+484,td=a+492,ad,ud=a+500,Ec,Ic=a+508,Jc=a+516,vd=a+524,wd=a+532;j=e;l=b;k=HEAP32[(l+12|0)>>2];n=HEAP32[(k+8|0)>>2];r=HEAP32[(k+12|0)>>2];t=HEAP32[(k+16|0)>>2];p=0;v=_mrb_gc_arena_save(j);w=HEAP32[(j|0)>>2];var Qd=m|0,pd=(tempInt=setjmpId++,h[tempInt]=
1,setjmpLabels[tempInt]=g,HEAP32[Qd>>2]=tempInt,0);g=677;break;case 677:g=0==(pd|0)?3:4;break;case 3:HEAP32[(j|0)>>2]=m;g=5;break;case 4:g=203;break;case 5:g=0!=(HEAP32[(j+8|0)>>2]|0)?7:6;break;case 6:_stack_init(j);g=7;break;case 7:HEAP32[(HEAP32[(j+20|0)>>2]+4|0)>>2]=l;HEAP32[(HEAP32[(j+20|0)>>2]+12|0)>>2]=((HEAP32[(k+4|0)>>2]&65535)<<16>>16)+2|0;p=HEAP32[(j+8|0)>>2];var bd=p|0,Kc=c;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[bd>>2]=HEAP32[Kc>>2];
HEAP32[bd+4>>2]=HEAP32[Kc+4>>2];q=HEAP32[n>>2];var F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 8:var xd=n+4|0;n=xd;q=HEAP32[xd>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 9:var cd=p+((q>>23&511)<<3)|0,dd=p+((q>>14&511)<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[cd>>2]=HEAP32[dd>>2];HEAP32[cd+4>>2]=HEAP32[dd+4>>2];var Lc=n+4|0;n=Lc;q=HEAP32[Lc>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;
break;case 10:var ed=p+((q>>23&511)<<3)|0,yd=r+((q>>7&65535)<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[ed>>2]=HEAP32[yd>>2];HEAP32[ed+4>>2]=HEAP32[yd+4>>2];var fd=n+4|0;n=fd;q=HEAP32[fd>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 11:g=12;break;case 12:var gd=(p+((q>>23&511)<<3)|0)+4|0;HEAP32[gd>>2]=HEAP32[gd>>2]&-256|3;HEAP32[(p+((q>>23&511)<<3)|0)>>2]=(q>>7&65535)-32767|0;g=13;break;case 13:var zd=n+4|0;n=zd;q=HEAP32[zd>>
2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 14:g=15;break;case 15:var Ad=(p+((q>>23&511)<<3)|0)+4|0;HEAP32[Ad>>2]=HEAP32[Ad>>2]&-256|4;HEAP16[(p+((q>>23&511)<<3)|0)>>1]=HEAP16[(t+((q>>7&65535)<<1)|0)>>1];g=16;break;case 16:var Bd=n+4|0;n=Bd;q=HEAP32[Bd>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 17:var hd=p+((q>>23&511)<<3)|0,Cd=p|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[hd>>2]=HEAP32[Cd>>2];HEAP32[hd+
4>>2]=HEAP32[Cd+4>>2];var Dd=n+4|0;n=Dd;q=HEAP32[Dd>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 18:g=19;break;case 19:var id=(p+((q>>23&511)<<3)|0)+4|0;HEAP32[id>>2]=HEAP32[id>>2]&-256|2;HEAP32[(p+((q>>23&511)<<3)|0)>>2]=1;g=20;break;case 20:var jd=n+4|0;n=jd;q=HEAP32[jd>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 21:g=22;break;case 22:var Mc=(p+((q>>23&511)<<3)|0)+4|0;HEAP32[Mc>>2]&=-256;HEAP32[(p+((q>>23&511)<<3)|0)>>2]=1;g=23;break;case 23:var Nc=
n+4|0;n=Nc;q=HEAP32[Nc>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 24:var Ed=p+((q>>23&511)<<3)|0;_mrb_gv_get(x,j,HEAP16[(t+((q>>7&65535)<<1)|0)>>1]);var kd=Ed,ld=x;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[kd>>2]=HEAP32[ld>>2];HEAP32[kd+4>>2]=HEAP32[ld+4>>2];var md=n+4|0;n=md;q=HEAP32[md>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 25:_mrb_gv_set(j,HEAP16[(t+((q>>7&65535)<<1)|0)>>1],p+((q>>23&511)<<
3)|0);var Cf=n+4|0;n=Cf;q=HEAP32[Cf>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 26:var vh=p+((q>>23&511)<<3)|0;_mrb_vm_special_get(s,j,q>>7&65535);var Df=vh,Ef=s;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Df>>2]=HEAP32[Ef>>2];HEAP32[Df+4>>2]=HEAP32[Ef+4>>2];var Rd=n+4|0;n=Rd;q=HEAP32[Rd>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 27:_mrb_vm_special_set(j,q>>7&65535,p+((q>>23&511)<<3)|0);var Sd=n+4|0;
n=Sd;q=HEAP32[Sd>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 28:var wh=p+((q>>23&511)<<3)|0;_mrb_vm_iv_get(y,j,HEAP16[(t+((q>>7&65535)<<1)|0)>>1]);var Ff=wh,Gf=y;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Ff>>2]=HEAP32[Gf>>2];HEAP32[Ff+4>>2]=HEAP32[Gf+4>>2];var Td=n+4|0;n=Td;q=HEAP32[Td>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 29:_mrb_vm_iv_set(j,HEAP16[(t+((q>>7&65535)<<1)|0)>>1],p+((q>>23&511)<<
3)|0);var Ud=n+4|0;n=Ud;q=HEAP32[Ud>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 30:var xh=p+((q>>23&511)<<3)|0;_mrb_vm_cv_get(B,j,HEAP16[(t+((q>>7&65535)<<1)|0)>>1]);var Hf=xh,If=B;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Hf>>2]=HEAP32[If>>2];HEAP32[Hf+4>>2]=HEAP32[If+4>>2];var Vd=n+4|0;n=Vd;q=HEAP32[Vd>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 31:_mrb_vm_cv_set(j,HEAP16[(t+((q>>7&65535)<<1)|0)>>
1],p+((q>>23&511)<<3)|0);var Wd=n+4|0;n=Wd;q=HEAP32[Wd>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 32:var yh=p+((q>>23&511)<<3)|0;_mrb_vm_const_get(A,j,HEAP16[(t+((q>>7&65535)<<1)|0)>>1]);var Jf=yh,Xd=A;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Jf>>2]=HEAP32[Xd>>2];HEAP32[Jf+4>>2]=HEAP32[Xd+4>>2];var Yd=n+4|0;n=Yd;q=HEAP32[Yd>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 33:_mrb_vm_const_set(j,HEAP16[(t+
((q>>7&65535)<<1)|0)>>1],p+((q>>23&511)<<3)|0);var Zd=n+4|0;n=Zd;q=HEAP32[Zd>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 34:G=q>>23&511;var Kf=p+(G<<3)|0;_mrb_const_get(z,j,p+(G<<3)|0,HEAP16[(t+((q>>7&65535)<<1)|0)>>1]);var $d=Kf,ae=z;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[$d>>2]=HEAP32[ae>>2];HEAP32[$d+4>>2]=HEAP32[ae+4>>2];var Lf=n+4|0;n=Lf;q=HEAP32[Lf>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 35:E=
q>>23&511;_mrb_const_set(j,p+((E+1|0)<<3)|0,HEAP16[(t+((q>>7&65535)<<1)|0)>>1],p+(E<<3)|0);var Mf=n+4|0;n=Mf;q=HEAP32[Mf>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 36:var zh=p+((q>>23&511)<<3)|0;_uvget(M,j,q>>7&127,q>>14&511);var be=zh,ce=M;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[be>>2]=HEAP32[ce>>2];HEAP32[be+4>>2]=HEAP32[ce+4>>2];var Nf=n+4|0;n=Nf;q=HEAP32[Nf>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;
case 37:_uvset(j,q>>7&127,q>>14&511,p+((q>>23&511)<<3)|0);var Of=n+4|0;n=Of;q=HEAP32[Of>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 38:n=n+(((q>>7&65535)-32767|0)<<2)|0;q=HEAP32[n>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 39:g=0!=(HEAP32[((p+((q>>23&511)<<3)|0)+4|0)>>2]&255|0)?40:41;break;case 40:n=n+(((q>>7&65535)-32767|0)<<2)|0;q=HEAP32[n>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 41:var Pf=n+4|0;n=Pf;q=HEAP32[Pf>>2];F=HEAP32[(_mrb_run_optable+
((q&127)<<2)|0)>>2];g=676;break;case 42:g=0!=(HEAP32[((p+((q>>23&511)<<3)|0)+4|0)>>2]&255|0)?44:43;break;case 43:n=n+(((q>>7&65535)-32767|0)<<2)|0;q=HEAP32[n>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 44:var de=n+4|0;n=de;q=HEAP32[de>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 45:g=(HEAP32[(j+36|0)>>2]|0)<=(HEAP32[(HEAP32[(j+20|0)>>2]+32|0)>>2]|0)?46:50;break;case 46:g=0==(HEAP32[(j+36|0)>>2]|0)?47:48;break;case 47:HEAP32[(j+36|0)>>2]=16;g=49;break;
case 48:var ee=j+36|0;HEAP32[ee>>2]=HEAP32[ee>>2]<<1|0;g=49;break;case 49:var Qf=_mrb_realloc(j,HEAP32[(j+32|0)>>2],HEAP32[(j+36|0)>>2]<<2|0);HEAP32[(j+32|0)>>2]=Qf;g=50;break;case 50:var Ah=n+(((q>>7&65535)-32767|0)<<2)|0,Rf=HEAP32[(j+20|0)>>2]+32|0,fe=HEAP32[Rf>>2];HEAP32[Rf>>2]=fe+1|0;HEAP32[(HEAP32[(j+32|0)>>2]+(fe<<2)|0)>>2]=Ah;var ge=n+4|0;n=ge;q=HEAP32[ge>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 51:g=52;break;case 52:var he=(p+((q>>23&511)<<3)|0)+4|0;HEAP32[he>>2]=
HEAP32[he>>2]&-256|HEAP32[HEAP32[(j+48|0)>>2]>>2]&255;HEAP32[(p+((q>>23&511)<<3)|0)>>2]=HEAP32[(j+48|0)>>2];g=53;break;case 53:HEAP32[(j+48|0)>>2]=0;var ie=n+4|0;n=ie;q=HEAP32[ie>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 54:C=q>>23&511;g=55;break;case 55:var Sf=C;C=Sf-1|0;g=0!=(Sf|0)?56:57;break;case 56:var Tf=HEAP32[(j+20|0)>>2]+32|0;HEAP32[Tf>>2]=HEAP32[Tf>>2]-1|0;g=55;break;case 57:var je=n+4|0;n=je;q=HEAP32[je>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;
break;case 58:HEAP32[(j+48|0)>>2]=HEAP32[(p+((q>>23&511)<<3)|0)>>2];g=203;break;case 59:H=_mrb_closure_new(j,HEAP32[(HEAP32[(j+56|0)>>2]+((((HEAP32[k>>2]&65535)<<16>>16)+(q>>7&65535)|0)<<2)|0)>>2]);g=(HEAP32[(j+44|0)>>2]|0)<=(HEAP32[(HEAP32[(j+20|0)>>2]+36|0)>>2]|0)?60:64;break;case 60:g=0==(HEAP32[(j+44|0)>>2]|0)?61:62;break;case 61:HEAP32[(j+44|0)>>2]=16;g=63;break;case 62:var ke=j+44|0;HEAP32[ke>>2]=HEAP32[ke>>2]<<1|0;g=63;break;case 63:var Bh=_mrb_realloc(j,HEAP32[(j+40|0)>>2],HEAP32[(j+44|0)>>
2]<<2|0);HEAP32[(j+40|0)>>2]=Bh;g=64;break;case 64:var Ch=H,Uf=HEAP32[(j+20|0)>>2]+36|0,Vf=HEAP32[Uf>>2];HEAP32[Uf>>2]=Vf+1|0;HEAP32[(HEAP32[(j+40|0)>>2]+(Vf<<2)|0)>>2]=Ch;_mrb_gc_arena_restore(j,v);var Wf=n+4|0;n=Wf;q=HEAP32[Wf>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 65:R=q>>23&511;L=0;g=66;break;case 66:g=(L|0)<(R|0)?67:69;break;case 67:var Dh=j,Xf=HEAP32[(j+20|0)>>2]+36|0,Yf=HEAP32[Xf>>2]-1|0;HEAP32[Xf>>2]=Yf;_ecall(Dh,Yf);g=68;break;case 68:L=L+1|0;g=66;break;case 69:_mrb_gc_arena_restore(j,
v);var le=n+4|0;n=le;q=HEAP32[le>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 70:I=q>>23&511;g=71;break;case 71:var me=(p+(I<<3)|0)+4|0;HEAP32[me>>2]&=-256;HEAP32[(p+(I<<3)|0)>>2]=0;g=72;break;case 72:var Zf=n+4|0;n=Zf;q=HEAP32[Zf>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 73:g=74;break;case 74:g=75;break;case 75:K=q>>23&511;Q=q>>7&127;U=HEAP16[(t+((q>>14&511)<<1)|0)>>1];var $f=la,ag=p+(K<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[$f>>2]=HEAP32[ag>>2];HEAP32[$f+4>>2]=HEAP32[ag+4>>2];g=33!=(q&127|0)?76:84;break;case 76:g=127==(Q|0)?77:80;break;case 77:g=78;break;case 78:var ne=(p+((K+2|0)<<3)|0)+4|0;HEAP32[ne>>2]&=-256;HEAP32[(p+((K+2|0)<<3)|0)>>2]=0;g=79;break;case 79:g=83;break;case 80:g=81;break;case 81:var oe=(p+(((K+Q|0)+1|0)<<3)|0)+4|0;HEAP32[oe>>2]&=-256;HEAP32[(p+(((K+Q|0)+1|0)<<3)|0)>>2]=0;g=82;break;case 82:g=83;break;case 83:g=84;break;case 84:var Eh=_mrb_class(j,la);HEAP32[aa>>2]=Eh;O=_mrb_method_search_vm(j,
aa,U);g=0!=(O|0)?89:85;break;case 85:_mrb_symbol_value51(T,U);U=_mrb_intern(j,__str336|0);O=_mrb_method_search_vm(j,aa,U);g=127==(Q|0)?86:87;break;case 86:_mrb_ary_unshift(ua,j,p+((K+1|0)<<3)|0,T);g=88;break;case 87:_llvm_memmove_p0i8_p0i8_i32((p+(K<<3)|0)+16|0,(p+(K<<3)|0)+8|0,(Q+1|0)<<3|0,4,0);var bg=p+((K+1|0)<<3)|0,cg=T;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[bg>>2]=HEAP32[cg>>2];HEAP32[bg+4>>2]=HEAP32[cg+4>>2];Q=Q+1|0;g=88;break;case 88:g=
89;break;case 89:J=_cipush(j);HEAP16[(J|0)>>1]=U;HEAP32[(J+4|0)>>2]=O;HEAP32[(J+8|0)>>2]=(HEAP32[(j+8|0)>>2]-HEAP32[(j+12|0)>>2]|0)/8&-1;HEAP32[(J+16|0)>>2]=Q;g=127==(HEAP32[(J+16|0)>>2]|0)?90:91;break;case 90:HEAP32[(J+16|0)>>2]=-1;g=91;break;case 91:HEAP32[(J+28|0)>>2]=HEAP32[aa>>2];HEAP32[(J+20|0)>>2]=n+4|0;HEAP32[(J+24|0)>>2]=K;var pe=j+8|0;HEAP32[pe>>2]=HEAP32[pe>>2]+(K<<3)|0;g=0!=(HEAP32[O>>2]>>>11&128|0)?92:98;break;case 92:g=127==(Q|0)?93:94;break;case 93:HEAP32[(J+12|0)>>2]=3;g=95;break;
case 94:HEAP32[(J+12|0)>>2]=Q+2|0;g=95;break;case 95:FUNCTION_TABLE[HEAP32[(O+12|0)>>2]](N,j,la);var qe=ba,dg=N;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[qe>>2]=HEAP32[dg>>2];HEAP32[qe+4>>2]=HEAP32[dg+4>>2];var eg=HEAP32[(j+8|0)>>2]|0,re=ba;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[eg>>2]=HEAP32[re>>2];HEAP32[eg+4>>2]=HEAP32[re+4>>2];_mrb_gc_arena_restore(j,v);g=0!=(HEAP32[(j+48|0)>>2]|0)?96:97;
break;case 96:g=203;break;case 97:var fg=HEAP32[(j+12|0)>>2]+(HEAP32[(HEAP32[(j+20|0)>>2]+8|0)>>2]<<3)|0;p=HEAP32[(j+8|0)>>2]=fg;_cipop(j);var se=n+4|0;n=se;q=HEAP32[se>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 98:var gg=O;l=HEAP32[(HEAP32[(j+20|0)>>2]+4|0)>>2]=gg;k=HEAP32[(O+12|0)>>2];r=HEAP32[(k+12|0)>>2];t=HEAP32[(k+16|0)>>2];HEAP32[(J+12|0)>>2]=(HEAP32[(k+4|0)>>2]&65535)<<16>>16;g=0>(HEAP32[(J+16|0)>>2]|0)?99:103;break;case 99:var hg=j;g=3>((HEAP32[(k+4|0)>>2]&65535)<<
16>>16|0)?100:101;break;case 100:var te=3;g=102;break;case 101:te=(HEAP32[(k+4|0)>>2]&65535)<<16>>16;g=102;break;case 102:_stack_extend(hg,te,3);g=104;break;case 103:_stack_extend(j,(HEAP32[(k+4|0)>>2]&65535)<<16>>16,HEAP32[(J+16|0)>>2]+2|0);g=104;break;case 104:p=HEAP32[(j+8|0)>>2];n=HEAP32[(k+8|0)>>2];q=HEAP32[n>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 105:var ig=n+4|0;n=ig;q=HEAP32[ig>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 106:var jg=na,kg=
HEAP32[(j+8|0)>>2]|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[jg>>2]=HEAP32[kg>>2];HEAP32[jg+4>>2]=HEAP32[kg+4>>2];Z=HEAP32[(na|0)>>2];u=HEAP32[(j+20|0)>>2];HEAP32[(u+28|0)>>2]=HEAP32[(Z+16|0)>>2];HEAP32[(u+4|0)>>2]=Z;g=0!=(HEAP32[(Z+20|0)>>2]|0)?107:112;break;case 107:g=0!=HEAP16[(HEAP32[(Z+20|0)>>2]+16|0)>>1]<<16>>16?108:109;break;case 108:HEAP16[(u|0)>>1]=HEAP16[(HEAP32[(Z+20|0)>>2]+16|0)>>1];g=109;break;case 109:g=0!=(HEAP32[(HEAP32[(Z+20|0)>>
2]+12|0)>>2]|0)?111:110;break;case 110:HEAP32[(HEAP32[(Z+20|0)>>2]+12|0)>>2]=HEAP32[(j+8|0)>>2];g=111;break;case 111:g=112;break;case 112:g=0!=(HEAP32[Z>>2]>>>11&128|0)?113:116;break;case 113:FUNCTION_TABLE[HEAP32[(Z+12|0)>>2]](Aa,j,na);var ue=na,ve=Aa;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[ue>>2]=HEAP32[ve>>2];HEAP32[ue+4>>2]=HEAP32[ve+4>>2];_mrb_gc_arena_restore(j,v);g=0!=(HEAP32[(j+48|0)>>2]|0)?114:115;break;case 114:g=203;break;case 115:u=
HEAP32[(j+20|0)>>2];var Fh=HEAP32[(j+12|0)>>2]+(HEAP32[(u+8|0)>>2]<<3)|0;p=HEAP32[(j+8|0)>>2]=Fh;var lg=p+(HEAP32[(u+24|0)>>2]<<3)|0,mg=na;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[lg>>2]=HEAP32[mg>>2];HEAP32[lg+4>>2]=HEAP32[mg+4>>2];n=HEAP32[(u+20|0)>>2];_cipop(j);k=HEAP32[(HEAP32[(HEAP32[(j+20|0)>>2]+4|0)>>2]+12|0)>>2];r=HEAP32[(k+12|0)>>2];t=HEAP32[(k+16|0)>>2];q=HEAP32[n>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 116:l=
Z;k=HEAP32[(Z+12|0)>>2];g=0!=(k|0)?118:117;break;case 117:var ng=HEAP32[(j+8|0)>>2]|0;_mrb_nil_value50(Da);var we=ng,xe=Da;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[we>>2]=HEAP32[xe>>2];HEAP32[we+4>>2]=HEAP32[xe+4>>2];g=201;break;case 118:r=HEAP32[(k+12|0)>>2];t=HEAP32[(k+16|0)>>2];HEAP32[(u+12|0)>>2]=(HEAP32[(k+4|0)>>2]&65535)<<16>>16;g=0>(HEAP32[(u+16|0)>>2]|0)?119:123;break;case 119:var Gh=j;g=3>((HEAP32[(k+4|0)>>2]&65535)<<16>>16|0)?120:121;
break;case 120:var og=3;g=122;break;case 121:og=(HEAP32[(k+4|0)>>2]&65535)<<16>>16;g=122;break;case 122:_stack_extend(Gh,og,3);g=124;break;case 123:_stack_extend(j,(HEAP32[(k+4|0)>>2]&65535)<<16>>16,HEAP32[(u+16|0)>>2]+2|0);g=124;break;case 124:p=HEAP32[(j+8|0)>>2];var ye=p|0,ze=HEAP32[(HEAP32[(Z+20|0)>>2]+12|0)>>2]|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[ye>>2]=HEAP32[ze>>2];HEAP32[ye+4>>2]=HEAP32[ze+4>>2];n=HEAP32[(HEAP32[(Z+12|0)>>2]+8|0)>>
2];q=HEAP32[n>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 125:X=HEAP32[(j+20|0)>>2];Na=HEAP16[(X|0)>>1];Ba=q>>23&511;va=q>>7&127;var Ae=ja,Be=p|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Ae>>2]=HEAP32[Be>>2];HEAP32[Ae+4>>2]=HEAP32[Be+4>>2];var $super=HEAP32[(HEAP32[(j+20|0)>>2]+28|0)>>2]+20|0;HEAP32[ca>>2]=HEAP32[$super>>2];ya=_mrb_method_search_vm(j,ca,Na);g=0!=(ya|0)?132:126;break;case 126:Na=_mrb_intern(j,__str336|0);
ya=_mrb_method_search_vm(j,ca,Na);g=127==(va|0)?127:128;break;case 127:var Hh=j,Ih=p+((Ba+1|0)<<3)|0;_mrb_symbol_value51(pb,HEAP16[(X|0)>>1]);_mrb_ary_unshift(Db,Hh,Ih,pb);g=131;break;case 128:_llvm_memmove_p0i8_p0i8_i32((p+(Ba<<3)|0)+16|0,(p+(Ba<<3)|0)+8|0,(va+1|0)<<3|0,4,0);g=129;break;case 129:var pg=(p+((Ba+1|0)<<3)|0)+4|0;HEAP32[pg>>2]=HEAP32[pg>>2]&-256|4;HEAP16[(p+((Ba+1|0)<<3)|0)>>1]=HEAP16[(X|0)>>1];g=130;break;case 130:va=va+1|0;g=131;break;case 131:g=132;break;case 132:X=_cipush(j);HEAP16[(X|
0)>>1]=Na;HEAP32[(X+4|0)>>2]=ya;HEAP32[(X+8|0)>>2]=(HEAP32[(j+8|0)>>2]-HEAP32[(j+12|0)>>2]|0)/8&-1;HEAP32[(X+16|0)>>2]=va;g=127==(HEAP32[(X+16|0)>>2]|0)?133:134;break;case 133:HEAP32[(X+16|0)>>2]=-1;g=134;break;case 134:HEAP32[(X+28|0)>>2]=HEAP32[(ya+16|0)>>2];HEAP32[(X+20|0)>>2]=n+4|0;var qg=j+8|0;HEAP32[qg>>2]=HEAP32[qg>>2]+(Ba<<3)|0;var rg=HEAP32[(j+8|0)>>2]|0,sg=ja;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[rg>>2]=HEAP32[sg>>2];HEAP32[rg+4>>2]=
HEAP32[sg+4>>2];g=0!=(HEAP32[ya>>2]>>>11&128|0)?135:138;break;case 135:var Jh=HEAP32[(j+8|0)>>2]|0;FUNCTION_TABLE[HEAP32[(ya+12|0)>>2]](Ra,j,ja);var Ce=Jh,De=Ra;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Ce>>2]=HEAP32[De>>2];HEAP32[Ce+4>>2]=HEAP32[De+4>>2];_mrb_gc_arena_restore(j,v);g=0!=(HEAP32[(j+48|0)>>2]|0)?136:137;break;case 136:g=203;break;case 137:var Kh=HEAP32[(j+12|0)>>2]+(HEAP32[(HEAP32[(j+20|0)>>2]+8|0)>>2]<<3)|0;p=HEAP32[(j+8|0)>>2]=Kh;
_cipop(j);var tg=n+4|0;n=tg;q=HEAP32[tg>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 138:HEAP32[(X+24|0)>>2]=Ba;HEAP32[(X+4|0)>>2]=ya;k=HEAP32[(ya+12|0)>>2];r=HEAP32[(k+12|0)>>2];t=HEAP32[(k+16|0)>>2];HEAP32[(X+12|0)>>2]=(HEAP32[(k+4|0)>>2]&65535)<<16>>16;g=0>(HEAP32[(X+16|0)>>2]|0)?139:143;break;case 139:var Lh=j;g=3>((HEAP32[(k+4|0)>>2]&65535)<<16>>16|0)?140:141;break;case 140:var ug=3;g=142;break;case 141:ug=(HEAP32[(k+4|0)>>2]&65535)<<16>>16;g=142;break;case 142:_stack_extend(Lh,
ug,3);g=144;break;case 143:_stack_extend(j,(HEAP32[(k+4|0)>>2]&65535)<<16>>16,HEAP32[(X+16|0)>>2]+2|0);g=144;break;case 144:p=HEAP32[(j+8|0)>>2];n=HEAP32[(k+8|0)>>2];q=HEAP32[n>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 145:Pa=q>>23&511;$a=q>>7&65535;pa=$a>>10&63;ub=$a>>9&1;Ha=$a>>4&31;Ia=$a>>0&15;g=0==(Ia|0)?146:147;break;case 146:ma=p+8|0;g=150;break;case 147:Ja=_uvenv(j,Ia-1|0);g=0!=(Ja|0)?149:148;break;case 148:var Mh=j,Nh=_mrb_class_obj_get(j,__str437|0);_mrb_exc_new(qb,
Mh,Nh,_mrb_run_m|0,30);var Ee=Sa,vg=qb;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Ee>>2]=HEAP32[vg>>2];HEAP32[Ee+4>>2]=HEAP32[vg+4>>2];HEAP32[(j+48|0)>>2]=HEAP32[(Sa|0)>>2];g=203;break;case 149:ma=HEAP32[(Ja+12|0)>>2]+8|0;g=150;break;case 150:g=0==(ub|0)?151:152;break;case 151:var Oh=p+(Pa<<3)|0;_mrb_ary_new_elts(Sb,j,pa+Ha|0,ma);var Fe=Oh,Ge=Sb;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Fe>>2]=HEAP32[Ge>>
2];HEAP32[Fe+4>>2]=HEAP32[Ge+4>>2];g=159;break;case 152:ab=Eb=0;g=15==(HEAP32[((ma+(pa<<3)|0)+4|0)>>2]&255|0)?153:154;break;case 153:Fb=HEAP32[(ma+(pa<<3)|0)>>2];Eb=HEAP32[(Fb+20|0)>>2];ab=HEAP32[(Fb+12|0)>>2];g=154;break;case 154:var wg=p+(Pa<<3)|0;_mrb_ary_new_capa(Ta,j,(pa+ab|0)+Ha|0);var He=wg,xg=Ta;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[He>>2]=HEAP32[xg>>2];HEAP32[He+4>>2]=HEAP32[xg+4>>2];eb=HEAP32[(p+(Pa<<3)|0)>>2];_stack_copy(HEAP32[(eb+
20|0)>>2],ma,pa);g=0<(ab|0)?155:156;break;case 155:_stack_copy(HEAP32[(eb+20|0)>>2]+(pa<<3)|0,Eb,ab);g=156;break;case 156:g=0<(Ha|0)?157:158;break;case 157:_stack_copy((HEAP32[(eb+20|0)>>2]+(pa<<3)|0)+(ab<<3)|0,(ma+(pa<<3)|0)+8|0,Ha);g=158;break;case 158:HEAP32[(eb+12|0)>>2]=(pa+ab|0)+Ha|0;g=159;break;case 159:var yg=p+((Pa+1|0)<<3)|0,zg=ma+(((pa+ub|0)+Ha|0)<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[yg>>2]=HEAP32[zg>>2];HEAP32[yg+4>>2]=HEAP32[zg+
4>>2];_mrb_gc_arena_restore(j,v);var Ag=n+4|0;n=Ag;q=HEAP32[Ag>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 160:Ea=q>>7&33554431;wa=Ea>>18&31;Ka=Ea>>13&31;bb=Ea>>12&1;xa=Ea>>7&31;W=HEAP32[(HEAP32[(j+20|0)>>2]+16|0)>>2];fb=qa=p+8|0;Ua=((wa+Ka|0)+bb|0)+xa|0;g=0>(W|0)?161:162;break;case 161:var Ie=1;g=163;break;case 162:Ie=W;g=163;break;case 163:ga=qa+(Ie<<3)|0;g=0>(W|0)?164:165;break;case 164:gb=HEAP32[(p+8|0)>>2];qa=HEAP32[(gb+20|0)>>2];W=HEAP32[(gb+12|0)>>2];_mrb_gc_protect(j,
p+8|0);g=165;break;case 165:g=0!=(HEAP32[(HEAP32[(j+20|0)>>2]+4|0)>>2]|0)?166:174;break;case 166:g=0!=(HEAP32[HEAP32[(HEAP32[(j+20|0)>>2]+4|0)>>2]>>2]>>>11&256|0)?167:174;break;case 167:g=0<=(W|0)?168:173;break;case 168:g=(W|0)<(wa+xa|0)?171:169;break;case 169:g=0==(bb|0)?170:172;break;case 170:g=(W|0)>(Ua|0)?171:172;break;case 171:_argnum_error(j,wa+xa|0);g=203;break;case 172:g=173;break;case 173:g=179;break;case 174:g=1<(Ua|0)?175:178;break;case 175:g=1==(W|0)?176:178;break;case 176:g=15==(HEAP32[((qa|
0)+4|0)>>2]&255|0)?177:178;break;case 177:W=HEAP32[(HEAP32[(qa|0)>>2]+12|0)>>2];qa=HEAP32[(HEAP32[(qa|0)>>2]+20|0)>>2];g=178;break;case 178:g=179;break;case 179:HEAP32[(HEAP32[(j+20|0)>>2]+16|0)>>2]=Ua;g=(W|0)<(Ua|0)?180:190;break;case 180:var Je=p+((Ua+1|0)<<3)|0,Bg=ga;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Je>>2]=HEAP32[Bg>>2];HEAP32[Je+4>>2]=HEAP32[Bg+4>>2];g=(fb|0)!=(qa|0)?181:182;break;case 181:_llvm_memmove_p0i8_p0i8_i32(p+8|0,qa,(W-xa|
0)<<3|0,4,0);g=182;break;case 182:g=0!=(xa|0)?183:184;break;case 183:_llvm_memmove_p0i8_p0i8_i32(p+(((Ua-xa|0)+1|0)<<3)|0,qa+((W-xa|0)<<3)|0,xa<<3|0,4,0);g=184;break;case 184:g=0!=(bb|0)?185:186;break;case 185:var Ph=p+(((wa+Ka|0)+1|0)<<3)|0;_mrb_ary_new_capa(hb,j,0);var Cg=Ph,Dg=hb;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Cg>>2]=HEAP32[Dg>>2];HEAP32[Cg+4>>2]=HEAP32[Dg+4>>2];g=186;break;case 186:g=0==(Ka|0)?187:188;break;case 187:n=n+4|0;g=189;
break;case 188:n=n+((((W-wa|0)-xa|0)+1|0)<<2)|0;g=189;break;case 189:g=197;break;case 190:g=(fb|0)!=(qa|0)?191:192;break;case 191:_llvm_memmove_p0i8_p0i8_i32(p+8|0,qa,(wa+Ka|0)<<3|0,4,0);g=192;break;case 192:g=0!=(bb|0)?193:194;break;case 193:var Qh=p+(((wa+Ka|0)+1|0)<<3)|0;_mrb_ary_new_elts(ra,j,((W-wa|0)-Ka|0)-xa|0,(qa+(wa<<3)|0)+(Ka<<3)|0);var Eg=Qh,Ke=ra;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Eg>>2]=HEAP32[Ke>>2];HEAP32[Eg+4>>2]=HEAP32[Ke+
4>>2];g=194;break;case 194:g=0!=(xa|0)?195:196;break;case 195:_llvm_memmove_p0i8_p0i8_i32(p+((((wa+Ka|0)+bb|0)+1|0)<<3)|0,qa+((W-xa|0)<<3)|0,xa<<3|0,4,0);g=196;break;case 196:var Fg=p+((Ua+1|0)<<3)|0,Gg=ga;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Fg>>2]=HEAP32[Gg>>2];HEAP32[Fg+4>>2]=HEAP32[Gg+4>>2];n=n+((Ka+1|0)<<2)|0;g=197;break;case 197:q=HEAP32[n>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 198:var Le=n+4|0;n=Le;q=HEAP32[Le>>
2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 199:var Me=n+4|0;n=Me;q=HEAP32[Me>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 200:g=201;break;case 201:g=0!=(HEAP32[(j+48|0)>>2]|0)?202:219;break;case 202:g=203;break;case 203:var Hg=j,Ig=HEAP32[(j+48|0)>>2],Jg=_mrb_intern(j,__str538|0);_mrb_voidp_value(ib,n);_mrb_obj_iv_ifnone(Hg,Ig,Jg,ib);Y=HEAP32[(j+20|0)>>2];cb=HEAP32[(HEAP32[(j+20|0)>>2]+36|0)>>2];g=(Y|0)==(HEAP32[(j+24|0)>>2]|0)?204:205;break;case 204:g=
665;break;case 205:g=206;break;case 206:g=(HEAP32[((Y|0)+32|0)>>2]|0)==(HEAP32[((Y-44|0)+32|0)>>2]|0)?207:218;break;case 207:_cipop(j);Y=HEAP32[(j+20|0)>>2];g=0>(HEAP32[((Y+44|0)+24|0)>>2]|0)?208:210;break;case 208:g=0!=(w|0)?209:210;break;case 209:throw HEAP32[(j|0)>>2]=w,_longjmp(HEAP32[(j|0)>>2]|0,1),"Reached an unreachable!";case 210:g=211;break;case 211:g=(cb|0)>(HEAP32[(HEAP32[(j+20|0)>>2]+36|0)>>2]|0)?212:213;break;case 212:var Kg=j,Lg=cb-1|0;cb=Lg;_ecall(Kg,Lg);g=211;break;case 213:g=(Y|0)==
(HEAP32[(j+24|0)>>2]|0)?214:217;break;case 214:g=0==(HEAP32[(Y+32|0)>>2]|0)?215:216;break;case 215:var Rh=HEAP32[(j+12|0)>>2];p=HEAP32[(j+8|0)>>2]=Rh;g=665;break;case 216:g=218;break;case 217:g=206;break;case 218:k=HEAP32[(HEAP32[(Y+4|0)>>2]+12|0)>>2];r=HEAP32[(k+12|0)>>2];t=HEAP32[(k+16|0)>>2];var Mg=HEAP32[(j+12|0)>>2]+(HEAP32[((Y+44|0)+8|0)>>2]<<3)|0;p=HEAP32[(j+8|0)>>2]=Mg;var Ne=Y+32|0,Ng=HEAP32[Ne>>2]-1|0;HEAP32[Ne>>2]=Ng;n=HEAP32[(HEAP32[(j+32|0)>>2]+(Ng<<2)|0)>>2];g=239;break;case 219:Ca=
HEAP32[(j+20|0)>>2];jb=HEAP32[(HEAP32[(j+20|0)>>2]+36|0)>>2];var Og=za,Fd=p+((q>>23&511)<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Og>>2]=HEAP32[Fd>>2];HEAP32[Og+4>>2]=HEAP32[Fd+4>>2];var Gd=q>>14&511;g=2==(Gd|0)?220:0==(Gd|0)?226:1==(Gd|0)?229:232;break;case 220:g=0!=(HEAP32[(l+20|0)>>2]|0)?221:225;break;case 221:g=0!=(HEAP32[l>>2]>>>11&256|0)?225:222;break;case 222:sa=_top_env(j,l);g=0>(HEAP32[(sa+20|0)>>2]|0)?223:224;break;case 223:_localjump_error(j,
__str639|0);g=203;break;case 224:var Pg=HEAP32[(j+24|0)>>2]+44*HEAP32[(sa+20|0)>>2]|0;Ca=HEAP32[(j+20|0)>>2]=Pg;g=233;break;case 225:g=226;break;case 226:g=(Ca|0)==(HEAP32[(j+24|0)>>2]|0)?227:228;break;case 227:_localjump_error(j,__str639|0);g=203;break;case 228:Ca=HEAP32[(j+20|0)>>2];g=233;break;case 229:g=0>(HEAP32[(HEAP32[(l+20|0)>>2]+20|0)>>2]|0)?230:231;break;case 230:_localjump_error(j,__str740|0);g=203;break;case 231:var Sh=(HEAP32[(j+24|0)>>2]+44*HEAP32[(HEAP32[(l+20|0)>>2]+20|0)>>2]|0)+44|
0;Ca=HEAP32[(j+20|0)>>2]=Sh;g=233;break;case 232:g=233;break;case 233:_cipop(j);oa=HEAP32[(Ca+24|0)>>2];n=HEAP32[(Ca+20|0)>>2];var Th=HEAP32[(j+12|0)>>2]+(HEAP32[(Ca+8|0)>>2]<<3)|0;p=HEAP32[(j+8|0)>>2]=Th;g=234;break;case 234:g=(jb|0)>(HEAP32[(HEAP32[(j+20|0)>>2]+36|0)>>2]|0)?235:236;break;case 235:var Oe=j,Pe=jb-1|0;jb=Pe;_ecall(Oe,Pe);g=234;break;case 236:g=0>(oa|0)?237:238;break;case 237:HEAP32[(j|0)>>2]=w;var Qe=f,Qg=za;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[Qe>>2]=HEAP32[Qg>>2];HEAP32[Qe+4>>2]=HEAP32[Qg+4>>2];g=675;break;case 238:l=HEAP32[(HEAP32[(j+20|0)>>2]+4|0)>>2];k=HEAP32[(l+12|0)>>2];r=HEAP32[(k+12|0)>>2];t=HEAP32[(k+16|0)>>2];var Rg=p+(oa<<3)|0,Sg=za;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Rg>>2]=HEAP32[Sg>>2];HEAP32[Rg+4>>2]=HEAP32[Sg+4>>2];g=239;break;case 239:q=HEAP32[n>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 240:Va=q>>23&511;db=q>>7&127;Wa=HEAP16[(t+((q>>
14&511)<<1)|0)>>1];var Tg=vb,Ug=p+(Va<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Tg>>2]=HEAP32[Ug>>2];HEAP32[Tg+4>>2]=HEAP32[Ug+4>>2];var Uh=_mrb_class(j,vb);HEAP32[kb>>2]=Uh;Fa=_mrb_method_search_vm(j,kb,Wa);g=0!=(Fa|0)?245:241;break;case 241:_mrb_symbol_value51(rb,Wa);Wa=_mrb_intern(j,__str336|0);Fa=_mrb_method_search_vm(j,kb,Wa);g=127==(db|0)?242:243;break;case 242:_mrb_ary_unshift(Gb,j,p+((Va+1|0)<<3)|0,rb);g=244;break;case 243:_llvm_memmove_p0i8_p0i8_i32((p+
(Va<<3)|0)+16|0,(p+(Va<<3)|0)+8|0,(db+1|0)<<3|0,4,0);var Re=p+((Va+1|0)<<3)|0,Vg=rb;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Re>>2]=HEAP32[Vg>>2];HEAP32[Re+4>>2]=HEAP32[Vg+4>>2];db=db+1|0;g=244;break;case 244:g=245;break;case 245:La=HEAP32[(j+20|0)>>2];HEAP16[(La|0)>>1]=Wa;HEAP32[(La+28|0)>>2]=HEAP32[(Fa+16|0)>>2];HEAP32[(La+16|0)>>2]=db;g=127==(HEAP32[(La+16|0)>>2]|0)?246:247;break;case 246:HEAP32[(La+16|0)>>2]=-1;g=247;break;case 247:_llvm_memmove_p0i8_p0i8_i32(HEAP32[(j+
8|0)>>2],p+(Va<<3)|0,(HEAP32[(La+16|0)>>2]+1|0)<<3|0,4,0);g=0!=(HEAP32[Fa>>2]>>>11&128|0)?248:249;break;case 248:var Vh=HEAP32[(j+8|0)>>2]|0;FUNCTION_TABLE[HEAP32[(Fa+12|0)>>2]](lb,j,vb);var Se=Vh,Te=lb;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Se>>2]=HEAP32[Te>>2];HEAP32[Se+4>>2]=HEAP32[Te+4>>2];_mrb_gc_arena_restore(j,v);g=201;break;case 249:k=HEAP32[(Fa+12|0)>>2];r=HEAP32[(k+12|0)>>2];t=HEAP32[(k+16|0)>>2];g=0>(HEAP32[(La+16|0)>>2]|0)?250:254;
break;case 250:var qc=j;g=3>((HEAP32[(k+4|0)>>2]&65535)<<16>>16|0)?251:252;break;case 251:var Oc=3;g=253;break;case 252:Oc=(HEAP32[(k+4|0)>>2]&65535)<<16>>16;g=253;break;case 253:_stack_extend(qc,Oc,3);g=255;break;case 254:_stack_extend(j,(HEAP32[(k+4|0)>>2]&65535)<<16>>16,HEAP32[(La+16|0)>>2]+2|0);g=255;break;case 255:p=HEAP32[(j+8|0)>>2];n=HEAP32[(k+8|0)>>2];g=256;break;case 256:q=HEAP32[n>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 257:Xa=q>>23&511;Ma=q>>7&65535;mb=Ma>>
10&63;Ya=Ma>>9&1;Hb=Ma>>4&31;Qa=Ma>>0&15;g=0==(Qa|0)?258:259;break;case 258:S=p+8|0;g=262;break;case 259:wb=_uvenv(j,Qa-1|0);g=0!=(wb|0)?261:260;break;case 260:_localjump_error(j,__str841|0);g=203;break;case 261:S=HEAP32[(wb+12|0)>>2]+8|0;g=262;break;case 262:var Hd=p+(Xa<<3)|0,Ue=S+(((mb+Ya|0)+Hb|0)<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Hd>>2]=HEAP32[Ue>>2];HEAP32[Hd+4>>2]=HEAP32[Ue+4>>2];var Ve=n+4|0;n=Ve;q=HEAP32[Ve>>2];F=HEAP32[(_mrb_run_optable+
((q&127)<<2)|0)>>2];g=676;break;case 263:ka=q>>23&511;var Pc=((HEAP32[((p+(ka<<3)|0)+4|0)>>2]&255)<<8|HEAP32[((p+((ka+1|0)<<3)|0)+4|0)>>2]&255)&65535;g=771==(Pc|0)?264:774==(Pc|0)?272:1539==(Pc|0)?275:1542==(Pc|0)?278:4369==(Pc|0)?281:282;break;case 264:xb=HEAP32[(p+(ka<<3)|0)>>2];sb=HEAP32[(p+((ka+1|0)<<3)|0)>>2];yb=xb+sb|0;g=0==(0>(xb|0)&1^0>(sb|0)&1|0)?265:269;break;case 265:g=(0>(xb|0)&1|0)!=(0>(yb|0)&1|0)?266:269;break;case 266:g=267;break;case 267:var We=(p+(ka<<3)|0)+4|0;HEAP32[We>>2]=HEAP32[We>>
2]&-256|6;HEAPF32[(p+(ka<<3)|0)>>2]=(xb|0)+(sb|0);g=268;break;case 268:g=283;break;case 269:g=270;break;case 270:var Xe=(p+(ka<<3)|0)+4|0;HEAP32[Xe>>2]=HEAP32[Xe>>2]&-256|3;HEAP32[(p+(ka<<3)|0)>>2]=yb;g=271;break;case 271:g=283;break;case 272:Nb=HEAP32[(p+(ka<<3)|0)>>2];Ib=HEAPF32[(p+((ka+1|0)<<3)|0)>>2];g=273;break;case 273:var Ye=(p+(ka<<3)|0)+4|0;HEAP32[Ye>>2]=HEAP32[Ye>>2]&-256|6;HEAPF32[(p+(ka<<3)|0)>>2]=(Nb|0)+Ib;g=274;break;case 274:g=283;break;case 275:g=276;break;case 276:HEAPF32[(p+(ka<<
3)|0)>>2]+=HEAP32[(p+((ka+1|0)<<3)|0)>>2]|0;g=277;break;case 277:g=283;break;case 278:g=279;break;case 279:HEAPF32[(p+(ka<<3)|0)>>2]+=HEAPF32[(p+((ka+1|0)<<3)|0)>>2];g=280;break;case 280:g=283;break;case 281:var Wg=p+(ka<<3)|0;_mrb_str_plus(Oa,j,p+(ka<<3)|0,p+((ka+1|0)<<3)|0);var Ze=Wg,hc=Oa;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Ze>>2]=HEAP32[hc>>2];HEAP32[Ze+4>>2]=HEAP32[hc+4>>2];g=283;break;case 282:g=74;break;case 283:_mrb_gc_arena_restore(j,
v);var Xg=n+4|0;n=Xg;q=HEAP32[Xg>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 284:V=q>>23&511;var nd=((HEAP32[((p+(V<<3)|0)+4|0)>>2]&255)<<8|HEAP32[((p+((V+1|0)<<3)|0)+4|0)>>2]&255)&65535;g=771==(nd|0)?285:774==(nd|0)?293:1539==(nd|0)?296:1542==(nd|0)?299:302;break;case 285:Za=HEAP32[(p+(V<<3)|0)>>2];$=HEAP32[(p+((V+1|0)<<3)|0)>>2];Jb=Za-$|0;g=0!=(0>(Za|0)&1^0>($|0)&1|0)?286:290;break;case 286:g=(0>(Za|0)&1|0)!=(0>(Jb|0)&1|0)?287:290;break;case 287:g=288;break;case 288:var $e=
(p+(V<<3)|0)+4|0;HEAP32[$e>>2]=HEAP32[$e>>2]&-256|6;HEAPF32[(p+(V<<3)|0)>>2]=(Za|0)-($|0);g=289;break;case 289:g=303;break;case 290:g=291;break;case 291:var Yg=(p+(V<<3)|0)+4|0;HEAP32[Yg>>2]=HEAP32[Yg>>2]&-256|3;HEAP32[(p+(V<<3)|0)>>2]=Jb;g=292;break;case 292:g=303;break;case 293:tb=HEAP32[(p+(V<<3)|0)>>2];zb=HEAPF32[(p+((V+1|0)<<3)|0)>>2];g=294;break;case 294:var af=(p+(V<<3)|0)+4|0;HEAP32[af>>2]=HEAP32[af>>2]&-256|6;HEAPF32[(p+(V<<3)|0)>>2]=(tb|0)-zb;g=295;break;case 295:g=303;break;case 296:g=
297;break;case 297:HEAPF32[(p+(V<<3)|0)>>2]-=HEAP32[(p+((V+1|0)<<3)|0)>>2]|0;g=298;break;case 298:g=303;break;case 299:g=300;break;case 300:HEAPF32[(p+(V<<3)|0)>>2]-=HEAPF32[(p+((V+1|0)<<3)|0)>>2];g=301;break;case 301:g=303;break;case 302:g=74;break;case 303:var bf=n+4|0;n=bf;q=HEAP32[bf>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 304:D=q>>23&511;var od=((HEAP32[((p+(D<<3)|0)+4|0)>>2]&255)<<8|HEAP32[((p+((D+1|0)<<3)|0)+4|0)>>2]&255)&65535;g=771==(od|0)?305:774==(od|0)?314:
1539==(od|0)?317:1542==(od|0)?320:323;break;case 305:Ab=HEAP32[(p+(D<<3)|0)>>2];Bb=HEAP32[(p+((D+1|0)<<3)|0)>>2];Kb=Ab*Bb|0;g=0!=(Ab|0)?306:310;break;case 306:g=((Kb|0)/(Ab|0)&-1|0)!=(Bb|0)?307:310;break;case 307:g=308;break;case 308:var cf=(p+(D<<3)|0)+4|0;HEAP32[cf>>2]=HEAP32[cf>>2]&-256|6;HEAPF32[(p+(D<<3)|0)>>2]=(Ab|0)*(Bb|0);g=309;break;case 309:g=313;break;case 310:g=311;break;case 311:var Zg=(p+(D<<3)|0)+4|0;HEAP32[Zg>>2]=HEAP32[Zg>>2]&-256|3;HEAP32[(p+(D<<3)|0)>>2]=Kb;g=312;break;case 312:g=
313;break;case 313:g=324;break;case 314:Cb=HEAP32[(p+(D<<3)|0)>>2];Tb=HEAPF32[(p+((D+1|0)<<3)|0)>>2];g=315;break;case 315:var df=(p+(D<<3)|0)+4|0;HEAP32[df>>2]=HEAP32[df>>2]&-256|6;HEAPF32[(p+(D<<3)|0)>>2]=(Cb|0)*Tb;g=316;break;case 316:g=324;break;case 317:g=318;break;case 318:HEAPF32[(p+(D<<3)|0)>>2]*=HEAP32[(p+((D+1|0)<<3)|0)>>2]|0;g=319;break;case 319:g=324;break;case 320:g=321;break;case 321:HEAPF32[(p+(D<<3)|0)>>2]*=HEAPF32[(p+((D+1|0)<<3)|0)>>2];g=322;break;case 322:g=324;break;case 323:g=
74;break;case 324:var $g=n+4|0;n=$g;q=HEAP32[$g>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 325:ta=q>>23&511;var Qc=((HEAP32[((p+(ta<<3)|0)+4|0)>>2]&255)<<8|HEAP32[((p+((ta+1|0)<<3)|0)+4|0)>>2]&255)&65535;g=771==(Qc|0)?326:774==(Qc|0)?329:1539==(Qc|0)?332:1542==(Qc|0)?335:338;break;case 326:Yb=HEAP32[(p+(ta<<3)|0)>>2];Ob=HEAP32[(p+((ta+1|0)<<3)|0)>>2];g=327;break;case 327:var ah=(p+(ta<<3)|0)+4|0;HEAP32[ah>>2]=HEAP32[ah>>2]&-256|6;HEAPF32[(p+(ta<<3)|0)>>2]=(Yb|0)/(Ob|0);g=
328;break;case 328:g=339;break;case 329:Ub=HEAP32[(p+(ta<<3)|0)>>2];Pb=HEAPF32[(p+((ta+1|0)<<3)|0)>>2];g=330;break;case 330:var ef=(p+(ta<<3)|0)+4|0;HEAP32[ef>>2]=HEAP32[ef>>2]&-256|6;HEAPF32[(p+(ta<<3)|0)>>2]=(Ub|0)/Pb;g=331;break;case 331:g=339;break;case 332:g=333;break;case 333:HEAPF32[(p+(ta<<3)|0)>>2]/=HEAP32[(p+((ta+1|0)<<3)|0)>>2]|0;g=334;break;case 334:g=339;break;case 335:g=336;break;case 336:HEAPF32[(p+(ta<<3)|0)>>2]/=HEAPF32[(p+((ta+1|0)<<3)|0)>>2];g=337;break;case 337:g=339;break;case 338:g=
74;break;case 339:var ff=n+4|0;n=ff;q=HEAP32[ff>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 340:P=q>>23&511;var bh=HEAP32[((p+(P<<3)|0)+4|0)>>2]&255;g=3==(bh|0)?341:6==(bh|0)?347:348;break;case 341:Vb=HEAP32[(p+(P<<3)|0)>>2];Zb=q>>7&127;$b=Vb+Zb|0;g=0==(0>(Vb|0)&1^0>(Zb|0)&1|0)?342:346;break;case 342:g=(0>(Vb|0)&1|0)!=(0>($b|0)&1|0)?343:346;break;case 343:g=344;break;case 344:var ch=(p+(P<<3)|0)+4|0;HEAP32[ch>>2]=HEAP32[ch>>2]&-256|6;HEAPF32[(p+(P<<3)|0)>>2]=(Vb|0)+(Zb|0);
g=345;break;case 345:g=351;break;case 346:HEAP32[(p+(P<<3)|0)>>2]=$b;g=351;break;case 347:var gf=p+(P<<3)|0;HEAPF32[gf>>2]+=q>>7&127|0;g=351;break;case 348:g=349;break;case 349:var hf=(p+((P+1|0)<<3)|0)+4|0;HEAP32[hf>>2]=HEAP32[hf>>2]&-256|3;HEAP32[(p+((P+1|0)<<3)|0)>>2]=q>>7&127;g=350;break;case 350:q=32|(P&511)<<23|(q>>14&511)<<14|128;g=74;break;case 351:var dh=n+4|0;n=dh;q=HEAP32[dh>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 352:nb=q>>23&511;var eh=HEAP32[((p+(nb<<3)|0)+
4|0)>>2]&255;g=3==(eh|0)?353:6==(eh|0)?359:360;break;case 353:Qb=HEAP32[(p+(nb<<3)|0)>>2];Wb=q>>7&127;ic=Qb-Wb|0;g=0!=(0>(Qb|0)&1^0>(Wb|0)&1|0)?354:358;break;case 354:g=(0>(Qb|0)&1|0)!=(0>(ic|0)&1|0)?355:358;break;case 355:g=356;break;case 356:var fh=(p+(nb<<3)|0)+4|0;HEAP32[fh>>2]=HEAP32[fh>>2]&-256|6;HEAPF32[(p+(nb<<3)|0)>>2]=(Qb|0)-(Wb|0);g=357;break;case 357:g=363;break;case 358:HEAP32[(p+(nb<<3)|0)>>2]=ic;g=363;break;case 359:var Id=p+(nb<<3)|0;HEAPF32[Id>>2]-=q>>7&127|0;g=363;break;case 360:g=
361;break;case 361:var jf=(p+((nb+1|0)<<3)|0)+4|0;HEAP32[jf>>2]=HEAP32[jf>>2]&-256|3;HEAP32[(p+((nb+1|0)<<3)|0)>>2]=q>>7&127;g=362;break;case 362:q=32|(nb&511)<<23|(q>>14&511)<<14|128;g=74;break;case 363:var gh=n+4|0;n=gh;q=HEAP32[gh>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 364:Xb=q>>23&511;g=0!=(_mrb_obj_eq(j,p+(Xb<<3)|0,p+((Xb+1|0)<<3)|0)|0)?365:368;break;case 365:g=366;break;case 366:var kf=(p+(Xb<<3)|0)+4|0;HEAP32[kf>>2]=HEAP32[kf>>2]&-256|2;HEAP32[(p+(Xb<<3)|0)>>2]=
1;g=367;break;case 367:g=413;break;case 368:g=369;break;case 369:da=q>>23&511;var Jd=((HEAP32[((p+(da<<3)|0)+4|0)>>2]&255)<<8|HEAP32[((p+((da+1|0)<<3)|0)+4|0)>>2]&255)&65535;g=771==(Jd|0)?370:774==(Jd|0)?380:1539==(Jd|0)?390:1542==(Jd|0)?400:410;break;case 370:g=371;break;case 371:g=(HEAP32[(p+(da<<3)|0)>>2]|0)==(HEAP32[(p+((da+1|0)<<3)|0)>>2]|0)?372:375;break;case 372:g=373;break;case 373:var lf=(p+(da<<3)|0)+4|0;HEAP32[lf>>2]=HEAP32[lf>>2]&-256|2;HEAP32[(p+(da<<3)|0)>>2]=1;g=374;break;case 374:g=
378;break;case 375:g=376;break;case 376:var hh=(p+(da<<3)|0)+4|0;HEAP32[hh>>2]&=-256;HEAP32[(p+(da<<3)|0)>>2]=1;g=377;break;case 377:g=378;break;case 378:g=379;break;case 379:g=411;break;case 380:g=381;break;case 381:g=(HEAP32[(p+(da<<3)|0)>>2]|0)==HEAPF32[(p+((da+1|0)<<3)|0)>>2]?382:385;break;case 382:g=383;break;case 383:var mf=(p+(da<<3)|0)+4|0;HEAP32[mf>>2]=HEAP32[mf>>2]&-256|2;HEAP32[(p+(da<<3)|0)>>2]=1;g=384;break;case 384:g=388;break;case 385:g=386;break;case 386:var ih=(p+(da<<3)|0)+4|0;HEAP32[ih>>
2]&=-256;HEAP32[(p+(da<<3)|0)>>2]=1;g=387;break;case 387:g=388;break;case 388:g=389;break;case 389:g=411;break;case 390:g=391;break;case 391:g=HEAPF32[(p+(da<<3)|0)>>2]==(HEAP32[(p+((da+1|0)<<3)|0)>>2]|0)?392:395;break;case 392:g=393;break;case 393:var nf=(p+(da<<3)|0)+4|0;HEAP32[nf>>2]=HEAP32[nf>>2]&-256|2;HEAP32[(p+(da<<3)|0)>>2]=1;g=394;break;case 394:g=398;break;case 395:g=396;break;case 396:var of=(p+(da<<3)|0)+4|0;HEAP32[of>>2]&=-256;HEAP32[(p+(da<<3)|0)>>2]=1;g=397;break;case 397:g=398;break;
case 398:g=399;break;case 399:g=411;break;case 400:g=401;break;case 401:g=HEAPF32[(p+(da<<3)|0)>>2]==HEAPF32[(p+((da+1|0)<<3)|0)>>2]?402:405;break;case 402:g=403;break;case 403:var jh=(p+(da<<3)|0)+4|0;HEAP32[jh>>2]=HEAP32[jh>>2]&-256|2;HEAP32[(p+(da<<3)|0)>>2]=1;g=404;break;case 404:g=408;break;case 405:g=406;break;case 406:var Kd=(p+(da<<3)|0)+4|0;HEAP32[Kd>>2]&=-256;HEAP32[(p+(da<<3)|0)>>2]=1;g=407;break;case 407:g=408;break;case 408:g=409;break;case 409:g=411;break;case 410:g=74;break;case 411:g=
412;break;case 412:g=413;break;case 413:var Ld=n+4|0;n=Ld;q=HEAP32[Ld>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 414:g=415;break;case 415:ea=q>>23&511;var Rc=((HEAP32[((p+(ea<<3)|0)+4|0)>>2]&255)<<8|HEAP32[((p+((ea+1|0)<<3)|0)+4|0)>>2]&255)&65535;g=771==(Rc|0)?416:774==(Rc|0)?426:1539==(Rc|0)?436:1542==(Rc|0)?446:456;break;case 416:g=417;break;case 417:g=(HEAP32[(p+(ea<<3)|0)>>2]|0)<(HEAP32[(p+((ea+1|0)<<3)|0)>>2]|0)?418:421;break;case 418:g=419;break;case 419:var pf=(p+(ea<<
3)|0)+4|0;HEAP32[pf>>2]=HEAP32[pf>>2]&-256|2;HEAP32[(p+(ea<<3)|0)>>2]=1;g=420;break;case 420:g=424;break;case 421:g=422;break;case 422:var qf=(p+(ea<<3)|0)+4|0;HEAP32[qf>>2]&=-256;HEAP32[(p+(ea<<3)|0)>>2]=1;g=423;break;case 423:g=424;break;case 424:g=425;break;case 425:g=457;break;case 426:g=427;break;case 427:g=(HEAP32[(p+(ea<<3)|0)>>2]|0)<HEAPF32[(p+((ea+1|0)<<3)|0)>>2]?428:431;break;case 428:g=429;break;case 429:var rf=(p+(ea<<3)|0)+4|0;HEAP32[rf>>2]=HEAP32[rf>>2]&-256|2;HEAP32[(p+(ea<<3)|0)>>
2]=1;g=430;break;case 430:g=434;break;case 431:g=432;break;case 432:var kh=(p+(ea<<3)|0)+4|0;HEAP32[kh>>2]&=-256;HEAP32[(p+(ea<<3)|0)>>2]=1;g=433;break;case 433:g=434;break;case 434:g=435;break;case 435:g=457;break;case 436:g=437;break;case 437:g=HEAPF32[(p+(ea<<3)|0)>>2]<(HEAP32[(p+((ea+1|0)<<3)|0)>>2]|0)?438:441;break;case 438:g=439;break;case 439:var lh=(p+(ea<<3)|0)+4|0;HEAP32[lh>>2]=HEAP32[lh>>2]&-256|2;HEAP32[(p+(ea<<3)|0)>>2]=1;g=440;break;case 440:g=444;break;case 441:g=442;break;case 442:var mh=
(p+(ea<<3)|0)+4|0;HEAP32[mh>>2]&=-256;HEAP32[(p+(ea<<3)|0)>>2]=1;g=443;break;case 443:g=444;break;case 444:g=445;break;case 445:g=457;break;case 446:g=447;break;case 447:g=HEAPF32[(p+(ea<<3)|0)>>2]<HEAPF32[(p+((ea+1|0)<<3)|0)>>2]?448:451;break;case 448:g=449;break;case 449:var nh=(p+(ea<<3)|0)+4|0;HEAP32[nh>>2]=HEAP32[nh>>2]&-256|2;HEAP32[(p+(ea<<3)|0)>>2]=1;g=450;break;case 450:g=454;break;case 451:g=452;break;case 452:var oh=(p+(ea<<3)|0)+4|0;HEAP32[oh>>2]&=-256;HEAP32[(p+(ea<<3)|0)>>2]=1;g=453;
break;case 453:g=454;break;case 454:g=455;break;case 455:g=457;break;case 456:g=74;break;case 457:g=458;break;case 458:var sf=n+4|0;n=sf;q=HEAP32[sf>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 459:g=460;break;case 460:fa=q>>23&511;var Md=((HEAP32[((p+(fa<<3)|0)+4|0)>>2]&255)<<8|HEAP32[((p+((fa+1|0)<<3)|0)+4|0)>>2]&255)&65535;g=771==(Md|0)?461:774==(Md|0)?471:1539==(Md|0)?481:1542==(Md|0)?491:501;break;case 461:g=462;break;case 462:g=(HEAP32[(p+(fa<<3)|0)>>2]|0)<=(HEAP32[(p+
((fa+1|0)<<3)|0)>>2]|0)?463:466;break;case 463:g=464;break;case 464:var ph=(p+(fa<<3)|0)+4|0;HEAP32[ph>>2]=HEAP32[ph>>2]&-256|2;HEAP32[(p+(fa<<3)|0)>>2]=1;g=465;break;case 465:g=469;break;case 466:g=467;break;case 467:var tf=(p+(fa<<3)|0)+4|0;HEAP32[tf>>2]&=-256;HEAP32[(p+(fa<<3)|0)>>2]=1;g=468;break;case 468:g=469;break;case 469:g=470;break;case 470:g=502;break;case 471:g=472;break;case 472:g=(HEAP32[(p+(fa<<3)|0)>>2]|0)<=HEAPF32[(p+((fa+1|0)<<3)|0)>>2]?473:476;break;case 473:g=474;break;case 474:var uf=
(p+(fa<<3)|0)+4|0;HEAP32[uf>>2]=HEAP32[uf>>2]&-256|2;HEAP32[(p+(fa<<3)|0)>>2]=1;g=475;break;case 475:g=479;break;case 476:g=477;break;case 477:var qh=(p+(fa<<3)|0)+4|0;HEAP32[qh>>2]&=-256;HEAP32[(p+(fa<<3)|0)>>2]=1;g=478;break;case 478:g=479;break;case 479:g=480;break;case 480:g=502;break;case 481:g=482;break;case 482:g=HEAPF32[(p+(fa<<3)|0)>>2]<=(HEAP32[(p+((fa+1|0)<<3)|0)>>2]|0)?483:486;break;case 483:g=484;break;case 484:var vf=(p+(fa<<3)|0)+4|0;HEAP32[vf>>2]=HEAP32[vf>>2]&-256|2;HEAP32[(p+(fa<<
3)|0)>>2]=1;g=485;break;case 485:g=489;break;case 486:g=487;break;case 487:var wf=(p+(fa<<3)|0)+4|0;HEAP32[wf>>2]&=-256;HEAP32[(p+(fa<<3)|0)>>2]=1;g=488;break;case 488:g=489;break;case 489:g=490;break;case 490:g=502;break;case 491:g=492;break;case 492:g=HEAPF32[(p+(fa<<3)|0)>>2]<=HEAPF32[(p+((fa+1|0)<<3)|0)>>2]?493:496;break;case 493:g=494;break;case 494:var Nd=(p+(fa<<3)|0)+4|0;HEAP32[Nd>>2]=HEAP32[Nd>>2]&-256|2;HEAP32[(p+(fa<<3)|0)>>2]=1;g=495;break;case 495:g=499;break;case 496:g=497;break;case 497:var Od=
(p+(fa<<3)|0)+4|0;HEAP32[Od>>2]&=-256;HEAP32[(p+(fa<<3)|0)>>2]=1;g=498;break;case 498:g=499;break;case 499:g=500;break;case 500:g=502;break;case 501:g=74;break;case 502:g=503;break;case 503:var Pd=n+4|0;n=Pd;q=HEAP32[Pd>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 504:g=505;break;case 505:ha=q>>23&511;var Sc=((HEAP32[((p+(ha<<3)|0)+4|0)>>2]&255)<<8|HEAP32[((p+((ha+1|0)<<3)|0)+4|0)>>2]&255)&65535;g=771==(Sc|0)?506:774==(Sc|0)?516:1539==(Sc|0)?526:1542==(Sc|0)?536:546;break;case 506:g=
507;break;case 507:g=(HEAP32[(p+(ha<<3)|0)>>2]|0)>(HEAP32[(p+((ha+1|0)<<3)|0)>>2]|0)?508:511;break;case 508:g=509;break;case 509:var rh=(p+(ha<<3)|0)+4|0;HEAP32[rh>>2]=HEAP32[rh>>2]&-256|2;HEAP32[(p+(ha<<3)|0)>>2]=1;g=510;break;case 510:g=514;break;case 511:g=512;break;case 512:var xf=(p+(ha<<3)|0)+4|0;HEAP32[xf>>2]&=-256;HEAP32[(p+(ha<<3)|0)>>2]=1;g=513;break;case 513:g=514;break;case 514:g=515;break;case 515:g=547;break;case 516:g=517;break;case 517:g=(HEAP32[(p+(ha<<3)|0)>>2]|0)>HEAPF32[(p+((ha+
1|0)<<3)|0)>>2]?518:521;break;case 518:g=519;break;case 519:var sh=(p+(ha<<3)|0)+4|0;HEAP32[sh>>2]=HEAP32[sh>>2]&-256|2;HEAP32[(p+(ha<<3)|0)>>2]=1;g=520;break;case 520:g=524;break;case 521:g=522;break;case 522:var yf=(p+(ha<<3)|0)+4|0;HEAP32[yf>>2]&=-256;HEAP32[(p+(ha<<3)|0)>>2]=1;g=523;break;case 523:g=524;break;case 524:g=525;break;case 525:g=547;break;case 526:g=527;break;case 527:g=HEAPF32[(p+(ha<<3)|0)>>2]>(HEAP32[(p+((ha+1|0)<<3)|0)>>2]|0)?528:531;break;case 528:g=529;break;case 529:var zf=
(p+(ha<<3)|0)+4|0;HEAP32[zf>>2]=HEAP32[zf>>2]&-256|2;HEAP32[(p+(ha<<3)|0)>>2]=1;g=530;break;case 530:g=534;break;case 531:g=532;break;case 532:var Wh=(p+(ha<<3)|0)+4|0;HEAP32[Wh>>2]&=-256;HEAP32[(p+(ha<<3)|0)>>2]=1;g=533;break;case 533:g=534;break;case 534:g=535;break;case 535:g=547;break;case 536:g=537;break;case 537:g=HEAPF32[(p+(ha<<3)|0)>>2]>HEAPF32[(p+((ha+1|0)<<3)|0)>>2]?538:541;break;case 538:g=539;break;case 539:var Xh=(p+(ha<<3)|0)+4|0;HEAP32[Xh>>2]=HEAP32[Xh>>2]&-256|2;HEAP32[(p+(ha<<3)|
0)>>2]=1;g=540;break;case 540:g=544;break;case 541:g=542;break;case 542:var Yh=(p+(ha<<3)|0)+4|0;HEAP32[Yh>>2]&=-256;HEAP32[(p+(ha<<3)|0)>>2]=1;g=543;break;case 543:g=544;break;case 544:g=545;break;case 545:g=547;break;case 546:g=74;break;case 547:g=548;break;case 548:var Zh=n+4|0;n=Zh;q=HEAP32[Zh>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 549:g=550;break;case 550:ia=q>>23&511;var th=((HEAP32[((p+(ia<<3)|0)+4|0)>>2]&255)<<8|HEAP32[((p+((ia+1|0)<<3)|0)+4|0)>>2]&255)&65535;
g=771==(th|0)?551:774==(th|0)?561:1539==(th|0)?571:1542==(th|0)?581:591;break;case 551:g=552;break;case 552:g=(HEAP32[(p+(ia<<3)|0)>>2]|0)>=(HEAP32[(p+((ia+1|0)<<3)|0)>>2]|0)?553:556;break;case 553:g=554;break;case 554:var $h=(p+(ia<<3)|0)+4|0;HEAP32[$h>>2]=HEAP32[$h>>2]&-256|2;HEAP32[(p+(ia<<3)|0)>>2]=1;g=555;break;case 555:g=559;break;case 556:g=557;break;case 557:var ai=(p+(ia<<3)|0)+4|0;HEAP32[ai>>2]&=-256;HEAP32[(p+(ia<<3)|0)>>2]=1;g=558;break;case 558:g=559;break;case 559:g=560;break;case 560:g=
592;break;case 561:g=562;break;case 562:g=(HEAP32[(p+(ia<<3)|0)>>2]|0)>=HEAPF32[(p+((ia+1|0)<<3)|0)>>2]?563:566;break;case 563:g=564;break;case 564:var bi=(p+(ia<<3)|0)+4|0;HEAP32[bi>>2]=HEAP32[bi>>2]&-256|2;HEAP32[(p+(ia<<3)|0)>>2]=1;g=565;break;case 565:g=569;break;case 566:g=567;break;case 567:var ci=(p+(ia<<3)|0)+4|0;HEAP32[ci>>2]&=-256;HEAP32[(p+(ia<<3)|0)>>2]=1;g=568;break;case 568:g=569;break;case 569:g=570;break;case 570:g=592;break;case 571:g=572;break;case 572:g=HEAPF32[(p+(ia<<3)|0)>>2]>=
(HEAP32[(p+((ia+1|0)<<3)|0)>>2]|0)?573:576;break;case 573:g=574;break;case 574:var di=(p+(ia<<3)|0)+4|0;HEAP32[di>>2]=HEAP32[di>>2]&-256|2;HEAP32[(p+(ia<<3)|0)>>2]=1;g=575;break;case 575:g=579;break;case 576:g=577;break;case 577:var ei=(p+(ia<<3)|0)+4|0;HEAP32[ei>>2]&=-256;HEAP32[(p+(ia<<3)|0)>>2]=1;g=578;break;case 578:g=579;break;case 579:g=580;break;case 580:g=592;break;case 581:g=582;break;case 582:g=HEAPF32[(p+(ia<<3)|0)>>2]>=HEAPF32[(p+((ia+1|0)<<3)|0)>>2]?583:586;break;case 583:g=584;break;
case 584:var fi=(p+(ia<<3)|0)+4|0;HEAP32[fi>>2]=HEAP32[fi>>2]&-256|2;HEAP32[(p+(ia<<3)|0)>>2]=1;g=585;break;case 585:g=589;break;case 586:g=587;break;case 587:var gi=(p+(ia<<3)|0)+4|0;HEAP32[gi>>2]&=-256;HEAP32[(p+(ia<<3)|0)>>2]=1;g=588;break;case 588:g=589;break;case 589:g=590;break;case 590:g=592;break;case 591:g=74;break;case 592:g=593;break;case 593:var hi=n+4|0;n=hi;q=HEAP32[hi>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 594:var Wj=p+((q>>23&511)<<3)|0;_mrb_ary_new_from_values(Fc,
j,q>>7&127,p+((q>>14&511)<<3)|0);var ii=Wj,ji=Fc;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[ii>>2]=HEAP32[ji>>2];HEAP32[ii+4>>2]=HEAP32[ji+4>>2];_mrb_gc_arena_restore(j,v);var ki=n+4|0;n=ki;q=HEAP32[ki>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 595:var Xj=j,Yj=p+((q>>23&511)<<3)|0;_mrb_ary_splat(Gc,j,p+((q>>14&511)<<3)|0);_mrb_ary_concat(Xj,Yj,Gc);_mrb_gc_arena_restore(j,v);var li=n+4|0;n=li;q=HEAP32[li>>2];F=HEAP32[(_mrb_run_optable+
((q&127)<<2)|0)>>2];g=676;break;case 596:_mrb_ary_push(j,p+((q>>23&511)<<3)|0,p+((q>>14&511)<<3)|0);var mi=n+4|0;n=mi;q=HEAP32[mi>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 597:jc=q>>23&511;rc=q>>7&127;var ni=kc,oi=p+((q>>14&511)<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[ni>>2]=HEAP32[oi>>2];HEAP32[ni+4>>2]=HEAP32[oi+4>>2];g=15==(HEAP32[(kc+4|0)>>2]&255|0)?604:598;break;case 598:g=0==(rc|0)?599:600;break;case 599:var pi=
p+((q>>23&511)<<3)|0,qi=kc;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[pi>>2]=HEAP32[qi>>2];HEAP32[pi+4>>2]=HEAP32[qi+4>>2];g=603;break;case 600:g=601;break;case 601:var ri=(p+(jc<<3)|0)+4|0;HEAP32[ri>>2]&=-256;HEAP32[(p+(jc<<3)|0)>>2]=0;g=602;break;case 602:g=603;break;case 603:g=605;break;case 604:var Zj=p+((q>>23&511)<<3)|0;_mrb_ary_ref(sc,j,kc,rc);var si=Zj,ti=sc;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[si>>2]=HEAP32[ti>>2];HEAP32[si+4>>2]=HEAP32[ti+4>>2];g=605;break;case 605:var ui=n+4|0;n=ui;q=HEAP32[ui>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 606:_mrb_ary_set(j,p+((q>>14&511)<<3)|0,q>>7&127,p+((q>>23&511)<<3)|0);var vi=n+4|0;n=vi;q=HEAP32[vi>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 607:Ga=q>>23&511;var wi=tc,xi=p+(Ga<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[wi>>2]=HEAP32[xi>>
2];HEAP32[wi+4>>2]=HEAP32[xi+4>>2];ac=q>>14&511;Lb=q>>7&127;g=15==(HEAP32[(tc+4|0)>>2]&255|0)?614:608;break;case 608:var yi=Ga;Ga=yi+1|0;var $j=p+(yi<<3)|0;_mrb_ary_new_capa(uc,j,0);var zi=$j,Ai=uc;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[zi>>2]=HEAP32[Ai>>2];HEAP32[zi+4>>2]=HEAP32[Ai+4>>2];g=609;break;case 609:var Bi=Lb;Lb=Bi-1|0;g=0!=(Bi|0)?610:613;break;case 610:g=611;break;case 611:var Ci=(p+(Ga<<3)|0)+4|0;HEAP32[Ci>>2]&=-256;HEAP32[(p+(Ga<<
3)|0)>>2]=0;g=612;break;case 612:Ga=Ga+1|0;g=609;break;case 613:g=630;break;case 614:cc=HEAP32[(tc|0)>>2];bc=HEAP32[(cc+12|0)>>2];g=(bc|0)>(ac+Lb|0)?615:619;break;case 615:var Di=Ga;Ga=Di+1|0;var ak=p+(Di<<3)|0;_mrb_ary_new_elts(vc,j,(bc-ac|0)-Lb|0,HEAP32[(cc+20|0)>>2]+(ac<<3)|0);var Ei=ak,Fi=vc;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Ei>>2]=HEAP32[Fi>>2];HEAP32[Ei+4>>2]=HEAP32[Fi+4>>2];g=616;break;case 616:var Gi=Lb;Lb=Gi-1|0;g=0!=(Gi|0)?617:
618;break;case 617:var Hi=Ga;Ga=Hi+1|0;var Ii=p+(Hi<<3)|0,Ji=HEAP32[(cc+20|0)>>2]+(((bc-Lb|0)-1|0)<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Ii>>2]=HEAP32[Ji>>2];HEAP32[Ii+4>>2]=HEAP32[Ji+4>>2];g=616;break;case 618:g=629;break;case 619:var Ki=Ga;Ga=Ki+1|0;var bk=p+(Ki<<3)|0;_mrb_ary_new_capa(wc,j,0);var Li=bk,Mi=wc;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Li>>2]=HEAP32[Mi>>2];HEAP32[Li+4>>
2]=HEAP32[Mi+4>>2];ob=0;g=620;break;case 620:g=(ob+ac|0)<(bc|0)?621:623;break;case 621:var Ni=p+((Ga+ob|0)<<3)|0,Oi=HEAP32[(cc+20|0)>>2]+((ac+ob|0)<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Ni>>2]=HEAP32[Oi>>2];HEAP32[Ni+4>>2]=HEAP32[Oi+4>>2];g=622;break;case 622:ob=ob+1|0;g=620;break;case 623:g=624;break;case 624:g=(ob|0)<(Lb|0)?625:628;break;case 625:g=626;break;case 626:var Pi=(p+((Ga+ob|0)<<3)|0)+4|0;HEAP32[Pi>>2]&=-256;HEAP32[(p+((Ga+
ob|0)<<3)|0)>>2]=0;g=627;break;case 627:ob=ob+1|0;g=624;break;case 628:g=629;break;case 629:g=630;break;case 630:_mrb_gc_arena_restore(j,v);var Qi=n+4|0;n=Qi;q=HEAP32[Qi>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 631:var ck=p+((q>>23&511)<<3)|0;_mrb_str_literal(xc,j,r+((q>>7&65535)<<3)|0);var Ri=ck,Si=xc;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Ri>>2]=HEAP32[Si>>2];HEAP32[Ri+4>>2]=HEAP32[Si+4>>2];_mrb_gc_arena_restore(j,
v);var Ti=n+4|0;n=Ti;q=HEAP32[Ti>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 632:_mrb_str_concat(j,p+((q>>23&511)<<3)|0,p+((q>>14&511)<<3)|0);var Ui=n+4|0;n=Ui;q=HEAP32[Ui>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 633:Rb=q>>14&511;lc=q>>7&127;yc=Rb+(lc<<1|0)|0;_mrb_hash_new_capa(mc,j,lc);g=634;break;case 634:g=(Rb|0)<(yc|0)?635:636;break;case 635:_mrb_hash_set(j,mc,p+(Rb<<3)|0,p+((Rb+1|0)<<3)|0);Rb=Rb+2|0;g=634;break;case 636:var Vi=p+((q>>23&511)<<
3)|0,Wi=mc;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Vi>>2]=HEAP32[Wi>>2];HEAP32[Vi+4>>2]=HEAP32[Wi+4>>2];_mrb_gc_arena_restore(j,v);var Xi=n+4|0;n=Xi;q=HEAP32[Xi>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 637:ec=q>>7&3;g=0!=(ec&2|0)?638:639;break;case 638:dc=_mrb_closure_new(j,HEAP32[(HEAP32[(j+56|0)>>2]+((((HEAP32[k>>2]&65535)<<16>>16)+(q>>9&16383)|0)<<2)|0)>>2]);g=640;break;case 639:dc=_mrb_proc_new(j,HEAP32[(HEAP32[(j+
56|0)>>2]+((((HEAP32[k>>2]&65535)<<16>>16)+(q>>9&16383)|0)<<2)|0)>>2]);g=640;break;case 640:g=0!=(ec&1|0)?641:642;break;case 641:var Yi=dc,Zi=Yi;HEAP32[Zi>>2]=HEAP32[Zi>>2]&2047|((HEAP32[Yi>>2]>>>11&2097151|256)&2097151)<<11;g=642;break;case 642:var dk=p+((q>>23&511)<<3)|0;_mrb_obj_value52(nc,dc);var $i=dk,aj=nc;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[$i>>2]=HEAP32[aj>>2];HEAP32[$i+4>>2]=HEAP32[aj+4>>2];_mrb_gc_arena_restore(j,v);var bj=n+4|0;
n=bj;q=HEAP32[bj>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 643:var ek=p+((q>>23&511)<<3)|0;_mrb_obj_value52(zc,HEAP32[(j+72|0)>>2]);var cj=ek,dj=zc;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[cj>>2]=HEAP32[dj>>2];HEAP32[cj+4>>2]=HEAP32[dj+4>>2];var ej=n+4|0;n=ej;q=HEAP32[ej>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 644:oc=0;Ac=q>>23&511;Tc=HEAP16[(t+((q>>14&511)<<1)|0)>>1];var fj=fc,gj=p+(Ac<<3)|
0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[fj>>2]=HEAP32[gj>>2];HEAP32[fj+4>>2]=HEAP32[gj+4>>2];var hj=$super2989,ij=p+((Ac+1|0)<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[hj>>2]=HEAP32[ij>>2];HEAP32[hj+4>>2]=HEAP32[ij+4>>2];g=0==(HEAP32[(fc+4|0)>>2]&255|0)?645:647;break;case 645:g=0!=(HEAP32[(fc|0)>>2]|0)?647:646;break;case 646:_mrb_obj_value52(Uc,HEAP32[(HEAP32[(j+20|0)>>2]+28|0)>>2]);var jj=
fc,kj=Uc;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[jj>>2]=HEAP32[kj>>2];HEAP32[jj+4>>2]=HEAP32[kj+4>>2];g=647;break;case 647:oc=_mrb_vm_define_class(j,fc,$super2989,Tc);var fk=p+(Ac<<3)|0;_mrb_obj_value52(Vc,oc);var lj=fk,mj=Vc;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[lj>>2]=HEAP32[mj>>2];HEAP32[lj+4>>2]=HEAP32[mj+4>>2];_mrb_gc_arena_restore(j,v);var nj=n+4|0;n=nj;q=HEAP32[nj>>2];F=HEAP32[(_mrb_run_optable+
((q&127)<<2)|0)>>2];g=676;break;case 648:Bc=0;Cc=q>>23&511;qd=HEAP16[(t+((q>>14&511)<<1)|0)>>1];var oj=pc,pj=p+(Cc<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[oj>>2]=HEAP32[pj>>2];HEAP32[oj+4>>2]=HEAP32[pj+4>>2];g=0==(HEAP32[(pc+4|0)>>2]&255|0)?649:651;break;case 649:g=0!=(HEAP32[(pc|0)>>2]|0)?651:650;break;case 650:_mrb_obj_value52(Wc,HEAP32[(HEAP32[(j+20|0)>>2]+28|0)>>2]);var qj=pc,rj=Wc;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[qj>>2]=HEAP32[rj>>2];HEAP32[qj+4>>2]=HEAP32[rj+4>>2];g=651;break;case 651:Bc=_mrb_vm_define_module(j,pc,qd);var gk=p+(Cc<<3)|0;_mrb_obj_value52(Xc,Bc);var sj=gk,tj=Xc;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[sj>>2]=HEAP32[tj>>2];HEAP32[sj+4>>2]=HEAP32[tj+4>>2];_mrb_gc_arena_restore(j,v);var uj=n+4|0;n=uj;q=HEAP32[uj>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 652:Dc=q>>23&511;var vj=Hc,wj=p+(Dc<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[vj>>2]=HEAP32[wj>>2];HEAP32[vj+4>>2]=HEAP32[wj+4>>2];Mb=_cipush(j);HEAP32[(Mb+20|0)>>2]=n+4|0;HEAP32[(Mb+24|0)>>2]=Dc;HEAP16[(Mb|0)>>1]=0;HEAP32[(Mb+8|0)>>2]=(HEAP32[(j+8|0)>>2]-HEAP32[(j+12|0)>>2]|0)/8&-1;HEAP32[(Mb+16|0)>>2]=0;HEAP32[(Mb+28|0)>>2]=HEAP32[(Hc|0)>>2];var xj=j+8|0;HEAP32[xj>>2]=HEAP32[xj>>2]+(Dc<<3)|0;gc=_mrb_proc_new(j,HEAP32[(HEAP32[(j+56|0)>>2]+((((HEAP32[k>>2]&65535)<<16>>16)+(q>>7&65535)|0)<<2)|0)>>2]);HEAP32[(gc+16|0)>>2]=HEAP32[(Mb+28|0)>>2];HEAP32[(Mb+4|0)>>2]=gc;g=
0!=(HEAP32[gc>>2]>>>11&128|0)?653:656;break;case 653:var hk=HEAP32[(j+8|0)>>2]|0;FUNCTION_TABLE[HEAP32[(gc+12|0)>>2]](Yc,j,Hc);var yj=hk,zj=Yc;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[yj>>2]=HEAP32[zj>>2];HEAP32[yj+4>>2]=HEAP32[zj+4>>2];_mrb_gc_arena_restore(j,v);g=0!=(HEAP32[(j+48|0)>>2]|0)?654:655;break;case 654:g=203;break;case 655:var ik=HEAP32[(j+12|0)>>2]+(HEAP32[(HEAP32[(j+20|0)>>2]+8|0)>>2]<<3)|0;p=HEAP32[(j+8|0)>>2]=ik;_cipop(j);var Aj=
n+4|0;n=Aj;q=HEAP32[Aj>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 656:k=HEAP32[(gc+12|0)>>2];r=HEAP32[(k+12|0)>>2];t=HEAP32[(k+16|0)>>2];_stack_extend(j,(HEAP32[(k+4|0)>>2]&65535)<<16>>16,1);HEAP32[(Mb+12|0)>>2]=(HEAP32[(k+4|0)>>2]&65535)<<16>>16;p=HEAP32[(j+8|0)>>2];n=HEAP32[(k+8|0)>>2];q=HEAP32[n>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 657:Zc=q>>23&511;$c=HEAP32[(p+(Zc<<3)|0)>>2];_mrb_define_method_vm(j,$c,HEAP16[(t+((q>>14&511)<<1)|0)>>1],p+
((Zc+1|0)<<3)|0);_mrb_gc_arena_restore(j,v);var Bj=n+4|0;n=Bj;q=HEAP32[Bj>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 658:var jk=p+((q>>23&511)<<3)|0;_mrb_singleton_class(rd,j,p+((q>>14&511)<<3)|0);var Cj=jk,Dj=rd;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Cj>>2]=HEAP32[Dj>>2];HEAP32[Cj+4>>2]=HEAP32[Dj+4>>2];_mrb_gc_arena_restore(j,v);var Ej=n+4|0;n=Ej;q=HEAP32[Ej>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;
case 659:g=0!=(HEAP32[(HEAP32[(j+20|0)>>2]+28|0)>>2]|0)?661:660;break;case 660:var kk=j,lk=_mrb_class_obj_get(j,__str942|0);_mrb_exc_new(sd,kk,lk,_mrb_run_msg|0,25);HEAP32[(j+48|0)>>2]=HEAP32[(sd|0)>>2];g=203;break;case 661:var mk=p+((q>>23&511)<<3)|0;_mrb_obj_value52(td,HEAP32[(HEAP32[(j+20|0)>>2]+28|0)>>2]);var Fj=mk,Gj=td;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Fj>>2]=HEAP32[Gj>>2];HEAP32[Fj+4>>2]=HEAP32[Gj+4>>2];var Hj=n+4|0;n=Hj;q=HEAP32[Hj>>
2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 662:ad=q>>14&511;var nk=p+((q>>23&511)<<3)|0;_mrb_range_new(ud,j,p+(ad<<3)|0,p+((ad+1|0)<<3)|0,q>>7&127);var Ij=nk,Jj=ud;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Ij>>2]=HEAP32[Jj>>2];HEAP32[Ij+4>>2]=HEAP32[Jj+4>>2];_mrb_gc_arena_restore(j,v);var Kj=n+4|0;n=Kj;q=HEAP32[Kj>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 663:var ok=q>>23&511,pk=q>>14&511,qk=q>>7&
127;_printf(__str1043|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=ok,HEAP32[tempInt+4>>2]=pk,HEAP32[tempInt+8>>2]=qk,tempInt));var Lj=n+4|0;n=Lj;q=HEAP32[Lj>>2];F=HEAP32[(_mrb_run_optable+((q&127)<<2)|0)>>2];g=676;break;case 664:g=665;break;case 665:Ec=HEAP32[(HEAP32[(j+20|0)>>2]+36|0)>>2];g=666;break;case 666:var Mj=Ec;Ec=Mj-1|0;g=0!=(Mj|0)?667:668;break;case 667:_ecall(j,Ec);g=666;break;case 668:HEAP32[(j|0)>>2]=w;g=0!=(HEAP32[(j+
48|0)>>2]|0)?669:670;break;case 669:_mrb_obj_value52(f,HEAP32[(j+48|0)>>2]);g=675;break;case 670:var Nj=f,Oj=p+((HEAP32[k>>2]>>>16&65535)<<16>>16<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Nj>>2]=HEAP32[Oj>>2];HEAP32[Nj+4>>2]=HEAP32[Oj+4>>2];g=675;break;case 671:var Pj=Ic,Qj=r+((q>>7&65535)<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Pj>>2]=HEAP32[Qj>>2];HEAP32[Pj+4>>2]=HEAP32[Qj+4>>2];
g=0==(q>>23&511|0)?672:673;break;case 672:var rk=j,sk=_mrb_class_obj_get(j,__str1144|0);_mrb_exc_new3(vd,rk,sk,Ic);var Rj=Jc,Sj=vd;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Rj>>2]=HEAP32[Sj>>2];HEAP32[Rj+4>>2]=HEAP32[Sj+4>>2];g=674;break;case 673:var tk=j,uk=_mrb_class_obj_get(j,__str1245|0);_mrb_exc_new3(wd,tk,uk,Ic);var Tj=Jc,Uj=wd;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Tj>>2]=HEAP32[Uj>>2];
HEAP32[Tj+4>>2]=HEAP32[Uj+4>>2];g=674;break;case 674:HEAP32[(j+48|0)>>2]=HEAP32[(Jc|0)>>2];g=203;break;case 675:STACKTOP=a;return;case 676:g=F;break;default:assert(0,"bad label: "+g)}}catch(Af){if(!Af.longjmp||!(Af.id in h))throw Af;i[setjmpLabels[Af.id]](Af.value)}}_mrb_run.X=1;
function _envadjust(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h,i;a=f;d=e;g=b;h=HEAP32[(a+24|0)>>2];c=3;break;case 3:c=h>>>0<=HEAP32[(a+20|0)>>2]>>>0?4:8;break;case 4:i=HEAP32[(h+40|0)>>2];c=0!=(i|0)?5:7;break;case 5:c=0<=(HEAP32[(i+20|0)>>2]|0)?6:7;break;case 6:c=(HEAP32[(i+12|0)>>2]-d|0)/8&-1;HEAP32[(i+12|0)>>2]=g+(c<<3)|0;c=7;break;case 7:h=h+44|0;c=3;break;case 8:return;default:assert(0,"bad label: "+c)}}_envadjust.X=1;
function _mrb_yield_internal(f,e,b,c,a,d,g){var h=STACKTOP;STACKTOP+=32;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var i=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[i>>2];HEAP32[b+4>>2]=HEAP32[i+4>>2];i=d;d=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[d>>2]=HEAP32[i>>2];HEAP32[d+4>>2]=HEAP32[i+4>>2];for(i=2;;)switch(i){case 2:var j,l,k,n,r,t,p,q=h,v=h+8,w=
h+16,m=h+24;j=e;l=c;k=a;i=g;r=HEAP16[(HEAP32[(j+20|0)>>2]|0)>>1];p=HEAP32[(HEAP32[(j+20|0)>>2]+12|0)>>2];n=HEAP32[(b|0)>>2];t=_cipush(j);HEAP16[(t|0)>>1]=r;HEAP32[(t+4|0)>>2]=n;HEAP32[(t+8|0)>>2]=(HEAP32[(j+8|0)>>2]-HEAP32[(j+12|0)>>2]|0)/8&-1;HEAP32[(t+16|0)>>2]=l;HEAP32[(t+28|0)>>2]=i;i=0!=(HEAP32[n>>2]>>>11&128|0)?3:4;break;case 3:HEAP32[(t+12|0)>>2]=l+2|0;i=5;break;case 4:HEAP32[(t+12|0)>>2]=((HEAP32[(HEAP32[(n+12|0)>>2]+4|0)>>2]&65535)<<16>>16)+2|0;i=5;break;case 5:HEAP32[(t+24|0)>>2]=-1;HEAP32[(j+
8|0)>>2]=HEAP32[(j+8|0)>>2]+(p<<3)|0;_stack_extend(j,HEAP32[(t+12|0)>>2],0);i=HEAP32[(j+8|0)>>2]|0;r=d;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[i>>2]=HEAP32[r>>2];HEAP32[i+4>>2]=HEAP32[r+4>>2];i=0<(l|0)?6:7;break;case 6:_stack_copy(HEAP32[(j+8|0)>>2]+8|0,k,l);i=7;break;case 7:i=HEAP32[(j+8|0)>>2]+((l+1|0)<<3)|0;_mrb_nil_value50(v);r=v;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[i>>2]=HEAP32[r>>2];
HEAP32[i+4>>2]=HEAP32[r+4>>2];i=0!=(HEAP32[n>>2]>>>11&128|0)?8:9;break;case 8:FUNCTION_TABLE[HEAP32[(n+12|0)>>2]](w,j,d);i=q;r=w;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[i>>2]=HEAP32[r>>2];HEAP32[i+4>>2]=HEAP32[r+4>>2];HEAP32[(j+8|0)>>2]=HEAP32[(j+12|0)>>2]+(HEAP32[(HEAP32[(j+20|0)>>2]+8|0)>>2]<<3)|0;_cipop(j);i=10;break;case 9:_mrb_run(m,j,n,d);i=q;r=m;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[i>>
2]=HEAP32[r>>2];HEAP32[i+4>>2]=HEAP32[r+4>>2];i=10;break;case 10:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[q>>2];HEAP32[f+4>>2]=HEAP32[q+4>>2];STACKTOP=h;return;default:assert(0,"bad label: "+i)}}_mrb_yield_internal.X=1;
function _mrb_yield_argv(f,e,b,c,a){var d=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[g>>2];HEAP32[b+4>>2]=HEAP32[g+4>>2];_mrb_yield_internal(f,e,b,c,a,HEAP32[(e+8|0)>>2]|0,HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2]);STACKTOP=d}
function _mrb_yield(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];_mrb_yield_internal(f,e,b,1,c,HEAP32[(e+8|0)>>2]|0,HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2]);
STACKTOP=a}function _uvget(f,e,b,c){var a;for(a=2;;)switch(a){case 2:var d,g;d=e;a=b;g=c;d=_uvenv(d,a);a=0!=(d|0)?4:3;break;case 3:_mrb_nil_value50(f);a=5;break;case 4:a=f;var h=HEAP32[(d+12|0)>>2]+(g<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[h>>2];HEAP32[a+4>>2]=HEAP32[h+4>>2];a=5;break;case 5:return;default:assert(0,"bad label: "+a)}}
function _uvset(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=c,c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i;g=f;h=e;i=b;h=_uvenv(g,h);d=0!=(h|0)?4:3;break;case 3:d=5;break;case 4:var d=HEAP32[(h+12|0)>>2]+(i<<3)|0,j=c;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[d>>2]=HEAP32[j>>2];HEAP32[d+4>>2]=HEAP32[j+4>>2];_mrb_write_barrier(g,h);d=5;break;case 5:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}
function _ecall(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d,g,h=b;a=f;d=e;c=HEAP32[(a+8|0)>>2];d=HEAP32[(HEAP32[(a+40|0)>>2]+(d<<2)|0)>>2];g=_cipush(a);HEAP32[(g+8|0)>>2]=(HEAP32[(a+8|0)>>2]-HEAP32[(a+12|0)>>2]|0)/8&-1;HEAP16[(g|0)>>1]=HEAP16[(g-44|0)>>1];HEAP32[(g+24|0)>>2]=-1;HEAP32[(g+16|0)>>2]=0;HEAP32[(g+4|0)>>2]=d;HEAP32[(g+12|0)>>2]=(HEAP32[(HEAP32[(d+12|0)>>2]+4|0)>>2]&65535)<<
16>>16;HEAP32[(g+28|0)>>2]=HEAP32[(d+16|0)>>2];HEAP32[(a+8|0)>>2]=HEAP32[(a+8|0)>>2]+(HEAP32[((g-44|0)+12|0)>>2]<<3)|0;g=HEAP32[(a+48|0)>>2];HEAP32[(a+48|0)>>2]=0;_mrb_run(h,a,d,c);c=0!=(HEAP32[(a+48|0)>>2]|0)?4:3;break;case 3:HEAP32[(a+48|0)>>2]=g;c=4;break;case 4:STACKTOP=b;return;default:assert(0,"bad label: "+c)}}_ecall.X=1;
function _argnum_error(f,e){var b=STACKTOP;STACKTOP+=272;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d,g=b,h,i=b+256,j=b+264;a=f;d=e;c=0!=HEAP16[(HEAP32[(a+20|0)>>2]|0)>>1]<<16>>16?3:4;break;case 3:h=g|0;c=_mrb_sym2name(a,HEAP16[(HEAP32[(a+20|0)>>2]|0)>>1]);var l=HEAP32[(HEAP32[(a+20|0)>>2]+16|0)>>2],k=d;h=_snprintf(h,256,__str14|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=l,HEAP32[tempInt+8>>2]=k,tempInt));c=5;break;case 4:h=HEAP32[(HEAP32[(a+20|0)>>2]+16|0)>>2];c=d;h=_snprintf(g|0,256,__str15|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=h,HEAP32[tempInt+4>>2]=c,tempInt));c=5;break;case 5:d=a;c=_mrb_class_obj_get(a,__str33|0);_mrb_exc_new(j,d,c,g|0,h);g=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[j>>
2];HEAP32[g+4>>2]=HEAP32[j+4>>2];HEAP32[(a+48|0)>>2]=HEAP32[(i|0)>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}_argnum_error.X=1;
function _mrb_voidp_value(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|7;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _localjump_error(f,e){var b=STACKTOP;STACKTOP+=272;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c,a=b+256,d=b+264;c=_snprintf(b|0,256,__str13|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=e,tempInt));var g=_mrb_class_obj_get(f,__str1245|0);_mrb_exc_new(d,f,g,b|0,c);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+
4>>2]=HEAP32[d+4>>2];HEAP32[(f+48|0)>>2]=HEAP32[(a|0)>>2];STACKTOP=b}
function _mrb_obj_value52(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b,g;g=a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|HEAP32[g>>2]&255;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+
c)}}
function _yyparse(f){var e=STACKTOP;STACKTOP+=1352;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c,a,d=e,g,h,i,j,l,k=e+4,n,r,t=e+132,p,q,v=e+532,w,m,x,s=e+1332,y,B,A,G,z,E,M=e+1336,C,H;c=f;l=0;n=k|0;r=128;p=t|0;w=v|0;x=200;y=0;b=3;break;case 3:b=0!=(HEAP32[_yydebug>>2]|0)?4:5;break;case 4:_fprintf(HEAP32[_stderr>>2],__str53|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=0,tempInt));b=5;break;case 5:b=6;break;case 6:j=g=0;a=-2;q=p;m=w;b=8;break;case 7:q=q+2|0;b=8;break;case 8:HEAP16[q>>1]=g&65535;b=((p+(x<<1)|0)-2|0)>>>0<=q>>>0?9:28;break;case 9:B=((q-p|0)/2&-1)+1|0;b=1E4<=x>>>0?10:11;break;case 10:b=606;break;case 11:x=x<<1|0;b=1E4<x>>>0?12:13;break;case 12:x=1E4;b=13;break;case 13:A=p;G=_mrb_malloc(HEAP32[(c|0)>>2],(6*x|0)+3|0);b=0!=(G|0)?15:14;break;case 14:b=606;break;case 15:b=16;break;case 16:var L=G,R=p,I=B<<1|0;assert(0===I%1,"memcpy given "+
I+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(L,R,I,2);p=G;z=(x<<1|0)+3|0;G=G+(Math.floor((z>>>0)/4)<<2)|0;b=17;break;case 17:b=18;break;case 18:var K=G,Q=w,O=B<<2|0;assert(0===O%1,"memcpy given "+O+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(K,Q,O,4);w=G;E=(x<<2|0)+3|0;G=G+(Math.floor((E>>>0)/4)<<2)|0;b=19;break;case 19:b=(A|0)!=(t|0)?20:21;break;case 20:_mrb_free(HEAP32[(c|0)>>2],A);b=21;break;case 21:q=(p+(B<<1)|0)-2|0;m=(w+(B<<2)|0)-4|0;b=
22;break;case 22:b=0!=(HEAP32[_yydebug>>2]|0)?23:24;break;case 23:var aa=x;_fprintf(HEAP32[_stderr>>2],__str154|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=aa,tempInt));b=24;break;case 24:b=25;break;case 25:b=((p+(x<<1)|0)-2|0)>>>0<=q>>>0?26:27;break;case 26:b=605;break;case 27:b=28;break;case 28:b=29;break;case 29:b=0!=(HEAP32[_yydebug>>2]|0)?30:31;break;case 30:var J=g;_fprintf(HEAP32[_stderr>>2],__str255|0,(tempInt=STACKTOP,STACKTOP+=
4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=J,tempInt));b=31;break;case 31:b=32;break;case 32:b=33;break;case 33:h=HEAP16[(_yypact+(g<<1)|0)>>1]<<16>>16;b=-728==(h|0)?34:35;break;case 34:b=75;break;case 35:b=-2==(a|0)?36:41;break;case 36:b=37;break;case 37:b=0!=(HEAP32[_yydebug>>2]|0)?38:39;break;case 38:_fprintf(HEAP32[_stderr>>2],__str356|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>
2]=0,tempInt));b=39;break;case 39:b=40;break;case 40:a=_yylex(d,c);b=41;break;case 41:b=0>=(a|0)?42:47;break;case 42:a=l=0;b=43;break;case 43:b=0!=(HEAP32[_yydebug>>2]|0)?44:45;break;case 44:_fprintf(HEAP32[_stderr>>2],__str457|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));b=45;break;case 45:b=46;break;case 46:b=55;break;case 47:b=373>=a>>>0?48:49;break;case 48:var la=HEAP8[_yytranslate+a|0]&255;b=
50;break;case 49:la=2;b=50;break;case 50:l=la;b=51;break;case 51:b=0!=(HEAP32[_yydebug>>2]|0)?52:53;break;case 52:_fprintf(HEAP32[_stderr>>2],__str558|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=__str659|0,tempInt));_yy_symbol_print(HEAP32[_stderr>>2],l,d,c);_fprintf(HEAP32[_stderr>>2],__str760|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));
b=53;break;case 53:b=54;break;case 54:b=55;break;case 55:h=h+l|0;b=0>(h|0)?58:56;break;case 56:b=10263<(h|0)?58:57;break;case 57:b=(HEAP16[(_yycheck+(h<<1)|0)>>1]<<16>>16|0)!=(l|0)?58:59;break;case 58:b=75;break;case 59:h=HEAP16[(_yytable+(h<<1)|0)>>1]<<16>>16;b=0>=(h|0)?60:64;break;case 60:b=0==(h|0)?62:61;break;case 61:b=-524==(h|0)?62:63;break;case 62:b=549;break;case 63:h=-h|0;b=78;break;case 64:b=3==(h|0)?65:66;break;case 65:b=604;break;case 66:b=0!=(j|0)?67:68;break;case 67:j=j-1|0;b=68;break;
case 68:b=69;break;case 69:b=0!=(HEAP32[_yydebug>>2]|0)?70:71;break;case 70:_fprintf(HEAP32[_stderr>>2],__str558|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=__str861|0,tempInt));_yy_symbol_print(HEAP32[_stderr>>2],l,d,c);_fprintf(HEAP32[_stderr>>2],__str760|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));b=71;break;case 71:b=72;break;case 72:b=
0!=(a|0)?73:74;break;case 73:a=-2;b=74;break;case 74:g=h;var ba=m+4|0,U=m=ba,T=d;assert(!0,"memcpy given 4 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[U>>2]=HEAP32[T>>2];b=7;break;case 75:h=HEAP16[(_yydefact+(g<<1)|0)>>1]&65535;b=0==(h|0)?76:77;break;case 76:b=549;break;case 77:b=78;break;case 78:y=HEAP8[_yyr2+h|0]&255;var ua=s,N=m+((1-y|0)<<2)|0;assert(!0,"memcpy given 4 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[ua>>2]=HEAP32[N>>2];b=79;break;case 79:b=
0!=(HEAP32[_yydebug>>2]|0)?80:81;break;case 80:_yy_reduce_print(m,h,c);b=81;break;case 81:b=82;break;case 82:var u=h;b=2==(u|0)?83:3==(u|0)?86:4==(u|0)?87:5==(u|0)?88:6==(u|0)?89:7==(u|0)?90:8==(u|0)?91:10==(u|0)?92:11==(u|0)?93:12==(u|0)?94:13==(u|0)?106:14==(u|0)?107:15==(u|0)?108:16==(u|0)?109:17==(u|0)?110:18==(u|0)?111:19==(u|0)?112:20==(u|0)?113:21==(u|0)?114:22==(u|0)?115:23==(u|0)?116:24==(u|0)?117:25==(u|0)?118:26==(u|0)?119:28==(u|0)?120:29==(u|0)?121:30==(u|0)?122:31==(u|0)?123:32==(u|
0)?124:33==(u|0)?125:34==(u|0)?126:35==(u|0)?127:36==(u|0)?128:37==(u|0)?129:38==(u|0)?130:40==(u|0)?131:41==(u|0)?132:43==(u|0)?133:44==(u|0)?134:45==(u|0)?135:46==(u|0)?136:48==(u|0)?137:53==(u|0)?141:54==(u|0)?142:55==(u|0)?143:56==(u|0)?144:57==(u|0)?145:58==(u|0)?146:59==(u|0)?147:60==(u|0)?148:61==(u|0)?149:62==(u|0)?150:63==(u|0)?151:64==(u|0)?152:65==(u|0)?153:66==(u|0)?154:67==(u|0)?155:69==(u|0)?156:70==(u|0)?157:71==(u|0)?158:72==(u|0)?159:73==(u|0)?160:74==(u|0)?161:75==(u|0)?162:76==
(u|0)?163:77==(u|0)?164:78==(u|0)?165:79==(u|0)?166:81==(u|0)?167:82==(u|0)?168:83==(u|0)?169:84==(u|0)?170:85==(u|0)?171:86==(u|0)?172:87==(u|0)?173:88==(u|0)?174:89==(u|0)?175:90==(u|0)?176:91==(u|0)?177:92==(u|0)?181:93==(u|0)?185:94==(u|0)?186:95==(u|0)?187:96==(u|0)?188:97==(u|0)?189:98==(u|0)?190:99==(u|0)?191:100==(u|0)?195:101==(u|0)?199:102==(u|0)?200:104==(u|0)?201:105==(u|0)?202:106==(u|0)?203:110==(u|0)?204:111==(u|0)?205:114==(u|0)?206:115==(u|0)?207:116==(u|0)?208:117==(u|0)?209:118==
(u|0)?210:119==(u|0)?211:120==(u|0)?212:121==(u|0)?213:122==(u|0)?214:123==(u|0)?215:124==(u|0)?216:125==(u|0)?217:126==(u|0)?218:127==(u|0)?219:128==(u|0)?220:129==(u|0)?221:130==(u|0)?222:131==(u|0)?223:132==(u|0)?224:133==(u|0)?225:134==(u|0)?226:135==(u|0)?227:136==(u|0)?228:137==(u|0)?229:138==(u|0)?230:139==(u|0)?231:140==(u|0)?232:141==(u|0)?233:142==(u|0)?234:143==(u|0)?235:144==(u|0)?236:145==(u|0)?237:186==(u|0)?238:187==(u|0)?239:188==(u|0)?240:189==(u|0)?241:190==(u|0)?242:191==(u|0)?
243:192==(u|0)?244:193==(u|0)?245:194==(u|0)?246:195==(u|0)?247:196==(u|0)?248:197==(u|0)?249:198==(u|0)?250:199==(u|0)?251:200==(u|0)?252:201==(u|0)?253:202==(u|0)?254:203==(u|0)?255:204==(u|0)?256:205==(u|0)?257:206==(u|0)?258:207==(u|0)?259:208==(u|0)?260:209==(u|0)?261:210==(u|0)?262:211==(u|0)?263:212==(u|0)?264:213==(u|0)?265:214==(u|0)?266:215==(u|0)?267:216==(u|0)?268:217==(u|0)?269:218==(u|0)?270:219==(u|0)?271:220==(u|0)?272:221==(u|0)?273:222==(u|0)?274:223==(u|0)?275:224==(u|0)?276:225==
(u|0)?277:226==(u|0)?278:227==(u|0)?279:228==(u|0)?280:229==(u|0)?281:230==(u|0)?282:232==(u|0)?285:233==(u|0)?286:234==(u|0)?287:235==(u|0)?288:240==(u|0)?289:241==(u|0)?290:242==(u|0)?291:243==(u|0)?292:244==(u|0)?293:245==(u|0)?294:246==(u|0)?295:247==(u|0)?296:248==(u|0)?297:249==(u|0)?298:250==(u|0)?299:251==(u|0)?300:252==(u|0)?301:253==(u|0)?302:254==(u|0)?303:255==(u|0)?304:256==(u|0)?305:257==(u|0)?306:258==(u|0)?307:259==(u|0)?308:265==(u|0)?309:266==(u|0)?310:267==(u|0)?311:268==(u|0)?
312:269==(u|0)?313:270==(u|0)?314:271==(u|0)?315:272==(u|0)?316:273==(u|0)?317:274==(u|0)?318:275==(u|0)?319:276==(u|0)?320:277==(u|0)?321:278==(u|0)?322:279==(u|0)?323:280==(u|0)?324:281==(u|0)?325:282==(u|0)?326:283==(u|0)?327:285==(u|0)?328:286==(u|0)?329:287==(u|0)?330:288==(u|0)?331:289==(u|0)?332:290==(u|0)?333:291==(u|0)?334:292==(u|0)?335:293==(u|0)?336:294==(u|0)?337:295==(u|0)?338:296==(u|0)?339:297==(u|0)?340:298==(u|0)?341:299==(u|0)?342:300==(u|0)?343:301==(u|0)?344:302==(u|0)?348:303==
(u|0)?349:304==(u|0)?350:305==(u|0)?351:306==(u|0)?352:307==(u|0)?356:308==(u|0)?357:309==(u|0)?358:310==(u|0)?359:311==(u|0)?360:312==(u|0)?361:313==(u|0)?362:314==(u|0)?363:315==(u|0)?364:316==(u|0)?365:317==(u|0)?366:324==(u|0)?369:326==(u|0)?370:327==(u|0)?371:329==(u|0)?372:330==(u|0)?373:331==(u|0)?374:332==(u|0)?375:333==(u|0)?376:334==(u|0)?377:335==(u|0)?378:336==(u|0)?379:337==(u|0)?380:338==(u|0)?381:339==(u|0)?382:340==(u|0)?383:341==(u|0)?384:342==(u|0)?385:343==(u|0)?386:344==(u|0)?
387:345==(u|0)?388:346==(u|0)?389:347==(u|0)?390:348==(u|0)?391:349==(u|0)?392:350==(u|0)?393:351==(u|0)?394:352==(u|0)?395:353==(u|0)?396:354==(u|0)?397:355==(u|0)?398:356==(u|0)?399:358==(u|0)?400:359==(u|0)?401:360==(u|0)?402:361==(u|0)?403:362==(u|0)?404:363==(u|0)?405:366==(u|0)?406:368==(u|0)?407:369==(u|0)?408:370==(u|0)?409:371==(u|0)?410:372==(u|0)?411:373==(u|0)?412:374==(u|0)?413:375==(u|0)?417:376==(u|0)?418:377==(u|0)?419:378==(u|0)?420:379==(u|0)?421:380==(u|0)?422:381==(u|0)?423:382==
(u|0)?424:383==(u|0)?425:384==(u|0)?426:385==(u|0)?427:386==(u|0)?428:387==(u|0)?429:388==(u|0)?430:389==(u|0)?431:390==(u|0)?432:391==(u|0)?433:392==(u|0)?434:394==(u|0)?438:396==(u|0)?441:399==(u|0)?442:401==(u|0)?443:407==(u|0)?444:408==(u|0)?445:409==(u|0)?446:410==(u|0)?447:411==(u|0)?448:412==(u|0)?449:414==(u|0)?450:415==(u|0)?451:416==(u|0)?452:421==(u|0)?453:422==(u|0)?454:425==(u|0)?455:426==(u|0)?456:427==(u|0)?457:428==(u|0)?458:429==(u|0)?459:430==(u|0)?460:431==(u|0)?461:432==(u|0)?
462:433==(u|0)?463:434==(u|0)?464:435==(u|0)?465:436==(u|0)?466:437==(u|0)?467:438==(u|0)?468:439==(u|0)?471:442==(u|0)?472:443==(u|0)?473:444==(u|0)?474:445==(u|0)?475:446==(u|0)?476:447==(u|0)?477:448==(u|0)?478:449==(u|0)?479:450==(u|0)?480:451==(u|0)?481:452==(u|0)?482:453==(u|0)?483:454==(u|0)?484:455==(u|0)?485:456==(u|0)?486:457==(u|0)?487:458==(u|0)?488:459==(u|0)?489:460==(u|0)?490:461==(u|0)?491:462==(u|0)?492:463==(u|0)?493:464==(u|0)?494:465==(u|0)?495:466==(u|0)?496:467==(u|0)?497:468==
(u|0)?498:469==(u|0)?499:470==(u|0)?500:471==(u|0)?501:472==(u|0)?502:473==(u|0)?503:474==(u|0)?504:475==(u|0)?505:476==(u|0)?506:477==(u|0)?507:478==(u|0)?508:481==(u|0)?509:482==(u|0)?510:485==(u|0)?511:486==(u|0)?512:487==(u|0)?513:488==(u|0)?514:489==(u|0)?517:490==(u|0)?518:492==(u|0)?525:493==(u|0)?526:494==(u|0)?527:495==(u|0)?528:496==(u|0)?529:518==(u|0)?530:520==(u|0)?531:522==(u|0)?532:523==(u|0)?533:534;break;case 83:HEAP32[(c+36|0)>>2]=0;b=0!=(HEAP32[(c+72|0)>>2]|0)?85:84;break;case 84:var na=
_cons_gen(c,0,0);HEAP32[(c+72|0)>>2]=na;b=85;break;case 85:b=535;break;case 86:var Z=_new_scope(c,HEAP32[(m|0)>>2]);HEAP32[(c+1124|0)>>2]=Z;b=535;break;case 87:HEAP32[s>>2]=HEAP32[(m-4|0)>>2];b=535;break;case 88:var Aa=_new_begin(c,0);HEAP32[s>>2]=Aa;b=535;break;case 89:var Da=_new_begin(c,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Da;b=535;break;case 90:var ja=c,X=HEAP32[(m-8|0)>>2],ya=_list1_gen(c,HEAP32[(m|0)>>2]),ca=_append_gen(ja,X,ya);HEAP32[s>>2]=ca;b=535;break;case 91:var Na=_new_begin(c,0);HEAP32[s>>
2]=Na;b=535;break;case 92:var Ba=_local_switch(c);HEAP32[s>>2]=Ba;b=535;break;case 93:_yyerror(c,__str962|0);_local_resume(c,HEAP32[(m-12|0)>>2]);HEAP32[s>>2]=0;b=535;break;case 94:b=0!=(HEAP32[(m-8|0)>>2]|0)?95:96;break;case 95:var va=_new_rescue(c,HEAP32[(m-12|0)>>2],HEAP32[(m-8|0)>>2],HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=va;b=100;break;case 96:b=0!=(HEAP32[(m-4|0)>>2]|0)?97:98;break;case 97:_yywarn(c,__str1063|0);var pb=_append_gen(c,HEAP32[s>>2],HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=pb;b=99;break;case 98:HEAP32[s>>
2]=HEAP32[(m-12|0)>>2];b=99;break;case 99:b=100;break;case 100:b=0!=(HEAP32[(m|0)>>2]|0)?101:105;break;case 101:b=0!=(HEAP32[s>>2]|0)?102:103;break;case 102:var Db=_new_ensure(c,HEAP32[s>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=Db;b=104;break;case 103:var Ra=c,Pa=HEAP32[(m|0)>>2],$a=c,pa=_new_nil(c),ub=_list1_gen($a,pa),Ha=_append_gen(Ra,Pa,ub);HEAP32[s>>2]=Ha;b=104;break;case 104:b=105;break;case 105:b=535;break;case 106:HEAP32[s>>2]=HEAP32[(m-4|0)>>2];b=535;break;case 107:var Ia=_new_begin(c,0);HEAP32[s>>
2]=Ia;b=535;break;case 108:var ma=_new_begin(c,HEAP32[(m|0)>>2]);HEAP32[s>>2]=ma;b=535;break;case 109:var Ja=c,Sa=HEAP32[(m-8|0)>>2],qb=_list1_gen(c,HEAP32[(m|0)>>2]),Sb=_append_gen(Ja,Sa,qb);HEAP32[s>>2]=Sb;b=535;break;case 110:var Eb=_new_begin(c,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Eb;b=535;break;case 111:HEAP32[(c+36|0)>>2]=7;b=535;break;case 112:var eb=_new_alias(c,HEAP16[(m-8|0)>>1],HEAP16[(m|0)>>1]);HEAP32[s>>2]=eb;b=535;break;case 113:HEAP32[s>>2]=HEAP32[(m|0)>>2];b=535;break;case 114:var ab=c,
Fb=_cond(HEAP32[(m|0)>>2]),Ta=_new_if(ab,Fb,HEAP32[(m-8|0)>>2],0);HEAP32[s>>2]=Ta;b=535;break;case 115:var Ea=c,wa=_cond(HEAP32[(m|0)>>2]),Ka=_new_unless(Ea,wa,HEAP32[(m-8|0)>>2],0);HEAP32[s>>2]=Ka;b=535;break;case 116:var bb=c,xa=_cond(HEAP32[(m|0)>>2]),W=_new_while(bb,xa,HEAP32[(m-8|0)>>2]);HEAP32[s>>2]=W;b=535;break;case 117:var qa=c,fb=_cond(HEAP32[(m|0)>>2]),Ua=_new_until(qa,fb,HEAP32[(m-8|0)>>2]);HEAP32[s>>2]=Ua;b=535;break;case 118:var ga=c,gb=HEAP32[(m-8|0)>>2],hb=c,ra=_list3_gen(c,0,0,HEAP32[(m|
0)>>2]),Y=_list1_gen(hb,ra),cb=_new_rescue(ga,gb,Y,0);HEAP32[s>>2]=cb;b=535;break;case 119:_yyerror(c,__str1164|0);var ib=_new_postexe(c,HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=ib;b=535;break;case 120:var Ca=c,oa=HEAP32[(m-8|0)>>2],jb=_list1_gen(c,HEAP32[(m|0)>>2]),za=_new_masgn(Ca,oa,jb);HEAP32[s>>2]=za;b=535;break;case 121:var sa=_new_op_asgn(c,HEAP32[(m-8|0)>>2],HEAP16[(m-4|0)>>1],HEAP32[(m|0)>>2]);HEAP32[s>>2]=sa;b=535;break;case 122:var Va=c,db=c,Fa=HEAP32[(m-20|0)>>2],kb=_intern_gen(c,__str1265|0),
La=_new_call(db,Fa,kb,HEAP32[(m-12|0)>>2]),vb=_new_op_asgn(Va,La,HEAP16[(m-4|0)>>1],HEAP32[(m|0)>>2]);HEAP32[s>>2]=vb;b=535;break;case 123:var Wa=c,rb=_new_call(c,HEAP32[(m-16|0)>>2],HEAP16[(m-8|0)>>1],0),Gb=_new_op_asgn(Wa,rb,HEAP16[(m-4|0)>>1],HEAP32[(m|0)>>2]);HEAP32[s>>2]=Gb;b=535;break;case 124:var lb=c,Xa=_new_call(c,HEAP32[(m-16|0)>>2],HEAP16[(m-8|0)>>1],0),Ma=_new_op_asgn(lb,Xa,HEAP16[(m-4|0)>>1],HEAP32[(m|0)>>2]);HEAP32[s>>2]=Ma;b=535;break;case 125:_yyerror(c,__str1366|0);HEAP32[s>>2]=0;
b=535;break;case 126:var mb=c,Ya=_new_call(c,HEAP32[(m-16|0)>>2],HEAP16[(m-8|0)>>1],0),Hb=_new_op_asgn(mb,Ya,HEAP16[(m-4|0)>>1],HEAP32[(m|0)>>2]);HEAP32[s>>2]=Hb;b=535;break;case 127:_backref_error(c,HEAP32[(m-8|0)>>2]);var Qa=_new_begin(c,0);HEAP32[s>>2]=Qa;b=535;break;case 128:var S=c,wb=HEAP32[(m-8|0)>>2],ka=_new_array(c,HEAP32[(m|0)>>2]),xb=_new_asgn(S,wb,ka);HEAP32[s>>2]=xb;b=535;break;case 129:var sb=_new_masgn(c,HEAP32[(m-8|0)>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=sb;b=535;break;case 130:var yb=
c,Nb=HEAP32[(m-8|0)>>2],Ib=_new_array(c,HEAP32[(m|0)>>2]),Oa=_new_masgn(yb,Nb,Ib);HEAP32[s>>2]=Oa;b=535;break;case 131:var V=_new_asgn(c,HEAP32[(m-8|0)>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=V;b=535;break;case 132:var Za=_new_asgn(c,HEAP32[(m-8|0)>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=Za;b=535;break;case 133:var $=_new_and(c,HEAP32[(m-8|0)>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=$;b=535;break;case 134:var Jb=_new_or(c,HEAP32[(m-8|0)>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=Jb;b=535;break;case 135:var tb=c,zb=_cond(HEAP32[(m|
0)>>2]),D=_call_uni_op(tb,zb,__str1467|0);HEAP32[s>>2]=D;b=535;break;case 136:var Ab=c,Bb=_cond(HEAP32[(m|0)>>2]),Kb=_call_uni_op(Ab,Bb,__str1467|0);HEAP32[s>>2]=Kb;b=535;break;case 137:b=0!=(HEAP32[(m|0)>>2]|0)?139:138;break;case 138:var Cb=_new_nil(c);HEAP32[s>>2]=Cb;b=140;break;case 139:HEAP32[s>>2]=HEAP32[(m|0)>>2];b=140;break;case 140:b=535;break;case 141:_local_nest(c);b=535;break;case 142:var Tb=_new_block(c,HEAP32[(m-8|0)>>2],HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=Tb;_local_unnest(c);b=535;break;
case 143:var ta=_new_fcall(c,HEAP16[(m-4|0)>>1],HEAP32[(m|0)>>2]);HEAP32[s>>2]=ta;b=535;break;case 144:_args_with_block(c,HEAP32[(m-4|0)>>2],HEAP32[(m|0)>>2]);var Yb=_new_fcall(c,HEAP16[(m-8|0)>>1],HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=Yb;b=535;break;case 145:var Ob=_new_call(c,HEAP32[(m-12|0)>>2],HEAP16[(m-4|0)>>1],HEAP32[(m|0)>>2]);HEAP32[s>>2]=Ob;b=535;break;case 146:_args_with_block(c,HEAP32[(m-4|0)>>2],HEAP32[(m|0)>>2]);var Ub=_new_call(c,HEAP32[(m-16|0)>>2],HEAP16[(m-8|0)>>1],HEAP32[(m-4|0)>>2]);
HEAP32[s>>2]=Ub;b=535;break;case 147:var Pb=_new_call(c,HEAP32[(m-12|0)>>2],HEAP16[(m-4|0)>>1],HEAP32[(m|0)>>2]);HEAP32[s>>2]=Pb;b=535;break;case 148:_args_with_block(c,HEAP32[(m-4|0)>>2],HEAP32[(m|0)>>2]);var P=_new_call(c,HEAP32[(m-16|0)>>2],HEAP16[(m-8|0)>>1],HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=P;b=535;break;case 149:var Vb=_new_super(c,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Vb;b=535;break;case 150:var Zb=_new_yield(c,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Zb;b=535;break;case 151:var $b=c,nb=_ret_args(c,HEAP32[(m|
0)>>2]),Qb=_new_return($b,nb);HEAP32[s>>2]=Qb;b=535;break;case 152:var Wb=c,ic=_ret_args(c,HEAP32[(m|0)>>2]),Xb=_new_break(Wb,ic);HEAP32[s>>2]=Xb;b=535;break;case 153:var da=c,ea=_ret_args(c,HEAP32[(m|0)>>2]),fa=_new_next(da,ea);HEAP32[s>>2]=fa;b=535;break;case 154:HEAP32[s>>2]=HEAP32[(m|0)>>2];b=535;break;case 155:HEAP32[s>>2]=HEAP32[(m-4|0)>>2];b=535;break;case 156:var ha=_list1_gen(c,HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=ha;b=535;break;case 157:var ia=_list1_gen(c,HEAP32[(m|0)>>2]);HEAP32[s>>2]=ia;
b=535;break;case 158:var Fc=c,Gc=c,jc=HEAP32[(m-4|0)>>2],rc=_list1_gen(c,HEAP32[(m|0)>>2]),kc=_append_gen(Gc,jc,rc),sc=_list1_gen(Fc,kc);HEAP32[s>>2]=sc;b=535;break;case 159:var Ga=_list2_gen(c,HEAP32[(m-8|0)>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=Ga;b=535;break;case 160:var tc=_list3_gen(c,HEAP32[(m-16|0)>>2],HEAP32[(m-8|0)>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=tc;b=535;break;case 161:var ac=c,Lb=HEAP32[(m-4|0)>>2],uc=_new_nil(c),cc=_list2_gen(ac,Lb,uc);HEAP32[s>>2]=cc;b=535;break;case 162:var bc=c,ob=
HEAP32[(m-12|0)>>2],vc=_new_nil(c),wc=_list3_gen(bc,ob,vc,HEAP32[(m|0)>>2]);HEAP32[s>>2]=wc;b=535;break;case 163:var xc=_list2_gen(c,0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=xc;b=535;break;case 164:var Rb=_list3_gen(c,0,HEAP32[(m-8|0)>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=Rb;b=535;break;case 165:var lc=c,yc=_new_nil(c),mc=_list2_gen(lc,0,yc);HEAP32[s>>2]=mc;b=535;break;case 166:var dc=c,ec=_new_nil(c),nc=_list3_gen(dc,0,ec,HEAP32[(m|0)>>2]);HEAP32[s>>2]=nc;b=535;break;case 167:HEAP32[s>>2]=HEAP32[(m-4|0)>>2];
b=535;break;case 168:var zc=_list1_gen(c,HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=zc;b=535;break;case 169:var oc=c,Ac=HEAP32[(m-8|0)>>2],fc=_list1_gen(c,HEAP32[(m-4|0)>>2]),Bf=_append_gen(oc,Ac,fc);HEAP32[s>>2]=Bf;b=535;break;case 170:var Tc=_list1_gen(c,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Tc;b=535;break;case 171:var Uc=c,Vc=HEAP32[(m-4|0)>>2],Bc=_list1_gen(c,HEAP32[(m|0)>>2]),Cc=_append_gen(Uc,Vc,Bc);HEAP32[s>>2]=Cc;b=535;break;case 172:_assignable(c,HEAP32[(m|0)>>2]);b=535;break;case 173:var pc=c,qd=HEAP32[(m-
12|0)>>2],Wc=_intern_gen(c,__str1265|0),Xc=_new_call(pc,qd,Wc,HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=Xc;b=535;break;case 174:var Dc=_new_call(c,HEAP32[(m-8|0)>>2],HEAP16[(m|0)>>1],0);HEAP32[s>>2]=Dc;b=535;break;case 175:var Mb=_new_call(c,HEAP32[(m-8|0)>>2],HEAP16[(m|0)>>1],0);HEAP32[s>>2]=Mb;b=535;break;case 176:var Hc=_new_call(c,HEAP32[(m-8|0)>>2],HEAP16[(m|0)>>1],0);HEAP32[s>>2]=Hc;b=535;break;case 177:b=0!=(HEAP32[(c+60|0)>>2]|0)?179:178;break;case 178:b=0!=(HEAP32[(c+64|0)>>2]|0)?179:180;break;case 179:_yyerror(c,
__str1568|0);b=180;break;case 180:var gc=_new_colon2(c,HEAP32[(m-8|0)>>2],HEAP16[(m|0)>>1]);HEAP32[s>>2]=gc;b=535;break;case 181:b=0!=(HEAP32[(c+60|0)>>2]|0)?183:182;break;case 182:b=0!=(HEAP32[(c+64|0)>>2]|0)?183:184;break;case 183:_yyerror(c,__str1568|0);b=184;break;case 184:var Yc=_new_colon3(c,HEAP16[(m|0)>>1]);HEAP32[s>>2]=Yc;b=535;break;case 185:_backref_error(c,HEAP32[(m|0)>>2]);HEAP32[s>>2]=0;b=535;break;case 186:_assignable(c,HEAP32[(m|0)>>2]);b=535;break;case 187:var Zc=c,$c=HEAP32[(m-12|
0)>>2],rd=_intern_gen(c,__str1265|0),sd=_new_call(Zc,$c,rd,HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=sd;b=535;break;case 188:var td=_new_call(c,HEAP32[(m-8|0)>>2],HEAP16[(m|0)>>1],0);HEAP32[s>>2]=td;b=535;break;case 189:var ad=_new_call(c,HEAP32[(m-8|0)>>2],HEAP16[(m|0)>>1],0);HEAP32[s>>2]=ad;b=535;break;case 190:var ud=_new_call(c,HEAP32[(m-8|0)>>2],HEAP16[(m|0)>>1],0);HEAP32[s>>2]=ud;b=535;break;case 191:b=0!=(HEAP32[(c+60|0)>>2]|0)?193:192;break;case 192:b=0!=(HEAP32[(c+64|0)>>2]|0)?193:194;break;case 193:_yyerror(c,
__str1568|0);b=194;break;case 194:var Ec=_new_colon2(c,HEAP32[(m-8|0)>>2],HEAP16[(m|0)>>1]);HEAP32[s>>2]=Ec;b=535;break;case 195:b=0!=(HEAP32[(c+60|0)>>2]|0)?197:196;break;case 196:b=0!=(HEAP32[(c+64|0)>>2]|0)?197:198;break;case 197:_yyerror(c,__str1568|0);b=198;break;case 198:var Ic=_new_colon3(c,HEAP16[(m|0)>>1]);HEAP32[s>>2]=Ic;b=535;break;case 199:_backref_error(c,HEAP32[(m|0)>>2]);HEAP32[s>>2]=0;b=535;break;case 200:_yyerror(c,__str1669|0);b=535;break;case 201:var Jc=_cons_gen(c,1,HEAP16[(m|
0)>>1]<<16>>16);HEAP32[s>>2]=Jc;b=535;break;case 202:var vd=_cons_gen(c,0,HEAP16[(m|0)>>1]<<16>>16);HEAP32[s>>2]=vd;b=535;break;case 203:var wd=_cons_gen(c,HEAP32[(m-8|0)>>2],HEAP16[(m|0)>>1]<<16>>16);HEAP32[s>>2]=wd;b=535;break;case 204:HEAP32[(c+36|0)>>2]=3;HEAP16[s>>1]=HEAP16[(m|0)>>1];b=535;break;case 205:HEAP32[(c+36|0)>>2]=3;HEAP16[s>>1]=HEAP16[(m|0)>>1];b=535;break;case 206:var Qd=_new_sym(c,HEAP16[(m|0)>>1]);HEAP32[s>>2]=Qd;b=535;break;case 207:var pd=_new_undef(c,HEAP16[(m|0)>>1]);HEAP32[s>>
2]=pd;b=535;break;case 208:HEAP32[(c+36|0)>>2]=7;b=535;break;case 209:var bd=c,Kc=HEAP32[(m-12|0)>>2],F=_list1_gen(c,HEAP32[(m|0)>>2]),xd=_append_gen(bd,Kc,F);HEAP32[s>>2]=xd;b=535;break;case 210:var cd=_intern_gen(c,__str17|0);HEAP16[s>>1]=cd;b=535;break;case 211:var dd=_intern_gen(c,__str1870|0);HEAP16[s>>1]=dd;b=535;break;case 212:var Lc=_intern_gen(c,__str19|0);HEAP16[s>>1]=Lc;b=535;break;case 213:var ed=_intern_gen(c,__str20|0);HEAP16[s>>1]=ed;b=535;break;case 214:var yd=_intern_gen(c,__str21|
0);HEAP16[s>>1]=yd;b=535;break;case 215:var fd=_intern_gen(c,__str22|0);HEAP16[s>>1]=fd;b=535;break;case 216:var gd=_intern_gen(c,__str23|0);HEAP16[s>>1]=gd;b=535;break;case 217:var zd=_intern_gen(c,__str24|0);HEAP16[s>>1]=zd;b=535;break;case 218:var Ad=_intern_gen(c,__str25|0);HEAP16[s>>1]=Ad;b=535;break;case 219:var Bd=_intern_gen(c,__str26|0);HEAP16[s>>1]=Bd;b=535;break;case 220:var hd=_intern_gen(c,__str27|0);HEAP16[s>>1]=hd;b=535;break;case 221:var Cd=_intern_gen(c,__str28|0);HEAP16[s>>1]=Cd;
b=535;break;case 222:var Dd=_intern_gen(c,__str29|0);HEAP16[s>>1]=Dd;b=535;break;case 223:var id=_intern_gen(c,__str30|0);HEAP16[s>>1]=id;b=535;break;case 224:var jd=_intern_gen(c,__str31|0);HEAP16[s>>1]=jd;b=535;break;case 225:var Mc=_intern_gen(c,__str32|0);HEAP16[s>>1]=Mc;b=535;break;case 226:var Nc=_intern_gen(c,__str3371|0);HEAP16[s>>1]=Nc;b=535;break;case 227:var Ed=_intern_gen(c,__str34|0);HEAP16[s>>1]=Ed;b=535;break;case 228:var kd=_intern_gen(c,__str34|0);HEAP16[s>>1]=kd;b=535;break;case 229:var ld=
_intern_gen(c,__str35|0);HEAP16[s>>1]=ld;b=535;break;case 230:var md=_intern_gen(c,__str36|0);HEAP16[s>>1]=md;b=535;break;case 231:var Cf=_intern_gen(c,__str37|0);HEAP16[s>>1]=Cf;b=535;break;case 232:var vh=_intern_gen(c,__str1467|0);HEAP16[s>>1]=vh;b=535;break;case 233:var Df=_intern_gen(c,__str38|0);HEAP16[s>>1]=Df;b=535;break;case 234:var Ef=_intern_gen(c,__str39|0);HEAP16[s>>1]=Ef;b=535;break;case 235:var Rd=_intern_gen(c,__str40|0);HEAP16[s>>1]=Rd;b=535;break;case 236:var Sd=_intern_gen(c,__str1265|
0);HEAP16[s>>1]=Sd;b=535;break;case 237:var wh=_intern_gen(c,__str41|0);HEAP16[s>>1]=wh;b=535;break;case 238:var Ff=_new_asgn(c,HEAP32[(m-8|0)>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=Ff;b=535;break;case 239:var Gf=c,Td=HEAP32[(m-16|0)>>2],Ud=c,xh=HEAP32[(m-8|0)>>2],Hf=c,If=_list3_gen(c,0,0,HEAP32[(m|0)>>2]),Vd=_list1_gen(Hf,If),Wd=_new_rescue(Ud,xh,Vd,0),yh=_new_asgn(Gf,Td,Wd);HEAP32[s>>2]=yh;b=535;break;case 240:var Jf=_new_op_asgn(c,HEAP32[(m-8|0)>>2],HEAP16[(m-4|0)>>1],HEAP32[(m|0)>>2]);HEAP32[s>>2]=
Jf;b=535;break;case 241:var Xd=c,Yd=HEAP32[(m-16|0)>>2],Zd=HEAP16[(m-12|0)>>1],Kf=c,$d=HEAP32[(m-8|0)>>2],ae=c,Lf=_list3_gen(c,0,0,HEAP32[(m|0)>>2]),Mf=_list1_gen(ae,Lf),zh=_new_rescue(Kf,$d,Mf,0),be=_new_op_asgn(Xd,Yd,Zd,zh);HEAP32[s>>2]=be;b=535;break;case 242:var ce=c,Nf=c,Of=HEAP32[(m-20|0)>>2],Pf=_intern_gen(c,__str1265|0),de=_new_call(Nf,Of,Pf,HEAP32[(m-12|0)>>2]),ee=_new_op_asgn(ce,de,HEAP16[(m-4|0)>>1],HEAP32[(m|0)>>2]);HEAP32[s>>2]=ee;b=535;break;case 243:var Qf=c,Ah=_new_call(c,HEAP32[(m-
16|0)>>2],HEAP16[(m-8|0)>>1],0),Rf=_new_op_asgn(Qf,Ah,HEAP16[(m-4|0)>>1],HEAP32[(m|0)>>2]);HEAP32[s>>2]=Rf;b=535;break;case 244:var fe=c,ge=_new_call(c,HEAP32[(m-16|0)>>2],HEAP16[(m-8|0)>>1],0),he=_new_op_asgn(fe,ge,HEAP16[(m-4|0)>>1],HEAP32[(m|0)>>2]);HEAP32[s>>2]=he;b=535;break;case 245:var ie=c,Sf=_new_call(c,HEAP32[(m-16|0)>>2],HEAP16[(m-8|0)>>1],0),Tf=_new_op_asgn(ie,Sf,HEAP16[(m-4|0)>>1],HEAP32[(m|0)>>2]);HEAP32[s>>2]=Tf;b=535;break;case 246:_yyerror(c,__str1366|0);var je=_new_begin(c,0);HEAP32[s>>
2]=je;b=535;break;case 247:_yyerror(c,__str1366|0);var ke=_new_begin(c,0);HEAP32[s>>2]=ke;b=535;break;case 248:_backref_error(c,HEAP32[(m-8|0)>>2]);var Bh=_new_begin(c,0);HEAP32[s>>2]=Bh;b=535;break;case 249:var Ch=_new_dot2(c,HEAP32[(m-8|0)>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=Ch;b=535;break;case 250:var Uf=_new_dot3(c,HEAP32[(m-8|0)>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=Uf;b=535;break;case 251:var Vf=_call_bin_op(c,HEAP32[(m-8|0)>>2],__str32|0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Vf;b=535;break;case 252:var Wf=
_call_bin_op(c,HEAP32[(m-8|0)>>2],__str3371|0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Wf;b=535;break;case 253:var Dh=_call_bin_op(c,HEAP32[(m-8|0)>>2],__str34|0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Dh;b=535;break;case 254:var Xf=_call_bin_op(c,HEAP32[(m-8|0)>>2],__str35|0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Xf;b=535;break;case 255:var Yf=_call_bin_op(c,HEAP32[(m-8|0)>>2],__str36|0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Yf;b=535;break;case 256:var le=_call_bin_op(c,HEAP32[(m-8|0)>>2],__str37|0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=
le;b=535;break;case 257:var me=c,Zf=_call_bin_op(c,HEAP32[(m-8|0)>>2],__str37|0,HEAP32[(m|0)>>2]),$f=_call_uni_op(me,Zf,__str40|0);HEAP32[s>>2]=$f;b=535;break;case 258:var ag=c,ne=_call_bin_op(c,HEAP32[(m-8|0)>>2],__str37|0,HEAP32[(m|0)>>2]),oe=_call_uni_op(ag,ne,__str40|0);HEAP32[s>>2]=oe;b=535;break;case 259:var Eh=_call_uni_op(c,HEAP32[(m|0)>>2],__str39|0);HEAP32[s>>2]=Eh;b=535;break;case 260:var bg=_call_uni_op(c,HEAP32[(m|0)>>2],__str40|0);HEAP32[s>>2]=bg;b=535;break;case 261:var cg=_call_bin_op(c,
HEAP32[(m-8|0)>>2],__str17|0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=cg;b=535;break;case 262:var pe=_call_bin_op(c,HEAP32[(m-8|0)>>2],__str1870|0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=pe;b=535;break;case 263:var qe=_call_bin_op(c,HEAP32[(m-8|0)>>2],__str19|0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=qe;b=535;break;case 264:var dg=_call_bin_op(c,HEAP32[(m-8|0)>>2],__str20|0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=dg;b=535;break;case 265:var eg=_call_bin_op(c,HEAP32[(m-8|0)>>2],__str25|0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=eg;b=535;break;
case 266:var re=_call_bin_op(c,HEAP32[(m-8|0)>>2],__str26|0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=re;b=535;break;case 267:var fg=_call_bin_op(c,HEAP32[(m-8|0)>>2],__str27|0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=fg;b=535;break;case 268:var se=_call_bin_op(c,HEAP32[(m-8|0)>>2],__str28|0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=se;b=535;break;case 269:var gg=_call_bin_op(c,HEAP32[(m-8|0)>>2],__str21|0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=gg;b=535;break;case 270:var hg=_call_bin_op(c,HEAP32[(m-8|0)>>2],__str22|0,HEAP32[(m|0)>>2]);
HEAP32[s>>2]=hg;b=535;break;case 271:var te=_call_bin_op(c,HEAP32[(m-8|0)>>2],__str29|0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=te;b=535;break;case 272:var ig=_match_op(c,HEAP32[(m-8|0)>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=ig;b=535;break;case 273:var jg=_call_bin_op(c,HEAP32[(m-8|0)>>2],__str24|0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=jg;b=535;break;case 274:var kg=c,ue=_cond(HEAP32[(m|0)>>2]),ve=_call_uni_op(kg,ue,__str1467|0);HEAP32[s>>2]=ve;b=535;break;case 275:var Fh=c,lg=_cond(HEAP32[(m|0)>>2]),mg=_call_uni_op(Fh,
lg,__str38|0);HEAP32[s>>2]=mg;b=535;break;case 276:var ng=_call_bin_op(c,HEAP32[(m-8|0)>>2],__str30|0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=ng;b=535;break;case 277:var we=_call_bin_op(c,HEAP32[(m-8|0)>>2],__str31|0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=we;b=535;break;case 278:var xe=_new_and(c,HEAP32[(m-8|0)>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=xe;b=535;break;case 279:var Gh=_new_or(c,HEAP32[(m-8|0)>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=Gh;b=535;break;case 280:var og=c,ye=_cond(HEAP32[(m-20|0)>>2]),ze=_new_if(og,ye,
HEAP32[(m-12|0)>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=ze;b=535;break;case 281:HEAP32[s>>2]=HEAP32[(m|0)>>2];b=535;break;case 282:HEAP32[s>>2]=HEAP32[(m|0)>>2];b=0!=(HEAP32[s>>2]|0)?284:283;break;case 283:var Ae=_new_nil(c);HEAP32[s>>2]=Ae;b=284;break;case 284:b=535;break;case 285:HEAP32[s>>2]=HEAP32[(m-4|0)>>2];b=535;break;case 286:var Be=c,Vj=HEAP32[(m-12|0)>>2],Hh=c,Ih=_new_hash(c,HEAP32[(m-4|0)>>2]),pg=_list1_gen(Hh,Ih),qg=_append_gen(Be,Vj,pg);HEAP32[s>>2]=qg;b=535;break;case 287:var rg=c,sg=_new_hash(c,
HEAP32[(m-4|0)>>2]),Jh=_cons_gen(rg,sg,0);HEAP32[s>>2]=Jh;b=535;break;case 288:HEAP32[s>>2]=HEAP32[(m-4|0)>>2];b=535;break;case 289:var Ce=_cons_gen(c,HEAP32[(m-4|0)>>2],0);HEAP32[s>>2]=Ce;b=535;break;case 290:var De=c,Kh=c,tg=HEAP32[(m-12|0)>>2],Lh=c,ug=_new_hash(c,HEAP32[(m-4|0)>>2]),Mh=_list1_gen(Lh,ug),Nh=_append_gen(Kh,tg,Mh),Ee=_cons_gen(De,Nh,0);HEAP32[s>>2]=Ee;b=535;break;case 291:var vg=c,Oh=c,Fe=_new_hash(c,HEAP32[(m-4|0)>>2]),Ge=_list1_gen(Oh,Fe),wg=_cons_gen(vg,Ge,0);HEAP32[s>>2]=wg;b=
535;break;case 292:var He=c,xg=_list1_gen(c,HEAP32[(m|0)>>2]),yg=_cons_gen(He,xg,0);HEAP32[s>>2]=yg;b=535;break;case 293:var zg=_cons_gen(c,HEAP32[(m-4|0)>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=zg;b=535;break;case 294:var Ag=c,Ie=c,Je=_new_hash(c,HEAP32[(m-4|0)>>2]),Bg=_list1_gen(Ie,Je),Ph=_cons_gen(Ag,Bg,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Ph;b=535;break;case 295:var Cg=c,Dg=c,Qh=HEAP32[(m-12|0)>>2],Eg=c,Ke=_new_hash(c,HEAP32[(m-4|0)>>2]),Fg=_list1_gen(Eg,Ke),Gg=_append_gen(Dg,Qh,Fg),Le=_cons_gen(Cg,Gg,HEAP32[(m|
0)>>2]);HEAP32[s>>2]=Le;b=535;break;case 296:var Me=_cons_gen(c,0,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Me;b=535;break;case 297:HEAP32[s>>2]=HEAP32[(c+48|0)>>2];HEAP32[(c+48|0)>>2]=HEAP32[(c+48|0)>>2]<<1|1;b=535;break;case 298:HEAP32[(c+48|0)>>2]=HEAP32[(m-4|0)>>2];HEAP32[s>>2]=HEAP32[(m|0)>>2];b=535;break;case 299:var Hg=_new_block_arg(c,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Hg;b=535;break;case 300:HEAP32[s>>2]=HEAP32[(m|0)>>2];b=535;break;case 301:HEAP32[s>>2]=0;b=535;break;case 302:var Ig=_cons_gen(c,HEAP32[(m|
0)>>2],0);HEAP32[s>>2]=Ig;b=535;break;case 303:var Jg=c,Kg=_new_splat(c,HEAP32[(m|0)>>2]),Lg=_cons_gen(Jg,Kg,0);HEAP32[s>>2]=Lg;b=535;break;case 304:var Rh=c,Mg=HEAP32[(m-8|0)>>2],Ne=_list1_gen(c,HEAP32[(m|0)>>2]),Ng=_append_gen(Rh,Mg,Ne);HEAP32[s>>2]=Ng;b=535;break;case 305:var Og=c,Fd=HEAP32[(m-12|0)>>2],Gd=c,Pg=_new_splat(c,HEAP32[(m|0)>>2]),Sh=_list1_gen(Gd,Pg),Th=_append_gen(Og,Fd,Sh);HEAP32[s>>2]=Th;b=535;break;case 306:var Oe=c,Pe=HEAP32[(m-8|0)>>2],Qe=_list1_gen(c,HEAP32[(m|0)>>2]),Qg=_append_gen(Oe,
Pe,Qe);HEAP32[s>>2]=Qg;b=535;break;case 307:var Rg=c,Sg=HEAP32[(m-12|0)>>2],Tg=c,Ug=_new_splat(c,HEAP32[(m|0)>>2]),Uh=_list1_gen(Tg,Ug),Re=_append_gen(Rg,Sg,Uh);HEAP32[s>>2]=Re;b=535;break;case 308:var Vg=c,Vh=_new_splat(c,HEAP32[(m|0)>>2]),Se=_list1_gen(Vg,Vh);HEAP32[s>>2]=Se;b=535;break;case 309:var Te=_new_fcall(c,HEAP16[(m|0)>>1],0);HEAP32[s>>2]=Te;b=535;break;case 310:HEAP32[(m|0)>>2]=HEAP32[(c+48|0)>>2];HEAP32[(c+48|0)>>2]=0;b=535;break;case 311:HEAP32[(c+48|0)>>2]=HEAP32[(m-12|0)>>2];HEAP32[s>>
2]=HEAP32[(m-4|0)>>2];b=535;break;case 312:HEAP32[(c+36|0)>>2]=2;b=535;break;case 313:HEAP32[s>>2]=HEAP32[(m-8|0)>>2];b=535;break;case 314:HEAP32[(c+36|0)>>2]=2;b=535;break;case 315:HEAP32[s>>2]=0;b=535;break;case 316:HEAP32[s>>2]=HEAP32[(m-4|0)>>2];b=535;break;case 317:var qc=_new_colon2(c,HEAP32[(m-8|0)>>2],HEAP16[(m|0)>>1]);HEAP32[s>>2]=qc;b=535;break;case 318:var Oc=_new_colon3(c,HEAP16[(m|0)>>1]);HEAP32[s>>2]=Oc;b=535;break;case 319:var Hd=_new_array(c,HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=Hd;b=535;
break;case 320:var Ue=_new_hash(c,HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=Ue;b=535;break;case 321:var Ve=_new_return(c,0);HEAP32[s>>2]=Ve;b=535;break;case 322:var Pc=_new_yield(c,HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=Pc;b=535;break;case 323:var We=_new_yield(c,0);HEAP32[s>>2]=We;b=535;break;case 324:var Xe=_new_yield(c,0);HEAP32[s>>2]=Xe;b=535;break;case 325:var Ye=c,Wg=_cond(HEAP32[(m-4|0)>>2]),Ze=_call_uni_op(Ye,Wg,__str1467|0);HEAP32[s>>2]=Ze;b=535;break;case 326:var hc=c,Xg=_new_nil(c),nd=_call_uni_op(hc,
Xg,__str1467|0);HEAP32[s>>2]=nd;b=535;break;case 327:var $e=c,Yg=HEAP16[(m-4|0)>>1],af=_cons_gen(c,0,HEAP32[(m|0)>>2]),bf=_new_fcall($e,Yg,af);HEAP32[s>>2]=bf;b=535;break;case 328:_call_with_block(c,HEAP32[(m-4|0)>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=HEAP32[(m-4|0)>>2];b=535;break;case 329:_local_nest(c);HEAP32[s>>2]=HEAP32[(c+56|0)>>2];var od=c+52|0,cf=HEAP32[od>>2]+1|0;HEAP32[od>>2]=cf;HEAP32[(c+56|0)>>2]=cf;b=535;break;case 330:HEAP32[(c+56|0)>>2]=HEAP32[(m-8|0)>>2];var Zg=_new_lambda(c,HEAP32[(m-
4|0)>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=Zg;_local_unnest(c);b=535;break;case 331:var df=c,$g=_cond(HEAP32[(m-16|0)>>2]),Qc=_new_if(df,$g,HEAP32[(m-8|0)>>2],HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=Qc;b=535;break;case 332:var ah=c,ef=_cond(HEAP32[(m-16|0)>>2]),ff=_new_unless(ah,ef,HEAP32[(m-8|0)>>2],HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=ff;b=535;break;case 333:HEAP32[(c+44|0)>>2]=HEAP32[(c+44|0)>>2]<<1|1;b=535;break;case 334:HEAP32[(c+44|0)>>2]>>>=1;b=535;break;case 335:var bh=c,ch=_cond(HEAP32[(m-16|0)>>2]),gf=
_new_while(bh,ch,HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=gf;b=535;break;case 336:HEAP32[(c+44|0)>>2]=HEAP32[(c+44|0)>>2]<<1|1;b=535;break;case 337:HEAP32[(c+44|0)>>2]>>>=1;b=535;break;case 338:var hf=c,dh=_cond(HEAP32[(m-16|0)>>2]),eh=_new_until(hf,dh,HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=eh;b=535;break;case 339:var fh=_new_case(c,HEAP32[(m-12|0)>>2],HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=fh;b=535;break;case 340:var Id=_new_case(c,0,HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=Id;b=535;break;case 341:HEAP32[(c+44|0)>>2]=HEAP32[(c+
44|0)>>2]<<1|1;b=535;break;case 342:HEAP32[(c+44|0)>>2]>>>=1;b=535;break;case 343:var jf=_new_for(c,HEAP32[(m-28|0)>>2],HEAP32[(m-16|0)>>2],HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=jf;b=535;break;case 344:b=0!=(HEAP32[(c+60|0)>>2]|0)?346:345;break;case 345:b=0!=(HEAP32[(c+64|0)>>2]|0)?346:347;break;case 346:_yyerror(c,__str42|0);b=347;break;case 347:var gh=_local_switch(c);HEAP32[s>>2]=gh;b=535;break;case 348:var kf=_new_class(c,HEAP32[(m-16|0)>>2],HEAP32[(m-12|0)>>2],HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=kf;
_local_resume(c,HEAP32[(m-8|0)>>2]);b=535;break;case 349:HEAP32[s>>2]=HEAP32[(c+60|0)>>2];HEAP32[(c+60|0)>>2]=0;b=535;break;case 350:var Jd=c,lf=_local_switch(c),hh=_cons_gen(Jd,lf,HEAP32[(c+64|0)>>2]);HEAP32[s>>2]=hh;HEAP32[(c+64|0)>>2]=0;b=535;break;case 351:var mf=_new_sclass(c,HEAP32[(m-20|0)>>2],HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=mf;_local_resume(c,HEAP32[(HEAP32[(m-8|0)>>2]|0)>>2]);HEAP32[(c+60|0)>>2]=HEAP32[(m-16|0)>>2];HEAP32[(c+64|0)>>2]=HEAP32[(HEAP32[(m-8|0)>>2]+4|0)>>2];b=535;break;case 352:b=
0!=(HEAP32[(c+60|0)>>2]|0)?354:353;break;case 353:b=0!=(HEAP32[(c+64|0)>>2]|0)?354:355;break;case 354:_yyerror(c,__str43|0);b=355;break;case 355:var ih=_local_switch(c);HEAP32[s>>2]=ih;b=535;break;case 356:var nf=_new_module(c,HEAP32[(m-12|0)>>2],HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=nf;_local_resume(c,HEAP32[(m-8|0)>>2]);b=535;break;case 357:var of=c+60|0;HEAP32[of>>2]=HEAP32[of>>2]+1|0;var jh=_local_switch(c);HEAP32[s>>2]=jh;b=535;break;case 358:var Kd=_new_def(c,HEAP16[(m-16|0)>>1],HEAP32[(m-8|0)>>
2],HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=Kd;_local_resume(c,HEAP32[(m-12|0)>>2]);var Ld=c+60|0;HEAP32[Ld>>2]=HEAP32[Ld>>2]-1|0;b=535;break;case 359:HEAP32[(c+36|0)>>2]=7;b=535;break;case 360:var Rc=c+64|0;HEAP32[Rc>>2]=HEAP32[Rc>>2]+1|0;HEAP32[(c+36|0)>>2]=3;var pf=_local_switch(c);HEAP32[s>>2]=pf;b=535;break;case 361:var qf=_new_sdef(c,HEAP32[(m-28|0)>>2],HEAP16[(m-16|0)>>1],HEAP32[(m-8|0)>>2],HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=qf;_local_resume(c,HEAP32[(m-12|0)>>2]);var rf=c+64|0;HEAP32[rf>>2]=HEAP32[rf>>
2]-1|0;b=535;break;case 362:var kh=_new_break(c,0);HEAP32[s>>2]=kh;b=535;break;case 363:var lh=_new_next(c,0);HEAP32[s>>2]=lh;b=535;break;case 364:var mh=_new_redo(c);HEAP32[s>>2]=mh;b=535;break;case 365:var nh=_new_retry(c);HEAP32[s>>2]=nh;b=535;break;case 366:HEAP32[s>>2]=HEAP32[(m|0)>>2];b=0!=(HEAP32[s>>2]|0)?368:367;break;case 367:var oh=_new_nil(c);HEAP32[s>>2]=oh;b=368;break;case 368:b=535;break;case 369:var sf=c,Md=_cond(HEAP32[(m-12|0)>>2]),ph=_new_if(sf,Md,HEAP32[(m-4|0)>>2],HEAP32[(m|0)>>
2]);HEAP32[s>>2]=ph;b=535;break;case 370:HEAP32[s>>2]=HEAP32[(m|0)>>2];b=535;break;case 371:var tf=c,uf=_list1_gen(c,HEAP32[(m|0)>>2]),qh=_list1_gen(tf,uf);HEAP32[s>>2]=qh;b=535;break;case 372:var vf=_new_arg(c,HEAP16[(m|0)>>1]);HEAP32[s>>2]=vf;b=535;break;case 373:var wf=_new_masgn(c,HEAP32[(m-4|0)>>2],0);HEAP32[s>>2]=wf;b=535;break;case 374:var Nd=_list1_gen(c,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Nd;b=535;break;case 375:var Od=c,Pd=HEAP32[(m-8|0)>>2],Sc=_list1_gen(c,HEAP32[(m|0)>>2]),rh=_append_gen(Od,
Pd,Sc);HEAP32[s>>2]=rh;b=535;break;case 376:var xf=_list3_gen(c,HEAP32[(m|0)>>2],0,0);HEAP32[s>>2]=xf;b=535;break;case 377:var sh=c,yf=HEAP32[(m-12|0)>>2],zf=_new_arg(c,HEAP16[(m|0)>>1]),Wh=_list3_gen(sh,yf,zf,0);HEAP32[s>>2]=Wh;b=535;break;case 378:var Xh=c,Yh=HEAP32[(m-20|0)>>2],Zh=_new_arg(c,HEAP16[(m-8|0)>>1]),th=_list3_gen(Xh,Yh,Zh,HEAP32[(m|0)>>2]);HEAP32[s>>2]=th;b=535;break;case 379:var $h=_list3_gen(c,HEAP32[(m-8|0)>>2],-1,0);HEAP32[s>>2]=$h;b=535;break;case 380:var ai=_list3_gen(c,HEAP32[(m-
16|0)>>2],-1,HEAP32[(m|0)>>2]);HEAP32[s>>2]=ai;b=535;break;case 381:var bi=c,ci=_new_arg(c,HEAP16[(m|0)>>1]),di=_list3_gen(bi,0,ci,0);HEAP32[s>>2]=di;b=535;break;case 382:var ei=c,fi=_new_arg(c,HEAP16[(m-8|0)>>1]),gi=_list3_gen(ei,0,fi,HEAP32[(m|0)>>2]);HEAP32[s>>2]=gi;b=535;break;case 383:var hi=_list3_gen(c,0,-1,0);HEAP32[s>>2]=hi;b=535;break;case 384:var Wj=_list3_gen(c,0,-1,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Wj;b=535;break;case 385:var ii=_new_args(c,HEAP32[(m-20|0)>>2],HEAP32[(m-12|0)>>2],HEAP16[(m-
4|0)>>1],0,HEAP16[(m|0)>>1]);HEAP32[s>>2]=ii;b=535;break;case 386:var ji=_new_args(c,HEAP32[(m-28|0)>>2],HEAP32[(m-20|0)>>2],HEAP16[(m-12|0)>>1],HEAP32[(m-4|0)>>2],HEAP16[(m|0)>>1]);HEAP32[s>>2]=ji;b=535;break;case 387:var ki=_new_args(c,HEAP32[(m-12|0)>>2],HEAP32[(m-4|0)>>2],0,0,HEAP16[(m|0)>>1]);HEAP32[s>>2]=ki;b=535;break;case 388:var Xj=_new_args(c,HEAP32[(m-20|0)>>2],HEAP32[(m-12|0)>>2],0,HEAP32[(m-4|0)>>2],HEAP16[(m|0)>>1]);HEAP32[s>>2]=Xj;b=535;break;case 389:var Yj=_new_args(c,HEAP32[(m-12|
0)>>2],0,HEAP16[(m-4|0)>>1],0,HEAP16[(m|0)>>1]);HEAP32[s>>2]=Yj;b=535;break;case 390:var li=_new_args(c,HEAP32[(m-4|0)>>2],0,1,0,0);HEAP32[s>>2]=li;b=535;break;case 391:var mi=_new_args(c,HEAP32[(m-20|0)>>2],0,HEAP16[(m-12|0)>>1],HEAP32[(m-4|0)>>2],HEAP16[(m|0)>>1]);HEAP32[s>>2]=mi;b=535;break;case 392:var ni=_new_args(c,HEAP32[(m-4|0)>>2],0,0,0,HEAP16[(m|0)>>1]);HEAP32[s>>2]=ni;b=535;break;case 393:var oi=_new_args(c,0,HEAP32[(m-12|0)>>2],HEAP16[(m-4|0)>>1],0,HEAP16[(m|0)>>1]);HEAP32[s>>2]=oi;b=
535;break;case 394:var pi=_new_args(c,0,HEAP32[(m-20|0)>>2],HEAP16[(m-12|0)>>1],HEAP32[(m-4|0)>>2],HEAP16[(m|0)>>1]);HEAP32[s>>2]=pi;b=535;break;case 395:var qi=_new_args(c,0,HEAP32[(m-4|0)>>2],0,0,HEAP16[(m|0)>>1]);HEAP32[s>>2]=qi;b=535;break;case 396:var ri=_new_args(c,0,HEAP32[(m-12|0)>>2],0,HEAP32[(m-4|0)>>2],HEAP16[(m|0)>>1]);HEAP32[s>>2]=ri;b=535;break;case 397:var Zj=_new_args(c,0,0,HEAP16[(m-4|0)>>1],0,HEAP16[(m|0)>>1]);HEAP32[s>>2]=Zj;b=535;break;case 398:var si=_new_args(c,0,0,HEAP16[(m-
12|0)>>1],HEAP32[(m-4|0)>>2],HEAP16[(m|0)>>1]);HEAP32[s>>2]=si;b=535;break;case 399:var ti=_new_args(c,0,0,0,0,HEAP16[(m|0)>>1]);HEAP32[s>>2]=ti;b=535;break;case 400:HEAP32[(c+68|0)>>2]=1;HEAP32[s>>2]=HEAP32[(m|0)>>2];b=535;break;case 401:_local_add_f(c,0);HEAP32[s>>2]=0;b=535;break;case 402:_local_add_f(c,0);HEAP32[s>>2]=0;b=535;break;case 403:HEAP32[s>>2]=HEAP32[(m-8|0)>>2];b=535;break;case 404:HEAP32[s>>2]=0;b=535;break;case 405:HEAP32[s>>2]=0;b=535;break;case 406:_local_add_f(c,HEAP16[(m|0)>>
1]);_new_bv(c,HEAP16[(m|0)>>1]);b=535;break;case 407:HEAP32[s>>2]=HEAP32[(m-8|0)>>2];b=535;break;case 408:HEAP32[s>>2]=HEAP32[(m|0)>>2];b=535;break;case 409:HEAP32[s>>2]=HEAP32[(m-4|0)>>2];b=535;break;case 410:HEAP32[s>>2]=HEAP32[(m-4|0)>>2];b=535;break;case 411:_local_nest(c);b=535;break;case 412:var ui=_new_block(c,HEAP32[(m-8|0)>>2],HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=ui;_local_unnest(c);b=535;break;case 413:b=38==(HEAP32[(HEAP32[(m-4|0)>>2]|0)>>2]|0)?414:415;break;case 414:_yyerror(c,__str44|0);
b=416;break;case 415:_call_with_block(c,HEAP32[(m-4|0)>>2],HEAP32[(m|0)>>2]);b=416;break;case 416:HEAP32[s>>2]=HEAP32[(m-4|0)>>2];b=535;break;case 417:var vi=_new_call(c,HEAP32[(m-12|0)>>2],HEAP16[(m-4|0)>>1],HEAP32[(m|0)>>2]);HEAP32[s>>2]=vi;b=535;break;case 418:var wi=_new_call(c,HEAP32[(m-16|0)>>2],HEAP16[(m-8|0)>>1],HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=wi;_call_with_block(c,HEAP32[s>>2],HEAP32[(m|0)>>2]);b=535;break;case 419:var xi=_new_call(c,HEAP32[(m-16|0)>>2],HEAP16[(m-8|0)>>1],HEAP32[(m-4|0)>>
2]);HEAP32[s>>2]=xi;_call_with_block(c,HEAP32[s>>2],HEAP32[(m|0)>>2]);b=535;break;case 420:var yi=_new_fcall(c,HEAP16[(m-4|0)>>1],HEAP32[(m|0)>>2]);HEAP32[s>>2]=yi;b=535;break;case 421:var $j=_new_call(c,HEAP32[(m-12|0)>>2],HEAP16[(m-4|0)>>1],HEAP32[(m|0)>>2]);HEAP32[s>>2]=$j;b=535;break;case 422:var zi=_new_call(c,HEAP32[(m-12|0)>>2],HEAP16[(m-4|0)>>1],HEAP32[(m|0)>>2]);HEAP32[s>>2]=zi;b=535;break;case 423:var Ai=_new_call(c,HEAP32[(m-8|0)>>2],HEAP16[(m|0)>>1],0);HEAP32[s>>2]=Ai;b=535;break;case 424:var Bi=
c,Ci=HEAP32[(m-8|0)>>2],Di=_intern_gen(c,__str45|0),ak=_new_call(Bi,Ci,Di,HEAP32[(m|0)>>2]);HEAP32[s>>2]=ak;b=535;break;case 425:var Ei=c,Fi=HEAP32[(m-8|0)>>2],Gi=_intern_gen(c,__str45|0),Hi=_new_call(Ei,Fi,Gi,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Hi;b=535;break;case 426:var Ii=_new_super(c,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Ii;b=535;break;case 427:var Ji=_new_zsuper(c);HEAP32[s>>2]=Ji;b=535;break;case 428:var Ki=c,bk=HEAP32[(m-12|0)>>2],Li=_intern_gen(c,__str1265|0),Mi=_new_call(Ki,bk,Li,HEAP32[(m-4|0)>>2]);
HEAP32[s>>2]=Mi;b=535;break;case 429:_local_nest(c);b=535;break;case 430:var Ni=_new_block(c,HEAP32[(m-8|0)>>2],HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=Ni;_local_unnest(c);b=535;break;case 431:_local_nest(c);b=535;break;case 432:var Oi=_new_block(c,HEAP32[(m-8|0)>>2],HEAP32[(m-4|0)>>2]);HEAP32[s>>2]=Oi;_local_unnest(c);b=535;break;case 433:var Pi=c,Qi=_cons_gen(c,HEAP32[(m-12|0)>>2],HEAP32[(m-4|0)>>2]),ck=_cons_gen(Pi,Qi,HEAP32[(m|0)>>2]);HEAP32[s>>2]=ck;b=535;break;case 434:b=0!=(HEAP32[(m|0)>>2]|0)?435:
436;break;case 435:var Ri=c,Si=_cons_gen(c,0,HEAP32[(m|0)>>2]),Ti=_cons_gen(Ri,Si,0);HEAP32[s>>2]=Ti;b=437;break;case 436:HEAP32[s>>2]=0;b=437;break;case 437:b=535;break;case 438:var Ui=c,Vi=_list3_gen(c,HEAP32[(m-16|0)>>2],HEAP32[(m-12|0)>>2],HEAP32[(m-4|0)>>2]),Wi=_list1_gen(Ui,Vi);HEAP32[s>>2]=Wi;b=0!=(HEAP32[(m|0)>>2]|0)?439:440;break;case 439:var Xi=_append_gen(c,HEAP32[s>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=Xi;b=440;break;case 440:b=535;break;case 441:var Yi=_list1_gen(c,HEAP32[(m|0)>>2]);HEAP32[s>>
2]=Yi;b=535;break;case 442:HEAP32[s>>2]=HEAP32[(m|0)>>2];b=535;break;case 443:HEAP32[s>>2]=HEAP32[(m|0)>>2];b=535;break;case 444:HEAP32[s>>2]=HEAP32[(m|0)>>2];b=535;break;case 445:var Zi=c,dk=c,$i=HEAP32[(m-4|0)>>2],aj=_list1_gen(c,HEAP32[(m|0)>>2]),bj=_append_gen(dk,$i,aj),ek=_new_dstr(Zi,bj);HEAP32[s>>2]=ek;b=535;break;case 446:HEAP32[s>>2]=HEAP32[(c+40|0)>>2];HEAP32[(c+40|0)>>2]=0;b=535;break;case 447:HEAP32[(c+40|0)>>2]=HEAP32[(m-8|0)>>2];var cj=_list2_gen(c,HEAP32[(m-12|0)>>2],HEAP32[(m-4|0)>>
2]);HEAP32[s>>2]=cj;b=535;break;case 448:HEAP32[s>>2]=HEAP32[(c+40|0)>>2];HEAP32[(c+40|0)>>2]=0;b=535;break;case 449:HEAP32[(c+40|0)>>2]=HEAP32[(m-8|0)>>2];var dj=c,ej=c,fj=HEAP32[(m-16|0)>>2],gj=_list1_gen(c,HEAP32[(m-12|0)>>2]),hj=_append_gen(ej,fj,gj),ij=_list1_gen(c,HEAP32[(m-4|0)>>2]),jj=_append_gen(dj,hj,ij);HEAP32[s>>2]=jj;b=535;break;case 450:var kj=_new_sym(c,HEAP16[(m|0)>>1]);HEAP32[s>>2]=kj;b=535;break;case 451:HEAP32[(c+36|0)>>2]=1;var fk=c,lj=c,mj=HEAP32[(m-4|0)>>2],nj=_list1_gen(c,HEAP32[(m|
0)>>2]),oj=_append_gen(lj,mj,nj),pj=_new_dsym(fk,oj);HEAP32[s>>2]=pj;b=535;break;case 452:HEAP32[(c+36|0)>>2]=1;HEAP16[s>>1]=HEAP16[(m|0)>>1];b=535;break;case 453:var qj=_new_strsym(c,HEAP32[(m|0)>>2]);HEAP16[s>>1]=qj;b=535;break;case 454:var rj=_new_strsym(c,HEAP32[(m|0)>>2]);HEAP16[s>>1]=rj;b=535;break;case 455:var gk=_negate_lit(c,HEAP32[(m|0)>>2]);HEAP32[s>>2]=gk;b=535;break;case 456:var sj=_negate_lit(c,HEAP32[(m|0)>>2]);HEAP32[s>>2]=sj;b=535;break;case 457:var tj=_new_lvar(c,HEAP16[(m|0)>>1]);
HEAP32[s>>2]=tj;b=535;break;case 458:var uj=_new_ivar(c,HEAP16[(m|0)>>1]);HEAP32[s>>2]=uj;b=535;break;case 459:var vj=_new_gvar(c,HEAP16[(m|0)>>1]);HEAP32[s>>2]=vj;b=535;break;case 460:var wj=_new_cvar(c,HEAP16[(m|0)>>1]);HEAP32[s>>2]=wj;b=535;break;case 461:var xj=_new_const(c,HEAP16[(m|0)>>1]);HEAP32[s>>2]=xj;b=535;break;case 462:_assignable(c,HEAP32[(m|0)>>2]);b=535;break;case 463:var hk=_var_reference(c,HEAP32[(m|0)>>2]);HEAP32[s>>2]=hk;b=535;break;case 464:var yj=_new_nil(c);HEAP32[s>>2]=yj;
b=535;break;case 465:var zj=_new_self(c);HEAP32[s>>2]=zj;b=535;break;case 466:var ik=_new_true(c);HEAP32[s>>2]=ik;b=535;break;case 467:var Aj=_new_false(c);HEAP32[s>>2]=Aj;b=535;break;case 468:b=0!=(HEAP32[(c+24|0)>>2]|0)?470:469;break;case 469:HEAP32[(c+24|0)>>2]=__str46|0;b=470;break;case 470:var Bj=c,jk=HEAP32[(c+24|0)>>2],Cj=_strlen(HEAP32[(c+24|0)>>2]),Dj=_new_str(Bj,jk,Cj);HEAP32[s>>2]=Dj;b=535;break;case 471:var Ej=HEAP32[(c+28|0)>>2];_snprintf(M|0,16,__str47|0,(tempInt=STACKTOP,STACKTOP+=
4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Ej,tempInt));var kk=_new_int(c,M|0,10);HEAP32[s>>2]=kk;b=535;break;case 472:HEAP32[s>>2]=0;b=535;break;case 473:HEAP32[(c+36|0)>>2]=0;HEAP32[(c+68|0)>>2]=1;b=535;break;case 474:HEAP32[s>>2]=HEAP32[(m-4|0)>>2];b=535;break;case 475:j=0;HEAP32[s>>2]=0;b=535;break;case 476:HEAP32[s>>2]=HEAP32[(m-4|0)>>2];HEAP32[(c+36|0)>>2]=0;HEAP32[(c+68|0)>>2]=1;b=535;break;case 477:HEAP32[s>>2]=HEAP32[(m-4|0)>>2];b=535;break;case 478:var lk=
_new_args(c,HEAP32[(m-20|0)>>2],HEAP32[(m-12|0)>>2],HEAP16[(m-4|0)>>1],0,HEAP16[(m|0)>>1]);HEAP32[s>>2]=lk;b=535;break;case 479:var mk=_new_args(c,HEAP32[(m-28|0)>>2],HEAP32[(m-20|0)>>2],HEAP16[(m-12|0)>>1],HEAP32[(m-4|0)>>2],HEAP16[(m|0)>>1]);HEAP32[s>>2]=mk;b=535;break;case 480:var Fj=_new_args(c,HEAP32[(m-12|0)>>2],HEAP32[(m-4|0)>>2],0,0,HEAP16[(m|0)>>1]);HEAP32[s>>2]=Fj;b=535;break;case 481:var Gj=_new_args(c,HEAP32[(m-20|0)>>2],HEAP32[(m-12|0)>>2],0,HEAP32[(m-4|0)>>2],HEAP16[(m|0)>>1]);HEAP32[s>>
2]=Gj;b=535;break;case 482:var Hj=_new_args(c,HEAP32[(m-12|0)>>2],0,HEAP16[(m-4|0)>>1],0,HEAP16[(m|0)>>1]);HEAP32[s>>2]=Hj;b=535;break;case 483:var nk=_new_args(c,HEAP32[(m-20|0)>>2],0,HEAP16[(m-12|0)>>1],HEAP32[(m-4|0)>>2],HEAP16[(m|0)>>1]);HEAP32[s>>2]=nk;b=535;break;case 484:var Ij=_new_args(c,HEAP32[(m-4|0)>>2],0,0,0,HEAP16[(m|0)>>1]);HEAP32[s>>2]=Ij;b=535;break;case 485:var Jj=_new_args(c,0,HEAP32[(m-12|0)>>2],HEAP16[(m-4|0)>>1],0,HEAP16[(m|0)>>1]);HEAP32[s>>2]=Jj;b=535;break;case 486:var Kj=
_new_args(c,0,HEAP32[(m-20|0)>>2],HEAP16[(m-12|0)>>1],HEAP32[(m-4|0)>>2],HEAP16[(m|0)>>1]);HEAP32[s>>2]=Kj;b=535;break;case 487:var ok=_new_args(c,0,HEAP32[(m-4|0)>>2],0,0,HEAP16[(m|0)>>1]);HEAP32[s>>2]=ok;b=535;break;case 488:var pk=_new_args(c,0,HEAP32[(m-12|0)>>2],0,HEAP32[(m-4|0)>>2],HEAP16[(m|0)>>1]);HEAP32[s>>2]=pk;b=535;break;case 489:var qk=_new_args(c,0,0,HEAP16[(m-4|0)>>1],0,HEAP16[(m|0)>>1]);HEAP32[s>>2]=qk;b=535;break;case 490:var Lj=_new_args(c,0,0,HEAP16[(m-12|0)>>1],HEAP32[(m-4|0)>>
2],HEAP16[(m|0)>>1]);HEAP32[s>>2]=Lj;b=535;break;case 491:var Mj=_new_args(c,0,0,0,0,HEAP16[(m|0)>>1]);HEAP32[s>>2]=Mj;b=535;break;case 492:_local_add_f(c,0);var Nj=_new_args(c,0,0,0,0,0);HEAP32[s>>2]=Nj;b=535;break;case 493:_yyerror(c,__str48|0);HEAP32[s>>2]=0;b=535;break;case 494:_yyerror(c,__str49|0);HEAP32[s>>2]=0;b=535;break;case 495:_yyerror(c,__str50|0);HEAP32[s>>2]=0;b=535;break;case 496:_yyerror(c,__str51|0);HEAP32[s>>2]=0;b=535;break;case 497:HEAP16[s>>1]=0;b=535;break;case 498:_local_add_f(c,
HEAP16[(m|0)>>1]);HEAP16[s>>1]=HEAP16[(m|0)>>1];b=535;break;case 499:var Oj=_new_arg(c,HEAP16[(m|0)>>1]);HEAP32[s>>2]=Oj;b=535;break;case 500:var Pj=_new_masgn(c,HEAP32[(m-4|0)>>2],0);HEAP32[s>>2]=Pj;b=535;break;case 501:var Qj=_list1_gen(c,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Qj;b=535;break;case 502:var rk=c,sk=HEAP32[(m-8|0)>>2],Rj=_list1_gen(c,HEAP32[(m|0)>>2]),Sj=_append_gen(rk,sk,Rj);HEAP32[s>>2]=Sj;b=535;break;case 503:_local_add_f(c,HEAP16[(m-8|0)>>1]);var tk=_cons_gen(c,HEAP16[(m-8|0)>>1]<<16>>
16,HEAP32[(m|0)>>2]);HEAP32[s>>2]=tk;b=535;break;case 504:_local_add_f(c,HEAP16[(m-8|0)>>1]);var uk=_cons_gen(c,HEAP16[(m-8|0)>>1]<<16>>16,HEAP32[(m|0)>>2]);HEAP32[s>>2]=uk;b=535;break;case 505:var Tj=_list1_gen(c,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Tj;b=535;break;case 506:var Uj=c,Af=HEAP32[(m-8|0)>>2],wk=_list1_gen(c,HEAP32[(m|0)>>2]),xk=_append_gen(Uj,Af,wk);HEAP32[s>>2]=xk;b=535;break;case 507:var yk=_list1_gen(c,HEAP32[(m|0)>>2]);HEAP32[s>>2]=yk;b=535;break;case 508:var zk=c,Ak=HEAP32[(m-8|0)>>2],
Bk=_list1_gen(c,HEAP32[(m|0)>>2]),Ck=_append_gen(zk,Ak,Bk);HEAP32[s>>2]=Ck;b=535;break;case 509:_local_add_f(c,HEAP16[(m|0)>>1]);HEAP16[s>>1]=HEAP16[(m|0)>>1];b=535;break;case 510:_local_add_f(c,0);HEAP16[s>>1]=-1;b=535;break;case 511:_local_add_f(c,HEAP16[(m|0)>>1]);HEAP16[s>>1]=HEAP16[(m|0)>>1];b=535;break;case 512:HEAP16[s>>1]=HEAP16[(m|0)>>1];b=535;break;case 513:_local_add_f(c,0);HEAP16[s>>1]=0;b=535;break;case 514:HEAP32[s>>2]=HEAP32[(m|0)>>2];b=0!=(HEAP32[s>>2]|0)?516:515;break;case 515:var Dk=
_new_nil(c);HEAP32[s>>2]=Dk;b=516;break;case 516:b=535;break;case 517:HEAP32[(c+36|0)>>2]=0;b=535;break;case 518:b=0==(HEAP32[(m-4|0)>>2]|0)?519:520;break;case 519:_yyerror(c,__str52|0);b=524;break;case 520:var uh=HEAP32[(HEAP32[(m-4|0)>>2]|0)>>2];b=55==(uh|0)||56==(uh|0)||57==(uh|0)||47==(uh|0)||51==(uh|0)||34==(uh|0)?521:522;break;case 521:_yyerror(c,__str5372|0);b=522;break;case 522:b=523;break;case 523:b=524;break;case 524:HEAP32[s>>2]=HEAP32[(m-4|0)>>2];b=535;break;case 525:HEAP32[s>>2]=HEAP32[(m-
4|0)>>2];b=535;break;case 526:var Ek=_list1_gen(c,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Ek;b=535;break;case 527:var Fk=c,Gk=HEAP32[(m-8|0)>>2],Hk=_list1_gen(c,HEAP32[(m|0)>>2]),Ik=_append_gen(Fk,Gk,Hk);HEAP32[s>>2]=Ik;b=535;break;case 528:var Jk=_cons_gen(c,HEAP32[(m-8|0)>>2],HEAP32[(m|0)>>2]);HEAP32[s>>2]=Jk;b=535;break;case 529:var Kk=c,Lk=_new_sym(c,HEAP16[(m-4|0)>>1]),Mk=_cons_gen(Kk,Lk,HEAP32[(m|0)>>2]);HEAP32[s>>2]=Mk;b=535;break;case 530:j=0;b=535;break;case 531:var vk=c+28|0;HEAP32[vk>>2]=HEAP32[vk>>
2]+1|0;HEAP32[(c+32|0)>>2]=0;b=535;break;case 532:j=0;b=535;break;case 533:HEAP32[s>>2]=0;b=535;break;case 534:b=535;break;case 535:b=536;break;case 536:b=0!=(HEAP32[_yydebug>>2]|0)?537:538;break;case 537:_fprintf(HEAP32[_stderr>>2],__str558|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=__str54|0,tempInt));_yy_symbol_print(HEAP32[_stderr>>2],HEAP16[(_yyr1+(h<<1)|0)>>1]&65535,s,c);_fprintf(HEAP32[_stderr>>2],__str760|0,(tempInt=STACKTOP,
STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));b=538;break;case 538:b=539;break;case 539:m=m+((-y|0)<<2)|0;q=q+((-y|0)<<1)|0;y=0;b=540;break;case 540:b=0!=(HEAP32[_yydebug>>2]|0)?541:542;break;case 541:_yy_stack_print(p,q);b=542;break;case 542:b=543;break;case 543:var Nk=m+4|0,Ok=m=Nk,Pk=s;assert(!0,"memcpy given 4 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Ok>>2]=HEAP32[Pk>>2];h=HEAP16[(_yyr1+
(h<<1)|0)>>1]&65535;g=(HEAP16[(_yypgoto+((h-144|0)<<1)|0)>>1]<<16>>16)+(HEAP16[q>>1]<<16>>16)|0;b=0<=(g|0)?544:547;break;case 544:b=10263>=(g|0)?545:547;break;case 545:b=(HEAP16[(_yycheck+(g<<1)|0)>>1]<<16>>16|0)==(HEAP16[q>>1]<<16>>16|0)?546:547;break;case 546:g=HEAP16[(_yytable+(g<<1)|0)>>1]<<16>>16;b=548;break;case 547:g=HEAP16[(_yydefgoto+((h-144|0)<<1)|0)>>1]<<16>>16;b=548;break;case 548:b=7;break;case 549:b=0!=(j|0)?568:550;break;case 550:C=_yysyntax_error(0,g,a);b=r>>>0<C>>>0?551:561;break;
case 551:b=4294967295>r>>>0?552:561;break;case 552:H=C<<1|0;b=C>>>0<=H>>>0?553:554;break;case 553:b=4294967295>=H>>>0?555:554;break;case 554:H=-1;b=555;break;case 555:b=(n|0)!=(k|0)?556:557;break;case 556:_mrb_free(HEAP32[(c|0)>>2],n);b=557;break;case 557:n=_mrb_malloc(HEAP32[(c|0)>>2],H);b=0!=(n|0)?558:559;break;case 558:r=H;b=560;break;case 559:n=k|0;r=128;b=560;break;case 560:b=561;break;case 561:b=0<C>>>0?562:564;break;case 562:b=C>>>0<=r>>>0?563:564;break;case 563:_yysyntax_error(n,g,a);_yyerror(c,
n);b=567;break;case 564:_yyerror(c,__str55|0);b=0!=(C|0)?565:566;break;case 565:b=606;break;case 566:b=567;break;case 567:b=568;break;case 568:b=3==(j|0)?569:575;break;case 569:b=0>=(a|0)?570:573;break;case 570:b=0==(a|0)?571:572;break;case 571:b=605;break;case 572:b=574;break;case 573:_yydestruct(__str56|0,l,d,c);a=-2;b=574;break;case 574:b=575;break;case 575:b=581;break;case 576:m=m+((-y|0)<<2)|0;q=q+((-y|0)<<1)|0;y=0;b=577;break;case 577:b=0!=(HEAP32[_yydebug>>2]|0)?578:579;break;case 578:_yy_stack_print(p,
q);b=579;break;case 579:b=580;break;case 580:g=HEAP16[q>>1]<<16>>16;b=581;break;case 581:j=3;b=582;break;case 582:h=HEAP16[(_yypact+(g<<1)|0)>>1]<<16>>16;b=-728!=(h|0)?583:590;break;case 583:h=h+1|0;b=0<=(h|0)?584:589;break;case 584:b=10263>=(h|0)?585:589;break;case 585:b=1==(HEAP16[(_yycheck+(h<<1)|0)>>1]<<16>>16|0)?586:589;break;case 586:h=HEAP16[(_yytable+(h<<1)|0)>>1]<<16>>16;b=0<(h|0)?587:588;break;case 587:b=597;break;case 588:b=589;break;case 589:b=590;break;case 590:b=(q|0)==(p|0)?591:592;
break;case 591:b=605;break;case 592:_yydestruct(__str57|0,HEAP16[(_yystos+(g<<1)|0)>>1]&65535,m,c);m=m-4|0;q=q-2|0;g=HEAP16[q>>1]<<16>>16;b=593;break;case 593:b=0!=(HEAP32[_yydebug>>2]|0)?594:595;break;case 594:_yy_stack_print(p,q);b=595;break;case 595:b=596;break;case 596:b=582;break;case 597:b=3==(h|0)?598:599;break;case 598:b=604;break;case 599:var Qk=m+4|0,Rk=m=Qk,Sk=d;assert(!0,"memcpy given 4 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Rk>>2]=HEAP32[Sk>>2];b=600;break;
case 600:b=0!=(HEAP32[_yydebug>>2]|0)?601:602;break;case 601:_fprintf(HEAP32[_stderr>>2],__str558|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=__str861|0,tempInt));_yy_symbol_print(HEAP32[_stderr>>2],HEAP16[(_yystos+(h<<1)|0)>>1]&65535,m,c);_fprintf(HEAP32[_stderr>>2],__str760|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));b=602;break;case 602:b=
603;break;case 603:g=h;b=7;break;case 604:i=0;b=607;break;case 605:i=1;b=607;break;case 606:_yyerror(c,__str58|0);i=2;b=607;break;case 607:b=0!=(a|0)?608:610;break;case 608:b=-2!=(a|0)?609:610;break;case 609:_yydestruct(__str59|0,l,d,c);b=610;break;case 610:m=m+((-y|0)<<2)|0;q=q+((-y|0)<<1)|0;b=611;break;case 611:b=0!=(HEAP32[_yydebug>>2]|0)?612:613;break;case 612:_yy_stack_print(p,q);b=613;break;case 613:b=614;break;case 614:b=615;break;case 615:b=(q|0)!=(p|0)?616:617;break;case 616:_yydestruct(__str60|
0,HEAP16[(_yystos+(HEAP16[q>>1]<<16>>16<<1)|0)>>1]&65535,m,c);m=m-4|0;q=q-2|0;b=615;break;case 617:b=(p|0)!=(t|0)?618:619;break;case 618:_mrb_free(HEAP32[(c|0)>>2],p);b=619;break;case 619:b=(n|0)!=(k|0)?620:621;break;case 620:_mrb_free(HEAP32[(c|0)>>2],n);b=621;break;case 621:var Tk=i;STACKTOP=e;return Tk;default:assert(0,"bad label: "+b)}}_yyparse.X=1;function _cond(f){return f}
function _append_gen(f,e,b){for(f=2;;)switch(f){case 2:var c,a,d,g;a=e;d=b;g=a;f=0!=(a|0)?4:3;break;case 3:c=d;f=10;break;case 4:f=5;break;case 5:f=0!=(HEAP32[(g+4|0)>>2]|0)?6:7;break;case 6:g=HEAP32[(g+4|0)>>2];f=5;break;case 7:f=0!=(d|0)?8:9;break;case 8:HEAP32[(g+4|0)>>2]=d;f=9;break;case 9:c=a;f=10;break;case 10:return c;default:assert(0,"bad label: "+f)}}function _local_resume(f,e){HEAP32[(f+72|0)>>2]=e}function _local_unnest(f){HEAP32[(f+72|0)>>2]=HEAP32[(HEAP32[(f+72|0)>>2]+4|0)>>2]}
function _yylex(f,e){HEAP32[(e+1112|0)>>2]=f;return _parser_yylex(e)}
function _yy_symbol_print(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d;for(d=2;;)switch(d){case 2:var g,h,i,j;g=f;h=e;i=b;j=c;d=144>(h|0)?3:4;break;case 3:d=HEAP32[(_yytname+(h<<2)|0)>>2];_fprintf(g,__str531|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=d,tempInt));d=5;break;case 4:d=HEAP32[(_yytname+(h<<2)|0)>>2];_fprintf(g,__str532|0,(tempInt=STACKTOP,STACKTOP+=
4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=d,tempInt));d=5;break;case 5:_yy_symbol_value_print(g,h,i,j);_fprintf(g,__str533|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));STACKTOP=a;return;default:assert(0,"bad label: "+d)}}
function _yy_reduce_print(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j;d=f;g=e;h=b;i=HEAP8[_yyr2+g|0]&255;j=g-1|0;a=HEAP16[(_yyrline+(g<<1)|0)>>1]&65535;_fprintf(HEAP32[_stderr>>2],__str529|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=j,HEAP32[tempInt+4>>2]=a,tempInt));j=0;a=3;break;case 3:a=(j|0)<(i|0)?4:6;break;case 4:a=j+
1|0;_fprintf(HEAP32[_stderr>>2],__str530|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));_yy_symbol_print(HEAP32[_stderr>>2],HEAP16[(_yyrhs+(((HEAP16[(_yyprhs+(g<<1)|0)>>1]&65535)+j|0)<<1)|0)>>1]<<16>>16,d+(((j+1|0)-i|0)<<2)|0,h);_fprintf(HEAP32[_stderr>>2],__str760|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=5;break;case 5:j=
j+1|0;a=3;break;case 6:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_yy_reduce_print.X=1;function _cons_gen(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h;a=f;d=e;g=b;c=0!=(HEAP32[(a+8|0)>>2]|0)?3:4;break;case 3:h=HEAP32[(a+8|0)>>2];HEAP32[(a+8|0)>>2]=HEAP32[(HEAP32[(a+8|0)>>2]+4|0)>>2];c=5;break;case 4:h=_parser_palloc(a,12);c=5;break;case 5:return HEAP32[(h|0)>>2]=d,HEAP32[(h+4|0)>>2]=g,HEAP16[(h+8|0)>>1]=HEAP32[(a+28|0)>>2]&65535,h;default:assert(0,"bad label: "+c)}}
function _new_scope(f,e){var b=_cons_gen(f,HEAP32[(HEAP32[(f+72|0)>>2]|0)>>2],e);return _cons_gen(f,3,b)}function _new_begin(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;a=f;d=e;b=0!=(d|0)?3:4;break;case 3:c=_list2_gen(a,17,d);b=5;break;case 4:c=_cons_gen(a,17,0);b=5;break;case 5:return c;default:assert(0,"bad label: "+b)}}function _list1_gen(f,e){return _cons_gen(f,e,0)}function _local_switch(f){var e;e=HEAP32[(f+72|0)>>2];var b=_cons_gen(f,0,0);HEAP32[(f+72|0)>>2]=b;return e}
function _yyerror(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d,g;a=f;d=e;c=0!=(HEAP32[(a+1128|0)>>2]|0)?7:3;break;case 3:c=0!=(HEAP32[(a+24|0)>>2]|0)?4:5;break;case 4:c=HEAP32[(a+24|0)>>2];var h=HEAP32[(a+28|0)>>2],i=HEAP32[(a+32|0)>>2];g=d;_fprintf(HEAP32[_stderr>>2],__str233|0,(tempInt=STACKTOP,STACKTOP+=16,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+
4>>2]=h,HEAP32[tempInt+8>>2]=i,HEAP32[tempInt+12>>2]=g,tempInt));c=6;break;case 5:c=HEAP32[(a+28|0)>>2];h=HEAP32[(a+32|0)>>2];i=d;_fprintf(HEAP32[_stderr>>2],__str234|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=h,HEAP32[tempInt+8>>2]=i,tempInt));c=6;break;case 6:c=10;break;case 7:c=10>HEAP32[(a+1116|0)>>2]>>>0?8:9;break;case 8:g=_strlen(d);h=c=_parser_palloc(a,g+1|0);i=d;g=g+1|0;assert(0===g%1,"memcpy given "+
g+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(h,i,g,1);HEAP32[(((a+1132|0)+12*HEAP32[(a+1116|0)>>2]|0)+8|0)>>2]=c;HEAP32[((a+1132|0)+12*HEAP32[(a+1116|0)>>2]|0)>>2]=HEAP32[(a+28|0)>>2];HEAP32[(((a+1132|0)+12*HEAP32[(a+1116|0)>>2]|0)+4|0)>>2]=HEAP32[(a+32|0)>>2];c=9;break;case 9:c=10;break;case 10:a=a+1116|0;HEAP32[a>>2]=HEAP32[a>>2]+1|0;STACKTOP=b;return;default:assert(0,"bad label: "+c)}}_yyerror.X=1;function _new_rescue(f,e,b,c){return _list4_gen(f,18,e,b,c)}
function _yywarn(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d,g;a=f;d=e;c=0!=(HEAP32[(a+1128|0)>>2]|0)?7:3;break;case 3:c=0!=(HEAP32[(a+24|0)>>2]|0)?4:5;break;case 4:c=HEAP32[(a+24|0)>>2];var h=HEAP32[(a+28|0)>>2],i=HEAP32[(a+32|0)>>2];g=d;_fprintf(HEAP32[_stderr>>2],__str233|0,(tempInt=STACKTOP,STACKTOP+=16,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+
4>>2]=h,HEAP32[tempInt+8>>2]=i,HEAP32[tempInt+12>>2]=g,tempInt));c=6;break;case 5:c=HEAP32[(a+28|0)>>2];h=HEAP32[(a+32|0)>>2];i=d;_fprintf(HEAP32[_stderr>>2],__str234|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=h,HEAP32[tempInt+8>>2]=i,tempInt));c=6;break;case 6:c=10;break;case 7:c=10>HEAP32[(a+1116|0)>>2]>>>0?8:9;break;case 8:g=_strlen(d);h=c=_parser_palloc(a,g+1|0);i=d;g=g+1|0;assert(0===g%1,"memcpy given "+
g+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(h,i,g,1);HEAP32[(((a+1252|0)+12*HEAP32[(a+1120|0)>>2]|0)+8|0)>>2]=c;HEAP32[((a+1252|0)+12*HEAP32[(a+1120|0)>>2]|0)>>2]=HEAP32[(a+28|0)>>2];HEAP32[(((a+1252|0)+12*HEAP32[(a+1120|0)>>2]|0)+4|0)>>2]=HEAP32[(a+32|0)>>2];c=9;break;case 9:c=10;break;case 10:a=a+1120|0;HEAP32[a>>2]=HEAP32[a>>2]+1|0;STACKTOP=b;return;default:assert(0,"bad label: "+c)}}_yywarn.X=1;
function _new_ensure(f,e,b){b=_cons_gen(f,0,b);e=_cons_gen(f,e,b);return _cons_gen(f,19,e)}function _new_nil(f){return _list1_gen(f,83)}function _new_alias(f,e,b){e=_cons_gen(f,e<<16>>16,b<<16>>16);return _cons_gen(f,69,e)}function _new_if(f,e,b,c){return _list4_gen(f,5,e,b,c)}function _new_unless(f,e,b,c){return _list4_gen(f,5,e,c,b)}function _new_while(f,e,b){e=_cons_gen(f,e,b);return _cons_gen(f,9,e)}function _new_until(f,e,b){e=_cons_gen(f,e,b);return _cons_gen(f,10,e)}
function _list3_gen(f,e,b,c){c=_cons_gen(f,c,0);b=_cons_gen(f,b,c);return _cons_gen(f,e,b)}function _new_postexe(f,e){return _cons_gen(f,88,e)}function _new_masgn(f,e,b){e=_cons_gen(f,e,b);return _cons_gen(f,23,e)}function _new_op_asgn(f,e,b,c){return _list4_gen(f,28,e,b<<16>>16,c)}function _new_call(f,e,b,c){return _list4_gen(f,29,e,b<<16>>16,c)}function _intern_gen(f,e){return _mrb_intern(HEAP32[(f|0)>>2],e)}
function _backref_error(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d,g;a=f;d=e;g=HEAP32[(d|0)>>2];c=45==(g|0)?3:4;break;case 3:_yyerror_i(a,__str230|0,HEAP32[(d+4|0)>>2]);c=8;break;case 4:c=46==(g|0)?5:6;break;case 5:_yyerror_i(a,__str231|0,HEAP32[(d+4|0)>>2]);c=7;break;case 6:c=g;_mrb_bug(__str232|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>
2]=c,tempInt));c=7;break;case 7:c=8;break;case 8:STACKTOP=b;return;default:assert(0,"bad label: "+c)}}function _new_asgn(f,e,b){e=_cons_gen(f,e,b);return _cons_gen(f,24,e)}function _new_array(f,e){return _cons_gen(f,34,e)}function _new_and(f,e,b){e=_cons_gen(f,e,b);return _cons_gen(f,20,e)}function _new_or(f,e,b){e=_cons_gen(f,e,b);return _cons_gen(f,21,e)}function _call_uni_op(f,e,b){b=_intern_gen(f,b);return _new_call(f,e,b,0)}
function _local_nest(f){var e=_cons_gen(f,0,HEAP32[(f+72|0)>>2]);HEAP32[(f+72|0)>>2]=e}function _new_block(f,e,b){return _list4_gen(f,4,HEAP32[(HEAP32[(f+72|0)>>2]|0)>>2],e,b)}function _new_fcall(f,e,b){var c=_new_self(f);return _list4_gen(f,30,c,e<<16>>16,b)}function _new_bv(){}
function _args_with_block(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g;a=f;d=e;g=b;c=0!=(g|0)?3:6;break;case 3:c=0!=(HEAP32[(d+4|0)>>2]|0)?4:5;break;case 4:_yyerror(a,__str528|0);c=5;break;case 5:HEAP32[(d+4|0)>>2]=g;c=6;break;case 6:return;default:assert(0,"bad label: "+c)}}function _new_super(f,e){return _cons_gen(f,32,e)}
function _new_yield(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;a=f;d=e;b=0!=(d|0)?3:6;break;case 3:b=0!=(HEAP32[(d+4|0)>>2]|0)?4:5;break;case 4:_yyerror(a,__str528|0);b=5;break;case 5:c=_cons_gen(a,38,HEAP32[(d|0)>>2]);b=7;break;case 6:c=_cons_gen(a,38,0);b=7;break;case 7:return c;default:assert(0,"bad label: "+b)}}function _new_return(f,e){return _cons_gen(f,37,e)}
function _ret_args(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;a=f;d=e;b=0!=(HEAP32[(d+4|0)>>2]|0)?3:4;break;case 3:_yyerror(a,__str527|0);b=4;break;case 4:b=0!=(HEAP32[(HEAP32[(d|0)>>2]+4|0)>>2]|0)?6:5;break;case 5:c=HEAP32[(HEAP32[(d|0)>>2]|0)>>2];b=7;break;case 6:c=_new_array(a,HEAP32[(d|0)>>2]);b=7;break;case 7:return c;default:assert(0,"bad label: "+b)}}function _new_break(f,e){return _cons_gen(f,13,e)}function _new_next(f,e){return _cons_gen(f,14,e)}
function _list2_gen(f,e,b){b=_cons_gen(f,b,0);return _cons_gen(f,e,b)}function _assignable(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;b=39==(HEAP32[(a|0)>>2]|0)?3:4;break;case 3:_local_add(c,HEAP32[(a+4|0)>>2]&65535);b=4;break;case 4:return;default:assert(0,"bad label: "+b)}}function _new_colon2(f,e,b){e=_cons_gen(f,e,b<<16>>16);return _cons_gen(f,74,e)}function _new_colon3(f,e){return _cons_gen(f,75,e<<16>>16)}function _new_sym(f,e){return _cons_gen(f,54,e<<16>>16)}
function _new_undef(f,e){return _cons_gen(f,70,e<<16>>16)}function _new_dot2(f,e,b){e=_cons_gen(f,e,b);return _cons_gen(f,77,e)}function _new_dot3(f,e,b){e=_cons_gen(f,e,b);return _cons_gen(f,78,e)}function _call_bin_op(f,e,b,c){b=_intern_gen(f,b);c=_list1_gen(f,c);c=_list1_gen(f,c);return _new_call(f,e,b,c)}function _match_op(f,e,b){e=_cons_gen(f,e,b);return _cons_gen(f,47,e)}function _new_hash(f,e){return _cons_gen(f,36,e)}function _new_block_arg(f,e){return _cons_gen(f,66,e)}
function _new_splat(f,e){return _cons_gen(f,63,e)}
function _call_with_block(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h;a=f;d=e;g=b;c=32==(HEAP32[(d|0)>>2]|0)?4:3;break;case 3:c=33==(HEAP32[(d|0)>>2]|0)?4:8;break;case 4:c=0!=(HEAP32[(d+4|0)>>2]|0)?6:5;break;case 5:c=_cons_gen(a,0,g);HEAP32[(d+4|0)>>2]=c;c=7;break;case 6:_args_with_block(a,HEAP32[(d+4|0)>>2],g);c=7;break;case 7:c=12;break;case 8:h=HEAP32[(HEAP32[(HEAP32[(d+4|0)>>2]+4|0)>>2]+4|0)>>2];c=0!=(HEAP32[(h|0)>>2]|0)?10:9;break;case 9:c=_cons_gen(a,0,g);HEAP32[(h|0)>>2]=c;c=11;break;
case 10:_args_with_block(a,HEAP32[(h|0)>>2],g);c=11;break;case 11:c=12;break;case 12:return;default:assert(0,"bad label: "+c)}}_call_with_block.X=1;function _new_lambda(f,e,b){return _list4_gen(f,53,HEAP32[(HEAP32[(f+72|0)>>2]|0)>>2],e,b)}
function _new_case(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g;c=f;a=e;d=b;g=a=_list2_gen(c,6,a);c=3;break;case 3:c=0!=(HEAP32[(g+4|0)>>2]|0)?4:5;break;case 4:g=HEAP32[(g+4|0)>>2];c=3;break;case 5:return HEAP32[(g+4|0)>>2]=d,a;default:assert(0,"bad label: "+c)}}function _new_for(f,e,b,c){return _list4_gen(f,12,e,b,c)}function _new_class(f,e,b,c){c=_cons_gen(f,HEAP32[(HEAP32[(f+72|0)>>2]|0)>>2],c);return _list4_gen(f,71,e,b,c)}
function _new_sclass(f,e,b){b=_cons_gen(f,HEAP32[(HEAP32[(f+72|0)>>2]|0)>>2],b);return _list3_gen(f,73,e,b)}function _new_module(f,e,b){b=_cons_gen(f,HEAP32[(HEAP32[(f+72|0)>>2]|0)>>2],b);return _list3_gen(f,72,e,b)}function _new_def(f,e,b,c){return _list5_gen(f,67,e<<16>>16,HEAP32[(HEAP32[(f+72|0)>>2]|0)>>2],b,c)}function _new_sdef(f,e,b,c,a){return _list6_gen(f,68,e,b<<16>>16,HEAP32[(HEAP32[(f+72|0)>>2]|0)>>2],c,a)}function _new_redo(f){return _list1_gen(f,15)}
function _new_retry(f){return _list1_gen(f,16)}function _new_arg(f,e){return _cons_gen(f,60,e<<16>>16)}function _new_args(f,e,b,c,a,d){a=_cons_gen(f,a,d<<16>>16);a=_cons_gen(f,c<<16>>16,a);a=_cons_gen(f,b,a);return _cons_gen(f,e,a)}function _local_add_f(f,e){var b=HEAP32[(HEAP32[(f+72|0)>>2]|0)>>2],c=_list1_gen(f,e<<16>>16),b=_append_gen(f,b,c);HEAP32[(HEAP32[(f+72|0)>>2]|0)>>2]=b}function _new_zsuper(f){return _list1_gen(f,33)}function _new_dstr(f,e){return _cons_gen(f,56,e)}
function _new_dsym(f,e){var b=_new_dstr(f,e);return _cons_gen(f,94,b)}function _new_strsym(f,e){return _mrb_intern2(HEAP32[(f|0)>>2],HEAP32[(HEAP32[(e+4|0)>>2]|0)>>2],HEAP32[(HEAP32[(e+4|0)>>2]+4|0)>>2])}function _negate_lit(f,e){return _cons_gen(f,52,e)}function _new_lvar(f,e){return _cons_gen(f,39,e<<16>>16)}function _new_ivar(f,e){return _cons_gen(f,42,e<<16>>16)}function _new_gvar(f,e){return _cons_gen(f,41,e<<16>>16)}function _new_cvar(f,e){return _cons_gen(f,44,e<<16>>16)}
function _new_const(f,e){return _cons_gen(f,43,e<<16>>16)}function _var_reference(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;a=f;d=e;b=39==(HEAP32[(d|0)>>2]|0)?3:6;break;case 3:b=0!=(_local_var_p(a,HEAP32[(d+4|0)>>2]&65535)|0)?5:4;break;case 4:b=_new_fcall(a,HEAP32[(d+4|0)>>2]&65535,0);_cons_free_gen(a,d);c=b;b=7;break;case 5:b=6;break;case 6:c=d;b=7;break;case 7:return c;default:assert(0,"bad label: "+b)}}function _new_self(f){return _list1_gen(f,82)}
function _new_true(f){return _list1_gen(f,84)}function _new_false(f){return _list1_gen(f,85)}function _new_str(f,e,b){e=_parser_strndup(f,e,b);b=_cons_gen(f,e,b);return _cons_gen(f,55,b)}function _new_int(f,e,b){e=_parser_strdup(f,e);return _list3_gen(f,50,e,b)}
function _yy_stack_print(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d;a=f;d=e;_fprintf(HEAP32[_stderr>>2],__str525|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));c=3;break;case 3:c=a>>>0<=d>>>0?4:6;break;case 4:c=HEAP16[a>>1]<<16>>16;_fprintf(HEAP32[_stderr>>2],__str526|0,(tempInt=STACKTOP,STACKTOP+=
4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));c=5;break;case 5:a=a+2|0;c=3;break;case 6:_fprintf(HEAP32[_stderr>>2],__str760|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _yysyntax_error(f,e,b){var c=STACKTOP;STACKTOP+=80;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j,l,k,n,r=c,t,p,q,v=c+20,w,m,x,s,y,B,A;g=f;h=e;i=b;h=HEAP16[(_yypact+(h<<1)|0)>>1]<<16>>16;a=-728<(h|0)?3:4;break;case 3:a=10263>=(h|0)?5:4;break;case 4:d=0;a=36;break;case 5:a=373>=i>>>0?6:7;break;case 6:var G=HEAP8[_yytranslate+i|0]&255;a=8;break;case 7:G=2;a=8;break;case 8:j=G;k=l=_yytnamerr(0,HEAP32[(_yytname+
(j<<2)|0)>>2]);n=0;w=_yysyntax_error_yyexpecting|0;a=0>(h|0)?9:10;break;case 9:var z=-h|0;a=11;break;case 10:z=0;a=11;break;case 11:m=z;x=(10263-h|0)+1|0;a=144>(x|0)?12:13;break;case 12:var E=x;a=14;break;case 13:E=144;a=14;break;case 14:s=E;y=1;HEAP32[(r|0)>>2]=HEAP32[(_yytname+(j<<2)|0)>>2];p=_yystpcpy(v|0,_yysyntax_error_yyunexpected|0);t=m;a=15;break;case 15:a=(t|0)<(s|0)?16:23;break;case 16:a=(HEAP16[(_yycheck+((t+h|0)<<1)|0)>>1]<<16>>16|0)==(t|0)?17:21;break;case 17:a=1!=(t|0)?18:21;break;case 18:a=
5==(y|0)?19:20;break;case 19:y=1;k=l;HEAP8[v+27|0]=0;a=23;break;case 20:a=HEAP32[(_yytname+(t<<2)|0)>>2];var M=y;y=M+1|0;HEAP32[(r+(M<<2)|0)>>2]=a;a=k;M=_yytnamerr(0,HEAP32[(_yytname+(t<<2)|0)>>2]);a=a+M|0;n|=a>>>0<k>>>0&1;k=a;p=_yystpcpy(p,w);w=_yysyntax_error_yyor|0;a=21;break;case 21:a=22;break;case 22:t=t+1|0;a=15;break;case 23:q=v|0;a=k;M=_yystrlen(q);a=a+M|0;n|=a>>>0<k>>>0&1;k=a;a=0!=(n|0)?24:25;break;case 24:d=-1;a=36;break;case 25:a=0!=(g|0)?26:35;break;case 26:B=g;A=0;a=27;break;case 27:a=
HEAP8[q];HEAP8[B]=a;a=0!=(a<<24>>24|0)?28:34;break;case 28:a=37==(HEAP8[B]<<24>>24|0)?29:32;break;case 29:a=115==(HEAP8[q+1|0]<<24>>24|0)?30:32;break;case 30:a=(A|0)<(y|0)?31:32;break;case 31:a=B;M=A;A=M+1|0;a=_yytnamerr(a,HEAP32[(r+(M<<2)|0)>>2]);B=B+a|0;q=q+2|0;a=33;break;case 32:B=B+1|0;q=q+1|0;a=33;break;case 33:a=27;break;case 34:a=35;break;case 35:d=k;a=36;break;case 36:return f=d,STACKTOP=c,f;default:assert(0,"bad label: "+a)}}_yysyntax_error.X=1;
function _yydestruct(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d;for(d=2;;)switch(d){case 2:var g,h,i,j;g=f;h=e;i=b;j=c;d=0!=(g|0)?4:3;break;case 3:g=__str23579|0;d=4;break;case 4:d=5;break;case 5:d=0!=(HEAP32[_yydebug>>2]|0)?6:7;break;case 6:d=g;_fprintf(HEAP32[_stderr>>2],__str558|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=d,tempInt));_yy_symbol_print(HEAP32[_stderr>>
2],h,i,j);_fprintf(HEAP32[_stderr>>2],__str760|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));d=7;break;case 7:d=8;break;case 8:d=9;break;case 9:d=10;break;case 10:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}
function _mrb_parser_parse(f,e){var b;b=2;for(var c={},a={2:function(a){b=10;i=a},dummy:0};;)try{switch(b){case 2:var d,g;d=f;g=e;var h=d+1372|0,i=(tempInt=setjmpId++,c[tempInt]=1,setjmpLabels[tempInt]=b,HEAP32[h>>2]=tempInt,0);b=10;break;case 10:b=0!=(i|0)?3:4;break;case 3:_yyerror(d,__str61|0);h=d+1116|0;HEAP32[h>>2]=HEAP32[h>>2]+1|0;HEAP32[(d+1124|0)>>2]=0;b=9;break;case 4:HEAP32[(d+68|0)>>2]=1;HEAP32[(d+64|0)>>2]=0;HEAP32[(d+60|0)>>2]=0;HEAP32[(d+1120|0)>>2]=0;HEAP32[(d+1116|0)>>2]=0;HEAP32[(d+
40|0)>>2]=0;_parser_init_cxt(d,g);_yyparse(d);b=0!=(HEAP32[(d+1124|0)>>2]|0)?6:5;break;case 5:var j=_new_nil(d);HEAP32[(d+1124|0)>>2]=j;b=6;break;case 6:_parser_update_cxt(d,g);b=0!=(g|0)?7:9;break;case 7:b=0!=((HEAP32[(g+12|0)>>2]>>>17&1)<<31>>31|0)?8:9;break;case 8:_parser_dump(HEAP32[(d|0)>>2],HEAP32[(d+1124|0)>>2],0);b=9;break;case 9:return;default:assert(0,"bad label: "+b)}}catch(l){if(!l.longjmp||!(l.id in c))throw l;a[setjmpLabels[l.id]](l.value)}}_mrb_parser_parse.X=1;
function _parser_init_cxt(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;b=0!=(a|0)?4:3;break;case 3:b=15;break;case 4:b=0!=HEAP16[(a+12|0)>>1]<<16>>16?5:6;break;case 5:HEAP32[(c+28|0)>>2]=HEAP16[(a+12|0)>>1]<<16>>16;b=6;break;case 6:b=0!=(HEAP32[(a+8|0)>>2]|0)?7:8;break;case 7:HEAP32[(c+24|0)>>2]=HEAP32[(a+8|0)>>2];b=8;break;case 8:b=0!=(HEAP32[(a|0)>>2]|0)?9:14;break;case 9:b=_cons_gen(c,0,0);HEAP32[(c+72|0)>>2]=b;d=0;b=10;break;case 10:b=(d|0)<(HEAP32[(a+4|0)>>2]|0)?11:13;break;case 11:_local_add_f(c,
HEAP16[(HEAP32[(a|0)>>2]+(d<<1)|0)>>1]);b=12;break;case 12:d=d+1|0;b=10;break;case 13:b=14;break;case 14:HEAP32[(c+1128|0)>>2]=(HEAP32[(a+12|0)>>2]>>>16&1)<<31>>31;b=15;break;case 15:return;default:assert(0,"bad label: "+b)}}_parser_init_cxt.X=1;
function _parser_update_cxt(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h;c=f;a=e;h=0;b=0!=(a|0)?4:3;break;case 3:b=13;break;case 4:b=3!=(HEAP32[(HEAP32[(c+1124|0)>>2]|0)>>2]|0)?5:6;break;case 5:b=13;break;case 6:d=g=HEAP32[(HEAP32[(HEAP32[(c+1124|0)>>2]+4|0)>>2]|0)>>2];b=7;break;case 7:b=0!=(d|0)?8:9;break;case 8:h=h+1|0;d=HEAP32[(d+4|0)>>2];b=7;break;case 9:d=_mrb_realloc(HEAP32[(c|0)>>2],HEAP32[(a|0)>>2],h<<1|0);HEAP32[(a|0)>>2]=d;HEAP32[(a+4|0)>>2]=h;h=0;d=g;b=10;break;case 10:b=0!=(d|0)?
11:13;break;case 11:HEAP16[(HEAP32[(a|0)>>2]+(h<<1)|0)>>1]=HEAP32[(d|0)>>2]&65535;b=12;break;case 12:h=h+1|0;d=HEAP32[(d+4|0)>>2];b=10;break;case 13:return;default:assert(0,"bad label: "+b)}}_parser_update_cxt.X=1;
function _parser_dump(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j,l,k,n,r,t,p,q,v,w,m,x;d=f;g=e;h=b;a=0!=(g|0)?4:3;break;case 3:a=204;break;case 4:a=5;break;case 5:_dump_prefix(h);i=HEAP32[(g|0)>>2];g=HEAP32[(g+4|0)>>2];a=i;a=17==(a|0)?6:18==(a|0)?7:19==(a|0)?23:53==(a|0)?24:4==(a|0)?25:5==(a|0)?42:20==(a|0)?45:21==(a|0)?46:6==(a|0)?47:9==(a|0)?53:10==(a|0)?54:12==(a|0)?55:3==(a|0)?66:
30==(a|0)||29==(a|0)?78:77==(a|0)?83:78==(a|0)?84:74==(a|0)?85:75==(a|0)?86:34==(a|0)?87:36==(a|0)?88:63==(a|0)?92:24==(a|0)?93:23==(a|0)?94:28==(a|0)?108:32==(a|0)?109:33==(a|0)?114:37==(a|0)?115:38==(a|0)?116:13==(a|0)?117:14==(a|0)?118:15==(a|0)?119:16==(a|0)?120:39==(a|0)?121:41==(a|0)?122:42==(a|0)?123:44==(a|0)?124:43==(a|0)?125:46==(a|0)?126:45==(a|0)?127:60==(a|0)?128:66==(a|0)?129:50==(a|0)?130:51==(a|0)?131:52==(a|0)?132:55==(a|0)?133:56==(a|0)?134:54==(a|0)?135:82==(a|0)?136:83==(a|0)?
137:84==(a|0)?138:85==(a|0)?139:69==(a|0)?140:70==(a|0)?141:71==(a|0)?142:72==(a|0)?151:73==(a|0)?158:67==(a|0)?159:68==(a|0)?186:88==(a|0)?202:203;break;case 6:_printf(__str62|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_recur(d,g,h+1|0);a=204;break;case 7:_printf(__str63|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>
2]=0,tempInt));a=0!=(HEAP32[(g|0)>>2]|0)?8:9;break;case 8:_dump_prefix(h+1|0);_printf(__str64|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g|0)>>2],h+2|0);a=9;break;case 9:g=HEAP32[(g+4|0)>>2];a=0!=(HEAP32[(g|0)>>2]|0)?10:20;break;case 10:j=HEAP32[(g|0)>>2];_dump_prefix(h+1|0);_printf(__str65|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+
STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=11;break;case 11:a=0!=(j|0)?12:19;break;case 12:l=HEAP32[(j|0)>>2];a=0!=(HEAP32[(l|0)>>2]|0)?13:14;break;case 13:_dump_prefix(h+2|0);_printf(__str66|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_recur(d,HEAP32[(l|0)>>2],h+3|0);a=14;break;case 14:a=0!=(HEAP32[(HEAP32[(l+4|0)>>2]|0)>>2]|0)?15:16;break;case 15:_dump_prefix(h+2|0);_printf(__str67|
0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(HEAP32[(l+4|0)>>2]|0)>>2],h+3|0);a=16;break;case 16:a=0!=(HEAP32[(HEAP32[(HEAP32[(l+4|0)>>2]+4|0)>>2]|0)>>2]|0)?17:18;break;case 17:_dump_prefix(h+2|0);_printf(__str68|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(HEAP32[(HEAP32[(l+
4|0)>>2]+4|0)>>2]|0)>>2],h+3|0);a=18;break;case 18:j=HEAP32[(j+4|0)>>2];a=11;break;case 19:a=20;break;case 20:g=HEAP32[(g+4|0)>>2];a=0!=(HEAP32[(g|0)>>2]|0)?21:22;break;case 21:_dump_prefix(h+1|0);_printf(__str69|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g|0)>>2],h+2|0);a=22;break;case 22:a=204;break;case 23:_printf(__str70|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+
3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_prefix(h+1|0);_printf(__str64|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g|0)>>2],h+2|0);_dump_prefix(h+1|0);_printf(__str71|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,
HEAP32[(HEAP32[(g+4|0)>>2]+4|0)>>2],h+2|0);a=204;break;case 24:_printf(__str72|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=26;break;case 25:a=26;break;case 26:_printf(__str72|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));g=HEAP32[(g+4|0)>>2];a=0!=(HEAP32[(g|0)>>2]|0)?27:41;break;case 27:k=HEAP32[(g|
0)>>2];a=0!=(HEAP32[(k|0)>>2]|0)?28:29;break;case 28:_dump_prefix(h+1|0);_printf(__str73|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_recur(d,HEAP32[(k|0)>>2],h+2|0);a=29;break;case 29:k=HEAP32[(k+4|0)>>2];a=0!=(HEAP32[(k|0)>>2]|0)?30:34;break;case 30:_dump_prefix(h+1|0);_printf(__str74|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=0,tempInt));n=HEAP32[(k|0)>>2];a=31;break;case 31:a=0!=(n|0)?32:33;break;case 32:_dump_prefix(h+2|0);a=_mrb_sym2name(d,HEAP32[(HEAP32[(n|0)>>2]|0)>>2]&65535);_printf(__str75|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));_parser_dump(d,HEAP32[(HEAP32[(n|0)>>2]+4|0)>>2],0);n=HEAP32[(n+4|0)>>2];a=31;break;case 33:a=34;break;case 34:k=HEAP32[(k+4|0)>>2];a=0!=(HEAP32[(k|0)>>2]|0)?35:36;break;case 35:_dump_prefix(h+
1|0);a=_mrb_sym2name(d,HEAP32[(k|0)>>2]&65535);_printf(__str76|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=36;break;case 36:k=HEAP32[(k+4|0)>>2];a=0!=(HEAP32[(k|0)>>2]|0)?37:38;break;case 37:_dump_prefix(h+1|0);_printf(__str77|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_recur(d,HEAP32[(k|0)>>2],h+2|0);a=38;break;case 38:k=
HEAP32[(k+4|0)>>2];a=0!=(k|0)?39:40;break;case 39:_dump_prefix(h+1|0);a=_mrb_sym2name(d,k&65535);_printf(__str78|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=40;break;case 40:a=41;break;case 41:_dump_prefix(h+1|0);_printf(__str64|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(HEAP32[(g+4|0)>>2]|0)>>2],
h+2|0);a=204;break;case 42:_printf(__str79|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_prefix(h+1|0);_printf(__str80|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g|0)>>2],h+2|0);_dump_prefix(h+1|0);_printf(__str81|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<
2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(HEAP32[(g+4|0)>>2]|0)>>2],h+2|0);a=0!=(HEAP32[(HEAP32[(HEAP32[(g+4|0)>>2]+4|0)>>2]|0)>>2]|0)?43:44;break;case 43:_dump_prefix(h+1|0);_printf(__str69|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(HEAP32[(HEAP32[(g+4|0)>>2]+4|0)>>2]|0)>>2],h+2|0);a=44;break;case 44:a=
204;break;case 45:_printf(__str82|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g|0)>>2],h+1|0);_parser_dump(d,HEAP32[(g+4|0)>>2],h+1|0);a=204;break;case 46:_printf(__str83|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g|0)>>2],h+1|0);_parser_dump(d,HEAP32[(g+
4|0)>>2],h+1|0);a=204;break;case 47:_printf(__str84|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=0!=(HEAP32[(g|0)>>2]|0)?48:49;break;case 48:_parser_dump(d,HEAP32[(g|0)>>2],h+1|0);a=49;break;case 49:g=HEAP32[(g+4|0)>>2];a=50;break;case 50:a=0!=(g|0)?51:52;break;case 51:_dump_prefix(h+1|0);_printf(__str85|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,
"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_recur(d,HEAP32[(HEAP32[(g|0)>>2]|0)>>2],h+2|0);_dump_prefix(h+1|0);_printf(__str64|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(HEAP32[(g|0)>>2]+4|0)>>2],h+2|0);g=HEAP32[(g+4|0)>>2];a=50;break;case 52:a=204;break;case 53:_printf(__str86|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+
STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_prefix(h+1|0);_printf(__str80|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g|0)>>2],h+2|0);_dump_prefix(h+1|0);_printf(__str64|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g+4|0)>>2],h+2|
0);a=204;break;case 54:_printf(__str87|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_prefix(h+1|0);_printf(__str80|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g|0)>>2],h+2|0);_dump_prefix(h+1|0);_printf(__str64|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<
STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g+4|0)>>2],h+2|0);a=204;break;case 55:_printf(__str88|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_prefix(h+1|0);_printf(__str89|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));r=HEAP32[(g|0)>>2];a=0!=
(HEAP32[(r|0)>>2]|0)?56:57;break;case 56:_dump_prefix(h+2|0);_printf(__str90|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_recur(d,HEAP32[(r|0)>>2],h+3|0);a=57;break;case 57:r=HEAP32[(r+4|0)>>2];a=0!=(r|0)?58:65;break;case 58:a=0!=(HEAP32[(r|0)>>2]|0)?59:60;break;case 59:_dump_prefix(h+2|0);_printf(__str91|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,
"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(r|0)>>2],h+3|0);a=60;break;case 60:r=HEAP32[(r+4|0)>>2];a=0!=(r|0)?61:64;break;case 61:a=0!=(HEAP32[(r|0)>>2]|0)?62:63;break;case 62:_dump_prefix(h+2|0);_printf(__str92|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_recur(d,HEAP32[(r|0)>>2],h+3|0);a=63;break;case 63:a=64;break;case 64:a=65;break;case 65:g=HEAP32[(g+4|0)>>
2];_dump_prefix(h+1|0);_printf(__str93|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g|0)>>2],h+2|0);g=HEAP32[(g+4|0)>>2];_dump_prefix(h+1|0);_printf(__str94|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g|0)>>2],h+2|0);a=204;break;case 66:_printf(__str95|
0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));t=HEAP32[(g|0)>>2];a=0!=(t|0)?67:77;break;case 67:a=0!=(HEAP32[(t|0)>>2]|0)?69:68;break;case 68:a=0!=(HEAP32[(t+4|0)>>2]|0)?69:77;break;case 69:_dump_prefix(h+1|0);_printf(__str96|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_prefix(h+2|0);a=70;break;
case 70:a=0!=(t|0)?71:76;break;case 71:a=0!=(HEAP32[(t|0)>>2]|0)?72:75;break;case 72:a=(t|0)!=(HEAP32[(g|0)>>2]|0)?73:74;break;case 73:_printf(__str97|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=74;break;case 74:a=_mrb_sym2name(d,HEAP32[(t|0)>>2]&65535);_printf(__str98|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=75;break;
case 75:t=HEAP32[(t+4|0)>>2];a=70;break;case 76:_printf(__str760|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=77;break;case 77:g=HEAP32[(g+4|0)>>2];h=h+1|0;a=5;break;case 78:_printf(__str99|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g|0)>>2],h+1|0);_dump_prefix(h+1|0);a=_mrb_sym2name(d,
HEAP32[(HEAP32[(g+4|0)>>2]|0)>>2]&65535);var s=HEAP32[(HEAP32[(g+4|0)>>2]|0)>>2];_printf(__str100|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,HEAP32[tempInt+4>>2]=s,tempInt));g=HEAP32[(HEAP32[(HEAP32[(g+4|0)>>2]+4|0)>>2]|0)>>2];a=0!=(g|0)?79:82;break;case 79:_dump_prefix(h+1|0);_printf(__str101|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));
_dump_recur(d,HEAP32[(g|0)>>2],h+2|0);a=0!=(HEAP32[(g+4|0)>>2]|0)?80:81;break;case 80:_dump_prefix(h+1|0);_printf(__str102|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g+4|0)>>2],h+2|0);a=81;break;case 81:a=82;break;case 82:a=204;break;case 83:_printf(__str103|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>
2]=0,tempInt));_parser_dump(d,HEAP32[(g|0)>>2],h+1|0);_parser_dump(d,HEAP32[(g+4|0)>>2],h+1|0);a=204;break;case 84:_printf(__str104|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g|0)>>2],h+1|0);_parser_dump(d,HEAP32[(g+4|0)>>2],h+1|0);a=204;break;case 85:_printf(__str105|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g|0)>>2],h+1|0);_dump_prefix(h+1|0);a=_mrb_sym2name(d,HEAP32[(g+4|0)>>2]&65535);_printf(__str106|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=204;break;case 86:_printf(__str107|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_prefix(h+1|0);a=_mrb_sym2name(d,g&65535);
_printf(__str106|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=204;break;case 87:_printf(__str108|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_recur(d,g,h+1|0);a=204;break;case 88:_printf(__str109|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>
2]=0,tempInt));a=89;break;case 89:a=0!=(g|0)?90:91;break;case 90:_dump_prefix(h+1|0);_printf(__str11073|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(HEAP32[(g|0)>>2]|0)>>2],h+2|0);_dump_prefix(h+1|0);_printf(__str111|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,
HEAP32[(HEAP32[(g|0)>>2]+4|0)>>2],h+2|0);g=HEAP32[(g+4|0)>>2];a=89;break;case 91:a=204;break;case 92:_printf(__str112|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,g,h+1|0);a=204;break;case 93:_printf(__str113|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_prefix(h+1|0);_printf(__str114|
0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g|0)>>2],h+2|0);_dump_prefix(h+1|0);_printf(__str115|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g+4|0)>>2],h+2|0);a=204;break;case 94:_printf(__str116|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<
2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_prefix(h+1|0);_printf(__str117|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));p=HEAP32[(g|0)>>2];a=0!=(HEAP32[(p|0)>>2]|0)?95:96;break;case 95:_dump_prefix(h+2|0);_printf(__str90|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>
2]=0,tempInt));_dump_recur(d,HEAP32[(p|0)>>2],h+3|0);a=96;break;case 96:p=HEAP32[(p+4|0)>>2];a=0!=(p|0)?97:107;break;case 97:a=0!=(HEAP32[(p|0)>>2]|0)?98:102;break;case 98:_dump_prefix(h+2|0);_printf(__str91|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=-1==(HEAP32[(p|0)>>2]|0)?99:100;break;case 99:_dump_prefix(h+2|0);_printf(__str118|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<
STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=101;break;case 100:_parser_dump(d,HEAP32[(p|0)>>2],h+3|0);a=101;break;case 101:a=102;break;case 102:p=HEAP32[(p+4|0)>>2];a=0!=(p|0)?103:106;break;case 103:a=0!=(HEAP32[(p|0)>>2]|0)?104:105;break;case 104:_dump_prefix(h+2|0);_printf(__str92|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_recur(d,HEAP32[(p|0)>>2],h+3|0);a=105;
break;case 105:a=106;break;case 106:a=107;break;case 107:_dump_prefix(h+1|0);_printf(__str115|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g+4|0)>>2],h+2|0);a=204;break;case 108:_printf(__str11974|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_prefix(h+1|0);_printf(__str114|
0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g|0)>>2],h+2|0);g=HEAP32[(g+4|0)>>2];_dump_prefix(h+1|0);a=_mrb_sym2name(d,HEAP32[(g|0)>>2]&65535);s=HEAP32[(g|0)>>2];_printf(__str120|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,HEAP32[tempInt+4>>2]=s,tempInt));g=HEAP32[(g+4|0)>>2];_parser_dump(d,HEAP32[(g|0)>>2],h+
1|0);a=204;break;case 109:_printf(__str121|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=0!=(g|0)?110:113;break;case 110:_dump_prefix(h+1|0);_printf(__str101|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_recur(d,HEAP32[(g|0)>>2],h+2|0);a=0!=(HEAP32[(g+4|0)>>2]|0)?111:112;break;case 111:_dump_prefix(h+
1|0);_printf(__str102|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g+4|0)>>2],h+2|0);a=112;break;case 112:a=113;break;case 113:a=204;break;case 114:_printf(__str122|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=204;break;case 115:_printf(__str123|0,(tempInt=STACKTOP,STACKTOP+=
1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,g,h+1|0);a=204;break;case 116:_printf(__str124|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_recur(d,g,h+1|0);a=204;break;case 117:_printf(__str125|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>
2]=0,tempInt));_parser_dump(d,g,h+1|0);a=204;break;case 118:_printf(__str126|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,g,h+1|0);a=204;break;case 119:_printf(__str127|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=204;break;case 120:_printf(__str128|0,(tempInt=STACKTOP,STACKTOP+=1,
STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=204;break;case 121:a=_mrb_sym2name(d,g&65535);_printf(__str129|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=204;break;case 122:a=_mrb_sym2name(d,g&65535);_printf(__str130|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=204;break;case 123:a=
_mrb_sym2name(d,g&65535);_printf(__str131|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=204;break;case 124:a=_mrb_sym2name(d,g&65535);_printf(__str132|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=204;break;case 125:a=_mrb_sym2name(d,g&65535);_printf(__str133|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=a,tempInt));a=204;break;case 126:a=g;_printf(__str13475|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=204;break;case 127:a=g;_printf(__str135|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=204;break;case 128:a=_mrb_sym2name(d,g&65535);_printf(__str136|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=a,tempInt));a=204;break;case 129:_printf(__str137|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,g,h+1|0);a=204;break;case 130:a=HEAP32[(g|0)>>2];s=HEAP32[(HEAP32[(g+4|0)>>2]|0)>>2];_printf(__str138|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,HEAP32[tempInt+4>>2]=s,tempInt));a=204;break;case 131:a=g;_printf(__str139|
0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=204;break;case 132:_printf(__str140|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,g,h+1|0);a=204;break;case 133:a=HEAP32[(g|0)>>2];s=HEAP32[(g+4|0)>>2];_printf(__str141|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>
2]=a,HEAP32[tempInt+4>>2]=s,tempInt));a=204;break;case 134:_printf(__str142|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_recur(d,g,h+1|0);a=204;break;case 135:a=_mrb_sym2name(d,g&65535);_printf(__str143|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=204;break;case 136:_printf(__str144|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=
STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=204;break;case 137:_printf(__str145|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=204;break;case 138:_printf(__str146|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=204;break;case 139:_printf(__str147|
0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=204;break;case 140:a=_mrb_sym2name(d,HEAP32[(g|0)>>2]&65535);s=_mrb_sym2name(d,HEAP32[(g+4|0)>>2]&65535);_printf(__str148|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,HEAP32[tempInt+4>>2]=s,tempInt));a=204;break;case 141:a=_mrb_sym2name(d,g&65535);_printf(__str149|0,(tempInt=STACKTOP,STACKTOP+=
4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=204;break;case 142:_printf(__str150|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=0==(HEAP32[(HEAP32[(g|0)>>2]|0)>>2]|0)?143:144;break;case 143:_dump_prefix(h+1|0);a=_mrb_sym2name(d,HEAP32[(HEAP32[(g|0)>>2]+4|0)>>2]&65535);_printf(__str151|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,
"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=148;break;case 144:a=1==(HEAP32[(HEAP32[(g|0)>>2]|0)>>2]|0)?145:146;break;case 145:_dump_prefix(h+1|0);a=_mrb_sym2name(d,HEAP32[(HEAP32[(g|0)>>2]+4|0)>>2]&65535);_printf(__str106|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=147;break;case 146:_parser_dump(d,HEAP32[(HEAP32[(g|0)>>2]|0)>>2],h+1|0);_dump_prefix(h+1|0);a=_mrb_sym2name(d,HEAP32[(HEAP32[(g|0)>>2]+4|0)>>2]&65535);
_printf(__str106|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=147;break;case 147:a=148;break;case 148:a=0!=(HEAP32[(HEAP32[(g+4|0)>>2]|0)>>2]|0)?149:150;break;case 149:_dump_prefix(h+1|0);_printf(__str152|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(HEAP32[(g+4|0)>>2]|0)>>2],h+2|0);a=150;break;case 150:_dump_prefix(h+
1|0);_printf(__str64|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(HEAP32[(HEAP32[(HEAP32[(g+4|0)>>2]+4|0)>>2]|0)>>2]+4|0)>>2],h+2|0);a=204;break;case 151:_printf(__str153|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=0==(HEAP32[(HEAP32[(g|0)>>2]|0)>>2]|0)?152:153;break;case 152:_dump_prefix(h+
1|0);a=_mrb_sym2name(d,HEAP32[(HEAP32[(g|0)>>2]+4|0)>>2]&65535);_printf(__str151|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=157;break;case 153:a=1==(HEAP32[(HEAP32[(g|0)>>2]|0)>>2]|0)?154:155;break;case 154:_dump_prefix(h+1|0);a=_mrb_sym2name(d,HEAP32[(HEAP32[(g|0)>>2]+4|0)>>2]&65535);_printf(__str106|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));
a=156;break;case 155:_parser_dump(d,HEAP32[(HEAP32[(g|0)>>2]|0)>>2],h+1|0);_dump_prefix(h+1|0);a=_mrb_sym2name(d,HEAP32[(HEAP32[(g|0)>>2]+4|0)>>2]&65535);_printf(__str106|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=156;break;case 156:a=157;break;case 157:_dump_prefix(h+1|0);_printf(__str64|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=
0,tempInt));_parser_dump(d,HEAP32[(HEAP32[(HEAP32[(g+4|0)>>2]|0)>>2]+4|0)>>2],h+2|0);a=204;break;case 158:_printf(__str15476|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g|0)>>2],h+1|0);_dump_prefix(h+1|0);_printf(__str64|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,
HEAP32[(HEAP32[(HEAP32[(g+4|0)>>2]|0)>>2]+4|0)>>2],h+2|0);a=204;break;case 159:_printf(__str155|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_prefix(h+1|0);q=_mrb_sym2name(d,HEAP32[(g|0)>>2]&65535);_printf(__str156|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=q,tempInt));g=HEAP32[(g+4|0)>>2];q=HEAP32[(g|0)>>2];a=0!=(q|0)?160:170;break;
case 160:a=0!=(HEAP32[(q|0)>>2]|0)?162:161;break;case 161:a=0!=(HEAP32[(q+4|0)>>2]|0)?162:170;break;case 162:_dump_prefix(h+1|0);_printf(__str96|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_prefix(h+2|0);a=163;break;case 163:a=0!=(q|0)?164:169;break;case 164:a=0!=(HEAP32[(q|0)>>2]|0)?165:168;break;case 165:a=(q|0)!=(HEAP32[(g|0)>>2]|0)?166:167;break;case 166:_printf(__str97|0,(tempInt=STACKTOP,
STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=167;break;case 167:a=_mrb_sym2name(d,HEAP32[(q|0)>>2]&65535);_printf(__str98|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=168;break;case 168:q=HEAP32[(q+4|0)>>2];a=163;break;case 169:_printf(__str760|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=0,tempInt));a=170;break;case 170:g=HEAP32[(g+4|0)>>2];a=0!=(HEAP32[(g|0)>>2]|0)?171:185;break;case 171:v=HEAP32[(g|0)>>2];a=0!=(HEAP32[(v|0)>>2]|0)?172:173;break;case 172:_dump_prefix(h+1|0);_printf(__str73|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_recur(d,HEAP32[(v|0)>>2],h+2|0);a=173;break;case 173:v=HEAP32[(v+4|0)>>2];a=0!=(HEAP32[(v|0)>>2]|0)?174:178;break;case 174:_dump_prefix(h+
1|0);_printf(__str74|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));w=HEAP32[(v|0)>>2];a=175;break;case 175:a=0!=(w|0)?176:177;break;case 176:_dump_prefix(h+2|0);a=_mrb_sym2name(d,HEAP32[(HEAP32[(w|0)>>2]|0)>>2]&65535);_printf(__str75|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));_parser_dump(d,HEAP32[(HEAP32[(w|0)>>2]+4|0)>>2],
0);w=HEAP32[(w+4|0)>>2];a=175;break;case 177:a=178;break;case 178:v=HEAP32[(v+4|0)>>2];a=0!=(HEAP32[(v|0)>>2]|0)?179:180;break;case 179:_dump_prefix(h+1|0);a=_mrb_sym2name(d,HEAP32[(v|0)>>2]&65535);_printf(__str76|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=180;break;case 180:v=HEAP32[(v+4|0)>>2];a=0!=(HEAP32[(v|0)>>2]|0)?181:182;break;case 181:_dump_prefix(h+1|0);_printf(__str77|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=
STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_recur(d,HEAP32[(v|0)>>2],h+2|0);a=182;break;case 182:v=HEAP32[(v+4|0)>>2];a=0!=(v|0)?183:184;break;case 183:_dump_prefix(h+1|0);a=_mrb_sym2name(d,v&65535);_printf(__str78|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=184;break;case 184:a=185;break;case 185:_parser_dump(d,HEAP32[(HEAP32[(g+4|0)>>2]|0)>>2],h+1|0);a=
204;break;case 186:_printf(__str157|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,HEAP32[(g|0)>>2],h+1|0);g=HEAP32[(g+4|0)>>2];_dump_prefix(h+1|0);a=_mrb_sym2name(d,HEAP32[(g|0)>>2]&65535);_printf(__str151|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));g=HEAP32[(HEAP32[(g+4|0)>>2]+4|0)>>2];a=0!=(HEAP32[(g|0)>>2]|
0)?187:201;break;case 187:m=HEAP32[(g|0)>>2];a=0!=(HEAP32[(m|0)>>2]|0)?188:189;break;case 188:_dump_prefix(h+1|0);_printf(__str73|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_dump_recur(d,HEAP32[(m|0)>>2],h+2|0);a=189;break;case 189:m=HEAP32[(m+4|0)>>2];a=0!=(HEAP32[(m|0)>>2]|0)?190:194;break;case 190:_dump_prefix(h+1|0);_printf(__str74|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<
STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));x=HEAP32[(m|0)>>2];a=191;break;case 191:a=0!=(x|0)?192:193;break;case 192:_dump_prefix(h+2|0);a=_mrb_sym2name(d,HEAP32[(HEAP32[(x|0)>>2]|0)>>2]&65535);_printf(__str75|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));_parser_dump(d,HEAP32[(HEAP32[(x|0)>>2]+4|0)>>2],0);x=HEAP32[(x+4|0)>>2];a=191;break;case 193:a=194;break;case 194:m=HEAP32[(m+4|0)>>2];a=0!=(HEAP32[(m|
0)>>2]|0)?195:196;break;case 195:_dump_prefix(h+1|0);a=_mrb_sym2name(d,HEAP32[(m|0)>>2]&65535);_printf(__str76|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=196;break;case 196:m=HEAP32[(m+4|0)>>2];a=0!=(HEAP32[(m|0)>>2]|0)?197:198;break;case 197:_dump_prefix(h+1|0);_printf(__str77|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));
_dump_recur(d,HEAP32[(m|0)>>2],h+2|0);a=198;break;case 198:m=HEAP32[(m+4|0)>>2];a=0!=(m|0)?199:200;break;case 199:_dump_prefix(h+1|0);a=_mrb_sym2name(d,m&65535);_printf(__str78|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));a=200;break;case 200:a=201;break;case 201:g=HEAP32[(g+4|0)>>2];_parser_dump(d,HEAP32[(g|0)>>2],h+1|0);a=204;break;case 202:_printf(__str158|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<
STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_parser_dump(d,g,h+1|0);a=204;break;case 203:s=a=i;_printf(__str159|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,HEAP32[tempInt+4>>2]=s,tempInt));a=204;break;case 204:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_parser_dump.X=1;
function _mrb_parser_new(f){var e;for(e=2;;)switch(e){case 2:var b,c,a,d;c=f;a=_mrb_pool_open(c);e=0!=(a|0)?4:3;break;case 3:b=0;e=7;break;case 4:d=_mrb_pool_alloc(a,1412);e=0!=(d|0)?6:5;break;case 5:b=0;e=7;break;case 6:b=d;assert(!0,"memcpy given 1412 bytes to copy. Problem with quantum=1 corrections perhaps?");e=_mrb_parser_new_parser_state_zero>>2;b>>=2;for(var g=e+353;e<g;e++,b++)HEAP32[b]=HEAP32[e];HEAP32[(d|0)>>2]=c;HEAP32[(d+4|0)>>2]=a;HEAP32[(d+64|0)>>2]=0;HEAP32[(d+60|0)>>2]=0;HEAP32[(d+
16|0)>>2]=0;HEAP32[(d+12|0)>>2]=0;HEAP32[(d+20|0)>>2]=0;HEAP32[(d+68|0)>>2]=1;HEAP32[(d+64|0)>>2]=0;HEAP32[(d+60|0)>>2]=0;HEAP32[(d+1128|0)>>2]=0;HEAP32[(d+28|0)>>2]=1;HEAP32[(d+32|0)>>2]=0;b=d;e=7;break;case 7:return b;default:assert(0,"bad label: "+e)}}_mrb_parser_new.X=1;function _mrb_parser_free(f){_mrb_pool_close(HEAP32[(f+4|0)>>2])}function _mrbc_context_new(f){return _mrb_calloc(f,1,16)}function _mrbc_context_free(f,e){_mrb_free(f,HEAP32[(e|0)>>2]);_mrb_free(f,e)}
function _mrbc_filename(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h;a=f;d=e;g=b;c=0!=(g|0)?3:4;break;case 3:h=_strlen(g);var i=c=_mrb_alloca(a,h+1|0),j=g;h=h+1|0;assert(0===h%1,"memcpy given "+h+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(i,j,h,1);HEAP32[(d+8|0)>>2]=c;HEAP16[(d+12|0)>>1]=1;c=4;break;case 4:return HEAP32[(d+8|0)>>2];default:assert(0,"bad label: "+c)}}
function _mrb_parse_file(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h;c=f;d=e;g=b;h=_mrb_parser_new(c);c=0!=(h|0)?4:3;break;case 3:a=0;c=5;break;case 4:HEAP32[(h+16|0)>>2]=0;HEAP32[(h+12|0)>>2]=0;HEAP32[(h+20|0)>>2]=d;_mrb_parser_parse(h,g);a=h;c=5;break;case 5:return a;default:assert(0,"bad label: "+c)}}
function _mrb_parse_nstring(f,e,b,c){var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j;a=f;g=e;h=b;i=c;j=_mrb_parser_new(a);a=0!=(j|0)?4:3;break;case 3:d=0;a=5;break;case 4:HEAP32[(j+12|0)>>2]=g;HEAP32[(j+16|0)>>2]=g+h|0;_mrb_parser_parse(j,i);d=j;a=5;break;case 5:return d;default:assert(0,"bad label: "+a)}}function _mrb_parse_string(f,e,b){var c=_strlen(e);return _mrb_parse_nstring(f,e,c,b)}function _mrb_load_file_cxt(f,e,b,c){b=_mrb_parse_file(e,b,c);_load_exec(f,e,b,c)}
function _load_exec(f,e,b,c){var a=STACKTOP;STACKTOP+=304;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d;for(d=2;;)switch(d){case 2:var g,h,i,j,l=a,k=a+8,n=a+264,r=a+272,t=a+280,p=a+288,q=a+296;g=e;h=b;i=c;d=0!=(h|0)?4:3;break;case 3:_mrb_undef_value92(f);d=20;break;case 4:d=0!=(HEAP32[(h+1124|0)>>2]|0)?5:6;break;case 5:d=0!=(HEAP32[(h+1116|0)>>2]|0)?6:9;break;case 6:d=0!=(HEAP32[(h+1128|0)>>2]|0)?7:8;break;case 7:j=HEAP32[(h+1132|0)>>2];d=HEAP32[((h+
1132|0)+8|0)>>2];j=_snprintf(k|0,256,__str160|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=j,HEAP32[tempInt+4>>2]=d,tempInt));d=g;var v=_mrb_class_obj_get(g,__str161|0);_mrb_exc_new(n,d,v,k|0,j);HEAP32[(g+48|0)>>2]=HEAP32[(n|0)>>2];_mrb_parser_free(h);_mrb_undef_value92(f);d=20;break;case 8:d=g;v=_mrb_class_obj_get(g,__str161|0);_mrb_exc_new(r,d,v,_load_exec_msg|0,12);HEAP32[(g+48|0)>>2]=HEAP32[(r|0)>>2];_mrb_parser_free(h);_mrb_undef_value92(f);
d=20;break;case 9:j=_mrb_generate_code(g,h);_mrb_parser_free(h);d=0>(j|0)?10:11;break;case 10:d=g;v=_mrb_class_obj_get(g,__str163|0);_mrb_exc_new(t,d,v,_load_exec_msg162|0,13);HEAP32[(g+48|0)>>2]=HEAP32[(t|0)>>2];_mrb_nil_value93(f);d=20;break;case 11:d=0!=(i|0)?12:17;break;case 12:d=0!=((HEAP32[(i+12|0)>>2]>>>17&1)<<31>>31|0)?13:14;break;case 13:_codedump_all(g,j);d=14;break;case 14:d=0!=((HEAP32[(i+12|0)>>2]>>>18&1)<<31>>31|0)?15:16;break;case 15:_mrb_fixnum_value94(f,j);d=20;break;case 16:d=17;
break;case 17:d=g;v=_mrb_proc_new(g,HEAP32[(HEAP32[(g+56|0)>>2]+(j<<2)|0)>>2]);_mrb_top_self(p,g);_mrb_run(q,d,v,p);d=l;v=q;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[v>>2];HEAP32[d+4>>2]=HEAP32[v+4>>2];d=0!=(HEAP32[(g+48|0)>>2]|0)?18:19;break;case 18:_mrb_nil_value93(f);d=20;break;case 19:d=f;v=l;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[v>>2];HEAP32[d+4>>2]=HEAP32[v+4>>
2];d=20;break;case 20:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_load_exec.X=1;function _mrb_load_file(f,e,b){_mrb_load_file_cxt(f,e,b,0)}function _mrb_load_nstring_cxt(f,e,b,c,a){b=_mrb_parse_nstring(e,b,c,a);_load_exec(f,e,b,a)}function _mrb_load_nstring(f,e,b,c){_mrb_load_nstring_cxt(f,e,b,c,0)}function _mrb_load_string_cxt(f,e,b,c){var a=_strlen(b);_mrb_load_nstring_cxt(f,e,b,a,c)}function _mrb_load_string(f,e,b){_mrb_load_string_cxt(f,e,b,0)}
function _dump_prefix(f){var e;for(e=2;;)switch(e){case 2:var b;b=f;e=3;break;case 3:e=b;b=e-1|0;e=0!=(e|0)?4:5;break;case 4:_putc(32,HEAP32[_stdout>>2]);_putc(32,HEAP32[_stdout>>2]);e=3;break;case 5:return;default:assert(0,"bad label: "+e)}}function _dump_recur(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g;a=f;d=e;g=b;c=3;break;case 3:c=0!=(d|0)?4:5;break;case 4:_parser_dump(a,HEAP32[(d|0)>>2],g);d=HEAP32[(d+4|0)>>2];c=3;break;case 5:return;default:assert(0,"bad label: "+c)}}
function _mrb_undef_value92(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]=HEAP32[b>>2]&-256|5;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_nil_value93(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_fixnum_value94(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|3;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _parser_yylex(f){var e=STACKTOP;STACKTOP+=260;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h,i,j,l,k=e,n,r,t,p,q,v,w,m,x=e+256,s,y,B,A,G;a=f;g=0;b=0!=(HEAP32[(a+40|0)>>2]|0)?3:4;break;case 3:c=_parse_string(a,HEAP32[(a+40|0)>>2]);b=673;break;case 4:h=HEAP32[(a+68|0)>>2];HEAP32[(a+68|0)>>2]=0;b=5;break;case 5:i=HEAP32[(a+36|0)>>2];var z=_nextc(a);d=z;b=0==(z|0)||4==(z|0)||26==(z|0)||-1==(z|0)?6:32==(z|
0)||9==(z|0)||12==(z|0)||13==(z|0)||11==(z|0)?7:35==(z|0)?8:10==(z|0)?9:42==(z|0)?24:33==(z|0)?48:61==(z|0)?59:60==(z|0)?77:62==(z|0)?92:34==(z|0)?103:39==(z|0)?104:63==(z|0)?105:38==(z|0)?140:124==(z|0)?164:43==(z|0)?175:45==(z|0)?196:46==(z|0)?219:48==(z|0)||49==(z|0)||50==(z|0)||51==(z|0)||52==(z|0)||53==(z|0)||54==(z|0)||55==(z|0)||56==(z|0)||57==(z|0)?228:41==(z|0)||93==(z|0)?381:125==(z|0)?382:58==(z|0)?386:47==(z|0)?404:94==(z|0)?421:59==(z|0)?428:44==(z|0)?429:126==(z|0)?430:40==(z|0)?437:
91==(z|0)?449:123==(z|0)?468:92==(z|0)?481:37==(z|0)?484:36==(z|0)?535:64==(z|0)?558:95==(z|0)?571:572;break;case 6:c=0;b=673;break;case 7:g=1;b=5;break;case 8:_skip(a,10);b=9;break;case 9:var E=HEAP32[(a+36|0)>>2];b=0==(E|0)||7==(E|0)||8==(E|0)||9==(E|0)||10==(E|0)?10:11;break;case 10:var M=a+28|0;HEAP32[M>>2]=HEAP32[M>>2]+1|0;HEAP32[(a+32|0)>>2]=0;b=5;break;case 11:b=12;break;case 12:b=13;break;case 13:var C=_nextc(a);d=C;b=0!=(C|0)?14:22;break;case 14:var H=d;b=32==(H|0)||9==(H|0)||12==(H|0)||
13==(H|0)||11==(H|0)?15:46==(H|0)?16:-1==(H|0)?19:20;break;case 15:g=1;b=21;break;case 16:var L=_nextc(a);d=L;b=46!=(L|0)?17:18;break;case 17:_pushback(a,d);_pushback(a,46);b=5;break;case 18:b=19;break;case 19:b=23;break;case 20:_pushback(a,d);b=23;break;case 21:b=13;break;case 22:b=23;break;case 23:HEAP32[(a+68|0)>>2]=1;HEAP32[(a+36|0)>>2]=0;c=10;b=673;break;case 24:var R=_nextc(a);d=R;b=42==(R|0)?25:28;break;case 25:var I=_nextc(a);d=I;b=61==(I|0)?26:27;break;case 26:var K=_intern_gen(a,__str37|
0);HEAP16[HEAP32[(a+1112|0)>>2]>>1]=K;HEAP32[(a+36|0)>>2]=0;c=343;b=673;break;case 27:_pushback(a,d);d=324;b=43;break;case 28:b=61==(d|0)?29:30;break;case 29:var Q=_intern_gen(a,__str34|0);HEAP16[HEAP32[(a+1112|0)>>2]>>1]=Q;HEAP32[(a+36|0)>>2]=0;c=343;b=673;break;case 30:_pushback(a,d);b=4==(HEAP32[(a+36|0)>>2]|0)?32:31;break;case 31:b=5==(HEAP32[(a+36|0)>>2]|0)?32:35;break;case 32:b=0!=(g|0)?33:35;break;case 33:b=0!=(_isspace(d&255)|0)?35:34;break;case 34:_yywarning(a,__str164|0);d=351;b=42;break;
case 35:b=0==(HEAP32[(a+36|0)>>2]|0)?39:36;break;case 36:b=6==(HEAP32[(a+36|0)>>2]|0)?39:37;break;case 37:b=10==(HEAP32[(a+36|0)>>2]|0)?39:38;break;case 38:b=9==(HEAP32[(a+36|0)>>2]|0)?39:40;break;case 39:d=351;b=41;break;case 40:d=42;b=41;break;case 41:b=42;break;case 42:b=43;break;case 43:b=7==(HEAP32[(a+36|0)>>2]|0)?45:44;break;case 44:b=8==(HEAP32[(a+36|0)>>2]|0)?45:46;break;case 45:HEAP32[(a+36|0)>>2]=4;b=47;break;case 46:HEAP32[(a+36|0)>>2]=0;b=47;break;case 47:c=d;b=673;break;case 48:d=_nextc(a);
b=7==(HEAP32[(a+36|0)>>2]|0)?50:49;break;case 49:b=8==(HEAP32[(a+36|0)>>2]|0)?50:53;break;case 50:HEAP32[(a+36|0)>>2]=4;b=64==(d|0)?51:52;break;case 51:c=33;b=673;break;case 52:b=54;break;case 53:HEAP32[(a+36|0)>>2]=0;b=54;break;case 54:b=61==(d|0)?55:56;break;case 55:c=328;b=673;break;case 56:b=126==(d|0)?57:58;break;case 57:c=334;b=673;break;case 58:_pushback(a,d);c=33;b=673;break;case 59:b=1==(HEAP32[(a+32|0)>>2]|0)?60:63;break;case 60:b=0!=(_peeks(a,__str165|0)|0)?61:62;break;case 61:_skips(a,
__str166|0);b=5;break;case 62:b=63;break;case 63:b=7==(HEAP32[(a+36|0)>>2]|0)?65:64;break;case 64:b=8==(HEAP32[(a+36|0)>>2]|0)?65:66;break;case 65:HEAP32[(a+36|0)>>2]=4;b=67;break;case 66:HEAP32[(a+36|0)>>2]=0;b=67;break;case 67:var O=_nextc(a);d=O;b=61==(O|0)?68:71;break;case 68:var aa=_nextc(a);d=aa;b=61==(aa|0)?69:70;break;case 69:c=327;b=673;break;case 70:_pushback(a,d);c=326;b=673;break;case 71:b=126==(d|0)?72:73;break;case 72:c=333;b=673;break;case 73:b=62==(d|0)?74:75;break;case 74:c=344;b=
673;break;case 75:b=76;break;case 76:_pushback(a,d);c=61;b=673;break;case 77:i=HEAP32[(a+36|0)>>2];d=_nextc(a);b=7==(HEAP32[(a+36|0)>>2]|0)?79:78;break;case 78:b=8==(HEAP32[(a+36|0)>>2]|0)?79:80;break;case 79:HEAP32[(a+36|0)>>2]=4;b=83;break;case 80:HEAP32[(a+36|0)>>2]=0;b=9==(HEAP32[(a+36|0)>>2]|0)?81:82;break;case 81:HEAP32[(a+68|0)>>2]=1;b=82;break;case 82:b=83;break;case 83:b=61==(d|0)?84:87;break;case 84:var J=_nextc(a);d=J;b=62==(J|0)?85:86;break;case 85:c=325;b=673;break;case 86:_pushback(a,
d);c=330;b=673;break;case 87:b=60==(d|0)?88:91;break;case 88:var la=_nextc(a);d=la;b=61==(la|0)?89:90;break;case 89:var ba=_intern_gen(a,__str30|0);HEAP16[HEAP32[(a+1112|0)>>2]>>1]=ba;HEAP32[(a+36|0)>>2]=0;c=343;b=673;break;case 90:_pushback(a,d);c=339;b=673;break;case 91:_pushback(a,d);c=60;b=673;break;case 92:b=7==(HEAP32[(a+36|0)>>2]|0)?94:93;break;case 93:b=8==(HEAP32[(a+36|0)>>2]|0)?94:95;break;case 94:HEAP32[(a+36|0)>>2]=4;b=96;break;case 95:HEAP32[(a+36|0)>>2]=0;b=96;break;case 96:var U=_nextc(a);
d=U;b=61==(U|0)?97:98;break;case 97:c=329;b=673;break;case 98:b=62==(d|0)?99:102;break;case 99:var T=_nextc(a);d=T;b=61==(T|0)?100:101;break;case 100:var ua=_intern_gen(a,__str31|0);HEAP16[HEAP32[(a+1112|0)>>2]>>1]=ua;HEAP32[(a+36|0)>>2]=0;c=343;b=673;break;case 101:_pushback(a,d);c=340;b=673;break;case 102:_pushback(a,d);c=62;b=673;break;case 103:HEAP32[(a+40|0)>>2]=34;c=358;b=673;break;case 104:c=_parse_qstring(a,d);b=673;break;case 105:b=1==(HEAP32[(a+36|0)>>2]|0)?108:106;break;case 106:b=2==(HEAP32[(a+
36|0)>>2]|0)?108:107;break;case 107:b=3==(HEAP32[(a+36|0)>>2]|0)?108:109;break;case 108:HEAP32[(a+36|0)>>2]=10;c=63;b=673;break;case 109:d=_nextc(a);b=-1==(d|0)?110:111;break;case 110:_yyerror(a,__str167|0);c=0;b=673;break;case 111:b=0!=(_isspace(d)|0)?112:127;break;case 112:b=4==(HEAP32[(a+36|0)>>2]|0)?125:113;break;case 113:b=5==(HEAP32[(a+36|0)>>2]|0)?125:114;break;case 114:var N=d;b=32==(N|0)?115:10==(N|0)?116:9==(N|0)?117:11==(N|0)?118:13==(N|0)?119:12==(N|0)?120:121;break;case 115:l=115;b=122;
break;case 116:l=110;b=122;break;case 117:l=116;b=122;break;case 118:l=118;b=122;break;case 119:l=114;b=122;break;case 120:l=102;b=122;break;case 121:l=0;b=122;break;case 122:b=0!=(l|0)?123:124;break;case 123:var u=l;_snprintf(k|0,256,__str168|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=u,tempInt));_yyerror(a,k|0);b=124;break;case 124:b=125;break;case 125:b=126;break;case 126:_pushback(a,d);HEAP32[(a+36|0)>>2]=10;c=63;b=673;break;case 127:j=
_newtok(a);b=0!=(_isalnum(d)|0)?129:128;break;case 128:b=95==(d|0)?129:133;break;case 129:n=_nextc(a);_pushback(a,n);b=0!=(_isalnum(n)|0)?131:130;break;case 130:b=95==(n|0)?131:132;break;case 131:b=126;break;case 132:b=133;break;case 133:b=92==(d|0)?134:138;break;case 134:d=_nextc(a);b=117==(d|0)?135:136;break;case 135:b=137;break;case 136:_pushback(a,d);d=_read_escape(a);_tokadd(a,d);b=137;break;case 137:b=139;break;case 138:_tokadd(a,d);b=139;break;case 139:_tokfix(a);var na=a,Z=_tok(a),Aa=_toklen(a),
Da=_new_str(na,Z,Aa);HEAP32[HEAP32[(a+1112|0)>>2]>>2]=Da;HEAP32[(a+36|0)>>2]=1;c=315;b=673;break;case 140:var ja=_nextc(a);d=ja;b=38==(ja|0)?141:144;break;case 141:HEAP32[(a+36|0)>>2]=0;var X=_nextc(a);d=X;b=61==(X|0)?142:143;break;case 142:var ya=_intern_gen(a,__str169|0);HEAP16[HEAP32[(a+1112|0)>>2]>>1]=ya;HEAP32[(a+36|0)>>2]=0;c=343;b=673;break;case 143:_pushback(a,d);c=331;b=673;break;case 144:b=61==(d|0)?145:146;break;case 145:var ca=_intern_gen(a,__str19|0);HEAP16[HEAP32[(a+1112|0)>>2]>>1]=
ca;HEAP32[(a+36|0)>>2]=0;c=343;b=673;break;case 146:b=147;break;case 147:_pushback(a,d);b=4==(HEAP32[(a+36|0)>>2]|0)?149:148;break;case 148:b=5==(HEAP32[(a+36|0)>>2]|0)?149:152;break;case 149:b=0!=(g|0)?150:152;break;case 150:b=0!=(_isspace(d&255)|0)?152:151;break;case 151:_yywarning(a,__str170|0);d=352;b=159;break;case 152:b=0==(HEAP32[(a+36|0)>>2]|0)?156:153;break;case 153:b=6==(HEAP32[(a+36|0)>>2]|0)?156:154;break;case 154:b=10==(HEAP32[(a+36|0)>>2]|0)?156:155;break;case 155:b=9==(HEAP32[(a+36|
0)>>2]|0)?156:157;break;case 156:d=352;b=158;break;case 157:d=38;b=158;break;case 158:b=159;break;case 159:b=7==(HEAP32[(a+36|0)>>2]|0)?161:160;break;case 160:b=8==(HEAP32[(a+36|0)>>2]|0)?161:162;break;case 161:HEAP32[(a+36|0)>>2]=4;b=163;break;case 162:HEAP32[(a+36|0)>>2]=0;b=163;break;case 163:c=d;b=673;break;case 164:var Na=_nextc(a);d=Na;b=124==(Na|0)?165:168;break;case 165:HEAP32[(a+36|0)>>2]=0;var Ba=_nextc(a);d=Ba;b=61==(Ba|0)?166:167;break;case 166:var va=_intern_gen(a,__str171|0);HEAP16[HEAP32[(a+
1112|0)>>2]>>1]=va;HEAP32[(a+36|0)>>2]=0;c=343;b=673;break;case 167:_pushback(a,d);c=332;b=673;break;case 168:b=61==(d|0)?169:170;break;case 169:var pb=_intern_gen(a,__str17|0);HEAP16[HEAP32[(a+1112|0)>>2]>>1]=pb;HEAP32[(a+36|0)>>2]=0;c=343;b=673;break;case 170:b=7==(HEAP32[(a+36|0)>>2]|0)?172:171;break;case 171:b=8==(HEAP32[(a+36|0)>>2]|0)?172:173;break;case 172:HEAP32[(a+36|0)>>2]=4;b=174;break;case 173:HEAP32[(a+36|0)>>2]=0;b=174;break;case 174:_pushback(a,d);c=124;b=673;break;case 175:d=_nextc(a);
b=7==(HEAP32[(a+36|0)>>2]|0)?177:176;break;case 176:b=8==(HEAP32[(a+36|0)>>2]|0)?177:180;break;case 177:HEAP32[(a+36|0)>>2]=4;b=64==(d|0)?178:179;break;case 178:c=322;b=673;break;case 179:_pushback(a,d);c=43;b=673;break;case 180:b=61==(d|0)?181:182;break;case 181:var Db=_intern_gen(a,__str32|0);HEAP16[HEAP32[(a+1112|0)>>2]>>1]=Db;HEAP32[(a+36|0)>>2]=0;c=343;b=673;break;case 182:b=0==(HEAP32[(a+36|0)>>2]|0)?191:183;break;case 183:b=6==(HEAP32[(a+36|0)>>2]|0)?191:184;break;case 184:b=10==(HEAP32[(a+
36|0)>>2]|0)?191:185;break;case 185:b=9==(HEAP32[(a+36|0)>>2]|0)?191:186;break;case 186:b=4==(HEAP32[(a+36|0)>>2]|0)?188:187;break;case 187:b=5==(HEAP32[(a+36|0)>>2]|0)?188:195;break;case 188:b=0!=(g|0)?189:195;break;case 189:b=0!=(_isspace(d&255)|0)?195:190;break;case 190:b=0!=(_arg_ambiguous(a)|0)?191:195;break;case 191:HEAP32[(a+36|0)>>2]=0;_pushback(a,d);b=-1!=(d|0)?192:194;break;case 192:b=0!=(_isdigit(d&255)|0)?193:194;break;case 193:d=43;b=227;break;case 194:c=322;b=673;break;case 195:HEAP32[(a+
36|0)>>2]=0;_pushback(a,d);c=43;b=673;break;case 196:d=_nextc(a);b=7==(HEAP32[(a+36|0)>>2]|0)?198:197;break;case 197:b=8==(HEAP32[(a+36|0)>>2]|0)?198:201;break;case 198:HEAP32[(a+36|0)>>2]=4;b=64==(d|0)?199:200;break;case 199:c=323;b=673;break;case 200:_pushback(a,d);c=45;b=673;break;case 201:b=61==(d|0)?202:203;break;case 202:var Ra=_intern_gen(a,__str3371|0);HEAP16[HEAP32[(a+1112|0)>>2]>>1]=Ra;HEAP32[(a+36|0)>>2]=0;c=343;b=673;break;case 203:b=62==(d|0)?204:205;break;case 204:HEAP32[(a+36|0)>>2]=
3;c=353;b=673;break;case 205:b=0==(HEAP32[(a+36|0)>>2]|0)?214:206;break;case 206:b=6==(HEAP32[(a+36|0)>>2]|0)?214:207;break;case 207:b=10==(HEAP32[(a+36|0)>>2]|0)?214:208;break;case 208:b=9==(HEAP32[(a+36|0)>>2]|0)?214:209;break;case 209:b=4==(HEAP32[(a+36|0)>>2]|0)?211:210;break;case 210:b=5==(HEAP32[(a+36|0)>>2]|0)?211:218;break;case 211:b=0!=(g|0)?212:218;break;case 212:b=0!=(_isspace(d&255)|0)?218:213;break;case 213:b=0!=(_arg_ambiguous(a)|0)?214:218;break;case 214:HEAP32[(a+36|0)>>2]=0;_pushback(a,
d);b=-1!=(d|0)?215:217;break;case 215:b=0!=(_isdigit(d&255)|0)?216:217;break;case 216:c=362;b=673;break;case 217:c=323;b=673;break;case 218:HEAP32[(a+36|0)>>2]=0;_pushback(a,d);c=45;b=673;break;case 219:HEAP32[(a+36|0)>>2]=0;var Pa=_nextc(a);d=Pa;b=46==(Pa|0)?220:223;break;case 220:var $a=_nextc(a);d=$a;b=46==($a|0)?221:222;break;case 221:c=336;b=673;break;case 222:_pushback(a,d);c=335;b=673;break;case 223:_pushback(a,d);b=-1!=(d|0)?224:226;break;case 224:b=0!=(_isdigit(d&255)|0)?225:226;break;case 225:_yyerror(a,
__str172|0);b=226;break;case 226:HEAP32[(a+36|0)>>2]=8;c=46;b=673;break;case 227:b=228;break;case 228:r=t=p=q=0;HEAP32[(a+36|0)>>2]=1;j=_newtok(a);b=45==(d|0)?230:229;break;case 229:b=43==(d|0)?230:231;break;case 230:_tokadd(a,d);d=_nextc(a);b=231;break;case 231:b=48==(d|0)?232:343;break;case 232:v=_toklen(a);d=_nextc(a);b=120==(d|0)?234:233;break;case 233:b=88==(d|0)?234:254;break;case 234:d=_nextc(a);b=-1!=(d|0)?235:246;break;case 235:b=0!=(_isxdigit(d&255)|0)?236:246;break;case 236:b=237;break;
case 237:b=95==(d|0)?238:241;break;case 238:b=0!=(q|0)?239:240;break;case 239:b=245;break;case 240:q=d;b=244;break;case 241:b=0!=(_isxdigit(d&255)|0)?243:242;break;case 242:b=245;break;case 243:q=0;var pa=a,ub=_tolower(d);_tokadd(pa,ub);b=244;break;case 244:var Ha=_nextc(a);d=Ha;b=-1!=(Ha|0)?237:245;break;case 245:b=246;break;case 246:_pushback(a,d);_tokfix(a);b=(_toklen(a)|0)==(v|0)?247:250;break;case 247:b=248;break;case 248:_yyerror(a,__str173|0);c=0;b=673;break;case 249:b=253;break;case 250:b=
0!=(q|0)?251:252;break;case 251:b=371;break;case 252:b=253;break;case 253:var Ia=a,ma=_tok(a),Ja=_new_int(Ia,ma,16);HEAP32[HEAP32[(a+1112|0)>>2]>>2]=Ja;c=313;b=673;break;case 254:b=98==(d|0)?256:255;break;case 255:b=66==(d|0)?256:277;break;case 256:d=_nextc(a);b=48==(d|0)?258:257;break;case 257:b=49==(d|0)?258:269;break;case 258:b=259;break;case 259:b=95==(d|0)?260:263;break;case 260:b=0!=(q|0)?261:262;break;case 261:b=268;break;case 262:q=d;b=267;break;case 263:b=48!=(d|0)?264:266;break;case 264:b=
49!=(d|0)?265:266;break;case 265:b=268;break;case 266:q=0;_tokadd(a,d);b=267;break;case 267:var Sa=_nextc(a);d=Sa;b=-1!=(Sa|0)?259:268;break;case 268:b=269;break;case 269:_pushback(a,d);_tokfix(a);b=(_toklen(a)|0)==(v|0)?270:273;break;case 270:b=271;break;case 271:_yyerror(a,__str173|0);c=0;b=673;break;case 272:b=276;break;case 273:b=0!=(q|0)?274:275;break;case 274:b=371;break;case 275:b=276;break;case 276:var qb=a,Sb=_tok(a),Eb=_new_int(qb,Sb,2);HEAP32[HEAP32[(a+1112|0)>>2]>>2]=Eb;c=313;b=673;break;
case 277:b=100==(d|0)?279:278;break;case 278:b=68==(d|0)?279:299;break;case 279:d=_nextc(a);b=-1!=(d|0)?280:291;break;case 280:b=0!=(_isdigit(d&255)|0)?281:291;break;case 281:b=282;break;case 282:b=95==(d|0)?283:286;break;case 283:b=0!=(q|0)?284:285;break;case 284:b=290;break;case 285:q=d;b=289;break;case 286:b=0!=(_isdigit(d&255)|0)?288:287;break;case 287:b=290;break;case 288:q=0;_tokadd(a,d);b=289;break;case 289:var eb=_nextc(a);d=eb;b=-1!=(eb|0)?282:290;break;case 290:b=291;break;case 291:_pushback(a,
d);_tokfix(a);b=(_toklen(a)|0)==(v|0)?292:295;break;case 292:b=293;break;case 293:_yyerror(a,__str173|0);c=0;b=673;break;case 294:b=298;break;case 295:b=0!=(q|0)?296:297;break;case 296:b=371;break;case 297:b=298;break;case 298:var ab=a,Fb=_tok(a),Ta=_new_int(ab,Fb,10);HEAP32[HEAP32[(a+1112|0)>>2]>>2]=Ta;c=313;b=673;break;case 299:b=95==(d|0)?300:301;break;case 300:b=313;break;case 301:b=111==(d|0)?303:302;break;case 302:b=79==(d|0)?303:310;break;case 303:d=_nextc(a);b=-1==(d|0)?306:304;break;case 304:b=
95==(d|0)?306:305;break;case 305:b=0!=(_isdigit(d&255)|0)?309:306;break;case 306:b=307;break;case 307:_yyerror(a,__str173|0);c=0;b=673;break;case 308:b=309;break;case 309:b=310;break;case 310:b=48<=(d|0)?311:332;break;case 311:b=55>=(d|0)?312:332;break;case 312:b=313;break;case 313:b=314;break;case 314:b=95==(d|0)?315:318;break;case 315:b=0!=(q|0)?316:317;break;case 316:b=325;break;case 317:q=d;b=324;break;case 318:b=48>(d|0)?320:319;break;case 319:b=57<(d|0)?320:321;break;case 320:b=325;break;case 321:b=
55<(d|0)?322:323;break;case 322:b=335;break;case 323:q=0;_tokadd(a,d);b=324;break;case 324:var Ea=_nextc(a);d=Ea;b=-1!=(Ea|0)?314:325;break;case 325:b=(_toklen(a)|0)>(v|0)?326:329;break;case 326:_pushback(a,d);_tokfix(a);b=0!=(q|0)?327:328;break;case 327:b=371;break;case 328:var wa=a,Ka=_tok(a),bb=_new_int(wa,Ka,8);HEAP32[HEAP32[(a+1112|0)>>2]>>2]=bb;c=313;b=673;break;case 329:b=0!=(q|0)?330:331;break;case 330:_pushback(a,d);b=371;break;case 331:b=332;break;case 332:b=55<(d|0)?333:336;break;case 333:b=
57>=(d|0)?334:336;break;case 334:b=335;break;case 335:_yyerror(a,__str174|0);b=342;break;case 336:b=46==(d|0)?339:337;break;case 337:b=101==(d|0)?339:338;break;case 338:b=69==(d|0)?339:340;break;case 339:_tokadd(a,48);b=341;break;case 340:_pushback(a,d);var xa=_new_int(a,__str175|0,10);HEAP32[HEAP32[(a+1112|0)>>2]>>2]=xa;c=313;b=673;break;case 341:b=342;break;case 342:b=343;break;case 343:b=344;break;case 344:var W=d;b=48==(W|0)||49==(W|0)||50==(W|0)||51==(W|0)||52==(W|0)||53==(W|0)||54==(W|0)||55==
(W|0)||56==(W|0)||57==(W|0)?345:46==(W|0)?346:101==(W|0)||69==(W|0)?356:95==(W|0)?364:367;break;case 345:q=0;_tokadd(a,d);b=368;break;case 346:b=0!=(q|0)?347:348;break;case 347:b=371;break;case 348:b=0!=(t|0)?350:349;break;case 349:b=0!=(p|0)?350:351;break;case 350:b=369;break;case 351:w=_nextc(a);b=-1==(w|0)?353:352;break;case 352:b=0!=(_isdigit(w&255)|0)?354:353;break;case 353:_pushback(a,w);b=369;break;case 354:d=w;b=355;break;case 355:_tokadd(a,46);_tokadd(a,d);r=r+1|0;t=t+1|0;q=0;b=368;break;
case 356:b=0!=(q|0)?357:358;break;case 357:_pushback(a,d);d=q;b=369;break;case 358:b=0!=(p|0)?359:360;break;case 359:b=369;break;case 360:_tokadd(a,d);p=p+1|0;r=r+1|0;q=d;d=_nextc(a);b=45!=(d|0)?361:363;break;case 361:b=43!=(d|0)?362:363;break;case 362:b=344;break;case 363:_tokadd(a,d);q=d;b=368;break;case 364:b=0!=(q|0)?365:366;break;case 365:b=369;break;case 366:q=d;b=368;break;case 367:b=369;break;case 368:d=_nextc(a);b=344;break;case 369:_pushback(a,d);b=0!=(q|0)?370:372;break;case 370:b=371;
break;case 371:_yyerror_i(a,__str176|0,q);b=372;break;case 372:_tokfix(a);b=0!=(r|0)?373:380;break;case 373:var qa=___errno();HEAP32[qa>>2]=0;var fb=_tok(a);m=_strtod(fb,x);b=0==m?374:376;break;case 374:var Ua=HEAP32[x>>2],ga=_tok(a);b=(Ua|0)==(ga|0)?375:376;break;case 375:var gb=a,hb=_tok(a);_yywarning_s(gb,__str177|0,hb);b=379;break;case 376:var ra=___errno();b=34==(HEAP32[ra>>2]|0)?377:378;break;case 377:var Y=a,cb=_tok(a);_yywarning_s(Y,__str178|0,cb);var ib=___errno();HEAP32[ib>>2]=0;b=378;break;
case 378:b=379;break;case 379:var Ca=a,oa=_tok(a),jb=_new_float(Ca,oa);HEAP32[HEAP32[(a+1112|0)>>2]>>2]=jb;c=314;b=673;break;case 380:var za=a,sa=_tok(a),Va=_new_int(za,sa,10);HEAP32[HEAP32[(a+1112|0)>>2]>>2]=Va;c=313;b=673;break;case 381:var db=a+52|0;HEAP32[db>>2]=HEAP32[db>>2]-1|0;b=382;break;case 382:HEAP32[(a+44|0)>>2]=HEAP32[(a+44|0)>>2]>>>1|HEAP32[(a+44|0)>>2]&1;HEAP32[(a+48|0)>>2]=HEAP32[(a+48|0)>>2]>>>1|HEAP32[(a+48|0)>>2]&1;b=41==(d|0)?383:384;break;case 383:HEAP32[(a+36|0)>>2]=3;b=385;
break;case 384:HEAP32[(a+36|0)>>2]=2;b=385;break;case 385:c=d;b=673;break;case 386:d=_nextc(a);b=58==(d|0)?387:398;break;case 387:b=0==(HEAP32[(a+36|0)>>2]|0)?396:388;break;case 388:b=6==(HEAP32[(a+36|0)>>2]|0)?396:389;break;case 389:b=10==(HEAP32[(a+36|0)>>2]|0)?396:390;break;case 390:b=9==(HEAP32[(a+36|0)>>2]|0)?396:391;break;case 391:b=9==(HEAP32[(a+36|0)>>2]|0)?396:392;break;case 392:b=4==(HEAP32[(a+36|0)>>2]|0)?394:393;break;case 393:b=5==(HEAP32[(a+36|0)>>2]|0)?394:397;break;case 394:b=0!=(g|
0)?395:397;break;case 395:b=0!=(_isspace(255)|0)?397:396;break;case 396:HEAP32[(a+36|0)>>2]=0;c=342;b=673;break;case 397:HEAP32[(a+36|0)>>2]=8;c=341;b=673;break;case 398:b=1==(HEAP32[(a+36|0)>>2]|0)?402:399;break;case 399:b=2==(HEAP32[(a+36|0)>>2]|0)?402:400;break;case 400:b=3==(HEAP32[(a+36|0)>>2]|0)?402:401;break;case 401:b=0!=(_isspace(d&255)|0)?402:403;break;case 402:_pushback(a,d);HEAP32[(a+36|0)>>2]=0;c=58;b=673;break;case 403:_pushback(a,d);HEAP32[(a+36|0)>>2]=7;c=354;b=673;break;case 404:b=
0==(HEAP32[(a+36|0)>>2]|0)?408:405;break;case 405:b=6==(HEAP32[(a+36|0)>>2]|0)?408:406;break;case 406:b=10==(HEAP32[(a+36|0)>>2]|0)?408:407;break;case 407:b=9==(HEAP32[(a+36|0)>>2]|0)?408:409;break;case 408:c=355;b=673;break;case 409:var Fa=_nextc(a);d=Fa;b=61==(Fa|0)?410:411;break;case 410:var kb=_intern_gen(a,__str35|0);HEAP16[HEAP32[(a+1112|0)>>2]>>1]=kb;HEAP32[(a+36|0)>>2]=0;c=343;b=673;break;case 411:_pushback(a,d);b=4==(HEAP32[(a+36|0)>>2]|0)?413:412;break;case 412:b=5==(HEAP32[(a+36|0)>>2]|
0)?413:416;break;case 413:b=0!=(g|0)?414:416;break;case 414:b=0!=(_isspace(d&255)|0)?416:415;break;case 415:_arg_ambiguous(a);c=355;b=673;break;case 416:b=7==(HEAP32[(a+36|0)>>2]|0)?418:417;break;case 417:b=8==(HEAP32[(a+36|0)>>2]|0)?418:419;break;case 418:HEAP32[(a+36|0)>>2]=4;b=420;break;case 419:HEAP32[(a+36|0)>>2]=0;b=420;break;case 420:c=47;b=673;break;case 421:var La=_nextc(a);d=La;b=61==(La|0)?422:423;break;case 422:var vb=_intern_gen(a,__str1870|0);HEAP16[HEAP32[(a+1112|0)>>2]>>1]=vb;HEAP32[(a+
36|0)>>2]=0;c=343;b=673;break;case 423:b=7==(HEAP32[(a+36|0)>>2]|0)?425:424;break;case 424:b=8==(HEAP32[(a+36|0)>>2]|0)?425:426;break;case 425:HEAP32[(a+36|0)>>2]=4;b=427;break;case 426:HEAP32[(a+36|0)>>2]=0;b=427;break;case 427:_pushback(a,d);c=94;b=673;break;case 428:HEAP32[(a+36|0)>>2]=0;c=59;b=673;break;case 429:HEAP32[(a+36|0)>>2]=0;c=44;b=673;break;case 430:b=7==(HEAP32[(a+36|0)>>2]|0)?432:431;break;case 431:b=8==(HEAP32[(a+36|0)>>2]|0)?432:435;break;case 432:var Wa=_nextc(a);d=Wa;b=64!=(Wa|
0)?433:434;break;case 433:_pushback(a,d);b=434;break;case 434:HEAP32[(a+36|0)>>2]=4;b=436;break;case 435:HEAP32[(a+36|0)>>2]=0;b=436;break;case 436:c=126;b=673;break;case 437:b=0==(HEAP32[(a+36|0)>>2]|0)?441:438;break;case 438:b=6==(HEAP32[(a+36|0)>>2]|0)?441:439;break;case 439:b=10==(HEAP32[(a+36|0)>>2]|0)?441:440;break;case 440:b=9==(HEAP32[(a+36|0)>>2]|0)?441:442;break;case 441:d=345;b=448;break;case 442:b=4==(HEAP32[(a+36|0)>>2]|0)?444:443;break;case 443:b=5==(HEAP32[(a+36|0)>>2]|0)?444:447;break;
case 444:b=0!=(g|0)?445:447;break;case 445:b=0!=(_isspace(255)|0)?447:446;break;case 446:d=346;b=447;break;case 447:b=448;break;case 448:var rb=a+52|0;HEAP32[rb>>2]=HEAP32[rb>>2]+1|0;HEAP32[(a+44|0)>>2]<<=1;HEAP32[(a+48|0)>>2]<<=1;HEAP32[(a+36|0)>>2]=0;c=d;b=673;break;case 449:var Gb=a+52|0;HEAP32[Gb>>2]=HEAP32[Gb>>2]+1|0;b=7==(HEAP32[(a+36|0)>>2]|0)?451:450;break;case 450:b=8==(HEAP32[(a+36|0)>>2]|0)?451:456;break;case 451:HEAP32[(a+36|0)>>2]=4;var lb=_nextc(a);d=lb;b=93==(lb|0)?452:455;break;case 452:var Xa=
_nextc(a);d=Xa;b=61==(Xa|0)?453:454;break;case 453:c=338;b=673;break;case 454:_pushback(a,d);c=337;b=673;break;case 455:_pushback(a,d);c=91;b=673;break;case 456:b=0==(HEAP32[(a+36|0)>>2]|0)?460:457;break;case 457:b=6==(HEAP32[(a+36|0)>>2]|0)?460:458;break;case 458:b=10==(HEAP32[(a+36|0)>>2]|0)?460:459;break;case 459:b=9==(HEAP32[(a+36|0)>>2]|0)?460:461;break;case 460:d=348;b=466;break;case 461:b=4==(HEAP32[(a+36|0)>>2]|0)?463:462;break;case 462:b=5==(HEAP32[(a+36|0)>>2]|0)?463:465;break;case 463:b=
0!=(g|0)?464:465;break;case 464:d=348;b=465;break;case 465:b=466;break;case 466:b=467;break;case 467:HEAP32[(a+36|0)>>2]=0;HEAP32[(a+44|0)>>2]<<=1;HEAP32[(a+48|0)>>2]<<=1;c=d;b=673;break;case 468:b=0!=(HEAP32[(a+56|0)>>2]|0)?469:471;break;case 469:b=(HEAP32[(a+56|0)>>2]|0)==(HEAP32[(a+52|0)>>2]|0)?470:471;break;case 470:HEAP32[(a+36|0)>>2]=0;HEAP32[(a+56|0)>>2]=0;var Ma=a+52|0;HEAP32[Ma>>2]=HEAP32[Ma>>2]-1|0;HEAP32[(a+44|0)>>2]<<=1;HEAP32[(a+48|0)>>2]<<=1;c=360;b=673;break;case 471:b=4==(HEAP32[(a+
36|0)>>2]|0)?475:472;break;case 472:b=5==(HEAP32[(a+36|0)>>2]|0)?475:473;break;case 473:b=1==(HEAP32[(a+36|0)>>2]|0)?475:474;break;case 474:b=3==(HEAP32[(a+36|0)>>2]|0)?475:476;break;case 475:d=123;b=480;break;case 476:b=2==(HEAP32[(a+36|0)>>2]|0)?477:478;break;case 477:d=350;b=479;break;case 478:d=349;b=479;break;case 479:b=480;break;case 480:HEAP32[(a+44|0)>>2]<<=1;HEAP32[(a+48|0)>>2]<<=1;HEAP32[(a+36|0)>>2]=0;c=d;b=673;break;case 481:d=_nextc(a);b=10==(d|0)?482:483;break;case 482:var mb=a+28|0;
HEAP32[mb>>2]=HEAP32[mb>>2]+1|0;HEAP32[(a+32|0)>>2]=0;g=1;b=5;break;case 483:_pushback(a,d);c=92;b=673;break;case 484:b=0==(HEAP32[(a+36|0)>>2]|0)?488:485;break;case 485:b=6==(HEAP32[(a+36|0)>>2]|0)?488:486;break;case 486:b=10==(HEAP32[(a+36|0)>>2]|0)?488:487;break;case 487:b=9==(HEAP32[(a+36|0)>>2]|0)?488:523;break;case 488:d=_nextc(a);b=489;break;case 489:b=-1==(d|0)?491:490;break;case 490:b=0!=(_isalnum(d&255)|0)?492:491;break;case 491:s=d;d=81;b=495;break;case 492:s=_nextc(a);b=0!=(_isalnum(s)|
0)?493:494;break;case 493:_yyerror(a,__str179|0);c=0;b=673;break;case 494:b=495;break;case 495:b=-1==(d|0)?497:496;break;case 496:b=-1==(s|0)?497:498;break;case 497:_yyerror(a,__str180|0);c=0;b=673;break;case 498:b=40==(s|0)?499:500;break;case 499:s=41;b=509;break;case 500:b=91==(s|0)?501:502;break;case 501:s=93;b=508;break;case 502:b=123==(s|0)?503:504;break;case 503:s=125;b=507;break;case 504:b=60==(s|0)?505:506;break;case 505:s=62;b=506;break;case 506:b=507;break;case 507:b=508;break;case 508:b=
509;break;case 509:HEAP32[(a+40|0)>>2]=s;var Ya=d;b=81==(Ya|0)?510:113==(Ya|0)?511:87==(Ya|0)?512:119==(Ya|0)?516:114==(Ya|0)?520:115==(Ya|0)?521:522;break;case 510:c=358;b=673;break;case 511:c=358;b=673;break;case 512:b=513;break;case 513:d=_nextc(a);b=514;break;case 514:b=0!=(_isspace(d)|0)?513:515;break;case 515:_pushback(a,d);c=356;b=673;break;case 516:b=517;break;case 517:d=_nextc(a);b=518;break;case 518:b=0!=(_isspace(d)|0)?517:519;break;case 519:_pushback(a,d);c=357;b=673;break;case 520:c=
355;b=673;break;case 521:HEAP32[(a+36|0)>>2]=7;c=354;b=673;break;case 522:_yyerror(a,__str179|0);c=0;b=673;break;case 523:var Hb=_nextc(a);d=Hb;b=61==(Hb|0)?524:525;break;case 524:var Qa=_intern_gen(a,__str36|0);HEAP16[HEAP32[(a+1112|0)>>2]>>1]=Qa;HEAP32[(a+36|0)>>2]=0;c=343;b=673;break;case 525:b=4==(HEAP32[(a+36|0)>>2]|0)?527:526;break;case 526:b=5==(HEAP32[(a+36|0)>>2]|0)?527:530;break;case 527:b=0!=(g|0)?528:530;break;case 528:b=0!=(_isspace(d&255)|0)?530:529;break;case 529:b=489;break;case 530:b=
7==(HEAP32[(a+36|0)>>2]|0)?532:531;break;case 531:b=8==(HEAP32[(a+36|0)>>2]|0)?532:533;break;case 532:HEAP32[(a+36|0)>>2]=4;b=534;break;case 533:HEAP32[(a+36|0)>>2]=0;b=534;break;case 534:_pushback(a,d);c=37;b=673;break;case 535:HEAP32[(a+36|0)>>2]=1;j=_newtok(a);var S=d=_nextc(a);b=95==(S|0)?536:126==(S|0)||42==(S|0)||36==(S|0)||63==(S|0)||33==(S|0)||64==(S|0)||47==(S|0)||92==(S|0)||59==(S|0)||44==(S|0)||46==(S|0)||61==(S|0)||58==(S|0)||60==(S|0)||62==(S|0)||34==(S|0)?537:45==(S|0)?538:38==(S|0)||
96==(S|0)||39==(S|0)||43==(S|0)?540:49==(S|0)||50==(S|0)||51==(S|0)||52==(S|0)||53==(S|0)||54==(S|0)||55==(S|0)||56==(S|0)||57==(S|0)?543:48==(S|0)?556:551;break;case 536:d=_nextc(a);_pushback(a,d);d=95;b=537;break;case 537:_tokadd(a,36);_tokadd(a,d);_tokfix(a);var wb=a,ka=_tok(a),xb=_intern_gen(wb,ka);HEAP16[HEAP32[(a+1112|0)>>2]>>1]=xb;c=308;b=673;break;case 538:_tokadd(a,36);_tokadd(a,d);d=_nextc(a);_pushback(a,d);b=539;break;case 539:_tokfix(a);var sb=a,yb=_tok(a),Nb=_intern_gen(sb,yb);HEAP16[HEAP32[(a+
1112|0)>>2]>>1]=Nb;c=308;b=673;break;case 540:b=7==(i|0)?541:542;break;case 541:_tokadd(a,36);_tokadd(a,d);b=539;break;case 542:var Ib=_new_back_ref(a,d);HEAP32[HEAP32[(a+1112|0)>>2]>>2]=Ib;c=320;b=673;break;case 543:b=544;break;case 544:_tokadd(a,d);d=_nextc(a);b=545;break;case 545:if(-1!=(d|0))b=546;else{var Oa=0;b=547}break;case 546:Oa=0!=(_isdigit(d)|0);b=547;break;case 547:b=Oa?544:548;break;case 548:_pushback(a,d);b=7==(i|0)?549:550;break;case 549:b=539;break;case 550:_tokfix(a);var V=a,Za=
_tok(a),$=_atoi(Za),Jb=_new_nth_ref(V,$);HEAP32[HEAP32[(a+1112|0)>>2]>>2]=Jb;c=319;b=673;break;case 551:b=0!=(_isalnum(d)|0)?555:552;break;case 552:b=95==(d|0)?555:553;break;case 553:b=127>=d>>>0?554:555;break;case 554:_pushback(a,d);c=36;b=673;break;case 555:b=556;break;case 556:_tokadd(a,36);b=557;break;case 557:b=577;break;case 558:d=_nextc(a);j=_newtok(a);_tokadd(a,64);b=64==(d|0)?559:560;break;case 559:_tokadd(a,64);d=_nextc(a);b=560;break;case 560:b=-1!=(d|0)?561:566;break;case 561:b=0!=(_isdigit(d)|
0)?562:566;break;case 562:b=1==(HEAP32[(a+1104|0)>>2]|0)?563:564;break;case 563:_yyerror_i(a,__str181|0,d);b=565;break;case 564:_yyerror_i(a,__str182|0,d);b=565;break;case 565:c=0;b=673;break;case 566:b=0!=(_isalnum(d)|0)?570:567;break;case 567:b=95==(d|0)?570:568;break;case 568:b=127>=d>>>0?569:570;break;case 569:_pushback(a,d);c=64;b=673;break;case 570:b=577;break;case 571:j=_newtok(a);b=577;break;case 572:b=0!=(_isalnum(d)|0)?576:573;break;case 573:b=95==(d|0)?576:574;break;case 574:b=127>=d>>>
0?575:576;break;case 575:_yyerror_i(a,__str183|0,d);b=5;break;case 576:j=_newtok(a);b=577;break;case 577:b=578;break;case 578:_tokadd(a,d);d=_nextc(a);b=0>(d|0)?579:580;break;case 579:b=585;break;case 580:b=581;break;case 581:if(0!=(_isalnum(d)|0)){var tb=1;b=584}else b=582;break;case 582:95==(d|0)?(tb=1,b=584):b=583;break;case 583:tb=127>=d>>>0^1;b=584;break;case 584:b=tb?578:585;break;case 585:b=0==(j|0)?586:591;break;case 586:b=7==(_toklen(a)|0)?587:591;break;case 587:b=0>(d|0)?589:588;break;case 588:b=
10==(d|0)?589:591;break;case 589:var zb=_tok(a),D=_toklen(a);b=0==(_strncmp(zb,__str184|0,D)|0)?590:591;break;case 590:c=-1;b=673;break;case 591:var Ab=_tok(a)|0,Bb=HEAP8[Ab]<<24>>24;b=64==(Bb|0)||36==(Bb|0)?592:593;break;case 592:_pushback(a,d);b=599;break;case 593:b=33==(d|0)?595:594;break;case 594:b=63==(d|0)?595:597;break;case 595:b=0!=(_peek_n(a,61,0)|0)?597:596;break;case 596:_tokadd(a,d);b=598;break;case 597:_pushback(a,d);b=598;break;case 598:b=599;break;case 599:_tokfix(a);y=0;i=HEAP32[(a+
36|0)>>2];var Kb=_tok(a)|0,Cb=HEAP8[Kb]<<24>>24;b=36==(Cb|0)?600:64==(Cb|0)?601:605;break;case 600:HEAP32[(a+36|0)>>2]=1;y=308;b=672;break;case 601:HEAP32[(a+36|0)>>2]=1;var Tb=_tok(a)+1|0;b=64==(HEAP8[Tb]<<24>>24|0)?602:603;break;case 602:y=311;b=604;break;case 603:y=309;b=604;break;case 604:b=672;break;case 605:b=33==(_toklast(a)|0)?607:606;break;case 606:b=63==(_toklast(a)|0)?607:608;break;case 607:y=307;b=622;break;case 608:b=7==(HEAP32[(a+36|0)>>2]|0)?609:617;break;case 609:var ta=_nextc(a);
d=ta;b=61==(ta|0)?610:615;break;case 610:b=0!=(_peek_n(a,126,0)|0)?615:611;break;case 611:b=0!=(_peek_n(a,62,0)|0)?615:612;break;case 612:b=0!=(_peek_n(a,61,0)|0)?613:614;break;case 613:b=0!=(_peek_n(a,62,1)|0)?614:615;break;case 614:y=306;_tokadd(a,d);_tokfix(a);b=616;break;case 615:_pushback(a,d);b=616;break;case 616:b=617;break;case 617:b=0==(y|0)?618:620;break;case 618:var Yb=_tok(a)|0;b=0!=(_isupper(HEAP8[Yb]<<24>>24)|0)?619:620;break;case 619:y=310;b=621;break;case 620:y=306;b=621;break;case 621:b=
622;break;case 622:b=0==(HEAP32[(a+36|0)>>2]|0)?623:624;break;case 623:b=0!=(h|0)?624:626;break;case 624:b=4==(HEAP32[(a+36|0)>>2]|0)?626:625;break;case 625:b=5==(HEAP32[(a+36|0)>>2]|0)?626:630;break;case 626:b=0!=(_peek_n(a,58,0)|0)?627:629;break;case 627:b=0!=(_peek_n(a,58,1)|0)?629:628;break;case 628:HEAP32[(a+36|0)>>2]=0;_nextc(a);_tokfix(a);var Ob=a,Ub=_tok(a),Pb=_intern_gen(Ob,Ub);HEAP16[HEAP32[(a+1112|0)>>2]>>1]=Pb;c=312;b=673;break;case 629:b=630;break;case 630:b=8!=(HEAP32[(a+36|0)>>2]|0)?
631:656;break;case 631:var P=_tok(a),Vb=_toklen(a);B=_reserved_word(P,Vb);b=0!=(B|0)?632:655;break;case 632:A=HEAP32[(a+36|0)>>2];HEAP32[(a+36|0)>>2]=HEAP32[(B+12|0)>>2];b=7==(A|0)?633:634;break;case 633:var Zb=_intern_gen(a,HEAP32[(B|0)>>2]);HEAP16[HEAP32[(a+1112|0)>>2]>>1]=Zb;c=HEAP32[(B+4|0)>>2];b=673;break;case 634:b=0==(HEAP32[(a+36|0)>>2]|0)?635:636;break;case 635:HEAP32[(a+68|0)>>2]=1;b=636;break;case 636:b=281==(HEAP32[(B+4|0)>>2]|0)?637:649;break;case 637:b=0!=(HEAP32[(a+56|0)>>2]|0)?638:
640;break;case 638:b=(HEAP32[(a+56|0)>>2]|0)==(HEAP32[(a+52|0)>>2]|0)?639:640;break;case 639:HEAP32[(a+56|0)>>2]=0;var $b=a+52|0;HEAP32[$b>>2]=HEAP32[$b>>2]-1|0;c=284;b=673;break;case 640:b=0!=(HEAP32[(a+44|0)>>2]&1|0)?641:642;break;case 641:c=282;b=673;break;case 642:b=0!=(HEAP32[(a+48|0)>>2]&1|0)?643:645;break;case 643:b=5!=(A|0)?644:645;break;case 644:c=283;b=673;break;case 645:b=2==(A|0)?647:646;break;case 646:b=0==(A|0)?647:648;break;case 647:c=283;b=673;break;case 648:c=281;b=673;break;case 649:b=
0==(A|0)?651:650;break;case 650:b=10==(A|0)?651:652;break;case 651:c=HEAP32[(B+4|0)>>2];b=673;break;case 652:b=(HEAP32[(B+4|0)>>2]|0)!=(HEAP32[((B+4|0)+4|0)>>2]|0)?653:654;break;case 653:HEAP32[(a+36|0)>>2]=0;b=654;break;case 654:c=HEAP32[((B+4|0)+4|0)>>2];b=673;break;case 655:b=656;break;case 656:b=0==(HEAP32[(a+36|0)>>2]|0)?663:657;break;case 657:b=6==(HEAP32[(a+36|0)>>2]|0)?663:658;break;case 658:b=10==(HEAP32[(a+36|0)>>2]|0)?663:659;break;case 659:b=9==(HEAP32[(a+36|0)>>2]|0)?663:660;break;case 660:b=
8==(HEAP32[(a+36|0)>>2]|0)?663:661;break;case 661:b=4==(HEAP32[(a+36|0)>>2]|0)?663:662;break;case 662:b=5==(HEAP32[(a+36|0)>>2]|0)?663:667;break;case 663:b=0!=(h|0)?664:665;break;case 664:HEAP32[(a+36|0)>>2]=5;b=666;break;case 665:HEAP32[(a+36|0)>>2]=4;b=666;break;case 666:b=671;break;case 667:b=7==(HEAP32[(a+36|0)>>2]|0)?668:669;break;case 668:HEAP32[(a+36|0)>>2]=3;b=670;break;case 669:HEAP32[(a+36|0)>>2]=1;b=670;break;case 670:b=671;break;case 671:b=672;break;case 672:var nb=a,Qb=_tok(a);G=_intern_gen(nb,
Qb);HEAP16[HEAP32[(a+1112|0)>>2]>>1]=G;c=y;b=673;break;case 673:var Wb=c;STACKTOP=e;return Wb;default:assert(0,"bad label: "+b)}}_parser_yylex.X=1;function _newtok(f){HEAP32[(f+1104|0)>>2]=0;return HEAP32[(f+32|0)>>2]-1|0}function _tokadd(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;b=1024>(HEAP32[(c+1104|0)>>2]|0)?3:4;break;case 3:b=a&255;var d=c+1104|0,g=HEAP32[d>>2];HEAP32[d>>2]=g+1|0;HEAP8[(c+80|0)+g|0]=b;b=4;break;case 4:return;default:assert(0,"bad label: "+b)}}
function _parse_string(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g;a=f;d=e;_newtok(a);b=3;break;case 3:g=b=_nextc(a);b=(b|0)!=(d|0)?4:17;break;case 4:b=-1==(g|0)?5:6;break;case 5:_yyerror(a,__str229|0);c=0;b=18;break;case 6:b=92==(g|0)?7:11;break;case 7:g=_nextc(a);b=(g|0)==(d|0)?8:9;break;case 8:_tokadd(a,g);b=10;break;case 9:_pushback(a,g);b=a;var h=_read_escape(a);_tokadd(b,h);b=10;break;case 10:b=3;break;case 11:b=12;break;case 12:b=35==(g|0)?13:16;break;case 13:g=_nextc(a);b=123==(g|0)?
14:15;break;case 14:_tokfix(a);HEAP32[(a+36|0)>>2]=0;HEAP32[(a+40|0)>>2]=d;HEAP32[(a+68|0)>>2]=1;c=a;b=_tok(a);h=_toklen(a);c=_new_str(c,b,h);HEAP32[HEAP32[(a+1112|0)>>2]>>2]=c;c=318;b=18;break;case 15:_tokadd(a,35);_pushback(a,g);b=3;break;case 16:_tokadd(a,g);b=3;break;case 17:_tokfix(a);HEAP32[(a+36|0)>>2]=1;HEAP32[(a+40|0)>>2]=0;c=a;b=_tok(a);h=_toklen(a);c=_new_str(c,b,h);HEAP32[HEAP32[(a+1112|0)>>2]>>2]=c;c=317;b=18;break;case 18:return c;default:assert(0,"bad label: "+b)}}_parse_string.X=1;
function _nextc(f){var e;for(e=2;;)switch(e){case 2:var b,c,a;c=f;e=0!=(HEAP32[(c+76|0)>>2]|0)?3:4;break;case 3:a=HEAP32[(HEAP32[(c+76|0)>>2]|0)>>2];e=HEAP32[(c+76|0)>>2];HEAP32[(c+76|0)>>2]=HEAP32[(HEAP32[(c+76|0)>>2]+4|0)>>2];_cons_free_gen(c,e);e=18;break;case 4:e=0!=(HEAP32[(c+20|0)>>2]|0)?5:10;break;case 5:e=0!=(_feof(HEAP32[(c+20|0)>>2])|0)?6:7;break;case 6:b=-1;e=19;break;case 7:a=_fgetc(HEAP32[(c+20|0)>>2]);e=-1==(a|0)?8:9;break;case 8:b=-1;e=19;break;case 9:e=15;break;case 10:e=0!=(HEAP32[(c+
12|0)>>2]|0)?11:12;break;case 11:e=HEAP32[(c+12|0)>>2]>>>0>=HEAP32[(c+16|0)>>2]>>>0?12:13;break;case 12:b=-1;e=19;break;case 13:a=c+12|0;e=HEAP32[a>>2];HEAP32[a>>2]=e+1|0;a=HEAP8[e]<<24>>24;e=14;break;case 14:e=15;break;case 15:e=10==(a|0)?16:17;break;case 16:e=17;break;case 17:e=18;break;case 18:b=c+32|0;HEAP32[b>>2]=HEAP32[b>>2]+1|0;b=a;e=19;break;case 19:return b;default:assert(0,"bad label: "+e)}}_nextc.X=1;
function _skip(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;b=3;break;case 3:d=_nextc(c);b=0>(d|0)?4:5;break;case 4:b=8;break;case 5:b=(d|0)==(a<<24>>24|0)?6:7;break;case 6:b=8;break;case 7:b=3;break;case 8:return;default:assert(0,"bad label: "+b)}}
function _pushback(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;b=0>(a|0)?3:4;break;case 3:b=5;break;case 4:b=c+32|0;HEAP32[b>>2]=HEAP32[b>>2]-1|0;b=_cons_gen(c,a,HEAP32[(c+76|0)>>2]);HEAP32[(c+76|0)>>2]=b;b=5;break;case 5:return;default:assert(0,"bad label: "+b)}}function _yywarning(f,e){_yywarn(f,e)}
function _peeks(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h;a=f;d=e;g=_strlen(d);b=0!=(HEAP32[(a+20|0)>>2]|0)?3:9;break;case 3:h=0;b=4;break;case 4:b=0!=HEAP8[d]<<24>>24?5:8;break;case 5:b=a;var i=d;d=i+1|0;var i=HEAP8[i]<<24>>24,j=h;h=j+1|0;b=0!=(_peek_n(b,i,j)|0)?7:6;break;case 6:c=0;b=16;break;case 7:b=4;break;case 8:c=1;b=16;break;case 9:b=0!=(HEAP32[(a+12|0)>>2]|0)?10:14;break;case 10:b=(HEAP32[(a+12|0)>>2]+g|0)>>>0>=HEAP32[(a+16|0)>>2]>>>0?11:14;break;case 11:b=0==(_memcmp(HEAP32[(a+
12|0)>>2],d,g)|0)?12:13;break;case 12:c=1;b=16;break;case 13:b=14;break;case 14:b=15;break;case 15:c=0;b=16;break;case 16:return c;default:assert(0,"bad label: "+b)}}_peeks.X=1;
function _skips(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h;a=f;d=e;b=3;break;case 3:b=4;break;case 4:g=_nextc(a);b=0>(g|0)?5:6;break;case 5:c=g;b=16;break;case 6:b=(g|0)==(HEAP8[d]<<24>>24|0)?7:8;break;case 7:b=9;break;case 8:b=4;break;case 9:d=d+1|0;b=0!=(_peeks(a,d)|0)?10:14;break;case 10:h=_strlen(d);b=11;break;case 11:b=h;h=b-1|0;b=0!=(b|0)?12:13;break;case 12:_nextc(a);b=11;break;case 13:c=1;b=16;break;case 14:d=d-1|0;b=15;break;case 15:b=3;break;case 16:return c;default:assert(0,"bad label: "+
b)}}_skips.X=1;function _parse_qstring(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;a=f;b=0!=(_qstring_node(a,e)|0)?3:4;break;case 3:b=a;c=_tok(a);var d=_toklen(a);b=_new_str(b,c,d);HEAP32[HEAP32[(a+1112|0)>>2]>>2]=b;c=317;b=5;break;case 4:c=0;b=5;break;case 5:return c;default:assert(0,"bad label: "+b)}}
function _read_escape(f){var e=STACKTOP;STACKTOP+=28;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c,a,d,g=e,h=e+12,i=e+16,j=e+24;a=f;d=b=_nextc(a);b=92==(b|0)?3:110==(b|0)?4:116==(b|0)?5:114==(b|0)?6:102==(b|0)?7:118==(b|0)?8:97==(b|0)?9:101==(b|0)?10:48==(b|0)||49==(b|0)||50==(b|0)||51==(b|0)||52==(b|0)||53==(b|0)||54==(b|0)||55==(b|0)?11:120==(b|0)?21:98==(b|0)?32:115==(b|0)?33:77==(b|0)?34:67==(b|0)?41:99==(b|0)?44:
-1==(b|0)?54:55;break;case 3:c=d;b=56;break;case 4:c=10;b=56;break;case 5:c=9;b=56;break;case 6:c=13;b=56;break;case 7:c=12;b=56;break;case 8:c=11;b=56;break;case 9:c=7;b=56;break;case 10:c=27;b=56;break;case 11:HEAP32[(g|0)>>2]=d;HEAP32[h>>2]=1;b=12;break;case 12:b=3>(HEAP32[h>>2]|0)?13:20;break;case 13:b=_nextc(a);HEAP32[(g+(HEAP32[h>>2]<<2)|0)>>2]=b;b=-1==(HEAP32[(g+(HEAP32[h>>2]<<2)|0)>>2]|0)?14:15;break;case 14:b=53;break;case 15:b=48>(HEAP32[(g+(HEAP32[h>>2]<<2)|0)>>2]|0)?17:16;break;case 16:b=
55<(HEAP32[(g+(HEAP32[h>>2]<<2)|0)>>2]|0)?17:18;break;case 17:_pushback(a,HEAP32[(g+(HEAP32[h>>2]<<2)|0)>>2]);b=20;break;case 18:b=19;break;case 19:HEAP32[h>>2]=HEAP32[h>>2]+1|0;b=12;break;case 20:c=d=_scan_oct(g|0,HEAP32[h>>2],h);b=56;break;case 21:HEAP32[j>>2]=0;b=22;break;case 22:b=2>(HEAP32[j>>2]|0)?23:29;break;case 23:b=_nextc(a);HEAP32[(i+(HEAP32[j>>2]<<2)|0)>>2]=b;b=-1==(HEAP32[(i+(HEAP32[j>>2]<<2)|0)>>2]|0)?24:25;break;case 24:b=53;break;case 25:b=0!=(_isxdigit(HEAP32[(i+(HEAP32[j>>2]<<2)|
0)>>2])|0)?27:26;break;case 26:_pushback(a,HEAP32[(i+(HEAP32[j>>2]<<2)|0)>>2]);b=29;break;case 27:b=28;break;case 28:HEAP32[j>>2]=HEAP32[j>>2]+1|0;b=22;break;case 29:d=_scan_hex(i|0,HEAP32[j>>2],j);b=0==(HEAP32[j>>2]|0)?30:31;break;case 30:_yyerror(a,__str228|0);c=0;b=56;break;case 31:c=d;b=56;break;case 32:c=8;b=56;break;case 33:c=32;b=56;break;case 34:d=b=_nextc(a);b=45!=(b|0)?35:36;break;case 35:_yyerror(a,__str228|0);_pushback(a,d);c=0;b=56;break;case 36:d=b=_nextc(a);b=92==(b|0)?37:38;break;
case 37:c=_read_escape(a)|128;b=56;break;case 38:b=-1==(d|0)?39:40;break;case 39:b=53;break;case 40:c=d&255|128;b=56;break;case 41:d=b=_nextc(a);b=45!=(b|0)?42:43;break;case 42:_yyerror(a,__str228|0);_pushback(a,d);c=0;b=56;break;case 43:b=44;break;case 44:d=b=_nextc(a);b=92==(b|0)?45:46;break;case 45:d=_read_escape(a);b=52;break;case 46:b=63==(d|0)?47:48;break;case 47:c=127;b=56;break;case 48:b=-1==(d|0)?49:50;break;case 49:b=53;break;case 50:b=51;break;case 51:b=52;break;case 52:c=d&159;b=56;break;
case 53:b=54;break;case 54:_yyerror(a,__str228|0);c=0;b=56;break;case 55:c=d;b=56;break;case 56:return f=c,STACKTOP=e,f;default:assert(0,"bad label: "+b)}}_read_escape.X=1;function _tokfix(f){var e;for(e=2;;)switch(e){case 2:var b;b=f;e=1024<=(HEAP32[(b+1104|0)>>2]|0)?3:4;break;case 3:_yyerror(b,__str227|0);e=4;break;case 4:HEAP8[(b+80|0)+HEAP32[(b+1104|0)>>2]|0]=0;return;default:assert(0,"bad label: "+e)}}function _tok(f){return f+80|0}function _toklen(f){return HEAP32[(f+1104|0)>>2]}
function _toklast(f){return HEAP8[(f+80|0)+(HEAP32[(f+1104|0)>>2]-1|0)|0]<<24>>24}function _hash(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;b=d=a=e;b=2==(b|0)||1==(b|0)?4:3;break;case 3:d=d+(HEAP8[_hash_asso_values+(HEAP8[c+2|0]&255)|0]&255)|0;b=4;break;case 4:d=d+(HEAP8[_hash_asso_values+(HEAP8[c|0]&255)|0]&255)|0;b=5;break;case 5:return d+(HEAP8[_hash_asso_values+(HEAP8[c+(a-1|0)|0]&255)|0]&255)|0;default:assert(0,"bad label: "+b)}}
function _scan_oct(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h,i;a=f;d=e;g=b;h=a;i=0;c=3;break;case 3:c=d;d=c-1|0;if(0!=(c|0))c=4;else{var j=0;c=6}break;case 4:48<=(HEAP32[h>>2]|0)?c=5:(j=0,c=6);break;case 5:j=55>=(HEAP32[h>>2]|0);c=6;break;case 6:c=j?7:8;break;case 7:i<<=3;c=h;h=c+4|0;i|=HEAP32[c>>2]-48|0;c=3;break;case 8:return HEAP32[g>>2]=(h-a|0)/4&-1,i;default:assert(0,"bad label: "+c)}}function _cons_free_gen(f,e){HEAP32[(e+4|0)>>2]=HEAP32[(f+8|0)>>2];HEAP32[(f+8|0)>>2]=e}
function _yystpcpy(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;b=3;break;case 3:b=a;a=b+1|0;b=HEAP8[b];var d=c;c=d+1|0;HEAP8[d]=b;b=0!=(b<<24>>24|0)?4:5;break;case 4:b=3;break;case 5:return c-1|0;default:assert(0,"bad label: "+b)}}function _yystrlen(f){var e;for(e=2;;)switch(e){case 2:var b,c;b=f;c=0;e=3;break;case 3:e=0!=HEAP8[b+c|0]<<24>>24?4:6;break;case 4:e=5;break;case 5:c=c+1|0;e=3;break;case 6:return c;default:assert(0,"bad label: "+e)}}
function _local_var_p(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g;b=f;a=e;d=HEAP32[(b+72|0)>>2];b=3;break;case 3:b=0!=(d|0)?4:10;break;case 4:g=HEAP32[(d|0)>>2];b=5;break;case 5:b=0!=(g|0)?6:9;break;case 6:b=((HEAP32[(g|0)>>2]&65535)<<16>>16|0)==(a<<16>>16|0)?7:8;break;case 7:c=1;b=11;break;case 8:g=HEAP32[(g+4|0)>>2];b=5;break;case 9:d=HEAP32[(d+4|0)>>2];b=3;break;case 10:c=0;b=11;break;case 11:return c;default:assert(0,"bad label: "+b)}}
function _arg_ambiguous(f){_yywarning(f,__str226|0);return 1}function _yyerror_i(f,e,b){var c=STACKTOP;STACKTOP+=256;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");_snprintf(c|0,256,e,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=b,tempInt));_yyerror(f,c|0);STACKTOP=c}
function _yywarning_s(f,e,b){var c=STACKTOP;STACKTOP+=256;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");_snprintf(c|0,256,e,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=b,tempInt));_yywarning(f,c|0);STACKTOP=c}function _new_float(f,e){var b=_parser_strdup(f,e);return _cons_gen(f,51,b)}function _new_back_ref(f,e){return _cons_gen(f,46,e)}function _new_nth_ref(f,e){return _cons_gen(f,45,e)}
function _peek_n(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h,i,j;d=f;g=e;h=b;i=0;c=3;break;case 3:j=_nextc(d);c=0>(j|0)?4:5;break;case 4:a=0;c=13;break;case 5:c=d;var l=_list1_gen(d,j);i=_append_gen(c,i,l);c=6;break;case 6:c=h;h=c-1|0;c=0!=(c|0)?3:7;break;case 7:c=0!=(HEAP32[(d+76|0)>>2]|0)?8:9;break;case 8:c=d;var l=HEAP32[(d+76|0)>>2],k=_list1_gen(d,i);c=_append_gen(c,l,k);HEAP32[(d+76|0)>>2]=c;c=10;break;case 9:HEAP32[(d+76|0)>>2]=i;c=10;break;case 10:c=(j|0)==(g|0)?11:12;break;case 11:a=
1;c=13;break;case 12:a=0;c=13;break;case 13:return a;default:assert(0,"bad label: "+c)}}_peek_n.X=1;
function _reserved_word(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h;a=f;d=e;b=12>=d>>>0?3:11;break;case 3:b=2<=d>>>0?4:11;break;case 4:g=_hash(a,d);b=50>=(g|0)?5:10;break;case 5:b=0<=(g|0)?6:10;break;case 6:h=HEAP32[(_reserved_word_wordlist+(g<<4)|0)>>2];b=(HEAP8[a]<<24>>24|0)==(HEAP8[h]<<24>>24|0)?7:9;break;case 7:b=0!=(_strcmp(a+1|0,h+1|0)|0)?9:8;break;case 8:c=_reserved_word_wordlist+(g<<4)|0;b=12;break;case 9:b=10;break;case 10:b=11;break;case 11:c=0;b=12;break;case 12:return c;default:assert(0,
"bad label: "+b)}}_reserved_word.X=1;function _parser_strdup(f,e){var b=_strlen(e);return _parser_strndup(f,e,b)}function _parser_strndup(f,e,b){f=_parser_palloc(f,b+1|0);assert(0===b%1,"memcpy given "+b+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(f,e,b,1);HEAP8[f+b|0]=0;return f}
function _scan_hex(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h,i,j;a=f;d=e;g=b;h=a;i=0;c=3;break;case 3:c=d;d=c-1|0;if(0!=(c|0))c=4;else{var l=0;c=6}break;case 4:0!=(HEAP32[h>>2]|0)?c=5:(l=0,c=6);break;case 5:j=l=_strchr(_scan_hex_hexdigit|0,HEAP32[h>>2]);l=0!=(l|0);c=6;break;case 6:c=l?7:8;break;case 7:i<<=4;i|=(j-_scan_hex_hexdigit|0)&15;h=h+4|0;c=3;break;case 8:return HEAP32[g>>2]=(h-a|0)/4&-1,i;default:assert(0,"bad label: "+c)}}_scan_hex.X=1;
function _qstring_node(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g;a=f;d=e;_newtok(a);b=3;break;case 3:g=b=_nextc(a);b=(b|0)!=(d|0)?4:16;break;case 4:b=-1==(g|0)?5:6;break;case 5:_yyerror(a,__str229|0);c=0;b=17;break;case 6:b=92==(g|0)?7:15;break;case 7:b=g=_nextc(a);b=10==(b|0)?8:92==(b|0)?9:39==(b|0)?10:13;break;case 8:b=a+28|0;HEAP32[b>>2]=HEAP32[b>>2]+1|0;HEAP32[(a+32|0)>>2]=0;b=3;break;case 9:g=92;b=14;break;case 10:b=39==(d|0)?11:12;break;case 11:g=39;b=14;break;case 12:b=13;break;case 13:_tokadd(a,
92);b=14;break;case 14:b=15;break;case 15:_tokadd(a,g);b=3;break;case 16:_tokfix(a);HEAP32[(a+36|0)>>2]=1;c=a;b=_tok(a);var h=_toklen(a);c=_new_str(c,b,h);b=17;break;case 17:return c;default:assert(0,"bad label: "+b)}}_qstring_node.X=1;
function _yytnamerr(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h;a=f;d=e;b=34==(HEAP8[d]<<24>>24|0)?3:17;break;case 3:g=0;h=d;b=4;break;case 4:h=b=h+1|0;b=HEAP8[b]<<24>>24;b=39==(b|0)||44==(b|0)?5:92==(b|0)?6:34==(b|0)?12:9;break;case 5:b=16;break;case 6:h=b=h+1|0;b=92!=(HEAP8[b]<<24>>24|0)?7:8;break;case 7:b=16;break;case 8:b=9;break;case 9:b=0!=(a|0)?10:11;break;case 10:HEAP8[a+g|0]=HEAP8[h];b=11;break;case 11:g=g+1|0;b=15;break;case 12:b=0!=(a|0)?13:14;break;case 13:HEAP8[a+g|0]=0;b=14;
break;case 14:c=g;b=20;break;case 15:b=4;break;case 16:b=17;break;case 17:b=0!=(a|0)?19:18;break;case 18:c=_yystrlen(d);b=20;break;case 19:c=_yystpcpy(a,d)-a|0;b=20;break;case 20:return c;default:assert(0,"bad label: "+b)}}_yytnamerr.X=1;function _list6_gen(f,e,b,c,a,d,g){g=_cons_gen(f,g,0);d=_cons_gen(f,d,g);a=_cons_gen(f,a,d);c=_cons_gen(f,c,a);b=_cons_gen(f,b,c);return _cons_gen(f,e,b)}
function _list5_gen(f,e,b,c,a,d){d=_cons_gen(f,d,0);a=_cons_gen(f,a,d);c=_cons_gen(f,c,a);b=_cons_gen(f,b,c);return _cons_gen(f,e,b)}function _parser_palloc(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=_mrb_pool_alloc(HEAP32[(c+4|0)>>2],e);b=0!=(a|0)?4:3;break;case 3:throw _longjmp(c+1372|0,1),"Reached an unreachable!";case 4:return a;default:assert(0,"bad label: "+b)}}
function _yy_symbol_value_print(f,e,b){for(f=2;;)switch(f){case 2:f=0!=(b|0)?4:3;break;case 3:f=6;break;case 4:f=5;break;case 5:f=6;break;case 6:return;default:assert(0,"bad label: "+f)}}function _list4_gen(f,e,b,c,a){a=_cons_gen(f,a,0);c=_cons_gen(f,c,a);b=_cons_gen(f,b,c);return _cons_gen(f,e,b)}function _local_add(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;b=0!=(_local_var_p(c,a)|0)?4:3;break;case 3:_local_add_f(c,a);b=4;break;case 4:return;default:assert(0,"bad label: "+b)}}
function _mrb_ary_new_capa(f,e,b){e=_ary_new_capa(e,b);_mrb_obj_value217(f,e)}function _ary_new_capa(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;d=a<<3|0;b=(d|0)<(a|0)?3:4;break;case 3:b=c;var g=_mrb_class_obj_get(c,__str6168|0);_mrb_raise(b,g,__str52214|0);b=4;break;case 4:return b=_mrb_obj_alloc(c,15,HEAP32[(c+92|0)>>2]),c=_mrb_malloc(c,d),HEAP32[(b+20|0)>>2]=c,HEAP32[(b+16|0)>>2]=a,HEAP32[(b+12|0)>>2]=0,b;default:assert(0,"bad label: "+b)}}
function _mrb_obj_value217(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b,g;g=a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|HEAP32[g>>2]&255;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+
c)}}function _mrb_ary_new(f,e){_mrb_ary_new_capa(f,e,0)}
function _mrb_ary_new_from_values(f,e,b,c){var a=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=a+8;_mrb_ary_new_capa(d,e,b);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];e=HEAP32[(a|0)>>2];_array_copy(HEAP32[(e+20|0)>>2],c,b);HEAP32[(e+12|0)>>2]=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>
2]=HEAP32[a>>2];HEAP32[f+4>>2]=HEAP32[a+4>>2];STACKTOP=a}function _array_copy(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h;a=f;d=e;g=b;h=0;c=3;break;case 3:c=h>>>0<g>>>0?4:6;break;case 4:c=a+(h<<3)|0;var i=d+(h<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[i>>2];HEAP32[c+4>>2]=HEAP32[i+4>>2];c=5;break;case 5:h=h+1|0;c=3;break;case 6:return;default:assert(0,"bad label: "+c)}}
function _mrb_assoc_new(f,e,b,c){var a=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];d=a|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[d>>2]=HEAP32[b>>2];HEAP32[d+4>>2]=HEAP32[b+4>>2];b=a+8|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];_mrb_ary_new_from_values(f,e,2,a|0);STACKTOP=a}
function _mrb_ary_s_create(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=c+4;_mrb_get_args(e,__str162|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=b,tempInt));_mrb_ary_new_from_values(f,e,HEAP32[b>>
2],HEAP32[c>>2]);STACKTOP=c}
function _mrb_ary_concat(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];a=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=HEAP32[(b|0)>>2];_ary_concat(f,HEAP32[(e|0)>>2],HEAP32[(b+20|0)>>2],HEAP32[(b+12|
0)>>2]);STACKTOP=c}function _ary_concat(f,e,b,c){var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j;d=f;g=e;h=b;i=c;j=HEAP32[(g+12|0)>>2]+i|0;_ary_modify(d,g);a=(HEAP32[(g+16|0)>>2]|0)<(j|0)?3:4;break;case 3:_ary_expand_capa(d,g,j);a=4;break;case 4:_array_copy(HEAP32[(g+20|0)>>2]+(HEAP32[(g+12|0)>>2]<<3)|0,h,i);_mrb_write_barrier(d,g);HEAP32[(g+12|0)>>2]=j;return;default:assert(0,"bad label: "+a)}}
function _mrb_ary_concat_m(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c+4;_mrb_get_args(e,__str1163|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=a,tempInt));_ary_concat(e,HEAP32[(b|0)>>2],HEAP32[c>>
2],HEAP32[a>>2]);e=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[e>>2];HEAP32[f+4>>2]=HEAP32[e+4>>2];STACKTOP=c}
function _mrb_ary_plus(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];var a=c+8,d=c+12,g=c+16,b=HEAP32[(b|0)>>2];_mrb_get_args(e,__str1163|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,HEAP32[tempInt+4>>2]=d,tempInt));
_mrb_ary_new_capa(g,e,HEAP32[(b+12|0)>>2]+HEAP32[d>>2]|0);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[g>>2];HEAP32[c+4>>2]=HEAP32[g+4>>2];e=HEAP32[(c|0)>>2];_array_copy(HEAP32[(e+20|0)>>2],HEAP32[(b+20|0)>>2],HEAP32[(b+12|0)>>2]);_array_copy(HEAP32[(e+20|0)>>2]+(HEAP32[(b+12|0)>>2]<<3)|0,HEAP32[a>>2],HEAP32[d>>2]);HEAP32[(e+12|0)>>2]=HEAP32[(b+12|0)>>2]+HEAP32[d>>2]|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=c}_mrb_ary_plus.X=1;
function _mrb_ary_cmp(f,e,b){var c=STACKTOP;STACKTOP+=40;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h,i,j=c+8,l,k,n,r=c+16,t=c+24,p=c+32;d=e;_mrb_nil_value224(j);_mrb_get_args(d,__str2164|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=g,tempInt));a=15==(HEAP32[(g+4|0)>>2]&255|0)?4:3;break;case 3:_mrb_nil_value224(f);a=21;break;case 4:h=HEAP32[(b|0)>>2];i=HEAP32[(g|0)>>2];a=(HEAP32[(h+12|0)>>2]|0)==(HEAP32[(i+12|0)>>2]|0)?5:7;break;case 5:a=(HEAP32[(h+20|0)>>2]|0)==(HEAP32[(i+20|0)>>2]|0)?6:7;break;case 6:_mrb_fixnum_value225(f,0);a=21;break;case 7:n=_mrb_intern(d,__str3165|0);k=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2];a=(k|0)>(HEAP32[(HEAP32[(g|0)>>2]+12|0)>>2]|0)?8:9;break;case 8:k=HEAP32[(HEAP32[(g|0)>>2]+12|0)>>
2];a=9;break;case 9:l=0;a=10;break;case 10:a=(l|0)<(k|0)?11:16;break;case 11:_ary_elt(r,g,l);a=d;_ary_elt(t,b,l);_mrb_funcall_argv(p,a,t,n,1,r);var a=j,q=p;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[q>>2];HEAP32[a+4>>2]=HEAP32[q+4>>2];a=3!=(HEAP32[(j+4|0)>>2]&255|0)?13:12;break;case 12:a=0!=(HEAP32[(j|0)>>2]|0)?13:14;break;case 13:a=f;q=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>
2]=HEAP32[q>>2];HEAP32[a+4>>2]=HEAP32[q+4>>2];a=21;break;case 14:a=15;break;case 15:l=l+1|0;a=10;break;case 16:a=17;break;case 17:k=HEAP32[(h+12|0)>>2]-HEAP32[(i+12|0)>>2]|0;a=0==(k|0)?18:19;break;case 18:var v=0,a=20;break;case 19:v=0<(k|0)?1:-1;a=20;break;case 20:_mrb_fixnum_value225(f,v);a=21;break;case 21:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_ary_cmp.X=1;
function _mrb_nil_value224(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_fixnum_value225(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|3;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _ary_elt(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=b;a=0==(HEAP32[(HEAP32[(e|0)>>2]+12|0)>>2]|0)?3:4;break;case 3:_mrb_nil_value224(f);a=8;break;case 4:a=0>(d|0)?6:5;break;case 5:a=(HEAP32[(HEAP32[(e|0)>>2]+12|0)>>2]|0)<=(d|0)?6:7;break;case 6:_mrb_nil_value224(f);
a=8;break;case 7:var a=f,g=HEAP32[(HEAP32[(e|0)>>2]+20|0)>>2]+(d<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[g>>2];HEAP32[a+4>>2]=HEAP32[g+4>>2];a=8;break;case 8:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_ary_replace(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];a=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=HEAP32[(b|0)>>2];_ary_replace(f,HEAP32[(e|0)>>2],HEAP32[(b+20|0)>>2],HEAP32[(b+
12|0)>>2]);STACKTOP=c}function _ary_replace(f,e,b,c){var a;for(a=2;;)switch(a){case 2:var d,g,h,i;d=f;g=e;h=b;i=c;_ary_modify(d,g);a=(HEAP32[(g+16|0)>>2]|0)<(i|0)?3:4;break;case 3:_ary_expand_capa(d,g,i);a=4;break;case 4:_array_copy(HEAP32[(g+20|0)>>2],h,i);_mrb_write_barrier(d,g);HEAP32[(g+12|0)>>2]=i;return;default:assert(0,"bad label: "+a)}}
function _mrb_ary_replace_m(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str4166|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_mrb_ary_replace(e,b,c);e=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[f>>2]=HEAP32[e>>2];HEAP32[f+4>>2]=HEAP32[e+4>>2];STACKTOP=c}
function _mrb_ary_times(f,e,b){var c=STACKTOP;STACKTOP+=20;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i=c,j,l=c+8,k=c+12;d=e;g=HEAP32[(b|0)>>2];_mrb_get_args(d,__str5167|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>
2]=l,tempInt));a=0>(HEAP32[l>>2]|0)?3:4;break;case 3:var a=d,n=_mrb_class_obj_get(d,__str6168|0);_mrb_raise(a,n,__str7169|0);a=4;break;case 4:a=0==(HEAP32[l>>2]|0)?5:6;break;case 5:_mrb_ary_new(f,d);a=10;break;case 6:_mrb_ary_new_capa(k,d,HEAP32[(g+12|0)>>2]*HEAP32[l>>2]|0);h=i;j=k;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[h>>2]=HEAP32[j>>2];HEAP32[h+4>>2]=HEAP32[j+4>>2];h=HEAP32[(i|0)>>2];j=HEAP32[(h+20|0)>>2];a=7;break;case 7:a=HEAP32[l>>2];HEAP32[l>>
2]=a-1|0;a=0!=(a|0)?8:9;break;case 8:_array_copy(j,HEAP32[(g+20|0)>>2],HEAP32[(g+12|0)>>2]);j=j+(HEAP32[(g+12|0)>>2]<<3)|0;a=h+12|0;HEAP32[a>>2]=HEAP32[a>>2]+HEAP32[(g+12|0)>>2]|0;a=7;break;case 9:a=f;n=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[n>>2];HEAP32[a+4>>2]=HEAP32[n+4>>2];a=10;break;case 10:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_ary_times.X=1;
function _mrb_ary_reverse_bang(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i,j=c;d=e;g=HEAP32[(b|0)>>2];a=1<(HEAP32[(g+12|0)>>2]|0)?3:7;break;case 3:_ary_modify(d,g);h=HEAP32[(g+20|0)>>2];i=(HEAP32[(g+20|0)>>2]+(HEAP32[(g+12|0)>>2]<<3)|0)-8|
0;a=4;break;case 4:a=h>>>0<i>>>0?5:6;break;case 5:var a=j,l=h;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+4>>2]=HEAP32[l+4>>2];a=h;h=a+8|0;l=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+4>>2]=HEAP32[l+4>>2];a=i;i=a-8|0;l=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+
4>>2]=HEAP32[l+4>>2];a=4;break;case 6:a=7;break;case 7:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_ary_reverse_bang.X=1;
function _ary_modify(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h;c=f;a=e;b=0!=(HEAP32[a>>2]>>>11&256|0)?3:10;break;case 3:d=HEAP32[(a+16|0)>>2];b=1==(HEAP32[(d|0)>>2]|0)?4:6;break;case 4:b=(HEAP32[(a+20|0)>>2]|0)==(HEAP32[(d+4|0)>>2]|0)?5:6;break;case 5:HEAP32[(a+20|0)>>2]=HEAP32[(d+4|0)>>2];HEAP32[(a+16|0)>>2]=HEAP32[(a+12|0)>>2];_mrb_free(c,d);b=9;break;case 6:h=HEAP32[(a+20|0)>>2];g=HEAP32[(a+12|0)>>2]<<3|0;g=_mrb_malloc(c,g);b=0!=(h|0)?7:8;break;case 7:_array_copy(g,h,HEAP32[(a+12|0)>>
2]);b=8;break;case 8:HEAP32[(a+20|0)>>2]=g;HEAP32[(a+16|0)>>2]=HEAP32[(a+12|0)>>2];_mrb_ary_decref(c,d);b=9;break;case 9:var i=b=a;HEAP32[i>>2]=HEAP32[i>>2]&2047|(HEAP32[b>>2]>>>11&2096895)<<11;b=10;break;case 10:return;default:assert(0,"bad label: "+b)}}_ary_modify.X=1;
function _mrb_ary_reverse(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h=c;g=c+8;var i,j,l,a=e;d=HEAP32[(b|0)>>2];_mrb_ary_new_capa(g,a,HEAP32[(d+12|0)>>2]);a=h;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[g>>2];HEAP32[a+4>>2]=HEAP32[g+4>>2];g=HEAP32[(h|0)>>2];a=0<(HEAP32[(d+12|0)>>2]|0)?3:7;break;case 3:i=HEAP32[(d+20|0)>>2];l=i+(HEAP32[(d+12|0)>>2]<<3)|0;j=(HEAP32[(g+20|0)>>2]+(HEAP32[(d+12|0)>>2]<<3)|0)-8|0;a=4;break;case 4:a=i>>>0<l>>>0?5:6;break;case 5:var k=j;j=k-8|0;a=i;i=a+8|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[k>>2]=HEAP32[a>>2];HEAP32[k+4>>2]=HEAP32[a+4>>2];a=4;break;case 6:HEAP32[(g+12|0)>>2]=HEAP32[(d+12|0)>>
2];a=7;break;case 7:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[h>>2];HEAP32[f+4>>2]=HEAP32[h+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_ary_reverse.X=1;
function _mrb_ary_new4(f,e,b,c){var a=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d;for(d=2;;)switch(d){case 2:var g,h,i,j=a;d=a+8;g=e;h=b;i=c;_mrb_ary_new_capa(d,g,h);g=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[d>>2];HEAP32[g+4>>2]=HEAP32[d+4>>2];d=0<(h|0)?3:5;break;case 3:d=0!=(i|0)?4:5;break;case 4:_array_copy(HEAP32[(HEAP32[(j|0)>>2]+20|0)>>2],i,h);HEAP32[(HEAP32[(j|
0)>>2]+12|0)>>2]=h;d=5;break;case 5:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[j>>2];HEAP32[f+4>>2]=HEAP32[j+4>>2];STACKTOP=a;return;default:assert(0,"bad label: "+d)}}function _mrb_ary_new_elts(f,e,b,c){_mrb_ary_new4(f,e,b,c)}
function _mrb_ary_push(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];a=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g;d=f;g=HEAP32[(e|0)>>2];_ary_modify(d,g);a=(HEAP32[(g+
12|0)>>2]|0)==(HEAP32[(g+16|0)>>2]|0)?3:4;break;case 3:_ary_expand_capa(d,g,HEAP32[(g+12|0)>>2]+1|0);a=4;break;case 4:f=g+12|0;e=HEAP32[f>>2];HEAP32[f>>2]=e+1|0;f=HEAP32[(g+20|0)>>2]+(e<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];_mrb_write_barrier(d,g);STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _ary_expand_capa(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h;a=f;d=e;g=b;h=HEAP32[(d+16|0)>>2];c=3;break;case 3:c=(h|0)<(g|0)?4:8;break;case 4:c=0==(h|0)?5:6;break;case 5:h=4;c=7;break;case 6:h=h<<1|0;c=7;break;case 7:c=3;break;case 8:c=(h|0)>(HEAP32[(d+16|0)>>2]|0)?9:10;break;case 9:HEAP32[(d+16|0)>>2]=h;c=_mrb_realloc(a,HEAP32[(d+20|0)>>2],h<<3|0);HEAP32[(d+20|0)>>2]=c;c=10;break;case 10:return;default:assert(0,"bad label: "+c)}}_ary_expand_capa.X=1;
function _mrb_ary_push_m(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+4;d=e;_mrb_get_args(d,__str162|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,HEAP32[tempInt+4>>2]=h,tempInt));
a=3;break;case 3:a=HEAP32[h>>2];HEAP32[h>>2]=a-1|0;a=0!=(a|0)?4:5;break;case 4:var a=d,i=HEAP32[g>>2];HEAP32[g>>2]=i+8|0;_mrb_ary_push(a,b,i);a=3;break;case 5:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_ary_pop(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a;a=HEAP32[(b|0)>>2];c=0==(HEAP32[(a+12|0)>>2]|0)?3:4;break;case 3:_mrb_nil_value224(f);c=5;break;case 4:var d=a+12|0,c=HEAP32[d>>2]-1|0;HEAP32[d>>2]=c;d=f;c=HEAP32[(a+20|0)>>2]+(c<<3)|0;assert(!0,
"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[c>>2];HEAP32[d+4>>2]=HEAP32[c+4>>2];c=5;break;case 5:STACKTOP=e;return;default:assert(0,"bad label: "+c)}}
function _mrb_ary_shift(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h=c,i,j;d=e;g=HEAP32[(b|0)>>2];a=0==(HEAP32[(g+12|0)>>2]|0)?3:4;break;case 3:_mrb_nil_value224(f);a=14;break;case 4:a=0!=(HEAP32[g>>2]>>>11&256|0)?5:7;break;case 5:a=6;break;case 6:var a=
h,l=HEAP32[(g+20|0)>>2]|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+4>>2]=HEAP32[l+4>>2];a=g+20|0;HEAP32[a>>2]=HEAP32[a>>2]+8|0;a=g+12|0;HEAP32[a>>2]=HEAP32[a>>2]-1|0;a=f;l=h;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+4>>2]=HEAP32[l+4>>2];a=14;break;case 7:a=10<(HEAP32[(g+12|0)>>2]|0)?8:9;break;case 8:_ary_make_shared(d,g);a=6;break;case 9:i=
HEAP32[(g+20|0)>>2];j=HEAP32[(g+12|0)>>2];a=h;l=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+4>>2]=HEAP32[l+4>>2];a=10;break;case 10:j=a=j-1|0;a=0!=(a|0)?11:12;break;case 11:a=i;l=i+8|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+4>>2]=HEAP32[l+4>>2];i=i+8|0;a=10;break;case 12:a=g+12|0;HEAP32[a>>2]=HEAP32[a>>2]-1|0;a=13;break;case 13:a=f;l=h;
assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+4>>2]=HEAP32[l+4>>2];a=14;break;case 14:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_ary_shift.X=1;
function _ary_make_shared(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;b=0!=(HEAP32[a>>2]>>>11&256|0)?7:3;break;case 3:d=_mrb_malloc(c,12);HEAP32[(d|0)>>2]=1;b=(HEAP32[(a+16|0)>>2]|0)>(HEAP32[(a+12|0)>>2]|0)?4:5;break;case 4:b=_mrb_realloc(c,HEAP32[(a+20|0)>>2],(HEAP32[(a+12|0)>>2]<<3|0)+1|0);HEAP32[(d+4|0)>>2]=b;HEAP32[(a+20|0)>>2]=b;b=6;break;case 5:HEAP32[(d+4|0)>>2]=HEAP32[(a+20|0)>>2];b=6;break;case 6:HEAP32[(d+8|0)>>2]=HEAP32[(a+12|0)>>2];HEAP32[(a+16|0)>>2]=d;var g=b=a;HEAP32[g>>
2]=HEAP32[g>>2]&2047|((HEAP32[b>>2]>>>11&2097151|256)&2097151)<<11;b=7;break;case 7:return;default:assert(0,"bad label: "+b)}}_ary_make_shared.X=1;
function _mrb_ary_unshift(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h;g=e;h=HEAP32[(b|0)>>2];d=0!=(HEAP32[h>>2]>>>
11&256|0)?3:6;break;case 3:d=1==(HEAP32[(HEAP32[(h+16|0)>>2]|0)>>2]|0)?4:6;break;case 4:d=1<=((HEAP32[(h+20|0)>>2]-HEAP32[(HEAP32[(h+16|0)>>2]+4|0)>>2]|0)/8&-1|0)?5:6;break;case 5:d=h+20|0;HEAP32[d>>2]=HEAP32[d>>2]-8|0;var d=HEAP32[(h+20|0)>>2]|0,i=c;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[i>>2];HEAP32[d+4>>2]=HEAP32[i+4>>2];d=9;break;case 6:_ary_modify(g,h);d=(HEAP32[(h+16|0)>>2]|0)<(HEAP32[(h+12|0)>>2]+1|0)?7:8;break;case 7:_ary_expand_capa(g,
h,HEAP32[(h+12|0)>>2]+1|0);d=8;break;case 8:_llvm_memmove_p0i8_p0i8_i32(HEAP32[(h+20|0)>>2]+8|0,HEAP32[(h+20|0)>>2],HEAP32[(h+12|0)>>2]<<3|0,4,0);d=HEAP32[(h+20|0)>>2]|0;i=c;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[i>>2];HEAP32[d+4>>2]=HEAP32[i+4>>2];d=9;break;case 9:e=h+12|0;HEAP32[e>>2]=HEAP32[e>>2]+1|0;_mrb_write_barrier(g,h);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>
2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_mrb_ary_unshift.X=1;
function _mrb_ary_unshift_m(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h=c,i=c+4;d=e;g=HEAP32[(b|0)>>2];_mrb_get_args(d,__str162|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=h,HEAP32[tempInt+
4>>2]=i,tempInt));a=0!=(HEAP32[g>>2]>>>11&256|0)?3:6;break;case 3:a=1==(HEAP32[(HEAP32[(g+16|0)>>2]|0)>>2]|0)?4:6;break;case 4:a=((HEAP32[(g+20|0)>>2]-HEAP32[(HEAP32[(g+16|0)>>2]+4|0)>>2]|0)/8&-1|0)>=(HEAP32[i>>2]|0)?5:6;break;case 5:a=g+20|0;HEAP32[a>>2]=HEAP32[a>>2]+((-HEAP32[i>>2]|0)<<3)|0;a=11;break;case 6:_ary_modify(d,g);a=0==(HEAP32[i>>2]|0)?7:8;break;case 7:var a=f,j=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[j>>2];HEAP32[a+
4>>2]=HEAP32[j+4>>2];a=12;break;case 8:a=(HEAP32[(g+16|0)>>2]|0)<(HEAP32[(g+12|0)>>2]+HEAP32[i>>2]|0)?9:10;break;case 9:_ary_expand_capa(d,g,HEAP32[(g+12|0)>>2]+HEAP32[i>>2]|0);a=10;break;case 10:_llvm_memmove_p0i8_p0i8_i32(HEAP32[(g+20|0)>>2]+(HEAP32[i>>2]<<3)|0,HEAP32[(g+20|0)>>2],HEAP32[(g+12|0)>>2]<<3|0,4,0);a=11;break;case 11:_array_copy(HEAP32[(g+20|0)>>2],HEAP32[h>>2],HEAP32[i>>2]);a=g+12|0;HEAP32[a>>2]=HEAP32[a>>2]+HEAP32[i>>2]|0;_mrb_write_barrier(d,g);a=f;j=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[j>>2];HEAP32[a+4>>2]=HEAP32[j+4>>2];a=12;break;case 12:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_ary_unshift_m.X=1;function _mrb_ary_alen(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];c=HEAP32[(HEAP32[(e|0)>>2]+12|0)>>2];STACKTOP=b;return c}
function _mrb_ary_ref(f,e,b,c){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g;d=c;g=HEAP32[(b|0)>>2];a=0>(d|0)?3:4;break;case 3:d=d+HEAP32[(g+12|0)>>2]|0;a=4;break;case 4:a=0>(d|0)?6:5;break;case 5:a=(HEAP32[(g+12|0)>>2]|0)<=(d|0)?6:7;break;case 6:_mrb_nil_value224(f);
a=8;break;case 7:var a=f,h=HEAP32[(g+20|0)>>2]+(d<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[h>>2];HEAP32[a+4>>2]=HEAP32[h+4>>2];a=8;break;case 8:STACKTOP=e;return;default:assert(0,"bad label: "+a)}}
function _mrb_ary_set(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[d>>2];HEAP32[e+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i;g=f;h=b;i=HEAP32[(e|0)>>2];_ary_modify(g,i);d=
0>(h|0)?3:6;break;case 3:h=h+HEAP32[(i+12|0)>>2]|0;d=0>(h|0)?4:5;break;case 4:var d=g,j=_mrb_class_obj_get(g,__str8170|0),l=h-HEAP32[(i+12|0)>>2]|0;_mrb_raisef(d,j,__str9171|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=l,tempInt));d=5;break;case 5:d=6;break;case 6:d=(HEAP32[(i+12|0)>>2]|0)<=(h|0)?7:10;break;case 7:d=(HEAP32[(i+16|0)>>2]|0)<=(h|0)?8:9;break;case 8:_ary_expand_capa(g,i,h+1|0);d=9;break;case 9:_ary_fill_with_nil(HEAP32[(i+
20|0)>>2]+(HEAP32[(i+12|0)>>2]<<3)|0,(h+1|0)-HEAP32[(i+12|0)>>2]|0);HEAP32[(i+12|0)>>2]=h+1|0;d=10;break;case 10:f=HEAP32[(i+20|0)>>2]+(h<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];_mrb_write_barrier(g,i);STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_mrb_ary_set.X=1;
function _ary_fill_with_nil(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d,g=b;a=f;d=e;_mrb_nil_value224(g);c=3;break;case 3:c=d;d=c-1|0;c=0!=(c|0)?4:5;break;case 4:c=a;a=c+8|0;var h=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[h>>2];HEAP32[c+4>>2]=HEAP32[h+4>>2];c=3;break;case 5:STACKTOP=b;return;default:assert(0,"bad label: "+
c)}}
function _mrb_ary_splice(f,e,b,c,a,d){var g=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var h=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[h>>2];HEAP32[b+4>>2]=HEAP32[h+4>>2];h=d;d=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[d>>2]=HEAP32[h>>2];HEAP32[d+4>>2]=HEAP32[h+4>>2];for(h=2;;)switch(h){case 2:var i,j,l,k,n,r,t,p,q;i=e;j=c;l=a;k=HEAP32[(b|0)>>
2];_ary_modify(i,k);h=0>(j|0)?3:6;break;case 3:j=j+HEAP32[(k+12|0)>>2]|0;h=0>(j|0)?4:5;break;case 4:var h=i,v=_mrb_class_obj_get(i,__str8170|0);_mrb_raise(h,v,__str10172|0);h=5;break;case 5:h=6;break;case 6:h=(HEAP32[(k+12|0)>>2]|0)<(l|0)?8:7;break;case 7:h=(HEAP32[(k+12|0)>>2]|0)<(j+l|0)?8:9;break;case 8:l=HEAP32[(k+12|0)>>2]-j|0;h=9;break;case 9:n=j+l|0;h=15==(HEAP32[(d+4|0)>>2]&255|0)?10:11;break;case 10:q=HEAP32[(HEAP32[(d|0)>>2]+12|0)>>2];t=HEAP32[(HEAP32[(d|0)>>2]+20|0)>>2];h=12;break;case 11:q=
1;t=d;h=12;break;case 12:r=j+q|0;h=(n|0)<(HEAP32[(k+12|0)>>2]|0)?13:14;break;case 13:r=r+(HEAP32[(k+12|0)>>2]-n|0)|0;h=14;break;case 14:h=(r|0)>(HEAP32[(k+16|0)>>2]|0)?15:16;break;case 15:_ary_expand_capa(i,k,r);h=16;break;case 16:h=(j|0)>(HEAP32[(k+12|0)>>2]|0)?17:18;break;case 17:_ary_fill_with_nil(HEAP32[(k+20|0)>>2]+(HEAP32[(k+12|0)>>2]<<3)|0,j-HEAP32[(k+12|0)>>2]|0);h=21;break;case 18:h=(j|0)<(HEAP32[(k+12|0)>>2]|0)?19:20;break;case 19:_llvm_memmove_p0i8_p0i8_i32((HEAP32[(k+20|0)>>2]+(j<<3)|
0)+(q<<3)|0,HEAP32[(k+20|0)>>2]+(n<<3)|0,(HEAP32[(k+12|0)>>2]-n|0)<<3|0,4,0);h=20;break;case 20:h=21;break;case 21:p=0;h=22;break;case 22:h=(p|0)<(q|0)?23:25;break;case 23:h=(HEAP32[(k+20|0)>>2]+(j<<3)|0)+(p<<3)|0;v=t+(p<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[h>>2]=HEAP32[v>>2];HEAP32[h+4>>2]=HEAP32[v+4>>2];h=24;break;case 24:p=p+1|0;h=22;break;case 25:HEAP32[(k+12|0)>>2]=r;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=g;return;default:assert(0,"bad label: "+h)}}_mrb_ary_splice.X=1;function _mrb_ary_decref(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;b=a|0;HEAP32[b>>2]=HEAP32[b>>2]-1|0;b=0==(HEAP32[(a|0)>>2]|0)?3:4;break;case 3:_mrb_free(c,HEAP32[(a+4|0)>>2]);_mrb_free(c,a);b=4;break;case 4:return;default:assert(0,"bad label: "+b)}}
function _mrb_ary_aget(f,e,b){var c=STACKTOP;STACKTOP+=12;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h=c,i,j=c+4,a=c+8;d=e;g=HEAP32[(b|0)>>2];_mrb_get_args(d,__str11173|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=
h,HEAP32[tempInt+4>>2]=j,HEAP32[tempInt+8>>2]=a,tempInt));a=HEAP32[a>>2];a=0==(a|0)?3:1==(a|0)?4:18;break;case 3:_mrb_ary_ref(f,d,b,HEAP32[h>>2]);a=20;break;case 4:a=3!=(HEAP32[((HEAP32[j>>2]|0)+4|0)>>2]&255|0)?5:6;break;case 5:var a=d,l=_mrb_class_obj_get(d,__str12174|0);_mrb_raise(a,l,__str13175|0);a=6;break;case 6:a=0>(HEAP32[h>>2]|0)?7:8;break;case 7:HEAP32[h>>2]=HEAP32[h>>2]+HEAP32[(g+12|0)>>2]|0;a=8;break;case 8:a=0>(HEAP32[h>>2]|0)?10:9;break;case 9:a=(HEAP32[(g+12|0)>>2]|0)<(HEAP32[h>>2]|
0)?10:11;break;case 10:_mrb_nil_value224(f);a=20;break;case 11:i=HEAP32[(HEAP32[j>>2]|0)>>2];a=0>(i|0)?12:13;break;case 12:_mrb_nil_value224(f);a=20;break;case 13:a=(HEAP32[(g+12|0)>>2]|0)==(HEAP32[h>>2]|0)?14:15;break;case 14:_mrb_ary_new(f,d);a=20;break;case 15:a=(i|0)>(HEAP32[(g+12|0)>>2]-HEAP32[h>>2]|0)?16:17;break;case 16:i=HEAP32[(g+12|0)>>2]-HEAP32[h>>2]|0;a=17;break;case 17:_ary_subseq(f,d,g,HEAP32[h>>2],i);a=20;break;case 18:a=d;l=_mrb_class_obj_get(d,__str6168|0);_mrb_raise(a,l,__str14176|
0);a=19;break;case 19:_mrb_nil_value224(f);a=20;break;case 20:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_ary_aget.X=1;function _ary_subseq(f,e,b,c,a){_ary_make_shared(e,b);e=_mrb_obj_alloc(e,15,HEAP32[(e+92|0)>>2]);HEAP32[(e+20|0)>>2]=HEAP32[(b+20|0)>>2]+(c<<3)|0;HEAP32[(e+12|0)>>2]=a;HEAP32[(e+16|0)>>2]=HEAP32[(b+16|0)>>2];b=HEAP32[(e+16|0)>>2]|0;HEAP32[b>>2]=HEAP32[b>>2]+1|0;HEAP32[e>>2]=HEAP32[e>>2]&2047|((HEAP32[e>>2]>>>11&2097151|256)&2097151)<<11;_mrb_obj_value217(f,e)}
_ary_subseq.X=1;
function _mrb_ary_aset(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,a=c+4,h=c+8;d=e;_mrb_get_args(d,__str162|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,HEAP32[tempInt+4>>2]=a,
tempInt));a=HEAP32[a>>2];a=2==(a|0)?3:3==(a|0)?6:7;break;case 3:a=3==(HEAP32[((HEAP32[g>>2]|0)+4|0)>>2]&255|0)?5:4;break;case 4:var a=d,i=_mrb_class_obj_get(d,__str12174|0);_mrb_raise(a,i,__str15177|0);a=5;break;case 5:_mrb_ary_set(d,b,HEAP32[(HEAP32[g>>2]|0)>>2],HEAP32[g>>2]+8|0);a=f;i=HEAP32[g>>2]+8|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[i>>2];HEAP32[a+4>>2]=HEAP32[i+4>>2];a=8;break;case 6:_mrb_ary_splice(h,d,b,HEAP32[(HEAP32[g>>
2]|0)>>2],HEAP32[(HEAP32[g>>2]+8|0)>>2],HEAP32[g>>2]+16|0);a=f;i=HEAP32[g>>2]+16|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[i>>2];HEAP32[a+4>>2]=HEAP32[i+4>>2];a=8;break;case 7:a=d;i=_mrb_class_obj_get(d,__str6168|0);_mrb_raise(a,i,__str14176|0);_mrb_nil_value224(f);a=8;break;case 8:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_ary_aset.X=1;
function _mrb_ary_delete_at(f,e,b){var c=STACKTOP;STACKTOP+=12;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h=c,i=c+4,j,l;d=e;g=HEAP32[(b|0)>>2];_mrb_get_args(d,__str5167|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=
h,tempInt));a=0>(HEAP32[h>>2]|0)?3:4;break;case 3:HEAP32[h>>2]=HEAP32[h>>2]+HEAP32[(g+12|0)>>2]|0;a=4;break;case 4:a=0>(HEAP32[h>>2]|0)?6:5;break;case 5:a=(HEAP32[(g+12|0)>>2]|0)<=(HEAP32[h>>2]|0)?6:7;break;case 6:_mrb_nil_value224(f);a=11;break;case 7:_ary_modify(d,g);j=i;l=HEAP32[(g+20|0)>>2]+(HEAP32[h>>2]<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[j>>2]=HEAP32[l>>2];HEAP32[j+4>>2]=HEAP32[l+4>>2];j=HEAP32[(g+20|0)>>2]+(HEAP32[h>>2]<<3)|0;
l=HEAP32[(g+12|0)>>2]-HEAP32[h>>2]|0;a=8;break;case 8:l=a=l-1|0;a=0!=(a|0)?9:10;break;case 9:var a=j,k=j+8|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[k>>2];HEAP32[a+4>>2]=HEAP32[k+4>>2];j=j+8|0;a=8;break;case 10:a=g+12|0;HEAP32[a>>2]=HEAP32[a>>2]-1|0;_ary_shrink_capa(d,g);a=f;k=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[k>>2];HEAP32[a+4>>2]=HEAP32[k+4>>2];a=11;break;
case 11:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_ary_delete_at.X=1;
function _ary_shrink_capa(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;d=HEAP32[(a+16|0)>>2];b=8>(d|0)?3:4;break;case 3:b=14;break;case 4:b=(d|0)<=(5*HEAP32[(a+12|0)>>2]|0)?5:6;break;case 5:b=14;break;case 6:b=7;break;case 7:d=(d|0)/2&-1;b=4>(d|0)?8:9;break;case 8:d=4;b=11;break;case 9:b=10;break;case 10:b=(d|0)>(5*HEAP32[(a+12|0)>>2]|0)?7:11;break;case 11:b=(d|0)>(HEAP32[(a+12|0)>>2]|0)?12:14;break;case 12:b=(d|0)<(HEAP32[(a+16|0)>>2]|0)?13:14;break;case 13:HEAP32[(a+16|0)>>2]=d;b=_mrb_realloc(c,
HEAP32[(a+20|0)>>2],d<<3|0);HEAP32[(a+20|0)>>2]=b;b=14;break;case 14:return;default:assert(0,"bad label: "+b)}}_ary_shrink_capa.X=1;
function _mrb_ary_first(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h=c;d=e;g=HEAP32[(b|0)>>2];a=0==(_mrb_get_args(d,__str16178|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=h,tempInt))|
0)?3:7;break;case 3:a=0<(HEAP32[(g+12|0)>>2]|0)?4:5;break;case 4:var a=f,i=HEAP32[(g+20|0)>>2]|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[i>>2];HEAP32[a+4>>2]=HEAP32[i+4>>2];a=6;break;case 5:_mrb_nil_value224(f);a=6;break;case 6:a=14;break;case 7:a=0>(HEAP32[h>>2]|0)?8:9;break;case 8:a=d;i=_mrb_class_obj_get(d,__str6168|0);_mrb_raise(a,i,__str17179|0);a=9;break;case 9:a=(HEAP32[h>>2]|0)>(HEAP32[(g+12|0)>>2]|0)?10:11;break;case 10:HEAP32[h>>
2]=HEAP32[(g+12|0)>>2];a=11;break;case 11:a=0!=(HEAP32[g>>2]>>>11&256|0)?12:13;break;case 12:_ary_subseq(f,d,g,0,HEAP32[h>>2]);a=14;break;case 13:_mrb_ary_new_from_values(f,d,HEAP32[h>>2],HEAP32[(g+20|0)>>2]);a=14;break;case 14:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_ary_first.X=1;
function _mrb_ary_last(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i=c,j=c+4;d=e;g=HEAP32[(b|0)>>2];_mrb_get_args(d,__str162|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=i,HEAP32[tempInt+
4>>2]=j,tempInt));a=1<(HEAP32[j>>2]|0)?3:4;break;case 3:var a=d,l=_mrb_class_obj_get(d,__str6168|0);_mrb_raise(a,l,__str14176|0);a=4;break;case 4:a=0==(HEAP32[j>>2]|0)?5:9;break;case 5:a=0<(HEAP32[(g+12|0)>>2]|0)?6:7;break;case 6:a=f;l=HEAP32[(g+20|0)>>2]+((HEAP32[(g+12|0)>>2]-1|0)<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+4>>2]=HEAP32[l+4>>2];a=8;break;case 7:_mrb_nil_value224(f);a=8;break;case 8:a=17;break;case 9:h=
HEAP32[(HEAP32[i>>2]|0)>>2];a=0>(h|0)?10:11;break;case 10:a=d;l=_mrb_class_obj_get(d,__str6168|0);_mrb_raise(a,l,__str17179|0);a=11;break;case 11:a=(h|0)>(HEAP32[(g+12|0)>>2]|0)?12:13;break;case 12:h=HEAP32[(g+12|0)>>2];a=13;break;case 13:a=0!=(HEAP32[g>>2]>>>11&256|0)?15:14;break;case 14:a=4<(h|0)?15:16;break;case 15:_ary_subseq(f,d,g,HEAP32[(g+12|0)>>2]-h|0,h);a=17;break;case 16:_mrb_ary_new_from_values(f,d,h,(HEAP32[(g+20|0)>>2]+(HEAP32[(g+12|0)>>2]<<3)|0)+((-h|0)<<3)|0);a=17;break;case 17:STACKTOP=
c;return;default:assert(0,"bad label: "+a)}}_mrb_ary_last.X=1;
function _mrb_ary_index_m(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h;d=e;_mrb_get_args(d,__str2164|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));h=0;a=3;break;case 3:a=
(h|0)<(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)?4:8;break;case 4:a=0!=(_mrb_equal(d,HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2]+(h<<3)|0,g)|0)?5:6;break;case 5:_mrb_fixnum_value225(f,h);a=9;break;case 6:a=7;break;case 7:h=h+1|0;a=3;break;case 8:_mrb_nil_value224(f);a=9;break;case 9:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_ary_rindex_m(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h;d=e;_mrb_get_args(d,__str2164|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));h=HEAP32[(HEAP32[(b|
0)>>2]+12|0)>>2]-1|0;a=3;break;case 3:a=0<=(h|0)?4:8;break;case 4:a=0!=(_mrb_equal(d,HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2]+(h<<3)|0,g)|0)?5:6;break;case 5:_mrb_fixnum_value225(f,h);a=9;break;case 6:a=7;break;case 7:h=h-1|0;a=3;break;case 8:_mrb_nil_value224(f);a=9;break;case 9:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_ary_splat(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=e;a=15==(HEAP32[(b+4|0)>>2]&255|0)?3:4;break;case 3:var a=f,g=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[g>>2];HEAP32[a+4>>
2]=HEAP32[g+4>>2];a=5;break;case 4:_mrb_ary_new_from_values(f,d,1,b);a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_ary_clear(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=HEAP32[(b|0)>>2];_ary_modify(e,a);HEAP32[(a+12|0)>>2]=0;HEAP32[(a+16|0)>>2]=0;_mrb_free(e,HEAP32[(a+20|0)>>2]);HEAP32[(a+20|0)>>2]=0;e=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[f>>2]=HEAP32[e>>2];HEAP32[f+4>>2]=HEAP32[e+4>>2];STACKTOP=c}
function _mrb_ary_empty_p(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:c=0==(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)?3:4;break;case 3:_mrb_true_value238(f);c=5;break;case 4:_mrb_false_value239(f);c=5;break;case 5:STACKTOP=e;return;default:assert(0,"bad label: "+c)}}
function _mrb_true_value238(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]=HEAP32[b>>2]&-256|2;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_false_value239(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_check_array_type(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_check_convert_type(f,e,b,15,__str18180|0,__str19181|0);STACKTOP=c}
function _mrb_ary_entry(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=b;a=0>(d|0)?3:4;break;case 3:d=d+HEAP32[(HEAP32[(e|0)>>2]+12|0)>>2]|0;a=4;break;case 4:_ary_elt(f,e,d);STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_ary_join(f,e,b,c){var a=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];d=a+8;_mrb_obj_as_string(a,e,c);var g=c;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[g>>2]=HEAP32[a>>2];HEAP32[g+4>>2]=HEAP32[a+4>>2];_mrb_ary_new(d,e);_join_ary(f,e,b,c,d);STACKTOP=a}
function _join_ary(f,e,b,c,a){var d=STACKTOP;STACKTOP+=88;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[g>>2];HEAP32[b+4>>2]=HEAP32[g+4>>2];g=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[g>>2];HEAP32[c+4>>2]=HEAP32[g+4>>2];g=a;a=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");
HEAP32[a>>2]=HEAP32[g>>2];HEAP32[a+4>>2]=HEAP32[g+4>>2];for(g=2;;)switch(g){case 2:var h,i,j=d,l=d+8,k=d+16,n=d+24,r=d+32,t=d+40,p=d+48,q=d+56,v=d+64,w=d+72,m=d+80;h=e;i=0;g=3;break;case 3:g=(i|0)<(HEAP32[(HEAP32[(a|0)>>2]+12|0)>>2]|0)?4:8;break;case 4:g=0!=(_mrb_obj_equal(h,b,HEAP32[(HEAP32[(a|0)>>2]+20|0)>>2]+(i<<3)|0)|0)?5:6;break;case 5:var g=h,x=_mrb_class_obj_get(h,__str6168|0);_mrb_raise(g,x,__str51213|0);g=6;break;case 6:g=7;break;case 7:i=i+1|0;g=3;break;case 8:_mrb_ary_push(h,a,b);_mrb_str_buf_new(n,
h,64);i=j;g=n;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[i>>2]=HEAP32[g>>2];HEAP32[i+4>>2]=HEAP32[g+4>>2];i=0;g=9;break;case 9:g=(i|0)<(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)?10:28;break;case 10:g=0<(i|0)?11:14;break;case 11:g=0==(HEAP32[(c+4|0)>>2]&255|0)?12:13;break;case 12:g=0!=(HEAP32[(c|0)>>2]|0)?13:14;break;case 13:_mrb_str_buf_cat(r,h,j,HEAP32[(HEAP32[(c|0)>>2]+20|0)>>2],HEAP32[(HEAP32[(c|0)>>2]+12|0)>>2]);g=14;break;case 14:g=l;x=HEAP32[(HEAP32[(b|
0)>>2]+20|0)>>2]+(i<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[x>>2];HEAP32[g+4>>2]=HEAP32[x+4>>2];g=HEAP32[(l+4|0)>>2]&255;g=15==(g|0)?15:17==(g|0)?17:19;break;case 15:g=16;break;case 16:_join_ary(t,h,l,c,a);g=l;x=t;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[x>>2];HEAP32[g+4>>2]=HEAP32[x+4>>2];g=17;break;case 17:g=18;break;case 18:_mrb_str_buf_cat(p,h,j,HEAP32[(HEAP32[(l|
0)>>2]+20|0)>>2],HEAP32[(HEAP32[(l|0)>>2]+12|0)>>2]);g=26;break;case 19:_mrb_check_string_type(q,h,l);g=k;x=q;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[x>>2];HEAP32[g+4>>2]=HEAP32[x+4>>2];g=0==(HEAP32[(k+4|0)>>2]&255|0)?20:21;break;case 20:g=0!=(HEAP32[(k|0)>>2]|0)?21:22;break;case 21:g=l;x=k;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[x>>2];HEAP32[g+4>>2]=HEAP32[x+4>>2];
g=18;break;case 22:_mrb_check_convert_type(v,h,l,15,__str18180|0,__str19181|0);g=k;x=v;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[x>>2];HEAP32[g+4>>2]=HEAP32[x+4>>2];g=0==(HEAP32[(k+4|0)>>2]&255|0)?23:24;break;case 23:g=0!=(HEAP32[(k|0)>>2]|0)?24:25;break;case 24:g=l;x=k;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[x>>2];HEAP32[g+4>>2]=HEAP32[x+4>>2];g=16;break;case 25:_mrb_obj_as_string(w,
h,l);g=l;x=w;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[x>>2];HEAP32[g+4>>2]=HEAP32[x+4>>2];g=18;break;case 26:g=27;break;case 27:i=i+1|0;g=9;break;case 28:_mrb_ary_pop(m,h,a);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[j>>2];HEAP32[f+4>>2]=HEAP32[j+4>>2];STACKTOP=d;return;default:assert(0,"bad label: "+g)}}_join_ary.X=1;
function _mrb_init_array(f){var e=_mrb_define_class(f,__str18180|0,HEAP32[(f+72|0)>>2]);HEAP32[(f+92|0)>>2]=e;HEAP32[e>>2]=HEAP32[e>>2]&2047|((HEAP32[e>>2]>>>11&2096896|15)&2097151)<<11;var b=_mrb_class_get(f,__str20182|0);_mrb_include_module(f,e,b);_mrb_define_class_method(f,e,__str21183|0,410,8192);_mrb_define_method(f,e,__str162|0,202,524288);_mrb_define_method(f,e,__str22184|0,586,524288);_mrb_define_method(f,e,__str23185|0,494,524288);_mrb_define_method(f,e,__str21183|0,604,8192);_mrb_define_method(f,
e,__str24186|0,530,8192);_mrb_define_method(f,e,__str25187|0,204,0);_mrb_define_method(f,e,__str26188|0,294,524288);_mrb_define_method(f,e,__str27189|0,304,524288);_mrb_define_method(f,e,__str28190|0,72,0);_mrb_define_method(f,e,__str29191|0,608,16384);_mrb_define_method(f,e,__str30192|0,536,524288);_mrb_define_method(f,e,__str31193|0,572,524288);_mrb_define_method(f,e,__str32194|0,324,8192);_mrb_define_method(f,e,__str33195|0,488,8192);_mrb_define_method(f,e,__str34196|0,264,0);_mrb_define_method(f,
e,__str35197|0,498,0);_mrb_define_method(f,e,__str36198|0,494,8192);_mrb_define_method(f,e,__str37199|0,572,524288);_mrb_define_method(f,e,__str38200|0,306,0);_mrb_define_method(f,e,__str39201|0,296,0);_mrb_define_method(f,e,__str40202|0,180,524288);_mrb_define_method(f,e,__str41203|0,272,0);_mrb_define_method(f,e,__str42204|0,264,0);_mrb_define_method(f,e,__str43205|0,604,8192);_mrb_define_method(f,e,__str44206|0,36,8192);_mrb_define_method(f,e,__str45207|0,128,0);_mrb_define_alias(f,e,__str46208|
0,__str45207|0);_mrb_define_method(f,e,__str47209|0,86,524288);_mrb_define_method(f,e,__str48210|0,524,524288);_mrb_define_method(f,e,__str3165|0,6,524288)}_mrb_init_array.X=1;
function _mrb_ary_join_m(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_nil_value224(c);_mrb_get_args(e,__str50212|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_mrb_ary_join(f,e,b,c);STACKTOP=c}
function _mrb_ary_size(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];_mrb_fixnum_value225(f,HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]);STACKTOP=e}
function _mrb_ary_inspect(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c;d=e;a=0==(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)?3:4;break;case 3:_mrb_str_new(f,d,__str21183|0,2);a=5;break;case 4:a=d;_mrb_ary_new(g,d);_inspect_ary(f,a,b,g);a=5;break;case 5:STACKTOP=
c;return;default:assert(0,"bad label: "+a)}}
function _kh_get_mt(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g;a=f;d=e;g=(d<<16>>16^d<<16>>16<<2^d<<16>>16>>2)&HEAP32[(a+32|0)>>2];b=3;break;case 3:b=0!=(HEAP8[HEAP32[(a+16|0)>>2]+Math.floor((g>>>0)/8)|0]&255&HEAP8[___m240+(g>>>0)%8|0]&255|0)^1?4:9;break;case 4:b=0!=(HEAP8[HEAP32[(a+20|0)>>2]+Math.floor((g>>>0)/8)|0]&255&HEAP8[___m240+(g>>>0)%8|0]&255|0)?8:5;break;case 5:b=(HEAP16[(HEAP32[(a+24|0)>>2]+(g<<1)|0)>>1]<<16>>16|0)==(d<<16>>16|0)?6:7;break;case 6:c=g;b=10;break;case 7:b=8;break;
case 8:g=(g+HEAP32[(a+36|0)>>2]|0)&HEAP32[(a+32|0)>>2];b=3;break;case 9:c=HEAP32[(a|0)>>2];b=10;break;case 10:return c;default:assert(0,"bad label: "+b)}}_kh_get_mt.X=1;
function _mrb_ary_equal(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h,i=c+8,j=c+16;d=e;_mrb_get_args(d,__str2164|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));a=0!=(_mrb_obj_equal(d,
b,g)|0)?3:4;break;case 3:_mrb_true_value238(f);a=21;break;case 4:a=8>=(HEAP32[(g+4|0)>>2]&255|0)?5:6;break;case 5:_mrb_false_value239(f);a=21;break;case 6:a=15==(HEAP32[(g+4|0)>>2]&255|0)?12:7;break;case 7:var a=d,l=_mrb_intern(d,__str19181|0),a=0!=(_mrb_respond_to(a,g,l)|0)?9:8;break;case 8:_mrb_false_value239(f);a=21;break;case 9:a=0!=(_mrb_equal(d,g,b)|0)?10:11;break;case 10:_mrb_true_value238(f);a=21;break;case 11:_mrb_false_value239(f);a=21;break;case 12:a=(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|
0)!=(HEAP32[(HEAP32[(g|0)>>2]+12|0)>>2]|0)?13:14;break;case 13:_mrb_false_value239(f);a=21;break;case 14:h=0;a=15;break;case 15:a=(h|0)<(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)?16:20;break;case 16:a=d;_ary_elt(i,b,h);_ary_elt(j,g,h);a=0!=(_mrb_equal(a,i,j)|0)?18:17;break;case 17:_mrb_false_value239(f);a=21;break;case 18:a=19;break;case 19:h=h+1|0;a=15;break;case 20:_mrb_true_value238(f);a=21;break;case 21:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_ary_equal.X=1;
function _mrb_ary_eql(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h,i=c+8,j=c+16;d=e;_mrb_get_args(d,__str2164|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));a=0!=(_mrb_obj_equal(d,
b,g)|0)?3:4;break;case 3:_mrb_true_value238(f);a=15;break;case 4:a=15==(HEAP32[(g+4|0)>>2]&255|0)?6:5;break;case 5:_mrb_false_value239(f);a=15;break;case 6:a=(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)!=(HEAP32[(HEAP32[(g|0)>>2]+12|0)>>2]|0)?7:8;break;case 7:_mrb_false_value239(f);a=15;break;case 8:h=0;a=9;break;case 9:a=(h|0)<(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)?10:14;break;case 10:a=d;_ary_elt(i,b,h);_ary_elt(j,g,h);a=0!=(_mrb_eql(a,i,j)|0)?12:11;break;case 11:_mrb_false_value239(f);a=15;break;case 12:a=
13;break;case 13:h=h+1|0;a=9;break;case 14:_mrb_true_value238(f);a=15;break;case 15:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_ary_eql.X=1;
function _inspect_ary(f,e,b,c){var a=STACKTOP;STACKTOP+=92;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i=a,j=a+8,l=a+16,k=a+20,n=a+24,r=a+
28,t=a+36,p,q=a+44,v=a+52,w=a+60,m=a+68,x=a+76,s=a+84;g=e;h=l;assert(!0,"memcpy given 1 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP8[h]=HEAP8[_inspect_ary_head|0];h=k;assert(!0,"memcpy given 2 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP8[h]=HEAP8[_inspect_ary_sep|0];HEAP8[h+1]=HEAP8[(_inspect_ary_sep|0)+1];h=n;assert(!0,"memcpy given 1 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP8[h]=HEAP8[_inspect_ary_tail|0];h=0;d=3;break;case 3:d=
(h|0)<(HEAP32[(HEAP32[(c|0)>>2]+12|0)>>2]|0)?4:8;break;case 4:d=0!=(_mrb_obj_equal(g,b,HEAP32[(HEAP32[(c|0)>>2]+20|0)>>2]+(h<<3)|0)|0)?5:6;break;case 5:_mrb_str_new(f,g,__str49211|0,5);d=18;break;case 6:d=7;break;case 7:h=h+1|0;d=3;break;case 8:_mrb_ary_push(g,c,b);_mrb_str_buf_new(r,g,64);h=j;d=r;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[h>>2]=HEAP32[d>>2];HEAP32[h+4>>2]=HEAP32[d+4>>2];_mrb_str_buf_cat(t,g,j,l|0,1);h=0;d=9;break;case 9:d=(h|0)<
(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)?10:17;break;case 10:p=_mrb_gc_arena_save(g);d=0<(h|0)?11:12;break;case 11:_mrb_str_buf_cat(q,g,j,k|0,2);d=12;break;case 12:d=15==(HEAP32[((HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2]+(h<<3)|0)+4|0)>>2]&255|0)?13:14;break;case 13:_inspect_ary(v,g,HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2]+(h<<3)|0,c);var d=i,y=v;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[y>>2];HEAP32[d+4>>2]=HEAP32[y+4>>2];d=15;break;case 14:_mrb_inspect(w,
g,HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2]+(h<<3)|0);d=i;y=w;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[y>>2];HEAP32[d+4>>2]=HEAP32[y+4>>2];d=15;break;case 15:_mrb_str_buf_cat(m,g,j,HEAP32[(HEAP32[(i|0)>>2]+20|0)>>2],HEAP32[(HEAP32[(i|0)>>2]+12|0)>>2]);_mrb_gc_arena_restore(g,p);d=16;break;case 16:h=h+1|0;d=9;break;case 17:_mrb_str_buf_cat(x,g,j,n|0,1);_mrb_ary_pop(s,g,c);d=f;y=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[d>>2]=HEAP32[y>>2];HEAP32[d+4>>2]=HEAP32[y+4>>2];d=18;break;case 18:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_inspect_ary.X=1;
function _kh_alloc_mt(f){var e;e=HEAP32[(f|0)>>2];HEAP32[(f+8|0)>>2]=0;HEAP32[(f+4|0)>>2]=0;HEAP32[(f+12|0)>>2]=e>>>2|e>>>1;var b=_mrb_malloc(HEAP32[(f+40|0)>>2],Math.floor(((e|0)>>>0)/4));HEAP32[(f+16|0)>>2]=b;HEAP32[(f+20|0)>>2]=HEAP32[(f+16|0)>>2]+Math.floor((e>>>0)/8)|0;_memset(HEAP32[(f+16|0)>>2],-1,Math.floor((e>>>0)/8)|0,1);_memset(HEAP32[(f+20|0)>>2],0,Math.floor((e>>>0)/8)|0,1);b=_mrb_malloc(HEAP32[(f+40|0)>>2],e<<1|0);HEAP32[(f+24|0)>>2]=b;b=_mrb_malloc(HEAP32[(f+40|0)>>2],e<<2|0);HEAP32[(f+
28|0)>>2]=b;HEAP32[(f+32|0)>>2]=e-1|0;HEAP32[(f+36|0)>>2]=Math.floor((e>>>0)/2)-1|0}_kh_alloc_mt.X=1;function _kh_init_mt_size(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;d=_mrb_calloc(c,1,44);b=8>a>>>0?3:4;break;case 3:a=8;b=4;break;case 4:b=5;break;case 5:a=a-1|0;a|=a>>>1;a|=a>>>2;a|=a>>>4;a|=a>>>8;a|=a>>>16;a=a+1|0;b=6;break;case 6:return HEAP32[(d|0)>>2]=a,HEAP32[(d+40|0)>>2]=c,_kh_alloc_mt(d),d;default:assert(0,"bad label: "+b)}}_kh_init_mt_size.X=1;
function _kh_init_mt(f){return _kh_init_mt_size(f,32)}function _kh_destroy_mt(f){var e;for(e=2;;)switch(e){case 2:var b;b=f;e=0!=(b|0)?3:4;break;case 3:_mrb_free(HEAP32[(b+40|0)>>2],HEAP32[(b+24|0)>>2]);_mrb_free(HEAP32[(b+40|0)>>2],HEAP32[(b+28|0)>>2]);_mrb_free(HEAP32[(b+40|0)>>2],HEAP32[(b+16|0)>>2]);_mrb_free(HEAP32[(b+40|0)>>2],b);e=4;break;case 4:return;default:assert(0,"bad label: "+e)}}
function _kh_clear_mt(f){var e;for(e=2;;)switch(e){case 2:var b;b=f;e=0!=(b|0)?3:5;break;case 3:e=0!=(HEAP32[(b+16|0)>>2]|0)?4:5;break;case 4:_memset(HEAP32[(b+16|0)>>2],-1,Math.floor((HEAP32[(b|0)>>2]>>>0)/8)|0,1);_memset(HEAP32[(b+20|0)>>2],0,Math.floor((HEAP32[(b|0)>>2]>>>0)/8)|0,1);HEAP32[(b+8|0)>>2]=0;HEAP32[(b+4|0)>>2]=0;e=5;break;case 5:return;default:assert(0,"bad label: "+e)}}
function _kh_resize_mt(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h,i,j;c=f;a=e;b=8>a>>>0?3:4;break;case 3:a=8;b=4;break;case 4:b=5;break;case 5:a=a-1|0;a|=a>>>1;a|=a>>>2;a|=a>>>4;a|=a>>>8;a|=a>>>16;a=a+1|0;b=6;break;case 6:d=HEAP32[(c+16|0)>>2];g=HEAP32[(c+24|0)>>2];h=HEAP32[(c+28|0)>>2];i=HEAP32[(c|0)>>2];HEAP32[(c|0)>>2]=a;_kh_alloc_mt(c);j=0;b=7;break;case 7:b=j>>>0<i>>>0?8:12;break;case 8:b=0!=(HEAP8[d+Math.floor((j>>>0)/8)|0]&255&HEAP8[___m240+(j>>>0)%8|0]&255|0)?10:9;break;case 9:b=
_kh_put_mt(c,HEAP16[(g+(j<<1)|0)>>1]);HEAP32[(HEAP32[(c+28|0)>>2]+(b<<2)|0)>>2]=HEAP32[(h+(j<<2)|0)>>2];b=10;break;case 10:b=11;break;case 11:j=j+1|0;b=7;break;case 12:_mrb_free(HEAP32[(c+40|0)>>2],d);_mrb_free(HEAP32[(c+40|0)>>2],g);_mrb_free(HEAP32[(c+40|0)>>2],h);return;default:assert(0,"bad label: "+b)}}_kh_resize_mt.X=1;function _kh_del_mt(f,e){var b=HEAP32[(f+20|0)>>2]+Math.floor((e>>>0)/8)|0;HEAP8[b]=(HEAP8[b]&255|HEAP8[___m240+(e>>>0)%8|0]&255)&255;b=f+4|0;HEAP32[b>>2]=HEAP32[b>>2]-1|0}
function _mrb_gc_mark_mt_size(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;a=HEAP32[(e+16|0)>>2];b=0!=(a|0)?4:3;break;case 3:c=0;b=5;break;case 4:c=HEAP32[(a+4|0)>>2];b=5;break;case 5:return c;default:assert(0,"bad label: "+b)}}
function _kh_put_mt(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;b=HEAP32[(c+8|0)>>2]>>>0>=HEAP32[(c+12|0)>>2]>>>0?3:4;break;case 3:_kh_resize_mt(c,HEAP32[(c|0)>>2]<<1|0);b=4;break;case 4:d=(a<<16>>16^a<<16>>16<<2^a<<16>>16>>2)&HEAP32[(c+32|0)>>2];b=5;break;case 5:if(0!=(HEAP8[HEAP32[(c+16|0)>>2]+Math.floor((d>>>0)/8)|0]&255&HEAP8[___m240+(d>>>0)%8|0]&255|0)){var g=1;b=7}else b=6;break;case 6:g=0!=(HEAP8[HEAP32[(c+20|0)>>2]+Math.floor((d>>>0)/8)|0]&255&HEAP8[___m240+(d>>>0)%8|0]&255|0);
b=7;break;case 7:b=g^1?8:11;break;case 8:b=(HEAP16[(HEAP32[(c+24|0)>>2]+(d<<1)|0)>>1]<<16>>16|0)==(a<<16>>16|0)?9:10;break;case 9:b=11;break;case 10:d=(d+HEAP32[(c+36|0)>>2]|0)&HEAP32[(c+32|0)>>2];b=5;break;case 11:b=0!=(HEAP8[HEAP32[(c+16|0)>>2]+Math.floor((d>>>0)/8)|0]&255&HEAP8[___m240+(d>>>0)%8|0]&255|0)?12:13;break;case 12:HEAP16[(HEAP32[(c+24|0)>>2]+(d<<1)|0)>>1]=a;b=HEAP32[(c+16|0)>>2]+Math.floor((d>>>0)/8)|0;HEAP8[b]=HEAP8[b]&255&(HEAP8[___m240+(d>>>0)%8|0]&255^-1)&255;b=c+4|0;HEAP32[b>>2]=
HEAP32[b>>2]+1|0;b=c+8|0;HEAP32[b>>2]=HEAP32[b>>2]+1|0;b=16;break;case 13:b=0!=(HEAP8[HEAP32[(c+20|0)>>2]+Math.floor((d>>>0)/8)|0]&255&HEAP8[___m240+(d>>>0)%8|0]&255|0)?14:15;break;case 14:HEAP16[(HEAP32[(c+24|0)>>2]+(d<<1)|0)>>1]=a;b=HEAP32[(c+20|0)>>2]+Math.floor((d>>>0)/8)|0;HEAP8[b]=HEAP8[b]&255&(HEAP8[___m240+(d>>>0)%8|0]&255^-1)&255;b=c+4|0;HEAP32[b>>2]=HEAP32[b>>2]+1|0;b=15;break;case 15:b=16;break;case 16:return d;default:assert(0,"bad label: "+b)}}_kh_put_mt.X=1;
function _kh_copy_mt(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;c=_kh_init_mt(c);d=0;b=3;break;case 3:b=(d|0)!=(HEAP32[(a|0)>>2]|0)?4:9;break;case 4:b=0!=(HEAP8[HEAP32[(a+16|0)>>2]+Math.floor((d>>>0)/8)|0]&255&HEAP8[___m240+(d>>>0)%8|0]&255|0)?7:5;break;case 5:b=0!=(HEAP8[HEAP32[(a+20|0)>>2]+Math.floor((d>>>0)/8)|0]&255&HEAP8[___m240+(d>>>0)%8|0]&255|0)?7:6;break;case 6:b=_kh_put_mt(c,HEAP16[(HEAP32[(a+24|0)>>2]+(d<<1)|0)>>1]);HEAP32[(HEAP32[(c+28|0)>>2]+(b<<2)|0)>>2]=HEAP32[(HEAP32[(a+
28|0)>>2]+(d<<2)|0)>>2];b=7;break;case 7:b=8;break;case 8:d=d+1|0;b=3;break;case 9:return c;default:assert(0,"bad label: "+b)}}_kh_copy_mt.X=1;
function _mrb_gc_mark_mt(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g;c=f;d=HEAP32[(e+16|0)>>2];b=0!=(d|0)?4:3;break;case 3:b=13;break;case 4:a=0;b=5;break;case 5:b=(a|0)!=(HEAP32[(d|0)>>2]|0)?6:13;break;case 6:b=0!=(HEAP8[HEAP32[(d+16|0)>>2]+Math.floor((a>>>0)/8)|0]&255&HEAP8[___m240+(a>>>0)%8|0]&255|0)?11:7;break;case 7:b=0!=(HEAP8[HEAP32[(d+20|0)>>2]+Math.floor((a>>>0)/8)|0]&255&HEAP8[___m240+(a>>>0)%8|0]&255|0)?11:8;break;case 8:g=HEAP32[(HEAP32[(d+28|0)>>2]+(a<<2)|0)>>2];b=0!=(g|0)?9:10;
break;case 9:_mrb_gc_mark(c,g);b=10;break;case 10:b=11;break;case 11:b=12;break;case 12:a=a+1|0;b=5;break;case 13:return;default:assert(0,"bad label: "+b)}}_mrb_gc_mark_mt.X=1;function _mrb_gc_free_mt(f,e){_kh_destroy_mt(HEAP32[(e+16|0)>>2])}function _mrb_name_class(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=_mrb_intern(f,__str534|0);_mrb_symbol_value620(c,b);_mrb_obj_iv_set(f,e,a,c);STACKTOP=c}
function _mrb_symbol_value620(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|4;HEAP16[(d|0)>>1]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_define_module_id(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;c=_mrb_module_new(f);var a=HEAP32[(f+72|0)>>2];_mrb_obj_value621(b,c);_mrb_obj_iv_set(f,a,e,b);_mrb_name_class(f,c,e);STACKTOP=b;return c}function _mrb_module_new(f){var e;e=_mrb_obj_alloc(f,11,HEAP32[(f+80|0)>>2]);f=_kh_init_mt(f);HEAP32[(e+16|0)>>2]=f;return e}
function _mrb_obj_value621(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b,g;g=a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|HEAP32[g>>2]&255;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+
c)}}function _mrb_define_module(f,e){var b=_mrb_intern(f,e);return _mrb_define_module_id(f,b)}
function _mrb_class_outer_module(f,e){var b=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d,g=b;c=b+8;var h=d=f,i=e;d=_mrb_intern(d,__str1535|0);_mrb_obj_iv_get(c,h,i,d);h=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[h>>2]=HEAP32[c>>2];HEAP32[h+4>>2]=HEAP32[c+4>>2];c=0==(HEAP32[(g+4|0)>>2]&255|0)?3:5;break;case 3:c=0!=(HEAP32[(g|0)>>2]|0)?5:4;break;
case 4:a=0;c=6;break;case 5:a=HEAP32[(g|0)>>2];c=6;break;case 6:return STACKTOP=b,a;default:assert(0,"bad label: "+c)}}
function _mrb_vm_define_module(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i=c,j=c+8;d=f;g=b;a=0!=(_mrb_const_defined(d,e,g)|0)?3:4;break;case 3:_mrb_const_get(j,d,e,g);h=i;a=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[h>>2]=HEAP32[a>>2];HEAP32[h+4>>2]=HEAP32[a+4>>2];h=HEAP32[(i|0)>>2];a=5;break;case 4:h=_mrb_module_new(d);_setup_class(d,e,h,g);a=5;break;case 5:return f=h,STACKTOP=c,f;default:assert(0,"bad label: "+a)}}
function _setup_class(f,e,b,c){var a=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[d>>2];HEAP32[e+4>>2]=HEAP32[d+4>>2];_mrb_name_class(f,b,c);_mrb_obj_value621(a,b);_mrb_const_set(f,e,c,a);c=_mrb_intern(f,__str1535|0);_mrb_obj_iv_set(f,b,c,e);STACKTOP=a}
function _mrb_define_class_id(f,e,$super){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var $super_addr,d;$super_addr=$super;d=_mrb_class_new(f,$super_addr);var g=HEAP32[(f+72|0)>>2];_mrb_obj_value621(c,d);_mrb_obj_iv_set(f,g,e,c);_mrb_name_class(f,d,e);STACKTOP=c;return d}
function _mrb_class_new(f,$super){var b;for(b=2;;)switch(b){case 2:var c,$super_addr,d;c=f;$super_addr=$super;b=0!=($super_addr|0)?3:4;break;case 3:_mrb_check_inheritable(c,$super_addr);b=4;break;case 4:d=_boot_defclass(c,$super_addr);b=0!=($super_addr|0)?5:6;break;case 5:b=d;HEAP32[b>>2]=HEAP32[b>>2]&2047|((HEAP32[d>>2]>>>11&2096896|(HEAP32[$super_addr>>2]>>>11&255)<<24>>24)&2097151)<<11;b=6;break;case 6:return _prepare_singleton_class(c,d),d;default:assert(0,"bad label: "+b)}}_mrb_class_new.X=1;
function _mrb_define_class(f,e,$super){var $super_addr;$super_addr=$super;e=_mrb_intern(f,e);return _mrb_define_class_id(f,e,$super_addr)}function _mrb_class_real(f){var e;for(e=2;;)switch(e){case 2:var b;b=f;e=3;break;case 3:if(13==(HEAP32[b>>2]&255|0)){var c=1;e=5}else e=4;break;case 4:c=12==(HEAP32[b>>2]&255|0);e=5;break;case 5:e=c?6:7;break;case 6:var $super=b+20|0;b=HEAP32[$super>>2];e=3;break;case 7:return b;default:assert(0,"bad label: "+e)}}
function _mrb_vm_define_class(f,e,$super,c){var a=STACKTOP;STACKTOP+=32;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[d>>2];HEAP32[e+4>>2]=HEAP32[d+4>>2];d=$super;$super=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[$super>>2]=HEAP32[d>>2];HEAP32[$super+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i,
j,l,k=a,n=a+8,r=a+16,t=a+24;h=f;i=c;d=0!=(_mrb_const_defined(h,e,i)|0)?3:12;break;case 3:_mrb_const_get(k,h,e,i);_mrb_check_type(h,k,10);j=HEAP32[(k|0)>>2];d=0==(HEAP32[($super+4|0)>>2]&255|0)?4:5;break;case 4:d=0!=(HEAP32[($super|0)>>2]|0)?5:11;break;case 5:d=10!=(HEAP32[($super+4|0)>>2]&255|0)?6:7;break;case 6:var d=h,p=_mrb_class_obj_get(h,__str2536|0),q=_mrb_obj_classname(h,$super);_mrb_raisef(d,p,__str3537|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=q,tempInt));d=7;break;case 7:var $super10=j+20|0,d=0!=(HEAP32[$super10>>2]|0)?8:9;break;case 8:var d=HEAP32[($super|0)>>2],$super14=j+20|0,p=_mrb_class_real(HEAP32[$super14>>2]),d=(d|0)!=(p|0)?9:10;break;case 9:d=h;p=_mrb_class_obj_get(h,__str2536|0);q=_mrb_sym2name(h,i);_mrb_raisef(d,p,__str4538|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=q,tempInt));d=10;break;case 10:d=11;break;case 11:g=j;d=19;break;case 12:d=0==
(HEAP32[($super+4|0)>>2]&255|0)?13:14;break;case 13:d=0!=(HEAP32[($super|0)>>2]|0)?14:17;break;case 14:d=10!=(HEAP32[($super+4|0)>>2]&255|0)?15:16;break;case 15:d=h;p=_mrb_class_obj_get(h,__str2536|0);q=_mrb_obj_classname(h,$super);_mrb_raisef(d,p,__str3537|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=q,tempInt));d=16;break;case 16:l=HEAP32[($super|0)>>2];d=18;break;case 17:l=HEAP32[(h+72|0)>>2];d=18;break;case 18:j=_mrb_class_new(h,l);
_setup_class(h,e,j,i);g=h;_mrb_obj_value621(n,l);_mrb_obj_value621(r,j);_mrb_funcall(t,g,n,__str5539|0,1,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=HEAP32[r>>2],HEAP32[tempInt+4>>2]=HEAP32[r+4>>2],tempInt));g=j;d=19;break;case 19:return f=g,STACKTOP=a,f;default:assert(0,"bad label: "+d)}}_mrb_vm_define_class.X=1;
function _mrb_obj_classname(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];c=_mrb_obj_class(f,e);c=_mrb_class_name(f,c);STACKTOP=b;return c}function _mrb_class_get(f,e){var b=HEAP32[(f+72|0)>>2],c=_mrb_intern(f,e);return _class_from_sym(f,b,c)}
function _class_from_sym(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h=c,i=c+8;d=f;a=e;g=b;var j=d;_mrb_obj_value621(i,a);_mrb_const_get(h,j,i,g);a=11!=(HEAP32[(h+4|0)>>2]&255|0)?3:5;break;case 3:a=10!=(HEAP32[(h+4|0)>>2]&255|0)?4:5;break;case 4:a=d;i=_mrb_class_obj_get(d,__str2536|0);j=_mrb_sym2name(d,g);_mrb_raisef(a,i,__str85619|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<
STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=j,tempInt));a=5;break;case 5:return f=HEAP32[(h|0)>>2],STACKTOP=c,f;default:assert(0,"bad label: "+a)}}
function _mrb_define_class_under(f,e,b,$super){var a=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d;for(d=2;;)switch(d){case 2:var g,h,i,j,$super_addr,k,n=a,r=a+8;h=f;i=e;j=b;$super_addr=$super;j=_mrb_intern(h,j);d=0!=(_mrb_const_defined_at(h,i,j)|0)?3:6;break;case 3:k=_class_from_sym(h,i,j);var $super3=k+20|0;d=(_mrb_class_real(HEAP32[$super3>>2])|0)!=($super_addr|0)?4:5;break;case 4:d=h;var p=j,q=_mrb_sym2name(h,j);_mrb_name_error(d,
p,__str6540|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=q,tempInt));d=5;break;case 5:g=k;d=9;break;case 6:d=0!=($super_addr|0)?8:7;break;case 7:d=h;_mrb_obj_value621(n,i);d=_mrb_obj_classname(d,n);p=_mrb_sym2name(h,j);_mrb_warn(__str7541|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=d,HEAP32[tempInt+4>>2]=p,tempInt));d=8;break;case 8:k=_mrb_class_new(h,$super_addr);g=h;_mrb_obj_value621(r,
i);_setup_class(g,r,k,j);g=k;d=9;break;case 9:return f=g,STACKTOP=a,f;default:assert(0,"bad label: "+d)}}_mrb_define_class_under.X=1;
function _mrb_define_module_under(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j=c;g=f;h=e;i=_mrb_intern(g,b);a=0!=(_mrb_const_defined_at(g,h,i)|0)?3:4;break;case 3:d=a=_class_from_sym(g,h,i);a=5;break;case 4:a=_mrb_module_new(g);d=g;_mrb_obj_value621(j,h);_setup_class(d,j,a,i);d=a;a=5;break;case 5:return f=d,STACKTOP=c,f;default:assert(0,"bad label: "+a)}}
function _mrb_define_method_raw(f,e,b,c){var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j;d=f;g=e;h=b;i=c;j=HEAP32[(g+16|0)>>2];a=0!=(j|0)?4:3;break;case 3:j=_kh_init_mt(d);HEAP32[(g+16|0)>>2]=j;a=4;break;case 4:f=_kh_put_mt(j,h);HEAP32[(HEAP32[(j+28|0)>>2]+(f<<2)|0)>>2]=i;return;default:assert(0,"bad label: "+a)}}function _mrb_define_method_id(f,e,b,c){c=_mrb_proc_new_cfunc(f,c);HEAP32[(c+16|0)>>2]=e;_mrb_define_method_raw(f,e,b,c)}
function _mrb_define_method(f,e,b,c,a){b=_mrb_intern(f,b);_mrb_define_method_id(f,e,b,c,a)}
function _mrb_define_method_vm(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=c,c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i,j;g=f;h=e;i=b;j=HEAP32[(h+16|0)>>2];d=0!=(j|0)?4:3;break;case 3:j=_kh_init_mt(g);HEAP32[(h+16|0)>>2]=j;d=4;break;case 4:f=_kh_put_mt(j,i);c=HEAP32[(c|0)>>2];HEAP32[(HEAP32[(j+28|
0)>>2]+(f<<2)|0)>>2]=c;STACKTOP=a;return;default:assert(0,"bad label: "+d)}}
function _mrb_get_args(f,e){var b=STACKTOP;STACKTOP+=124;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d,g,h,i,j=b,l,k,n,r,t,p=b+4,q,v=b+12,w,m=b+20,x=b+28,s,y,B,A=b+36,G=b+44,z,E,M=b+52,C=b+60,H,L,R,I=b+68,K,Q=b+76,O=b+84,aa,J,la=b+92,ba=b+100,U,T=b+108,ua=b+116,N,u,na,Z;a=f;d=e;h=0;i=HEAP32[(a+8|0)>>2]+8|0;l=HEAP32[(HEAP32[(a+20|0)>>2]+16|0)>>2];k=0;HEAP32[j>>2]=arguments[_mrb_get_args.length];c=0>(l|0)?3:4;break;
case 3:n=HEAP32[(HEAP32[(a+8|0)>>2]+8|0)>>2];l=HEAP32[(n+12|0)>>2];i=HEAP32[(n+20|0)>>2];c=4;break;case 4:c=5;break;case 5:var Aa=d;d=Aa+1|0;var Da=HEAP8[Aa];g=Da;c=0!=Da<<24>>24?6:74;break;case 6:var ja=g<<24>>24;c=124==(ja|0)||42==(ja|0)||38==(ja|0)?7:8;break;case 7:c=12;break;case 8:c=(l|0)<=(h|0)?9:11;break;case 9:c=0!=(k|0)?11:10;break;case 10:var X=a,ya=_mrb_class_obj_get(a,__str8542|0);_mrb_raise(X,ya,__str9543|0);c=11;break;case 11:c=12;break;case 12:var ca=g<<24>>24;c=111==(ca|0)?13:83==
(ca|0)?16:65==(ca|0)?19:72==(ca|0)?22:115==(ca|0)?25:122==(ca|0)?28:97==(ca|0)?33:102==(ca|0)?36:105==(ca|0)?44:110==(ca|0)?55:38==(ca|0)?61:124==(ca|0)?65:42==(ca|0)?66:72;break;case 13:var Na=HEAP32[j>>2],Ba=Na;HEAP32[j>>2]=Na+4|0;r=HEAP32[Ba>>2];c=(h|0)<(l|0)?14:15;break;case 14:var va=r,pb=i;i=pb+8|0;var Db=va,Ra=pb;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Db>>2]=HEAP32[Ra>>2];HEAP32[Db+4>>2]=HEAP32[Ra+4>>2];h=h+1|0;c=15;break;case 15:c=73;
break;case 16:var Pa=HEAP32[j>>2],$a=Pa;HEAP32[j>>2]=Pa+4|0;t=HEAP32[$a>>2];c=(h|0)<(l|0)?17:18;break;case 17:var pa=t,ub=a,Ha=i;i=Ha+8|0;_to_str(p,ub,Ha);var Ia=pa,ma=p;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Ia>>2]=HEAP32[ma>>2];HEAP32[Ia+4>>2]=HEAP32[ma+4>>2];h=h+1|0;c=18;break;case 18:c=73;break;case 19:var Ja=HEAP32[j>>2],Sa=Ja;HEAP32[j>>2]=Ja+4|0;q=HEAP32[Sa>>2];c=(h|0)<(l|0)?20:21;break;case 20:var qb=q,Sb=a,Eb=i;i=Eb+8|0;_to_ary(v,Sb,Eb);
var eb=qb,ab=v;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[eb>>2]=HEAP32[ab>>2];HEAP32[eb+4>>2]=HEAP32[ab+4>>2];h=h+1|0;c=21;break;case 21:c=73;break;case 22:var Fb=HEAP32[j>>2],Ta=Fb;HEAP32[j>>2]=Fb+4|0;w=HEAP32[Ta>>2];c=(h|0)<(l|0)?23:24;break;case 23:var Ea=w,wa=a,Ka=i;i=Ka+8|0;_to_hash(m,wa,Ka);var bb=Ea,xa=m;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[bb>>2]=HEAP32[xa>>2];HEAP32[bb+4>>2]=HEAP32[xa+
4>>2];h=h+1|0;c=24;break;case 24:c=73;break;case 25:B=y=0;var W=HEAP32[j>>2],qa=W;HEAP32[j>>2]=W+4|0;y=HEAP32[qa>>2];var fb=HEAP32[j>>2],Ua=fb;HEAP32[j>>2]=fb+4|0;B=HEAP32[Ua>>2];c=(h|0)<(l|0)?26:27;break;case 26:var ga=a,gb=i;i=gb+8|0;_to_str(A,ga,gb);var hb=x,ra=A;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[hb>>2]=HEAP32[ra>>2];HEAP32[hb+4>>2]=HEAP32[ra+4>>2];s=HEAP32[(x|0)>>2];HEAP32[y>>2]=HEAP32[(s+20|0)>>2];HEAP32[B>>2]=HEAP32[(s+12|0)>>2];h=
h+1|0;c=27;break;case 27:c=73;break;case 28:var Y=HEAP32[j>>2],cb=Y;HEAP32[j>>2]=Y+4|0;E=HEAP32[cb>>2];c=(h|0)<(l|0)?29:32;break;case 29:var ib=a,Ca=i;i=Ca+8|0;_to_str(M,ib,Ca);var oa=G,jb=M;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[oa>>2]=HEAP32[jb>>2];HEAP32[oa+4>>2]=HEAP32[jb+4>>2];z=HEAP32[(G|0)>>2];c=(_strlen(HEAP32[(z+20|0)>>2])|0)!=(HEAP32[(z+12|0)>>2]|0)?30:31;break;case 30:var za=a,sa=_mrb_class_obj_get(a,__str8542|0);_mrb_raise(za,sa,__str10544|
0);c=31;break;case 31:HEAP32[E>>2]=HEAP32[(z+20|0)>>2];h=h+1|0;c=32;break;case 32:c=73;break;case 33:var Va=HEAP32[j>>2],db=Va;HEAP32[j>>2]=Va+4|0;L=HEAP32[db>>2];var Fa=HEAP32[j>>2],kb=Fa;HEAP32[j>>2]=Fa+4|0;R=HEAP32[kb>>2];c=(h|0)<(l|0)?34:35;break;case 34:var La=a,vb=i;i=vb+8|0;_to_ary(I,La,vb);var Wa=C,rb=I;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Wa>>2]=HEAP32[rb>>2];HEAP32[Wa+4>>2]=HEAP32[rb+4>>2];H=HEAP32[(C|0)>>2];HEAP32[L>>2]=HEAP32[(H+
20|0)>>2];HEAP32[R>>2]=HEAP32[(H+12|0)>>2];h=h+1|0;c=35;break;case 35:c=73;break;case 36:var Gb=HEAP32[j>>2],lb=Gb;HEAP32[j>>2]=Gb+4|0;K=HEAP32[lb>>2];c=(h|0)<(l|0)?37:43;break;case 37:var Xa=HEAP32[(i+4|0)>>2]&255;c=6==(Xa|0)?38:3==(Xa|0)?39:17==(Xa|0)?40:41;break;case 38:HEAPF32[K>>2]=HEAPF32[(i|0)>>2];c=42;break;case 39:HEAPF32[K>>2]=HEAP32[(i|0)>>2]|0;c=42;break;case 40:var Ma=a,mb=_mrb_class_obj_get(a,__str2536|0);_mrb_raise(Ma,mb,__str11545|0);c=42;break;case 41:_mrb_convert_type(O,a,i,6,__str12546|
0,__str13547|0);var Ya=Q,Hb=O;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Ya>>2]=HEAP32[Hb>>2];HEAP32[Ya+4>>2]=HEAP32[Hb+4>>2];HEAPF32[K>>2]=HEAPF32[(Q|0)>>2];c=42;break;case 42:i=i+8|0;h=h+1|0;c=43;break;case 43:c=73;break;case 44:var Qa=HEAP32[j>>2],S=Qa;HEAP32[j>>2]=Qa+4|0;aa=HEAP32[S>>2];c=(h|0)<(l|0)?45:54;break;case 45:var wb=HEAP32[(i+4|0)>>2]&255;c=3==(wb|0)?46:6==(wb|0)?47:0==(wb|0)?51:52;break;case 46:HEAP32[aa>>2]=HEAP32[(i|0)>>2];c=53;
break;case 47:J=HEAPF32[(i|0)>>2];c=2147483648>=J?48:49;break;case 48:c=-2147483648<=J?50:49;break;case 49:var ka=a,xb=_mrb_class_obj_get(a,__str14548|0);_mrb_raise(ka,xb,__str15549|0);c=50;break;case 50:HEAP32[aa>>2]=J&-1;c=53;break;case 51:HEAP32[aa>>2]=0;c=53;break;case 52:_mrb_convert_type(ba,a,i,3,__str16550|0,__str17551|0);var sb=la,yb=ba;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[sb>>2]=HEAP32[yb>>2];HEAP32[sb+4>>2]=HEAP32[yb+4>>2];HEAP32[aa>>
2]=HEAP32[(la|0)>>2];c=53;break;case 53:i=i+8|0;h=h+1|0;c=54;break;case 54:c=73;break;case 55:var Nb=HEAP32[j>>2],Ib=Nb;HEAP32[j>>2]=Nb+4|0;U=HEAP32[Ib>>2];c=(h|0)<(l|0)?56:60;break;case 56:var Oa=i;i=Oa+8|0;var V=T,Za=Oa;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[V>>2]=HEAP32[Za>>2];HEAP32[V+4>>2]=HEAP32[Za+4>>2];c=4==(HEAP32[(T+4|0)>>2]&255|0)?57:58;break;case 57:HEAP16[U>>1]=HEAP16[(T|0)>>1];c=59;break;case 58:var $=a;_to_str(ua,a,T);var Jb=_mrb_intern_str($,
ua);HEAP16[U>>1]=Jb;c=59;break;case 59:h=h+1|0;c=60;break;case 60:c=73;break;case 61:var tb=HEAP32[j>>2],zb=tb;HEAP32[j>>2]=tb+4|0;N=HEAP32[zb>>2];c=0>(HEAP32[(HEAP32[(a+20|0)>>2]+16|0)>>2]|0)?62:63;break;case 62:u=HEAP32[(a+8|0)>>2]+16|0;c=64;break;case 63:u=(HEAP32[(a+8|0)>>2]+(HEAP32[(HEAP32[(a+20|0)>>2]+16|0)>>2]<<3)|0)+8|0;c=64;break;case 64:var D=N,Ab=u;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[D>>2]=HEAP32[Ab>>2];HEAP32[D+4>>2]=HEAP32[Ab+
4>>2];c=73;break;case 65:k=1;c=73;break;case 66:var Bb=HEAP32[j>>2],Kb=Bb;HEAP32[j>>2]=Bb+4|0;na=HEAP32[Kb>>2];var Cb=HEAP32[j>>2],Tb=Cb;HEAP32[j>>2]=Cb+4|0;Z=HEAP32[Tb>>2];c=(l|0)>(h|0)?67:70;break;case 67:HEAP32[Z>>2]=l-h|0;c=0<(HEAP32[Z>>2]|0)?68:69;break;case 68:HEAP32[na>>2]=i;h=l;c=69;break;case 69:h=l;i=i+(HEAP32[Z>>2]<<3)|0;c=71;break;case 70:HEAP32[Z>>2]=0;HEAP32[na>>2]=0;c=71;break;case 71:c=73;break;case 72:var ta=a,Yb=_mrb_class_obj_get(a,__str8542|0),Ob=g<<24>>24;_mrb_raisef(ta,Yb,__str18552|
0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Ob,tempInt));c=73;break;case 73:c=5;break;case 74:c=0!=g<<24>>24?77:75;break;case 75:c=(l|0)>(h|0)?76:77;break;case 76:var Ub=a,Pb=_mrb_class_obj_get(a,__str8542|0);_mrb_raise(Ub,Pb,__str9543|0);c=77;break;case 77:var P=h;STACKTOP=b;return P;default:assert(0,"bad label: "+c)}}_mrb_get_args.X=1;
function _to_str(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_check_type(f,e,b,17,__str83617|0,__str84618|0);STACKTOP=c}
function _to_ary(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_check_type(f,e,b,15,__str81615|0,__str82616|0);STACKTOP=c}
function _to_hash(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_check_type(f,e,b,16,__str78612|0,__str79613|0);STACKTOP=c}
function _mrb_include_module(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h,i,j,$superclass_seen;a=f;d=e;g=b;h=d;c=3;break;case 3:c=0!=(g|0)?4:21;break;case 4:i=d;$superclass_seen=0;c=5;break;case 5:c=0!=(i|0)?6:16;break;case 6:c=(d|0)!=(i|0)?7:9;break;case 7:c=10==(HEAP32[i>>2]&255|0)?8:9;break;case 8:$superclass_seen=1;c=15;break;case 9:c=(HEAP32[(i+16|0)>>2]|0)==(HEAP32[(g+16|0)>>2]|0)?10:14;break;case 10:c=12==(HEAP32[i>>2]&255|0)?11:13;break;case 11:c=0!=($superclass_seen|0)?13:12;break;
case 12:h=i;c=13;break;case 13:c=20;break;case 14:c=15;break;case 15:var $super=i+20|0;i=HEAP32[$super>>2];c=5;break;case 16:j=_mrb_obj_alloc(a,12,HEAP32[(a+76|0)>>2]);c=12==(HEAP32[g>>2]&255|0)?17:18;break;case 17:HEAP32[(j+4|0)>>2]=HEAP32[(g+4|0)>>2];c=19;break;case 18:HEAP32[(j+4|0)>>2]=g;c=19;break;case 19:HEAP32[(j+16|0)>>2]=HEAP32[(g+16|0)>>2];HEAP32[(j+12|0)>>2]=HEAP32[(g+12|0)>>2];var $super26=h+20|0,$super27=j+20|0;HEAP32[$super27>>2]=HEAP32[$super26>>2];var $super28=h+20|0;HEAP32[$super28>>
2]=j;_mrb_field_write_barrier(a,h,j);h=j;c=20;break;case 20:var $super29=g+20|0;g=HEAP32[$super29>>2];c=3;break;case 21:return;default:assert(0,"bad label: "+c)}}_mrb_include_module.X=1;
function _mrb_class651(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a,d;d=f;c=HEAP32[(e+4|0)>>2]&255;c=0==(c|0)?3:2==(c|0)?6:4==(c|0)?7:3==(c|0)?8:6==(c|0)?9:8==(c|0)?10:11;break;case 3:c=0!=(HEAP32[(e|0)>>2]|0)?4:5;break;case 4:a=HEAP32[(d+112|0)>>2];c=12;break;
case 5:a=HEAP32[(d+116|0)>>2];c=12;break;case 6:a=HEAP32[(d+108|0)>>2];c=12;break;case 7:a=HEAP32[(d+120|0)>>2];c=12;break;case 8:a=HEAP32[(d+104|0)>>2];c=12;break;case 9:a=HEAP32[(d+100|0)>>2];c=12;break;case 10:a=HEAP32[(d+72|0)>>2];c=12;break;case 11:a=HEAP32[(HEAP32[(e|0)>>2]+4|0)>>2];c=12;break;case 12:return STACKTOP=b,a;default:assert(0,"bad label: "+c)}}_mrb_class651.X=1;
function _mrb_mod_module_eval(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,a=c,g=c+8;d=e;a=1==(_mrb_get_args(d,__str19553|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,HEAP32[tempInt+
4>>2]=g,tempInt))|0)?3:4;break;case 3:var a=d,h=_mrb_class_obj_get(d,__str20554|0);_mrb_raise(a,h,__str21555|0);a=4;break;case 4:e=HEAP32[(b|0)>>2];_mrb_yield_internal(f,d,g,0,0,b,e);STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_singleton_class(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=e;a=HEAP32[(b+4|0)>>2]&255;a=0==(a|0)?3:2==(a|0)?7:8==(a|0)||7==(a|0)?8:4==(a|0)||3==(a|0)||6==(a|0)?9:10;break;case 3:a=0==(HEAP32[(b+4|0)>>2]&255|0)?4:6;break;case 4:a=0!=(HEAP32[(b|
0)>>2]|0)?6:5;break;case 5:_mrb_obj_value621(f,HEAP32[(d+116|0)>>2]);a=12;break;case 6:_mrb_obj_value621(f,HEAP32[(d+112|0)>>2]);a=12;break;case 7:_mrb_obj_value621(f,HEAP32[(d+108|0)>>2]);a=12;break;case 8:_mrb_obj_value621(f,HEAP32[(d+72|0)>>2]);a=12;break;case 9:var a=d,g=_mrb_class_obj_get(d,__str2536|0);_mrb_raise(a,g,__str22556|0);_mrb_nil_value644(f);a=12;break;case 10:a=11;break;case 11:a=HEAP32[(b|0)>>2];_prepare_singleton_class(d,a);_mrb_obj_value621(f,HEAP32[(a+4|0)>>2]);a=12;break;case 12:STACKTOP=
c;return;default:assert(0,"bad label: "+a)}}_mrb_singleton_class.X=1;
function _mrb_nil_value644(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _prepare_singleton_class(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d,g,h,i=b;a=f;d=e;c=13==(HEAP32[HEAP32[(d+4|0)>>2]>>2]&255|0)?3:4;break;case 3:c=14;break;case 4:g=_mrb_obj_alloc(a,13,HEAP32[(a+76|0)>>2]);HEAP32[(g+16|0)>>2]=0;HEAP32[(g+12|0)>>2]=0;c=10==(HEAP32[d>>2]&255|0)?5:9;break;case 5:h=d;var $super=h+20|0;c=0!=(HEAP32[$super>>2]|0)?7:6;break;case 6:var $super7=g+
20|0;HEAP32[$super7>>2]=HEAP32[(a+76|0)>>2];c=8;break;case 7:var $super8=h+20|0,$super10=g+20|0;HEAP32[$super10>>2]=HEAP32[(HEAP32[$super8>>2]+4|0)>>2];c=8;break;case 8:c=13;break;case 9:c=13==(HEAP32[d>>2]&255|0)?10:11;break;case 10:h=d;var $super16=h+20|0;_prepare_singleton_class(a,HEAP32[$super16>>2]);var $super17=h+20|0,$super19=g+20|0;HEAP32[$super19>>2]=HEAP32[(HEAP32[$super17>>2]+4|0)>>2];c=12;break;case 11:var $super22=g+20|0;HEAP32[$super22>>2]=HEAP32[(d+4|0)>>2];c=12;break;case 12:c=13;
break;case 13:HEAP32[(d+4|0)>>2]=g;_mrb_field_write_barrier(a,d,g);_mrb_field_write_barrier(a,g,d);c=a;var v=g,w=_mrb_intern(a,__str67601|0);_mrb_obj_value621(i,d);_mrb_obj_iv_set(c,v,w,i);c=14;break;case 14:STACKTOP=b;return;default:assert(0,"bad label: "+c)}}_prepare_singleton_class.X=1;function _mrb_define_singleton_method(f,e,b,c,a){_prepare_singleton_class(f,e);e=HEAP32[(e+4|0)>>2];b=_mrb_intern(f,b);_mrb_define_method_id(f,e,b,c,a)}
function _mrb_define_class_method(f,e,b,c,a){_mrb_define_singleton_method(f,e,b,c,a)}function _mrb_define_module_function(f,e,b,c,a){_mrb_define_class_method(f,e,b,c,a);_mrb_define_method(f,e,b,c,a)}
function _mrb_method_search_vm(f,e,b){for(f=2;;)switch(f){case 2:var c,a,d,g,h,i,j;a=e;d=b;i=HEAP32[a>>2];f=3;break;case 3:f=0!=(i|0)?4:11;break;case 4:j=HEAP32[(i+16|0)>>2];f=0!=(j|0)?5:10;break;case 5:g=_kh_get_mt(j,d);f=(g|0)!=(HEAP32[(j|0)>>2]|0)?6:9;break;case 6:h=HEAP32[(HEAP32[(j+28|0)>>2]+(g<<2)|0)>>2];f=0!=(h|0)?8:7;break;case 7:f=11;break;case 8:HEAP32[a>>2]=i;c=h;f=12;break;case 9:f=10;break;case 10:var $super=i+20|0;i=HEAP32[$super>>2];f=3;break;case 11:c=0;f=12;break;case 12:return c;
default:assert(0,"bad label: "+f)}}_mrb_method_search_vm.X=1;
function _mrb_method_search(f,e,b){var c=STACKTOP;STACKTOP+=36;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g=c,h,i,j=c+4,l=c+12,k=c+20,n=c+28;d=f;HEAP32[g>>2]=e;h=b;i=_mrb_method_search_vm(d,g,h);a=0!=(i|0)?6:3;break;case 3:a=d;_mrb_obj_value621(l,HEAP32[g>>2]);_mrb_funcall(j,a,l,__str23557|0,0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>
2]=0,tempInt));a=64<(HEAP32[(HEAP32[(j|0)>>2]+12|0)>>2]|0)?4:5;break;case 4:a=d;_mrb_obj_value621(k,HEAP32[g>>2]);_mrb_any_to_s(n,a,k);a=j;var r=n;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[r>>2];HEAP32[a+4>>2]=HEAP32[r+4>>2];a=5;break;case 5:a=d;var r=_mrb_class_obj_get(d,__str24558|0),t=_mrb_sym2name(d,h),p=HEAP32[(HEAP32[(j|0)>>2]+20|0)>>2];_mrb_raisef(a,r,__str25559|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,
"Ran out of stack"),HEAP32[tempInt>>2]=t,HEAP32[tempInt+4>>2]=p,tempInt));a=6;break;case 6:return f=i,STACKTOP=c,f;default:assert(0,"bad label: "+a)}}_mrb_method_search.X=1;
function _mrb_obj_call_init(f,e,b,c){var a=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[d>>2];HEAP32[e+4>>2]=HEAP32[d+4>>2];_mrb_funcall_argv(a,f,e,HEAP16[(f+68|0)>>1],b,c);STACKTOP=a}
function _mrb_class_new_instance(f,e,b,c,a){var d=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g,h=d+8;g=_mrb_obj_alloc(e,HEAP32[a>>2]&255,a);var $super=g+20|0;HEAP32[$super>>2]=a;_mrb_obj_value621(h,g);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[h>>2];HEAP32[d+4>>2]=HEAP32[h+4>>2];_mrb_obj_call_init(e,d,b,c);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[f>>2]=HEAP32[d>>2];HEAP32[f+4>>2]=HEAP32[d+4>>2];STACKTOP=d}
function _mrb_class_new_instance_m(f,e,b){var c=STACKTOP;STACKTOP+=40;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];var a=c+4,d,g=c+12,h=c+16,i=c+24,j=c+32,b=HEAP32[(b|0)>>2];_mrb_get_args(e,__str26560|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+
4>>2]=g,HEAP32[tempInt+8>>2]=a,tempInt));d=_mrb_obj_alloc(e,HEAP32[b>>2]&255,b);var $super=d+20|0;HEAP32[$super>>2]=b;_mrb_obj_value621(i,d);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[h>>2]=HEAP32[i>>2];HEAP32[h+4>>2]=HEAP32[i+4>>2];_mrb_funcall_with_block(j,e,h,HEAP16[(e+68|0)>>1],HEAP32[g>>2],HEAP32[c>>2],a);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[h>>2];HEAP32[f+4>>2]=HEAP32[h+4>>
2];STACKTOP=c}
function _mrb_instance_new(f,e,b){var c=STACKTOP;STACKTOP+=40;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i=c,j=c+8,l=c+16,k=c+20,n=c+24,r=c+32;d=e;g=HEAP32[(b|0)>>2];h=HEAP32[g>>2]>>>11&255;a=0==(h|0)?3:4;break;case 3:h=9;a=4;break;case 4:e=_mrb_obj_alloc(d,h,g);_mrb_obj_value621(n,
e);e=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[e>>2]=HEAP32[n>>2];HEAP32[e+4>>2]=HEAP32[n+4>>2];_mrb_get_args(d,__str26560|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=l,HEAP32[tempInt+4>>2]=k,HEAP32[tempInt+8>>2]=j,tempInt));_mrb_funcall_with_block(r,d,i,HEAP16[(d+68|0)>>1],HEAP32[k>>2],HEAP32[l>>2],j);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[f>>2]=HEAP32[i>>2];HEAP32[f+4>>2]=HEAP32[i+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_instance_new.X=1;
function _mrb_class_new_class(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(b=2;;)switch(b){case 2:var d,$super=c,h=c+8;d=e;b=0==(_mrb_get_args(d,__str27561|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=$super,tempInt))|
0)?3:4;break;case 3:_mrb_obj_value621(h,HEAP32[(d+72|0)>>2]);b=$super;a=h;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=4;break;case 4:e=_mrb_class_new(d,HEAP32[($super|0)>>2]);_mrb_obj_value621(f,e);STACKTOP=c;return;default:assert(0,"bad label: "+b)}}
function _mrb_class_superclass(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a;a=HEAP32[(b|0)>>2];var $super=a+20|0;a=HEAP32[$super>>2];c=3;break;case 3:if(0!=(a|0))c=4;else var g=0,c=5;break;case 4:g=12==(HEAP32[a>>2]&255|0);c=5;break;case 5:c=g?6:7;break;case 6:var $super1=
a+20|0;a=HEAP32[$super1>>2];c=3;break;case 7:c=0!=(a|0)?9:8;break;case 8:_mrb_nil_value644(f);c=10;break;case 9:_mrb_obj_value621(f,a);c=10;break;case 10:STACKTOP=e;return;default:assert(0,"bad label: "+c)}}
function _mrb_obj_respond_to(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h;a=f;d=e;b=3;break;case 3:b=0!=(a|0)?4:11;break;case 4:h=HEAP32[(a+16|0)>>2];b=0!=(h|0)?5:10;break;case 5:g=_kh_get_mt(h,d);b=(g|0)!=(HEAP32[(h|0)>>2]|0)?6:9;break;case 6:b=0!=(HEAP32[(HEAP32[(h+28|0)>>2]+(g<<2)|0)>>2]|0)?7:8;break;case 7:c=1;b=12;break;case 8:c=0;b=12;break;case 9:b=10;break;case 10:var $super=a+20|0;a=HEAP32[$super>>2];b=3;break;case 11:c=0;b=12;break;case 12:return c;default:assert(0,"bad label: "+
b)}}_mrb_obj_respond_to.X=1;function _mrb_respond_to(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];f=_mrb_class651(f,e);b=_mrb_obj_respond_to(f,b);STACKTOP=c;return b}
function _mrb_class_path(f,e,b){var c=STACKTOP;STACKTOP+=60;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h=c,i=c+8;a=c+12;var j,l,k=c+20,n=c+28,r=c+36,t=c+44,p=c+52;d=e;g=b;var q=d,v=g,w=_mrb_intern(d,__str28562|0);_mrb_obj_iv_get(a,q,v,w);q=h;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[q>>2]=HEAP32[a>>2];HEAP32[q+4>>2]=HEAP32[a+4>>2];a=0==(HEAP32[(h+4|0)>>2]&255|
0)?3:12;break;case 3:a=0!=(HEAP32[(h|0)>>2]|0)?12:4;break;case 4:j=_mrb_class_outer_module(d,g);l=_mrb_class_sym(d,g,j);a=0==(l<<16>>16|0)?5:6;break;case 5:_mrb_nil_value644(f);a=13;break;case 6:a=0!=(j|0)?7:9;break;case 7:a=(j|0)!=(HEAP32[(d+72|0)>>2]|0)?8:9;break;case 8:_mrb_class_path(k,d,j);a=d;_mrb_str_new(n,d,__str29563|0,2);_mrb_str_plus(r,a,k,n);a=h;q=r;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[q>>2];HEAP32[a+4>>2]=HEAP32[q+
4>>2];a=_mrb_sym2name_len(d,l,i);q=d;_mrb_str_new(t,d,a,HEAP32[i>>2]);_mrb_str_concat(q,h,t);a=10;break;case 9:a=_mrb_sym2name_len(d,l,i);_mrb_str_new(p,d,a,HEAP32[i>>2]);a=h;q=p;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[q>>2];HEAP32[a+4>>2]=HEAP32[q+4>>2];a=10;break;case 10:a=11;break;case 11:a=d;q=g;v=_mrb_intern(d,__str28562|0);_mrb_obj_iv_set(a,q,v,h);a=12;break;case 12:a=f;q=h;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[q>>2];HEAP32[a+4>>2]=HEAP32[q+4>>2];a=13;break;case 13:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_class_path.X=1;
function _mrb_class_name(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;_mrb_class_path(d,f,e);c=0==(HEAP32[(d+4|0)>>2]&255|0)?3:5;break;case 3:c=0!=(HEAP32[(d|0)>>2]|0)?5:4;break;case 4:a=0;c=6;break;case 5:a=HEAP32[(HEAP32[(d|0)>>2]+20|0)>>2];c=6;break;case 6:return c=a,STACKTOP=b,c;default:assert(0,"bad label: "+c)}}
function _mrb_obj_class(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];c=_mrb_class651(f,e);c=_mrb_class_real(c);STACKTOP=b;return c}
function _mrb_check_inheritable(f,$super){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,$super_addr,g=b;a=f;$super_addr=$super;c=10!=(HEAP32[$super_addr>>2]&255|0)?3:4;break;case 3:c=a;var h=_mrb_class_obj_get(a,__str2536|0),i=a;_mrb_obj_value621(g,$super_addr);i=_mrb_obj_classname(i,g);_mrb_raisef(c,h,__str3537|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=i,tempInt));c=4;break;case 4:c=13==(HEAP32[$super_addr>>2]&255|0)?5:6;break;case 5:c=a;h=_mrb_class_obj_get(a,__str2536|0);_mrb_raise(c,h,__str30564|0);c=6;break;case 6:c=($super_addr|0)==(HEAP32[(a+76|0)>>2]|0)?7:8;break;case 7:c=a;h=_mrb_class_obj_get(a,__str2536|0);_mrb_raise(c,h,__str31565|0);c=8;break;case 8:STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _boot_defclass(f,$super){var b;for(b=2;;)switch(b){case 2:var c,$super_addr,d;c=f;$super_addr=$super;d=_mrb_obj_alloc(c,10,HEAP32[(c+76|0)>>2]);b=0!=($super_addr|0)?3:4;break;case 3:var g=$super_addr;b=5;break;case 4:g=HEAP32[(c+72|0)>>2];b=5;break;case 5:var $super1=d+20|0;HEAP32[$super1>>2]=g;_mrb_field_write_barrier(c,d,$super_addr);b=_kh_init_mt(c);HEAP32[(d+16|0)>>2]=b;return d;default:assert(0,"bad label: "+b)}}
function _mrb_alias_method(f,e,b,c){var a=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");c=_mrb_method_search(f,e,c);_mrb_obj_value621(a,c);_mrb_define_method_vm(f,e,b,a);STACKTOP=a}function _mrb_define_alias(f,e,b,c){b=_mrb_intern(f,b);c=_mrb_intern(f,c);_mrb_alias_method(f,e,b,c)}
function _mrb_mod_alias(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c+8;b=HEAP32[(b|0)>>2];_mrb_get_args(e,__str32566|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=a,tempInt));_mrb_alias_method(e,
b,HEAP16[(c|0)>>1],HEAP16[(a|0)>>1]);_mrb_nil_value644(f);STACKTOP=c}function _mrb_undef_method(f,e,b){b=_mrb_intern(f,b);_undef_method(f,e,b)}
function _undef_method(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h,i=c;d=f;g=e;h=b;a=3;break;case 3:a=i+4|0;HEAP32[a>>2]=HEAP32[a>>2]&-256|14;HEAP32[(i|0)>>2]=0;a=4;break;case 4:_mrb_define_method_vm(d,g,h,i);STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_undef_class_method(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=c+8;_mrb_obj_value621(c,e);_mrb_singleton_class(a,f,c);_mrb_undef_method(f,HEAP32[(a|0)>>2],b);STACKTOP=c}
function _mrb_mod_undef(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h=c,i=c+4;d=e;g=HEAP32[(b|0)>>2];_mrb_get_args(d,__str33567|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=i,HEAP32[tempInt+
4>>2]=h,tempInt));a=3;break;case 3:a=HEAP32[h>>2];HEAP32[h>>2]=a-1|0;a=0!=(a|0)?4:5;break;case 4:_undef_method(d,g,HEAP16[(HEAP32[i>>2]|0)>>1]);HEAP32[i>>2]=HEAP32[i>>2]+8|0;a=3;break;case 5:_mrb_nil_value644(f);STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_mod_const_defined(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d=c,a=e;_mrb_get_args(a,__str34568|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=d,tempInt));var g=a,h=_mrb_sym_value(a,
d);_check_const_name(g,h);g=a;a=_mrb_sym_value(a,d);a=0!=(_mrb_const_defined(g,b,a)|0)?3:4;break;case 3:_mrb_true_value654(f);a=5;break;case 4:_mrb_false_value655(f);a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _check_const_name(f,e){var b=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d,g;c=b;a=f;d=e;g=_mrb_sym2name_len(a,d,c);c=1>(HEAP32[c>>2]|0)?4:3;break;case 3:c=0!=(_isupper(HEAP8[g]&255)|0)?5:4;break;case 4:c=g;_mrb_name_error(a,d,__str77611|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));c=5;break;case 5:STACKTOP=b;return;
default:assert(0,"bad label: "+c)}}
function _mrb_sym_value(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a,d,g=b;d=f;c=17==(HEAP32[(e+4|0)>>2]&255|0)?3:4;break;case 3:a=_mrb_intern_str(d,e);c=8;break;case 4:c=4==(HEAP32[(e+4|0)>>2]&255|0)?6:5;break;case 5:_mrb_funcall(g,d,e,__str23557|
0,0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));var c=d,h=_mrb_class_obj_get(d,__str2536|0),i=_mrb_string_value_ptr(d,g);_mrb_raisef(c,h,__str76610|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=i,tempInt));c=6;break;case 6:c=7;break;case 7:a=HEAP16[(e|0)>>1];c=8;break;case 8:return STACKTOP=b,a;default:assert(0,"bad label: "+c)}}
function _mrb_true_value654(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]=HEAP32[b>>2]&-256|2;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_false_value655(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_mod_const_get(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str34568|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));a=_mrb_sym_value(e,c);_check_const_name(e,a);a=_mrb_sym_value(e,
c);_mrb_const_get(f,e,b,a);STACKTOP=c}
function _mrb_mod_const_set(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c+8;_mrb_get_args(e,__str32566|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=a,tempInt));var d=_mrb_sym_value(e,c);_check_const_name(e,
d);d=_mrb_sym_value(e,c);_mrb_const_set(e,b,d,a);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[a>>2];HEAP32[f+4>>2]=HEAP32[a+4>>2];STACKTOP=c}
function _mrb_init_class(f){var e=STACKTOP;STACKTOP+=40;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b,c,a,d,g=e+8,h=e+16,i=e+24,j=e+32;b=_boot_defclass(f,0);c=_boot_defclass(f,b);HEAP32[(f+72|0)>>2]=c;a=_boot_defclass(f,c);HEAP32[(f+80|0)>>2]=a;d=_boot_defclass(f,a);HEAP32[(f+76|0)>>2]=d;HEAP32[(d+4|0)>>2]=d;HEAP32[(a+4|0)>>2]=d;HEAP32[(c+4|0)>>2]=d;HEAP32[(b+4|0)>>2]=d;_prepare_singleton_class(f,b);_prepare_singleton_class(f,c);_prepare_singleton_class(f,
a);_prepare_singleton_class(f,d);_mrb_obj_value621(e,b);_mrb_define_const(f,b,__str35569|0,e);_mrb_obj_value621(g,b);_mrb_define_const(f,c,__str35569|0,g);_mrb_obj_value621(h,c);_mrb_define_const(f,c,__str36570|0,h);_mrb_obj_value621(i,a);_mrb_define_const(f,c,__str37571|0,i);_mrb_obj_value621(j,d);_mrb_define_const(f,c,__str38572|0,j);g=_mrb_intern(f,__str35569|0);_mrb_name_class(f,b,g);g=_mrb_intern(f,__str36570|0);_mrb_name_class(f,c,g);c=_mrb_intern(f,__str37571|0);_mrb_name_class(f,a,c);c=_mrb_intern(f,
__str38572|0);_mrb_name_class(f,d,c);_mrb_undef_method(f,a,__str39573|0);HEAP32[d>>2]=HEAP32[d>>2]&2047|((HEAP32[d>>2]>>>11&2096896|10)&2097151)<<11;_mrb_define_method(f,b,__str40574|0,160,0);_mrb_define_method(f,b,__str41575|0,62,0);_mrb_define_method(f,b,__str42576|0,16,8192);_mrb_define_class_method(f,d,__str39573|0,12,8192);_mrb_define_method(f,d,__str43577|0,478,0);_mrb_define_method(f,d,__str39573|0,224,8192);_mrb_define_method(f,d,__str5539|0,160,524288);_mrb_define_method(f,a,__str44578|0,
336,524288);_mrb_define_method(f,a,__str45579|0,160,524288);_mrb_define_method(f,a,__str46580|0,148,8192);_mrb_define_method(f,a,__str47581|0,290,524288);_mrb_define_method(f,a,__str48582|0,210,524288);_mrb_define_method(f,a,__str49583|0,134,8192);_mrb_define_method(f,a,__str50584|0,160,524288);_mrb_define_method(f,a,__str51585|0,276,0);_mrb_define_method(f,a,__str52586|0,578,8192);_mrb_define_method(f,a,__str53587|0,134,8192);_mrb_define_method(f,a,__str54588|0,46,0);_mrb_define_method(f,a,__str23557|
0,46,0);_mrb_define_method(f,a,__str55589|0,172,8192);_mrb_define_method(f,a,__str56590|0,614,0);_mrb_define_method(f,a,__str57591|0,2,8192);_mrb_define_method(f,a,__str58592|0,262,524288);_mrb_define_method(f,a,__str59593|0,344,524288);_mrb_define_method(f,a,__str60594|0,116,1048576);_mrb_define_method(f,a,__str61595|0,52,524288);_mrb_define_method(f,a,__str62596|0,600,0);_mrb_define_method(f,a,__str63597|0,58,524288);_mrb_undef_method(f,d,__str48582|0);_mrb_undef_method(f,d,__str44578|0);STACKTOP=
e}_mrb_init_class.X=1;function _mrb_bob_init(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];_mrb_nil_value644(f);STACKTOP=e}
function _mrb_bob_not(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:c=0!=(HEAP32[(b+4|0)>>2]&255|0)?3:4;break;case 3:_mrb_false_value655(f);c=5;break;case 4:_mrb_true_value654(f);c=5;break;case 5:STACKTOP=e;return;default:assert(0,"bad label: "+c)}}
function _mrb_bob_missing(f,e,b){var c=STACKTOP;STACKTOP+=40;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,a=c+8,h=c+12,i=c+16,j=c+24,l=c+32;d=e;_mrb_get_args(d,__str72606|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>
2]=g,HEAP32[tempInt+4>>2]=a,HEAP32[tempInt+8>>2]=h,tempInt));a=4==(HEAP32[(g+4|0)>>2]&255|0)?4:3;break;case 3:a=d;h=_mrb_class_obj_get(d,__str2536|0);_mrb_raise(a,h,__str73607|0);a=4;break;case 4:_mrb_funcall(j,d,b,__str23557|0,0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=i;h=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[h>>2];HEAP32[a+
4>>2]=HEAP32[h+4>>2];a=64<(HEAP32[(HEAP32[(i|0)>>2]+12|0)>>2]|0)?5:6;break;case 5:_mrb_any_to_s(l,d,b);a=i;h=l;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[h>>2];HEAP32[a+4>>2]=HEAP32[h+4>>2];a=6;break;case 6:e=d;b=_mrb_class_obj_get(d,__str74608|0);d=_mrb_sym2name(d,HEAP16[(g|0)>>1]);i=HEAP32[(HEAP32[(i|0)>>2]+20|0)>>2];_mrb_raisef(e,b,__str75609|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=d,HEAP32[tempInt+4>>2]=i,tempInt));_mrb_nil_value644(f);STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_bob_missing.X=1;
function _mrb_mod_extend_object(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c+8;_mrb_check_type(e,b,11);_mrb_get_args(e,__str34568|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_mrb_singleton_class(a,e,
c);_mrb_include_module(e,HEAP32[(a|0)>>2],HEAP32[(b|0)>>2]);e=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[e>>2];HEAP32[f+4>>2]=HEAP32[e+4>>2];STACKTOP=c}
function _mrb_mod_include(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+4,i,j=c+8,l=c+16;d=e;_mrb_get_args(d,__str33567|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,HEAP32[tempInt+
4>>2]=h,tempInt));i=0;a=3;break;case 3:a=(i|0)<(HEAP32[h>>2]|0)?4:6;break;case 4:_mrb_check_type(d,HEAP32[g>>2]+(i<<3)|0,11);a=5;break;case 5:i=i+1|0;a=3;break;case 6:a=7;break;case 7:a=HEAP32[h>>2];HEAP32[h>>2]=a-1|0;a=0!=(a|0)?8:9;break;case 8:_mrb_funcall(j,d,HEAP32[g>>2]+(HEAP32[h>>2]<<3)|0,__str48582|0,1,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=HEAP32[b>>2],HEAP32[tempInt+4>>2]=HEAP32[b+4>>2],tempInt));_mrb_funcall(l,d,HEAP32[g>>
2]+(HEAP32[h>>2]<<3)|0,__str50584|0,1,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=HEAP32[b>>2],HEAP32[tempInt+4>>2]=HEAP32[b+4>>2],tempInt));a=7;break;case 9:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_mod_include_p(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d=c,g,a=e;g=HEAP32[(b|0)>>2];_mrb_get_args(a,__str34568|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=d,tempInt));
_mrb_check_type(a,d,11);a=3;break;case 3:a=0!=(g|0)?4:9;break;case 4:a=12==(HEAP32[g>>2]&255|0)?5:8;break;case 5:a=(HEAP32[(g+4|0)>>2]|0)==(HEAP32[(d|0)>>2]|0)?6:7;break;case 6:_mrb_true_value654(f);a=10;break;case 7:a=8;break;case 8:var $super=g+20|0;g=HEAP32[$super>>2];a=3;break;case 9:_mrb_false_value655(f);a=10;break;case 10:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_mod_append_features(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_check_type(e,b,11);_mrb_get_args(e,__str34568|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_mrb_include_module(e,HEAP32[(c|
0)>>2],HEAP32[(b|0)>>2]);e=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[e>>2];HEAP32[f+4>>2]=HEAP32[e+4>>2];STACKTOP=c}
function _mrb_mod_included_modules(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h,i=c+8,j=c+16;d=e;h=HEAP32[(b|0)>>2];_mrb_ary_new(i,d);a=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[i>>
2];HEAP32[a+4>>2]=HEAP32[i+4>>2];a=3;break;case 3:a=0!=(h|0)?4:7;break;case 4:a=12==(HEAP32[h>>2]&255|0)?5:6;break;case 5:a=d;_mrb_obj_value621(j,HEAP32[(h+4|0)>>2]);_mrb_ary_push(a,g,j);a=6;break;case 6:var $super=h+20|0;h=HEAP32[$super>>2];a=3;break;case 7:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[g>>2];HEAP32[f+4>>2]=HEAP32[g+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_mod_instance_methods(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c+4;b=HEAP32[(b|0)>>2];_mrb_get_args(e,__str33567|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=a,tempInt));_class_instance_method_list(f,
e,HEAP32[a>>2],HEAP32[c>>2],b,0);STACKTOP=c}
function _mrb_mod_to_s(f,e,b){var c=STACKTOP;STACKTOP+=336;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+8,i=c+16,j=c+24,l=c+32,k=c+40,n=c+48,r=c+56,t,p,q=c+64,v,w=c+320,m=c+328;d=e;a=13==(HEAP32[(b+4|0)>>2]&255|0)?3:7;break;case 3:_mrb_str_new(g,d,__str66600|0,2);var a=d,
x=_mrb_intern(d,__str67601|0);_mrb_iv_get(h,a,b,x);_mrb_str_cat2(i,d,g,__str68602|0);a=HEAP32[(h+4|0)>>2]&255;a=10==(a|0)||11==(a|0)||13==(a|0)?4:5;break;case 4:a=d;_mrb_inspect(j,d,h);_mrb_str_append(l,a,g,j);a=6;break;case 5:a=d;_mrb_any_to_s(k,d,h);_mrb_str_append(n,a,g,k);a=6;break;case 6:_mrb_str_cat2(r,d,g,__str69603|0);a=f;x=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[x>>2];HEAP32[a+4>>2]=HEAP32[x+4>>2];a=14;break;case 7:t=HEAP32[(b|
0)>>2];p=_mrb_class_name(d,t);a=0!=(p|0)?13:8;break;case 8:v=0;a=HEAP32[(b+4|0)>>2]&255;a=10==(a|0)?9:11==(a|0)?10:11;break;case 9:v=t;v=_snprintf(q|0,256,__str70604|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=v,tempInt));a=12;break;case 10:v=t;v=_snprintf(q|0,256,__str71605|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=v,tempInt));a=12;break;case 11:a=12;break;case 12:a=d;
_mrb_str_new(w,d,q|0,v);_mrb_str_dup(f,a,w);a=14;break;case 13:a=d;_mrb_str_new_cstr(m,d,p);_mrb_str_dup(f,a,m);a=14;break;case 14:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_mod_to_s.X=1;
function _mrb_mod_ancestors(f,e,b){var c=STACKTOP;STACKTOP+=32;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h,i=c+8,j=c+16,l=c+24;d=e;h=HEAP32[(b|0)>>2];_mrb_ary_new(i,d);a=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[i>>
2];HEAP32[a+4>>2]=HEAP32[i+4>>2];a=3;break;case 3:a=0!=(h|0)?4:8;break;case 4:a=12==(HEAP32[h>>2]&255|0)?5:6;break;case 5:a=d;_mrb_obj_value621(j,HEAP32[(h+4|0)>>2]);_mrb_ary_push(a,g,j);a=7;break;case 6:a=d;_mrb_obj_value621(l,h);_mrb_ary_push(a,g,l);a=7;break;case 7:var $super=h+20|0;h=HEAP32[$super>>2];a=3;break;case 8:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[g>>2];HEAP32[f+4>>2]=HEAP32[g+4>>2];STACKTOP=c;return;default:assert(0,
"bad label: "+a)}}_mrb_mod_ancestors.X=1;
function _mod_define_method(f,e,b){var c=STACKTOP;STACKTOP+=12;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h=c,i=c+4;d=e;g=HEAP32[(b|0)>>2];_mrb_get_args(d,__str64598|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=h,
HEAP32[tempInt+4>>2]=i,tempInt));a=0==(HEAP32[(i+4|0)>>2]&255|0)?3:5;break;case 3:a=0!=(HEAP32[(i|0)>>2]|0)?5:4;break;case 4:var a=d,j=_mrb_class_obj_get(d,__str8542|0);_mrb_raise(a,j,__str65599|0);a=5;break;case 5:e=_mrb_obj_alloc(d,14,HEAP32[(d+84|0)>>2]);_mrb_proc_copy(e,HEAP32[(i|0)>>2]);_mrb_define_method_raw(d,g,HEAP16[h>>1],e);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[i>>2];HEAP32[f+4>>2]=HEAP32[i+4>>2];STACKTOP=c;return;default:assert(0,
"bad label: "+a)}}_mod_define_method.X=1;
function _mrb_mod_eqq(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d=c,a=e;_mrb_get_args(a,__str34568|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=d,tempInt));a=0!=(_mrb_obj_is_kind_of(a,
d,HEAP32[(b|0)>>2])|0)?4:3;break;case 3:_mrb_false_value655(f);a=5;break;case 4:_mrb_true_value654(f);a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _check_type(f,e,b,c,a,d){var g=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var h=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[h>>2];HEAP32[b+4>>2]=HEAP32[h+4>>2];for(h=2;;)switch(h){case 2:var i,j,l,k=g,h=g+8;i=e;j=c;l=a;_mrb_check_convert_type(h,i,b,j,l,d);j=k;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[j>>2]=HEAP32[h>>
2];HEAP32[j+4>>2]=HEAP32[h+4>>2];h=0==(HEAP32[(k+4|0)>>2]&255|0)?3:5;break;case 3:h=0!=(HEAP32[(k|0)>>2]|0)?5:4;break;case 4:h=i;j=_mrb_class_obj_get(i,__str2536|0);var n=l;_mrb_raisef(h,j,__str80614|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=n,tempInt));h=5;break;case 5:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[k>>2];HEAP32[f+4>>2]=HEAP32[k+4>>2];STACKTOP=g;return;default:assert(0,
"bad label: "+h)}}function _codegen_malloc(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=_mrb_malloc(HEAP32[(c|0)>>2],e);b=0!=(a|0)?4:3;break;case 3:_codegen_error(c,__str656|0);b=4;break;case 4:return a;default:assert(0,"bad label: "+b)}}
function _codegen_realloc(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g;a=f;d=e;g=b;d=_mrb_realloc(HEAP32[(a|0)>>2],d,g);c=0!=(d|0)?5:3;break;case 3:c=0<g>>>0?4:5;break;case 4:_codegen_error(a,__str1657|0);c=5;break;case 5:return d;default:assert(0,"bad label: "+c)}}
function _codedump_all(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;b=3;break;case 3:b=a>>>0<HEAP32[(c+60|0)>>2]>>>0?4:6;break;case 4:_codedump(c,a);b=5;break;case 5:a=a+1|0;b=3;break;case 6:return;default:assert(0,"bad label: "+b)}}
function _codegen_error(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d;a=f;d=e;c=0!=(a|0)?4:3;break;case 3:STACKTOP=b;return;case 4:c=5;break;case 5:c=0!=(HEAP32[(a+48|0)>>2]|0)?6:7;break;case 6:_mrb_pool_close(HEAP32[(a+4|0)>>2]);a=HEAP32[(a+48|0)>>2];c=5;break;case 7:_mrb_pool_close(HEAP32[(a+4|0)>>2]);c=0!=(HEAP32[(a+80|0)>>2]|0)?8:10;break;case 8:c=0!=(HEAP16[(a+84|0)>>1]<<16>>16|0)?9:10;break;
case 9:c=HEAP32[(a+80|0)>>2];var g=HEAP16[(a+84|0)>>1]<<16>>16,h=d;_fprintf(HEAP32[_stderr>>2],__str97753|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=g,HEAP32[tempInt+8>>2]=h,tempInt));c=11;break;case 10:c=d;_fprintf(HEAP32[_stderr>>2],__str98754|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));c=11;break;case 11:throw _longjmp(a+8|0,1),"Reached an unreachable!";
default:assert(0,"bad label: "+c)}}_codegen_error.X=1;
function _codedump(f,e){var b=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d,g,h,i,j=b,l=b+8;a=f;d=e;g=HEAP32[(HEAP32[(a+56|0)>>2]+(d<<2)|0)>>2];c=0!=(g|0)?4:3;break;case 3:c=84;break;case 4:var k=d,n=(HEAP32[(g+4|0)>>2]&65535)<<16>>16,r=(HEAP32[g>>2]>>>16&65535)<<16>>16,t=HEAP32[(g+32|0)>>2],p=HEAP32[(g+36|0)>>2];_printf(__str22678|0,(tempInt=STACKTOP,STACKTOP+=20,assert(STACKTOP<STACK_ROOT+STACK_MAX,
"Ran out of stack"),HEAP32[tempInt>>2]=k,HEAP32[tempInt+4>>2]=n,HEAP32[tempInt+8>>2]=r,HEAP32[tempInt+12>>2]=t,HEAP32[tempInt+16>>2]=p,tempInt));h=0;c=5;break;case 5:c=(h|0)<(HEAP32[(g+28|0)>>2]|0)?6:83;break;case 6:var q=h;_printf(__str23679|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=q,tempInt));i=HEAP32[(HEAP32[(g+8|0)>>2]+(h<<2)|0)>>2];var v=i&127;c=0==(v|0)?7:1==(v|0)?8:2==(v|0)?9:3==(v|0)?10:4==(v|0)?11:5==(v|0)?12:6==(v|0)?13:
7==(v|0)?14:8==(v|0)?15:9==(v|0)?16:10==(v|0)?17:17==(v|0)?18:18==(v|0)?19:19==(v|0)?20:20==(v|0)?21:13==(v|0)?22:14==(v|0)?23:21==(v|0)?24:22==(v|0)?25:15==(v|0)?26:16==(v|0)?27:23==(v|0)?28:24==(v|0)?29:25==(v|0)?30:32==(v|0)?31:33==(v|0)?32:42==(v|0)?33:36==(v|0)?34:37==(v|0)?35:38==(v|0)?36:41==(v|0)?37:43==(v|0)?43:64==(v|0)?44:65==(v|0)?45:70==(v|0)?46:44==(v|0)?47:45==(v|0)?48:46==(v|0)?49:47==(v|0)?50:48==(v|0)?51:49==(v|0)?52:51==(v|0)?53:52==(v|0)?54:53==(v|0)?55:54==(v|0)?56:50==(v|0)?
57:74==(v|0)?58:55==(v|0)?59:56==(v|0)?60:57==(v|0)?61:58==(v|0)?62:60==(v|0)?63:61==(v|0)?64:62==(v|0)?65:63==(v|0)?66:66==(v|0)?67:67==(v|0)?68:68==(v|0)?69:69==(v|0)?70:71==(v|0)?71:72==(v|0)?72:75==(v|0)?73:30==(v|0)?74:26==(v|0)?75:27==(v|0)?76:29==(v|0)?77:28==(v|0)?78:31==(v|0)?79:80;break;case 7:_printf(__str24680|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));c=81;break;case 8:var w=i>>23&511,
m=i>>14&511;_printf(__str25681|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=w,HEAP32[tempInt+4>>2]=m,tempInt));c=81;break;case 9:var x=i>>23&511,s=i>>7&65535;_printf(__str26682|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=x,HEAP32[tempInt+4>>2]=s,tempInt));c=81;break;case 10:var y=i>>23&511,B=(i>>7&65535)-32767|0;_printf(__str27683|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<
STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=y,HEAP32[tempInt+4>>2]=B,tempInt));c=81;break;case 11:var A=i>>23&511,G=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>7&65535)<<1)|0)>>1]);_printf(__str28684|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=A,HEAP32[tempInt+4>>2]=G,tempInt));c=81;break;case 12:var z=i>>23&511;_printf(__str29685|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=z,tempInt));c=81;break;case 13:var E=i>>23&511;_printf(__str30686|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=E,tempInt));c=81;break;case 14:var M=i>>23&511;_printf(__str31687|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=M,tempInt));c=81;break;case 15:var C=i>>23&511;_printf(__str32688|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,
"Ran out of stack"),HEAP32[tempInt>>2]=C,tempInt));c=81;break;case 16:var H=i>>23&511,L=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>7&65535)<<1)|0)>>1]);_printf(__str33689|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=H,HEAP32[tempInt+4>>2]=L,tempInt));c=81;break;case 17:var R=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>7&65535)<<1)|0)>>1]),I=i>>23&511;_printf(__str34690|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+
STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=R,HEAP32[tempInt+4>>2]=I,tempInt));c=81;break;case 18:var K=i>>23&511,Q=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>7&65535)<<1)|0)>>1]);_printf(__str35691|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=K,HEAP32[tempInt+4>>2]=Q,tempInt));c=81;break;case 19:var O=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>7&65535)<<1)|0)>>1]),aa=i>>23&511;_printf(__str36692|0,(tempInt=STACKTOP,STACKTOP+=
8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=O,HEAP32[tempInt+4>>2]=aa,tempInt));c=81;break;case 20:var J=i>>23&511,la=i>>23&511,ba=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>7&65535)<<1)|0)>>1]);_printf(__str37693|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=J,HEAP32[tempInt+4>>2]=la,HEAP32[tempInt+8>>2]=ba,tempInt));c=81;break;case 21:var U=(i>>23&511)+1|0,T=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|
0)>>2]+((i>>7&65535)<<1)|0)>>1]),ua=i>>23&511;_printf(__str38694|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=U,HEAP32[tempInt+4>>2]=T,HEAP32[tempInt+8>>2]=ua,tempInt));c=81;break;case 22:var N=i>>23&511,u=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>7&65535)<<1)|0)>>1]);_printf(__str39695|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=N,HEAP32[tempInt+4>>2]=u,tempInt));
c=81;break;case 23:var na=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>7&65535)<<1)|0)>>1]),Z=i>>23&511;_printf(__str40696|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=na,HEAP32[tempInt+4>>2]=Z,tempInt));c=81;break;case 24:var Aa=i>>23&511,Da=i>>14&511,ja=i>>7&127;_printf(__str41697|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Aa,HEAP32[tempInt+4>>2]=Da,HEAP32[tempInt+
8>>2]=ja,tempInt));c=81;break;case 25:var X=i>>23&511,ya=i>>14&511,ca=i>>7&127;_printf(__str42698|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=X,HEAP32[tempInt+4>>2]=ya,HEAP32[tempInt+8>>2]=ca,tempInt));c=81;break;case 26:var Na=i>>23&511,Ba=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>7&65535)<<1)|0)>>1]);_printf(__str43699|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=
Na,HEAP32[tempInt+4>>2]=Ba,tempInt));c=81;break;case 27:var va=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>7&65535)<<1)|0)>>1]),pb=i>>23&511;_printf(__str44700|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=va,HEAP32[tempInt+4>>2]=pb,tempInt));c=81;break;case 28:var Db=h+((i>>7&65535)-32767|0)|0;_printf(__str45701|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Db,tempInt));
c=81;break;case 29:var Ra=i>>23&511,Pa=h+((i>>7&65535)-32767|0)|0;_printf(__str46702|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Ra,HEAP32[tempInt+4>>2]=Pa,tempInt));c=81;break;case 30:var $a=i>>23&511,pa=h+((i>>7&65535)-32767|0)|0;_printf(__str47703|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=$a,HEAP32[tempInt+4>>2]=pa,tempInt));c=81;break;case 31:var ub=i>>23&511,Ha=_mrb_sym2name(a,
HEAP16[(HEAP32[(g+16|0)>>2]+((i>>14&511)<<1)|0)>>1]),Ia=i>>7&127;_printf(__str48704|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=ub,HEAP32[tempInt+4>>2]=Ha,HEAP32[tempInt+8>>2]=Ia,tempInt));c=81;break;case 32:var ma=i>>23&511,Ja=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>14&511)<<1)|0)>>1]),Sa=i>>7&127;_printf(__str49705|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=
ma,HEAP32[tempInt+4>>2]=Ja,HEAP32[tempInt+8>>2]=Sa,tempInt));c=81;break;case 33:var qb=i>>23&511,Sb=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>14&511)<<1)|0)>>1]),Eb=i>>7&127;_printf(__str50706|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=qb,HEAP32[tempInt+4>>2]=Sb,HEAP32[tempInt+8>>2]=Eb,tempInt));c=81;break;case 34:var eb=i>>23&511,ab=i>>7&127;_printf(__str51707|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,
"Ran out of stack"),HEAP32[tempInt>>2]=eb,HEAP32[tempInt+4>>2]=ab,tempInt));c=81;break;case 35:var Fb=i>>23&511,Ta=(i>>7&65535)>>10&63,Ea=(i>>7&65535)>>9&1,wa=(i>>7&65535)>>4&31,Ka=(i>>7&65535)>>0&15;_printf(__str52708|0,(tempInt=STACKTOP,STACKTOP+=20,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Fb,HEAP32[tempInt+4>>2]=Ta,HEAP32[tempInt+8>>2]=Ea,HEAP32[tempInt+12>>2]=wa,HEAP32[tempInt+16>>2]=Ka,tempInt));c=81;break;case 36:var bb=(i>>7&33554431)>>18&31,xa=(i>>7&33554431)>>
13&31,W=(i>>7&33554431)>>12&1,qa=(i>>7&33554431)>>7&31,fb=(i>>7&33554431)>>2&31,Ua=(i>>7&33554431)>>1&1,ga=i>>7&1;_printf(__str53709|0,(tempInt=STACKTOP,STACKTOP+=28,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=bb,HEAP32[tempInt+4>>2]=xa,HEAP32[tempInt+8>>2]=W,HEAP32[tempInt+12>>2]=qa,HEAP32[tempInt+16>>2]=fb,HEAP32[tempInt+20>>2]=Ua,HEAP32[tempInt+24>>2]=ga,tempInt));c=81;break;case 37:var gb=i>>23&511;_printf(__str54710|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<
STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=gb,tempInt));var hb=i>>14&511;c=0==(hb|0)?38:2==(hb|0)?39:1==(hb|0)?40:41;break;case 38:_printf(__str55711|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));c=42;break;case 39:_printf(__str56712|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));c=42;
break;case 40:_printf(__str57713|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));c=42;break;case 41:_printf(__str58714|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));c=42;break;case 42:c=81;break;case 43:var ra=i>>23&511,Y=(i>>7&65535)>>10&63,cb=(i>>7&65535)>>9&1,ib=(i>>7&65535)>>4&31,Ca=(i>>7&65535)>>0&
15;_printf(__str59715|0,(tempInt=STACKTOP,STACKTOP+=20,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=ra,HEAP32[tempInt+4>>2]=Y,HEAP32[tempInt+8>>2]=cb,HEAP32[tempInt+12>>2]=ib,HEAP32[tempInt+16>>2]=Ca,tempInt));c=81;break;case 44:var oa=i>>23&511,jb=d+(i>>9&16383)|0,za=i>>7&3;_printf(__str60716|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=oa,HEAP32[tempInt+4>>2]=jb,HEAP32[tempInt+8>>2]=za,tempInt));c=81;
break;case 45:var sa=i>>23&511,Va=i>>14&511,db=i>>7&127;_printf(__str61717|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=sa,HEAP32[tempInt+4>>2]=Va,HEAP32[tempInt+8>>2]=db,tempInt));c=81;break;case 46:var Fa=i>>23&511,kb=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>14&511)<<1)|0)>>1]);_printf(__str62718|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Fa,HEAP32[tempInt+4>>
2]=kb,tempInt));c=81;break;case 47:var La=i>>23&511,vb=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>14&511)<<1)|0)>>1]),Wa=i>>7&127;_printf(__str63719|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=La,HEAP32[tempInt+4>>2]=vb,HEAP32[tempInt+8>>2]=Wa,tempInt));c=81;break;case 48:var rb=i>>23&511,Gb=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>14&511)<<1)|0)>>1]),lb=i>>7&127;_printf(__str64720|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<
STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=rb,HEAP32[tempInt+4>>2]=Gb,HEAP32[tempInt+8>>2]=lb,tempInt));c=81;break;case 49:var Xa=i>>23&511,Ma=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>14&511)<<1)|0)>>1]),mb=i>>7&127;_printf(__str65721|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Xa,HEAP32[tempInt+4>>2]=Ma,HEAP32[tempInt+8>>2]=mb,tempInt));c=81;break;case 50:var Ya=i>>23&511,Hb=_mrb_sym2name(a,HEAP16[(HEAP32[(g+
16|0)>>2]+((i>>14&511)<<1)|0)>>1]),Qa=i>>7&127;_printf(__str66722|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Ya,HEAP32[tempInt+4>>2]=Hb,HEAP32[tempInt+8>>2]=Qa,tempInt));c=81;break;case 51:var S=i>>23&511,wb=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>14&511)<<1)|0)>>1]),ka=i>>7&127;_printf(__str67723|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=S,HEAP32[tempInt+4>>
2]=wb,HEAP32[tempInt+8>>2]=ka,tempInt));c=81;break;case 52:var xb=i>>23&511,sb=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>14&511)<<1)|0)>>1]),yb=i>>7&127;_printf(__str68724|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=xb,HEAP32[tempInt+4>>2]=sb,HEAP32[tempInt+8>>2]=yb,tempInt));c=81;break;case 53:var Nb=i>>23&511,Ib=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>14&511)<<1)|0)>>1]),Oa=i>>7&127;_printf(__str69725|0,(tempInt=STACKTOP,
STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Nb,HEAP32[tempInt+4>>2]=Ib,HEAP32[tempInt+8>>2]=Oa,tempInt));c=81;break;case 54:var V=i>>23&511,Za=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>14&511)<<1)|0)>>1]),$=i>>7&127;_printf(__str70726|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=V,HEAP32[tempInt+4>>2]=Za,HEAP32[tempInt+8>>2]=$,tempInt));c=81;break;case 55:var Jb=i>>23&511,tb=_mrb_sym2name(a,
HEAP16[(HEAP32[(g+16|0)>>2]+((i>>14&511)<<1)|0)>>1]),zb=i>>7&127;_printf(__str71727|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Jb,HEAP32[tempInt+4>>2]=tb,HEAP32[tempInt+8>>2]=zb,tempInt));c=81;break;case 56:var D=i>>23&511,Ab=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>14&511)<<1)|0)>>1]),Bb=i>>7&127;_printf(__str72728|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=
D,HEAP32[tempInt+4>>2]=Ab,HEAP32[tempInt+8>>2]=Bb,tempInt));c=81;break;case 57:var Kb=i>>23&511,Cb=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>14&511)<<1)|0)>>1]),Tb=i>>7&127;_printf(__str73729|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Kb,HEAP32[tempInt+4>>2]=Cb,HEAP32[tempInt+8>>2]=Tb,tempInt));c=81;break;case 58:_printf(__str74730|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,
"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));c=81;break;case 59:var ta=i>>23&511,Yb=i>>14&511,Ob=i>>7&127;_printf(__str75731|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=ta,HEAP32[tempInt+4>>2]=Yb,HEAP32[tempInt+8>>2]=Ob,tempInt));c=81;break;case 60:var Ub=i>>23&511,Pb=i>>14&511;_printf(__str76732|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Ub,HEAP32[tempInt+4>>2]=
Pb,tempInt));c=81;break;case 61:var P=i>>23&511,Vb=i>>14&511;_printf(__str77733|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=P,HEAP32[tempInt+4>>2]=Vb,tempInt));c=81;break;case 62:var Zb=i>>23&511,$b=i>>14&511,nb=i>>7&127;_printf(__str78734|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Zb,HEAP32[tempInt+4>>2]=$b,HEAP32[tempInt+8>>2]=nb,tempInt));c=81;break;case 63:var Qb=i>>
23&511,Wb=i>>14&511,ic=i>>7&127;_printf(__str79735|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Qb,HEAP32[tempInt+4>>2]=Wb,HEAP32[tempInt+8>>2]=ic,tempInt));c=81;break;case 64:var Xb=j,da=HEAP32[(g+12|0)>>2]+((i>>7&65535)<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Xb>>2]=HEAP32[da>>2];HEAP32[Xb+4>>2]=HEAP32[da+4>>2];_mrb_str_dump(l,a,j);var ea=j,fa=l;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[ea>>2]=HEAP32[fa>>2];HEAP32[ea+4>>2]=HEAP32[fa+4>>2];var ha=i>>23&511,ia=HEAP32[(HEAP32[(j|0)>>2]+20|0)>>2];_printf(__str80736|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=ha,HEAP32[tempInt+4>>2]=ia,tempInt));c=81;break;case 65:var Fc=i>>23&511,Gc=i>>14&511;_printf(__str81737|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Fc,HEAP32[tempInt+4>>2]=Gc,tempInt));c=81;break;
case 66:var jc=i>>23&511,rc=i>>14&511,kc=i>>7&127;_printf(__str82738|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=jc,HEAP32[tempInt+4>>2]=rc,HEAP32[tempInt+8>>2]=kc,tempInt));c=81;break;case 67:var sc=i>>23&511;_printf(__str83739|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=sc,tempInt));c=81;break;case 68:var Ga=i>>23&511,tc=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>
14&511)<<1)|0)>>1]);_printf(__str84740|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Ga,HEAP32[tempInt+4>>2]=tc,tempInt));c=81;break;case 69:var ac=i>>23&511,Lb=_mrb_sym2name(a,HEAP16[(HEAP32[(g+16|0)>>2]+((i>>14&511)<<1)|0)>>1]);_printf(__str85741|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=ac,HEAP32[tempInt+4>>2]=Lb,tempInt));c=81;break;case 70:var uc=i>>23&511,cc=d+(i>>
7&65535)|0;_printf(__str86742|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=uc,HEAP32[tempInt+4>>2]=cc,tempInt));c=81;break;case 71:var bc=i>>23&511,ob=i>>14&511;_printf(__str87743|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=bc,HEAP32[tempInt+4>>2]=ob,tempInt));c=81;break;case 72:var vc=i>>23&511;_printf(__str88744|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+
STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=vc,tempInt));c=81;break;case 73:var wc=i>>7&65535;_printf(__str89745|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=wc,tempInt));c=81;break;case 74:var xc=d+(i>>7&65535)|0;_printf(__str90746|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=xc,tempInt));c=81;break;case 75:var Rb=h+((i>>7&65535)-32767|0)|0;_printf(__str91747|0,(tempInt=
STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Rb,tempInt));c=81;break;case 76:var lc=i>>23&511;_printf(__str92748|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=lc,tempInt));c=81;break;case 77:var yc=i>>23&511;_printf(__str93749|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=yc,tempInt));c=81;break;case 78:var mc=i>>23&511;_printf(__str94750|
0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=mc,tempInt));c=81;break;case 79:var dc=i>>23&511;_printf(__str95751|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=dc,tempInt));c=81;break;case 80:var ec=i&127,nc=i>>23&511,zc=i>>14&511,oc=i>>7&127;_printf(__str96752|0,(tempInt=STACKTOP,STACKTOP+=16,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=ec,HEAP32[tempInt+
4>>2]=nc,HEAP32[tempInt+8>>2]=zc,HEAP32[tempInt+12>>2]=oc,tempInt));c=81;break;case 81:c=82;break;case 82:h=h+1|0;c=5;break;case 83:_printf(__str55711|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));c=84;break;case 84:STACKTOP=b;return;default:assert(0,"bad label: "+c)}}_codedump.X=1;
function _mrb_generate_code(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;b=f;a=e;d=HEAP32[(b+60|0)>>2];a=_codegen_start(b,a);b=0>(a|0)?3:4;break;case 3:c=a;b=5;break;case 4:c=d;b=5;break;case 5:return c;default:assert(0,"bad label: "+b)}}
function _codegen_start(f,e){var b;b=2;for(var c={},a={6:function(a){b=10;l=a},dummy:0};;)try{switch(b){case 2:var d,g,h,i;g=f;h=e;i=_scope_new(g,0,0);b=0!=(i|0)?4:3;break;case 3:d=-1;b=9;break;case 4:HEAP32[(i|0)>>2]=g;b=0!=(HEAP32[(h+24|0)>>2]|0)?5:6;break;case 5:HEAP32[(i+80|0)>>2]=HEAP32[(h+24|0)>>2];b=6;break;case 6:var j=i+8|0,l=(tempInt=setjmpId++,c[tempInt]=1,setjmpLabels[tempInt]=b,HEAP32[j>>2]=tempInt,0);b=10;break;case 10:b=0!=(l|0)?7:8;break;case 7:d=-1;b=9;break;case 8:_codegen(i,HEAP32[(h+
1124|0)>>2],0);_mrb_pool_close(HEAP32[(i+4|0)>>2]);d=0;b=9;break;case 9:return d;default:assert(0,"bad label: "+b)}}catch(k){if(!k.longjmp||!(k.id in c))throw k;a[setjmpLabels[k.id]](k.value)}}_codegen_start.X=1;
function _scope_new(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h,i,j;d=f;g=e;h=b;i=_mrb_pool_open(d);j=_mrb_pool_alloc(i,128);c=0!=(j|0)?4:3;break;case 3:a=0;c=9;break;case 4:var l=j;assert(!0,"memcpy given 128 bytes to copy. Problem with quantum=1 corrections perhaps?");c=_scope_new_codegen_scope_zero>>2;for(var l=l>>2,k=c+32;c<k;c++,l++)HEAP32[l]=HEAP32[c];HEAP32[(j|0)>>2]=d;HEAP32[(j+4|0)>>2]=i;c=0!=(g|0)?6:5;break;case 5:a=j;c=9;break;case 6:HEAP32[(j+48|0)>>2]=g;c=j+68|0;HEAP32[c>>2]=
HEAP32[c>>2]&-32768|32767;c=j+68|0;HEAP32[c>>2]&=-32769;c=_mrb_add_irep(d);HEAP32[(j+100|0)>>2]=c;HEAP32[(j+124|0)>>2]=(HEAP32[HEAP32[(j+100|0)>>2]>>2]&65535)<<16>>16;HEAP32[(j+96|0)>>2]=1024;c=_mrb_malloc(d,HEAP32[(j+96|0)>>2]<<2|0);HEAP32[(j+88|0)>>2]=c;HEAP32[(j+104|0)>>2]=32;c=_mrb_malloc(d,HEAP32[(j+104|0)>>2]<<3|0);HEAP32[(HEAP32[(j+100|0)>>2]+12|0)>>2]=c;HEAP32[(HEAP32[(j+100|0)>>2]+32|0)>>2]=0;HEAP32[(j+108|0)>>2]=256;c=_mrb_malloc(d,512);HEAP32[(HEAP32[(j+100|0)>>2]+16|0)>>2]=c;HEAP32[(HEAP32[(j+
100|0)>>2]+36|0)>>2]=0;HEAP32[(j+52|0)>>2]=h;c=_node_len(h)+1|0;l=j+56|0;HEAP32[l>>2]=HEAP32[l>>2]+c|0;HEAP32[(j+112|0)>>2]=HEAP32[(j+56|0)>>2];c=_mrb_gc_arena_save(d);HEAP32[(j+120|0)>>2]=c;HEAP32[(j+80|0)>>2]=HEAP32[(g+80|0)>>2];c=0!=(HEAP32[(j+80|0)>>2]|0)?7:8;break;case 7:c=_mrb_malloc(d,HEAP32[(j+96|0)>>2]<<1|0);HEAP32[(j+92|0)>>2]=c;c=8;break;case 8:a=j;c=9;break;case 9:return a;default:assert(0,"bad label: "+c)}}_scope_new.X=1;
function _codegen(f,e,b){var c=STACKTOP;STACKTOP+=68;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j,l,k,n,r,t,p,q,v,w,m,x,s,y,B,A,G,z,E,M,C,H,L,R,I,K,Q,O,aa,J,la,ba,U,T,ua,N,u,na,Z,Aa,Da=c,ja,X,ya,ca,Na,Ba,va,pb,Db,Ra,Pa,$a,pa,ub,Ha,Ia,ma,Ja,Sa,qb,Sb,Eb,eb,ab,Fb=c+4,Ta,Ea,wa=c+8,Ka,bb,xa,W,qa,fb,Ua,ga,gb=c+12,hb,ra=c+20,Y,cb,ib,Ca=c+28,oa,jb,za,sa=c+36,Va,db,Fa,kb,La,vb,Wa=c+44,rb,Gb=c+52,lb,Xa,Ma,mb,Ya,Hb=c+
60,Qa,S,wb,ka,xb,sb,yb,Nb,Ib,Oa,V,Za,$,Jb,tb,zb;d=f;g=e;h=b;a=0!=(g|0)?4:3;break;case 3:a=382;break;case 4:i=HEAP32[(g|0)>>2];HEAP16[(d+84|0)>>1]=HEAP16[(g+8|0)>>1];g=HEAP32[(g+4|0)>>2];var D=i;a=17==(D|0)?5:18==(D|0)?15:19==(D|0)?43:53==(D|0)?44:4==(D|0)?45:5==(D|0)?46:20==(D|0)?54:21==(D|0)?55:9==(D|0)?56:10==(D|0)?57:12==(D|0)?58:6==(D|0)?61:3==(D|0)?82:30==(D|0)||29==(D|0)?83:77==(D|0)?84:78==(D|0)?87:74==(D|0)?90:75==(D|0)?91:34==(D|0)?92:36==(D|0)?100:63==(D|0)?106:24==(D|0)?107:23==(D|0)?108:
28==(D|0)?140:32==(D|0)?173:33==(D|0)?188:37==(D|0)?201:38==(D|0)?205:13==(D|0)?221:14==(D|0)?224:15==(D|0)?237:16==(D|0)?243:39==(D|0)?264:41==(D|0)?275:42==(D|0)?276:44==(D|0)?277:43==(D|0)?278:86==(D|0)?279:46==(D|0)?280:45==(D|0)?281:60==(D|0)?282:66==(D|0)?283:50==(D|0)?284:51==(D|0)?295:52==(D|0)?298:55==(D|0)?311:56==(D|0)?314:54==(D|0)?326:94==(D|0)?329:82==(D|0)?332:83==(D|0)?335:84==(D|0)?338:85==(D|0)?341:69==(D|0)?344:70==(D|0)?347:71==(D|0)?350:72==(D|0)?362:73==(D|0)?371:67==(D|0)?374:
68==(D|0)?377:88==(D|0)?380:381;break;case 5:a=0!=(h|0)?6:8;break;case 6:a=0!=(g|0)?8:7;break;case 7:_genop(d,5|(HEAP32[(d+56|0)>>2]&511)<<23);_push_(d);a=8;break;case 8:a=9;break;case 9:a=0!=(g|0)?10:14;break;case 10:var Ab=d,Bb=HEAP32[(g|0)>>2];a=0!=(HEAP32[(g+4|0)>>2]|0)?11:12;break;case 11:var Kb=0;a=13;break;case 12:Kb=h;a=13;break;case 13:_codegen(Ab,Bb,Kb);g=HEAP32[(g+4|0)>>2];a=9;break;case 14:a=382;break;case 15:j=_new_label(d);_genop(d,26);p=_loop_push(d,3);HEAP32[(p+4|0)>>2]=j;a=0!=(HEAP32[(g|
0)>>2]|0)?16:19;break;case 16:_codegen(d,HEAP32[(g|0)>>2],h);a=0!=(h|0)?17:18;break;case 17:var Cb=d+56|0;HEAP32[Cb>>2]=HEAP32[Cb>>2]-1|0;a=18;break;case 18:a=19;break;case 19:HEAP32[(p|0)>>2]=4;l=_new_label(d);_genop(d,23);_dispatch(d,j);g=HEAP32[(g+4|0)>>2];n=k=0;a=0!=(HEAP32[(g|0)>>2]|0)?20:40;break;case 20:q=HEAP32[(g|0)>>2];v=HEAP32[(d+56|0)>>2];_genop(d,27|(v&511)<<23);_push_(d);a=21;break;case 21:a=0!=(q|0)?22:37;break;case 22:w=HEAP32[(q|0)>>2];m=HEAP32[(w|0)>>2];a=0!=(n|0)?23:24;break;case 23:_dispatch(d,
n);a=24;break;case 24:r=0;a=25;break;case 25:a=0!=(m|0)?26:27;break;case 26:_codegen(d,HEAP32[(m|0)>>2],1);a=28;break;case 27:var Tb=d,ta=17|(HEAP32[(d+56|0)>>2]&511)<<23,Yb=d,Ob=_mrb_intern(HEAP32[(d|0)>>2],__str2658|0),Ub=(_new_msym(Yb,Ob)&65535)<<7;_genop(Tb,ta|Ub);_push_(d);a=28;break;case 28:_genop(d,1|(HEAP32[(d+56|0)>>2]&511)<<23|(v&511)<<14);var Pb=d+56|0;HEAP32[Pb>>2]=HEAP32[Pb>>2]-1|0;var P=d,Vb=32|(HEAP32[(d+56|0)>>2]&511)<<23,Zb=d,$b=_mrb_intern(HEAP32[(d|0)>>2],__str3659|0),nb=(_new_msym(Zb,
$b)&511)<<14;_genop(P,Vb|nb|128);t=_new_label(d);_genop(d,24|(HEAP32[(d+56|0)>>2]&511)<<23|((r+32767|0)&65535)<<7);r=t;a=0!=(m|0)?29:30;break;case 29:m=HEAP32[(m+4|0)>>2];a=30;break;case 30:a=31;break;case 31:a=0!=(m|0)?25:32;break;case 32:n=_new_label(d);_genop(d,4194199);_dispatch_linked(d,r);var Qb=d+56|0;HEAP32[Qb>>2]=HEAP32[Qb>>2]-1|0;a=0!=(HEAP32[(HEAP32[(w+4|0)>>2]|0)>>2]|0)?33:34;break;case 33:_gen_assignment(d,HEAP32[(HEAP32[(w+4|0)>>2]|0)>>2],v,0);a=34;break;case 34:a=0!=(HEAP32[(HEAP32[(HEAP32[(w+
4|0)>>2]+4|0)>>2]|0)>>2]|0)?35:36;break;case 35:_codegen(d,HEAP32[(HEAP32[(HEAP32[(w+4|0)>>2]+4|0)>>2]|0)>>2],h);a=36;break;case 36:t=_new_label(d);_genop(d,23|((k+32767|0)&65535)<<7);k=t;q=HEAP32[(q+4|0)>>2];_push_(d);a=21;break;case 37:a=0!=(n|0)?38:39;break;case 38:_dispatch(d,n);_genop(d,29|(v&511)<<23);a=39;break;case 39:a=40;break;case 40:var Wb=d+56|0;HEAP32[Wb>>2]=HEAP32[Wb>>2]-1|0;g=HEAP32[(g+4|0)>>2];_dispatch(d,l);_genop(d,8388636);a=0!=(HEAP32[(g|0)>>2]|0)?41:42;break;case 41:_codegen(d,
HEAP32[(g|0)>>2],h);a=42;break;case 42:_dispatch_linked(d,k);_loop_pop(d,0);a=382;break;case 43:s=HEAP32[(d+60|0)>>2];_genop(d,30);var ic=d+76|0;HEAP32[ic>>2]=HEAP32[ic>>2]+1|0;_codegen(d,HEAP32[(g|0)>>2],h);x=_scope_body(d,HEAP32[(g+4|0)>>2]);HEAP32[(HEAP32[(d+88|0)>>2]+(s<<2)|0)>>2]=30|(x&65535)<<7;var Xb=d+76|0;HEAP32[Xb>>2]=HEAP32[Xb>>2]-1|0;_genop_peep(d,8388639,0);a=382;break;case 44:y=_lambda_body(d,g,1);_genop(d,64|(HEAP32[(d+56|0)>>2]&511)<<23|(y&16383)<<9|384);_push_(d);a=382;break;case 45:B=
_lambda_body(d,g,1);_genop(d,64|(HEAP32[(d+56|0)>>2]&511)<<23|(B&16383)<<9|256);_push_(d);a=382;break;case 46:z=HEAP32[(HEAP32[(HEAP32[(g+4|0)>>2]+4|0)>>2]|0)>>2];_codegen(d,HEAP32[(g|0)>>2],1);var da=d+56|0;HEAP32[da>>2]=HEAP32[da>>2]-1|0;A=_new_label(d);_genop(d,(HEAP32[(d+56|0)>>2]&511)<<23|4194201);_codegen(d,HEAP32[(HEAP32[(g+4|0)>>2]|0)>>2],h);a=0!=(z|0)?47:50;break;case 47:a=0!=(h|0)?48:49;break;case 48:var ea=d+56|0;HEAP32[ea>>2]=HEAP32[ea>>2]-1|0;a=49;break;case 49:G=_new_label(d);_genop(d,
4194199);_dispatch(d,A);_codegen(d,z,h);_dispatch(d,G);a=53;break;case 50:a=0!=(h|0)?51:52;break;case 51:var fa=d+56|0;HEAP32[fa>>2]=HEAP32[fa>>2]-1|0;_genop(d,5|(HEAP32[(d+56|0)>>2]&511)<<23);_push_(d);a=52;break;case 52:_dispatch(d,A);a=53;break;case 53:a=382;break;case 54:_codegen(d,HEAP32[(g|0)>>2],1);E=_new_label(d);var ha=d+56|0;HEAP32[ha>>2]=HEAP32[ha>>2]-1|0;_genop(d,(HEAP32[(d+56|0)>>2]&511)<<23|4194201);_codegen(d,HEAP32[(g+4|0)>>2],h);_dispatch(d,E);a=382;break;case 55:_codegen(d,HEAP32[(g|
0)>>2],1);M=_new_label(d);var ia=d+56|0;HEAP32[ia>>2]=HEAP32[ia>>2]-1|0;_genop(d,(HEAP32[(d+56|0)>>2]&511)<<23|4194200);_codegen(d,HEAP32[(g+4|0)>>2],h);_dispatch(d,M);a=382;break;case 56:C=_loop_push(d,0);var Fc=_new_label(d);HEAP32[(C+4|0)>>2]=Fc;_genop(d,4194199);var Gc=_new_label(d);HEAP32[(C+8|0)>>2]=Gc;_codegen(d,HEAP32[(g+4|0)>>2],0);_dispatch(d,HEAP32[(C+4|0)>>2]);_codegen(d,HEAP32[(g|0)>>2],1);var jc=d+56|0;HEAP32[jc>>2]=HEAP32[jc>>2]-1|0;_genop(d,24|(HEAP32[(d+56|0)>>2]&511)<<23|(((HEAP32[(C+
8|0)>>2]-HEAP32[(d+60|0)>>2]|0)+32767|0)&65535)<<7);_loop_pop(d,h);a=382;break;case 57:H=_loop_push(d,0);var rc=_new_label(d);HEAP32[(H+4|0)>>2]=rc;_genop(d,4194199);var kc=_new_label(d);HEAP32[(H+8|0)>>2]=kc;_codegen(d,HEAP32[(g+4|0)>>2],0);_dispatch(d,HEAP32[(H+4|0)>>2]);_codegen(d,HEAP32[(g|0)>>2],1);var sc=d+56|0;HEAP32[sc>>2]=HEAP32[sc>>2]-1|0;_genop(d,25|(HEAP32[(d+56|0)>>2]&511)<<23|(((HEAP32[(H+8|0)>>2]-HEAP32[(d+60|0)>>2]|0)+32767|0)&65535)<<7);_loop_pop(d,h);a=382;break;case 58:_for_body(d,
g);a=0!=(h|0)?59:60;break;case 59:_push_(d);a=60;break;case 60:a=382;break;case 61:K=L=0;a=0!=(HEAP32[(g|0)>>2]|0)?62:63;break;case 62:L=HEAP32[(d+56|0)>>2];_codegen(d,HEAP32[(g|0)>>2],1);a=63;break;case 63:g=HEAP32[(g+4|0)>>2];a=64;break;case 64:a=0!=(g|0)?65:77;break;case 65:O=HEAP32[(HEAP32[(g|0)>>2]|0)>>2];R=I=0;a=66;break;case 66:a=0!=(O|0)?67:70;break;case 67:_codegen(d,HEAP32[(O|0)>>2],1);a=0!=(L|0)?68:69;break;case 68:_genop(d,1|(HEAP32[(d+56|0)>>2]&511)<<23|(L&511)<<14);var Ga=d+56|0;HEAP32[Ga>>
2]=HEAP32[Ga>>2]-1|0;var tc=d,ac=32|(HEAP32[(d+56|0)>>2]&511)<<23,Lb=d,uc=_mrb_intern(HEAP32[(d|0)>>2],__str3659|0),cc=(_new_msym(Lb,uc)&511)<<14;_genop(tc,ac|cc|128);a=69;break;case 69:Q=_new_label(d);_genop(d,24|(HEAP32[(d+56|0)>>2]&511)<<23|((I+32767|0)&65535)<<7);I=Q;O=HEAP32[(O+4|0)>>2];a=66;break;case 70:a=0!=(HEAP32[(HEAP32[(g|0)>>2]|0)>>2]|0)?71:72;break;case 71:R=_new_label(d);_genop(d,4194199);_dispatch_linked(d,I);a=72;break;case 72:var bc=d+56|0;HEAP32[bc>>2]=HEAP32[bc>>2]-1|0;_codegen(d,
HEAP32[(HEAP32[(g|0)>>2]+4|0)>>2],h);a=0!=(h|0)?73:74;break;case 73:var ob=d+56|0;HEAP32[ob>>2]=HEAP32[ob>>2]-1|0;a=74;break;case 74:Q=_new_label(d);_genop(d,23|((K+32767|0)&65535)<<7);K=Q;a=0!=(R|0)?75:76;break;case 75:_dispatch(d,R);a=76;break;case 76:g=HEAP32[(g+4|0)>>2];_push_(d);a=64;break;case 77:var vc=d+56|0;HEAP32[vc>>2]=HEAP32[vc>>2]-1|0;_genop(d,5|(HEAP32[(d+56|0)>>2]&511)<<23);a=0!=(h|0)?78:79;break;case 78:_push_(d);a=79;break;case 79:a=0!=(K|0)?80:81;break;case 80:_dispatch_linked(d,
K);a=81;break;case 81:a=382;break;case 82:_scope_body(d,g);a=382;break;case 83:_gen_call(d,g,0,0,h);a=382;break;case 84:_codegen(d,HEAP32[(g|0)>>2],1);_codegen(d,HEAP32[(g+4|0)>>2],1);var wc=d+56|0;HEAP32[wc>>2]=HEAP32[wc>>2]-1|0;var xc=d+56|0;HEAP32[xc>>2]=HEAP32[xc>>2]-1|0;a=0!=(h|0)?85:86;break;case 85:_genop(d,65|(HEAP32[(d+56|0)>>2]&511)<<23|(HEAP32[(d+56|0)>>2]&511)<<14);_push_(d);a=86;break;case 86:a=382;break;case 87:_codegen(d,HEAP32[(g|0)>>2],1);_codegen(d,HEAP32[(g+4|0)>>2],1);var Rb=d+
56|0;HEAP32[Rb>>2]=HEAP32[Rb>>2]-1|0;var lc=d+56|0;HEAP32[lc>>2]=HEAP32[lc>>2]-1|0;a=0!=(h|0)?88:89;break;case 88:_genop(d,65|(HEAP32[(d+56|0)>>2]&511)<<23|(HEAP32[(d+56|0)>>2]&511)<<14|128);_push_(d);a=89;break;case 89:a=382;break;case 90:aa=_new_sym759(d,HEAP32[(g+4|0)>>2]&65535);_codegen(d,HEAP32[(g|0)>>2],1);var yc=d+56|0;HEAP32[yc>>2]=HEAP32[yc>>2]-1|0;_genop(d,19|(HEAP32[(d+56|0)>>2]&511)<<23|(aa&65535)<<7);_push_(d);a=382;break;case 91:J=_new_sym759(d,g&65535);_genop(d,66|(HEAP32[(d+56|0)>>
2]&511)<<23);_genop(d,19|(HEAP32[(d+56|0)>>2]&511)<<23|(J&65535)<<7);_push_(d);a=382;break;case 92:la=_gen_values(d,g);a=0<=(la|0)?93:96;break;case 93:var mc=d+56|0;HEAP32[mc>>2]=HEAP32[mc>>2]-la|0;a=0!=(h|0)?94:95;break;case 94:_genop(d,55|(HEAP32[(d+56|0)>>2]&511)<<23|(HEAP32[(d+56|0)>>2]&511)<<14|(la&127)<<7);_push_(d);a=95;break;case 95:a=99;break;case 96:a=0!=(h|0)?97:98;break;case 97:_push_(d);a=98;break;case 98:a=99;break;case 99:a=382;break;case 100:ba=0;a=101;break;case 101:a=0!=(g|0)?102:
103;break;case 102:_codegen(d,HEAP32[(HEAP32[(g|0)>>2]|0)>>2],1);_codegen(d,HEAP32[(HEAP32[(g|0)>>2]+4|0)>>2],1);ba=ba+1|0;g=HEAP32[(g+4|0)>>2];a=101;break;case 103:var dc=d+56|0;HEAP32[dc>>2]=HEAP32[dc>>2]-(ba<<1|0)|0;a=0!=(h|0)?104:105;break;case 104:_genop(d,63|(HEAP32[(d+56|0)>>2]&511)<<23|(HEAP32[(d+56|0)>>2]&511)<<14|(ba&127)<<7);_push_(d);a=105;break;case 105:a=382;break;case 106:_codegen(d,g,1);a=382;break;case 107:_codegen(d,HEAP32[(g+4|0)>>2],1);var ec=d+56|0;HEAP32[ec>>2]=HEAP32[ec>>2]-
1|0;_gen_assignment(d,HEAP32[(g|0)>>2],HEAP32[(d+56|0)>>2],h);a=382;break;case 108:ua=T=U=0;N=HEAP32[(g+4|0)>>2];na=HEAP32[(d+56|0)>>2];a=34==(HEAP32[(N|0)>>2]|0)?109:136;break;case 109:a=0!=(_nosplat(HEAP32[(N+4|0)>>2])|0)?110:136;break;case 110:N=HEAP32[(N+4|0)>>2];a=111;break;case 111:a=0!=(N|0)?112:113;break;case 112:_codegen(d,HEAP32[(N|0)>>2],1);U=U+1|0;N=HEAP32[(N+4|0)>>2];a=111;break;case 113:g=HEAP32[(g|0)>>2];a=0!=(HEAP32[(g|0)>>2]|0)?114:118;break;case 114:N=HEAP32[(g|0)>>2];T=0;a=115;
break;case 115:a=0!=(N|0)?116:117;break;case 116:_gen_assignment(d,HEAP32[(N|0)>>2],na+T|0,0);T=T+1|0;N=HEAP32[(N+4|0)>>2];a=115;break;case 117:a=118;break;case 118:N=HEAP32[(g+4|0)>>2];a=0!=(N|0)?119:133;break;case 119:a=0!=(HEAP32[(N+4|0)>>2]|0)?120:124;break;case 120:u=HEAP32[(HEAP32[(N+4|0)>>2]|0)>>2];a=121;break;case 121:a=0!=(u|0)?122:123;break;case 122:ua=ua+1|0;u=HEAP32[(u+4|0)>>2];a=121;break;case 123:a=124;break;case 124:a=0!=(HEAP32[(N|0)>>2]|0)?125:126;break;case 125:Z=(U-ua|0)-T|0;_genop(d,
55|(HEAP32[(d+56|0)>>2]&511)<<23|((na+T|0)&511)<<14|(Z&127)<<7);_gen_assignment(d,HEAP32[(N|0)>>2],HEAP32[(d+56|0)>>2],0);T=T+Z|0;a=126;break;case 126:a=0!=(HEAP32[(N+4|0)>>2]|0)?127:132;break;case 127:a=0!=(HEAP32[(HEAP32[(N+4|0)>>2]|0)>>2]|0)?128:132;break;case 128:N=HEAP32[(HEAP32[(N+4|0)>>2]|0)>>2];a=129;break;case 129:a=(T|0)<(U|0)?130:131;break;case 130:_gen_assignment(d,HEAP32[(N|0)>>2],na+T|0,0);N=HEAP32[(N+4|0)>>2];T=T+1|0;a=129;break;case 131:a=132;break;case 132:a=133;break;case 133:var nc=
d+56|0;HEAP32[nc>>2]=HEAP32[nc>>2]-U|0;a=0!=(h|0)?134:135;break;case 134:_genop(d,55|(na&511)<<23|(na&511)<<14|(U&127)<<7);_push_(d);a=135;break;case 135:a=139;break;case 136:_codegen(d,N,1);_gen_vmassignment(d,HEAP32[(g|0)>>2],na,h);a=0!=(h|0)?138:137;break;case 137:var zc=d+56|0;HEAP32[zc>>2]=HEAP32[zc>>2]-1|0;a=138;break;case 138:a=139;break;case 139:a=382;break;case 140:Aa=HEAP32[(HEAP32[(g+4|0)>>2]|0)>>2]&65535;ja=_mrb_sym2name_len(HEAP32[(d|0)>>2],Aa,Da);_codegen(d,HEAP32[(g|0)>>2],1);a=2==
(HEAP32[Da>>2]|0)?141:146;break;case 141:a=124==(HEAP8[ja|0]<<24>>24|0)?142:143;break;case 142:a=124==(HEAP8[ja+1|0]<<24>>24|0)?145:143;break;case 143:a=38==(HEAP8[ja|0]<<24>>24|0)?144:146;break;case 144:a=38==(HEAP8[ja+1|0]<<24>>24|0)?145:146;break;case 145:var oc=d+56|0;HEAP32[oc>>2]=HEAP32[oc>>2]-1|0;ya=_new_label(d);_genop(d,(124==(HEAP8[ja|0]<<24>>24|0)?24:25)&127|(HEAP32[(d+56|0)>>2]&511)<<23|4194176);_codegen(d,HEAP32[(HEAP32[(HEAP32[(g+4|0)>>2]+4|0)>>2]|0)>>2],1);var Ac=d+56|0;HEAP32[Ac>>
2]=HEAP32[Ac>>2]-1|0;_gen_assignment(d,HEAP32[(g|0)>>2],HEAP32[(d+56|0)>>2],h);_dispatch(d,ya);a=382;break;case 146:_codegen(d,HEAP32[(HEAP32[(HEAP32[(g+4|0)>>2]+4|0)>>2]|0)>>2],1);var fc=d+56|0;HEAP32[fc>>2]=HEAP32[fc>>2]-1|0;var Bf=d+56|0;HEAP32[Bf>>2]=HEAP32[Bf>>2]-1|0;X=_new_msym(d,Aa);a=1==(HEAP32[Da>>2]|0)?147:149;break;case 147:a=43==(HEAP8[ja|0]<<24>>24|0)?148:149;break;case 148:_genop_peep(d,44|(HEAP32[(d+56|0)>>2]&511)<<23|(X&511)<<14|128,h);a=172;break;case 149:a=1==(HEAP32[Da>>2]|0)?150:
152;break;case 150:a=45==(HEAP8[ja|0]<<24>>24|0)?151:152;break;case 151:_genop_peep(d,46|(HEAP32[(d+56|0)>>2]&511)<<23|(X&511)<<14|128,h);a=171;break;case 152:a=1==(HEAP32[Da>>2]|0)?153:155;break;case 153:a=60==(HEAP8[ja|0]<<24>>24|0)?154:155;break;case 154:_genop(d,51|(HEAP32[(d+56|0)>>2]&511)<<23|(X&511)<<14|128);a=170;break;case 155:a=2==(HEAP32[Da>>2]|0)?156:159;break;case 156:a=60==(HEAP8[ja|0]<<24>>24|0)?157:159;break;case 157:a=61==(HEAP8[ja+1|0]<<24>>24|0)?158:159;break;case 158:_genop(d,
52|(HEAP32[(d+56|0)>>2]&511)<<23|(X&511)<<14|128);a=169;break;case 159:a=1==(HEAP32[Da>>2]|0)?160:162;break;case 160:a=62==(HEAP8[ja|0]<<24>>24|0)?161:162;break;case 161:_genop(d,53|(HEAP32[(d+56|0)>>2]&511)<<23|(X&511)<<14|128);a=168;break;case 162:a=2==(HEAP32[Da>>2]|0)?163:166;break;case 163:a=62==(HEAP8[ja|0]<<24>>24|0)?164:166;break;case 164:a=61==(HEAP8[ja+1|0]<<24>>24|0)?165:166;break;case 165:_genop(d,54|(HEAP32[(d+56|0)>>2]&511)<<23|(X&511)<<14|128);a=167;break;case 166:_genop(d,32|(HEAP32[(d+
56|0)>>2]&511)<<23|(X&511)<<14|128);a=167;break;case 167:a=168;break;case 168:a=169;break;case 169:a=170;break;case 170:a=171;break;case 171:a=172;break;case 172:_gen_assignment(d,HEAP32[(g|0)>>2],HEAP32[(d+56|0)>>2],h);a=382;break;case 173:Na=ca=0;_push_(d);a=0!=(g|0)?174:179;break;case 174:Ba=HEAP32[(g|0)>>2];a=0!=(Ba|0)?175:178;break;case 175:ca=_gen_values(d,Ba);a=0>(ca|0)?176:177;break;case 176:ca=Na=1;_push_(d);a=177;break;case 177:a=178;break;case 178:a=179;break;case 179:a=0!=(g|0)?180:182;
break;case 180:a=0!=(HEAP32[(g+4|0)>>2]|0)?181:182;break;case 181:_codegen(d,HEAP32[(g+4|0)>>2],1);var Tc=d+56|0;HEAP32[Tc>>2]=HEAP32[Tc>>2]-1|0;a=183;break;case 182:_genop(d,5|(HEAP32[(d+56|0)>>2]&511)<<23);a=183;break;case 183:var Uc=d+56|0;HEAP32[Uc>>2]=HEAP32[Uc>>2]-(ca+1|0)|0;a=0!=(Na|0)?184:185;break;case 184:ca=127;a=185;break;case 185:_genop(d,36|(HEAP32[(d+56|0)>>2]&511)<<23|(ca&127)<<7);a=0!=(h|0)?186:187;break;case 186:_push_(d);a=187;break;case 187:a=382;break;case 188:va=d;Db=pb=0;_push_(d);
a=189;break;case 189:a=0!=((HEAP32[(va+68|0)>>2]>>>15&1)<<31>>31|0)^1?190:193;break;case 190:pb=pb+1|0;va=HEAP32[(va+48|0)>>2];a=0!=(va|0)?192:191;break;case 191:a=193;break;case 192:a=189;break;case 193:a=0!=(va|0)?194:195;break;case 194:Db=(HEAP32[(va+68|0)>>2]&32767)<<17>>17;a=195;break;case 195:_genop(d,37|(HEAP32[(d+56|0)>>2]&511)<<23|((Db<<4|pb&15)&65535)<<7);a=0!=(g|0)?196:198;break;case 196:a=0!=(HEAP32[(g+4|0)>>2]|0)?197:198;break;case 197:_push_(d);_codegen(d,HEAP32[(g+4|0)>>2],1);var Vc=
d+56|0;HEAP32[Vc>>2]=HEAP32[Vc>>2]-2|0;a=198;break;case 198:var Bc=d+56|0;HEAP32[Bc>>2]=HEAP32[Bc>>2]-1|0;_genop(d,(HEAP32[(d+56|0)>>2]&511)<<23|16292);a=0!=(h|0)?199:200;break;case 199:_push_(d);a=200;break;case 200:a=382;break;case 201:_codegen(d,g,1);var Cc=d+56|0;HEAP32[Cc>>2]=HEAP32[Cc>>2]-1|0;a=0!=(HEAP32[(d+72|0)>>2]|0)?202:203;break;case 202:_genop(d,(HEAP32[(d+56|0)>>2]&511)<<23|32809);a=204;break;case 203:_genop_peep(d,41|(HEAP32[(d+56|0)>>2]&511)<<23,0);a=204;break;case 204:_push_(d);a=
382;break;case 205:Ra=d;ub=pa=$a=Pa=0;a=206;break;case 206:a=0!=((HEAP32[(Ra+68|0)>>2]>>>15&1)<<31>>31|0)^1?207:210;break;case 207:Pa=Pa+1|0;Ra=HEAP32[(Ra+48|0)>>2];a=0!=(Ra|0)?209:208;break;case 208:a=210;break;case 209:a=206;break;case 210:a=0!=(Ra|0)?211:212;break;case 211:$a=(HEAP32[(Ra+68|0)>>2]&32767)<<17>>17;a=212;break;case 212:_genop(d,43|(HEAP32[(d+56|0)>>2]&511)<<23|(($a<<4|Pa&15)&65535)<<7);_push_(d);a=0!=(g|0)?213:216;break;case 213:pa=_gen_values(d,g);a=0>(pa|0)?214:215;break;case 214:pa=
ub=1;_push_(d);a=215;break;case 215:a=216;break;case 216:var pc=d+56|0;HEAP32[pc>>2]=HEAP32[pc>>2]-(pa+1|0)|0;a=0!=(ub|0)?217:218;break;case 217:pa=127;a=218;break;case 218:var qd=d,Wc=32|(HEAP32[(d+56|0)>>2]&511)<<23,Xc=d,Dc=_mrb_intern(HEAP32[(d|0)>>2],__str4660|0),Mb=(_new_msym(Xc,Dc)&511)<<14;_genop(qd,Wc|Mb|(pa&127)<<7);a=0!=(h|0)?219:220;break;case 219:_push_(d);a=220;break;case 220:a=382;break;case 221:_loop_break(d,g);a=0!=(h|0)?222:223;break;case 222:_push_(d);a=223;break;case 223:a=382;
break;case 224:a=0!=(HEAP32[(d+72|0)>>2]|0)?226:225;break;case 225:_raise_error(d,__str5661|0);a=234;break;case 226:a=0==(HEAP32[(HEAP32[(d+72|0)>>2]|0)>>2]|0)?227:230;break;case 227:a=(HEAP32[(d+76|0)>>2]|0)>(HEAP32[(HEAP32[(d+72|0)>>2]+20|0)>>2]|0)?228:229;break;case 228:_genop_peep(d,31|((HEAP32[(d+76|0)>>2]-HEAP32[(HEAP32[(d+72|0)>>2]+20|0)>>2]|0)&511)<<23,0);a=229;break;case 229:_codegen(d,g,0);_genop(d,23|(((HEAP32[(HEAP32[(d+72|0)>>2]+4|0)>>2]-HEAP32[(d+60|0)>>2]|0)+32767|0)&65535)<<7);a=233;
break;case 230:a=0!=(g|0)?231:232;break;case 231:_codegen(d,g,1);var Hc=d+56|0;HEAP32[Hc>>2]=HEAP32[Hc>>2]-1|0;a=232;break;case 232:_genop_peep(d,41|(HEAP32[(d+56|0)>>2]&511)<<23,0);a=233;break;case 233:a=234;break;case 234:a=0!=(h|0)?235:236;break;case 235:_push_(d);a=236;break;case 236:a=382;break;case 237:a=0!=(HEAP32[(d+72|0)>>2]|0)?239:238;break;case 238:_raise_error(d,__str6662|0);a=242;break;case 239:a=(HEAP32[(d+76|0)>>2]|0)>(HEAP32[(HEAP32[(d+72|0)>>2]+20|0)>>2]|0)?240:241;break;case 240:_genop_peep(d,
31|((HEAP32[(d+76|0)>>2]-HEAP32[(HEAP32[(d+72|0)>>2]+20|0)>>2]|0)&511)<<23,0);a=241;break;case 241:_genop(d,23|(((HEAP32[(HEAP32[(d+72|0)>>2]+8|0)>>2]-HEAP32[(d+60|0)>>2]|0)+32767|0)&65535)<<7);a=242;break;case 242:a=382;break;case 243:Ha=__str7663|0;a=0!=(HEAP32[(d+72|0)>>2]|0)?245:244;break;case 244:_raise_error(d,Ha);a=263;break;case 245:Ia=HEAP32[(d+72|0)>>2];ma=0;a=246;break;case 246:if(0!=(Ia|0))a=247;else{var gc=0;a=248}break;case 247:gc=4!=(HEAP32[(Ia|0)>>2]|0);a=248;break;case 248:a=gc?249:
252;break;case 249:a=3==(HEAP32[(Ia|0)>>2]|0)?250:251;break;case 250:ma=ma+1|0;a=251;break;case 251:Ia=HEAP32[(Ia+24|0)>>2];a=246;break;case 252:a=0!=(Ia|0)?254:253;break;case 253:_raise_error(d,Ha);a=262;break;case 254:a=0<(ma|0)?255:259;break;case 255:a=256;break;case 256:var Yc=ma;ma=Yc-1|0;a=0!=(Yc|0)?257:258;break;case 257:_genop_peep(d,8388636,0);a=256;break;case 258:a=259;break;case 259:a=(HEAP32[(d+76|0)>>2]|0)>(HEAP32[(Ia+20|0)>>2]|0)?260:261;break;case 260:_genop_peep(d,31|((HEAP32[(d+76|
0)>>2]-HEAP32[(Ia+20|0)>>2]|0)&511)<<23,0);a=261;break;case 261:_genop(d,23|(((HEAP32[(Ia+4|0)>>2]-HEAP32[(d+60|0)>>2]|0)+32767|0)&65535)<<7);a=262;break;case 262:a=263;break;case 263:a=382;break;case 264:a=0!=(h|0)?265:274;break;case 265:Ja=_lv_idx(d,g&65535);a=0<(Ja|0)?266:267;break;case 266:_genop(d,1|(HEAP32[(d+56|0)>>2]&511)<<23|(Ja&511)<<14);a=273;break;case 267:Sa=0;qb=HEAP32[(d+48|0)>>2];a=268;break;case 268:a=0!=(qb|0)?269:272;break;case 269:Ja=_lv_idx(qb,g&65535);a=0<(Ja|0)?270:271;break;
case 270:_genop(d,21|(HEAP32[(d+56|0)>>2]&511)<<23|(Ja&511)<<14|(Sa&127)<<7);a=272;break;case 271:Sa=Sa+1|0;qb=HEAP32[(qb+48|0)>>2];a=268;break;case 272:a=273;break;case 273:_push_(d);a=274;break;case 274:a=382;break;case 275:Sb=_new_sym759(d,g&65535);_genop(d,9|(HEAP32[(d+56|0)>>2]&511)<<23|(Sb&65535)<<7);_push_(d);a=382;break;case 276:Eb=_new_sym759(d,g&65535);_genop(d,13|(HEAP32[(d+56|0)>>2]&511)<<23|(Eb&65535)<<7);_push_(d);a=382;break;case 277:eb=_new_sym759(d,g&65535);_genop(d,15|(HEAP32[(d+
56|0)>>2]&511)<<23|(eb&65535)<<7);_push_(d);a=382;break;case 278:ab=_new_sym759(d,g&65535);_genop(d,17|(HEAP32[(d+56|0)>>2]&511)<<23|(ab&65535)<<7);_push_(d);a=382;break;case 279:_codegen(d,g,1);a=382;break;case 280:var Zc=g;Ta=_snprintf(Fb|0,4,__str8664|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Zc,tempInt));var $c=d,rd=_mrb_intern2(HEAP32[(d|0)>>2],Fb|0,Ta);Ea=_new_sym759($c,rd);_genop(d,9|(HEAP32[(d+56|0)>>2]&511)<<23|(Ea&65535)<<
7);_push_(d);a=382;break;case 281:var sd=g;Ka=_snprintf(wa|0,4,__str9665|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=sd,tempInt));var td=d,ad=_mrb_intern2(HEAP32[(d|0)>>2],wa|0,Ka);bb=_new_sym759(td,ad);_genop(d,9|(HEAP32[(d+56|0)>>2]&511)<<23|(bb&65535)<<7);_push_(d);a=382;break;case 282:a=382;break;case 283:_codegen(d,g,1);a=382;break;case 284:a=0!=(h|0)?285:294;break;case 285:xa=HEAP32[(g|0)>>2];W=HEAP32[(HEAP32[(g+4|0)>>2]|0)>>2];
qa=_readint_float(d,xa,W);a=2147483647>=qa?286:287;break;case 286:a=-2147483648<=qa?288:287;break;case 287:var ud=d;_mrb_float_value(gb,qa);ga=_new_lit(ud,gb);_genop(d,2|(HEAP32[(d+56|0)>>2]&511)<<23|(ga&65535)<<7);a=293;break;case 288:fb=qa&-1;a=32767>(fb|0)?289:291;break;case 289:a=-32767<(fb|0)?290:291;break;case 290:Ua=3|(HEAP32[(d+56|0)>>2]&511)<<23|((fb+32767|0)&65535)<<7;a=292;break;case 291:var Ec=d;_mrb_fixnum_value760(ra,fb);hb=_new_lit(Ec,ra);Ua=2|(HEAP32[(d+56|0)>>2]&511)<<23|(hb&65535)<<
7;a=292;break;case 292:_genop(d,Ua);a=293;break;case 293:_push_(d);a=294;break;case 294:a=382;break;case 295:a=0!=(h|0)?296:297;break;case 296:Y=g;cb=_strtof(Y,0);var Ic=d;_mrb_float_value(Ca,cb);ib=_new_lit(Ic,Ca);_genop(d,2|(HEAP32[(d+56|0)>>2]&511)<<23|(ib&65535)<<7);_push_(d);a=297;break;case 297:a=382;break;case 298:i=HEAP32[(g|0)>>2];g=HEAP32[(g+4|0)>>2];var Jc=i;a=51==(Jc|0)?299:50==(Jc|0)?300:309;break;case 299:oa=g;jb=_strtof(oa,0);var vd=d;_mrb_float_value(sa,-jb);za=_new_lit(vd,sa);_genop(d,
2|(HEAP32[(d+56|0)>>2]&511)<<23|(za&65535)<<7);_push_(d);a=310;break;case 300:Va=HEAP32[(g|0)>>2];db=HEAP32[(HEAP32[(g+4|0)>>2]|0)>>2];Fa=_readint_float(d,Va,db);a=2147483648>=Fa?301:302;break;case 301:a=-2147483648<=Fa?303:302;break;case 302:var wd=d;_mrb_float_value(Wa,-Fa);vb=_new_lit(wd,Wa);_genop(d,2|(HEAP32[(d+56|0)>>2]&511)<<23|(vb&65535)<<7);a=308;break;case 303:kb=-Fa&-1;a=32767>(kb|0)?304:306;break;case 304:a=-32767<(kb|0)?305:306;break;case 305:La=3|(HEAP32[(d+56|0)>>2]&511)<<23|((kb+32767|
0)&65535)<<7;a=307;break;case 306:var Qd=d;_mrb_fixnum_value760(Gb,kb);rb=_new_lit(Qd,Gb);La=2|(HEAP32[(d+56|0)>>2]&511)<<23|(rb&65535)<<7;a=307;break;case 307:_genop(d,La);a=308;break;case 308:_push_(d);a=310;break;case 309:var pd=d,bd=_mrb_intern(HEAP32[(d|0)>>2],__str10666|0);lb=_new_msym(pd,bd);_genop(d,3|(HEAP32[(d+56|0)>>2]&511)<<23);_push_(d);_codegen(d,g,1);var Kc=d+56|0;HEAP32[Kc>>2]=HEAP32[Kc>>2]-1|0;var F=d+56|0;HEAP32[F>>2]=HEAP32[F>>2]-1|0;_genop(d,46|(HEAP32[(d+56|0)>>2]&511)<<23|(lb&
511)<<14|256);a=310;break;case 310:a=382;break;case 311:a=0!=(h|0)?312:313;break;case 312:Xa=HEAP32[(g|0)>>2];Ma=HEAP32[(g+4|0)>>2];mb=_mrb_gc_arena_save(HEAP32[(d|0)>>2]);var xd=d;_mrb_str_new(Hb,HEAP32[(d|0)>>2],Xa,Ma);Ya=_new_lit(xd,Hb);_mrb_gc_arena_restore(HEAP32[(d|0)>>2],mb);_genop(d,61|(HEAP32[(d+56|0)>>2]&511)<<23|(Ya&65535)<<7);_push_(d);a=313;break;case 313:a=382;break;case 314:a=0!=(h|0)?315:319;break;case 315:Qa=g;_codegen(d,HEAP32[(Qa|0)>>2],1);Qa=HEAP32[(Qa+4|0)>>2];a=316;break;case 316:a=
0!=(Qa|0)?317:318;break;case 317:_codegen(d,HEAP32[(Qa|0)>>2],1);var cd=d+56|0;HEAP32[cd>>2]=HEAP32[cd>>2]-1|0;var dd=d+56|0;HEAP32[dd>>2]=HEAP32[dd>>2]-1|0;_genop(d,62|(HEAP32[(d+56|0)>>2]&511)<<23|((HEAP32[(d+56|0)>>2]+1|0)&511)<<14);_push_(d);Qa=HEAP32[(Qa+4|0)>>2];a=316;break;case 318:a=325;break;case 319:S=g;a=320;break;case 320:a=0!=(S|0)?321:324;break;case 321:a=55!=(HEAP32[(HEAP32[(S|0)>>2]|0)>>2]|0)?322:323;break;case 322:_codegen(d,HEAP32[(S|0)>>2],0);a=323;break;case 323:S=HEAP32[(S+4|
0)>>2];a=320;break;case 324:a=325;break;case 325:a=382;break;case 326:a=0!=(h|0)?327:328;break;case 327:wb=_new_sym759(d,g&65535);_genop(d,4|(HEAP32[(d+56|0)>>2]&511)<<23|(wb&65535)<<7);_push_(d);a=328;break;case 328:a=382;break;case 329:_codegen(d,g,h);a=0!=(h|0)?330:331;break;case 330:var Lc=d+56|0;HEAP32[Lc>>2]=HEAP32[Lc>>2]-1|0;var ed=d,yd=32|(HEAP32[(d+56|0)>>2]&511)<<23,fd=d,gd=_mrb_intern(HEAP32[(d|0)>>2],__str11667|0),zd=(_new_msym(fd,gd)&511)<<14;_genop(ed,yd|zd);_push_(d);a=331;break;case 331:a=
382;break;case 332:a=0!=(h|0)?333:334;break;case 333:_genop(d,6|(HEAP32[(d+56|0)>>2]&511)<<23);_push_(d);a=334;break;case 334:a=382;break;case 335:a=0!=(h|0)?336:337;break;case 336:_genop(d,5|(HEAP32[(d+56|0)>>2]&511)<<23);_push_(d);a=337;break;case 337:a=382;break;case 338:a=0!=(h|0)?339:340;break;case 339:_genop(d,7|(HEAP32[(d+56|0)>>2]&511)<<23);_push_(d);a=340;break;case 340:a=382;break;case 341:a=0!=(h|0)?342:343;break;case 342:_genop(d,8|(HEAP32[(d+56|0)>>2]&511)<<23);_push_(d);a=343;break;
case 343:a=382;break;case 344:ka=_new_msym(d,HEAP32[(g|0)>>2]&65535);xb=_new_msym(d,HEAP32[(g+4|0)>>2]&65535);var Ad=d,Bd=_mrb_intern(HEAP32[(d|0)>>2],__str12668|0);sb=_new_msym(Ad,Bd);_genop(d,72|(HEAP32[(d+56|0)>>2]&511)<<23);_push_(d);_genop(d,4|(HEAP32[(d+56|0)>>2]&511)<<23|(ka&65535)<<7);_push_(d);_genop(d,4|(HEAP32[(d+56|0)>>2]&511)<<23|(xb&65535)<<7);_push_(d);_genop(d,5|(HEAP32[(d+56|0)>>2]&511)<<23);var hd=d+56|0;HEAP32[hd>>2]=HEAP32[hd>>2]-3|0;_genop(d,32|(HEAP32[(d+56|0)>>2]&511)<<23|(sb&
511)<<14|256);a=0!=(h|0)?345:346;break;case 345:_push_(d);a=346;break;case 346:a=382;break;case 347:yb=_new_msym(d,g&65535);var Cd=d,Dd=_mrb_intern(HEAP32[(d|0)>>2],__str13669|0);Nb=_new_msym(Cd,Dd);_genop(d,72|(HEAP32[(d+56|0)>>2]&511)<<23);_push_(d);_genop(d,4|(HEAP32[(d+56|0)>>2]&511)<<23|(yb&65535)<<7);_push_(d);_genop(d,5|(HEAP32[(d+56|0)>>2]&511)<<23);var id=d+56|0;HEAP32[id>>2]=HEAP32[id>>2]-2|0;_genop(d,32|(HEAP32[(d+56|0)>>2]&511)<<23|(Nb&511)<<14|256);a=0!=(h|0)?348:349;break;case 348:_push_(d);
a=349;break;case 349:a=382;break;case 350:a=0==(HEAP32[(HEAP32[(g|0)>>2]|0)>>2]|0)?351:352;break;case 351:_genop(d,5|(HEAP32[(d+56|0)>>2]&511)<<23);_push_(d);a=356;break;case 352:a=1==(HEAP32[(HEAP32[(g|0)>>2]|0)>>2]|0)?353:354;break;case 353:_genop(d,66|(HEAP32[(d+56|0)>>2]&511)<<23);_push_(d);a=355;break;case 354:_codegen(d,HEAP32[(HEAP32[(g|0)>>2]|0)>>2],1);a=355;break;case 355:a=356;break;case 356:a=0!=(HEAP32[(HEAP32[(g+4|0)>>2]|0)>>2]|0)?357:358;break;case 357:_codegen(d,HEAP32[(HEAP32[(g+4|
0)>>2]|0)>>2],1);a=359;break;case 358:_genop(d,5|(HEAP32[(d+56|0)>>2]&511)<<23);_push_(d);a=359;break;case 359:var jd=d+56|0;HEAP32[jd>>2]=HEAP32[jd>>2]-1|0;var Mc=d+56|0;HEAP32[Mc>>2]=HEAP32[Mc>>2]-1|0;Ib=_new_msym(d,HEAP32[(HEAP32[(g|0)>>2]+4|0)>>2]&65535);_genop(d,67|(HEAP32[(d+56|0)>>2]&511)<<23|(Ib&511)<<14);Ib=_scope_body(d,HEAP32[(HEAP32[(HEAP32[(g+4|0)>>2]+4|0)>>2]|0)>>2]);_genop(d,69|(HEAP32[(d+56|0)>>2]&511)<<23|(Ib&65535)<<7);a=0!=(h|0)?360:361;break;case 360:_push_(d);a=361;break;case 361:a=
382;break;case 362:a=0==(HEAP32[(HEAP32[(g|0)>>2]|0)>>2]|0)?363:364;break;case 363:_genop(d,5|(HEAP32[(d+56|0)>>2]&511)<<23);_push_(d);a=368;break;case 364:a=1==(HEAP32[(HEAP32[(g|0)>>2]|0)>>2]|0)?365:366;break;case 365:_genop(d,66|(HEAP32[(d+56|0)>>2]&511)<<23);_push_(d);a=367;break;case 366:_codegen(d,HEAP32[(HEAP32[(g|0)>>2]|0)>>2],1);a=367;break;case 367:a=368;break;case 368:var Nc=d+56|0;HEAP32[Nc>>2]=HEAP32[Nc>>2]-1|0;Oa=_new_msym(d,HEAP32[(HEAP32[(g|0)>>2]+4|0)>>2]&65535);_genop(d,68|(HEAP32[(d+
56|0)>>2]&511)<<23|(Oa&511)<<14);Oa=_scope_body(d,HEAP32[(HEAP32[(g+4|0)>>2]|0)>>2]);_genop(d,69|(HEAP32[(d+56|0)>>2]&511)<<23|(Oa&65535)<<7);a=0!=(h|0)?369:370;break;case 369:_push_(d);a=370;break;case 370:a=382;break;case 371:_codegen(d,HEAP32[(g|0)>>2],1);var Ed=d+56|0;HEAP32[Ed>>2]=HEAP32[Ed>>2]-1|0;_genop(d,71|(HEAP32[(d+56|0)>>2]&511)<<23|(HEAP32[(d+56|0)>>2]&511)<<14);V=_scope_body(d,HEAP32[(HEAP32[(g+4|0)>>2]|0)>>2]);_genop(d,69|(HEAP32[(d+56|0)>>2]&511)<<23|(V&65535)<<7);a=0!=(h|0)?372:373;
break;case 372:_push_(d);a=373;break;case 373:a=382;break;case 374:Za=_new_msym(d,HEAP32[(g|0)>>2]&65535);$=_lambda_body(d,HEAP32[(g+4|0)>>2],0);_genop(d,72|(HEAP32[(d+56|0)>>2]&511)<<23);_push_(d);_genop(d,64|(HEAP32[(d+56|0)>>2]&511)<<23|($&16383)<<9|128);var kd=d+56|0;HEAP32[kd>>2]=HEAP32[kd>>2]-1|0;_genop(d,70|(HEAP32[(d+56|0)>>2]&511)<<23|(Za&511)<<14);a=0!=(h|0)?375:376;break;case 375:_genop(d,5|(HEAP32[(d+56|0)>>2]&511)<<23);a=376;break;case 376:a=382;break;case 377:Jb=HEAP32[(g|0)>>2];tb=
_new_msym(d,HEAP32[(HEAP32[(g+4|0)>>2]|0)>>2]&65535);zb=_lambda_body(d,HEAP32[(HEAP32[(g+4|0)>>2]+4|0)>>2],0);_codegen(d,Jb,1);var ld=d+56|0;HEAP32[ld>>2]=HEAP32[ld>>2]-1|0;_genop(d,71|(HEAP32[(d+56|0)>>2]&511)<<23|(HEAP32[(d+56|0)>>2]&511)<<14);_push_(d);_genop(d,64|(HEAP32[(d+56|0)>>2]&511)<<23|(zb&16383)<<9|128);var md=d+56|0;HEAP32[md>>2]=HEAP32[md>>2]-1|0;_genop(d,70|(HEAP32[(d+56|0)>>2]&511)<<23|(tb&511)<<14);a=0!=(h|0)?378:379;break;case 378:_genop(d,5|(HEAP32[(d+56|0)>>2]&511)<<23);a=379;
break;case 379:a=382;break;case 380:_codegen(d,g,0);a=382;break;case 381:a=382;break;case 382:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_codegen.X=1;function _new_label(f){HEAP32[(f+64|0)>>2]=HEAP32[(f+60|0)>>2];return HEAP32[(f+60|0)>>2]}
function _genop(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;b=(HEAP32[(c+60|0)>>2]|0)==(HEAP32[(c+96|0)>>2]|0)?3:6;break;case 3:b=c+96|0;HEAP32[b>>2]=HEAP32[b>>2]<<1|0;b=_codegen_realloc(c,HEAP32[(c+88|0)>>2],HEAP32[(c+96|0)>>2]<<2|0);HEAP32[(c+88|0)>>2]=b;b=0!=(HEAP32[(c+92|0)>>2]|0)?4:5;break;case 4:b=_codegen_realloc(c,HEAP32[(c+92|0)>>2],HEAP32[(c+96|0)>>2]<<1|0);HEAP32[(c+92|0)>>2]=b;b=5;break;case 5:b=6;break;case 6:HEAP32[(HEAP32[(c+88|0)>>2]+(HEAP32[(c+60|0)>>2]<<2)|0)>>2]=a;b=0!=
(HEAP32[(c+92|0)>>2]|0)?7:8;break;case 7:HEAP16[(HEAP32[(c+92|0)>>2]+(HEAP32[(c+60|0)>>2]<<1)|0)>>1]=HEAP16[(c+84|0)>>1];b=8;break;case 8:c=c+60|0;HEAP32[c>>2]=HEAP32[c>>2]+1|0;return;default:assert(0,"bad label: "+b)}}_genop.X=1;
function _push_(f){var e;for(e=2;;)switch(e){case 2:var b;b=f;e=511<(HEAP32[(b+56|0)>>2]|0)?3:4;break;case 3:_codegen_error(b,__str21677|0);e=4;break;case 4:e=b+56|0;HEAP32[e>>2]=HEAP32[e>>2]+1|0;e=5;break;case 5:e=(HEAP32[(b+56|0)>>2]|0)>(HEAP32[(b+116|0)>>2]|0)?6:7;break;case 6:HEAP32[(b+116|0)>>2]=HEAP32[(b+56|0)>>2];e=7;break;case 7:e=8;break;case 8:return;default:assert(0,"bad label: "+e)}}
function _loop_push(f,e){var b;b=_codegen_palloc(f,28);HEAP32[(b|0)>>2]=e;HEAP32[(b+12|0)>>2]=0;HEAP32[(b+8|0)>>2]=0;HEAP32[(b+4|0)>>2]=0;HEAP32[(b+24|0)>>2]=HEAP32[(f+72|0)>>2];HEAP32[(b+20|0)>>2]=HEAP32[(f+76|0)>>2];HEAP32[(b+16|0)>>2]=HEAP32[(f+56|0)>>2];return HEAP32[(f+72|0)>>2]=b}
function _dispatch(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d,g,h,i;a=f;d=e;g=HEAP32[(a+60|0)>>2]-d|0;h=HEAP32[(HEAP32[(a+88|0)>>2]+(d<<2)|0)>>2];i=h&127;HEAP32[(a+64|0)>>2]=HEAP32[(a+60|0)>>2];c=i;c=23==(c|0)||24==(c|0)||25==(c|0)||26==(c|0)?3:4;break;case 3:c=5;break;case 4:_fprintf(HEAP32[_stderr>>2],__str20676|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+
STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_scope_error(a);c=5;break;case 5:HEAP32[(HEAP32[(a+88|0)>>2]+(d<<2)|0)>>2]=i&127|(h>>23&511)<<23|((g+32767|0)&65535)<<7;STACKTOP=b;return;default:assert(0,"bad label: "+c)}}_dispatch.X=1;
function _new_msym(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h;a=f;d=e;h=HEAP32[(HEAP32[(a+100|0)>>2]+36|0)>>2];b=255<(h|0)?3:4;break;case 3:h=255;b=4;break;case 4:g=0;b=5;break;case 5:b=(g|0)<(h|0)?6:12;break;case 6:b=(HEAP16[(HEAP32[(HEAP32[(a+100|0)>>2]+16|0)>>2]+(g<<1)|0)>>1]<<16>>16|0)==(d<<16>>16|0)?7:8;break;case 7:c=g;b=17;break;case 8:b=0==(HEAP16[(HEAP32[(HEAP32[(a+100|0)>>2]+16|0)>>2]+(g<<1)|0)>>1]<<16>>16|0)?9:10;break;case 9:b=12;break;case 10:b=11;break;case 11:g=g+1|0;b=5;break;
case 12:b=255<(g|0)?13:14;break;case 13:_codegen_error(a,__str19675|0);b=14;break;case 14:HEAP16[(HEAP32[(HEAP32[(a+100|0)>>2]+16|0)>>2]+(g<<1)|0)>>1]=d;b=(g|0)==(HEAP32[(HEAP32[(a+100|0)>>2]+36|0)>>2]|0)?15:16;break;case 15:b=HEAP32[(a+100|0)>>2]+36|0;HEAP32[b>>2]=HEAP32[b>>2]+1|0;b=16;break;case 16:c=g;b=17;break;case 17:return c;default:assert(0,"bad label: "+b)}}_new_msym.X=1;
function _dispatch_linked(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;b=0!=(a|0)?4:3;break;case 3:b=8;break;case 4:b=5;break;case 5:b=HEAP32[(HEAP32[(c+88|0)>>2]+(a<<2)|0)>>2];d=(b>>7&65535)-32767|0;_dispatch(c,a);b=0!=(d|0)?7:6;break;case 6:b=8;break;case 7:a=d;b=5;break;case 8:return;default:assert(0,"bad label: "+b)}}
function _gen_assignment(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d;for(d=2;;)switch(d){case 2:var g,h,i,j,l,k,n,r;g=f;h=e;i=b;j=c;k=HEAP32[(h|0)>>2];h=HEAP32[(h+4|0)>>2];d=k;d=41==(d|0)?3:39==(d|0)?4:42==(d|0)?15:44==(d|0)?16:43==(d|0)?17:74==(d|0)?18:29==(d|0)?19:22;break;case 3:l=_new_sym759(g,h&65535);_genop_peep(g,10|(i&511)<<23|(l&65535)<<7,j);d=23;break;case 4:l=_lv_idx(g,h&65535);d=0<(l|0)?5:8;break;case 5:d=(l|0)!=
(i|0)?6:7;break;case 6:_genop_peep(g,1|(l&511)<<23|(i&511)<<14,j);d=7;break;case 7:d=23;break;case 8:n=0;r=HEAP32[(g+48|0)>>2];d=9;break;case 9:d=0!=(r|0)?10:13;break;case 10:l=_lv_idx(r,h&65535);d=0<(l|0)?11:12;break;case 11:_genop_peep(g,22|(i&511)<<23|(l&511)<<14|(n&127)<<7,j);d=13;break;case 12:n=n+1|0;r=HEAP32[(r+48|0)>>2];d=9;break;case 13:d=14;break;case 14:d=23;break;case 15:l=_new_sym759(g,h&65535);_genop_peep(g,14|(i&511)<<23|(l&65535)<<7,j);d=23;break;case 16:l=_new_sym759(g,h&65535);_genop_peep(g,
16|(i&511)<<23|(l&65535)<<7,j);d=23;break;case 17:l=_new_sym759(g,h&65535);_genop_peep(g,18|(i&511)<<23|(l&65535)<<7,j);d=23;break;case 18:l=_new_sym759(g,HEAP32[(h+4|0)>>2]&65535);_genop_peep(g,1|(HEAP32[(g+56|0)>>2]&511)<<23|(i&511)<<14,0);_push_(g);_codegen(g,HEAP32[(h|0)>>2],1);d=g+56|0;HEAP32[d>>2]=HEAP32[d>>2]-2|0;_genop_peep(g,20|(HEAP32[(g+56|0)>>2]&511)<<23|(l&65535)<<7,j);d=23;break;case 19:_push_(g);d=g;var t=h,p=_attrsym(g,HEAP32[(HEAP32[(h+4|0)>>2]|0)>>2]&65535);_gen_call(d,t,p,i,0);
d=g+56|0;HEAP32[d>>2]=HEAP32[d>>2]-1|0;d=0!=(j|0)?20:21;break;case 20:_genop_peep(g,1|(HEAP32[(g+56|0)>>2]&511)<<23|(i&511)<<14,j);d=21;break;case 21:d=23;break;case 22:d=k;_printf(__str17673|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=d,tempInt));d=23;break;case 23:d=0!=(j|0)?24:25;break;case 24:_push_(g);d=25;break;case 25:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_gen_assignment.X=1;
function _loop_pop(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;b=0!=(a|0)?3:4;break;case 3:_genop(c,5|(HEAP32[(c+56|0)>>2]&511)<<23);b=4;break;case 4:_dispatch_linked(c,HEAP32[(HEAP32[(c+72|0)>>2]+12|0)>>2]);HEAP32[(c+72|0)>>2]=HEAP32[(HEAP32[(c+72|0)>>2]+24|0)>>2];b=0!=(a|0)?5:6;break;case 5:_push_(c);b=6;break;case 6:return;default:assert(0,"bad label: "+b)}}
function _scope_body(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;b=e;a=_scope_new(HEAP32[(c|0)>>2],c,HEAP32[(b|0)>>2]);d=HEAP32[(a+124|0)>>2];_codegen(a,HEAP32[(b+4|0)>>2],1);b=0!=(HEAP32[(c+88|0)>>2]|0)?4:3;break;case 3:_genop(a,74);b=8;break;case 4:b=0==(HEAP32[(a+116|0)>>2]|0)?5:6;break;case 5:_genop(a,5);_genop(a,41);b=7;break;case 6:_genop_peep(a,41|(HEAP32[(a+56|0)>>2]&511)<<23,0);b=7;break;case 7:b=8;break;case 8:return _scope_finish(a),d-HEAP32[(c+124|0)>>2]|0;default:assert(0,"bad label: "+
b)}}_scope_body.X=1;
function _genop_peep(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h,i,j,l;a=f;d=e;g=b;c=(HEAP32[(a+64|0)>>2]|0)!=(HEAP32[(a+60|0)>>2]|0)?3:84;break;case 3:c=0<(HEAP32[(a+60|0)>>2]|0)?4:84;break;case 4:h=HEAP32[(HEAP32[(a+88|0)>>2]+((HEAP32[(a+60|0)>>2]-1|0)<<2)|0)>>2];i=d&127;j=h&127;c=i;c=1==(c|0)?5:14==(c|0)||16==(c|0)||18==(c|0)||20==(c|0)||10==(c|0)?40:22==(c|0)?47:31==(c|0)?54:28==(c|0)?57:41==(c|0)?60:44==(c|0)||46==(c|0)?71:82;break;case 5:c=(d>>23&511|0)==(d>>14&511|0)?6:7;break;case 6:c=
85;break;case 7:c=0!=(g|0)?8:9;break;case 8:c=83;break;case 9:c=j;c=1==(c|0)?10:3==(c|0)?18:55==(c|0)||63==(c|0)||65==(c|0)||58==(c|0)||21==(c|0)?22:4==(c|0)||9==(c|0)||13==(c|0)||15==(c|0)||17==(c|0)||11==(c|0)||2==(c|0)||61==(c|0)?26:71==(c|0)?30:5==(c|0)||6==(c|0)||7==(c|0)||8==(c|0)||66==(c|0)?34:38;break;case 10:c=(d>>14&511|0)==(h>>23&511|0)?11:14;break;case 11:c=(d>>23&511|0)==(h>>14&511|0)?12:14;break;case 12:c=(d>>23&511|0)>=(HEAP32[(a+112|0)>>2]|0)?13:14;break;case 13:c=85;break;case 14:c=
(d>>14&511|0)==(h>>23&511|0)?15:17;break;case 15:c=(h>>23&511|0)>=(HEAP32[(a+112|0)>>2]|0)?16:17;break;case 16:HEAP32[(HEAP32[(a+88|0)>>2]+((HEAP32[(a+60|0)>>2]-1|0)<<2)|0)>>2]=1|(d>>23&511)<<23|(h>>14&511)<<14;c=85;break;case 17:c=39;break;case 18:c=(d>>14&511|0)==(h>>23&511|0)?19:21;break;case 19:c=(h>>23&511|0)>=(HEAP32[(a+112|0)>>2]|0)?20:21;break;case 20:HEAP32[(HEAP32[(a+88|0)>>2]+((HEAP32[(a+60|0)>>2]-1|0)<<2)|0)>>2]=3|(d>>23&511)<<23|((((h>>7&65535)-32767|0)+32767|0)&65535)<<7;c=85;break;
case 21:c=39;break;case 22:c=(d>>14&511|0)==(h>>23&511|0)?23:25;break;case 23:c=(h>>23&511|0)>=(HEAP32[(a+112|0)>>2]|0)?24:25;break;case 24:HEAP32[(HEAP32[(a+88|0)>>2]+((HEAP32[(a+60|0)>>2]-1|0)<<2)|0)>>2]=j&127|(d>>23&511)<<23|(h>>14&511)<<14|(h>>7&127)<<7;c=85;break;case 25:c=39;break;case 26:c=(d>>14&511|0)==(h>>23&511|0)?27:29;break;case 27:c=(h>>23&511|0)>=(HEAP32[(a+112|0)>>2]|0)?28:29;break;case 28:HEAP32[(HEAP32[(a+88|0)>>2]+((HEAP32[(a+60|0)>>2]-1|0)<<2)|0)>>2]=j&127|(d>>23&511)<<23|(h>>
7&65535)<<7;c=85;break;case 29:c=39;break;case 30:c=(d>>14&511|0)==(h>>23&511|0)?31:33;break;case 31:c=(h>>23&511|0)>=(HEAP32[(a+112|0)>>2]|0)?32:33;break;case 32:HEAP32[(HEAP32[(a+88|0)>>2]+((HEAP32[(a+60|0)>>2]-1|0)<<2)|0)>>2]=j&127|(d>>23&511)<<23|(h>>14&511)<<14;c=85;break;case 33:c=39;break;case 34:c=(d>>14&511|0)==(h>>23&511|0)?35:37;break;case 35:c=(h>>23&511|0)>=(HEAP32[(a+112|0)>>2]|0)?36:37;break;case 36:HEAP32[(HEAP32[(a+88|0)>>2]+((HEAP32[(a+60|0)>>2]-1|0)<<2)|0)>>2]=j&127|(d>>23&511)<<
23;c=85;break;case 37:c=39;break;case 38:c=39;break;case 39:c=83;break;case 40:c=0!=(g|0)?41:42;break;case 41:c=83;break;case 42:c=1==(j|0)?43:46;break;case 43:c=(d>>23&511|0)==(h>>23&511|0)?44:45;break;case 44:HEAP32[(HEAP32[(a+88|0)>>2]+((HEAP32[(a+60|0)>>2]-1|0)<<2)|0)>>2]=i&127|(h>>14&511)<<23|(d>>7&65535)<<7;c=85;break;case 45:c=46;break;case 46:c=83;break;case 47:c=0!=(g|0)?48:49;break;case 48:c=83;break;case 49:c=1==(j|0)?50:53;break;case 50:c=(d>>23&511|0)==(h>>23&511|0)?51:52;break;case 51:HEAP32[(HEAP32[(a+
88|0)>>2]+((HEAP32[(a+60|0)>>2]-1|0)<<2)|0)>>2]=i&127|(h>>14&511)<<23|(d>>14&511)<<14|(d>>7&127)<<7;c=85;break;case 52:c=53;break;case 53:c=83;break;case 54:c=31==(j|0)?55:56;break;case 55:HEAP32[(HEAP32[(a+88|0)>>2]+((HEAP32[(a+60|0)>>2]-1|0)<<2)|0)>>2]=31|(((h>>23&511)+(d>>23&511)|0)&511)<<23;c=85;break;case 56:c=83;break;case 57:c=28==(j|0)?58:59;break;case 58:HEAP32[(HEAP32[(a+88|0)>>2]+((HEAP32[(a+60|0)>>2]-1|0)<<2)|0)>>2]=28|(((h>>23&511)+(d>>23&511)|0)&511)<<23;c=85;break;case 59:c=83;break;
case 60:c=j;c=41==(c|0)?61:1==(c|0)?62:3==(c|0)?63:55==(c|0)||63==(c|0)||65==(c|0)||58==(c|0)||21==(c|0)?64:14==(c|0)||16==(c|0)||18==(c|0)||20==(c|0)||22==(c|0)||10==(c|0)?65:4==(c|0)||9==(c|0)||13==(c|0)||15==(c|0)||17==(c|0)||11==(c|0)||2==(c|0)||61==(c|0)?66:71==(c|0)?67:5==(c|0)||6==(c|0)||7==(c|0)||8==(c|0)||66==(c|0)?68:69;break;case 61:c=85;break;case 62:HEAP32[(HEAP32[(a+88|0)>>2]+((HEAP32[(a+60|0)>>2]-1|0)<<2)|0)>>2]=41|(h>>14&511)<<23;c=85;break;case 63:HEAP32[(HEAP32[(a+88|0)>>2]+((HEAP32[(a+
60|0)>>2]-1|0)<<2)|0)>>2]=3|((((h>>7&65535)-32767|0)+32767|0)&65535)<<7;_genop(a,41);c=85;break;case 64:HEAP32[(HEAP32[(a+88|0)>>2]+((HEAP32[(a+60|0)>>2]-1|0)<<2)|0)>>2]=j&127|(h>>14&511)<<14|(h>>7&127)<<7;_genop(a,41);c=85;break;case 65:c=a+60|0;HEAP32[c>>2]=HEAP32[c>>2]-1|0;_genop_peep(a,h,0);h=HEAP32[(HEAP32[(a+88|0)>>2]+((HEAP32[(a+60|0)>>2]-1|0)<<2)|0)>>2];_genop(a,41|(h>>23&511)<<23);c=85;break;case 66:HEAP32[(HEAP32[(a+88|0)>>2]+((HEAP32[(a+60|0)>>2]-1|0)<<2)|0)>>2]=j&127|(h>>7&65535)<<7;_genop(a,
41);c=85;break;case 67:HEAP32[(HEAP32[(a+88|0)>>2]+((HEAP32[(a+60|0)>>2]-1|0)<<2)|0)>>2]=j&127|(d>>23&511)<<23|(h>>14&511)<<14;_genop(a,41);c=85;break;case 68:HEAP32[(HEAP32[(a+88|0)>>2]+((HEAP32[(a+60|0)>>2]-1|0)<<2)|0)>>2]=j&127;_genop(a,41);c=85;break;case 69:c=70;break;case 70:c=83;break;case 71:c=3==(j|0)?72:81;break;case 72:l=(h>>7&65535)-32767|0;c=46==(i|0)?73:74;break;case 73:l=-l|0;c=74;break;case 74:c=127<(l|0)?76:75;break;case 75:c=-127>(l|0)?76:77;break;case 76:c=83;break;case 77:c=0<=
(l|0)?78:79;break;case 78:HEAP32[(HEAP32[(a+88|0)>>2]+((HEAP32[(a+60|0)>>2]-1|0)<<2)|0)>>2]=45|(d>>23&511)<<23|(d>>14&511)<<14|(l&127)<<7;c=80;break;case 79:HEAP32[(HEAP32[(a+88|0)>>2]+((HEAP32[(a+60|0)>>2]-1|0)<<2)|0)>>2]=47|(d>>23&511)<<23|(d>>14&511)<<14|((-l|0)&127)<<7;c=80;break;case 80:c=85;break;case 81:c=82;break;case 82:c=83;break;case 83:c=84;break;case 84:_genop(a,d);c=85;break;case 85:return;default:assert(0,"bad label: "+c)}}_genop_peep.X=1;
function _lambda_body(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h,i,j,l,k,n,r,t,p;a=f;d=e;g=b;i=HEAP32[(a+124|0)>>2];a=_scope_new(HEAP32[(a|0)>>2],a,HEAP32[(d|0)>>2]);h=HEAP32[(a+124|0)>>2];c=a+68|0;HEAP32[c>>2]=HEAP32[c>>2]&-32769|((0!=(g|0)^1)&1)<<15;c=0!=(g|0)?3:4;break;case 3:c=_loop_push(a,1);var q=_new_label(a);HEAP32[(c+4|0)>>2]=q;c=4;break;case 4:d=HEAP32[(d+4|0)>>2];c=0!=(HEAP32[(d|0)>>2]|0)?5:20;break;case 5:l=_node_len(HEAP32[(HEAP32[(d|0)>>2]|0)>>2]);t=HEAP32[(HEAP32[(d|0)>>2]|
0)>>2];c=6;break;case 6:c=0!=(t|0)?7:8;break;case 7:t=HEAP32[(t+4|0)>>2];c=6;break;case 8:k=_node_len(HEAP32[(HEAP32[(HEAP32[(d|0)>>2]+4|0)>>2]|0)>>2]);n=0!=(HEAP32[(HEAP32[(HEAP32[(HEAP32[(d|0)>>2]+4|0)>>2]+4|0)>>2]|0)>>2]|0)?1:0;r=_node_len(HEAP32[(HEAP32[(HEAP32[(HEAP32[(HEAP32[(d|0)>>2]+4|0)>>2]+4|0)>>2]+4|0)>>2]|0)>>2]);c=0!=(HEAP32[(HEAP32[(HEAP32[(HEAP32[(HEAP32[(d|0)>>2]+4|0)>>2]+4|0)>>2]+4|0)>>2]+4|0)>>2]|0)?1:0;c=(l&31)<<18|(k&31)<<13|(n&1)<<12|(r&31)<<7|0|c&1;q=a+68|0;HEAP32[q>>2]=HEAP32[q>>
2]&-32768|(((l+k|0)&63)<<6|(n&1)<<5|r&31)&32767;_genop(a,38|(c&33554431)<<7);n=_new_label(a);r=0;c=9;break;case 9:c=(r|0)<(k|0)?10:12;break;case 10:_new_label(a);_genop(a,4194199);c=11;break;case 11:r=r+1|0;c=9;break;case 12:c=0<(k|0)?13:14;break;case 13:_genop(a,4194199);c=14;break;case 14:p=HEAP32[(HEAP32[(HEAP32[(d|0)>>2]+4|0)>>2]|0)>>2];r=0;c=15;break;case 15:c=0!=(p|0)?16:17;break;case 16:_dispatch(a,n+r|0);_codegen(a,HEAP32[(HEAP32[(p|0)>>2]+4|0)>>2],1);c=_lv_idx(a,HEAP32[(HEAP32[(p|0)>>2]|
0)>>2]&65535);q=a+56|0;HEAP32[q>>2]=HEAP32[q>>2]-1|0;_genop_peep(a,1|(c&511)<<23|(HEAP32[(a+56|0)>>2]&511)<<14,0);r=r+1|0;p=HEAP32[(p+4|0)>>2];c=15;break;case 17:c=0<(k|0)?18:19;break;case 18:_dispatch(a,n+r|0);c=19;break;case 19:c=20;break;case 20:_codegen(a,HEAP32[(HEAP32[(d+4|0)>>2]|0)>>2],1);c=a+56|0;HEAP32[c>>2]=HEAP32[c>>2]-1|0;c=0<(HEAP32[(a+60|0)>>2]|0)?21:29;break;case 21:j=HEAP32[(HEAP32[(a+88|0)>>2]+((HEAP32[(a+60|0)>>2]-1|0)<<2)|0)>>2];c=41!=(j&127|0)?24:22;break;case 22:c=0!=(j>>14&511|
0)?24:23;break;case 23:c=(HEAP32[(a+60|0)>>2]|0)==(HEAP32[(a+64|0)>>2]|0)?24:28;break;case 24:c=0==(HEAP32[(a+116|0)>>2]|0)?25:26;break;case 25:_genop(a,5);_genop(a,41);c=27;break;case 26:_genop_peep(a,41|(HEAP32[(a+56|0)>>2]&511)<<23,0);c=27;break;case 27:c=28;break;case 28:c=29;break;case 29:c=0!=(g|0)?30:31;break;case 30:_loop_pop(a,0);c=31;break;case 31:return _scope_finish(a),h-i|0;default:assert(0,"bad label: "+c)}}_lambda_body.X=1;
function _for_body(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h,i,j;c=f;a=e;d=c;h=HEAP32[(c+124|0)>>2];_codegen(c,HEAP32[(HEAP32[(a+4|0)>>2]|0)>>2],1);c=_scope_new(HEAP32[(c|0)>>2],c,HEAP32[(a|0)>>2]);g=HEAP32[(c+124|0)>>2];i=_loop_push(c,2);b=_new_label(c);HEAP32[(i+4|0)>>2]=b;i=HEAP32[(a|0)>>2];b=0!=(HEAP32[(i|0)>>2]|0)?3:6;break;case 3:b=0!=(HEAP32[(HEAP32[(i|0)>>2]+4|0)>>2]|0)?6:4;break;case 4:b=0!=(HEAP32[(i+4|0)>>2]|0)?6:5;break;case 5:_genop(c,33554470);_gen_assignment(c,HEAP32[(HEAP32[(i|
0)>>2]|0)>>2],1,0);b=7;break;case 6:_genop(c,33554470);_gen_vmassignment(c,i,1,1);b=7;break;case 7:_codegen(c,HEAP32[(HEAP32[(HEAP32[(a+4|0)>>2]+4|0)>>2]|0)>>2],1);b=c+56|0;HEAP32[b>>2]=HEAP32[b>>2]-1|0;b=0<(HEAP32[(c+60|0)>>2]|0)?8:13;break;case 8:j=HEAP32[(HEAP32[(c+88|0)>>2]+((HEAP32[(c+60|0)>>2]-1|0)<<2)|0)>>2];b=41!=(j&127|0)?11:9;break;case 9:b=0!=(j>>14&511|0)?11:10;break;case 10:b=(HEAP32[(c+60|0)>>2]|0)==(HEAP32[(c+64|0)>>2]|0)?11:12;break;case 11:_genop_peep(c,41|(HEAP32[(c+56|0)>>2]&511)<<
23,0);b=12;break;case 12:b=13;break;case 13:_loop_pop(c,0);_scope_finish(c);c=d;_genop(c,64|(HEAP32[(c+56|0)>>2]&511)<<23|((g-h|0)&16383)<<9|256);a=c+56|0;HEAP32[a>>2]=HEAP32[a>>2]-1|0;a=c;d=_mrb_intern(HEAP32[(c|0)>>2],__str16672|0);g=_new_msym(a,d);_genop(c,33|(HEAP32[(c+56|0)>>2]&511)<<23|(g&511)<<14);return;default:assert(0,"bad label: "+b)}}_for_body.X=1;
function _gen_call(f,e,b,c,a){var d=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g;for(g=2;;)switch(g){case 2:var h,i,j,l,k,n,r,t,p,q,v,w=d,m;h=f;i=e;j=b;l=c;k=a;g=0!=(j<<16>>16|0)?3:4;break;case 3:var x=j<<16>>16;g=5;break;case 4:x=(HEAP32[(HEAP32[(i+4|0)>>2]|0)>>2]&65535)<<16>>16;g=5;break;case 5:n=x&65535;v=q=p=t=0;_codegen(h,HEAP32[(i|0)>>2],1);r=_new_msym(h,n);i=HEAP32[(HEAP32[(HEAP32[(i+4|0)>>2]+4|0)>>2]|0)>>2];g=0!=(i|0)?
6:9;break;case 6:t=_gen_values(h,HEAP32[(i|0)>>2]);g=0>(t|0)?7:8;break;case 7:t=p=q=1;_push_(h);g=8;break;case 8:g=9;break;case 9:g=0!=(l|0)?10:14;break;case 10:g=0!=(q|0)?11:12;break;case 11:g=h+56|0;HEAP32[g>>2]=HEAP32[g>>2]-1|0;_genop(h,57|(HEAP32[(h+56|0)>>2]&511)<<23|(l&511)<<14);_push_(h);g=13;break;case 12:_genop(h,1|(HEAP32[(h+56|0)>>2]&511)<<23|(l&511)<<14);_push_(h);t=t+1|0;g=13;break;case 13:g=14;break;case 14:g=0!=(i|0)?15:17;break;case 15:g=0!=(HEAP32[(i+4|0)>>2]|0)?16:17;break;case 16:p=
1;_codegen(h,HEAP32[(i+4|0)>>2],1);g=h+56|0;HEAP32[g>>2]=HEAP32[g>>2]-1|0;g=18;break;case 17:v=HEAP32[(h+56|0)>>2];g=18;break;case 18:m=h+56|0;HEAP32[m>>2]=HEAP32[m>>2]-(t+1|0)|0;m=_mrb_sym2name_len(HEAP32[(h|0)>>2],n,w);g=0!=(p|0)?22:19;break;case 19:g=1==(HEAP32[w>>2]|0)?20:22;break;case 20:g=43==(HEAP8[m|0]<<24>>24|0)?21:22;break;case 21:_genop_peep(h,44|(HEAP32[(h+56|0)>>2]&511)<<23|(r&511)<<14|(t&127)<<7,k);g=71;break;case 22:g=0!=(p|0)?26:23;break;case 23:g=1==(HEAP32[w>>2]|0)?24:26;break;case 24:g=
45==(HEAP8[m|0]<<24>>24|0)?25:26;break;case 25:_genop_peep(h,46|(HEAP32[(h+56|0)>>2]&511)<<23|(r&511)<<14|(t&127)<<7,k);g=70;break;case 26:g=0!=(p|0)?30:27;break;case 27:g=1==(HEAP32[w>>2]|0)?28:30;break;case 28:g=42==(HEAP8[m|0]<<24>>24|0)?29:30;break;case 29:_genop(h,48|(HEAP32[(h+56|0)>>2]&511)<<23|(r&511)<<14|(t&127)<<7);g=69;break;case 30:g=0!=(p|0)?34:31;break;case 31:g=1==(HEAP32[w>>2]|0)?32:34;break;case 32:g=47==(HEAP8[m|0]<<24>>24|0)?33:34;break;case 33:_genop(h,49|(HEAP32[(h+56|0)>>2]&
511)<<23|(r&511)<<14|(t&127)<<7);g=68;break;case 34:g=0!=(p|0)?38:35;break;case 35:g=1==(HEAP32[w>>2]|0)?36:38;break;case 36:g=60==(HEAP8[m|0]<<24>>24|0)?37:38;break;case 37:_genop(h,51|(HEAP32[(h+56|0)>>2]&511)<<23|(r&511)<<14|(t&127)<<7);g=67;break;case 38:g=0!=(p|0)?43:39;break;case 39:g=2==(HEAP32[w>>2]|0)?40:43;break;case 40:g=60==(HEAP8[m|0]<<24>>24|0)?41:43;break;case 41:g=61==(HEAP8[m+1|0]<<24>>24|0)?42:43;break;case 42:_genop(h,52|(HEAP32[(h+56|0)>>2]&511)<<23|(r&511)<<14|(t&127)<<7);g=66;
break;case 43:g=0!=(p|0)?47:44;break;case 44:g=1==(HEAP32[w>>2]|0)?45:47;break;case 45:g=62==(HEAP8[m|0]<<24>>24|0)?46:47;break;case 46:_genop(h,53|(HEAP32[(h+56|0)>>2]&511)<<23|(r&511)<<14|(t&127)<<7);g=65;break;case 47:g=0!=(p|0)?52:48;break;case 48:g=2==(HEAP32[w>>2]|0)?49:52;break;case 49:g=62==(HEAP8[m|0]<<24>>24|0)?50:52;break;case 50:g=61==(HEAP8[m+1|0]<<24>>24|0)?51:52;break;case 51:_genop(h,54|(HEAP32[(h+56|0)>>2]&511)<<23|(r&511)<<14|(t&127)<<7);g=64;break;case 52:g=0!=(p|0)?57:53;break;
case 53:g=2==(HEAP32[w>>2]|0)?54:57;break;case 54:g=61==(HEAP8[m|0]<<24>>24|0)?55:57;break;case 55:g=61==(HEAP8[m+1|0]<<24>>24|0)?56:57;break;case 56:_genop(h,50|(HEAP32[(h+56|0)>>2]&511)<<23|(r&511)<<14|(t&127)<<7);g=63;break;case 57:g=0!=(q|0)?58:59;break;case 58:t=127;g=59;break;case 59:g=0<(v|0)?60:61;break;case 60:_genop(h,32|(HEAP32[(h+56|0)>>2]&511)<<23|(r&511)<<14|(t&127)<<7);g=62;break;case 61:_genop(h,33|(HEAP32[(h+56|0)>>2]&511)<<23|(r&511)<<14|(t&127)<<7);g=62;break;case 62:g=63;break;
case 63:g=64;break;case 64:g=65;break;case 65:g=66;break;case 66:g=67;break;case 67:g=68;break;case 68:g=69;break;case 69:g=70;break;case 70:g=71;break;case 71:g=0!=(k|0)?72:73;break;case 72:_push_(h);g=73;break;case 73:STACKTOP=d;return;default:assert(0,"bad label: "+g)}}_gen_call.X=1;
function _new_sym759(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g;a=f;d=e;g=0;b=3;break;case 3:b=(g|0)<(HEAP32[(HEAP32[(a+100|0)>>2]+36|0)>>2]|0)?4:8;break;case 4:b=(HEAP16[(HEAP32[(HEAP32[(a+100|0)>>2]+16|0)>>2]+(g<<1)|0)>>1]<<16>>16|0)==(d<<16>>16|0)?5:6;break;case 5:c=g;b=16;break;case 6:b=7;break;case 7:g=g+1|0;b=3;break;case 8:b=125<(HEAP32[(HEAP32[(a+100|0)>>2]+36|0)>>2]|0)?9:15;break;case 9:b=256>(HEAP32[(HEAP32[(a+100|0)>>2]+36|0)>>2]|0)?10:15;break;case 10:g=_codegen_realloc(a,HEAP32[(HEAP32[(a+
100|0)>>2]+16|0)>>2],131072);HEAP32[(HEAP32[(a+100|0)>>2]+16|0)>>2]=g;g=0;b=11;break;case 11:b=(g|0)<(256-HEAP32[(HEAP32[(a+100|0)>>2]+36|0)>>2]|0)?12:14;break;case 12:HEAP16[(HEAP32[(HEAP32[(a+100|0)>>2]+16|0)>>2]+((g+HEAP32[(HEAP32[(a+100|0)>>2]+36|0)>>2]|0)<<1)|0)>>1]=0;b=13;break;case 13:g=g+1|0;b=11;break;case 14:HEAP32[(HEAP32[(a+100|0)>>2]+36|0)>>2]=256;b=15;break;case 15:HEAP16[(HEAP32[(HEAP32[(a+100|0)>>2]+16|0)>>2]+(HEAP32[(HEAP32[(a+100|0)>>2]+36|0)>>2]<<1)|0)>>1]=d;c=HEAP32[(a+100|0)>>
2]+36|0;b=HEAP32[c>>2];HEAP32[c>>2]=b+1|0;c=b;b=16;break;case 16:return c;default:assert(0,"bad label: "+b)}}_new_sym759.X=1;
function _gen_values(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g;a=f;d=e;g=0;b=3;break;case 3:b=0!=(d|0)?4:13;break;case 4:b=63==(HEAP32[(HEAP32[(d|0)>>2]|0)>>2]|0)?5:12;break;case 5:b=a+56|0;HEAP32[b>>2]=HEAP32[b>>2]-g|0;_genop(a,55|(HEAP32[(a+56|0)>>2]&511)<<23|(HEAP32[(a+56|0)>>2]&511)<<14|(g&127)<<7);_push_(a);_codegen(a,HEAP32[(d|0)>>2],1);b=a+56|0;HEAP32[b>>2]=HEAP32[b>>2]-1|0;b=a+56|0;HEAP32[b>>2]=HEAP32[b>>2]-1|0;_genop(a,56|(HEAP32[(a+56|0)>>2]&511)<<23|((HEAP32[(a+56|0)>>2]+1|0)&511)<<
14);d=HEAP32[(d+4|0)>>2];b=6;break;case 6:b=0!=(d|0)?7:11;break;case 7:_push_(a);_codegen(a,HEAP32[(d|0)>>2],1);b=a+56|0;HEAP32[b>>2]=HEAP32[b>>2]-1|0;b=a+56|0;HEAP32[b>>2]=HEAP32[b>>2]-1|0;b=63==(HEAP32[(HEAP32[(d|0)>>2]|0)>>2]|0)?8:9;break;case 8:_genop(a,56|(HEAP32[(a+56|0)>>2]&511)<<23|((HEAP32[(a+56|0)>>2]+1|0)&511)<<14);b=10;break;case 9:_genop(a,57|(HEAP32[(a+56|0)>>2]&511)<<23|((HEAP32[(a+56|0)>>2]+1|0)&511)<<14);b=10;break;case 10:d=HEAP32[(d+4|0)>>2];b=6;break;case 11:c=-1;b=14;break;case 12:_codegen(a,
HEAP32[(d|0)>>2],1);g=g+1|0;d=HEAP32[(d+4|0)>>2];b=3;break;case 13:c=g;b=14;break;case 14:return c;default:assert(0,"bad label: "+b)}}_gen_values.X=1;function _nosplat(f){var e;for(e=2;;)switch(e){case 2:var b,c;c=f;e=3;break;case 3:e=0!=(c|0)?4:7;break;case 4:e=63==(HEAP32[(HEAP32[(c|0)>>2]|0)>>2]|0)?5:6;break;case 5:b=0;e=8;break;case 6:c=HEAP32[(c+4|0)>>2];e=3;break;case 7:b=1;e=8;break;case 8:return b;default:assert(0,"bad label: "+e)}}
function _lv_idx(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g;b=f;a=e;d=HEAP32[(b+52|0)>>2];g=1;b=3;break;case 3:b=0!=(d|0)?4:7;break;case 4:b=((HEAP32[(d|0)>>2]&65535)<<16>>16|0)==(a<<16>>16|0)?5:6;break;case 5:c=g;b=8;break;case 6:g=g+1|0;d=HEAP32[(d+4|0)>>2];b=3;break;case 7:c=0;b=8;break;case 8:return c;default:assert(0,"bad label: "+b)}}
function _gen_vmassignment(f,e,b,c){var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j,l,k,n;d=f;g=e;h=b;i=c;l=j=0;a=0!=(HEAP32[(g|0)>>2]|0)?3:7;break;case 3:k=HEAP32[(g|0)>>2];j=0;a=4;break;case 4:a=0!=(k|0)?5:6;break;case 5:_genop(d,58|(HEAP32[(d+56|0)>>2]&511)<<23|(h&511)<<14|(j&127)<<7);_gen_assignment(d,HEAP32[(k|0)>>2],HEAP32[(d+56|0)>>2],0);j=j+1|0;k=HEAP32[(k+4|0)>>2];a=4;break;case 6:a=7;break;case 7:k=HEAP32[(g+4|0)>>2];a=0!=(k|0)?8:24;break;case 8:a=0!=(HEAP32[(k+4|0)>>2]|0)?9:13;break;case 9:n=
HEAP32[(HEAP32[(k+4|0)>>2]|0)>>2];a=10;break;case 10:a=0!=(n|0)?11:12;break;case 11:l=l+1|0;n=HEAP32[(n+4|0)>>2];a=10;break;case 12:a=13;break;case 13:a=0!=(i|0)?14:15;break;case 14:_genop(d,1|(HEAP32[(d+56|0)>>2]&511)<<23|(h&511)<<14);_push_(d);a=15;break;case 15:a=d+56|0;HEAP32[a>>2]=HEAP32[a>>2]-1|0;_genop(d,60|(HEAP32[(d+56|0)>>2]&511)<<23|(j&511)<<14|(l&127)<<7);j=1;a=0!=(HEAP32[(k|0)>>2]|0)?16:17;break;case 16:_gen_assignment(d,HEAP32[(k|0)>>2],HEAP32[(d+56|0)>>2],0);a=17;break;case 17:a=0!=
(HEAP32[(k+4|0)>>2]|0)?18:23;break;case 18:a=0!=(HEAP32[(HEAP32[(k+4|0)>>2]|0)>>2]|0)?19:23;break;case 19:k=HEAP32[(HEAP32[(k+4|0)>>2]|0)>>2];a=20;break;case 20:a=0!=(k|0)?21:22;break;case 21:_gen_assignment(d,HEAP32[(k|0)>>2],HEAP32[(d+56|0)>>2]+j|0,0);k=HEAP32[(k+4|0)>>2];j=j+1|0;a=20;break;case 22:a=23;break;case 23:a=24;break;case 24:return;default:assert(0,"bad label: "+a)}}_gen_vmassignment.X=1;
function _loop_break(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;b=0!=(HEAP32[(c+72|0)>>2]|0)?4:3;break;case 3:_codegen(c,a,0);_raise_error(c,__str15671|0);b=20;break;case 4:b=0!=(a|0)?5:6;break;case 5:_codegen(c,a,1);b=c+56|0;HEAP32[b>>2]=HEAP32[b>>2]-1|0;b=6;break;case 6:d=HEAP32[(c+72|0)>>2];b=7;break;case 7:b=3==(HEAP32[(d|0)>>2]|0)?8:9;break;case 8:_genop_peep(c,8388636,0);d=HEAP32[(d+24|0)>>2];b=7;break;case 9:b=10;break;case 10:b=4==(HEAP32[(d|0)>>2]|0)?11:12;break;case 11:d=HEAP32[(d+
24|0)>>2];b=10;break;case 12:b=0==(HEAP32[(d|0)>>2]|0)?13:18;break;case 13:b=(HEAP32[(c+76|0)>>2]|0)>(HEAP32[(HEAP32[(c+72|0)>>2]+20|0)>>2]|0)?14:15;break;case 14:_genop_peep(c,31|((HEAP32[(c+76|0)>>2]-HEAP32[(HEAP32[(c+72|0)>>2]+20|0)>>2]|0)&511)<<23,0);b=15;break;case 15:b=0!=(a|0)?16:17;break;case 16:_genop_peep(c,1|(HEAP32[(d+16|0)>>2]&511)<<23|(HEAP32[(c+56|0)>>2]&511)<<14,0);b=17;break;case 17:b=_new_label(c);_genop(c,23|((HEAP32[(d+12|0)>>2]+32767|0)&65535)<<7);HEAP32[(d+12|0)>>2]=b;b=19;break;
case 18:_genop(c,(HEAP32[(c+56|0)>>2]&511)<<23|16425);b=19;break;case 19:b=20;break;case 20:return;default:assert(0,"bad label: "+b)}}_loop_break.X=1;function _raise_error(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");_mrb_str_new_cstr(b,HEAP32[(f|0)>>2],e);var c=_new_lit(f,b);_genop(f,8388683|(c&65535)<<7);STACKTOP=b}
function _readint_float(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h,i,j,l;a=f;d=e;g=b;c=d;h=_strlen(d);h=c+h|0;i=0;c=43==(HEAP8[d]<<24>>24|0)?3:4;break;case 3:d=d+1|0;c=4;break;case 4:c=5;break;case 5:c=d>>>0<h>>>0?6:15;break;case 6:l=HEAP8[d];l=_tolower(l&255)&255;j=0;c=7;break;case 7:c=(j|0)<(g|0)?8:12;break;case 8:c=(HEAP8[_mrb_digitmap+j|0]<<24>>24|0)==(l<<24>>24|0)?9:10;break;case 9:i*=g|0;i+=j|0;c=12;break;case 10:c=11;break;case 11:j=j+1|0;c=7;break;case 12:c=(j|0)==(g|0)?13:14;break;
case 13:_codegen_error(a,__str14670|0);c=14;break;case 14:d=d+1|0;c=5;break;case 15:return i;default:assert(0,"bad label: "+c)}}_readint_float.X=1;
function _new_lit(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a,d,g;d=f;g=0;c=3;break;case 3:c=(g|0)<(HEAP32[(HEAP32[(d+100|0)>>2]+32|0)>>2]|0)?4:8;break;case 4:c=0!=(_mrb_obj_equal(HEAP32[(d|0)>>2],HEAP32[(HEAP32[(d+100|0)>>2]+12|0)>>2]+(g<<3)|0,e)|0)?5:6;break;
case 5:a=g;c=11;break;case 6:c=7;break;case 7:g=g+1|0;c=3;break;case 8:c=(HEAP32[(HEAP32[(d+100|0)>>2]+32|0)>>2]|0)==(HEAP32[(d+104|0)>>2]|0)?9:10;break;case 9:c=d+104|0;HEAP32[c>>2]=HEAP32[c>>2]<<1|0;c=_codegen_realloc(d,HEAP32[(HEAP32[(d+100|0)>>2]+12|0)>>2],HEAP32[(d+104|0)>>2]<<3|0);HEAP32[(HEAP32[(d+100|0)>>2]+12|0)>>2]=c;c=10;break;case 10:a=HEAP32[(HEAP32[(d+100|0)>>2]+12|0)>>2]+(HEAP32[(HEAP32[(d+100|0)>>2]+32|0)>>2]<<3)|0;g=e;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[g>>2];HEAP32[a+4>>2]=HEAP32[g+4>>2];a=HEAP32[(d+100|0)>>2]+32|0;g=HEAP32[a>>2];HEAP32[a>>2]=g+1|0;a=g;c=11;break;case 11:return d=a,STACKTOP=b,d;default:assert(0,"bad label: "+c)}}_new_lit.X=1;
function _mrb_float_value(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|6;HEAPF32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_fixnum_value760(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|3;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _scope_finish(f){var e;for(e=2;;)switch(e){case 2:var b,c,a;b=f;c=HEAP32[(b|0)>>2];a=HEAP32[(b+100|0)>>2];e=a+4|0;HEAP32[e>>2]&=-16711681;e=0!=(HEAP32[(b+88|0)>>2]|0)?3:7;break;case 3:e=_codegen_realloc(b,HEAP32[(b+88|0)>>2],HEAP32[(b+60|0)>>2]<<2|0);HEAP32[(a+8|0)>>2]=e;HEAP32[(a+28|0)>>2]=HEAP32[(b+60|0)>>2];e=0!=(HEAP32[(b+92|0)>>2]|0)?4:5;break;case 4:e=_codegen_realloc(b,HEAP32[(b+92|0)>>2],HEAP32[(b+60|0)>>2]<<1|0);HEAP32[(a+24|0)>>2]=e;e=6;break;case 5:HEAP32[(a+24|0)>>2]=0;e=6;break;
case 6:e=7;break;case 7:e=_codegen_realloc(b,HEAP32[(a+12|0)>>2],HEAP32[(a+32|0)>>2]<<3|0);HEAP32[(a+12|0)>>2]=e;e=_codegen_realloc(b,HEAP32[(a+16|0)>>2],HEAP32[(a+36|0)>>2]<<1|0);HEAP32[(a+16|0)>>2]=e;e=0!=(HEAP32[(b+80|0)>>2]|0)?8:9;break;case 8:HEAP32[(a+20|0)>>2]=HEAP32[(b+80|0)>>2];e=9;break;case 9:f=a;HEAP32[f>>2]=HEAP32[f>>2]&65535|(HEAP32[(b+112|0)>>2]&65535)<<16;a=a+4|0;HEAP32[a>>2]=HEAP32[a>>2]&-65536|HEAP32[(b+116|0)>>2]&65535;_mrb_gc_arena_restore(c,HEAP32[(b+120|0)>>2]);_mrb_pool_close(HEAP32[(b+
4|0)>>2]);return;default:assert(0,"bad label: "+e)}}_scope_finish.X=1;function _mrb_strerrno(){return 0}function _node_len(f){var e;for(e=2;;)switch(e){case 2:var b,c;b=f;c=0;e=3;break;case 3:e=0!=(b|0)?4:5;break;case 4:c=c+1|0;b=HEAP32[(b+4|0)>>2];e=3;break;case 5:return c;default:assert(0,"bad label: "+e)}}
function _attrsym(f,e){var b=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c,a;c=_mrb_sym2name_len(HEAP32[(f|0)>>2],e,b);a=_codegen_palloc(f,HEAP32[b>>2]+1|0);var d=HEAP32[b>>2];assert(0===d%1,"memcpy given "+d+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(a,c,d,1);HEAP8[a+HEAP32[b>>2]|0]=61;HEAP8[a+(HEAP32[b>>2]+1|0)|0]=0;c=_mrb_intern2(HEAP32[(f|0)>>2],a,HEAP32[b>>2]+1|0);STACKTOP=b;return c}
function _codegen_palloc(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=_mrb_pool_alloc(HEAP32[(c+4|0)>>2],e);b=0!=(a|0)?4:3;break;case 3:_codegen_error(c,__str18674|0);b=4;break;case 4:return a;default:assert(0,"bad label: "+b)}}
function _mrb_exc_new(f,e,b,c,a){var d=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=d+8;_mrb_obj_value798(d,b);_mrb_str_new(g,e,c,a);_mrb_funcall(f,e,d,__str761|0,1,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=HEAP32[g>>2],HEAP32[tempInt+4>>2]=HEAP32[g+4>>2],tempInt));STACKTOP=d}
function _mrb_obj_value798(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b,g;g=a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|HEAP32[g>>2]&255;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+
c)}}
function _mrb_exc_new3(f,e,b,c){var a=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=c,c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];d=a+8;_mrb_string_value(a,e,c);_mrb_obj_value798(d,b);_mrb_funcall(f,e,d,__str761|0,1,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=HEAP32[c>>2],HEAP32[tempInt+
4>>2]=HEAP32[c+4>>2],tempInt));STACKTOP=a}
function _exc_debug_info(f,e){var b=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d,g,h;c=b;var i,j=b+8,l=b+16;a=f;d=e;g=HEAP32[(a+20|0)>>2];h=HEAP32[(g+20|0)>>2];var k=a,n=d,r=_mrb_intern(a,__str34795|0);_mrb_fixnum_value817(c,(g-HEAP32[(a+24|0)>>2]|0)/44&-1);_mrb_obj_iv_set(k,n,r,c);g=g-44|0;c=3;break;case 3:c=g>>>0>=HEAP32[(a+24|0)>>2]>>>0?4:13;break;case 4:c=0!=(HEAP32[(g+4|0)>>2]|0)?5:12;break;
case 5:c=0!=(HEAP32[HEAP32[(g+4|0)>>2]>>2]>>>11&128|0)?12:6;break;case 6:i=HEAP32[(HEAP32[(g+4|0)>>2]+12|0)>>2];c=0!=(HEAP32[(i+20|0)>>2]|0)?7:11;break;case 7:c=0!=(HEAP32[(i+24|0)>>2]|0)?8:11;break;case 8:c=HEAP32[(i+8|0)>>2]>>>0<=h>>>0?9:11;break;case 9:c=h>>>0<(HEAP32[(i+8|0)>>2]+(HEAP32[(i+28|0)>>2]<<2)|0)>>>0?10:11;break;case 10:c=a;k=d;n=_mrb_intern(a,__str25786|0);_mrb_str_new_cstr(j,a,HEAP32[(i+20|0)>>2]);_mrb_obj_iv_set(c,k,n,j);c=a;k=d;n=_mrb_intern(a,__str26787|0);_mrb_fixnum_value817(l,
HEAP16[(HEAP32[(i+24|0)>>2]+((((h-HEAP32[(i+8|0)>>2]|0)/4&-1)-1|0)<<1)|0)>>1]<<16>>16);_mrb_obj_iv_set(c,k,n,l);c=13;break;case 11:c=12;break;case 12:h=HEAP32[(g+20|0)>>2];g=g-44|0;c=3;break;case 13:STACKTOP=b;return;default:assert(0,"bad label: "+c)}}_exc_debug_info.X=1;
function _mrb_raise(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=c+8,d=c+16;_mrb_str_new2(a,f,b);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[a>>2];HEAP32[c+4>>2]=HEAP32[a+4>>2];_mrb_exc_new3(d,f,e,c);_mrb_exc_raise(f,d);STACKTOP=c}
function _mrb_raisef(f,e,b){var c=STACKTOP;STACKTOP+=268;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h;a=c;var i=c+4,j=c+260;d=f;g=e;h=b;HEAP32[a>>2]=arguments[_mrb_raisef.length];h=_vsnprintf(i|0,256,h,HEAP32[a>>2]);a=0>(h|0)?3:4;break;case 3:h=0;a=4;break;case 4:a=d;_mrb_exc_new(j,d,g,i|0,h);_mrb_exc_raise(a,j);STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_name_error(f,e,b){var c=STACKTOP;STACKTOP+=308;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h,i=c,j=c+8;a=c+24;var l=c+28,k=c+284,n=c+292,r=c+300;d=f;g=e;h=b;HEAP32[a>>2]=arguments[_mrb_name_error.length];h=_vsnprintf(l|0,256,h,HEAP32[a>>2]);a=0>(h|0)?3:4;break;case 3:h=0;a=4;break;case 4:a=j|0;_mrb_str_new(k,d,l|0,h);l=a;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[l>>2]=HEAP32[k>>2];HEAP32[l+4>>2]=HEAP32[k+4>>2];k=j+8|0;_mrb_symbol_value807(n,g);g=k;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[n>>2];HEAP32[g+4>>2]=HEAP32[n+4>>2];n=d;j|=0;g=_mrb_class_obj_get(d,__str1762|0);_mrb_class_new_instance(r,n,1,j,g);j=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[j>>2]=HEAP32[r>>2];HEAP32[j+4>>2]=HEAP32[r+4>>2];_mrb_exc_raise(d,i);STACKTOP=c;return;
default:assert(0,"bad label: "+a)}}_mrb_name_error.X=1;
function _mrb_symbol_value807(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|4;HEAP16[(d|0)>>1]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_sprintf(f,e,b){var c=STACKTOP;STACKTOP+=260;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g=c,h=c+4;d=e;a=b;HEAP32[g>>2]=arguments[_mrb_sprintf.length];g=_vsnprintf(h|0,256,a,HEAP32[g>>2]);a=0>(g|0)?3:4;break;case 3:g=0;a=4;break;case 4:_mrb_str_new(f,d,h|0,g);STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_warn(f){var e=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");HEAP32[e>>2]=arguments[_mrb_warn.length];_printf(__str2763|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_vprintf(f,HEAP32[e>>2]);STACKTOP=e}
function _mrb_bug_errno(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d,g;a=f;d=e;c=0==(d|0)?3:4;break;case 3:c=a;_mrb_bug(__str4765|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));c=8;break;case 4:g=_mrb_strerrno(d);c=0!=(g|0)?5:6;break;case 5:c=a;var h=_strerror(d),i=g;_mrb_bug(__str5766|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<
STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=h,HEAP32[tempInt+8>>2]=i,tempInt));c=7;break;case 6:c=a;h=_strerror(d);i=d;_mrb_bug(__str6767|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=h,HEAP32[tempInt+8>>2]=i,tempInt));c=7;break;case 7:c=8;break;case 8:STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _sysexit_status(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];c=_mrb_intern(f,__str7768|0);_mrb_iv_get(b,f,e,c);c=HEAP32[(b|0)>>2];STACKTOP=b;return c}
function _make_exception(f,e,b,c,a){var d=STACKTOP;STACKTOP+=40;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g;for(g=2;;)switch(g){case 2:var h,i,j,l,k=d,n,r=d+8,t=d+16,p=d+24,q,v=d+32;h=e;i=b;j=c;l=a;_mrb_nil_value814(r);g=k;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[r>>2];HEAP32[g+4>>2]=HEAP32[r+4>>2];g=i;g=0==(g|0)?3:1==(g|0)?4:2==(g|0)||3==(g|0)?13:18;break;case 3:g=19;break;case 4:g=
0==(HEAP32[((j|0)+4|0)>>2]&255|0)?5:7;break;case 5:g=0!=(HEAP32[(j|0)>>2]|0)?7:6;break;case 6:g=19;break;case 7:g=0!=(l|0)?8:12;break;case 8:_mrb_check_string_type(t,h,j|0);g=k;r=t;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[r>>2];HEAP32[g+4>>2]=HEAP32[r+4>>2];g=0==(HEAP32[(k+4|0)>>2]&255|0)?9:10;break;case 9:g=0!=(HEAP32[(k|0)>>2]|0)?10:11;break;case 10:g=h;r=_mrb_class_obj_get(h,__str8769|0);_mrb_exc_new3(p,g,r,k);g=k;r=p;assert(!0,
"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[r>>2];HEAP32[g+4>>2]=HEAP32[r+4>>2];g=19;break;case 11:g=12;break;case 12:n=0;g=14;break;case 13:n=1;g=14;break;case 14:q=_mrb_intern(h,__str9770|0);g=0!=(_mrb_respond_to(h,j|0,q)|0)?15:16;break;case 15:_mrb_funcall_argv(v,h,j|0,q,n,j+8|0);g=k;r=v;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[r>>2];HEAP32[g+4>>2]=HEAP32[r+4>>2];g=17;break;case 16:g=
h;r=_mrb_class_obj_get(h,__str10771|0);_mrb_raise(g,r,__str11772|0);g=17;break;case 17:g=19;break;case 18:g=h;var r=_mrb_class_obj_get(h,__str12773|0),w=i;_mrb_raisef(g,r,__str13774|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=w,tempInt));g=19;break;case 19:g=0<(i|0)?20:25;break;case 20:g=0!=(_mrb_obj_is_kind_of(h,k,HEAP32[(h+596|0)>>2])|0)?22:21;break;case 21:g=h;r=_mrb_class_obj_get(h,__str10771|0);_mrb_raise(g,r,__str14775|0);g=22;
break;case 22:g=2<(i|0)?23:24;break;case 23:_set_backtrace(h,k,j+16|0);g=24;break;case 24:g=25;break;case 25:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[k>>2];HEAP32[f+4>>2]=HEAP32[k+4>>2];STACKTOP=d;return;default:assert(0,"bad label: "+g)}}_make_exception.X=1;
function _mrb_nil_value814(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _set_backtrace(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];a=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_funcall(c,f,e,__str33794|0,1,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<
STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=HEAP32[b>>2],HEAP32[tempInt+4>>2]=HEAP32[b+4>>2],tempInt));STACKTOP=c}function _mrb_make_exception(f,e,b,c){_make_exception(f,e,b,c,1)}function _mrb_sys_fail(f,e){var b=_mrb_class_obj_get(f,__str8769|0);_mrb_raise(f,b,e)}
function _mrb_init_exception(f){var e,b=_mrb_define_class(f,__str15776|0,HEAP32[(f+72|0)>>2]);e=b;HEAP32[(f+596|0)>>2]=b;_mrb_define_class_method(f,e,__str9770|0,224,8192);_mrb_define_method(f,e,__str9770|0,70,8192);_mrb_define_method(f,e,__str16777|0,130,8192);_mrb_define_method(f,e,__str17778|0,132,524288);_mrb_define_method(f,e,__str18779|0,406,0);_mrb_define_method(f,e,__str19780|0,84,0);_mrb_define_method(f,e,__str20781|0,240,0);e=_mrb_define_class(f,__str21782|0,HEAP32[(f+596|0)>>2]);HEAP32[(f+
600|0)>>2]=e;_mrb_define_class(f,__str8769|0,HEAP32[(f+600|0)>>2]);_mrb_define_class(f,__str8769|0,HEAP32[(f+600|0)>>2]);e=_mrb_define_class(f,__str22783|0,HEAP32[(f+596|0)>>2]);_mrb_define_class(f,__str23784|0,e)}_mrb_init_exception.X=1;function _scope_error(){for(;;)switch(2){case 2:throw _exit(1),"Reached an unreachable!";case 3:return;default:assert(0,"bad label: 2")}}
function _mrb_exc_raise(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a;a=f;HEAP32[(a+48|0)>>2]=HEAP32[(e|0)>>2];_exc_debug_info(a,HEAP32[(a+48|0)>>2]);c=0!=(HEAP32[(a|0)>>2]|0)?4:3;break;case 3:throw _abort(),"Reached an unreachable!";case 4:throw _longjmp(HEAP32[(a|
0)>>2]|0,1),"Reached an unreachable!";case 5:STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_bug(f){var e=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");for(assert(STACKTOP<STACK_MAX,"Ran out of stack");;)switch(2){case 2:var b=e,e=f;HEAP32[b>>2]=arguments[_mrb_bug.length];_printf(__str3764|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_vprintf(e,HEAP32[b>>2]);_exit(1);throw"Reached an unreachable!";case 3:STACKTOP=e;return;default:assert(0,"bad label: 2")}}
function _exc_exception(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+8,i=c+16;d=e;a=0==(_mrb_get_args(d,__str32793|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=h,tempInt))|0)?
3:4;break;case 3:var a=f,j=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[j>>2];HEAP32[a+4>>2]=HEAP32[j+4>>2];a=7;break;case 4:a=0!=(_mrb_obj_equal(d,b,h)|0)?5:6;break;case 5:a=f;j=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[j>>2];HEAP32[a+4>>2]=HEAP32[j+4>>2];a=7;break;case 6:_mrb_obj_clone(i,d,b);a=g;j=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[j>>2];HEAP32[a+4>>2]=HEAP32[j+4>>2];a=d;j=_mrb_intern(d,__str24785|0);_mrb_iv_set(a,g,j,h);a=f;j=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[j>>2];HEAP32[a+4>>2]=HEAP32[j+4>>2];a=7;break;case 7:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _exc_initialize(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c;d=e;a=1==(_mrb_get_args(d,__str32793|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt))|0)?3:4;break;case 3:var a=
d,h=_mrb_intern(d,__str24785|0);_mrb_iv_set(a,b,h,g);a=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _exc_equal(f,e,b){var c=STACKTOP;STACKTOP+=40;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+8,i,j=c+16,l=c+24,k=c+32;d=e;i=_mrb_intern(d,__str24785|0);_mrb_get_args(d,__str31792|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=g,tempInt));a=0!=(_mrb_obj_equal(d,b,g)|0)?3:4;break;case 3:_mrb_true_value815(f);a=13;break;case 4:var a=_mrb_obj_class(d,b),n=_mrb_obj_class(d,g),a=(a|0)!=(n|0)?5:9;break;case 5:a=d;n=_mrb_intern(d,__str19780|0);a=0!=(_mrb_respond_to(a,g,n)|0)?6:7;break;case 6:_mrb_funcall(j,d,g,__str19780|0,0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=h;n=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[n>>2];HEAP32[a+4>>2]=HEAP32[n+4>>2];a=8;break;case 7:_mrb_false_value816(f);a=13;break;case 8:a=10;break;case 9:_mrb_attr_get(l,d,g,i);a=h;n=l;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[n>>2];HEAP32[a+4>>2]=HEAP32[n+4>>2];a=10;break;case 10:a=d;_mrb_attr_get(k,d,b,i);a=0!=(_mrb_equal(a,k,h)|0)?12:11;break;case 11:_mrb_false_value816(f);a=13;break;case 12:_mrb_true_value815(f);a=13;break;case 13:STACKTOP=c;return;default:assert(0,
"bad label: "+a)}}_exc_equal.X=1;
function _exc_to_s(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,a=d=e,h=_mrb_intern(d,__str24785|0);_mrb_attr_get(g,a,b,h);a=0==(HEAP32[(g+4|0)>>2]&255|0)?3:5;break;case 3:a=0!=(HEAP32[(g|0)>>2]|0)?5:4;break;case 4:a=d;h=_mrb_obj_classname(d,
b);_mrb_str_new2(f,a,h);a=6;break;case 5:a=f;h=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[h>>2];HEAP32[a+4>>2]=HEAP32[h+4>>2];a=6;break;case 6:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _exc_message(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_funcall(f,e,b,__str18779|0,0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));STACKTOP=c}
function _exc_inspect(f,e,b){var c=STACKTOP;STACKTOP+=152;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+8,i=c+16,j=c+24,l=c+32,k=c+40,a=c+48,n=c+56,r=c+64,t=c+72,p=c+80,q=c+88,v=c+96,w=c+104,m=c+112,x=c+120,s=c+128,y=c+136,B=c+144,A=d=e,G=_mrb_intern(d,__str24785|0);_mrb_attr_get(l,
A,b,G);A=h;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[A>>2]=HEAP32[l>>2];HEAP32[A+4>>2]=HEAP32[l+4>>2];l=d;A=_mrb_intern(d,__str25786|0);_mrb_attr_get(k,l,b,A);l=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[l>>2]=HEAP32[k>>2];HEAP32[l+4>>2]=HEAP32[k+4>>2];k=d;l=_mrb_intern(d,__str26787|0);_mrb_attr_get(a,k,b,l);k=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[k>>2]=HEAP32[a>>2];HEAP32[k+4>>2]=HEAP32[a+4>>2];a=0==(HEAP32[(i+4|0)>>2]&255|0)?3:4;break;case 3:a=0!=(HEAP32[(i|0)>>2]|0)?4:15;break;case 4:a=0==(HEAP32[(j+4|0)>>2]&255|0)?5:6;break;case 5:a=0!=(HEAP32[(j|0)>>2]|0)?6:15;break;case 6:a=g;k=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[k>>2];HEAP32[a+4>>2]=HEAP32[k+4>>2];_mrb_str_cat2(n,d,g,__str27788|0);_mrb_str_append(r,d,g,j);_mrb_str_cat2(t,d,g,__str28789|0);a=0==(HEAP32[(h+
4|0)>>2]&255|0)?7:8;break;case 7:a=0!=(HEAP32[(h|0)>>2]|0)?8:10;break;case 8:a=0<(HEAP32[(HEAP32[(h|0)>>2]+12|0)>>2]|0)?9:10;break;case 9:_mrb_str_append(p,d,g,h);_mrb_str_cat2(q,d,g,__str29790|0);a=10;break;case 10:a=d;k=_mrb_obj_classname(d,b);_mrb_str_cat2(v,a,g,k);a=0==(HEAP32[(h+4|0)>>2]&255|0)?11:12;break;case 11:a=0!=(HEAP32[(h|0)>>2]|0)?12:14;break;case 12:a=0<(HEAP32[(HEAP32[(h|0)>>2]+12|0)>>2]|0)?13:14;break;case 13:_mrb_str_cat2(w,d,g,__str30791|0);a=14;break;case 14:a=21;break;case 15:a=
d;k=_mrb_obj_classname(d,b);_mrb_str_new2(m,a,k);a=g;k=m;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[k>>2];HEAP32[a+4>>2]=HEAP32[k+4>>2];a=0==(HEAP32[(h+4|0)>>2]&255|0)?16:17;break;case 16:a=0!=(HEAP32[(h|0)>>2]|0)?17:19;break;case 17:a=0<(HEAP32[(HEAP32[(h|0)>>2]+12|0)>>2]|0)?18:19;break;case 18:_mrb_str_cat2(x,d,g,__str28789|0);_mrb_str_append(s,d,g,h);a=20;break;case 19:_mrb_str_cat2(y,d,g,__str28789|0);a=d;k=_mrb_obj_classname(d,b);
_mrb_str_cat2(B,a,g,k);a=20;break;case 20:a=21;break;case 21:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[g>>2];HEAP32[f+4>>2]=HEAP32[g+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_exc_inspect.X=1;
function _mrb_true_value815(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]=HEAP32[b>>2]&-256|2;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_false_value816(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_fixnum_value817(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|3;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_realloc(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h;a=f;d=e;g=b;h=FUNCTION_TABLE[HEAP32[(a+4|0)>>2]](a,d,g,HEAP32[(a+604|0)>>2]);c=0!=(h|0)?6:3;break;case 3:c=0<g>>>0?4:6;break;case 4:c=0!=(HEAP32[(a+128|0)>>2]|0)?5:6;break;case 5:_mrb_garbage_collect(a);h=FUNCTION_TABLE[HEAP32[(a+4|0)>>2]](a,d,g,HEAP32[(a+604|0)>>2]);c=6;break;case 6:return h;default:assert(0,"bad label: "+c)}}
function _mrb_garbage_collect(f){var e;for(e=2;;)switch(e){case 2:var b,c;b=f;c=-1;e=0!=(HEAP32[(b+580|0)>>2]|0)?3:4;break;case 3:e=13;break;case 4:e=2==(HEAP32[(b+548|0)>>2]|0)?5:9;break;case 5:e=6;break;case 6:e=0!=(HEAP32[(b+548|0)>>2]|0)?7:8;break;case 7:_incremental_gc(b,c);e=6;break;case 8:e=9;break;case 9:e=10;break;case 10:_incremental_gc(b,c);e=11;break;case 11:e=0!=(HEAP32[(b+548|0)>>2]|0)?10:12;break;case 12:HEAP32[(b+568|0)>>2]=Math.floor((HEAP32[(b+564|0)>>2]>>>0)/100)*HEAP32[(b+572|
0)>>2]|0;e=13;break;case 13:return;default:assert(0,"bad label: "+e)}}function _mrb_malloc(f,e){return _mrb_realloc(f,0,e)}function _mrb_calloc(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h,i;a=f;d=e;g=b;h=0;c=d>>>0<=Math.floor(4294967295/(g>>>0))>>>0?3:7;break;case 3:i=d*g|0;h=_mrb_realloc(a,0,i);c=0!=(h|0)?4:6;break;case 4:c=0<i>>>0?5:6;break;case 5:_memset(h,0,i,1);c=6;break;case 6:c=7;break;case 7:return h;default:assert(0,"bad label: "+c)}}
function _mrb_free(f,e){return FUNCTION_TABLE[HEAP32[(f+4|0)>>2]](f,e,0,HEAP32[(f+604|0)>>2])}function _mrb_init_heap(f){HEAP32[(f+128|0)>>2]=0;HEAP32[(f+136|0)>>2]=0;_add_heap(f);HEAP32[(f+572|0)>>2]=200;HEAP32[(f+576|0)>>2]=200}
function _add_heap(f){var e;for(e=2;;)switch(e){case 2:var b,c,a,d,g;b=f;c=_mrb_calloc(b,1,24596);g=0;a=c+20|0;d=a+24576|0;e=3;break;case 3:e=a>>>0<d>>>0?4:6;break;case 4:e=a|0;HEAP32[e>>2]=HEAP32[e>>2]&-256|1;HEAP32[((a|0)+12|0)>>2]=g;g=a|0;e=5;break;case 5:a=a+24|0;e=3;break;case 6:HEAP32[(c|0)>>2]=g;_link_heap_page(b,c);_link_free_heap_page(b,c);return;default:assert(0,"bad label: "+e)}}_add_heap.X=1;
function _mrb_free_heap(f){var e;for(e=2;;)switch(e){case 2:var b,c,a,d,g;b=f;c=HEAP32[(b+128|0)>>2];e=3;break;case 3:e=0!=(c|0)?4:11;break;case 4:a=c;c=HEAP32[(c+8|0)>>2];d=a+20|0;g=d+24576|0;e=5;break;case 5:e=d>>>0<g>>>0?6:10;break;case 6:e=1!=(HEAP32[(d|0)>>2]&255|0)?7:8;break;case 7:_obj_free(b,d|0);e=8;break;case 8:e=9;break;case 9:d=d+24|0;e=5;break;case 10:_mrb_free(b,a);e=3;break;case 11:return;default:assert(0,"bad label: "+e)}}_mrb_free_heap.X=1;
function _unlink_free_heap_page(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;b=0!=(HEAP32[(a+16|0)>>2]|0)?3:4;break;case 3:HEAP32[(HEAP32[(a+16|0)>>2]+12|0)>>2]=HEAP32[(a+12|0)>>2];b=4;break;case 4:b=0!=(HEAP32[(a+12|0)>>2]|0)?5:6;break;case 5:HEAP32[(HEAP32[(a+12|0)>>2]+16|0)>>2]=HEAP32[(a+16|0)>>2];b=6;break;case 6:b=(HEAP32[(c+136|0)>>2]|0)==(a|0)?7:8;break;case 7:HEAP32[(c+136|0)>>2]=HEAP32[(a+12|0)>>2];b=8;break;case 8:HEAP32[(a+16|0)>>2]=0;HEAP32[(a+12|0)>>2]=0;return;default:assert(0,
"bad label: "+b)}}_unlink_free_heap_page.X=1;function _add_gray_list(f,e){HEAP32[e>>2]&=-1793;HEAP32[(e+8|0)>>2]=HEAP32[(f+556|0)>>2];HEAP32[(f+556|0)>>2]=e}function _mrb_gc_arena_save(f){return HEAP32[(f+544|0)>>2]}function _mrb_gc_arena_restore(f,e){HEAP32[(f+544|0)>>2]=e}
function _mrb_write_barrier(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;b=0!=(HEAP32[a>>2]>>>8&4|0)?4:3;break;case 3:b=5;break;case 4:b=a;HEAP32[b>>2]&=-1793;HEAP32[(a+8|0)>>2]=HEAP32[(c+560|0)>>2];HEAP32[(c+560|0)>>2]=a;b=5;break;case 5:return;default:assert(0,"bad label: "+b)}}
function _obj_free(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g;c=f;a=e;b=HEAP32[a>>2]&255;b=2==(b|0)||3==(b|0)||4==(b|0)||6==(b|0)?3:9==(b|0)?4:10==(b|0)||11==(b|0)||13==(b|0)?5:24==(b|0)?6:15==(b|0)?9:16==(b|0)?13:17==(b|0)?14:18==(b|0)?18:20==(b|0)?19:25==(b|0)?20:23;break;case 3:b=25;break;case 4:_mrb_gc_free_iv(c,a);b=24;break;case 5:_mrb_gc_free_mt(c,a);_mrb_gc_free_iv(c,a);b=24;break;case 6:d=a;b=0>(HEAP32[(d+20|0)>>2]|0)?7:8;break;case 7:_mrb_free(c,HEAP32[(d+12|0)>>2]);HEAP32[(d+12|
0)>>2]=0;b=8;break;case 8:b=24;break;case 9:b=0!=(HEAP32[a>>2]>>>11&256|0)?10:11;break;case 10:_mrb_ary_decref(c,HEAP32[(a+16|0)>>2]);b=12;break;case 11:_mrb_free(c,HEAP32[(a+20|0)>>2]);b=12;break;case 12:b=24;break;case 13:_mrb_gc_free_iv(c,a);_mrb_gc_free_ht(c,a);b=24;break;case 14:b=0!=(HEAP32[a>>2]>>>11&256|0)?15:16;break;case 15:_mrb_str_decref(c,HEAP32[(a+16|0)>>2]);b=17;break;case 16:_mrb_free(c,HEAP32[(a+20|0)>>2]);b=17;break;case 17:b=24;break;case 18:_mrb_free(c,HEAP32[(a+12|0)>>2]);b=24;
break;case 19:_mrb_free(c,HEAP32[(a+16|0)>>2]);b=24;break;case 20:g=a;b=0!=(HEAP32[(HEAP32[(g+16|0)>>2]+4|0)>>2]|0)?21:22;break;case 21:FUNCTION_TABLE[HEAP32[(HEAP32[(g+16|0)>>2]+4|0)>>2]](c,HEAP32[(g+20|0)>>2]);b=22;break;case 22:_mrb_gc_free_iv(c,a);b=24;break;case 23:b=24;break;case 24:b=a;HEAP32[b>>2]=HEAP32[b>>2]&-256|1;b=25;break;case 25:return;default:assert(0,"bad label: "+b)}}_obj_free.X=1;
function _mrb_gc_protect(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a;a=f;c=8>=(HEAP32[(e+4|0)>>2]&255|0)?3:4;break;case 3:c=5;break;case 4:_gc_protect(a,HEAP32[(e|0)>>2]);c=5;break;case 5:STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _gc_protect(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;b=100<(HEAP32[(c+544|0)>>2]|0)?3:4;break;case 3:HEAP32[(c+544|0)>>2]=96;b=c;var d=_mrb_class_obj_get(c,__str9827|0);_mrb_raise(b,d,__str10828|0);b=4;break;case 4:b=c+544|0;d=HEAP32[b>>2];HEAP32[b>>2]=d+1|0;HEAP32[((c+144|0)+(d<<2)|0)>>2]=a;return;default:assert(0,"bad label: "+b)}}
function _mrb_obj_alloc(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h;a=f;d=e;g=b;c=HEAP32[(a+568|0)>>2]>>>0<HEAP32[(a+140|0)>>2]>>>0?3:4;break;case 3:_mrb_incremental_gc(a);c=4;break;case 4:c=0==(HEAP32[(a+136|0)>>2]|0)?5:6;break;case 5:_add_heap(a);c=6;break;case 6:h=HEAP32[(HEAP32[(a+136|0)>>2]|0)>>2];HEAP32[(HEAP32[(a+136|0)>>2]|0)>>2]=HEAP32[(h+12|0)>>2];c=0==(HEAP32[(HEAP32[(a+136|0)>>2]|0)>>2]|0)?7:8;break;case 7:_unlink_free_heap_page(a,HEAP32[(a+136|0)>>2]);c=8;break;case 8:return f=
a+140|0,HEAP32[f>>2]=HEAP32[f>>2]+1|0,_gc_protect(a,h),f=h,assert(!0,"memcpy given 24 bytes to copy. Problem with quantum=1 corrections perhaps?"),HEAP32[f>>2]=HEAP32[(_mrb_obj_alloc_RVALUE_zero|0)>>2],HEAP32[f+4>>2]=HEAP32[(_mrb_obj_alloc_RVALUE_zero|0)+4>>2],HEAP32[f+8>>2]=HEAP32[(_mrb_obj_alloc_RVALUE_zero|0)+8>>2],HEAP32[f+12>>2]=HEAP32[(_mrb_obj_alloc_RVALUE_zero|0)+12>>2],HEAP32[f+16>>2]=HEAP32[(_mrb_obj_alloc_RVALUE_zero|0)+16>>2],HEAP32[f+20>>2]=HEAP32[(_mrb_obj_alloc_RVALUE_zero|0)+20>>2],
f=h,HEAP32[f>>2]=HEAP32[f>>2]&-256|d&255,HEAP32[(h+4|0)>>2]=g,d=h,HEAP32[d>>2]=HEAP32[d>>2]&-1793|(HEAP32[(a+552|0)>>2]&7)<<8,h;default:assert(0,"bad label: "+c)}}_mrb_obj_alloc.X=1;
function _mrb_incremental_gc(f){var e;for(e=2;;)switch(e){case 2:var b,c,a;b=f;a=c=0;e=0!=(HEAP32[(b+580|0)>>2]|0)?3:4;break;case 3:e=14;break;case 4:c=10*HEAP32[(b+576|0)>>2]|0;e=5;break;case 5:e=a>>>0<c>>>0?6:9;break;case 6:e=_incremental_gc(b,c);a=a+e|0;e=0==(HEAP32[(b+548|0)>>2]|0)?7:8;break;case 7:e=9;break;case 8:e=5;break;case 9:e=0==(HEAP32[(b+548|0)>>2]|0)?10:13;break;case 10:HEAP32[(b+568|0)>>2]=Math.floor((HEAP32[(b+564|0)>>2]>>>0)/100)*HEAP32[(b+572|0)>>2]|0;e=1024>HEAP32[(b+568|0)>>2]>>>
0?11:12;break;case 11:HEAP32[(b+568|0)>>2]=1024;e=12;break;case 12:e=14;break;case 13:HEAP32[(b+568|0)>>2]=HEAP32[(b+140|0)>>2]+1024|0;e=14;break;case 14:return;default:assert(0,"bad label: "+e)}}_mrb_incremental_gc.X=1;function _mrb_gc_mark(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;b=0==(a|0)?3:4;break;case 3:b=7;break;case 4:b=0!=(HEAP32[a>>2]>>>8&3|0)?6:5;break;case 5:b=7;break;case 6:_add_gray_list(c,a);b=7;break;case 7:return;default:assert(0,"bad label: "+b)}}
function _incremental_gc(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g;a=f;d=e;b=HEAP32[(a+548|0)>>2];b=0==(b|0)?3:1==(b|0)?4:2==(b|0)?7:10;break;case 3:_root_scan_phase(a);HEAP32[(a+548|0)>>2]=1;HEAP32[(a+552|0)>>2]^=3;c=0;b=11;break;case 4:b=0!=(HEAP32[(a+556|0)>>2]|0)?5:6;break;case 5:c=_incremental_marking_phase(a,d);b=11;break;case 6:_final_marking_phase(a);_prepare_incremental_sweep(a);c=0;b=11;break;case 7:g=_incremental_sweep_phase(a,d);b=0==(g|0)?8:9;break;case 8:HEAP32[(a+548|0)>>2]=
0;b=9;break;case 9:c=g;b=11;break;case 10:c=0;b=11;break;case 11:return c;default:assert(0,"bad label: "+b)}}_incremental_gc.X=1;
function _mrb_field_write_barrier(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g;a=f;d=e;g=b;c=0!=(HEAP32[d>>2]>>>8&4|0)?4:3;break;case 3:c=9;break;case 4:c=0!=(HEAP32[g>>2]>>>8&3|0)?6:5;break;case 5:c=9;break;case 6:c=1==(HEAP32[(a+548|0)>>2]|0)?7:8;break;case 7:_add_gray_list(a,g);c=9;break;case 8:c=d;HEAP32[c>>2]=HEAP32[c>>2]&-1793|(HEAP32[(a+552|0)>>2]&7)<<8;c=9;break;case 9:return;default:assert(0,"bad label: "+c)}}
function _mrb_init_gc(f){var e;e=_mrb_define_module(f,__str818|0);_mrb_define_class_method(f,e,__str1819|0,312,0);_mrb_define_class_method(f,e,__str2820|0,316,0);_mrb_define_class_method(f,e,__str3821|0,318,0);_mrb_define_class_method(f,e,__str4822|0,342,0);_mrb_define_class_method(f,e,__str5823|0,76,524288);_mrb_define_class_method(f,e,__str6824|0,100,0);_mrb_define_class_method(f,e,__str7825|0,392,524288)}
function _gc_start(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_garbage_collect(e);_mrb_nil_value855(f);STACKTOP=c}
function _gc_enable(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(b=2;;)switch(b){case 2:b=e;a=HEAP32[(b+580|0)>>2];HEAP32[(b+580|0)>>2]=0;b=0!=(a|0)?3:4;break;case 3:_mrb_true_value857(f);b=5;break;case 4:_mrb_false_value858(f);b=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+
b)}}
function _gc_disable(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(b=2;;)switch(b){case 2:b=e;a=HEAP32[(b+580|0)>>2];HEAP32[(b+580|0)>>2]=1;b=0!=(a|0)?3:4;break;case 3:_mrb_true_value857(f);b=5;break;case 4:_mrb_false_value858(f);b=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+b)}}
function _gc_interval_ratio_get(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_fixnum_value856(f,HEAP32[(e+572|0)>>2]);STACKTOP=c}
function _gc_interval_ratio_set(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str8826|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));HEAP32[(e+572|0)>>2]=HEAP32[c>>2];_mrb_nil_value855(f);STACKTOP=
c}function _gc_step_ratio_get(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_fixnum_value856(f,HEAP32[(e+576|0)>>2]);STACKTOP=c}
function _gc_step_ratio_set(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str8826|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));HEAP32[(e+576|0)>>2]=HEAP32[c>>2];_mrb_nil_value855(f);STACKTOP=
c}function _mrb_nil_value855(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _prepare_incremental_sweep(f){HEAP32[(f+548|0)>>2]=2;HEAP32[(f+132|0)>>2]=HEAP32[(f+128|0)>>2];HEAP32[(f+564|0)>>2]=HEAP32[(f+140|0)>>2]}
function _unlink_heap_page(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;b=0!=(HEAP32[(a+4|0)>>2]|0)?3:4;break;case 3:HEAP32[(HEAP32[(a+4|0)>>2]+8|0)>>2]=HEAP32[(a+8|0)>>2];b=4;break;case 4:b=0!=(HEAP32[(a+8|0)>>2]|0)?5:6;break;case 5:HEAP32[(HEAP32[(a+8|0)>>2]+4|0)>>2]=HEAP32[(a+4|0)>>2];b=6;break;case 6:b=(HEAP32[(c+128|0)>>2]|0)==(a|0)?7:8;break;case 7:HEAP32[(c+128|0)>>2]=HEAP32[(a+8|0)>>2];b=8;break;case 8:HEAP32[(a+4|0)>>2]=0;HEAP32[(a+8|0)>>2]=0;return;default:assert(0,"bad label: "+
b)}}_unlink_heap_page.X=1;function _link_free_heap_page(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;HEAP32[(a+12|0)>>2]=HEAP32[(c+136|0)>>2];b=0!=(HEAP32[(c+136|0)>>2]|0)?3:4;break;case 3:HEAP32[(HEAP32[(c+136|0)>>2]+16|0)>>2]=a;b=4;break;case 4:HEAP32[(c+136|0)>>2]=a;return;default:assert(0,"bad label: "+b)}}
function _mrb_fixnum_value856(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|3;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_true_value857(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]=HEAP32[b>>2]&-256|2;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_false_value858(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _root_scan_phase(f){var e;for(e=2;;)switch(e){case 2:var b,c,a,d,g,h,i;b=f;HEAP32[(b+556|0)>>2]=0;HEAP32[(b+560|0)>>2]=0;_mrb_gc_mark_gv(b);c=0;d=HEAP32[(b+544|0)>>2];e=3;break;case 3:e=(c|0)<(d|0)?4:6;break;case 4:_mrb_gc_mark(b,HEAP32[((b+144|0)+(c<<2)|0)>>2]);e=5;break;case 5:c=c+1|0;e=3;break;case 6:_mrb_gc_mark(b,HEAP32[(b+72|0)>>2]);_mrb_gc_mark(b,HEAP32[(b+48|0)>>2]);d=(HEAP32[(b+8|0)>>2]-HEAP32[(b+12|0)>>2]|0)/8&-1;e=0!=(HEAP32[(b+20|0)>>2]|0)?7:8;break;case 7:d=d+HEAP32[(HEAP32[(b+
20|0)>>2]+12|0)>>2]|0;e=8;break;case 8:e=(HEAP32[(b+12|0)>>2]+(d<<3)|0)>>>0>HEAP32[(b+16|0)>>2]>>>0?9:10;break;case 9:d=(HEAP32[(b+16|0)>>2]-HEAP32[(b+12|0)>>2]|0)/8&-1;e=10;break;case 10:c=0;e=11;break;case 11:e=(c|0)<(d|0)?12:18;break;case 12:e=13;break;case 13:e=9<=(HEAP32[((HEAP32[(b+12|0)>>2]+(c<<3)|0)+4|0)>>2]&255|0)?14:15;break;case 14:_mrb_gc_mark(b,HEAP32[(HEAP32[(b+12|0)>>2]+(c<<3)|0)>>2]);e=15;break;case 15:e=16;break;case 16:e=17;break;case 17:c=c+1|0;e=11;break;case 18:e=0!=(HEAP32[(b+
20|0)>>2]|0)?19:20;break;case 19:var j=HEAP32[(HEAP32[(b+20|0)>>2]+36|0)>>2];e=21;break;case 20:j=0;e=21;break;case 21:d=j;c=0;e=22;break;case 22:e=(c|0)<(d|0)?23:25;break;case 23:_mrb_gc_mark(b,HEAP32[(HEAP32[(b+40|0)>>2]+(c<<2)|0)>>2]);e=24;break;case 24:c=c+1|0;e=22;break;case 25:g=HEAP32[(b+24|0)>>2];e=26;break;case 26:e=g>>>0<=HEAP32[(b+20|0)>>2]>>>0?27:31;break;case 27:e=0!=(g|0)?29:28;break;case 28:e=30;break;case 29:_mrb_gc_mark(b,HEAP32[(g+40|0)>>2]);_mrb_gc_mark(b,HEAP32[(g+4|0)>>2]);_mrb_gc_mark(b,
HEAP32[(g+28|0)>>2]);e=30;break;case 30:g=g+44|0;e=26;break;case 31:e=0!=(HEAP32[(b+56|0)>>2]|0)?32:49;break;case 32:h=HEAP32[(b+60|0)>>2];e=h>>>0>HEAP32[(b+64|0)>>2]>>>0?33:34;break;case 33:h=HEAP32[(b+64|0)>>2];e=34;break;case 34:c=0;e=35;break;case 35:e=c>>>0<h>>>0?36:48;break;case 36:i=HEAP32[(HEAP32[(b+56|0)>>2]+(c<<2)|0)>>2];e=0!=(i|0)?38:37;break;case 37:e=47;break;case 38:a=0;e=39;break;case 39:e=(a|0)<(HEAP32[(i+32|0)>>2]|0)?40:46;break;case 40:e=41;break;case 41:e=9<=(HEAP32[((HEAP32[(i+
12|0)>>2]+(a<<3)|0)+4|0)>>2]&255|0)?42:43;break;case 42:_mrb_gc_mark(b,HEAP32[(HEAP32[(i+12|0)>>2]+(a<<3)|0)>>2]);e=43;break;case 43:e=44;break;case 44:e=45;break;case 45:a=a+1|0;e=39;break;case 46:e=47;break;case 47:c=c+1|0;e=35;break;case 48:e=49;break;case 49:return;default:assert(0,"bad label: "+e)}}_root_scan_phase.X=1;
function _incremental_marking_phase(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;d=0;b=3;break;case 3:if(0!=(HEAP32[(c+556|0)>>2]|0))b=4;else{var g=0;b=5}break;case 4:g=d>>>0<a>>>0;b=5;break;case 5:b=g?6:7;break;case 6:b=_gc_gray_mark(c,HEAP32[(c+556|0)>>2]);d=d+b|0;b=3;break;case 7:return d;default:assert(0,"bad label: "+b)}}
function _final_marking_phase(f){var e;for(e=2;;)switch(e){case 2:var b;b=f;e=3;break;case 3:e=0!=(HEAP32[(b+556|0)>>2]|0)?4:5;break;case 4:_gc_mark_children(b,HEAP32[(b+556|0)>>2]);e=3;break;case 5:HEAP32[(b+556|0)>>2]=HEAP32[(b+560|0)>>2];HEAP32[(b+560|0)>>2]=0;e=6;break;case 6:e=0!=(HEAP32[(b+556|0)>>2]|0)?7:8;break;case 7:_gc_mark_children(b,HEAP32[(b+556|0)>>2]);e=6;break;case 8:return;default:assert(0,"bad label: "+e)}}
function _incremental_sweep_phase(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h,i,j,l,k;c=f;a=e;d=HEAP32[(c+132|0)>>2];g=0;b=3;break;case 3:if(0!=(d|0))b=4;else{var n=0;b=5}break;case 4:n=g>>>0<a>>>0;b=5;break;case 5:b=n?6:23;break;case 6:h=d+20|0;i=h+24576|0;j=0;l=1;k=0==(HEAP32[(d|0)>>2]|0)&1;b=7;break;case 7:b=h>>>0<i>>>0?8:15;break;case 8:b=0!=(HEAP32[(h|0)>>2]>>>8&7&(HEAP32[(c+552|0)>>2]^3)&3|0)?10:9;break;case 9:b=1==(HEAP32[(h|0)>>2]&255|0)?10:13;break;case 10:b=1!=(HEAP32[(h|0)>>2]&
255|0)?11:12;break;case 11:_obj_free(c,h|0);HEAP32[((h|0)+12|0)>>2]=HEAP32[(d|0)>>2];HEAP32[(d|0)>>2]=h;j=j+1|0;b=12;break;case 12:b=14;break;case 13:l=h|0;HEAP32[l>>2]=HEAP32[l>>2]&-1793|(HEAP32[(c+552|0)>>2]&7)<<8;l=0;b=14;break;case 14:h=h+24|0;b=7;break;case 15:b=0!=(l|0)?16:18;break;case 16:b=1024>j>>>0?17:18;break;case 17:b=HEAP32[(d+8|0)>>2];_unlink_heap_page(c,d);_unlink_free_heap_page(c,d);_mrb_free(c,d);d=b;b=22;break;case 18:b=0!=(k|0)?19:21;break;case 19:b=0<j>>>0?20:21;break;case 20:_link_free_heap_page(c,
d);b=21;break;case 21:d=HEAP32[(d+8|0)>>2];b=22;break;case 22:g=g+1024|0;b=c+140|0;HEAP32[b>>2]=HEAP32[b>>2]-j|0;b=c+564|0;HEAP32[b>>2]=HEAP32[b>>2]-j|0;b=3;break;case 23:return HEAP32[(c+132|0)>>2]=d,g;default:assert(0,"bad label: "+b)}}_incremental_sweep_phase.X=1;
function _link_heap_page(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;HEAP32[(a+8|0)>>2]=HEAP32[(c+128|0)>>2];b=0!=(HEAP32[(c+128|0)>>2]|0)?3:4;break;case 3:HEAP32[(HEAP32[(c+128|0)>>2]+4|0)>>2]=a;b=4;break;case 4:HEAP32[(c+128|0)>>2]=a;return;default:assert(0,"bad label: "+b)}}
function _gc_mark_children(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h,i,j,l,k,n,r;c=f;b=a=e;HEAP32[b>>2]=HEAP32[b>>2]&-1793|1024;HEAP32[(c+556|0)>>2]=HEAP32[(a+8|0)>>2];_mrb_gc_mark(c,HEAP32[(a+4|0)>>2]);b=HEAP32[a>>2]&255;b=12==(b|0)?3:10==(b|0)||11==(b|0)||13==(b|0)?4:9==(b|0)||25==(b|0)?5:14==(b|0)?6:24==(b|0)?7:15==(b|0)?18:16==(b|0)?27:17==(b|0)?28:18==(b|0)?29:20==(b|0)?38:47;break;case 3:var $super=a+20|0;_mrb_gc_mark(c,HEAP32[$super>>2]);b=48;break;case 4:b=a;_mrb_gc_mark_mt(c,b);
var $super3=b+20|0;_mrb_gc_mark(c,HEAP32[$super3>>2]);b=5;break;case 5:_mrb_gc_mark_iv(c,a);b=48;break;case 6:b=a;_mrb_gc_mark(c,HEAP32[(b+20|0)>>2]);_mrb_gc_mark(c,HEAP32[(b+16|0)>>2]);b=48;break;case 7:d=a;b=0>(HEAP32[(d+20|0)>>2]|0)?8:17;break;case 8:h=HEAP32[d>>2]>>>11&2097151;g=0;b=9;break;case 9:b=(g|0)<(h|0)?10:16;break;case 10:b=11;break;case 11:b=9<=(HEAP32[((HEAP32[(d+12|0)>>2]+(g<<3)|0)+4|0)>>2]&255|0)?12:13;break;case 12:_mrb_gc_mark(c,HEAP32[(HEAP32[(d+12|0)>>2]+(g<<3)|0)>>2]);b=13;break;
case 13:b=14;break;case 14:b=15;break;case 15:g=g+1|0;b=9;break;case 16:b=17;break;case 17:b=48;break;case 18:i=a;j=0;l=HEAP32[(i+12|0)>>2];b=19;break;case 19:b=j>>>0<l>>>0?20:26;break;case 20:b=21;break;case 21:b=9<=(HEAP32[((HEAP32[(i+20|0)>>2]+(j<<3)|0)+4|0)>>2]&255|0)?22:23;break;case 22:_mrb_gc_mark(c,HEAP32[(HEAP32[(i+20|0)>>2]+(j<<3)|0)>>2]);b=23;break;case 23:b=24;break;case 24:b=25;break;case 25:j=j+1|0;b=19;break;case 26:b=48;break;case 27:_mrb_gc_mark_iv(c,a);_mrb_gc_mark_ht(c,a);b=48;
break;case 28:b=48;break;case 29:k=a;b=30;break;case 30:b=9<=(HEAP32[((HEAP32[(k+12|0)>>2]|0)+4|0)>>2]&255|0)?31:32;break;case 31:_mrb_gc_mark(c,HEAP32[(HEAP32[(k+12|0)>>2]|0)>>2]);b=32;break;case 32:b=33;break;case 33:b=34;break;case 34:b=9<=(HEAP32[((HEAP32[(k+12|0)>>2]+8|0)+4|0)>>2]&255|0)?35:36;break;case 35:_mrb_gc_mark(c,HEAP32[(HEAP32[(k+12|0)>>2]+8|0)>>2]);b=36;break;case 36:b=37;break;case 37:b=48;break;case 38:n=a;r=0;b=39;break;case 39:b=(r|0)<(HEAP32[(n+12|0)>>2]|0)?40:46;break;case 40:b=
41;break;case 41:b=9<=(HEAP32[((HEAP32[(n+16|0)>>2]+(r<<3)|0)+4|0)>>2]&255|0)?42:43;break;case 42:_mrb_gc_mark(c,HEAP32[(HEAP32[(n+16|0)>>2]+(r<<3)|0)>>2]);b=43;break;case 43:b=44;break;case 44:b=45;break;case 45:r=r+1|0;b=39;break;case 46:b=48;break;case 47:b=48;break;case 48:return;default:assert(0,"bad label: "+b)}}_gc_mark_children.X=1;
function _gc_gray_mark(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;d=0;_gc_mark_children(c,a);b=HEAP32[a>>2]&255;b=12==(b|0)?3:10==(b|0)||13==(b|0)||11==(b|0)?4:9==(b|0)||25==(b|0)?5:24==(b|0)?6:15==(b|0)?7:16==(b|0)?8:14==(b|0)||18==(b|0)?9:20==(b|0)?10:11;break;case 3:d=d+1|0;b=12;break;case 4:b=a;var g=_mrb_gc_mark_iv_size(c,a);d=d+g|0;b=_mrb_gc_mark_mt_size(c,b);d=d+b|0;d=d+1|0;b=12;break;case 5:b=_mrb_gc_mark_iv_size(c,a);d=d+b|0;b=12;break;case 6:d=d+(HEAP32[a>>2]>>>11&2097151)|
0;b=12;break;case 7:b=a;d=d+HEAP32[(b+12|0)>>2]|0;b=12;break;case 8:b=_mrb_gc_mark_iv_size(c,a);d=d+b|0;b=_mrb_gc_mark_ht_size(c,a);d=d+b|0;b=12;break;case 9:d=d+2|0;b=12;break;case 10:b=a;d=d+HEAP32[(b+12|0)>>2]|0;b=12;break;case 11:b=12;break;case 12:return d;default:assert(0,"bad label: "+b)}}_gc_gray_mark.X=1;
function _kh_alloc_ht(f){var e;e=HEAP32[(f|0)>>2];HEAP32[(f+8|0)>>2]=0;HEAP32[(f+4|0)>>2]=0;HEAP32[(f+12|0)>>2]=e>>>2|e>>>1;var b=_mrb_malloc(HEAP32[(f+40|0)>>2],Math.floor(((e|0)>>>0)/4));HEAP32[(f+16|0)>>2]=b;HEAP32[(f+20|0)>>2]=HEAP32[(f+16|0)>>2]+Math.floor((e>>>0)/8)|0;_memset(HEAP32[(f+16|0)>>2],-1,Math.floor((e>>>0)/8)|0,1);_memset(HEAP32[(f+20|0)>>2],0,Math.floor((e>>>0)/8)|0,1);b=_mrb_malloc(HEAP32[(f+40|0)>>2],e<<3|0);HEAP32[(f+24|0)>>2]=b;b=_mrb_malloc(HEAP32[(f+40|0)>>2],e<<3|0);HEAP32[(f+
28|0)>>2]=b;HEAP32[(f+32|0)>>2]=e-1|0;HEAP32[(f+36|0)>>2]=Math.floor((e>>>0)/2)-1|0}_kh_alloc_ht.X=1;function _kh_init_ht_size(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;d=_mrb_calloc(c,1,44);b=8>a>>>0?3:4;break;case 3:a=8;b=4;break;case 4:b=5;break;case 5:a=a-1|0;a|=a>>>1;a|=a>>>2;a|=a>>>4;a|=a>>>8;a|=a>>>16;a=a+1|0;b=6;break;case 6:return HEAP32[(d|0)>>2]=a,HEAP32[(d+40|0)>>2]=c,_kh_alloc_ht(d),d;default:assert(0,"bad label: "+b)}}_kh_init_ht_size.X=1;
function _kh_init_ht(f){return _kh_init_ht_size(f,32)}function _kh_destroy_ht(f){var e;for(e=2;;)switch(e){case 2:var b;b=f;e=0!=(b|0)?3:4;break;case 3:_mrb_free(HEAP32[(b+40|0)>>2],HEAP32[(b+24|0)>>2]);_mrb_free(HEAP32[(b+40|0)>>2],HEAP32[(b+28|0)>>2]);_mrb_free(HEAP32[(b+40|0)>>2],HEAP32[(b+16|0)>>2]);_mrb_free(HEAP32[(b+40|0)>>2],b);e=4;break;case 4:return;default:assert(0,"bad label: "+e)}}
function _kh_clear_ht(f){var e;for(e=2;;)switch(e){case 2:var b;b=f;e=0!=(b|0)?3:5;break;case 3:e=0!=(HEAP32[(b+16|0)>>2]|0)?4:5;break;case 4:_memset(HEAP32[(b+16|0)>>2],-1,Math.floor((HEAP32[(b|0)>>2]>>>0)/8)|0,1);_memset(HEAP32[(b+20|0)>>2],0,Math.floor((HEAP32[(b|0)>>2]>>>0)/8)|0,1);HEAP32[(b+8|0)>>2]=0;HEAP32[(b+4|0)>>2]=0;e=5;break;case 5:return;default:assert(0,"bad label: "+e)}}
function _kh_get_ht(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a,d,g;d=f;g=_mrb_hash_ht_hash_func(HEAP32[(d+40|0)>>2],e)&HEAP32[(d+32|0)>>2];c=3;break;case 3:c=0!=(HEAP8[HEAP32[(d+16|0)>>2]+Math.floor((g>>>0)/8)|0]&255&HEAP8[___m859+(g>>>0)%8|0]&255|0)^1?4:9;break;
case 4:c=0!=(HEAP8[HEAP32[(d+20|0)>>2]+Math.floor((g>>>0)/8)|0]&255&HEAP8[___m859+(g>>>0)%8|0]&255|0)?8:5;break;case 5:c=0!=(_mrb_hash_ht_hash_equal(HEAP32[(d+40|0)>>2],HEAP32[(d+24|0)>>2]+(g<<3)|0,e)|0)?6:7;break;case 6:a=g;c=10;break;case 7:c=8;break;case 8:g=(g+HEAP32[(d+36|0)>>2]|0)&HEAP32[(d+32|0)>>2];c=3;break;case 9:a=HEAP32[(d|0)>>2];c=10;break;case 10:return STACKTOP=b,a;default:assert(0,"bad label: "+c)}}_kh_get_ht.X=1;
function _mrb_hash_ht_hash_func(f,e){var b=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];var a=b+8,c=(HEAP32[(e+4|0)>>2]&255)<<24;_mrb_funcall(a,f,e,__str45905|0,0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));assert(!0,
"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];c^=HEAP32[(b|0)>>2];STACKTOP=b;return c}
function _mrb_hash_ht_hash_equal(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];a=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];f=_mrb_eql(f,e,b);STACKTOP=c;return f}
function _kh_del_ht(f,e){var b=HEAP32[(f+20|0)>>2]+Math.floor((e>>>0)/8)|0;HEAP8[b]=(HEAP8[b]&255|HEAP8[___m859+(e>>>0)%8|0]&255)&255;b=f+4|0;HEAP32[b>>2]=HEAP32[b>>2]-1|0}function _mrb_gc_mark_ht_size(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;a=e;b=0!=(HEAP32[(a+16|0)>>2]|0)?4:3;break;case 3:c=0;b=5;break;case 4:c=HEAP32[(HEAP32[(a+16|0)>>2]+4|0)>>2]<<1|0;b=5;break;case 5:return c;default:assert(0,"bad label: "+b)}}
function _kh_resize_ht(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h,i,j;c=f;a=e;b=8>a>>>0?3:4;break;case 3:a=8;b=4;break;case 4:b=5;break;case 5:a=a-1|0;a|=a>>>1;a|=a>>>2;a|=a>>>4;a|=a>>>8;a|=a>>>16;a=a+1|0;b=6;break;case 6:d=HEAP32[(c+16|0)>>2];g=HEAP32[(c+24|0)>>2];h=HEAP32[(c+28|0)>>2];i=HEAP32[(c|0)>>2];HEAP32[(c|0)>>2]=a;_kh_alloc_ht(c);j=0;b=7;break;case 7:b=j>>>0<i>>>0?8:12;break;case 8:b=0!=(HEAP8[d+Math.floor((j>>>0)/8)|0]&255&HEAP8[___m859+(j>>>0)%8|0]&255|0)?10:9;break;case 9:b=
_kh_put_ht(c,g+(j<<3)|0);b=HEAP32[(c+28|0)>>2]+(b<<3)|0;var l=h+(j<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[b>>2]=HEAP32[l>>2];HEAP32[b+4>>2]=HEAP32[l+4>>2];b=10;break;case 10:b=11;break;case 11:j=j+1|0;b=7;break;case 12:_mrb_free(HEAP32[(c+40|0)>>2],d);_mrb_free(HEAP32[(c+40|0)>>2],g);_mrb_free(HEAP32[(c+40|0)>>2],h);return;default:assert(0,"bad label: "+b)}}_kh_resize_ht.X=1;
function _kh_put_ht(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a,d;a=f;c=HEAP32[(a+8|0)>>2]>>>0>=HEAP32[(a+12|0)>>2]>>>0?3:4;break;case 3:_kh_resize_ht(a,HEAP32[(a|0)>>2]<<1|0);c=4;break;case 4:d=_mrb_hash_ht_hash_func(HEAP32[(a+40|0)>>2],e)&HEAP32[(a+32|0)>>2];
c=5;break;case 5:if(0!=(HEAP8[HEAP32[(a+16|0)>>2]+Math.floor((d>>>0)/8)|0]&255&HEAP8[___m859+(d>>>0)%8|0]&255|0))var g=1,c=7;else c=6;break;case 6:g=0!=(HEAP8[HEAP32[(a+20|0)>>2]+Math.floor((d>>>0)/8)|0]&255&HEAP8[___m859+(d>>>0)%8|0]&255|0);c=7;break;case 7:c=g^1?8:11;break;case 8:c=0!=(_mrb_hash_ht_hash_equal(HEAP32[(a+40|0)>>2],HEAP32[(a+24|0)>>2]+(d<<3)|0,e)|0)?9:10;break;case 9:c=11;break;case 10:d=(d+HEAP32[(a+36|0)>>2]|0)&HEAP32[(a+32|0)>>2];c=5;break;case 11:c=0!=(HEAP8[HEAP32[(a+16|0)>>2]+
Math.floor((d>>>0)/8)|0]&255&HEAP8[___m859+(d>>>0)%8|0]&255|0)?12:13;break;case 12:var c=HEAP32[(a+24|0)>>2]+(d<<3)|0,h=e;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[h>>2];HEAP32[c+4>>2]=HEAP32[h+4>>2];c=HEAP32[(a+16|0)>>2]+Math.floor((d>>>0)/8)|0;HEAP8[c]=HEAP8[c]&255&(HEAP8[___m859+(d>>>0)%8|0]&255^-1)&255;c=a+4|0;HEAP32[c>>2]=HEAP32[c>>2]+1|0;c=a+8|0;HEAP32[c>>2]=HEAP32[c>>2]+1|0;c=16;break;case 13:c=0!=(HEAP8[HEAP32[(a+20|0)>>2]+Math.floor((d>>>
0)/8)|0]&255&HEAP8[___m859+(d>>>0)%8|0]&255|0)?14:15;break;case 14:c=HEAP32[(a+24|0)>>2]+(d<<3)|0;h=e;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[h>>2];HEAP32[c+4>>2]=HEAP32[h+4>>2];c=HEAP32[(a+20|0)>>2]+Math.floor((d>>>0)/8)|0;HEAP8[c]=HEAP8[c]&255&(HEAP8[___m859+(d>>>0)%8|0]&255^-1)&255;c=a+4|0;HEAP32[c>>2]=HEAP32[c>>2]+1|0;c=15;break;case 15:c=16;break;case 16:return a=d,STACKTOP=b,a;default:assert(0,"bad label: "+c)}}
_kh_put_ht.X=1;
function _kh_copy_ht(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;c=_kh_init_ht(c);d=0;b=3;break;case 3:b=(d|0)!=(HEAP32[(a|0)>>2]|0)?4:9;break;case 4:b=0!=(HEAP8[HEAP32[(a+16|0)>>2]+Math.floor((d>>>0)/8)|0]&255&HEAP8[___m859+(d>>>0)%8|0]&255|0)?7:5;break;case 5:b=0!=(HEAP8[HEAP32[(a+20|0)>>2]+Math.floor((d>>>0)/8)|0]&255&HEAP8[___m859+(d>>>0)%8|0]&255|0)?7:6;break;case 6:b=_kh_put_ht(c,HEAP32[(a+24|0)>>2]+(d<<3)|0);b=HEAP32[(c+28|0)>>2]+(b<<3)|0;var g=HEAP32[(a+28|0)>>2]+(d<<3)|0;assert(!0,
"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[b>>2]=HEAP32[g>>2];HEAP32[b+4>>2]=HEAP32[g+4>>2];b=7;break;case 7:b=8;break;case 8:d=d+1|0;b=3;break;case 9:return c;default:assert(0,"bad label: "+b)}}_kh_copy_ht.X=1;
function _mrb_gc_mark_ht(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;d=HEAP32[(e+16|0)>>2];b=0!=(d|0)?4:3;break;case 3:b=19;break;case 4:a=0;b=5;break;case 5:b=(a|0)!=(HEAP32[(d|0)>>2]|0)?6:19;break;case 6:b=0!=(HEAP8[HEAP32[(d+16|0)>>2]+Math.floor((a>>>0)/8)|0]&255&HEAP8[___m859+(a>>>0)%8|0]&255|0)?17:7;break;case 7:b=0!=(HEAP8[HEAP32[(d+20|0)>>2]+Math.floor((a>>>0)/8)|0]&255&HEAP8[___m859+(a>>>0)%8|0]&255|0)?17:8;break;case 8:b=9;break;case 9:b=9<=(HEAP32[((HEAP32[(d+24|0)>>2]+(a<<3)|0)+
4|0)>>2]&255|0)?10:11;break;case 10:_mrb_gc_mark(c,HEAP32[(HEAP32[(d+24|0)>>2]+(a<<3)|0)>>2]);b=11;break;case 11:b=12;break;case 12:b=13;break;case 13:b=9<=(HEAP32[((HEAP32[(d+28|0)>>2]+(a<<3)|0)+4|0)>>2]&255|0)?14:15;break;case 14:_mrb_gc_mark(c,HEAP32[(HEAP32[(d+28|0)>>2]+(a<<3)|0)>>2]);b=15;break;case 15:b=16;break;case 16:b=17;break;case 17:b=18;break;case 18:a=a+1|0;b=5;break;case 19:return;default:assert(0,"bad label: "+b)}}_mrb_gc_mark_ht.X=1;
function _mrb_gc_free_ht(f,e){var b;for(b=2;;)switch(b){case 2:var c;c=e;b=0!=(HEAP32[(c+16|0)>>2]|0)?3:4;break;case 3:_kh_destroy_ht(HEAP32[(c+16|0)>>2]);b=4;break;case 4:return;default:assert(0,"bad label: "+b)}}
function _mrb_hash_new_capa(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d;c=e;a=b;d=_mrb_obj_alloc(c,16,HEAP32[(c+96|0)>>2]);c=_kh_init_ht(c);HEAP32[(d+16|0)>>2]=c;c=0<(a|0)?3:4;break;case 3:_kh_resize_ht(HEAP32[(d+16|0)>>2],a);c=4;break;case 4:HEAP32[(d+12|0)>>2]=0;_mrb_obj_value914(f,d);return;default:assert(0,"bad label: "+c)}}
function _mrb_obj_value914(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b,g;g=a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|HEAP32[g>>2]&255;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+
c)}}function _mrb_hash_new(f,e){_mrb_hash_new_capa(f,e,0)}
function _mrb_hash_get(f,e,b,c){var a=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i,j=a;g=e;h=HEAP32[(HEAP32[(b|0)>>
2]+16|0)>>2];d=0!=(h|0)?3:6;break;case 3:i=_kh_get_ht(h,c);d=(i|0)!=(HEAP32[(h|0)>>2]|0)?4:5;break;case 4:var d=f,l=HEAP32[(h+28|0)>>2]+(i<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[l>>2];HEAP32[d+4>>2]=HEAP32[l+4>>2];d=9;break;case 5:d=6;break;case 6:d=0!=(HEAP32[HEAP32[(b|0)>>2]>>2]>>>11&256|0)?7:8;break;case 7:var l=d=g,k=_mrb_intern(g,__str860|0);_mrb_iv_get(j,l,b,k);_mrb_funcall(f,d,j,__str1861|0,2,(tempInt=STACKTOP,STACKTOP+=
16,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=HEAP32[b>>2],HEAP32[tempInt+4>>2]=HEAP32[b+4>>2],HEAP32[tempInt+8>>2]=HEAP32[c>>2],HEAP32[tempInt+8+4>>2]=HEAP32[c+4>>2],tempInt));d=9;break;case 8:d=g;l=_mrb_intern(g,__str860|0);_mrb_iv_get(f,d,b,l);d=9;break;case 9:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_mrb_hash_get.X=1;
function _mrb_hash_fetch(f,e,b,c,a){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];d=a;a=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");
HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h;g=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2];d=0!=(g|0)?3:6;break;case 3:h=_kh_get_ht(g,c);d=(h|0)!=(HEAP32[(g|0)>>2]|0)?4:5;break;case 4:var d=f,i=HEAP32[(g+28|0)>>2]+(h<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[i>>2];HEAP32[d+4>>2]=HEAP32[i+4>>2];d=7;break;case 5:d=6;break;case 6:d=f;i=a;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[d>>2]=HEAP32[i>>2];HEAP32[d+4>>2]=HEAP32[i+4>>2];d=7;break;case 7:STACKTOP=e;return;default:assert(0,"bad label: "+d)}}
function _mrb_hash_set(f,e,b,c){var a=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[d>>2];HEAP32[e+4>>2]=HEAP32[d+4>>2];d=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");
HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i,j=a;g=f;_mrb_hash_modify(g,e);h=HEAP32[(HEAP32[(e|0)>>2]+16|0)>>2];d=0!=(h|0)?4:3;break;case 3:h=_kh_init_ht(g);HEAP32[(HEAP32[(e|0)>>2]+16|0)>>2]=h;d=4;break;case 4:i=_kh_get_ht(h,b);d=(i|0)==(HEAP32[(h|0)>>2]|0)?5:6;break;case 5:i=h;_mrb_hash_ht_key(j,g,b);i=_kh_put_ht(i,j);d=6;break;case 6:f=HEAP32[(h+28|0)>>2]+(i<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];_mrb_write_barrier(g,HEAP32[(e|0)>>2]);STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_mrb_hash_set.X=1;function _mrb_hash_modify(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];_mrb_hash_tbl(f,e);STACKTOP=b}
function _mrb_hash_ht_key(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=e;a=17==(HEAP32[(b+4|0)>>2]&255|0)?3:4;break;case 3:_mrb_str_dup(f,d,b);a=5;break;case 4:var a=f,g=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[g>>2];HEAP32[a+4>>2]=HEAP32[g+4>>2];a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_hash_freeze(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];c=e;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=b}
function _mrb_hash_dup(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i,j,l=c;d=e;h=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2];g=_mrb_obj_alloc(d,16,HEAP32[(d+96|0)>>2]);a=_kh_init_ht(d);HEAP32[(g+16|0)>>2]=a;a=0<HEAP32[(h+4|0)>>2]>>>0?3:11;break;case 3:i=
HEAP32[(g+16|0)>>2];j=0;a=4;break;case 4:a=(j|0)!=(HEAP32[(h|0)>>2]|0)?5:10;break;case 5:a=0!=(HEAP8[HEAP32[(h+16|0)>>2]+Math.floor((j>>>0)/8)|0]&255&HEAP8[___m859+(j>>>0)%8|0]&255|0)?8:6;break;case 6:a=0!=(HEAP8[HEAP32[(h+20|0)>>2]+Math.floor((j>>>0)/8)|0]&255&HEAP8[___m859+(j>>>0)%8|0]&255|0)?8:7;break;case 7:a=i;_mrb_hash_ht_key(l,d,HEAP32[(h+24|0)>>2]+(j<<3)|0);var a=_kh_put_ht(a,l),a=HEAP32[(i+28|0)>>2]+(a<<3)|0,k=HEAP32[(h+28|0)>>2]+(j<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[k>>2];HEAP32[a+4>>2]=HEAP32[k+4>>2];a=8;break;case 8:a=9;break;case 9:j=j+1|0;a=4;break;case 10:a=11;break;case 11:_mrb_obj_value914(f,g);STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_hash_dup.X=1;
function _mrb_hash_tbl(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a,d;a=f;d=HEAP32[(HEAP32[(e|0)>>2]+16|0)>>2];c=0!=(d|0)?4:3;break;case 3:c=_kh_init_ht(a);HEAP32[(HEAP32[(e|0)>>2]+16|0)>>2]=c;c=4;break;case 4:return a=d,STACKTOP=b,a;default:assert(0,"bad label: "+
c)}}function _mrb_hash_aget(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str2862|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_mrb_hash_get(f,e,b,c);STACKTOP=c}
function _mrb_hash_lookup(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];_mrb_hash_get(f,e,b,c);STACKTOP=a}
function _mrb_hash_delete_key(f,e,b,c){e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[a>>2];HEAP32[c+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h=e;d=HEAP32[(HEAP32[(b|0)>>2]+
16|0)>>2];a=0!=(d|0)?3:6;break;case 3:g=_kh_get_ht(d,c);a=(g|0)!=(HEAP32[(d|0)>>2]|0)?4:5;break;case 4:var a=h,i=HEAP32[(d+28|0)>>2]+(g<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[i>>2];HEAP32[a+4>>2]=HEAP32[i+4>>2];_kh_del_ht(d,g);a=f;i=h;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[i>>2];HEAP32[a+4>>2]=HEAP32[i+4>>2];a=7;break;case 5:a=6;break;case 6:_mrb_nil_value917(f);
a=7;break;case 7:STACKTOP=e;return;default:assert(0,"bad label: "+a)}}
function _mrb_nil_value917(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_hash_delete(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str2862|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_mrb_hash_delete_key(f,e,b,c);STACKTOP=c}
function _mrb_hash_values_at(f,e,b,c,a){var d=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=a,a=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[a>>2]=HEAP32[g>>2];HEAP32[a+4>>2]=HEAP32[g+4>>2];for(g=2;;)switch(g){case 2:var h,i,j,l=d,k,n=d+8;h=e;i=b;j=c;_mrb_ary_new_capa(l,h,i);k=0;g=3;break;case 3:g=(k|0)<(i|0)?4:6;break;case 4:g=h;_mrb_hash_get(n,h,a,j+(k<<3)|0);_mrb_ary_push(g,l,n);g=5;break;
case 5:k=k+1|0;g=3;break;case 6:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[l>>2];HEAP32[f+4>>2]=HEAP32[l+4>>2];STACKTOP=d;return;default:assert(0,"bad label: "+g)}}
function _mrb_hash_aset(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c+8;_mrb_get_args(e,__str3863|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=a,tempInt));_mrb_hash_set(e,b,c,a);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[f>>2]=HEAP32[a>>2];HEAP32[f+4>>2]=HEAP32[a+4>>2];STACKTOP=c}
function _mrb_hash_keys(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i=c,j=c+8,l=c+16;d=e;g=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2];a=0!=(g|0)?4:3;break;case 3:_mrb_ary_new(f,d);a=12;break;case 4:_mrb_ary_new_capa(j,d,HEAP32[(g+4|0)>>2]);h=i;a=j;
assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[h>>2]=HEAP32[a>>2];HEAP32[h+4>>2]=HEAP32[a+4>>2];h=0;a=5;break;case 5:a=(h|0)!=(HEAP32[(g|0)>>2]|0)?6:11;break;case 6:a=0!=(HEAP8[HEAP32[(g+16|0)>>2]+Math.floor((h>>>0)/8)|0]&255&HEAP8[___m859+(h>>>0)%8|0]&255|0)?9:7;break;case 7:a=0!=(HEAP8[HEAP32[(g+20|0)>>2]+Math.floor((h>>>0)/8)|0]&255&HEAP8[___m859+(h>>>0)%8|0]&255|0)?9:8;break;case 8:var a=l,k=HEAP32[(g+24|0)>>2]+(h<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[k>>2];HEAP32[a+4>>2]=HEAP32[k+4>>2];_mrb_ary_push(d,i,l);a=9;break;case 9:a=10;break;case 10:h=h+1|0;a=5;break;case 11:a=f;k=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[k>>2];HEAP32[a+4>>2]=HEAP32[k+4>>2];a=12;break;case 12:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_hash_keys.X=1;
function _mrb_hash_assoc(f,e,b){var c=STACKTOP;STACKTOP+=40;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+8,i=c+16,j=c+24,l=c+32;d=e;_mrb_get_args(d,__str2862|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));
a=0==(HEAP32[(g+4|0)>>2]&255|0)?3:5;break;case 3:a=0!=(HEAP32[(g|0)>>2]|0)?5:4;break;case 4:var a=d,k=_mrb_class_obj_get(d,__str4864|0);_mrb_raise(a,k,__str5865|0);a=5;break;case 5:_mrb_hash_has_keyWithKey(j,d,b,g);a=i;k=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[k>>2];HEAP32[a+4>>2]=HEAP32[k+4>>2];a=0!=(HEAP32[(i+4|0)>>2]&255|0)?6:7;break;case 6:_mrb_hash_get(l,d,b,g);a=h;k=l;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[k>>2];HEAP32[a+4>>2]=HEAP32[k+4>>2];_mrb_assoc_new(f,d,g,h);a=8;break;case 7:_mrb_nil_value917(f);a=8;break;case 8:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_hash_has_keyWithKey(f,e,b,c){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[a>>2];HEAP32[c+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2];a=0!=
(d|0)?3:6;break;case 3:a=_kh_get_ht(d,c);a=(a|0)!=(HEAP32[(d|0)>>2]|0)?4:5;break;case 4:_mrb_true_value918(f);a=7;break;case 5:a=6;break;case 6:_mrb_false_value919(f);a=7;break;case 7:STACKTOP=e;return;default:assert(0,"bad label: "+a)}}
function _mrb_hash_rassoc(f,e,b){var c=STACKTOP;STACKTOP+=40;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+8,a=c+16,i=c+24,j=c+32;d=e;_mrb_get_args(d,__str2862|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));
_mrb_hash_has_keyWithKey(i,d,b,g);var l=a;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[l>>2]=HEAP32[i>>2];HEAP32[l+4>>2]=HEAP32[i+4>>2];a=0!=(HEAP32[(a+4|0)>>2]&255|0)?3:4;break;case 3:_mrb_hash_get(j,d,b,g);a=h;l=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+4>>2]=HEAP32[l+4>>2];_mrb_assoc_new(f,d,h,g);a=5;break;case 4:_mrb_nil_value917(f);a=5;break;case 5:STACKTOP=c;return;
default:assert(0,"bad label: "+a)}}
function _mrb_init_hash(f){var e=_mrb_define_class(f,__str6866|0,HEAP32[(f+72|0)>>2]);HEAP32[(f+96|0)>>2]=e;HEAP32[e>>2]=HEAP32[e>>2]&2047|((HEAP32[e>>2]>>>11&2096896|16)&2097151)<<11;var b=_mrb_class_get(f,__str7867|0);_mrb_include_module(f,e,b);_mrb_define_method(f,e,__str8868|0,154,524288);_mrb_define_method(f,e,__str9869|0,528,524288);_mrb_define_method(f,e,__str10870|0,420,1048576);_mrb_define_method(f,e,__str11871|0,136,0);_mrb_define_method(f,e,__str12872|0,330,8192);_mrb_define_method(f,e,
__str13873|0,144,524288);_mrb_define_method(f,e,__str14874|0,208,0);_mrb_define_method(f,e,__str15875|0,292,524288);_mrb_define_method(f,e,__str16876|0,564,524288);_mrb_define_method(f,e,__str17877|0,126,0);_mrb_define_method(f,e,__str18878|0,142,524288);_mrb_define_method(f,e,__str19879|0,378,524288);_mrb_define_method(f,e,__str20880|0,142,524288);_mrb_define_method(f,e,__str21881|0,368,8192);_mrb_define_method(f,e,__str22882|0,166,524288);_mrb_define_method(f,e,__str23883|0,142,524288);_mrb_define_method(f,
e,__str24884|0,358,0);_mrb_define_method(f,e,__str25885|0,542,0);_mrb_define_method(f,e,__str26886|0,142,524288);_mrb_define_method(f,e,__str27887|0,166,524288);_mrb_define_method(f,e,__str28888|0,256,0);_mrb_define_method(f,e,__str29889|0,542,0);_mrb_define_method(f,e,__str30890|0,420,1048576);_mrb_define_method(f,e,__str31891|0,378,524288);_mrb_define_method(f,e,__str32892|0,484,0);_mrb_define_method(f,e,__str33893|0,96,0);_mrb_define_method(f,e,__str34894|0,106,0);_mrb_define_alias(f,e,__str35895|
0,__str34894|0);_mrb_define_method(f,e,__str36896|0,560,524288)}_mrb_init_hash.X=1;
function _mrb_hash_equal(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str2862|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_hash_equal(f,e,b,c,0);STACKTOP=c}
function _mrb_hash_clear(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a;a=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2];c=0!=(a|0)?3:4;break;case 3:_kh_clear_ht(a);c=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>
2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+c)}}
function _mrb_hash_default(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+4,i=c+8,j=c+16;d=e;_mrb_get_args(d,__str44904|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,HEAP32[tempInt+
4>>2]=h,tempInt));a=0!=(HEAP32[HEAP32[(b|0)>>2]>>2]>>>11&256|0)?3:6;break;case 3:a=0==(HEAP32[h>>2]|0)?4:5;break;case 4:_mrb_nil_value917(f);a=7;break;case 5:var a=i,l=HEAP32[g>>2]|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+4>>2]=HEAP32[l+4>>2];var l=a=d,k=_mrb_intern(d,__str860|0);_mrb_iv_get(j,l,b,k);_mrb_funcall(f,a,j,__str1861|0,2,(tempInt=STACKTOP,STACKTOP+=16,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=HEAP32[b>>2],HEAP32[tempInt+4>>2]=HEAP32[b+4>>2],HEAP32[tempInt+8>>2]=HEAP32[i>>2],HEAP32[tempInt+8+4>>2]=HEAP32[i+4>>2],tempInt));a=7;break;case 6:a=d;l=_mrb_intern(d,__str860|0);_mrb_iv_get(f,a,b,l);a=7;break;case 7:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_hash_set_default(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str2862|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_mrb_hash_modify(e,b);a=_mrb_intern(e,__str860|0);_mrb_iv_set(e,
b,a,c);e=HEAP32[(b|0)>>2];HEAP32[e>>2]=HEAP32[e>>2]&2047|(HEAP32[e>>2]>>>11&2096895)<<11;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=c}
function _mrb_hash_default_proc(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=e;a=0!=(HEAP32[HEAP32[(b|0)>>2]>>2]>>>11&256|0)?3:4;break;case 3:var a=d,g=_mrb_intern(d,__str860|0);_mrb_iv_get(f,a,b,g);a=5;break;case 4:_mrb_nil_value917(f);a=5;break;case 5:STACKTOP=
c;return;default:assert(0,"bad label: "+a)}}
function _mrb_hash_set_default_proc(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str2862|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_mrb_hash_modify(e,b);a=_mrb_intern(e,__str860|0);_mrb_iv_set(e,
b,a,c);e=HEAP32[(b|0)>>2];HEAP32[e>>2]=HEAP32[e>>2]&2047|((HEAP32[e>>2]>>>11&2097151|256)&2097151)<<11;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=c}
function _mrb_hash_empty_p(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a;a=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2];c=0!=(a|0)?3:6;break;case 3:c=0==(HEAP32[(a+4|0)>>2]|0)?4:5;break;case 4:_mrb_true_value918(f);c=7;break;case 5:c=6;break;case 6:_mrb_false_value919(f);c=
7;break;case 7:STACKTOP=e;return;default:assert(0,"bad label: "+c)}}
function _mrb_hash_has_key(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str2862|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_mrb_hash_has_keyWithKey(f,e,b,c);STACKTOP=c}
function _mrb_hash_has_value(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str2862|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_mrb_hash_has_valueWithvalue(f,e,b,c);STACKTOP=c}
function _mrb_hash_init_core(f,e,b){var c=STACKTOP;STACKTOP+=32;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+8,i=c+16,j=c+20,l=c+24;d=e;_mrb_get_args(d,__str43903|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=
g,HEAP32[tempInt+4>>2]=i,HEAP32[tempInt+8>>2]=j,tempInt));_mrb_hash_modify(d,b);a=0==(HEAP32[(g+4|0)>>2]&255|0)?3:10;break;case 3:a=0!=(HEAP32[(g|0)>>2]|0)?10:4;break;case 4:a=0<(HEAP32[j>>2]|0)?5:8;break;case 5:a=1!=(HEAP32[j>>2]|0)?6:7;break;case 6:var a=d,k=_mrb_class_obj_get(d,__str4864|0);_mrb_raise(a,k,__str5865|0);a=7;break;case 7:a=h;k=HEAP32[i>>2]|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[k>>2];HEAP32[a+4>>2]=HEAP32[k+4>>
2];a=9;break;case 8:_mrb_nil_value917(l);a=h;k=l;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[k>>2];HEAP32[a+4>>2]=HEAP32[k+4>>2];a=9;break;case 9:a=13;break;case 10:a=0<(HEAP32[j>>2]|0)?11:12;break;case 11:a=d;k=_mrb_class_obj_get(d,__str4864|0);_mrb_raise(a,k,__str5865|0);a=12;break;case 12:k=a=HEAP32[(b|0)>>2];HEAP32[k>>2]=HEAP32[k>>2]&2047|((HEAP32[a>>2]>>>11&2097151|256)&2097151)<<11;a=h;k=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[k>>2];HEAP32[a+4>>2]=HEAP32[k+4>>2];a=13;break;case 13:e=d;d=_mrb_intern(d,__str860|0);_mrb_iv_set(e,b,d,h);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_hash_init_core.X=1;
function _mrb_hash_replace(f,e,b){var c=STACKTOP;STACKTOP+=48;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+8,i,j,l=c+16,k=c+24,n=c+32,r=c+40;d=e;_mrb_get_args(d,__str2862|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>
2]=g,tempInt));_mrb_hash_modify_check(d,b);_to_hash921(l,d,g);a=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+4>>2]=HEAP32[l+4>>2];a=0!=(_mrb_obj_equal(d,b,g)|0)?3:4;break;case 3:a=f;l=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+4>>2]=HEAP32[l+4>>2];a=17;break;case 4:_mrb_hash_clear(k,d,b);i=HEAP32[(HEAP32[(g|0)>>2]+16|0)>>2];a=0!=(i|0)?5:13;
break;case 5:j=0;a=6;break;case 6:a=(j|0)!=(HEAP32[(i|0)>>2]|0)?7:12;break;case 7:a=0!=(HEAP8[HEAP32[(i+16|0)>>2]+Math.floor((j>>>0)/8)|0]&255&HEAP8[___m859+(j>>>0)%8|0]&255|0)?10:8;break;case 8:a=0!=(HEAP8[HEAP32[(i+20|0)>>2]+Math.floor((j>>>0)/8)|0]&255&HEAP8[___m859+(j>>>0)%8|0]&255|0)?10:9;break;case 9:_mrb_hash_set(d,b,HEAP32[(i+24|0)>>2]+(j<<3)|0,HEAP32[(i+28|0)>>2]+(j<<3)|0);a=10;break;case 10:a=11;break;case 11:j=j+1|0;a=6;break;case 12:a=13;break;case 13:a=0!=(HEAP32[HEAP32[(g|0)>>2]>>2]>>>
11&256|0)?14:15;break;case 14:l=a=HEAP32[(b|0)>>2];HEAP32[l>>2]=HEAP32[l>>2]&2047|((HEAP32[a>>2]>>>11&2097151|256)&2097151)<<11;a=d;l=_mrb_intern(d,__str860|0);_mrb_iv_get(n,a,g,l);a=h;l=n;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+4>>2]=HEAP32[l+4>>2];a=16;break;case 15:a=d;l=_mrb_intern(d,__str860|0);_mrb_iv_get(r,a,g,l);a=h;l=r;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>
2]=HEAP32[l>>2];HEAP32[a+4>>2]=HEAP32[l+4>>2];a=16;break;case 16:a=d;l=_mrb_intern(d,__str860|0);_mrb_iv_set(a,b,l,h);a=f;l=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+4>>2]=HEAP32[l+4>>2];a=17;break;case 17:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_hash_replace.X=1;
function _mrb_hash_size_m(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a;a=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2];c=0!=(a|0)?4:3;break;case 3:_mrb_fixnum_value920(f,0);c=5;break;case 4:_mrb_fixnum_value920(f,HEAP32[(a+4|0)>>2]);c=5;break;case 5:STACKTOP=e;return;default:assert(0,
"bad label: "+c)}}
function _mrb_hash_shift(f,e,b){var c=STACKTOP;STACKTOP+=40;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i=c,j=c+8,l=c+16,k=c+24,n=c+32;d=e;g=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2];_mrb_hash_modify(d,b);a=0!=(g|0)?3:13;break;case 3:a=0<HEAP32[(g+4|0)>>2]>>>0?4:12;break;case 4:h=0;
a=5;break;case 5:a=(h|0)!=(HEAP32[(g|0)>>2]|0)?6:11;break;case 6:a=0!=(HEAP8[HEAP32[(g+16|0)>>2]+Math.floor((h>>>0)/8)|0]&255&HEAP8[___m859+(h>>>0)%8|0]&255|0)?8:7;break;case 7:a=0!=(HEAP8[HEAP32[(g+20|0)>>2]+Math.floor((h>>>0)/8)|0]&255&HEAP8[___m859+(h>>>0)%8|0]&255|0)?8:9;break;case 8:a=10;break;case 9:var a=i,r=HEAP32[(g+24|0)>>2]+(h<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[r>>2];HEAP32[a+4>>2]=HEAP32[r+4>>2];_mrb_gc_protect(d,
i);_mrb_hash_delete_key(l,d,b,i);a=j;r=l;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[r>>2];HEAP32[a+4>>2]=HEAP32[r+4>>2];_mrb_gc_protect(d,j);_mrb_assoc_new(f,d,i,j);a=16;break;case 10:h=h+1|0;a=5;break;case 11:a=12;break;case 12:a=13;break;case 13:a=0!=(HEAP32[HEAP32[(b|0)>>2]>>2]>>>11&256|0)?14:15;break;case 14:var r=a=d,t=_mrb_intern(d,__str860|0);_mrb_iv_get(k,r,b,t);_mrb_nil_value917(n);_mrb_funcall(f,a,k,__str1861|0,2,(tempInt=STACKTOP,
STACKTOP+=16,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=HEAP32[b>>2],HEAP32[tempInt+4>>2]=HEAP32[b+4>>2],HEAP32[tempInt+8>>2]=HEAP32[n>>2],HEAP32[tempInt+8+4>>2]=HEAP32[n+4>>2],tempInt));a=16;break;case 15:a=d;r=_mrb_intern(d,__str860|0);_mrb_iv_get(f,a,b,r);a=16;break;case 16:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_hash_shift.X=1;
function _mrb_hash_values(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i=c,j=c+8,l=c+16;d=e;g=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2];a=0!=(g|0)?4:3;break;case 3:_mrb_ary_new(f,d);a=12;break;case 4:_mrb_ary_new_capa(j,d,HEAP32[(g+4|0)>>2]);h=i;a=
j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[h>>2]=HEAP32[a>>2];HEAP32[h+4>>2]=HEAP32[a+4>>2];h=0;a=5;break;case 5:a=(h|0)!=(HEAP32[(g|0)>>2]|0)?6:11;break;case 6:a=0!=(HEAP8[HEAP32[(g+16|0)>>2]+Math.floor((h>>>0)/8)|0]&255&HEAP8[___m859+(h>>>0)%8|0]&255|0)?9:7;break;case 7:a=0!=(HEAP8[HEAP32[(g+20|0)>>2]+Math.floor((h>>>0)/8)|0]&255&HEAP8[___m859+(h>>>0)%8|0]&255|0)?9:8;break;case 8:var a=l,k=HEAP32[(g+28|0)>>2]+(h<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[k>>2];HEAP32[a+4>>2]=HEAP32[k+4>>2];_mrb_ary_push(d,i,l);a=9;break;case 9:a=10;break;case 10:h=h+1|0;a=5;break;case 11:a=f;k=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[k>>2];HEAP32[a+4>>2]=HEAP32[k+4>>2];a=12;break;case 12:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_hash_values.X=1;
function _mrb_hash_to_hash(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=e}
function _mrb_hash_inspect(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g;d=e;g=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2];a=0!=(g|0)?3:4;break;case 3:a=0==(HEAP32[(g+4|0)>>2]|0)?4:5;break;case 4:_mrb_str_new(f,d,__str37897|0,2);a=6;break;case 5:_inspect_hash(f,d,b,
0);a=6;break;case 6:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_hash_eql(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str2862|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_hash_equal(f,e,b,c,1);STACKTOP=c}
function _hash_equal(f,e,b,c,a){var d=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[g>>2];HEAP32[b+4>>2]=HEAP32[g+4>>2];g=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[g>>2];HEAP32[c+4>>2]=HEAP32[g+4>>2];for(g=2;;)switch(g){case 2:var h,i,j,l,k,n,r=d;h=e;i=a;g=0!=(_mrb_obj_equal(h,
b,c)|0)?3:4;break;case 3:_mrb_true_value918(f);g=31;break;case 4:g=16==(HEAP32[(c+4|0)>>2]&255|0)?10:5;break;case 5:var g=h,t=_mrb_intern(h,__str33893|0),g=0!=(_mrb_respond_to(g,c,t)|0)?7:6;break;case 6:_mrb_false_value919(f);g=31;break;case 7:g=0!=(i|0)?8:9;break;case 8:g=_mrb_eql(h,c,b);_mrb_fixnum_value920(f,g);g=31;break;case 9:g=_mrb_equal(h,c,b);_mrb_fixnum_value920(f,g);g=31;break;case 10:j=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2];l=HEAP32[(HEAP32[(c|0)>>2]+16|0)>>2];g=0!=(l|0)?14:11;break;case 11:g=
0!=(l|0)?13:12;break;case 12:_mrb_true_value918(f);g=31;break;case 13:_mrb_false_value919(f);g=31;break;case 14:g=0!=(l|0)?16:15;break;case 15:_mrb_false_value919(f);g=31;break;case 16:g=(HEAP32[(j+4|0)>>2]|0)!=(HEAP32[(l+4|0)>>2]|0)?17:18;break;case 17:_mrb_false_value919(f);g=31;break;case 18:k=0;g=19;break;case 19:g=(k|0)!=(HEAP32[(j|0)>>2]|0)?20:29;break;case 20:g=0!=(HEAP8[HEAP32[(j+16|0)>>2]+Math.floor((k>>>0)/8)|0]&255&HEAP8[___m859+(k>>>0)%8|0]&255|0)?22:21;break;case 21:g=0!=(HEAP8[HEAP32[(j+
20|0)>>2]+Math.floor((k>>>0)/8)|0]&255&HEAP8[___m859+(k>>>0)%8|0]&255|0)?22:23;break;case 22:g=28;break;case 23:n=r;g=HEAP32[(j+24|0)>>2]+(k<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[n>>2]=HEAP32[g>>2];HEAP32[n+4>>2]=HEAP32[g+4>>2];n=_kh_get_ht(l,r);g=(n|0)!=(HEAP32[(l|0)>>2]|0)?24:27;break;case 24:g=0!=(_mrb_equal(h,HEAP32[(j+28|0)>>2]+(k<<3)|0,HEAP32[(l+28|0)>>2]+(n<<3)|0)|0)?25:26;break;case 25:g=28;break;case 26:g=27;break;case 27:_mrb_false_value919(f);
g=31;break;case 28:k=k+1|0;g=19;break;case 29:g=30;break;case 30:_mrb_true_value918(f);g=31;break;case 31:STACKTOP=d;return;default:assert(0,"bad label: "+g)}}_hash_equal.X=1;
function _mrb_true_value918(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]=HEAP32[b>>2]&-256|2;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_false_value919(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_fixnum_value920(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|3;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_hash_modify_check(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];STACKTOP=b}function _mrb_init_ext(){}
function _mrb_class992(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a,d;d=f;c=HEAP32[(e+4|0)>>2]&255;c=0==(c|0)?3:2==(c|0)?6:4==(c|0)?7:3==(c|0)?8:6==(c|0)?9:8==(c|0)?10:11;break;case 3:c=0!=(HEAP32[(e|0)>>2]|0)?4:5;break;case 4:a=HEAP32[(d+112|0)>>2];c=12;break;
case 5:a=HEAP32[(d+116|0)>>2];c=12;break;case 6:a=HEAP32[(d+108|0)>>2];c=12;break;case 7:a=HEAP32[(d+120|0)>>2];c=12;break;case 8:a=HEAP32[(d+104|0)>>2];c=12;break;case 9:a=HEAP32[(d+100|0)>>2];c=12;break;case 10:a=HEAP32[(d+72|0)>>2];c=12;break;case 11:a=HEAP32[(HEAP32[(e|0)>>2]+4|0)>>2];c=12;break;case 12:return STACKTOP=b,a;default:assert(0,"bad label: "+c)}}_mrb_class992.X=1;
function _inspect_hash(f,e,b,c){var a=STACKTOP;STACKTOP+=80;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h=a,i=a+8,j,l,k=a+16,n,r=a+24,t=a+32,p=a+40,q=a+48,v=a+56,w=a+64,m=a+72;g=e;d=c;j=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2];d=0!=(d|0)?3:4;break;case 3:_mrb_str_new(f,g,__str38898|0,
5);d=17;break;case 4:_mrb_str_new(k,g,__str39899|0,1);var d=h,x=k;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[x>>2];HEAP32[d+4>>2]=HEAP32[x+4>>2];d=0!=(j|0)?5:16;break;case 5:d=0<HEAP32[(j+4|0)>>2]>>>0?6:16;break;case 6:l=0;d=7;break;case 7:d=(l|0)!=(HEAP32[(j|0)>>2]|0)?8:15;break;case 8:d=0!=(HEAP8[HEAP32[(j+16|0)>>2]+Math.floor((l>>>0)/8)|0]&255&HEAP8[___m859+(l>>>0)%8|0]&255|0)?10:9;break;case 9:d=0!=(HEAP8[HEAP32[(j+20|0)>>2]+Math.floor((l>>>
0)/8)|0]&255&HEAP8[___m859+(l>>>0)%8|0]&255|0)?10:11;break;case 10:d=14;break;case 11:n=_mrb_gc_arena_save(g);d=1<(HEAP32[(HEAP32[(h|0)>>2]+12|0)>>2]|0)?12:13;break;case 12:_mrb_str_cat2(r,g,h,__str40900|0);d=13;break;case 13:_mrb_inspect(t,g,HEAP32[(j+24|0)>>2]+(l<<3)|0);d=i;x=t;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[x>>2];HEAP32[d+4>>2]=HEAP32[x+4>>2];_mrb_str_append(p,g,h,i);_mrb_str_buf_cat(q,g,h,__str41901|0,2);_mrb_inspect(v,
g,HEAP32[(j+28|0)>>2]+(l<<3)|0);d=i;x=v;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[x>>2];HEAP32[d+4>>2]=HEAP32[x+4>>2];_mrb_str_append(w,g,h,i);_mrb_gc_arena_restore(g,n);d=14;break;case 14:l=l+1|0;d=7;break;case 15:d=16;break;case 16:_mrb_str_buf_cat(m,g,h,__str42902|0,1);d=f;x=h;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[x>>2];HEAP32[d+4>>2]=HEAP32[x+4>>2];d=17;break;case 17:STACKTOP=
a;return;default:assert(0,"bad label: "+d)}}_inspect_hash.X=1;function _to_hash921(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_convert_type(f,e,b,16,__str6866|0,__str33893|0);STACKTOP=c}
function _mrb_hash_has_valueWithvalue(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i;g=e;h=HEAP32[(HEAP32[(b|0)>>2]+
16|0)>>2];d=0!=(h|0)?3:13;break;case 3:i=0;d=4;break;case 4:d=(i|0)!=(HEAP32[(h|0)>>2]|0)?5:12;break;case 5:d=0!=(HEAP8[HEAP32[(h+16|0)>>2]+Math.floor((i>>>0)/8)|0]&255&HEAP8[___m859+(i>>>0)%8|0]&255|0)?7:6;break;case 6:d=0!=(HEAP8[HEAP32[(h+20|0)>>2]+Math.floor((i>>>0)/8)|0]&255&HEAP8[___m859+(i>>>0)%8|0]&255|0)?7:8;break;case 7:d=11;break;case 8:d=0!=(_mrb_equal(g,HEAP32[(h+28|0)>>2]+(i<<3)|0,c)|0)?9:10;break;case 9:_mrb_true_value918(f);d=14;break;case 10:d=11;break;case 11:i=i+1|0;d=4;break;case 12:d=
13;break;case 13:_mrb_false_value919(f);d=14;break;case 14:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_mrb_hash_has_valueWithvalue.X=1;
function _mrb_init_core(f){_mrb_init_symtbl(f);_mrb_gc_arena_restore(f,0);_mrb_init_class(f);_mrb_gc_arena_restore(f,0);_mrb_init_object(f);_mrb_gc_arena_restore(f,0);_mrb_init_kernel(f);_mrb_gc_arena_restore(f,0);_mrb_init_comparable(f);_mrb_gc_arena_restore(f,0);_mrb_init_enumerable(f);_mrb_gc_arena_restore(f,0);_mrb_init_symbol(f);_mrb_gc_arena_restore(f,0);_mrb_init_exception(f);_mrb_gc_arena_restore(f,0);_mrb_init_proc(f);_mrb_gc_arena_restore(f,0);_mrb_init_string(f);_mrb_gc_arena_restore(f,
0);_mrb_init_array(f);_mrb_gc_arena_restore(f,0);_mrb_init_hash(f);_mrb_gc_arena_restore(f,0);_mrb_init_numeric(f);_mrb_gc_arena_restore(f,0);_mrb_init_range(f);_mrb_gc_arena_restore(f,0);_mrb_init_struct(f);_mrb_gc_arena_restore(f,0);_mrb_init_gc(f);_mrb_gc_arena_restore(f,0);_mrb_init_print(f);_mrb_gc_arena_restore(f,0);_mrb_init_time(f);_mrb_gc_arena_restore(f,0);_mrb_init_math(f);_mrb_gc_arena_restore(f,0);_mrb_init_mrblib(f);_mrb_gc_arena_restore(f,0)}_mrb_init_core.X=1;
function _mrb_obj_basic_to_s_p(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a,d,g;g=d=f;c=_mrb_class992(d,e);d=_mrb_intern(d,__str926|0);g=_mrb_method_search(g,c,d);c=0!=(g|0)?3:6;break;case 3:c=0!=(HEAP32[g>>2]>>>11&128|0)?4:6;break;case 4:c=94==(HEAP32[(g+12|0)>>
2]|0)?5:6;break;case 5:a=1;c=7;break;case 6:a=0;c=7;break;case 7:return STACKTOP=b,a;default:assert(0,"bad label: "+c)}}
function _mrb_obj_inspect(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=e;a=9==(HEAP32[(b+4|0)>>2]&255|0)?3:5;break;case 3:a=0!=(_mrb_obj_basic_to_s_p(d,b)|0)?4:5;break;case 4:_mrb_obj_iv_inspect(f,d,HEAP32[(b|0)>>2]);a=9;break;case 5:a=8==(HEAP32[(b+4|0)>>
2]&255|0)?6:7;break;case 6:_mrb_str_new(f,d,__str1927|0,4);a=9;break;case 7:a=8;break;case 8:_mrb_any_to_s(f,d,b);a=9;break;case 9:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_singleton_class_clone(f,e){var b=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a,d,g,h,i=b,j=b+8,l=b+16;d=f;g=HEAP32[(HEAP32[(e|0)>>2]+4|0)>>2];c=13!=(HEAP32[g>>2]&255|0)?3:4;break;case 3:a=g;c=14;break;case 4:h=_mrb_obj_alloc(d,HEAP32[g>>2]&255,HEAP32[(d+
76|0)>>2]);c=10==(HEAP32[(e+4|0)>>2]&255|0)?6:5;break;case 5:c=13==(HEAP32[(e+4|0)>>2]&255|0)?6:7;break;case 6:HEAP32[(h+4|0)>>2]=h;c=8;break;case 7:c=d;_mrb_obj_value993(i,g);c=_mrb_singleton_class_clone(c,i);HEAP32[(h+4|0)>>2]=c;c=8;break;case 8:var $super=g+20|0,$super12=h+20|0;HEAP32[$super12>>2]=HEAP32[$super>>2];c=0!=(HEAP32[(g+12|0)>>2]|0)?9:10;break;case 9:c=d;_mrb_obj_value993(j,h);_mrb_obj_value993(l,g);_mrb_iv_copy(c,j,l);var c=d,r=h,t=_mrb_intern(d,__str2928|0);_mrb_obj_iv_set(c,r,t,e);
c=10;break;case 10:c=0!=(HEAP32[(g+16|0)>>2]|0)?11:12;break;case 11:c=_kh_copy_mt(d,HEAP32[(g+16|0)>>2]);HEAP32[(h+16|0)>>2]=c;c=13;break;case 12:c=_kh_init_mt(d);HEAP32[(h+16|0)>>2]=c;c=13;break;case 13:a=h;HEAP32[a>>2]=HEAP32[a>>2]&-256|13;a=h;c=14;break;case 14:return d=a,STACKTOP=b,d;default:assert(0,"bad label: "+c)}}_mrb_singleton_class_clone.X=1;
function _mrb_obj_value993(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b,g;g=a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|HEAP32[g>>2]&255;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+
c)}}
function _mrb_obj_clone(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+8;d=e;a=8>=(HEAP32[(b+4|0)>>2]&255|0)?3:4;break;case 3:var a=d,i=_mrb_class_obj_get(d,__str3929|0),j=_mrb_obj_classname(d,b);_mrb_raisef(a,i,__str4930|0,(tempInt=STACKTOP,STACKTOP+=
4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=j,tempInt));a=4;break;case 4:e=d;a=HEAP32[(b+4|0)>>2]&255;i=_mrb_obj_class(d,b);e=_mrb_obj_alloc(e,a,i);a=_mrb_singleton_class_clone(d,b);HEAP32[(e+4|0)>>2]=a;_mrb_obj_value993(h,e);e=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[e>>2]=HEAP32[h>>2];HEAP32[e+4>>2]=HEAP32[h+4>>2];_init_copy(d,g,b);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[f>>2]=HEAP32[g>>2];HEAP32[f+4>>2]=HEAP32[g+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _init_copy(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];a=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c;d=f;a=HEAP32[(b+4|0)>>2]&255;a=9==(a|
0)||10==(a|0)||11==(a|0)||13==(a|0)||16==(a|0)||25==(a|0)?3:4;break;case 3:_mrb_iv_copy(d,e,b);a=5;break;case 4:a=5;break;case 5:_mrb_funcall(g,d,e,__str37963|0,1,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=HEAP32[b>>2],HEAP32[tempInt+4>>2]=HEAP32[b+4>>2],tempInt));STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_obj_dup(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+8;d=e;a=8>=(HEAP32[(b+4|0)>>2]&255|0)?3:4;break;case 3:var a=d,i=_mrb_class_obj_get(d,__str3929|0),j=_mrb_obj_classname(d,b);_mrb_raisef(a,i,__str5931|0,(tempInt=STACKTOP,
STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=j,tempInt));a=4;break;case 4:e=d;a=HEAP32[(b+4|0)>>2]&255;i=_mrb_obj_class(d,b);e=_mrb_obj_alloc(e,a,i);_mrb_obj_value993(h,e);e=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[e>>2]=HEAP32[h>>2];HEAP32[e+4>>2]=HEAP32[h+4>>2];_init_copy(d,g,b);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[g>>2];HEAP32[f+
4>>2]=HEAP32[g+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_obj_extend_m(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c+4;_mrb_get_args(e,__str6932|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=a,tempInt));_mrb_obj_extend(f,e,HEAP32[a>>2],
HEAP32[c>>2],b);STACKTOP=c}
function _mrb_obj_extend(f,e,b,c,a){var d=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=a,a=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[a>>2]=HEAP32[g>>2];HEAP32[a+4>>2]=HEAP32[g+4>>2];for(g=2;;)switch(g){case 2:var h,i,j,l,k=d,n=d+8;h=e;i=b;j=c;g=0==(i|0)?3:4;break;case 3:var g=h,r=_mrb_class_obj_get(h,__str61988|0);_mrb_raise(g,r,__str62989|0);g=4;break;case 4:l=0;g=5;break;case 5:g=(l|
0)<(i|0)?6:8;break;case 6:_mrb_check_type(h,j+(l<<3)|0,11);g=7;break;case 7:l=l+1|0;g=5;break;case 8:g=9;break;case 9:g=i;i=g-1|0;g=0!=(g|0)?10:11;break;case 10:_mrb_funcall(k,h,j+(i<<3)|0,__str63990|0,1,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=HEAP32[a>>2],HEAP32[tempInt+4>>2]=HEAP32[a+4>>2],tempInt));_mrb_funcall(n,h,j+(i<<3)|0,__str64991|0,1,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>
2]=HEAP32[a>>2],HEAP32[tempInt+4>>2]=HEAP32[a+4>>2],tempInt));g=9;break;case 11:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[a>>2];HEAP32[f+4>>2]=HEAP32[a+4>>2];STACKTOP=d;return;default:assert(0,"bad label: "+g)}}_mrb_obj_extend.X=1;
function _mrb_obj_hash(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];b=_mrb_obj_id(b);_mrb_fixnum_value996(f,b);STACKTOP=e}
function _mrb_fixnum_value996(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|3;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_obj_init_copy(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c;d=e;_mrb_get_args(d,__str7933|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));a=0!=(_mrb_obj_equal(d,
b,g)|0)?3:4;break;case 3:var a=f,h=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[h>>2];HEAP32[a+4>>2]=HEAP32[h+4>>2];a=8;break;case 4:a=(HEAP32[(b+4|0)>>2]&255|0)!=(HEAP32[(g+4|0)>>2]&255|0)?6:5;break;case 5:a=_mrb_obj_class(d,b);h=_mrb_obj_class(d,g);a=(a|0)!=(h|0)?6:7;break;case 6:a=d;h=_mrb_class_obj_get(d,__str3929|0);_mrb_raise(a,h,__str8934|0);a=7;break;case 7:a=f;h=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[h>>2];HEAP32[a+4>>2]=HEAP32[h+4>>2];a=8;break;case 8:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_obj_instance_eval(f,e,b){var c=STACKTOP;STACKTOP+=32;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,a=c,g=c+8,h=c+16,i,j=c+24;d=e;a=1==(_mrb_get_args(d,__str9935|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=
a,HEAP32[tempInt+4>>2]=g,tempInt))|0)?3:4;break;case 3:var a=d,l=_mrb_class_obj_get(d,__str10936|0);_mrb_raise(a,l,__str11937|0);a=4;break;case 4:a=HEAP32[(b+4|0)>>2]&255;a=4==(a|0)||3==(a|0)||6==(a|0)?5:6;break;case 5:i=0;a=7;break;case 6:_mrb_singleton_class(j,d,b);i=h;a=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[i>>2]=HEAP32[a>>2];HEAP32[i+4>>2]=HEAP32[a+4>>2];i=HEAP32[(h|0)>>2];a=7;break;case 7:_mrb_yield_internal(f,d,g,0,0,b,i);STACKTOP=c;
return;default:assert(0,"bad label: "+a)}}
function _mrb_obj_is_instance_of(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,a=f;g=b;a=(_mrb_obj_class(a,e)|0)==(g|0)?3:4;break;case 3:d=1;a=5;break;case 4:d=0;a=5;break;case 5:return f=d,STACKTOP=c,f;default:assert(0,"bad label: "+a)}}
function _mrb_obj_ivar_defined(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d=c,a=e;_mrb_get_args(a,__str12938|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=d,tempInt));_check_iv_name(a,
HEAP16[d>>1]);a=0!=(_mrb_obj_iv_defined(a,HEAP32[(b|0)>>2],HEAP16[d>>1])|0)?3:4;break;case 3:_mrb_true_value997(f);a=5;break;case 4:_mrb_false_value998(f);a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _check_iv_name(f,e){var b=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d,g;c=b;a=f;d=e;g=_mrb_sym2name_len(a,d,c);c=2>(HEAP32[c>>2]|0)?5:3;break;case 3:c=64==(HEAP8[g|0]<<24>>24|0)?4:5;break;case 4:c=64!=(HEAP8[g+1|0]<<24>>24|0)?6:5;break;case 5:c=g;_mrb_name_error(a,d,__str60987|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=
c,tempInt));c=6;break;case 6:STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_true_value997(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]=HEAP32[b>>2]&-256|2;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_false_value998(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_obj_ivar_get(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str12938|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_check_iv_name(e,HEAP16[c>>1]);_mrb_iv_get(f,e,b,HEAP16[c>>1]);
STACKTOP=c}
function _mrb_obj_ivar_set(f,e,b){var c=STACKTOP;STACKTOP+=12;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c+4;_mrb_get_args(e,__str13939|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=a,tempInt));_check_iv_name(e,HEAP16[c>>1]);
_mrb_iv_set(e,b,HEAP16[c>>1],a);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[a>>2];HEAP32[f+4>>2]=HEAP32[a+4>>2];STACKTOP=c}
function _mrb_obj_is_kind_of_m(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d=c,a=e;_mrb_get_args(a,__str7933|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=d,tempInt));a=0!=(_mrb_obj_is_kind_of(a,
b,HEAP32[(d|0)>>2])|0)?3:4;break;case 3:_mrb_true_value997(f);a=5;break;case 4:_mrb_false_value998(f);a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _class_instance_method_list(f,e,b,c,a){c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d;for(d=2;;)switch(d){case 2:var g,h,i=c,j,l,k=c+8,n=c+16;g=e;d=b;h=a;d=0==(d|0)?3:4;break;case 3:j=1;d=5;break;case 4:_mrb_get_args(g,__str7933|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=k,tempInt));j=0!=(HEAP32[(k+4|0)>>2]&255|0)&1;d=5;break;case 5:_mrb_ary_new(n,g);l=
i;d=n;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[l>>2]=HEAP32[d>>2];HEAP32[l+4>>2]=HEAP32[d+4>>2];l=0;d=6;break;case 6:if(0!=(h|0))d=7;else{var r=0;d=8}break;case 7:r=(h|0)!=(l|0);d=8;break;case 8:d=r?9:16;break;case 9:_method_entry_loop(g,h,i);d=12==(HEAP32[h>>2]&255|0)?11:10;break;case 10:d=13==(HEAP32[h>>2]&255|0)?11:12;break;case 11:d=15;break;case 12:d=0!=(j|0)?14:13;break;case 13:d=16;break;case 14:d=15;break;case 15:l=h;var $super=h+20|0;h=
HEAP32[$super>>2];d=6;break;case 16:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[i>>2];HEAP32[f+4>>2]=HEAP32[i+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+d)}}_class_instance_method_list.X=1;
function _method_entry_loop(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i=c;d=f;h=HEAP32[(e+16|0)>>2];a=0!=(h|0)?4:3;break;case 3:a=11;break;case 4:g=0;a=5;break;case 5:a=g>>>0<HEAP32[(h|0)>>2]>>>0?6:11;break;case 6:a=0!=(HEAP8[HEAP32[(h+16|
0)>>2]+Math.floor((g>>>0)/8)|0]&255&HEAP8[___m986+(g>>>0)%8|0]&255|0)?9:7;break;case 7:a=0!=(HEAP8[HEAP32[(h+20|0)>>2]+Math.floor((g>>>0)/8)|0]&255&HEAP8[___m986+(g>>>0)%8|0]&255|0)?9:8;break;case 8:a=d;_mrb_symbol_value1005(i,HEAP16[(HEAP32[(h+24|0)>>2]+(g<<1)|0)>>1]);_mrb_ary_push(a,b,i);a=9;break;case 9:a=10;break;case 10:g=g+1|0;a=5;break;case 11:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_method_entry_loop.X=1;
function _mrb_obj_singleton_methods(f,e,b,c,a){var d=STACKTOP;STACKTOP+=32;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=a,a=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[a>>2]=HEAP32[g>>2];HEAP32[a+4>>2]=HEAP32[g+4>>2];for(g=2;;)switch(g){case 2:var h,i,j=d,l=d+8,k,n=d+16,r=d+24;h=e;g=b;i=c;g=0==(g|0)?3:4;break;case 3:_mrb_true_value997(n);var g=j,t=n;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[g>>2]=HEAP32[t>>2];HEAP32[g+4>>2]=HEAP32[t+4>>2];g=5;break;case 4:g=j;t=i|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[t>>2];HEAP32[g+4>>2]=HEAP32[t+4>>2];g=5;break;case 5:k=_mrb_class992(h,a);_mrb_ary_new(r,h);g=l;t=r;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[t>>2];HEAP32[g+4>>2]=HEAP32[t+4>>2];g=0!=(k|0)?6:8;break;case 6:g=13==(HEAP32[k>>2]&255|0)?7:8;break;case 7:_method_entry_loop(h,
k,l);var $super=k+20|0;k=HEAP32[$super>>2];g=8;break;case 8:g=0!=(HEAP32[(j+4|0)>>2]&255|0)?9:17;break;case 9:g=10;break;case 10:if(0!=(k|0))g=11;else var q=0,g=14;break;case 11:if(13==(HEAP32[k>>2]&255|0))var v=1,g=13;else g=12;break;case 12:v=12==(HEAP32[k>>2]&255|0);g=13;break;case 13:q=v;g=14;break;case 14:g=q?15:16;break;case 15:_method_entry_loop(h,k,l);var $super13=k+20|0;k=HEAP32[$super13>>2];g=10;break;case 16:g=17;break;case 17:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[f>>2]=HEAP32[l>>2];HEAP32[f+4>>2]=HEAP32[l+4>>2];STACKTOP=d;return;default:assert(0,"bad label: "+g)}}_mrb_obj_singleton_methods.X=1;
function _mrb_obj_methods(f,e,b,c,a){var d=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=a,a=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[a>>2]=HEAP32[g>>2];HEAP32[a+4>>2]=HEAP32[g+4>>2];for(g=2;;)switch(g){case 2:var h,i,j,l=d;h=e;i=b;j=c;g=3;break;case 3:g=0==(i|0)?4:5;break;case 4:var g=h,k=i,n=j,r=_mrb_class992(h,a);_class_instance_method_list(f,g,k,n,r,0);g=8;break;case 5:g=l;k=j|0;assert(!0,
"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[k>>2];HEAP32[g+4>>2]=HEAP32[k+4>>2];g=0!=(HEAP32[(l+4|0)>>2]&255|0)?6:7;break;case 6:i=0;g=3;break;case 7:_mrb_obj_singleton_methods(f,h,i,j,a);g=8;break;case 8:STACKTOP=d;return;default:assert(0,"bad label: "+g)}}
function _mrb_obj_methods_m(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c+4;_mrb_get_args(e,__str6932|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=a,tempInt));_mrb_obj_methods(f,e,HEAP32[a>>
2],HEAP32[c>>2],b,0);STACKTOP=c}function _mrb_false(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];_mrb_false_value998(f);STACKTOP=e}
function _mrb_obj_private_methods(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c+4;_mrb_get_args(e,__str6932|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=a,tempInt));_mrb_obj_methods(f,e,HEAP32[a>>
2],HEAP32[c>>2],b,2);STACKTOP=c}
function _mrb_obj_protected_methods(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c+4;_mrb_get_args(e,__str6932|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=a,tempInt));_mrb_obj_methods(f,e,HEAP32[a>>
2],HEAP32[c>>2],b,4);STACKTOP=c}
function _mrb_obj_public_methods(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c+4;_mrb_get_args(e,__str6932|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=a,tempInt));_mrb_obj_methods(f,e,HEAP32[a>>
2],HEAP32[c>>2],b,0);STACKTOP=c}
function _mrb_f_raise(f,e,b){var c=STACKTOP;STACKTOP+=56;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(b=2;;)switch(b){case 2:var d,g=c,h=c+16,i,j=c+24,l=c+32,k=c+40,n=c+48;d=e;i=g|0;b=g+8|0;b=i=_mrb_get_args(d,__str14940|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=i,HEAP32[tempInt+4>>2]=b,tempInt));b=0==(b|0)?3:1==(b|0)?4:8;break;case 3:b=d;a=_mrb_class_obj_get(d,__str15941|0);_mrb_raise(b,a,__str16942|0);b=9;break;case 4:b=g+8|0;_mrb_check_string_type(j,d,g|0);a=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=0==(HEAP32[((g+8|0)+4|0)>>2]&255|0)?5:6;break;case 5:b=0!=(HEAP32[(g+8|0)>>2]|0)?6:7;break;case 6:i=2;b=g|0;a=_mrb_class_obj_get(d,__str15941|
0);_mrb_obj_value993(l,a);a=l;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=7;break;case 7:b=8;break;case 8:_mrb_make_exception(k,d,i,g|0);b=h;a=k;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];var b=d,a=HEAP32[(h|0)>>2],r=_mrb_intern(d,__str17943|0);_mrb_voidp_value1001(n,HEAP32[(HEAP32[(d+20|0)>>2]+20|0)>>
2]);_mrb_obj_iv_set(b,a,r,n);_mrb_exc_raise(d,h);b=9;break;case 9:_mrb_nil_value1002(f);STACKTOP=c;return;default:assert(0,"bad label: "+b)}}_mrb_f_raise.X=1;
function _mrb_voidp_value1001(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|7;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_nil_value1002(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_obj_remove_instance_variable(f,e,b){var c=STACKTOP;STACKTOP+=20;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+4,i=c+12;d=e;_mrb_get_args(d,__str12938|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,
tempInt));_check_iv_name(d,HEAP16[g>>1]);_mrb_iv_remove(i,d,b,HEAP16[g>>1]);a=h;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[i>>2];HEAP32[a+4>>2]=HEAP32[i+4>>2];a=5==(HEAP32[(h+4|0)>>2]&255|0)?3:4;break;case 3:var a=d,i=HEAP16[g>>1],j=_mrb_sym2name(d,HEAP16[g>>1]);_mrb_name_error(a,i,__str18944|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=j,tempInt));a=4;break;case 4:assert(!0,
"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[h>>2];HEAP32[f+4>>2]=HEAP32[h+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _obj_respond_to(f,e,b){var c=STACKTOP;STACKTOP+=32;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,a=c+4,h=c+8,i=c+16,j=c+24;d=e;_mrb_get_args(d,__str6932|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,HEAP32[tempInt+
4>>2]=a,tempInt));var l=h,k=HEAP32[g>>2]|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[l>>2]=HEAP32[k>>2];HEAP32[l+4>>2]=HEAP32[k+4>>2];a=1<(HEAP32[a>>2]|0)?3:4;break;case 3:a=i;l=HEAP32[g>>2]+8|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+4>>2]=HEAP32[l+4>>2];a=5;break;case 4:_mrb_nil_value1002(j);a=i;l=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+4>>2]=HEAP32[l+4>>2];a=5;break;case 5:a=_mrb_to_id(d,h);a=0!=(_basic_obj_respond_to(d,b,a,(0!=(HEAP32[(i+4|0)>>2]&255|0)^1)&1)|0)?6:7;break;case 6:_mrb_true_value997(f);a=8;break;case 7:_mrb_false_value998(f);a=8;break;case 8:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_obj_respond_to.X=1;
function _basic_obj_respond_to(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];f=_mrb_respond_to(f,e,b);STACKTOP=c;return f}
function _mrb_obj_singleton_methods_m(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c+4;_mrb_get_args(e,__str6932|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=a,tempInt));_mrb_obj_singleton_methods(f,
e,HEAP32[a>>2],HEAP32[c>>2],b);STACKTOP=c}
function _mrb_init_kernel(f){var e=_mrb_define_module(f,__str19945|0);HEAP32[(f+124|0)>>2]=e;_mrb_define_class_method(f,e,__str20946|0,396,0);_mrb_define_class_method(f,e,__str21947|0,54,0);_mrb_define_class_method(f,e,__str22948|0,396,0);_mrb_define_class_method(f,e,__str23949|0,190,8192);_mrb_define_method(f,e,__str24950|0,112,0);_mrb_define_method(f,e,__str25951|0,20,524288);_mrb_define_method(f,e,__str26952|0,352,524288);_mrb_define_method(f,e,__str27953|0,274,524288);_mrb_define_method(f,e,__str28954|
0,102,0);_mrb_define_method(f,e,__str29955|0,452,8192);_mrb_define_method(f,e,__str20946|0,396,0);_mrb_define_method(f,e,__str30956|0,216,0);_mrb_define_method(f,e,__str31957|0,178,0);_mrb_define_method(f,e,__str32958|0,322,0);_mrb_define_method(f,e,__str33959|0,20,524288);_mrb_define_method(f,e,__str34960|0,20,524288);_mrb_define_method(f,e,__str35961|0,404,8192);_mrb_define_method(f,e,__str21947|0,54,0);_mrb_define_method(f,e,__str36962|0,588,0);_mrb_define_method(f,e,__str37963|0,618,524288);_mrb_define_method(f,
e,__str38964|0,624,0);_mrb_define_method(f,e,__str39965|0,364,8192);_mrb_define_method(f,e,__str40966|0,472,524288);_mrb_define_method(f,e,__str41967|0,612,524288);_mrb_define_method(f,e,__str42968|0,242,524288);_mrb_define_method(f,e,__str43969|0,162,1048576);_mrb_define_method(f,e,__str44970|0,502,0);_mrb_define_method(f,e,__str45971|0,492,524288);_mrb_define_method(f,e,__str22948|0,396,0);_mrb_define_method(f,e,__str46972|0,492,524288);_mrb_define_method(f,e,__str47973|0,434,8192);_mrb_define_method(f,
e,__str48974|0,370,0);_mrb_define_method(f,e,__str49975|0,102,0);_mrb_define_method(f,e,__str50976|0,554,8192);_mrb_define_method(f,e,__str51977|0,246,8192);_mrb_define_method(f,e,__str52978|0,540,8192);_mrb_define_method(f,e,__str23949|0,190,8192);_mrb_define_method(f,e,__str53979|0,610,524288);_mrb_define_method(f,e,__str54980|0,550,8192);_mrb_define_method(f,e,__str55981|0,452,8192);_mrb_define_method(f,e,__str56982|0,82,8192);_mrb_define_method(f,e,__str926|0,94,0);_mrb_define_method(f,e,__str57983|
0,140,8192);_mrb_define_method(f,e,__str58984|0,140,8192);_mrb_include_module(f,HEAP32[(f+72|0)>>2],HEAP32[(f+124|0)>>2]);var e=HEAP32[(f+80|0)>>2],b=_mrb_intern(f,__str32958|0),c=_mrb_intern(f,__str31957|0);_mrb_alias_method(f,e,b,c)}_mrb_init_kernel.X=1;
function _mrb_f_block_given_p_m(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(b=2;;)switch(b){case 2:var d,g,h;d=e;g=HEAP32[(d+20|0)>>2];h=(HEAP32[(d+12|0)>>2]+(HEAP32[(g+8|0)>>2]<<3)|0)+8|0;g=g-44|0;b=g>>>0<=HEAP32[(d+24|0)>>2]>>>0?3:4;break;case 3:_mrb_false_value998(f);b=17;break;case 4:b=
0!=(HEAP32[(HEAP32[(g+4|0)>>2]+20|0)>>2]|0)?5:11;break;case 5:b=0!=(HEAP32[(HEAP32[(HEAP32[(g+4|0)>>2]+20|0)>>2]+12|0)>>2]|0)?6:11;break;case 6:b=(HEAP32[(HEAP32[(HEAP32[(g+4|0)>>2]+20|0)>>2]+12|0)>>2]|0)==(HEAP32[(d+12|0)>>2]|0)?9:7;break;case 7:b=0==(HEAP32[((HEAP32[(HEAP32[(HEAP32[(g+4|0)>>2]+20|0)>>2]+12|0)>>2]+8|0)+4|0)>>2]&255|0)?8:10;break;case 8:b=0!=(HEAP32[(HEAP32[(HEAP32[(HEAP32[(g+4|0)>>2]+20|0)>>2]+12|0)>>2]+8|0)>>2]|0)?10:9;break;case 9:_mrb_false_value998(f);b=17;break;case 10:_mrb_true_value997(f);
b=17;break;case 11:b=0<(HEAP32[(g+16|0)>>2]|0)?12:13;break;case 12:h=h+(HEAP32[(g+16|0)>>2]<<3)|0;b=13;break;case 13:b=0==(HEAP32[(h+4|0)>>2]&255|0)?14:16;break;case 14:b=0!=(HEAP32[(h|0)>>2]|0)?16:15;break;case 15:_mrb_false_value998(f);b=17;break;case 16:_mrb_true_value997(f);b=17;break;case 17:STACKTOP=c;return;default:assert(0,"bad label: "+b)}}_mrb_f_block_given_p_m.X=1;
function _mrb_obj_equal_m(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d=c,a=e;_mrb_get_args(a,__str7933|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=d,tempInt));a=0!=(_mrb_obj_equal(a,
b,d)|0)?3:4;break;case 3:_mrb_true_value997(f);a=5;break;case 4:_mrb_false_value998(f);a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_obj_not_equal_m(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d=c,a=e;_mrb_get_args(a,__str7933|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=d,tempInt));a=0!=(_mrb_equal(a,
b,d)|0)?3:4;break;case 3:_mrb_false_value998(f);a=5;break;case 4:_mrb_true_value997(f);a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_equal_m(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d=c,a=e;_mrb_get_args(a,__str7933|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=d,tempInt));a=0!=(_mrb_equal(a,b,d)|0)?
3:4;break;case 3:_mrb_true_value997(f);a=5;break;case 4:_mrb_false_value998(f);a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}function _mrb_obj_id_m(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];b=_mrb_obj_id(b);_mrb_fixnum_value996(f,b);STACKTOP=e}
function _mrb_f_send(f,e,b){var c=STACKTOP;STACKTOP+=20;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];var a=c+4,d=c+12,g=c+16;_mrb_get_args(e,__str59985|0,(tempInt=STACKTOP,STACKTOP+=16,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=d,HEAP32[tempInt+8>>2]=g,HEAP32[tempInt+
12>>2]=a,tempInt));_mrb_funcall_with_block(f,e,b,HEAP16[c>>1],HEAP32[g>>2],HEAP32[d>>2],a);STACKTOP=c}function _mrb_obj_class_m(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];e=_mrb_obj_class(e,b);_mrb_obj_value993(f,e);STACKTOP=c}
function _obj_is_instance_of(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d=c,a=e;_mrb_get_args(a,__str7933|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=d,tempInt));a=0!=(_mrb_obj_is_instance_of(a,
b,HEAP32[(d|0)>>2])|0)?3:4;break;case 3:_mrb_true_value997(f);a=5;break;case 4:_mrb_false_value998(f);a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_symbol_value1005(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|4;HEAP16[(d|0)>>1]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_init_math(f){var e=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b,c=e+8,a=e+16;b=_mrb_define_module(f,__str1006|0);_mrb_float_value1040(e,3.1415927410125732);_mrb_define_const(f,b,__str11007|0,e);_mrb_float_value1040(c,2.7182817459106445);_mrb_define_const(f,b,__str21008|0,c);_mrb_float_value1040(a,9.999999747378752E-6);_mrb_define_const(f,b,__str31009|0,a);_mrb_define_module_function(f,b,__str41010|0,450,524288);
_mrb_define_module_function(f,b,__str51011|0,308,524288);_mrb_define_module_function(f,b,__str61012|0,60,524288);_mrb_define_module_function(f,b,__str71013|0,258,524288);_mrb_define_module_function(f,b,__str81014|0,436,524288);_mrb_define_module_function(f,b,__str91015|0,22,524288);_mrb_define_module_function(f,b,__str101016|0,570,1048576);_mrb_define_module_function(f,b,__str111017|0,38,524288);_mrb_define_module_function(f,b,__str121018|0,582,524288);_mrb_define_module_function(f,b,__str131019|
0,376,524288);_mrb_define_module_function(f,b,__str141020|0,566,524288);_mrb_define_module_function(f,b,__str151021|0,594,524288);_mrb_define_module_function(f,b,__str161022|0,232,524288);_mrb_define_module_function(f,b,__str171023|0,192,524288);_mrb_define_module_function(f,b,__str181024|0,460,540672);_mrb_define_module_function(f,b,__str191025|0,562,524288);_mrb_define_module_function(f,b,__str201026|0,28,524288);_mrb_define_module_function(f,b,__str211027|0,580,524288);_mrb_define_module_function(f,
b,__str221028|0,212,524288);_mrb_define_module_function(f,b,__str231029|0,354,524288);_mrb_define_module_function(f,b,__str241030|0,176,1048576);_mrb_define_module_function(f,b,__str251031|0,104,1048576);_mrb_define_module_function(f,b,__str261032|0,252,524288);_mrb_define_module_function(f,b,__str271033|0,268,524288);STACKTOP=e}_mrb_init_math.X=1;
function _mrb_float_value1040(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|6;HEAPF32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _math_sin(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str281034|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));e=_sin(HEAPF32[c>>2]);HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>
2]);STACKTOP=c}
function _math_cos(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str281034|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));e=_cos(HEAPF32[c>>2]);HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>
2]);STACKTOP=c}
function _math_tan(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str281034|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));e=_tan(HEAPF32[c>>2]);HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>
2]);STACKTOP=c}
function _math_asin(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str281034|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));e=_asin(HEAPF32[c>>2]);HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>
2]);STACKTOP=c}
function _math_acos(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str281034|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));e=_acos(HEAPF32[c>>2]);HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>
2]);STACKTOP=c}
function _math_atan(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str281034|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));e=_atan(HEAPF32[c>>2]);HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>
2]);STACKTOP=c}
function _math_atan2(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=c+4;_mrb_get_args(e,__str291035|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=b,tempInt));e=_atan2(HEAPF32[c>>2],HEAPF32[b>>2]);
HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>2]);STACKTOP=c}
function _math_sinh(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str281034|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));e=_sinh(HEAPF32[c>>2]);HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>
2]);STACKTOP=c}
function _math_cosh(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str281034|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));e=_cosh(HEAPF32[c>>2]);HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>
2]);STACKTOP=c}
function _math_tanh(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str281034|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));e=_tanh(HEAPF32[c>>2]);HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>
2]);STACKTOP=c}
function _math_asinh(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str281034|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));e=_asinh(HEAPF32[c>>2]);HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>
2]);STACKTOP=c}
function _math_acosh(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str281034|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));e=_acosh(HEAPF32[c>>2]);HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>
2]);STACKTOP=c}
function _math_atanh(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str281034|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));e=_atanh(HEAPF32[c>>2]);HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>
2]);STACKTOP=c}
function _math_exp(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str281034|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));e=_exp(HEAPF32[c>>2]);HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>
2]);STACKTOP=c}
function _math_log(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(b=2;;)switch(b){case 2:var d=c,g=c+4,b=_mrb_get_args(e,__str311037|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=d,HEAP32[tempInt+4>>2]=g,tempInt)),a=
_log(HEAPF32[d>>2]);HEAPF32[d>>2]=a;b=2==(b|0)?3:4;break;case 3:b=_log(HEAPF32[g>>2]);HEAPF32[d>>2]/=b;b=4;break;case 4:_mrb_float_value1040(f,HEAPF32[d>>2]);STACKTOP=c;return;default:assert(0,"bad label: "+b)}}
function _math_log2(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str281034|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));e=_log(HEAPF32[c>>2])/0.6931471805599453;HEAPF32[c>>2]=e;_mrb_float_value1040(f,
HEAPF32[c>>2]);STACKTOP=c}
function _math_log10(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str281034|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));e=_log10(HEAPF32[c>>2]);HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>
2]);STACKTOP=c}
function _math_sqrt(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str281034|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));e=_sqrt(HEAPF32[c>>2]);HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>
2]);STACKTOP=c}
function _math_cbrt(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str281034|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));e=_cbrt(HEAPF32[c>>2]);HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>
2]);STACKTOP=c}
function _math_frexp(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];var b=c+4,a=c+8,d=c+16;_mrb_get_args(e,__str281034|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));var g=_frexp(HEAPF32[c>>2],b);HEAPF32[c>>
2]=g;_mrb_float_value1040(a,HEAPF32[c>>2]);_mrb_fixnum_value1041(d,HEAP32[b>>2]);_mrb_assoc_new(f,e,a,d);STACKTOP=c}
function _math_ldexp(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=c+4;_mrb_get_args(e,__str301036|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=b,tempInt));e=_ldexp(HEAPF32[c>>2],HEAP32[b>>2]);
HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>2]);STACKTOP=c}
function _math_hypot(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=c+4;_mrb_get_args(e,__str291035|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=b,tempInt));e=_hypot(HEAPF32[c>>2],HEAPF32[b>>2]);
HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>2]);STACKTOP=c}
function _math_erf(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str281034|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));e=_erf(HEAPF32[c>>2]);HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>
2]);STACKTOP=c}
function _math_erfc(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str281034|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));e=_erfc(HEAPF32[c>>2]);HEAPF32[c>>2]=e;_mrb_float_value1040(f,HEAPF32[c>>
2]);STACKTOP=c}
function _mrb_fixnum_value1041(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|3;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_num_div(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];b=_mrb_to_flo(e,b);e=_mrb_to_flo(e,c);_mrb_float_value1101(f,b/e);STACKTOP=a}
function _mrb_float_value1101(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|6;HEAPF32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_to_flo(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a,d;d=f;c=HEAP32[(e+4|0)>>2]&255;c=3==(c|0)?3:6==(c|0)?4:5;break;case 3:a=HEAP32[(e|0)>>2]|0;c=7;break;case 4:c=6;break;case 5:var c=d,g=_mrb_class_obj_get(d,__str531095|0);_mrb_raise(c,g,__str581100|
0);c=6;break;case 6:a=HEAPF32[(e|0)>>2];c=7;break;case 7:return STACKTOP=b,a;default:assert(0,"bad label: "+c)}}
function _mrb_fixnum_mul(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i,j;g=e;h=HEAP32[(b|0)>>2];d=0==(h|0)?3:4;break;
case 3:var d=f,l=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[l>>2];HEAP32[d+4>>2]=HEAP32[l+4>>2];d=15;break;case 4:d=3==(HEAP32[(c+4|0)>>2]&255|0)?5:14;break;case 5:i=HEAP32[(c|0)>>2];d=32768>(h|0)?6:10;break;case 6:d=-32768<=(h|0)?7:10;break;case 7:d=32768>(i|0)?8:10;break;case 8:d=-32768<=(i|0)?9:10;break;case 9:_mrb_fixnum_value1102(f,h*i|0);d=15;break;case 10:j=h*i|0;d=0!=(h|0)?11:13;break;case 11:d=((j|0)/(h|0)&-1|0)!=(i|0)?12:
13;break;case 12:_mrb_float_value1101(f,(h|0)*(i|0));d=15;break;case 13:_mrb_fixnum_value1102(f,j);d=15;break;case 14:d=h|0;l=_mrb_to_flo(g,c);_mrb_float_value1101(f,d*l);d=15;break;case 15:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_mrb_fixnum_mul.X=1;
function _mrb_fixnum_value1102(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|3;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_flt2big(f,e,b){e=_flt2big(e,b);_mrb_fixnum_value1102(f,e)}function _flt2big(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;b=1==(___fpclassifyf(a)|0)?3:4;break;case 3:b=c;var d=_mrb_class_obj_get(c,__str551097|0);_mrb_raise(b,d,0>a?__str561098|0:__str571099|0);b=4;break;case 4:b=0==(___fpclassifyf(a)|0)?5:6;break;case 5:b=c;d=_mrb_class_obj_get(c,__str551097|0);_mrb_raise(b,d,__str421084|0);b=6;break;case 6:return c=a&-1;default:assert(0,"bad label: "+b)}}
function _mrb_fixnum_plus(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i,j;g=e;h=HEAP32[(b|0)>>2];d=0==(h|0)?3:4;break;
case 3:var d=f,l=c;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[l>>2];HEAP32[d+4>>2]=HEAP32[l+4>>2];d=10;break;case 4:d=3==(HEAP32[(c+4|0)>>2]&255|0)?5:9;break;case 5:i=HEAP32[(c|0)>>2];j=h+i|0;d=0==(0>(h|0)&1^0>(i|0)&1|0)?6:8;break;case 6:d=(0>(h|0)&1|0)!=(0>(j|0)&1|0)?7:8;break;case 7:_mrb_float_value1101(f,(h|0)+(i|0));d=10;break;case 8:_mrb_fixnum_value1102(f,j);d=10;break;case 9:d=h|0;l=_mrb_to_flo(g,c);_mrb_float_value1101(f,d+l);
d=10;break;case 10:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_mrb_fixnum_plus.X=1;
function _mrb_fixnum_minus(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i,j;g=e;h=HEAP32[(b|0)>>2];d=3==(HEAP32[(c+
4|0)>>2]&255|0)?3:7;break;case 3:i=HEAP32[(c|0)>>2];j=h-i|0;d=0!=(0>(h|0)&1^0>(i|0)&1|0)?4:6;break;case 4:d=(0>(h|0)&1|0)!=(0>(j|0)&1|0)?5:6;break;case 5:_mrb_float_value1101(f,(h|0)-(i|0));d=8;break;case 6:_mrb_fixnum_value1102(f,j);d=8;break;case 7:var d=h|0,l=_mrb_to_flo(g,c);_mrb_float_value1101(f,d-l);d=8;break;case 8:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_mrb_fixnum_minus.X=1;
function _mrb_fix2str(f,e,b,c){var a=STACKTOP;STACKTOP+=64;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i=a,j,l;g=e;h=c;i=(i|0)+64|0;j=HEAP32[(b|0)>>2];l=0;d=2>(h|0)?4:3;break;case 3:d=36<(h|0)?4:5;break;case 4:var d=g,k=_mrb_class_obj_get(g,__str1042|0),n=h;_mrb_raisef(d,k,__str11043|
0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=n,tempInt));d=5;break;case 5:d=0==(j|0)?6:7;break;case 6:_mrb_str_new(f,g,__str21044|0,1);d=22;break;case 7:d=0>(j|0)?8:9;break;case 8:j=-j|0;l=1;d=9;break;case 9:i=d=i-1|0;HEAP8[d]=0;d=0!=(l|0)?10:15;break;case 10:d=0>(j|0)?11:15;break;case 11:d=12;break;case 12:d=_abs((j|0)%(h|0));d=HEAP8[_mrb_digitmap+d|0];i=k=i-1|0;HEAP8[k]=d;d=13;break;case 13:j=d=(j|0)/(h|0)&-1;d=0!=(d|0)?12:14;break;
case 14:d=19;break;case 15:d=16;break;case 16:d=HEAP8[_mrb_digitmap+(j|0)%(h|0)|0];i=k=i-1|0;HEAP8[k]=d;d=17;break;case 17:j=d=(j|0)/(h|0)&-1;d=0!=(d|0)?16:18;break;case 18:d=19;break;case 19:d=0!=(l|0)?20:21;break;case 20:i=d=i-1|0;HEAP8[d]=45;d=21;break;case 21:_mrb_str_new2(f,g,i);d=22;break;case 22:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_mrb_fix2str.X=1;
function _mrb_init_numeric(f){var e;e=_mrb_define_class(f,__str31045|0,HEAP32[(f+72|0)>>2]);var b=_mrb_class_get(f,__str41046|0);_mrb_include_module(f,e,b);_mrb_define_method(f,e,__str51047|0,230,524288);_mrb_define_method(f,e,__str61048|0,442,524288);_mrb_define_method(f,e,__str71049|0,184,524288);_mrb_define_method(f,e,__str81050|0,138,524288);_mrb_define_method(f,e,__str91051|0,138,524288);_mrb_define_method(f,e,__str101052|0,238,0);_mrb_define_method(f,e,__str111053|0,462,524288);b=_mrb_define_class(f,
__str121054|0,e);b=_mrb_define_class(f,__str131055|0,b);HEAP32[(f+104|0)>>2]=b;_mrb_undef_class_method(f,b,__str141056|0);_mrb_define_method(f,b,__str151057|0,458,524288);_mrb_define_method(f,b,__str161058|0,298,524288);_mrb_define_method(f,b,__str61048|0,556,524288);_mrb_define_method(f,b,__str171059|0,74,524288);_mrb_define_method(f,b,__str181060|0,214,524288);_mrb_define_method(f,b,__str191061|0,480,524288);_mrb_define_method(f,b,__str201062|0,428,0);_mrb_define_method(f,b,__str211063|0,146,524288);
_mrb_define_method(f,b,__str221064|0,64,524288);_mrb_define_method(f,b,__str231065|0,486,524288);_mrb_define_method(f,b,__str241066|0,186,524288);_mrb_define_method(f,b,__str251067|0,66,524288);_mrb_define_method(f,b,__str261068|0,124,0);_mrb_define_method(f,b,__str271069|0,362,524288);_mrb_define_method(f,b,__str281070|0,490,0);_mrb_define_method(f,b,__str291071|0,332,0);_mrb_define_method(f,b,__str301072|0,576,0);_mrb_define_method(f,b,__str311073|0,338,8192);_mrb_define_method(f,b,__str321074|
0,374,0);_mrb_define_method(f,b,__str331075|0,68,0);_mrb_define_method(f,b,__str341076|0,124,0);_mrb_define_method(f,b,__str351077|0,44,0);_mrb_define_method(f,b,__str361078|0,44,0);_mrb_define_method(f,b,__str371079|0,124,0);_mrb_define_method(f,b,__str381080|0,198,524288);e=_mrb_define_class(f,__str391081|0,e);HEAP32[(f+100|0)>>2]=e;_mrb_undef_class_method(f,e,__str141056|0);_mrb_define_method(f,e,__str151057|0,538,524288);_mrb_define_method(f,e,__str161058|0,558,524288);_mrb_define_method(f,e,
__str171059|0,596,524288);_mrb_define_method(f,e,__str181060|0,260,524288);_mrb_define_method(f,e,__str191061|0,314,524288);_mrb_define_method(f,e,__str261068|0,334,0);_mrb_define_method(f,e,__str401082|0,412,0);_mrb_define_method(f,e,__str281070|0,402,0);_mrb_define_method(f,e,__str411083|0,414,0);_mrb_define_method(f,e,__str311073|0,424,8192);_mrb_define_method(f,e,__str331075|0,18,0);_mrb_define_method(f,e,__str341076|0,98,0);_mrb_define_method(f,e,__str371079|0,98,0);_mrb_define_method(f,e,__str351077|
0,30,0);_mrb_define_method(f,e,__str361078|0,30,0)}_mrb_init_numeric.X=1;function _num_uplus(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=e}
function _num_uminus(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];e=-_mrb_to_flo(e,b);_mrb_float_value1101(f,e);STACKTOP=c}
function _num_pow(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h,i;d=e;h=0;_mrb_get_args(d,__str471089|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));a=3==(HEAP32[(b+4|0)>>
2]&255|0)?3:5;break;case 3:a=3==(HEAP32[(g+4|0)>>2]&255|0)?4:5;break;case 4:h=1;a=5;break;case 5:i=_mrb_to_flo(d,b);a=_mrb_to_flo(d,g);i=_llvm_pow_f64(i,a);a=0!=(h|0)?6:9;break;case 6:a=2147483648>=i?7:9;break;case 7:a=-2147483648<=i?8:9;break;case 8:_mrb_fixnum_value1102(f,i&-1);a=10;break;case 9:_mrb_float_value1101(f,i);a=10;break;case 10:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_num_pow.X=1;
function _num_div(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str501092|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));e=_mrb_to_flo(e,b);_mrb_float_value1101(f,e/HEAPF32[c>>2]);STACKTOP=
c}
function _num_abs(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=e;a=0>_mrb_to_flo(d,b)?3:4;break;case 3:_num_uminus(f,d,b);a=5;break;case 4:var a=f,g=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[g>>2];
HEAP32[a+4>>2]=HEAP32[g+4>>2];a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _num_cmp(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h;d=e;_mrb_get_args(d,__str471089|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));d=_mrb_to_flo(d,b);a=HEAP32[(g+
4|0)>>2]&255;a=3==(a|0)?3:6==(a|0)?4:5;break;case 3:h=HEAP32[(g|0)>>2]|0;a=6;break;case 4:h=HEAPF32[(g|0)>>2];a=6;break;case 5:_mrb_nil_value1105(f);a=11;break;case 6:a=d>h?7:8;break;case 7:_mrb_fixnum_value1102(f,1);a=11;break;case 8:a=d<h?9:10;break;case 9:_mrb_fixnum_value1102(f,-1);a=11;break;case 10:_mrb_fixnum_value1102(f,0);a=11;break;case 11:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _fix_plus(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str471089|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_mrb_fixnum_plus(f,e,b,c);STACKTOP=c}
function _fix_minus(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str471089|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_mrb_fixnum_minus(f,e,b,c);STACKTOP=c}
function _fix_uminus(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];_mrb_fixnum_value1102(f,-HEAP32[(b|0)>>2]|0);STACKTOP=e}
function _fix_mul(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str471089|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_mrb_fixnum_mul(f,e,b,c);STACKTOP=c}
function _fix_mod(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h,i=c+8,j=c+12;d=e;_mrb_get_args(d,__str471089|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));h=HEAP32[(b|
0)>>2];a=3==(HEAP32[(g+4|0)>>2]&255|0)?3:7;break;case 3:a=0!=(HEAP32[(g|0)>>2]|0)?4:7;break;case 4:a=0==(HEAP32[(g|0)>>2]|0)?5:6;break;case 5:a=_strtof(__str491091|0,0);_mrb_float_value1101(f,a);a=8;break;case 6:_fixdivmod(d,h,HEAP32[(g|0)>>2],0,i);_mrb_fixnum_value1102(f,HEAP32[i>>2]);a=8;break;case 7:var a=d,l=h|0,k=_mrb_to_flo(d,g);_flodivmod(a,l,k,0,j);_mrb_float_value1101(f,HEAPF32[j>>2]);a=8;break;case 8:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_fix_mod.X=1;
function _fix_equal(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d=c,a=e;_mrb_get_args(a,__str471089|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=d,tempInt));a=0!=(_mrb_obj_equal(a,b,d)|
0)?3:4;break;case 3:_mrb_true_value1107(f);a=10;break;case 4:a=HEAP32[(d+4|0)>>2]&255;a=6==(a|0)?5:3==(a|0)?8:9;break;case 5:a=(HEAP32[(b|0)>>2]|0)==HEAPF32[(d|0)>>2]?6:7;break;case 6:_mrb_true_value1107(f);a=10;break;case 7:a=8;break;case 8:a=9;break;case 9:_mrb_false_value1106(f);a=10;break;case 10:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _fix_rev(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];b=HEAP32[(b|0)>>2];_mrb_fixnum_value1102(f,b^-1);STACKTOP=e}
function _fix_and(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c+8;_mrb_get_args(e,__str471089|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_bit_coerce(a,e,c);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[c>>2]=HEAP32[a>>2];HEAP32[c+4>>2]=HEAP32[a+4>>2];_mrb_fixnum_value1102(f,HEAP32[(b|0)>>2]&HEAP32[(c|0)>>2]);STACKTOP=c}
function _fix_or(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c+8;_mrb_get_args(e,__str471089|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_bit_coerce(a,e,c);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[c>>2]=HEAP32[a>>2];HEAP32[c+4>>2]=HEAP32[a+4>>2];_mrb_fixnum_value1102(f,HEAP32[(b|0)>>2]|HEAP32[(c|0)>>2]);STACKTOP=c}
function _fix_xor(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c+8;_mrb_get_args(e,__str471089|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_bit_coerce(a,e,c);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[c>>2]=HEAP32[a>>2];HEAP32[c+4>>2]=HEAP32[a+4>>2];_mrb_fixnum_value1102(f,HEAP32[(b|0)>>2]^HEAP32[(c|0)>>2]);STACKTOP=c}
function _fix_lshift(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h,i=c+8;d=e;_mrb_get_args(d,__str471089|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));h=HEAP32[(b|0)>>
2];_bit_coerce(i,d,g);a=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[i>>2];HEAP32[a+4>>2]=HEAP32[i+4>>2];g=HEAP32[(g|0)>>2];a=0>(g|0)?3:4;break;case 3:_rshift(f,h,-g|0);a=5;break;case 4:_lshift(f,d,h,g);a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _fix_rshift(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h,i=c+8;d=e;_mrb_get_args(d,__str471089|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));h=HEAP32[(b|0)>>
2];_bit_coerce(i,d,g);a=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[i>>2];HEAP32[a+4>>2]=HEAP32[i+4>>2];g=HEAP32[(g|0)>>2];a=0==(g|0)?3:4;break;case 3:a=f;i=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[i>>2];HEAP32[a+4>>2]=HEAP32[i+4>>2];a=7;break;case 4:a=0>(g|0)?5:6;break;case 5:_lshift(f,d,h,-g|0);a=7;break;case 6:_rshift(f,h,g);a=7;break;case 7:STACKTOP=c;return;default:assert(0,
"bad label: "+a)}}function _int_to_i(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=e}
function _num_eql(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c;d=e;_mrb_get_args(d,__str471089|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));a=(HEAP32[(b+4|0)>>2]&255|0)!=
(HEAP32[(g+4|0)>>2]&255|0)?3:4;break;case 3:_mrb_false_value1106(f);a=7;break;case 4:a=0!=(_mrb_equal(d,b,g)|0)?5:6;break;case 5:_mrb_true_value1107(f);a=7;break;case 6:_mrb_false_value1106(f);a=7;break;case 7:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _num_floor(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_Float(c,e,b);_flo_floor(f,e,c);STACKTOP=c}
function _flo_hash(f,e,b){e=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a=e,d,g,h;HEAPF32[a>>2]=HEAP32[(b|0)>>2]|0;c=0==HEAPF32[a>>2]?3:4;break;case 3:HEAPF32[a>>2]=0;c=4;break;case 4:d=a;g=h=0;c=5;break;case 5:c=4>g>>>0?6:8;break;case 6:h=(971*h|0)^HEAP8[d+g|
0]&255;c=7;break;case 7:g=g+1|0;c=5;break;case 8:c=0>(h|0)?9:10;break;case 9:h=-h|0;c=10;break;case 10:_mrb_fixnum_value1102(f,h);STACKTOP=e;return;default:assert(0,"bad label: "+c)}}
function _int_succ(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c;d=e;a=3==(HEAP32[(b+4|0)>>2]&255|0)?3:4;break;case 3:_fix_succ(f,d,b);a=5;break;case 4:a=d;_mrb_fixnum_value1102(g,1);_mrb_funcall(f,a,b,__str151057|0,1,(tempInt=STACKTOP,STACKTOP+=
8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=HEAP32[g>>2],HEAP32[tempInt+4>>2]=HEAP32[g+4>>2],tempInt));a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _num_round(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_Float(c,e,b);_flo_round(f,e,c);STACKTOP=c}
function _fix_succ(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];_mrb_fixnum_value1102(f,HEAP32[(b|0)>>2]+1|0);STACKTOP=e}
function _fix_to_f(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];_mrb_float_value1101(f,HEAP32[(b|0)>>2]|0);STACKTOP=e}
function _fix_to_s(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];HEAP32[c>>2]=10;_mrb_get_args(e,__str461088|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_mrb_fix2str(f,e,b,HEAP32[c>>2]);STACKTOP=c}
function _fix_divmod(f,e,b){var c=STACKTOP;STACKTOP+=88;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+8,i=c+12,j=c+16,l=c+24,k=c+32,n=c+40,r=c+48,t=c+52,p=c+56,q=c+64,v=c+72,w=c+80;d=e;_mrb_get_args(d,__str471089|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,
"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));a=3==(HEAP32[(g+4|0)>>2]&255|0)?3:6;break;case 3:a=0==(HEAP32[(g|0)>>2]|0)?4:5;break;case 4:var a=d,m=_strtof(__str481090|0,0);_mrb_float_value1101(j,m);m=_strtof(__str491091|0,0);_mrb_float_value1101(l,m);_mrb_assoc_new(f,a,j,l);a=7;break;case 5:_fixdivmod(d,HEAP32[(b|0)>>2],HEAP32[(g|0)>>2],h,i);a=d;_mrb_fixnum_value1102(k,HEAP32[h>>2]);_mrb_fixnum_value1102(n,HEAP32[i>>2]);_mrb_assoc_new(f,a,k,n);a=7;break;case 6:var a=d,m=HEAP32[(b|0)>>2]|0,x=
_mrb_to_flo(d,g);_flodivmod(a,m,x,r,t);_mrb_float_value1101(v,HEAPF32[r>>2]&-1|0);a=p;m=v;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[m>>2];HEAP32[a+4>>2]=HEAP32[m+4>>2];_mrb_float_value1101(w,HEAPF32[t>>2]);a=q;m=w;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[m>>2];HEAP32[a+4>>2]=HEAP32[m+4>>2];_mrb_assoc_new(f,d,p,q);a=7;break;case 7:STACKTOP=c;return;default:assert(0,"bad label: "+
a)}}_fix_divmod.X=1;
function _flo_plus(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=HEAPF32[(b|0)>>2];_mrb_get_args(e,__str501092|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_mrb_float_value1101(f,b+HEAPF32[c>>2]);STACKTOP=
c}
function _flo_minus(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str471089|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));b=HEAPF32[(b|0)>>2];e=_mrb_to_flo(e,c);_mrb_float_value1101(f,b-e);
STACKTOP=c}
function _flo_mul(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str471089|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));b=HEAPF32[(b|0)>>2];e=_mrb_to_flo(e,c);_mrb_float_value1101(f,b*e);STACKTOP=
c}
function _flo_mod(f,e,b){var c=STACKTOP;STACKTOP+=12;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c+8;_mrb_get_args(e,__str471089|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));var d=_mrb_to_flo(e,c);_flodivmod(e,HEAPF32[(b|0)>>2],d,0,a);_mrb_float_value1101(f,
HEAPF32[a>>2]);STACKTOP=c}
function _flo_eq(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h;d=e;_mrb_get_args(d,__str471089|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));a=HEAP32[(g+4|0)>>2]&255;a=
3==(a|0)?3:6==(a|0)?4:5;break;case 3:h=HEAP32[(g|0)>>2]|0;a=6;break;case 4:h=HEAPF32[(g|0)>>2];a=6;break;case 5:_num_equal(f,d,b,g);a=10;break;case 6:a=HEAPF32[(b|0)>>2];a=a==h?7:8;break;case 7:_mrb_true_value1107(f);a=9;break;case 8:_mrb_false_value1106(f);a=9;break;case 9:a=10;break;case 10:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _flo_ceil(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a;a=_ceilf(HEAPF32[(b|0)>>2]);c=2147483648>=a?3:4;break;case 3:c=-2147483648<=a?5:4;break;case 4:_mrb_float_value1101(f,a);c=6;break;case 5:_mrb_fixnum_value1102(f,a&-1);c=6;break;case 6:STACKTOP=e;return;
default:assert(0,"bad label: "+c)}}
function _flo_finite_p(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a;a=HEAPF32[(b|0)>>2];c=1==(___fpclassifyf(a)|0)?4:3;break;case 3:c=0==(___fpclassifyf(a)|0)?4:5;break;case 4:_mrb_false_value1106(f);c=6;break;case 5:_mrb_true_value1107(f);c=6;break;case 6:STACKTOP=
e;return;default:assert(0,"bad label: "+c)}}
function _flo_floor(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a;a=_floorf(HEAPF32[(b|0)>>2]);c=2147483648>=a?3:4;break;case 3:c=-2147483648<=a?5:4;break;case 4:_mrb_float_value1101(f,a);c=6;break;case 5:_mrb_fixnum_value1102(f,a&-1);c=6;break;case 6:STACKTOP=e;
return;default:assert(0,"bad label: "+c)}}
function _fixdivmod(f,e,b,c,a){for(f=2;;)switch(f){case 2:var d,g,h,i,j,l;d=e;g=b;h=c;i=a;f=0>(g|0)?3:7;break;case 3:f=0>(d|0)?4:5;break;case 4:j=(-d|0)/(-g|0)&-1;f=6;break;case 5:j=-((d|0)/(-g|0)&-1)|0;f=6;break;case 6:f=11;break;case 7:f=0>(d|0)?8:9;break;case 8:j=-((-d|0)/(g|0)&-1)|0;f=10;break;case 9:j=(d|0)/(g|0)&-1;f=10;break;case 10:f=11;break;case 11:l=d-(j*g|0)|0;f=0>(l|0)?12:13;break;case 12:f=0<(g|0)?15:13;break;case 13:f=0<(l|0)?14:16;break;case 14:f=0>(g|0)?15:16;break;case 15:l=l+g|
0;j=j-1|0;f=16;break;case 16:f=0!=(h|0)?17:18;break;case 17:HEAP32[h>>2]=j;f=18;break;case 18:f=0!=(i|0)?19:20;break;case 19:HEAP32[i>>2]=l;f=20;break;case 20:return;default:assert(0,"bad label: "+f)}}_fixdivmod.X=1;
function _mrb_obj_eq(f,e,b){f=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];c=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a,c=(HEAP32[(e+4|0)>>2]&255|0)!=(HEAP32[(b+4|0)>>2]&255|0)?
3:4;break;case 3:a=0;c=10;break;case 4:c=HEAP32[(e+4|0)>>2]&255;c=2==(c|0)?5:0==(c|0)||3==(c|0)?6:4==(c|0)?7:6==(c|0)?8:9;break;case 5:a=1;c=10;break;case 6:a=(HEAP32[(e|0)>>2]|0)==(HEAP32[(b|0)>>2]|0)&1;c=10;break;case 7:a=(HEAP16[(e|0)>>1]<<16>>16|0)==(HEAP16[(b|0)>>1]<<16>>16|0)&1;c=10;break;case 8:a=HEAPF32[(e|0)>>2]==HEAPF32[(b|0)>>2]&1;c=10;break;case 9:a=(HEAP32[(e|0)>>2]|0)==(HEAP32[(b|0)>>2]|0)&1;c=10;break;case 10:return e=a,STACKTOP=f,e;default:assert(0,"bad label: "+c)}}
_mrb_obj_eq.X=1;
function _flo_infinite_p(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a;a=HEAPF32[(b|0)>>2];c=1==(___fpclassifyf(a)|0)?3:4;break;case 3:_mrb_fixnum_value1102(f,0>a?-1:1);c=5;break;case 4:_mrb_nil_value1105(f);c=5;break;case 5:STACKTOP=e;return;default:assert(0,"bad label: "+
c)}}
function _flo_round(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h=c,i;d=e;HEAP32[h>>2]=0;_mrb_get_args(d,__str461088|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=h,tempInt));d=HEAPF32[(b|
0)>>2];g=1;i=_abs(HEAP32[h>>2]);a=3;break;case 3:i=a=i-1|0;a=0<=(a|0)?4:5;break;case 4:g*=10;a=3;break;case 5:a=1==(___fpclassifyd(g)|0)?6:9;break;case 6:a=0>(HEAP32[h>>2]|0)?7:8;break;case 7:d=0;a=8;break;case 8:a=21;break;case 9:a=0>(HEAP32[h>>2]|0)?10:11;break;case 10:d/=g;a=12;break;case 11:d*=g;a=12;break;case 12:a=0<d?13:14;break;case 13:a=_floorf(d);d=a+(0.5<=d-a&1|0);a=17;break;case 14:a=0>d?15:16;break;case 15:a=_ceilf(d);d=a-(0.5<=a-d&1|0);a=16;break;case 16:a=17;break;case 17:a=0>(HEAP32[h>>
2]|0)?18:19;break;case 18:d*=g;a=20;break;case 19:d/=g;a=20;break;case 20:a=21;break;case 21:a=0<(HEAP32[h>>2]|0)?22:23;break;case 22:_mrb_float_value1101(f,d);a=24;break;case 23:_mrb_fixnum_value1102(f,d&-1);a=24;break;case 24:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_flo_round.X=1;
function _flo_to_f(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=e}
function _flo_truncate(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a;a=HEAPF32[(b|0)>>2];c=0<a?3:4;break;case 3:a=_floorf(a);c=4;break;case 4:c=0>a?5:6;break;case 5:a=_ceilf(a);c=6;break;case 6:c=2147483648>=a?7:8;break;case 7:c=-2147483648<=a?9:8;break;case 8:_mrb_float_value1101(f,
a);c=10;break;case 9:_mrb_fixnum_value1102(f,a&-1);c=10;break;case 10:STACKTOP=e;return;default:assert(0,"bad label: "+c)}}
function _flo_to_s(f,e,b){var c=STACKTOP;STACKTOP+=32;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h,i;d=e;i=HEAPF32[(b|0)>>2];a=1==(___fpclassifyf(i)|0)?3:4;break;case 3:a=0>i?0:1;_mrb_str_new(f,d,_flo_to_s_s+5*a|0,HEAP32[(_flo_to_s_n+(a<<2)|0)>>2]);a=11;break;case 4:a=0==(___fpclassifyf(i)|
0)?5:6;break;case 5:_mrb_str_new(f,d,__str421084|0,3);a=11;break;case 6:a=7;break;case 7:h=i;h=_sprintf(g|0,__str431085|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),tempDoubleF64[0]=h,HEAP32[tempInt>>2]=tempDoubleI32[0],HEAP32[tempInt+4>>2]=tempDoubleI32[1],tempInt));a=0<=(h|0)?8:9;break;case 8:a=10;break;case 9:___assert_func(__str441086|0,203,___func___flo_to_s|0,__str451087|0);a=10;break;case 10:_mrb_str_new(f,d,g|0,h);a=11;break;case 11:STACKTOP=c;return;
default:assert(0,"bad label: "+a)}}_flo_to_s.X=1;
function _mrb_nil_value1105(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_false_value1106(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_true_value1107(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]=HEAP32[b>>2]&-256|2;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _num_equal(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g;g=e;d=0!=(_mrb_obj_equal(g,b,c)|0)?3:4;break;case 3:_mrb_true_value1107(f);
d=5;break;case 4:_mrb_funcall(f,g,c,__str191061|0,1,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=HEAP32[b>>2],HEAP32[tempInt+4>>2]=HEAP32[b+4>>2],tempInt));d=5;break;case 5:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}
function _flodivmod(f,e,b,c,a){for(f=2;;)switch(f){case 2:var d,g,h,i,j,l;d=e;g=b;h=c;i=a;f=0==g?3:4;break;case 3:f=_strtof(__str481090|0,0);HEAPF32[h>>2]=f;f=_strtof(__str491091|0,0);HEAPF32[i>>2]=f;f=15;break;case 4:l=_fmodf(d,g);f=1==(___fpclassifyf(d)|0)?5:8;break;case 5:f=1==(___fpclassifyf(g)|0)?8:6;break;case 6:f=0==(___fpclassifyf(g)|0)?8:7;break;case 7:j=d;f=9;break;case 8:j=(d-l)/g;f=9;break;case 9:f=0>g*l?10:11;break;case 10:l+=g;j-=1;f=11;break;case 11:f=0!=(i|0)?12:13;break;case 12:HEAPF32[i>>
2]=l;f=13;break;case 13:f=0!=(h|0)?14:15;break;case 14:HEAPF32[h>>2]=j;f=15;break;case 15:return;default:assert(0,"bad label: "+f)}}_flodivmod.X=1;
function _bit_coerce(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c;d=e;a=3;break;case 3:a=3==(HEAP32[(b+4|0)>>2]&255|0)^1?4:7;break;case 4:a=6==(HEAP32[(b+4|0)>>2]&255|0)?5:6;break;case 5:var a=d,h=_mrb_class_obj_get(d,__str531095|0);_mrb_raise(a,
h,__str541096|0);a=6;break;case 6:_mrb_to_int(g,d,b);a=b;h=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[h>>2];HEAP32[a+4>>2]=HEAP32[h+4>>2];a=3;break;case 7:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _lshift(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d;for(d=2;;)switch(d){case 2:var g,h,i;g=e;h=b;i=c;d=31<i>>>0?3:4;break;case 3:d=g;var j=_mrb_class_obj_get(g,__str511093|0),l=i;_mrb_raisef(d,j,__str521094|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=l,HEAP32[tempInt+4>>2]=31,tempInt));d=4;break;case 4:h<<=i;_mrb_fixnum_value1102(f,h);STACKTOP=a;return;
default:assert(0,"bad label: "+d)}}function _rshift(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d;a=e;d=b;c=31<=d>>>0?3:6;break;case 3:c=0>(a|0)?4:5;break;case 4:_mrb_fixnum_value1102(f,-1);c=7;break;case 5:_mrb_fixnum_value1102(f,0);c=7;break;case 6:a>>=d|0;_mrb_fixnum_value1102(f,a);c=7;break;case 7:return;default:assert(0,"bad label: "+c)}}
function _mrb_obj_equal(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];a=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];f=_mrb_obj_eq(f,e,b);STACKTOP=c;return f}
function _mrb_equal(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];a=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h=c,i=c+8;g=f;a=0!=(_mrb_obj_eq(g,e,b)|
0)?3:4;break;case 3:d=1;a=7;break;case 4:_mrb_funcall(i,g,e,__str1108|0,1,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=HEAP32[b>>2],HEAP32[tempInt+4>>2]=HEAP32[b+4>>2],tempInt));var a=h,j=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[j>>2];HEAP32[a+4>>2]=HEAP32[j+4>>2];a=0!=(HEAP32[(h+4|0)>>2]&255|0)?5:6;break;case 5:d=1;a=7;break;case 6:d=0;a=7;break;case 7:return f=d,STACKTOP=
c,f;default:assert(0,"bad label: "+a)}}
function _mrb_class1177(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a,d;d=f;c=HEAP32[(e+4|0)>>2]&255;c=0==(c|0)?3:2==(c|0)?6:4==(c|0)?7:3==(c|0)?8:6==(c|0)?9:8==(c|0)?10:11;break;case 3:c=0!=(HEAP32[(e|0)>>2]|0)?4:5;break;case 4:a=HEAP32[(d+112|0)>>2];c=12;break;
case 5:a=HEAP32[(d+116|0)>>2];c=12;break;case 6:a=HEAP32[(d+108|0)>>2];c=12;break;case 7:a=HEAP32[(d+120|0)>>2];c=12;break;case 8:a=HEAP32[(d+104|0)>>2];c=12;break;case 9:a=HEAP32[(d+100|0)>>2];c=12;break;case 10:a=HEAP32[(d+72|0)>>2];c=12;break;case 11:a=HEAP32[(HEAP32[(e|0)>>2]+4|0)>>2];c=12;break;case 12:return STACKTOP=b,a;default:assert(0,"bad label: "+c)}}_mrb_class1177.X=1;
function _mrb_init_object(f){var e=_mrb_define_class(f,__str11109|0,HEAP32[(f+72|0)>>2]);HEAP32[(f+116|0)>>2]=e;_mrb_undef_class_method(f,e,__str21110|0);_mrb_define_method(f,e,__str31111|0,348,524288);_mrb_define_method(f,e,__str41112|0,382,524288);_mrb_define_method(f,e,__str51113|0,438,524288);_mrb_define_method(f,e,__str61114|0,310,0);_mrb_define_method(f,e,__str71115|0,430,0);_mrb_define_method(f,e,__str81116|0,422,0);e=_mrb_define_class(f,__str91117|0,HEAP32[(f+72|0)>>2]);HEAP32[(f+108|0)>>
2]=e;_mrb_undef_class_method(f,e,__str21110|0);_mrb_define_method(f,e,__str31111|0,384,524288);_mrb_define_method(f,e,__str41112|0,546,524288);_mrb_define_method(f,e,__str71115|0,628,0);_mrb_define_method(f,e,__str51113|0,236,524288);_mrb_define_method(f,e,__str81116|0,628,0);e=_mrb_define_class(f,__str101118|0,HEAP32[(f+72|0)>>2]);HEAP32[(f+112|0)>>2]=e;_mrb_undef_class_method(f,e,__str21110|0);_mrb_define_method(f,e,__str31111|0,348,524288);_mrb_define_method(f,e,__str41112|0,382,524288);_mrb_define_method(f,
e,__str71115|0,4,0);_mrb_define_method(f,e,__str51113|0,438,524288);_mrb_define_method(f,e,__str81116|0,4,0)}_mrb_init_object.X=1;
function _false_and(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str491157|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_mrb_false_value1188(f);STACKTOP=c}
function _false_xor(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(b=2;;)switch(b){case 2:b=c;_mrb_get_args(e,__str491157|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=b,tempInt));b=0!=(HEAP32[(b+4|0)>>2]&255|0)?3:4;
break;case 3:_mrb_true_value1187(f);b=5;break;case 4:_mrb_false_value1188(f);b=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+b)}}
function _false_or(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(b=2;;)switch(b){case 2:b=c;_mrb_get_args(e,__str491157|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=b,tempInt));b=0!=(HEAP32[(b+4|0)>>2]&255|0)?3:4;
break;case 3:_mrb_true_value1187(f);b=5;break;case 4:_mrb_false_value1188(f);b=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+b)}}function _mrb_true(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];_mrb_true_value1187(f);STACKTOP=e}
function _nil_to_s(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_str_new(f,e,0,0);STACKTOP=c}
function _nil_inspect(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_str_new(f,e,__str141122|0,3);STACKTOP=c}
function _true_and(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(b=2;;)switch(b){case 2:b=c;_mrb_get_args(e,__str491157|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=b,tempInt));b=0!=(HEAP32[(b+4|0)>>2]&255|0)?3:4;
break;case 3:_mrb_true_value1187(f);b=5;break;case 4:_mrb_false_value1188(f);b=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+b)}}
function _true_xor(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(b=2;;)switch(b){case 2:b=c;_mrb_get_args(e,__str491157|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=b,tempInt));b=0!=(HEAP32[(b+4|0)>>2]&255|0)?3:4;
break;case 3:_mrb_false_value1188(f);b=5;break;case 4:_mrb_true_value1187(f);b=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+b)}}function _true_to_s(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_str_new(f,e,__str321140|0,4);STACKTOP=c}
function _true_or(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str491157|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_mrb_true_value1187(f);STACKTOP=c}
function _false_to_s(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_str_new(f,e,__str311139|0,5);STACKTOP=c}
function _mrb_check_to_integer(f,e,b,c){var a=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i=a,j=a+8;g=e;h=c;d=3==(HEAP32[(b+4|0)>>2]&255|0)?3:4;break;case 3:var d=f,l=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[d>>2]=HEAP32[l>>2];HEAP32[d+4>>2]=HEAP32[l+4>>2];d=9;break;case 4:_convert_type(j,g,b,__str111119|0,h,0);d=i;l=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[l>>2];HEAP32[d+4>>2]=HEAP32[l+4>>2];d=0==(HEAP32[(i+4|0)>>2]&255|0)?5:6;break;case 5:d=0!=(HEAP32[(i|0)>>2]|0)?6:7;break;case 6:d=3!=(HEAP32[(i+4|0)>>2]&255|0)?7:8;break;case 7:_mrb_nil_value1166(f);d=9;break;case 8:d=f;l=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[d>>2]=HEAP32[l>>2];HEAP32[d+4>>2]=HEAP32[l+4>>2];d=9;break;case 9:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}
function _convert_type(f,e,b,c,a,d){var g=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var h=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[h>>2];HEAP32[b+4>>2]=HEAP32[h+4>>2];for(h=2;;)switch(h){case 2:var i,j,l,k;i=e;j=c;l=a;k=d;l=_mrb_intern(i,l);h=0!=(_mrb_respond_to(i,b,l)|0)?16:3;break;case 3:h=0!=(k|0)?4:15;break;case 4:var n=i,r=_mrb_class_obj_get(i,__str121120|0),h=0==(HEAP32[(b+4|
0)>>2]&255|0)?5:7;break;case 5:h=0!=(HEAP32[(b|0)>>2]|0)?7:6;break;case 6:var t=__str141122|0,h=14;break;case 7:h=2==(HEAP32[(b+4|0)>>2]&255|0)?8:9;break;case 8:var p=__str321140|0,h=13;break;case 9:h=0==(HEAP32[(b+4|0)>>2]&255|0)?10:11;break;case 10:var q=__str311139|0,h=12;break;case 11:q=_mrb_obj_classname(i,b);h=12;break;case 12:p=q;h=13;break;case 13:t=p;h=14;break;case 14:h=j;_mrb_raisef(n,r,__str481156|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=t,HEAP32[tempInt+4>>2]=h,tempInt));_mrb_nil_value1166(f);h=17;break;case 15:_mrb_nil_value1166(f);h=17;break;case 16:_mrb_funcall_argv(f,i,b,l,0,0);h=17;break;case 17:STACKTOP=g;return;default:assert(0,"bad label: "+h)}}_convert_type.X=1;
function _mrb_nil_value1166(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_convert_type(f,e,b,c,a,d){var g=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var h=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[h>>2];HEAP32[b+4>>2]=HEAP32[h+4>>2];for(h=2;;)switch(h){case 2:var i,j,l,k,n=g,r=g+8;i=e;j=c;l=a;k=d;h=(HEAP32[(b+4|0)>>2]&255|0)==(j|0)?3:4;break;case 3:var h=f,t=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[h>>2]=HEAP32[t>>2];HEAP32[h+4>>2]=HEAP32[t+4>>2];h=7;break;case 4:_convert_type(r,i,b,l,k,1);h=n;t=r;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[h>>2]=HEAP32[t>>2];HEAP32[h+4>>2]=HEAP32[t+4>>2];h=(HEAP32[(n+4|0)>>2]&255|0)!=(j|0)?5:6;break;case 5:var h=i,t=_mrb_class_obj_get(i,__str121120|0),p=_mrb_obj_classname(i,b),q=l,v=k;_mrb_raisef(h,t,__str131121|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=p,HEAP32[tempInt+4>>2]=q,HEAP32[tempInt+8>>2]=v,tempInt));h=6;break;case 6:h=f;t=n;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[h>>2]=HEAP32[t>>2];HEAP32[h+4>>2]=HEAP32[t+4>>2];h=7;break;case 7:STACKTOP=g;return;default:assert(0,"bad label: "+h)}}_mrb_convert_type.X=1;
function _mrb_check_convert_type(f,e,b,c,a,d){var g=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var h=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[h>>2];HEAP32[b+4>>2]=HEAP32[h+4>>2];for(h=2;;)switch(h){case 2:var i,j,l,k,n=g,r=g+8;i=e;j=c;l=a;k=d;h=(HEAP32[(b+4|0)>>2]&255|0)==(j|0)?3:5;break;case 3:h=25!=(j|0)?4:5;break;case 4:var h=f,t=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[h>>2]=HEAP32[t>>2];HEAP32[h+4>>2]=HEAP32[t+4>>2];h=10;break;case 5:_convert_type(r,i,b,l,k,0);h=n;t=r;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[h>>2]=HEAP32[t>>2];HEAP32[h+4>>2]=HEAP32[t+4>>2];h=0==(HEAP32[(n+4|0)>>2]&255|0)?6:7;break;case 6:h=0!=(HEAP32[(n|0)>>2]|0)?7:8;break;case 7:h=(HEAP32[(n+4|0)>>2]&255|0)!=(j|0)?8:9;break;case 8:_mrb_nil_value1166(f);h=10;break;case 9:h=f;t=n;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[h>>2]=HEAP32[t>>2];HEAP32[h+4>>2]=HEAP32[t+4>>2];h=10;break;case 10:STACKTOP=g;return;default:assert(0,"bad label: "+h)}}_mrb_check_convert_type.X=1;
function _mrb_check_type(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i,j,l=c;d=f;g=b;h=_builtin_types|0;j=HEAP32[(e+4|0)>>2]&255;a=(j|0)!=(g|0)?4:3;break;case 3:a=25==(j|0)?4:23;break;case 4:a=5;break;case 5:a=26>(HEAP8[h|0]&255|0)?6:22;break;
case 6:a=(HEAP8[h|0]&255|0)==(g|0)?7:21;break;case 7:a=0==(HEAP32[(e+4|0)>>2]&255|0)?8:10;break;case 8:a=0!=(HEAP32[(e|0)>>2]|0)?10:9;break;case 9:i=__str141122|0;a=20;break;case 10:a=3==(HEAP32[(e+4|0)>>2]&255|0)?11:12;break;case 11:i=__str151123|0;a=19;break;case 12:a=4==(HEAP32[(e+4|0)>>2]&255|0)?13:14;break;case 13:i=__str161124|0;a=18;break;case 14:a=8>=(HEAP32[(e+4|0)>>2]&255|0)?15:16;break;case 15:_mrb_obj_as_string(l,d,e);i=HEAP32[(l|0)>>2];i=HEAP32[(i+20|0)>>2];a=17;break;case 16:i=_mrb_obj_classname(d,
e);a=17;break;case 17:a=18;break;case 18:a=19;break;case 19:a=20;break;case 20:var a=d,k=_mrb_class_obj_get(d,__str121120|0),n=i,r=HEAP32[(h+4|0)>>2];_mrb_raisef(a,k,__str171125|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=n,HEAP32[tempInt+4>>2]=r,tempInt));a=21;break;case 21:h=h+8|0;a=5;break;case 22:a=d;k=_mrb_class_obj_get(d,__str121120|0);n=g;r=HEAP32[(e+4|0)>>2]&255;_mrb_raisef(a,k,__str181126|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<
STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=n,HEAP32[tempInt+4>>2]=r,tempInt));a=23;break;case 23:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_check_type.X=1;
function _mrb_any_to_s(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];var d=c+8,a=_mrb_obj_classname(e,b),g=(_strlen(a)+6|0)+16|0;_mrb_str_new(d,e,0,g);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=
HEAP32[d+4>>2];e=HEAP32[(c|0)>>2];b=HEAP32[(b|0)>>2];b=_sprintf(HEAP32[(e+20|0)>>2],__str191127|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,HEAP32[tempInt+4>>2]=b,tempInt));HEAP32[(e+12|0)>>2]=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=c}
function _mrb_obj_is_kind_of(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i;g=f;h=b;i=_mrb_class1177(g,e);a=HEAP32[h>>2]&255;a=11==(a|0)||10==(a|0)||12==(a|0)?3:4;break;case 3:a=5;break;case 4:var a=g,j=_mrb_class_obj_get(g,__str121120|0);_mrb_raise(a,j,
__str201128|0);a=5;break;case 5:a=6;break;case 6:a=0!=(i|0)?7:11;break;case 7:a=(i|0)==(h|0)?9:8;break;case 8:a=(HEAP32[(i+16|0)>>2]|0)==(HEAP32[(h+16|0)>>2]|0)?9:10;break;case 9:d=1;a=12;break;case 10:var $super=i+20|0;i=HEAP32[$super>>2];a=6;break;case 11:d=0;a=12;break;case 12:return f=d,STACKTOP=c,f;default:assert(0,"bad label: "+a)}}
function _mrb_to_int(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_to_integer(f,e,b,__str211129|0);STACKTOP=c}
function _mrb_pool_can_realloc(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h,i;d=f;g=e;h=b;c=0!=(d|0)?4:3;break;case 3:a=0;c=12;break;case 4:h=h+((-h|0)&3)|0;i=HEAP32[(d+4|0)>>2];c=5;break;case 5:c=0!=(i|0)?6:11;break;case 6:c=(HEAP32[(i+12|0)>>2]|0)==(g|0)?7:10;break;case 7:c=g-(i+16|0)|0;c=(c+h|0)>>>0>HEAP32[(i+8|0)>>2]>>>0?8:9;break;case 8:a=0;c=12;break;case 9:a=1;c=12;break;case 10:i=HEAP32[(i|0)>>2];c=5;break;case 11:a=0;c=12;break;case 12:return a;default:assert(0,"bad label: "+c)}}
_mrb_pool_can_realloc.X=1;
function _mrb_to_integer(f,e,b,c){var a=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i=a,j=a+8,l;g=e;h=c;d=3==(HEAP32[(b+4|0)>>2]&255|0)?3:4;break;case 3:var d=f,k=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>
2]=HEAP32[k>>2];HEAP32[d+4>>2]=HEAP32[k+4>>2];d=7;break;case 4:_convert_type(j,g,b,__str111119|0,h,1);d=i;k=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[k>>2];HEAP32[d+4>>2]=HEAP32[k+4>>2];d=0!=(_mrb_obj_is_kind_of(g,i,HEAP32[(g+104|0)>>2])|0)?6:5;break;case 5:l=_mrb_obj_classname(g,b);var d=g,k=_mrb_class_obj_get(g,__str121120|0),n=l,r=h,t=_mrb_obj_classname(g,i);_mrb_raisef(d,k,__str301138|0,(tempInt=STACKTOP,STACKTOP+=16,assert(STACKTOP<
STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=n,HEAP32[tempInt+4>>2]=l,HEAP32[tempInt+8>>2]=r,HEAP32[tempInt+12>>2]=t,tempInt));d=6;break;case 6:d=f;k=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[k>>2];HEAP32[d+4>>2]=HEAP32[k+4>>2];d=7;break;case 7:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}
function _mrb_Integer(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_convert_to_integer(f,e,b,0);STACKTOP=c}
function _mrb_convert_to_integer(f,e,b,c){var a=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i=a,j=a+8,l=a+16;g=e;h=c;d=0==(HEAP32[(b+4|0)>>2]&255|0)?3:7;break;case 3:d=0!=(HEAP32[(b|0)>>2]|0)?7:4;break;case 4:d=0!=(h|0)?5:6;break;case 5:d=25;break;case 6:var d=
g,k=_mrb_class_obj_get(g,__str121120|0);_mrb_raise(d,k,__str261134|0);d=7;break;case 7:d=HEAP32[(b+4|0)>>2]&255;d=6==(d|0)?8:3==(d|0)?14:17==(d|0)?17:19;break;case 8:d=0!=(h|0)?9:10;break;case 9:d=25;break;case 10:d=2147483648>=HEAPF32[(b|0)>>2]?11:13;break;case 11:d=-2147483648<=HEAPF32[(b|0)>>2]?12:13;break;case 12:d=20;break;case 13:_mrb_flt2big(f,g,HEAPF32[(b|0)>>2]);d=30;break;case 14:d=0!=(h|0)?15:16;break;case 15:d=25;break;case 16:d=f;k=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[d>>2]=HEAP32[k>>2];HEAP32[d+4>>2]=HEAP32[k+4>>2];d=30;break;case 17:d=18;break;case 18:_mrb_str_to_inum(f,g,b,h,1);d=30;break;case 19:d=20;break;case 20:d=0!=(h|0)?21:26;break;case 21:_mrb_check_string_type(j,g,b);d=i;k=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[k>>2];HEAP32[d+4>>2]=HEAP32[k+4>>2];d=0==(HEAP32[(i+4|0)>>2]&255|0)?22:23;break;case 22:d=0!=(HEAP32[(i|0)>>2]|0)?23:24;break;case 23:d=18;break;case 24:d=25;break;case 25:d=
g;k=_mrb_class_obj_get(g,__str271135|0);_mrb_raise(d,k,__str281136|0);d=26;break;case 26:_convert_type(l,g,b,__str111119|0,__str211129|0,0);d=i;k=l;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[k>>2];HEAP32[d+4>>2]=HEAP32[k+4>>2];d=0==(HEAP32[(i+4|0)>>2]&255|0)?27:29;break;case 27:d=0!=(HEAP32[(i|0)>>2]|0)?29:28;break;case 28:_mrb_to_integer(f,g,b,__str291137|0);d=30;break;case 29:d=f;k=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[d>>2]=HEAP32[k>>2];HEAP32[d+4>>2]=HEAP32[k+4>>2];d=30;break;case 30:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_mrb_convert_to_integer.X=1;
function _mrb_Float(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=e;a=0==(HEAP32[(b+4|0)>>2]&255|0)?3:5;break;case 3:a=0!=(HEAP32[(b|0)>>2]|0)?5:4;break;case 4:var a=d,g=_mrb_class_obj_get(d,__str121120|0);_mrb_raise(a,g,__str221130|0);a=5;break;case 5:a=HEAP32[(b+
4|0)>>2]&255;a=3==(a|0)?6:6==(a|0)?7:17==(a|0)?8:9;break;case 6:_mrb_float_value1182(f,HEAP32[(b|0)>>2]|0);a=10;break;case 7:a=f;g=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[g>>2];HEAP32[a+4>>2]=HEAP32[g+4>>2];a=10;break;case 8:a=_mrb_str_to_dbl(d,b,1);_mrb_float_value1182(f,a);a=10;break;case 9:_mrb_convert_type(f,d,b,6,__str231131|0,__str241132|0);a=10;break;case 10:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_float_value1182(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|6;HEAPF32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_inspect(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_funcall(c,e,b,__str81116|0,0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));_mrb_obj_as_string(f,e,c);STACKTOP=c}
function _mrb_eql(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];a=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h=c;g=f;a=0!=(_mrb_obj_eq(g,e,b)|0)?3:4;break;
case 3:d=1;a=5;break;case 4:_mrb_funcall(h,g,e,__str251133|0,1,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=HEAP32[b>>2],HEAP32[tempInt+4>>2]=HEAP32[b+4>>2],tempInt));d=0!=(HEAP32[(h+4|0)>>2]&255|0)&1;a=5;break;case 5:return f=d,STACKTOP=c,f;default:assert(0,"bad label: "+a)}}
function _mrb_true_value1187(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]=HEAP32[b>>2]&-256|2;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_false_value1188(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_pool_open(f){var e;for(e=2;;)switch(e){case 2:var b,c;b=f;c=_mrb_malloc(b,8);e=0!=(c|0)?3:4;break;case 3:HEAP32[(c|0)>>2]=b;HEAP32[(c+4|0)>>2]=0;e=4;break;case 4:return c;default:assert(0,"bad label: "+e)}}
function _mrb_pool_close(f){var e;for(e=2;;)switch(e){case 2:var b,c;b=f;e=0!=(b|0)?4:3;break;case 3:e=8;break;case 4:c=HEAP32[(b+4|0)>>2];e=5;break;case 5:e=0!=(c|0)?6:7;break;case 6:e=c;c=HEAP32[(c|0)>>2];_mrb_free(HEAP32[(b|0)>>2],e);e=5;break;case 7:_mrb_free(HEAP32[(b|0)>>2],b);e=8;break;case 8:return;default:assert(0,"bad label: "+e)}}
function _mrb_pool_alloc(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g;a=f;d=e;b=0!=(a|0)?4:3;break;case 3:c=0;b=12;break;case 4:d=d+((-d|0)&3)|0;g=HEAP32[(a+4|0)>>2];b=5;break;case 5:b=0!=(g|0)?6:9;break;case 6:b=(HEAP32[(g+4|0)>>2]+d|0)>>>0<=HEAP32[(g+8|0)>>2]>>>0?7:8;break;case 7:b=HEAP32[(g+4|0)>>2];c=g+4|0;HEAP32[c>>2]=HEAP32[c>>2]+d|0;HEAP32[(g+12|0)>>2]=(g+16|0)+b|0;c=HEAP32[(g+12|0)>>2];b=12;break;case 8:g=HEAP32[(g|0)>>2];b=5;break;case 9:g=_page_alloc(a,d);b=0!=(g|0)?11:10;break;case 10:c=
0;b=12;break;case 11:HEAP32[(g+4|0)>>2]=d;HEAP32[(g|0)>>2]=HEAP32[(a+4|0)>>2];HEAP32[(a+4|0)>>2]=g;HEAP32[(g+12|0)>>2]=g+16|0;c=HEAP32[(g+12|0)>>2];b=12;break;case 12:return c;default:assert(0,"bad label: "+b)}}_mrb_pool_alloc.X=1;
function _page_alloc(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;b=16E3>a>>>0?3:4;break;case 3:a=16E3;b=4;break;case 4:d=_mrb_malloc(HEAP32[(c|0)>>2],(a+20|0)-1|0);b=0!=(d|0)?5:6;break;case 5:HEAP32[(d+4|0)>>2]=0;HEAP32[(d+8|0)>>2]=a;b=6;break;case 6:return d;default:assert(0,"bad label: "+b)}}
function _mrb_pool_realloc(f,e,b,c){var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j,l,k;g=f;h=e;i=b;j=c;a=0!=(g|0)?4:3;break;case 3:d=0;a=14;break;case 4:i=i+((-i|0)&3)|0;j=j+((-j|0)&3)|0;l=HEAP32[(g+4|0)>>2];a=5;break;case 5:a=0!=(l|0)?6:13;break;case 6:a=(HEAP32[(l+12|0)>>2]|0)==(h|0)?7:12;break;case 7:k=h-(l+16|0)|0;a=(k+i|0)!=(HEAP32[(l+4|0)>>2]|0)?8:9;break;case 8:a=13;break;case 9:a=(k+j|0)>>>0>HEAP32[(l+8|0)>>2]>>>0?10:11;break;case 10:HEAP32[(l+4|0)>>2]=k;a=13;break;case 11:HEAP32[(l+4|0)>>
2]=k+j|0;d=h;a=14;break;case 12:l=HEAP32[(l|0)>>2];a=5;break;case 13:d=a=_mrb_pool_alloc(g,j);var n=h,r=i;assert(0===r%1,"memcpy given "+r+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(d,n,r,1);d=a;a=14;break;case 14:return d;default:assert(0,"bad label: "+a)}}_mrb_pool_realloc.X=1;
function _mrb_proc_new(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;d=_mrb_obj_alloc(c,14,HEAP32[(c+84|0)>>2]);b=0!=(HEAP32[(c+20|0)>>2]|0)?3:4;break;case 3:var g=HEAP32[(HEAP32[(c+20|0)>>2]+28|0)>>2];b=5;break;case 4:g=0;b=5;break;case 5:return HEAP32[(d+16|0)>>2]=g,HEAP32[(d+12|0)>>2]=a,HEAP32[(d+20|0)>>2]=0,d;default:assert(0,"bad label: "+b)}}
function _mrb_closure_new(f,e){var b;b=_mrb_proc_new(f,e);_closure_setup(f,b,(HEAP32[HEAP32[(HEAP32[(HEAP32[(f+20|0)>>2]+4|0)>>2]+12|0)>>2]>>2]>>>16&65535)<<16>>16);return b}function _mrb_proc_cfunc_p(f){return HEAP32[f>>2]>>>11&128}function _mrb_proc_iseq(f,e){return HEAP32[(HEAP32[(e+12|0)>>2]+8|0)>>2]}
function _closure_setup(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h;a=f;d=e;g=b;c=0!=(HEAP32[(HEAP32[(a+20|0)>>2]+40|0)>>2]|0)?4:3;break;case 3:c=h=_mrb_obj_alloc(a,24,HEAP32[(HEAP32[(HEAP32[(a+20|0)>>2]+4|0)>>2]+20|0)>>2]);HEAP32[c>>2]=HEAP32[c>>2]&2047|(g&2097151)<<11;HEAP16[(h+16|0)>>1]=HEAP16[(HEAP32[(a+20|0)>>2]|0)>>1];HEAP32[(h+20|0)>>2]=(HEAP32[(a+20|0)>>2]-HEAP32[(a+24|0)>>2]|0)/44&-1;HEAP32[(h+12|0)>>2]=HEAP32[(a+8|0)>>2];HEAP32[(HEAP32[(a+20|0)>>2]+40|0)>>2]=h;c=5;break;case 4:h=
HEAP32[(HEAP32[(a+20|0)>>2]+40|0)>>2];c=5;break;case 5:HEAP32[(d+20|0)>>2]=h;return;default:assert(0,"bad label: "+c)}}_closure_setup.X=1;function _mrb_proc_new_cfunc(f,e){var b;b=_mrb_obj_alloc(f,14,HEAP32[(f+84|0)>>2]);HEAP32[(b+12|0)>>2]=e;HEAP32[b>>2]=HEAP32[b>>2]&2047|((HEAP32[b>>2]>>>11&2097151|128)&2097151)<<11;return b}function _mrb_closure_new_cfunc(f,e,b){e=_mrb_proc_new_cfunc(f,e);_closure_setup(f,e,b);return e}
function _mrb_proc_copy(f,e){HEAP32[f>>2]=HEAP32[f>>2]&2047|(HEAP32[e>>2]>>>11&2097151)<<11;var b=f+12|0,c=e+12|0;assert(!0,"memcpy given 4 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[(f+16|0)>>2]=HEAP32[(e+16|0)>>2];HEAP32[(f+20|0)>>2]=HEAP32[(e+20|0)>>2]}
function _mrb_proc_call_cfunc(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=c,c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];FUNCTION_TABLE[HEAP32[(b+12|0)>>2]](f,e,c);STACKTOP=a}
function _mrb_init_proc(f){var e;for(e=2;;)switch(e){case 2:var b,c;b=f;c=_mrb_alloca(b,40);e=0==(c|0)?3:4;break;case 3:e=5;break;case 4:var a=c;assert(!0,"memcpy given 40 bytes to copy. Problem with quantum=1 corrections perhaps?");e=(_mrb_init_proc_mrb_irep_zero|0)>>2;for(var a=a>>2,d=e+10;e<d;e++,a++)HEAP32[a]=HEAP32[e];e=c+4|0;HEAP32[e>>2]=HEAP32[e>>2]&-16711681|65536;e=c;HEAP32[e>>2]=HEAP32[e>>2]&-65536|65535;HEAP32[(c+8|0)>>2]=_call_iseq|0;HEAP32[(c+28|0)>>2]=1;e=_mrb_define_class(b,__str1195|
0,HEAP32[(b+72|0)>>2]);HEAP32[(b+84|0)>>2]=e;e=HEAP32[(b+84|0)>>2];HEAP32[e>>2]=HEAP32[e>>2]&2047|((HEAP32[HEAP32[(b+84|0)>>2]>>2]>>>11&2096896|14)&2097151)<<11;_mrb_define_method(b,HEAP32[(b+84|0)>>2],__str11196|0,470,0);_mrb_define_method(b,HEAP32[(b+84|0)>>2],__str21197|0,426,524288);e=_mrb_proc_new(b,c);var a=b,d=HEAP32[(b+84|0)>>2],g=_mrb_intern(b,__str31198|0);_mrb_define_method_raw(a,d,g,e);a=b;d=HEAP32[(b+84|0)>>2];g=_mrb_intern(b,__str41199|0);_mrb_define_method_raw(a,d,g,e);_mrb_define_class_method(b,
HEAP32[(b+124|0)>>2],__str51200|0,590,0);_mrb_define_method(b,HEAP32[(b+124|0)>>2],__str51200|0,590,0);e=5;break;case 5:return;default:assert(0,"bad label: "+e)}}_mrb_init_proc.X=1;
function _mrb_proc_initialize(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c;d=e;_mrb_get_args(d,__str61201|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));a=0==(HEAP32[(g+
4|0)>>2]&255|0)?3:5;break;case 3:a=0!=(HEAP32[(g|0)>>2]|0)?5:4;break;case 4:var a=d,h=_mrb_class_obj_get(d,__str71202|0);_mrb_raise(a,h,__str81203|0);a=6;break;case 5:_mrb_proc_copy(HEAP32[(b|0)>>2],HEAP32[(g|0)>>2]);a=6;break;case 6:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_proc_init_copy(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c;d=e;_mrb_get_args(d,__str91204|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));a=14!=(HEAP32[(g+
4|0)>>2]&255|0)?3:4;break;case 3:var a=d,h=_mrb_class_obj_get(d,__str71202|0);_mrb_raise(a,h,__str101205|0);a=4;break;case 4:_mrb_proc_copy(HEAP32[(b|0)>>2],HEAP32[(g|0)>>2]);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _proc_lambda(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(b=2;;)switch(b){case 2:var d,g=c,h;d=e;_mrb_get_args(d,__str61201|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));b=0==(HEAP32[(g+4|0)>>
2]&255|0)?3:5;break;case 3:b=0!=(HEAP32[(g|0)>>2]|0)?5:4;break;case 4:b=d;a=_mrb_class_obj_get(d,__str71202|0);_mrb_raise(b,a,__str81203|0);b=5;break;case 5:h=HEAP32[(g|0)>>2];b=0!=(HEAP32[h>>2]>>>11&256|0)?7:6;break;case 6:b=_mrb_obj_alloc(d,14,HEAP32[(h+4|0)>>2]);_mrb_proc_copy(b,h);var i=a=b;HEAP32[i>>2]=HEAP32[i>>2]&2047|((HEAP32[a>>2]>>>11&2097151|256)&2097151)<<11;_mrb_obj_value1216(f,b);b=8;break;case 7:b=f;a=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=8;break;case 8:STACKTOP=c;return;default:assert(0,"bad label: "+b)}}_proc_lambda.X=1;
function _mrb_obj_value1216(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b,g;g=a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|HEAP32[g>>2]&255;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+
c)}}
function _mrb_range_new(f,e,b,c,a){var d=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[g>>2];HEAP32[b+4>>2]=HEAP32[g+4>>2];g=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[g>>2];HEAP32[c+4>>2]=HEAP32[g+4>>2];var g=_mrb_class_obj_get(e,__str1217|0),g=_mrb_obj_alloc(e,18,g),h=_mrb_malloc(e,16);
HEAP32[(g+12|0)>>2]=h;_range_check(e,b,c);e=HEAP32[(g+12|0)>>2]|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[e>>2]=HEAP32[b>>2];HEAP32[e+4>>2]=HEAP32[b+4>>2];b=HEAP32[(g+12|0)>>2]+8|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];HEAP32[(g+16|0)>>2]=a;_mrb_obj_value1248(f,g);STACKTOP=d}
function _range_check(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];a=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h,i,j=c+8;d=f;h=HEAP32[(e+4|0)>>2]&
255;i=HEAP32[(b+4|0)>>2]&255;a=3==(h|0)?4:3;break;case 3:a=6==(h|0)?4:7;break;case 4:a=3==(i|0)?6:5;break;case 5:a=6==(i|0)?6:7;break;case 6:a=10;break;case 7:_mrb_funcall(j,d,e,__str261243|0,1,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=HEAP32[b>>2],HEAP32[tempInt+4>>2]=HEAP32[b+4>>2],tempInt));var a=g,l=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+4>>2]=HEAP32[l+
4>>2];a=0==(HEAP32[(g+4|0)>>2]&255|0)?8:10;break;case 8:a=0!=(HEAP32[(g|0)>>2]|0)?10:9;break;case 9:a=d;l=_mrb_class_obj_get(d,__str271244|0);_mrb_raise(a,l,__str281245|0);a=10;break;case 10:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_range_check.X=1;
function _mrb_obj_value1248(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b,g;g=a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|HEAP32[g>>2]&255;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+
c)}}function _mrb_range_beg(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];b=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=e}
function _mrb_range_end(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];b=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]+8|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=e}
function _mrb_range_excl(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:c=0!=(HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2]|0)?3:4;break;case 3:_mrb_true_value1249(f);c=5;break;case 4:_mrb_false_value1250(f);c=5;break;case 5:STACKTOP=e;return;default:assert(0,"bad label: "+c)}}
function _mrb_true_value1249(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]=HEAP32[b>>2]&-256|2;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_false_value1250(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_range_initialize(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];var a=c+8,d=c+16;_mrb_get_args(e,__str11218|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=a,HEAP32[tempInt+8>>2]=d,tempInt));
_range_init(e,b,c,a,0!=(HEAP32[(d+4|0)>>2]&255|0)&1);e=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[e>>2];HEAP32[f+4>>2]=HEAP32[e+4>>2];STACKTOP=c}
function _range_init(f,e,b,c,a){var d=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[g>>2];HEAP32[e+4>>2]=HEAP32[g+4>>2];g=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[g>>2];HEAP32[b+4>>2]=HEAP32[g+4>>2];g=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");
HEAP32[c>>2]=HEAP32[g>>2];HEAP32[c+4>>2]=HEAP32[g+4>>2];e=HEAP32[(e|0)>>2];_range_check(f,b,c);HEAP32[(e+16|0)>>2]=a;f=HEAP32[(e+12|0)>>2]|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];b=HEAP32[(e+12|0)>>2]+8|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];STACKTOP=d}
function _mrb_range_eq(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i=c;d=e;_mrb_get_args(d,__str21219|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=i,tempInt));a=0!=(_mrb_obj_equal(d,
b,i)|0)?3:4;break;case 3:_mrb_true_value1249(f);a=13;break;case 4:var a=d,j=_mrb_obj_class(d,b),a=0!=(_mrb_obj_is_instance_of(a,i,j)|0)?6:5;break;case 5:_mrb_false_value1250(f);a=13;break;case 6:g=HEAP32[(b|0)>>2];h=HEAP32[(i|0)>>2];a=0!=(_mrb_obj_equal(d,HEAP32[(g+12|0)>>2]|0,HEAP32[(h+12|0)>>2]|0)|0)?8:7;break;case 7:_mrb_false_value1250(f);a=13;break;case 8:a=0!=(_mrb_obj_equal(d,HEAP32[(g+12|0)>>2]+8|0,HEAP32[(h+12|0)>>2]+8|0)|0)?10:9;break;case 9:_mrb_false_value1250(f);a=13;break;case 10:a=
(HEAP32[(g+16|0)>>2]|0)!=(HEAP32[(h+16|0)>>2]|0)?11:12;break;case 11:_mrb_false_value1250(f);a=13;break;case 12:_mrb_true_value1249(f);a=13;break;case 13:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_range_eq.X=1;
function _mrb_range_include(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h,a=c+8,i=c+16;d=e;h=HEAP32[(b|0)>>2];_mrb_get_args(d,__str21219|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>
2]=g,tempInt));var j=a,l=HEAP32[(h+12|0)>>2]|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[j>>2]=HEAP32[l>>2];HEAP32[j+4>>2]=HEAP32[l+4>>2];j=i;l=HEAP32[(h+12|0)>>2]+8|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[j>>2]=HEAP32[l>>2];HEAP32[j+4>>2]=HEAP32[l+4>>2];a=0!=(_r_le(d,a,g)|0)?3:11;break;case 3:a=0!=(HEAP32[(h+16|0)>>2]|0)?4:7;break;case 4:a=0!=(_r_gt(d,i,g)|0)?5:6;break;case 5:_mrb_true_value1249(f);
a=12;break;case 6:a=10;break;case 7:a=0!=(_r_ge(d,i,g)|0)?8:9;break;case 8:_mrb_true_value1249(f);a=12;break;case 9:a=10;break;case 10:a=11;break;case 11:_mrb_false_value1250(f);a=12;break;case 12:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_range_include.X=1;
function _r_le(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];a=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h;_mrb_funcall(g,f,e,__str261243|0,1,(tempInt=
STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=HEAP32[b>>2],HEAP32[tempInt+4>>2]=HEAP32[b+4>>2],tempInt));a=3==(HEAP32[(g+4|0)>>2]&255|0)?3:7;break;case 3:h=HEAP32[(g|0)>>2];a=0==(h|0)?5:4;break;case 4:a=-1==(h|0)?5:6;break;case 5:d=1;a=8;break;case 6:a=7;break;case 7:d=0;a=8;break;case 8:return f=d,STACKTOP=c,f;default:assert(0,"bad label: "+a)}}
function _r_gt(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];a=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c;_mrb_funcall(g,f,e,__str261243|0,1,(tempInt=
STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=HEAP32[b>>2],HEAP32[tempInt+4>>2]=HEAP32[b+4>>2],tempInt));a=3==(HEAP32[(g+4|0)>>2]&255|0)?3:6;break;case 3:a=1==(HEAP32[(g|0)>>2]|0)?4:5;break;case 4:d=1;a=7;break;case 5:a=6;break;case 6:d=0;a=7;break;case 7:return f=d,STACKTOP=c,f;default:assert(0,"bad label: "+a)}}
function _r_ge(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];a=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h;_mrb_funcall(g,f,e,__str261243|0,1,(tempInt=
STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=HEAP32[b>>2],HEAP32[tempInt+4>>2]=HEAP32[b+4>>2],tempInt));a=3==(HEAP32[(g+4|0)>>2]&255|0)?3:7;break;case 3:h=HEAP32[(g|0)>>2];a=0==(h|0)?5:4;break;case 4:a=1==(h|0)?5:6;break;case 5:d=1;a=8;break;case 6:a=7;break;case 7:d=0;a=8;break;case 8:return f=d,STACKTOP=c,f;default:assert(0,"bad label: "+a)}}
function _mrb_range_each(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=e}
function _mrb_range_beg_len(f,e,b,c,a,d){var g=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var h=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[h>>2];HEAP32[e+4>>2]=HEAP32[h+4>>2];for(h=2;;)switch(h){case 2:var i,j,l,k,n,r,t,p,q,v,w;j=f;l=b;k=c;n=a;r=d;w=HEAP32[(e|0)>>2];h=18!=(HEAP32[(e+4|0)>>2]&255|0)?3:4;break;case 3:i=0;h=26;break;case 4:q=t=HEAP32[(HEAP32[(w+12|0)>>2]|0)>>2];v=p=HEAP32[(HEAP32[(w+
12|0)>>2]+8|0)>>2];h=0>(t|0)?5:8;break;case 5:t=t+n|0;h=0>(t|0)?6:7;break;case 6:h=23;break;case 7:h=8;break;case 8:h=0==(r|0)?10:9;break;case 9:h=2==(r|0)?10:15;break;case 10:h=(t|0)>(n|0)?11:12;break;case 11:h=23;break;case 12:h=(p|0)>(n|0)?13:14;break;case 13:p=n;h=14;break;case 14:h=15;break;case 15:h=0>(p|0)?16:17;break;case 16:p=p+n|0;h=17;break;case 17:h=0!=(HEAP32[(w+16|0)>>2]|0)?20:18;break;case 18:h=(p|0)<(n|0)?19:20;break;case 19:p=p+1|0;h=20;break;case 20:n=p-t|0;h=0>(n|0)?21:22;break;
case 21:n=0;h=22;break;case 22:HEAP32[l>>2]=t;HEAP32[k>>2]=n;i=1;h=26;break;case 23:h=0!=(r|0)?24:25;break;case 24:var h=j,m=_mrb_class_obj_get(j,__str31220|0),x=q,s=0!=(HEAP32[(w+16|0)>>2]|0)?__str51222|0:__str61223|0,y=v;_mrb_raisef(h,m,__str41221|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=x,HEAP32[tempInt+4>>2]=s,HEAP32[tempInt+8>>2]=y,tempInt));h=25;break;case 25:i=2;h=26;break;case 26:return f=i,STACKTOP=g,f;default:assert(0,"bad label: "+
h)}}_mrb_range_beg_len.X=1;
function _range_initialize_copy(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c;d=e;_mrb_get_args(d,__str21219|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));a=0!=(_mrb_obj_equal(d,
b,g)|0)?3:4;break;case 3:var a=f,h=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[h>>2];HEAP32[a+4>>2]=HEAP32[h+4>>2];a=7;break;case 4:a=d;h=_mrb_obj_class(d,b);a=0!=(_mrb_obj_is_instance_of(a,g,h)|0)?6:5;break;case 5:a=d;h=_mrb_class_obj_get(d,__str71224|0);_mrb_raise(a,h,__str81225|0);a=6;break;case 6:a=HEAP32[(b|0)>>2];h=HEAP32[(g|0)>>2];assert(!0,"memcpy given 20 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>
2]=HEAP32[h>>2];HEAP32[a+4>>2]=HEAP32[h+4>>2];HEAP32[a+8>>2]=HEAP32[h+8>>2];HEAP32[a+12>>2]=HEAP32[h+12>>2];HEAP32[a+16>>2]=HEAP32[h+16>>2];a=f;h=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[h>>2];HEAP32[a+4>>2]=HEAP32[h+4>>2];a=7;break;case 7:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_init_range(f){var e;e=_mrb_define_class(f,__str1217|0,HEAP32[(f+72|0)>>2]);var b=_mrb_class_get(f,__str91226|0);_mrb_include_module(f,e,b);_mrb_define_method(f,e,__str101227|0,270,0);_mrb_define_method(f,e,__str111228|0,220,0);_mrb_define_method(f,e,__str121229|0,10,524288);_mrb_define_method(f,e,__str131230|0,526,524288);_mrb_define_method(f,e,__str141231|0,568,0);_mrb_define_method(f,e,__str151232|0,366,0);_mrb_define_method(f,e,__str161233|0,270,0);_mrb_define_method(f,e,__str171234|
0,526,524288);_mrb_define_method(f,e,__str181235|0,56,2097152);_mrb_define_method(f,e,__str191236|0,220,0);_mrb_define_method(f,e,__str201237|0,526,524288);_mrb_define_method(f,e,__str211238|0,88,0);_mrb_define_method(f,e,__str221239|0,248,0);_mrb_define_method(f,e,__str231240|0,282,524288);_mrb_define_method(f,e,__str241241|0,340,524288)}_mrb_init_range.X=1;
function _range_to_s(f,e,b){var c=STACKTOP;STACKTOP+=56;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];var a=c+8,d=c+16,g=c+24,h=c+32,i=c+40,j=c+48,b=HEAP32[(b|0)>>2];_mrb_obj_as_string(d,e,HEAP32[(b+12|0)>>2]|0);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[d>>
2];HEAP32[c+4>>2]=HEAP32[d+4>>2];_mrb_obj_as_string(g,e,HEAP32[(b+12|0)>>2]+8|0);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[g>>2];HEAP32[a+4>>2]=HEAP32[g+4>>2];_mrb_str_dup(h,e,c);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[h>>2];HEAP32[c+4>>2]=HEAP32[h+4>>2];_mrb_str_cat(i,e,c,__str251242|0,0!=(HEAP32[(b+16|0)>>2]|0)?3:2);_mrb_str_append(j,e,c,a);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=c}_range_to_s.X=1;function _range_inspect(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_inspect_range(f,e,b,b,0);STACKTOP=c}
function _range_eql(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h,i;d=e;_mrb_get_args(d,__str21219|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));a=0!=(_mrb_obj_equal(d,
b,g)|0)?3:4;break;case 3:_mrb_true_value1249(f);a=15;break;case 4:var a=d,j=_mrb_class_obj_get(d,__str1217|0),a=0!=(_mrb_obj_is_kind_of(a,g,j)|0)?6:5;break;case 5:_mrb_false_value1250(f);a=15;break;case 6:h=HEAP32[(b|0)>>2];a=18!=(HEAP32[(g+4|0)>>2]&255|0)?7:8;break;case 7:_mrb_false_value1250(f);a=15;break;case 8:i=HEAP32[(g|0)>>2];a=0!=(_mrb_eql(d,HEAP32[(h+12|0)>>2]|0,HEAP32[(i+12|0)>>2]|0)|0)?10:9;break;case 9:_mrb_false_value1250(f);a=15;break;case 10:a=0!=(_mrb_eql(d,HEAP32[(h+12|0)>>2]+8|0,
HEAP32[(i+12|0)>>2]+8|0)|0)?12:11;break;case 11:_mrb_false_value1250(f);a=15;break;case 12:a=(HEAP32[(h+16|0)>>2]|0)!=(HEAP32[(i+16|0)>>2]|0)?13:14;break;case 13:_mrb_false_value1250(f);a=15;break;case 14:_mrb_true_value1249(f);a=15;break;case 15:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_range_eql.X=1;
function _inspect_range(f,e,b,c,a){var d=STACKTOP;STACKTOP+=56;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[g>>2];HEAP32[b+4>>2]=HEAP32[g+4>>2];g=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[g>>2];HEAP32[c+4>>2]=HEAP32[g+4>>2];for(c=2;;)switch(c){case 2:var h,i=d,j=d+8,l,k=d+16,n=d+24,r=d+32,
t=d+40,p=d+48;h=e;c=a;l=HEAP32[(b|0)>>2];c=0!=(c|0)?3:4;break;case 3:c=0!=(HEAP32[(l+16|0)>>2]|0)?0:1;_mrb_str_new(f,h,_inspect_range_s+14*c|0,HEAP32[(_inspect_range_n+(c<<2)|0)>>2]);c=5;break;case 4:_mrb_inspect(k,h,HEAP32[(l+12|0)>>2]|0);c=i;g=k;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[g>>2];HEAP32[c+4>>2]=HEAP32[g+4>>2];_mrb_inspect(n,h,HEAP32[(l+12|0)>>2]+8|0);c=j;g=n;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[c>>2]=HEAP32[g>>2];HEAP32[c+4>>2]=HEAP32[g+4>>2];_mrb_str_dup(r,h,i);c=i;g=r;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[g>>2];HEAP32[c+4>>2]=HEAP32[g+4>>2];_mrb_str_cat(t,h,i,__str251242|0,0!=(HEAP32[(l+16|0)>>2]|0)?3:2);_mrb_str_append(p,h,i,j);c=f;g=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[g>>2];HEAP32[c+4>>2]=HEAP32[g+4>>2];c=5;break;case 5:STACKTOP=d;return;
default:assert(0,"bad label: "+c)}}_inspect_range.X=1;
function _mrb_f_sprintf(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(b=2;;)switch(b){case 2:var d,g=c,h=c+4;d=e;_mrb_get_args(d,__str1253|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=h,HEAP32[tempInt+4>>2]=g,tempInt));
b=0>=(HEAP32[g>>2]|0)?3:4;break;case 3:b=d;a=_mrb_class_obj_get(d,__str11254|0);_mrb_raise(b,a,__str21255|0);_mrb_nil_value1301(f);b=5;break;case 4:_mrb_str_format(f,d,HEAP32[g>>2]-1|0,HEAP32[h>>2]+8|0,HEAP32[h>>2]|0);b=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+b)}}
function _mrb_nil_value1301(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_str_format(f,e,b,c,a){var d=STACKTOP;STACKTOP+=720;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=a,a=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[a>>2]=HEAP32[g>>2];HEAP32[a+4>>2]=HEAP32[g+4>>2];var h;for(h=2;;)switch(h){case 2:var i,j,l,k,n,r,t,p,q=d,v,w,m,x,s,y,B=d+8,A=d+16,G=d+24,z=d+32,E=d+40,M=d+48,C,H,L=d+56,R=d+64,I,K=d+72,Q=d+80,O=d+88,aa=d+96,J,la,ba=d+104,U=d+112,T=d+120,ua=d+128,N=d+136,
u=d+144,na=d+152,Z=d+160,Aa,Da=d+168,ja=d+176,X=d+184,ya=d+192,ca=d+200,Na=d+208,Ba=d+216,va,pb=d+224,Db=d+232,Ra=d+240,Pa=d+248,$a=d+256,pa=d+264,ub=d+272,Ha,Ia=d+280,ma=d+288,Ja=d+296,Sa,qb=d+304,Sb=d+312,Eb=d+320,eb=d+328,ab=d+336,Fb=d+344,Ta=d+352,Ea,wa,Ka=d+360,bb=d+368,xa,W=d+376,qa=d+384,fb=d+392,Ua=d+400,ga=d+408,gb=d+416,hb=d+448,ra,Y,cb,ib,Ca=d+512,oa,jb,za,sa,Va=d+516,db=d+524,Fa=d+532,kb=d+540,La=d+548,vb=d+556,Wa=d+564,rb=d+572,Gb=d+580,lb,Xa,Ma,mb,Ya,Hb=d+588,Qa=d+596,S,wb=d+604,ka=
d+612,xb=d+620,sb,yb,Nb=d+628,Ib=d+636,Oa=d+644,V,Za=d+652,$,Jb=d+656,tb=d+688,zb,D=d+696,Ab=d+704,Bb=d+712;i=e;j=b;l=c;x=0;s=1;y=0;_mrb_undef_value1302(z);j=j+1|0;l=l-8|0;_mrb_string_value(E,i,a);k=HEAP32[(HEAP32[(a|0)>>2]+20|0)>>2];n=k+HEAP32[(HEAP32[(a|0)>>2]+12|0)>>2]|0;t=0;p=120;_mrb_str_buf_new(M,i,p);var Kb=q,Cb=M;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Kb>>2]=HEAP32[Cb>>2];HEAP32[Kb+4>>2]=HEAP32[Cb+4>>2];r=HEAP32[(HEAP32[(q|0)>>2]+20|0)>>
2];_memset(r,0,p,1);h=3;break;case 3:h=k>>>0<n>>>0?4:584;break;case 4:H=0;C=k;h=5;break;case 5:if(C>>>0<n>>>0)h=6;else{var Tb=0;h=7}break;case 6:Tb=37!=(HEAP8[C]<<24>>24|0);h=7;break;case 7:h=Tb?8:10;break;case 8:h=9;break;case 9:C=C+1|0;h=5;break;case 10:h=11;break;case 11:h=12;break;case 12:h=13;break;case 13:h=(t+(C-k|0)|0)>=(p|0)?14:15;break;case 14:p=p<<1|0;h=13;break;case 15:_mrb_str_resize(L,i,q,p);r=HEAP32[(HEAP32[(q|0)>>2]+20|0)>>2];h=16;break;case 16:var ta=r+t|0,Yb=k,Ob=C-k|0;assert(0===
Ob%1,"memcpy given "+Ob+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(ta,Yb,Ob,1);t=t+(C-k|0)|0;h=17;break;case 17:h=C>>>0>=n>>>0?18:19;break;case 18:h=585;break;case 19:k=C+1|0;w=m=-1;_mrb_undef_value1302(R);var Ub=B,Pb=R;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Ub>>2]=HEAP32[Pb>>2];HEAP32[Ub+4>>2]=HEAP32[Pb+4>>2];h=20;break;case 20:var P=HEAP8[k]<<24>>24;h=32==(P|0)?22:35==(P|0)?27:43==(P|0)?32:45==(P|0)?37:48==(P|0)?
42:49==(P|0)||50==(P|0)||51==(P|0)||52==(P|0)||53==(P|0)||54==(P|0)||55==(P|0)||56==(P|0)||57==(P|0)?47:60==(P|0)||123==(P|0)?78:42==(P|0)?96:46==(P|0)?142:10==(P|0)||0==(P|0)?198:37==(P|0)?199:99==(P|0)?209:115==(P|0)||112==(P|0)?265:100==(P|0)||105==(P|0)||111==(P|0)||120==(P|0)||88==(P|0)||98==(P|0)||66==(P|0)||117==(P|0)?323:102==(P|0)||103==(P|0)||71==(P|0)||101==(P|0)||69==(P|0)||97==(P|0)||65==(P|0)?513:21;break;case 21:var Vb=i,Zb=_mrb_class_obj_get(i,__str11254|0),$b=HEAP8[k]<<24>>24;_mrb_raisef(Vb,
Zb,__str31256|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=$b,tempInt));h=582;break;case 22:h=0!=(x&32|0)?23:24;break;case 23:var nb=i,Qb=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(nb,Qb,__str41257|0);h=24;break;case 24:h=0!=(x&128|0)?25:26;break;case 25:var Wb=i,ic=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(Wb,ic,__str51258|0);h=26;break;case 26:x|=16;k=k+1|0;h=20;break;case 27:h=0!=(x&32|0)?28:29;break;case 28:var Xb=i,da=_mrb_class_obj_get(i,
__str11254|0);_mrb_raise(Xb,da,__str41257|0);h=29;break;case 29:h=0!=(x&128|0)?30:31;break;case 30:var ea=i,fa=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(ea,fa,__str51258|0);h=31;break;case 31:x|=1;k=k+1|0;h=20;break;case 32:h=0!=(x&32|0)?33:34;break;case 33:var ha=i,ia=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(ha,ia,__str41257|0);h=34;break;case 34:h=0!=(x&128|0)?35:36;break;case 35:var Fc=i,Gc=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(Fc,Gc,__str51258|0);h=36;break;case 36:x|=4;k=k+1|
0;h=20;break;case 37:h=0!=(x&32|0)?38:39;break;case 38:var jc=i,rc=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(jc,rc,__str41257|0);h=39;break;case 39:h=0!=(x&128|0)?40:41;break;case 40:var kc=i,sc=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(kc,sc,__str51258|0);h=41;break;case 41:x|=2;k=k+1|0;h=20;break;case 42:h=0!=(x&32|0)?43:44;break;case 43:var Ga=i,tc=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(Ga,tc,__str41257|0);h=44;break;case 44:h=0!=(x&128|0)?45:46;break;case 45:var ac=i,Lb=_mrb_class_obj_get(i,
__str11254|0);_mrb_raise(ac,Lb,__str51258|0);h=46;break;case 46:x|=8;k=k+1|0;h=20;break;case 47:v=0;h=48;break;case 48:if(k>>>0<n>>>0)h=49;else{var uc=0;h=50}break;case 49:uc=0!=(_isdigit(HEAP8[k]&255)|0);h=50;break;case 50:h=uc?51:55;break;case 51:I=(10*v|0)+((HEAP8[k]<<24>>24)-48|0)|0;h=((I|0)/10&-1|0)!=(v|0)?52:53;break;case 52:var cc=i,bc=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(cc,bc,__str61259|0);h=53;break;case 53:v=I;h=54;break;case 54:k=k+1|0;h=48;break;case 55:h=k>>>0>=n>>>0?56:57;
break;case 56:var ob=i,vc=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(ob,vc,__str71260|0);h=57;break;case 57:h=36==(HEAP8[k]<<24>>24|0)?58:73;break;case 58:h=5==(HEAP32[(B+4|0)>>2]&255|0)?60:59;break;case 59:var wc=i,xc=_mrb_class_obj_get(i,__str11254|0),Rb=v;_mrb_raisef(wc,xc,__str81261|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Rb,tempInt));h=60;break;case 60:h=0<(y|0)?61:62;break;case 61:var lc=i,yc=_mrb_class_obj_get(i,__str11254|
0),mc=v,dc=y;_mrb_raisef(lc,yc,__str91262|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=mc,HEAP32[tempInt+4>>2]=dc,tempInt));_mrb_undef_value1302(K);var ec=B,nc=K;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[ec>>2]=HEAP32[nc>>2];HEAP32[ec+4>>2]=HEAP32[nc+4>>2];h=72;break;case 62:h=-2==(y|0)?63:64;break;case 63:var zc=i,oc=_mrb_class_obj_get(i,__str11254|0),Ac=v;_mrb_raisef(zc,oc,__str101263|
0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Ac,tempInt));_mrb_undef_value1302(Q);var fc=B,Bf=Q;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[fc>>2]=HEAP32[Bf>>2];HEAP32[fc+4>>2]=HEAP32[Bf+4>>2];h=71;break;case 64:h=1>(v|0)?65:66;break;case 65:var Tc=i,Uc=_mrb_class_obj_get(i,__str11254|0),Vc=v;_mrb_raisef(Tc,Uc,__str111264|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,
"Ran out of stack"),HEAP32[tempInt>>2]=Vc,tempInt));_mrb_undef_value1302(O);var Bc=B,Cc=O;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Bc>>2]=HEAP32[Cc>>2];HEAP32[Bc+4>>2]=HEAP32[Cc+4>>2];h=70;break;case 66:y=-1;h=(v|0)>=(j|0)?67:68;break;case 67:var pc=i,qd=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(pc,qd,__str21255|0);_mrb_undef_value1302(aa);var Wc=B,Xc=aa;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[Wc>>2]=HEAP32[Xc>>2];HEAP32[Wc+4>>2]=HEAP32[Xc+4>>2];h=69;break;case 68:var Dc=B,Mb=l+(v<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Dc>>2]=HEAP32[Mb>>2];HEAP32[Dc+4>>2]=HEAP32[Mb+4>>2];h=69;break;case 69:h=70;break;case 70:h=71;break;case 71:h=72;break;case 72:k=k+1|0;h=20;break;case 73:h=0!=(x&32|0)?74:75;break;case 74:var Hc=i,gc=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(Hc,gc,__str121265|0);h=75;break;case 75:h=0!=(x&128|0)?76:
77;break;case 76:var Yc=i,Zc=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(Yc,Zc,__str131266|0);h=77;break;case 77:w=v;x|=32;h=20;break;case 78:J=k;la=(60==(HEAP8[k]<<24>>24|0)?62:125)&255;h=79;break;case 79:if(k>>>0<n>>>0)h=80;else{var $c=0;h=81}break;case 80:$c=(HEAP8[k]<<24>>24|0)!=(la<<24>>24|0);h=81;break;case 81:h=$c?82:83;break;case 82:k=k+1|0;h=79;break;case 83:h=0!=H<<16>>16?84:85;break;case 84:var rd=i,sd=_mrb_class_obj_get(i,__str11254|0),td=(k-J|0)+1|0,ad=J,ud=_mrb_sym2name(i,H);_mrb_raisef(rd,
sd,__str141267|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=td,HEAP32[tempInt+4>>2]=ad,HEAP32[tempInt+8>>2]=ud,tempInt));h=85;break;case 85:_mrb_str_new(U,i,J+1|0,(k-J|0)-1|0);var Ec=ba,Ic=U;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Ec>>2]=HEAP32[Ic>>2];HEAP32[Ec+4>>2]=HEAP32[Ic+4>>2];H=_mrb_intern_str(i,ba);h=0<(y|0)?86:87;break;case 86:var Jc=i,vd=_mrb_class_obj_get(i,__str11254|0),
wd=(k-J|0)+1|0,Qd=J,pd=y;_mrb_raisef(Jc,vd,__str151268|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=wd,HEAP32[tempInt+4>>2]=Qd,HEAP32[tempInt+8>>2]=pd,tempInt));_mrb_undef_value1302(T);var bd=B,Kc=T;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[bd>>2]=HEAP32[Kc>>2];HEAP32[bd+4>>2]=HEAP32[Kc+4>>2];h=91;break;case 87:h=-1==(y|0)?88:89;break;case 88:var F=i,xd=_mrb_class_obj_get(i,__str11254|
0),cd=(k-J|0)+1|0,dd=J;_mrb_raisef(F,xd,__str161269|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=cd,HEAP32[tempInt+4>>2]=dd,tempInt));_mrb_undef_value1302(ua);var Lc=B,ed=ua;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Lc>>2]=HEAP32[ed>>2];HEAP32[Lc+4>>2]=HEAP32[ed+4>>2];h=90;break;case 89:y=-2;var yd=i;_get_hash(N,i,z,j,l);_mrb_symbol_value1303(u,H);_mrb_undef_value1302(na);_mrb_hash_fetch(Z,
yd,N,u,na);var fd=B,gd=Z;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[fd>>2]=HEAP32[gd>>2];HEAP32[fd+4>>2]=HEAP32[gd+4>>2];h=90;break;case 90:h=91;break;case 91:h=5==(HEAP32[(B+4|0)>>2]&255|0)?92:93;break;case 92:var zd=i,Ad=_mrb_class_obj_get(i,__str171270|0),Bd=(k-J|0)+1|0,hd=J;_mrb_raisef(zd,Ad,__str181271|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Bd,HEAP32[tempInt+4>>2]=hd,tempInt));
h=93;break;case 93:h=125==(la<<24>>24|0)?94:95;break;case 94:h=266;break;case 95:k=k+1|0;h=20;break;case 96:h=0!=(x&32|0)?97:98;break;case 97:var Cd=i,Dd=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(Cd,Dd,__str121265|0);h=98;break;case 98:h=0!=(x&128|0)?99:100;break;case 99:var id=i,jd=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(id,jd,__str131266|0);h=100;break;case 100:x|=32;h=101;break;case 101:var Mc=k;k=Mc+1|0;C=Mc;v=0;h=102;break;case 102:if(k>>>0<n>>>0)h=103;else{var Nc=0;h=104}break;case 103:Nc=
0!=(_isdigit(HEAP8[k]&255)|0);h=104;break;case 104:h=Nc?105:109;break;case 105:Aa=(10*v|0)+((HEAP8[k]<<24>>24)-48|0)|0;h=((Aa|0)/10&-1|0)!=(v|0)?106:107;break;case 106:var Ed=i,kd=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(Ed,kd,__str191272|0);h=107;break;case 107:v=Aa;h=108;break;case 108:k=k+1|0;h=102;break;case 109:h=k>>>0>=n>>>0?110:111;break;case 110:var ld=i,md=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(ld,md,__str71260|0);h=111;break;case 111:h=36==(HEAP8[k]<<24>>24|0)?112:125;break;
case 112:h=0<(y|0)?113:114;break;case 113:var Cf=i,vh=_mrb_class_obj_get(i,__str11254|0),Df=v,Ef=y;_mrb_raisef(Cf,vh,__str91262|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Df,HEAP32[tempInt+4>>2]=Ef,tempInt));_mrb_undef_value1302(Da);var Rd=A,Sd=Da;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Rd>>2]=HEAP32[Sd>>2];HEAP32[Rd+4>>2]=HEAP32[Sd+4>>2];h=124;break;case 114:h=-2==(y|0)?115:116;
break;case 115:var wh=i,Ff=_mrb_class_obj_get(i,__str11254|0),Gf=v;_mrb_raisef(wh,Ff,__str101263|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Gf,tempInt));_mrb_undef_value1302(ja);var Td=A,Ud=ja;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Td>>2]=HEAP32[Ud>>2];HEAP32[Td+4>>2]=HEAP32[Ud+4>>2];h=123;break;case 116:h=1>(v|0)?117:118;break;case 117:var xh=i,Hf=_mrb_class_obj_get(i,__str11254|
0),If=v;_mrb_raisef(xh,Hf,__str111264|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=If,tempInt));_mrb_undef_value1302(X);var Vd=A,Wd=X;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Vd>>2]=HEAP32[Wd>>2];HEAP32[Vd+4>>2]=HEAP32[Wd+4>>2];h=122;break;case 118:y=-1;h=(v|0)>=(j|0)?119:120;break;case 119:var yh=i,Jf=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(yh,Jf,__str21255|0);_mrb_undef_value1302(ya);
var Xd=A,Yd=ya;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Xd>>2]=HEAP32[Yd>>2];HEAP32[Xd+4>>2]=HEAP32[Yd+4>>2];h=121;break;case 120:var Zd=A,Kf=l+(v<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Zd>>2]=HEAP32[Kf>>2];HEAP32[Zd+4>>2]=HEAP32[Kf+4>>2];h=121;break;case 121:h=122;break;case 122:h=123;break;case 123:h=124;break;case 124:h=138;break;case 125:h=5==(HEAP32[(B+4|0)>>2]&255|0)?127:126;break;
case 126:var $d=A,ae=B;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[$d>>2]=HEAP32[ae>>2];HEAP32[$d+4>>2]=HEAP32[ae+4>>2];h=137;break;case 127:h=-1==(y|0)?128:129;break;case 128:var Lf=i,Mf=_mrb_class_obj_get(i,__str11254|0),zh=s;_mrb_raisef(Lf,Mf,__str201273|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=zh,tempInt));_mrb_undef_value1302(ca);var be=A,ce=ca;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[be>>2]=HEAP32[ce>>2];HEAP32[be+4>>2]=HEAP32[ce+4>>2];h=136;break;case 129:h=-2==(y|0)?130:131;break;case 130:var Nf=i,Of=_mrb_class_obj_get(i,__str11254|0),Pf=s;_mrb_raisef(Nf,Of,__str211274|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Pf,tempInt));_mrb_undef_value1302(Na);var de=A,ee=Na;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[de>>2]=HEAP32[ee>>2];HEAP32[de+4>>2]=HEAP32[ee+4>>
2];h=135;break;case 131:var Qf=s;s=Qf+1|0;y=Qf;h=(y|0)>=(j|0)?132:133;break;case 132:var Ah=i,Rf=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(Ah,Rf,__str21255|0);_mrb_undef_value1302(Ba);var fe=A,ge=Ba;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[fe>>2]=HEAP32[ge>>2];HEAP32[fe+4>>2]=HEAP32[ge+4>>2];h=134;break;case 133:var he=A,ie=l+(y<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[he>>2]=HEAP32[ie>>
2];HEAP32[he+4>>2]=HEAP32[ie+4>>2];h=134;break;case 134:h=135;break;case 135:h=136;break;case 136:h=137;break;case 137:k=C;h=138;break;case 138:w=HEAP32[(A|0)>>2];h=139;break;case 139:h=0>(w|0)?140:141;break;case 140:x|=2;w=-w|0;h=141;break;case 141:k=k+1|0;h=20;break;case 142:h=0!=(x&128|0)?143:144;break;case 143:var Sf=i,Tf=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(Sf,Tf,__str221275|0);h=144;break;case 144:x|=192;m=0;k=k+1|0;h=42==(HEAP8[k]<<24>>24|0)?145:187;break;case 145:h=146;break;case 146:var je=
k;k=je+1|0;C=je;v=0;h=147;break;case 147:if(k>>>0<n>>>0)h=148;else{var ke=0;h=149}break;case 148:ke=0!=(_isdigit(HEAP8[k]&255)|0);h=149;break;case 149:h=ke?150:154;break;case 150:va=(10*v|0)+((HEAP8[k]<<24>>24)-48|0)|0;h=((va|0)/10&-1|0)!=(v|0)?151:152;break;case 151:var Bh=i,Ch=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(Bh,Ch,__str191272|0);h=152;break;case 152:v=va;h=153;break;case 153:k=k+1|0;h=147;break;case 154:h=k>>>0>=n>>>0?155:156;break;case 155:var Uf=i,Vf=_mrb_class_obj_get(i,__str11254|
0);_mrb_raise(Uf,Vf,__str71260|0);h=156;break;case 156:h=36==(HEAP8[k]<<24>>24|0)?157:170;break;case 157:h=0<(y|0)?158:159;break;case 158:var Wf=i,Dh=_mrb_class_obj_get(i,__str11254|0),Xf=v,Yf=y;_mrb_raisef(Wf,Dh,__str91262|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Xf,HEAP32[tempInt+4>>2]=Yf,tempInt));_mrb_undef_value1302(pb);var le=A,me=pb;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[le>>
2]=HEAP32[me>>2];HEAP32[le+4>>2]=HEAP32[me+4>>2];h=169;break;case 159:h=-2==(y|0)?160:161;break;case 160:var Zf=i,$f=_mrb_class_obj_get(i,__str11254|0),ag=v;_mrb_raisef(Zf,$f,__str101263|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=ag,tempInt));_mrb_undef_value1302(Db);var ne=A,oe=Db;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[ne>>2]=HEAP32[oe>>2];HEAP32[ne+4>>2]=HEAP32[oe+4>>2];h=168;
break;case 161:h=1>(v|0)?162:163;break;case 162:var Eh=i,bg=_mrb_class_obj_get(i,__str11254|0),cg=v;_mrb_raisef(Eh,bg,__str111264|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=cg,tempInt));_mrb_undef_value1302(Ra);var pe=A,qe=Ra;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[pe>>2]=HEAP32[qe>>2];HEAP32[pe+4>>2]=HEAP32[qe+4>>2];h=167;break;case 163:y=-1;h=(v|0)>=(j|0)?164:165;break;case 164:var dg=
i,eg=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(dg,eg,__str21255|0);_mrb_undef_value1302(Pa);var re=A,fg=Pa;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[re>>2]=HEAP32[fg>>2];HEAP32[re+4>>2]=HEAP32[fg+4>>2];h=166;break;case 165:var se=A,gg=l+(v<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[se>>2]=HEAP32[gg>>2];HEAP32[se+4>>2]=HEAP32[gg+4>>2];h=166;break;case 166:h=167;break;case 167:h=168;break;
case 168:h=169;break;case 169:h=183;break;case 170:h=5==(HEAP32[(B+4|0)>>2]&255|0)?172:171;break;case 171:var hg=A,te=B;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[hg>>2]=HEAP32[te>>2];HEAP32[hg+4>>2]=HEAP32[te+4>>2];h=182;break;case 172:h=-1==(y|0)?173:174;break;case 173:var ig=i,jg=_mrb_class_obj_get(i,__str11254|0),kg=s;_mrb_raisef(ig,jg,__str201273|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>
2]=kg,tempInt));_mrb_undef_value1302($a);var ue=A,ve=$a;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[ue>>2]=HEAP32[ve>>2];HEAP32[ue+4>>2]=HEAP32[ve+4>>2];h=181;break;case 174:h=-2==(y|0)?175:176;break;case 175:var Fh=i,lg=_mrb_class_obj_get(i,__str11254|0),mg=s;_mrb_raisef(Fh,lg,__str211274|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=mg,tempInt));_mrb_undef_value1302(pa);var ng=A,we=pa;
assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[ng>>2]=HEAP32[we>>2];HEAP32[ng+4>>2]=HEAP32[we+4>>2];h=180;break;case 176:var xe=s;s=xe+1|0;y=xe;h=(y|0)>=(j|0)?177:178;break;case 177:var Gh=i,og=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(Gh,og,__str21255|0);_mrb_undef_value1302(ub);var ye=A,ze=ub;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[ye>>2]=HEAP32[ze>>2];HEAP32[ye+4>>2]=HEAP32[ze+4>>2];h=179;break;
case 178:var Ae=A,Be=l+(y<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Ae>>2]=HEAP32[Be>>2];HEAP32[Ae+4>>2]=HEAP32[Be+4>>2];h=179;break;case 179:h=180;break;case 180:h=181;break;case 181:h=182;break;case 182:k=C;h=183;break;case 183:m=HEAP32[(A|0)>>2];h=184;break;case 184:h=0>(m|0)?185:186;break;case 185:x&=-65;h=186;break;case 186:k=k+1|0;h=20;break;case 187:h=188;break;case 188:if(k>>>0<n>>>0)h=189;else{var Vj=0;h=190}break;case 189:Vj=0!=(_isdigit(HEAP8[k]&
255)|0);h=190;break;case 190:h=Vj?191:195;break;case 191:Ha=(10*m|0)+((HEAP8[k]<<24>>24)-48|0)|0;h=((Ha|0)/10&-1|0)!=(m|0)?192:193;break;case 192:var Hh=i,Ih=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(Hh,Ih,__str231276|0);h=193;break;case 193:m=Ha;h=194;break;case 194:k=k+1|0;h=188;break;case 195:h=k>>>0>=n>>>0?196:197;break;case 196:var pg=i,qg=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(pg,qg,__str71260|0);h=197;break;case 197:h=20;break;case 198:k=k-1|0;h=199;break;case 199:h=0!=(x|0)?200:
201;break;case 200:var rg=i,sg=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(rg,sg,__str241277|0);h=201;break;case 201:h=202;break;case 202:h=203;break;case 203:h=204;break;case 204:h=(t+1|0)>=(p|0)?205:206;break;case 205:p=p<<1|0;h=204;break;case 206:_mrb_str_resize(Ia,i,q,p);r=HEAP32[(HEAP32[(q|0)>>2]+20|0)>>2];h=207;break;case 207:var Jh=r+t|0;assert(!0,"memcpy given 1 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP8[Jh]=HEAP8[__str251278|0];t=t+1|0;h=208;break;case 208:h=582;
break;case 209:h=5==(HEAP32[(B+4|0)>>2]&255|0)?211:210;break;case 210:var Ce=ma,De=B;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Ce>>2]=HEAP32[De>>2];HEAP32[Ce+4>>2]=HEAP32[De+4>>2];h=221;break;case 211:h=-1==(y|0)?212:213;break;case 212:var Kh=i,tg=_mrb_class_obj_get(i,__str11254|0),Lh=s;_mrb_raisef(Kh,tg,__str201273|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Lh,tempInt));_mrb_undef_value1302(ma);
h=220;break;case 213:h=-2==(y|0)?214:215;break;case 214:var ug=i,Mh=_mrb_class_obj_get(i,__str11254|0),Nh=s;_mrb_raisef(ug,Mh,__str211274|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Nh,tempInt));_mrb_undef_value1302(ma);h=219;break;case 215:var Ee=s;s=Ee+1|0;y=Ee;h=(y|0)>=(j|0)?216:217;break;case 216:var vg=i,Oh=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(vg,Oh,__str21255|0);_mrb_undef_value1302(ma);h=218;break;case 217:var Fe=ma,Ge=
l+(y<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Fe>>2]=HEAP32[Ge>>2];HEAP32[Fe+4>>2]=HEAP32[Ge+4>>2];h=218;break;case 218:h=219;break;case 219:h=220;break;case 220:h=221;break;case 221:_mrb_check_string_type(qb,i,ma);var wg=Ja,He=qb;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[wg>>2]=HEAP32[He>>2];HEAP32[wg+4>>2]=HEAP32[He+4>>2];h=0==(HEAP32[(Ja+4|0)>>2]&255|0)?222:223;break;case 222:h=0!=(HEAP32[(Ja|
0)>>2]|0)?223:226;break;case 223:h=1!=(HEAP32[(HEAP32[(Ja|0)>>2]+12|0)>>2]|0)?224:225;break;case 224:var xg=i,yg=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(xg,yg,__str261279|0);h=225;break;case 225:Sa=HEAP8[HEAP32[(HEAP32[(Ja|0)>>2]+20|0)>>2]|0]<<24>>24;v=1;h=227;break;case 226:Sa=HEAP32[(ma|0)>>2];v=1;h=227;break;case 227:h=0>=(v|0)?228:229;break;case 228:var zg=i,Ag=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(zg,Ag,__str271280|0);h=229;break;case 229:h=0!=(x&32|0)?236:230;break;case 230:h=
231;break;case 231:h=232;break;case 232:h=(t+v|0)>=(p|0)?233:234;break;case 233:p=p<<1|0;h=232;break;case 234:_mrb_str_resize(Sb,i,q,p);r=HEAP32[(HEAP32[(q|0)>>2]+20|0)>>2];h=235;break;case 235:HEAP8[r+t|0]=Sa&255;t=t+v|0;h=264;break;case 236:h=0!=(x&2|0)?237:250;break;case 237:h=238;break;case 238:h=239;break;case 239:h=(t+v|0)>=(p|0)?240:241;break;case 240:p=p<<1|0;h=239;break;case 241:_mrb_str_resize(Eb,i,q,p);r=HEAP32[(HEAP32[(q|0)>>2]+20|0)>>2];h=242;break;case 242:HEAP8[r+t|0]=Sa&255;t=t+v|
0;h=243;break;case 243:h=244;break;case 244:h=245;break;case 245:h=(t+(w-1|0)|0)>=(p|0)?246:247;break;case 246:p=p<<1|0;h=245;break;case 247:_mrb_str_resize(eb,i,q,p);r=HEAP32[(HEAP32[(q|0)>>2]+20|0)>>2];h=248;break;case 248:_memset(r+t|0,32,w-1|0,1);t=t+(w-1|0)|0;h=249;break;case 249:h=263;break;case 250:h=251;break;case 251:h=252;break;case 252:h=253;break;case 253:h=(t+(w-1|0)|0)>=(p|0)?254:255;break;case 254:p=p<<1|0;h=253;break;case 255:_mrb_str_resize(ab,i,q,p);r=HEAP32[(HEAP32[(q|0)>>2]+20|
0)>>2];h=256;break;case 256:_memset(r+t|0,32,w-1|0,1);t=t+(w-1|0)|0;h=257;break;case 257:h=258;break;case 258:h=259;break;case 259:h=(t+v|0)>=(p|0)?260:261;break;case 260:p=p<<1|0;h=259;break;case 261:_mrb_str_resize(Fb,i,q,p);r=HEAP32[(HEAP32[(q|0)>>2]+20|0)>>2];h=262;break;case 262:HEAP8[r+t|0]=Sa&255;t=t+v|0;h=263;break;case 263:h=264;break;case 264:h=582;break;case 265:h=266;break;case 266:h=5==(HEAP32[(B+4|0)>>2]&255|0)?268:267;break;case 267:var Ie=Ta,Je=B;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[Ie>>2]=HEAP32[Je>>2];HEAP32[Ie+4>>2]=HEAP32[Je+4>>2];h=278;break;case 268:h=-1==(y|0)?269:270;break;case 269:var Bg=i,Ph=_mrb_class_obj_get(i,__str11254|0),Cg=s;_mrb_raisef(Bg,Ph,__str201273|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Cg,tempInt));_mrb_undef_value1302(Ta);h=277;break;case 270:h=-2==(y|0)?271:272;break;case 271:var Dg=i,Qh=_mrb_class_obj_get(i,__str11254|0),Eg=s;_mrb_raisef(Dg,Qh,__str211274|0,(tempInt=STACKTOP,
STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Eg,tempInt));_mrb_undef_value1302(Ta);h=276;break;case 272:var Ke=s;s=Ke+1|0;y=Ke;h=(y|0)>=(j|0)?273:274;break;case 273:var Fg=i,Gg=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(Fg,Gg,__str21255|0);_mrb_undef_value1302(Ta);h=275;break;case 274:var Le=Ta,Me=l+(y<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Le>>2]=HEAP32[Me>>2];HEAP32[Le+4>>2]=HEAP32[Me+4>>2];
h=275;break;case 275:h=276;break;case 276:h=277;break;case 277:h=278;break;case 278:h=112==(HEAP8[k]<<24>>24|0)?279:280;break;case 279:_mrb_inspect(Ka,i,Ta);var Hg=Ta,Ig=Ka;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Hg>>2]=HEAP32[Ig>>2];HEAP32[Hg+4>>2]=HEAP32[Ig+4>>2];h=280;break;case 280:_mrb_obj_as_string(bb,i,Ta);var Jg=G,Kg=bb;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Jg>>2]=HEAP32[Kg>>2];HEAP32[Jg+
4>>2]=HEAP32[Kg+4>>2];Ea=HEAP32[(HEAP32[(G|0)>>2]+12|0)>>2];HEAP32[(HEAP32[(q|0)>>2]+12|0)>>2]=t;h=0!=(x&96|0)?281:315;break;case 281:wa=HEAP32[(HEAP32[(G|0)>>2]+12|0)>>2];h=0>(wa|0)?282:283;break;case 282:var Lg=i,Rh=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(Lg,Rh,__str281281|0);h=283;break;case 283:h=0!=(x&64|0)?284:286;break;case 284:h=(m|0)<(wa|0)?285:286;break;case 285:xa=HEAP32[(HEAP32[(G|0)>>2]+20|0)>>2]+m|0;wa=m;Ea=xa-HEAP32[(HEAP32[(G|0)>>2]+20|0)>>2]|0;h=286;break;case 286:h=0!=(x&32|
0)?287:314;break;case 287:h=(w|0)>(wa|0)?288:314;break;case 288:w=w-wa|0;h=0!=(x&2|0)?298:289;break;case 289:h=290;break;case 290:h=291;break;case 291:h=(t+w|0)>=(p|0)?292:293;break;case 292:p=p<<1|0;h=291;break;case 293:_mrb_str_resize(W,i,q,p);r=HEAP32[(HEAP32[(q|0)>>2]+20|0)>>2];h=294;break;case 294:h=295;break;case 295:var Mg=w;w=Mg-1|0;h=0!=(Mg|0)?296:297;break;case 296:var Ne=t;t=Ne+1|0;HEAP8[r+Ne|0]=32;h=295;break;case 297:h=298;break;case 298:h=299;break;case 299:h=300;break;case 300:h=(t+
Ea|0)>=(p|0)?301:302;break;case 301:p=p<<1|0;h=300;break;case 302:_mrb_str_resize(qa,i,q,p);r=HEAP32[(HEAP32[(q|0)>>2]+20|0)>>2];h=303;break;case 303:var Ng=r+t|0,Og=HEAP32[(HEAP32[(G|0)>>2]+20|0)>>2],Fd=Ea;assert(0===Fd%1,"memcpy given "+Fd+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(Ng,Og,Fd,1);t=t+Ea|0;h=0!=(x&2|0)?304:313;break;case 304:h=305;break;case 305:h=306;break;case 306:h=(t+w|0)>=(p|0)?307:308;break;case 307:p=p<<1|0;h=306;break;case 308:_mrb_str_resize(fb,
i,q,p);r=HEAP32[(HEAP32[(q|0)>>2]+20|0)>>2];h=309;break;case 309:h=310;break;case 310:var Gd=w;w=Gd-1|0;h=0!=(Gd|0)?311:312;break;case 311:var Pg=t;t=Pg+1|0;HEAP8[r+Pg|0]=32;h=310;break;case 312:h=313;break;case 313:h=582;break;case 314:h=315;break;case 315:h=316;break;case 316:h=317;break;case 317:h=318;break;case 318:h=(t+Ea|0)>=(p|0)?319:320;break;case 319:p=p<<1|0;h=318;break;case 320:_mrb_str_resize(Ua,i,q,p);r=HEAP32[(HEAP32[(q|0)>>2]+20|0)>>2];h=321;break;case 321:var Sh=r+t|0,Th=HEAP32[(HEAP32[(G|
0)>>2]+20|0)>>2],Oe=Ea;assert(0===Oe%1,"memcpy given "+Oe+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(Sh,Th,Oe,1);t=t+Ea|0;h=322;break;case 322:h=582;break;case 323:h=5==(HEAP32[(B+4|0)>>2]&255|0)?325:324;break;case 324:var Pe=ga,Qe=B;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Pe>>2]=HEAP32[Qe>>2];HEAP32[Pe+4>>2]=HEAP32[Qe+4>>2];h=335;break;case 325:h=-1==(y|0)?326:327;break;case 326:var Qg=i,Rg=_mrb_class_obj_get(i,__str11254|
0),Sg=s;_mrb_raisef(Qg,Rg,__str201273|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Sg,tempInt));_mrb_undef_value1302(ga);h=334;break;case 327:h=-2==(y|0)?328:329;break;case 328:var Tg=i,Ug=_mrb_class_obj_get(i,__str11254|0),Uh=s;_mrb_raisef(Tg,Ug,__str211274|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Uh,tempInt));_mrb_undef_value1302(ga);h=333;break;case 329:var Re=s;s=Re+
1|0;y=Re;h=(y|0)>=(j|0)?330:331;break;case 330:var Vg=i,Vh=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(Vg,Vh,__str21255|0);_mrb_undef_value1302(ga);h=332;break;case 331:var Se=ga,Te=l+(y<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Se>>2]=HEAP32[Te>>2];HEAP32[Se+4>>2]=HEAP32[Te+4>>2];h=332;break;case 332:h=333;break;case 333:h=334;break;case 334:h=335;break;case 335:ib=cb=Y=0;jb=oa=HEAP8[Ca]=0;var qc=HEAP8[k]<<24>>24;h=100==(qc|0)||105==(qc|
0)||117==(qc|0)?336:111==(qc|0)||120==(qc|0)||88==(qc|0)||98==(qc|0)||66==(qc|0)?337:340;break;case 336:cb=1;h=341;break;case 337:h=0!=(x&20|0)?338:339;break;case 338:cb=1;h=339;break;case 339:h=341;break;case 340:h=341;break;case 341:h=0!=(x&1|0)?342:350;break;case 342:var Oc=HEAP8[k]<<24>>24;h=111==(Oc|0)?343:120==(Oc|0)?344:88==(Oc|0)?345:98==(Oc|0)?346:66==(Oc|0)?347:348;break;case 343:Y=__str291282|0;h=349;break;case 344:Y=__str301283|0;h=349;break;case 345:Y=__str311284|0;h=349;break;case 346:Y=
__str321285|0;h=349;break;case 347:Y=__str331286|0;h=349;break;case 348:h=349;break;case 349:h=350;break;case 350:h=351;break;case 351:var Hd=HEAP32[(ga+4|0)>>2]&255;h=6==(Hd|0)?352:17==(Hd|0)?358:3==(Hd|0)?359:360;break;case 352:h=2147483648>=HEAPF32[(ga|0)>>2]?353:355;break;case 353:h=-2147483648<=HEAPF32[(ga|0)>>2]?354:355;break;case 354:_mrb_fixnum_value1304(Va,HEAPF32[(ga|0)>>2]&-1);var Ue=ga,Ve=Va;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Ue>>
2]=HEAP32[Ve>>2];HEAP32[Ue+4>>2]=HEAP32[Ve+4>>2];h=351;break;case 355:_mrb_flt2big(db,i,HEAPF32[(ga|0)>>2]);var Pc=ga,We=db;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Pc>>2]=HEAP32[We>>2];HEAP32[Pc+4>>2]=HEAP32[We+4>>2];h=3==(HEAP32[(ga+4|0)>>2]&255|0)?356:357;break;case 356:h=351;break;case 357:h=361;break;case 358:_mrb_str_to_inum(Fa,i,ga,0,1);var Xe=ga,Ye=Fa;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[Xe>>2]=HEAP32[Ye>>2];HEAP32[Xe+4>>2]=HEAP32[Ye+4>>2];h=351;break;case 359:oa=HEAP32[(ga|0)>>2];h=361;break;case 360:_mrb_Integer(kb,i,ga);var Wg=ga,Ze=kb;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Wg>>2]=HEAP32[Ze>>2];HEAP32[Wg+4>>2]=HEAP32[Ze+4>>2];h=351;break;case 361:var hc=HEAP8[k]<<24>>24;h=111==(hc|0)?362:120==(hc|0)||88==(hc|0)?363:98==(hc|0)||66==(hc|0)?364:117==(hc|0)||100==(hc|0)||105==(hc|0)?365:366;break;case 362:za=8;h=367;break;
case 363:za=16;h=367;break;case 364:za=2;h=367;break;case 365:h=366;break;case 366:za=10;h=367;break;case 367:h=2==(za|0)?368:373;break;case 368:jb=oa;h=0>(oa|0)?369:371;break;case 369:h=0!=(cb|0)?371:370;break;case 370:var Xg=i;_mrb_fixnum_value1304(La,oa);_mrb_fix2binstr(vb,Xg,La,za);var nd=ga,$e=vb;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[nd>>2]=HEAP32[$e>>2];HEAP32[nd+4>>2]=HEAP32[$e+4>>2];ib=1;h=372;break;case 371:var Yg=i;_mrb_fixnum_value1304(Wa,
oa);_mrb_fix2str(rb,Yg,Wa,za);var af=ga,bf=rb;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[af>>2]=HEAP32[bf>>2];HEAP32[af+4>>2]=HEAP32[bf+4>>2];h=372;break;case 372:_mrb_str_to_inum(Gb,i,ga,10,0);oa=HEAP32[(Gb|0)>>2];h=373;break;case 373:h=0!=(cb|0)?374:387;break;case 374:lb=HEAP8[k];h=105==(lb<<24>>24|0)?375:376;break;case 375:lb=100;h=376;break;case 376:h=2==(za|0)?377:378;break;case 377:lb=100;h=378;break;case 378:h=0>(oa|0)?379:380;break;case 379:oa=
-oa|0;HEAP8[Ca]=45;w=w-1|0;h=386;break;case 380:h=0!=(x&4|0)?381:382;break;case 381:HEAP8[Ca]=43;w=w-1|0;h=385;break;case 382:h=0!=(x&16|0)?383:384;break;case 383:HEAP8[Ca]=32;w=w-1|0;h=384;break;case 384:h=385;break;case 385:h=386;break;case 386:var od=lb<<24>>24;_snprintf(gb|0,32,__str341287|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=od,tempInt));var cf=oa;_snprintf(hb|0,64,gb|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+
STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=cf,tempInt));ra=hb|0;h=404;break;case 387:Xa=HEAP8[k];h=88==(Xa<<24>>24|0)?388:389;break;case 388:Xa=120;h=389;break;case 389:h=2==(za|0)?390:391;break;case 390:Xa=100;h=391;break;case 391:ra=hb|0;h=0>(oa|0)?392:393;break;case 392:ib=1;h=393;break;case 393:var Zg=Xa<<24>>24;_snprintf(gb|0,32,__str341287|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=Zg,tempInt));var df=ra+1|0;ra=df;var $g=
oa;_snprintf(df,63,gb|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=$g,tempInt));h=0>(oa|0)?394:403;break;case 394:ra=_remove_sign_bits(ra,za);var Qc=za;h=16==(Qc|0)?395:8==(Qc|0)?396:2==(Qc|0)?397:398;break;case 395:Ma=102;h=399;break;case 396:Ma=55;h=399;break;case 397:Ma=49;h=399;break;case 398:Ma=0;h=399;break;case 399:h=0!=(Ma<<24>>24|0)?400:402;break;case 400:h=(HEAP8[ra]<<24>>24|0)!=(Ma<<24>>24|0)?401:402;break;case 401:var ah=Ma,
ef=ra-1|0;ra=ef;HEAP8[ef]=ah;h=402;break;case 402:h=403;break;case 403:h=404;break;case 404:sa=_strlen(ra);h=0!=(ib|0)?405:406;break;case 405:m=m-2|0;w=w-2|0;h=406;break;case 406:h=88==(HEAP8[k]<<24>>24|0)?407:411;break;case 407:mb=ra;h=408;break;case 408:var ff=HEAP8[mb]&255;Ya=ff;h=0!=(ff|0)?409:410;break;case 409:var bh=_toupper(Ya)&255;HEAP8[mb]=bh;mb=mb+1|0;h=408;break;case 410:h=411;break;case 411:h=0!=(Y|0)?412:426;break;case 412:h=0!=HEAP8[Y+1|0]<<24>>24?426:413;break;case 413:h=0!=(ib|0)?
414:415;break;case 414:Y=0;h=425;break;case 415:h=1==(sa|0)?416:420;break;case 416:h=48==(HEAP8[ra]<<24>>24|0)?417:420;break;case 417:sa=0;h=0!=(x&64|0)?418:419;break;case 418:m=m-1|0;h=419;break;case 419:h=424;break;case 420:h=0!=(x&64|0)?421:423;break;case 421:h=(m|0)>(sa|0)?422:423;break;case 422:Y=0;h=423;break;case 423:h=424;break;case 424:h=425;break;case 425:h=430;break;case 426:h=1==(sa|0)?427:429;break;case 427:h=48==(HEAP8[ra]<<24>>24|0)?428:429;break;case 428:Y=0;h=429;break;case 429:h=
430;break;case 430:h=0!=(Y|0)?431:432;break;case 431:var ch=_strlen(Y);w=w-ch|0;h=432;break;case 432:h=8==(x&74|0)?433:434;break;case 433:m=w;w=0;h=442;break;case 434:h=(m|0)<(sa|0)?435:441;break;case 435:h=0!=(Y|0)?440:436;break;case 436:h=0==(m|0)?437:440;break;case 437:h=1==(sa|0)?438:440;break;case 438:h=48==(HEAP8[ra]<<24>>24|0)?439:440;break;case 439:sa=0;h=440;break;case 440:m=sa;h=441;break;case 441:w=w-m|0;h=442;break;case 442:h=0!=(x&2|0)?452:443;break;case 443:h=444;break;case 444:h=445;
break;case 445:h=(t+w|0)>=(p|0)?446:447;break;case 446:p=p<<1|0;h=445;break;case 447:_mrb_str_resize(Hb,i,q,p);r=HEAP32[(HEAP32[(q|0)>>2]+20|0)>>2];h=448;break;case 448:h=449;break;case 449:var gf=w;w=gf-1|0;h=0<(gf|0)?450:451;break;case 450:var hf=t;t=hf+1|0;HEAP8[r+hf|0]=32;h=449;break;case 451:h=452;break;case 452:h=0!=HEAP8[Ca]<<24>>24?453:461;break;case 453:h=454;break;case 454:h=455;break;case 455:h=456;break;case 456:h=(t+1|0)>=(p|0)?457:458;break;case 457:p=p<<1|0;h=456;break;case 458:_mrb_str_resize(Qa,
i,q,p);r=HEAP32[(HEAP32[(q|0)>>2]+20|0)>>2];h=459;break;case 459:var dh=r+t|0;assert(!0,"memcpy given 1 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP8[dh]=HEAP8[Ca];t=t+1|0;h=460;break;case 460:h=461;break;case 461:h=0!=(Y|0)?462:470;break;case 462:S=_strlen(Y);h=463;break;case 463:h=464;break;case 464:h=465;break;case 465:h=(t+S|0)>=(p|0)?466:467;break;case 466:p=p<<1|0;h=465;break;case 467:_mrb_str_resize(wb,i,q,p);r=HEAP32[(HEAP32[(q|0)>>2]+20|0)>>2];h=468;break;case 468:var eh=
r+t|0,fh=Y,Id=S;assert(0===Id%1,"memcpy given "+Id+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(eh,fh,Id,1);t=t+S|0;h=469;break;case 469:h=470;break;case 470:h=471;break;case 471:h=472;break;case 472:h=(t+(m-sa|0)|0)>=(p|0)?473:474;break;case 473:p=p<<1|0;h=472;break;case 474:_mrb_str_resize(ka,i,q,p);r=HEAP32[(HEAP32[(q|0)>>2]+20|0)>>2];h=475;break;case 475:h=0!=(ib|0)?476:484;break;case 476:h=477;break;case 477:h=478;break;case 478:h=479;break;case 479:h=(t+2|0)>=(p|0)?
480:481;break;case 480:p=p<<1|0;h=479;break;case 481:_mrb_str_resize(xb,i,q,p);r=HEAP32[(HEAP32[(q|0)>>2]+20|0)>>2];h=482;break;case 482:var jf=r+t|0;assert(!0,"memcpy given 2 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP8[jf]=HEAP8[__str351288|0];HEAP8[jf+1]=HEAP8[(__str351288|0)+1];t=t+2|0;h=483;break;case 483:h=484;break;case 484:h=0>(oa|0)?487:485;break;case 485:h=2==(za|0)?486:491;break;case 486:h=0>(jb|0)?487:491;break;case 487:sb=_sign_bits(za,k);h=488;break;case 488:var gh=
sa,kf=m;m=kf-1|0;h=(gh|0)<(kf|0)?489:490;break;case 489:var Jd=sb,lf=t;t=lf+1|0;HEAP8[r+lf|0]=Jd;h=488;break;case 490:h=497;break;case 491:h=2!=(x&66|0)?492:496;break;case 492:yb=48;h=493;break;case 493:var hh=sa,mf=m;m=mf-1|0;h=(hh|0)<(mf|0)?494:495;break;case 494:var ih=yb,nf=t;t=nf+1|0;HEAP8[r+nf|0]=ih;h=493;break;case 495:h=496;break;case 496:h=497;break;case 497:h=498;break;case 498:h=499;break;case 499:h=500;break;case 500:h=(t+sa|0)>=(p|0)?501:502;break;case 501:p=p<<1|0;h=500;break;case 502:_mrb_str_resize(Nb,
i,q,p);r=HEAP32[(HEAP32[(q|0)>>2]+20|0)>>2];h=503;break;case 503:var of=r+t|0,jh=ra,Kd=sa;assert(0===Kd%1,"memcpy given "+Kd+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(of,jh,Kd,1);t=t+sa|0;h=504;break;case 504:h=505;break;case 505:h=506;break;case 506:h=(t+w|0)>=(p|0)?507:508;break;case 507:p=p<<1|0;h=506;break;case 508:_mrb_str_resize(Ib,i,q,p);r=HEAP32[(HEAP32[(q|0)>>2]+20|0)>>2];h=509;break;case 509:h=510;break;case 510:var Ld=w;w=Ld-1|0;h=0<(Ld|0)?511:512;break;case 511:var Rc=
t;t=Rc+1|0;HEAP8[r+Rc|0]=32;h=510;break;case 512:h=582;break;case 513:h=5==(HEAP32[(B+4|0)>>2]&255|0)?515:514;break;case 514:var pf=Oa,qf=B;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[pf>>2]=HEAP32[qf>>2];HEAP32[pf+4>>2]=HEAP32[qf+4>>2];h=525;break;case 515:h=-1==(y|0)?516:517;break;case 516:var rf=i,kh=_mrb_class_obj_get(i,__str11254|0),lh=s;_mrb_raisef(rf,kh,__str201273|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=lh,tempInt));_mrb_undef_value1302(Oa);h=524;break;case 517:h=-2==(y|0)?518:519;break;case 518:var mh=i,nh=_mrb_class_obj_get(i,__str11254|0),oh=s;_mrb_raisef(mh,nh,__str211274|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=oh,tempInt));_mrb_undef_value1302(Oa);h=523;break;case 519:var sf=s;s=sf+1|0;y=sf;h=(y|0)>=(j|0)?520:521;break;case 520:var Md=i,ph=_mrb_class_obj_get(i,__str11254|0);_mrb_raise(Md,ph,__str21255|0);
_mrb_undef_value1302(Oa);h=522;break;case 521:var tf=Oa,uf=l+(y<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[tf>>2]=HEAP32[uf>>2];HEAP32[tf+4>>2]=HEAP32[uf+4>>2];h=522;break;case 522:h=523;break;case 523:h=524;break;case 524:h=525;break;case 525:$=6;_mrb_Float(tb,i,Oa);V=HEAPF32[(tb|0)>>2];h=0==(___fpclassifyd(V)|0)?527:526;break;case 526:h=1==(___fpclassifyd(V)|0)?527:565;break;case 527:h=0==(___fpclassifyd(V)|0)?528:529;break;case 528:zb=__str361289|
0;h=530;break;case 529:zb=__str371290|0;h=530;break;case 530:$=3;h=0==(___fpclassifyd(V)|0)?532:531;break;case 531:h=0>V?533:532;break;case 532:h=0!=(x&4|0)?533:534;break;case 533:$=$+1|0;h=534;break;case 534:h=0!=(x&32|0)?535:537;break;case 535:h=($|0)<(w|0)?536:537;break;case 536:$=w;h=537;break;case 537:h=538;break;case 538:h=539;break;case 539:h=(t+($+1|0)|0)>=(p|0)?540:541;break;case 540:p=p<<1|0;h=539;break;case 541:_mrb_str_resize(D,i,q,p);r=HEAP32[(HEAP32[(q|0)>>2]+20|0)>>2];h=542;break;case 542:var qh=
$;v=_snprintf(r+t|0,$+1|0,__str381291|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=qh,HEAP32[tempInt+4>>2]=__str391292|0,tempInt));h=0!=(x&2|0)?543:553;break;case 543:h=0==(___fpclassifyd(V)|0)?546:544;break;case 544:h=0>V?545:546;break;case 545:var vf=t;t=vf+1|0;HEAP8[r+vf|0]=45;h=552;break;case 546:h=0!=(x&4|0)?547:548;break;case 547:var wf=t;t=wf+1|0;HEAP8[r+wf|0]=43;h=551;break;case 548:h=0!=(x&16|0)?549:550;break;case 549:t=t+1|0;
h=550;break;case 550:h=551;break;case 551:h=552;break;case 552:var Nd=r+t|0,Od=zb;assert(!0,"memcpy given 3 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP8[Nd]=HEAP8[Od];HEAP8[Nd+1]=HEAP8[Od+1];HEAP8[Nd+2]=HEAP8[Od+2];h=564;break;case 553:h=0==(___fpclassifyd(V)|0)?556:554;break;case 554:h=0>V?555:556;break;case 555:HEAP8[r+(((t+$|0)-3|0)-1|0)|0]=45;h=563;break;case 556:h=0!=(x&4|0)?557:558;break;case 557:HEAP8[r+(((t+$|0)-3|0)-1|0)|0]=43;h=562;break;case 558:h=0!=(x&16|0)?559:
561;break;case 559:h=($|0)>(w|0)?560:561;break;case 560:t=t+1|0;h=561;break;case 561:h=562;break;case 562:h=563;break;case 563:var Pd=r+((t+$|0)-3|0)|0,Sc=zb;assert(!0,"memcpy given 3 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP8[Pd]=HEAP8[Sc];HEAP8[Pd+1]=HEAP8[Sc+1];HEAP8[Pd+2]=HEAP8[Sc+2];h=564;break;case 564:var rh=_strlen(r+t|0);t=t+rh|0;h=582;break;case 565:_fmt_setup(Jb|0,32,HEAP8[k]<<24>>24,x,w,m);$=0;h=101!=(HEAP8[k]<<24>>24|0)?566:570;break;case 566:h=69!=(HEAP8[k]<<
24>>24|0)?567:570;break;case 567:HEAP32[Za>>2]=-2147483648;_frexp(V,Za);h=0<(HEAP32[Za>>2]|0)?568:569;break;case 568:$=((146*HEAP32[Za>>2]|0)/485&-1)+1|0;h=569;break;case 569:h=570;break;case 570:h=0!=(x&64|0)?571:572;break;case 571:var xf=m;h=573;break;case 572:xf=6;h=573;break;case 573:$=$+xf|0;h=0!=(x&32|0)?574:576;break;case 574:h=($|0)<(w|0)?575:576;break;case 575:$=w;h=576;break;case 576:$=$+20|0;h=577;break;case 577:h=578;break;case 578:h=(t+$|0)>=(p|0)?579:580;break;case 579:p=p<<1|0;h=578;
break;case 580:_mrb_str_resize(Ab,i,q,p);r=HEAP32[(HEAP32[(q|0)>>2]+20|0)>>2];h=581;break;case 581:var sh=V;v=_snprintf(r+t|0,$,Jb|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),tempDoubleF64[0]=sh,HEAP32[tempInt>>2]=tempDoubleI32[0],HEAP32[tempInt+4>>2]=tempDoubleI32[1],tempInt));t=t+v|0;h=582;break;case 582:x=0;h=583;break;case 583:k=k+1|0;h=3;break;case 584:h=585;break;case 585:_mrb_str_resize(Bb,i,q,t);var yf=f,zf=q;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[yf>>2]=HEAP32[zf>>2];HEAP32[yf+4>>2]=HEAP32[zf+4>>2];STACKTOP=d;return;default:assert(0,"bad label: "+h)}}_mrb_str_format.X=1;function _mrb_str_offset(f,e,b){f=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];STACKTOP=f;return b}
function _sign_bits(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;b=f;c=e;b=16==(b|0)?3:8==(b|0)?7:2==(b|0)?8:9;break;case 3:b=88==(HEAP8[c]<<24>>24|0)?4:5;break;case 4:a=70;b=6;break;case 5:a=102;b=6;break;case 6:b=10;break;case 7:a=55;b=10;break;case 8:a=49;b=10;break;case 9:a=46;b=10;break;case 10:return a;default:assert(0,"bad label: "+b)}}
function _str_with_class(f,e,b){f=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];HEAP32[(e+4|0)>>2]=HEAP32[(HEAP32[(b|0)>>2]+4|0)>>2];STACKTOP=f}
function _mrb_undef_value1302(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]=HEAP32[b>>2]&-256|5;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _get_hash(f,e,b,c,a){var d=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g;for(g=2;;)switch(g){case 2:var h,i,j,l,k=d,n=d+8;h=e;i=b;j=c;l=a;g=5==(HEAP32[(i+4|0)>>2]&255|0)?4:3;break;case 3:g=f;var r=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[r>>2];HEAP32[g+4>>2]=HEAP32[r+4>>2];g=10;break;case 4:g=2!=(j|0)?5:6;break;case 5:g=h;r=_mrb_class_obj_get(h,__str11254|
0);_mrb_raise(g,r,__str431296|0);g=6;break;case 6:_mrb_check_convert_type(n,h,l+8|0,16,__str441297|0,__str451298|0);g=k;r=n;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[r>>2];HEAP32[g+4>>2]=HEAP32[r+4>>2];g=0==(HEAP32[(k+4|0)>>2]&255|0)?7:9;break;case 7:g=0!=(HEAP32[(k|0)>>2]|0)?9:8;break;case 8:g=h;r=_mrb_class_obj_get(h,__str11254|0);_mrb_raise(g,r,__str431296|0);g=9;break;case 9:var r=g=i,t=k;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[r>>2]=HEAP32[t>>2];HEAP32[r+4>>2]=HEAP32[t+4>>2];r=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[r>>2]=HEAP32[g>>2];HEAP32[r+4>>2]=HEAP32[g+4>>2];g=10;break;case 10:STACKTOP=d;return;default:assert(0,"bad label: "+g)}}_get_hash.X=1;
function _mrb_symbol_value1303(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|4;HEAP16[(d|0)>>1]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_fixnum_value1304(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|3;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_fix2binstr(f,e,b,c){var a=STACKTOP;STACKTOP+=64;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i=a,j,l;g=e;h=c;i=(i|0)+64|0;j=HEAP32[(b|0)>>2];d=2!=(h|0)?3:4;break;case 3:var d=g,k=_mrb_class_obj_get(g,__str11254|0),n=h;_mrb_raisef(d,k,__str421295|0,(tempInt=STACKTOP,
STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=n,tempInt));d=4;break;case 4:d=1024<=j>>>0?5:6;break;case 5:j&=1023;d=6;break;case 6:d=0==(j|0)?7:8;break;case 7:_mrb_str_new(f,g,__str291282|0,1);d=22;break;case 8:i=d=i-1|0;HEAP8[d]=0;d=9;break;case 9:d=HEAP8[_mrb_digitmap+(j>>>0)%(h>>>0)|0];i=k=i-1|0;HEAP8[k]=d;d=10;break;case 10:j=d=Math.floor((j>>>0)/(h>>>0));d=0!=(d|0)?9:11;break;case 11:d=0>(HEAP32[(b|0)>>2]|0)?12:21;break;case 12:i=_remove_sign_bits(i,
h);d=h;d=16==(d|0)?13:8==(d|0)?14:2==(d|0)?15:16;break;case 13:l=102;d=17;break;case 14:l=55;d=17;break;case 15:l=49;d=17;break;case 16:l=0;d=17;break;case 17:d=0!=(l<<24>>24|0)?18:20;break;case 18:d=(HEAP8[i]<<24>>24|0)!=(l<<24>>24|0)?19:20;break;case 19:d=l;i=k=i-1|0;HEAP8[k]=d;d=20;break;case 20:d=21;break;case 21:_mrb_str_new2(f,g,i);d=22;break;case 22:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_mrb_fix2binstr.X=1;
function _remove_sign_bits(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;b=16==(a|0)?3:7;break;case 3:b=4;break;case 4:b=102==(HEAP8[c]<<24>>24|0)?5:6;break;case 5:c=c+1|0;b=4;break;case 6:b=19;break;case 7:b=8==(a|0)?8:12;break;case 8:b=-8>>(((3*_strlen(c)|0)>>>0)%32|0)&7;var d=c;HEAP8[d]=(HEAP8[d]<<24>>24|b)&255;b=9;break;case 9:b=55==(HEAP8[c]<<24>>24|0)?10:11;break;case 10:c=c+1|0;b=9;break;case 11:b=18;break;case 12:b=2==(a|0)?13:17;break;case 13:b=14;break;case 14:b=49==(HEAP8[c]<<24>>
24|0)?15:16;break;case 15:c=c+1|0;b=14;break;case 16:b=17;break;case 17:b=18;break;case 18:b=19;break;case 19:return c;default:assert(0,"bad label: "+b)}}_remove_sign_bits.X=1;
function _fmt_setup(f,e,b,c,a,d){var g=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var h;for(h=2;;)switch(h){case 2:var i,j,l,k,n,r;i=f;j=e;l=b;k=c;n=a;r=d;j=i+j|0;h=i;i=h+1|0;HEAP8[h]=37;h=0!=(k&1|0)?3:4;break;case 3:h=i;i=h+1|0;HEAP8[h]=35;h=4;break;case 4:h=0!=(k&4|0)?5:6;break;case 5:h=i;i=h+1|0;HEAP8[h]=43;h=6;break;case 6:h=0!=(k&2|0)?7:8;break;case 7:h=i;i=h+1|0;HEAP8[h]=45;h=8;break;case 8:h=0!=(k&8|0)?9:10;break;case 9:h=i;i=h+1|0;HEAP8[h]=
48;h=10;break;case 10:h=0!=(k&16|0)?11:12;break;case 11:h=i;i=h+1|0;HEAP8[h]=32;h=12;break;case 12:h=0!=(k&32|0)?13:14;break;case 13:h=n;h=_snprintf(i,j-i|0,__str401293|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=h,tempInt));i=i+h|0;h=14;break;case 14:h=0!=(k&64|0)?15:16;break;case 15:h=r;h=_snprintf(i,j-i|0,__str411294|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=h,tempInt));
i=i+h|0;h=16;break;case 16:f=l&255;e=i;i=e+1|0;HEAP8[e]=f;HEAP8[i]=0;STACKTOP=g;return;default:assert(0,"bad label: "+h)}}_fmt_setup.X=1;function _mrb_str_decref(f,e){var b;for(b=2;;)switch(b){case 2:var c,a;c=f;a=e;b=a|0;HEAP32[b>>2]=HEAP32[b>>2]-1|0;b=0==(HEAP32[(a|0)>>2]|0)?3:4;break;case 3:_mrb_free(c,HEAP32[(a+4|0)>>2]);_mrb_free(c,a);b=4;break;case 4:return;default:assert(0,"bad label: "+b)}}
function _mrb_str_resize(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i,j;g=e;h=c;j=HEAP32[(b|0)>>2];_str_modify(g,j);i=HEAP32[(j+12|0)>>2];d=(h|0)!=(i|0)?3:7;break;case 3:d=(i|0)<(h|0)?5:4;break;case 4:d=1024<(i-h|0)?5:6;break;case 5:d=_mrb_realloc(g,HEAP32[(j+
20|0)>>2],h+1|0);HEAP32[(j+20|0)>>2]=d;d=6;break;case 6:HEAP32[(j+16|0)>>2]=h;HEAP32[(j+12|0)>>2]=h;HEAP8[HEAP32[(j+20|0)>>2]+h|0]=0;d=7;break;case 7:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_mrb_str_resize.X=1;
function _str_modify(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h,i;c=f;a=e;b=0!=(HEAP32[a>>2]>>>11&256|0)?3:10;break;case 3:d=HEAP32[(a+16|0)>>2];b=1==(HEAP32[(d|0)>>2]|0)?4:6;break;case 4:b=(HEAP32[(a+20|0)>>2]|0)==(HEAP32[(d+4|0)>>2]|0)?5:6;break;case 5:HEAP32[(a+20|0)>>2]=HEAP32[(d+4|0)>>2];HEAP32[(a+16|0)>>2]=HEAP32[(d+8|0)>>2];_mrb_free(c,d);b=9;break;case 6:h=HEAP32[(a+20|0)>>2];i=HEAP32[(a+12|0)>>2];g=_mrb_malloc(c,i+1|0);b=0!=(h|0)?7:8;break;case 7:b=g;var j=h,l=i;assert(0===l%1,"memcpy given "+
l+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(b,j,l,1);b=8;break;case 8:HEAP8[g+i|0]=0;HEAP32[(a+20|0)>>2]=g;HEAP32[(a+16|0)>>2]=i;_mrb_str_decref(c,d);b=9;break;case 9:j=b=a;HEAP32[j>>2]=HEAP32[j>>2]&2047|(HEAP32[b>>2]>>>11&2096895)<<11;b=10;break;case 10:return;default:assert(0,"bad label: "+b)}}_str_modify.X=1;
function _mrb_str_buf_new(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g;a=e;d=b;g=_mrb_obj_alloc(a,17,HEAP32[(a+88|0)>>2]);c=128>(d|0)?3:4;break;case 3:d=128;c=4;break;case 4:HEAP32[(g+12|0)>>2]=0;HEAP32[(g+16|0)>>2]=d;e=_mrb_malloc(a,d+1|0);HEAP32[(g+20|0)>>2]=e;HEAP8[HEAP32[(g+20|0)>>2]|0]=0;_mrb_obj_value1382(f,g);return;default:assert(0,"bad label: "+c)}}
function _mrb_obj_value1382(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b,g;g=a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|HEAP32[g>>2]&255;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+
c)}}
function _mrb_str_buf_cat(f,e,b,c,a){var d=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[g>>2];HEAP32[b+4>>2]=HEAP32[g+4>>2];for(g=2;;)switch(g){case 2:var h,i,j;h=e;i=c;j=a;g=0==(j|0)?3:4;break;case 3:var g=f,l=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[l>>2];HEAP32[g+4>>2]=
HEAP32[l+4>>2];g=5;break;case 4:_str_buf_cat(h,HEAP32[(b|0)>>2],i,j);g=f;l=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[l>>2];HEAP32[g+4>>2]=HEAP32[l+4>>2];g=5;break;case 5:STACKTOP=d;return;default:assert(0,"bad label: "+g)}}
function _mrb_str_body(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=f,f=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];c=HEAP32[(f|0)>>2];HEAP32[e>>2]=HEAP32[(c+12|0)>>2];c=HEAP32[(c+20|0)>>2];STACKTOP=b;return c}
function _str_buf_cat(f,e,b,c){var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j,l,k;d=f;g=e;h=b;i=c;k=-1;_str_modify(d,g);a=h>>>0>=HEAP32[(g+20|0)>>2]>>>0?3:5;break;case 3:a=h>>>0<=(HEAP32[(g+20|0)>>2]+HEAP32[(g+12|0)>>2]|0)>>>0?4:5;break;case 4:k=h-HEAP32[(g+20|0)>>2]|0;a=5;break;case 5:a=0==(i|0)?6:7;break;case 6:a=21;break;case 7:j=HEAP32[(g+16|0)>>2];a=(HEAP32[(g+12|0)>>2]|0)>=(2147483647-i|0)?8:9;break;case 8:a=d;var n=_mrb_class_obj_get(d,__str1307|0);_mrb_raise(a,n,__str681375|0);a=9;break;case 9:l=
HEAP32[(g+12|0)>>2]+i|0;a=(j|0)<=(l|0)?10:18;break;case 10:a=11;break;case 11:a=(l|0)>(j|0)?12:15;break;case 12:a=1073741823<=(j+1|0)?13:14;break;case 13:j=(l+4095|0)/4096&-1;a=15;break;case 14:j=(j+1|0)<<1|0;a=11;break;case 15:a=16;break;case 16:a=_mrb_realloc(d,HEAP32[(g+20|0)>>2],j+1|0);HEAP32[(g+20|0)>>2]=a;HEAP32[(g+16|0)>>2]=j;a=17;break;case 17:a=18;break;case 18:a=-1!=(k|0)?19:20;break;case 19:h=HEAP32[(g+20|0)>>2]+k|0;a=20;break;case 20:a=HEAP32[(g+20|0)>>2]+HEAP32[(g+12|0)>>2]|0;var n=h,
r=i;assert(0===r%1,"memcpy given "+r+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(a,n,r,1);HEAP32[(g+12|0)>>2]=l;HEAP8[HEAP32[(g+20|0)>>2]+l|0]=0;a=21;break;case 21:return;default:assert(0,"bad label: "+a)}}_str_buf_cat.X=1;function _mrb_str_new(f,e,b,c){e=_str_new(e,b,c);_mrb_obj_value1382(f,e)}
function _str_new(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g;c=f;a=e;d=b;g=_str_alloc(c,HEAP32[(c+88|0)>>2]);HEAP32[(g+12|0)>>2]=d;HEAP32[(g+16|0)>>2]=d;c=_mrb_malloc(c,d+1|0);HEAP32[(g+20|0)>>2]=c;c=0!=(a|0)?3:4;break;case 3:c=HEAP32[(g+20|0)>>2];var h=a,i=d;assert(0===i%1,"memcpy given "+i+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(c,h,i,1);c=4;break;case 4:return HEAP8[HEAP32[(g+20|0)>>2]+d|0]=0,g;default:assert(0,"bad label: "+c)}}
function _mrb_str_new2(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d;a=e;d=b;c=0!=(d|0)?4:3;break;case 3:c=a;var g=_mrb_class_obj_get(a,__str1307|0);_mrb_raise(c,g,__str11308|0);c=4;break;case 4:e=a;b=d;d=_strlen(d);d=_str_new(e,b,d);_mrb_obj_value1382(f,d);return;default:assert(0,"bad label: "+c)}}
function _mrb_str_new_cstr(f,e,b){var c,a;a=_strlen(b);c=_mrb_obj_alloc(e,17,HEAP32[(e+88|0)>>2]);e=_mrb_malloc(e,a+1|0);HEAP32[(c+20|0)>>2]=e;e=HEAP32[(c+20|0)>>2];assert(0===a%1,"memcpy given "+a+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(e,b,a,1);HEAP8[HEAP32[(c+20|0)>>2]+a|0]=0;HEAP32[(c+12|0)>>2]=a;HEAP32[(c+16|0)>>2]=a;_mrb_obj_value1382(f,c)}
function _mrb_str_literal(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h;d=e;g=_str_alloc(d,HEAP32[(d+88|0)>>2]);h=HEAP32[(b|0)>>2];a=0!=(HEAP32[h>>2]>>>11&256|0)?4:3;break;case 3:_str_make_shared(d,HEAP32[(b|0)>>2]);a=4;break;case 4:e=HEAP32[(h+16|0)>>2];
b=e|0;HEAP32[b>>2]=HEAP32[b>>2]+1|0;HEAP32[(g+20|0)>>2]=HEAP32[(e+4|0)>>2];HEAP32[(g+12|0)>>2]=HEAP32[(e+8|0)>>2];HEAP32[(g+16|0)>>2]=e;b=e=g;HEAP32[b>>2]=HEAP32[b>>2]&2047|((HEAP32[e>>2]>>>11&2097151|256)&2097151)<<11;_mrb_obj_value1382(f,g);STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_str_literal.X=1;function _str_alloc(f,e){var b;b=_mrb_obj_alloc(f,17,HEAP32[(f+88|0)>>2]);HEAP32[(b+4|0)>>2]=e;HEAP32[(b+20|0)>>2]=0;HEAP32[(b+12|0)>>2]=0;HEAP32[(b+16|0)>>2]=0;return b}
function _str_make_shared(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=e;b=0!=(HEAP32[a>>2]>>>11&256|0)?7:3;break;case 3:d=_mrb_malloc(c,12);HEAP32[(d|0)>>2]=1;b=(HEAP32[(a+16|0)>>2]|0)>(HEAP32[(a+12|0)>>2]|0)?4:5;break;case 4:b=_mrb_realloc(c,HEAP32[(a+20|0)>>2],HEAP32[(a+12|0)>>2]+1|0);HEAP32[(d+4|0)>>2]=b;HEAP32[(a+20|0)>>2]=b;b=6;break;case 5:HEAP32[(d+4|0)>>2]=HEAP32[(a+20|0)>>2];b=6;break;case 6:HEAP32[(d+8|0)>>2]=HEAP32[(a+12|0)>>2];HEAP32[(a+16|0)>>2]=d;var g=b=a;HEAP32[g>>2]=HEAP32[g>>
2]&2047|((HEAP32[b>>2]>>>11&2097151|256)&2097151)<<11;b=7;break;case 7:return;default:assert(0,"bad label: "+b)}}_str_make_shared.X=1;
function _mrb_str_concat(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];a=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i,j=c;d=f;g=HEAP32[(e|0)>>2];_str_modify(d,
g);a=17==(HEAP32[(b+4|0)>>2]&255|0)?4:3;break;case 3:_mrb_str_to_str(j,d,b);var a=b,l=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[l>>2];HEAP32[a+4>>2]=HEAP32[l+4>>2];a=4;break;case 4:h=HEAP32[(b|0)>>2];i=HEAP32[(g+12|0)>>2]+HEAP32[(h+12|0)>>2]|0;a=(HEAP32[(g+16|0)>>2]|0)<(i|0)?5:6;break;case 5:HEAP32[(g+16|0)>>2]=i;a=_mrb_realloc(d,HEAP32[(g+20|0)>>2],i+1|0);HEAP32[(g+20|0)>>2]=a;a=6;break;case 6:f=HEAP32[(g+20|0)>>2]+HEAP32[(g+12|0)>>
2]|0;e=HEAP32[(h+20|0)>>2];h=HEAP32[(h+12|0)>>2];assert(0===h%1,"memcpy given "+h+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(f,e,h,1);HEAP32[(g+12|0)>>2]=i;HEAP8[HEAP32[(g+20|0)>>2]+i|0]=0;STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_str_concat.X=1;
function _mrb_str_to_str(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+8,i=c+16;d=e;a=17==(HEAP32[(b+4|0)>>2]&255|0)?7:3;break;case 3:_mrb_check_convert_type(h,d,b,17,__str31310|0,__str21309|0);var a=g,j=h;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[j>>2];HEAP32[a+4>>2]=HEAP32[j+4>>2];a=0==(HEAP32[(g+4|0)>>2]&255|0)?4:6;break;case 4:a=0!=(HEAP32[(g|0)>>2]|0)?6:5;break;case 5:_mrb_convert_type(i,d,b,17,__str31310|0,__str41311|0);a=g;j=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[j>>2];HEAP32[a+4>>2]=HEAP32[j+4>>2];a=6;break;case 6:a=f;j=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[j>>2];HEAP32[a+4>>
2]=HEAP32[j+4>>2];a=8;break;case 7:a=f;j=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[j>>2];HEAP32[a+4>>2]=HEAP32[j+4>>2];a=8;break;case 8:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_str_plus(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];var b=HEAP32[(b|0)>>2],c=HEAP32[(c|0)>>2],e=_str_new(e,0,HEAP32[(b+12|0)>>2]+HEAP32[(c+
12|0)>>2]|0),d=HEAP32[(e+20|0)>>2],g=HEAP32[(b+20|0)>>2],h=HEAP32[(b+12|0)>>2];assert(0===h%1,"memcpy given "+h+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(d,g,h,1);b=HEAP32[(e+20|0)>>2]+HEAP32[(b+12|0)>>2]|0;d=HEAP32[(c+20|0)>>2];c=HEAP32[(c+12|0)>>2];assert(0===c%1,"memcpy given "+c+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(b,d,c,1);_mrb_obj_value1382(f,e);STACKTOP=a}_mrb_str_plus.X=1;
function _mrb_str_size(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];_mrb_fixnum_value1397(f,HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]);STACKTOP=e}
function _mrb_fixnum_value1397(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|3;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_str_cmp(f,e,b){f=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];c=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a,d,g,h;g=HEAP32[(e|0)>>2];h=HEAP32[(b|0)>>2];c=(HEAP32[(g+
12|0)>>2]|0)>(HEAP32[(h+12|0)>>2]|0)?3:4;break;case 3:var i=HEAP32[(h+12|0)>>2],c=5;break;case 4:i=HEAP32[(g+12|0)>>2];c=5;break;case 5:d=i;d=_memcmp(HEAP32[(g+20|0)>>2],HEAP32[(h+20|0)>>2],d);c=0==(d|0)?6:11;break;case 6:c=(HEAP32[(g+12|0)>>2]|0)==(HEAP32[(h+12|0)>>2]|0)?7:8;break;case 7:a=0;c=14;break;case 8:c=(HEAP32[(g+12|0)>>2]|0)>(HEAP32[(h+12|0)>>2]|0)?9:10;break;case 9:a=1;c=14;break;case 10:a=-1;c=14;break;case 11:c=0<(d|0)?12:13;break;case 12:a=1;c=14;break;case 13:a=-1;c=14;break;case 14:return e=
a,STACKTOP=f,e;default:assert(0,"bad label: "+c)}}_mrb_str_cmp.X=1;
function _mrb_str_equal(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];a=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h=c;g=f;a=0!=(_mrb_obj_equal(g,e,b)|
0)?3:4;break;case 3:d=1;a=12;break;case 4:a=17==(HEAP32[(b+4|0)>>2]&255|0)?11:5;break;case 5:a=0==(HEAP32[(b+4|0)>>2]&255|0)?6:8;break;case 6:a=0!=(HEAP32[(b|0)>>2]|0)?8:7;break;case 7:d=0;a=12;break;case 8:var a=g,i=_mrb_intern(g,__str21309|0),a=0!=(_mrb_respond_to(a,b,i)|0)?10:9;break;case 9:d=0;a=12;break;case 10:_mrb_funcall(h,g,b,__str21309|0,0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));d=b;a=
h;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[a>>2];HEAP32[d+4>>2]=HEAP32[a+4>>2];d=_mrb_equal(g,b,e);a=12;break;case 11:d=_str_eql(g,e,b);a=12;break;case 12:return f=d,STACKTOP=c,f;default:assert(0,"bad label: "+a)}}_mrb_str_equal.X=1;function _mrb_block_given_p(){return 0}
function _mrb_str_hash(f,e){var b=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a,d,g;a=HEAP32[(e|0)>>2];d=HEAP32[(a+12|0)>>2];a=HEAP32[(a+20|0)>>2];g=0;c=3;break;case 3:c=d;d=c-1|0;c=0!=(c|0)?4:5;break;case 4:g=(65599*g|0)+(HEAP8[a]<<24>>24)|0;a=a+1|0;c=3;break;case 5:return d=
g=g+(g>>5)|0,STACKTOP=b,d;default:assert(0,"bad label: "+c)}}
function _str_eql(f,e,b){f=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];c=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a,d;d=HEAP32[(HEAP32[(e|0)>>2]+12|0)>>2];c=(d|0)!=(HEAP32[(HEAP32[(b|
0)>>2]+12|0)>>2]|0)?3:4;break;case 3:a=0;c=7;break;case 4:c=0==(_memcmp(HEAP32[(HEAP32[(e|0)>>2]+20|0)>>2],HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2],d)|0)?5:6;break;case 5:a=1;c=7;break;case 6:a=0;c=7;break;case 7:return e=a,STACKTOP=f,e;default:assert(0,"bad label: "+c)}}
function _mrb_string_value(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h=c,i=c+8;d=e;g=b;a=h;var j=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[j>>2];HEAP32[a+4>>2]=HEAP32[j+4>>2];a=17==(HEAP32[(h+4|0)>>2]&255|0)?4:3;break;case 3:_mrb_str_to_str(i,d,h);a=h;j=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[j>>2];HEAP32[a+4>>2]=HEAP32[j+4>>2];a=g;j=h;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[j>>2];HEAP32[a+4>>2]=HEAP32[j+4>>2];a=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[h>>2];HEAP32[f+4>>2]=HEAP32[h+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_string_value_ptr(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];_mrb_string_value(b,f,e);c=HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2];STACKTOP=b;return c}
function _mrb_str_dup(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=HEAP32[(b|0)>>2];_mrb_str_new(f,e,HEAP32[(b+20|0)>>2],HEAP32[(b+12|0)>>2]);STACKTOP=c}
function _mrb_str_substr(f,e,b,c,a){var d=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[g>>2];HEAP32[b+4>>2]=HEAP32[g+4>>2];for(g=2;;)switch(g){case 2:var h,i,j,l=d,k=d+8;h=e;i=c;j=a;g=0>(j|0)?3:4;break;case 3:_mrb_nil_value1404(f);g=17;break;case 4:g=0!=(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)?6:5;break;case 5:j=0;g=6;break;case 6:g=
(i|0)>(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)?7:8;break;case 7:_mrb_nil_value1404(f);g=17;break;case 8:g=0>(i|0)?9:12;break;case 9:i=i+HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0;g=0>(i|0)?10:11;break;case 10:_mrb_nil_value1404(f);g=17;break;case 11:g=12;break;case 12:g=(i+j|0)>(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)?13:14;break;case 13:j=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]-i|0;g=14;break;case 14:g=0>=(j|0)?15:16;break;case 15:j=0;g=16;break;case 16:_mrb_str_subseq(k,h,b,i,j);var g=l,n=k;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[g>>2]=HEAP32[n>>2];HEAP32[g+4>>2]=HEAP32[n+4>>2];g=f;n=l;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[n>>2];HEAP32[g+4>>2]=HEAP32[n+4>>2];g=17;break;case 17:STACKTOP=d;return;default:assert(0,"bad label: "+g)}}_mrb_str_substr.X=1;
function _mrb_nil_value1404(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_str_subseq(f,e,b,c,a){var d=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[g>>2];HEAP32[b+4>>2]=HEAP32[g+4>>2];b=HEAP32[(b|0)>>2];_str_make_shared(e,b);g=HEAP32[(b+16|0)>>2];e=_mrb_obj_alloc(e,17,HEAP32[(e+88|0)>>2]);HEAP32[(e+20|0)>>2]=HEAP32[(b+20|0)>>2]+c|0;HEAP32[(e+12|0)>>2]=a;HEAP32[(e+16|0)>>2]=g;HEAP32[e>>2]=HEAP32[e>>
2]&2047|((HEAP32[e>>2]>>>11&2097151|256)&2097151)<<11;c=g|0;HEAP32[c>>2]=HEAP32[c>>2]+1|0;_mrb_obj_value1382(f,e);STACKTOP=d}_mrb_str_subseq.X=1;
function _mrb_str_buf_append(f,e,b,c){var a=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];_mrb_str_cat(a,e,b,HEAP32[(HEAP32[(c|0)>>2]+20|0)>>2],HEAP32[(HEAP32[(c|
0)>>2]+12|0)>>2]);e=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[e>>2];HEAP32[f+4>>2]=HEAP32[e+4>>2];STACKTOP=a}
function _mrb_str_cat(f,e,b,c,a){var d=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[g>>2];HEAP32[b+4>>2]=HEAP32[g+4>>2];for(g=2;;)switch(g){case 2:var h,i,j;h=e;i=c;j=a;g=0>(j|0)?3:4;break;case 3:var g=h,l=_mrb_class_obj_get(h,__str1307|0);_mrb_raise(g,l,__str111318|0);g=4;break;case 4:_str_buf_cat(h,HEAP32[(b|0)>>2],i,j);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=d;return;default:assert(0,"bad label: "+g)}}
function _mrb_str_intern(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[b>>2];HEAP32[c+4>>2]=HEAP32[b+4>>2];e=_mrb_intern_str(e,c);_mrb_symbol_value1407(f,e);STACKTOP=c}
function _mrb_symbol_value1407(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|4;HEAP16[(d|0)>>1]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_obj_as_string(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+8;d=e;a=17==(HEAP32[(b+4|0)>>2]&255|0)?3:4;break;case 3:var a=f,i=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>
2]=HEAP32[i>>2];HEAP32[a+4>>2]=HEAP32[i+4>>2];a=7;break;case 4:_mrb_funcall(h,d,b,__str41311|0,0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=0,tempInt));a=g;i=h;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[i>>2];HEAP32[a+4>>2]=HEAP32[i+4>>2];a=17==(HEAP32[(g+4|0)>>2]&255|0)?6:5;break;case 5:_mrb_any_to_s(f,d,b);a=7;break;case 6:a=f;i=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[i>>2];HEAP32[a+4>>2]=HEAP32[i+4>>2];a=7;break;case 7:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}function _mrb_check_string_type(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_check_convert_type(f,e,b,17,__str31310|0,__str21309|0);STACKTOP=c}
function _mrb_cstr_to_inum(f,e,b,c,a){var d=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g;for(g=2;;)switch(g){case 2:var h,i,j,l,k=d,n,r,t,p;h=e;i=b;j=c;l=a;n=1;g=0!=(i|0)?6:3;break;case 3:g=0!=(l|0)?4:5;break;case 4:g=107;break;case 5:_mrb_fixnum_value1397(f,0);g=108;break;case 6:g=7;break;case 7:g=0!=(_isspace(HEAP8[i]&255)|0)?8:9;break;case 8:i=i+1|0;g=7;break;case 9:g=43==(HEAP8[i|0]<<24>>24|0)?10:11;break;case 10:i=i+1|0;g=
14;break;case 11:g=45==(HEAP8[i|0]<<24>>24|0)?12:13;break;case 12:i=i+1|0;n=0;g=13;break;case 13:g=14;break;case 14:g=43==(HEAP8[i|0]<<24>>24|0)?16:15;break;case 15:g=45==(HEAP8[i|0]<<24>>24|0)?16:19;break;case 16:g=0!=(l|0)?17:18;break;case 17:g=107;break;case 18:_mrb_fixnum_value1397(f,0);g=108;break;case 19:g=0>=(j|0)?20:33;break;case 20:g=48==(HEAP8[i|0]<<24>>24|0)?21:28;break;case 21:g=HEAP8[i+1|0]<<24>>24;g=120==(g|0)||88==(g|0)?22:98==(g|0)||66==(g|0)?23:111==(g|0)||79==(g|0)?24:100==(g|0)||
68==(g|0)?25:26;break;case 22:j=16;g=27;break;case 23:j=2;g=27;break;case 24:j=8;g=27;break;case 25:j=10;g=27;break;case 26:j=8;g=27;break;case 27:g=32;break;case 28:g=-1>(j|0)?29:30;break;case 29:j=-j|0;g=31;break;case 30:j=10;g=31;break;case 31:g=32;break;case 32:g=33;break;case 33:g=j;g=2==(g|0)?34:3==(g|0)?39:8==(g|0)?40:4==(g|0)||5==(g|0)||6==(g|0)||7==(g|0)?45:10==(g|0)?46:9==(g|0)||11==(g|0)||12==(g|0)||13==(g|0)||14==(g|0)||15==(g|0)?51:16==(g|0)?52:57;break;case 34:g=48==(HEAP8[i|0]<<24>>
24|0)?35:38;break;case 35:g=98==(HEAP8[i+1|0]<<24>>24|0)?37:36;break;case 36:g=66==(HEAP8[i+1|0]<<24>>24|0)?37:38;break;case 37:i=i+2|0;g=38;break;case 38:g=64;break;case 39:g=64;break;case 40:g=48==(HEAP8[i|0]<<24>>24|0)?41:44;break;case 41:g=111==(HEAP8[i+1|0]<<24>>24|0)?43:42;break;case 42:g=79==(HEAP8[i+1|0]<<24>>24|0)?43:44;break;case 43:i=i+2|0;g=44;break;case 44:g=45;break;case 45:g=64;break;case 46:g=48==(HEAP8[i|0]<<24>>24|0)?47:50;break;case 47:g=100==(HEAP8[i+1|0]<<24>>24|0)?49:48;break;
case 48:g=68==(HEAP8[i+1|0]<<24>>24|0)?49:50;break;case 49:i=i+2|0;g=50;break;case 50:g=51;break;case 51:g=64;break;case 52:g=48==(HEAP8[i|0]<<24>>24|0)?53:56;break;case 53:g=120==(HEAP8[i+1|0]<<24>>24|0)?55:54;break;case 54:g=88==(HEAP8[i+1|0]<<24>>24|0)?55:56;break;case 55:i=i+2|0;g=56;break;case 56:g=64;break;case 57:g=2>(j|0)?59:58;break;case 58:g=36<(j|0)?59:60;break;case 59:g=h;var q=_mrb_class_obj_get(h,__str1307|0),v=j;_mrb_raisef(g,q,__str51312|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<
STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=v,tempInt));g=60;break;case 60:g=32>=(j|0)?61:62;break;case 61:g=63;break;case 62:g=63;break;case 63:g=64;break;case 64:g=48==(HEAP8[i]<<24>>24|0)?65:79;break;case 65:p=0;g=66;break;case 66:i=r=i+1|0;r=g=HEAP8[r]<<24>>24;if(48==(g|0)){var w=1;g=68}else g=67;break;case 67:w=95==(r|0);g=68;break;case 68:g=w?69:75;break;case 69:g=95==(r|0)?70:73;break;case 70:p=g=p+1|0;g=2<=(g|0)?71:72;break;case 71:g=75;break;case 72:g=74;break;case 73:p=0;
g=74;break;case 74:g=66;break;case 75:r=g=HEAP8[i]<<24>>24;g=0!=(g|0)?76:77;break;case 76:g=0!=(_isspace(r&255)|0)?77:78;break;case 77:i=i-1|0;g=78;break;case 78:g=79;break;case 79:r=HEAP8[i]<<24>>24;g=0!=(_isdigit(r)|0)?80:81;break;case 80:var m=r-48|0;g=88;break;case 81:g=0!=(_islower(r)|0)?82:83;break;case 82:var x=(r-97|0)+10|0;g=87;break;case 83:g=0!=(_isupper(r)|0)?84:85;break;case 84:var s=(r-65|0)+10|0;g=86;break;case 85:s=-1;g=86;break;case 86:x=s;g=87;break;case 87:m=x;g=88;break;case 88:r=
m;g=0>(r|0)?90:89;break;case 89:g=(r|0)>=(j|0)?90:93;break;case 90:g=0!=(l|0)?91:92;break;case 91:g=107;break;case 92:_mrb_fixnum_value1397(f,0);g=108;break;case 93:_strlen(i);t=_strtoul(i,k,j);g=0!=(l|0)?94:104;break;case 94:g=(HEAP32[k>>2]|0)==(i|0)?95:96;break;case 95:g=107;break;case 96:g=97;break;case 97:if(0!=(HEAP8[HEAP32[k>>2]]<<24>>24|0))g=98;else{var y=0;g=99}break;case 98:y=0!=(_isspace(HEAP8[HEAP32[k>>2]]&255)|0);g=99;break;case 99:g=y?100:101;break;case 100:HEAP32[k>>2]=HEAP32[k>>2]+
1|0;g=97;break;case 101:g=0!=HEAP8[HEAP32[k>>2]]<<24>>24?102:103;break;case 102:g=107;break;case 103:g=104;break;case 104:g=0!=n<<24>>24?105:106;break;case 105:_mrb_fixnum_value1397(f,t);g=108;break;case 106:g=-t|0;_mrb_fixnum_value1397(f,g);g=108;break;case 107:g=h;q=_mrb_class_obj_get(h,__str1307|0);v=i;_mrb_raisef(g,q,__str61313|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=v,tempInt));_mrb_fixnum_value1397(f,0);g=108;break;case 108:STACKTOP=
d;return;default:assert(0,"bad label: "+g)}}_mrb_cstr_to_inum.X=1;function _mrb_string_value_cstr(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;c=f;a=HEAP32[(e|0)>>2];d=HEAP32[(a+20|0)>>2];b=0!=(d|0)?3:4;break;case 3:b=HEAP32[(a+12|0)>>2];var g=_strlen(d);b=(b|0)!=(g|0)?4:5;break;case 4:b=c;g=_mrb_class_obj_get(c,__str1307|0);_mrb_raise(b,g,__str71314|0);b=5;break;case 5:return d;default:assert(0,"bad label: "+b)}}
function _mrb_str_to_inum(f,e,b,c,a){var d=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[g>>2];HEAP32[b+4>>2]=HEAP32[g+4>>2];for(g=2;;)switch(g){case 2:var h,i,j,l,k,g=d;h=e;i=c;j=a;_mrb_string_value(g,h,b);g=0!=(j|0)?3:4;break;case 3:l=_mrb_string_value_cstr(h,b);g=5;break;case 4:l=HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2];g=5;break;
case 5:g=0!=(l|0)?6:9;break;case 6:k=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2];g=0!=HEAP8[l+k|0]<<24>>24?7:8;break;case 7:l=_str_new(h,l,k);l=HEAP32[(l+20|0)>>2];g=8;break;case 8:g=9;break;case 9:_mrb_cstr_to_inum(f,h,l,i,j);STACKTOP=d;return;default:assert(0,"bad label: "+g)}}_mrb_str_to_inum.X=1;
function _mrb_cstr_to_dbl(f,e,b){var c=STACKTOP;STACKTOP+=80;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j=c,l,k=c+4,n,r,t;g=f;h=e;i=b;a=0!=(h|0)?4:3;break;case 3:d=0;a=62;break;case 4:a=5;break;case 5:a=0!=(_isspace(HEAP8[h]&255)|0)?6:7;break;case 6:h=h+1|0;a=5;break;case 7:a=0!=(i|0)?12:8;break;case 8:a=48==(HEAP8[h|0]<<24>>24|0)?9:12;break;case 9:a=120==(HEAP8[h+1|0]<<24>>24|0)?11:10;break;case 10:a=88==(HEAP8[h+
1|0]<<24>>24|0)?11:12;break;case 11:d=0;a=62;break;case 12:l=_strtod(h,j);a=(h|0)==(HEAP32[j>>2]|0)?13:17;break;case 13:a=0!=(i|0)?14:16;break;case 14:a=15;break;case 15:a=g;var p=_mrb_class_obj_get(g,__str1307|0),q=h;_mrb_raisef(a,p,__str81315|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=q,tempInt));a=16;break;case 16:d=l;a=62;break;case 17:a=0!=HEAP8[HEAP32[j>>2]]<<24>>24?18:61;break;case 18:n=k|0;r=((k|0)+74|0)-1|0;t=0;a=19;break;case 19:if(h>>>
0<HEAP32[j>>2]>>>0)a=20;else{var v=0;a=21}break;case 20:v=n>>>0<r>>>0;a=21;break;case 21:a=v?22:23;break;case 22:t=h;h=t+1|0;t=HEAP8[t];a=n;n=a+1|0;HEAP8[a]=t;a=19;break;case 23:a=24;break;case 24:a=0!=HEAP8[h]<<24>>24?25:43;break;case 25:a=95==(HEAP8[h]<<24>>24|0)?26:40;break;case 26:a=0!=(i|0)?27:35;break;case 27:a=(n|0)==(k|0)?30:28;break;case 28:a=48<=(t<<24>>24|0)?29:30;break;case 29:a=57>=(t<<24>>24|0)?31:30;break;case 30:a=15;break;case 31:h=h+1|0;a=48<=(HEAP8[h]<<24>>24|0)?32:33;break;case 32:a=
57>=(HEAP8[h]<<24>>24|0)?34:33;break;case 33:a=15;break;case 34:a=39;break;case 35:a=36;break;case 36:h=a=h+1|0;a=95==(HEAP8[a]<<24>>24|0)?37:38;break;case 37:a=36;break;case 38:a=24;break;case 39:a=40;break;case 40:t=h;h=t+1|0;t=HEAP8[t];a=n>>>0<r>>>0?41:42;break;case 41:a=t;p=n;n=p+1|0;HEAP8[p]=a;a=42;break;case 42:a=24;break;case 43:HEAP8[n]=0;h=k|0;a=0!=(i|0)?48:44;break;case 44:a=48==(HEAP8[h|0]<<24>>24|0)?45:48;break;case 45:a=120==(HEAP8[h+1|0]<<24>>24|0)?47:46;break;case 46:a=88==(HEAP8[h+
1|0]<<24>>24|0)?47:48;break;case 47:d=0;a=62;break;case 48:l=_strtod(h,j);a=0!=(i|0)?49:60;break;case 49:a=0!=(HEAP32[j>>2]|0)?50:51;break;case 50:a=(h|0)==(HEAP32[j>>2]|0)?51:52;break;case 51:a=15;break;case 52:a=53;break;case 53:if(0!=(HEAP8[HEAP32[j>>2]]<<24>>24|0))a=54;else{var w=0;a=55}break;case 54:w=0!=(_isspace(HEAP8[HEAP32[j>>2]]&255)|0);a=55;break;case 55:a=w?56:57;break;case 56:HEAP32[j>>2]=HEAP32[j>>2]+1|0;a=53;break;case 57:a=0!=HEAP8[HEAP32[j>>2]]<<24>>24?58:59;break;case 58:a=15;break;
case 59:a=60;break;case 60:a=61;break;case 61:d=l;a=62;break;case 62:return f=d,STACKTOP=c,f;default:assert(0,"bad label: "+a)}}_mrb_cstr_to_dbl.X=1;
function _mrb_str_to_dbl(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i;i=c;d=f;g=b;_mrb_string_value(i,d,e);h=HEAP32[(HEAP32[(e|0)>>2]+20|0)>>2];i=HEAP32[(HEAP32[(e|0)>>2]+12|0)>>2];a=0!=(h|0)?3:9;break;case 3:a=0!=(g|0)?4:6;break;case 4:a=0!=
(_memchr(h,0,i)|0)?5:6;break;case 5:var a=d,j=_mrb_class_obj_get(d,__str1307|0);_mrb_raise(a,j,__str91316|0);a=6;break;case 6:a=0!=HEAP8[h+i|0]<<24>>24?7:8;break;case 7:h=_str_new(d,h,i);h=HEAP32[(h+20|0)>>2];a=8;break;case 8:a=9;break;case 9:return f=_mrb_cstr_to_dbl(d,h,g),STACKTOP=c,f;default:assert(0,"bad label: "+a)}}_mrb_str_to_dbl.X=1;
function _mrb_str_dump(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i,j,l,k,n;d=e;g=2;h=HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2];i=h+HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0;a=3;break;case 3:a=h>>>0<i>>>0?4:17;break;case 4:k=h;h=k+1|0;k=HEAP8[k];a=k&255;a=34==(a|0)||
92==(a|0)||10==(a|0)||13==(a|0)||9==(a|0)||12==(a|0)||11==(a|0)||8==(a|0)||7==(a|0)||27==(a|0)?5:35==(a|0)?6:12;break;case 5:g=g+2|0;a=16;break;case 6:if(h>>>0<i>>>0)a=7;else var r=0,a=11;break;case 7:if(36==(HEAP8[h]<<24>>24|0))var t=1,a=10;else a=8;break;case 8:64==(HEAP8[h]<<24>>24|0)?(t=1,a=10):a=9;break;case 9:t=123==(HEAP8[h]<<24>>24|0);a=10;break;case 10:r=t;a=11;break;case 11:g=g+(r?2:1)|0;a=16;break;case 12:a=0!=(_isprint(k&255)|0)?13:14;break;case 13:g=g+1|0;a=15;break;case 14:g=g+4|0;a=
15;break;case 15:a=16;break;case 16:a=3;break;case 17:l=_str_new(d,0,g);_str_with_class(d,l,b);h=HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2];i=h+HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0;a=j=HEAP32[(l+20|0)>>2];j=a+1|0;HEAP8[a]=34;a=18;break;case 18:a=h>>>0<i>>>0?19:59;break;case 19:n=h;h=n+1|0;n=HEAP8[n];a=34==(n&255|0)?21:20;break;case 20:a=92==(n&255|0)?21:22;break;case 21:a=j;j=a+1|0;HEAP8[a]=92;var a=n,p=j;j=p+1|0;HEAP8[p]=a;a=58;break;case 22:a=35==(n&255|0)?23:29;break;case 23:a=h>>>0<i>>>0?24:28;break;
case 24:a=36==(HEAP8[h]<<24>>24|0)?27:25;break;case 25:a=64==(HEAP8[h]<<24>>24|0)?27:26;break;case 26:a=123==(HEAP8[h]<<24>>24|0)?27:28;break;case 27:a=j;j=a+1|0;HEAP8[a]=92;a=28;break;case 28:a=j;j=a+1|0;HEAP8[a]=35;a=57;break;case 29:a=10==(n&255|0)?30:31;break;case 30:a=j;j=a+1|0;HEAP8[a]=92;a=j;j=a+1|0;HEAP8[a]=110;a=56;break;case 31:a=13==(n&255|0)?32:33;break;case 32:a=j;j=a+1|0;HEAP8[a]=92;a=j;j=a+1|0;HEAP8[a]=114;a=55;break;case 33:a=9==(n&255|0)?34:35;break;case 34:a=j;j=a+1|0;HEAP8[a]=92;
a=j;j=a+1|0;HEAP8[a]=116;a=54;break;case 35:a=12==(n&255|0)?36:37;break;case 36:a=j;j=a+1|0;HEAP8[a]=92;a=j;j=a+1|0;HEAP8[a]=102;a=53;break;case 37:a=11==(n&255|0)?38:39;break;case 38:a=j;j=a+1|0;HEAP8[a]=92;a=j;j=a+1|0;HEAP8[a]=118;a=52;break;case 39:a=8==(n&255|0)?40:41;break;case 40:a=j;j=a+1|0;HEAP8[a]=92;a=j;j=a+1|0;HEAP8[a]=98;a=51;break;case 41:a=7==(n&255|0)?42:43;break;case 42:a=j;j=a+1|0;HEAP8[a]=92;a=j;j=a+1|0;HEAP8[a]=97;a=50;break;case 43:a=27==(n&255|0)?44:45;break;case 44:a=j;j=a+1|
0;HEAP8[a]=92;a=j;j=a+1|0;HEAP8[a]=101;a=49;break;case 45:a=0!=(_isprint(n&255)|0)?46:47;break;case 46:a=n;p=j;j=p+1|0;HEAP8[p]=a;a=48;break;case 47:a=j;j=a+1|0;HEAP8[a]=92;a=n&255;_sprintf(j,__str101317|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));j=j+3|0;a=48;break;case 48:a=49;break;case 49:a=50;break;case 50:a=51;break;case 51:a=52;break;case 52:a=53;break;case 53:a=54;break;case 54:a=55;break;case 55:a=56;break;case 56:a=
57;break;case 57:a=58;break;case 58:a=18;break;case 59:HEAP8[j]=34;_mrb_obj_value1382(f,l);STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_str_dump.X=1;function _mrb_str_cat2(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=_strlen(c);_mrb_str_cat(f,e,b,c,d);STACKTOP=a}
function _mrb_str_catf(f,e,b,c){var a=STACKTOP;STACKTOP+=12;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=a+4;HEAP32[a>>2]=arguments[_mrb_str_catf.length];_mrb_str_vcatf(d,e,b,c,HEAP32[a>>2]);var g=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[d>>2];
HEAP32[g+4>>2]=HEAP32[d+4>>2];d=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[d>>2];HEAP32[f+4>>2]=HEAP32[d+4>>2];STACKTOP=a}
function _mrb_str_vcatf(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c+8;_mrb_string_value(c,e,b);_mrb_str_resize(a,e,b,(HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2]+HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)-HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2]|0);e=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[f>>2]=HEAP32[e>>2];HEAP32[f+4>>2]=HEAP32[e+4>>2];STACKTOP=c}
function _mrb_str_append(f,e,b,c){var a=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];_mrb_string_value(a,e,c);_mrb_str_buf_append(f,e,b,c);STACKTOP=a}
function _mrb_str_inspect(f,e,b){var c=STACKTOP;STACKTOP+=64;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i=c,j=c+16,l,k,n=c+24,r=c+32,t=c+40,p=c+48,q=c+56;d=e;_mrb_str_new(j,d,__str121319|0,1);g=HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2];h=HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2]+HEAP32[(HEAP32[(b|
0)>>2]+12|0)>>2]|0;a=3;break;case 3:a=g>>>0<h>>>0?4:28;break;case 4:l=HEAP8[g]<<24>>24;a=34==(l|0)?11:5;break;case 5:a=92==(l|0)?11:6;break;case 6:a=35==(l|0)?7:12;break;case 7:a=g>>>0<h>>>0?8:12;break;case 8:a=36==(HEAP8[g]<<24>>24|0)?11:9;break;case 9:a=64==(HEAP8[g]<<24>>24|0)?11:10;break;case 10:a=123==(HEAP8[g]<<24>>24|0)?11:12;break;case 11:HEAP8[i|0]=92;HEAP8[i+1|0]=l&255;_mrb_str_buf_cat(n,d,j,i|0,2);a=27;break;case 12:a=0!=(_isprint(l&255)|0)?13:14;break;case 13:HEAP8[i|0]=l&255;_mrb_str_buf_cat(r,
d,j,i|0,1);a=27;break;case 14:a=l;a=10==(a|0)?15:13==(a|0)?16:9==(a|0)?17:12==(a|0)?18:11==(a|0)?19:8==(a|0)?20:7==(a|0)?21:27==(a|0)?22:23;break;case 15:k=110;a=24;break;case 16:k=114;a=24;break;case 17:k=116;a=24;break;case 18:k=102;a=24;break;case 19:k=118;a=24;break;case 20:k=98;a=24;break;case 21:k=97;a=24;break;case 22:k=101;a=24;break;case 23:k=0;a=24;break;case 24:a=0!=(k|0)?25:26;break;case 25:HEAP8[i|0]=92;HEAP8[i+1|0]=k&255;_mrb_str_buf_cat(t,d,j,i|0,2);a=27;break;case 26:a=l&255;a=_sprintf(i|
0,__str131320|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));_mrb_str_buf_cat(p,d,j,i|0,a);a=27;break;case 27:g=g+1|0;a=3;break;case 28:_mrb_str_buf_cat(q,d,j,__str121319|0,1);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[j>>2];HEAP32[f+4>>2]=HEAP32[j+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_str_inspect.X=1;
function _mrb_init_string(f){var e=_mrb_define_class(f,__str31310|0,HEAP32[(f+72|0)>>2]);HEAP32[(f+88|0)>>2]=e;HEAP32[e>>2]=HEAP32[e>>2]&2047|((HEAP32[e>>2]>>>11&2096896|17)&2097151)<<11;var b=_mrb_class_get(f,__str141321|0);_mrb_include_module(f,e,b);_mrb_define_method(f,e,__str151322|0,544,524288);_mrb_define_method(f,e,__str161323|0,78,0);_mrb_define_method(f,e,__str171324|0,92,0);_mrb_define_method(f,e,__str181325|0,92,0);_mrb_define_method(f,e,__str191326|0,24,524288);_mrb_define_method(f,e,
__str201327|0,356,524288);_mrb_define_method(f,e,__str211328|0,188,524288);_mrb_define_method(f,e,__str221329|0,168,524288);_mrb_define_method(f,e,__str231330|0,266,8192);_mrb_define_method(f,e,__str241331|0,388,0);_mrb_define_method(f,e,__str251332|0,432,524288);_mrb_define_method(f,e,__str261333|0,534,8192);_mrb_define_method(f,e,__str271334|0,552,8192);_mrb_define_method(f,e,__str281335|0,156,524288);_mrb_define_method(f,e,__str291336|0,548,524288);_mrb_define_method(f,e,__str301337|0,626,0);_mrb_define_method(f,
e,__str311338|0,474,0);_mrb_define_method(f,e,__str321339|0,254,524288);_mrb_define_method(f,e,__str331340|0,464,0);_mrb_define_method(f,e,__str341341|0,228,524288);_mrb_define_method(f,e,__str351342|0,606,524288);_mrb_define_method(f,e,__str361343|0,444,524288);_mrb_define_method(f,e,__str371344|0,468,8192);_mrb_define_method(f,e,__str381345|0,454,524288);_mrb_define_method(f,e,__str391346|0,360,524288);_mrb_define_method(f,e,__str401347|0,380,0);_mrb_define_method(f,e,__str411348|0,360,524288);
_mrb_define_method(f,e,__str421349|0,448,0);_mrb_define_method(f,e,__str431350|0,616,0);_mrb_define_method(f,e,__str441351|0,32,8192);_mrb_define_method(f,e,__str451352|0,266,8192);_mrb_define_method(f,e,__str461353|0,620,8192);_mrb_define_method(f,e,__str471354|0,200,8192);_mrb_define_method(f,e,__str481355|0,440,0);_mrb_define_method(f,e,__str41311|0,174,0);_mrb_define_method(f,e,__str21309|0,174,0);_mrb_define_method(f,e,__str491356|0,380,0);_mrb_define_method(f,e,__str501357|0,394,524288);_mrb_define_method(f,
e,__str511358|0,118,524288);_mrb_define_method(f,e,__str521359|0,40,0);_mrb_define_method(f,e,__str531360|0,196,0)}_mrb_init_string.X=1;
function _mrb_str_plus_m(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str581365|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_mrb_str_plus(f,e,b,c);STACKTOP=c}
function _mrb_str_bytesize(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];_mrb_fixnum_value1397(f,HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]);STACKTOP=e}
function _mrb_str_times(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i=c,j,l;d=e;_mrb_get_args(d,__str651372|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=i,tempInt));a=0>(HEAP32[i>>
2]|0)?3:4;break;case 3:var a=d,k=_mrb_class_obj_get(d,__str1307|0);_mrb_raise(a,k,__str661373|0);a=4;break;case 4:a=0!=(HEAP32[i>>2]|0)?5:7;break;case 5:a=(2147483647/(HEAP32[i>>2]|0)&-1|0)<(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)?6:7;break;case 6:a=d;k=_mrb_class_obj_get(d,__str1307|0);_mrb_raise(a,k,__str671374|0);a=7;break;case 7:h=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]*HEAP32[i>>2]|0;j=_str_new(d,0,h);_str_with_class(d,j,b);l=HEAP32[(j+20|0)>>2];a=0<(h|0)?8:12;break;case 8:g=HEAP32[(HEAP32[(b|0)>>2]+
12|0)>>2];var a=l,k=HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2],n=g;assert(0===n%1,"memcpy given "+n+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(a,k,n,1);a=9;break;case 9:a=(g|0)<=((h|0)/2&-1|0)?10:11;break;case 10:a=l+g|0;k=l;n=g;assert(0===n%1,"memcpy given "+n+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(a,k,n,1);g=g<<1|0;a=9;break;case 11:a=l+g|0;k=l;n=h-g|0;assert(0===n%1,"memcpy given "+n+" bytes to copy. Problem with quantum=1 corrections perhaps?");
_memcpy(a,k,n,1);a=12;break;case 12:HEAP8[l+HEAP32[(j+12|0)>>2]|0]=0;_mrb_obj_value1382(f,j);STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_str_times.X=1;
function _mrb_str_cmp_m(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h,i=c+8,j=c+16;d=e;_mrb_get_args(d,__str611368|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));a=17==
(HEAP32[(g+4|0)>>2]&255|0)?15:3;break;case 3:var a=d,l=_mrb_intern(d,__str41311|0),a=0!=(_mrb_respond_to(a,g,l)|0)?5:4;break;case 4:_mrb_nil_value1404(f);a=17;break;case 5:a=d;l=_mrb_intern(d,__str201327|0);a=0!=(_mrb_respond_to(a,g,l)|0)?7:6;break;case 6:_mrb_nil_value1404(f);a=17;break;case 7:_mrb_funcall(i,d,g,__str201327|0,1,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=HEAP32[b>>2],HEAP32[tempInt+4>>2]=HEAP32[b+4>>2],tempInt));a=0==
(HEAP32[(i+4|0)>>2]&255|0)?8:10;break;case 8:a=0!=(HEAP32[(i|0)>>2]|0)?10:9;break;case 9:_mrb_nil_value1404(f);a=17;break;case 10:a=0!=(HEAP32[(i|0)>>2]|0)?12:11;break;case 11:a=d;_mrb_fixnum_value1397(j,0);_mrb_funcall(f,a,j,__str641371|0,1,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=HEAP32[i>>2],HEAP32[tempInt+4>>2]=HEAP32[i+4>>2],tempInt));a=17;break;case 12:h=-HEAP32[(i|0)>>2]|0;a=13;break;case 13:a=14;break;case 14:a=16;break;case 15:h=
_mrb_str_cmp(d,b,g);a=16;break;case 16:_mrb_fixnum_value1397(f,h);a=17;break;case 17:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_str_cmp_m.X=1;
function _mrb_str_equal_m(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d=c,a=e;_mrb_get_args(a,__str611368|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=d,tempInt));a=0!=(_mrb_str_equal(a,
b,d)|0)?3:4;break;case 3:_mrb_true_value1425(f);a=5;break;case 4:_mrb_false_value1426(f);a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}function _mrb_str_match(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];_mrb_nil_value1404(f);STACKTOP=e}
function _mrb_str_aref_m(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+8,i;d=e;i=_mrb_get_args(d,__str621369|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,HEAP32[tempInt+4>>2]=
h,tempInt));a=2==(i|0)?3:6;break;case 3:a=19==(HEAP32[(g+4|0)>>2]&255|0)?4:5;break;case 4:var a=d,j=_mrb_class_obj_get(d,__str551362|0);_mrb_raise(a,j,__str561363|0);_mrb_nil_value1404(f);a=9;break;case 5:_mrb_str_substr(f,d,b,HEAP32[(g|0)>>2],HEAP32[(h|0)>>2]);a=9;break;case 6:a=1!=(i|0)?7:8;break;case 7:var a=d,j=_mrb_class_obj_get(d,__str1307|0),l=i;_mrb_raisef(a,j,__str631370|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=l,tempInt));
a=8;break;case 8:_mrb_str_aref(f,d,b,g);a=9;break;case 9:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_str_capitalize(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];var a=c+8,d=c+16;_mrb_str_dup(a,e,b);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[a>>2];HEAP32[c+4>>2]=HEAP32[a+4>>2];_mrb_str_capitalize_bang(d,
e,c);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=c}
function _mrb_str_capitalize_bang(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i,a=e;h=0;i=HEAP32[(b|0)>>2];_str_modify(a,i);a=0==(HEAP32[(i+12|0)>>2]|0)?4:3;break;case 3:a=0!=(HEAP32[(i+20|0)>>2]|0)?5:4;break;case 4:_mrb_nil_value1404(f);a=15;break;case 5:d=
HEAP32[(i+20|0)>>2];g=HEAP32[(i+20|0)>>2]+HEAP32[(i+12|0)>>2]|0;a=0!=(_islower(HEAP8[d]&255)|0)?6:7;break;case 6:h=_toupper(HEAP8[d]&255)&255;HEAP8[d]=h;h=1;a=7;break;case 7:a=8;break;case 8:d=a=d+1|0;a=a>>>0<g>>>0?9:12;break;case 9:a=0!=(_isupper(HEAP8[d]&255)|0)?10:11;break;case 10:h=_tolower(HEAP8[d]&255)&255;HEAP8[d]=h;h=1;a=11;break;case 11:a=8;break;case 12:a=0!=(h|0)?13:14;break;case 13:var a=f,j=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>
2]=HEAP32[j>>2];HEAP32[a+4>>2]=HEAP32[j+4>>2];a=15;break;case 14:_mrb_nil_value1404(f);a=15;break;case 15:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_str_capitalize_bang.X=1;
function _mrb_str_chomp(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];var a=c+8,d=c+16;_mrb_str_dup(a,e,b);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[a>>2];HEAP32[c+4>>2]=HEAP32[a+4>>2];_mrb_str_chomp_bang(d,e,c);assert(!0,
"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=c}
function _mrb_str_chomp_bang(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d=c,g,h,i,j,l,k,a=e;k=HEAP32[(b|0)>>2];_str_modify(a,k);j=HEAP32[(k+12|0)>>2];a=0==(_mrb_get_args(a,__str591366|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,
"Ran out of stack"),HEAP32[tempInt>>2]=d,tempInt))|0)?3:16;break;case 3:a=0==(j|0)?4:5;break;case 4:_mrb_nil_value1404(f);a=45;break;case 5:a=6;break;case 6:a=10==(HEAP8[HEAP32[(k+20|0)>>2]+(j-1|0)|0]<<24>>24|0)?7:11;break;case 7:a=k+12|0;HEAP32[a>>2]=HEAP32[a>>2]-1|0;a=0<(HEAP32[(k+12|0)>>2]|0)?8:10;break;case 8:a=13==(HEAP8[HEAP32[(k+20|0)>>2]+(HEAP32[(k+12|0)>>2]-1|0)|0]<<24>>24|0)?9:10;break;case 9:a=k+12|0;HEAP32[a>>2]=HEAP32[a>>2]-1|0;a=10;break;case 10:a=15;break;case 11:a=13==(HEAP8[HEAP32[(k+
20|0)>>2]+(j-1|0)|0]<<24>>24|0)?12:13;break;case 12:a=k+12|0;HEAP32[a>>2]=HEAP32[a>>2]-1|0;a=14;break;case 13:_mrb_nil_value1404(f);a=45;break;case 14:a=15;break;case 15:HEAP8[HEAP32[(k+20|0)>>2]+HEAP32[(k+12|0)>>2]|0]=0;var a=f,n=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[n>>2];HEAP32[a+4>>2]=HEAP32[n+4>>2];a=45;break;case 16:a=0==(j|0)?19:17;break;case 17:a=0==(HEAP32[(d+4|0)>>2]&255|0)?18:20;break;case 18:a=0!=(HEAP32[(d|0)>>2]|
0)?20:19;break;case 19:_mrb_nil_value1404(f);a=45;break;case 20:h=HEAP32[(k+20|0)>>2];l=HEAP32[(HEAP32[(d|0)>>2]+12|0)>>2];a=0==(l|0)?21:32;break;case 21:a=22;break;case 22:if(0<(j|0))a=23;else var r=0,a=24;break;case 23:r=10==(HEAP8[h+(j-1|0)|0]<<24>>24|0);a=24;break;case 24:a=r?25:29;break;case 25:j=j-1|0;a=0<(j|0)?26:28;break;case 26:a=13==(HEAP8[h+(j-1|0)|0]<<24>>24|0)?27:28;break;case 27:j=j-1|0;a=28;break;case 28:a=22;break;case 29:a=(j|0)<(HEAP32[(k+12|0)>>2]|0)?30:31;break;case 30:HEAP32[(k+
12|0)>>2]=j;HEAP8[h+j|0]=0;a=f;n=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[n>>2];HEAP32[a+4>>2]=HEAP32[n+4>>2];a=45;break;case 31:_mrb_nil_value1404(f);a=45;break;case 32:a=(l|0)>(j|0)?33:34;break;case 33:_mrb_nil_value1404(f);a=45;break;case 34:g=HEAP8[HEAP32[(HEAP32[(d|0)>>2]+20|0)>>2]+(l-1|0)|0]<<24>>24;a=1==(l|0)?35:37;break;case 35:a=10==(g|0)?36:37;break;case 36:g=HEAP8[HEAP32[(HEAP32[(d|0)>>2]+20|0)>>2]+(l-1|0)|0]<<24>>24;a=
37;break;case 37:a=1==(l|0)?38:40;break;case 38:a=10==(g|0)?39:40;break;case 39:a=6;break;case 40:i=(h+j|0)+(-l|0)|0;a=(HEAP8[h+(j-1|0)|0]<<24>>24|0)==(g|0)?41:44;break;case 41:a=1>=(l|0)?43:42;break;case 42:a=0==(_memcmp(HEAP32[(HEAP32[(d|0)>>2]+20|0)>>2],i,l)|0)?43:44;break;case 43:HEAP32[(k+12|0)>>2]=j-l|0;HEAP8[h+HEAP32[(k+12|0)>>2]|0]=0;a=f;n=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[n>>2];HEAP32[a+4>>2]=HEAP32[n+4>>2];a=45;break;
case 44:_mrb_nil_value1404(f);a=45;break;case 45:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_str_chomp_bang.X=1;
function _mrb_str_chop(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];var a=c+8,d=c+16;_mrb_str_dup(a,e,b);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[a>>2];HEAP32[c+4>>2]=HEAP32[a+4>>2];_mrb_str_chop_bang(d,e,c);assert(!0,
"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=c}
function _mrb_str_chop_bang(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,a=e;d=HEAP32[(b|0)>>2];_str_modify(a,d);a=0<(HEAP32[(d+12|0)>>2]|0)?3:9;break;case 3:g=HEAP32[(d+12|0)>>2]-1|0;a=10==(HEAP8[HEAP32[(d+20|0)>>2]+g|0]<<24>>24|0)?4:8;break;case 4:a=0<(g|
0)?5:7;break;case 5:a=13==(HEAP8[HEAP32[(d+20|0)>>2]+(g-1|0)|0]<<24>>24|0)?6:7;break;case 6:g=g-1|0;a=7;break;case 7:a=8;break;case 8:HEAP32[(d+12|0)>>2]=g;HEAP8[HEAP32[(d+20|0)>>2]+g|0]=0;var a=f,h=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[h>>2];HEAP32[a+4>>2]=HEAP32[h+4>>2];a=10;break;case 9:_mrb_nil_value1404(f);a=10;break;case 10:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_str_chop_bang.X=1;
function _mrb_str_downcase(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];var a=c+8,d=c+16;_mrb_str_dup(a,e,b);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[a>>2];HEAP32[c+4>>2]=HEAP32[a+4>>2];_mrb_str_downcase_bang(d,e,
c);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=c}
function _mrb_str_downcase_bang(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h;d=e;h=0;g=HEAP32[(b|0)>>2];_str_modify(d,g);d=HEAP32[(g+20|0)>>2];g=HEAP32[(g+20|0)>>2]+HEAP32[(g+12|0)>>2]|0;a=3;break;case 3:a=d>>>0<g>>>0?4:7;break;case 4:a=0!=(_isupper(HEAP8[d]&
255)|0)?5:6;break;case 5:h=_tolower(HEAP8[d]&255)&255;HEAP8[d]=h;h=1;a=6;break;case 6:d=d+1|0;a=3;break;case 7:a=0!=(h|0)?8:9;break;case 8:var a=f,i=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[i>>2];HEAP32[a+4>>2]=HEAP32[i+4>>2];a=10;break;case 9:_mrb_nil_value1404(f);a=10;break;case 10:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_str_downcase_bang.X=1;
function _mrb_str_each_line(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];_mrb_nil_value1404(f);STACKTOP=e}
function _mrb_str_empty_p(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:c=0==(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)?3:4;break;case 3:_mrb_true_value1425(f);c=5;break;case 4:_mrb_false_value1426(f);c=5;break;case 5:STACKTOP=e;return;default:assert(0,"bad label: "+c)}}
function _mrb_str_eql(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c;d=e;_mrb_get_args(d,__str611368|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));a=17!=(HEAP32[(g+4|0)>>
2]&255|0)?3:4;break;case 3:_mrb_false_value1426(f);a=7;break;case 4:a=0!=(_str_eql(d,b,g)|0)?5:6;break;case 5:_mrb_true_value1425(f);a=7;break;case 6:_mrb_false_value1426(f);a=7;break;case 7:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_str_hash_m(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];e=_mrb_str_hash(e,b);_mrb_fixnum_value1397(f,e);STACKTOP=c}
function _mrb_str_include(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+8;d=e;_mrb_get_args(d,__str611368|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));a=3==(HEAP32[(g+
4|0)>>2]&255|0)?3:6;break;case 3:a=0!=(_memchr(HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2],HEAP32[(g|0)>>2],HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2])|0)?4:5;break;case 4:_mrb_true_value1425(f);a=9;break;case 5:_mrb_false_value1426(f);a=9;break;case 6:_mrb_string_value(h,d,g);a=_mrb_str_index(d,b,g,0);a=-1==(a|0)?7:8;break;case 7:_mrb_false_value1426(f);a=9;break;case 8:_mrb_true_value1425(f);a=9;break;case 9:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_str_index_m(f,e,b){var c=STACKTOP;STACKTOP+=40;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+4,i=c+8,j,l=c+16,k,n,r,t=c+24,p=c+32;d=e;_mrb_get_args(d,__str191326|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>
2]=g,HEAP32[tempInt+4>>2]=h,tempInt));a=2==(HEAP32[h>>2]|0)?3:4;break;case 3:j=HEAP32[(HEAP32[g>>2]+8|0)>>2];var a=i,q=HEAP32[g>>2]|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[q>>2];HEAP32[a+4>>2]=HEAP32[q+4>>2];a=8;break;case 4:j=0;a=0<(HEAP32[h>>2]|0)?5:6;break;case 5:a=i;q=HEAP32[g>>2]|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[q>>2];HEAP32[a+4>>2]=HEAP32[q+4>>2];a=
7;break;case 6:_mrb_nil_value1404(l);a=i;q=l;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[q>>2];HEAP32[a+4>>2]=HEAP32[q+4>>2];a=7;break;case 7:a=8;break;case 8:a=0>(j|0)?9:14;break;case 9:j=j+HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0;a=0>(j|0)?10:13;break;case 10:a=19==(HEAP32[(i+4|0)>>2]&255|0)?11:12;break;case 11:a=d;q=_mrb_class_obj_get(d,__str551362|0);_mrb_raise(a,q,__str601367|0);a=12;break;case 12:_mrb_nil_value1404(f);a=31;break;case 13:a=
14;break;case 14:a=HEAP32[(i+4|0)>>2]&255;a=19==(a|0)?15:3==(a|0)?16:17==(a|0)?27:23;break;case 15:a=d;q=_mrb_class_obj_get(d,__str551362|0);_mrb_raise(a,q,__str561363|0);a=28;break;case 16:k=HEAP32[(i|0)>>2];n=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2];r=HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2];a=17;break;case 17:a=(j|0)<(n|0)?18:22;break;case 18:a=(HEAP8[r+j|0]&255|0)==(k|0)?19:20;break;case 19:_mrb_fixnum_value1397(f,j);a=31;break;case 20:a=21;break;case 21:j=j+1|0;a=17;break;case 22:_mrb_nil_value1404(f);a=
31;break;case 23:_mrb_check_string_type(p,d,i);a=t;q=p;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[q>>2];HEAP32[a+4>>2]=HEAP32[q+4>>2];a=0==(HEAP32[(t+4|0)>>2]&255|0)?24:26;break;case 24:a=0!=(HEAP32[(t|0)>>2]|0)?26:25;break;case 25:var a=d,q=_mrb_class_obj_get(d,__str551362|0),v=_mrb_obj_classname(d,i);_mrb_raisef(a,q,__str571364|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>
2]=v,tempInt));a=26;break;case 26:a=i;q=t;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[q>>2];HEAP32[a+4>>2]=HEAP32[q+4>>2];a=27;break;case 27:j=_mrb_str_index(d,b,i,j);a=28;break;case 28:a=-1==(j|0)?29:30;break;case 29:_mrb_nil_value1404(f);a=31;break;case 30:_mrb_fixnum_value1397(f,j);a=31;break;case 31:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_str_index_m.X=1;
function _mrb_str_init(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+8;d=e;a=1==(_mrb_get_args(d,__str591366|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt))|0)?3:4;break;
case 3:_str_replace(h,d,HEAP32[(b|0)>>2],HEAP32[(g|0)>>2]);a=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_str_replace(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str581365|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_str_replace(f,e,HEAP32[(b|0)>>2],HEAP32[(c|0)>>2]);STACKTOP=
c}
function _mrb_str_reverse(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i,j;d=e;a=1>=(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)?3:4;break;case 3:_mrb_str_dup(f,d,b);a=8;break;case 4:g=_str_new(d,0,HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]);_str_with_class(d,g,b);h=HEAP32[(HEAP32[(b|
0)>>2]+20|0)>>2];i=(HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2]+HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)-1|0;j=HEAP32[(g+20|0)>>2];a=5;break;case 5:a=i>>>0>=h>>>0?6:7;break;case 6:a=i;i=a-1|0;var a=HEAP8[a],l=j;j=l+1|0;HEAP8[l]=a;a=5;break;case 7:_mrb_obj_value1382(f,g);a=8;break;case 8:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_str_reverse.X=1;
function _mrb_str_reverse_bang(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,a=e;d=HEAP32[(b|0)>>2];_str_modify(a,d);a=1<(HEAP32[(d+12|0)>>2]|0)?3:7;break;case 3:g=HEAP32[(d+20|0)>>2];h=(g+HEAP32[(d+12|0)>>2]|0)-1|0;a=4;break;case 4:a=g>>>0<h>>>0?5:6;break;
case 5:var a=HEAP8[g],i=HEAP8[h],j=g;g=j+1|0;HEAP8[j]=i;i=h;h=i-1|0;HEAP8[i]=a;a=4;break;case 6:a=7;break;case 7:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_str_reverse_bang.X=1;
function _mrb_str_rindex_m(f,e,b){var c=STACKTOP;STACKTOP+=48;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+4,i=c+8,j=c+16,l,k,n=c+24,r,t,p=c+32,q=c+40;d=e;k=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2];_mrb_get_args(d,__str191326|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+
STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,HEAP32[tempInt+4>>2]=h,tempInt));a=2==(HEAP32[h>>2]|0)?3:12;break;case 3:l=i;a=HEAP32[g>>2]|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[l>>2]=HEAP32[a>>2];HEAP32[l+4>>2]=HEAP32[a+4>>2];l=j;a=HEAP32[g>>2]+8|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[l>>2]=HEAP32[a>>2];HEAP32[l+4>>2]=HEAP32[a+4>>2];l=HEAP32[(j|0)>>2];a=0>(l|0)?4:9;break;case 4:l=
l+k|0;a=0>(l|0)?5:8;break;case 5:a=19==(HEAP32[(i+4|0)>>2]&255|0)?6:7;break;case 6:var a=d,v=_mrb_class_obj_get(d,__str551362|0);_mrb_raise(a,v,__str561363|0);a=7;break;case 7:_mrb_nil_value1404(f);a=33;break;case 8:a=9;break;case 9:a=(l|0)>(k|0)?10:11;break;case 10:l=k;a=11;break;case 11:a=16;break;case 12:l=k;a=0<(HEAP32[h>>2]|0)?13:14;break;case 13:a=i;v=HEAP32[g>>2]|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[v>>2];HEAP32[a+4>>2]=
HEAP32[v+4>>2];a=15;break;case 14:_mrb_nil_value1404(n);a=i;v=n;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[v>>2];HEAP32[a+4>>2]=HEAP32[v+4>>2];a=15;break;case 15:a=16;break;case 16:a=HEAP32[(i+4|0)>>2]&255;a=19==(a|0)?17:3==(a|0)?18:17==(a|0)?29:25;break;case 17:a=d;v=_mrb_class_obj_get(d,__str551362|0);_mrb_raise(a,v,__str561363|0);a=32;break;case 18:r=HEAP32[(i|0)>>2];l=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2];t=HEAP32[(HEAP32[(b|0)>>2]+
20|0)>>2];a=19;break;case 19:a=0<=(l|0)?20:24;break;case 20:a=(HEAP8[t+l|0]&255|0)==(r|0)?21:22;break;case 21:_mrb_fixnum_value1397(f,l);a=33;break;case 22:a=23;break;case 23:l=l-1|0;a=19;break;case 24:_mrb_nil_value1404(f);a=33;break;case 25:_mrb_check_string_type(q,d,i);a=p;v=q;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[v>>2];HEAP32[a+4>>2]=HEAP32[v+4>>2];a=0==(HEAP32[(p+4|0)>>2]&255|0)?26:28;break;case 26:a=0!=(HEAP32[(p|0)>>2]|0)?
28:27;break;case 27:var a=d,v=_mrb_class_obj_get(d,__str551362|0),w=_mrb_obj_classname(d,i);_mrb_raisef(a,v,__str571364|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=w,tempInt));a=28;break;case 28:a=i;v=p;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[v>>2];HEAP32[a+4>>2]=HEAP32[v+4>>2];a=29;break;case 29:l=_mrb_str_rindex(d,b,i,l);a=0<=(l|0)?30:31;break;case 30:_mrb_fixnum_value1397(f,
l);a=33;break;case 31:a=32;break;case 32:_mrb_nil_value1404(f);a=33;break;case 33:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_str_rindex_m.X=1;
function _mrb_str_split_m(f,e,b){var c=STACKTOP;STACKTOP+=84;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h=c,i,j,l,k,n=c+8,r=c+12,t=c+20,p=c+28,q,v,w,m,x,s=c+36,y,B,A,G,z=c+44,E,M=c+52,C=c+60,H=c+68,L,R=c+76;d=e;_mrb_nil_value1404(h);i=1;k=0;HEAP32[n>>2]=-1;g=_mrb_get_args(d,__str541361|
0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=h,HEAP32[tempInt+4>>2]=n,tempInt));a=2==(g|0)?3:8;break;case 3:a=1==(HEAP32[n>>2]|0)?4:7;break;case 4:a=0==(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)?5:6;break;case 5:_mrb_ary_new_capa(f,d,0);a=75;break;case 6:_mrb_ary_new_from_values(f,d,1,b);a=75;break;case 7:k=1;a=8;break;case 8:a=0==(g|0)?11:9;break;case 9:a=0==(HEAP32[(h+4|0)>>2]&255|0)?10:12;break;case 10:a=0!=(HEAP32[(h|0)>>2]|0)?12:11;break;
case 11:i=0;a=19;break;case 12:a=17==(HEAP32[(h+4|0)>>2]&255|0)?13:17;break;case 13:i=1;a=1==(HEAP32[(HEAP32[(h|0)>>2]+12|0)>>2]|0)?14:16;break;case 14:a=32==(HEAP8[HEAP32[(HEAP32[(h|0)>>2]+20|0)>>2]|0]<<24>>24|0)?15:16;break;case 15:i=0;a=16;break;case 16:a=18;break;case 17:var a=d,I=_mrb_class_obj_get(d,__str551362|0);_mrb_raise(a,I,__str561363|0);a=18;break;case 18:a=19;break;case 19:_mrb_ary_new(p,d);j=r;a=p;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[j>>2]=HEAP32[a>>2];HEAP32[j+4>>2]=HEAP32[a+4>>2];j=0;a=0==(i|0)?20:38;break;case 20:q=HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2];v=HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2]+HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0;w=q;m=1;l=j;a=21;break;case 21:a=q>>>0<v>>>0?22:37;break;case 22:x=q;q=x+1|0;x=HEAP8[x]&255;a=0!=(m|0)?23:30;break;case 23:a=0!=HEAP8[_isspacetable+(x&255)|0]<<24>>24?24:25;break;case 24:j=q-w|0;a=29;break;case 25:l=q-w|0;m=0;a=0<=(HEAP32[n>>2]|0)?26:28;break;case 26:a=(HEAP32[n>>2]|0)<=(k|0)?27:28;
break;case 27:a=37;break;case 28:a=29;break;case 29:a=36;break;case 30:a=0!=HEAP8[_isspacetable+(x&255)|0]<<24>>24?31:34;break;case 31:m=d;_mrb_str_subseq(s,d,b,j,l-j|0);_mrb_ary_push(m,r,s);m=1;j=q-w|0;a=0<=(HEAP32[n>>2]|0)?32:33;break;case 32:k=k+1|0;a=33;break;case 33:a=35;break;case 34:l=q-w|0;a=35;break;case 35:a=36;break;case 36:a=21;break;case 37:a=59;break;case 38:a=1==(i|0)?39:57;break;case 39:B=y=HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2];A=HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2]+HEAP32[(HEAP32[(b|0)>>
2]+12|0)>>2]|0;G=HEAP32[(HEAP32[(h|0)>>2]+12|0)>>2];a=0==(G|0)?40:47;break;case 40:a=41;break;case 41:a=y>>>0<A>>>0?42:46;break;case 42:a=d;_mrb_str_subseq(z,d,b,y-B|0,1);_mrb_ary_push(a,r,z);y=y+1|0;a=0<=(HEAP32[n>>2]|0)?43:45;break;case 43:a=HEAP32[n>>2];k=I=k+1|0;a=(a|0)<=(I|0)?44:45;break;case 44:a=46;break;case 45:a=41;break;case 46:a=56;break;case 47:E=HEAP32[(HEAP32[(h|0)>>2]+20|0)>>2];a=48;break;case 48:if(y>>>0<A>>>0)a=49;else var K=0,a=50;break;case 49:l=K=_mrb_memsearch(E,G,y,A-y|0);K=
0<=(K|0);a=50;break;case 50:a=K?51:55;break;case 51:a=d;_mrb_str_subseq(M,d,b,y-B|0,l);_mrb_ary_push(a,r,M);y=y+(l+G|0)|0;a=0<=(HEAP32[n>>2]|0)?52:54;break;case 52:a=HEAP32[n>>2];k=I=k+1|0;a=(a|0)<=(I|0)?53:54;break;case 53:a=55;break;case 54:a=48;break;case 55:a=56;break;case 56:j=y-B|0;a=58;break;case 57:a=d;I=_mrb_class_obj_get(d,__str551362|0);_mrb_raise(a,I,__str561363|0);a=58;break;case 58:a=59;break;case 59:a=0<(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)?60:67;break;case 60:a=0<=(HEAP32[n>>2]|0)?
63:61;break;case 61:a=(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)>(j|0)?63:62;break;case 62:a=0>(HEAP32[n>>2]|0)?63:67;break;case 63:a=(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)==(j|0)?64:65;break;case 64:_mrb_str_new_empty(C,d,b);a=t;I=C;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[I>>2];HEAP32[a+4>>2]=HEAP32[I+4>>2];a=66;break;case 65:_mrb_str_subseq(H,d,b,j,HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]-j|0);a=t;I=H;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[I>>2];HEAP32[a+4>>2]=HEAP32[I+4>>2];a=66;break;case 66:_mrb_ary_push(d,r,t);a=67;break;case 67:a=0>(HEAP32[n>>2]|0)?68:74;break;case 68:a=69;break;case 69:L=a=HEAP32[(HEAP32[(r|0)>>2]+12|0)>>2];if(0<(a|0))a=70;else var Q=0,a=71;break;case 70:Q=t;a=HEAP32[(HEAP32[(r|0)>>2]+20|0)>>2]+((L-1|0)<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[Q>>2]=HEAP32[a>>2];HEAP32[Q+4>>2]=HEAP32[a+4>>2];Q=0==(HEAP32[(HEAP32[(t|0)>>2]+12|0)>>2]|
0);a=71;break;case 71:a=Q?72:73;break;case 72:_mrb_ary_pop(R,d,r);a=69;break;case 73:a=74;break;case 74:a=f;I=r;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[I>>2];HEAP32[a+4>>2]=HEAP32[I+4>>2];a=75;break;case 75:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_str_split_m.X=1;
function _mrb_str_to_i(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,a=c+4,h;d=e;_mrb_get_args(d,__str191326|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,HEAP32[tempInt+4>>2]=a,tempInt));
a=0==(HEAP32[a>>2]|0)?3:4;break;case 3:h=10;a=5;break;case 4:h=HEAP32[(HEAP32[g>>2]|0)>>2];a=5;break;case 5:a=0>(h|0)?6:7;break;case 6:var a=d,i=_mrb_class_obj_get(d,__str1307|0),j=h;_mrb_raisef(a,i,__str51312|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=j,tempInt));a=7;break;case 7:_mrb_str_to_inum(f,d,b,h,0);STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_str_to_f(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];e=_mrb_str_to_dbl(e,b,0);_mrb_float_value1424(f,e);STACKTOP=c}
function _mrb_str_to_s(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=e;a=(_mrb_obj_class(d,b)|0)!=(HEAP32[(d+88|0)>>2]|0)?3:4;break;case 3:_mrb_str_dup(f,d,b);a=5;break;case 4:var a=f,g=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[g>>2];HEAP32[a+4>>2]=HEAP32[g+4>>2];a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_str_upcase(f,e,b){var c=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];var a=c+8,d=c+16;_mrb_str_dup(a,e,b);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[a>>2];HEAP32[c+4>>2]=HEAP32[a+4>>2];_mrb_str_upcase_bang(d,e,c);
assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=c}
function _mrb_str_upcase_bang(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h;d=e;g=HEAP32[(b|0)>>2];h=0;_str_modify(d,g);d=HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2];g=HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2]+HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0;a=3;break;case 3:a=d>>>0<
g>>>0?4:7;break;case 4:a=0!=(_islower(HEAP8[d]&255)|0)?5:6;break;case 5:h=_toupper(HEAP8[d]&255)&255;HEAP8[d]=h;h=1;a=6;break;case 6:d=d+1|0;a=3;break;case 7:a=0!=(h|0)?8:9;break;case 8:var a=f,i=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[i>>2];HEAP32[a+4>>2]=HEAP32[i+4>>2];a=10;break;case 9:_mrb_nil_value1404(f);a=10;break;case 10:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_str_upcase_bang.X=1;
function _mrb_str_bytes(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h=c,i,j=c+8;d=e;g=HEAP32[(b|0)>>2];_mrb_ary_new_capa(h,d,HEAP32[(g+12|0)>>2]);i=HEAP32[(g+20|0)>>2];g=i+HEAP32[(g+12|0)>>2]|0;a=3;break;case 3:a=i>>>0<g>>>0?4:5;break;case 4:a=
d;_mrb_fixnum_value1397(j,HEAP8[i|0]<<24>>24);_mrb_ary_push(a,h,j);i=i+1|0;a=3;break;case 5:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[h>>2];HEAP32[f+4>>2]=HEAP32[h+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_float_value1424(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|6;HEAPF32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_memsearch(f,e,b,c){var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j,l,k,n,r;g=f;h=e;i=b;j=c;l=g;k=i;a=(h|0)>(j|0)?3:4;break;case 3:d=-1;a=20;break;case 4:a=(h|0)==(j|0)?5:6;break;case 5:d=0==(_memcmp(g,i,h)|0)?0:-1;a=20;break;case 6:a=1>(h|0)?7:8;break;case 7:d=0;a=20;break;case 8:a=1==(h|0)?9:16;break;case 9:n=k;r=n+j|0;a=10;break;case 10:a=k>>>0<r>>>0?11:15;break;case 11:a=(HEAP8[l]&255|0)==(HEAP8[k]&255|0)?12:13;break;case 12:d=k-n|0;a=20;break;case 13:a=14;break;case 14:k=k+1|0;a=
10;break;case 15:d=-1;a=20;break;case 16:a=17;break;case 17:a=18;break;case 18:a=19;break;case 19:d=_mrb_memsearch_qs(g,h,i,j);a=20;break;case 20:return d;default:assert(0,"bad label: "+a)}}_mrb_memsearch.X=1;
function _mrb_str_new_empty(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=_str_new(e,0,0);_str_with_class(e,a,b);_mrb_obj_value1382(f,a);STACKTOP=c}
function _mrb_memsearch_qs(f,e,b,c){var a=STACKTOP;STACKTOP+=1024;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d;for(d=2;;)switch(d){case 2:var g,h,i,j,l,k,n,r,t,p=a;h=f;i=e;j=b;l=c;k=h;n=h+i|0;r=j;t=0;d=3;break;case 3:d=256>(t|0)?4:6;break;case 4:HEAP32[(p+(t<<2)|0)>>2]=i+1|0;d=5;break;case 5:t=t+1|0;d=3;break;case 6:d=7;break;case 7:d=k>>>0<n>>>0?8:10;break;case 8:HEAP32[(p+((HEAP8[k]&255)<<2)|0)>>2]=n-k|0;d=9;break;case 9:k=k+1|0;d=7;break;case 10:d=
11;break;case 11:d=(r+i|0)>>>0<=(j+l|0)>>>0?12:17;break;case 12:d=(HEAP8[h]&255|0)==(HEAP8[r]&255|0)?13:15;break;case 13:d=0==(_memcmp(h,r,i)|0)?14:15;break;case 14:g=r-j|0;d=18;break;case 15:d=16;break;case 16:r=r+HEAP32[((p|0)+((HEAP8[r+i|0]&255)<<2)|0)>>2]|0;d=11;break;case 17:g=-1;d=18;break;case 18:return f=g,STACKTOP=a,f;default:assert(0,"bad label: "+d)}}_mrb_memsearch_qs.X=1;
function _mrb_str_rindex(f,e,b,c){f=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];a=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i,j,l,k,n;g=c;l=HEAP32[(e|0)>>2];k=HEAP32[(b|0)>>
2];n=HEAP32[(k+12|0)>>2];a=(HEAP32[(l+12|0)>>2]|0)<(n|0)?3:4;break;case 3:d=-1;a=14;break;case 4:a=(HEAP32[(l+12|0)>>2]-g|0)<(n|0)?5:6;break;case 5:g=HEAP32[(l+12|0)>>2]-n|0;a=6;break;case 6:i=HEAP32[(l+20|0)>>2];h=HEAP32[(l+20|0)>>2]+g|0;j=HEAP32[(k+20|0)>>2];a=0!=(n|0)?7:13;break;case 7:a=8;break;case 8:a=i>>>0<=h>>>0?9:12;break;case 9:a=0==(_memcmp(h,j,n)|0)?10:11;break;case 10:d=h-HEAP32[(l+20|0)>>2]|0;a=14;break;case 11:h=h-1|0;a=8;break;case 12:d=-1;a=14;break;case 13:d=g;a=14;break;case 14:return e=
d,STACKTOP=f,e;default:assert(0,"bad label: "+a)}}_mrb_str_rindex.X=1;
function _str_replace(f,e,b,c){var a;for(a=2;;)switch(a){case 2:var d,g,h;d=e;g=b;h=c;a=0!=(HEAP32[h>>2]>>>11&256|0)?3:8;break;case 3:a=4;break;case 4:a=0!=(HEAP32[g>>2]>>>11&256|0)?5:6;break;case 5:_mrb_str_decref(d,HEAP32[(g+16|0)>>2]);a=7;break;case 6:_mrb_free(d,HEAP32[(g+20|0)>>2]);a=7;break;case 7:HEAP32[(g+20|0)>>2]=HEAP32[(h+20|0)>>2];HEAP32[(g+12|0)>>2]=HEAP32[(h+12|0)>>2];HEAP32[(g+16|0)>>2]=HEAP32[(h+16|0)>>2];var i=a=g;HEAP32[i>>2]=HEAP32[i>>2]&2047|((HEAP32[a>>2]>>>11&2097151|256)&2097151)<<
11;a=HEAP32[(g+16|0)>>2]|0;HEAP32[a>>2]=HEAP32[a>>2]+1|0;a=15;break;case 8:a=10<(HEAP32[(h+12|0)>>2]|0)?9:10;break;case 9:_str_make_shared(d,h);a=4;break;case 10:a=0!=(HEAP32[g>>2]>>>11&256|0)?11:12;break;case 11:_mrb_str_decref(d,HEAP32[(g+16|0)>>2]);i=a=g;HEAP32[i>>2]=HEAP32[i>>2]&2047|(HEAP32[a>>2]>>>11&2096895)<<11;a=_mrb_malloc(d,HEAP32[(h+12|0)>>2]+1|0);HEAP32[(g+20|0)>>2]=a;a=13;break;case 12:a=_mrb_realloc(d,HEAP32[(g+20|0)>>2],HEAP32[(h+12|0)>>2]+1|0);HEAP32[(g+20|0)>>2]=a;a=13;break;case 13:a=
HEAP32[(g+20|0)>>2];var i=HEAP32[(h+20|0)>>2],j=HEAP32[(h+12|0)>>2];assert(0===j%1,"memcpy given "+j+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(a,i,j,1);HEAP8[HEAP32[(g+20|0)>>2]+HEAP32[(h+12|0)>>2]|0]=0;HEAP32[(g+12|0)>>2]=HEAP32[(h+12|0)>>2];HEAP32[(g+16|0)>>2]=HEAP32[(h+12|0)>>2];a=14;break;case 14:a=15;break;case 15:_mrb_obj_value1382(f,g);return;default:assert(0,"bad label: "+a)}}_str_replace.X=1;
function _mrb_str_index(f,e,b,c){f=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];a=b;b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i,j,l;g=c;j=HEAP32[(HEAP32[(e|0)>>2]+12|0)>>2];
l=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2];a=0>(g|0)?3:6;break;case 3:g=g+j|0;a=0>(g|0)?4:5;break;case 4:d=-1;a=15;break;case 5:a=6;break;case 6:a=(j-g|0)<(l|0)?7:8;break;case 7:d=-1;a=15;break;case 8:i=HEAP32[(HEAP32[(e|0)>>2]+20|0)>>2];a=0!=(g|0)?9:10;break;case 9:i=i+g|0;a=10;break;case 10:a=0==(l|0)?11:12;break;case 11:d=g;a=15;break;case 12:h=HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2];l=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2];j=HEAP32[(HEAP32[(e|0)>>2]+12|0)>>2]-g|0;h=_mrb_memsearch(h,l,i,j);a=0>(h|0)?13:14;break;
case 13:d=h;a=15;break;case 14:d=h+g|0;a=15;break;case 15:return e=d,STACKTOP=f,e;default:assert(0,"bad label: "+a)}}_mrb_str_index.X=1;
function _mrb_true_value1425(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]=HEAP32[b>>2]&-256|2;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_false_value1426(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_str_aref(f,e,b,c){var a=STACKTOP;STACKTOP+=32;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i=a,j=a+8,l=a+12,k=a+16,n=a+24;g=
e;d=HEAP32[(c+4|0)>>2]&255;d=3==(d|0)?3:19==(d|0)?9:17==(d|0)?10:13;break;case 3:h=HEAP32[(c|0)>>2];d=4;break;case 4:_mrb_str_substr(i,g,b,h,1);var d=b,r=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[r>>2];HEAP32[d+4>>2]=HEAP32[r+4>>2];d=0==(HEAP32[(b+4|0)>>2]&255|0)?5:6;break;case 5:d=0!=(HEAP32[(b|0)>>2]|0)?6:8;break;case 6:d=0==(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)?7:8;break;case 7:_mrb_nil_value1404(f);d=18;break;case 8:d=f;r=b;assert(!0,
"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[r>>2];HEAP32[d+4>>2]=HEAP32[r+4>>2];d=18;break;case 9:d=g;r=_mrb_class_obj_get(g,__str551362|0);_mrb_raise(d,r,__str561363|0);_mrb_nil_value1404(f);d=18;break;case 10:d=-1!=(_mrb_str_index(g,b,c,0)|0)?11:12;break;case 11:_mrb_str_dup(f,g,c);d=18;break;case 12:_mrb_nil_value1404(f);d=18;break;case 13:HEAP32[l>>2]=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2];d=_mrb_range_beg_len(g,c,j,l,HEAP32[l>>2],0);d=0==(d|0)?
14:2==(d|0)?15:16;break;case 14:d=17;break;case 15:_mrb_nil_value1404(f);d=18;break;case 16:_mrb_str_subseq(n,g,b,HEAP32[j>>2],HEAP32[l>>2]);d=k;r=n;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[r>>2];HEAP32[d+4>>2]=HEAP32[r+4>>2];d=f;r=k;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[r>>2];HEAP32[d+4>>2]=HEAP32[r+4>>2];d=18;break;case 17:h=HEAP32[(c|0)>>2];d=4;break;case 18:STACKTOP=
a;return;default:assert(0,"bad label: "+d)}}_mrb_str_aref.X=1;function _mrb_struct_iv_get(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];c=_mrb_intern(e,c);_struct_ivar_get(f,e,b,c);STACKTOP=a}function _mrb_is_local_id(f){return f<<16>>16}function _mrb_is_const_id(f){return f<<16>>16}
function _struct_ivar_get(f,e,b,c){var a=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i,j,l=a,k=a+8,n=a+16;g=e;h=c;j=_struct_class(g);d=3;break;case 3:_mrb_iv_get(k,g,b,h);var d=l,r=k;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[d>>2]=HEAP32[r>>2];HEAP32[d+4>>2]=HEAP32[r+4>>2];d=0==(HEAP32[(l+4|0)>>2]&255|0)?4:5;break;case 4:d=0!=(HEAP32[(l|0)>>2]|0)?5:6;break;case 5:d=f;r=l;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[r>>2];HEAP32[d+4>>2]=HEAP32[r+4>>2];d=10;break;case 6:var $super=HEAP32[(b|0)>>2]+20|0;i=HEAP32[$super>>2];d=0==(i|0)?8:7;break;case 7:d=(i|0)==(j|0)?8:9;break;case 8:_mrb_nil_value1470(f);d=10;break;case 9:_mrb_obj_value1468(n,i);d=b;r=n;
assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[r>>2];HEAP32[d+4>>2]=HEAP32[r+4>>2];d=3;break;case 10:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_struct_ivar_get.X=1;
function _mrb_struct_s_members(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,a=d=e,h=_mrb_intern(d,__str1427|0);_struct_ivar_get(g,a,b,h);a=0==(HEAP32[(g+4|0)>>2]&255|0)?3:5;break;case 3:a=0!=(HEAP32[(g|0)>>2]|0)?5:4;break;case 4:a=d;h=_mrb_class_obj_get(d,
__str11428|0);_mrb_raise(a,h,__str21429|0);a=5;break;case 5:a=15==(HEAP32[(g+4|0)>>2]&255|0)?7:6;break;case 6:a=d;h=_mrb_class_obj_get(d,__str11428|0);_mrb_raise(a,h,__str31430|0);a=7;break;case 7:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[g>>2];HEAP32[f+4>>2]=HEAP32[g+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_struct_members(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,a=c+8,h=d=e,i=_mrb_obj_class(d,b);_mrb_obj_value1468(a,i);_mrb_struct_s_members(g,h,a);a=20==(HEAP32[(b+4|0)>>2]&255|0)?3:6;break;case 3:a=(HEAP32[(HEAP32[(b|0)>>2]+12|
0)>>2]|0)!=(HEAP32[(HEAP32[(g|0)>>2]+12|0)>>2]|0)?4:5;break;case 4:var a=d,h=_mrb_class_obj_get(d,__str11428|0),i=HEAP32[(HEAP32[(g|0)>>2]+12|0)>>2],j=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2];_mrb_raisef(a,h,__str41431|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=i,HEAP32[tempInt+4>>2]=j,tempInt));a=5;break;case 5:a=6;break;case 6:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[g>>2];
HEAP32[f+4>>2]=HEAP32[g+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_struct_members.X=1;
function _mrb_obj_value1468(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b,g;g=a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|HEAP32[g>>2]&255;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+
c)}}
function _mrb_struct_getmember(f,e,b,c){var a=STACKTOP;STACKTOP+=32;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i=a,j=a+8,l,k,n,d=a+16;n=a+24;g=e;h=c;l=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2];_mrb_struct_members(d,g,b);k=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[k>>
2]=HEAP32[d>>2];HEAP32[k+4>>2]=HEAP32[d+4>>2];k=HEAP32[(HEAP32[(i|0)>>2]+20|0)>>2];_mrb_symbol_value1469(n,h);d=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[n>>2];HEAP32[d+4>>2]=HEAP32[n+4>>2];n=HEAP32[(HEAP32[(i|0)>>2]+12|0)>>2];i=0;d=3;break;case 3:d=(i|0)<(n|0)?4:8;break;case 4:d=0!=(_mrb_obj_equal(g,k+(i<<3)|0,j)|0)?5:6;break;case 5:var d=f,r=l+(i<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[d>>2]=HEAP32[r>>2];HEAP32[d+4>>2]=HEAP32[r+4>>2];d=9;break;case 6:d=7;break;case 7:i=i+1|0;d=3;break;case 8:var d=g,r=h,t=_mrb_sym2name(g,h);_mrb_name_error(d,r,__str51432|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=t,tempInt));_mrb_nil_value1470(f);d=9;break;case 9:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_mrb_struct_getmember.X=1;
function _mrb_symbol_value1469(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|4;HEAP16[(d|0)>>1]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_nil_value1470(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_id_attrset(f,e){var b=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c,a;c=_mrb_sym2name_len(f,e,b);a=_mrb_malloc(f,HEAP32[b>>2]+2|0);var d=HEAP32[b>>2];assert(0===d%1,"memcpy given "+d+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(a,c,d,1);HEAP8[a+HEAP32[b>>2]|0]=61;HEAP8[a+(HEAP32[b>>2]+1|0)|0]=0;c=_mrb_intern2(f,a,HEAP32[b>>2]+1|0);_mrb_free(f,a);STACKTOP=b;return c}
function _mrb_struct_define(f,e,b){var c=STACKTOP;STACKTOP+=52;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h=c,i=c+4,j=c+12,l,k=c+20,n=c+28,r=c+36,t=c+44;d=e;g=b;a=0!=(g|0)?4:3;break;case 3:_mrb_nil_value1470(k);a=i;var p=k;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[p>>2];HEAP32[a+4>>2]=HEAP32[p+4>>2];a=5;break;case 4:_mrb_str_new2(n,d,g);a=i;p=n;assert(!0,
"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[p>>2];HEAP32[a+4>>2]=HEAP32[p+4>>2];a=5;break;case 5:_mrb_ary_new(r,d);a=j;p=r;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[p>>2];HEAP32[a+4>>2]=HEAP32[p+4>>2];HEAP32[h>>2]=arguments[_mrb_struct_define.length];a=6;break;case 6:a=l=HEAP32[h>>2];HEAP32[h>>2]=l+4|0;l=a=HEAP32[a>>2];a=0!=(a|0)?7:8;break;case 7:a=_mrb_intern(d,l);p=d;_mrb_symbol_value1469(t,
a);_mrb_ary_push(p,j,t);a=6;break;case 8:g=d;d=_struct_class(d);_make_struct(f,g,i,j,d);STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_struct_define.X=1;
function _make_struct(f,e,b,c,a){var d=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[g>>2];HEAP32[b+4>>2]=HEAP32[g+4>>2];g=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[g>>2];HEAP32[c+4>>2]=HEAP32[g+4>>2];for(g=2;;)switch(g){case 2:var h,i,j=d,l,k,n,r,t,p=d+8,q=d+16,v;h=e;
i=a;g=0==(HEAP32[(b+4|0)>>2]&255|0)?3:5;break;case 3:g=0!=(HEAP32[(b|0)>>2]|0)?5:4;break;case 4:t=_mrb_class_new(h,i);g=10;break;case 5:_mrb_str_to_str(p,h,b);k=b;g=p;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[k>>2]=HEAP32[g>>2];HEAP32[k+4>>2]=HEAP32[g+4>>2];k=_mrb_to_id(h,b);g=0!=(_mrb_is_const_id(k)|0)?7:6;break;case 6:var g=h,w=k,m=_mrb_string_value_ptr(h,b);_mrb_name_error(g,w,__str381465|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+
STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=m,tempInt));g=7;break;case 7:g=0!=(_mrb_const_defined_at(h,i,k)|0)?8:9;break;case 8:g=_mrb_string_value_ptr(h,b);_mrb_warn(__str391466|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));g=9;break;case 9:t=_mrb_define_class_under(h,i,HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2],i);g=10;break;case 10:l=t;HEAP32[l>>2]=HEAP32[l>>2]&2047|((HEAP32[t>>2]>>>11&2096896|20)&2097151)<<11;_mrb_obj_value1468(q,
t);l=j;n=q;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[l>>2]=HEAP32[n>>2];HEAP32[l+4>>2]=HEAP32[n+4>>2];l=h;n=_mrb_intern(h,__str1427|0);_mrb_iv_set(l,j,n,c);_mrb_define_class_method(h,t,__str141441|0,224,8192);_mrb_define_class_method(h,t,__str161443|0,224,8192);_mrb_define_class_method(h,t,__str181445|0,390,0);l=HEAP32[(HEAP32[(c|0)>>2]+20|0)>>2];r=HEAP32[(HEAP32[(c|0)>>2]+12|0)>>2];n=0;g=11;break;case 11:g=(n|0)<(r|0)?12:20;break;case 12:v=HEAP16[(l+
(n<<3)|0)>>1];g=0!=(_mrb_is_local_id(v)|0)?14:13;break;case 13:g=0!=(_mrb_is_const_id(v)|0)?14:18;break;case 14:g=10>(n|0)?15:16;break;case 15:_mrb_define_method_id(h,t,v,HEAP32[(_ref_func+(n<<2)|0)>>2],0);g=17;break;case 16:_mrb_define_method_id(h,t,v,326,0);g=17;break;case 17:g=h;w=t;m=_mrb_id_attrset(h,v);_mrb_define_method_id(g,w,m,418,524288);g=18;break;case 18:g=19;break;case 19:n=n+1|0;g=11;break;case 20:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[f>>2]=HEAP32[j>>2];HEAP32[f+4>>2]=HEAP32[j+4>>2];STACKTOP=d;return;default:assert(0,"bad label: "+g)}}_make_struct.X=1;function _struct_class(f){return _mrb_class_get(f,__str131440|0)}
function _mrb_struct_initialize(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];_mrb_struct_initialize_withArg(f,e,HEAP32[(HEAP32[(c|0)>>2]+12|0)>>2],HEAP32[(HEAP32[(c|
0)>>2]+20|0)>>2],b);STACKTOP=a}
function _mrb_struct_initialize_withArg(f,e,b,c,a){var d=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=a,a=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[a>>2]=HEAP32[g>>2];HEAP32[a+4>>2]=HEAP32[g+4>>2];for(g=2;;)switch(g){case 2:var h,i,j,l;h=e;i=b;j=c;l=_mrb_obj_class(h,a);_mrb_struct_modify(a);l=_num_members(h,l);g=(l|0)<(i|0)?3:4;break;case 3:var g=h,k=_mrb_class_obj_get(h,__str351462|0);_mrb_raise(g,
k,__str361463|0);g=4;break;case 4:e=HEAP32[(a|0)>>2];h=_mrb_calloc(h,8,l);HEAP32[(e+16|0)>>2]=h;HEAP32[(e+12|0)>>2]=l;_struct_copy(HEAP32[(e+16|0)>>2],j,i);assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[a>>2];HEAP32[f+4>>2]=HEAP32[a+4>>2];STACKTOP=d;return;default:assert(0,"bad label: "+g)}}_mrb_struct_initialize_withArg.X=1;
function _mrb_struct_init_copy(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c;d=e;_mrb_get_args(d,__str61433|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));a=0!=(_mrb_obj_equal(d,
b,g)|0)?3:4;break;case 3:var a=f,h=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[h>>2];HEAP32[a+4>>2]=HEAP32[h+4>>2];a=9;break;case 4:a=d;h=_mrb_obj_class(d,b);a=0!=(_mrb_obj_is_instance_of(a,g,h)|0)?6:5;break;case 5:a=d;h=_mrb_class_obj_get(d,__str11428|0);_mrb_raise(a,h,__str71434|0);a=6;break;case 6:a=(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)!=(HEAP32[(HEAP32[(g|0)>>2]+12|0)>>2]|0)?7:8;break;case 7:a=d;h=_mrb_class_obj_get(d,__str11428|
0);_mrb_raise(a,h,__str81435|0);a=8;break;case 8:_struct_copy(HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2],HEAP32[(HEAP32[(g|0)>>2]+16|0)>>2],HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]);a=f;h=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[h>>2];HEAP32[a+4>>2]=HEAP32[h+4>>2];a=9;break;case 9:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_struct_init_copy.X=1;
function _struct_copy(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h;a=f;d=e;g=b;h=0;c=3;break;case 3:c=h>>>0<g>>>0?4:6;break;case 4:c=a+(h<<3)|0;var i=d+(h<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[i>>2];HEAP32[c+4>>2]=HEAP32[i+4>>2];c=5;break;case 5:h=h+1|0;c=3;break;case 6:return;default:assert(0,"bad label: "+c)}}
function _mrb_struct_modify(f){var e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b=f,f=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=e}
function _mrb_struct_aref_n(f,e,b,c){var a=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h;g=e;d=17==(HEAP32[(c+4|0)>>2]&255|0)?4:3;
break;case 3:d=4==(HEAP32[(c+4|0)>>2]&255|0)?4:5;break;case 4:var d=g,i=_mrb_to_id(g,c);_mrb_struct_aref_id(f,d,b,i);d=12;break;case 5:h=HEAP32[(c|0)>>2];d=0>(h|0)?6:7;break;case 6:h=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]+h|0;d=7;break;case 7:d=0>(h|0)?8:9;break;case 8:var d=g,i=_mrb_class_obj_get(g,__str91436|0),j=h,l=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2];_mrb_raisef(d,i,__str101437|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=j,HEAP32[tempInt+
4>>2]=l,tempInt));d=9;break;case 9:d=(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)<=(h|0)?10:11;break;case 10:d=g;i=_mrb_class_obj_get(g,__str91436|0);j=h;l=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2];_mrb_raisef(d,i,__str111438|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=j,HEAP32[tempInt+4>>2]=l,tempInt));d=11;break;case 11:d=f;i=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2]+(h<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[d>>2]=HEAP32[i>>2];HEAP32[d+4>>2]=HEAP32[i+4>>2];d=12;break;case 12:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_mrb_struct_aref_n.X=1;
function _mrb_struct_aref_id(f,e,b,c){var a=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i,j=a,l,k;k=a+8;g=e;h=c;i=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2];_mrb_struct_members(k,g,b);l=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[l>>2]=HEAP32[k>>2];HEAP32[l+4>>2]=HEAP32[k+4>>2];l=HEAP32[(HEAP32[(j|0)>>2]+20|0)>>2];k=HEAP32[(HEAP32[(j|0)>>2]+12|0)>>2];j=0;d=3;break;case 3:d=(j|0)<(k|0)?4:8;break;case 4:d=(HEAP16[(l+(j<<3)|0)>>1]<<16>>16|0)==(h<<16>>16|0)?5:6;break;case 5:var d=f,n=i+(j<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[n>>2];HEAP32[d+4>>2]=HEAP32[n+4>>2];d=9;break;case 6:d=7;break;case 7:j=j+1|0;d=3;break;case 8:var d=g,n=h,r=_mrb_sym2name(g,
h);_mrb_name_error(d,n,__str341461|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=r,tempInt));_mrb_nil_value1470(f);d=9;break;case 9:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_mrb_struct_aref_id.X=1;
function _mrb_struct_aref(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str61433|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_mrb_struct_aref_n(f,e,b,c);STACKTOP=c}
function _mrb_struct_aset(f,e,b){var c=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h=c,i=c+8;d=e;_mrb_get_args(d,__str121439|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=h,HEAP32[tempInt+4>>2]=
i,tempInt));a=17==(HEAP32[(h+4|0)>>2]&255|0)?4:3;break;case 3:a=4==(HEAP32[(h+4|0)>>2]&255|0)?4:5;break;case 4:var a=d,j=_mrb_to_id(d,h);_mrb_struct_aset_id(f,a,b,j,i);a=12;break;case 5:g=HEAP32[(h|0)>>2];a=0>(g|0)?6:7;break;case 6:g=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]+g|0;a=7;break;case 7:a=0>(g|0)?8:9;break;case 8:var a=d,j=_mrb_class_obj_get(d,__str91436|0),l=g,k=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2];_mrb_raisef(a,j,__str101437|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=l,HEAP32[tempInt+4>>2]=k,tempInt));a=9;break;case 9:a=(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)<=(g|0)?10:11;break;case 10:a=d;j=_mrb_class_obj_get(d,__str91436|0);l=g;k=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2];_mrb_raisef(a,j,__str111438|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=l,HEAP32[tempInt+4>>2]=k,tempInt));a=11;break;case 11:_mrb_struct_modify(b);j=a=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2]+(g<<3)|0;l=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[j>>2]=HEAP32[l>>2];HEAP32[j+4>>2]=HEAP32[l+4>>2];j=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[j>>2]=HEAP32[a>>2];HEAP32[j+4>>2]=HEAP32[a+4>>2];a=12;break;case 12:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_struct_aset.X=1;
function _mrb_struct_aset_id(f,e,b,c,a){var d=STACKTOP;STACKTOP+=16;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[g>>2];HEAP32[b+4>>2]=HEAP32[g+4>>2];g=a;a=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[a>>2]=HEAP32[g>>2];HEAP32[a+4>>2]=HEAP32[g+4>>2];for(g=2;;)switch(g){case 2:var h,i,j=d,l,k,n,r,g=d+8;h=e;i=c;
_mrb_struct_members(g,h,b);r=j;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[r>>2]=HEAP32[g>>2];HEAP32[r+4>>2]=HEAP32[g+4>>2];r=HEAP32[(HEAP32[(j|0)>>2]+12|0)>>2];_mrb_struct_modify(b);g=(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)!=(r|0)?3:4;break;case 3:var g=h,t=_mrb_class_obj_get(h,__str11428|0),p=r,q=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2];_mrb_raisef(g,t,__str41431|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>
2]=p,HEAP32[tempInt+4>>2]=q,tempInt));g=4;break;case 4:l=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2];k=HEAP32[(HEAP32[(j|0)>>2]+20|0)>>2];n=0;g=5;break;case 5:g=(n|0)<(r|0)?6:10;break;case 6:g=(HEAP16[(k+(n<<3)|0)>>1]<<16>>16|0)==(i<<16>>16|0)?7:8;break;case 7:g=l+(n<<3)|0;t=a;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[t>>2];HEAP32[g+4>>2]=HEAP32[t+4>>2];g=f;t=a;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[g>>2]=HEAP32[t>>2];HEAP32[g+4>>2]=HEAP32[t+4>>2];g=11;break;case 8:g=9;break;case 9:n=n+1|0;g=5;break;case 10:g=h;t=i;p=_mrb_sym2name(h,i);_mrb_name_error(g,t,__str341461|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=p,tempInt));g=f;t=a;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[t>>2];HEAP32[g+4>>2]=HEAP32[t+4>>2];g=11;break;case 11:STACKTOP=d;return;default:assert(0,
"bad label: "+g)}}_mrb_struct_aset_id.X=1;
function _mrb_init_struct(f){var e;e=_mrb_define_class(f,__str131440|0,HEAP32[(f+72|0)>>2]);_mrb_define_class_method(f,e,__str141441|0,328,8192);_mrb_define_method(f,e,__str151442|0,302,524288);_mrb_define_method(f,e,__str161443|0,14,524288);_mrb_define_method(f,e,__str171444|0,278,1048576);_mrb_define_method(f,e,__str181445|0,574,0);_mrb_define_method(f,e,__str191446|0,150,8192);_mrb_define_method(f,e,__str201447|0,80,524288);_mrb_define_method(f,e,__str211448|0,152,0);_mrb_define_alias(f,e,__str221449|
0,__str211448|0);_mrb_define_method(f,e,__str231450|0,90,524288)}
function _mrb_struct_s_def(f,e,b){var c=STACKTOP;STACKTOP+=120;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(b=2;;)switch(b){case 2:var d,g=c,h=c+8,i,j,l,k=c+16,n=c+24,r=c+32,t=c+36,p=c+40,b=c+48,q=c+56,v=c+64,w=c+72,m=c+80,x=c+88,s=c+96,y=c+104,B=c+112;d=e;_mrb_nil_value1470(p);a=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[a>>2]=HEAP32[p>>2];HEAP32[a+4>>2]=HEAP32[p+4>>2];_mrb_nil_value1470(b);a=h;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[b>>2];HEAP32[a+4>>2]=HEAP32[b+4>>2];_mrb_get_args(d,__str321459|0,(tempInt=STACKTOP,STACKTOP+=12,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=r,HEAP32[tempInt+4>>2]=t,HEAP32[tempInt+8>>2]=k,tempInt));b=0==(HEAP32[t>>2]|0)?3:4;break;case 3:_mrb_ary_new(q,d);b=h;a=q;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=24;break;case 4:b=0<(HEAP32[t>>2]|0)?5:6;break;case 5:b=g;a=HEAP32[r>>2]|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=6;break;case 6:b=1<(HEAP32[t>>2]|0)?7:8;break;case 7:b=h;a=HEAP32[r>>2]+8|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=8;
break;case 8:b=15==(HEAP32[(h+4|0)>>2]&255|0)?9:14;break;case 9:b=0==(HEAP32[(g+4|0)>>2]&255|0)?10:11;break;case 10:b=0!=(HEAP32[(g|0)>>2]|0)?11:13;break;case 11:b=4==(HEAP32[(g+4|0)>>2]&255|0)?12:13;break;case 12:_mrb_ary_unshift(v,d,h,g);_mrb_nil_value1470(w);b=g;a=w;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=13;break;case 13:b=19;break;case 14:i=HEAP32[r>>2]+8|0;j=HEAP32[t>>2]-1|0;b=0==(HEAP32[(g+
4|0)>>2]&255|0)?15:16;break;case 15:b=0!=(HEAP32[(g|0)>>2]|0)?16:18;break;case 16:b=4==(HEAP32[(g+4|0)>>2]&255|0)?17:18;break;case 17:_mrb_nil_value1470(m);i=g;b=m;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[i>>2]=HEAP32[b>>2];HEAP32[i+4>>2]=HEAP32[b+4>>2];i=HEAP32[r>>2]|0;j=j+1|0;b=18;break;case 18:_mrb_ary_new_from_values(x,d,j,i);b=h;a=x;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[b>>2]=HEAP32[a>>
2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=19;break;case 19:l=0;b=20;break;case 20:b=(l|0)<(HEAP32[(HEAP32[(h|0)>>2]+12|0)>>2]|0)?21:23;break;case 21:b=_mrb_to_id(d,HEAP32[(HEAP32[(h|0)>>2]+20|0)>>2]+(l<<3)|0);a=HEAP32[(HEAP32[(h|0)>>2]+20|0)>>2]+(l<<3)|0;_mrb_symbol_value1469(s,b);b=a;a=s;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=22;break;case 22:l=l+1|0;b=20;break;case 23:b=24;break;case 24:b=d;a=_struct_class(d);
_make_struct(y,b,g,h,a);b=n;a=y;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=0==(HEAP32[(k+4|0)>>2]&255|0)?25:26;break;case 25:b=0!=(HEAP32[(k|0)>>2]|0)?26:27;break;case 26:_mrb_funcall(B,d,k,__str331460|0,1,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=n,tempInt));b=27;break;case 27:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[f>>2]=HEAP32[n>>2];HEAP32[f+4>>2]=HEAP32[n+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+b)}}_mrb_struct_s_def.X=1;
function _mrb_struct_equal(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h,i,j,l;d=e;_mrb_get_args(d,__str61433|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));a=0!=(_mrb_obj_equal(d,
b,g)|0)?3:4;break;case 3:_mrb_true_value1473(f);a=17;break;case 4:a=20!=(HEAP32[(g+4|0)>>2]&255|0)?5:6;break;case 5:_mrb_false_value1474(f);a=17;break;case 6:var a=_mrb_obj_class(d,b),k=_mrb_obj_class(d,g),a=(a|0)!=(k|0)?7:8;break;case 7:_mrb_false_value1474(f);a=17;break;case 8:a=(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)!=(HEAP32[(HEAP32[(g|0)>>2]+12|0)>>2]|0)?9:10;break;case 9:_mrb_bug(__str241451|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=0,tempInt));a=10;break;case 10:h=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2];i=HEAP32[(HEAP32[(g|0)>>2]+16|0)>>2];l=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2];j=0;a=11;break;case 11:a=(j|0)<(l|0)?12:16;break;case 12:a=0!=(_mrb_equal(d,h+(j<<3)|0,i+(j<<3)|0)|0)?14:13;break;case 13:_mrb_false_value1474(f);a=17;break;case 14:a=15;break;case 15:j=j+1|0;a=11;break;case 16:_mrb_true_value1473(f);a=17;break;case 17:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_struct_equal.X=1;
function _mrb_struct_members_m(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=_mrb_obj_class(e,b);_mrb_obj_value1468(c,b);_mrb_struct_s_members_m(f,e,c);STACKTOP=c}
function _mrb_struct_initialize_m(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c+4;_mrb_get_args(e,__str311458|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=a,tempInt));_mrb_struct_initialize_withArg(f,
e,HEAP32[a>>2],HEAP32[c>>2],b);STACKTOP=c}function _mrb_struct_inspect(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_inspect_struct(f,e,b,b,0);STACKTOP=c}
function _mrb_struct_eql(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h,i,j,l;d=e;_mrb_get_args(d,__str61433|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));a=0!=(_mrb_obj_equal(d,
b,g)|0)?3:4;break;case 3:_mrb_true_value1473(f);a=17;break;case 4:a=20!=(HEAP32[(g+4|0)>>2]&255|0)?5:6;break;case 5:_mrb_false_value1474(f);a=17;break;case 6:var a=_mrb_obj_class(d,b),k=_mrb_obj_class(d,g),a=(a|0)!=(k|0)?7:8;break;case 7:_mrb_false_value1474(f);a=17;break;case 8:a=(HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2]|0)!=(HEAP32[(HEAP32[(g|0)>>2]+12|0)>>2]|0)?9:10;break;case 9:_mrb_bug(__str241451|0,(tempInt=STACKTOP,STACKTOP+=1,STACKTOP=STACKTOP+3>>2<<2,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=0,tempInt));a=10;break;case 10:h=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2];i=HEAP32[(HEAP32[(g|0)>>2]+16|0)>>2];l=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2];j=0;a=11;break;case 11:a=(j|0)<(l|0)?12:16;break;case 12:a=0!=(_mrb_eql(d,h+(j<<3)|0,i+(j<<3)|0)|0)?14:13;break;case 13:_mrb_false_value1474(f);a=17;break;case 14:a=15;break;case 15:j=j+1|0;a=11;break;case 16:_mrb_true_value1473(f);a=17;break;case 17:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_struct_eql.X=1;
function _mrb_true_value1473(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]=HEAP32[b>>2]&-256|2;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_false_value1474(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _inspect_struct(f,e,b,c,a){var d=STACKTOP;STACKTOP+=132;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[g>>2];HEAP32[b+4>>2]=HEAP32[g+4>>2];g=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[g>>2];HEAP32[c+4>>2]=HEAP32[g+4>>2];for(c=2;;)switch(c){case 2:var h,i,j,l=d,k=d+8,n,r,t,p,q=d+16,v=
d+24,w=d+32,m=d+40,x,s=d+48,y=d+56,B=d+64,A=d+68,G=d+76,z=d+84,E=d+92,M=d+100,C=d+108,H=d+116,L=d+124;h=e;i=a;j=h;c=_mrb_obj_class(h,b);j=_mrb_class_name(j,c);_mrb_str_new(k,h,__str251452|0,9);c=0!=(j|0)?3:4;break;case 3:c=h;_mrb_str_new_cstr(q,h,j);_mrb_str_append(v,c,k,q);c=4;break;case 4:c=0!=(i|0)?5:6;break;case 5:_mrb_str_cat2(f,h,k,__str261453|0);c=20;break;case 6:_mrb_struct_members(w,h,b);n=l;r=w;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[n>>
2]=HEAP32[r>>2];HEAP32[n+4>>2]=HEAP32[r+4>>2];r=HEAP32[(HEAP32[(l|0)>>2]+20|0)>>2];n=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2];p=HEAP32[(HEAP32[(b|0)>>2]+12|0)>>2];t=0;c=7;break;case 7:c=(t|0)<(p|0)?8:19;break;case 8:c=0<(t|0)?9:10;break;case 9:_mrb_str_cat2(s,h,k,__str271454|0);c=13;break;case 10:c=0!=(j|0)?11:12;break;case 11:_mrb_str_cat2(y,h,k,__str281455|0);c=12;break;case 12:c=13;break;case 13:x=m;c=r+(t<<3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[x>>
2]=HEAP32[c>>2];HEAP32[x+4>>2]=HEAP32[c+4>>2];x=HEAP16[(m|0)>>1];c=0!=(_mrb_is_local_id(x)|0)?15:14;break;case 14:c=0!=(_mrb_is_const_id(x)|0)?15:16;break;case 15:c=_mrb_sym2name_len(h,x,B);g=h;_mrb_str_new(A,h,c,HEAP32[B>>2]);_mrb_str_append(G,g,k,A);c=17;break;case 16:c=h;_mrb_inspect(z,h,m);_mrb_str_append(E,c,k,z);c=17;break;case 17:_mrb_str_cat2(M,h,k,__str291456|0);c=h;_mrb_inspect(C,h,n+(t<<3)|0);_mrb_str_append(H,c,k,C);c=18;break;case 18:t=t+1|0;c=7;break;case 19:_mrb_str_cat2(L,h,k,__str301457|
0);c=f;g=k;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[g>>2];HEAP32[c+4>>2]=HEAP32[g+4>>2];c=20;break;case 20:STACKTOP=d;return;default:assert(0,"bad label: "+c)}}_inspect_struct.X=1;
function _mrb_struct_s_members_m(f,e,b){var c=STACKTOP;STACKTOP+=32;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+8,i,j=c+16;i=c+24;d=e;_mrb_struct_s_members(j,d,b);a=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[j>>
2];HEAP32[a+4>>2]=HEAP32[j+4>>2];_mrb_ary_new_capa(i,d,HEAP32[(HEAP32[(g|0)>>2]+12|0)>>2]);a=h;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[i>>2];HEAP32[a+4>>2]=HEAP32[i+4>>2];i=HEAP32[(HEAP32[(g|0)>>2]+20|0)>>2];g=i+(HEAP32[(HEAP32[(g|0)>>2]+12|0)>>2]<<3)|0;a=3;break;case 3:a=i>>>0<g>>>0?4:5;break;case 4:_mrb_ary_push(d,h,i);i=i+8|0;a=3;break;case 5:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[f>>2]=HEAP32[h>>2];HEAP32[f+4>>2]=HEAP32[h+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_struct_s_members_m.X=1;
function _num_members(f,e){var b=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b,g=b+8;c=b+16;var h=a=f;_mrb_obj_value1468(g,e);var i=_mrb_intern(a,__str1427|0);_struct_ivar_get(c,h,g,i);g=d;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[g>>2]=HEAP32[c>>2];HEAP32[g+4>>2]=HEAP32[c+4>>2];c=15==(HEAP32[(d+4|0)>>2]&255|0)?4:3;break;case 3:c=a;g=_mrb_class_obj_get(a,
__str11428|0);_mrb_raise(c,g,__str371464|0);c=4;break;case 4:return a=HEAP32[(HEAP32[(d|0)>>2]+12|0)>>2],STACKTOP=b,a;default:assert(0,"bad label: "+c)}}
function _mrb_struct_ref(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_struct_getmember(f,e,b,HEAP16[(HEAP32[(e+20|0)>>2]|0)>>1]);STACKTOP=c}
function _mrb_struct_set_m(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];_mrb_get_args(e,__str61433|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,tempInt));_mrb_struct_set(f,e,b,c);STACKTOP=c}
function _mrb_struct_set(f,e,b,c){var a=STACKTOP;STACKTOP+=28;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[d>>2];HEAP32[b+4>>2]=HEAP32[d+4>>2];d=c;c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];for(d=2;;)switch(d){case 2:var g,h,i=a,j;h=a+4;var l=a+12,k,n;n=a+
20;g=e;j=_mrb_sym2name_len(g,HEAP16[(HEAP32[(g+20|0)>>2]|0)>>1],i);j=_mrb_intern2(g,j,HEAP32[i>>2]-1|0);_mrb_struct_members(n,g,b);k=h;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[k>>2]=HEAP32[n>>2];HEAP32[k+4>>2]=HEAP32[n+4>>2];n=HEAP32[(HEAP32[(h|0)>>2]+20|0)>>2];HEAP32[i>>2]=HEAP32[(HEAP32[(h|0)>>2]+12|0)>>2];_mrb_struct_modify(b);k=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2];h=0;d=3;break;case 3:d=(h|0)<(HEAP32[i>>2]|0)?4:8;break;case 4:var d=l,r=n+(h<<
3)|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[d>>2]=HEAP32[r>>2];HEAP32[d+4>>2]=HEAP32[r+4>>2];d=(HEAP16[(l|0)>>1]<<16>>16|0)==(j<<16>>16|0)?5:6;break;case 5:var r=d=k+(h<<3)|0,t=c;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[r>>2]=HEAP32[t>>2];HEAP32[r+4>>2]=HEAP32[t+4>>2];r=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[r>>2]=HEAP32[d>>2];HEAP32[r+
4>>2]=HEAP32[d+4>>2];d=9;break;case 6:d=7;break;case 7:h=h+1|0;d=3;break;case 8:d=g;r=j;t=_mrb_sym2name(g,j);_mrb_name_error(d,r,__str401467|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=t,tempInt));_mrb_nil_value1470(f);d=9;break;case 9:STACKTOP=a;return;default:assert(0,"bad label: "+d)}}_mrb_struct_set.X=1;
function _mrb_struct_ref0(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];b=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2]|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=e}
function _mrb_struct_ref1(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];b=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2]+8|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=e}
function _mrb_struct_ref2(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];b=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2]+16|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=e}
function _mrb_struct_ref3(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];b=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2]+24|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=e}
function _mrb_struct_ref4(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];b=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2]+32|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=e}
function _mrb_struct_ref5(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];b=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2]+40|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=e}
function _mrb_struct_ref6(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];b=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2]+48|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=e}
function _mrb_struct_ref7(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];b=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2]+56|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=e}
function _mrb_struct_ref8(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];b=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2]+64|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=e}
function _mrb_struct_ref9(f,e,b){e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[c>>2];HEAP32[b+4>>2]=HEAP32[c+4>>2];b=HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2]+72|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=e}
function _mrb_time_update_datetime(f){var e;for(e=2;;)switch(e){case 2:var b,c,a;c=f;e=1==(HEAP32[(c+8|0)>>2]|0)?3:4;break;case 3:a=_gmtime_r(c|0,c+12|0);e=5;break;case 4:a=_localtime_r(c|0,c+12|0);e=5;break;case 5:e=0!=(a|0)?7:6;break;case 6:b=0;e=8;break;case 7:b=c;e=8;break;case 8:return b;default:assert(0,"bad label: "+e)}}
function _mrb_init_time(f){var e;e=_mrb_define_class(f,__str1475|0,HEAP32[(f+72|0)>>2]);HEAP32[e>>2]=HEAP32[e>>2]&2047|((HEAP32[e>>2]>>>11&2096896|25)&2097151)<<11;var b=_mrb_class_get(f,__str11476|0);_mrb_include_module(f,e,b);_mrb_define_class_method(f,e,__str21477|0,284,8192);_mrb_define_class_method(f,e,__str31478|0,320,622592);_mrb_define_class_method(f,e,__str41479|0,398,622592);_mrb_define_class_method(f,e,__str51480|0,398,622592);_mrb_define_class_method(f,e,__str61481|0,482,0);_mrb_define_class_method(f,
e,__str71482|0,320,622592);_mrb_define_method(f,e,__str81483|0,598,524288);_mrb_define_method(f,e,__str91484|0,456,524288);_mrb_define_method(f,e,__str101485|0,194,524288);_mrb_define_method(f,e,__str111486|0,446,524288);_mrb_define_method(f,e,__str121487|0,120,0);_mrb_define_method(f,e,__str131488|0,120,0);_mrb_define_method(f,e,__str141489|0,120,0);_mrb_define_method(f,e,__str151490|0,120,0);_mrb_define_method(f,e,__str161491|0,584,0);_mrb_define_method(f,e,__str171492|0,280,0);_mrb_define_method(f,
e,__str181493|0,400,0);_mrb_define_method(f,e,__str191494|0,50,0);_mrb_define_method(f,e,__str201495|0,400,0);_mrb_define_method(f,e,__str211496|0,218,0);_mrb_define_method(f,e,__str221497|0,110,0);_mrb_define_method(f,e,__str231498|0,114,0);_mrb_define_method(f,e,__str241499|0,386,0);_mrb_define_method(f,e,__str251500|0,288,0);_mrb_define_method(f,e,__str261501|0,42,0);_mrb_define_method(f,e,__str271502|0,8,0);_mrb_define_method(f,e,__str281503|0,8,0);_mrb_define_method(f,e,__str291504|0,350,0);
_mrb_define_method(f,e,__str301505|0,164,0);_mrb_define_method(f,e,__str311506|0,222,0);_mrb_define_method(f,e,__str321507|0,234,0);_mrb_define_method(f,e,__str71482|0,110,0);_mrb_define_method(f,e,__str331508|0,218,0);_mrb_define_method(f,e,__str341509|0,466,0);_mrb_define_method(f,e,__str351510|0,182,0);_mrb_define_method(f,e,__str361511|0,122,0);_mrb_define_method(f,e,__str371512|0,592,0);_mrb_define_method(f,e,__str381513|0,372,524288);_mrb_define_method(f,e,__str391514|0,34,524288)}
_mrb_init_time.X=1;
function _mrb_time_at(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];a=c+4;HEAPF32[a>>2]=0;_mrb_get_args(e,__str731548|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=a,tempInt));_mrb_time_make(f,e,
HEAP32[(b|0)>>2],HEAPF32[c>>2],HEAPF32[a>>2],2);STACKTOP=c}
function _mrb_time_gm(f,e,b){var c=STACKTOP;STACKTOP+=28;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];var a=c+4,d=c+8,g=c+12,h=c+16,i=c+20,j=c+24;HEAP32[c>>2]=0;HEAP32[a>>2]=1;HEAP32[d>>2]=1;HEAP32[g>>2]=0;HEAP32[h>>2]=0;HEAP32[i>>2]=0;HEAP32[j>>2]=0;_mrb_get_args(e,__str721547|0,(tempInt=STACKTOP,STACKTOP+=28,assert(STACKTOP<
STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=a,HEAP32[tempInt+8>>2]=d,HEAP32[tempInt+12>>2]=g,HEAP32[tempInt+16>>2]=h,HEAP32[tempInt+20>>2]=i,HEAP32[tempInt+24>>2]=j,tempInt));b=HEAP32[(b|0)>>2];a=_time_mktime(e,HEAP32[c>>2],HEAP32[a>>2],HEAP32[d>>2],HEAP32[g>>2],HEAP32[h>>2],HEAP32[i>>2],HEAP32[j>>2],1);_mrb_time_wrap(f,e,b,a);STACKTOP=c}
function _mrb_time_local(f,e,b){var c=STACKTOP;STACKTOP+=28;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];var a=c+4,d=c+8,g=c+12,h=c+16,i=c+20,j=c+24;HEAP32[c>>2]=0;HEAP32[a>>2]=1;HEAP32[d>>2]=1;HEAP32[g>>2]=0;HEAP32[h>>2]=0;HEAP32[i>>2]=0;HEAP32[j>>2]=0;_mrb_get_args(e,__str721547|0,(tempInt=STACKTOP,STACKTOP+=28,
assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=c,HEAP32[tempInt+4>>2]=a,HEAP32[tempInt+8>>2]=d,HEAP32[tempInt+12>>2]=g,HEAP32[tempInt+16>>2]=h,HEAP32[tempInt+20>>2]=i,HEAP32[tempInt+24>>2]=j,tempInt));b=HEAP32[(b|0)>>2];a=_time_mktime(e,HEAP32[c>>2],HEAP32[a>>2],HEAP32[d>>2],HEAP32[g>>2],HEAP32[h>>2],HEAP32[i>>2],HEAP32[j>>2],2);_mrb_time_wrap(f,e,b,a);STACKTOP=c}
function _mrb_time_now(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];b=HEAP32[(b|0)>>2];a=_current_mrb_time(e);_mrb_time_wrap(f,e,b,a);STACKTOP=c}
function _mrb_time_eq(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,a=c,g;d=e;_mrb_get_args(d,__str401515|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));g=_mrb_get_datatype(d,
b,_mrb_time_type);d=_mrb_get_datatype(d,a,_mrb_time_type);a=0!=(g|0)?3:4;break;case 3:a=0!=(d|0)?5:4;break;case 4:_mrb_false_value1555(f);a=9;break;case 5:a=(HEAP32[(g|0)>>2]|0)==(HEAP32[(d|0)>>2]|0)?6:8;break;case 6:a=(HEAP32[(g+4|0)>>2]|0)==(HEAP32[(d+4|0)>>2]|0)?7:8;break;case 7:_mrb_true_value1554(f);a=9;break;case 8:_mrb_false_value1555(f);a=9;break;case 9:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_time_cmp(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,a=c,g;d=e;_mrb_get_args(d,__str401515|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,tempInt));g=_mrb_get_datatype(d,
b,_mrb_time_type);d=_mrb_get_datatype(d,a,_mrb_time_type);a=0!=(g|0)?3:4;break;case 3:a=0!=(d|0)?5:4;break;case 4:_mrb_nil_value1551(f);a=16;break;case 5:a=(HEAP32[(g|0)>>2]|0)>(HEAP32[(d|0)>>2]|0)?6:7;break;case 6:_mrb_fixnum_value1552(f,1);a=16;break;case 7:a=(HEAP32[(g|0)>>2]|0)<(HEAP32[(d|0)>>2]|0)?8:9;break;case 8:_mrb_fixnum_value1552(f,-1);a=16;break;case 9:a=10;break;case 10:a=(HEAP32[(g+4|0)>>2]|0)>(HEAP32[(d+4|0)>>2]|0)?11:12;break;case 11:_mrb_fixnum_value1552(f,1);a=16;break;case 12:a=
(HEAP32[(g+4|0)>>2]|0)<(HEAP32[(d+4|0)>>2]|0)?13:14;break;case 13:_mrb_fixnum_value1552(f,-1);a=16;break;case 14:a=15;break;case 15:_mrb_fixnum_value1552(f,0);a=16;break;case 16:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_time_cmp.X=1;
function _mrb_time_plus(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h;d=e;_mrb_get_args(d,__str711546|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));h=_mrb_get_datatype(d,
b,_mrb_time_type);a=0!=(h|0)?4:3;break;case 3:_mrb_nil_value1551(f);a=5;break;case 4:var a=d,i=_mrb_obj_class(d,b);_mrb_time_make(f,a,i,(HEAP32[(h|0)>>2]|0)+HEAPF32[g>>2],HEAP32[(h+4|0)>>2]|0,HEAP32[(h+8|0)>>2]);a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_time_minus(f,e,b){var c=STACKTOP;STACKTOP+=12;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+4,i,j;d=e;_mrb_get_args(d,__str401515|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=h,tempInt));i=_mrb_get_datatype(d,
b,_mrb_time_type);a=0!=(i|0)?4:3;break;case 3:_mrb_nil_value1551(f);a=7;break;case 4:j=_mrb_get_datatype(d,h,_mrb_time_type);a=0!=(j|0)?5:6;break;case 5:HEAPF32[g>>2]=(HEAP32[(i|0)>>2]-HEAP32[(j|0)>>2]|0)+(HEAP32[(i+4|0)>>2]-HEAP32[(j+4|0)>>2]|0)/1E6;_mrb_float_value1553(f,HEAPF32[g>>2]);a=7;break;case 6:_mrb_get_args(d,__str711546|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));var a=d,l=_mrb_obj_class(d,b);_mrb_time_make(f,
a,l,(HEAP32[(i|0)>>2]|0)-HEAPF32[g>>2],HEAP32[(i+4|0)>>2]|0,HEAP32[(i+8|0)>>2]);a=7;break;case 7:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_time_minus.X=1;
function _mrb_time_asctime(f,e,b){var c=STACKTOP;STACKTOP+=256;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h,i=c;d=e;g=_mrb_get_datatype(d,b,_mrb_time_type);a=0!=(g|0)?4:3;break;case 3:_mrb_nil_value1551(f);a=5;break;case 4:h=g+12|0;var a=HEAP32[(_wday_names+(HEAP32[(h+24|0)>>
2]<<2)|0)>>2],j=HEAP32[(_mon_names+(HEAP32[(h+16|0)>>2]<<2)|0)>>2],l=HEAP32[(h+12|0)>>2],k=HEAP32[(h+8|0)>>2],n=HEAP32[(h+4|0)>>2],r=HEAP32[(h|0)>>2],t=1==(HEAP32[(g+8|0)>>2]|0)?__str501525|0:__str511526|0;h=HEAP32[(h+20|0)>>2]+1900|0;a=_snprintf(i|0,256,__str491524|0,(tempInt=STACKTOP,STACKTOP+=32,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,HEAP32[tempInt+4>>2]=j,HEAP32[tempInt+8>>2]=l,HEAP32[tempInt+12>>2]=k,HEAP32[tempInt+16>>2]=n,HEAP32[tempInt+20>>2]=r,HEAP32[tempInt+
24>>2]=t,HEAP32[tempInt+28>>2]=h,tempInt));_mrb_str_new(f,d,i|0,a);a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_time_asctime.X=1;
function _mrb_time_day(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=_mrb_get_datatype(e,b,_mrb_time_type);a=0!=(d|0)?4:3;break;case 3:_mrb_nil_value1551(f);a=5;break;case 4:_mrb_fixnum_value1552(f,HEAP32[((d+12|0)+12|0)>>2]);a=5;break;case 5:STACKTOP=c;return;
default:assert(0,"bad label: "+a)}}
function _mrb_time_dstp(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=_mrb_get_datatype(e,b,_mrb_time_type);a=0!=(d|0)?4:3;break;case 3:_mrb_nil_value1551(f);a=8;break;case 4:a=0!=(HEAP32[((d+12|0)+32|0)>>2]|0)?5:6;break;case 5:_mrb_true_value1554(f);a=7;break;
case 6:_mrb_false_value1555(f);a=7;break;case 7:a=8;break;case 8:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_time_getutc(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g;d=e;g=_mrb_get_datatype(d,b,_mrb_time_type);a=0!=(g|0)?4:3;break;case 3:var a=f,h=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[h>>
2];HEAP32[a+4>>2]=HEAP32[h+4>>2];a=5;break;case 4:var i=a=_mrb_malloc(d,56),h=g;assert(!0,"memcpy given 56 bytes to copy. Problem with quantum=1 corrections perhaps?");for(var h=h>>2,i=i>>2,j=h+14;h<j;h++,i++)HEAP32[i]=HEAP32[h];HEAP32[(a+8|0)>>2]=1;_mrb_time_update_datetime(a);h=d;i=_mrb_obj_class(d,b);_mrb_time_wrap(f,h,i,a);a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_time_getlocal(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g;d=e;g=_mrb_get_datatype(d,b,_mrb_time_type);a=0!=(g|0)?4:3;break;case 3:var a=f,h=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=
HEAP32[h>>2];HEAP32[a+4>>2]=HEAP32[h+4>>2];a=5;break;case 4:var i=a=_mrb_malloc(d,56),h=g;assert(!0,"memcpy given 56 bytes to copy. Problem with quantum=1 corrections perhaps?");for(var h=h>>2,i=i>>2,j=h+14;h<j;h++,i++)HEAP32[i]=HEAP32[h];HEAP32[(a+8|0)>>2]=2;_mrb_time_update_datetime(a);h=d;i=_mrb_obj_class(d,b);_mrb_time_wrap(f,h,i,a);a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_time_utcp(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=_mrb_get_datatype(e,b,_mrb_time_type);a=0!=(d|0)?4:3;break;case 3:_mrb_nil_value1551(f);a=8;break;case 4:a=1==(HEAP32[(d+8|0)>>2]|0)?5:6;break;case 5:_mrb_true_value1554(f);a=7;break;case 6:_mrb_false_value1555(f);
a=7;break;case 7:a=8;break;case 8:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_time_utc(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=_mrb_get_datatype(e,b,_mrb_time_type);a=0!=(d|0)?3:4;break;case 3:HEAP32[(d+8|0)>>2]=1;_mrb_time_update_datetime(d);a=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_time_hour(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=_mrb_get_datatype(e,b,_mrb_time_type);a=0!=(d|0)?4:3;break;case 3:_mrb_nil_value1551(f);a=5;break;case 4:_mrb_fixnum_value1552(f,HEAP32[((d+12|0)+8|0)>>2]);a=5;break;case 5:STACKTOP=c;return;
default:assert(0,"bad label: "+a)}}
function _mrb_time_localtime(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=_mrb_get_datatype(e,b,_mrb_time_type);a=0!=(d|0)?4:3;break;case 3:var a=f,g=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[g>>
2];HEAP32[a+4>>2]=HEAP32[g+4>>2];a=5;break;case 4:HEAP32[(d+8|0)>>2]=2;_mrb_time_update_datetime(d);a=f;g=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[g>>2];HEAP32[a+4>>2]=HEAP32[g+4>>2];a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_time_mday(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=_mrb_get_datatype(e,b,_mrb_time_type);a=0!=(d|0)?4:3;break;case 3:_mrb_nil_value1551(f);a=5;break;case 4:_mrb_fixnum_value1552(f,HEAP32[((d+12|0)+12|0)>>2]);a=5;break;case 5:STACKTOP=c;return;
default:assert(0,"bad label: "+a)}}
function _mrb_time_min(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=_mrb_get_datatype(e,b,_mrb_time_type);a=0!=(d|0)?4:3;break;case 3:_mrb_nil_value1551(f);a=5;break;case 4:_mrb_fixnum_value1552(f,HEAP32[((d+12|0)+4|0)>>2]);a=5;break;case 5:STACKTOP=c;return;
default:assert(0,"bad label: "+a)}}
function _mrb_time_mon(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=_mrb_get_datatype(e,b,_mrb_time_type);a=0!=(d|0)?4:3;break;case 3:_mrb_nil_value1551(f);a=5;break;case 4:_mrb_fixnum_value1552(f,HEAP32[((d+12|0)+16|0)>>2]+1|0);a=5;break;case 5:STACKTOP=c;
return;default:assert(0,"bad label: "+a)}}
function _mrb_time_sec(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=_mrb_get_datatype(e,b,_mrb_time_type);a=0!=(d|0)?4:3;break;case 3:_mrb_nil_value1551(f);a=5;break;case 4:_mrb_fixnum_value1552(f,HEAP32[(d+12|0)>>2]);a=5;break;case 5:STACKTOP=c;return;default:assert(0,
"bad label: "+a)}}
function _mrb_time_to_i(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=_mrb_get_datatype(e,b,_mrb_time_type);a=0!=(d|0)?4:3;break;case 3:_mrb_nil_value1551(f);a=5;break;case 4:_mrb_fixnum_value1552(f,HEAP32[(d|0)>>2]);a=5;break;case 5:STACKTOP=c;return;default:assert(0,
"bad label: "+a)}}
function _mrb_time_to_f(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=_mrb_get_datatype(e,b,_mrb_time_type);a=0!=(d|0)?4:3;break;case 3:_mrb_nil_value1551(f);a=5;break;case 4:_mrb_float_value1553(f,(HEAP32[(d|0)>>2]|0)+(HEAP32[(d+4|0)>>2]|0)/1E6);a=5;break;
case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_time_usec(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=_mrb_get_datatype(e,b,_mrb_time_type);a=0!=(d|0)?4:3;break;case 3:_mrb_nil_value1551(f);a=5;break;case 4:_mrb_fixnum_value1552(f,HEAP32[(d+4|0)>>2]);a=5;break;case 5:STACKTOP=c;return;default:assert(0,
"bad label: "+a)}}
function _mrb_time_wday(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=_mrb_get_datatype(e,b,_mrb_time_type);a=0!=(d|0)?4:3;break;case 3:_mrb_nil_value1551(f);a=5;break;case 4:_mrb_fixnum_value1552(f,HEAP32[((d+12|0)+24|0)>>2]);a=5;break;case 5:STACKTOP=c;return;
default:assert(0,"bad label: "+a)}}
function _mrb_time_yday(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=_mrb_check_datatype(e,b,_mrb_time_type);a=0!=(d|0)?4:3;break;case 3:_mrb_nil_value1551(f);a=5;break;case 4:_mrb_fixnum_value1552(f,HEAP32[((d+12|0)+28|0)>>2]+1|0);a=5;break;case 5:STACKTOP=
c;return;default:assert(0,"bad label: "+a)}}function _is_leapyear(f){var e;for(e=2;;)switch(e){case 2:var b;b=f;if(0==((b>>>0)%4|0))e=3;else{var c=0;e=6}break;case 3:if(0!=((b>>>0)%100|0)){var a=1;e=5}else e=4;break;case 4:a=0==((b>>>0)%400|0);e=5;break;case 5:c=a;e=6;break;case 6:return c&1;default:assert(0,"bad label: "+e)}}
function _mrb_get_datatype(f,e,b){f=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a,d;d=b;c=8>=(HEAP32[(e+4|0)>>2]&255|0)?4:3;break;case 3:c=25!=(HEAP32[(e+4|0)>>2]&255|0)?4:5;break;case 4:a=0;c=8;break;case 5:c=(HEAP32[(HEAP32[(e|0)>>2]+16|0)>>2]|0)!=(d|0)?6:7;break;case 6:a=
0;c=8;break;case 7:a=HEAP32[(HEAP32[(e|0)>>2]+20|0)>>2];c=8;break;case 8:return e=a,STACKTOP=f,e;default:assert(0,"bad label: "+c)}}
function _mrb_time_year(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d;d=_mrb_get_datatype(e,b,_mrb_time_type);a=0!=(d|0)?4:3;break;case 3:_mrb_nil_value1551(f);a=5;break;case 4:_mrb_fixnum_value1552(f,HEAP32[((d+12|0)+20|0)>>2]+1900|0);a=5;break;case 5:STACKTOP=
c;return;default:assert(0,"bad label: "+a)}}
function _mrb_time_zone(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g;d=e;g=_mrb_get_datatype(d,b,_mrb_time_type);a=0!=(g|0)?4:3;break;case 3:_mrb_nil_value1551(f);a=9;break;case 4:a=0>=HEAP32[(g+8|0)>>2]>>>0?5:6;break;case 5:_mrb_nil_value1551(f);a=9;break;
case 6:a=3<=HEAP32[(g+8|0)>>2]>>>0?7:8;break;case 7:_mrb_nil_value1551(f);a=9;break;case 8:_mrb_str_new_cstr(f,d,HEAP32[(_timezone_names+(HEAP32[(g+8|0)>>2]<<2)|0)>>2]);a=9;break;case 9:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_time_initialize(f,e,b){var c=STACKTOP;STACKTOP+=28;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c,h=c+4,i=c+8,j=c+12,l=c+16,k=c+20,n=c+24,r;d=e;HEAP32[g>>2]=0;HEAP32[h>>2]=1;HEAP32[i>>2]=1;HEAP32[j>>2]=0;HEAP32[l>>2]=0;HEAP32[k>>2]=0;HEAP32[n>>2]=0;r=_mrb_get_datatype(d,
b,_mrb_time_type);a=0!=(r|0)?3:4;break;case 3:_mrb_time_free(d,r);a=4;break;case 4:a=_mrb_get_args(d,__str431518|0,(tempInt=STACKTOP,STACKTOP+=28,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,HEAP32[tempInt+4>>2]=h,HEAP32[tempInt+8>>2]=i,HEAP32[tempInt+12>>2]=j,HEAP32[tempInt+16>>2]=l,HEAP32[tempInt+20>>2]=k,HEAP32[tempInt+24>>2]=n,tempInt));a=0==(a|0)?5:6;break;case 5:r=_current_mrb_time(d);a=7;break;case 6:r=_time_mktime(d,HEAP32[g>>2],HEAP32[h>>2],HEAP32[i>>2],HEAP32[j>>
2],HEAP32[l>>2],HEAP32[k>>2],HEAP32[n>>2],2);a=7;break;case 7:HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2]=r;HEAP32[(HEAP32[(b|0)>>2]+16|0)>>2]=_mrb_time_type;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];STACKTOP=c;return;default:assert(0,"bad label: "+a)}}_mrb_time_initialize.X=1;
function _mrb_time_initialize_copy(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=b,b=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[b>>2]=HEAP32[a>>2];HEAP32[b+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g=c;d=e;_mrb_get_args(d,__str401515|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));a=0!=(_mrb_obj_equal(d,
b,g)|0)?3:4;break;case 3:var a=f,h=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[h>>2];HEAP32[a+4>>2]=HEAP32[h+4>>2];a=9;break;case 4:a=d;h=_mrb_obj_class(d,b);a=0!=(_mrb_obj_is_instance_of(a,g,h)|0)?6:5;break;case 5:a=d;h=_mrb_class_obj_get(d,__str411516|0);_mrb_raise(a,h,__str421517|0);a=6;break;case 6:a=0!=(HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2]|0)?8:7;break;case 7:a=_mrb_malloc(d,56);HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2]=a;HEAP32[(HEAP32[(b|
0)>>2]+16|0)>>2]=_mrb_time_type;a=8;break;case 8:h=HEAP32[(HEAP32[(b|0)>>2]+20|0)>>2];a=HEAP32[(HEAP32[(g|0)>>2]+20|0)>>2];assert(!0,"memcpy given 56 bytes to copy. Problem with quantum=1 corrections perhaps?");for(var a=a>>2,h=h>>2,i=a+14;a<i;a++,h++)HEAP32[h]=HEAP32[a];a=f;h=b;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[h>>2];HEAP32[a+4>>2]=HEAP32[h+4>>2];a=9;break;case 9:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
_mrb_time_initialize_copy.X=1;function _mrb_time_free(f,e){_mrb_free(f,e)}function _current_mrb_time(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");f=_mrb_malloc(f,56);_gettimeofday(e,0);HEAP32[(f|0)>>2]=HEAP32[(e|0)>>2];HEAP32[(f+4|0)>>2]=HEAP32[(e+4|0)>>2];HEAP32[(f+8|0)>>2]=2;_mrb_time_update_datetime(f);STACKTOP=e;return f}
function _time_mktime(f,e,b,c,a,d,g,h,i){var j=STACKTOP;STACKTOP+=44;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var l;for(l=2;;)switch(l){case 2:var k,n,r,t,p,q,v,w,m,x=j;k=f;l=e;n=b;r=c;t=a;p=d;q=g;v=h;w=i;for(var s=x>>2,y=s+11;s<y;s++)HEAP32[s]=0;HEAP32[(x+20|0)>>2]=l-1900|0;HEAP32[(x+16|0)>>2]=n-1|0;HEAP32[(x+12|0)>>2]=r;HEAP32[(x+8|0)>>2]=t;HEAP32[(x+4|0)>>2]=p;HEAP32[(x|0)>>2]=q;HEAP32[(x+32|0)>>2]=-1;l=1==(w|0)?3:4;break;case 3:m=_my_timgm(x);l=
5;break;case 4:m=_mktime(x);l=5;break;case 5:l=0>(m|0)?6:7;break;case 6:l=k;n=_mrb_class_obj_get(k,__str441519|0);_mrb_raise(l,n,__str451520|0);l=7;break;case 7:return f=_mrb_time_alloc(k,m|0,v|0,w),STACKTOP=j,f;default:assert(0,"bad label: "+l)}}_time_mktime.X=1;
function _my_timgm(f){var e;for(e=2;;)switch(e){case 2:var b,c,a,d;b=f;c=0;a=_is_leapyear(HEAP32[(b+20|0)>>2]+1900|0);d=_my_timgm_ndays+48*a|0;a=70;e=3;break;case 3:e=(a|0)<(HEAP32[(b+20|0)>>2]|0)?4:6;break;case 4:e=0!=(_is_leapyear(a+1900|0)|0)?31622400:31536E3;c=c+e|0;e=5;break;case 5:a=a+1|0;e=3;break;case 6:a=0;e=7;break;case 7:e=(a|0)<(HEAP32[(b+16|0)>>2]|0)?8:10;break;case 8:c=c+(60*(60*(24*HEAP32[(d+(a<<2)|0)>>2]|0)|0)|0)|0;e=9;break;case 9:a=a+1|0;e=7;break;case 10:return c=c+(60*(60*(24*
(HEAP32[(b+12|0)>>2]-1|0)|0)|0)|0)|0,c=c+(60*(60*HEAP32[(b+8|0)>>2]|0)|0)|0,c=c+(60*HEAP32[(b+4|0)>>2]|0)|0,c=c+HEAP32[(b|0)>>2]|0;default:assert(0,"bad label: "+e)}}_my_timgm.X=1;
function _mrb_time_alloc(f,e,b,c){var a;for(a=2;;)switch(a){case 2:var d,g,h;d=f;a=e;g=b;h=c;d=_mrb_malloc(d,56);HEAP32[(d|0)>>2]=a&-1;HEAP32[(d+4|0)>>2]=1E6*(a-(HEAP32[(d|0)>>2]|0))+g&-1;a=3;break;case 3:a=0>(HEAP32[(d+4|0)>>2]|0)?4:5;break;case 4:a=d|0;HEAP32[a>>2]=HEAP32[a>>2]-1|0;a=d+4|0;HEAP32[a>>2]=(HEAP32[a>>2]|0)+1E6&-1;a=3;break;case 5:a=6;break;case 6:a=1E6<(HEAP32[(d+4|0)>>2]|0)?7:8;break;case 7:a=d|0;HEAP32[a>>2]=HEAP32[a>>2]+1|0;a=d+4|0;HEAP32[a>>2]=(HEAP32[a>>2]|0)-1E6&-1;a=6;break;
case 8:return HEAP32[(d+8|0)>>2]=h,_mrb_time_update_datetime(d),d;default:assert(0,"bad label: "+a)}}_mrb_time_alloc.X=1;
function _mrb_nil_value1551(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_fixnum_value1552(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|3;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_float_value1553(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|6;HEAPF32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_true_value1554(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]=HEAP32[b>>2]&-256|2;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_false_value1555(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=1;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_time_wrap(f,e,b,c){e=_mrb_data_object_alloc(e,b,c,_mrb_time_type);_mrb_obj_value1556(f,e)}
function _mrb_obj_value1556(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b,g;g=a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|HEAP32[g>>2]&255;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+
c)}}function _mrb_time_make(f,e,b,c,a,d){c=_mrb_time_alloc(e,c,a,d);_mrb_time_wrap(f,e,b,c)}function _mrb_init_mrblib(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");_mrb_load_irep(e,f,_mrblib_irep|0);STACKTOP=e}function _mrb_init_comparable(f){_mrb_define_module(f,__str1559|0)}function _mrb_init_enumerable(f){_mrb_define_module(f,__str1562|0)}
function _mrb_data_object_alloc(f,e,b,c){f=_mrb_obj_alloc(f,25,e);HEAP32[(f+20|0)>>2]=b;HEAP32[(f+16|0)>>2]=c;return f}
function _mrb_check_datatype(f,e,b){var c=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[a>>2];HEAP32[e+4>>2]=HEAP32[a+4>>2];for(a=2;;)switch(a){case 2:var d,g,h;d=f;g=b;a=8>=(HEAP32[(e+4|0)>>2]&255|0)?4:3;break;case 3:a=25!=(HEAP32[(e+4|0)>>2]&255|0)?4:5;break;case 4:_mrb_check_type(d,e,25);a=5;break;case 5:a=(HEAP32[(HEAP32[(e|0)>>2]+16|0)>>
2]|0)!=(g|0)?6:7;break;case 6:h=HEAP32[(HEAP32[(HEAP32[(e|0)>>2]+16|0)>>2]|0)>>2];var a=d,i=_mrb_class_obj_get(d,__str1565|0),j=HEAP32[(g|0)>>2];_mrb_raisef(a,i,_mrb_check_datatype_mesg|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=h,HEAP32[tempInt+4>>2]=j,tempInt));a=7;break;case 7:return f=HEAP32[(HEAP32[(e|0)>>2]+20|0)>>2],STACKTOP=c,f;default:assert(0,"bad label: "+a)}}_mrb_check_datatype.X=1;
function _float_id(f){var e=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e,a,d;HEAPF32[c>>2]=f;a=4;d=0;b=3;break;case 3:b=a;a=b-1|0;b=0!=(b|0)?4:5;break;case 4:d=(65599*d|0)+(HEAP8[c]<<24>>24)|0;c=c+1|0;b=3;break;case 5:return f=d=d+(d>>5)|0,STACKTOP=e,f;default:assert(0,"bad label: "+b)}}
function _bin_to_uint32(f){return(HEAP8[f|0]&255)<<24|(HEAP8[f+1|0]&255)<<16|(HEAP8[f+2|0]&255)<<8|HEAP8[f+3|0]&255}function _hex_to_bin16(f,e){HEAP8[f|0]=(HEAP8[_hex2bin+(HEAP8[e|0]&255)|0]<<24>>24<<4|HEAP8[_hex2bin+(HEAP8[e+1|0]&255)|0]<<24>>24)&255;HEAP8[f+1|0]=(HEAP8[_hex2bin+(HEAP8[e+2|0]&255)|0]<<24>>24<<4|HEAP8[_hex2bin+(HEAP8[e+3|0]&255)|0]<<24>>24)&255;return 2}function _bin_to_uint16(f){return((HEAP8[f|0]&255)<<8|HEAP8[f+1|0]&255)&65535}
function _hex_to_bin32(f,e){HEAP8[f|0]=(HEAP8[_hex2bin+(HEAP8[e|0]&255)|0]<<24>>24<<4|HEAP8[_hex2bin+(HEAP8[e+1|0]&255)|0]<<24>>24)&255;HEAP8[f+1|0]=(HEAP8[_hex2bin+(HEAP8[e+2|0]&255)|0]<<24>>24<<4|HEAP8[_hex2bin+(HEAP8[e+3|0]&255)|0]<<24>>24)&255;HEAP8[f+2|0]=(HEAP8[_hex2bin+(HEAP8[e+4|0]&255)|0]<<24>>24<<4|HEAP8[_hex2bin+(HEAP8[e+5|0]&255)|0]<<24>>24)&255;HEAP8[f+3|0]=(HEAP8[_hex2bin+(HEAP8[e+6|0]&255)|0]<<24>>24<<4|HEAP8[_hex2bin+(HEAP8[e+7|0]&255)|0]<<24>>24)&255;return 4}_hex_to_bin32.X=1;
function _mrb_lastline_get(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a=b;c=b+4;_mrb_get_args(e,__str11566|0,(tempInt=STACKTOP,STACKTOP+=8,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=a,HEAP32[tempInt+4>>2]=c,tempInt));c=1>(HEAP32[c>>2]|0)?3:4;break;case 3:_mrb_nil_value1574(f);c=5;break;case 4:c=f;var d=HEAP32[a>>2]|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[c>>2]=HEAP32[d>>2];HEAP32[c+4>>2]=HEAP32[d+4>>2];c=5;break;case 5:STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_nil_value1574(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_exec_recursive(f,e,b,c,a){var d=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var g=c,c=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[c>>2]=HEAP32[g>>2];HEAP32[c+4>>2]=HEAP32[g+4>>2];FUNCTION_TABLE[b](f,e,c,a,0);STACKTOP=d}
function _mrb_to_id(f,e){var b=STACKTOP;STACKTOP+=32;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c=e,e=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[e>>2]=HEAP32[c>>2];HEAP32[e+4>>2]=HEAP32[c+4>>2];for(c=2;;)switch(c){case 2:var a,d=b,g=b+8,h=b+16,i=b+24;a=f;c=HEAP32[(e+4|0)>>2]&255;c=17==(c|0)?7:4==(c|0)?8:3;break;case 3:_mrb_check_string_type(g,a,e);var c=d,j=g;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP32[c>>2]=HEAP32[j>>2];HEAP32[c+4>>2]=HEAP32[j+4>>2];c=0==(HEAP32[(d+4|0)>>2]&255|0)?4:6;break;case 4:c=0!=(HEAP32[(d|0)>>2]|0)?6:5;break;case 5:_mrb_inspect(h,a,e);c=d;j=h;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[j>>2];HEAP32[c+4>>2]=HEAP32[j+4>>2];var c=a,j=_mrb_class_obj_get(a,__str1565|0),l=HEAP32[(HEAP32[(d|0)>>2]+20|0)>>2];_mrb_raisef(c,j,__str21567|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),
HEAP32[tempInt>>2]=l,tempInt));c=6;break;case 6:c=e;j=d;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[j>>2];HEAP32[c+4>>2]=HEAP32[j+4>>2];c=7;break;case 7:_mrb_str_intern(i,a,e);c=e;j=i;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[c>>2]=HEAP32[j>>2];HEAP32[c+4>>2]=HEAP32[j+4>>2];c=8;break;case 8:return a=HEAP16[(e|0)>>1],STACKTOP=b,a;default:assert(0,"bad label: "+c)}}_mrb_to_id.X=1;
function _mrb_block_proc(f){_mrb_nil_value1574(f)}
function _mrb_obj_id(f){var e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b=f,f=STACKTOP;STACKTOP+=8;assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack");HEAP32[f>>2]=HEAP32[b>>2];HEAP32[f+4>>2]=HEAP32[b+4>>2];for(b=2;;)switch(b){case 2:var c,a,b=a=HEAP32[(f+4|0)>>2]&255,b=1==(b|0)||5==(b|0)?3:0==(b|0)?4:2==(b|0)?8:4==(b|0)?9:3==(b|0)?10:6==(b|0)?11:17==(b|0)||9==(b|0)||10==(b|0)||11==(b|0)||12==(b|0)||13==(b|0)||14==(b|0)||15==(b|0)||
16==(b|0)||18==(b|0)||19==(b|0)||20==(b|0)||21==(b|0)||22==(b|0)||23==(b|0)||25==(b|0)?12:13;break;case 3:c=0^a;b=14;break;case 4:b=0==(HEAP32[(f+4|0)>>2]&255|0)?5:7;break;case 5:b=0!=(HEAP32[(f|0)>>2]|0)?7:6;break;case 6:c=1^a;b=14;break;case 7:c=0^a;b=14;break;case 8:c=1^a;b=14;break;case 9:c=HEAP16[(f|0)>>1]<<16>>16^a;b=14;break;case 10:c=_float_id(HEAP32[(f|0)>>2]|0)^6;b=14;break;case 11:c=_float_id(HEAPF32[(f|0)>>2])^a;b=14;break;case 12:b=13;break;case 13:c=HEAP32[(f|0)>>2]^a;b=14;break;case 14:return f=
c,STACKTOP=e,f;default:assert(0,"bad label: "+b)}}_mrb_obj_id.X=1;
function _mrb_read_irep_file(f,e){var b=STACKTOP;STACKTOP+=336;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d,g,h,i,j,l=b,k=b+4,n=b+12,r,t,p=b+16,q=b+68,v;d=f;g=e;t=HEAP32[l>>2]=0;c=q>>2;for(var w=c+67;c<w;c++)HEAP32[c]=0;c=0==(d|0)?4:3;break;case 3:c=0==(g|0)?4:5;break;case 4:a=-7;c=23;break;case 5:HEAP32[(q|0)>>2]=g;v=q;h=c=_load_rite_header(g,p,n|0);c=0!=(c|0)?6:7;break;case 6:a=h;c=23;break;case 7:j=_bin_to_uint32(p+
36|0)+52|0;t=c=_mrb_malloc(d,j);c=0==(c|0)?8:9;break;case 8:a=-1;c=23;break;case 9:r=t;_memset(r,0,j,1);i=r;j=p;assert(!0,"memcpy given 52 bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(i,j,52,1);r=r+52|0;i=_hex_to_bin16(r,n|0)&65535;r=r+i|0;j=_bin_to_uint16(p+40|0)&65535;i=0;c=10;break;case 10:c=i>>>0<j>>>0?11:15;break;case 11:_rite_fgets(v,k|0,8,1);h=_hex_to_bin32(r,k|0)&65535;r=r+h|0;h=c=_load_rite_irep_record(d,v,r,l);c=0!=(c|0)?12:13;break;case 12:c=20;break;case 13:r=r+
HEAP32[l>>2]|0;c=14;break;case 14:i=i+1|0;c=10;break;case 15:_rite_fgets(v,k|0,8,1);_hex_to_bin32(r,k|0);c=0!=(_hex_to_uint32(k|0)|0)?16:17;break;case 16:h=-6;c=20;break;case 17:c=0==(h|0)?18:19;break;case 18:h=_mrb_read_irep(d,t);c=19;break;case 19:c=20;break;case 20:c=0!=(t|0)?21:22;break;case 21:_mrb_free(d,t);c=22;break;case 22:a=h;c=23;break;case 23:return STACKTOP=b,a;default:assert(0,"bad label: "+c)}}_mrb_read_irep_file.X=1;
function _load_rite_header(f,e,b){var c=STACKTOP;STACKTOP+=64;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h,i=c;a=f;g=e;h=b;a=64>_fread(i,1,64,a)>>>0?3:4;break;case 3:d=-3;a=9;break;case 4:a=g|0;var j=i|0;assert(!0,"memcpy given 4 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP8[a]=HEAP8[j];HEAP8[a+1]=HEAP8[j+1];HEAP8[a+2]=HEAP8[j+2];HEAP8[a+3]=HEAP8[j+3];a=0!=(_memcmp(g|0,__str11580|0,4)|0)?5:
6;break;case 5:d=-5;a=9;break;case 6:a=g+4|0;j=i+4|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP8[a]=HEAP8[j];HEAP8[a+1]=HEAP8[j+1];HEAP8[a+2]=HEAP8[j+2];HEAP8[a+3]=HEAP8[j+3];HEAP8[a+4]=HEAP8[j+4];HEAP8[a+5]=HEAP8[j+5];HEAP8[a+6]=HEAP8[j+6];HEAP8[a+7]=HEAP8[j+7];a=0!=(_memcmp(g+4|0,__str21581|0,8)|0)?7:8;break;case 7:d=-5;a=9;break;case 8:d=g+12|0;a=i+12|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP8[d]=
HEAP8[a];HEAP8[d+1]=HEAP8[a+1];HEAP8[d+2]=HEAP8[a+2];HEAP8[d+3]=HEAP8[a+3];HEAP8[d+4]=HEAP8[a+4];HEAP8[d+5]=HEAP8[a+5];HEAP8[d+6]=HEAP8[a+6];HEAP8[d+7]=HEAP8[a+7];d=g+20|0;a=i+20|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP8[d]=HEAP8[a];HEAP8[d+1]=HEAP8[a+1];HEAP8[d+2]=HEAP8[a+2];HEAP8[d+3]=HEAP8[a+3];HEAP8[d+4]=HEAP8[a+4];HEAP8[d+5]=HEAP8[a+5];HEAP8[d+6]=HEAP8[a+6];HEAP8[d+7]=HEAP8[a+7];d=g+28|0;a=i+28|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");
HEAP8[d]=HEAP8[a];HEAP8[d+1]=HEAP8[a+1];HEAP8[d+2]=HEAP8[a+2];HEAP8[d+3]=HEAP8[a+3];HEAP8[d+4]=HEAP8[a+4];HEAP8[d+5]=HEAP8[a+5];HEAP8[d+6]=HEAP8[a+6];HEAP8[d+7]=HEAP8[a+7];_hex_to_bin32(g+36|0,i+36|0);_hex_to_bin16(g+40|0,i+44|0);_hex_to_bin16(g+42|0,i+48|0);d=g+44|0;a=i+52|0;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP8[d]=HEAP8[a];HEAP8[d+1]=HEAP8[a+1];HEAP8[d+2]=HEAP8[a+2];HEAP8[d+3]=HEAP8[a+3];HEAP8[d+4]=HEAP8[a+4];HEAP8[d+5]=HEAP8[a+5];HEAP8[d+6]=
HEAP8[a+6];HEAP8[d+7]=HEAP8[a+7];d=h;a=i+60|0;assert(!0,"memcpy given 4 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP8[d]=HEAP8[a];HEAP8[d+1]=HEAP8[a+1];HEAP8[d+2]=HEAP8[a+2];HEAP8[d+3]=HEAP8[a+3];d=0;a=9;break;case 9:return f=d,STACKTOP=c,f;default:assert(0,"bad label: "+a)}}_load_rite_header.X=1;
function _rite_fgets(f,e,b,c){var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j,l;g=f;h=e;i=b;j=c;l=0;a=3;break;case 3:a=(l|0)<(i|0)?4:8;break;case 4:a=_rite_fgetc(g,j);HEAP8[h+l|0]=a;a=0==(a&255|0)?5:6;break;case 5:d=0;a=9;break;case 6:a=7;break;case 7:l=l+1|0;a=3;break;case 8:d=h;a=9;break;case 9:return d;default:assert(0,"bad label: "+a)}}
function _hex_to_uint32(f){return HEAP8[_hex2bin+(HEAP8[f|0]&255)|0]<<24>>24<<28|HEAP8[_hex2bin+(HEAP8[f+1|0]&255)|0]<<24>>24<<24|HEAP8[_hex2bin+(HEAP8[f+2|0]&255)|0]<<24>>24<<20|HEAP8[_hex2bin+(HEAP8[f+3|0]&255)|0]<<24>>24<<16|HEAP8[_hex2bin+(HEAP8[f+4|0]&255)|0]<<24>>24<<12|HEAP8[_hex2bin+(HEAP8[f+5|0]&255)|0]<<24>>24<<8|HEAP8[_hex2bin+(HEAP8[f+6|0]&255)|0]<<24>>24<<4|HEAP8[_hex2bin+(HEAP8[f+7|0]&255)|0]<<24>>24}_hex_to_uint32.X=1;
function _load_rite_irep_record(f,e,b,c){var a=STACKTOP;STACKTOP+=24;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var d;for(d=2;;)switch(d){case 2:var g,h,i,j,l,k,n,r,t,p=a,q=a+4,v=a+8,w=a+12,m=a+20,x,s,y;h=f;i=e;j=b;l=c;y=128;s=d=_mrb_malloc(h,y&65535);d=0==(d|0)?3:4;break;case 3:d=29;break;case 4:x=j;d=_rite_fgetc(i,1);HEAP8[j]=d;d=83!=(HEAP8[j]&255|0)?5:6;break;case 5:g=-6;d=32;break;case 6:j=j+1|0;k=_rite_fgetc(i,1);HEAP8[j]=k;j=j+1|0;_rite_fgets(i,
v|0,4,1);k=_hex_to_bin16(j,v|0)&65535;j=j+k|0;_rite_fgets(i,v|0,4,1);k=_hex_to_bin16(j,v|0)&65535;j=j+k|0;_rite_fgets(i,v|0,4,1);k=_hex_to_uint16(v|0);_rite_fgets(i,m|0,4,1);_memset(s,0,y&65535,1);_rite_fgets(i,s,(k&65535)-4|0,1);_hex_to_str(s,(j+2|0)+2|0,p);k=_uint16_to_bin(((HEAP16[p>>1]&65535)+2|0)&65535,j);j=j+k|0;k=_hex_to_bin16(j,m|0)&65535;j=j+k|0;j=j+(HEAP16[p>>1]&65535)|0;_rite_fgets(i,w|0,8,1);k=_hex_to_bin32(j,w|0)&65535;j=j+k|0;n=_hex_to_uint32(w|0);k=0;d=7;break;case 7:d=k>>>0<n>>>0?
8:10;break;case 8:_rite_fgets(i,w|0,8,1);d=_hex_to_bin32(j,w|0)&65535;j=j+d|0;d=9;break;case 9:k=k+1|0;d=7;break;case 10:_rite_fgets(i,m|0,4,1);k=_hex_to_bin16(j,m|0)&65535;j=j+k|0;_rite_fgets(i,w|0,8,1);k=_hex_to_bin32(j,w|0)&65535;j=j+k|0;n=_hex_to_uint32(w|0);k=0;d=11;break;case 11:d=k>>>0<n>>>0?12:18;break;case 12:_rite_fgets(i,q|0,2,1);r=_hex_to_bin8(j,q|0)&65535;j=j+r|0;_rite_fgets(i,v|0,4,1);r=_hex_to_uint16(v|0);d=(r&65535|0)>((y&65535)-1|0)?13:16;break;case 13:y=((r&65535)+1|0)&65535;s=d=
_mrb_realloc(h,s,y&65535);d=0==(d|0)?14:15;break;case 14:d=29;break;case 15:d=16;break;case 16:_memset(s,0,y&65535,1);_rite_fgets(i,s,r&65535,0);_hex_to_str(s,j+2|0,p);d=_uint16_to_bin(HEAP16[p>>1],j);j=j+d|0;j=j+(HEAP16[p>>1]&65535)|0;d=17;break;case 17:k=k+1|0;d=11;break;case 18:_rite_fgets(i,m|0,4,1);k=_hex_to_bin16(j,m|0)&65535;j=j+k|0;_rite_fgets(i,w|0,8,1);k=_hex_to_bin32(j,w|0)&65535;j=j+k|0;n=_hex_to_uint32(w|0);k=0;d=19;break;case 19:d=k>>>0<n>>>0?20:28;break;case 20:_rite_fgets(i,v|0,4,
1);t=_hex_to_uint16(v|0);d=65535==(t&65535|0)?21:22;break;case 21:d=_uint16_to_bin(t,j);j=j+d|0;d=27;break;case 22:d=(t&65535|0)>((y&65535)-1|0)?23:26;break;case 23:y=((t&65535)+1|0)&65535;s=d=_mrb_realloc(h,s,y&65535);d=0==(d|0)?24:25;break;case 24:d=29;break;case 25:d=26;break;case 26:_memset(s,0,y&65535,1);_rite_fgets(i,s,t&65535,0);_hex_to_str(s,j+2|0,p);d=_uint16_to_bin(HEAP16[p>>1],j);j=j+d|0;j=j+(HEAP16[p>>1]&65535)|0;d=27;break;case 27:k=k+1|0;d=19;break;case 28:_rite_fgets(i,m|0,4,1);d=_hex_to_bin16(j,
m|0)&65535;j=j+d|0;HEAP32[l>>2]=j-x|0;d=29;break;case 29:d=0!=(s|0)?30:31;break;case 30:_mrb_free(h,s);d=31;break;case 31:g=0;d=32;break;case 32:return f=g,STACKTOP=a,f;default:assert(0,"bad label: "+d)}}_load_rite_irep_record.X=1;
function _mrb_read_irep(f,e){var b=STACKTOP;STACKTOP+=56;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d,g,h,i,j,l,k,n=b,r,t=b+4;d=f;g=e;h=0;HEAP32[n>>2]=0;c=0==(d|0)?4:3;break;case 3:c=0==(g|0)?4:5;break;case 4:a=-7;c=31;break;case 5:r=g;k=HEAP32[(d+60|0)>>2];l=c=_read_rite_header(d,r,t);c=0>(c|0)?6:7;break;case 6:a=l;c=31;break;case 7:r=r+54|0;j=0;i=k;c=8;break;case 8:c=(j|0)<(l|0)?9:13;break;case 9:r=r+4|0;h=c=_read_rite_irep_record(d,
r,n);c=0!=(c|0)?10:11;break;case 10:c=16;break;case 11:r=r+HEAP32[n>>2]|0;c=12;break;case 12:j=j+1|0;i=i+1|0;c=8;break;case 13:c=0!=(_bin_to_uint32(r)|0)?14:15;break;case 14:h=-1;c=15;break;case 15:c=16;break;case 16:c=0!=(h|0)?17:30;break;case 17:j=0;i=k;c=18;break;case 18:c=i>>>0<HEAP32[(d+60|0)>>2]>>>0?19:29;break;case 19:c=0!=(HEAP32[(HEAP32[(d+56|0)>>2]+(i<<2)|0)>>2]|0)?20:27;break;case 20:c=0!=(HEAP32[(HEAP32[(HEAP32[(d+56|0)>>2]+(i<<2)|0)>>2]+8|0)>>2]|0)?21:22;break;case 21:_mrb_free(d,HEAP32[(HEAP32[(HEAP32[(d+
56|0)>>2]+(i<<2)|0)>>2]+8|0)>>2]);c=22;break;case 22:c=0!=(HEAP32[(HEAP32[(HEAP32[(d+56|0)>>2]+(i<<2)|0)>>2]+12|0)>>2]|0)?23:24;break;case 23:_mrb_free(d,HEAP32[(HEAP32[(HEAP32[(d+56|0)>>2]+(i<<2)|0)>>2]+12|0)>>2]);c=24;break;case 24:c=0!=(HEAP32[(HEAP32[(HEAP32[(d+56|0)>>2]+(i<<2)|0)>>2]+16|0)>>2]|0)?25:26;break;case 25:_mrb_free(d,HEAP32[(HEAP32[(HEAP32[(d+56|0)>>2]+(i<<2)|0)>>2]+16|0)>>2]);c=26;break;case 26:_mrb_free(d,HEAP32[(HEAP32[(d+56|0)>>2]+(i<<2)|0)>>2]);c=27;break;case 27:c=28;break;case 28:j=
j+1|0;i=i+1|0;c=18;break;case 29:a=h;c=31;break;case 30:a=k;c=_hex_to_uint8(t+42|0)&255;a=a+c|0;c=31;break;case 31:return d=a,STACKTOP=b,d;default:assert(0,"bad label: "+c)}}_mrb_read_irep.X=1;
function _read_rite_header(f,e,b){for(f=2;;)switch(f){case 2:var c,a,d;a=e;var f=d=b,g=a;assert(!0,"memcpy given 52 bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(f,g,52,1);a=a+52|0;f=0!=(_memcmp(d|0,__str11580|0,4)|0)?3:4;break;case 3:c=-5;f=9;break;case 4:f=0!=(_memcmp(d+12|0,__str21581|0,8)|0)?5:6;break;case 5:c=-5;f=9;break;case 6:f=_calc_crc_16_ccitt(d,52);f&=65535;g=_bin_to_uint16(a)&65535;f=(f|0)!=(g|0)?7:8;break;case 7:c=-5;f=9;break;case 8:c=_bin_to_uint16(d+40|0)&65535;
f=9;break;case 9:return c;default:assert(0,"bad label: "+f)}}_read_rite_header.X=1;function _hex_to_uint8(f){return((HEAP8[_hex2bin+(HEAP8[f|0]&255)|0]&255)<<4|HEAP8[_hex2bin+(HEAP8[f+1|0]&255)|0]&255)&255}
function _read_rite_irep_record(f,e,b){var c=STACKTOP;STACKTOP+=32;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j,l,k,n,r,t,p,q,v,w,m,x,s,y=c,B=c+8,A=c+16,G=c+24;g=f;h=e;i=b;l=0;w=128;x=_mrb_gc_arena_save(g);s=_mrb_add_irep(g);n=h;k=_mrb_malloc(g,w&65535);a=0==(k|0)?3:4;break;case 3:l=-6;a=58;break;case 4:r=h;a=83!=(HEAP8[h]&255|0)?5:6;break;case 5:d=-6;a=61;break;case 6:h=h+2|0;v=_bin_to_uint16(h)&65535;a=s;
HEAP32[a>>2]=HEAP32[a>>2]&65535|(v&65535)<<16;h=h+2|0;v=_bin_to_uint16(h)&65535;a=s+4|0;HEAP32[a>>2]=HEAP32[a>>2]&-65536|v&65535;h=h+2|0;v=_bin_to_uint16(h);h=h+2|0;a=_calc_crc_16_ccitt(r,h-r|0);a&=65535;var z=_bin_to_uint16(h)&65535;a=(a|0)!=(z|0)?7:8;break;case 7:d=-6;a=61;break;case 8:r=h=h+(v&65535)|0;a=_bin_to_uint32(h);HEAP32[(s+28|0)>>2]=a;h=h+4|0;a=0<(HEAP32[(s+28|0)>>2]|0)?9:16;break;case 9:a=_mrb_malloc(g,HEAP32[(s+28|0)>>2]<<2|0);HEAP32[(s+8|0)>>2]=a;a=0==(a|0)?10:11;break;case 10:l=-1;
a=58;break;case 11:j=0;a=12;break;case 12:a=(j|0)<(HEAP32[(s+28|0)>>2]|0)?13:15;break;case 13:a=_bin_to_uint32(h);HEAP32[(HEAP32[(s+8|0)>>2]+(j<<2)|0)>>2]=a;h=h+4|0;a=14;break;case 14:j=j+1|0;a=12;break;case 15:a=16;break;case 16:a=_calc_crc_16_ccitt(r,h-r|0);a&=65535;z=_bin_to_uint16(h)&65535;a=(a|0)!=(z|0)?17:18;break;case 17:l=-6;a=58;break;case 18:r=h=h+2|0;m=_bin_to_uint32(h);h=h+4|0;a=0<(m|0)?19:35;break;case 19:a=_mrb_malloc(g,m<<3|0);HEAP32[(s+12|0)>>2]=a;a=0==(HEAP32[(s+12|0)>>2]|0)?20:21;
break;case 20:l=-6;a=58;break;case 21:j=0;a=22;break;case 22:a=(j|0)<(m|0)?23:34;break;case 23:t=HEAP8[h]&255;h=h+1|0;p=_bin_to_uint16(h);h=h+2|0;a=(p&65535|0)>((w&65535)-1|0)?24:27;break;case 24:_mrb_free(g,k);w=((p&65535)+1|0)&65535;k=a=_mrb_malloc(g,w&65535);a=0==(a|0)?25:26;break;case 25:l=-1;a=58;break;case 26:a=27;break;case 27:a=k;var z=h,E=p&65535;assert(0===E%1,"memcpy given "+E+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(a,z,E,1);h=h+(p&65535)|0;HEAP8[k+(p&65535)|
0]=0;a=t&65535;a=3==(a|0)?28:6==(a|0)?29:17==(a|0)?30:31;break;case 28:a=_strtol(k,0,10);z=HEAP32[(s+12|0)>>2]+(j<<3)|0;_mrb_fixnum_value1585(y,a);a=z;z=y;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[z>>2];HEAP32[a+4>>2]=HEAP32[z+4>>2];a=32;break;case 29:a=_strtof(k,0);z=HEAP32[(s+12|0)>>2]+(j<<3)|0;_mrb_float_value1586(B,a);a=z;z=B;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[z>>
2];HEAP32[a+4>>2]=HEAP32[z+4>>2];a=32;break;case 30:a=HEAP32[(s+12|0)>>2]+(j<<3)|0;_mrb_str_new(A,g,k,p&65535);z=A;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[z>>2];HEAP32[a+4>>2]=HEAP32[z+4>>2];a=32;break;case 31:a=HEAP32[(s+12|0)>>2]+(j<<3)|0;_mrb_nil_value1582(G);z=G;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[z>>2];HEAP32[a+4>>2]=HEAP32[z+4>>2];a=32;break;case 32:a=s+32|
0;HEAP32[a>>2]=HEAP32[a>>2]+1|0;_mrb_gc_arena_restore(g,x);a=33;break;case 33:j=j+1|0;a=22;break;case 34:a=35;break;case 35:a=_calc_crc_16_ccitt(r,h-r|0);a&=65535;z=_bin_to_uint16(h)&65535;a=(a|0)!=(z|0)?36:37;break;case 36:l=-6;a=58;break;case 37:r=h=h+2|0;a=_bin_to_uint32(h);HEAP32[(s+36|0)>>2]=a;h=h+4|0;a=0<(HEAP32[(s+36|0)>>2]|0)?38:55;break;case 38:a=_mrb_malloc(g,HEAP32[(s+36|0)>>2]<<1|0);HEAP32[(s+16|0)>>2]=a;a=0==(a|0)?39:40;break;case 39:l=-6;a=58;break;case 40:j=0;a=41;break;case 41:a=(j|
0)<(HEAP32[(s+36|0)>>2]|0)?42:44;break;case 42:HEAP16[HEAP32[(s+16|0)>>2]>>1]=0;a=43;break;case 43:j=j+1|0;a=41;break;case 44:j=0;a=45;break;case 45:a=(j|0)<(HEAP32[(s+36|0)>>2]|0)?46:54;break;case 46:q=_bin_to_uint16(h);h=h+2|0;a=65535==(q&65535|0)?47:48;break;case 47:HEAP16[(HEAP32[(s+16|0)>>2]+(j<<1)|0)>>1]=0;a=53;break;case 48:a=(q&65535|0)>((w&65535)-1|0)?49:52;break;case 49:_mrb_free(g,k);w=((q&65535)+1|0)&65535;k=a=_mrb_malloc(g,w&65535);a=0==(a|0)?50:51;break;case 50:l=-1;a=58;break;case 51:a=
52;break;case 52:a=k;z=h;E=q&65535;assert(0===E%1,"memcpy given "+E+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(a,z,E,1);h=h+(q&65535)|0;HEAP8[k+(q&65535)|0]=0;a=_mrb_intern2(g,k,q&65535);HEAP16[(HEAP32[(s+16|0)>>2]+(j<<1)|0)>>1]=a;a=53;break;case 53:j=j+1|0;a=45;break;case 54:a=55;break;case 55:a=_calc_crc_16_ccitt(r,h-r|0);a&=65535;z=_bin_to_uint16(h)&65535;a=(a|0)!=(z|0)?56:57;break;case 56:l=-6;a=58;break;case 57:h=h+2|0;HEAP32[i>>2]=h-n|0;a=58;break;case 58:a=0!=(k|
0)?59:60;break;case 59:_mrb_free(g,k);a=60;break;case 60:d=l;a=61;break;case 61:return f=d,STACKTOP=c,f;default:assert(0,"bad label: "+a)}}_read_rite_irep_record.X=1;
function _mrb_load_irep_file(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h=c;d=e;g=_mrb_read_irep_file(d,b);a=0>(g|0)?3:4;break;case 3:_irep_error(d,g);_mrb_nil_value1582(f);a=5;break;case 4:a=d;var i=_mrb_proc_new(d,HEAP32[(HEAP32[(d+56|0)>>2]+(g<<2)|0)>>2]);_mrb_top_self(h,d);_mrb_run(f,a,i,h);a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _irep_error(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b=_mrb_class_obj_get(f,__str1579|0);_mrb_exc_new(e,f,b,_irep_error_msg|0,15);HEAP32[(f+48|0)>>2]=HEAP32[(e|0)>>2];STACKTOP=e}
function _mrb_nil_value1582(f){var e=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c=e;b=3;break;case 3:b=c+4|0;HEAP32[b>>2]&=-256;HEAP32[(c|0)>>2]=0;b=4;break;case 4:assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[f>>2]=HEAP32[c>>2];HEAP32[f+4>>2]=HEAP32[c+4>>2];STACKTOP=e;return;default:assert(0,"bad label: "+b)}}
function _mrb_load_irep(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h=c;d=e;g=_mrb_read_irep(d,b);a=0>(g|0)?3:4;break;case 3:_irep_error(d,g);_mrb_nil_value1582(f);a=5;break;case 4:a=d;var i=_mrb_proc_new(d,HEAP32[(HEAP32[(d+56|0)>>2]+(g<<2)|0)>>2]);_mrb_top_self(h,d);_mrb_run(f,a,i,h);a=5;break;case 5:STACKTOP=c;return;default:assert(0,"bad label: "+a)}}
function _mrb_fixnum_value1585(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|3;HEAP32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _mrb_float_value1586(f,e){var b=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var c;for(c=2;;)switch(c){case 2:var a,d=b;a=e;c=3;break;case 3:c=d+4|0;HEAP32[c>>2]=HEAP32[c>>2]&-256|6;HEAPF32[(d|0)>>2]=a;c=4;break;case 4:a=f;assert(!0,"memcpy given 8 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[a>>2]=HEAP32[d>>2];HEAP32[a+4>>2]=HEAP32[d+4>>2];STACKTOP=b;return;default:assert(0,"bad label: "+c)}}
function _rite_fgetc(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g;a=f;d=e;b=3;break;case 3:g=_rite_fgetcSub(a);b=10==(g&255|0)?5:4;break;case 4:b=13==(g&255|0)?5:6;break;case 5:b=3;break;case 6:b=0!=(d|0)?7:17;break;case 7:b=35==(g&255|0)?8:17;break;case 8:b=9;break;case 9:if(10!=(g&255|0))b=10;else{var h=0;b=12}break;case 10:13!=(g&255|0)?b=11:(h=0,b=12);break;case 11:h=0!=(g&255|0);b=12;break;case 12:b=h?13:14;break;case 13:g=_rite_fgetcSub(a);b=9;break;case 14:b=0==(g&255|0)?15:16;break;case 15:c=
0;b=20;break;case 16:b=18;break;case 17:c=g;b=20;break;case 18:b=19;break;case 19:b=3;break;case 20:return c;default:assert(0,"bad label: "+b)}}_rite_fgetc.X=1;function _hex_to_uint16(f){return((HEAP8[_hex2bin+(HEAP8[f|0]&255)|0]<<24>>24&65535)<<12|(HEAP8[_hex2bin+(HEAP8[f+1|0]&255)|0]<<24>>24&65535)<<8|(HEAP8[_hex2bin+(HEAP8[f+2|0]&255)|0]<<24>>24&65535)<<4|HEAP8[_hex2bin+(HEAP8[f+3|0]&255)|0]<<24>>24&65535)&65535}
function _uint16_to_bin(f,e){var b=e;HEAP8[b]=(f&65535)>>8&255;HEAP8[b+1|0]=f&255;return 2}function _hex_to_bin8(f,e){HEAP8[f|0]=(HEAP8[_hex2bin+(HEAP8[e|0]&255)|0]<<24>>24<<4|HEAP8[_hex2bin+(HEAP8[e+1|0]&255)|0]<<24>>24)&255;return 1}
function _calc_crc_16_ccitt(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h;c=f;a=e;g=d=0;b=3;break;case 3:b=(g|0)<(a|0)?4:12;break;case 4:b=c;c=b+1|0;d|=HEAP8[b]&255;h=0;b=5;break;case 5:b=8>(h|0)?6:10;break;case 6:d<<=1;b=0!=(d&16777216|0)?7:8;break;case 7:d^=17834240;b=8;break;case 8:b=9;break;case 9:h=h+1|0;b=5;break;case 10:b=11;break;case 11:g=g+1|0;b=3;break;case 12:return d>>>8&65535;default:assert(0,"bad label: "+b)}}_calc_crc_16_ccitt.X=1;
function _hex_to_str(f,e,b){var c=STACKTOP;STACKTOP+=8;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j=c,l,k,n=c+4;d=f;g=e;h=b;k=l=0;HEAP16[h>>1]=0;i=g;a=3;break;case 3:a=0!=(HEAP8[d]<<24>>24|0)?4:31;break;case 4:a=0!=(l|0)?5:23;break;case 5:a=HEAP8[d]<<24>>24;a=97==(a|0)?6:98==(a|0)?7:116==(a|0)?8:110==(a|0)?9:118==(a|0)?10:102==(a|0)?11:114==(a|0)?12:34==(a|0)||39==(a|0)||63==(a|0)||92==(a|0)?13:14;break;case 6:a=
i;i=a+1|0;HEAP8[a]=7;a=22;break;case 7:a=i;i=a+1|0;HEAP8[a]=8;a=22;break;case 8:a=i;i=a+1|0;HEAP8[a]=9;a=22;break;case 9:a=i;i=a+1|0;HEAP8[a]=10;a=22;break;case 10:a=i;i=a+1|0;HEAP8[a]=11;a=22;break;case 11:a=i;i=a+1|0;HEAP8[a]=12;a=22;break;case 12:a=i;i=a+1|0;HEAP8[a]=13;a=22;break;case 13:a=HEAP8[d];var r=i;i=r+1|0;HEAP8[r]=a;a=22;break;case 14:a=48<=(HEAP8[d]<<24>>24|0)?15:17;break;case 15:a=55>=(HEAP8[d]<<24>>24|0)?16:17;break;case 16:k=8;_strncpy(j|0,d,3);a=21;break;case 17:a=120==(HEAP8[d]<<
24>>24|0)?19:18;break;case 18:a=88==(HEAP8[d]<<24>>24|0)?19:20;break;case 19:k=16;d=d+1|0;_strncpy(j|0,d,2);a=20;break;case 20:a=21;break;case 21:a=_strtol(j|0,n,k)&255;r=i;i=r+1|0;HEAP8[r]=a;d=d+((HEAP32[n>>2]-(j|0)|0)-1|0)|0;a=22;break;case 22:l=0;a=27;break;case 23:a=92==(HEAP8[d]<<24>>24|0)?24:25;break;case 24:l=1;a=26;break;case 25:l=0;a=HEAP8[d];r=i;i=r+1|0;HEAP8[r]=a;a=26;break;case 26:a=27;break;case 27:a=0!=(l|0)?29:28;break;case 28:a=h;HEAP16[a>>1]=HEAP16[a>>1]+1&65535;a=29;break;case 29:a=
30;break;case 30:d=d+1|0;a=3;break;case 31:return f=g,STACKTOP=c,f;default:assert(0,"bad label: "+a)}}_hex_to_str.X=1;
function _rite_fgetcSub(f){var e;for(e=2;;)switch(e){case 2:var b,c;c=f;e=0==(HEAP8[c+4|0]&255|0)?3:4;break;case 3:e=_fread(c+4|0,1,256,HEAP32[(c|0)>>2]);HEAP32[(c+264|0)>>2]=e;HEAP32[(c+260|0)>>2]=0;e=4;break;case 4:e=(HEAP32[(c+264|0)>>2]|0)==(HEAP32[(c+260|0)>>2]|0)?5:8;break;case 5:e=_fread(c+4|0,1,256,HEAP32[(c|0)>>2]);HEAP32[(c+264|0)>>2]=e;HEAP32[(c+260|0)>>2]=0;e=0==(HEAP32[(c+264|0)>>2]|0)?6:7;break;case 6:b=0;e=9;break;case 7:e=8;break;case 8:b=c+260|0;e=HEAP32[b>>2];HEAP32[b>>2]=e+1|0;
b=HEAP8[(c+4|0)+e|0];e=9;break;case 9:return b;default:assert(0,"bad label: "+e)}}_rite_fgetcSub.X=1;
function _malloc(f){var e;for(e=2;;)switch(e){case 2:var b,c,a,d,g,h,i,j,l,k,n,r,t,p,q,v,w,m,x,s,y,B;b=f;e=244>=b>>>0?3:38;break;case 3:e=11>b>>>0?4:5;break;case 4:var A=16;e=6;break;case 5:A=((b+4|0)+7|0)&-8;e=6;break;case 6:a=A;d=a>>>3;g=HEAP32[(__ZL4_gm_|0)>>2]>>>(d>>>0);e=0!=(g&3|0)?7:14;break;case 7:d=d+((g^-1)&1)|0;h=(__ZL4_gm_+40|0)+(d<<1<<2)|0;i=HEAP32[(h+8|0)>>2];j=HEAP32[(i+8|0)>>2];e=(h|0)==(j|0)?8:9;break;case 8:HEAP32[(__ZL4_gm_|0)>>2]&=1<<d^-1;e=13;break;case 9:e=0!=(1==(j>>>0>=HEAP32[(__ZL4_gm_+
16|0)>>2]>>>0&1)|0)?10:11;break;case 10:HEAP32[(h+8|0)>>2]=j;HEAP32[(j+12|0)>>2]=h;e=12;break;case 11:_abort();e=12;break;case 12:e=13;break;case 13:HEAP32[(i+4|0)>>2]=d<<3|3;c=(i+(d<<3)|0)+4|0;HEAP32[c>>2]|=1;c=i+8|0;e=54;break;case 14:e=a>>>0>HEAP32[(__ZL4_gm_+8|0)>>2]>>>0?15:36;break;case 15:e=0!=(g|0)?16:31;break;case 16:l=g<<d&(1<<d<<1|-(1<<d<<1)|0);l&=-l|0;l=l-1|0;t=k=l>>>12&16;l>>>=k>>>0;k=p=l>>>5&8;t=t+p|0;l>>>=k>>>0;k=p=l>>>2&4;t=t+p|0;l>>>=k>>>0;k=p=l>>>1&2;t=t+p|0;l>>>=k>>>0;k=p=l>>>1&
1;t=t+p|0;l>>>=k>>>0;t=t+l|0;l=(__ZL4_gm_+40|0)+(t<<1<<2)|0;k=HEAP32[(l+8|0)>>2];p=HEAP32[(k+8|0)>>2];e=(l|0)==(p|0)?17:18;break;case 17:HEAP32[(__ZL4_gm_|0)>>2]&=1<<t^-1;e=22;break;case 18:e=0!=(1==(p>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0&1)|0)?19:20;break;case 19:HEAP32[(l+8|0)>>2]=p;HEAP32[(p+12|0)>>2]=l;e=21;break;case 20:_abort();e=21;break;case 21:e=22;break;case 22:r=(t<<3)-a|0;HEAP32[(k+4|0)>>2]=a|3;n=k+a|0;HEAP32[(n+4|0)>>2]=r|1;HEAP32[(n+r|0)>>2]=r;q=HEAP32[(__ZL4_gm_+8|0)>>2];e=0!=(q|0)?
23:30;break;case 23:v=HEAP32[(__ZL4_gm_+20|0)>>2];w=q>>>3;x=m=(__ZL4_gm_+40|0)+(w<<1<<2)|0;e=0!=(HEAP32[(__ZL4_gm_|0)>>2]&1<<w|0)?25:24;break;case 24:HEAP32[(__ZL4_gm_|0)>>2]|=1<<w;e=29;break;case 25:e=0!=(1==(HEAP32[(m+8|0)>>2]>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0&1)|0)?26:27;break;case 26:x=HEAP32[(m+8|0)>>2];e=28;break;case 27:_abort();e=28;break;case 28:e=29;break;case 29:HEAP32[(m+8|0)>>2]=v;HEAP32[(x+12|0)>>2]=v;HEAP32[(v+8|0)>>2]=x;HEAP32[(v+12|0)>>2]=m;e=30;break;case 30:HEAP32[(__ZL4_gm_+
8|0)>>2]=r;HEAP32[(__ZL4_gm_+20|0)>>2]=n;c=k+8|0;e=54;break;case 31:e=0!=(HEAP32[(__ZL4_gm_+4|0)>>2]|0)?32:34;break;case 32:c=e=__ZL13tmalloc_smallP12malloc_statej(__ZL4_gm_,a);e=0!=(e|0)?33:34;break;case 33:e=54;break;case 34:e=35;break;case 35:e=36;break;case 36:e=37;break;case 37:e=45;break;case 38:e=4294967232<=b>>>0?39:40;break;case 39:a=-1;e=44;break;case 40:a=((b+4|0)+7|0)&-8;e=0!=(HEAP32[(__ZL4_gm_+4|0)>>2]|0)?41:43;break;case 41:c=e=__ZL13tmalloc_largeP12malloc_statej(__ZL4_gm_,a);e=0!=(e|
0)?42:43;break;case 42:e=54;break;case 43:e=44;break;case 44:e=45;break;case 45:e=a>>>0<=HEAP32[(__ZL4_gm_+8|0)>>2]>>>0?46:50;break;case 46:s=HEAP32[(__ZL4_gm_+8|0)>>2]-a|0;y=HEAP32[(__ZL4_gm_+20|0)>>2];e=16<=s>>>0?47:48;break;case 47:e=y+a|0;HEAP32[(__ZL4_gm_+20|0)>>2]=e;HEAP32[(__ZL4_gm_+8|0)>>2]=s;HEAP32[(e+4|0)>>2]=s|1;HEAP32[(e+s|0)>>2]=s;HEAP32[(y+4|0)>>2]=a|3;e=49;break;case 48:e=HEAP32[(__ZL4_gm_+8|0)>>2];HEAP32[(__ZL4_gm_+8|0)>>2]=0;HEAP32[(__ZL4_gm_+20|0)>>2]=0;HEAP32[(y+4|0)>>2]=e|3;e=
(y+e|0)+4|0;HEAP32[e>>2]|=1;e=49;break;case 49:c=y+8|0;e=54;break;case 50:e=a>>>0<HEAP32[(__ZL4_gm_+12|0)>>2]>>>0?51:52;break;case 51:c=HEAP32[(__ZL4_gm_+12|0)>>2]-a|0;HEAP32[(__ZL4_gm_+12|0)>>2]=c;e=HEAP32[(__ZL4_gm_+24|0)>>2];B=e+a|0;HEAP32[(__ZL4_gm_+24|0)>>2]=B;HEAP32[(B+4|0)>>2]=c|1;HEAP32[(e+4|0)>>2]=a|3;c=e+8|0;e=54;break;case 52:e=53;break;case 53:c=__ZL9sys_allocP12malloc_statej(__ZL4_gm_,a);e=54;break;case 54:return c;default:assert(0,"bad label: "+e)}}Module._malloc=_malloc;_malloc.X=1;
function __ZL13tmalloc_smallP12malloc_statej(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h,i,j,l,k,n,r,t,p,q,v,w,m,x,s,y,B;a=f;d=e;g=(HEAP32[(a+4|0)>>2]&(-HEAP32[(a+4|0)>>2]|0))-1|0;i=h=g>>>12&16;g>>>=h>>>0;h=b=g>>>5&8;i=i+b|0;g>>>=h>>>0;h=b=g>>>2&4;i=i+b|0;g>>>=h>>>0;h=b=g>>>1&2;i=i+b|0;g>>>=h>>>0;h=b=g>>>1&1;i=i+b|0;g>>>=h>>>0;g=h=HEAP32[((a+304|0)+((i+g|0)<<2)|0)>>2];i=(HEAP32[(g+4|0)>>2]&-8)-d|0;b=3;break;case 3:b=0!=(HEAP32[(g+16|0)>>2]|0)?4:5;break;case 4:var A=HEAP32[(g+16|0)>>2];b=6;
break;case 5:A=HEAP32[((g+16|0)+4|0)>>2];b=6;break;case 6:g=A;b=0!=(A|0)?7:10;break;case 7:j=(HEAP32[(g+4|0)>>2]&-8)-d|0;b=j>>>0<i>>>0?8:9;break;case 8:i=j;h=g;b=9;break;case 9:b=3;break;case 10:b=0!=(1==(h>>>0>=HEAP32[(a+16|0)>>2]>>>0&1)|0)?11:70;break;case 11:l=h+d|0;b=0!=(1==(h>>>0<l>>>0&1)|0)?12:69;break;case 12:k=HEAP32[(h+24|0)>>2];b=(HEAP32[(h+12|0)>>2]|0)!=(h|0)?13:17;break;case 13:r=HEAP32[(h+8|0)>>2];n=HEAP32[(h+12|0)>>2];b=0!=(1==(r>>>0>=HEAP32[(a+16|0)>>2]>>>0&1)|0)?14:15;break;case 14:HEAP32[(r+
12|0)>>2]=n;HEAP32[(n+8|0)>>2]=r;b=16;break;case 15:_abort();b=16;break;case 16:b=29;break;case 17:t=n=(h+16|0)+4|0;n=b=HEAP32[n>>2];b=0!=(b|0)?19:18;break;case 18:t=n=h+16|0;n=b=HEAP32[n>>2];b=0!=(b|0)?19:28;break;case 19:b=20;break;case 20:p=b=(n+16|0)+4|0;if(0!=(HEAP32[b>>2]|0)){var G=1;b=22}else b=21;break;case 21:p=G=n+16|0;G=0!=(HEAP32[G>>2]|0);b=22;break;case 22:b=G?23:24;break;case 23:t=n=p;n=HEAP32[n>>2];b=20;break;case 24:b=0!=(1==(t>>>0>=HEAP32[(a+16|0)>>2]>>>0&1)|0)?25:26;break;case 25:HEAP32[t>>
2]=0;b=27;break;case 26:_abort();b=27;break;case 27:b=28;break;case 28:b=29;break;case 29:b=0!=(k|0)?30:57;break;case 30:q=(a+304|0)+(HEAP32[(h+28|0)>>2]<<2)|0;b=(h|0)==(HEAP32[q>>2]|0)?31:34;break;case 31:b=n;HEAP32[q>>2]=b;b=0==(b|0)?32:33;break;case 32:b=a+4|0;HEAP32[b>>2]&=1<<HEAP32[(h+28|0)>>2]^-1;b=33;break;case 33:b=41;break;case 34:b=0!=(1==(k>>>0>=HEAP32[(a+16|0)>>2]>>>0&1)|0)?35:39;break;case 35:b=(HEAP32[(k+16|0)>>2]|0)==(h|0)?36:37;break;case 36:HEAP32[(k+16|0)>>2]=n;b=38;break;case 37:HEAP32[((k+
16|0)+4|0)>>2]=n;b=38;break;case 38:b=40;break;case 39:_abort();b=40;break;case 40:b=41;break;case 41:b=0!=(n|0)?42:56;break;case 42:b=0!=(1==(n>>>0>=HEAP32[(a+16|0)>>2]>>>0&1)|0)?43:54;break;case 43:HEAP32[(n+24|0)>>2]=k;v=b=HEAP32[(h+16|0)>>2];b=0!=(b|0)?44:48;break;case 44:b=0!=(1==(v>>>0>=HEAP32[(a+16|0)>>2]>>>0&1)|0)?45:46;break;case 45:HEAP32[(n+16|0)>>2]=v;HEAP32[(v+24|0)>>2]=n;b=47;break;case 46:_abort();b=47;break;case 47:b=48;break;case 48:w=b=HEAP32[((h+16|0)+4|0)>>2];b=0!=(b|0)?49:53;
break;case 49:b=0!=(1==(w>>>0>=HEAP32[(a+16|0)>>2]>>>0&1)|0)?50:51;break;case 50:HEAP32[((n+16|0)+4|0)>>2]=w;HEAP32[(w+24|0)>>2]=n;b=52;break;case 51:_abort();b=52;break;case 52:b=53;break;case 53:b=55;break;case 54:_abort();b=55;break;case 55:b=56;break;case 56:b=57;break;case 57:b=16>i>>>0?58:59;break;case 58:HEAP32[(h+4|0)>>2]=i+d|3;b=(h+(i+d|0)|0)+4|0;HEAP32[b>>2]|=1;b=68;break;case 59:HEAP32[(h+4|0)>>2]=d|3;HEAP32[(l+4|0)>>2]=i|1;HEAP32[(l+i|0)>>2]=i;m=HEAP32[(a+8|0)>>2];b=0!=(m|0)?60:67;break;
case 60:x=HEAP32[(a+20|0)>>2];s=m>>>3;B=y=(a+40|0)+(s<<1<<2)|0;b=0!=(HEAP32[(a|0)>>2]&1<<s|0)?62:61;break;case 61:b=a|0;HEAP32[b>>2]|=1<<s;b=66;break;case 62:b=0!=(1==(HEAP32[(y+8|0)>>2]>>>0>=HEAP32[(a+16|0)>>2]>>>0&1)|0)?63:64;break;case 63:B=HEAP32[(y+8|0)>>2];b=65;break;case 64:_abort();b=65;break;case 65:b=66;break;case 66:HEAP32[(y+8|0)>>2]=x;HEAP32[(B+12|0)>>2]=x;HEAP32[(x+8|0)>>2]=B;HEAP32[(x+12|0)>>2]=y;b=67;break;case 67:HEAP32[(a+8|0)>>2]=i;HEAP32[(a+20|0)>>2]=l;b=68;break;case 68:c=h+8|
0;b=71;break;case 69:b=70;break;case 70:_abort();c=0;b=71;break;case 71:return c;default:assert(0,"bad label: "+b)}}__ZL13tmalloc_smallP12malloc_statej.X=1;
function __ZL13tmalloc_largeP12malloc_statej(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h,i,j,l,k,n,r,t,p,q,v,w,m,x,s,y,B,A,G,z,E,M,C,H,L,R,I,K,Q,O,aa;a=f;d=e;g=0;h=-d|0;l=d>>>8;b=0==(l|0)?3:4;break;case 3:j=0;b=8;break;case 4:b=65535<l>>>0?5:6;break;case 5:j=31;b=7;break;case 6:j=l;b=(j-256|0)>>>16&8;j=k=j<<b;k=(k-4096|0)>>>16&4;b=b+k|0;j=k=j<<k;var J=(k-16384|0)>>>16&2;k=J;b=b+J|0;k=(14-b|0)+(j<<k>>>15)|0;j=(k<<1)+(d>>>((k+7|0)>>>0)&1)|0;b=7;break;case 7:b=8;break;case 8:i=b=HEAP32[((a+304|
0)+(j<<2)|0)>>2];b=0!=(b|0)?9:24;break;case 9:var la=d;b=31==(j|0)?10:11;break;case 10:var ba=0;b=12;break;case 11:ba=31-(((j>>>1)+8|0)-2|0)|0;b=12;break;case 12:n=la<<ba;r=0;b=13;break;case 13:p=(HEAP32[(i+4|0)>>2]&-8)-d|0;b=p>>>0<h>>>0?14:17;break;case 14:g=i;h=b=p;b=0==(b|0)?15:16;break;case 15:b=23;break;case 16:b=17;break;case 17:t=HEAP32[((i+16|0)+4|0)>>2];i=HEAP32[((i+16|0)+((n>>>31&1)<<2)|0)>>2];b=0!=(t|0)?18:20;break;case 18:b=(t|0)!=(i|0)?19:20;break;case 19:r=t;b=20;break;case 20:b=0==
(i|0)?21:22;break;case 21:i=r;b=23;break;case 22:n<<=1;b=13;break;case 23:b=24;break;case 24:b=0==(i|0)?25:29;break;case 25:b=0==(g|0)?26:29;break;case 26:q=(1<<j<<1|-(1<<j<<1)|0)&HEAP32[(a+4|0)>>2];b=0!=(q|0)?27:28;break;case 27:i=q&(-q|0);i=i-1|0;k=b=i>>>12&16;i>>>=b>>>0;b=J=i>>>5&8;k=k+J|0;i>>>=b>>>0;b=J=i>>>2&4;k=k+J|0;i>>>=b>>>0;b=J=i>>>1&2;k=k+J|0;i>>>=b>>>0;b=J=i>>>1&1;k=k+J|0;i>>>=b>>>0;i=k+i|0;i=HEAP32[((a+304|0)+(i<<2)|0)>>2];b=28;break;case 28:b=29;break;case 29:b=30;break;case 30:b=0!=
(i|0)?31:37;break;case 31:v=(HEAP32[(i+4|0)>>2]&-8)-d|0;b=v>>>0<h>>>0?32:33;break;case 32:h=v;g=i;b=33;break;case 33:b=0!=(HEAP32[(i+16|0)>>2]|0)?34:35;break;case 34:var U=HEAP32[(i+16|0)>>2];b=36;break;case 35:U=HEAP32[((i+16|0)+4|0)>>2];b=36;break;case 36:i=U;b=30;break;case 37:b=0!=(g|0)?38:127;break;case 38:b=h>>>0<(HEAP32[(a+8|0)>>2]-d|0)>>>0?39:127;break;case 39:b=0!=(1==(g>>>0>=HEAP32[(a+16|0)>>2]>>>0&1)|0)?40:126;break;case 40:w=g+d|0;b=0!=(1==(g>>>0<w>>>0&1)|0)?41:125;break;case 41:m=HEAP32[(g+
24|0)>>2];b=(HEAP32[(g+12|0)>>2]|0)!=(g|0)?42:46;break;case 42:s=HEAP32[(g+8|0)>>2];x=HEAP32[(g+12|0)>>2];b=0!=(1==(s>>>0>=HEAP32[(a+16|0)>>2]>>>0&1)|0)?43:44;break;case 43:HEAP32[(s+12|0)>>2]=x;HEAP32[(x+8|0)>>2]=s;b=45;break;case 44:_abort();b=45;break;case 45:b=58;break;case 46:y=x=(g+16|0)+4|0;x=b=HEAP32[x>>2];b=0!=(b|0)?48:47;break;case 47:y=x=g+16|0;x=b=HEAP32[x>>2];b=0!=(b|0)?48:57;break;case 48:b=49;break;case 49:B=b=(x+16|0)+4|0;if(0!=(HEAP32[b>>2]|0)){var T=1;b=51}else b=50;break;case 50:B=
T=x+16|0;T=0!=(HEAP32[T>>2]|0);b=51;break;case 51:b=T?52:53;break;case 52:y=x=B;x=HEAP32[x>>2];b=49;break;case 53:b=0!=(1==(y>>>0>=HEAP32[(a+16|0)>>2]>>>0&1)|0)?54:55;break;case 54:HEAP32[y>>2]=0;b=56;break;case 55:_abort();b=56;break;case 56:b=57;break;case 57:b=58;break;case 58:b=0!=(m|0)?59:86;break;case 59:A=(a+304|0)+(HEAP32[(g+28|0)>>2]<<2)|0;b=(g|0)==(HEAP32[A>>2]|0)?60:63;break;case 60:b=x;HEAP32[A>>2]=b;b=0==(b|0)?61:62;break;case 61:b=a+4|0;HEAP32[b>>2]&=1<<HEAP32[(g+28|0)>>2]^-1;b=62;break;
case 62:b=70;break;case 63:b=0!=(1==(m>>>0>=HEAP32[(a+16|0)>>2]>>>0&1)|0)?64:68;break;case 64:b=(HEAP32[(m+16|0)>>2]|0)==(g|0)?65:66;break;case 65:HEAP32[(m+16|0)>>2]=x;b=67;break;case 66:HEAP32[((m+16|0)+4|0)>>2]=x;b=67;break;case 67:b=69;break;case 68:_abort();b=69;break;case 69:b=70;break;case 70:b=0!=(x|0)?71:85;break;case 71:b=0!=(1==(x>>>0>=HEAP32[(a+16|0)>>2]>>>0&1)|0)?72:83;break;case 72:HEAP32[(x+24|0)>>2]=m;G=b=HEAP32[(g+16|0)>>2];b=0!=(b|0)?73:77;break;case 73:b=0!=(1==(G>>>0>=HEAP32[(a+
16|0)>>2]>>>0&1)|0)?74:75;break;case 74:HEAP32[(x+16|0)>>2]=G;HEAP32[(G+24|0)>>2]=x;b=76;break;case 75:_abort();b=76;break;case 76:b=77;break;case 77:z=b=HEAP32[((g+16|0)+4|0)>>2];b=0!=(b|0)?78:82;break;case 78:b=0!=(1==(z>>>0>=HEAP32[(a+16|0)>>2]>>>0&1)|0)?79:80;break;case 79:HEAP32[((x+16|0)+4|0)>>2]=z;HEAP32[(z+24|0)>>2]=x;b=81;break;case 80:_abort();b=81;break;case 81:b=82;break;case 82:b=84;break;case 83:_abort();b=84;break;case 84:b=85;break;case 85:b=86;break;case 86:b=16>h>>>0?87:88;break;
case 87:HEAP32[(g+4|0)>>2]=h+d|3;b=(g+(h+d|0)|0)+4|0;HEAP32[b>>2]|=1;b=124;break;case 88:HEAP32[(g+4|0)>>2]=d|3;HEAP32[(w+4|0)>>2]=h|1;HEAP32[(w+h|0)>>2]=h;b=32>h>>>3>>>0?89:96;break;case 89:E=h>>>3;C=M=(a+40|0)+(E<<1<<2)|0;b=0!=(HEAP32[(a|0)>>2]&1<<E|0)?91:90;break;case 90:b=a|0;HEAP32[b>>2]|=1<<E;b=95;break;case 91:b=0!=(1==(HEAP32[(M+8|0)>>2]>>>0>=HEAP32[(a+16|0)>>2]>>>0&1)|0)?92:93;break;case 92:C=HEAP32[(M+8|0)>>2];b=94;break;case 93:_abort();b=94;break;case 94:b=95;break;case 95:HEAP32[(M+8|
0)>>2]=w;HEAP32[(C+12|0)>>2]=w;HEAP32[(w+8|0)>>2]=C;HEAP32[(w+12|0)>>2]=M;b=123;break;case 96:H=w;I=h>>>8;b=0==(I|0)?97:98;break;case 97:R=0;b=102;break;case 98:b=65535<I>>>0?99:100;break;case 99:R=31;b=101;break;case 100:R=I;b=(R-256|0)>>>16&8;R=k=R<<b;k=(k-4096|0)>>>16&4;b=b+k|0;R=k=R<<k;k=J=(k-16384|0)>>>16&2;b=b+J|0;k=(14-b|0)+(R<<k>>>15)|0;R=(k<<1)+(h>>>((k+7|0)>>>0)&1)|0;b=101;break;case 101:b=102;break;case 102:L=(a+304|0)+(R<<2)|0;HEAP32[(H+28|0)>>2]=R;HEAP32[((H+16|0)+4|0)>>2]=0;HEAP32[(H+
16|0)>>2]=0;b=0!=(HEAP32[(a+4|0)>>2]&1<<R|0)?104:103;break;case 103:b=a+4|0;HEAP32[b>>2]|=1<<R;HEAP32[L>>2]=H;HEAP32[(H+24|0)>>2]=L;b=H;HEAP32[(H+12|0)>>2]=b;HEAP32[(H+8|0)>>2]=b;b=122;break;case 104:K=HEAP32[L>>2];var ua=h;b=31==(R|0)?105:106;break;case 105:var N=0;b=107;break;case 106:N=31-(((R>>>1)+8|0)-2|0)|0;b=107;break;case 107:Q=ua<<N;b=108;break;case 108:b=(HEAP32[(K+4|0)>>2]&-8|0)!=(h|0)?109:115;break;case 109:O=(K+16|0)+((Q>>>31&1)<<2)|0;Q<<=1;b=0!=(HEAP32[O>>2]|0)?110:111;break;case 110:K=
HEAP32[O>>2];b=114;break;case 111:b=0!=(1==(O>>>0>=HEAP32[(a+16|0)>>2]>>>0&1)|0)?112:113;break;case 112:HEAP32[O>>2]=H;HEAP32[(H+24|0)>>2]=K;b=H;HEAP32[(H+12|0)>>2]=b;HEAP32[(H+8|0)>>2]=b;b=121;break;case 113:_abort();b=121;break;case 114:b=120;break;case 115:aa=HEAP32[(K+8|0)>>2];if(K>>>0>=HEAP32[(a+16|0)>>2]>>>0)b=116;else{var u=0;b=117}break;case 116:u=aa>>>0>=HEAP32[(a+16|0)>>2]>>>0;b=117;break;case 117:b=0!=(1==(u&1)|0)?118:119;break;case 118:b=H;HEAP32[(aa+12|0)>>2]=b;HEAP32[(K+8|0)>>2]=b;HEAP32[(H+
8|0)>>2]=aa;HEAP32[(H+12|0)>>2]=K;HEAP32[(H+24|0)>>2]=0;b=121;break;case 119:_abort();b=121;break;case 120:b=108;break;case 121:b=122;break;case 122:b=123;break;case 123:b=124;break;case 124:c=g+8|0;b=128;break;case 125:b=126;break;case 126:_abort();b=127;break;case 127:c=0;b=128;break;case 128:return c;default:assert(0,"bad label: "+b)}}__ZL13tmalloc_largeP12malloc_statej.X=1;
function __ZL9sys_allocP12malloc_statej(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h,i,j,l,k,n,r,t,p,q,v,w,m,x;a=f;d=e;g=-1;i=h=0;b=0!=(HEAP32[(__ZL7mparams|0)>>2]|0)?4:3;break;case 3:__ZL12init_mparamsv();b=4;break;case 4:b=0!=(HEAP32[(a+440|0)>>2]&0|0)?5:10;break;case 5:b=d>>>0>=HEAP32[(__ZL7mparams+12|0)>>2]>>>0?6:10;break;case 6:b=0!=(HEAP32[(a+12|0)>>2]|0)?7:10;break;case 7:j=__ZL10mmap_allocP12malloc_statej(a,d);b=0!=(j|0)?8:9;break;case 8:c=j;b=93;break;case 9:b=10;break;case 10:b=0!=
(HEAP32[(a+440|0)>>2]&4|0)?43:11;break;case 11:l=-1;b=0==(HEAP32[(a+24|0)>>2]|0)?12:13;break;case 12:var s=0;b=14;break;case 13:s=__ZL15segment_holdingP12malloc_statePc(a,HEAP32[(a+24|0)>>2]);b=14;break;case 14:k=s;n=0;b=0==(k|0)?15:23;break;case 15:r=_sbrk(0);b=-1!=(r|0)?16:22;break;case 16:n=((d+48|0)+(HEAP32[(__ZL7mparams+8|0)>>2]-1|0)|0)&((HEAP32[(__ZL7mparams+8|0)>>2]-1|0)^-1);b=0==(r&(HEAP32[(__ZL7mparams+4|0)>>2]-1|0)|0)?18:17;break;case 17:n=n+(((r+(HEAP32[(__ZL7mparams+4|0)>>2]-1|0)|0)&((HEAP32[(__ZL7mparams+
4|0)>>2]-1|0)^-1))-r|0)|0;b=18;break;case 18:b=2147483647>n>>>0?19:21;break;case 19:l=b=_sbrk(n);b=(b|0)==(r|0)?20:21;break;case 20:g=r;h=n;b=21;break;case 21:b=22;break;case 22:b=27;break;case 23:n=(((d-HEAP32[(a+12|0)>>2]|0)+48|0)+(HEAP32[(__ZL7mparams+8|0)>>2]-1|0)|0)&((HEAP32[(__ZL7mparams+8|0)>>2]-1|0)^-1);b=2147483647>n>>>0?24:26;break;case 24:l=b=_sbrk(n);b=(b|0)==(HEAP32[(k|0)>>2]+HEAP32[(k+4|0)>>2]|0)?25:26;break;case 25:g=l;h=n;b=26;break;case 26:b=27;break;case 27:b=-1==(g|0)?28:42;break;
case 28:b=-1!=(l|0)?29:38;break;case 29:b=2147483647>n>>>0?30:37;break;case 30:b=n>>>0<(d+48|0)>>>0?31:37;break;case 31:t=(((d+48|0)-n|0)+(HEAP32[(__ZL7mparams+8|0)>>2]-1|0)|0)&((HEAP32[(__ZL7mparams+8|0)>>2]-1|0)^-1);b=2147483647>t>>>0?32:36;break;case 32:b=_sbrk(t);b=-1!=(b|0)?33:34;break;case 33:n=n+t|0;b=35;break;case 34:_sbrk(-n|0);l=-1;b=35;break;case 35:b=36;break;case 36:b=37;break;case 37:b=38;break;case 38:b=-1!=(l|0)?39:40;break;case 39:g=l;h=n;b=41;break;case 40:b=a+440|0;HEAP32[b>>2]|=
4;b=41;break;case 41:b=42;break;case 42:b=43;break;case 43:b=-1==(g|0)?44:53;break;case 44:p=((d+48|0)+(HEAP32[(__ZL7mparams+8|0)>>2]-1|0)|0)&((HEAP32[(__ZL7mparams+8|0)>>2]-1|0)^-1);b=2147483647>p>>>0?45:52;break;case 45:q=_sbrk(p);v=_sbrk(0);b=-1!=(q|0)?46:51;break;case 46:b=-1!=(v|0)?47:51;break;case 47:b=q>>>0<v>>>0?48:51;break;case 48:w=v-q|0;b=w>>>0>(d+40|0)>>>0?49:50;break;case 49:g=q;h=w;b=50;break;case 50:b=51;break;case 51:b=52;break;case 52:b=53;break;case 53:b=-1!=(g|0)?54:92;break;case 54:b=
a+432|0;x=HEAP32[b>>2]+h|0;HEAP32[b>>2]=x;b=x>>>0>HEAP32[(a+436|0)>>2]>>>0?55:56;break;case 55:HEAP32[(a+436|0)>>2]=HEAP32[(a+432|0)>>2];b=56;break;case 56:b=0!=(HEAP32[(a+24|0)>>2]|0)?64:57;break;case 57:b=0==(HEAP32[(a+16|0)>>2]|0)?59:58;break;case 58:b=g>>>0<HEAP32[(a+16|0)>>2]>>>0?59:60;break;case 59:HEAP32[(a+16|0)>>2]=g;b=60;break;case 60:HEAP32[(a+444|0)>>2]=g;HEAP32[((a+444|0)+4|0)>>2]=h;HEAP32[((a+444|0)+12|0)>>2]=i;HEAP32[(a+36|0)>>2]=HEAP32[(__ZL7mparams|0)>>2];HEAP32[(a+32|0)>>2]=-1;__ZL9init_binsP12malloc_state(a);
b=(a|0)==(__ZL4_gm_|0)?61:62;break;case 61:__ZL8init_topP12malloc_stateP12malloc_chunkj(a,g,h-40|0);b=63;break;case 62:b=(a-8|0)+(HEAP32[((a-8|0)+4|0)>>2]&-8)|0;__ZL8init_topP12malloc_stateP12malloc_chunkj(a,b,((g+h|0)-b|0)-40|0);b=63;break;case 63:b=89;break;case 64:m=a+444|0;b=65;break;case 65:if(0!=(m|0))b=66;else{var y=0;b=67}break;case 66:y=(g|0)!=(HEAP32[(m|0)>>2]+HEAP32[(m+4|0)>>2]|0);b=67;break;case 67:b=y?68:69;break;case 68:m=HEAP32[(m+8|0)>>2];b=65;break;case 69:b=0!=(m|0)?70:75;break;
case 70:b=0!=(HEAP32[(m+12|0)>>2]&8|0)?75:71;break;case 71:b=(HEAP32[(m+12|0)>>2]&0|0)==(i|0)?72:75;break;case 72:b=HEAP32[(a+24|0)>>2]>>>0>=HEAP32[(m|0)>>2]>>>0?73:75;break;case 73:b=HEAP32[(a+24|0)>>2]>>>0<(HEAP32[(m|0)>>2]+HEAP32[(m+4|0)>>2]|0)>>>0?74:75;break;case 74:b=m+4|0;HEAP32[b>>2]=HEAP32[b>>2]+h|0;__ZL8init_topP12malloc_stateP12malloc_chunkj(a,HEAP32[(a+24|0)>>2],HEAP32[(a+12|0)>>2]+h|0);b=88;break;case 75:b=g>>>0<HEAP32[(a+16|0)>>2]>>>0?76:77;break;case 76:HEAP32[(a+16|0)>>2]=g;b=77;break;
case 77:m=a+444|0;b=78;break;case 78:if(0!=(m|0))b=79;else{var B=0;b=80}break;case 79:B=(HEAP32[(m|0)>>2]|0)!=(g+h|0);b=80;break;case 80:b=B?81:82;break;case 81:m=HEAP32[(m+8|0)>>2];b=78;break;case 82:b=0!=(m|0)?83:86;break;case 83:b=0!=(HEAP32[(m+12|0)>>2]&8|0)?86:84;break;case 84:b=(HEAP32[(m+12|0)>>2]&0|0)==(i|0)?85:86;break;case 85:c=HEAP32[(m|0)>>2];HEAP32[(m|0)>>2]=g;b=m+4|0;HEAP32[b>>2]=HEAP32[b>>2]+h|0;c=__ZL13prepend_allocP12malloc_statePcS1_j(a,g,c,d);b=93;break;case 86:__ZL11add_segmentP12malloc_statePcjj(a,
g,h,i);b=87;break;case 87:b=88;break;case 88:b=89;break;case 89:b=d>>>0<HEAP32[(a+12|0)>>2]>>>0?90:91;break;case 90:c=a+12|0;b=HEAP32[c>>2]-d|0;c=HEAP32[c>>2]=b;b=HEAP32[(a+24|0)>>2];x=b+d|0;HEAP32[(a+24|0)>>2]=x;HEAP32[(x+4|0)>>2]=c|1;HEAP32[(b+4|0)>>2]=d|3;c=b+8|0;b=93;break;case 91:b=92;break;case 92:c=___errno();HEAP32[c>>2]=12;c=0;b=93;break;case 93:return c;default:assert(0,"bad label: "+b)}}__ZL9sys_allocP12malloc_statej.X=1;
function _free(f){var e;for(e=2;;)switch(e){case 2:var b,c,a,d,g,h,i,j,l,k,n,r,t,p,q,v,w,m,x,s,y,B,A,G,z,E,M,C,H,L,R,I,K,Q,O,aa,J,la,ba,U,T,ua,N;b=f;e=0!=(b|0)?3:197;break;case 3:c=b-8|0;if(c>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0)e=4;else{var u=0;e=5}break;case 4:u=1!=(HEAP32[(c+4|0)>>2]&3|0);e=5;break;case 5:e=0!=(1==(u&1)|0)?6:194;break;case 6:a=HEAP32[(c+4|0)>>2]&-8;d=c+a|0;e=0!=(HEAP32[(c+4|0)>>2]&1|0)?78:7;break;case 7:g=HEAP32[(c|0)>>2];e=0==(HEAP32[(c+4|0)>>2]&3|0)?8:9;break;case 8:a=a+(g+16|
0)|0;e=196;break;case 9:e=c+(-g|0)|0;a=a+g|0;c=e;e=0!=(1==(e>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0&1)|0)?10:75;break;case 10:e=(c|0)!=(HEAP32[(__ZL4_gm_+20|0)>>2]|0)?11:71;break;case 11:e=32>g>>>3>>>0?12:24;break;case 12:h=HEAP32[(c+8|0)>>2];i=HEAP32[(c+12|0)>>2];j=g>>>3;e=(h|0)==(i|0)?13:14;break;case 13:HEAP32[(__ZL4_gm_|0)>>2]&=1<<j^-1;e=23;break;case 14:e=(h|0)==((__ZL4_gm_+40|0)+(j<<1<<2)|0)?16:15;break;case 15:if(h>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0)e=16;else{var na=0;e=19}break;case 16:if((i|
0)==((__ZL4_gm_+40|0)+(j<<1<<2)|0)){var Z=1;e=18}else e=17;break;case 17:Z=i>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0;e=18;break;case 18:na=Z;e=19;break;case 19:e=0!=(1==(na&1)|0)?20:21;break;case 20:HEAP32[(h+12|0)>>2]=i;HEAP32[(i+8|0)>>2]=h;e=22;break;case 21:_abort();e=22;break;case 22:e=23;break;case 23:e=70;break;case 24:l=c;k=HEAP32[(l+24|0)>>2];e=(HEAP32[(l+12|0)>>2]|0)!=(l|0)?25:29;break;case 25:r=HEAP32[(l+8|0)>>2];n=HEAP32[(l+12|0)>>2];e=0!=(1==(r>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0&1)|0)?
26:27;break;case 26:HEAP32[(r+12|0)>>2]=n;HEAP32[(n+8|0)>>2]=r;e=28;break;case 27:_abort();e=28;break;case 28:e=41;break;case 29:t=n=(l+16|0)+4|0;n=e=HEAP32[n>>2];e=0!=(e|0)?31:30;break;case 30:t=n=l+16|0;n=e=HEAP32[n>>2];e=0!=(e|0)?31:40;break;case 31:e=32;break;case 32:p=e=(n+16|0)+4|0;if(0!=(HEAP32[e>>2]|0)){var Aa=1;e=34}else e=33;break;case 33:p=Aa=n+16|0;Aa=0!=(HEAP32[Aa>>2]|0);e=34;break;case 34:e=Aa?35:36;break;case 35:t=n=p;n=HEAP32[n>>2];e=32;break;case 36:e=0!=(1==(t>>>0>=HEAP32[(__ZL4_gm_+
16|0)>>2]>>>0&1)|0)?37:38;break;case 37:HEAP32[t>>2]=0;e=39;break;case 38:_abort();e=39;break;case 39:e=40;break;case 40:e=41;break;case 41:e=0!=(k|0)?42:69;break;case 42:q=(__ZL4_gm_+304|0)+(HEAP32[(l+28|0)>>2]<<2)|0;e=(l|0)==(HEAP32[q>>2]|0)?43:46;break;case 43:e=n;HEAP32[q>>2]=e;e=0==(e|0)?44:45;break;case 44:HEAP32[(__ZL4_gm_+4|0)>>2]&=1<<HEAP32[(l+28|0)>>2]^-1;e=45;break;case 45:e=53;break;case 46:e=0!=(1==(k>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0&1)|0)?47:51;break;case 47:e=(HEAP32[(k+16|0)>>
2]|0)==(l|0)?48:49;break;case 48:HEAP32[(k+16|0)>>2]=n;e=50;break;case 49:HEAP32[((k+16|0)+4|0)>>2]=n;e=50;break;case 50:e=52;break;case 51:_abort();e=52;break;case 52:e=53;break;case 53:e=0!=(n|0)?54:68;break;case 54:e=0!=(1==(n>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0&1)|0)?55:66;break;case 55:HEAP32[(n+24|0)>>2]=k;v=e=HEAP32[(l+16|0)>>2];e=0!=(e|0)?56:60;break;case 56:e=0!=(1==(v>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0&1)|0)?57:58;break;case 57:HEAP32[(n+16|0)>>2]=v;HEAP32[(v+24|0)>>2]=n;e=59;break;case 58:_abort();
e=59;break;case 59:e=60;break;case 60:w=e=HEAP32[((l+16|0)+4|0)>>2];e=0!=(e|0)?61:65;break;case 61:e=0!=(1==(w>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0&1)|0)?62:63;break;case 62:HEAP32[((n+16|0)+4|0)>>2]=w;HEAP32[(w+24|0)>>2]=n;e=64;break;case 63:_abort();e=64;break;case 64:e=65;break;case 65:e=67;break;case 66:_abort();e=67;break;case 67:e=68;break;case 68:e=69;break;case 69:e=70;break;case 70:e=74;break;case 71:e=3==(HEAP32[(d+4|0)>>2]&3|0)?72:73;break;case 72:HEAP32[(__ZL4_gm_+8|0)>>2]=a;e=d+4|0;HEAP32[e>>
2]&=-2;HEAP32[(c+4|0)>>2]=a|1;HEAP32[(c+a|0)>>2]=a;e=196;break;case 73:e=74;break;case 74:e=76;break;case 75:e=195;break;case 76:e=77;break;case 77:e=78;break;case 78:if(c>>>0<d>>>0)e=79;else{var Da=0;e=80}break;case 79:Da=0!=(HEAP32[(d+4|0)>>2]&1|0);e=80;break;case 80:e=0!=(1==(Da&1)|0)?81:193;break;case 81:e=0!=(HEAP32[(d+4|0)>>2]&2|0)?154:82;break;case 82:e=(d|0)==(HEAP32[(__ZL4_gm_+24|0)>>2]|0)?83:88;break;case 83:m=HEAP32[(__ZL4_gm_+12|0)>>2]+a|0;HEAP32[(__ZL4_gm_+12|0)>>2]=m;HEAP32[(__ZL4_gm_+
24|0)>>2]=c;HEAP32[(c+4|0)>>2]=m|1;e=(c|0)==(HEAP32[(__ZL4_gm_+20|0)>>2]|0)?84:85;break;case 84:HEAP32[(__ZL4_gm_+20|0)>>2]=0;HEAP32[(__ZL4_gm_+8|0)>>2]=0;e=85;break;case 85:e=m>>>0>HEAP32[(__ZL4_gm_+28|0)>>2]>>>0?86:87;break;case 86:__ZL8sys_trimP12malloc_statej(__ZL4_gm_,0);e=87;break;case 87:e=196;break;case 88:e=(d|0)==(HEAP32[(__ZL4_gm_+20|0)>>2]|0)?89:90;break;case 89:e=HEAP32[(__ZL4_gm_+8|0)>>2]+a|0;HEAP32[(__ZL4_gm_+8|0)>>2]=e;HEAP32[(__ZL4_gm_+20|0)>>2]=c;HEAP32[(c+4|0)>>2]=e|1;HEAP32[(c+
e|0)>>2]=e;e=196;break;case 90:x=HEAP32[(d+4|0)>>2]&-8;a=a+x|0;e=32>x>>>3>>>0?91:103;break;case 91:s=HEAP32[(d+8|0)>>2];y=HEAP32[(d+12|0)>>2];B=x>>>3;e=(s|0)==(y|0)?92:93;break;case 92:HEAP32[(__ZL4_gm_|0)>>2]&=1<<B^-1;e=102;break;case 93:e=(s|0)==((__ZL4_gm_+40|0)+(B<<1<<2)|0)?95:94;break;case 94:if(s>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0)e=95;else{var ja=0;e=98}break;case 95:if((y|0)==((__ZL4_gm_+40|0)+(B<<1<<2)|0)){var X=1;e=97}else e=96;break;case 96:X=y>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0;e=
97;break;case 97:ja=X;e=98;break;case 98:e=0!=(1==(ja&1)|0)?99:100;break;case 99:HEAP32[(s+12|0)>>2]=y;HEAP32[(y+8|0)>>2]=s;e=101;break;case 100:_abort();e=101;break;case 101:e=102;break;case 102:e=149;break;case 103:A=d;G=HEAP32[(A+24|0)>>2];e=(HEAP32[(A+12|0)>>2]|0)!=(A|0)?104:108;break;case 104:E=HEAP32[(A+8|0)>>2];z=HEAP32[(A+12|0)>>2];e=0!=(1==(E>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0&1)|0)?105:106;break;case 105:HEAP32[(E+12|0)>>2]=z;HEAP32[(z+8|0)>>2]=E;e=107;break;case 106:_abort();e=107;break;
case 107:e=120;break;case 108:M=z=(A+16|0)+4|0;z=e=HEAP32[z>>2];e=0!=(e|0)?110:109;break;case 109:M=z=A+16|0;z=e=HEAP32[z>>2];e=0!=(e|0)?110:119;break;case 110:e=111;break;case 111:C=e=(z+16|0)+4|0;if(0!=(HEAP32[e>>2]|0)){var ya=1;e=113}else e=112;break;case 112:C=ya=z+16|0;ya=0!=(HEAP32[ya>>2]|0);e=113;break;case 113:e=ya?114:115;break;case 114:M=z=C;z=HEAP32[z>>2];e=111;break;case 115:e=0!=(1==(M>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0&1)|0)?116:117;break;case 116:HEAP32[M>>2]=0;e=118;break;case 117:_abort();
e=118;break;case 118:e=119;break;case 119:e=120;break;case 120:e=0!=(G|0)?121:148;break;case 121:H=(__ZL4_gm_+304|0)+(HEAP32[(A+28|0)>>2]<<2)|0;e=(A|0)==(HEAP32[H>>2]|0)?122:125;break;case 122:e=z;HEAP32[H>>2]=e;e=0==(e|0)?123:124;break;case 123:HEAP32[(__ZL4_gm_+4|0)>>2]&=1<<HEAP32[(A+28|0)>>2]^-1;e=124;break;case 124:e=132;break;case 125:e=0!=(1==(G>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0&1)|0)?126:130;break;case 126:e=(HEAP32[(G+16|0)>>2]|0)==(A|0)?127:128;break;case 127:HEAP32[(G+16|0)>>2]=z;e=129;
break;case 128:HEAP32[((G+16|0)+4|0)>>2]=z;e=129;break;case 129:e=131;break;case 130:_abort();e=131;break;case 131:e=132;break;case 132:e=0!=(z|0)?133:147;break;case 133:e=0!=(1==(z>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0&1)|0)?134:145;break;case 134:HEAP32[(z+24|0)>>2]=G;L=e=HEAP32[(A+16|0)>>2];e=0!=(e|0)?135:139;break;case 135:e=0!=(1==(L>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0&1)|0)?136:137;break;case 136:HEAP32[(z+16|0)>>2]=L;HEAP32[(L+24|0)>>2]=z;e=138;break;case 137:_abort();e=138;break;case 138:e=
139;break;case 139:R=e=HEAP32[((A+16|0)+4|0)>>2];e=0!=(e|0)?140:144;break;case 140:e=0!=(1==(R>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0&1)|0)?141:142;break;case 141:HEAP32[((z+16|0)+4|0)>>2]=R;HEAP32[(R+24|0)>>2]=z;e=143;break;case 142:_abort();e=143;break;case 143:e=144;break;case 144:e=146;break;case 145:_abort();e=146;break;case 146:e=147;break;case 147:e=148;break;case 148:e=149;break;case 149:HEAP32[(c+4|0)>>2]=a|1;HEAP32[(c+a|0)>>2]=a;e=(c|0)==(HEAP32[(__ZL4_gm_+20|0)>>2]|0)?150:151;break;case 150:HEAP32[(__ZL4_gm_+
8|0)>>2]=a;e=196;break;case 151:e=152;break;case 152:e=153;break;case 153:e=155;break;case 154:e=d+4|0;HEAP32[e>>2]&=-2;HEAP32[(c+4|0)>>2]=a|1;HEAP32[(c+a|0)>>2]=a;e=155;break;case 155:e=32>a>>>3>>>0?156:163;break;case 156:I=a>>>3;Q=K=(__ZL4_gm_+40|0)+(I<<1<<2)|0;e=0!=(HEAP32[(__ZL4_gm_|0)>>2]&1<<I|0)?158:157;break;case 157:HEAP32[(__ZL4_gm_|0)>>2]|=1<<I;e=162;break;case 158:e=0!=(1==(HEAP32[(K+8|0)>>2]>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0&1)|0)?159:160;break;case 159:Q=HEAP32[(K+8|0)>>2];e=161;break;
case 160:_abort();e=161;break;case 161:e=162;break;case 162:HEAP32[(K+8|0)>>2]=c;HEAP32[(Q+12|0)>>2]=c;HEAP32[(c+8|0)>>2]=Q;HEAP32[(c+12|0)>>2]=K;e=192;break;case 163:O=c;la=a>>>8;e=0==(la|0)?164:165;break;case 164:J=0;e=169;break;case 165:e=65535<la>>>0?166:167;break;case 166:J=31;e=168;break;case 167:J=la;e=(J-256|0)>>>16&8;J=ba=J<<e;ba=(ba-4096|0)>>>16&4;e=e+ba|0;J=ba=J<<ba;var ca=(ba-16384|0)>>>16&2;ba=ca;e=e+ca|0;ba=(14-e|0)+(J<<ba>>>15)|0;J=(ba<<1)+(a>>>((ba+7|0)>>>0)&1)|0;e=168;break;case 168:e=
169;break;case 169:aa=(__ZL4_gm_+304|0)+(J<<2)|0;HEAP32[(O+28|0)>>2]=J;HEAP32[((O+16|0)+4|0)>>2]=0;HEAP32[(O+16|0)>>2]=0;e=0!=(HEAP32[(__ZL4_gm_+4|0)>>2]&1<<J|0)?171:170;break;case 170:HEAP32[(__ZL4_gm_+4|0)>>2]|=1<<J;HEAP32[aa>>2]=O;HEAP32[(O+24|0)>>2]=aa;e=O;HEAP32[(O+12|0)>>2]=e;HEAP32[(O+8|0)>>2]=e;e=189;break;case 171:U=HEAP32[aa>>2];var Na=a;e=31==(J|0)?172:173;break;case 172:var Ba=0;e=174;break;case 173:Ba=31-(((J>>>1)+8|0)-2|0)|0;e=174;break;case 174:T=Na<<Ba;e=175;break;case 175:e=(HEAP32[(U+
4|0)>>2]&-8|0)!=(a|0)?176:182;break;case 176:ua=(U+16|0)+((T>>>31&1)<<2)|0;T<<=1;e=0!=(HEAP32[ua>>2]|0)?177:178;break;case 177:U=HEAP32[ua>>2];e=181;break;case 178:e=0!=(1==(ua>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0&1)|0)?179:180;break;case 179:HEAP32[ua>>2]=O;HEAP32[(O+24|0)>>2]=U;e=O;HEAP32[(O+12|0)>>2]=e;HEAP32[(O+8|0)>>2]=e;e=188;break;case 180:_abort();e=188;break;case 181:e=187;break;case 182:N=HEAP32[(U+8|0)>>2];if(U>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0)e=183;else{var va=0;e=184}break;case 183:va=
N>>>0>=HEAP32[(__ZL4_gm_+16|0)>>2]>>>0;e=184;break;case 184:e=0!=(1==(va&1)|0)?185:186;break;case 185:e=O;HEAP32[(N+12|0)>>2]=e;HEAP32[(U+8|0)>>2]=e;HEAP32[(O+8|0)>>2]=N;HEAP32[(O+12|0)>>2]=U;HEAP32[(O+24|0)>>2]=0;e=188;break;case 186:_abort();e=188;break;case 187:e=175;break;case 188:e=189;break;case 189:e=HEAP32[(__ZL4_gm_+32|0)>>2]-1|0;HEAP32[(__ZL4_gm_+32|0)>>2]=e;e=0==(e|0)?190:191;break;case 190:__ZL23release_unused_segmentsP12malloc_state(__ZL4_gm_);e=191;break;case 191:e=192;break;case 192:e=
196;break;case 193:e=194;break;case 194:e=195;break;case 195:_abort();e=196;break;case 196:e=197;break;case 197:return;default:assert(0,"bad label: "+e)}}Module._free=_free;_free.X=1;
function __ZL8sys_trimP12malloc_statej(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h,i,j,l;c=f;a=e;d=0;b=0!=(HEAP32[(__ZL7mparams|0)>>2]|0)?4:3;break;case 3:__ZL12init_mparamsv();b=4;break;case 4:b=4294967232>a>>>0?5:26;break;case 5:b=0!=(HEAP32[(c+24|0)>>2]|0)?6:26;break;case 6:a=a+40|0;b=HEAP32[(c+12|0)>>2]>>>0>a>>>0?7:22;break;case 7:g=HEAP32[(__ZL7mparams+8|0)>>2];h=(Math.floor((((HEAP32[(c+12|0)>>2]-a|0)+(g-1|0)|0)>>>0)/(g>>>0))-1|0)*g|0;i=__ZL15segment_holdingP12malloc_statePc(c,HEAP32[(c+
24|0)>>2]);b=0!=(HEAP32[(i+12|0)>>2]&8|0)?19:8;break;case 8:b=0!=(HEAP32[(i+12|0)>>2]&0|0)?9:10;break;case 9:b=18;break;case 10:b=2147483647<=h>>>0?11:12;break;case 11:h=-2147483648-g|0;b=12;break;case 12:j=_sbrk(0);b=(j|0)==(HEAP32[(i|0)>>2]+HEAP32[(i+4|0)>>2]|0)?13:17;break;case 13:b=_sbrk(-h|0);l=_sbrk(0);b=-1!=(b|0)?14:16;break;case 14:b=l>>>0<j>>>0?15:16;break;case 15:d=j-l|0;b=16;break;case 16:b=17;break;case 17:b=18;break;case 18:b=19;break;case 19:b=0!=(d|0)?20:21;break;case 20:b=i+4|0;HEAP32[b>>
2]=HEAP32[b>>2]-d|0;b=c+432|0;HEAP32[b>>2]=HEAP32[b>>2]-d|0;__ZL8init_topP12malloc_stateP12malloc_chunkj(c,HEAP32[(c+24|0)>>2],HEAP32[(c+12|0)>>2]-d|0);b=21;break;case 21:b=22;break;case 22:b=0==(d|0)?23:25;break;case 23:b=HEAP32[(c+12|0)>>2]>>>0>HEAP32[(c+28|0)>>2]>>>0?24:25;break;case 24:HEAP32[(c+28|0)>>2]=-1;b=25;break;case 25:b=26;break;case 26:return 0!=(d|0)?1:0;default:assert(0,"bad label: "+b)}}__ZL8sys_trimP12malloc_statej.X=1;
function __ZL23release_unused_segmentsP12malloc_state(f){var e;for(e=2;;)switch(e){case 2:var b,c,a,d,g,h,i,j,l,k,n,r,t,p,q,v,w,m,x,s,y,B,A,G,z,E;b=f;a=c=0;d=HEAP32[((b+444|0)+8|0)>>2];e=3;break;case 3:e=0!=(d|0)?4:88;break;case 4:g=HEAP32[(d|0)>>2];h=HEAP32[(d+4|0)>>2];i=HEAP32[(d+8|0)>>2];a=a+1|0;e=0!=(HEAP32[(d+12|0)>>2]&0|0)?5:87;break;case 5:e=0!=(HEAP32[(d+12|0)>>2]&8|0)?87:6;break;case 6:var M=g;e=0==((g+8|0)&7|0)?7:8;break;case 7:var C=0;e=9;break;case 8:C=(8-((g+8|0)&7)|0)&7;e=9;break;case 9:j=
M+C|0;l=HEAP32[(j+4|0)>>2]&-8;e=1!=(HEAP32[(j+4|0)>>2]&3|0)?86:10;break;case 10:e=(j+l|0)>>>0>=((g+h|0)-40|0)>>>0?11:86;break;case 11:k=j;e=(j|0)==(HEAP32[(b+20|0)>>2]|0)?12:13;break;case 12:HEAP32[(b+20|0)>>2]=0;HEAP32[(b+8|0)>>2]=0;e=59;break;case 13:n=HEAP32[(k+24|0)>>2];e=(HEAP32[(k+12|0)>>2]|0)!=(k|0)?14:18;break;case 14:t=HEAP32[(k+8|0)>>2];r=HEAP32[(k+12|0)>>2];e=0!=(1==(t>>>0>=HEAP32[(b+16|0)>>2]>>>0&1)|0)?15:16;break;case 15:HEAP32[(t+12|0)>>2]=r;HEAP32[(r+8|0)>>2]=t;e=17;break;case 16:_abort();
e=17;break;case 17:e=30;break;case 18:p=r=(k+16|0)+4|0;r=e=HEAP32[r>>2];e=0!=(e|0)?20:19;break;case 19:p=r=k+16|0;r=e=HEAP32[r>>2];e=0!=(e|0)?20:29;break;case 20:e=21;break;case 21:q=e=(r+16|0)+4|0;if(0!=(HEAP32[e>>2]|0)){var H=1;e=23}else e=22;break;case 22:q=H=r+16|0;H=0!=(HEAP32[H>>2]|0);e=23;break;case 23:e=H?24:25;break;case 24:p=r=q;r=HEAP32[r>>2];e=21;break;case 25:e=0!=(1==(p>>>0>=HEAP32[(b+16|0)>>2]>>>0&1)|0)?26:27;break;case 26:HEAP32[p>>2]=0;e=28;break;case 27:_abort();e=28;break;case 28:e=
29;break;case 29:e=30;break;case 30:e=0!=(n|0)?31:58;break;case 31:v=(b+304|0)+(HEAP32[(k+28|0)>>2]<<2)|0;e=(k|0)==(HEAP32[v>>2]|0)?32:35;break;case 32:e=r;HEAP32[v>>2]=e;e=0==(e|0)?33:34;break;case 33:e=b+4|0;HEAP32[e>>2]&=1<<HEAP32[(k+28|0)>>2]^-1;e=34;break;case 34:e=42;break;case 35:e=0!=(1==(n>>>0>=HEAP32[(b+16|0)>>2]>>>0&1)|0)?36:40;break;case 36:e=(HEAP32[(n+16|0)>>2]|0)==(k|0)?37:38;break;case 37:HEAP32[(n+16|0)>>2]=r;e=39;break;case 38:HEAP32[((n+16|0)+4|0)>>2]=r;e=39;break;case 39:e=41;
break;case 40:_abort();e=41;break;case 41:e=42;break;case 42:e=0!=(r|0)?43:57;break;case 43:e=0!=(1==(r>>>0>=HEAP32[(b+16|0)>>2]>>>0&1)|0)?44:55;break;case 44:HEAP32[(r+24|0)>>2]=n;w=e=HEAP32[(k+16|0)>>2];e=0!=(e|0)?45:49;break;case 45:e=0!=(1==(w>>>0>=HEAP32[(b+16|0)>>2]>>>0&1)|0)?46:47;break;case 46:HEAP32[(r+16|0)>>2]=w;HEAP32[(w+24|0)>>2]=r;e=48;break;case 47:_abort();e=48;break;case 48:e=49;break;case 49:m=e=HEAP32[((k+16|0)+4|0)>>2];e=0!=(e|0)?50:54;break;case 50:e=0!=(1==(m>>>0>=HEAP32[(b+
16|0)>>2]>>>0&1)|0)?51:52;break;case 51:HEAP32[((r+16|0)+4|0)>>2]=m;HEAP32[(m+24|0)>>2]=r;e=53;break;case 52:_abort();e=53;break;case 53:e=54;break;case 54:e=56;break;case 55:_abort();e=56;break;case 56:e=57;break;case 57:e=58;break;case 58:e=59;break;case 59:y=l>>>8;e=0==(y|0)?60:61;break;case 60:s=0;e=65;break;case 61:e=65535<y>>>0?62:63;break;case 62:s=31;e=64;break;case 63:s=y;e=(s-256|0)>>>16&8;s=B=s<<e;B=(B-4096|0)>>>16&4;e=e+B|0;s=B=s<<B;var L=(B-16384|0)>>>16&2;B=L;e=e+L|0;B=(14-e|0)+(s<<
B>>>15)|0;s=(B<<1)+(l>>>((B+7|0)>>>0)&1)|0;e=64;break;case 64:e=65;break;case 65:x=(b+304|0)+(s<<2)|0;HEAP32[(k+28|0)>>2]=s;HEAP32[((k+16|0)+4|0)>>2]=0;HEAP32[(k+16|0)>>2]=0;e=0!=(HEAP32[(b+4|0)>>2]&1<<s|0)?67:66;break;case 66:e=b+4|0;HEAP32[e>>2]|=1<<s;HEAP32[x>>2]=k;HEAP32[(k+24|0)>>2]=x;e=k;HEAP32[(k+12|0)>>2]=e;HEAP32[(k+8|0)>>2]=e;e=85;break;case 67:A=HEAP32[x>>2];var R=l;e=31==(s|0)?68:69;break;case 68:var I=0;e=70;break;case 69:I=31-(((s>>>1)+8|0)-2|0)|0;e=70;break;case 70:G=R<<I;e=71;break;
case 71:e=(HEAP32[(A+4|0)>>2]&-8|0)!=(l|0)?72:78;break;case 72:z=(A+16|0)+((G>>>31&1)<<2)|0;G<<=1;e=0!=(HEAP32[z>>2]|0)?73:74;break;case 73:A=HEAP32[z>>2];e=77;break;case 74:e=0!=(1==(z>>>0>=HEAP32[(b+16|0)>>2]>>>0&1)|0)?75:76;break;case 75:HEAP32[z>>2]=k;HEAP32[(k+24|0)>>2]=A;e=k;HEAP32[(k+12|0)>>2]=e;HEAP32[(k+8|0)>>2]=e;e=84;break;case 76:_abort();e=84;break;case 77:e=83;break;case 78:E=HEAP32[(A+8|0)>>2];if(A>>>0>=HEAP32[(b+16|0)>>2]>>>0)e=79;else{var K=0;e=80}break;case 79:K=E>>>0>=HEAP32[(b+
16|0)>>2]>>>0;e=80;break;case 80:e=0!=(1==(K&1)|0)?81:82;break;case 81:e=k;HEAP32[(E+12|0)>>2]=e;HEAP32[(A+8|0)>>2]=e;HEAP32[(k+8|0)>>2]=E;HEAP32[(k+12|0)>>2]=A;HEAP32[(k+24|0)>>2]=0;e=84;break;case 82:_abort();e=84;break;case 83:e=71;break;case 84:e=85;break;case 85:e=86;break;case 86:e=87;break;case 87:d=i;e=3;break;case 88:e=4294967295<a>>>0?89:90;break;case 89:var Q=a;e=91;break;case 90:Q=-1;e=91;break;case 91:return HEAP32[(b+32|0)>>2]=Q,c;default:assert(0,"bad label: "+e)}}
__ZL23release_unused_segmentsP12malloc_state.X=1;function _calloc(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g;c=f;a=e;g=0;b=0!=(c|0)?3:7;break;case 3:g=c*a|0;b=0!=((c|a)&-65536|0)?4:6;break;case 4:b=(Math.floor((g>>>0)/(c>>>0))|0)!=(a|0)?5:6;break;case 5:g=-1;b=6;break;case 6:b=7;break;case 7:d=_malloc(g);b=0!=(d|0)?8:10;break;case 8:b=0==(HEAP32[((d-8|0)+4|0)>>2]&3|0)?10:9;break;case 9:_memset(d,0,g,1);b=10;break;case 10:return d;default:assert(0,"bad label: "+b)}}
function _realloc(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;a=f;d=e;b=0==(a|0)?3:4;break;case 3:c=_malloc(d);b=5;break;case 4:b=__ZL4_gm_;c=__ZL16internal_reallocP12malloc_statePvj(b,a,d);b=5;break;case 5:return c;default:assert(0,"bad label: "+b)}}
function __ZL16internal_reallocP12malloc_statePvj(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h,i,j,l,k,n,r,t,p,q;d=f;g=e;h=b;c=4294967232<=h>>>0?3:4;break;case 3:a=___errno();HEAP32[a>>2]=12;a=0;c=32;break;case 4:i=g-8|0;j=HEAP32[(i+4|0)>>2]&-8;l=i+j|0;n=k=0;if(i>>>0>=HEAP32[(d+16|0)>>2]>>>0)c=5;else{var v=0;c=8}break;case 5:1!=(HEAP32[(i+4|0)>>2]&3|0)?c=6:(v=0,c=8);break;case 6:i>>>0<l>>>0?c=7:(v=0,c=8);break;case 7:v=0!=(HEAP32[(l+4|0)>>2]&1|0);c=8;break;case 8:c=0!=(1==(v&1)|0)?9:24;break;
case 9:c=11>h>>>0?10:11;break;case 10:var w=16;c=12;break;case 11:w=((h+4|0)+7|0)&-8;c=12;break;case 12:r=w;c=0==(HEAP32[(i+4|0)>>2]&3|0)?13:14;break;case 13:k=__ZL11mmap_resizeP12malloc_stateP12malloc_chunkj(d,i,r);c=23;break;case 14:c=j>>>0>=r>>>0?15:18;break;case 15:t=j-r|0;k=i;c=16<=t>>>0?16:17;break;case 16:n=k+r|0;HEAP32[(k+4|0)>>2]=HEAP32[(k+4|0)>>2]&1|r|2;c=(k+r|0)+4|0;HEAP32[c>>2]|=1;HEAP32[(n+4|0)>>2]=t|3;c=(n+t|0)+4|0;HEAP32[c>>2]|=1;n=n+8|0;c=17;break;case 17:c=22;break;case 18:c=(l|0)==
(HEAP32[(d+24|0)>>2]|0)?19:21;break;case 19:c=(j+HEAP32[(d+12|0)>>2]|0)>>>0>r>>>0?20:21;break;case 20:k=j+HEAP32[(d+12|0)>>2]|0;k=k-r|0;c=i+r|0;HEAP32[(i+4|0)>>2]=HEAP32[(i+4|0)>>2]&1|r|2;var m=(i+r|0)+4|0;HEAP32[m>>2]|=1;HEAP32[(c+4|0)>>2]=k|1;HEAP32[(d+24|0)>>2]=c;HEAP32[(d+12|0)>>2]=k;k=i;c=21;break;case 21:c=22;break;case 22:c=23;break;case 23:c=25;break;case 24:_abort();a=0;c=32;break;case 25:c=0!=(k|0)?26:29;break;case 26:c=0!=(n|0)?27:28;break;case 27:_free(n);c=28;break;case 28:a=k+8|0;c=
32;break;case 29:p=_malloc(h);c=0!=(p|0)?30:31;break;case 30:q=j-(0==(HEAP32[(i+4|0)>>2]&3|0)?8:4)|0;c=p;var m=g,x=q,s=h;q=q>>>0<h>>>0?x:s;assert(0===q%1,"memcpy given "+q+" bytes to copy. Problem with quantum=1 corrections perhaps?");_memcpy(c,m,q,1);_free(g);c=31;break;case 31:a=p;c=32;break;case 32:return a;default:assert(0,"bad label: "+c)}}__ZL16internal_reallocP12malloc_statePvj.X=1;function _memalign(f,e){return __ZL17internal_memalignP12malloc_statejj(__ZL4_gm_,f,e)}
function __ZL17internal_memalignP12malloc_statejj(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h,i,j,l,k,n,r,t,p,q,v,w;d=f;g=e;h=b;c=8>=g>>>0?3:4;break;case 3:a=_malloc(h);c=38;break;case 4:c=16>g>>>0?5:6;break;case 5:g=16;c=6;break;case 6:c=0!=(g&(g-1|0)|0)?7:11;break;case 7:i=16;c=8;break;case 8:c=i>>>0<g>>>0?9:10;break;case 9:i<<=1;c=8;break;case 10:g=i;c=11;break;case 11:c=h>>>0>=(-64-g|0)>>>0?12:15;break;case 12:c=0!=(d|0)?13:14;break;case 13:c=___errno();HEAP32[c>>2]=12;c=14;break;case 14:c=
37;break;case 15:c=11>h>>>0?16:17;break;case 16:var m=16;c=18;break;case 17:m=((h+4|0)+7|0)&-8;c=18;break;case 18:j=m;l=((j+g|0)+16|0)-4|0;l=_malloc(l);c=0!=(l|0)?19:36;break;case 19:n=k=0;r=l-8|0;c=0!=((l>>>0)%(g>>>0)|0)?20:27;break;case 20:t=(((l+g|0)-1|0)&(-g|0))-8|0;c=16<=(t-r|0)>>>0?21:22;break;case 21:var x=t;c=23;break;case 22:x=t+g|0;c=23;break;case 23:q=p=x;p=p-r|0;v=(HEAP32[(r+4|0)>>2]&-8)-p|0;c=0==(HEAP32[(r+4|0)>>2]&3|0)?24:25;break;case 24:HEAP32[(q|0)>>2]=HEAP32[(r|0)>>2]+p|0;HEAP32[(q+
4|0)>>2]=v;c=26;break;case 25:HEAP32[(q+4|0)>>2]=HEAP32[(q+4|0)>>2]&1|v|2;k=(q+v|0)+4|0;HEAP32[k>>2]|=1;HEAP32[(r+4|0)>>2]=HEAP32[(r+4|0)>>2]&1|p|2;k=(r+p|0)+4|0;HEAP32[k>>2]|=1;k=r+8|0;c=26;break;case 26:r=q;c=27;break;case 27:c=0==(HEAP32[(r+4|0)>>2]&3|0)?31:28;break;case 28:w=HEAP32[(r+4|0)>>2]&-8;c=w>>>0>(j+16|0)>>>0?29:30;break;case 29:c=w-j|0;n=r+j|0;HEAP32[(r+4|0)>>2]=HEAP32[(r+4|0)>>2]&1|j|2;var s=(r+j|0)+4|0;HEAP32[s>>2]|=1;HEAP32[(n+4|0)>>2]=HEAP32[(n+4|0)>>2]&1|c|2;c=(n+c|0)+4|0;HEAP32[c>>
2]|=1;n=n+8|0;c=30;break;case 30:c=31;break;case 31:c=0!=(k|0)?32:33;break;case 32:_free(k);c=33;break;case 33:c=0!=(n|0)?34:35;break;case 34:_free(n);c=35;break;case 35:a=r+8|0;c=38;break;case 36:c=37;break;case 37:a=0;c=38;break;case 38:return a;default:assert(0,"bad label: "+c)}}__ZL17internal_memalignP12malloc_statejj.X=1;
function _independent_calloc(f,e,b){var c=STACKTOP;STACKTOP+=4;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");HEAP32[c>>2]=e;f=__ZL6iallocP12malloc_statejPjiPPv(__ZL4_gm_,f,c,3,b);STACKTOP=c;return f}function _malloc_footprint(){return HEAP32[(__ZL4_gm_+432|0)>>2]}function _malloc_max_footprint(){return HEAP32[(__ZL4_gm_+436|0)>>2]}
function __ZL6iallocP12malloc_statejPjiPPv(f,e,b,c,a){var d;for(d=2;;)switch(d){case 2:var g,h,i,j,l,k,n,r,t,p,q,v,w,m,x;h=f;i=e;j=b;l=c;k=a;d=0!=(HEAP32[(__ZL7mparams|0)>>2]|0)?4:3;break;case 3:__ZL12init_mparamsv();d=4;break;case 4:d=0!=(k|0)?5:8;break;case 5:d=0==(i|0)?6:7;break;case 6:g=k;d=48;break;case 7:w=k;t=0;d=14;break;case 8:d=0==(i|0)?9:10;break;case 9:g=_malloc(0);d=48;break;case 10:w=0;d=11>(i<<2|0)>>>0?11:12;break;case 11:var s=16;d=13;break;case 12:s=(((i<<2|0)+4|0)+7|0)&-8;d=13;break;
case 13:t=s;d=14;break;case 14:d=0!=(l&1|0)?15:19;break;case 15:d=11>HEAP32[j>>2]>>>0?16:17;break;case 16:var y=16;d=18;break;case 17:y=((HEAP32[j>>2]+4|0)+7|0)&-8;d=18;break;case 18:n=y;r=i*n|0;d=27;break;case 19:x=r=n=0;d=20;break;case 20:d=(x|0)!=(i|0)?21:26;break;case 21:d=11>HEAP32[(j+(x<<2)|0)>>2]>>>0?22:23;break;case 22:var B=16;d=24;break;case 23:B=((HEAP32[(j+(x<<2)|0)>>2]+4|0)+7|0)&-8;d=24;break;case 24:r=r+B|0;d=25;break;case 25:x=x+1|0;d=20;break;case 26:d=27;break;case 27:m=r+t|0;d=HEAP32[(h+
440|0)>>2]&0;p=h+440|0;HEAP32[p>>2]=HEAP32[p>>2];p=_malloc(m-4|0);d=0!=(d|0)?28:29;break;case 28:d=h+440|0;HEAP32[d>>2]=HEAP32[d>>2];d=29;break;case 29:d=0==(p|0)?30:31;break;case 30:g=0;d=48;break;case 31:q=p-8|0;v=HEAP32[(q+4|0)>>2]&-8;d=0!=(l&2|0)?32:33;break;case 32:_memset(p,0,(v-4|0)-t|0,4);d=33;break;case 33:d=0==(w|0)?34:35;break;case 34:d=q+r|0;v=v-r|0;w=d+8|0;HEAP32[(d+4|0)>>2]=v|3;v=r;d=35;break;case 35:x=0;d=36;break;case 36:HEAP32[(w+(x<<2)|0)>>2]=q+8|0;d=(x|0)!=(i-1|0)?37:44;break;case 37:d=
0!=(n|0)?38:39;break;case 38:m=n;d=43;break;case 39:d=11>HEAP32[(j+(x<<2)|0)>>2]>>>0?40:41;break;case 40:var A=16;d=42;break;case 41:A=((HEAP32[(j+(x<<2)|0)>>2]+4|0)+7|0)&-8;d=42;break;case 42:m=A;d=43;break;case 43:v=v-m|0;HEAP32[(q+4|0)>>2]=m|3;q=q+m|0;d=45;break;case 44:HEAP32[(q+4|0)>>2]=v|3;d=47;break;case 45:d=46;break;case 46:x=x+1|0;d=36;break;case 47:g=w;d=48;break;case 48:return g;default:assert(0,"bad label: "+d)}}__ZL6iallocP12malloc_statejPjiPPv.X=1;
function _independent_comalloc(f,e,b){return __ZL6iallocP12malloc_statejPjiPPv(__ZL4_gm_,f,e,0,b)}function _valloc(f){var e;for(e=2;;)switch(e){case 2:var b;b=f;e=0!=(HEAP32[(__ZL7mparams|0)>>2]|0)?4:3;break;case 3:__ZL12init_mparamsv();e=4;break;case 4:return f=HEAP32[(__ZL7mparams+4|0)>>2],_memalign(f,b);default:assert(0,"bad label: "+e)}}
function __ZL12init_mparamsv(){var f;for(f=2;;)switch(f){case 2:var e,b;f=0==(HEAP32[(__ZL7mparams|0)>>2]|0)?3:7;break;case 3:b=e=_sysconf(8);f=0!=(b&(b-1|0)|0)?5:4;break;case 4:f=0!=(e&(e-1|0)|0)?5:6;break;case 5:_abort();f=6;break;case 6:HEAP32[(__ZL7mparams+8|0)>>2]=b;HEAP32[(__ZL7mparams+4|0)>>2]=e;HEAP32[(__ZL7mparams+12|0)>>2]=-1;HEAP32[(__ZL7mparams+16|0)>>2]=2097152;HEAP32[(__ZL7mparams+20|0)>>2]=0;HEAP32[(__ZL4_gm_+440|0)>>2]=HEAP32[(__ZL7mparams+20|0)>>2];f=_time(0)^1431655765;f|=8;f&=-8;
HEAP32[(__ZL7mparams|0)>>2]=f;f=7;break;case 7:return 1;default:assert(0,"bad label: "+f)}}function _pvalloc(f){var e;for(e=2;;)switch(e){case 2:var b;b=f;e=0!=(HEAP32[(__ZL7mparams|0)>>2]|0)?4:3;break;case 3:__ZL12init_mparamsv();e=4;break;case 4:return f=HEAP32[(__ZL7mparams+4|0)>>2],_memalign(f,((b+f|0)-1|0)&((f-1|0)^-1));default:assert(0,"bad label: "+e)}}
function _malloc_trim(f){var e;for(e=2;;)switch(e){case 2:var b;b=f;e=0!=(HEAP32[(__ZL7mparams|0)>>2]|0)?4:3;break;case 3:__ZL12init_mparamsv();e=4;break;case 4:return f=__ZL8sys_trimP12malloc_statej(__ZL4_gm_,b);default:assert(0,"bad label: "+e)}}function _mallinfo(f){__ZL17internal_mallinfoP12malloc_state(f,__ZL4_gm_)}
function __ZL17internal_mallinfoP12malloc_state(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h,i,j;c=e;b=f>>2;for(var l=b+10;b<l;b++)HEAP32[b]=0;b=0!=(HEAP32[(__ZL7mparams|0)>>2]|0)?4:3;break;case 3:__ZL12init_mparamsv();b=4;break;case 4:b=0!=(HEAP32[(c+24|0)>>2]|0)?5:21;break;case 5:a=1;g=d=HEAP32[(c+12|0)>>2]+40|0;h=c+444|0;b=6;break;case 6:b=0!=(h|0)?7:20;break;case 7:var k=HEAP32[(h|0)>>2];b=0==((HEAP32[(h|0)>>2]+8|0)&7|0)?8:9;break;case 8:var n=0;b=10;break;case 9:n=(8-((HEAP32[(h|0)>>2]+
8|0)&7)|0)&7;b=10;break;case 10:i=k+n|0;b=11;break;case 11:if(i>>>0>=HEAP32[(h|0)>>2]>>>0)b=12;else{var r=0;b=15}break;case 12:i>>>0<(HEAP32[(h|0)>>2]+HEAP32[(h+4|0)>>2]|0)>>>0?b=13:(r=0,b=15);break;case 13:(i|0)!=(HEAP32[(c+24|0)>>2]|0)?b=14:(r=0,b=15);break;case 14:r=7!=(HEAP32[(i+4|0)>>2]|0);b=15;break;case 15:b=r?16:19;break;case 16:j=HEAP32[(i+4|0)>>2]&-8;g=g+j|0;b=1!=(HEAP32[(i+4|0)>>2]&3|0)?18:17;break;case 17:d=d+j|0;a=a+1|0;b=18;break;case 18:i=i+(HEAP32[(i+4|0)>>2]&-8)|0;b=11;break;case 19:h=
HEAP32[(h+8|0)>>2];b=6;break;case 20:HEAP32[(f|0)>>2]=g;HEAP32[(f+4|0)>>2]=a;HEAP32[(f+16|0)>>2]=HEAP32[(c+432|0)>>2]-g|0;HEAP32[(f+20|0)>>2]=HEAP32[(c+436|0)>>2];HEAP32[(f+28|0)>>2]=HEAP32[(c+432|0)>>2]-d|0;HEAP32[(f+32|0)>>2]=d;HEAP32[(f+36|0)>>2]=HEAP32[(c+12|0)>>2];b=21;break;case 21:return;default:assert(0,"bad label: "+b)}}__ZL17internal_mallinfoP12malloc_state.X=1;function _malloc_stats(){__ZL21internal_malloc_statsP12malloc_state(__ZL4_gm_)}
function __ZL21internal_malloc_statsP12malloc_state(f){var e=STACKTOP;assert(0==STACKTOP%4,"Stack is unaligned");assert(STACKTOP<STACK_MAX,"Ran out of stack");var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h,i;c=f;b=0!=(HEAP32[(__ZL7mparams|0)>>2]|0)?4:3;break;case 3:__ZL12init_mparamsv();b=4;break;case 4:g=d=a=0;b=0!=(HEAP32[(c+24|0)>>2]|0)?5:21;break;case 5:h=c+444|0;a=HEAP32[(c+436|0)>>2];d=HEAP32[(c+432|0)>>2];g=d-(HEAP32[(c+12|0)>>2]+40|0)|0;b=6;break;case 6:b=0!=(h|0)?7:20;break;case 7:var j=
HEAP32[(h|0)>>2];b=0==((HEAP32[(h|0)>>2]+8|0)&7|0)?8:9;break;case 8:var l=0;b=10;break;case 9:l=(8-((HEAP32[(h|0)>>2]+8|0)&7)|0)&7;b=10;break;case 10:i=j+l|0;b=11;break;case 11:if(i>>>0>=HEAP32[(h|0)>>2]>>>0)b=12;else{var k=0;b=15}break;case 12:i>>>0<(HEAP32[(h|0)>>2]+HEAP32[(h+4|0)>>2]|0)>>>0?b=13:(k=0,b=15);break;case 13:(i|0)!=(HEAP32[(c+24|0)>>2]|0)?b=14:(k=0,b=15);break;case 14:k=7!=(HEAP32[(i+4|0)>>2]|0);b=15;break;case 15:b=k?16:19;break;case 16:b=1!=(HEAP32[(i+4|0)>>2]&3|0)?18:17;break;case 17:g=
g-(HEAP32[(i+4|0)>>2]&-8)|0;b=18;break;case 18:i=i+(HEAP32[(i+4|0)>>2]&-8)|0;b=11;break;case 19:h=HEAP32[(h+8|0)>>2];b=6;break;case 20:b=21;break;case 21:f=a;_fprintf(HEAP32[_stderr>>2],__str1589|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=f,tempInt));_fprintf(HEAP32[_stderr>>2],__str11590|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=d,tempInt));_fprintf(HEAP32[_stderr>>2],
__str21591|0,(tempInt=STACKTOP,STACKTOP+=4,assert(STACKTOP<STACK_ROOT+STACK_MAX,"Ran out of stack"),HEAP32[tempInt>>2]=g,tempInt));STACKTOP=e;return;default:assert(0,"bad label: "+b)}}__ZL21internal_malloc_statsP12malloc_state.X=1;function _mallopt(f,e){return __ZL13change_mparamii(f,e)}
function _malloc_usable_size(f){var e;for(e=2;;)switch(e){case 2:var b,c,a;c=f;e=0!=(c|0)?3:6;break;case 3:a=c-8|0;e=1!=(HEAP32[(a+4|0)>>2]&3|0)?4:5;break;case 4:b=(HEAP32[(a+4|0)>>2]&-8)-(0==(HEAP32[(a+4|0)>>2]&3|0)?8:4)|0;e=7;break;case 5:e=6;break;case 6:b=0;e=7;break;case 7:return b;default:assert(0,"bad label: "+e)}}
function __ZL11mmap_resizeP12malloc_stateP12malloc_chunkj(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g,h,i,j,l,k,n,r;d=f;g=e;h=b;i=HEAP32[(g+4|0)>>2]&-8;c=32>h>>>3>>>0?3:4;break;case 3:a=0;c=15;break;case 4:c=i>>>0>=(h+4|0)>>>0?5:7;break;case 5:c=(i-h|0)>>>0<=HEAP32[(__ZL7mparams+8|0)>>2]<<1>>>0?6:7;break;case 6:a=g;c=15;break;case 7:j=HEAP32[(g|0)>>2];l=(i+j|0)+16|0;k=(((h+24|0)+7|0)+(HEAP32[(__ZL7mparams+4|0)>>2]-1|0)|0)&((HEAP32[(__ZL7mparams+4|0)>>2]-1|0)^-1);n=-1;c=-1!=(n|0)?8:13;break;
case 8:r=n+j|0;c=(k-j|0)-16|0;HEAP32[(r+4|0)>>2]=c;HEAP32[((r+c|0)+4|0)>>2]=7;HEAP32[((r+(c+4|0)|0)+4|0)>>2]=0;c=n>>>0<HEAP32[(d+16|0)>>2]>>>0?9:10;break;case 9:HEAP32[(d+16|0)>>2]=n;c=10;break;case 10:c=d+432|0;var t=HEAP32[c>>2]+(k-l|0)|0;HEAP32[c>>2]=t;c=t>>>0>HEAP32[(d+436|0)>>2]>>>0?11:12;break;case 11:HEAP32[(d+436|0)>>2]=HEAP32[(d+432|0)>>2];c=12;break;case 12:a=r;c=15;break;case 13:c=14;break;case 14:a=0;c=15;break;case 15:return a;default:assert(0,"bad label: "+c)}}
__ZL11mmap_resizeP12malloc_stateP12malloc_chunkj.X=1;function __ZL15segment_holdingP12malloc_statePc(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d;a=f;d=e;a=a+444|0;b=3;break;case 3:b=d>>>0>=HEAP32[(a|0)>>2]>>>0?4:6;break;case 4:b=d>>>0<(HEAP32[(a|0)>>2]+HEAP32[(a+4|0)>>2]|0)>>>0?5:6;break;case 5:c=a;b=9;break;case 6:a=b=HEAP32[(a+8|0)>>2];b=0==(b|0)?7:8;break;case 7:c=0;b=9;break;case 8:b=3;break;case 9:return c;default:assert(0,"bad label: "+b)}}
function __ZL8init_topP12malloc_stateP12malloc_chunkj(f,e,b){var c;for(c=2;;)switch(c){case 2:var a,d,g;a=f;d=e;g=b;c=0==((d+8|0)&7|0)?3:4;break;case 3:var h=0;c=5;break;case 4:h=(8-((d+8|0)&7)|0)&7;c=5;break;case 5:f=h;d=d+f|0;g=g-f|0;HEAP32[(a+24|0)>>2]=d;HEAP32[(a+12|0)>>2]=g;HEAP32[(d+4|0)>>2]=g|1;HEAP32[((d+g|0)+4|0)>>2]=40;HEAP32[(a+28|0)>>2]=HEAP32[(__ZL7mparams+16|0)>>2];return;default:assert(0,"bad label: "+c)}}__ZL8init_topP12malloc_stateP12malloc_chunkj.X=1;
function __ZL10mmap_allocP12malloc_statej(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g,h,i;a=f;b=e;d=(((b+24|0)+7|0)+(HEAP32[(__ZL7mparams+4|0)>>2]-1|0)|0)&((HEAP32[(__ZL7mparams+4|0)>>2]-1|0)^-1);b=d>>>0>b>>>0?3:14;break;case 3:g=-1;b=-1!=(g|0)?4:13;break;case 4:b=0==((g+8|0)&7|0)?5:6;break;case 5:var j=0;b=7;break;case 6:j=(8-((g+8|0)&7)|0)&7;b=7;break;case 7:b=j;h=(d-b|0)-16|0;i=g+b|0;HEAP32[(i|0)>>2]=b;HEAP32[(i+4|0)>>2]=h;HEAP32[((i+h|0)+4|0)>>2]=7;HEAP32[((i+(h+4|0)|0)+4|0)>>2]=0;b=0==
(HEAP32[(a+16|0)>>2]|0)?9:8;break;case 8:b=g>>>0<HEAP32[(a+16|0)>>2]>>>0?9:10;break;case 9:HEAP32[(a+16|0)>>2]=g;b=10;break;case 10:b=a+432|0;h=HEAP32[b>>2]+d|0;HEAP32[b>>2]=h;b=h>>>0>HEAP32[(a+436|0)>>2]>>>0?11:12;break;case 11:HEAP32[(a+436|0)>>2]=HEAP32[(a+432|0)>>2];b=12;break;case 12:c=i+8|0;b=15;break;case 13:b=14;break;case 14:c=0;b=15;break;case 15:return c;default:assert(0,"bad label: "+b)}}__ZL10mmap_allocP12malloc_statej.X=1;
function __ZL9init_binsP12malloc_state(f){var e;for(e=2;;)switch(e){case 2:var b,c;b=f;c=0;e=3;break;case 3:e=32>c>>>0?4:6;break;case 4:var a=e=(b+40|0)+(c<<1<<2)|0;HEAP32[(e+12|0)>>2]=a;HEAP32[(e+8|0)>>2]=a;e=5;break;case 5:c=c+1|0;e=3;break;case 6:return;default:assert(0,"bad label: "+e)}}
function __ZL13change_mparamii(f,e){var b;for(b=2;;)switch(b){case 2:var c,a,d,g;a=f;d=e;b=0!=(HEAP32[(__ZL7mparams|0)>>2]|0)?4:3;break;case 3:__ZL12init_mparamsv();b=4;break;case 4:b=-1==(d|0)?5:6;break;case 5:var h=-1;b=7;break;case 6:h=d;b=7;break;case 7:g=h;b=a;b=-1==(b|0)?8:-2==(b|0)?9:-3==(b|0)?13:14;break;case 8:HEAP32[(__ZL7mparams+16|0)>>2]=g;c=1;b=15;break;case 9:b=g>>>0>=HEAP32[(__ZL7mparams+4|0)>>2]>>>0?10:12;break;case 10:b=0==(g&(g-1|0)|0)?11:12;break;case 11:HEAP32[(__ZL7mparams+8|
0)>>2]=g;c=1;b=15;break;case 12:c=0;b=15;break;case 13:HEAP32[(__ZL7mparams+12|0)>>2]=g;c=1;b=15;break;case 14:c=0;b=15;break;case 15:return c;default:assert(0,"bad label: "+b)}}__ZL13change_mparamii.X=1;
function __ZL13prepend_allocP12malloc_statePcS1_j(f,e,b,c){var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j,l,k,n,r,t,p,q,v,w,m,x,s,y,B,A,G,z,E,M,C,H,L,R,I,K,Q,O,aa;d=f;g=e;h=b;i=c;var J=g;a=0==((g+8|0)&7|0)?3:4;break;case 3:var la=0;a=5;break;case 4:la=(8-((g+8|0)&7)|0)&7;a=5;break;case 5:j=J+la|0;var ba=h;a=0==((h+8|0)&7|0)?6:7;break;case 6:var U=0;a=8;break;case 7:U=(8-((h+8|0)&7)|0)&7;a=8;break;case 8:l=ba+U|0;k=l-j|0;n=j+i|0;k=k-i|0;HEAP32[(j+4|0)>>2]=i|3;a=(l|0)==(HEAP32[(d+24|0)>>2]|0)?9:10;
break;case 9:a=d+12|0;I=HEAP32[a>>2]+k|0;a=HEAP32[a>>2]=I;HEAP32[(d+24|0)>>2]=n;HEAP32[(n+4|0)>>2]=a|1;a=110;break;case 10:a=(l|0)==(HEAP32[(d+20|0)>>2]|0)?11:12;break;case 11:a=d+8|0;I=HEAP32[a>>2]+k|0;a=HEAP32[a>>2]=I;HEAP32[(d+20|0)>>2]=n;HEAP32[(n+4|0)>>2]=a|1;HEAP32[(n+a|0)>>2]=a;a=109;break;case 12:a=1!=(HEAP32[(l+4|0)>>2]&3|0)?73:13;break;case 13:r=HEAP32[(l+4|0)>>2]&-8;a=32>r>>>3>>>0?14:26;break;case 14:t=HEAP32[(l+8|0)>>2];p=HEAP32[(l+12|0)>>2];q=r>>>3;a=(t|0)==(p|0)?15:16;break;case 15:a=
d|0;HEAP32[a>>2]&=1<<q^-1;a=25;break;case 16:a=(t|0)==((d+40|0)+(q<<1<<2)|0)?18:17;break;case 17:if(t>>>0>=HEAP32[(d+16|0)>>2]>>>0)a=18;else{var T=0;a=21}break;case 18:if((p|0)==((d+40|0)+(q<<1<<2)|0)){var ua=1;a=20}else a=19;break;case 19:ua=p>>>0>=HEAP32[(d+16|0)>>2]>>>0;a=20;break;case 20:T=ua;a=21;break;case 21:a=0!=(1==(T&1)|0)?22:23;break;case 22:HEAP32[(t+12|0)>>2]=p;HEAP32[(p+8|0)>>2]=t;a=24;break;case 23:_abort();a=24;break;case 24:a=25;break;case 25:a=72;break;case 26:v=l;w=HEAP32[(v+24|
0)>>2];a=(HEAP32[(v+12|0)>>2]|0)!=(v|0)?27:31;break;case 27:x=HEAP32[(v+8|0)>>2];m=HEAP32[(v+12|0)>>2];a=0!=(1==(x>>>0>=HEAP32[(d+16|0)>>2]>>>0&1)|0)?28:29;break;case 28:HEAP32[(x+12|0)>>2]=m;HEAP32[(m+8|0)>>2]=x;a=30;break;case 29:_abort();a=30;break;case 30:a=43;break;case 31:s=m=(v+16|0)+4|0;m=a=HEAP32[m>>2];a=0!=(a|0)?33:32;break;case 32:s=m=v+16|0;m=a=HEAP32[m>>2];a=0!=(a|0)?33:42;break;case 33:a=34;break;case 34:y=a=(m+16|0)+4|0;if(0!=(HEAP32[a>>2]|0)){var N=1;a=36}else a=35;break;case 35:y=
N=m+16|0;N=0!=(HEAP32[N>>2]|0);a=36;break;case 36:a=N?37:38;break;case 37:s=m=y;m=HEAP32[m>>2];a=34;break;case 38:a=0!=(1==(s>>>0>=HEAP32[(d+16|0)>>2]>>>0&1)|0)?39:40;break;case 39:HEAP32[s>>2]=0;a=41;break;case 40:_abort();a=41;break;case 41:a=42;break;case 42:a=43;break;case 43:a=0!=(w|0)?44:71;break;case 44:B=(d+304|0)+(HEAP32[(v+28|0)>>2]<<2)|0;a=(v|0)==(HEAP32[B>>2]|0)?45:48;break;case 45:a=m;HEAP32[B>>2]=a;a=0==(a|0)?46:47;break;case 46:a=d+4|0;HEAP32[a>>2]&=1<<HEAP32[(v+28|0)>>2]^-1;a=47;break;
case 47:a=55;break;case 48:a=0!=(1==(w>>>0>=HEAP32[(d+16|0)>>2]>>>0&1)|0)?49:53;break;case 49:a=(HEAP32[(w+16|0)>>2]|0)==(v|0)?50:51;break;case 50:HEAP32[(w+16|0)>>2]=m;a=52;break;case 51:HEAP32[((w+16|0)+4|0)>>2]=m;a=52;break;case 52:a=54;break;case 53:_abort();a=54;break;case 54:a=55;break;case 55:a=0!=(m|0)?56:70;break;case 56:a=0!=(1==(m>>>0>=HEAP32[(d+16|0)>>2]>>>0&1)|0)?57:68;break;case 57:HEAP32[(m+24|0)>>2]=w;A=a=HEAP32[(v+16|0)>>2];a=0!=(a|0)?58:62;break;case 58:a=0!=(1==(A>>>0>=HEAP32[(d+
16|0)>>2]>>>0&1)|0)?59:60;break;case 59:HEAP32[(m+16|0)>>2]=A;HEAP32[(A+24|0)>>2]=m;a=61;break;case 60:_abort();a=61;break;case 61:a=62;break;case 62:G=a=HEAP32[((v+16|0)+4|0)>>2];a=0!=(a|0)?63:67;break;case 63:a=0!=(1==(G>>>0>=HEAP32[(d+16|0)>>2]>>>0&1)|0)?64:65;break;case 64:HEAP32[((m+16|0)+4|0)>>2]=G;HEAP32[(G+24|0)>>2]=m;a=66;break;case 65:_abort();a=66;break;case 66:a=67;break;case 67:a=69;break;case 68:_abort();a=69;break;case 69:a=70;break;case 70:a=71;break;case 71:a=72;break;case 72:l=l+
r|0;k=k+r|0;a=73;break;case 73:a=l+4|0;HEAP32[a>>2]&=-2;HEAP32[(n+4|0)>>2]=k|1;HEAP32[(n+k|0)>>2]=k;a=32>k>>>3>>>0?74:81;break;case 74:z=k>>>3;M=E=(d+40|0)+(z<<1<<2)|0;a=0!=(HEAP32[(d|0)>>2]&1<<z|0)?76:75;break;case 75:a=d|0;HEAP32[a>>2]|=1<<z;a=80;break;case 76:a=0!=(1==(HEAP32[(E+8|0)>>2]>>>0>=HEAP32[(d+16|0)>>2]>>>0&1)|0)?77:78;break;case 77:M=HEAP32[(E+8|0)>>2];a=79;break;case 78:_abort();a=79;break;case 79:a=80;break;case 80:HEAP32[(E+8|0)>>2]=n;HEAP32[(M+12|0)>>2]=n;HEAP32[(n+8|0)>>2]=M;HEAP32[(n+
12|0)>>2]=E;a=108;break;case 81:C=n;R=k>>>8;a=0==(R|0)?82:83;break;case 82:L=0;a=87;break;case 83:a=65535<R>>>0?84:85;break;case 84:L=31;a=86;break;case 85:L=R;a=(L-256|0)>>>16&8;L=I=L<<a;I=(I-4096|0)>>>16&4;a=a+I|0;L=I=L<<I;var u=(I-16384|0)>>>16&2;I=u;a=a+u|0;I=(14-a|0)+(L<<I>>>15)|0;L=(I<<1)+(k>>>((I+7|0)>>>0)&1)|0;a=86;break;case 86:a=87;break;case 87:H=(d+304|0)+(L<<2)|0;HEAP32[(C+28|0)>>2]=L;HEAP32[((C+16|0)+4|0)>>2]=0;HEAP32[(C+16|0)>>2]=0;a=0!=(HEAP32[(d+4|0)>>2]&1<<L|0)?89:88;break;case 88:a=
d+4|0;HEAP32[a>>2]|=1<<L;HEAP32[H>>2]=C;HEAP32[(C+24|0)>>2]=H;a=C;HEAP32[(C+12|0)>>2]=a;HEAP32[(C+8|0)>>2]=a;a=107;break;case 89:K=HEAP32[H>>2];var na=k;a=31==(L|0)?90:91;break;case 90:var Z=0;a=92;break;case 91:Z=31-(((L>>>1)+8|0)-2|0)|0;a=92;break;case 92:Q=na<<Z;a=93;break;case 93:a=(HEAP32[(K+4|0)>>2]&-8|0)!=(k|0)?94:100;break;case 94:O=(K+16|0)+((Q>>>31&1)<<2)|0;Q<<=1;a=0!=(HEAP32[O>>2]|0)?95:96;break;case 95:K=HEAP32[O>>2];a=99;break;case 96:a=0!=(1==(O>>>0>=HEAP32[(d+16|0)>>2]>>>0&1)|0)?97:
98;break;case 97:HEAP32[O>>2]=C;HEAP32[(C+24|0)>>2]=K;a=C;HEAP32[(C+12|0)>>2]=a;HEAP32[(C+8|0)>>2]=a;a=106;break;case 98:_abort();a=106;break;case 99:a=105;break;case 100:aa=HEAP32[(K+8|0)>>2];if(K>>>0>=HEAP32[(d+16|0)>>2]>>>0)a=101;else{var Aa=0;a=102}break;case 101:Aa=aa>>>0>=HEAP32[(d+16|0)>>2]>>>0;a=102;break;case 102:a=0!=(1==(Aa&1)|0)?103:104;break;case 103:a=C;HEAP32[(aa+12|0)>>2]=a;HEAP32[(K+8|0)>>2]=a;HEAP32[(C+8|0)>>2]=aa;HEAP32[(C+12|0)>>2]=K;HEAP32[(C+24|0)>>2]=0;a=106;break;case 104:_abort();
a=106;break;case 105:a=93;break;case 106:a=107;break;case 107:a=108;break;case 108:a=109;break;case 109:a=110;break;case 110:return j+8|0;default:assert(0,"bad label: "+a)}}__ZL13prepend_allocP12malloc_statePcS1_j.X=1;function __ZSt15get_new_handlerv(){return tempValue=HEAP32[__ZL13__new_handler>>2],HEAP32[__ZL13__new_handler>>2]=tempValue+0,tempValue}function __ZSt15set_new_handlerPFvvE(f){return tempValue=HEAP32[__ZL13__new_handler>>2],HEAP32[__ZL13__new_handler>>2]=f,tempValue}
function __ZNSt9bad_allocC2Ev(f){HEAP32[f>>2]=__ZTVSt9exception+8|0;HEAP32[f>>2]=__ZTVSt9bad_alloc+8|0}
function __ZL11add_segmentP12malloc_statePcjj(f,e,b,c){var a;for(a=2;;)switch(a){case 2:var d,g,h,i,j,l,k,n,r,t,p,q,v,w,m,x,s,y,B,A,G,z,E,M,C;d=f;g=e;h=b;i=c;j=HEAP32[(d+24|0)>>2];l=__ZL15segment_holdingP12malloc_statePc(d,j);l=HEAP32[(l|0)>>2]+HEAP32[(l+4|0)>>2]|0;k=24;n=l+(-((k+16|0)+7|0)|0)|0;a=0==((n+8|0)&7|0)?3:4;break;case 3:var H=0;a=5;break;case 4:H=(8-((n+8|0)&7)|0)&7;a=5;break;case 5:r=H;r=n+r|0;p=j;a=r;t=r=r>>>0<(j+16|0)>>>0?p:a;a=t+8|0;p=t+k|0;__ZL8init_topP12malloc_stateP12malloc_chunkj(d,
g,h-40|0);HEAP32[(t+4|0)>>2]=k|3;t=a;var L=d+444|0;assert(!0,"memcpy given 16 bytes to copy. Problem with quantum=1 corrections perhaps?");HEAP32[t>>2]=HEAP32[L>>2];HEAP32[t+4>>2]=HEAP32[L+4>>2];HEAP32[t+8>>2]=HEAP32[L+8>>2];HEAP32[t+12>>2]=HEAP32[L+12>>2];HEAP32[(d+444|0)>>2]=g;HEAP32[((d+444|0)+4|0)>>2]=h;HEAP32[((d+444|0)+12|0)>>2]=i;HEAP32[((d+444|0)+8|0)>>2]=a;a=6;break;case 6:q=p+4|0;HEAP32[(p+4|0)>>2]=7;a=(q+4|0)>>>0<l>>>0?7:8;break;case 7:p=q;a=9;break;case 8:a=10;break;case 9:a=6;break;case 10:a=
(r|0)!=(j|0)?11:47;break;case 11:v=j;w=r-j|0;a=v+w|0;a=a+4|0;HEAP32[a>>2]&=-2;HEAP32[(v+4|0)>>2]=w|1;HEAP32[(v+w|0)>>2]=w;a=32>w>>>3>>>0?12:19;break;case 12:m=w>>>3;s=x=(d+40|0)+(m<<1<<2)|0;a=0!=(HEAP32[(d|0)>>2]&1<<m|0)?14:13;break;case 13:a=d|0;HEAP32[a>>2]|=1<<m;a=18;break;case 14:a=0!=(1==(HEAP32[(x+8|0)>>2]>>>0>=HEAP32[(d+16|0)>>2]>>>0&1)|0)?15:16;break;case 15:s=HEAP32[(x+8|0)>>2];a=17;break;case 16:_abort();a=17;break;case 17:a=18;break;case 18:HEAP32[(x+8|0)>>2]=v;HEAP32[(s+12|0)>>2]=v;HEAP32[(v+
8|0)>>2]=s;HEAP32[(v+12|0)>>2]=x;a=46;break;case 19:y=v;G=w>>>8;a=0==(G|0)?20:21;break;case 20:A=0;a=25;break;case 21:a=65535<G>>>0?22:23;break;case 22:A=31;a=24;break;case 23:A=G;a=(A-256|0)>>>16&8;A=t=A<<a;t=(t-4096|0)>>>16&4;a=a+t|0;A=t=A<<t;t=L=(t-16384|0)>>>16&2;a=a+L|0;t=(14-a|0)+(A<<t>>>15)|0;A=(t<<1)+(w>>>((t+7|0)>>>0)&1)|0;a=24;break;case 24:a=25;break;case 25:B=(d+304|0)+(A<<2)|0;HEAP32[(y+28|0)>>2]=A;HEAP32[((y+16|0)+4|0)>>2]=0;HEAP32[(y+16|0)>>2]=0;a=0!=(HEAP32[(d+4|0)>>2]&1<<A|0)?27:
26;break;case 26:a=d+4|0;HEAP32[a>>2]|=1<<A;HEAP32[B>>2]=y;HEAP32[(y+24|0)>>2]=B;a=y;HEAP32[(y+12|0)>>2]=a;HEAP32[(y+8|0)>>2]=a;a=45;break;case 27:z=HEAP32[B>>2];var R=w;a=31==(A|0)?28:29;break;case 28:var I=0;a=30;break;case 29:I=31-(((A>>>1)+8|0)-2|0)|0;a=30;break;case 30:E=R<<I;a=31;break;case 31:a=(HEAP32[(z+4|0)>>2]&-8|0)!=(w|0)?32:38;break;case 32:M=(z+16|0)+((E>>>31&1)<<2)|0;E<<=1;a=0!=(HEAP32[M>>2]|0)?33:34;break;case 33:z=HEAP32[M>>2];a=37;break;case 34:a=0!=(1==(M>>>0>=HEAP32[(d+16|0)>>
2]>>>0&1)|0)?35:36;break;case 35:HEAP32[M>>2]=y;HEAP32[(y+24|0)>>2]=z;a=y;HEAP32[(y+12|0)>>2]=a;HEAP32[(y+8|0)>>2]=a;a=44;break;case 36:_abort();a=44;break;case 37:a=43;break;case 38:C=HEAP32[(z+8|0)>>2];if(z>>>0>=HEAP32[(d+16|0)>>2]>>>0)a=39;else{var K=0;a=40}break;case 39:K=C>>>0>=HEAP32[(d+16|0)>>2]>>>0;a=40;break;case 40:a=0!=(1==(K&1)|0)?41:42;break;case 41:a=y;HEAP32[(C+12|0)>>2]=a;HEAP32[(z+8|0)>>2]=a;HEAP32[(y+8|0)>>2]=C;HEAP32[(y+12|0)>>2]=z;HEAP32[(y+24|0)>>2]=0;a=44;break;case 42:_abort();
a=44;break;case 43:a=31;break;case 44:a=45;break;case 45:a=46;break;case 46:a=47;break;case 47:return;default:assert(0,"bad label: "+a)}}__ZL11add_segmentP12malloc_statePcjj.X=1;function __ZNSt9bad_allocC1Ev(f){__ZNSt9bad_allocC2Ev(f)}function __ZNSt9bad_allocD1Ev(f){__ZNSt9bad_allocD2Ev(f)}function __ZdlPv(f){var e;for(e=2;;)switch(e){case 2:var b;b=f;e=0!=(b|0)?3:4;break;case 3:_free(b);e=4;break;case 4:return;default:assert(0,"bad label: "+e)}}function __ZdlPvRKSt9nothrow_t(f){__ZdlPv(f)}
function __ZdaPv(f){__ZdlPv(f)}function __ZdaPvRKSt9nothrow_t(f){__ZdaPv(f)}function __ZNSt9bad_allocD0Ev(f){__ZNSt9bad_allocD1Ev(f);__ZdlPv(f)}function __ZNSt9bad_allocD2Ev(f){__ZNSt9exceptionD2Ev(f)}
function __Znwj(f){var e;for(e=2;;)switch(e){case 2:var b,c,a,d,g;b=f;e=0==(b|0)?3:4;break;case 3:b=1;e=4;break;case 4:e=5;break;case 5:c=e=_malloc(b);e=0==(e|0)?6:14;break;case 6:a=__ZSt15get_new_handlerv();e=0!=(a|0)?7:12;break;case 7:e=a;try{__THREW__=!1,FUNCTION_TABLE[e]()}catch(h){if("number"!=typeof h)throw h;if(ABORT)throw h;__THREW__=!0;Module.print("Exception: "+h+", currently at: "+Error().stack)}e=__THREW__?9:8;break;case 8:e=13;break;case 9:g=___cxa_find_matching_catch(HEAP32[_llvm_eh_exception.buf>>
2],HEAP32[_llvm_eh_exception.buf+4>>2],[]);d=g.f0;g=g.f1;e=10;break;case 10:e=0>(g|0)?11:15;break;case 11:throw ___cxa_call_unexpected(d),"Reached an unreachable!";case 12:e=___cxa_allocate_exception(4);__ZNSt9bad_allocC1Ev(e);try{__THREW__=!1,___cxa_throw(e,__ZTISt9bad_alloc,602)}catch(i){if("number"!=typeof i)throw i;if(ABORT)throw i;__THREW__=!0;Module.print("Exception: "+i+", currently at: "+Error().stack)}e=__THREW__?9:16;break;case 13:e=5;break;case 14:return c;case 15:throw f=d,b=g,f=(tempValue=
[0,0,0,0,0,0,0,0],tempValue.f0=f,tempValue),f=(f.f1=b,f),Module.print("Resuming exception"),0==HEAP32[_llvm_eh_exception.buf>>2]&&(HEAP32[_llvm_eh_exception.buf>>2]=f.f0),f.f0;case 16:throw"Reached an unreachable!";default:assert(0,"bad label: "+e)}}__Znwj.X=1;
function __ZnwjRKSt9nothrow_t(f){var e;for(e=2;;)switch(e){case 2:var b,c;e=f;b=0;var a;try{__THREW__=!1,a=__Znwj(e)}catch(d){if("number"!=typeof d)throw d;if(ABORT)throw d;__THREW__=!0;Module.print("Exception: "+d+", currently at: "+Error().stack);a=null}e=__THREW__?4:3;break;case 3:b=a;e=7;break;case 4:c=___cxa_find_matching_catch(HEAP32[_llvm_eh_exception.buf>>2],HEAP32[_llvm_eh_exception.buf+4>>2],[0]).f0;e=5;break;case 5:___cxa_begin_catch(c);try{__THREW__=!1,___cxa_end_catch()}catch(g){if("number"!=
typeof g)throw g;if(ABORT)throw g;__THREW__=!0;Module.print("Exception: "+g+", currently at: "+Error().stack)}e=__THREW__?8:6;break;case 6:e=7;break;case 7:return b;case 8:c=___cxa_find_matching_catch(HEAP32[_llvm_eh_exception.buf>>2],HEAP32[_llvm_eh_exception.buf+4>>2],[]).f0;e=9;break;case 9:throw ___cxa_call_unexpected(c),"Reached an unreachable!";default:assert(0,"bad label: "+e)}}
function __Znaj(f){var e;for(e=2;;)switch(e){case 2:var b,c;e=f;var a;try{__THREW__=!1,a=__Znwj(e)}catch(d){if("number"!=typeof d)throw d;if(ABORT)throw d;__THREW__=!0;Module.print("Exception: "+d+", currently at: "+Error().stack);a=null}e=__THREW__?4:3;break;case 3:return a;case 4:c=___cxa_find_matching_catch(HEAP32[_llvm_eh_exception.buf>>2],HEAP32[_llvm_eh_exception.buf+4>>2],[]);b=c.f0;c=c.f1;e=5;break;case 5:e=0>(c|0)?6:7;break;case 6:throw ___cxa_call_unexpected(b),"Reached an unreachable!";
case 7:throw f=b,b=c,f=(tempValue=[0,0,0,0,0,0,0,0],tempValue.f0=f,tempValue),f=(f.f1=b,f),Module.print("Resuming exception"),0==HEAP32[_llvm_eh_exception.buf>>2]&&(HEAP32[_llvm_eh_exception.buf>>2]=f.f0),f.f0;default:assert(0,"bad label: "+e)}}
function __ZnajRKSt9nothrow_t(f){var e;for(e=2;;)switch(e){case 2:var b,c;e=f;b=0;var a;try{__THREW__=!1,a=__Znaj(e)}catch(d){if("number"!=typeof d)throw d;if(ABORT)throw d;__THREW__=!0;Module.print("Exception: "+d+", currently at: "+Error().stack);a=null}e=__THREW__?4:3;break;case 3:b=a;e=7;break;case 4:c=___cxa_find_matching_catch(HEAP32[_llvm_eh_exception.buf>>2],HEAP32[_llvm_eh_exception.buf+4>>2],[0]).f0;e=5;break;case 5:___cxa_begin_catch(c);try{__THREW__=!1,___cxa_end_catch()}catch(g){if("number"!=
typeof g)throw g;if(ABORT)throw g;__THREW__=!0;Module.print("Exception: "+g+", currently at: "+Error().stack)}e=__THREW__?8:6;break;case 6:e=7;break;case 7:return b;case 8:c=___cxa_find_matching_catch(HEAP32[_llvm_eh_exception.buf>>2],HEAP32[_llvm_eh_exception.buf+4>>2],[]).f0;e=9;break;case 9:throw ___cxa_call_unexpected(c),"Reached an unreachable!";default:assert(0,"bad label: "+e)}}function __ZNKSt9bad_alloc4whatEv(){return __str31592|0}
function __ZNKSt20bad_array_new_length4whatEv(){return __str141593|0}function __ZNSt20bad_array_new_lengthC1Ev(f){__ZNSt20bad_array_new_lengthC2Ev(f)}function __ZNSt20bad_array_new_lengthC2Ev(f){__ZNSt9bad_allocC2Ev(f);HEAP32[f>>2]=__ZTVSt20bad_array_new_length+8|0}function __ZNSt20bad_array_new_lengthD0Ev(f){__ZNSt20bad_array_new_lengthD1Ev(f);__ZdlPv(f)}function __ZNSt20bad_array_new_lengthD1Ev(f){__ZNSt20bad_array_new_lengthD2Ev(f)}
function __ZNSt20bad_array_new_lengthD2Ev(f){__ZNSt9bad_allocD2Ev(f)}function __ZSt17__throw_bad_allocv(){for(;;)switch(2){case 2:var f=___cxa_allocate_exception(4);__ZNSt9bad_allocC1Ev(f);___cxa_throw(f,__ZTISt9bad_alloc,602);throw"Reached an unreachable!";case 3:return;default:assert(0,"bad label: 2")}}var i64Math=null;
Module.callMain=function(f){function e(){for(var a=0;3>a;a++)c.push(0)}var b=f.length+1,c=[allocate(intArrayFromString("/bin/this.program"),"i8",ALLOC_STATIC)];e();for(var a=0;a<b-1;a+=1)c.push(allocate(intArrayFromString(f[a]),"i8",ALLOC_STATIC)),e();c.push(0);c=allocate(c,"i32",ALLOC_STATIC);return _main(b,c,0)};
FUNCTION_TABLE=[0,0,_mrb_mod_undef,0,_false_to_s,0,_mrb_ary_cmp,0,_mrb_time_mon,0,_mrb_range_eq,0,_mrb_class_new_class,0,_mrb_struct_aref,0,_mrb_bob_missing,0,_flo_to_f,0,_mrb_obj_equal_m,0,_math_atan,0,_mrb_str_times,0,__ZNSt20bad_array_new_lengthD1Ev,0,_math_log10,0,_flo_to_s,0,_mrb_str_rindex_m,0,_mrb_time_initialize_copy,0,_mrb_ary_unshift_m,0,_math_sinh,0,_mrb_str_inspect,0,_mrb_time_min,0,_fix_to_s,0,_mrb_mod_to_s,0,__ZNKSt9bad_alloc4whatEv,0,_mrb_time_getlocal,0,_mod_define_method,0,_mrb_f_global_variables,
0,_mrb_range_initialize,0,_mrb_mod_eqq,0,_math_tan,0,_mrb_bob_not,0,_fix_or,0,_fix_rshift,0,_fix_to_f,0,_exc_exception,0,_mrb_ary_empty_p,0,_fix_mul,0,_gc_interval_ratio_set,0,_mrb_str_bytesize,0,_mrb_struct_init_copy,0,_mrb_obj_singleton_methods_m,0,_exc_message,0,_mrb_ary_equal,0,_range_to_s,0,_mrb_struct_eql,0,_mrb_str_size,0,_mrb_any_to_s,0,_mrb_hash_to_hash,0,_flo_truncate,0,_gc_step_ratio_get,0,_mrb_obj_id_m,0,_math_hypot,0,_mrb_hash_inspect,0,_iv_mark_i,0,_mrb_time_utc,0,_mrb_singleton_class,
0,_mrb_time_hour,0,_mrb_mod_const_set,0,_mrb_str_upcase_bang,0,_mrb_time_asctime,0,_mrb_time_year,0,_int_to_i,0,_mrb_hash_empty_p,0,_mrb_ary_inspect,0,_exc_initialize,0,_exc_equal,0,_mrb_mod_module_eval,0,_mrb_hash_clear,0,_num_div,0,_mrb_f_sprintf,0,_mrb_hash_has_key,0,_mrb_hash_set_default,0,_fix_and,0,_mrb_mod_include,0,_mrb_struct_initialize_m,0,_mrb_struct_inspect,0,_mrb_hash_equal,0,_mrb_str_chop,0,_mrb_sym_to_s,0,_mrb_bob_init,0,_mrb_obj_ivar_set,0,_mrb_time_to_i,0,_mrb_hash_replace,0,_mrb_str_match,
0,_sym_cmp,0,_mrb_mod_alias,0,_mrb_str_to_s,0,_math_ldexp,0,_mrb_obj_clone,0,_mrb_ary_rindex_m,0,_mrb_time_yday,0,_num_pow,0,_fix_lshift,0,_mrb_str_equal_m,0,_mrb_f_raise,0,_math_exp,0,_mrb_time_plus,0,_mrb_str_bytes,0,_fix_divmod,0,_mrb_str_to_i,0,_mrb_ary_times,0,_mrb_ary_clear,0,_mrb_printstr,0,_mrb_hash_default_proc,0,_mrb_mod_append_features,0,_math_cbrt,0,_fix_mod,0,_mrb_obj_class_m,0,_mrb_time_utcp,0,_mrb_range_end,0,_mrb_time_to_f,0,_mrb_instance_new,0,_gv_i,0,_mrb_str_eql,0,_num_uplus,0,
_math_atanh,0,_mrb_time_usec,0,_true_or,0,_num_abs,0,_exc_inspect,0,_mrb_obj_ivar_get,0,_sym_equal,0,_mrb_obj_protected_methods,0,_range_inspect,0,_mrb_time_free,0,_math_erf,0,_mrb_str_each_line,0,_mrb_hash_shift,0,_math_asin,0,_flo_mod,0,_mrb_mod_const_defined,0,_mrb_ary_size,0,_mrb_str_aref_m,0,_math_erfc,0,_mrb_range_beg,0,_mrb_ary_shift,0,_mrb_equal_m,0,_mrb_mod_included_modules,0,_mrb_struct_aset,0,_mrb_time_dstp,0,_range_eql,0,_mrb_time_at,0,_allocf,0,_mrb_time_mday,0,_mrb_mod_include_p,0,_mrb_hash_set_default_proc,
0,_mrb_ary_concat_m,0,_mrb_ary_reverse_bang,0,_fix_minus,0,__ZNKSt20bad_array_new_length4whatEv,0,_mrb_struct_equal,0,_mrb_ary_delete_at,0,_mrb_ary_reverse,0,_math_cos,0,_mrb_true,0,_gc_start,0,_flo_eq,0,_gc_enable,0,_gc_disable,0,_mrb_time_gm,0,_mrb_obj_dup,0,_mrb_ary_join_m,0,_mrb_struct_ref,0,_mrb_struct_s_def,0,_mrb_hash_default,0,_flo_hash,0,_flo_ceil,0,_mrb_mod_extend_object,0,_num_round,0,_range_initialize_copy,0,_gc_interval_ratio_get,0,_mrb_mod_const_get,0,_iv_i,0,_false_and,0,_mrb_time_sec,
0,_mrb_obj_not_equal_m,0,_math_frexp,0,_mrb_str_cmp_m,0,_mrb_hash_keys,0,_mrb_str_replace,0,_num_eql,0,_mrb_obj_instance_eval,0,_mrb_range_excl,0,_mrb_hash_init_core,0,_mrb_false,0,_mrb_time_initialize,0,_fix_succ,0,_math_tanh,0,_mrb_hash_has_value,0,_mrb_str_intern,0,_false_xor,0,_true_and,0,_mrb_time_localtime,0,_mrb_str_capitalize,0,_mrb_struct_s_members_m,0,_gc_step_ratio_set,0,_mrb_str_upcase,0,_mrb_f_block_given_p_m,0,_mrb_time_local,0,_mrb_time_getutc,0,_flo_floor,0,_mrb_obj_extend_m,0,_exc_to_s,
0,_inspect_i,0,_mrb_ary_s_create,0,_flo_finite_p,0,_flo_infinite_p,0,_mrb_struct_ref3,0,_mrb_struct_set_m,0,_mrb_hash_aset,0,_nil_inspect,0,_flo_round,0,_mrb_proc_init_copy,0,_fix_rev,0,_nil_to_s,0,_mrb_str_capitalize_bang,0,_mrb_obj_methods_m,0,_math_acos,0,_false_or,0,_mrb_str_to_f,0,_num_uminus,0,_mrb_str_include,0,_mrb_time_minus,0,_mrb_str_reverse,0,_math_sin,0,_mrb_f_send,0,_mrb_str_init,0,_mrb_time_cmp,0,_fix_plus,0,_math_log,0,_num_cmp,0,_mrb_str_empty_p,0,_mrb_time_wday,0,_mrb_str_index_m,
0,_mrb_proc_initialize,0,_obj_is_instance_of,0,_mrb_str_downcase_bang,0,__ZNSt20bad_array_new_lengthD0Ev,0,_mrb_class_superclass,0,_fix_equal,0,_mrb_time_now,0,_mrb_hash_values,0,_fix_xor,0,_mrb_ary_last,0,_num_floor,0,_mrb_obj_is_kind_of_m,0,_mrb_ary_push_m,0,__ZNSt9bad_allocD0Ev,0,_mrb_ary_pop,0,_csym_i,0,_mrb_obj_instance_variables,0,_mrb_struct_ref8,0,_mrb_struct_ref9,0,_mrb_struct_ref6,0,_mrb_struct_ref7,0,_mrb_struct_ref4,0,_mrb_struct_ref5,0,_mrb_struct_ref2,0,_cv_i,0,_mrb_struct_ref0,0,_mrb_struct_ref1,
0,_mrb_ary_eql,0,_mrb_range_include,0,_mrb_hash_aget,0,_mrb_ary_aset,0,_sym_inspect,0,_mrb_str_chomp,0,_mrb_ary_index_m,0,_flo_plus,0,_mrb_obj_public_methods,0,_mrb_hash_size_m,0,_mrb_str_plus_m,0,_true_xor,0,_mrb_str_chop_bang,0,_obj_respond_to,0,_mrb_str_chomp_bang,0,_mrb_obj_private_methods,0,_fix_uminus,0,_flo_minus,0,_mrb_hash_eql,0,_math_log2,0,_mrb_hash_delete,0,_math_asinh,0,_mrb_range_each,0,_math_atan2,0,_mrb_ary_replace_m,0,_mrb_struct_members_m,0,_int_succ,0,_mrb_mod_instance_methods,
0,_math_sqrt,0,_math_cosh,0,_mrb_time_day,0,_mrb_ary_plus,0,_mrb_obj_hash,0,_proc_lambda,0,_mrb_time_zone,0,_math_acosh,0,_flo_mul,0,_mrb_time_eq,0,_mrb_mod_class_variables,0,__ZNSt9bad_allocD1Ev,0,_mrb_ary_aget,0,_mrb_str_hash_m,0,_mrb_ary_first,0,_mrb_obj_remove_instance_variable,0,_mrb_obj_ivar_defined,0,_mrb_mod_ancestors,0,_mrb_str_reverse_bang,0,_mrb_obj_init_copy,0,_mrb_str_split_m,0,_sym_to_sym,0,_mrb_obj_inspect,0,_mrb_str_downcase,0,_true_to_s,0];Module.FUNCTION_TABLE=FUNCTION_TABLE;
function run(f){function e(){var a=0;calledRun=!0;Module._main&&(preMain(),a=Module.callMain(f),Module.noExitRuntime||exitRuntime());if(Module.postRun)for("function"==typeof Module.postRun&&(Module.postRun=[Module.postRun]);0<Module.postRun.length;)Module.postRun.pop()();return a}f=f||Module.arguments;if(0<runDependencies)return Module.printErr("run() called, but dependencies remain, so not running"),0;if(Module.preRun){"function"==typeof Module.preRun&&(Module.preRun=[Module.preRun]);var b=Module.preRun;
Module.preRun=[];for(var c=b.length-1;0<=c;c--)b[c]();if(0<runDependencies)return 0}return Module.setStatus?(Module.setStatus("Running..."),setTimeout(function(){setTimeout(function(){Module.setStatus("")},1);e()},1),0):e()}Module.run=Module.run=run;if(Module.preInit)for("function"==typeof Module.preInit&&(Module.preInit=[Module.preInit]);0<Module.preInit.length;)Module.preInit.pop()();initRuntime();var shouldRunNow=!0;Module.noInitialRun&&(shouldRunNow=!1);if(shouldRunNow)var ret=run();
