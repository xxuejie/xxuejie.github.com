// Note: For maximum-speed code, see "Optimizing Code" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}

if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}

if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  Module['load'] = importScripts;
}

if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  BITSHIFT64_SHL: 0,
  BITSHIFT64_ASHR: 1,
  BITSHIFT64_LSHR: 2,
  bitshift64: function (low, high, op, bits) {
    var ret;
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
          break;
      }
    } else if (bits == 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [high, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high, 0];
          break;
      }
    } else { // bits > 32
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low << (bits - 32)];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high >>>  (bits - 32) , 0];
          break;
      }
    }
    HEAP32[tempDoublePtr>>2] = ret[0]; // cannot use utility functions since we are in runtime itself
    HEAP32[tempDoublePtr+4>>2] = ret[1];
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func, sig) {
    //assert(sig); // TODO: support asm
    var table = FUNCTION_TABLE; // TODO: support asm
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}







//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (HEAPF64[(tempDoublePtr)>>3]=value,HEAP32[((ptr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((ptr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((ptr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_NONE = 3; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// Simple unoptimized memset - necessary during startup
var _memset = function(ptr, value, num) {
  var stop = ptr + num;
  while (ptr < stop) {
    HEAP8[(ptr++)]=value;
  }
}

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    _memset(ret, 0, size);
    return ret;
  }

  if (singleType === 'i8') {
    HEAPU8.set(new Uint8Array(slab), ret);
    return ret;
  }

  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var utf8 = new Runtime.UTF8Processor();
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  while (1) {
    t = HEAPU8[((ptr)+(i))];
    if (nullTerminated && t == 0) break;
    ret += utf8.processCChar(t);
    i += 1;
    if (!nullTerminated && i == length) break;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = TOTAL_STACK; // we lose a little stack here, but TOTAL_STACK is nice and round so use that as the max

var tempDoublePtr = Runtime.alignMemory(allocate(12, 'i8', ALLOC_STACK), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

STATICTOP = STACK_MAX;
assert(STATICTOP < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY

var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STACK);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[((buffer)+(i))]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer)+(i))]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
  // TODO: clean up previous line
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

// === Body ===



assert(STATICTOP == STACK_MAX); assert(STACK_MAX == TOTAL_STACK);

STATICTOP += 84176;

assert(STATICTOP < TOTAL_MEMORY);

















var _stdout;
var _stderr;







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































allocate([0,2,2,2,2,2,2,2,2,2,143,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,121,2,2,2,119,114,2,139,140,117,115,138,116,137,118,2,2,2,2,2,2,2,2,2,2,109,142,111,107,110,108,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,136,2,141,113,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,134,112,135,122,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,120,123,124,125,126,127,128,129,130,131,132,133] /* \00\02\02\02\02\02\0 */, "i8", ALLOC_NONE, 5242880);
allocate(1164, "i8", ALLOC_NONE, 5243256);
allocate([91,0,131,1,250,0,40,1,94,1,239,0,239,0,247,0,248,0,239,0,151,1,233,0,233,0,107,0,107,0,233,0,185,0,212,0,215,0,73,2,238,0,238,0,252,0,107,0,238,0,202,0,23,2,91,2,31,2,79,2,218,0,34,2,25,2,242,1,216,1,92,0,206,1,63,0,183,1,63,0,15,1,19,1,185,1,23,1,58,1,202,0,247,1,173,2,217,0,16,1,20,1,188,1,52,2,186,2,53,2,14,1,51,2,89,2,122,1,91,2,89,2,107,0,103,1,196,2,33,1,193,2,23,2,106,1,31,2,107,2,9,1,122,1,69,2,236,0,241,0,97,1,98,1,242,0,202,2,218,0,107,0,52,2,247,0,44,1,232,2,82,2,166,2,167,2,225,2,30,3,21,2,224,2,29,2,220,2,227,2,29,2,97,1,217,0,43,1,33,3,88,3,159,255,76,2,233,2,92,1,171,1,209,2,81,254,52,2,196,254,99,3,3,0,162,255,122,2,21,2,92,1,29,2,81,254,147,2,89,1,179,1,248,2,216,1,139,2,218,0,214,0,162,255,78,254,255,2,182,1,21,2,96,1,29,2,52,2,214,0,160,255,162,255,110,2,74,0,79,254,74,0,254,0,109,1,21,2,130,1,29,2,222,2,159,255,2,1,226,2,155,255,224,0,50,1,51,1,162,1,86,1,155,255,238,1,140,2,196,254,196,254,236,2,158,255,155,255,82,3,157,255,185,2,170,255,133,1,175,1,90,1,21,2,29,2,177,1,52,1,49,3,161,255,107,1,78,254,88,3,99,3,163,255,55,1,198,2,54,1,74,0,151,1,213,0,214,0,123,2,79,254,205,0,205,0,205,0,77,254,21,2,121,1,29,2,156,255,160,255,213,0,214,0,169,1,158,255,59,1,87,1,88,1,33,1,213,0,214,0,161,255,216,1,93,1,121,2,167,255,13,254,112,3,213,0,214,0,188,1,5,3,156,255,33,3,93,1,218,0,170,255,136,1,137,1,246,0,91,2,218,0,11,1,239,0,218,0,239,0,16,254,149,1,149,1,233,0,74,0,233,0,233,0,168,255,172,2,160,1,77,254,140,3,238,0,17,1,238,0,187,1,217,0,132,1,177,2,225,2,234,1,95,1,89,3,214,0,91,3,243,1,89,2,89,2,92,3,160,255,160,255,220,2,243,0,188,1,163,255,166,255,75,3,98,3,13,254,101,3,220,2,159,255,159,255,165,255,12,254,218,0,9,1,100,1,241,2,174,1,114,3,107,0,246,0,181,1,181,1,214,0,158,255,158,255,181,1,170,1,86,254,37,2,39,2,217,0,173,1,152,1,249,0,155,1,240,1,182,2,161,255,161,255,225,1,226,1,227,1,228,1,164,255,168,255,92,2,236,1,90,3,166,255,94,2,216,1,236,1,176,2,107,0,97,2,169,255,168,255,76,254,49,2,118,1,97,3,30,2,100,3,224,1,102,2,9,1,125,1,63,0,142,3,104,2,233,0,74,0,229,1,160,1,145,3,16,254,147,3,86,254,86,254,148,3,16,254,194,2,129,1,27,3,166,255,30,2,120,2,168,255,133,1,168,255,169,1,249,0,168,255,135,1,233,0,214,0,74,254,160,1,189,255,138,1,160,255,30,2,110,1,156,3,142,1,205,2,63,2,199,2,76,254,156,255,233,0,242,1,218,0,160,1,30,2,166,255,208,2,166,255,149,3,15,254,166,255,126,1,74,0,233,0,90,2,74,2,160,1,74,0,74,0,175,255,44,2,146,2,146,3,205,0,205,0,237,2,75,254,35,1,36,1,240,254,164,255,30,2,218,0,218,0,149,1,149,1,98,2,74,254,106,2,91,2,187,1,91,0,111,1,112,1,86,254,76,3,105,2,143,1,144,1,145,1,78,2,78,2,161,1,163,1,127,254,188,1,30,2,146,1,74,0,202,0,147,1,127,1,128,1,74,0,9,254,233,0,165,1,82,254,160,1,82,254,74,0,101,1,89,2,244,1,107,0,102,1,107,0,75,254,63,0,240,254,240,254,65,3,12,254,195,2,21,3,139,1,127,2,103,2,127,2,187,1,127,2,38,1,39,1,175,2,114,2,86,254,195,1,196,1,197,1,198,1,50,1,51,1,158,255,161,255,205,0,205,0,205,0,205,0,143,2,230,1,231,1,205,2,213,0,214,0,127,254,150,1,151,2,15,254,82,254,82,254,82,254,60,1,15,254,214,0,9,254,107,0,172,1,74,0,235,1,104,1,105,1,188,2,185,2,246,1,156,2,140,1,141,1,74,0,190,255,167,1,184,1,104,3,154,2,155,2,178,1,74,0,217,1,36,1,120,2,213,2,160,2,162,2,216,1,160,2,165,2,191,1,220,1,221,1,215,2,186,1,156,2,80,254,127,254,163,2,127,254,127,254,163,2,143,2,143,2,154,2,190,1,160,2,9,254,54,2,9,254,9,254,222,1,13,254,156,2,74,0,223,1,212,2,52,2,241,1,163,2,171,2,134,3,180,2,74,0,127,1,168,1,156,2,72,3,184,2,187,2,218,0,187,2,41,2,74,3,236,1,217,1,179,2,134,2,221,1,187,2,192,1,193,1,246,1,249,254,218,0,202,0,80,254,80,254,170,2,60,2,9,3,61,2,75,2,206,2,156,2,86,2,88,2,149,1,0,3,17,1,203,2,218,0,178,2,243,1,239,254,217,2,244,2,246,2,74,0,65,2,93,2,95,2,251,2,253,2,96,2,100,2,106,3,113,2,122,3,21,2,120,2,29,2,120,2,60,1,217,2,29,3,175,255,125,2,88,2,187,1,158,2,17,1,181,1,249,254,249,254,21,2,128,2,130,2,77,0,131,2,77,0,108,0,108,0,133,2,4,255,145,2,208,0,208,0,208,0,160,255,148,2,225,0,208,0,208,0,239,254,239,254,208,0,114,2,149,2,195,1,196,1,197,1,198,1,174,2,159,2,107,0,107,3,108,3,111,1,112,1,185,2,83,1,84,1,85,1,197,2,207,2,143,2,60,1,228,2,214,2,168,255,243,2,144,2,158,255,3,255,77,0,208,0,8,3,249,2,24,1,14,3,74,0,10,3,18,3,208,0,120,2,84,3,16,3,218,0,250,2,20,3,74,0,12,3,19,3,60,3,22,3,28,3,114,2,24,1,195,1,196,1,197,1,198,1,149,1,166,255,217,2,7,3,230,2,161,255,195,1,196,1,197,1,198,1,81,1,82,1,83,1,84,1,85,1,127,2,127,2,218,0,127,2,31,3,127,2,127,2,205,0,36,3,208,0,34,3,77,0,127,2,35,3,127,2,127,2,83,3,120,2,199,1,120,2,78,2,169,255,37,3,48,3,38,3,201,1,40,3,85,3,199,1,195,1,196,1,197,1,198,1,42,3,200,1,201,1,44,3,47,3,181,2,74,0,74,0,50,3,202,1,129,2,51,3,132,2,57,3,205,0,53,3,120,2,55,3,2,255,202,1,74,0,62,3,203,1,63,3,107,0,74,0,187,2,78,3,79,3,81,3,95,3,204,2,102,3,244,1,103,3,218,0,1,255,105,3,113,3,88,2,17,1,218,0,194,1,121,3,195,1,196,1,197,1,198,1,214,0,117,3,74,0,74,0,45,1,46,1,47,1,48,1,49,1,210,2,123,3,131,3,107,0,125,3,128,3,152,3,139,3,115,3,223,0,13,254,112,0,74,0,12,254,114,2,99,2,195,1,196,1,197,1,198,1,164,2,77,0,138,3,141,3,199,1,1,3,74,0,74,0,74,0,211,2,200,1,201,1,240,2,137,3,127,2,127,2,127,2,127,2,208,0,208,0,30,2,127,2,127,2,127,2,218,1,127,2,127,2,188,0,202,1,233,0,66,3,203,1,160,1,115,2,63,2,187,2,156,2,96,3,221,2,116,2,205,0,208,0,116,1,208,0,208,0,60,1,0,0,208,0,208,0,0,0,0,0,0,0,77,0,204,1,0,0,0,0,0,0,77,0,77,0,0,0,73,1,74,1,0,0,0,0,0,0,23,3,0,0,127,2,74,0,74,0,127,2,127,2,127,2,127,2,0,0,68,3,24,1,0,0,0,0,74,0,0,0,127,2,194,1,0,0,195,1,196,1,197,1,198,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,0,0,0,0,77,0,208,0,208,0,208,0,208,0,77,0,208,0,208,0,58,3,0,0,208,0,0,0,77,0,24,1,0,0,208,0,114,2,0,0,195,1,196,1,197,1,198,1,0,0,199,1,0,0,0,0,0,0,0,0,0,0,200,1,201,1,74,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,74,0,0,0,0,0,0,0,208,0,0,0,74,0,0,0,202,1,246,253,0,0,203,1,208,0,208,0,17,1,0,0,115,2,246,253,246,253,246,253,0,0,0,0,246,253,246,253,246,253,0,0,246,253,0,0,208,0,0,0,77,0,208,0,0,0,55,2,0,0,246,253,246,253,0,0,0,0,0,0,77,0,0,0,0,0,0,0,208,0,0,0,246,253,246,253,77,0,246,253,246,253,246,253,246,253,246,253,60,1,0,0,0,0,208,0,0,0,0,0,0,0,39,3,41,3,0,0,43,3,0,0,45,3,46,3,0,0,73,1,74,1,0,0,0,0,52,3,0,0,54,3,56,3,0,0,0,0,0,0,0,0,0,0,77,0,114,2,0,0,195,1,196,1,197,1,198,1,234,0,234,0,77,0,0,0,234,0,194,1,246,253,195,1,196,1,197,1,198,1,81,1,82,1,83,1,84,1,85,1,24,1,0,0,24,1,230,2,208,0,195,1,196,1,197,1,198,1,0,0,0,0,0,0,0,0,0,0,255,0,1,1,0,0,115,2,0,0,234,0,234,0,0,0,0,0,32,3,0,0,0,0,41,1,42,1,199,1,0,0,0,0,77,0,0,0,0,0,200,1,201,1,0,0,0,0,246,253,246,253,0,0,246,253,199,1,246,0,246,253,0,0,246,253,246,253,200,1,201,1,0,0,24,1,202,1,0,0,0,0,203,1,0,0,0,0,86,0,0,0,86,0,109,0,109,0,109,0,0,0,0,0,202,1,0,0,0,0,203,1,60,1,227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,3,118,3,119,3,120,3,0,0,73,1,74,1,124,3,126,3,127,3,0,0,129,3,130,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,25,1,0,0,0,0,0,0,208,0,77,0,80,1,81,1,82,1,83,1,84,1,85,1,0,0,0,0,0,0,77,0,0,0,0,0,0,0,25,1,0,0,0,0,0,0,0,0,150,3,0,0,0,0,151,3,153,3,154,3,155,3,0,0,0,0,89,0,0,0,89,0,110,0,110,0,157,3,0,0,0,0,0,0,0,0,0,0,208,0,0,0,228,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,77,0,77,0,0,0,26,1,0,0,0,0,0,0,234,0,234,0,234,0,41,1,0,0,0,0,0,0,77,0,0,0,0,0,0,0,0,0,77,0,0,0,234,0,26,1,234,0,234,0,0,0,24,1,208,0,0,0,0,0,208,0,208,0,0,0,87,0,0,0,87,0,208,0,208,0,0,0,0,0,0,0,0,0,0,0,0,0,77,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,0,0,208,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,0,77,0,77,0,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,0,0,0,0,0,0,0,0,0,245,1,248,1,249,1,250,1,251,1,252,1,253,1,254,1,255,1,0,2,1,2,2,2,3,2,4,2,5,2,6,2,7,2,8,2,9,2,10,2,11,2,12,2,13,2,14,2,15,2,16,2,17,2,86,0,234,0,0,0,0,0,0,0,86,0,86,0,0,0,208,0,38,2,40,2,0,0,0,0,0,0,87,0,0,0,0,0,0,0,0,0,77,0,77,0,0,0,0,0,0,0,25,1,234,0,69,3,0,0,0,0,0,0,77,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,66,2,0,0,234,0,0,0,38,2,40,2,0,0,86,0,234,0,0,0,0,0,0,0,86,0,0,0,0,0,234,0,0,0,0,0,0,0,86,0,25,1,234,0,234,0,94,3,0,0,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,0,0,101,2,89,0,0,0,77,0,0,0,77,0,89,0,89,0,0,0,0,0,234,0,77,0,0,0,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,0,0,0,26,1,0,0,0,0,0,0,0,0,0,0,87,0,86,0,0,0,0,0,0,0,0,0,0,0,208,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,89,0,0,0,0,0,86,0,0,0,89,0,137,2,138,2,0,0,0,0,0,0,0,0,89,0,26,1,0,0,0,0,0,0,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,86,0,0,0,0,0,87,0,87,0,0,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,1,0,0,25,1,0,0,0,0,0,0,0,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,0,0,87,0,0,0,0,0,0,0,0,0,87,0,89,0,0,0,0,0,0,0,86,0,0,0,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,0,0,0,0,0,0,0,0,0,0,0,5,1,0,0,0,0,0,0,25,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,234,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,234,0,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,1,0,0,26,1,0,0,0,0,0,0,87,0,0,0,0,0,234,0,0,0,0,0,0,0,0,0,0,0,0,0,87,0,5,1,0,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,0,0,0,0,0,0,0,0,86,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,0,234,0,0,0,0,0,0,0,66,2,242,2,0,0,245,2,247,2,0,0,26,1,0,0,0,0,252,2,254,2,0,0,0,0,87,0,0,0,0,0,0,0,0,0,0,0,4,3,0,0,0,0,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,2,247,2,0,0,252,2,254,2,0,0,0,0,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,0,86,0,0,0,0,0,0,0,0,0,87,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,89,0,86,0,0,0,0,0,0,0,0,0,0,0,0,0,25,1,0,0,0,0,234,0,0,0,0,0,0,0,59,3,0,0,0,0,0,0,0,0,0,0,0,0,61,3,0,0,0,0,0,0,86,0,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,1,86,0,0,0,0,0,0,0,61,3,5,1,0,0,111,0,111,0,0,0,0,0,234,0,0,0,0,0,86,0,86,0,86,0,111,0,0,0,0,0,0,0,89,0,89,0,0,0,0,0,0,0,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,87,0,0,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,26,1,111,0,111,0,0,0,0,0,0,0,111,0,111,0,111,0,0,0,5,1,0,0,0,0,0,0,111,0,0,0,0,0,0,0,89,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,86,0,86,0,0,0,0,0,0,0,0,0,0,0,70,3,89,0,0,0,0,0,86,0,0,0,0,0,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,89,0,89,0,0,0,87,0,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,0,0,109,0,0,0,87,0,0,0,0,0,64,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,2,0,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,86,0,0,0,86,0,87,0,87,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,89,0,0,0,0,0,0,0,87,0,0,0,71,3,0,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,0,87,0,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,2,89,0,0,0,0,0,0,0,0,0,0,0,89,0,0,0,89,0,0,0,111,0,111,0,111,0,111,0,89,0,0,0,0,0,0,0,0,0,0,0,87,0,87,0,0,0,60,1,61,1,62,1,63,1,64,1,65,1,66,1,67,1,87,0,69,1,70,1,0,0,0,0,0,0,0,0,73,1,74,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,0,0,0,0,0,0,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,87,0,0,0,0,0,0,0,0,0,111,0,87,0,0,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,218,2,219,2,0,0,0,0,111,0,0,0,0,0,0,0,111,0,111,0,0,0,0,0,111,0,0,0,229,2,0,0,0,0,0,0,0,0,238,2,0,0,0,0,0,0,0,0,0,0,111,0,111,0,0,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,0,0,0,0,111,0,0,0,60,1,245,253,245,253,245,253,245,253,65,1,66,1,0,0,111,0,245,253,245,253,111,0,0,0,15,3,0,0,73,1,74,1,111,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,3,25,3,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,111,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,0,0,0,0,246,253,4,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,64,3,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,73,3,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,3,0,0,110,3,48,0,0,0,0,0,49,0,50,0,111,3,51,0,52,0,0,0,53,0,0,0,54,0,55,0,111,0,0,0,0,0,56,0,150,2,0,0,0,0,0,0,111,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,111,0,0,0,0,0,60,1,61,1,62,1,63,1,64,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,246,253,246,253,73,1,74,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,0,0,111,0,0,0,111,0,0,0,0,0,0,0,0,0,75,1,0,0,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,0,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,2,0,0,0,0,27,255,0,0,0,0,0,0,0,0,0,0,111,0,111,0,0,0,111,0,111,0,0,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,1,61,1,62,1,63,1,64,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,0,0,9,254,73,1,74,1,0,0,0,0,0,0,0,0,0,0,9,254,9,254,9,254,0,0,0,0,0,0,9,254,9,254,0,0,9,254,111,0,0,0,0,0,0,0,111,0,0,0,0,0,75,1,9,254,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,9,254,9,254,0,0,9,254,9,254,9,254,9,254,9,254,0,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,9,254,9,254,9,254,9,254,9,254,9,254,9,254,9,254,9,254,9,254,9,254,9,254,9,254,0,0,111,0,9,254,9,254,9,254,240,254,152,2,0,0,0,0,0,0,0,0,0,0,0,0,240,254,240,254,240,254,0,0,0,0,0,0,240,254,240,254,0,0,240,254,0,0,0,0,159,255,9,254,0,0,9,254,9,254,9,254,9,254,9,254,9,254,9,254,9,254,9,254,9,254,0,0,0,0,0,0,0,0,240,254,240,254,0,0,240,254,240,254,240,254,240,254,240,254,0,0,0,0,9,254,9,254,9,254,9,254,167,255,0,0,9,254,0,0,9,254,9,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,254,240,254,240,254,240,254,240,254,240,254,240,254,240,254,240,254,240,254,240,254,240,254,240,254,0,0,0,0,240,254,240,254,240,254,0,0,153,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,255,240,254,0,0,240,254,240,254,240,254,240,254,240,254,240,254,240,254,240,254,240,254,240,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,254,240,254,240,254,165,255,0,0,240,254,0,0,240,254,240,254,3,1,0,0,5,0,6,0,7,0,8,0,9,0,246,253,246,253,246,253,10,0,11,0,0,0,0,0,246,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,0,0,5,0,6,0,7,0,8,0,9,0,246,253,246,253,246,253,10,0,11,0,0,0,246,253,246,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,246,253,10,0,11,0,246,253,246,253,246,253,12,0,246,253,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,246,253,10,0,11,0,246,253,246,253,246,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,246,253,246,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,253,0,0,0,0,0,0,0,0,0,0,0,0,246,253,246,253,3,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,246,253,246,253,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,246,253,246,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,4,1,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,253,0,0,246,253,246,253,3,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,253,0,0,246,253,246,253,3,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,253,0,0,0,0,0,0,0,0,0,0,0,0,246,253,246,253,3,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,246,253,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,246,253,246,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,229,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,230,0,231,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,232,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,214,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,213,0,214,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,214,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,135,1,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,58,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,1,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,0,0,0,0,0,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,145,0,146,0,0,0,0,0,0,0,0,0,0,0,147,0,148,0,149,0,150,0,151,0,152,0,153,0,154,0,35,0,36,0,155,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,0,0,16,254,16,254,16,254,0,0,16,254,0,0,0,0,0,0,16,254,16,254,0,0,0,0,0,0,16,254,184,0,16,254,16,254,16,254,16,254,16,254,16,254,16,254,0,0,16,254,0,0,0,0,0,0,16,254,16,254,16,254,16,254,16,254,16,254,16,254,0,0,0,0,16,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,254,16,254,0,0,16,254,16,254,16,254,16,254,16,254,16,254,16,254,16,254,16,254,16,254,16,254,16,254,0,0,16,254,16,254,0,0,16,254,16,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,254,0,0,0,0,16,254,16,254,0,0,16,254,16,254,0,0,16,254,16,254,16,254,16,254,0,0,0,0,0,0,16,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,254,16,254,16,254,0,0,0,0,0,0,0,0,14,254,14,254,14,254,0,0,14,254,0,0,0,0,16,254,14,254,14,254,0,0,0,0,16,254,14,254,0,0,14,254,14,254,14,254,14,254,14,254,14,254,14,254,0,0,14,254,0,0,0,0,0,0,14,254,14,254,14,254,14,254,14,254,14,254,14,254,0,0,0,0,14,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,254,14,254,0,0,14,254,14,254,14,254,14,254,14,254,14,254,14,254,14,254,14,254,14,254,14,254,14,254,0,0,14,254,14,254,0,0,14,254,14,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].concat([0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,254,0,0,0,0,14,254,14,254,0,0,14,254,14,254,0,0,14,254,14,254,14,254,14,254,0,0,0,0,0,0,14,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,254,14,254,14,254,0,0,0,0,0,0,0,0,15,254,15,254,15,254,0,0,15,254,0,0,0,0,14,254,15,254,15,254,0,0,0,0,14,254,15,254,0,0,15,254,15,254,15,254,15,254,15,254,15,254,15,254,0,0,15,254,0,0,0,0,0,0,15,254,15,254,15,254,15,254,15,254,15,254,15,254,0,0,0,0,15,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,254,15,254,0,0,15,254,15,254,15,254,15,254,15,254,15,254,15,254,15,254,15,254,15,254,15,254,15,254,0,0,15,254,15,254,0,0,15,254,15,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,254,0,0,0,0,15,254,15,254,0,0,15,254,15,254,0,0,15,254,15,254,15,254,15,254,0,0,0,0,0,0,15,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,254,15,254,15,254,0,0,0,0,0,0,0,0,13,254,13,254,13,254,0,0,13,254,0,0,0,0,15,254,13,254,13,254,0,0,0,0,15,254,13,254,0,0,13,254,13,254,13,254,13,254,13,254,13,254,13,254,0,0,0,0,0,0,0,0,0,0,13,254,13,254,13,254,13,254,13,254,13,254,13,254,0,0,0,0,13,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,254,13,254,0,0,13,254,13,254,13,254,13,254,13,254,13,254,13,254,13,254,13,254,13,254,13,254,13,254,0,0,13,254,13,254,0,0,13,254,13,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,254,191,2,0,0,13,254,13,254,0,0,13,254,13,254,0,0,13,254,13,254,13,254,13,254,0,0,0,0,0,0,13,254,0,0,0,0,0,0,159,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,254,12,254,12,254,0,0,12,254,13,254,13,254,13,254,12,254,12,254,0,0,0,0,0,0,12,254,0,0,12,254,12,254,12,254,12,254,12,254,12,254,12,254,0,0,0,0,13,254,0,0,0,0,12,254,12,254,12,254,12,254,12,254,12,254,12,254,0,0,0,0,12,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,254,12,254,0,0,12,254,12,254,12,254,12,254,12,254,12,254,12,254,12,254,12,254,12,254,12,254,12,254,0,0,12,254,12,254,0,0,12,254,12,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,254,192,2,0,0,12,254,12,254,0,0,12,254,12,254,0,0,12,254,12,254,12,254,12,254,0,0,0,0,0,0,12,254,0,0,0,0,0,0,157,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,255,9,255,9,255,0,0,9,255,12,254,12,254,12,254,9,255,9,255,0,0,0,0,0,0,9,255,0,0,9,255,9,255,9,255,9,255,9,255,9,255,9,255,0,0,0,0,12,254,0,0,0,0,9,255,9,255,9,255,9,255,9,255,9,255,9,255,0,0,0,0,9,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,255,9,255,0,0,9,255,9,255,9,255,9,255,9,255,9,255,9,255,9,255,9,255,9,255,9,255,9,255,0,0,9,255,9,255,0,0,9,255,9,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,255,0,0,0,0,9,255,9,255,0,0,9,255,9,255,0,0,9,255,9,255,9,255,9,255,0,0,0,0,0,0,9,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,255,9,255,9,255,0,0,9,255,9,255,9,255,9,255,9,255,9,255,0,0,0,0,0,0,9,255,0,0,9,255,9,255,9,255,9,255,9,255,9,255,9,255,0,0,0,0,243,0,0,0,0,0,9,255,9,255,9,255,9,255,9,255,9,255,9,255,0,0,0,0,9,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,255,9,255,0,0,9,255,9,255,9,255,9,255,9,255,9,255,9,255,9,255,9,255,9,255,9,255,9,255,0,0,9,255,9,255,0,0,9,255,9,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,255,0,0,0,0,9,255,9,255,0,0,9,255,9,255,0,0,9,255,9,255,9,255,9,255,0,0,0,0,0,0,9,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,254,11,254,11,254,0,0,11,254,9,255,9,255,9,255,11,254,11,254,0,0,0,0,0,0,11,254,0,0,11,254,11,254,11,254,11,254,11,254,11,254,11,254,0,0,0,0,246,0,0,0,0,0,11,254,11,254,11,254,11,254,11,254,11,254,11,254,0,0,0,0,11,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,254,11,254,0,0,11,254,11,254,11,254,11,254,11,254,11,254,11,254,11,254,11,254,11,254,11,254,11,254,0,0,11,254,11,254,0,0,11,254,11,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,254,0,0,0,0,11,254,11,254,0,0,11,254,11,254,0,0,11,254,11,254,11,254,11,254,0,0,0,0,0,0,11,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,254,10,254,10,254,0,0,10,254,11,254,11,254,11,254,10,254,10,254,0,0,0,0,0,0,10,254,0,0,10,254,10,254,10,254,10,254,10,254,10,254,10,254,0,0,0,0,11,254,0,0,0,0,10,254,10,254,10,254,10,254,10,254,10,254,10,254,0,0,0,0,10,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,254,10,254,0,0,10,254,10,254,10,254,10,254,10,254,10,254,10,254,10,254,10,254,10,254,10,254,10,254,0,0,10,254,10,254,0,0,10,254,10,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,254,0,0,0,0,10,254,10,254,0,0,10,254,10,254,0,0,10,254,10,254,10,254,10,254,0,0,0,0,0,0,10,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,10,254,10,254,10,254,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,10,254,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,1,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,104,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,22,1,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,150,2,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,60,1,61,1,62,1,63,1,64,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,0,0,0,0,73,1,74,1,0,0,0,0,0,0,0,0,21,1,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,75,1,0,0,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,0,0,0,0,0,0,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,1,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,0,0,0,0,0,0,137,0,138,0,139,0,190,0,191,0,192,0,193,0,144,0,145,0,146,0,0,0,0,0,0,0,0,0,0,0,147,0,148,0,149,0,194,0,195,0,152,0,196,0,154,0,28,1,29,1,197,0,30,1,0,0,0,0,0,0,0,0,0,0,31,1,0,0,0,0,0,0,0,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,32,1,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,0,0,0,0,0,0,137,0,138,0,139,0,190,0,191,0,192,0,193,0,144,0,145,0,146,0,0,0,0,0,0,0,0,0,0,0,147,0,148,0,149,0,194,0,195,0,152,0,196,0,154,0,28,1,29,1,197,0,30,1,0,0,0,0,0,0,0,0,0,0,31,1,0,0,0,0,0,0,0,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,117,1,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,0,0,0,0,0,0,137,0,138,0,139,0,190,0,191,0,192,0,193,0,144,0,145,0,146,0,0,0,0,0,0,0,0,0,0,0,147,0,148,0,149,0,194,0,195,0,152,0,196,0,154,0,0,0,0,0,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,0,0,0,0,0,0,137,0,138,0,139,0,190,0,191,0,192,0,193,0,144,0,145,0,146,0,0,0,0,0,0,0,0,0,0,0,147,0,148,0,149,0,194,0,195,0,152,0,196,0,154,0,0,0,0,0,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,58,0,59,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,58,0,59,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,229,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,230,0,231,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,229,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,87,2,231,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,229,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,230,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,229,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,231,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,229,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,87,2,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,229,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,233,1,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,230,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,233,1,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,239,2,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,87,2,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,58,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,46,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,57,0,232,0,59,0,12,0,0,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,99,0,34,0,35,0,36,0,100,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,0,0,0,0,0,102,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,104,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,222,0,0,0,0,0,49,0,50,0,0,0,51,0,52,0,0,0,53,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,104,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,1,0,0,0,0,56,1,50,0,0,0,51,0,52,0,0,0,57,1,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,104,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,99,0,34,0,35,0,36,0,100,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,104,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,1,0,0,0,0,56,1,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,104,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,3,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,104,0,13,0,14,0,15,0,93,0,94,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,95,0,96,0,97,0,23,0,24,0,25,0,26,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,42,0,43,0,0,0,44,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,3,0,0,0,0,103,0,50,0,0,0,51,0,52,0,0,0,0,0,0,0,54,0,55,0,0,0,0,0,0,0,56,0,0,0,18,2,19,2,0,0,0,0,20,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,60,1,61,1,62,1,63,1,64,1,65,1,66,1,0,0,171,0,69,1,70,1,0,0,0,0,0,0,0,0,73,1,74,1,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,26,2,27,2,0,0,0,0,28,2,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,47,2,19,2,0,0,0,0,48,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,32,2,27,2,0,0,0,0,33,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,67,2,19,2,0,0,0,0,68,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,70,2,27,2,0,0,0,0,71,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,80,2,19,2,0,0,0,0,81,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,83,2,27,2,0,0,0,0,84,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,108,2,19,2,0,0,0,0,109,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,111,2,27,2,0,0,0,0,112,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,132,3,19,2,0,0,0,0,133,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,135,3,27,2,0,0,0,0,136,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,143,3,19,2,0,0,0,0,144,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,0,0,0,0,60,1,61,1,62,1,63,1,64,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,0,0,246,0,73,1,74,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,2,27,2,0,0,75,1,33,2,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,0,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,0,0,0,0,165,0,166,0,0,0,0,0,167,0,168,0,169,0,170,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,0,0,182,0,183,0,60,1,61,1,62,1,63,1,64,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,0,0,0,0,73,1,74,1,60,1,61,1,62,1,63,1,64,1,65,1,66,1,67,1,68,1,69,1,70,1,245,253,245,253,0,0,0,0,73,1,74,1,0,0,0,0,0,0,0,0,0,0,75,1,0,0,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,1,77,1,78,1]).concat([79,1,80,1,81,1,82,1,83,1,84,1,85,1]), "i8", ALLOC_NONE, 5244420);
allocate([115,121,110,116,97,120,32,101,114,114,111,114,44,32,117,110,101,120,112,101,99,116,101,100,32,37,115,0] /* syntax error, unexpe */, "i8", ALLOC_NONE, 5264916);
allocate([32,111,114,32,37,115,0] /*  or %s\00 */, "i8", ALLOC_NONE, 5264944);
allocate([44,32,101,120,112,101,99,116,105,110,103,32,37,115,0] /* , expecting %s\00 */, "i8", ALLOC_NONE, 5264952);
allocate([0,2,0,2,2,1,1,3,2,1,0,5,4,2,1,1,3,2,0,4,2,3,3,3,3,3,4,1,3,3,6,5,5,5,5,3,3,3,3,1,3,3,1,3,3,3,2,1,1,1,1,1,4,0,5,2,3,4,5,4,5,2,2,2,2,2,1,3,1,3,1,2,3,5,2,4,2,4,1,3,1,3,2,3,1,2,1,4,3,3,3,3,2,1,1,4,3,3,3,3,2,1,1,1,2,1,3,1,1,1,1,1,1,1,1,0,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,5,3,5,6,5,5,5,5,4,3,3,3,3,3,3,3,3,3,4,4,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,6,1,1,1,2,4,2,3,1,1,1,1,2,4,2,1,2,2,4,1,0,2,2,2,1,1,2,3,4,3,4,2,1,1,1,1,1,1,0,4,0,4,0,3,3,3,2,3,3,1,4,3,1,4,3,2,1,2,0,4,6,6,0,0,7,0,0,7,5,4,0,0,9,0,6,0,0,8,0,5,0,6,0,0,9,1,1,1,1,1,1,1,2,1,1,1,5,1,2,1,1,1,3,1,3,1,4,6,3,5,2,4,1,3,6,8,4,6,4,2,6,2,4,6,2,4,2,4,1,1,1,3,1,4,1,4,1,3,1,1,4,1,3,3,0,5,2,4,5,5,2,4,4,3,3,3,2,1,4,0,5,0,5,5,1,1,6,1,1,1,1,2,1,2,1,1,1,1,1,2,3,0,4,0,5,1,1,4,2,1,1,1,1,1,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,4,2,3,2,6,8,4,6,4,6,2,4,6,2,4,2,4,1,0,1,1,1,1,1,1,1,3,1,3,3,3,1,3,1,3,1,1,2,1,1,1,2,2,1,1,0,4,1,2,1,3,3,2,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,2,2,0,1,1,1,1,1,1,2,0] /* \00\02\00\02\02\01\0 */, "i8", ALLOC_NONE, 5264968);
allocate([0,0,144,0,146,0,145,0,147,0,148,0,148,0,148,0,148,0,149,0,150,0,149,0,151,0,152,0,153,0,153,0,153,0,153,0,155,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,154,0,156,0,156,0,157,0,157,0,157,0,157,0,157,0,157,0,158,0,159,0,159,0,160,0,160,0,162,0,161,0,163,0,163,0,163,0,163,0,163,0,163,0,163,0,163,0,163,0,163,0,163,0,164,0,164,0,165,0,165,0,166,0,166,0,166,0,166,0,166,0,166,0,166,0,166,0,166,0,166,0,167,0,167,0,168,0,168,0,169,0,169,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,171,0,171,0,171,0,171,0,171,0,171,0,171,0,171,0,172,0,172,0,173,0,173,0,173,0,174,0,174,0,174,0,174,0,174,0,175,0,175,0,176,0,177,0,176,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,179,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,180,0,181,0,182,0,182,0,182,0,182,0,183,0,184,0,184,0,185,0,185,0,185,0,185,0,185,0,186,0,186,0,186,0,186,0,186,0,188,0,187,0,189,0,190,0,190,0,191,0,191,0,191,0,191,0,192,0,192,0,192,0,193,0,193,0,193,0,193,0,193,0,193,0,194,0,193,0,195,0,193,0,196,0,193,0,193,0,193,0,193,0,193,0,193,0,193,0,193,0,193,0,193,0,193,0,193,0,193,0,193,0,193,0,197,0,193,0,193,0,193,0,198,0,199,0,193,0,200,0,201,0,193,0,193,0,193,0,202,0,203,0,193,0,204,0,193,0,205,0,206,0,193,0,207,0,193,0,208,0,193,0,209,0,210,0,193,0,193,0,193,0,193,0,193,0,211,0,212,0,212,0,212,0,213,0,213,0,214,0,214,0,215,0,215,0,216,0,216,0,217,0,217,0,218,0,218,0,219,0,219,0,219,0,219,0,219,0,219,0,219,0,219,0,219,0,220,0,220,0,220,0,220,0,220,0,220,0,220,0,220,0,220,0,220,0,220,0,220,0,220,0,220,0,220,0,221,0,221,0,222,0,222,0,222,0,223,0,223,0,224,0,224,0,225,0,225,0,226,0,226,0,227,0,227,0,229,0,228,0,230,0,230,0,230,0,230,0,231,0,231,0,231,0,231,0,231,0,231,0,231,0,231,0,231,0,233,0,232,0,234,0,232,0,235,0,236,0,236,0,237,0,237,0,238,0,238,0,238,0,239,0,239,0,240,0,240,0,241,0,241,0,242,0,242,0,242,0,242,0,244,0,243,0,245,0,243,0,246,0,247,0,247,0,248,0,249,0,249,0,249,0,249,0,249,0,249,0,250,0,250,0,250,0,250,0,251,0,251,0,251,0,251,0,251,0,252,0,253,0,253,0,253,0,253,0,253,0,253,0,253,0,254,0,254,0,255,0,0,1,255,0,255,0,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,15,1,15,1,16,1,17,1,16,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,32,1,32,1,33,1], "i8", ALLOC_NONE, 5265492);
allocate([56,253,56,253,56,253,159,1,56,253,31,0,56,253,197,254,45,6,56,253,35,0,56,253,230,254,181,0,6,0,201,255,56,253,222,253,56,253,251,255,47,3,101,255,21,0,228,255,29,255,135,254,246,255,136,0,216,255,58,3,9,0,250,255,56,253,56,253,4,255,56,253,27,4,196,0,56,253,241,255,39,1,201,254,57,0,242,255,56,253,166,254,27,255,4,0,243,254,8,0,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,127,2,45,255,148,254,221,255,247,253,56,253,141,253,133,253,223,0,56,253,51,254,56,253,200,253,56,253,218,255,56,253,56,253,169,0,56,253,56,253,56,253,181,255,56,253,56,253,143,254,56,253,233,255,56,253,56,253,56,253,56,253,56,253,65,2,56,253,56,253,56,253,56,253,17,0,56,253,56,253,115,4,24,5,93,3,199,4,56,253,56,253,92,0,9,255,65,253,155,255,224,253,219,253,216,253,57,253,59,0,242,0,56,253,21,254,56,253,7,255,50,1,56,253,56,253,56,253,245,255,133,254,46,7,196,254,56,253,182,2,37,0,231,255,161,255,252,253,23,255,36,0,18,0,22,0,254,255], "i8", ALLOC_NONE, 5266540);
allocate([56,253,111,0,33,9,56,253,30,26,206,32,3,34,186,18,46,25,56,253,141,31,141,31,179,16,56,253,56,253,53,33,244,26,244,26,56,253,56,253,244,26,136,21,248,21,56,253,56,253,56,253,56,253,220,0,46,25,56,253,7,0,56,253,56,253,52,19,176,19,56,253,56,253,44,20,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,248,31,248,31,93,0,8,14,141,31,202,27,11,29,72,23,56,253,62,24,87,1,155,1,99,32,248,31,56,253,92,1,56,253,8,3,56,253,185,1,56,253,56,253,146,0,77,0,56,253,44,0,156,33,56,253,97,0,126,39,23,0,69,0,33,0,78,0,56,253,56,253,56,253,56,253,56,253,56,253,29,0,168,0,56,253,43,0,89,0,56,253,56,253,56,253,56,253,56,253,128,0,148,0,162,0,209,0,105,1,141,31,142,1,151,14,193,1,56,253,66,0,56,253,28,1,56,253,56,253,89,0,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,41,0,53,0,108,0,239,0,56,253,56,253,56,253,56,253,56,253,56,253,22,1,62,1,56,253,80,1,56,253,103,1,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,33,0,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,182,24,56,253,56,253,189,0,56,253,241,10,141,0,185,1,58,0,227,0,47,1,19,0,6,1,56,0,58,0,56,253,56,253,92,1,83,1,56,253,56,253,219,0,141,31,141,31,56,1,56,253,56,253,121,1,91,1,87,0,131,0,248,31,248,31,248,31,248,31,56,253,126,39,90,1,56,253,56,253,44,1,99,1,56,253,56,253,56,253,53,16,56,253,244,26,244,26,56,253,56,253,51,17,141,31,56,253,56,253,54,1,38,15,56,253,175,1,174,1,14,1,137,26,8,14,108,1,92,1,8,3,102,1,153,1,56,253,185,1,102,1,125,1,238,255,247,255,56,253,90,1,127,1,247,255,56,253,226,1,106,34,154,1,191,1,197,1,244,1,243,2,56,253,56,253,56,253,56,253,206,1,56,253,56,253,56,253,56,253,216,1,229,1,233,1,56,253,56,253,56,253,56,253,177,17,141,31,141,31,141,31,141,31,137,26,141,31,141,31,56,253,56,253,118,29,56,253,8,14,182,23,167,1,118,29,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,248,31,110,35,244,26,183,35,56,253,56,253,72,39,56,253,56,253,56,253,99,32,99,32,56,253,224,1,56,253,185,1,56,253,9,2,56,253,56,253,56,253,92,1,56,253,56,253,56,253,0,36,244,26,73,36,241,10,141,31,104,3,56,253,4,2,56,253,70,2,74,2,114,0,56,253,119,11,87,2,248,31,146,36,244,26,219,36,248,31,248,31,121,12,83,1,225,29,73,2,56,253,75,0,75,0,173,0,36,37,244,26,109,37,56,253,56,253,56,253,56,253,248,31,95,27,56,253,56,253,53,28,56,253,102,1,217,1,56,253,56,253,102,1,56,253,220,1,223,1,56,253,115,0,56,253,56,253,46,25,249,12,227,1,146,36,219,36,248,31,8,3,102,1,56,253,56,253,46,18,235,1,102,1,56,253,56,253,160,28,56,253,56,253,11,29,56,253,56,253,56,253,9,2,44,0,106,34,56,253,106,34,182,37,244,26,255,37,1,2,56,253,56,253,56,253,56,253,16,3,56,253,56,253,56,253,56,253,253,3,84,0,56,253,56,253,56,253,56,253,236,1,56,253,245,1,77,2,248,1,83,2,56,253,56,253,6,2,38,15,56,253,56,253,248,31,248,31,56,253,56,253,56,253,56,253,56,253,56,253,56,253,56,253,46,0,248,31,56,253,253,1,254,1,56,253,102,1,106,34,3,2,56,253,56,253,56,253,42,2,93,9,56,253,56,253,174,1,148,8,148,8,148,8,148,8,49,3,49,3,129,35,219,7,148,8,148,8,143,39,143,39,99,2,99,2,18,39,49,3,49,3,60,4,60,4,195,3,45,2,45,2,174,1,174,1,174,1,11,10,104,22,98,10,216,22,56,253,148,0,56,253,102,1,33,2,56,253,67,2,56,253,56,253,248,21,56,253,56,253,219,3,46,0,46,0,56,253,184,9,56,253,126,39,56,253,56,253,92,1,56,253,141,31,241,10,160,1,65,1,56,253,148,0,102,1,148,0,144,2,115,0,253,3,241,10,92,1,166,25,46,25,56,253,76,30,146,2,56,253,239,1,56,253,179,23,168,20,24,21,102,1,5,1,117,1,146,2,155,2,45,0,56,253,56,253,56,253,56,253,56,253,76,0,140,0,102,1,174,0,178,0,141,31,56,253,248,31,90,1,56,253,99,1,56,253,56,253,56,253,56,253,95,27,53,28,56,253,56,253,31,2,56,253,126,39,3,1,8,3,56,253,247,255,167,1,56,253,160,1,65,1,102,1,217,0,245,0,248,31,56,253,16,3,165,1,56,253,32,2,102,1,56,253,102,1,181,15,38,15,56,253,253,3,56,253,56,253,253,3,56,253,56,253,147,2,56,253,56,253,56,253,34,2,38,15,174,1,174,1,56,253,157,2,181,15,56,253,56,253,37,2,183,30,56,253,56,253,106,34,99,32,248,31,63,2,99,32,99,32,56,253,224,1,38,2,102,2,99,32,99,32,56,253,56,253,224,1,56,253,78,0,146,0,181,15,38,15,248,31,46,0,56,253,92,1,168,2,56,253,56,253,56,253,102,1,173,2,56,253,56,253,56,253,253,1,56,253,104,2,56,253,136,13,179,2,56,253,141,31,181,2,56,253,248,31,248,31,118,1,248,31,248,31,186,2,56,253,34,31,248,11,181,15,181,15,185,0,75,0,56,253,56,253,59,2,56,253,56,253,150,1,56,253,102,1,136,3,85,2,242,3,56,253,89,2,90,2,217,2,106,2,56,253,105,2,107,2,56,253,114,2,56,253,117,2,114,2,56,253,121,2,135,2,102,1,148,2,125,2,56,253,129,2,131,2,56,253,255,2,248,31,132,2,56,253,126,39,248,31,56,253,126,39,56,253,126,39,56,253,56,253,99,32,56,253,126,39,56,253,126,39,56,253,56,253,56,253,7,3,140,2,126,39,38,15,241,10,56,253,56,253,56,253,56,253,104,3,209,34,58,0,56,253,56,253,181,15,56,253,56,253,58,0,56,253,248,31,56,253,56,253,151,0,13,3,14,3,56,253,53,28,56,253,143,2,136,3,97,2,56,253,56,253,195,2,56,253,56,253,253,3,56,253,147,2,56,253,147,2,56,253,147,2,56,253,56,253,56,253,56,35,170,2,56,253,11,4,56,253,11,4,56,253,147,2,56,253,56,253,150,2,126,39,56,253,126,39,56,253,56,253,149,2,20,3,241,10,234,2,56,253,21,2,197,1,244,1,241,10,56,253,119,11,56,253,56,253,56,253,56,253,56,253,181,15,136,3,143,2,136,3,152,2,56,253,147,0,56,253,56,253,114,2,163,2,114,2,114,2,240,2,23,2,56,253,172,2,175,2,114,2,56,253,176,2,114,2,56,253,56,253,45,3,9,2,72,38,244,26,145,38,74,2,239,1,50,3,143,2,136,3,195,2,56,253,56,253,147,2,56,253,56,253,56,253,56,253,218,38,11,4,56,253,147,2,56,253,56,253,147,2,56,253,56,253,56,253,134,0,65,1,102,1,122,0,149,0,56,253,56,253,56,253,143,2,56,253,114,2,180,2,183,2,114,2,177,2,114,2,114,2,163,0,56,253,56,253,147,2,56,253,56,253,56,253,114,2,56,253], "i8", ALLOC_NONE, 5266832);
allocate([255,255,1,0,2,0,60,0,61,0,62,0,253,0,119,1,120,1,6,1,7,1,164,1,64,0,65,0,206,0,66,0,67,0,42,2,169,2,68,0,69,0,8,1,70,0,71,0,72,0,189,1,73,0,207,0,105,0,106,0,199,0,200,0,201,0,59,2,186,0,187,0,75,0,235,0,13,1,22,2,161,2,156,1,157,1,244,0,245,0,237,0,148,1,158,1,237,1,76,0,203,0,176,1,12,1,27,1,220,0,200,2,221,0,201,2,85,2,80,3,46,2,43,2,6,3,113,1,115,1,58,2,11,3,0,1,123,1,77,2,189,2,190,2,226,0,117,2,118,2,119,2,231,2,141,2,142,2,216,2,86,3,87,3,205,1,124,2,53,1,232,1,78,0,79,0,99,1,36,2,35,2,134,1,77,3,62,2,183,2,13,3,17,3,80,0,81,0,37,1,219,1,136,2,82,0,83,0,84,0,34,1,85,0,209,0,210,0,88,0,211,0,108,1,45,2,56,2,57,2,207,1,208,1,209,1,210,1,211,1,234,2,235,2,212,1,213,1,214,1,215,1,223,2,126,2,189,0,114,1,18,1,159,1,240,0,90,0,50,2,24,2,91,1,216,0,153,1,154,1,157,2,180,1,124,1,251,0,219,0,10,1], "i8", ALLOC_NONE, 5268684);
allocate([2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,9,1,0,0,0,0,252,1,33,1,36,1,0,0,56,1,57,1,58,1,59,1,20,1,23,1,128,1,178,1,177,1,179,1,180,1,254,1,0,0,10,0,0,0,182,1,181,1,170,1,8,1,172,1,171,1,174,1,173,1,166,1,167,1,148,1,156,1,149,1,183,1,184,1,0,0,0,0,0,0,0,0,13,1,10,2,10,2,78,0,29,1,0,0,0,0,0,0,0,0,0,0,3,0,252,1,6,0,9,0,27,0,39,0,42,0,50,0,49,0,0,0,66,0,0,0,70,0,80,0,0,0,47,0,228,0,0,0,51,0,27,1,3,1,4,1,5,1,147,1,157,1,146,1,176,1,0,0,6,1,7,1,247,0,5,0,8,0,56,1,57,1,20,1,23,1,128,1,0,0,102,0,103,0,0,0,0,0,0,0,0,0,105,0,0,0,60,1,0,0,176,1,7,1,0,0,49,1,155,0,165,0,156,0,178,0,152,0,171,0,161,0,160,0,181,0,182,0,176,0,159,0,158,0,154,0,179,0,183,0,184,0,163,0,153,0,166,0,170,0,172,0,164,0,157,0,173,0,180,0,175,0,174,0,167,0,177,0,162,0,151,0,169,0,168,0,150,0,148,0,149,0,145,0,146,0,147,0,107,0,109,0,108,0,141,0,142,0,138,0,120,0,121,0,122,0,129,0,126,0,128,0,123,0,124,0,143,0,144,0,130,0,131,0,135,0,125,0,127,0,117,0,118,0,119,0,132,0,133,0,134,0,136,0,137,0,139,0,140,0,232,1,51,1,110,0,111,0,231,1,0,0,174,0,167,0,177,0,162,0,145,0,146,0,107,0,108,0,0,0,112,0,114,0,20,0,113,0,0,0,0,0,48,0,0,0,0,0,0,0,176,1,0,0,7,1,0,0,5,2,7,2,252,1,0,0,8,2,6,2,253,1,0,0,0,0,0,0,71,1,70,1,0,0,0,0,176,1,7,1,0,0,0,0,0,0,0,0,242,0,229,0,252,0,64,0,246,0,10,2,10,2,236,1,65,0,63,0,254,1,62,0,0,0,10,2,127,1,61,0,254,1,0,0,255,1,18,0,0,0,0,0,206,0,0,0,207,0,17,1,0,0,0,0,0,0,252,1,15,0,254,1,68,0,14,0,11,1,254,1,0,0,2,2,2,2,230,0,0,0,0,0,2,2,234,1,0,0,0,0,76,0,0,0,86,0,93,0,205,1,162,1,161,1,163,1,164,1,0,0,160,1,159,1,150,1,152,1,0,0,168,1,169,1,46,0,221,0,222,0,4,0,253,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,1,117,1,0,0,82,0,0,0,74,0,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,2,0,0,251,1,250,1,0,0,132,1,130,1,28,1,0,0,0,0,121,1,55,0,26,1,46,1,102,0,103,0,104,0,168,1,169,1,0,0,186,1,44,1,185,1,0,0,10,2,0,0,0,0,0,0,205,1,53,1,0,0,115,0,0,0,10,2,17,1,62,1,0,0,61,1,0,0,0,0,10,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,2,0,0,0,0,17,1,0,0,10,2,0,0,41,1,239,1,253,0,249,0,0,0,0,0,243,0,251,0,0,0,244,0,254,1,0,0,22,1,248,0,254,1,238,0,10,2,10,2,237,0,254,1,25,1,45,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,254,1,15,1,13,0,253,1,67,0,254,1,14,1,18,1,4,2,231,0,3,2,4,2,233,0,19,1,235,1,92,0,84,0,0,0,79,0,0,0,0,0,10,2,0,0,211,1,208,1,207,1,206,1,209,1,0,0,223,1,227,1,226,1,222,1,205,1,0,0,112,1,210,1,212,1,214,1,10,2,220,1,10,2,225,1,10,2,0,0,204,1,165,1,0,0,0,0,151,1,154,1,0,0,0,0,7,0,21,0,22,0,23,0,24,0,25,0,43,0,44,0,10,2,0,0,28,0,37,0,0,0,38,0,254,1,0,0,72,0,83,0,41,0,40,0,0,0,185,0,252,0,36,0,203,0,211,0,216,0,217,0,218,0,213,0,215,0,225,0,226,0,219,0,220,0,196,0,197,0,223,0,224,0,254,1,212,0,214,0,208,0,209,0,210,0,198,0,199,0,200,0,201,0,202,0,243,1,248,1,244,1,249,1,126,1,247,0,124,1,254,1,243,1,245,1,244,1,246,1,125,1,10,2,243,1,244,1,247,0,10,2,10,2,29,0,187,0,35,0,195,0,53,0,56,0,0,0,188,1,0,0,0,0,102,0,103,0,106,0,0,0,254,1,10,2,0,0,254,1,205,1,0,0,0,0,0,0,0,0,10,1,10,2,10,2,138,1,10,2,63,1,185,0,247,1,16,1,254,1,243,1,244,1,10,2,0,0,0,0,40,1,65,1,34,1,64,1,37,1,247,1,16,1,254,1,243,1,244,1,0,0,238,1,0,0,254,0,250,0,10,2,237,1,21,1,0,2,234,0,239,0,241,0,24,1,19,0,0,0,26,0,194,0,69,0,16,0,12,1,2,2,85,0,77,0,89,0,91,0,254,1,243,1,244,1,0,0,211,1,0,0,83,1,74,1,76,1,254,1,72,1,254,1,0,0,0,0,30,1,0,0,197,1,230,1,0,0,200,1,224,1,0,0,202,1,228,1,158,1,0,0,0,0,204,0,205,0,103,1,254,1,0,0,101,1,100,1,2,1,0,0,81,0,75,0,0,0,0,0,0,0,0,0,0,0,0,0,123,1,59,0,0,0,129,1,0,0,0,0,236,0,122,1,57,0,235,0,118,1,52,0,0,0,0,0,0,0,10,2,47,1,0,0,0,0,129,1,50,1,233,1,254,1,0,0,190,1,54,1,116,0,139,1,140,1,10,2,141,1,0,0,10,2,68,1,0,0,0,0,66,1,0,0,0,0,129,1,0,0,0,0,0,0,39,1,0,0,0,0,0,0,0,0,129,1,0,0,255,0,245,0,10,2,11,0,232,0,87,0,216,1,254,1,0,0,81,1,0,0,213,1,0,0,105,1,0,0,0,0,215,1,10,2,10,2,229,1,10,2,221,1,10,2,10,2,153,1,0,0,211,1,254,1,0,0,10,2,218,1,10,2,10,2,99,1,0,0,0,0,0,1,73,0,186,0,0,0,34,0,192,0,33,0,193,0,60,0,1,2,0,0,31,0,190,0,32,0,191,0,58,0,119,1,120,1,0,0,0,0,188,0,0,0,0,0,187,1,45,1,189,1,52,1,205,1,0,0,0,0,143,1,69,1,0,0,12,0,145,1,0,0,31,1,0,0,32,1,254,0,10,2,0,0,0,0,42,1,240,0,73,1,84,1,0,0,79,1,75,1,111,1,0,0,114,1,113,1,0,0,193,1,0,0,195,1,0,0,201,1,0,0,198,1,203,1,155,1,0,0,0,0,102,1,90,1,92,1,0,0,95,1,0,0,97,1,116,1,1,1,227,0,30,0,189,0,133,1,131,1,0,0,0,0,0,0,0,0,142,1,0,0,94,0,101,0,0,0,144,1,0,0,135,1,136,1,134,1,35,1,38,1,0,0,0,0,82,1,0,0,77,1,109,1,254,1,107,1,110,1,10,2,10,2,10,2,10,2,0,0,217,1,104,1,10,2,10,2,10,2,219,1,10,2,10,2,54,0,48,1,0,0,100,0,0,0,10,2,0,0,10,2,10,2,0,0,80,1,0,0,0,0,106,1,194,1,0,0,191,1,196,1,199,1,17,1,0,0,0,0,87,1,0,0,89,1,96,1,0,0,93,1,98,1,55,1,247,1,99,0,254,1,243,1,244,1,137,1,67,1,43,1,78,1,108,1,10,2,247,1,16,1,10,2,10,2,10,2,10,2,129,1,192,1,88,1,0,0,85,1,91,1,94,1,10,2,86,1], "i8", ALLOC_NONE, 5268976);
allocate([2,0,212,0,27,0,58,0,79,0,16,0,17,0,22,0,22,0,20,0,239,0,16,0,17,0,5,0,6,0,20,0,7,0,11,0,12,0,132,1,16,0,17,0,28,0,15,0,20,0,8,0,86,1,150,1,88,1,137,1,12,0,91,1,87,1,59,1,27,1,4,0,27,1,2,0,15,1,4,0,51,0,52,0,19,1,53,0,72,0,28,0,59,1,51,2,12,0,51,0,52,0,22,1,112,1,62,2,113,1,51,0,111,1,147,1,13,0,182,1,150,1,53,0,102,0,72,2,55,0,69,2,126,1,1,0,128,1,190,1,49,0,13,0,127,1,16,0,17,0,90,0,90,0,20,0,82,2,61,0,72,0,141,1,97,0,61,0,140,2,140,1,35,2,36,2,128,2,212,2,86,1,128,2,88,1,125,2,131,2,91,1,111,0,61,0,61,0,214,2,35,3,25,0,27,0,140,2,26,0,4,1,110,2,88,0,168,1,86,0,53,3,0,0,25,0,29,0,110,1,26,0,112,1,88,0,239,1,86,0,138,0,155,2,115,1,77,0,106,0,143,0,107,0,86,0,162,2,138,0,126,1,88,0,128,1,193,1,143,0,13,0,107,0,192,1,2,0,86,0,4,0,134,0,106,0,139,1,88,0,141,1,125,2,13,0,55,0,128,2,107,0,15,0,37,0,38,0,249,0,86,0,25,0,56,1,112,0,136,0,137,0,140,2,13,0,107,0,31,3,25,0,15,0,138,0,17,0,8,1,137,0,167,1,168,1,12,1,28,0,231,2,13,0,111,0,137,0,114,3,123,3,138,0,138,0,138,0,107,0,49,0,159,1,142,0,143,0,105,0,137,0,10,0,11,0,12,0,86,0,191,1,55,0,193,1,25,0,25,0,142,0,143,0,88,0,25,0,107,0,136,0,137,0,198,0,142,0,143,0,25,0,204,1,134,0,204,1,138,0,139,0,83,3,142,0,143,0,190,1,169,2,107,0,81,3,134,0,206,0,138,0,220,0,221,0,139,0,96,2,212,0,50,0,243,0,215,0,245,0,26,0,238,0,239,0,243,0,103,0,245,0,246,0,25,0,46,2,246,0,137,0,113,3,243,0,52,0,245,0,22,1,215,0,215,0,56,2,38,3,54,1,88,0,38,3,143,0,40,3,59,1,95,2,96,2,44,3,142,0,143,0,42,3,139,0,239,1,138,0,25,0,24,3,53,3,139,0,55,3,51,3,142,0,143,0,138,0,139,0,6,1,4,1,101,0,148,2,6,1,138,0,22,1,139,0,14,1,15,1,143,0,142,0,143,0,19,1,3,1,86,0,95,1,96,1,6,1,6,1,243,0,139,0,245,0,57,1,61,2,142,0,143,0,45,1,46,1,47,1,48,1,138,0,138,0,152,1,54,1,38,3,138,0,156,1,55,2,59,1,55,2,57,1,161,1,138,0,107,0,86,0,110,1,138,0,51,3,88,1,53,3,44,1,171,1,56,1,107,0,44,1,117,3,176,1,87,1,203,0,49,1,87,1,123,3,134,0,125,3,136,0,137,0,128,3,139,0,88,0,88,0,203,2,107,0,112,1,199,1,138,0,17,0,140,0,88,0,139,0,143,0,142,0,111,1,143,0,86,0,111,1,107,0,55,0,107,0,128,1,86,0,152,3,25,0,90,2,120,1,74,2,137,0,107,0,127,1,149,2,106,1,127,1,141,1,138,0,105,2,140,0,134,3,26,0,143,0,86,0,254,0,140,1,147,1,133,1,140,1,3,1,4,1,138,0,106,1,238,1,123,3,220,0,221,0,140,2,86,0,62,0,63,0,86,0,138,0,168,1,136,1,137,1,158,1,159,1,164,1,137,0,188,1,28,3,190,1,165,1,136,0,137,0,86,0,24,3,179,1,229,0,230,0,231,0,136,1,137,1,249,0,250,0,26,0,148,2,193,1,89,0,44,1,164,1,138,0,136,0,137,0,49,1,26,0,192,1,134,0,86,0,192,1,86,0,56,1,51,0,28,3,59,1,188,1,55,0,190,1,137,0,165,1,136,0,137,0,6,3,139,0,88,0,88,0,86,0,210,1,174,1,212,1,239,1,214,1,58,0,59,0,54,2,51,0,137,0,53,0,54,0,55,0,56,0,37,0,38,0,107,0,107,0,45,1,46,1,47,1,48,1,232,1,50,1,51,1,206,2,142,0,143,0,86,0,138,0,7,2,134,0,137,0,136,0,137,0,69,0,139,0,143,0,86,0,239,1,140,0,113,1,54,1,58,0,59,0,14,0,15,0,59,1,25,2,136,0,137,0,123,1,107,0,86,0,135,0,66,3,23,2,23,2,141,0,131,1,62,0,63,0,115,2,116,2,31,2,31,2,11,3,34,2,34,2,86,0,62,0,63,0,119,2,55,0,51,2,86,0,134,0,31,2,136,0,137,0,34,2,35,2,36,2,50,2,138,0,52,2,134,0,114,1,136,0,137,0,69,0,139,0,69,2,165,1,69,0,138,0,108,3,138,0,52,2,45,2,107,3,59,2,174,1,136,0,137,0,82,2,13,3,61,2,62,2,43,2,64,2,95,0,19,3,61,2,62,0,58,2,62,0,63,0,72,2,136,0,137,0,133,1,86,0,57,2,59,2,136,0,137,0,43,2,10,0,176,2,8,0,10,0,95,2,110,2,146,1,147,1,90,2,164,2,150,1,85,2,74,2,57,2,149,2,86,0,121,2,152,2,153,2,219,1,13,0,140,0,138,0,158,2,159,2,138,0,135,0,86,0,107,0,86,0,106,3,212,2,108,3,214,2,69,0,140,2,211,2,138,0,138,0,179,1,148,2,88,0,182,1,105,2,136,0,137,0,122,3,138,0,51,0,2,0,138,0,4,0,5,0,6,0,51,0,138,0,138,0,10,0,11,0,12,0,107,0,138,0,15,0,16,0,17,0,136,0,137,0,20,0,51,0,107,0,53,0,54,0,55,0,56,0,10,0,88,0,148,2,136,0,137,0,136,0,137,0,15,0,117,0,118,0,119,0,10,0,135,0,169,2,69,0,135,0,138,0,138,0,109,0,233,1,107,0,138,0,49,0,50,0,10,0,141,0,53,0,183,2,46,2,10,0,186,2,58,0,31,3,32,3,9,0,171,2,88,0,10,0,56,2,89,0,188,2,250,2,10,0,138,0,51,0,72,0,53,0,54,0,55,0,56,0,206,2,138,0,231,2,171,2,51,0,107,0,53,0,54,0,55,0,56,0,115,0,116,0,117,0,118,0,119,0,221,2,222,2,203,2,224,2,138,0,226,2,227,2,45,2,10,0,101,0,140,0,103,0,233,2,142,0,235,2,236,2,138,0,81,3,90,0,83,3,203,2,138,0,135,0,107,0,138,0,97,0,138,0,51,0,90,0,53,0,54,0,55,0,56,0,138,0,96,0,97,0,138,0,135,0,61,2,122,2,123,2,112,0,114,0,212,1,138,0,214,1,10,0,85,2,138,0,113,3,138,0,138,0,114,0,136,2,10,0,117,0,135,0,12,3,141,2,24,3,10,0,10,0,138,0,112,0,87,2,135,0,149,2,10,0,13,3,138,0,55,0,138,0,95,2,96,2,19,3,51,0,55,0,53,0,54,0,55,0,56,0,143,0,138,0,166,2,167,2,40,0,41,0,42,0,43,0,44,0,113,2,138,0,10,0,48,3,138,0,138,0,138,0,10,0,86,3,15,0,139,0,6,0,185,2,139,0,51,0,165,1,53,0,54,0,55,0,56,0,34,2,203,0,110,3,114,3,90,0,165,2,199,2,200,2,201,2,115,2,96,0,97,0,145,2,109,3,89,3,90,3,91,3,92,3,220,0,221,0,108,3,96,3,97,3,98,3,32,1,100,3,101,3,7,0,114,0,107,3,11,3,117,0,107,3,90,0,109,3,110,3,134,3,51,3,125,2,96,0,188,2,243,0,189,0,245,0,246,0,69,0,255,255,249,0,250,0,255,255,255,255,255,255,254,0,139,0,255,255,255,255,255,255,3,1,4,1,255,255,84,0,85,0,255,255,255,255,255,255,198,2,255,255,142,3,5,3,6,3,145,3,146,3,147,3,148,3,255,255,12,3,22,1,255,255,255,255,16,3,255,255,156,3,51,0,255,255,53,0,54,0,55,0,56,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,255,255,44,1,45,1,46,1,47,1,48,1,49,1,50,1,51,1,239,2,255,255,54,1,255,255,56,1,57,1,255,255,59,1,51,0,255,255,53,0,54,0,55,0,56,0,255,255,90,0,255,255,255,255,255,255,255,255,255,255,96,0,97,0,66,3,255,255,255,255,255,255,255,255,255,255,72,3,255,255,74,3,255,255,255,255,255,255,87,1,255,255,80,3,255,255,114,0,0,0,255,255,117,0,95,1,96,1,28,3,255,255,90,0,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,111,1,255,255,113,1,114,1,255,255,139,0,255,255,26,0,27,0,255,255,255,255,255,255,123,1,255,255,255,255,255,255,127,1,255,255,37,0,38,0,131,1,40,0,41,0,42,0,43,0,44,0,69,0,255,255,255,255,140,1,255,255,255,255,255,255,221,2,222,2,255,255,224,2,255,255,226,2,227,2,255,255,84,0,85,0,255,255,255,255,233,2,255,255,235,2,236,2,255,255,255,255,255,255,255,255,255,255,165,1,51,0,255,255,53,0,54,0,55,0,56,0,16,0,17,0,174,1,255,255,20,0,51,0,86,0,53,0,54,0,55,0,56,0,115,0,116,0,117,0,118,0,119,0,188,1,255,255,190,1,51,0,192,1,53,0,54,0,55,0,56,0,255,255,255,255,255,255,255,255,255,255,46,0,47,0,255,255,90,0,255,255,51,0,52,0,255,255,255,255,96,0,255,255,255,255,58,0,59,0,90,0,255,255,255,255,219,1,255,255,255,255,96,0,97,0,255,255,255,255,134,0,135,0,255,255,137,0,90,0,139,0,140,0,255,255,142,0,143,0,96,0,97,0,255,255,239,1,114,0,255,255,255,255,117,0,255,255,255,255,2,0,255,255,4,0,5,0,6,0,7,0,255,255,255,255,114,0,255,255,255,255,117,0,69,0,15,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,3,90,3,91,3,92,3,255,255,84,0,85,0,96,3,97,3,98,3,255,255,100,3,101,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,49,0,255,255,255,255,255,255,53,0,255,255,255,255,255,255,45,2,46,2,114,0,115,0,116,0,117,0,118,0,119,0,255,255,255,255,255,255,56,2,255,255,255,255,255,255,72,0,255,255,255,255,255,255,255,255,142,3,255,255,255,255,145,3,146,3,147,3,148,3,255,255,255,255,2,0,255,255,4,0,5,0,6,0,156,3,255,255,255,255,255,255,255,255,255,255,85,2,255,255,15,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,49,0,122,2,123,2,255,255,53,0,255,255,255,255,255,255,229,0,230,0,231,0,232,0,255,255,255,255,255,255,136,2,255,255,255,255,255,255,255,255,141,2,255,255,243,0,72,0,245,0,246,0,255,255,148,2,149,2,255,255,255,255,152,2,153,2,255,255,2,0,255,255,4,0,158,2,159,2,255,255,255,255,255,255,255,255,255,255,255,255,166,2,167,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,185,2,255,255,255,255,188,2,255,255,255,255,203,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,199,2,200,2,201,2,49,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,54,1,255,255,255,255,255,255,255,255,59,1,60,1,61,1,62,1,63,1,64,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,73,1,74,1,75,1,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,254,0,87,1,255,255,255,255,255,255,3,1,4,1,255,255,250,2,95,1,96,1,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,5,3,6,3,255,255,255,255,255,255,22,1,111,1,12,3,255,255,255,255,255,255,16,3,255,255,255,255,203,0,255,255,255,255,255,255,255,255,255,255,125,1,255,255,127,1,255,255,129,1,130,1,255,255,44,1,133,1,255,255,255,255,255,255,49,1,255,255,255,255,140,1,255,255,255,255,255,255,56,1,57,1,146,1,147,1,48,3,255,255,150,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,66,3,255,255,255,255,169,1,254,0,255,255,72,3,255,255,74,3,3,1,4,1,255,255,255,255,179,1,80,3,255,255,182,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,192,1,255,255,22,1,255,255,255,255,255,255,255,255,255,255,203,0,113,1,255,255,255,255,255,255,255,255,255,255,107,3,255,255,255,255,255,255,123,1,255,255,255,255,255,255,255,255,44,1,255,255,255,255,131,1,255,255,49,1,222,1,223,1,255,255,255,255,255,255,255,255,56,1,57,1,255,255,255,255,255,255,233,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,0,255,255,165,1,255,255,255,255,3,1,4,1,255,255,255,255,255,255,255,255,174,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,188,1,255,255,190,1,255,255,255,255,255,255,255,255,255,255,255,255,113,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,123,1,255,255,44,1,255,255,255,255,255,255,255,255,49,1,131,1,255,255,255,255,255,255,219,1,255,255,56,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,61,2,255,255,255,255,255,255,255,255,255,255,49,0,255,255,255,255,255,255,239,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,165,1,255,255,255,255,255,255,255,255,255,255,87,2,255,255,255,255,174,1,255,255,255,255,255,255,255,255,95,2,96,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,188,1,255,255,190,1,255,255,255,255,255,255,113,1,255,255,255,255,113,2,255,255,255,255,255,255,255,255,255,255,255,255,123,1,103,0,255,255,255,255,255,255,255,255,255,255,255,255,131,1,255,255,255,255,255,255,255,255,255,255,46,2,219,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,56,2,145,2,255,255,255,255,255,255,149,2,150,2,255,255,152,2,153,2,255,255,239,1,255,255,255,255,158,2,159,2,255,255,255,255,165,1,255,255,255,255,255,255,255,255,255,255,168,2,255,255,255,255,174,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,191,2,192,2,255,255,194,2,195,2,255,255,255,255,198,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,122,2,123,2,255,255,255,255,255,255,255,255,219,1,255,255,46,2,255,255,255,255,255,255,255,255,255,255,136,2,255,255,255,255,255,255,56,2,141,2,255,255,255,255,255,255,255,255,255,255,255,255,148,2,255,255,255,255,239,2,255,255,255,255,255,255,243,2,255,255,255,255,255,255,255,255,255,255,255,255,250,2,255,255,255,255,255,255,166,2,167,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,0,185,2,255,255,255,255,255,255,21,3,4,1,255,255,5,0,6,0,255,255,255,255,28,3,255,255,255,255,199,2,200,2,201,2,15,0,255,255,255,255,255,255,122,2,123,2,255,255,255,255,255,255,46,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,136,2,56,2,255,255,255,255,255,255,141,2,255,255,255,255,255,255,255,255,255,255,255,255,148,2,46,0,47,0,255,255,255,255,255,255,51,0,52,0,53,0,255,255,56,1,255,255,255,255,255,255,59,0,255,255,255,255,255,255,166,2,167,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,72,0,255,255,5,3,6,3,255,255,255,255,255,255,255,255,255,255,12,3,185,2,255,255,255,255,16,3,255,255,255,255,107,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,199,2,200,2,201,2,255,255,122,2,123,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,136,2,255,255,255,255,48,3,255,255,141,2,255,255,255,255,123,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,131,1,255,255,255,255,255,255,255,255,66,3,255,255,255,255,255,255,255,255,255,255,72,3,255,255,74,3,166,2,167,2,255,255,255,255,255,255,80,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,5,3,6,3,255,255,255,255,255,255,185,2,255,255,12,3,255,255,255,255,255,255,16,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,199,2,200,2,201,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,219,1,66,3,255,255,255,255,255,255,255,255,255,255,72,3,255,255,74,3,255,255,229,0,230,0,231,0,232,0,80,3,255,255,255,255,255,255,255,255,255,255,5,3,6,3,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,16,3,78,0,79,0,255,255,255,255,255,255,255,255,84,0,85,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,22,1,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,66,3,255,255,255,255,255,255,255,255,255,255,72,3,255,255,74,3,255,255,255,255,255,255,255,255,57,1,80,3,255,255,60,1,61,1,62,1,63,1,64,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,73,1,74,1,75,1,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,122,2,123,2,255,255,255,255,125,1,255,255,255,255,255,255,129,1,130,1,255,255,255,255,133,1,255,255,136,2,255,255,255,255,255,255,255,255,141,2,255,255,255,255,255,255,255,255,255,255,146,1,147,1,255,255,255,255,150,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,166,2,167,2,255,255,255,255,169,1,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,179,1,78,0,79,0,182,1,255,255,185,2,255,255,84,0,85,0,188,1,255,255,190,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,199,2,200,2,201,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,222,1,223,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,233,1,255,255,255,255,255,255,255,255,255,255,239,1,255,255,255,255,255,255,0,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,5,3,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,16,3,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,61,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,72,3,255,255,74,3,87,0,255,255,255,255,90,0,91,0,80,3,93,0,94,0,255,255,96,0,255,255,98,0,99,0,87,2,255,255,255,255,103,0,44,0,255,255,255,255,255,255,95,2,96,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,0,121,0,122,0,255,255,255,255,255,255,113,2,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,142,0,143,0,84,0,85,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,2,255,255,255,255,148,2,255,255,150,2,255,255,255,255,255,255,255,255,108,0,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,168,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,44,0,255,255,255,255,138,0,255,255,255,255,255,255,255,255,255,255,191,2,192,2,255,255,194,2,195,2,255,255,255,255,198,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,255,255,0,0,84,0,85,0,255,255,255,255,255,255,255,255,255,255,8,0,9,0,10,0,255,255,255,255,255,255,14,0,15,0,255,255,17,0,239,2,255,255,255,255,255,255,243,2,255,255,255,255,108,0,26,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,12,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,21,3,255,255,255,255,255,255,255,255,255,255,255,255,28,3,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,255,255,48,3,84,0,85,0,86,0,0,0,88,0,255,255,255,255,255,255,255,255,255,255,255,255,8,0,9,0,10,0,255,255,255,255,255,255,14,0,15,0,255,255,17,0,255,255,255,255,107,0,108,0,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,134,0,135,0,136,0,137,0,138,0,255,255,140,0,255,255,142,0,143,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,255,255,255,255,84,0,85,0,86,0,255,255,88,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,107,0,108,0,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,135,0,136,0,137,0,138,0,255,255,140,0,255,255,142,0,143,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,255,255,255,255,15,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,0,121,0,122,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,142,0,143,0,10,0,11,0,12,0,255,255,14,0,15,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,0,121,0,122,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,10,0,11,0,12,0,142,0,143,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,0,121,0,122,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,10,0,11,0,12,0,142,0,143,0,15,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,0,121,0,122,0,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,142,0,143,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,0,121,0,122,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,135,0,255,255,255,255,255,255,255,255,255,255,255,255,142,0,143,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,9,0,10,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,0,121,0,122,0,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,142,0,143,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,0,121,0,122,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,140,0,255,255,142,0,143,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,0,121,0,122,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,140,0,255,255,142,0,143,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,0,121,0,122,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,135,0,255,255,255,255,255,255,255,255,255,255,255,255,142,0,143,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,10,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,0,121,0,122,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,142,0,143,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,97,0,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,0,121,0,122,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,143,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,255,255,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,0,121,0,122,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,142,0,143,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,255,255,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,0,121,0,122,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,143,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,0,121,0,122,0,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,142,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,0,121,0,122,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,142,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,255,255,78,0,79,0,255,255,255,255,82,0,83,0,84,0,85,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,121,0,122,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,139,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,97,0,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,0,121,0,122,0,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,134,0,11,0,12,0,255,255,255,255,139,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255].concat([255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,97,0,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,0,121,0,122,0,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,134,0,11,0,12,0,255,255,255,255,139,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,97,0,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,0,121,0,122,0,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,134,0,11,0,12,0,255,255,255,255,139,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,88,0,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,97,0,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,107,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,120,0,121,0,122,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,139,0,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,88,0,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,97,0,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,107,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,120,0,121,0,122,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,139,0,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,97,0,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,120,0,121,0,122,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,139,0,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,97,0,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,120,0,121,0,122,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,139,0,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,97,0,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,120,0,121,0,122,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,139,0,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,97,0,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,120,0,121,0,122,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,139,0,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,255,255,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,120,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,138,0,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,44,0,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,255,255,255,255,84,0,85,0,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,255,255,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,108,0,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,255,255,255,255,120,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,138,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,255,255,255,255,255,255,255,255,255,255,62,0,255,255,255,255,255,255,255,255,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,255,255,78,0,79,0,255,255,255,255,82,0,83,0,84,0,85,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,0,255,255,255,255,255,255,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,121,0,122,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,255,255,255,255,255,255,255,255,255,255,62,0,255,255,255,255,255,255,255,255,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,255,255,78,0,79,0,255,255,255,255,82,0,83,0,84,0,85,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,0,255,255,255,255,255,255,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,121,0,122,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,255,255,78,0,79,0,255,255,255,255,82,0,83,0,84,0,85,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,0,255,255,255,255,99,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,121,0,122,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,255,255,78,0,79,0,255,255,255,255,82,0,83,0,84,0,85,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,121,0,122,0,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,120,0,121,0,122,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,120,0,121,0,122,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,97,0,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,120,0,121,0,122,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,97,0,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,120,0,121,0,122,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,120,0,121,0,122,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,255,255,97,0,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,120,0,121,0,122,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,120,0,121,0,122,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,255,255,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,120,0,121,0,122,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,120,0,121,0,122,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,120,0,121,0,122,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,120,0,121,0,122,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,120,0,121,0,122,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,120,0,121,0,122,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,255,255,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,120,0,121,0,122,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,255,255,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,120,0,121,0,122,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,67,0,68,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,255,255,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,120,0,121,0,122,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,84,0,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,255,255,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,120,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,120,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,96,0,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,120,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,255,255,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,120,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,255,255,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,120,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,255,255,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,120,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,61,0,62,0,255,255,64,0,65,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,87,0,255,255,255,255,90,0,91,0,255,255,93,0,94,0,255,255,255,255,255,255,98,0,99,0,255,255,255,255,255,255,103,0,255,255,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,255,255,78,0,79,0,255,255,255,255,82,0,83,0,84,0,85,0,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,96,0,78,0,79,0,255,255,255,255,255,255,255,255,84,0,85,0,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,121,0,122,0,255,255,51,0,52,0,255,255,255,255,55,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,255,255,78,0,79,0,255,255,255,255,82,0,83,0,84,0,85,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,121,0,122,0,255,255,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,255,255,78,0,79,0,255,255,255,255,82,0,83,0,84,0,85,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,121,0,122,0,255,255,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,255,255,78,0,79,0,255,255,255,255,82,0,83,0,84,0,85,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,121,0,122,0,255,255,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,255,255,78,0,79,0,255,255,255,255,82,0,83,0,84,0,85,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,121,0,122,0,255,255,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,255,255,78,0,79,0,255,255,255,255,82,0,83,0,84,0,85,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,121,0,122,0,255,255,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,255,255,78,0,79,0,255,255,255,255,82,0,83,0,84,0,85,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,121,0,122,0,255,255,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,255,255,78,0,79,0,255,255,255,255,82,0,83,0,84,0,85,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,121,0,122,0,255,255,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,255,255,78,0,79,0,255,255,255,255,82,0,83,0,84,0,85,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,121,0,122,0,255,255,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,255,255,78,0,79,0,255,255,255,255,82,0,83,0,84,0,85,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,121,0,122,0,255,255,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,255,255,78,0,79,0,255,255,255,255,82,0,83,0,84,0,85,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,121,0,122,0,255,255,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,255,255,78,0,79,0,255,255,255,255,82,0,83,0,84,0,85,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,121,0,122,0,255,255,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,139,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,255,255,78,0,79,0,255,255,255,255,82,0,83,0,84,0,85,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,121,0,122,0,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,255,255,139,0,84,0,85,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,51,0,52,0,255,255,108,0,55,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,255,255,255,255,78,0,79,0,255,255,255,255,82,0,83,0,84,0,85,0,255,255,255,255,255,255,143,0,255,255,255,255,255,255,255,255,255,255,255,255,96,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,121,0,122,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,255,255,255,255,84,0,85,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,255,255,255,255,84,0,85,0,255,255,255,255,255,255,255,255,255,255,108,0,255,255,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,110,0,111,0,112,0]).concat([113,0,114,0,115,0,116,0,117,0,118,0,119,0]), "i8", ALLOC_NONE, 5270828);
allocate(28, "i8", ALLOC_NONE, 5291324);
allocate(16, "i8", ALLOC_NONE, 5291352);
allocate([58,0] /* :\00 */, "i8", ALLOC_NONE, 5291368);
allocate([48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0] /* 0123456789abcdef0123 */, "i8", ALLOC_NONE, 5291372);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,1,0,0,20,1,0,0,6,0,0,0,0,0,0,0,14,1,0,0,14,1,0,0,0,0,0,0,0,0,0,0,33,1,0,0,33,1,0,0,1,0,0,0,0,0,0,0,8,1,0,0,8,1,0,0,0,0,0,0,0,0,0,0,9,1,0,0,9,1,0,0,1,0,0,0,0,0,0,0,12,1,0,0,12,1,0,0,0,0,0,0,0,0,0,0,38,1,0,0,38,1,0,0,4,0,0,0,0,0,0,0,35,1,0,0,35,1,0,0,1,0,0,0,0,0,0,0,32,1,0,0,32,1,0,0,1,0,0,0,0,0,0,0,13,1,0,0,13,1,0,0,10,0,0,0,0,0,0,0,7,1,0,0,43,1,0,0,6,0,0,0,0,0,0,0,34,1,0,0,34,1,0,0,1,0,0,0,0,0,0,0,18,1,0,0,42,1,0,0,10,0,0,0,0,0,0,0,11,1,0,0,40,1,0,0,10,0,0,0,0,0,0,0,29,1,0,0,29,1,0,0,6,0,0,0,0,0,0,0,4,1,0,0,4,1,0,0,7,0,0,0,0,0,0,0,36,1,0,0,36,1,0,0,10,0,0,0,0,0,0,0,25,1,0,0,25,1,0,0,0,0,0,0,0,0,0,0,30,1,0,0,30,1,0,0,4,0,0,0,0,0,0,0,19,1,0,0,19,1,0,0,10,0,0,0,0,0,0,0,5,1,0,0,5,1,0,0,7,0,0,0,0,0,0,0,37,1,0,0,37,1,0,0,10,0,0,0,0,0,0,0,24,1,0,0,24,1,0,0,10,0,0,0,0,0,0,0,16,1,0,0,16,1,0,0,10,0,0,0,0,0,0,0,23,1,0,0,23,1,0,0,1,0,0,0,0,0,0,0,10,1,0,0,39,1,0,0,10,0,0,0,0,0,0,0,15,1,0,0,15,1,0,0,10,0,0,0,0,0,0,0,22,1,0,0,22,1,0,0,1,0,0,0,0,0,0,0,21,1,0,0,21,1,0,0,6,0,0,0,0,0,0,0,31,1,0,0,31,1,0,0,4,0,0,0,0,0,0,0,3,1,0,0,3,1,0,0,10,0,0,0,0,0,0,0,6,1,0,0,6,1,0,0,0,0,0,0,0,0,0,0,47,1,0,0,47,1,0,0,1,0,0,0,0,0,0,0,48,1,0,0,48,1,0,0,1,0,0,0,0,0,0,0,49,1,0,0,49,1,0,0,1,0,0,0,0,0,0,0,46,1,0,0,46,1,0,0,1,0,0,0,0,0,0,0,44,1,0,0,44,1,0,0,7,0,0,0,0,0,0,0,45,1,0,0,45,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,2,1,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,1,0,0,41,1,0,0,10,0,0,0], "i8", ALLOC_NONE, 5291408);
allocate([532,0,0,0,534,0,0,0,528,0,0,0,530,0,0,0,524,0,0,0,526,0,0,0,520,0,0,0,522,0,0,0,516,0,0,0,518,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5292224);
allocate([31,0,0,0,28,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,29,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0], "i8", ALLOC_NONE, 5292264);
allocate([0,0,0,0,310,0,0,0], ["*",0,0,0,"*",0,0,0], ALLOC_NONE, 5292360);
allocate([82,73,84,69,48,48,48,57,48,48,48,48,48,48,48,57,48,48,48,48,77,65,84,90,32,32,32,32,48,48,48,57,48,48,48,48,0,0,67,24,0,148,0,0,32,32,32,32,32,32,32,32,246,100,0,0,3,103,83,67,0,1,0,3,0,2,70,159,0,0,0,133,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,128,0,5,0,128,64,68,0,128,4,69,0,128,0,5,0,128,128,68,0,128,4,197,0,128,0,5,1,0,0,5,0,128,0,67,0,128,5,69,0,128,0,5,1,0,0,5,0,128,192,67,0,128,6,69,0,128,0,5,0,128,128,68,0,128,10,197,0,128,0,5,0,128,64,68,0,128,14,69,0,128,0,5,1,0,0,5,0,129,0,67,0,128,32,69,0,128,0,5,1,0,2,145,0,129,128,67,0,128,33,69,0,128,0,5,1,0,2,145,0,129,192,67,0,128,33,197,0,128,0,5,1,0,2,145,0,130,0,67,0,128,34,69,0,128,0,5,1,0,4,17,0,130,64,67,0,128,34,197,0,128,0,5,1,0,2,145,0,130,128,67,0,128,35,69,0,128,0,5,1,0,2,145,0,130,192,67,0,128,35,197,0,128,0,5,1,0,2,145,0,131,0,67,0,128,36,69,0,128,0,5,1,0,6,17,0,131,64,67,0,128,36,197,0,128,0,5,1,0,2,145,0,131,128,67,0,128,37,69,0,128,0,5,1,0,7,17,0,131,192,67,0,128,37,197,0,128,0,5,1,0,8,17,0,132,64,67,0,128,38,69,0,128,0,5,1,0,0,5,0,132,128,67,0,128,38,197,0,128,0,5,0,128,64,68,0,128,50,69,0,128,0,5,1,0,0,5,0,132,128,67,0,128,50,197,0,128,0,5,0,132,192,68,0,128,51,69,0,128,0,5,1,0,0,5,0,133,0,67,0,128,53,197,0,128,0,5,0,128,128,68,0,128,56,69,0,128,0,5,1,0,0,5,0,133,64,67,0,128,56,197,0,128,0,5,0,132,192,68,0,128,57,69,0,128,0,5,1,0,0,5,0,133,128,67,0,128,62,197,0,128,0,5,0,128,64,68,0,128,63,197,0,128,0,5,1,0,0,5,0,133,128,67,0,128,64,69,0,128,0,5,1,0,0,5,0,133,192,67,0,128,64,197,0,128,0,5,0,128,128,68,0,128,69,197,0,128,0,5,1,0,0,5,0,133,192,67,0,128,70,69,0,128,12,17,1,0,13,4,0,134,64,160,0,192,2,153,0,128,0,5,1,0,0,5,0,134,128,67,0,128,70,197,0,64,0,151,0,128,0,5,0,0,0,74,72,60,0,0,0,0,0,0,0,0,0,27,0,5,65,114,114,97,121,0,10,69,110,117,109,101,114,97,98,108,101,0,10,67,111,109,112,97,114,97,98,108,101,0,6,77,111,100,117,108,101,0,9,69,120,99,101,112,116,105,111,110,0,13,83,116,97,110,100,97,114,100,69,114,114,111,114,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,14,76,111,99,97,108,74,117,109,112,69,114,114,111,114,0,10,82,97,110,103,101,69,114,114,111,114,0,16,70,108,111,97,116,68,111,109,97,105,110,69,114,114,111,114,0,11,82,101,103,101,120,112,69,114,114,111,114,0,9,84,121,112,101,69,114,114,111,114,0,9,78,97,109,101,69,114,114,111,114,0,13,78,111,77,101,116,104,111,100,69,114,114,111,114,0,10,73,110,100,101,120,69,114,114,111,114,0,8,75,101,121,69,114,114,111,114,0,11,83,99,114,105,112,116,69,114,114,111,114,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,4,72,97,115,104,0,6,75,101,114,110,101,108,0,7,73,110,116,101,103,101,114,0,7,78,117,109,101,114,105,99,0,5,82,97,110,103,101,0,6,83,116,114,105,110,103,0,6,79,98,106,101,99,116,0,14,99,111,110,115,116,95,100,101,102,105,110,101,100,63,0,6,83,116,114,117,99,116,229,144,0,0,0,184,83,67,0,1,0,4,0,2,54,120,0,0,0,22,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,1,132,1,128,1,4,2,0,0,5,0,129,1,32,0,128,0,72,1,0,10,192,0,129,64,70,0,128,0,72,1,0,12,192,0,129,128,70,0,0,0,5,0,0,0,41,140,174,0,0,0,0,0,0,0,0,0,7,0,4,101,97,99,104,0,10,101,97,99,104,95,105,110,100,101,120,0,8,99,111,108,108,101,99,116,33,0,4,109,97,112,33,0,12,97,108,105,97,115,95,109,101,116,104,111,100,0,10,105,110,105,116,105,97,108,105,122,101,0,6,100,101,108,101,116,101,56,114,0,0,0,251,83,67,0,5,0,8,0,2,43,52,0,0,0,46,0,0,0,166,2,191,255,3,3,0,0,6,3,0,0,32,3,0,64,175,1,1,64,1,1,129,128,1,0,64,11,23,2,128,0,6,3,0,128,1,3,0,192,173,1,1,128,1,2,128,128,160,2,1,64,1,2,129,0,1,2,192,0,153,0,64,5,23,2,129,0,1,3,0,0,5,2,129,0,178,2,192,2,25,2,128,192,1,3,0,0,6,3,0,0,32,2,129,64,182,2,192,0,153,0,64,8,151,2,128,64,1,3,1,0,1,2,129,128,160,2,128,128,1,3,0,192,1,2,129,192,179,2,192,2,25,2,128,192,1,3,0,0,6,3,0,0,32,2,130,0,180,2,192,2,25,2,128,0,6,2,128,0,32,2,128,64,175,1,129,64,1,2,191,238,24,0,0,0,6,0,0,0,41,110,213,0,0,0,0,0,0,0,0,0,9,0,6,108,101,110,103,116,104,0,1,45,0,2,91,93,0,1,43,0,2,61,61,0,2,62,61,0,4,99,97,108,108,0,1,60,0,2,60,61,108,79,0,0,0,112,83,67,0,3,0,5,0,2,72,57,0,0,0,16,0,0,0,166,1,63,255,131,0,64,3,23,1,128,64,1,2,0,128,1,1,128,0,160,1,128,128,1,1,128,64,173,1,0,192,1,1,128,128,1,2,0,0,6,2,0,192,32,1,128,128,179,1,191,250,152,0,0,0,6,0,0,0,41,142,149,0,0,0,0,0,0,0,0,0,4,0,4,99,97,108,108,0,1,43,0,1,60,0,6,108,101,110,103,116,104,84,241,0,0,0,64,83,67,0,2,0,4,0,2,111,40,0,0,0,6,0,0,0,166,1,0,0,6,1,128,3,64,1,0,0,33,0,0,0,6,0,0,0,41,250,226,0,0,0,0,0,0,0,0,0,1,0,10,101,97,99,104,95,105,110,100,101,120,182,245,0,0,0,87,83,67,0,3,0,7,0,2,104,123,0,0,0,11,2,0,0,38,1,128,64,21,2,0,0,6,2,128,64,1,2,0,64,160,1,128,0,160,2,0,0,6,2,128,64,1,3,0,192,1,2,0,129,32,1,128,0,41,117,10,0,0,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,2,91,93,0,3,91,93,61,62,138,0,0,1,140,83,67,0,5,0,9,0,2,59,21,0,0,0,57,0,32,0,166,0,64,1,23,0,64,1,23,0,64,1,23,0,191,255,131,1,0,0,5,2,128,64,1,3,0,0,145,2,128,0,160,2,192,0,153,0,64,2,23,2,128,0,6,3,0,1,145,3,128,0,61,2,128,129,32,2,128,64,1,3,63,255,131,2,129,0,179,2,192,2,25,2,128,0,6,3,0,2,145,3,128,0,189,2,128,129,32,2,128,0,6,2,129,128,32,2,128,64,1,3,63,255,131,2,129,192,181,2,192,13,25,2,128,0,5,3,0,0,6,3,128,64,1,3,130,64,175,4,1,64,1,3,2,1,32,2,63,255,131,0,64,7,23,2,128,192,1,2,192,2,25,2,128,192,1,3,1,0,1,2,130,128,160,0,64,0,151,2,128,128,1,3,0,0,6,3,129,0,1,4,1,64,1,3,2,1,32,2,129,0,1,2,130,192,173,2,1,64,1,2,129,0,1,3,0,64,1,2,129,0,179,2,191,247,24,0,0,0,6,0,0,0,41,2,4,0,0,0,2,17,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,17,0,19,110,101,103,97,116,105,118,101,32,97,114,114,97,121,32,115,105,122,101,54,241,0,0,0,12,0,8,107,105,110,100,95,111,102,63,0,7,73,110,116,101,103,101,114,0,5,114,97,105,115,101,0,9,84,121,112,101,69,114,114,111,114,0,1,60,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,5,99,108,101,97,114,0,1,62,0,3,91,93,61,0,1,45,0,4,99,97,108,108,0,1,43,83,223,0,0,0,144,83,67,0,5,0,7,0,2,218,219,0,0,0,22,2,0,0,166,0,64,2,23,2,128,0,6,3,0,192,1,2,128,0,160,2,0,64,1,2,128,0,6,3,0,64,1,2,128,64,160,1,129,64,1,2,191,251,152,2,129,0,1,3,0,0,5,2,128,128,178,2,192,0,153,2,128,128,1,2,192,1,153,2,128,128,1,2,128,192,32,0,64,0,151,2,129,0,1,2,128,0,41,103,186,0,0,0,0,0,0,0,0,0,4,0,9,100,101,108,101,116,101,95,97,116,0,5,105,110,100,101,120,0,2,61,61,0,4,99,97,108,108,48,156,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,83,67,0,1,0,3,0,2,70,159,0,0,0,11,0,128,0,6,1,0,0,145,0,128,0,160,0,128,0,6,1,0,1,17,0,128,0,160,0,128,0,72,1,0,2,192,0,128,192,70,0,0,0,5,0,0,0,41,81,57,0,0,0,0,0,0,0,0,0,4,0,7,105,110,99,108,117,100,101,0,10,69,110,117,109,101,114,97,98,108,101,0,10,67,111,109,112,97,114,97,98,108,101,0,5,115,111,114,116,33,209,237,0,0,0,71,83,67,0,2,0,5,0,2,127,9,0,0,0,7,0,0,0,166,1,0,0,6,1,128,0,6,2,0,64,1,1,128,64,33,1,0,0,160,1,0,0,41,64,129,0,0,0,0,0,0,0,0,0,2,0,7,114,101,112,108,97,99,101,0,4,115,111,114,116,149,228,0,0,0,131,83,67,0,1,0,2,0,2,86,190,0,0,0,14,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,8,192,0,128,64,70,0,128,0,72,1,0,14,192,0,128,128,70,0,128,0,72,1,0,16,192,0,128,192,70,0,0,0,5,0,0,0,41,208,128,0,0,0,0,0,0,0,0,0,4,0,11,97,116,116,114,95,114,101,97,100,101,114,0,11,97,116,116,114,95,119,114,105,116,101,114,0,13,97,116,116,114,95,97,99,99,101,115,115,111,114,0,4,97,116,116,114,37,188,0,0,0,54,83,67,0,3,0,5,0,2,72,57,0,0,0,5,0,8,0,38,1,128,64,1,2,0,3,64,1,128,0,33,1,128,0,41,46,162,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,112,83,67,0,4,0,7,0,2,237,235,0,0,0,12,2,0,0,38,2,0,0,61,2,128,64,1,2,128,64,32,2,0,0,172,2,0,128,32,1,129,0,1,2,0,0,6,2,128,64,1,3,0,3,64,2,0,192,161,2,0,0,41,250,215,0,0,0,1,17,0,1,64,6,50,0,0,0,4,0,1,43,0,4,116,111,95,115,0,6,105,110,116,101,114,110,0,13,100,101,102,105,110,101,95,109,101,116,104,111,100,39,78,0,0,0,67,83,67,0,1,0,3,0,2,70,159,0,0,0,4,0,128,0,6,1,0,192,21,0,128,0,160,0,128,0,41,251,195,0,0,0,0,0,0,0,0,0,1,0,21,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,103,101,116,121,99,0,0,0,54,83,67,0,3,0,5,0,2,72,57,0,0,0,5,0,8,0,38,1,128,64,1,2,0,3,64,1,128,0,33,1,128,0,41,46,162,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,140,83,67,0,4,0,7,0,2,237,235,0,0,0,18,2,0,0,38,2,0,0,61,2,128,64,1,2,128,64,32,2,0,0,172,2,0,128,32,1,129,0,1,2,0,64,1,2,0,64,32,2,128,0,189,2,0,0,172,2,0,128,32,0,129,0,1,2,0,0,6,2,128,64,1,3,0,3,64,2,0,192,161,2,0,0,41,79,66,0,0,0,2,17,0,1,64,17,0,1,61,101,161,0,0,0,4,0,1,43,0,4,116,111,95,115,0,6,105,110,116,101,114,110,0,13,100,101,102,105,110,101,95,109,101,116,104,111,100,39,78,0,0,0,75,83,67,0,3,0,6,0,2,120,90,0,0,0,6,2,0,0,38,1,128,0,6,2,0,192,21,2,128,64,1,1,128,1,32,1,128,0,41,128,72,0,0,0,0,0,0,0,0,0,1,0,21,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,115,101,116,43,214,0,0,0,102,83,67,0,3,0,6,0,2,120,90,0,0,0,12,0,8,0,38,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,127,160,1,128,0,41,173,140,0,0,0,0,0,0,0,0,0,2,0,11,97,116,116,114,95,114,101,97,100,101,114,0,11,97,116,116,114,95,119,114,105,116,101,114,111,121,0,0,0,61,83,67,0,3,0,5,0,2,72,57,0,0,0,5,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,128,0,41,250,78,0,0,0,0,0,0,0,0,0,1,0,11,97,116,116,114,95,114,101,97,100,101,114,1,235,0,0,0,136,83,67,0,1,0,2,0,2,86,190,0,0,0,20,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,128,0,72,1,0,12,192,0,129,64,70,0,0,0,5,0,0,0,41,236,60,0,0,0,0,0,0,0,0,0,6,0,1,60,0,2,60,61,0,2,61,61,0,1,62,0,2,62,61,0,8,98,101,116,119,101,101,110,63,147,175,0,0,0,114,83,67,0,4,0,6,0,2,253,202,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,0,64,32,2,64,1,25,2,0,0,8,0,64,3,151,2,0,192,1,2,191,255,131,2,0,128,179,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,7,190,0,0,0,0,0,0,0,0,0,3,0,3,60,61,62,0,4,110,105,108,63,0,1,60,15,171,0,0,0,115,83,67,0,4,0,6,0,2,253,202,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,0,64,32,2,64,1,25,2,0,0,8,0,64,3,151,2,0,192,1,2,191,255,131,2,0,128,180,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,61,161,0,0,0,0,0,0,0,0,0,3,0,3,60,61,62,0,4,110,105,108,63,0,2,60,61,106,177,0,0,0,89,83,67,0,4,0,6,0,2,253,202,0,0,0,13,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,191,255,131,2,0,64,178,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,66,207,0,0,0,0,0,0,0,0,0,2,0,3,60,61,62,0,2,61,61,16,55,0,0,0,114,83,67,0,4,0,6,0,2,253,202,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,0,64,32,2,64,1,25,2,0,0,8,0,64,3,151,2,0,192,1,2,191,255,131,2,0,128,181,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,227,190,0,0,0,0,0,0,0,0,0,3,0,3,60,61,62,0,4,110,105,108,63,0,1,62,15,169,0,0,0,115,83,67,0,4,0,6,0,2,253,202,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,0,64,32,2,64,1,25,2,0,0,8,0,64,3,151,2,0,192,1,2,191,255,131,2,0,128,182,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,145,190,0,0,0,0,0,0,0,0,0,3,0,3,60,61,62,0,4,110,105,108,63,0,2,62,61,104,177,0,0,0,86,83,67,0,4,0,6,0,2,253,202,0,0,0,13,4,0,0,38,2,0,0,6,2,128,64,1,2,0,0,179,2,64,1,152,2,0,0,6,2,128,128,1,2,0,64,181,2,64,1,25,2,0,0,8,0,64,0,151,2,0,0,7,2,0,0,41,215,226,0,0,0,0,0,0,0,0,0,2,0,1,60,0,1,62,50,117,0,0,2,26,83,67,0,1,0,4,0,2,54,120,0,0,0,79,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,8,192,0,128,64,70,0,128,0,72,1,0,14,192,0,128,128,70,0,128,0,72,1,0,18,192,0,128,192,70,0,128,0,72,1,0,22,192,0,129,0,70,0,128,0,72,1,0,26,192,0,129,64,70,0,128,0,72,1,0,3,4,1,128,1,132,2,0,0,5,0,129,193,32,0,128,0,72,1,0,30,192,0,130,0,70,0,128,0,72,1,0,34,192,0,130,64,70,0,128,0,72,1,0,38,192,0,130,128,70,0,128,0,72,1,0,42,192,0,130,192,70,0,128,0,72,1,0,6,4,1,128,5,132,2,0,0,5,0,129,193,32,0,128,0,72,1,0,6,132,1,128,1,4,2,0,0,5,0,129,193,32,0,128,0,72,1,0,48,192,0,131,128,70,0,128,0,72,1,0,52,192,0,131,192,70,0,128,0,72,1,0,8,4,1,128,5,4,2,0,0,5,0,129,193,32,0,128,0,72,1,0,56,192,0,132,64,70,0,128,0,72,1,0,60,192,0,132,128,70,0,128,0,72,1,0,9,132,1,128,4,4,2,0,0,5,0,129,193,32,0,128,0,72,1,0,64,192,0,133,0,70,0,128,0,72,1,0,68,192,0,133,64,70,0,128,0,72,1,0,11,4,1,128,2,132,2,0,0,5,0,129,193,32,1,0,0,41,94,141,0,0,0,0,0,0,0,0,0,23,0,4,97,108,108,63,0,4,97,110,121,63,0,7,99,111,108,108,101,99,116,0,6,100,101,116,101,99,116,0,15,101,97,99,104,95,119,105,116,104,95,105,110,100,101,120,0,7,101,110,116,114,105,101,115,0,4,102,105,110,100,0,12,97,108,105,97,115,95,109,101,116,104,111,100,0,8,102,105,110,100,95,97,108,108,0,4,103,114,101,112,0,8,105,110,99,108,117,100,101,63,0,6,105,110,106,101,99,116,0,6,114,101,100,117,99,101,0,3,109,97,112,0,3,109,97,120,0,3,109,105,110,0,7,109,101,109,98,101,114,63,0,9,112,97,114,116,105,116,105,111,110,0,6,114,101,106,101,99,116,0,6,115,101,108,101,99,116,0,12,95,95,115,111,114,116,95,115,117,98,95,95,0,4,115,111,114,116,0,4,116,111,95,97,251,32,0,0,0,82,83,67,0,3,0,5,0,2,72,57,0,0,0,12,0,0,0,166,1,0,0,7,1,128,64,1,1,192,2,25,1,128,0,6,2,0,3,64,1,128,0,33,0,64,1,151,1,128,0,6,2,0,5,64,1,128,0,33,1,0,0,41,192,183,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,78,83,67,0,3,0,5,0,2,72,57,0,0,0,11,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,8,1,128,128,22,1,128,64,41,1,128,0,41,241,182,0,0,0,0,0,0,0,0,0,1,0,4,99,97,108,108,56,3,0,0,0,64,83,67,0,3,0,4,0,2,88,24,0,0,0,9,2,0,0,38,1,128,64,1,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,8,1,128,128,22,1,128,64,41,1,128,0,41,205,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,83,67,0,3,0,5,0,2,72,57,0,0,0,12,0,0,0,166,1,0,0,8,1,128,64,1,1,192,2,25,1,128,0,6,2,0,3,64,1,128,0,33,0,64,1,151,1,128,0,6,2,0,5,64,1,128,0,33,1,0,0,41,20,144,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,78,83,67,0,3,0,5,0,2,72,57,0,0,0,11,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,2,25,1,128,0,7,1,128,128,22,1,128,64,41,0,64,0,151,1,128,0,5,1,128,0,41,117,85,0,0,0,0,0,0,0,0,0,1,0,4,99,97,108,108,56,3,0,0,0,64,83,67,0,3,0,4,0,2,88,24,0,0,0,9,2,0,0,38,1,128,64,1,1,192,2,25,1,128,0,7,1,128,128,22,1,128,64,41,0,64,0,151,1,128,0,5,1,128,0,41,73,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,83,67,0,3,0,5,0,2,72,57,0,0,0,6,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,150,177,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,68,83,67,0,3,0,6,0,2,120,90,0,0,0,7,2,0,0,38,1,128,128,21,2,0,64,21,2,128,64,1,2,0,64,160,1,128,0,160,1,128,0,41,79,89,0,0,0,0,0,0,0,0,0,2,0,4,112,117,115,104,0,4,99,97,108,108,115,73,0,0,0,70,83,67,0,4,0,6,0,2,253,202,0,0,0,9,0,16,0,166,0,64,0,151,0,64,0,151,0,128,0,5,1,128,64,1,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,179,1,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,74,83,67,0,3,0,5,0,2,72,57,0,0,0,10,2,0,0,38,1,128,128,21,2,0,64,1,1,128,0,160,1,192,1,153,0,128,192,22,1,128,64,41,0,64,0,151,1,128,0,5,1,128,0,41,77,149,0,0,0,0,0,0,0,0,0,1,0,4,99,97,108,108,56,3,0,0,0,62,83,67,0,3,0,5,0,2,72,57,0,0,0,7,0,0,0,166,1,63,255,131,1,128,0,6,2,0,3,64,1,128,0,33,0,0,0,6,0,0,0,41,149,53,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,73,83,67,0,3,0,6,0,2,120,90,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,2,128,128,21,1,128,1,32,1,128,128,21,1,128,64,173,1,128,128,22,1,128,0,41,210,58,0,0,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,1,43,240,9,0,0,0,58,83,67,0,3,0,5,0,2,72,57,0,0,0,6,0,0,0,38,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,4,120,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,54,83,67,0,3,0,5,0,2,72,57,0,0,0,5,2,0,0,38,1,128,128,21,2,0,64,1,1,128,0,160,1,128,0,41,125,40,0,0,0,0,0,0,0,0,0,1,0,4,112,117,115,104,35,146,0,0,0,58,83,67,0,3,0,5,0,2,72,57,0,0,0,6,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,150,177,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,84,83,67,0,3,0,5,0,2,72,57,0,0,0,11,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,2,25,1,128,128,21,2,0,64,1,1,128,64,160,0,64,0,151,1,128,0,5,1,128,0,41,50,191,0,0,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,4,112,117,115,104,61,37,0,0,0,58,83,67,0,4,0,6,0,2,253,202,0,0,0,6,2,0,0,166,1,129,0,55,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,211,187,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,113,83,67,0,3,0,6,0,2,120,90,0,0,0,17,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,5,25,1,128,192,21,2,0,128,21,2,64,2,25,2,0,128,21,2,128,64,1,2,0,128,160,0,64,0,151,2,0,64,1,1,128,64,160,0,64,0,151,1,128,0,5,1,128,0,41,184,239,0,0,0,0,0,0,0,0,0,3,0,3,61,61,61,0,4,112,117,115,104,0,4,99,97,108,108,94,98,0,0,0,58,83,67,0,4,0,6,0,2,253,202,0,0,0,6,2,0,0,38,1,128,0,8,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,221,220,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,76,83,67,0,3,0,5,0,2,72,57,0,0,0,11,2,0,0,38,1,128,64,1,2,0,64,21,1,128,0,178,1,192,2,25,1,128,0,7,1,128,192,22,1,128,64,41,0,64,0,151,1,128,0,5,1,128,0,41,113,237,0,0,0,0,0,0,0,0,0,1,0,2,61,61,42,79,0,0,1,16,83,67,0,6,0,9,0,2,98,69,0,0,0,39,0,8,0,166,3,0,64,1,3,0,0,32,3,192,0,131,3,0,64,181,3,64,2,25,3,0,0,6,3,128,1,145,4,0,0,61,3,0,129,32,3,0,2,17,3,128,64,1,4,63,255,3,3,129,128,160,3,1,64,160,3,64,4,25,3,0,64,1,3,191,255,3,3,1,128,160,1,129,128,1,3,0,3,192,1,1,128,1,3,0,64,1,3,1,192,32,3,0,64,1,3,2,0,32,3,64,1,153,2,0,0,7,2,128,0,5,0,64,2,151,2,0,0,8,3,0,64,1,3,191,255,131,3,1,128,160,2,129,128,1,3,0,0,6,3,128,5,64,3,2,64,33,2,128,0,41,160,39,0,0,0,1,17,0,18,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,4,136,0,0,0,10,0,4,115,105,122,101,0,1,62,0,5,114,97,105,115,101,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,6,83,121,109,98,111,108,0,3,61,61,61,0,2,91,93,0,3,112,111,112,0,6,101,109,112,116,121,63,0,4,101,97,99,104,108,80,0,0,0,58,83,67,0,4,0,7,0,2,237,235,0,0,0,6,4,0,0,38,2,0,64,1,2,128,192,21,3,0,128,1,2,0,1,32,2,0,0,41,190,145,0,0,0,0,0,0,0,0,0,1,0,4,115,101,110,100,121,252,0,0,0,90,83,67,0,3,0,6,0,2,120,90,0,0,0,14,2,0,0,38,1,129,0,21,1,192,2,153,1,128,0,8,1,129,0,22,1,128,64,1,1,129,64,22,0,64,2,151,1,128,128,21,2,1,64,21,2,128,64,1,1,128,1,32,1,129,64,22,1,128,0,41,176,112,0,0,0,0,0,0,0,0,0,1,0,4,99,97,108,108,56,3,0,0,0,62,83,67,0,4,0,6,0,2,253,202,0,0,0,7,0,0,0,166,1,0,0,7,1,128,0,5,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,94,85,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,170,83,67,0,3,0,6,0,2,120,90,0,0,0,32,2,0,0,38,1,128,128,21,1,192,2,25,0,128,192,22,1,128,0,8,1,128,128,22,0,64,12,23,1,128,64,21,1,192,6,25,1,128,64,21,2,0,64,1,2,128,192,21,1,128,1,32,2,63,255,131,1,128,64,181,1,192,1,153,1,128,64,1,1,128,192,22,0,64,0,151,1,128,0,5,0,64,5,23,1,128,64,1,2,0,192,21,1,128,128,160,2,63,255,131,1,128,64,181,1,192,1,153,1,128,64,1,1,128,192,22,0,64,0,151,1,128,0,5,1,128,0,41,86,254,0,0,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,1,62,0,3,60,61,62,177,18,0,0,0,62,83,67,0,4,0,6,0,2,253,202,0,0,0,7,0,0,0,166,1,0,0,7,1,128,0,5,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,94,85,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,170,83,67,0,3,0,6,0,2,120,90,0,0,0,32,2,0,0,38,1,128,128,21,1,192,2,25,0,128,192,22,1,128,0,8,1,128,128,22,0,64,12,23,1,128,64,21,1,192,6,25,1,128,64,21,2,0,64,1,2,128,192,21,1,128,1,32,2,63,255,131,1,128,64,179,1,192,1,153,1,128,64,1,1,128,192,22,0,64,0,151,1,128,0,5,0,64,5,23,1,128,64,1,2,0,192,21,1,128,128,160,2,63,255,131,1,128,64,179,1,192,1,153,1,128,64,1,1,128,192,22,0,64,0,151,1,128,0,5,1,128,0,41,109,85,0,0,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,1,60,0,3,60,61,62,92,122,0,0,0,74,83,67,0,4,0,6,0,2,253,202,0,0,0,10,0,0,0,166,1,1,0,55,1,129,0,55,2,0,0,6,2,128,3,64,2,0,0,33,2,0,128,1,2,128,192,1,0,1,1,55,0,0,0,41,22,41,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,92,83,67,0,3,0,5,0,2,72,57,0,0,0,13,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,2,25,1,128,128,21,2,0,64,1,1,128,64,160,0,64,1,151,1,128,192,21,2,0,64,1,1,128,64,160,1,128,0,41,161,2,0,0,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,4,112,117,115,104,61,37,0,0,0,58,83,67,0,3,0,5,0,2,72,57,0,0,0,6,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,150,177,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,84,83,67,0,3,0,5,0,2,72,57,0,0,0,11,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,1,25,1,128,0,5,0,64,1,151,1,128,128,21,2,0,64,1,1,128,64,160,1,128,0,41,171,114,0,0,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,4,112,117,115,104,61,37,0,0,1,148,83,67,0,12,0,19,0,2,22,255,0,0,0,82,10,0,0,166,6,1,0,1,6,129,64,1,6,0,0,178,6,64,6,25,6,0,192,1,6,192,0,3,6,0,0,178,6,64,3,153,6,0,128,1,6,129,0,1,6,0,64,160,6,128,64,1,7,1,0,1,7,131,0,1,6,128,129,32,5,128,0,41,6,0,192,1,6,191,255,131,6,0,0,178,6,64,2,153,6,0,64,1,6,128,128,1,3,131,0,1,4,3,64,1,0,64,2,23,6,0,128,1,6,128,64,1,3,131,0,1,4,3,64,1,6,1,192,1,6,129,0,1,6,0,64,160,4,131,0,1,6,1,0,1,6,129,64,1,5,3,0,1,5,131,64,1,6,1,0,1,6,0,192,173,6,129,64,1,7,0,3,64,6,1,0,161,6,2,64,1,6,128,64,1,7,2,128,1,7,131,0,1,6,128,129,32,6,0,192,1,6,0,192,173,6,192,0,131,6,1,64,160,1,131,0,1,6,2,128,1,6,129,0,1,6,1,128,181,6,64,4,153,6,0,0,6,6,128,64,1,7,0,128,1,7,128,192,1,8,1,0,1,8,130,128,1,8,130,0,175,9,1,128,1,6,1,194,161,6,2,128,1,6,129,64,1,6,2,64,179,6,64,5,25,6,0,0,6,6,128,64,1,7,0,128,1,7,128,192,1,8,2,128,1,8,0,192,173,8,129,64,1,9,1,128,1,6,1,194,161,0,64,0,151,6,0,0,5,6,0,0,41,175,102,0,0,0,0,0,0,0,0,0,10,0,2,61,61,0,2,91,93,0,3,91,93,61,0,1,43,0,4,117,112,116,111,0,1,37,0,1,62,0,12,95,95,115,111,114,116,95,115,117,98,95,95,0,1,45,0,1,60,220,0,0,0,0,217,83,67,0,3,0,7,0,2,104,123,0,0,0,40,2,0,0,38,1,129,128,21,1,192,3,153,1,129,128,21,2,1,192,21,2,128,64,1,2,0,64,160,2,130,64,21,1,128,1,32,0,64,2,151,1,129,192,21,2,0,64,1,1,128,64,160,2,2,64,21,1,128,128,160,2,63,255,131,1,128,192,181,1,192,5,153,1,129,192,21,2,0,64,1,1,128,64,160,2,2,0,21,2,130,192,21,3,0,192,1,2,1,1,32,1,130,192,21,1,129,64,175,1,130,192,22,0,64,5,23,1,129,192,21,2,0,64,1,1,128,64,160,2,2,0,21,2,130,128,21,3,0,192,1,2,1,1,32,1,130,128,21,1,129,128,173,1,130,128,22,1,128,0,41,66,205,0,0,0,0,0,0,0,0,0,7,0,4,99,97,108,108,0,2,91,93,0,3,60,61,62,0,1,62,0,3,91,93,61,0,1,45,0,1,43,219,14,0,0,0,173,83,67,0,3,0,10,0,2,185,214,0,0,0,24,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,128,128,1,1,128,64,32,1,192,0,153,0,64,7,23,1,128,0,6,2,0,128,1,2,128,0,66,2,128,1,147,3,0,128,1,3,1,64,32,2,129,0,160,3,63,255,131,3,191,255,131,4,0,128,1,4,1,64,32,4,1,128,175,4,128,64,1,1,128,130,161,1,0,0,41,231,140,0,0,0,0,0,0,0,0,0,7,0,4,101,97,99,104,0,6,101,109,112,116,121,63,0,12,95,95,115,111,114,116,95,115,117,98,95,95,0,5,65,114,114,97,121,0,3,110,101,119,0,4,115,105,122,101,0,1,45,16,16,0,0,0,54,83,67,0,3,0,5,0,2,72,57,0,0,0,5,2,0,0,38,1,128,128,21,2,0,64,1,1,128,0,160,1,128,0,41,125,40,0,0,0,0,0,0,0,0,0,1,0,4,112,117,115,104,35,146,0,0,0,63,83,67,0,1,0,2,0,2,86,190,0,0,0,6,0,128,0,6,0,128,64,71,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,42,31,0,0,0,0,0,0,0,0,0,1,0,9,101,120,99,101,112,116,105,111,110,40,194,0,0,0,65,83,67,0,3,0,6,0,2,120,90,0,0,0,8,0,8,0,166,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,2,128,128,1,1,128,63,161,1,128,0,41,253,71,0,0,0,0,0,0,0,0,0,1,0,3,110,101,119,203,248,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,0,0,5,0,0,0,41,139,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,83,67,0,1,0,2,0,2,86,190,0,0,0,32,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,8,192,0,128,128,70,0,128,0,72,1,0,12,192,0,128,192,70,0,128,0,72,1,0,16,192,0,129,0,70,0,128,0,72,1,0,18,192,0,129,64,70,0,128,0,72,1,0,26,192,0,129,128,70,0,128,0,72,1,0,32,192,0,129,192,70,0,128,0,72,1,0,36,192,0,130,0,70,0,128,0,72,1,0,42,192,0,130,64,70,0,0,0,5,0,0,0,41,136,187,0,0,0,0,0,0,0,0,0,10,0,6,100,101,108,101,116,101,0,4,101,97,99,104,0,8,101,97,99,104,95,107,101,121,0,10,101,97,99,104,95,118,97,108,117,101,0,10,105,110,105,116,105,97,108,105,122,101,0,5,109,101,114,103,101,0,7,114,101,106,101,99,116,33,0,6,114,101,106,101,99,116,0,7,115,101,108,101,99,116,33,0,6,115,101,108,101,99,116,176,65,0,0,0,121,83,67,0,3,0,5,0,2,72,57,0,0,0,16,2,0,0,166,1,128,128,1,1,192,2,25,1,128,0,6,2,0,64,1,1,128,0,160,1,128,64,32,1,192,2,25,1,128,128,1,2,0,64,1,1,128,128,160,0,64,1,151,1,128,0,6,2,0,64,1,1,128,192,160,1,128,0,41,246,154,0,0,0,0,0,0,0,0,0,4,0,8,104,97,115,95,107,101,121,63,0,1,33,0,4,99,97,108,108,0,8,95,95,100,101,108,101,116,101,225,86,0,0,0,68,83,67,0,2,0,4,0,2,111,40,0,0,0,7,0,0,0,166,1,0,0,6,1,0,0,32,1,128,3,64,1,0,64,33,0,0,0,6,0,0,0,41,65,169,0,0,0,0,0,0,0,0,0,2,0,4,107,101,121,115,0,4,101,97,99,104,100,44,0,0,0,74,83,67,0,3,0,7,0,2,104,123,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,2,128,0,6,3,0,64,1,2,128,64,160,2,1,1,55,1,128,0,160,1,128,0,41,66,100,0,0,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,2,91,93,166,33,0,0,0,68,83,67,0,2,0,4,0,2,111,40,0,0,0,7,0,0,0,166,1,0,0,6,1,0,0,32,1,128,3,64,1,0,64,33,0,0,0,6,0,0,0,41,65,169,0,0,0,0,0,0,0,0,0,2,0,4,107,101,121,115,0,4,101,97,99,104,100,44,0,0,0,54,83,67,0,3,0,5,0,2,72,57,0,0,0,5,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,128,0,41,10,201,0,0,0,0,0,0,0,0,0,1,0,4,99,97,108,108,56,3,0,0,0,68,83,67,0,2,0,4,0,2,111,40,0,0,0,7,0,0,0,166,1,0,0,6,1,0,0,32,1,128,3,64,1,0,64,33,0,0,0,6,0,0,0,41,65,169,0,0,0,0,0,0,0,0,0,2,0,4,107,101,121,115,0,4,101,97,99,104,100,44,0,0,0,66,83,67,0,3,0,6,0,2,120,90,0,0,0,7,2,0,0,38,1,128,64,21,2,0,0,6,2,128,64,1,2,0,64,160,1,128,0,160,1,128,0,41,185,72,0,0,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,2,91,93,166,33,0,0,0,73,83,67,0,3,0,6,0,2,120,90,0,0,0,8,0,8,0,166,1,128,0,6,2,0,128,1,2,1,0,183,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,164,122,0,0,0,0,0,0,0,0,0,1,0,11,95,95,105,110,105,116,95,99,111,114,101,195,199,0,0,0,206,83,67,0,4,0,6,0,2,253,202,0,0,0,26,2,0,0,166,1,129,0,63,2,0,64,1,2,128,0,132,2,0,0,160,2,64,0,153,0,64,1,151,2,0,0,6,2,128,0,61,2,0,128,160,2,0,64,1,2,0,64,32,0,129,0,1,2,0,0,6,2,128,3,64,2,0,192,33,2,0,128,1,2,64,2,25,2,0,64,1,2,128,5,64,2,0,192,33,0,64,1,151,2,0,64,1,2,128,7,64,2,0,192,33,1,128,0,41,92,192,0,0,0,1,17,0,32,99,97,110,39,116,32,99,111,110,118,101,114,116,32,97,114,103,117,109,101,110,116,32,105,110,116,111,32,72,97,115,104,98,192,0,0,0,4,0,11,114,101,115,112,111,110,100,95,116,111,63,0,7,116,111,95,104,97,115,104,0,5,114,97,105,115,101,0,8,101,97,99,104,95,107,101,121,24,160,0,0,0,73,83,67,0,3,0,7,0,2,104,123,0,0,0,9,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,2,0,192,21,2,128,64,1,3,0,192,1,2,0,65,32,1,128,0,41,6,82,0,0,0,0,0,0,0,0,0,2,0,2,91,93,0,3,91,93,61,82,102,0,0,0,145,83,67,0,3,0,8,0,2,153,148,0,0,0,23,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,192,5,25,1,128,128,21,2,0,64,1,2,128,0,6,3,0,64,1,2,128,128,160,3,0,64,21,3,128,64,1,3,0,128,160,1,128,65,160,0,64,1,151,1,128,64,21,2,0,64,1,1,128,128,160,2,0,192,21,2,128,64,1,3,0,192,1,2,0,193,32,1,128,0,41,92,81,0,0,0,0,0,0,0,0,0,4,0,8,104,97,115,95,107,101,121,63,0,4,99,97,108,108,0,2,91,93,0,3,91,93,61,253,141,0,0,0,73,83,67,0,3,0,7,0,2,104,123,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,2,0,192,21,2,128,64,1,3,0,192,1,2,0,65,32,1,128,0,41,203,144,0,0,0,0,0,0,0,0,0,2,0,2,91,93,0,3,91,93,61,82,102,0,0,0,122,83,67,0,3,0,6,0,2,120,90,0,0,0,17,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,128,128,1,1,128,64,32,2,63,255].concati8", ALLOC_NONE, 5292368);
allocate([0,0,0,0,252,0,0,0], ["*",0,0,0,"*",0,0,0], ALLOC_NONE, 5309544);
allocate([7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,50,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,33,0,0,0,36,0,0,0,39,0,0,0,40,0,0,0,43,0,0,0,44,0,0,0,47,0,0,0,51,0,0,0,51,0,0,0,69,0,0,0,70,0,0,0,84,0,0,0,95,0,0,0,109,0,0,0,140,0,0,0,141,0,0,0,142,0,0,0,181,0,0,0,191,0,0,0,196,0,0,0,227,0,0,0,206,0,0,0,234,0,0,0,215,0,0,0,221,0,0,0,242,0,0,0,258,0,0,0,272,0,0,0,286,0,0,0,300,0,0,0,314,0,0,0,315,0,0,0,316,0,0,0,317,0,0,0,323,0,0,0,324,0,0,0,337,0,0,0,338,0,0,0,339,0,0,0,342,0,0,0,364,0,0,0,348,0,0,0,349,0,0,0,352,0,0,0,355,0,0,0,359,0,0,0,360,0,0,0,361,0,0,0,365,0,0,0,366,0,0,0,371,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5309552);
allocate([110,111,32,116,97,114,103,101,116,32,99,108,97,115,115,32,111,114,32,109,111,100,117,108,101,0] /* no target class or m */, "i8", ALLOC_NONE, 5309856);
allocate([115,117,112,101,114,32,99,97,108,108,101,100,32,111,117,116,115,105,100,101,32,111,102,32,109,101,116,104,111,100,0] /* super called outside */, "i8", ALLOC_NONE, 5309884);
allocate(24, "i8", ALLOC_NONE, 5309916);
allocate([48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0] /* 0123456789abcdefghij */, "i8", ALLOC_NONE, 5309940);
allocate(24, "i8", ALLOC_NONE, 5309980);
allocate(48, "i8", ALLOC_NONE, 5310004);
allocate(4, "i8", ALLOC_NONE, 5310052);
allocate([99,111,100,101,103,101,110,32,101,114,114,111,114,0] /* codegen error\00 */, "i8", ALLOC_NONE, 5310056);
allocate(4, "i8", ALLOC_NONE, 5310072);
allocate(4, "i8", ALLOC_NONE, 5310076);
allocate(4, "i8", ALLOC_NONE, 5310080);
allocate([0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] /* \00\00\00\00\00\00\0 */, "i8", ALLOC_NONE, 5310084);
allocate([105,114,101,112,32,108,111,97,100,32,101,114,114,111,114,0] /* irep load error\00 */, "i8", ALLOC_NONE, 5310340);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] /* \00\00\00\00\00\00\0 */, "i8", ALLOC_NONE, 5310356);
allocate([51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,14,51,16,8,11,13,51,51,51,51,10,51,13,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,11,51,13,1,26,4,1,8,28,51,23,51,1,1,27,5,19,21,51,8,3,3,11,51,21,24,16,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51] /* 33333333333333333333 */, "i8", ALLOC_NONE, 5310612);
allocate([82,73,84,69,48,48,48,57,48,48,48,48,48,48,48,57,48,48,48,48,77,65,84,90,32,32,32,32,48,48,48,57,48,48,48,48,0,0,10,91,0,24,0,0,32,32,32,32,32,32,32,32,5,116,0,0,0,97,83,67,0,1,0,3,0,2,70,159,0,0,0,12,0,128,0,5,0,128,0,68,0,128,0,197,0,128,0,5,1,0,0,5,0,128,64,67,0,128,9,197,0,128,0,5,1,0,0,5,0,128,128,67,0,128,10,197,0,0,0,74,185,98,0,0,0,0,0,0,0,0,0,3,0,7,77,114,117,98,121,74,115,0,4,80,114,111,99,0,4,72,97,115,104,130,67,0,0,0,181,83,67,0,1,0,3,0,2,70,159,0,0,0,23,0,128,64,63,0,128,0,16,0,128,0,6,0,128,64,71,1,0,2,192,0,128,64,70,0,128,0,6,0,128,64,71,1,0,4,192,0,128,128,70,0,128,0,5,1,0,0,5,0,128,192,67,0,128,1,197,0,128,0,5,1,0,0,5,0,129,0,67,0,128,4,197,0,128,0,5,1,0,0,5,0,129,64,67,0,128,8,69,1,0,0,41,145,244,0,0,0,0,0,0,0,0,0,6,0,7,64,64,112,114,111,99,115,0,8,97,100,100,95,112,114,111,99,0,9,99,97,108,108,95,112,114,111,99,0,8,74,115,79,98,106,101,99,116,0,10,74,115,70,117,110,99,116,105,111,110,0,7,74,115,65,114,114,97,121,37,229,0,0,0,116,83,67,0,4,0,8,0,2,28,4,0,0,0,16,2,16,0,38,0,64,0,151,0,64,0,151,1,63,255,3,2,0,0,15,2,128,64,1,2,0,64,160,2,64,1,25,2,0,0,5,0,64,2,151,2,0,128,1,2,128,0,15,3,0,64,1,3,129,0,1,2,128,129,32,2,0,0,41,61,154,0,0,0,0,0,0,0,0,0,3,0,7,64,64,112,114,111,99,115,0,8,104,97,115,95,107,101,121,63,0,3,91,93,61,234,1,0,0,0,199,83,67,0,4,0,8,0,2,28,4,0,0,0,31,2,0,0,38,2,0,0,15,2,128,64,1,2,0,64,160,2,64,12,25,2,0,0,15,2,128,64,1,2,0,128,160,1,129,0,1,2,0,192,1,2,191,255,3,2,0,192,178,2,64,0,153,1,128,0,41,2,0,192,1,2,192,0,3,2,1,0,180,2,64,2,25,2,0,0,15,2,128,64,1,2,1,64,160,0,64,3,23,2,0,192,1,2,1,128,175,2,128,0,15,3,0,64,1,3,129,0,1,2,129,193,32,0,64,0,151,2,0,0,5,2,0,0,41,112,79,0,0,0,0,0,0,0,0,0,8,0,7,64,64,112,114,111,99,115,0,8,104,97,115,95,107,101,121,63,0,2,91,93,0,2,61,61,0,2,60,61,0,6,100,101,108,101,116,101,0,1,45,0,3,91,93,61,40,134,0,0,0,154,83,67,0,1,0,2,0,2,86,190,0,0,0,17,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,0,0,5,0,0,0,41,18,35,0,0,0,0,0,0,0,0,0,5,0,4,99,97,108,108,0,8,99,97,108,108,95,110,101,119,0,14,99,97,108,108,95,119,105,116,104,95,116,104,105,115,0,8,103,101,116,95,102,117,110,99,0,14,109,101,116,104,111,100,95,109,105,115,115,105,110,103,62,0,0,0,0,82,83,67,0,4,0,7,0,2,237,235,0,0,0,9,2,8,0,38,2,0,0,6,2,128,64,1,2,0,0,160,2,129,64,55,3,0,128,1,2,129,128,56,2,0,127,160,2,0,0,41,174,45,0,0,0,0,0,0,0,0,0,2,0,8,103,101,116,95,102,117,110,99,0,6,105,110,118,111,107,101,203,41,0,0,0,86,83,67,0,4,0,7,0,2,237,235,0,0,0,9,2,8,0,38,2,0,0,6,2,128,64,1,2,0,0,160,2,129,64,55,3,0,128,1,2,129,128,56,2,0,127,160,2,0,0,41,174,45,0,0,0,0,0,0,0,0,0,2,0,8,103,101,116,95,102,117,110,99,0,10,105,110,118,111,107,101,95,110,101,119,246,98,0,0,0,96,83,67,0,5,0,8,0,2,43,52,0,0,0,10,4,8,0,38,2,128,0,6,3,0,64,1,2,128,0,160,3,0,128,1,3,1,128,183,3,128,192,1,3,1,192,56,2,128,127,160,2,128,0,41,196,30,0,0,0,0,0,0,0,0,0,2,0,8,103,101,116,95,102,117,110,99,0,16,105,110,118,111,107,101,95,119,105,116,104,95,116,104,105,115,114,60,0,0,0,145,83,67,0,4,0,8,0,2,28,4,0,0,0,17,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,64,0,153,0,64,4,23,2,0,0,6,2,128,1,17,3,0,0,61,3,128,64,1,3,1,192,62,3,128,0,189,3,1,192,62,2,0,65,32,1,128,0,41,187,172,0,0,0,2,17,0,0,17,0,16,32,100,111,101,115,32,110,111,116,32,101,120,105,115,116,33,58,4,0,0,0,3,0,3,103,101,116,0,5,114,97,105,115,101,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,161,111,0,0,0,132,83,67,0,4,0,7,0,2,237,235,0,0,0,19,2,8,0,38,2,0,128,1,2,0,0,32,2,191,255,131,2,0,64,181,2,64,4,25,2,0,0,6,2,128,64,1,2,128,192,32,2,129,64,183,3,0,128,1,2,129,128,56,2,0,191,160,0,64,2,23,2,0,0,6,2,128,64,1,2,128,192,32,2,1,0,160,2,0,0,41,8,236,0,0,0,0,0,0,0,0,0,5,0,6,108,101,110,103,116,104,0,1,62,0,4,99,97,108,108,0,4,116,111,95,115,0,3,103,101,116,184,210,0,0,0,218,83,67,0,1,0,3,0,2,70,159,0,0,0,23,0,128,0,6,1,0,0,132,0,128,0,160,0,128,0,72,1,0,2,192,0,128,128,70,0,128,0,72,1,0,4,192,0,128,192,70,0,128,0,72,1,0,6,192,0,129,0,70,0,128,0,72,1,0,8,192,0,129,64,70,0,128,0,72,1,0,10,192,0,129,128,70,0,128,0,72,1,0,12,192,0,129,192,70,0,0,0,5,0,0,0,41,2,148,0,0,0,0,0,0,0,0,0,8,0,11,97,116,116,114,95,114,101,97,100,101,114,0,13,112,97,114,101,110,116,95,111,98,106,101,99,116,0,10,105,110,105,116,105,97,108,105,122,101,0,6,105,110,118,111,107,101,0,10,105,110,118,111,107,101,95,110,101,119,0,16,105,110,118,111,107,101,95,119,105,116,104,95,116,104,105,115,0,2,91,93,0,14,109,101,116,104,111,100,95,109,105,115,115,105,110,103,154,14,0,0,0,68,83,67,0,4,0,6,0,2,253,202,0,0,0,6,4,0,0,38,2,128,64,1,3,0,0,5,2,0,0,164,1,0,0,14,1,0,0,41,252,40,0,0,0,0,0,0,0,0,0,1,0,14,64,112,97,114,101,110,116,95,111,98,106,101,99,116,177,50,0,0,0,77,83,67,0,3,0,6,0,2,120,90,0,0,0,8,0,8,0,38,1,128,0,6,2,63,255,131,2,1,0,183,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,248,94,0,0,0,0,0,0,0,0,0,1,0,15,105,110,118,111,107,101,95,105,110,116,101,114,110,97,108,28,54,0,0,0,77,83,67,0,3,0,6,0,2,120,90,0,0,0,8,0,8,0,38,1,128,0,6,2,64,0,3,2,1,0,183,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,107,162,0,0,0,0,0,0,0,0,0,1,0,15,105,110,118,111,107,101,95,105,110,116,101,114,110,97,108,28,54,0,0,0,81,83,67,0,4,0,7,0,2,237,235,0,0,0,9,2,8,0,38,2,0,0,6,2,192,0,131,3,0,64,1,2,129,65,55,3,0,128,1,2,129,128,56,2,0,63,160,2,0,0,41,179,182,0,0,0,0,0,0,0,0,0,1,0,15,105,110,118,111,107,101,95,105,110,116,101,114,110,97,108,28,54,0,0,0,64,83,67,0,3,0,6,0,2,120,90,0,0,0,7,0,8,0,38,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,114,242,0,0,0,0,0,0,0,0,0,1,0,6,105,110,118,111,107,101,11,248,0,0,0,78,83,67,0,4,0,7,0,2,237,235,0,0,0,9,2,8,0,38,2,0,0,6,2,128,64,1,2,128,64,32,2,129,64,183,3,0,128,1,2,129,128,56,2,0,63,160,2,0,0,41,141,235,0,0,0,0,0,0,0,0,0,2,0,6,105,110,118,111,107,101,0,4,116,111,95,115,235,27,0,0,0,54,83,67,0,1,0,2,0,2,86,190,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,243,18,0,0,0,0,0,0,0,0,0,1,0,4,101,97,99,104,157,161,0,0,0,136,83,67,0,4,0,7,0,2,237,235,0,0,0,21,0,0,0,166,2,63,255,131,2,128,0,6,2,128,0,32,1,1,0,1,1,129,64,1,0,64,4,23,2,0,64,1,2,128,0,6,3,0,128,1,2,128,128,160,2,0,64,160,2,0,128,1,2,0,192,173,1,1,0,1,2,0,128,1,2,128,192,1,2,1,0,179,2,63,250,24,0,0,0,5,0,0,0,41,10,19,0,0,0,0,0,0,0,0,0,5,0,6,108,101,110,103,116,104,0,4,99,97,108,108,0,2,91,93,0,1,43,0,1,60,85,58,0,0,0,63,83,67,0,1,0,2,0,2,86,190,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,243,18,0,0,0,0,0,0,0,0,0,1,0,13,114,101,108,101,97,115,101,95,97,102,116,101,114,57,242,0,0,0,75,83,67,0,3,0,6,0,2,120,90,0,0,0,7,2,0,0,38,1,128,0,17,2,0,0,6,2,128,64,1,1,128,65,32,0,0,0,6,0,0,0,41,100,152,0,0,0,0,0,0,0,0,0,2,0,7,77,114,117,98,121,74,115,0,8,97,100,100,95,112,114,111,99,210,190,0,0,0,60,83,67,0,1,0,2,0,2,86,190,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,243,18,0,0,0,0,0,0,0,0,0,1,0,10,116,111,74,115,79,98,106,101,99,116,90,234,0,0,0,97,83,67,0,3,0,5,0,2,72,57,0,0,0,9,0,0,0,38,1,128,0,145,1,128,0,19,1,128,128,32,1,0,192,1,1,128,0,6,2,0,3,64,1,128,192,33,1,0,0,41,189,97,0,0,0,0,0,0,0,0,0,4,0,8,74,115,79,98,106,101,99,116,0,7,77,114,117,98,121,74,115,0,6,99,114,101,97,116,101,0,4,101,97,99,104,149,172,0,0,0,61,83,67,0,4,0,8,0,2,28,4,0,0,0,7,4,0,0,38,2,0,128,1,2,128,128,21,3,0,64,1,3,129,0,1,2,128,1,32,2,0,0,41,35,149,0,0,0,0,0,0,0,0,0,1,0,3,91,93,61,149,68,0,0,0,0] /* RITE0009000000090000 */, "i8", ALLOC_NONE, 5310868);
allocate([45,105,110,102,0,105,110,102,0,0], "i8", ALLOC_NONE, 5313520);
allocate([4,0,0,0,3,0,0,0], "i8", ALLOC_NONE, 5313532);
allocate([35,0,0,0], "i8", ALLOC_NONE, 5313540);
allocate([0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5313544);
allocate([82,73,84,69,48,48,48,57,48,48,48,48,48,48,48,57,48,48,48,48,77,65,84,90,32,32,32,32,48,48,48,57,48,48,48,48,0,0,0,98,0,1,0,0,32,32,32,32,32,32,32,32,12,148,0,0,0,36,83,67,0,1,0,2,0,2,86,190,0,0,0,2,0,128,0,5,0,0,0,74,169,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] /* RITE0009000000090000 */, "i8", ALLOC_NONE, 5313712);
allocate([37,115,32,105,115,32,110,111,116,32,97,32,99,108,97,115,115,47,109,111,100,117,108,101,0] /* %s is not a class/mo */, "i8", ALLOC_NONE, 5313812);
allocate([103,101,110,101,114,97,116,105,111,110,97,108,95,109,111,100,101,0] /* generational_mode\00 */, "i8", ALLOC_NONE, 5313840);
allocate([99,111,100,101,103,101,110,32,101,114,114,111,114,58,32,37,115,10,0] /* codegen error: %s\0A */, "i8", ALLOC_NONE, 5313860);
allocate([101,120,99,101,112,116,105,111,110,0] /* exception\00 */, "i8", ALLOC_NONE, 5313880);
allocate([116,111,95,115,116,114,0] /* to_str\00 */, "i8", ALLOC_NONE, 5313892);
allocate([99,111,100,101,103,101,110,32,101,114,114,111,114,58,37,115,58,37,100,58,32,37,115,10,0] /* codegen error:%s:%d: */, "i8", ALLOC_NONE, 5313900);
allocate([36,37,100,0] /* $%d\00 */, "i8", ALLOC_NONE, 5313928);
allocate([105,102,110,111,110,101,0] /* ifnone\00 */, "i8", ALLOC_NONE, 5313932);
allocate([116,111,95,97,114,121,0] /* to_ary\00 */, "i8", ALLOC_NONE, 5313940);
allocate([105,110,100,101,120,32,37,108,100,32,111,117,116,32,111,102,32,97,114,114,97,121,0] /* index %ld out of arr */, "i8", ALLOC_NONE, 5313948);
allocate([101,120,112,101,99,116,101,100,32,37,115,0] /* expected %s\00 */, "i8", ALLOC_NONE, 5313972);
allocate([115,116,114,105,110,103,32,102,111,114,32,70,108,111,97,116,32,99,111,110,116,97,105,110,115,32,110,117,108,108,32,98,121,116,101,0] /* string for Float con */, "i8", ALLOC_NONE, 5313984);
allocate([71,67,0] /* GC\00 */, "i8", ALLOC_NONE, 5314020);
allocate([96,37,115,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0] /* `%s' is not allowed  */, "i8", ALLOC_NONE, 5314024);
allocate([71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,110,32,97,114,114,97,121,33,0] /* Given argument is no */, "i8", ALLOC_NONE, 5314072);
allocate([66,69,71,73,78,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0] /* BEGIN not supported\ */, "i8", ALLOC_NONE, 5314104);
allocate([60,61,62,0] /* _=_\00 */, "i8", ALLOC_NONE, 5314124);
allocate([73,110,100,101,120,69,114,114,111,114,0] /* IndexError\00 */, "i8", ALLOC_NONE, 5314128);
allocate([110,117,109,98,101,114,101,100,40,37,100,41,32,97,102,116,101,114,32,117,110,110,117,109,98,101,114,101,100,40,37,100,41,0] /* numbered(%d) after u */, "i8", ALLOC_NONE, 5314140);
allocate([84,114,117,101,67,108,97,115,115,0] /* TrueClass\00 */, "i8", ALLOC_NONE, 5314176);
allocate([113,117,111,0] /* quo\00 */, "i8", ALLOC_NONE, 5314188);
allocate([97,116,97,110,0] /* atan\00 */, "i8", ALLOC_NONE, 5314192);
allocate([124,83,38,0] /* |S&\00 */, "i8", ALLOC_NONE, 5314200);
allocate([99,111,110,115,116,97,110,116,32,108,111,111,107,45,117,112,32,102,111,114,32,110,111,110,32,99,108,97,115,115,47,109,111,100,117,108,101,0] /* constant look-up for */, "i8", ALLOC_NONE, 5314204);
allocate([109,101,116,104,111,100,32,96,37,115,39,32,110,111,116,32,100,101,102,105,110,101,100,32,105,110,32,37,115,0] /* method `%s' not defi */, "i8", ALLOC_NONE, 5314244);
allocate([119,114,111,110,103,32,99,111,110,115,116,97,110,116,32,110,97,109,101,32,37,115,0] /* wrong constant name  */, "i8", ALLOC_NONE, 5314276);
allocate([103,101,110,101,114,97,116,105,111,110,97,108,95,109,111,100,101,61,0] /* generational_mode=\0 */, "i8", ALLOC_NONE, 5314300);
allocate([117,110,100,101,102,105,110,101,100,32,109,101,116,104,111,100,32,39,37,115,39,32,102,111,114,32,37,115,0] /* undefined method '%s */, "i8", ALLOC_NONE, 5314320);
allocate([78,111,77,101,116,104,111,100,69,114,114,111,114,0] /* NoMethodError\00 */, "i8", ALLOC_NONE, 5314352);
allocate([36,37,99,0] /* $%c\00 */, "i8", ALLOC_NONE, 5314368);
allocate([110,97,109,101,32,115,104,111,117,108,100,32,98,101,32,97,32,115,121,109,98,111,108,0] /* name should be a sym */, "i8", ALLOC_NONE, 5314372);
allocate([35,60,77,111,100,117,108,101,58,37,112,62,0] /* #_Module:%p_\00 */, "i8", ALLOC_NONE, 5314396);
allocate([105,110,118,97,108,105,100,32,115,116,114,105,110,103,32,102,111,114,32,102,108,111,97,116,40,37,115,41,0] /* invalid string for f */, "i8", ALLOC_NONE, 5314412);
allocate([67,108,97,115,115,58,0] /* Class:\00 */, "i8", ALLOC_NONE, 5314444);
allocate([97,100,100,95,112,114,111,99,0] /* add_proc\00 */, "i8", ALLOC_NONE, 5314452);
allocate([61,61,0] /* ==\00 */, "i8", ALLOC_NONE, 5314464);
allocate([115,116,114,117,99,116,32,115,105,122,101,32,109,105,115,109,97,116,99,104,0] /* struct size mismatch */, "i8", ALLOC_NONE, 5314468);
allocate([118,97,108,117,101,32,103,105,118,101,110,32,116,119,105,99,101,32,45,32,37,100,36,0] /* value given twice -  */, "i8", ALLOC_NONE, 5314492);
allocate([47,0] /* /\00 */, "i8", ALLOC_NONE, 5314516);
allocate([97,99,111,115,0] /* acos\00 */, "i8", ALLOC_NONE, 5314520);
allocate([105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,32,115,104,111,117,108,100,32,116,97,107,101,32,115,97,109,101,32,99,108,97,115,115,32,111,98,106,101,99,116,0] /* initialize_copy shou */, "i8", ALLOC_NONE, 5314528);
allocate([35,60,0] /* #_\00 */, "i8", ALLOC_NONE, 5314576);
allocate([116,114,105,101,100,32,116,111,32,99,114,101,97,116,101,32,80,114,111,99,32,111,98,106,101,99,116,32,119,105,116,104,111,117,116,32,97,32,98,108,111,99,107,0] /* tried to create Proc */, "i8", ALLOC_NONE, 5314580);
allocate([117,110,105,110,105,116,105,97,108,105,122,101,100,32,99,111,110,115,116,97,110,116,32,37,115,0] /* uninitialized consta */, "i8", ALLOC_NONE, 5314624);
allocate([119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0] /* wrong number of argu */, "i8", ALLOC_NONE, 5314652);
allocate([110,111,32,98,108,111,99,107,32,103,105,118,101,110,0] /* no block given\00 */, "i8", ALLOC_NONE, 5314680);
allocate([115,116,101,112,95,114,97,116,105,111,61,0] /* step_ratio=\00 */, "i8", ALLOC_NONE, 5314696);
allocate([110,38,0] /* n&\00 */, "i8", ALLOC_NONE, 5314708);
allocate([117,110,101,120,112,101,99,116,101,100,32,114,101,116,114,121,0] /* unexpected retry\00 */, "i8", ALLOC_NONE, 5314712);
allocate([110,111,32,115,117,112,101,114,32,99,108,97,115,115,32,102,111,114,32,96,37,115,58,58,37,115,39,44,32,79,98,106,101,99,116,32,97,115,115,117,109,101,100,0] /* no super class for ` */, "i8", ALLOC_NONE, 5314732);
allocate([99,108,97,115,115,95,118,97,114,105,97,98,108,101,115,0] /* class_variables\00 */, "i8", ALLOC_NONE, 5314776);
allocate([110,101,103,97,116,105,118,101,32,97,114,103,117,109,101,110,116,0] /* negative argument\00 */, "i8", ALLOC_NONE, 5314792);
allocate([100,101,102,105,110,101,95,109,101,116,104,111,100,0] /* define_method\00 */, "i8", ALLOC_NONE, 5314812);
allocate([114,101,109,111,118,101,95,99,111,110,115,116,0] /* remove_const\00 */, "i8", ALLOC_NONE, 5314828);
allocate([102,124,102,0] /* f|f\00 */, "i8", ALLOC_NONE, 5314844);
allocate([105,110,118,97,108,105,100,32,115,116,114,105,110,103,32,102,111,114,32,110,117,109,98,101,114,40,37,115,41,0] /* invalid string for n */, "i8", ALLOC_NONE, 5314848);
allocate([99,111,110,115,116,95,115,101,116,0] /* const_set\00 */, "i8", ALLOC_NONE, 5314880);
allocate([105,124,105,105,105,105,105,105,0] /* i|iiiiii\00 */, "i8", ALLOC_NONE, 5314892);
allocate([99,111,110,115,116,95,103,101,116,0] /* const_get\00 */, "i8", ALLOC_NONE, 5314904);
allocate([71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,112,114,111,99,33,0] /* Given argument is no */, "i8", ALLOC_NONE, 5314916);
allocate([117,116,99,0] /* utc\00 */, "i8", ALLOC_NONE, 5314948);
allocate([109,97,108,102,111,114,109,101,100,32,102,111,114,109,97,116,32,115,116,114,105,110,103,32,45,32,37,42,91,48,45,57,93,0] /* malformed format str */, "i8", ALLOC_NONE, 5314952);
allocate([42,42,0] /* __\00 */, "i8", ALLOC_NONE, 5314988);
allocate([102,0] /* f\00 */, "i8", ALLOC_NONE, 5314992);
allocate([97,115,105,110,0] /* asin\00 */, "i8", ALLOC_NONE, 5314996);
allocate([99,111,110,115,116,95,100,101,102,105,110,101,100,63,0] /* const_defined?\00 */, "i8", ALLOC_NONE, 5315004);
allocate([83,97,116,0] /* Sat\00 */, "i8", ALLOC_NONE, 5315020);
allocate([99,111,110,115,116,95,109,105,115,115,105,110,103,0] /* const_missing\00 */, "i8", ALLOC_NONE, 5315024);
allocate([115,116,101,112,95,114,97,116,105,111,0] /* step_ratio\00 */, "i8", ALLOC_NONE, 5315040);
allocate([70,114,105,0] /* Fri\00 */, "i8", ALLOC_NONE, 5315052);
allocate([97,110,99,101,115,116,111,114,115,0] /* ancestors\00 */, "i8", ALLOC_NONE, 5315056);
allocate([84,104,117,0] /* Thu\00 */, "i8", ALLOC_NONE, 5315068);
allocate([117,110,101,120,112,101,99,116,101,100,32,114,101,100,111,0] /* unexpected redo\00 */, "i8", ALLOC_NONE, 5315072);
allocate([87,101,100,0] /* Wed\00 */, "i8", ALLOC_NONE, 5315088);
allocate([115,116,114,105,110,103,32,115,105,122,101,115,32,116,111,111,32,98,105,103,0] /* string sizes too big */, "i8", ALLOC_NONE, 5315092);
allocate([37,115,32,105,115,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,0] /* %s is already define */, "i8", ALLOC_NONE, 5315116);
allocate([84,117,115,0] /* Tus\00 */, "i8", ALLOC_NONE, 5315140);
allocate([97,114,103,117,109,101,110,116,32,116,111,111,32,98,105,103,0] /* argument too big\00 */, "i8", ALLOC_NONE, 5315144);
allocate([114,101,109,111,118,101,95,109,101,116,104,111,100,0] /* remove_method\00 */, "i8", ALLOC_NONE, 5315164);
allocate([77,111,110,0] /* Mon\00 */, "i8", ALLOC_NONE, 5315180);
allocate([101,120,116,101,110,100,101,100,0] /* extended\00 */, "i8", ALLOC_NONE, 5315184);
allocate([114,101,109,111,118,101,95,99,108,97,115,115,95,118,97,114,105,97,98,108,101,0] /* remove_class_variabl */, "i8", ALLOC_NONE, 5315196);
allocate([83,117,110,0] /* Sun\00 */, "i8", ALLOC_NONE, 5315220);
allocate([101,120,116,101,110,100,95,111,98,106,101,99,116,0] /* extend_object\00 */, "i8", ALLOC_NONE, 5315224);
allocate([109,111,100,117,108,101,95,101,118,97,108,0] /* module_eval\00 */, "i8", ALLOC_NONE, 5315240);
allocate([68,101,99,0] /* Dec\00 */, "i8", ALLOC_NONE, 5315252);
allocate([119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,97,116,32,108,101,97,115,116,32,49,41,0] /* wrong number of argu */, "i8", ALLOC_NONE, 5315256);
allocate([105,108,108,101,103,97,108,32,114,97,100,105,120,32,37,100,0] /* illegal radix %d\00 */, "i8", ALLOC_NONE, 5315296);
allocate([109,101,116,104,111,100,95,100,101,102,105,110,101,100,63,0] /* method_defined?\00 */, "i8", ALLOC_NONE, 5315316);
allocate([78,111,118,0] /* Nov\00 */, "i8", ALLOC_NONE, 5315332);
allocate([119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,100,32,102,111,114,32,49,41,0] /* wrong number of argu */, "i8", ALLOC_NONE, 5315336);
allocate([95,95,99,108,97,115,115,105,100,95,95,0] /* __classid__\00 */, "i8", ALLOC_NONE, 5315376);
allocate([105,110,115,116,97,110,99,101,95,109,101,116,104,111,100,115,0] /* instance_methods\00 */, "i8", ALLOC_NONE, 5315388);
allocate([71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,110,32,111,98,106,101,99,116,33,0] /* Given argument is no */, "i8", ALLOC_NONE, 5315408);
allocate([110,111,119,0] /* now\00 */, "i8", ALLOC_NONE, 5315444);
allocate([119,105,100,116,104,32,116,111,111,32,98,105,103,0] /* width too big\00 */, "i8", ALLOC_NONE, 5315448);
allocate([110,105,108,63,0] /* nil?\00 */, "i8", ALLOC_NONE, 5315464);
allocate([109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,0] /* memory allocation er */, "i8", ALLOC_NONE, 5315472);
allocate([45,64,0] /* -@\00 */, "i8", ALLOC_NONE, 5315496);
allocate([79,99,116,0] /* Oct\00 */, "i8", ALLOC_NONE, 5315500);
allocate([116,97,110,0] /* tan\00 */, "i8", ALLOC_NONE, 5315504);
allocate([96,37,115,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0] /* `%s' is not allowed  */, "i8", ALLOC_NONE, 5315508);
allocate([111,124,111,0] /* o|o\00 */, "i8", ALLOC_NONE, 5315560);
allocate([105,110,99,108,117,100,101,100,95,109,111,100,117,108,101,115,0] /* included_modules\00 */, "i8", ALLOC_NONE, 5315564);
allocate([83,101,112,0] /* Sep\00 */, "i8", ALLOC_NONE, 5315584);
allocate([110,42,38,0] /* n_&\00 */, "i8", ALLOC_NONE, 5315588);
allocate([105,110,99,108,117,100,101,100,0] /* included\00 */, "i8", ALLOC_NONE, 5315592);
allocate([105,110,116,101,114,118,97,108,95,114,97,116,105,111,61,0] /* interval_ratio=\00 */, "i8", ALLOC_NONE, 5315604);
allocate([65,117,103,0] /* Aug\00 */, "i8", ALLOC_NONE, 5315620);
allocate([102,111,114,109,97,116,0] /* format\00 */, "i8", ALLOC_NONE, 5315624);
allocate([82,101,103,101,120,112,32,99,108,97,115,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0] /* Regexp class not sup */, "i8", ALLOC_NONE, 5315632);
allocate([99,108,97,115,115,95,101,118,97,108,0] /* class_eval\00 */, "i8", ALLOC_NONE, 5315660);
allocate([109,101,109,111,114,121,32,101,120,104,97,117,115,116,101,100,0] /* memory exhausted\00 */, "i8", ALLOC_NONE, 5315672);
allocate([74,117,108,0] /* Jul\00 */, "i8", ALLOC_NONE, 5315692);
allocate([110,111,110,32,102,108,111,97,116,32,118,97,108,117,101,0] /* non float value\00 */, "i8", ALLOC_NONE, 5315696);
allocate([115,112,114,105,110,116,102,0] /* sprintf\00 */, "i8", ALLOC_NONE, 5315712);
allocate([97,112,112,101,110,100,95,102,101,97,116,117,114,101,115,0] /* append_features\00 */, "i8", ALLOC_NONE, 5315720);
allocate([117,110,101,120,112,101,99,116,101,100,32,110,101,120,116,0] /* unexpected next\00 */, "i8", ALLOC_NONE, 5315736);
allocate([74,117,110,0] /* Jun\00 */, "i8", ALLOC_NONE, 5315752);
allocate([73,110,102,105,110,105,116,121,0] /* Infinity\00 */, "i8", ALLOC_NONE, 5315756);
allocate([115,105,110,103,108,101,116,111,110,95,109,101,116,104,111,100,115,0] /* singleton_methods\00 */, "i8", ALLOC_NONE, 5315768);
allocate([83,0] /* S\00 */, "i8", ALLOC_NONE, 5315788);
allocate([105,110,104,101,114,105,116,101,100,0] /* inherited\00 */, "i8", ALLOC_NONE, 5315792);
allocate([77,97,121,0] /* May\00 */, "i8", ALLOC_NONE, 5315804);
allocate([45,73,110,102,105,110,105,116,121,0] /* -Infinity\00 */, "i8", ALLOC_NONE, 5315808);
allocate([115,101,110,100,0] /* send\00 */, "i8", ALLOC_NONE, 5315820);
allocate([116,121,112,101,32,109,105,115,109,97,116,99,104,58,32,37,115,32,103,105,118,101,110,0] /* type mismatch: %s gi */, "i8", ALLOC_NONE, 5315828);
allocate([105,110,99,108,117,100,101,0] /* include\00 */, "i8", ALLOC_NONE, 5315852);
allocate([115,121,110,116,97,120,32,101,114,114,111,114,0] /* syntax error\00 */, "i8", ALLOC_NONE, 5315860);
allocate([65,112,114,0] /* Apr\00 */, "i8", ALLOC_NONE, 5315876);
allocate([70,108,111,97,116,68,111,109,97,105,110,69,114,114,111,114,0] /* FloatDomainError\00 */, "i8", ALLOC_NONE, 5315880);
allocate([114,101,115,112,111,110,100,95,116,111,63,0] /* respond_to?\00 */, "i8", ALLOC_NONE, 5315900);
allocate([82,101,103,101,120,112,32,67,108,97,115,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0] /* Regexp Class not sup */, "i8", ALLOC_NONE, 5315912);
allocate([77,97,114,0] /* Mar\00 */, "i8", ALLOC_NONE, 5315940);
allocate([99,97,110,39,116,32,99,111,110,118,101,114,116,32,70,108,111,97,116,32,105,110,116,111,32,73,110,116,101,103,101,114,0] /* can't convert Float  */, "i8", ALLOC_NONE, 5315944);
allocate([114,101,109,111,118,101,95,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,0] /* remove_instance_vari */, "i8", ALLOC_NONE, 5315980);
allocate([99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,32,109,101,116,104,111,100,32,102,111,114,32,108,105,116,101,114,97,108,115,0] /* can't define singlet */, "i8", ALLOC_NONE, 5316008);
allocate([70,101,98,0] /* Feb\00 */, "i8", ALLOC_NONE, 5316052);
allocate([112,117,98,108,105,99,95,109,101,116,104,111,100,115,0] /* public_methods\00 */, "i8", ALLOC_NONE, 5316056);
allocate([124,111,105,0] /* |oi\00 */, "i8", ALLOC_NONE, 5316072);
allocate([98,111,116,104,32,98,108,111,99,107,32,97,114,103,32,97,110,100,32,97,99,116,117,97,108,32,98,108,111,99,107,32,103,105,118,101,110,0] /* both block arg and a */, "i8", ALLOC_NONE, 5316076);
allocate([98,108,111,99,107,32,97,114,103,117,109,101,110,116,32,115,104,111,117,108,100,32,110,111,116,32,98,101,32,103,105,118,101,110,0] /* block argument shoul */, "i8", ALLOC_NONE, 5316116);
allocate([99,108,97,115,115,95,118,97,114,105,97,98,108,101,95,115,101,116,0] /* class_variable_set\0 */, "i8", ALLOC_NONE, 5316152);
allocate([97,114,121,32,115,105,122,101,32,116,111,111,32,98,105,103,0] /* ary size too big\00 */, "i8", ALLOC_NONE, 5316172);
allocate([116,101,114,109,115,0] /* terms\00 */, "i8", ALLOC_NONE, 5316192);
allocate([110,108,0] /* nl\00 */, "i8", ALLOC_NONE, 5316200);
allocate([116,101,114,109,0] /* term\00 */, "i8", ALLOC_NONE, 5316204);
allocate([99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,32,109,101,116,104,111,100,32,102,111,114,32,40,41,46,0] /* can't define singlet */, "i8", ALLOC_NONE, 5316212);
allocate([74,97,110,0] /* Jan\00 */, "i8", ALLOC_NONE, 5316252);
allocate([119,105,100,116,104,40,37,100,41,32,62,32,40,37,100,58,115,105,122,101,111,102,40,109,114,98,95,105,110,116,41,42,67,72,65,82,95,66,73,84,45,49,41,0] /* width(%d) _ (%d:size */, "i8", ALLOC_NONE, 5316256);
allocate([112,114,111,116,101,99,116,101,100,95,109,101,116,104,111,100,115,0] /* protected_methods\00 */, "i8", ALLOC_NONE, 5316300);
allocate([116,114,97,105,108,101,114,0] /* trailer\00 */, "i8", ALLOC_NONE, 5316320);
allocate([114,98,114,97,99,107,101,116,0] /* rbracket\00 */, "i8", ALLOC_NONE, 5316328);
allocate([98,121,116,101,115,0] /* bytes\00 */, "i8", ALLOC_NONE, 5316340);
allocate([114,112,97,114,101,110,0] /* rparen\00 */, "i8", ALLOC_NONE, 5316348);
allocate([111,112,116,95,110,108,0] /* opt_nl\00 */, "i8", ALLOC_NONE, 5316356);
allocate([111,112,116,95,116,101,114,109,115,0] /* opt_terms\00 */, "i8", ALLOC_NONE, 5316364);
allocate([99,108,97,115,115,95,118,97,114,105,97,98,108,101,95,103,101,116,0] /* class_variable_get\0 */, "i8", ALLOC_NONE, 5316376);
allocate([100,111,116,95,111,114,95,99,111,108,111,110,0] /* dot_or_colon\00 */, "i8", ALLOC_NONE, 5316396);
allocate([114,101,99,117,114,115,105,118,101,32,97,114,114,97,121,32,106,111,105,110,0] /* recursive array join */, "i8", ALLOC_NONE, 5316412);
allocate([71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,102,108,111,97,116,33,0] /* Given argument is no */, "i8", ALLOC_NONE, 5316436);
allocate([111,112,101,114,97,116,105,111,110,51,0] /* operation3\00 */, "i8", ALLOC_NONE, 5316468);
allocate([109,107,116,105,109,101,0] /* mktime\00 */, "i8", ALLOC_NONE, 5316480);
allocate([37,115,32,105,115,32,110,111,116,32,115,116,114,117,99,116,32,109,101,109,98,101,114,0] /* %s is not struct mem */, "i8", ALLOC_NONE, 5316488);
allocate([111,112,101,114,97,116,105,111,110,50,0] /* operation2\00 */, "i8", ALLOC_NONE, 5316512);
allocate([102,108,97,103,32,97,102,116,101,114,32,112,114,101,99,105,115,105,111,110,0] /* flag after precision */, "i8", ALLOC_NONE, 5316524);
allocate([111,112,101,114,97,116,105,111,110,0] /* operation\00 */, "i8", ALLOC_NONE, 5316548);
allocate([124,0] /* |\00 */, "i8", ALLOC_NONE, 5316560);
allocate([97,115,115,111,99,0] /* assoc\00 */, "i8", ALLOC_NONE, 5316564);
allocate([102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,0] /* formal argument cann */, "i8", ALLOC_NONE, 5316572);
allocate([43,64,0] /* +@\00 */, "i8", ALLOC_NONE, 5316616);
allocate(1, "i8", ALLOC_NONE, 5316620);
allocate([99,111,115,0] /* cos\00 */, "i8", ALLOC_NONE, 5316624);
allocate([112,114,105,118,97,116,101,95,109,101,116,104,111,100,115,0] /* private_methods\00 */, "i8", ALLOC_NONE, 5316628);
allocate([97,115,115,111,99,115,0] /* assocs\00 */, "i8", ALLOC_NONE, 5316644);
allocate([99,97,110,39,116,32,100,117,112,32,37,115,0] /* can't dup %s\00 */, "i8", ALLOC_NONE, 5316652);
allocate([97,115,115,111,99,95,108,105,115,116,0] /* assoc_list\00 */, "i8", ALLOC_NONE, 5316668);
allocate([64,51,48,0] /* @30\00 */, "i8", ALLOC_NONE, 5316680);
allocate([115,105,110,103,108,101,116,111,110,0] /* singleton\00 */, "i8", ALLOC_NONE, 5316684);
allocate([111,112,116,95,102,95,98,108,111,99,107,95,97,114,103,0] /* opt_f_block_arg\00 */, "i8", ALLOC_NONE, 5316696);
allocate([99,108,97,115,115,95,118,97,114,105,97,98,108,101,95,100,101,102,105,110,101,100,63,0] /* class_variable_defin */, "i8", ALLOC_NONE, 5316712);
allocate([102,95,98,108,111,99,107,95,97,114,103,0] /* f_block_arg\00 */, "i8", ALLOC_NONE, 5316736);
allocate([124,83,0] /* |S\00 */, "i8", ALLOC_NONE, 5316748);
allocate([98,108,107,97,114,103,95,109,97,114,107,0] /* blkarg_mark\00 */, "i8", ALLOC_NONE, 5316752);
allocate([102,95,114,101,115,116,95,97,114,103,0] /* f_rest_arg\00 */, "i8", ALLOC_NONE, 5316764);
allocate([114,101,115,116,97,114,103,95,109,97,114,107,0] /* restarg_mark\00 */, "i8", ALLOC_NONE, 5316776);
allocate([102,95,111,112,116,97,114,103,0] /* f_optarg\00 */, "i8", ALLOC_NONE, 5316792);
allocate([102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,103,108,111,98,97,108,32,118,97,114,105,97,98,108,101,0] /* formal argument cann */, "i8", ALLOC_NONE, 5316804);
allocate([85,84,67,32,0] /* UTC \00 */, "i8", ALLOC_NONE, 5316848);
allocate([111,98,106,101,99,116,95,105,100,0] /* object_id\00 */, "i8", ALLOC_NONE, 5316856);
allocate([102,95,98,108,111,99,107,95,111,112,116,97,114,103,0] /* f_block_optarg\00 */, "i8", ALLOC_NONE, 5316868);
allocate([102,95,98,108,111,99,107,95,111,112,116,0] /* f_block_opt\00 */, "i8", ALLOC_NONE, 5316884);
allocate([117,112,99,97,115,101,33,0] /* upcase!\00 */, "i8", ALLOC_NONE, 5316896);
allocate([108,97,109,98,100,97,0] /* lambda\00 */, "i8", ALLOC_NONE, 5316904);
allocate([102,95,111,112,116,0] /* f_opt\00 */, "i8", ALLOC_NONE, 5316912);
allocate([102,95,97,114,103,0] /* f_arg\00 */, "i8", ALLOC_NONE, 5316920);
allocate([102,95,97,114,103,95,105,116,101,109,0] /* f_arg_item\00 */, "i8", ALLOC_NONE, 5316928);
allocate([115,117,112,101,114,99,108,97,115,115,0] /* superclass\00 */, "i8", ALLOC_NONE, 5316940);
allocate([102,95,110,111,114,109,95,97,114,103,0] /* f_norm_arg\00 */, "i8", ALLOC_NONE, 5316952);
allocate([91,46,46,46,93,0] /* [...]\00 */, "i8", ALLOC_NONE, 5316964);
allocate([102,95,98,97,100,95,97,114,103,0] /* f_bad_arg\00 */, "i8", ALLOC_NONE, 5316972);
allocate([117,110,105,110,105,116,105,97,108,105,122,101,100,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,37,115,32,105,110,32,37,115,0] /* uninitialized class  */, "i8", ALLOC_NONE, 5316984);
allocate([102,95,97,114,103,115,0] /* f_args\00 */, "i8", ALLOC_NONE, 5317024);
allocate([102,95,97,114,103,108,105,115,116,0] /* f_arglist\00 */, "i8", ALLOC_NONE, 5317032);
allocate([105,110,116,101,114,118,97,108,95,114,97,116,105,111,0] /* interval_ratio\00 */, "i8", ALLOC_NONE, 5317044);
allocate([64,50,57,0] /* @29\00 */, "i8", ALLOC_NONE, 5317060);
allocate([102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,0] /* formal argument cann */, "i8", ALLOC_NONE, 5317064);
allocate([37,115,32,37,115,32,37,48,50,100,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,32,37,115,37,100,0] /* %s %s %02d %02d:%02d */, "i8", ALLOC_NONE, 5317112);
allocate([98,0] /* b\00 */, "i8", ALLOC_NONE, 5317144);
allocate([110,97,110,0] /* nan\00 */, "i8", ALLOC_NONE, 5317148);
allocate([98,97,99,107,114,101,102,0] /* backref\00 */, "i8", ALLOC_NONE, 5317152);
allocate([117,112,99,97,115,101,0] /* upcase\00 */, "i8", ALLOC_NONE, 5317160);
allocate([118,97,114,95,114,101,102,0] /* var_ref\00 */, "i8", ALLOC_NONE, 5317168);
allocate([118,97,114,95,108,104,115,0] /* var_lhs\00 */, "i8", ALLOC_NONE, 5317176);
allocate([118,97,114,105,97,98,108,101,0] /* variable\00 */, "i8", ALLOC_NONE, 5317184);
allocate([109,101,116,104,111,100,95,109,105,115,115,105,110,103,0] /* method_missing\00 */, "i8", ALLOC_NONE, 5317196);
allocate([110,117,109,101,114,105,99,0] /* numeric\00 */, "i8", ALLOC_NONE, 5317212);
allocate([115,121,109,0] /* sym\00 */, "i8", ALLOC_NONE, 5317220);
allocate([98,97,115,105,99,95,115,121,109,98,111,108,0] /* basic_symbol\00 */, "i8", ALLOC_NONE, 5317224);
allocate([115,121,109,98,111,108,0] /* symbol\00 */, "i8", ALLOC_NONE, 5317240);
allocate([114,101,103,101,120,112,0] /* regexp\00 */, "i8", ALLOC_NONE, 5317248);
allocate([102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,99,111,110,115,116,97,110,116,0] /* formal argument cann */, "i8", ALLOC_NONE, 5317256);
allocate([76,79,67,65,76,0] /* LOCAL\00 */, "i8", ALLOC_NONE, 5317296);
allocate([99,97,110,39,116,32,99,111,110,118,101,114,116,32,37,115,32,105,110,116,111,32,37,115,0] /* can't convert %s int */, "i8", ALLOC_NONE, 5317304);
allocate([105,110,102,0] /* inf\00 */, "i8", ALLOC_NONE, 5317332);
allocate([109,101,116,104,111,100,115,0] /* methods\00 */, "i8", ALLOC_NONE, 5317336);
allocate([64,50,56,0] /* @28\00 */, "i8", ALLOC_NONE, 5317344);
allocate([64,50,55,0] /* @27\00 */, "i8", ALLOC_NONE, 5317348);
allocate([115,116,114,105,110,103,95,105,110,116,101,114,112,0] /* string_interp\00 */, "i8", ALLOC_NONE, 5317352);
allocate([115,116,114,105,110,103,0] /* string\00 */, "i8", ALLOC_NONE, 5317368);
allocate([108,105,116,101,114,97,108,0] /* literal\00 */, "i8", ALLOC_NONE, 5317376);
allocate([33,0] /* !\00 */, "i8", ALLOC_NONE, 5317384);
allocate([111,112,116,95,101,110,115,117,114,101,0] /* opt_ensure\00 */, "i8", ALLOC_NONE, 5317388);
allocate([101,120,99,95,118,97,114,0] /* exc_var\00 */, "i8", ALLOC_NONE, 5317400);
allocate([101,120,99,95,108,105,115,116,0] /* exc_list\00 */, "i8", ALLOC_NONE, 5317408);
allocate([111,112,116,95,114,101,115,99,117,101,0] /* opt_rescue\00 */, "i8", ALLOC_NONE, 5317420);
allocate([99,97,115,101,115,0] /* cases\00 */, "i8", ALLOC_NONE, 5317432);
allocate([116,111,95,115,121,109,0] /* to_sym\00 */, "i8", ALLOC_NONE, 5317440);
allocate([85,84,67,0] /* UTC\00 */, "i8", ALLOC_NONE, 5317448);
allocate([77,97,116,99,104,68,97,116,97,0] /* MatchData\00 */, "i8", ALLOC_NONE, 5317452);
allocate([107,105,110,100,95,111,102,63,0] /* kind_of?\00 */, "i8", ALLOC_NONE, 5317464);
allocate([99,97,115,101,95,98,111,100,121,0] /* case_body\00 */, "i8", ALLOC_NONE, 5317476);
allocate([64,50,54,0] /* @26\00 */, "i8", ALLOC_NONE, 5317488);
allocate([64,50,53,0] /* @25\00 */, "i8", ALLOC_NONE, 5317492);
allocate([98,114,97,99,101,95,98,108,111,99,107,0] /* brace_block\00 */, "i8", ALLOC_NONE, 5317496);
allocate([109,101,116,104,111,100,95,99,97,108,108,0] /* method_call\00 */, "i8", ALLOC_NONE, 5317508);
allocate([98,108,111,99,107,95,99,97,108,108,0] /* block_call\00 */, "i8", ALLOC_NONE, 5317520);
allocate([64,50,52,0] /* @24\00 */, "i8", ALLOC_NONE, 5317532);
allocate([100,111,95,98,108,111,99,107,0] /* do_block\00 */, "i8", ALLOC_NONE, 5317536);
allocate([108,97,109,98,100,97,95,98,111,100,121,0] /* lambda_body\00 */, "i8", ALLOC_NONE, 5317548);
allocate([115,117,112,101,114,99,108,97,115,115,32,109,105,115,109,97,116,99,104,32,102,111,114,32,99,108,97,115,115,32,37,115,0] /* superclass mismatch  */, "i8", ALLOC_NONE, 5317560);
allocate([102,95,108,97,114,103,108,105,115,116,0] /* f_larglist\00 */, "i8", ALLOC_NONE, 5317596);
allocate([40,110,117,108,108,41,0] /* (null)\00 */, "i8", ALLOC_NONE, 5317608);
allocate([110,111,110,101,0] /* none\00 */, "i8", ALLOC_NONE, 5317616);
allocate([68,97,116,97,0] /* Data\00 */, "i8", ALLOC_NONE, 5317624);
allocate([124,105,0] /* |i\00 */, "i8", ALLOC_NONE, 5317632);
allocate([105,115,95,97,63,0] /* is_a?\00 */, "i8", ALLOC_NONE, 5317636);
allocate([98,118,97,114,0] /* bvar\00 */, "i8", ALLOC_NONE, 5317644);
allocate([98,118,95,100,101,99,108,115,0] /* bv_decls\00 */, "i8", ALLOC_NONE, 5317652);
allocate([111,112,116,95,98,118,95,100,101,99,108,0] /* opt_bv_decl\00 */, "i8", ALLOC_NONE, 5317664);
allocate([98,108,111,99,107,95,112,97,114,97,109,95,100,101,102,0] /* block_param_def\00 */, "i8", ALLOC_NONE, 5317676);
allocate([111,112,116,95,98,108,111,99,107,95,112,97,114,97,109,0] /* opt_block_param\00 */, "i8", ALLOC_NONE, 5317692);
allocate([98,108,111,99,107,95,112,97,114,97,109,0] /* block_param\00 */, "i8", ALLOC_NONE, 5317708);
allocate([102,95,109,97,114,103,115,0] /* f_margs\00 */, "i8", ALLOC_NONE, 5317720);
allocate([65,0] /* A\00 */, "i8", ALLOC_NONE, 5317728);
allocate([102,95,109,97,114,103,95,108,105,115,116,0] /* f_marg_list\00 */, "i8", ALLOC_NONE, 5317732);
allocate([102,95,109,97,114,103,0] /* f_marg\00 */, "i8", ALLOC_NONE, 5317744);
allocate([102,111,114,95,118,97,114,0] /* for_var\00 */, "i8", ALLOC_NONE, 5317752);
allocate([78,111,116,32,97,32,118,97,108,105,100,32,116,105,109,101,46,0] /* Not a valid time.\00 */, "i8", ALLOC_NONE, 5317760);
allocate([116,111,95,104,97,115,104,0] /* to_hash\00 */, "i8", ALLOC_NONE, 5317780);
allocate([70,105,108,101,0] /* File\00 */, "i8", ALLOC_NONE, 5317788);
allocate([110,32,62,61,32,48,0] /* n _= 0\00 */, "i8", ALLOC_NONE, 5317796);
allocate([105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,115,0] /* instance_variables\0 */, "i8", ALLOC_NONE, 5317804);
allocate([111,112,116,95,101,108,115,101,0] /* opt_else\00 */, "i8", ALLOC_NONE, 5317824);
allocate([105,102,95,116,97,105,108,0] /* if_tail\00 */, "i8", ALLOC_NONE, 5317836);
allocate([115,112,108,105,116,0] /* split\00 */, "i8", ALLOC_NONE, 5317844);
allocate([112,114,105,109,97,114,121,95,118,97,108,117,101,0] /* primary_value\00 */, "i8", ALLOC_NONE, 5317852);
allocate([64,50,51,0] /* @23\00 */, "i8", ALLOC_NONE, 5317868);
allocate([64,50,50,0] /* @22\00 */, "i8", ALLOC_NONE, 5317872);
allocate([64,50,49,0] /* @21\00 */, "i8", ALLOC_NONE, 5317876);
allocate([117,110,115,104,105,102,116,0] /* unshift\00 */, "i8", ALLOC_NONE, 5317880);
allocate([64,50,48,0] /* @20\00 */, "i8", ALLOC_NONE, 5317888);
allocate([64,49,57,0] /* @19\00 */, "i8", ALLOC_NONE, 5317892);
allocate([64,49,56,0] /* @18\00 */, "i8", ALLOC_NONE, 5317896);
allocate([64,49,55,0] /* @17\00 */, "i8", ALLOC_NONE, 5317900);
allocate([98,108,111,99,107,32,103,105,118,101,110,32,116,111,32,121,105,101,108,100,0] /* block given to yield */, "i8", ALLOC_NONE, 5317904);
allocate([72,97,115,104,0] /* Hash\00 */, "i8", ALLOC_NONE, 5317928);
allocate([115,114,99,47,110,117,109,101,114,105,99,46,99,0] /* src/numeric.c\00 */, "i8", ALLOC_NONE, 5317936);
allocate([105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,115,101,116,0] /* instance_variable_se */, "i8", ALLOC_NONE, 5317952);
allocate([64,49,54,0] /* @16\00 */, "i8", ALLOC_NONE, 5317976);
allocate([64,49,53,0] /* @15\00 */, "i8", ALLOC_NONE, 5317980);
allocate([64,49,52,0] /* @14\00 */, "i8", ALLOC_NONE, 5317984);
allocate([64,49,51,0] /* @13\00 */, "i8", ALLOC_NONE, 5317988);
allocate([64,49,50,0] /* @12\00 */, "i8", ALLOC_NONE, 5317992);
allocate([64,49,49,0] /* @11\00 */, "i8", ALLOC_NONE, 5317996);
allocate([115,108,105,99,101,0] /* slice\00 */, "i8", ALLOC_NONE, 5318000);
allocate([64,49,48,0] /* @10\00 */, "i8", ALLOC_NONE, 5318008);
allocate([64,57,0] /* @9\00 */, "i8", ALLOC_NONE, 5318012);
allocate([64,56,0] /* @8\00 */, "i8", ALLOC_NONE, 5318016);
allocate([64,55,0] /* @7\00 */, "i8", ALLOC_NONE, 5318020);
allocate([109,111,100,117,108,101,32,100,101,102,105,110,105,116,105,111,110,32,105,110,32,109,101,116,104,111,100,32,98,111,100,121,0] /* module definition in */, "i8", ALLOC_NONE, 5318024);
allocate([124,105,105,105,105,105,105,105,0] /* |iiiiiii\00 */, "i8", ALLOC_NONE, 5318060);
allocate([111,110,101,32,104,97,115,104,32,114,101,113,117,105,114,101,100,0] /* one hash required\00 */, "i8", ALLOC_NONE, 5318072);
allocate([82,101,103,101,120,112,0] /* Regexp\00 */, "i8", ALLOC_NONE, 5318092);
allocate([37,46,55,103,0] /* %.7g\00 */, "i8", ALLOC_NONE, 5318100);
allocate([105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,103,101,116,0] /* instance_variable_ge */, "i8", ALLOC_NONE, 5318108);
allocate([111,42,0] /* o_\00 */, "i8", ALLOC_NONE, 5318132);
allocate([112,114,105,109,97,114,121,0] /* primary\00 */, "i8", ALLOC_NONE, 5318136);
allocate([109,114,104,115,0] /* mrhs\00 */, "i8", ALLOC_NONE, 5318144);
allocate([97,114,103,115,0] /* args\00 */, "i8", ALLOC_NONE, 5318152);
allocate([111,112,116,95,98,108,111,99,107,95,97,114,103,0] /* opt_block_arg\00 */, "i8", ALLOC_NONE, 5318160);
allocate([98,108,111,99,107,95,97,114,103,0] /* block_arg\00 */, "i8", ALLOC_NONE, 5318176);
allocate([64,54,0] /* @6\00 */, "i8", ALLOC_NONE, 5318188);
allocate([99,111,109,109,97,110,100,95,97,114,103,115,0] /* command_args\00 */, "i8", ALLOC_NONE, 5318192);
allocate([99,97,108,108,95,97,114,103,115,0] /* call_args\00 */, "i8", ALLOC_NONE, 5318208);
allocate([111,112,116,95,99,97,108,108,95,97,114,103,115,0] /* opt_call_args\00 */, "i8", ALLOC_NONE, 5318220);
allocate([111,112,116,95,112,97,114,101,110,95,97,114,103,115,0] /* opt_paren_args\00 */, "i8", ALLOC_NONE, 5318236);
allocate([99,108,97,115,115,32,100,101,102,105,110,105,116,105,111,110,32,105,110,32,109,101,116,104,111,100,32,98,111,100,121,0] /* class definition in  */, "i8", ALLOC_NONE, 5318252);
allocate([119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,99,108,97,115,115,0] /* wrong argument class */, "i8", ALLOC_NONE, 5318284);
allocate([105,110,118,97,108,105,100,32,114,97,100,105,120,32,37,100,0] /* invalid radix %d\00 */, "i8", ALLOC_NONE, 5318308);
allocate([105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,100,101,102,105,110,101,100,63,0] /* instance_variable_de */, "i8", ALLOC_NONE, 5318328);
allocate([125,0] /* }\00 */, "i8", ALLOC_NONE, 5318356);
allocate([112,97,114,101,110,95,97,114,103,115,0] /* paren_args\00 */, "i8", ALLOC_NONE, 5318360);
allocate([97,114,101,102,95,97,114,103,115,0] /* aref_args\00 */, "i8", ALLOC_NONE, 5318372);
allocate([97,114,103,95,118,97,108,117,101,0] /* arg_value\00 */, "i8", ALLOC_NONE, 5318384);
allocate([97,114,103,0] /* arg\00 */, "i8", ALLOC_NONE, 5318396);
allocate([114,101,115,119,111,114,100,115,0] /* reswords\00 */, "i8", ALLOC_NONE, 5318400);
allocate([66,97,115,105,99,79,98,106,101,99,116,0] /* BasicObject\00 */, "i8", ALLOC_NONE, 5318412);
allocate([111,112,0] /* op\00 */, "i8", ALLOC_NONE, 5318424);
allocate([71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,110,32,105,110,116,101,103,101,114,33,0] /* Given argument is no */, "i8", ALLOC_NONE, 5318428);
allocate([64,53,0] /* @5\00 */, "i8", ALLOC_NONE, 5318464);
allocate([108,111,99,97,108,0] /* local\00 */, "i8", ALLOC_NONE, 5318468);
allocate([117,110,100,101,102,95,108,105,115,116,0] /* undef_list\00 */, "i8", ALLOC_NONE, 5318476);
allocate([115,116,114,117,99,116,32,115,105,122,101,32,100,105,102,102,101,114,115,32,40,37,108,100,32,114,101,113,117,105,114,101,100,32,37,108,100,32,103,105,118,101,110,41,0] /* struct size differs  */, "i8", ALLOC_NONE, 5318488);
allocate([102,108,97,103,32,97,102,116,101,114,32,119,105,100,116,104,0] /* flag after width\00 */, "i8", ALLOC_NONE, 5318536);
allocate([102,115,121,109,0] /* fsym\00 */, "i8", ALLOC_NONE, 5318556);
allocate([94,0] /* ^\00 */, "i8", ALLOC_NONE, 5318564);
allocate([102,110,97,109,101,0] /* fname\00 */, "i8", ALLOC_NONE, 5318568);
allocate([46,37,100,0] /* .%d\00 */, "i8", ALLOC_NONE, 5318576);
allocate([83,116,114,105,110,103,0] /* String\00 */, "i8", ALLOC_NONE, 5318580);
allocate([115,105,110,0] /* sin\00 */, "i8", ALLOC_NONE, 5318588);
allocate([105,110,102,105,110,105,116,101,63,0] /* infinite?\00 */, "i8", ALLOC_NONE, 5318592);
allocate([105,110,115,116,97,110,99,101,95,111,102,63,0] /* instance_of?\00 */, "i8", ALLOC_NONE, 5318604);
allocate([61,62,0] /* =_\00 */, "i8", ALLOC_NONE, 5318620);
allocate([99,112,97,116,104,0] /* cpath\00 */, "i8", ALLOC_NONE, 5318624);
allocate([99,97,110,39,116,32,99,108,111,110,101,32,37,115,0] /* can't clone %s\00 */, "i8", ALLOC_NONE, 5318632);
allocate([99,110,97,109,101,0] /* cname\00 */, "i8", ALLOC_NONE, 5318648);
allocate([108,104,115,0] /* lhs\00 */, "i8", ALLOC_NONE, 5318656);
allocate([109,108,104,115,95,110,111,100,101,0] /* mlhs_node\00 */, "i8", ALLOC_NONE, 5318660);
allocate([109,108,104,115,95,112,111,115,116,0] /* mlhs_post\00 */, "i8", ALLOC_NONE, 5318672);
allocate([99,111,110,115,116,97,110,116,32,37,115,32,110,111,116,32,100,101,102,105,110,101,100,0] /* constant %s not defi */, "i8", ALLOC_NONE, 5318684);
allocate([109,108,104,115,95,108,105,115,116,0] /* mlhs_list\00 */, "i8", ALLOC_NONE, 5318708);
allocate([114,105,110,100,101,120,0] /* rindex\00 */, "i8", ALLOC_NONE, 5318720);
allocate([109,108,104,115,95,105,116,101,109,0] /* mlhs_item\00 */, "i8", ALLOC_NONE, 5318728);
allocate([109,108,104,115,95,98,97,115,105,99,0] /* mlhs_basic\00 */, "i8", ALLOC_NONE, 5318740);
allocate([109,108,104,115,95,105,110,110,101,114,0] /* mlhs_inner\00 */, "i8", ALLOC_NONE, 5318752);
allocate([109,108,104,115,0] /* mlhs\00 */, "i8", ALLOC_NONE, 5318764);
allocate([67,97,110,110,111,116,32,103,101,116,32,104,97,110,100,108,101,32,118,97,108,117,101,33,0] /* Cannot get handle va */, "i8", ALLOC_NONE, 5318772);
allocate([96,37,115,39,32,105,115,32,110,111,116,32,97,32,115,116,114,117,99,116,32,109,101,109,98,101,114,0] /* `%s' is not a struct */, "i8", ALLOC_NONE, 5318800);
allocate([37,100,0] /* %d\00 */, "i8", ALLOC_NONE, 5318828);
allocate([102,105,110,105,116,101,63,0] /* finite?\00 */, "i8", ALLOC_NONE, 5318832);
allocate([105,110,115,116,97,110,99,101,95,101,118,97,108,0] /* instance_eval\00 */, "i8", ALLOC_NONE, 5318840);
allocate([99,111,109,109,97,110,100,0] /* command\00 */, "i8", ALLOC_NONE, 5318856);
allocate([64,52,0] /* @4\00 */, "i8", ALLOC_NONE, 5318864);
allocate([99,109,100,95,98,114,97,99,101,95,98,108,111,99,107,0] /* cmd_brace_block\00 */, "i8", ALLOC_NONE, 5318868);
allocate([98,108,111,99,107,95,99,111,109,109,97,110,100,0] /* block_command\00 */, "i8", ALLOC_NONE, 5318884);
allocate([99,111,109,109,97,110,100,95,99,97,108,108,0] /* command_call\00 */, "i8", ALLOC_NONE, 5318900);
allocate([101,120,112,114,95,118,97,108,117,101,0] /* expr_value\00 */, "i8", ALLOC_NONE, 5318916);
allocate([114,101,118,101,114,115,101,33,0] /* reverse!\00 */, "i8", ALLOC_NONE, 5318928);
allocate([101,120,112,114,0] /* expr\00 */, "i8", ALLOC_NONE, 5318940);
allocate([99,111,109,109,97,110,100,95,97,115,103,110,0] /* command_asgn\00 */, "i8", ALLOC_NONE, 5318948);
allocate([64,51,0] /* @3\00 */, "i8", ALLOC_NONE, 5318964);
allocate([100,105,115,97,98,108,101,0] /* disable\00 */, "i8", ALLOC_NONE, 5318968);
allocate([115,116,109,116,0] /* stmt\00 */, "i8", ALLOC_NONE, 5318976);
allocate([82,79,79,84,95,79,66,74,69,67,84,0] /* ROOT_OBJECT\00 */, "i8", ALLOC_NONE, 5318984);
allocate([105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0] /* initialize_copy\00 */, "i8", ALLOC_NONE, 5318996);
allocate([114,101,100,101,102,105,110,105,110,103,32,99,111,110,115,116,97,110,116,32,83,116,114,117,99,116,58,58,37,115,0] /* redefining constant  */, "i8", ALLOC_NONE, 5319012);
allocate([65,114,114,97,121,0] /* Array\00 */, "i8", ALLOC_NONE, 5319044);
allocate([123,0] /* {\00 */, "i8", ALLOC_NONE, 5319052);
allocate([115,116,109,116,115,0] /* stmts\00 */, "i8", ALLOC_NONE, 5319056);
allocate([99,111,109,112,115,116,109,116,0] /* compstmt\00 */, "i8", ALLOC_NONE, 5319064);
allocate([98,111,100,121,115,116,109,116,0] /* bodystmt\00 */, "i8", ALLOC_NONE, 5319076);
allocate([64,50,0] /* @2\00 */, "i8", ALLOC_NONE, 5319088);
allocate([98,117,103,58,32,0] /* bug: \00 */, "i8", ALLOC_NONE, 5319092);
allocate([116,111,112,95,115,116,109,116,0] /* top_stmt\00 */, "i8", ALLOC_NONE, 5319100);
allocate([99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,37,115,32,110,111,116,32,100,101,102,105,110,101,100,32,102,111,114,32,37,115,0] /* class variable %s no */, "i8", ALLOC_NONE, 5319112);
allocate([116,111,112,95,115,116,109,116,115,0] /* top_stmts\00 */, "i8", ALLOC_NONE, 5319152);
allocate([114,101,118,101,114,115,101,0] /* reverse\00 */, "i8", ALLOC_NONE, 5319164);
allocate([116,111,112,95,99,111,109,112,115,116,109,116,0] /* top_compstmt\00 */, "i8", ALLOC_NONE, 5319172);
allocate([64,49,0] /* @1\00 */, "i8", ALLOC_NONE, 5319188);
allocate([112,114,111,103,114,97,109,0] /* program\00 */, "i8", ALLOC_NONE, 5319192);
allocate([36,97,99,99,101,112,116,0] /* $accept\00 */, "i8", ALLOC_NONE, 5319200);
allocate([109,114,117,98,121,95,106,115,95,111,98,106,101,99,116,95,104,97,110,100,108,101,0] /* mruby_js_object_hand */, "i8", ALLOC_NONE, 5319208);
allocate([105,100,101,110,116,105,102,105,101,114,32,37,115,32,110,101,101,100,115,32,116,111,32,98,101,32,99,111,110,115,116,97,110,116,0] /* identifier %s needs  */, "i8", ALLOC_NONE, 5319232);
allocate([37,42,115,0] /* %_s\00 */, "i8", ALLOC_NONE, 5319268);
allocate([80,114,111,99,0] /* Proc\00 */, "i8", ALLOC_NONE, 5319272);
allocate([100,105,118,109,111,100,0] /* divmod\00 */, "i8", ALLOC_NONE, 5319280);
allocate([39,92,110,39,0] /* '\5Cn'\00 */, "i8", ALLOC_NONE, 5319288);
allocate([39,59,39,0] /* ';'\00 */, "i8", ALLOC_NONE, 5319296);
allocate([39,93,39,0] /* ']'\00 */, "i8", ALLOC_NONE, 5319300);
allocate([39,41,39,0] /* ')'\00 */, "i8", ALLOC_NONE, 5319304);
allocate([39,40,39,0] /* '('\00 */, "i8", ALLOC_NONE, 5319308);
allocate([99,97,110,110,111,116,32,114,101,109,111,118,101,32,37,115,32,102,111,114,32,37,115,0] /* cannot remove %s for */, "i8", ALLOC_NONE, 5319312);
allocate([39,44,39,0] /* ','\00 */, "i8", ALLOC_NONE, 5319336);
allocate([39,46,39,0] /* '.'\00 */, "i8", ALLOC_NONE, 5319340);
allocate([39,91,39,0] /* '['\00 */, "i8", ALLOC_NONE, 5319344);
allocate([39,125,39,0] /* '}'\00 */, "i8", ALLOC_NONE, 5319348);
allocate([39,123,39,0] /* '{'\00 */, "i8", ALLOC_NONE, 5319352);
allocate([104,97,110,100,108,101,0] /* handle\00 */, "i8", ALLOC_NONE, 5319356);
allocate([122,111,110,101,0] /* zone\00 */, "i8", ALLOC_NONE, 5319364);
allocate([98,114,111,107,101,110,32,109,101,109,98,101,114,115,0] /* broken members\00 */, "i8", ALLOC_NONE, 5319372);
allocate([73,110,102,0] /* Inf\00 */, "i8", ALLOC_NONE, 5319388);
allocate([83,67,108,97,115,115,0] /* SClass\00 */, "i8", ALLOC_NONE, 5319392);
allocate([116,76,65,83,84,95,84,79,75,69,78,0] /* tLAST_TOKEN\00 */, "i8", ALLOC_NONE, 5319400);
allocate([116,114,117,110,99,97,116,101,0] /* truncate\00 */, "i8", ALLOC_NONE, 5319412);
allocate([123,125,0] /* {}\00 */, "i8", ALLOC_NONE, 5319424);
allocate([105,100,95,99,111,114,101,95,115,101,116,95,112,111,115,116,101,120,101,0] /* id_core_set_postexe\ */, "i8", ALLOC_NONE, 5319428);
allocate([105,100,95,99,111,114,101,95,100,101,102,105,110,101,95,115,105,110,103,108,101,116,111,110,95,109,101,116,104,111,100,0] /* id_core_define_singl */, "i8", ALLOC_NONE, 5319448);
allocate([105,100,95,99,111,114,101,95,100,101,102,105,110,101,95,109,101,116,104,111,100,0] /* id_core_define_metho */, "i8", ALLOC_NONE, 5319480);
allocate([105,100,95,99,111,114,101,95,117,110,100,101,102,95,109,101,116,104,111,100,0] /* id_core_undef_method */, "i8", ALLOC_NONE, 5319504);
allocate([105,100,95,99,111,114,101,95,115,101,116,95,118,97,114,105,97,98,108,101,95,97,108,105,97,115,0] /* id_core_set_variable */, "i8", ALLOC_NONE, 5319528);
allocate([112,117,115,104,0] /* push\00 */, "i8", ALLOC_NONE, 5319556);
allocate([105,100,95,99,111,114,101,95,115,101,116,95,109,101,116,104,111,100,95,97,108,105,97,115,0] /* id_core_set_method_a */, "i8", ALLOC_NONE, 5319564);
allocate([105,100,67,70,85,78,67,0] /* idCFUNC\00 */, "i8", ALLOC_NONE, 5319592);
allocate([105,100,73,70,85,78,67,0] /* idIFUNC\00 */, "i8", ALLOC_NONE, 5319600);
allocate([115,117,112,101,114,99,108,97,115,115,32,109,117,115,116,32,98,101,32,97,32,67,108,97,115,115,32,40,37,115,32,103,105,118,101,110,41,0] /* superclass must be a */, "i8", ALLOC_NONE, 5319608);
allocate([105,100,82,101,115,112,111,110,100,95,116,111,0] /* idRespond_to\00 */, "i8", ALLOC_NONE, 5319648);
allocate([67,97,110,110,111,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,33,0] /* Cannot allocate memo */, "i8", ALLOC_NONE, 5319664);
allocate([121,101,97,114,0] /* year\00 */, "i8", ALLOC_NONE, 5319688);
allocate([115,116,114,117,99,116,32,115,105,122,101,32,100,105,102,102,101,114,115,0] /* struct size differs\ */, "i8", ALLOC_NONE, 5319696);
allocate([78,97,78,0] /* NaN\00 */, "i8", ALLOC_NONE, 5319716);
allocate([105,67,108,97,115,115,0] /* iClass\00 */, "i8", ALLOC_NONE, 5319720);
allocate([101,120,116,101,110,100,0] /* extend\00 */, "i8", ALLOC_NONE, 5319728);
allocate([105,100,78,85,76,76,0] /* idNULL\00 */, "i8", ALLOC_NONE, 5319736);
allocate([39,126,39,0] /* '~'\00 */, "i8", ALLOC_NONE, 5319744);
allocate([39,33,39,0] /* '!'\00 */, "i8", ALLOC_NONE, 5319748);
allocate([116,85,77,73,78,85,83,95,78,85,77,0] /* tUMINUS_NUM\00 */, "i8", ALLOC_NONE, 5319752);
allocate([39,37,39,0] /* '%'\00 */, "i8", ALLOC_NONE, 5319764);
allocate([39,47,39,0] /* '/'\00 */, "i8", ALLOC_NONE, 5319768);
allocate([112,111,112,0] /* pop\00 */, "i8", ALLOC_NONE, 5319772);
allocate([39,42,39,0] /* '_'\00 */, "i8", ALLOC_NONE, 5319776);
allocate([39,45,39,0] /* '-'\00 */, "i8", ALLOC_NONE, 5319780);
allocate([39,43,39,0] /* '+'\00 */, "i8", ALLOC_NONE, 5319784);
allocate([39,38,39,0] /* '&'\00 */, "i8", ALLOC_NONE, 5319788);
allocate([82,117,110,116,105,109,101,69,114,114,111,114,0] /* RuntimeError\00 */, "i8", ALLOC_NONE, 5319792);
allocate([121,100,97,121,0] /* yday\00 */, "i8", ALLOC_NONE, 5319808);
allocate([67,108,97,115,115,0] /* Class\00 */, "i8", ALLOC_NONE, 5319816);
allocate([101,113,117,97,108,63,0] /* equal?\00 */, "i8", ALLOC_NONE, 5319824);
allocate([39,94,39,0] /* '^'\00 */, "i8", ALLOC_NONE, 5319832);
allocate([39,124,39,0] /* '|'\00 */, "i8", ALLOC_NONE, 5319836);
allocate([99,105,105,100,120,0] /* ciidx\00 */, "i8", ALLOC_NONE, 5319840);
allocate([39,60,39,0] /* '_'\00 */, "i8", ALLOC_NONE, 5319848);
allocate([39,62,39,0] /* '_'\00 */, "i8", ALLOC_NONE, 5319852);
allocate([39,58,39,0] /* ':'\00 */, "i8", ALLOC_NONE, 5319856);
allocate([39,63,39,0] /* '?'\00 */, "i8", ALLOC_NONE, 5319860);
allocate([39,61,39,0] /* '='\00 */, "i8", ALLOC_NONE, 5319864);
allocate([116,76,79,87,69,83,84,0] /* tLOWEST\00 */, "i8", ALLOC_NONE, 5319868);
allocate([116,76,65,77,66,69,71,0] /* tLAMBEG\00 */, "i8", ALLOC_NONE, 5319876);
allocate([116,83,84,82,73,78,71,95,68,86,65,82,0] /* tSTRING_DVAR\00 */, "i8", ALLOC_NONE, 5319884);
allocate([78,111,32,118,97,108,105,100,32,104,97,110,100,108,101,32,105,115,32,112,114,111,118,105,100,101,100,33,0] /* No valid handle is p */, "i8", ALLOC_NONE, 5319900);
allocate([119,100,97,121,0] /* wday\00 */, "i8", ALLOC_NONE, 5319932);
allocate([110,111,32,109,101,109,98,101,114,32,39,37,115,39,32,105,110,32,115,116,114,117,99,116,0] /* no member '%s' in st */, "i8", ALLOC_NONE, 5319940);
allocate([37,37,108,37,99,0] /* %%l%c\00 */, "i8", ALLOC_NONE, 5319968);
allocate([79,98,106,101,99,116,0] /* Object\00 */, "i8", ALLOC_NONE, 5319976);
allocate([116,83,84,82,73,78,71,95,66,69,71,0] /* tSTRING_BEG\00 */, "i8", ALLOC_NONE, 5319984);
allocate([116,81,87,79,82,68,83,95,66,69,71,0] /* tQWORDS_BEG\00 */, "i8", ALLOC_NONE, 5319996);
allocate([115,101,116,95,98,97,99,107,116,114,97,99,101,0] /* set_backtrace\00 */, "i8", ALLOC_NONE, 5320008);
allocate([116,87,79,82,68,83,95,66,69,71,0] /* tWORDS_BEG\00 */, "i8", ALLOC_NONE, 5320024);
allocate([116,82,69,71,69,88,80,95,66,69,71,0] /* tREGEXP_BEG\00 */, "i8", ALLOC_NONE, 5320036);
allocate([116,83,89,77,66,69,71,0] /* tSYMBEG\00 */, "i8", ALLOC_NONE, 5320048);
allocate([99,97,110,39,116,32,109,97,107,101,32,115,117,98,99,108,97,115,115,32,111,102,32,67,108,97,115,115,0] /* can't make subclass  */, "i8", ALLOC_NONE, 5320056);
allocate([116,76,65,77,66,68,65,0] /* tLAMBDA\00 */, "i8", ALLOC_NONE, 5320088);
allocate([116,65,77,80,69,82,0] /* tAMPER\00 */, "i8", ALLOC_NONE, 5320096);
allocate([116,83,84,65,82,0] /* tSTAR\00 */, "i8", ALLOC_NONE, 5320104);
allocate([116,76,66,82,65,67,69,95,65,82,71,0] /* tLBRACE_ARG\00 */, "i8", ALLOC_NONE, 5320112);
allocate([116,76,66,82,65,67,69,0] /* tLBRACE\00 */, "i8", ALLOC_NONE, 5320124);
allocate([105,0] /* i\00 */, "i8", ALLOC_NONE, 5320132);
allocate([117,116,99,63,0] /* utc?\00 */, "i8", ALLOC_NONE, 5320136);
allocate([99,97,108,108,0] /* call\00 */, "i8", ALLOC_NONE, 5320144);
allocate([48,66,0] /* 0B\00 */, "i8", ALLOC_NONE, 5320152);
allocate([77,111,100,117,108,101,0] /* Module\00 */, "i8", ALLOC_NONE, 5320156);
allocate([100,117,112,0] /* dup\00 */, "i8", ALLOC_NONE, 5320164);
allocate([118,97,108,117,101,115,0] /* values\00 */, "i8", ALLOC_NONE, 5320168);
allocate([116,76,66,82,65,67,75,0] /* tLBRACK\00 */, "i8", ALLOC_NONE, 5320176);
allocate([116,82,80,65,82,69,78,0] /* tRPAREN\00 */, "i8", ALLOC_NONE, 5320184);
allocate([116,76,80,65,82,69,78,95,65,82,71,0] /* tLPAREN_ARG\00 */, "i8", ALLOC_NONE, 5320192);
allocate([124,111,0] /* |o\00 */, "i8", ALLOC_NONE, 5320204);
allocate([116,76,80,65,82,69,78,0] /* tLPAREN\00 */, "i8", ALLOC_NONE, 5320208);
allocate([116,65,83,83,79,67,0] /* tASSOC\00 */, "i8", ALLOC_NONE, 5320216);
allocate([99,97,110,39,116,32,109,97,107,101,32,115,117,98,99,108,97,115,115,32,111,102,32,115,105,110,103,108,101,116,111,110,32,99,108,97,115,115,0] /* can't make subclass  */, "i8", ALLOC_NONE, 5320224);
allocate([116,79,80,95,65,83,71,78,0] /* tOP_ASGN\00 */, "i8", ALLOC_NONE, 5320264);
allocate([106,111,105,110,0] /* join\00 */, "i8", ALLOC_NONE, 5320276);
allocate([116,67,79,76,79,78,51,0] /* tCOLON3\00 */, "i8", ALLOC_NONE, 5320284);
allocate([116,67,79,76,79,78,50,0] /* tCOLON2\00 */, "i8", ALLOC_NONE, 5320292);
allocate([116,82,83,72,70,84,0] /* tRSHFT\00 */, "i8", ALLOC_NONE, 5320300);
allocate([116,76,83,72,70,84,0] /* tLSHFT\00 */, "i8", ALLOC_NONE, 5320308);
allocate([111,0] /* o\00 */, "i8", ALLOC_NONE, 5320316);
allocate([117,115,101,99,0] /* usec\00 */, "i8", ALLOC_NONE, 5320320);
allocate([42,38,0] /* _&\00 */, "i8", ALLOC_NONE, 5320328);
allocate([48,98,0] /* 0b\00 */, "i8", ALLOC_NONE, 5320332);
allocate([116,114,117,101,0] /* true\00 */, "i8", ALLOC_NONE, 5320336);
allocate([115,117,99,99,0] /* succ\00 */, "i8", ALLOC_NONE, 5320344);
allocate([99,108,111,110,101,0] /* clone\00 */, "i8", ALLOC_NONE, 5320352);
allocate([118,97,108,117,101,63,0] /* value?\00 */, "i8", ALLOC_NONE, 5320360);
allocate([116,65,83,69,84,0] /* tASET\00 */, "i8", ALLOC_NONE, 5320368);
allocate([116,65,82,69,70,0] /* tAREF\00 */, "i8", ALLOC_NONE, 5320376);
allocate([116,68,79,84,51,0] /* tDOT3\00 */, "i8", ALLOC_NONE, 5320384);
allocate([116,68,79,84,50,0] /* tDOT2\00 */, "i8", ALLOC_NONE, 5320392);
allocate([116,78,77,65,84,67,72,0] /* tNMATCH\00 */, "i8", ALLOC_NONE, 5320400);
allocate([35,60,67,108,97,115,115,58,37,112,62,0] /* #_Class:%p_\00 */, "i8", ALLOC_NONE, 5320408);
allocate([116,77,65,84,67,72,0] /* tMATCH\00 */, "i8", ALLOC_NONE, 5320420);
allocate([83,116,114,105,110,103,32,99,111,110,116,97,105,110,115,32,78,85,76,76,33,0] /* String contains NULL */, "i8", ALLOC_NONE, 5320428);
allocate([116,79,82,79,80,0] /* tOROP\00 */, "i8", ALLOC_NONE, 5320452);
allocate([103,109,0] /* gm\00 */, "i8", ALLOC_NONE, 5320460);
allocate([116,65,78,68,79,80,0] /* tANDOP\00 */, "i8", ALLOC_NONE, 5320464);
allocate([99,111,114,114,117,112,116,101,100,32,115,116,114,117,99,116,0] /* corrupted struct\00 */, "i8", ALLOC_NONE, 5320472);
allocate([109,97,108,102,111,114,109,101,100,32,102,111,114,109,97,116,32,115,116,114,105,110,103,32,45,32,37,37,37,99,0] /* malformed format str */, "i8", ALLOC_NONE, 5320492);
allocate([82,97,110,103,101,69,114,114,111,114,0] /* RangeError\00 */, "i8", ALLOC_NONE, 5320524);
allocate([116,76,69,81,0] /* tLEQ\00 */, "i8", ALLOC_NONE, 5320536);
allocate([116,71,69,81,0] /* tGEQ\00 */, "i8", ALLOC_NONE, 5320544);
allocate([38,0] /* &\00 */, "i8", ALLOC_NONE, 5320552);
allocate([111,111,0] /* oo\00 */, "i8", ALLOC_NONE, 5320556);
allocate([78,117,109,101,114,105,99,0] /* Numeric\00 */, "i8", ALLOC_NONE, 5320560);
allocate([116,111,95,102,0] /* to_f\00 */, "i8", ALLOC_NONE, 5320568);
allocate([48,88,0] /* 0X\00 */, "i8", ALLOC_NONE, 5320576);
allocate([102,97,108,115,101,0] /* false\00 */, "i8", ALLOC_NONE, 5320580);
allocate([84,79,76,69,82,65,78,67,69,0] /* TOLERANCE\00 */, "i8", ALLOC_NONE, 5320588);
allocate([114,111,117,110,100,0] /* round\00 */, "i8", ALLOC_NONE, 5320600);
allocate([99,108,97,115,115,0] /* class\00 */, "i8", ALLOC_NONE, 5320608);
allocate([115,116,111,114,101,0] /* store\00 */, "i8", ALLOC_NONE, 5320616);
allocate([116,78,69,81,0] /* tNEQ\00 */, "i8", ALLOC_NONE, 5320624);
allocate([116,69,81,81,0] /* tEQQ\00 */, "i8", ALLOC_NONE, 5320632);
allocate([100,111,119,110,99,97,115,101,33,0] /* downcase!\00 */, "i8", ALLOC_NONE, 5320640);
allocate([115,105,122,101,0] /* size\00 */, "i8", ALLOC_NONE, 5320652);
allocate([116,69,81,0] /* tEQ\00 */, "i8", ALLOC_NONE, 5320660);
allocate([41,0] /* )\00 */, "i8", ALLOC_NONE, 5320664);
allocate([116,67,77,80,0] /* tCMP\00 */, "i8", ALLOC_NONE, 5320668);
allocate([116,80,79,87,0] /* tPOW\00 */, "i8", ALLOC_NONE, 5320676);
allocate([58,58,0] /* ::\00 */, "i8", ALLOC_NONE, 5320684);
allocate([116,85,77,73,78,85,83,0] /* tUMINUS\00 */, "i8", ALLOC_NONE, 5320688);
allocate([105,110,100,101,120,0] /* index\00 */, "i8", ALLOC_NONE, 5320696);
allocate([116,85,80,76,85,83,0] /* tUPLUS\00 */, "i8", ALLOC_NONE, 5320704);
allocate([116,82,69,71,69,88,80,95,69,78,68,0] /* tREGEXP_END\00 */, "i8", ALLOC_NONE, 5320712);
allocate([116,66,65,67,75,95,82,69,70,0] /* tBACK_REF\00 */, "i8", ALLOC_NONE, 5320724);
allocate([116,78,84,72,95,82,69,70,0] /* tNTH_REF\00 */, "i8", ALLOC_NONE, 5320736);
allocate([112,97,114,101,110,116,95,111,98,106,101,99,116,0] /* parent_object\00 */, "i8", ALLOC_NONE, 5320748);
allocate([116,111,95,105,0] /* to_i\00 */, "i8", ALLOC_NONE, 5320764);
allocate([62,0] /* _\00 */, "i8", ALLOC_NONE, 5320772);
allocate([48,120,0] /* 0x\00 */, "i8", ALLOC_NONE, 5320776);
allocate([99,97,110,39,116,32,99,111,110,118,101,114,116,32,37,115,32,116,111,32,73,110,116,101,103,101,114,32,40,37,115,35,37,115,32,103,105,118,101,115,32,37,115,41,0] /* can't convert %s to  */, "i8", ALLOC_NONE, 5320780);
allocate([110,101,120,116,0] /* next\00 */, "i8", ALLOC_NONE, 5320828);
allocate([102,105,0] /* fi\00 */, "i8", ALLOC_NONE, 5320836);
allocate([95,95,115,101,110,100,95,95,0] /* __send__\00 */, "i8", ALLOC_NONE, 5320840);
allocate([116,83,84,82,73,78,71,95,80,65,82,84,0] /* tSTRING_PART\00 */, "i8", ALLOC_NONE, 5320852);
allocate([116,83,84,82,73,78,71,0] /* tSTRING\00 */, "i8", ALLOC_NONE, 5320868);
allocate([100,111,119,110,99,97,115,101,0] /* downcase\00 */, "i8", ALLOC_NONE, 5320876);
allocate([115,104,105,102,116,0] /* shift\00 */, "i8", ALLOC_NONE, 5320888);
allocate([116,82,69,71,69,88,80,0] /* tREGEXP\00 */, "i8", ALLOC_NONE, 5320896);
allocate([32,40,0] /*  (\00 */, "i8", ALLOC_NONE, 5320904);
allocate([116,67,72,65,82,0] /* tCHAR\00 */, "i8", ALLOC_NONE, 5320908);
allocate([116,70,76,79,65,84,0] /* tFLOAT\00 */, "i8", ALLOC_NONE, 5320916);
allocate([95,95,99,108,97,115,115,112,97,116,104,95,95,0] /* __classpath__\00 */, "i8", ALLOC_NONE, 5320924);
allocate([116,73,78,84,69,71,69,82,0] /* tINTEGER\00 */, "i8", ALLOC_NONE, 5320940);
allocate([116,76,65,66,69,76,0] /* tLABEL\00 */, "i8", ALLOC_NONE, 5320952);
allocate([116,67,86,65,82,0] /* tCVAR\00 */, "i8", ALLOC_NONE, 5320960);
allocate([116,67,79,78,83,84,65,78,84,0] /* tCONSTANT\00 */, "i8", ALLOC_NONE, 5320968);
allocate([45,60,37,115,58,37,112,0] /* -_%s:%p\00 */, "i8", ALLOC_NONE, 5320980);
allocate([101,110,97,98,108,101,0] /* enable\00 */, "i8", ALLOC_NONE, 5320988);
allocate([116,73,86,65,82,0] /* tIVAR\00 */, "i8", ALLOC_NONE, 5320996);
allocate([105,42,0] /* i_\00 */, "i8", ALLOC_NONE, 5321004);
allocate([115,101,99,0] /* sec\00 */, "i8", ALLOC_NONE, 5321008);
allocate([61,0] /* =\00 */, "i8", ALLOC_NONE, 5321012);
allocate([48,0] /* 0\00 */, "i8", ALLOC_NONE, 5321016);
allocate([104,97,115,104,0] /* hash\00 */, "i8", ALLOC_NONE, 5321020);
allocate([102,102,0] /* ff\00 */, "i8", ALLOC_NONE, 5321028);
allocate([95,95,105,100,95,95,0] /* __id__\00 */, "i8", ALLOC_NONE, 5321032);
allocate([116,71,86,65,82,0] /* tGVAR\00 */, "i8", ALLOC_NONE, 5321040);
allocate([116,70,73,68,0] /* tFID\00 */, "i8", ALLOC_NONE, 5321048);
allocate([99,104,111,112,33,0] /* chop!\00 */, "i8", ALLOC_NONE, 5321056);
allocate([114,101,112,108,97,99,101,0] /* replace\00 */, "i8", ALLOC_NONE, 5321064);
allocate([116,73,68,69,78,84,73,70,73,69,82,0] /* tIDENTIFIER\00 */, "i8", ALLOC_NONE, 5321072);
allocate([58,32,0] /* : \00 */, "i8", ALLOC_NONE, 5321084);
allocate([107,101,121,119,111,114,100,95,95,69,78,67,79,68,73,78,71,95,95,0] /* keyword__ENCODING__\ */, "i8", ALLOC_NONE, 5321088);
allocate([107,101,121,119,111,114,100,95,95,70,73,76,69,95,95,0] /* keyword__FILE__\00 */, "i8", ALLOC_NONE, 5321108);
allocate([119,97,114,110,105,110,103,58,32,0] /* warning: \00 */, "i8", ALLOC_NONE, 5321124);
allocate([107,101,121,119,111,114,100,95,95,76,73,78,69,95,95,0] /* keyword__LINE__\00 */, "i8", ALLOC_NONE, 5321136);
allocate([107,101,121,119,111,114,100,95,69,78,68,0] /* keyword_END\00 */, "i8", ALLOC_NONE, 5321152);
allocate([107,101,121,119,111,114,100,95,66,69,71,73,78,0] /* keyword_BEGIN\00 */, "i8", ALLOC_NONE, 5321164);
allocate([107,101,121,119,111,114,100,95,97,108,105,97,115,0] /* keyword_alias\00 */, "i8", ALLOC_NONE, 5321180);
allocate([109,111,100,105,102,105,101,114,95,114,101,115,99,117,101,0] /* modifier_rescue\00 */, "i8", ALLOC_NONE, 5321196);
allocate([60,61,0] /* _=\00 */, "i8", ALLOC_NONE, 5321212);
allocate([74,115,65,114,114,97,121,0] /* JsArray\00 */, "i8", ALLOC_NONE, 5321216);
allocate([109,111,110,116,104,0] /* month\00 */, "i8", ALLOC_NONE, 5321224);
allocate([32,0] /*  \00 */, "i8", ALLOC_NONE, 5321232);
allocate([105,110,118,97,108,105,100,32,109,98,115,116,114,105,110,103,32,115,101,113,117,101,110,99,101,0] /* invalid mbstring seq */, "i8", ALLOC_NONE, 5321236);
allocate([98,97,100,32,118,97,108,117,101,32,102,111,114,32,114,97,110,103,101,0] /* bad value for range\ */, "i8", ALLOC_NONE, 5321264);
allocate([102,108,111,111,114,0] /* floor\00 */, "i8", ALLOC_NONE, 5321284);
allocate([109,111,100,105,102,105,101,114,95,117,110,116,105,108,0] /* modifier_until\00 */, "i8", ALLOC_NONE, 5321292);
allocate([109,111,100,105,102,105,101,114,95,119,104,105,108,101,0] /* modifier_while\00 */, "i8", ALLOC_NONE, 5321308);
allocate([99,104,111,112,0] /* chop\00 */, "i8", ALLOC_NONE, 5321324);
allocate([109,111,100,105,102,105,101,114,95,117,110,108,101,115,115,0] /* modifier_unless\00 */, "i8", ALLOC_NONE, 5321332);
allocate([109,111,100,105,102,105,101,114,95,105,102,0] /* modifier_if\00 */, "i8", ALLOC_NONE, 5321348);
allocate([107,101,121,119,111,114,100,95,110,111,116,0] /* keyword_not\00 */, "i8", ALLOC_NONE, 5321360);
allocate([107,101,121,119,111,114,100,95,111,114,0] /* keyword_or\00 */, "i8", ALLOC_NONE, 5321372);
allocate([100,101,108,101,116,101,95,97,116,0] /* delete_at\00 */, "i8", ALLOC_NONE, 5321384);
allocate([107,101,121,119,111,114,100,95,97,110,100,0] /* keyword_and\00 */, "i8", ALLOC_NONE, 5321396);
allocate([107,101,121,119,111,114,100,95,102,97,108,115,101,0] /* keyword_false\00 */, "i8", ALLOC_NONE, 5321408);
allocate([107,101,121,119,111,114,100,95,116,114,117,101,0] /* keyword_true\00 */, "i8", ALLOC_NONE, 5321424);
allocate([107,101,121,119,111,114,100,95,110,105,108,0] /* keyword_nil\00 */, "i8", ALLOC_NONE, 5321440);
allocate([60,0] /* _\00 */, "i8", ALLOC_NONE, 5321452);
allocate([105,110,118,111,107,101,95,105,110,116,101,114,110,97,108,0] /* invoke_internal\00 */, "i8", ALLOC_NONE, 5321456);
allocate([109,111,110,0] /* mon\00 */, "i8", ALLOC_NONE, 5321472);
allocate([44,32,0] /* , \00 */, "i8", ALLOC_NONE, 5321476);
allocate([101,114,102,99,0] /* erfc\00 */, "i8", ALLOC_NONE, 5321480);
allocate([33,61,0] /* !=\00 */, "i8", ALLOC_NONE, 5321488);
allocate([107,101,121,119,111,114,100,95,115,101,108,102,0] /* keyword_self\00 */, "i8", ALLOC_NONE, 5321492);
allocate([107,101,121,119,111,114,100,95,115,117,112,101,114,0] /* keyword_super\00 */, "i8", ALLOC_NONE, 5321508);
allocate([105,100,50,110,97,109,101,0] /* id2name\00 */, "i8", ALLOC_NONE, 5321524);
allocate([99,104,111,109,112,33,0] /* chomp!\00 */, "i8", ALLOC_NONE, 5321532);
allocate([108,101,110,103,116,104,0] /* length\00 */, "i8", ALLOC_NONE, 5321540);
allocate([107,101,121,119,111,114,100,95,121,105,101,108,100,0] /* keyword_yield\00 */, "i8", ALLOC_NONE, 5321548);
allocate([108,105,110,101,0] /* line\00 */, "i8", ALLOC_NONE, 5321564);
allocate([107,101,121,119,111,114,100,95,114,101,116,117,114,110,0] /* keyword_return\00 */, "i8", ALLOC_NONE, 5321572);
allocate([107,101,121,119,111,114,100,95,100,111,95,76,65,77,66,68,65,0] /* keyword_do_LAMBDA\00 */, "i8", ALLOC_NONE, 5321588);
allocate([117,110,100,101,102,105,110,101,100,32,109,101,116,104,111,100,32,39,37,115,39,32,102,111,114,32,99,108,97,115,115,32,37,115,0] /* undefined method '%s */, "i8", ALLOC_NONE, 5321608);
allocate([107,101,121,119,111,114,100,95,100,111,95,98,108,111,99,107,0] /* keyword_do_block\00 */, "i8", ALLOC_NONE, 5321644);
allocate([99,111,110,99,97,116,0] /* concat\00 */, "i8", ALLOC_NONE, 5321664);
allocate([107,101,121,119,111,114,100,95,100,111,95,99,111,110,100,0] /* keyword_do_cond\00 */, "i8", ALLOC_NONE, 5321672);
allocate([107,101,121,119,111,114,100,95,100,111,0] /* keyword_do\00 */, "i8", ALLOC_NONE, 5321688);
allocate([107,101,121,119,111,114,100,95,105,110,0] /* keyword_in\00 */, "i8", ALLOC_NONE, 5321700);
allocate([107,101,121,119,111,114,100,95,114,101,116,114,121,0] /* keyword_retry\00 */, "i8", ALLOC_NONE, 5321712);
allocate([62,61,0] /* _=\00 */, "i8", ALLOC_NONE, 5321728);
allocate([74,115,70,117,110,99,116,105,111,110,0] /* JsFunction\00 */, "i8", ALLOC_NONE, 5321732);
allocate([109,105,110,0] /* min\00 */, "i8", ALLOC_NONE, 5321744);
allocate([37,99,32,114,101,113,117,105,114,101,115,32,97,32,99,104,97,114,97,99,116,101,114,0] /* %c requires a charac */, "i8", ALLOC_NONE, 5321748);
allocate([99,97,110,39,116,32,99,111,110,118,101,114,116,32,110,105,108,32,105,110,116,111,32,73,110,116,101,103,101,114,0] /* can't convert nil in */, "i8", ALLOC_NONE, 5321772);
allocate([99,101,105,108,0] /* ceil\00 */, "i8", ALLOC_NONE, 5321804);
allocate([101,114,102,0] /* erf\00 */, "i8", ALLOC_NONE, 5321812);
allocate([107,101,121,119,111,114,100,95,114,101,100,111,0] /* keyword_redo\00 */, "i8", ALLOC_NONE, 5321816);
allocate([107,101,121,119,111,114,100,95,110,101,120,116,0] /* keyword_next\00 */, "i8", ALLOC_NONE, 5321832);
allocate([99,104,111,109,112,0] /* chomp\00 */, "i8", ALLOC_NONE, 5321848);
allocate([107,101,121,115,0] /* keys\00 */, "i8", ALLOC_NONE, 5321856);
allocate([107,101,121,119,111,114,100,95,98,114,101,97,107,0] /* keyword_break\00 */, "i8", ALLOC_NONE, 5321864);
allocate([102,105,108,101,0] /* file\00 */, "i8", ALLOC_NONE, 5321880);
allocate([107,101,121,119,111,114,100,95,102,111,114,0] /* keyword_for\00 */, "i8", ALLOC_NONE, 5321888);
allocate([107,101,121,119,111,114,100,95,117,110,116,105,108,0] /* keyword_until\00 */, "i8", ALLOC_NONE, 5321900);
allocate([107,101,121,119,111,114,100,95,119,104,105,108,101,0] /* keyword_while\00 */, "i8", ALLOC_NONE, 5321916);
allocate([107,101,121,119,111,114,100,95,119,104,101,110,0] /* keyword_when\00 */, "i8", ALLOC_NONE, 5321932);
allocate([107,101,121,119,111,114,100,95,99,97,115,101,0] /* keyword_case\00 */, "i8", ALLOC_NONE, 5321948);
allocate([99,97,112,105,116,97,108,105,122,101,33,0] /* capitalize!\00 */, "i8", ALLOC_NONE, 5321964);
allocate([107,101,121,119,111,114,100,95,101,108,115,101,0] /* keyword_else\00 */, "i8", ALLOC_NONE, 5321976);
allocate([107,101,121,119,111,114,100,95,101,108,115,105,102,0] /* keyword_elsif\00 */, "i8", ALLOC_NONE, 5321992);
allocate([99,114,101,97,116,101,0] /* create\00 */, "i8", ALLOC_NONE, 5322008);
allocate([109,100,97,121,0] /* mday\00 */, "i8", ALLOC_NONE, 5322016);
allocate([35,60,115,116,114,117,99,116,32,0] /* #_struct \00 */, "i8", ALLOC_NONE, 5322024);
allocate([46,46,46,0] /* ...\00 */, "i8", ALLOC_NONE, 5322036);
allocate([62,62,0] /* __\00 */, "i8", ALLOC_NONE, 5322040);
allocate([104,121,112,111,116,0] /* hypot\00 */, "i8", ALLOC_NONE, 5322044);
allocate([115,105,110,103,108,101,116,111,110,95,99,108,97,115,115,0] /* singleton_class\00 */, "i8", ALLOC_NONE, 5322052);
allocate([107,101,121,119,111,114,100,95,116,104,101,110,0] /* keyword_then\00 */, "i8", ALLOC_NONE, 5322068);
allocate([107,101,121,119,111,114,100,95,117,110,108,101,115,115,0] /* keyword_unless\00 */, "i8", ALLOC_NONE, 5322084);
allocate([95,95,112,114,105,110,116,115,116,114,95,95,0] /* __printstr__\00 */, "i8", ALLOC_NONE, 5322100);
allocate([107,101,121,63,0] /* key?\00 */, "i8", ALLOC_NONE, 5322116);
allocate([107,101,121,119,111,114,100,95,105,102,0] /* keyword_if\00 */, "i8", ALLOC_NONE, 5322124);
allocate([109,101,115,103,0] /* mesg\00 */, "i8", ALLOC_NONE, 5322136);
allocate([107,101,121,119,111,114,100,95,101,110,100,0] /* keyword_end\00 */, "i8", ALLOC_NONE, 5322144);
allocate([107,101,121,119,111,114,100,95,101,110,115,117,114,101,0] /* keyword_ensure\00 */, "i8", ALLOC_NONE, 5322156);
allocate([99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,0] /* can't define singlet */, "i8", ALLOC_NONE, 5322172);
allocate([107,101,121,119,111,114,100,95,114,101,115,99,117,101,0] /* keyword_rescue\00 */, "i8", ALLOC_NONE, 5322196);
allocate([107,101,121,119,111,114,100,95,98,101,103,105,110,0] /* keyword_begin\00 */, "i8", ALLOC_NONE, 5322212);
allocate([107,101,121,119,111,114,100,95,117,110,100,101,102,0] /* keyword_undef\00 */, "i8", ALLOC_NONE, 5322228);
allocate([99,97,112,105,116,97,108,105,122,101,0] /* capitalize\00 */, "i8", ALLOC_NONE, 5322244);
allocate([107,101,121,119,111,114,100,95,100,101,102,0] /* keyword_def\00 */, "i8", ALLOC_NONE, 5322256);
allocate([107,101,121,119,111,114,100,95,109,111,100,117,108,101,0] /* keyword_module\00 */, "i8", ALLOC_NONE, 5322268);
allocate([33,126,0] /* !~\00 */, "i8", ALLOC_NONE, 5322284);
allocate([91,93,61,0] /* []=\00 */, "i8", ALLOC_NONE, 5322288);
allocate([108,111,99,97,108,116,105,109,101,0] /* localtime\00 */, "i8", ALLOC_NONE, 5322292);
allocate([105,110,99,111,110,115,105,115,116,101,110,116,32,115,116,114,117,99,116,0] /* inconsistent struct\ */, "i8", ALLOC_NONE, 5322304);
allocate([105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,99,104,97,114,97,99,116,101,114,32,45,32,37,0] /* invalid format chara */, "i8", ALLOC_NONE, 5322324);
allocate([60,60,0] /* __\00 */, "i8", ALLOC_NONE, 5322356);
allocate([108,100,101,120,112,0] /* ldexp\00 */, "i8", ALLOC_NONE, 5322360);
allocate([114,97,105,115,101,0] /* raise\00 */, "i8", ALLOC_NONE, 5322368);
allocate([107,101,121,119,111,114,100,95,99,108,97,115,115,0] /* keyword_class\00 */, "i8", ALLOC_NONE, 5322376);
allocate([36,117,110,100,101,102,105,110,101,100,0] /* $undefined\00 */, "i8", ALLOC_NONE, 5322392);
allocate([101,114,114,111,114,0] /* error\00 */, "i8", ALLOC_NONE, 5322404);
allocate([83,121,110,116,97,120,69,114,114,111,114,0] /* SyntaxError\00 */, "i8", ALLOC_NONE, 5322412);
allocate([36,101,110,100,0] /* $end\00 */, "i8", ALLOC_NONE, 5322424);
allocate([109,111,100,117,108,101,95,101,118,97,108,47,99,108,97,115,115,95,101,118,97,108,32,119,105,116,104,32,115,116,114,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0] /* module_eval/class_ev */, "i8", ALLOC_NONE, 5322432);
allocate([108,105,110,101,32,37,100,58,37,100,58,32,37,115,10,0] /* line %d:%d: %s\0A\00 */, "i8", ALLOC_NONE, 5322484);
allocate([37,115,58,37,100,58,37,100,58,32,37,115,10,0] /* %s:%d:%d: %s\0A\00 */, "i8", ALLOC_NONE, 5322500);
allocate([73,110,116,101,114,110,97,108,32,101,114,114,111,114,32,105,110,32,98,97,99,107,114,101,102,95,101,114,114,111,114,40,41,32,58,32,110,61,62,99,97,114,32,61,61,32,37,100,0] /* Internal error in ba */, "i8", ALLOC_NONE, 5322516);
allocate([99,97,110,39,116,32,115,101,116,32,118,97,114,105,97,98,108,101,32,36,37,99,0] /* can't set variable $ */, "i8", ALLOC_NONE, 5322568);
allocate([99,97,110,39,116,32,115,101,116,32,118,97,114,105,97,98,108,101,32,36,37,100,0] /* can't set variable $ */, "i8", ALLOC_NONE, 5322592);
allocate([61,126,0] /* =~\00 */, "i8", ALLOC_NONE, 5322616);
allocate([91,93,0] /* []\00 */, "i8", ALLOC_NONE, 5322620);
allocate([104,111,117,114,0] /* hour\00 */, "i8", ALLOC_NONE, 5322624);
allocate([101,113,108,63,0] /* eql?\00 */, "i8", ALLOC_NONE, 5322632);
allocate([112,114,101,99,105,115,105,111,110,32,116,111,111,32,98,105,103,0] /* precision too big\00 */, "i8", ALLOC_NONE, 5322640);
allocate([70,108,111,97,116,0] /* Float\00 */, "i8", ALLOC_NONE, 5322660);
allocate([102,114,101,120,112,0] /* frexp\00 */, "i8", ALLOC_NONE, 5322668);
allocate([105,116,101,114,97,116,111,114,63,0] /* iterator?\00 */, "i8", ALLOC_NONE, 5322676);
allocate([117,110,116,101,114,109,105,110,97,116,101,100,32,115,116,114,105,110,103,32,109,101,101,116,115,32,101,110,100,32,111,102,32,102,105,108,101,0] /* unterminated string  */, "i8", ALLOC_NONE, 5322688);
allocate([73,110,118,97,108,105,100,32,101,115,99,97,112,101,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,0] /* Invalid escape chara */, "i8", ALLOC_NONE, 5322728);
allocate([95,95,105,110,105,116,95,99,111,114,101,0] /* __init_core\00 */, "i8", ALLOC_NONE, 5322760);
allocate([115,116,114,105,110,103,32,116,111,111,32,108,111,110,103,32,40,116,114,117,110,99,97,116,101,100,41,0] /* string too long (tru */, "i8", ALLOC_NONE, 5322772);
allocate([83,99,114,105,112,116,69,114,114,111,114,0] /* ScriptError\00 */, "i8", ALLOC_NONE, 5322800);
allocate([97,109,98,105,103,117,111,117,115,32,102,105,114,115,116,32,97,114,103,117,109,101,110,116,59,32,112,117,116,32,112,97,114,101,110,116,104,101,115,101,115,32,111,114,32,101,118,101,110,32,115,112,97,99,101,115,0] /* ambiguous first argu */, "i8", ALLOC_NONE, 5322812);
allocate([119,104,105,108,101,0] /* while\00 */, "i8", ALLOC_NONE, 5322872);
allocate([115,116,114,105,110,103,32,99,111,110,116,97,105,110,115,32,110,117,108,108,32,98,121,116,101,0] /* string contains null */, "i8", ALLOC_NONE, 5322880);
allocate([66,69,71,73,78,0] /* BEGIN\00 */, "i8", ALLOC_NONE, 5322908);
allocate([97,108,105,97,115,0] /* alias\00 */, "i8", ALLOC_NONE, 5322916);
allocate([69,78,68,0] /* END\00 */, "i8", ALLOC_NONE, 5322924);
allocate([95,95,69,78,67,79,68,73,78,71,95,95,0] /* __ENCODING__\00 */, "i8", ALLOC_NONE, 5322928);
allocate([115,101,116,0] /* set\00 */, "i8", ALLOC_NONE, 5322944);
allocate([103,109,116,105,109,101,0] /* gmtime\00 */, "i8", ALLOC_NONE, 5322948);
allocate([112,114,101,99,105,115,105,111,110,32,103,105,118,101,110,32,116,119,105,99,101,0] /* precision given twic */, "i8", ALLOC_NONE, 5322956);
allocate([99,97,110,39,116,32,99,111,110,118,101,114,116,32,110,105,108,32,105,110,116,111,32,70,108,111,97,116,0] /* can't convert nil in */, "i8", ALLOC_NONE, 5322980);
allocate([99,98,114,116,0] /* cbrt\00 */, "i8", ALLOC_NONE, 5323012);
allocate([103,108,111,98,97,108,95,118,97,114,105,97,98,108,101,115,0] /* global_variables\00 */, "i8", ALLOC_NONE, 5323020);
allocate([95,95,70,73,76,69,95,95,0] /* __FILE__\00 */, "i8", ALLOC_NONE, 5323040);
allocate([95,95,76,73,78,69,95,95,0] /* __LINE__\00 */, "i8", ALLOC_NONE, 5323052);
allocate([83,116,97,110,100,97,114,100,69,114,114,111,114,0] /* StandardError\00 */, "i8", ALLOC_NONE, 5323064);
allocate([109,111,100,117,108,101,0] /* module\00 */, "i8", ALLOC_NONE, 5323080);
allocate([116,111,111,32,99,111,109,112,108,101,120,32,101,120,112,114,101,115,115,105,111,110,0] /* too complex expressi */, "i8", ALLOC_NONE, 5323088);
allocate([115,117,112,101,114,0] /* super\00 */, "i8", ALLOC_NONE, 5323112);
allocate([37,115,32,105,115,32,110,111,116,32,97,32,115,121,109,98,111,108,0] /* %s is not a symbol\0 */, "i8", ALLOC_NONE, 5323120);
allocate([71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,115,116,114,105,110,103,33,0] /* Given argument is no */, "i8", ALLOC_NONE, 5323140);
allocate([114,101,100,111,0] /* redo\00 */, "i8", ALLOC_NONE, 5323172);
allocate([97,116,0] /* at\00 */, "i8", ALLOC_NONE, 5323180);
allocate([99,97,115,101,0] /* case\00 */, "i8", ALLOC_NONE, 5323184);
allocate([117,110,105,110,105,116,105,97,108,105,122,101,100,32,115,116,114,117,99,116,0] /* uninitialized struct */, "i8", ALLOC_NONE, 5323192);
allocate([116,111,111,32,102,101,119,32,97,114,103,117,109,101,110,116,115,0] /* too few arguments\00 */, "i8", ALLOC_NONE, 5323216);
allocate([105,102,0] /* if\00 */, "i8", ALLOC_NONE, 5323236);
allocate([114,101,116,114,121,0] /* retry\00 */, "i8", ALLOC_NONE, 5323240);
allocate([103,101,116,0] /* get\00 */, "i8", ALLOC_NONE, 5323248);
allocate([103,109,116,63,0] /* gmt?\00 */, "i8", ALLOC_NONE, 5323252);
allocate([110,101,103,97,116,105,118,101,32,97,114,103,99,32,102,111,114,32,102,117,110,99,97,108,108,32,40,37,100,41,0] /* negative argc for fu */, "i8", ALLOC_NONE, 5323260);
allocate([117,110,110,117,109,98,101,114,101,100,40,37,100,41,32,109,105,120,101,100,32,119,105,116,104,32,110,97,109,101,100,0] /* unnumbered(%d) mixed */, "i8", ALLOC_NONE, 5323292);
allocate([116,111,95,105,110,116,0] /* to_int\00 */, "i8", ALLOC_NONE, 5323324);
allocate([119,104,101,110,0] /* when\00 */, "i8", ALLOC_NONE, 5323332);
allocate([69,0] /* E\00 */, "i8", ALLOC_NONE, 5323340);
allocate([115,113,114,116,0] /* sqrt\00 */, "i8", ALLOC_NONE, 5323344);
allocate([98,108,111,99,107,95,103,105,118,101,110,63,0] /* block_given?\00 */, "i8", ALLOC_NONE, 5323352);
allocate([95,95,97,116,116,97,99,104,101,100,95,95,0] /* __attached__\00 */, "i8", ALLOC_NONE, 5323368);
allocate([105,110,0] /* in\00 */, "i8", ALLOC_NONE, 5323384);
allocate([104,97,115,95,118,97,108,117,101,63,0] /* has_value?\00 */, "i8", ALLOC_NONE, 5323388);
allocate([111,114,0] /* or\00 */, "i8", ALLOC_NONE, 5323400);
allocate([117,110,100,101,102,0] /* undef\00 */, "i8", ALLOC_NONE, 5323404);
allocate([98,117,103,58,32,100,105,115,112,97,116,99,104,32,111,110,32,110,111,110,32,74,77,80,32,111,112,10,0] /* bug: dispatch on non */, "i8", ALLOC_NONE, 5323412);
allocate([102,111,114,0] /* for\00 */, "i8", ALLOC_NONE, 5323444);
allocate([105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,115,112,101,99,105,102,105,101,114,32,37,99,0] /* invalid argument spe */, "i8", ALLOC_NONE, 5323448);
allocate([121,105,101,108,100,0] /* yield\00 */, "i8", ALLOC_NONE, 5323480);
allocate([100,111,0] /* do\00 */, "i8", ALLOC_NONE, 5323488);
allocate([97,110,100,0] /* and\00 */, "i8", ALLOC_NONE, 5323492);
allocate([100,101,102,0] /* def\00 */, "i8", ALLOC_NONE, 5323496);
allocate([114,101,116,117,114,110,0] /* return\00 */, "i8", ALLOC_NONE, 5323500);
allocate([105,110,105,116,105,97,108,105,122,101,0] /* initialize\00 */, "i8", ALLOC_NONE, 5323508);
allocate([103,101,116,117,116,99,0] /* getutc\00 */, "i8", ALLOC_NONE, 5323520);
allocate([117,110,110,117,109,98,101,114,101,100,40,37,100,41,32,109,105,120,101,100,32,119,105,116,104,32,110,117,109,98,101,114,101,100,0] /* unnumbered(%d) mixed */, "i8", ALLOC_NONE, 5323528);
allocate([109,101,109,98,101,114,63,0] /* member?\00 */, "i8", ALLOC_NONE, 5323564);
allocate([99,108,97,115,115,32,111,114,32,109,111,100,117,108,101,32,114,101,113,117,105,114,101,100,0] /* class or module requ */, "i8", ALLOC_NONE, 5323572);
allocate([126,0] /* ~\00 */, "i8", ALLOC_NONE, 5323600);
allocate([108,111,103,49,48,0] /* log10\00 */, "i8", ALLOC_NONE, 5323604);
allocate([75,101,114,110,101,108,0] /* Kernel\00 */, "i8", ALLOC_NONE, 5323612);
allocate([117,110,108,101,115,115,0] /* unless\00 */, "i8", ALLOC_NONE, 5323620);
allocate([117,110,116,105,108,0] /* until\00 */, "i8", ALLOC_NONE, 5323628);
allocate([48,48,48,57,48,48,48,48,0] /* 00090000\00 */, "i8", ALLOC_NONE, 5323636);
allocate([104,97,115,95,107,101,121,63,0] /* has_key?\00 */, "i8", ALLOC_NONE, 5323648);
allocate([109,101,115,115,97,103,101,0] /* message\00 */, "i8", ALLOC_NONE, 5323660);
allocate([114,101,115,99,117,101,0] /* rescue\00 */, "i8", ALLOC_NONE, 5323668);
allocate([116,111,111,32,109,97,110,121,32,115,121,109,98,111,108,115,32,40,109,97,120,32,50,53,54,41,0] /* too many symbols (ma */, "i8", ALLOC_NONE, 5323676);
allocate([101,108,115,105,102,0] /* elsif\00 */, "i8", ALLOC_NONE, 5323704);
allocate([115,101,108,102,0] /* self\00 */, "i8", ALLOC_NONE, 5323712);
allocate([110,111,116,0] /* not\00 */, "i8", ALLOC_NONE, 5323720);
allocate([116,104,101,110,0] /* then\00 */, "i8", ALLOC_NONE, 5323724);
allocate([115,116,97,114,116,0] /* start\00 */, "i8", ALLOC_NONE, 5323732);
allocate([99,97,110,110,111,116,32,115,101,116,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,0] /* cannot set instance  */, "i8", ALLOC_NONE, 5323740);
allocate([74,115,79,98,106,101,99,116,0] /* JsObject\00 */, "i8", ALLOC_NONE, 5323772);
allocate([103,101,116,108,111,99,97,108,0] /* getlocal\00 */, "i8", ALLOC_NONE, 5323784);
allocate([118,97,108,32,116,111,111,32,98,105,103,0] /* val too big\00 */, "i8", ALLOC_NONE, 5323796);
allocate([108,97,115,116,0] /* last\00 */, "i8", ALLOC_NONE, 5323808);
allocate([35,60,37,115,58,37,112,62,0] /* #_%s:%p_\00 */, "i8", ALLOC_NONE, 5323816);
allocate([108,111,103,50,0] /* log2\00 */, "i8", ALLOC_NONE, 5323828);
allocate([105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,37,115,32,110,111,116,32,100,101,102,105,110,101,100,0] /* instance variable %s */, "i8", ALLOC_NONE, 5323836);
allocate([101,110,115,117,114,101,0] /* ensure\00 */, "i8", ALLOC_NONE, 5323872);
allocate([101,109,112,116,121,63,0] /* empty?\00 */, "i8", ALLOC_NONE, 5323880);
allocate([101,108,115,101,0] /* else\00 */, "i8", ALLOC_NONE, 5323888);
allocate([98,114,101,97,107,0] /* break\00 */, "i8", ALLOC_NONE, 5323896);
allocate([112,111,111,108,32,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,0] /* pool memory allocati */, "i8", ALLOC_NONE, 5323904);
allocate([78,97,109,101,69,114,114,111,114,0] /* NameError\00 */, "i8", ALLOC_NONE, 5323928);
allocate([95,95,69,78,68,95,95,0] /* __END__\00 */, "i8", ALLOC_NONE, 5323940);
allocate([73,110,118,97,108,105,100,32,99,104,97,114,32,96,92,120,37,48,50,88,39,32,105,110,32,101,120,112,114,101,115,115,105,111,110,0] /* Invalid char `\5Cx%0 */, "i8", ALLOC_NONE, 5323948);
allocate([96,64,64,37,99,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0] /* `@@%c' is not allowe */, "i8", ALLOC_NONE, 5323984);
allocate([96,64,37,99,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0] /* `@%c' is not allowed */, "i8", ALLOC_NONE, 5324032);
allocate([117,110,116,101,114,109,105,110,97,116,101,100,32,113,117,111,116,101,100,32,115,116,114,105,110,103,32,109,101,101,116,115,32,101,110,100,32,111,102,32,102,105,108,101,0] /* unterminated quoted  */, "i8", ALLOC_NONE, 5324084);
allocate([103,101,116,95,114,111,111,116,95,111,98,106,101,99,116,0] /* get_root_object\00 */, "i8", ALLOC_NONE, 5324132);
allocate([103,101,116,103,109,0] /* getgm\00 */, "i8", ALLOC_NONE, 5324148);
allocate([109,101,109,98,101,114,115,0] /* members\00 */, "i8", ALLOC_NONE, 5324156);
allocate([107,101,121,37,46,42,115,32,110,111,116,32,102,111,117,110,100,0] /* key%._s not found\00 */, "i8", ALLOC_NONE, 5324164);
allocate([117,110,107,110,111,119,110,32,116,121,112,101,32,48,120,37,120,32,40,48,120,37,120,32,103,105,118,101,110,41,0] /* unknown type 0x%x (0 */, "i8", ALLOC_NONE, 5324184);
allocate([37,0] /* %\00 */, "i8", ALLOC_NONE, 5324216);
allocate([108,111,103,0] /* log\00 */, "i8", ALLOC_NONE, 5324220);
allocate([108,97,115,116,112,99,0] /* lastpc\00 */, "i8", ALLOC_NONE, 5324224);
allocate([117,110,107,110,111,119,110,32,116,121,112,101,32,111,102,32,37,115,116,114,105,110,103,0] /* unknown type of %str */, "i8", ALLOC_NONE, 5324232);
allocate([102,108,111,97,116,32,37,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* float %s out of rang */, "i8", ALLOC_NONE, 5324256);
allocate([95,95,100,101,108,101,116,101,0] /* __delete\00 */, "i8", ALLOC_NONE, 5324280);
allocate([99,111,114,114,117,112,116,101,100,32,102,108,111,97,116,32,118,97,108,117,101,32,37,115,0] /* corrupted float valu */, "i8", ALLOC_NONE, 5324292);
allocate([116,114,97,105,108,105,110,103,32,96,37,99,39,32,105,110,32,110,117,109,98,101,114,0] /* trailing `%c' in num */, "i8", ALLOC_NONE, 5324320);
allocate([117,110,107,110,111,119,110,32,108,104,115,32,37,100,10,0] /* unknown lhs %d\0A\00 */, "i8", ALLOC_NONE, 5324344);
allocate([109,114,98,95,114,101,97,108,108,111,99,0] /* mrb_realloc\00 */, "i8", ALLOC_NONE, 5324360);
allocate([73,110,118,97,108,105,100,32,111,99,116,97,108,32,100,105,103,105,116,0] /* Invalid octal digit\ */, "i8", ALLOC_NONE, 5324372);
allocate([110,101,103,97,116,105,118,101,32,97,114,114,97,121,32,115,105,122,101,0] /* negative array size\ */, "i8", ALLOC_NONE, 5324392);
allocate([110,117,109,101,114,105,99,32,108,105,116,101,114,97,108,32,119,105,116,104,111,117,116,32,100,105,103,105,116,115,0] /* numeric literal with */, "i8", ALLOC_NONE, 5324412);
allocate([110,111,32,46,60,100,105,103,105,116,62,32,102,108,111,97,116,105,110,103,32,108,105,116,101,114,97,108,32,97,110,121,109,111,114,101,59,32,112,117,116,32,48,32,98,101,102,111,114,101,32,100,111,116,0] /* no ._digit_ floating */, "i8", ALLOC_NONE, 5324444);
allocate([124,124,0] /* ||\00 */, "i8", ALLOC_NONE, 5324500);
allocate([96,38,39,32,105,110,116,101,114,112,114,101,116,101,100,32,97,115,32,97,114,103,117,109,101,110,116,32,112,114,101,102,105,120,0] /* `&' interpreted as a */, "i8", ALLOC_NONE, 5324504);
allocate([77,114,117,98,121,74,115,0] /* MrubyJs\00 */, "i8", ALLOC_NONE, 5324540);
allocate([100,115,116,63,0] /* dst?\00 */, "i8", ALLOC_NONE, 5324548);
allocate([75,101,121,69,114,114,111,114,0] /* KeyError\00 */, "i8", ALLOC_NONE, 5324556);
allocate([105,110,99,108,117,100,101,63,0] /* include?\00 */, "i8", ALLOC_NONE, 5324568);
allocate([115,116,97,99,107,32,108,101,118,101,108,32,116,111,111,32,100,101,101,112,46,32,40,108,105,109,105,116,61,37,100,41,0] /* stack level too deep */, "i8", ALLOC_NONE, 5324580);
allocate([119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,116,121,112,101,32,37,115,32,40,101,120,112,101,99,116,101,100,32,37,115,41,0] /* wrong argument type  */, "i8", ALLOC_NONE, 5324616);
allocate([101,120,112,0] /* exp\00 */, "i8", ALLOC_NONE, 5324656);
allocate([38,38,0] /* &&\00 */, "i8", ALLOC_NONE, 5324660);
allocate([105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,59,32,117,115,101,32,63,92,37,99,0] /* invalid character sy */, "i8", ALLOC_NONE, 5324664);
allocate([100,101,102,97,117,108,116,95,112,114,111,99,61,0] /* default_proc=\00 */, "i8", ALLOC_NONE, 5324700);
allocate([105,110,99,111,109,112,108,101,116,101,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,0] /* incomplete character */, "i8", ALLOC_NONE, 5324716);
allocate([10,61,101,110,100,10,0] /* \0A=end\0A\00 */, "i8", ALLOC_NONE, 5324744);
allocate([98,101,103,105,110,10,0] /* begin\0A\00 */, "i8", ALLOC_NONE, 5324752);
allocate([96,42,39,32,105,110,116,101,114,112,114,101,116,101,100,32,97,115,32,97,114,103,117,109,101,110,116,32,112,114,101,102,105,120,0] /* `_' interpreted as a */, "i8", ALLOC_NONE, 5324760);
allocate([108,105,110,101,32,37,100,58,32,37,115,10,0] /* line %d: %s\0A\00 */, "i8", ALLOC_NONE, 5324796);
allocate([95,95,111,117,116,101,114,95,95,0] /* __outer__\00 */, "i8", ALLOC_NONE, 5324812);
allocate([99,108,97,115,115,47,109,111,100,117,108,101,32,110,97,109,101,32,109,117,115,116,32,98,101,32,67,79,78,83,84,65,78,84,0] /* class/module name mu */, "i8", ALLOC_NONE, 5324824);
allocate([69,114,114,111,114,32,111,99,99,117,114,115,32,119,104,101,110,32,108,111,99,97,116,105,110,103,32,116,104,101,32,102,117,110,99,116,105,111,110,32,116,111,32,99,97,108,108,33,0] /* Error occurs when lo */, "i8", ALLOC_NONE, 5324860);
allocate([100,97,121,0] /* day\00 */, "i8", ALLOC_NONE, 5324912);
allocate([110,97,109,101,100,37,46,42,115,32,97,102,116,101,114,32,110,117,109,98,101,114,101,100,0] /* named%._s after numb */, "i8", ALLOC_NONE, 5324916);
allocate([102,105,114,115,116,0] /* first\00 */, "i8", ALLOC_NONE, 5324944);
allocate([119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,100,32,102,111,114,32,37,100,41,0] /* wrong number of argu */, "i8", ALLOC_NONE, 5324952);
allocate([83,121,109,98,111,108,0] /* Symbol\00 */, "i8", ALLOC_NONE, 5324992);
allocate([97,116,97,110,104,0] /* atanh\00 */, "i8", ALLOC_NONE, 5325000);
allocate([98,121,116,101,115,105,122,101,0] /* bytesize\00 */, "i8", ALLOC_NONE, 5325008);
allocate([100,101,102,97,117,108,116,95,112,114,111,99,0] /* default_proc\00 */, "i8", ALLOC_NONE, 5325020);
allocate([84,121,112,101,69,114,114,111,114,0] /* TypeError\00 */, "i8", ALLOC_NONE, 5325036);
allocate([69,110,117,109,101,114,97,98,108,101,0] /* Enumerable\00 */, "i8", ALLOC_NONE, 5325048);
allocate([69,120,99,101,112,116,105,111,110,0] /* Exception\00 */, "i8", ALLOC_NONE, 5325060);
allocate([67,111,109,112,97,114,97,98,108,101,0] /* Comparable\00 */, "i8", ALLOC_NONE, 5325072);
allocate([117,110,101,120,112,101,99,116,101,100,32,98,114,101,97,107,0] /* unexpected break\00 */, "i8", ALLOC_NONE, 5325084);
allocate([102,108,111,97,116,32,116,111,111,32,98,105,103,32,102,111,114,32,105,110,116,0] /* float too big for in */, "i8", ALLOC_NONE, 5325104);
allocate([101,120,112,101,99,116,101,100,32,70,105,120,110,117,109,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,0] /* expected Fixnum for  */, "i8", ALLOC_NONE, 5325128);
allocate([97,0] /* a\00 */, "i8", ALLOC_NONE, 5325164);
allocate([65,114,103,117,109,101,110,116,69,114,114,111,114,0] /* ArgumentError\00 */, "i8", ALLOC_NONE, 5325168);
allocate([100,121,110,97,109,105,99,32,99,111,110,115,116,97,110,116,32,97,115,115,105,103,110,109,101,110,116,0] /* dynamic constant ass */, "i8", ALLOC_NONE, 5325184);
allocate([99,97,108,108,95,112,114,111,99,0] /* call_proc\00 */, "i8", ALLOC_NONE, 5325212);
allocate([99,116,105,109,101,0] /* ctime\00 */, "i8", ALLOC_NONE, 5325224);
allocate([110,97,109,101,100,37,46,42,115,32,97,102,116,101,114,32,117,110,110,117,109,98,101,114,101,100,40,37,100,41,0] /* named%._s after unnu */, "i8", ALLOC_NONE, 5325232);
allocate([101,120,99,108,117,100,101,95,101,110,100,63,0] /* exclude_end?\00 */, "i8", ALLOC_NONE, 5325264);
allocate([39,37,115,39,58,32,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,100,32,102,111,114,32,37,100,41,0] /* '%s': wrong number o */, "i8", ALLOC_NONE, 5325280);
allocate([70,105,120,110,117,109,0] /* Fixnum\00 */, "i8", ALLOC_NONE, 5325324);
allocate([97,99,111,115,104,0] /* acosh\00 */, "i8", ALLOC_NONE, 5325332);
allocate([124,111,111,0] /* |oo\00 */, "i8", ALLOC_NONE, 5325340);
allocate([100,101,102,97,117,108,116,61,0] /* default=\00 */, "i8", ALLOC_NONE, 5325344);
allocate([101,120,99,101,112,116,105,111,110,32,111,98,106,101,99,116,32,101,120,112,101,99,116,101,100,0] /* exception object exp */, "i8", ALLOC_NONE, 5325356);
allocate([109,97,108,102,111,114,109,101,100,32,114,101,97,100,105,110,116,32,105,110,112,117,116,0] /* malformed readint in */, "i8", ALLOC_NONE, 5325384);
allocate([84,105,109,101,0] /* Time\00 */, "i8", ALLOC_NONE, 5325408);
allocate([116,111,95,115,0] /* to_s\00 */, "i8", ALLOC_NONE, 5325416);
allocate([97,115,99,116,105,109,101,0] /* asctime\00 */, "i8", ALLOC_NONE, 5325424);
allocate([110,101,119,0] /* new\00 */, "i8", ALLOC_NONE, 5325432);
allocate([110,97,109,101,37,46,42,115,32,97,102,116,101,114,32,60,37,115,62,0] /* name%._s after _%s_\ */, "i8", ALLOC_NONE, 5325436);
allocate([101,97,99,104,0] /* each\00 */, "i8", ALLOC_NONE, 5325456);
allocate([117,110,101,120,112,101,99,116,101,100,32,37,115,0] /* unexpected %s\00 */, "i8", ALLOC_NONE, 5325464);
allocate([110,105,108,0] /* nil\00 */, "i8", ALLOC_NONE, 5325480);
allocate([97,115,105,110,104,0] /* asinh\00 */, "i8", ALLOC_NONE, 5325484);
allocate([100,101,102,97,117,108,116,0] /* default\00 */, "i8", ALLOC_NONE, 5325492);
allocate([95,95,109,101,109,98,101,114,115,95,95,0] /* __members__\00 */, "i8", ALLOC_NONE, 5325500);
allocate([97,114,101,110,97,32,111,118,101,114,102,108,111,119,32,101,114,114,111,114,0] /* arena overflow error */, "i8", ALLOC_NONE, 5325512);
allocate([119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,100,32,102,111,114,32,48,46,46,51,41,0] /* wrong number of argu */, "i8", ALLOC_NONE, 5325536);
allocate([117,110,100,101,102,95,109,101,116,104,111,100,0] /* undef_method\00 */, "i8", ALLOC_NONE, 5325576);
allocate([101,120,112,101,99,116,101,100,32,70,105,120,110,117,109,0] /* expected Fixnum\00 */, "i8", ALLOC_NONE, 5325592);
allocate([71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,115,121,109,98,111,108,33,0] /* Given argument is no */, "i8", ALLOC_NONE, 5325608);
allocate([99,111,110,115,116,97,110,116,32,114,101,45,97,115,115,105,103,110,109,101,110,116,0] /* constant re-assignme */, "i8", ALLOC_NONE, 5325640);
allocate([105,110,115,112,101,99,116,0] /* inspect\00 */, "i8", ALLOC_NONE, 5325664);
allocate([83,116,114,117,99,116,0] /* Struct\00 */, "i8", ALLOC_NONE, 5325672);
allocate([119,105,100,116,104,32,97,102,116,101,114,32,112,114,101,99,105,115,105,111,110,0] /* width after precisio */, "i8", ALLOC_NONE, 5325680);
allocate([61,61,61,0] /* ===\00 */, "i8", ALLOC_NONE, 5325704);
allocate([76,111,99,97,108,74,117,109,112,69,114,114,111,114,0] /* LocalJumpError\00 */, "i8", ALLOC_NONE, 5325708);
allocate([37,115,32,99,97,110,110,111,116,32,98,101,32,99,111,110,118,101,114,116,101,100,32,116,111,32,37,115,32,98,121,32,35,37,115,0] /* %s cannot be convert */, "i8", ALLOC_NONE, 5325724);
allocate([116,97,110,104,0] /* tanh\00 */, "i8", ALLOC_NONE, 5325760);
allocate([110,111,0] /* no\00 */, "i8", ALLOC_NONE, 5325768);
allocate([82,97,110,103,101,0] /* Range\00 */, "i8", ALLOC_NONE, 5325772);
allocate([92,37,48,51,111,0] /* \5C%03o\00 */, "i8", ALLOC_NONE, 5325780);
allocate([99,108,101,97,114,0] /* clear\00 */, "i8", ALLOC_NONE, 5325788);
allocate([97,108,105,97,115,95,109,101,116,104,111,100,0] /* alias_method\00 */, "i8", ALLOC_NONE, 5325796);
allocate([78,85,76,76,32,112,111,105,110,116,101,114,32,103,105,118,101,110,0] /* NULL pointer given\0 */, "i8", ALLOC_NONE, 5325812);
allocate([116,111,74,115,79,98,106,101,99,116,0] /* toJsObject\00 */, "i8", ALLOC_NONE, 5325832);
allocate([119,105,100,116,104,32,103,105,118,101,110,32,116,119,105,99,101,0] /* width given twice\00 */, "i8", ALLOC_NONE, 5325844);
allocate([99,111,115,104,0] /* cosh\00 */, "i8", ALLOC_NONE, 5325864);
allocate([110,0] /* n\00 */, "i8", ALLOC_NONE, 5325872);
allocate([34,0] /* \22\00 */, "i8", ALLOC_NONE, 5325876);
allocate([101,120,99,101,112,116,105,111,110,32,99,108,97,115,115,47,111,98,106,101,99,116,32,101,120,112,101,99,116,101,100,0] /* exception class/obje */, "i8", ALLOC_NONE, 5325880);
allocate([105,110,116,101,114,110,0] /* intern\00 */, "i8", ALLOC_NONE, 5325912);
allocate([83,116,114,105,110,103,32,99,97,110,39,116,32,98,101,32,99,111,101,114,99,101,100,32,105,110,116,111,32,70,108,111,97,116,0] /* String can't be coer */, "i8", ALLOC_NONE, 5325920);
allocate([42,0] /* _\00 */, "i8", ALLOC_NONE, 5325956);
allocate([71,105,118,101,110,32,116,121,112,101,32,37,100,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,74,97,118,97,83,99,114,105,112,116,33,10,0] /* Given type %d is not */, "i8", ALLOC_NONE, 5325960);
allocate([111,111,124,98,0] /* oo|b\00 */, "i8", ALLOC_NONE, 5326008);
allocate([78,105,108,67,108,97,115,115,0] /* NilClass\00 */, "i8", ALLOC_NONE, 5326016);
allocate([77,97,116,104,0] /* Math\00 */, "i8", ALLOC_NONE, 5326028);
allocate([71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,104,97,115,104,33,0] /* Given argument is no */, "i8", ALLOC_NONE, 5326036);
allocate([69,78,68,32,110,111,116,32,115,117,112,111,114,116,101,100,0] /* END not suported\00 */, "i8", ALLOC_NONE, 5326068);
allocate([45,0] /* -\00 */, "i8", ALLOC_NONE, 5326088);
allocate([111,102,102,115,101,116,32,37,108,100,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,115,116,114,117,99,116,40,115,105,122,101,58,37,108,100,41,0] /* offset %ld too large */, "i8", ALLOC_NONE, 5326092);
allocate([105,110,118,97,108,105,100,32,105,110,100,101,120,32,45,32,37,100,36,0] /* invalid index - %d$\ */, "i8", ALLOC_NONE, 5326136);
allocate([101,110,100,0] /* end\00 */, "i8", ALLOC_NONE, 5326156);
allocate([84,111,111,32,108,111,110,103,32,97,114,103,117,109,101,110,116,115,46,32,40,108,105,109,105,116,61,37,100,41,0] /* Too long arguments.  */, "i8", ALLOC_NONE, 5326160);
allocate([79,80,95,68,69,66,85,71,32,37,100,32,37,100,32,37,100,10,0] /* OP_DEBUG %d %d %d\0A */, "i8", ALLOC_NONE, 5326192);
allocate([73,110,116,101,103,101,114,0] /* Integer\00 */, "i8", ALLOC_NONE, 5326212);
allocate([80,73,0] /* PI\00 */, "i8", ALLOC_NONE, 5326220);
allocate([115,105,110,104,0] /* sinh\00 */, "i8", ALLOC_NONE, 5326224);
allocate([105,110,115,116,97,110,99,101,95,101,118,97,108,32,119,105,116,104,32,115,116,114,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0] /* instance_eval with s */, "i8", ALLOC_NONE, 5326232);
allocate([109,97,105,110,0] /* main\00 */, "i8", ALLOC_NONE, 5326276);
allocate([110,101,103,97,116,105,118,101,32,115,116,114,105,110,103,32,115,105,122,101,32,40,111,114,32,115,105,122,101,32,116,111,111,32,98,105,103,41,0] /* negative string size */, "i8", ALLOC_NONE, 5326284);
allocate([83,116,114,105,110,103,32,99,111,110,116,97,105,110,115,32,78,85,76,0] /* String contains NUL\ */, "i8", ALLOC_NONE, 5326324);
allocate([105,110,100,101,120,32,105,115,32,111,117,116,32,111,102,32,97,114,114,97,121,0] /* index is out of arra */, "i8", ALLOC_NONE, 5326344);
allocate([37,48,51,111,0] /* %03o\00 */, "i8", ALLOC_NONE, 5326368);
allocate([116,111,74,115,65,114,114,97,121,0] /* toJsArray\00 */, "i8", ALLOC_NONE, 5326376);
allocate([101,108,115,101,32,119,105,116,104,111,117,116,32,114,101,115,99,117,101,32,105,115,32,117,115,101,108,101,115,115,0] /* else without rescue  */, "i8", ALLOC_NONE, 5326388);
allocate([43,0] /* +\00 */, "i8", ALLOC_NONE, 5326420);
allocate([111,102,102,115,101,116,32,37,108,100,32,116,111,111,32,115,109,97,108,108,32,102,111,114,32,115,116,114,117,99,116,40,115,105,122,101,58,37,108,100,41,0] /* offset %ld too small */, "i8", ALLOC_NONE, 5326424);
allocate([110,117,109,98,101,114,101,100,40,37,100,41,32,97,102,116,101,114,32,110,97,109,101,100,0] /* numbered(%d) after n */, "i8", ALLOC_NONE, 5326468);
allocate([98,101,103,105,110,0] /* begin\00 */, "i8", ALLOC_NONE, 5326496);
allocate([70,97,108,115,101,67,108,97,115,115,0] /* FalseClass\00 */, "i8", ALLOC_NONE, 5326504);
allocate([97,98,115,0] /* abs\00 */, "i8", ALLOC_NONE, 5326516);
allocate([97,116,97,110,50,0] /* atan2\00 */, "i8", ALLOC_NONE, 5326520);
allocate([78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0] /* NotImplementedError\ */, "i8", ALLOC_NONE, 5326528);
allocate([110,111,116,32,97,32,112,114,111,99,0] /* not a proc\00 */, "i8", ALLOC_NONE, 5326548);
allocate([82,73,84,69,0] /* RITE\00 */, "i8", ALLOC_NONE, 5326560);
allocate(468, "i8", ALLOC_NONE, 5326568);
allocate([1,2,4,8,16,32,64,128] /* \01\02\04\08\10 @\80 */, "i8", ALLOC_NONE, 5327036);
allocate([102,108,111,95,116,111,95,115,0] /* flo_to_s\00 */, "i8", ALLOC_NONE, 5327044);
HEAP32[((5243256)>>2)]=((5322424)|0);
HEAP32[((5243260)>>2)]=((5322404)|0);
HEAP32[((5243264)>>2)]=((5322392)|0);
HEAP32[((5243268)>>2)]=((5322376)|0);
HEAP32[((5243272)>>2)]=((5322268)|0);
HEAP32[((5243276)>>2)]=((5322256)|0);
HEAP32[((5243280)>>2)]=((5322228)|0);
HEAP32[((5243284)>>2)]=((5322212)|0);
HEAP32[((5243288)>>2)]=((5322196)|0);
HEAP32[((5243292)>>2)]=((5322156)|0);
HEAP32[((5243296)>>2)]=((5322144)|0);
HEAP32[((5243300)>>2)]=((5322124)|0);
HEAP32[((5243304)>>2)]=((5322084)|0);
HEAP32[((5243308)>>2)]=((5322068)|0);
HEAP32[((5243312)>>2)]=((5321992)|0);
HEAP32[((5243316)>>2)]=((5321976)|0);
HEAP32[((5243320)>>2)]=((5321948)|0);
HEAP32[((5243324)>>2)]=((5321932)|0);
HEAP32[((5243328)>>2)]=((5321916)|0);
HEAP32[((5243332)>>2)]=((5321900)|0);
HEAP32[((5243336)>>2)]=((5321888)|0);
HEAP32[((5243340)>>2)]=((5321864)|0);
HEAP32[((5243344)>>2)]=((5321832)|0);
HEAP32[((5243348)>>2)]=((5321816)|0);
HEAP32[((5243352)>>2)]=((5321712)|0);
HEAP32[((5243356)>>2)]=((5321700)|0);
HEAP32[((5243360)>>2)]=((5321688)|0);
HEAP32[((5243364)>>2)]=((5321672)|0);
HEAP32[((5243368)>>2)]=((5321644)|0);
HEAP32[((5243372)>>2)]=((5321588)|0);
HEAP32[((5243376)>>2)]=((5321572)|0);
HEAP32[((5243380)>>2)]=((5321548)|0);
HEAP32[((5243384)>>2)]=((5321508)|0);
HEAP32[((5243388)>>2)]=((5321492)|0);
HEAP32[((5243392)>>2)]=((5321440)|0);
HEAP32[((5243396)>>2)]=((5321424)|0);
HEAP32[((5243400)>>2)]=((5321408)|0);
HEAP32[((5243404)>>2)]=((5321396)|0);
HEAP32[((5243408)>>2)]=((5321372)|0);
HEAP32[((5243412)>>2)]=((5321360)|0);
HEAP32[((5243416)>>2)]=((5321348)|0);
HEAP32[((5243420)>>2)]=((5321332)|0);
HEAP32[((5243424)>>2)]=((5321308)|0);
HEAP32[((5243428)>>2)]=((5321292)|0);
HEAP32[((5243432)>>2)]=((5321196)|0);
HEAP32[((5243436)>>2)]=((5321180)|0);
HEAP32[((5243440)>>2)]=((5321164)|0);
HEAP32[((5243444)>>2)]=((5321152)|0);
HEAP32[((5243448)>>2)]=((5321136)|0);
HEAP32[((5243452)>>2)]=((5321108)|0);
HEAP32[((5243456)>>2)]=((5321088)|0);
HEAP32[((5243460)>>2)]=((5321072)|0);
HEAP32[((5243464)>>2)]=((5321048)|0);
HEAP32[((5243468)>>2)]=((5321040)|0);
HEAP32[((5243472)>>2)]=((5320996)|0);
HEAP32[((5243476)>>2)]=((5320968)|0);
HEAP32[((5243480)>>2)]=((5320960)|0);
HEAP32[((5243484)>>2)]=((5320952)|0);
HEAP32[((5243488)>>2)]=((5320940)|0);
HEAP32[((5243492)>>2)]=((5320916)|0);
HEAP32[((5243496)>>2)]=((5320908)|0);
HEAP32[((5243500)>>2)]=((5320896)|0);
HEAP32[((5243504)>>2)]=((5320868)|0);
HEAP32[((5243508)>>2)]=((5320852)|0);
HEAP32[((5243512)>>2)]=((5320736)|0);
HEAP32[((5243516)>>2)]=((5320724)|0);
HEAP32[((5243520)>>2)]=((5320712)|0);
HEAP32[((5243524)>>2)]=((5320704)|0);
HEAP32[((5243528)>>2)]=((5320688)|0);
HEAP32[((5243532)>>2)]=((5320676)|0);
HEAP32[((5243536)>>2)]=((5320668)|0);
HEAP32[((5243540)>>2)]=((5320660)|0);
HEAP32[((5243544)>>2)]=((5320632)|0);
HEAP32[((5243548)>>2)]=((5320624)|0);
HEAP32[((5243552)>>2)]=((5320544)|0);
HEAP32[((5243556)>>2)]=((5320536)|0);
HEAP32[((5243560)>>2)]=((5320464)|0);
HEAP32[((5243564)>>2)]=((5320452)|0);
HEAP32[((5243568)>>2)]=((5320420)|0);
HEAP32[((5243572)>>2)]=((5320400)|0);
HEAP32[((5243576)>>2)]=((5320392)|0);
HEAP32[((5243580)>>2)]=((5320384)|0);
HEAP32[((5243584)>>2)]=((5320376)|0);
HEAP32[((5243588)>>2)]=((5320368)|0);
HEAP32[((5243592)>>2)]=((5320308)|0);
HEAP32[((5243596)>>2)]=((5320300)|0);
HEAP32[((5243600)>>2)]=((5320292)|0);
HEAP32[((5243604)>>2)]=((5320284)|0);
HEAP32[((5243608)>>2)]=((5320264)|0);
HEAP32[((5243612)>>2)]=((5320216)|0);
HEAP32[((5243616)>>2)]=((5320208)|0);
HEAP32[((5243620)>>2)]=((5320192)|0);
HEAP32[((5243624)>>2)]=((5320184)|0);
HEAP32[((5243628)>>2)]=((5320176)|0);
HEAP32[((5243632)>>2)]=((5320124)|0);
HEAP32[((5243636)>>2)]=((5320112)|0);
HEAP32[((5243640)>>2)]=((5320104)|0);
HEAP32[((5243644)>>2)]=((5320096)|0);
HEAP32[((5243648)>>2)]=((5320088)|0);
HEAP32[((5243652)>>2)]=((5320048)|0);
HEAP32[((5243656)>>2)]=((5320036)|0);
HEAP32[((5243660)>>2)]=((5320024)|0);
HEAP32[((5243664)>>2)]=((5319996)|0);
HEAP32[((5243668)>>2)]=((5319984)|0);
HEAP32[((5243672)>>2)]=((5319884)|0);
HEAP32[((5243676)>>2)]=((5319876)|0);
HEAP32[((5243680)>>2)]=((5319868)|0);
HEAP32[((5243684)>>2)]=((5319864)|0);
HEAP32[((5243688)>>2)]=((5319860)|0);
HEAP32[((5243692)>>2)]=((5319856)|0);
HEAP32[((5243696)>>2)]=((5319852)|0);
HEAP32[((5243700)>>2)]=((5319848)|0);
HEAP32[((5243704)>>2)]=((5319836)|0);
HEAP32[((5243708)>>2)]=((5319832)|0);
HEAP32[((5243712)>>2)]=((5319788)|0);
HEAP32[((5243716)>>2)]=((5319784)|0);
HEAP32[((5243720)>>2)]=((5319780)|0);
HEAP32[((5243724)>>2)]=((5319776)|0);
HEAP32[((5243728)>>2)]=((5319768)|0);
HEAP32[((5243732)>>2)]=((5319764)|0);
HEAP32[((5243736)>>2)]=((5319752)|0);
HEAP32[((5243740)>>2)]=((5319748)|0);
HEAP32[((5243744)>>2)]=((5319744)|0);
HEAP32[((5243748)>>2)]=((5319736)|0);
HEAP32[((5243752)>>2)]=((5319648)|0);
HEAP32[((5243756)>>2)]=((5319600)|0);
HEAP32[((5243760)>>2)]=((5319592)|0);
HEAP32[((5243764)>>2)]=((5319564)|0);
HEAP32[((5243768)>>2)]=((5319528)|0);
HEAP32[((5243772)>>2)]=((5319504)|0);
HEAP32[((5243776)>>2)]=((5319480)|0);
HEAP32[((5243780)>>2)]=((5319448)|0);
HEAP32[((5243784)>>2)]=((5319428)|0);
HEAP32[((5243788)>>2)]=((5319400)|0);
HEAP32[((5243792)>>2)]=((5319352)|0);
HEAP32[((5243796)>>2)]=((5319348)|0);
HEAP32[((5243800)>>2)]=((5319344)|0);
HEAP32[((5243804)>>2)]=((5319340)|0);
HEAP32[((5243808)>>2)]=((5319336)|0);
HEAP32[((5243812)>>2)]=((5319308)|0);
HEAP32[((5243816)>>2)]=((5319304)|0);
HEAP32[((5243820)>>2)]=((5319300)|0);
HEAP32[((5243824)>>2)]=((5319296)|0);
HEAP32[((5243828)>>2)]=((5319288)|0);
HEAP32[((5243832)>>2)]=((5319200)|0);
HEAP32[((5243836)>>2)]=((5319192)|0);
HEAP32[((5243840)>>2)]=((5319188)|0);
HEAP32[((5243844)>>2)]=((5319172)|0);
HEAP32[((5243848)>>2)]=((5319152)|0);
HEAP32[((5243852)>>2)]=((5319100)|0);
HEAP32[((5243856)>>2)]=((5319088)|0);
HEAP32[((5243860)>>2)]=((5319076)|0);
HEAP32[((5243864)>>2)]=((5319064)|0);
HEAP32[((5243868)>>2)]=((5319056)|0);
HEAP32[((5243872)>>2)]=((5318976)|0);
HEAP32[((5243876)>>2)]=((5318964)|0);
HEAP32[((5243880)>>2)]=((5318948)|0);
HEAP32[((5243884)>>2)]=((5318940)|0);
HEAP32[((5243888)>>2)]=((5318916)|0);
HEAP32[((5243892)>>2)]=((5318900)|0);
HEAP32[((5243896)>>2)]=((5318884)|0);
HEAP32[((5243900)>>2)]=((5318868)|0);
HEAP32[((5243904)>>2)]=((5318864)|0);
HEAP32[((5243908)>>2)]=((5318856)|0);
HEAP32[((5243912)>>2)]=((5318764)|0);
HEAP32[((5243916)>>2)]=((5318752)|0);
HEAP32[((5243920)>>2)]=((5318740)|0);
HEAP32[((5243924)>>2)]=((5318728)|0);
HEAP32[((5243928)>>2)]=((5318708)|0);
HEAP32[((5243932)>>2)]=((5318672)|0);
HEAP32[((5243936)>>2)]=((5318660)|0);
HEAP32[((5243940)>>2)]=((5318656)|0);
HEAP32[((5243944)>>2)]=((5318648)|0);
HEAP32[((5243948)>>2)]=((5318624)|0);
HEAP32[((5243952)>>2)]=((5318568)|0);
HEAP32[((5243956)>>2)]=((5318556)|0);
HEAP32[((5243960)>>2)]=((5318476)|0);
HEAP32[((5243964)>>2)]=((5318464)|0);
HEAP32[((5243968)>>2)]=((5318424)|0);
HEAP32[((5243972)>>2)]=((5318400)|0);
HEAP32[((5243976)>>2)]=((5318396)|0);
HEAP32[((5243980)>>2)]=((5318384)|0);
HEAP32[((5243984)>>2)]=((5318372)|0);
HEAP32[((5243988)>>2)]=((5318360)|0);
HEAP32[((5243992)>>2)]=((5318236)|0);
HEAP32[((5243996)>>2)]=((5318220)|0);
HEAP32[((5244000)>>2)]=((5318208)|0);
HEAP32[((5244004)>>2)]=((5318192)|0);
HEAP32[((5244008)>>2)]=((5318188)|0);
HEAP32[((5244012)>>2)]=((5318176)|0);
HEAP32[((5244016)>>2)]=((5318160)|0);
HEAP32[((5244020)>>2)]=((5318152)|0);
HEAP32[((5244024)>>2)]=((5318144)|0);
HEAP32[((5244028)>>2)]=((5318136)|0);
HEAP32[((5244032)>>2)]=((5318020)|0);
HEAP32[((5244036)>>2)]=((5318016)|0);
HEAP32[((5244040)>>2)]=((5318012)|0);
HEAP32[((5244044)>>2)]=((5318008)|0);
HEAP32[((5244048)>>2)]=((5317996)|0);
HEAP32[((5244052)>>2)]=((5317992)|0);
HEAP32[((5244056)>>2)]=((5317988)|0);
HEAP32[((5244060)>>2)]=((5317984)|0);
HEAP32[((5244064)>>2)]=((5317980)|0);
HEAP32[((5244068)>>2)]=((5317976)|0);
HEAP32[((5244072)>>2)]=((5317900)|0);
HEAP32[((5244076)>>2)]=((5317896)|0);
HEAP32[((5244080)>>2)]=((5317892)|0);
HEAP32[((5244084)>>2)]=((5317888)|0);
HEAP32[((5244088)>>2)]=((5317876)|0);
HEAP32[((5244092)>>2)]=((5317872)|0);
HEAP32[((5244096)>>2)]=((5317868)|0);
HEAP32[((5244100)>>2)]=((5317852)|0);
HEAP32[((5244104)>>2)]=((5323724)|0);
HEAP32[((5244108)>>2)]=((5323488)|0);
HEAP32[((5244112)>>2)]=((5317836)|0);
HEAP32[((5244116)>>2)]=((5317824)|0);
HEAP32[((5244120)>>2)]=((5317752)|0);
HEAP32[((5244124)>>2)]=((5317744)|0);
HEAP32[((5244128)>>2)]=((5317732)|0);
HEAP32[((5244132)>>2)]=((5317720)|0);
HEAP32[((5244136)>>2)]=((5317708)|0);
HEAP32[((5244140)>>2)]=((5317692)|0);
HEAP32[((5244144)>>2)]=((5317676)|0);
HEAP32[((5244148)>>2)]=((5317664)|0);
HEAP32[((5244152)>>2)]=((5317652)|0);
HEAP32[((5244156)>>2)]=((5317644)|0);
HEAP32[((5244160)>>2)]=((5317596)|0);
HEAP32[((5244164)>>2)]=((5317548)|0);
HEAP32[((5244168)>>2)]=((5317536)|0);
HEAP32[((5244172)>>2)]=((5317532)|0);
HEAP32[((5244176)>>2)]=((5317520)|0);
HEAP32[((5244180)>>2)]=((5317508)|0);
HEAP32[((5244184)>>2)]=((5317496)|0);
HEAP32[((5244188)>>2)]=((5317492)|0);
HEAP32[((5244192)>>2)]=((5317488)|0);
HEAP32[((5244196)>>2)]=((5317476)|0);
HEAP32[((5244200)>>2)]=((5317432)|0);
HEAP32[((5244204)>>2)]=((5317420)|0);
HEAP32[((5244208)>>2)]=((5317408)|0);
HEAP32[((5244212)>>2)]=((5317400)|0);
HEAP32[((5244216)>>2)]=((5317388)|0);
HEAP32[((5244220)>>2)]=((5317376)|0);
HEAP32[((5244224)>>2)]=((5317368)|0);
HEAP32[((5244228)>>2)]=((5317352)|0);
HEAP32[((5244232)>>2)]=((5317348)|0);
HEAP32[((5244236)>>2)]=((5317344)|0);
HEAP32[((5244240)>>2)]=((5317248)|0);
HEAP32[((5244244)>>2)]=((5317240)|0);
HEAP32[((5244248)>>2)]=((5317224)|0);
HEAP32[((5244252)>>2)]=((5317220)|0);
HEAP32[((5244256)>>2)]=((5317212)|0);
HEAP32[((5244260)>>2)]=((5317184)|0);
HEAP32[((5244264)>>2)]=((5317176)|0);
HEAP32[((5244268)>>2)]=((5317168)|0);
HEAP32[((5244272)>>2)]=((5317152)|0);
HEAP32[((5244276)>>2)]=((5316940)|0);
HEAP32[((5244280)>>2)]=((5317060)|0);
HEAP32[((5244284)>>2)]=((5317032)|0);
HEAP32[((5244288)>>2)]=((5317024)|0);
HEAP32[((5244292)>>2)]=((5316972)|0);
HEAP32[((5244296)>>2)]=((5316952)|0);
HEAP32[((5244300)>>2)]=((5316928)|0);
HEAP32[((5244304)>>2)]=((5316920)|0);
HEAP32[((5244308)>>2)]=((5316912)|0);
HEAP32[((5244312)>>2)]=((5316884)|0);
HEAP32[((5244316)>>2)]=((5316868)|0);
HEAP32[((5244320)>>2)]=((5316792)|0);
HEAP32[((5244324)>>2)]=((5316776)|0);
HEAP32[((5244328)>>2)]=((5316764)|0);
HEAP32[((5244332)>>2)]=((5316752)|0);
HEAP32[((5244336)>>2)]=((5316736)|0);
HEAP32[((5244340)>>2)]=((5316696)|0);
HEAP32[((5244344)>>2)]=((5316684)|0);
HEAP32[((5244348)>>2)]=((5316680)|0);
HEAP32[((5244352)>>2)]=((5316668)|0);
HEAP32[((5244356)>>2)]=((5316644)|0);
HEAP32[((5244360)>>2)]=((5316564)|0);
HEAP32[((5244364)>>2)]=((5316548)|0);
HEAP32[((5244368)>>2)]=((5316512)|0);
HEAP32[((5244372)>>2)]=((5316468)|0);
HEAP32[((5244376)>>2)]=((5316396)|0);
HEAP32[((5244380)>>2)]=((5316364)|0);
HEAP32[((5244384)>>2)]=((5316356)|0);
HEAP32[((5244388)>>2)]=((5316348)|0);
HEAP32[((5244392)>>2)]=((5316328)|0);
HEAP32[((5244396)>>2)]=((5316320)|0);
HEAP32[((5244400)>>2)]=((5316204)|0);
HEAP32[((5244404)>>2)]=((5316200)|0);
HEAP32[((5244408)>>2)]=((5316192)|0);
HEAP32[((5244412)>>2)]=((5317616)|0);
HEAP32[((5291324)>>2)]=((5315220)|0);
HEAP32[((5291328)>>2)]=((5315180)|0);
HEAP32[((5291332)>>2)]=((5315140)|0);
HEAP32[((5291336)>>2)]=((5315088)|0);
HEAP32[((5291340)>>2)]=((5315068)|0);
HEAP32[((5291344)>>2)]=((5315052)|0);
HEAP32[((5291348)>>2)]=((5315020)|0);
HEAP32[((5291352)>>2)]=((5317616)|0);
HEAP32[((5291356)>>2)]=((5317448)|0);
HEAP32[((5291360)>>2)]=((5317296)|0);
HEAP32[((5291408)>>2)]=((5316620)|0);
HEAP32[((5291424)>>2)]=((5316620)|0);
HEAP32[((5291440)>>2)]=((5316620)|0);
HEAP32[((5291456)>>2)]=((5316620)|0);
HEAP32[((5291472)>>2)]=((5316620)|0);
HEAP32[((5291488)>>2)]=((5316620)|0);
HEAP32[((5291504)>>2)]=((5316620)|0);
HEAP32[((5291520)>>2)]=((5316620)|0);
HEAP32[((5291536)>>2)]=((5323896)|0);
HEAP32[((5291552)>>2)]=((5323888)|0);
HEAP32[((5291568)>>2)]=((5325480)|0);
HEAP32[((5291584)>>2)]=((5323872)|0);
HEAP32[((5291600)>>2)]=((5326156)|0);
HEAP32[((5291616)>>2)]=((5323724)|0);
HEAP32[((5291632)>>2)]=((5323720)|0);
HEAP32[((5291648)>>2)]=((5320580)|0);
HEAP32[((5291664)>>2)]=((5323712)|0);
HEAP32[((5291680)>>2)]=((5323704)|0);
HEAP32[((5291696)>>2)]=((5323668)|0);
HEAP32[((5291712)>>2)]=((5320336)|0);
HEAP32[((5291728)>>2)]=((5323628)|0);
HEAP32[((5291744)>>2)]=((5323620)|0);
HEAP32[((5291760)>>2)]=((5323500)|0);
HEAP32[((5291776)>>2)]=((5323496)|0);
HEAP32[((5291792)>>2)]=((5323492)|0);
HEAP32[((5291808)>>2)]=((5323488)|0);
HEAP32[((5291824)>>2)]=((5323480)|0);
HEAP32[((5291840)>>2)]=((5323444)|0);
HEAP32[((5291856)>>2)]=((5323404)|0);
HEAP32[((5291872)>>2)]=((5323400)|0);
HEAP32[((5291888)>>2)]=((5323384)|0);
HEAP32[((5291904)>>2)]=((5323332)|0);
HEAP32[((5291920)>>2)]=((5323240)|0);
HEAP32[((5291936)>>2)]=((5323236)|0);
HEAP32[((5291952)>>2)]=((5323184)|0);
HEAP32[((5291968)>>2)]=((5323172)|0);
HEAP32[((5291984)>>2)]=((5320828)|0);
HEAP32[((5292000)>>2)]=((5323112)|0);
HEAP32[((5292016)>>2)]=((5323080)|0);
HEAP32[((5292032)>>2)]=((5326496)|0);
HEAP32[((5292048)>>2)]=((5323052)|0);
HEAP32[((5292064)>>2)]=((5323040)|0);
HEAP32[((5292080)>>2)]=((5322928)|0);
HEAP32[((5292096)>>2)]=((5322924)|0);
HEAP32[((5292112)>>2)]=((5322916)|0);
HEAP32[((5292128)>>2)]=((5322908)|0);
HEAP32[((5292144)>>2)]=((5316620)|0);
HEAP32[((5292160)>>2)]=((5320608)|0);
HEAP32[((5292176)>>2)]=((5316620)|0);
HEAP32[((5292192)>>2)]=((5316620)|0);
HEAP32[((5292208)>>2)]=((5322872)|0);
HEAP32[((5292360)>>2)]=((5319208)|0);
HEAP32[((5309544)>>2)]=((5325408)|0);
HEAP32[((5310004)>>2)]=((5316252)|0);
HEAP32[((5310008)>>2)]=((5316052)|0);
HEAP32[((5310012)>>2)]=((5315940)|0);
HEAP32[((5310016)>>2)]=((5315876)|0);
HEAP32[((5310020)>>2)]=((5315804)|0);
HEAP32[((5310024)>>2)]=((5315752)|0);
HEAP32[((5310028)>>2)]=((5315692)|0);
HEAP32[((5310032)>>2)]=((5315620)|0);
HEAP32[((5310036)>>2)]=((5315584)|0);
HEAP32[((5310040)>>2)]=((5315500)|0);
HEAP32[((5310044)>>2)]=((5315332)|0);
HEAP32[((5310048)>>2)]=((5315252)|0);
HEAP32[((5313548)>>2)]=((5320580)|0);
HEAP32[((5313556)>>2)]=((5320336)|0);
HEAP32[((5313564)>>2)]=((5325324)|0);
HEAP32[((5313572)>>2)]=((5324992)|0);
HEAP32[((5313580)>>2)]=((5320156)|0);
HEAP32[((5313588)>>2)]=((5319976)|0);
HEAP32[((5313596)>>2)]=((5319816)|0);
HEAP32[((5313604)>>2)]=((5319720)|0);
HEAP32[((5313612)>>2)]=((5319392)|0);
HEAP32[((5313620)>>2)]=((5319272)|0);
HEAP32[((5313628)>>2)]=((5322660)|0);
HEAP32[((5313636)>>2)]=((5319044)|0);
HEAP32[((5313644)>>2)]=((5317928)|0);
HEAP32[((5313652)>>2)]=((5318580)|0);
HEAP32[((5313660)>>2)]=((5325772)|0);
HEAP32[((5313668)>>2)]=((5318092)|0);
HEAP32[((5313676)>>2)]=((5325672)|0);
HEAP32[((5313684)>>2)]=((5317788)|0);
HEAP32[((5313692)>>2)]=((5317624)|0);
HEAP32[((5313700)>>2)]=((5317452)|0);

  
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32;

  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if (num|0 >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i32;

  
  
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == '0'.charCodeAt(0)) {
          if (HEAP8[(str+1)] == 'x'.charCodeAt(0) ||
              HEAP8[(str+1)] == 'X'.charCodeAt(0)) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        return (tempRet0 = Math.min(Math.floor((ret)/4294967296), 4294967295)>>>0,ret>>>0);
      }
  
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }

  
  
  function _isdigit(chr) {
      return chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0);
    }function _strtod(str, endptr) {
      var origin = str;
  
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      var chr;
      var ret = 0;
  
      // Get whole part.
      var whole = false;
      while(1) {
        chr = HEAP8[(str)];
        if (!_isdigit(chr)) break;
        whole = true;
        ret = ret*10 + chr - '0'.charCodeAt(0);
        str++;
      }
  
      // Get fractional part.
      var fraction = false;
      if (HEAP8[(str)] == '.'.charCodeAt(0)) {
        str++;
        var mul = 1/10;
        while(1) {
          chr = HEAP8[(str)];
          if (!_isdigit(chr)) break;
          fraction = true;
          ret += mul*(chr - '0'.charCodeAt(0));
          mul /= 10;
          str++;
        }
      }
  
      if (!whole && !fraction) {
        if (endptr) {
          HEAP32[((endptr)>>2)]=origin
        }
        return 0;
      }
  
      // Get exponent part.
      chr = HEAP8[(str)];
      if (chr == 'e'.charCodeAt(0) || chr == 'E'.charCodeAt(0)) {
        str++;
        var exponent = 0;
        var expNegative = false;
        chr = HEAP8[(str)];
        if (chr == '-'.charCodeAt(0)) {
          expNegative = true;
          str++;
        } else if (chr == '+'.charCodeAt(0)) {
          str++;
        }
        chr = HEAP8[(str)];
        while(1) {
          if (!_isdigit(chr)) break;
          exponent = exponent*10 + chr - '0'.charCodeAt(0);
          str++;
          chr = HEAP8[(str)];
        }
        if (expNegative) exponent = -exponent;
        ret *= Math.pow(10, exponent);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      return ret * multiplier;
    }var _strtof;

  function _memcmp(p1, p2, num) {
      for (var i = 0; i < num; i++) {
        var v1 = HEAPU8[((p1)+(i))];
        var v2 = HEAPU8[((p2)+(i))];
        if (v1 != v2) return v1 > v2 ? 1 : -1;
      }
      return 0;
    }

  
  
  
  var _stdin=allocate(1, "i32*", ALLOC_STACK);
  
  var _stdout=allocate(1, "i32*", ALLOC_STACK);
  
  var _stderr=allocate(1, "i32*", ALLOC_STACK);
  
  var __impure_ptr=allocate(1, "i32*", ALLOC_STACK);var FS={currentPath:"/",nextInode:2,streams:[null],ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
  
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function(chunkSize, length) {
            this.length = length;
            this.chunkSize = chunkSize;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % chunkSize;
            var chunkNum = Math.floor(idx / chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
    
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
          if (!hasByteServing) chunkSize = datalength;
    
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
    
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
    
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
    
          var lazyArray = new LazyUint8Array(chunkSize, datalength);
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * lazyArray.chunkSize;
            var end = (chunkNum+1) * lazyArray.chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.ensureObjects();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
  
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
  
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        assert(Math.max(_stdin, _stdout, _stderr) < 128); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
  
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
  
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[((buf)+(i))];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[((buf)+(i))]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[(_fputc.ret)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return chr;
      }
    }var _putc;

  
  
  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]|0 != 0) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],HEAPF64[(tempDoublePtr)>>3]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[(textIndex+1)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[(textIndex+1)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[(textIndex+1)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[(textIndex+1)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[(textIndex+1)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[(textIndex+1)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[(textIndex+1)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[(textIndex+1)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var origArg = currArg;
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (argSize == 8 && i64Math) argText = (origArg[1]>>>0).toString(16) + (origArg[0]>>>0).toString(16); else
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*') || nullString;
            var argLength = _strlen(arg);
            if (precisionSet) argLength = Math.min(argLength, precision);
            if (!flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[(arg++)]);
            }
            if (flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }




  function _islower(chr) {
      return chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0);
    }

  function _isupper(chr) {
      return chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0);
    }

  function _strtoul(str, endptr, base) {
      return __parseInt(str, endptr, base, 0, 4294967295, 32, true);  // ULONG_MAX.
    }


  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }

  function _isprint(chr) {
      return 0x1F < chr && chr < 0x7F;
    }

  
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[((s)+(i))]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[((s)+(i))]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  function _toupper(chr) {
      if (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) {
        return chr - 'a'.charCodeAt(0) + 'A'.charCodeAt(0);
      } else {
        return chr;
      }
    }

  function _tolower(chr) {
      if (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0)) {
        return chr - 'A'.charCodeAt(0) + 'a'.charCodeAt(0);
      } else {
        return chr;
      }
    }

  function _isalpha(chr) {
      return (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0));
    }

  function _isalnum(chr) {
      return (chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0)) ||
             (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0));
    }
var _llvm_va_start; // stub for _llvm_va_start

  function _llvm_va_end() {}
var _setjmp; // stub for _setjmp

  
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
      } else {
        _memcpy(dest, src, num);
      }
    }var _llvm_memmove_p0i8_p0i8_i32;

  function _longjmp(env, value) {
      throw { longjmp: true, id: HEAP32[((env)>>2)], value: value || 1 };
    }



  function _isxdigit(chr) {
      return (chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0)) ||
             (chr >= 'a'.charCodeAt(0) && chr <= 'f'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'F'.charCodeAt(0));
    }

  
  function ___errno_location() {
      return ___setErrNo.ret;
    }var ___errno;

  function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }

  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[((px)+(i))];
        var y = HEAPU8[((py)+(i))];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }

  function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      return Number(FS.streams[stream] && FS.streams[stream].eof);
    }

  
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[(buf++)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        if (contents.subarray || contents.slice) { // typed array or normal array
          for (var i = 0; i < size; i++) {
            HEAP8[((buf)+(i))]=contents[offset + i]
          }
        } else {
          for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
            HEAP8[((buf)+(i))]=contents.get(offset + i)
          }
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[(buf++)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[((buf)+(i))]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      if (!FS.streams[stream]) return -1;
      var streamObj = FS.streams[stream];
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _read(stream, _fgetc.ret, 1);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[(_fgetc.ret)];
      }
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
  
  
      exitRuntime();
      ABORT = true;
  
      throw 'exit(' + status + ') called, at ' + new Error().stack;
    }function _exit(status) {
      __exit(status);
    }

  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }

  var _vsnprintf;

  var _vprintf;

  function _erfc(x) {
      var MATH_TOLERANCE = 1E-12;
      var ONE_SQRTPI = 0.564189583547756287;
      var a = 1;
      var b = x;
      var c = x;
      var d = x * x + 0.5;
      var n = 1.0;
      var q2 = b / d;
      var q1, t;
  
      if (Math.abs(x) < 2.2) {
        return 1.0 - _erf(x);
      }
      if (x < 0) {
        return 2.0 - _erfc(-x);
      }
      do {
        t = a * n + b * x;
        a = b;
        b = t;
        t = c * n + d * x;
        c = d;
        d = t;
        n += 0.5;
        q1 = q2;
        q2 = b / d;
      } while (Math.abs(q1 - q2) / q2 > MATH_TOLERANCE);
      return (ONE_SQRTPI * Math.exp(- x * x) * q2);
    }

  function _erf(x) {
      var MATH_TOLERANCE = 1E-12;
      var TWO_SQRTPI = 1.128379167095512574;
      var sum = x;
      var term = x;
      var xsqr = x*x;
      var j = 1;
  
      if (Math.abs(x) > 2.2) {
        return 1.0 - _erfc(x);
      }
      do {
        term *= xsqr / j;
        sum -= term / (2 * j + 1);
        ++j;
        term *= xsqr / j;
        sum += term / (2 * j + 1);
        ++j;
      } while (Math.abs(term / sum) > MATH_TOLERANCE);
      return (TWO_SQRTPI * sum);
    }

  function _hypot(a, b) {
       return Math.sqrt(a*a + b*b);
    }

  function _ldexp(x, exp_) {
      return x * Math.pow(2, exp_);
    }

  function _frexp(x, exp_addr) {
      var sig = 0, exp_ = 0;
      if (x !== 0) {
        var raw_exp = Math.log(x)/Math.log(2);
        exp_ = Math.ceil(raw_exp);
        if (exp_ === raw_exp) exp_ += 1;
        sig = x/Math.pow(2, exp_);
      }
      HEAP32[((exp_addr)>>2)]=exp_
      return sig;
    }

  function _cbrt(x) {
      return Math.pow(x, 1/3);
    }

  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }

  var _log=Math.log;

  var _exp=Math.exp;

  function _atanh(x) {
      return Math.log((1 + x) / (1 - x)) / 2;
    }

  function _acosh(x) {
      return Math.log(x * 1 + Math.sqrt(x * x - 1));
    }

  function _asinh(x) {
      return Math.log(x + Math.sqrt(x * x + 1));
    }

  
  function _sinh(x) {
      var p = Math.pow(Math.E, x);
      return (p - (1 / p)) / 2;
    }
  
  function _cosh(x) {
      var p = Math.pow(Math.E, x);
      return (p + (1 / p)) / 2;
    }function _tanh(x) {
      return _sinh(x) / _cosh(x);
    }



  var _atan2=Math.atan2;

  var _atan=Math.atan;

  var _acos=Math.acos;

  var _asin=Math.asin;

  var _tan=Math.tan;

  var _cos=Math.cos;

  var _sin=Math.sin;

  function ___fpclassifyf(x) {
      if (isNaN(x)) return 0;
      if (!isFinite(x)) return 1;
      if (x == 0) return 2;
      // FP_SUBNORMAL..?
      return 4;
    }

  function ___assert_func(filename, line, func, condition) {
      throw 'Assertion failed: ' + (condition ? Pointer_stringify(condition) : 'unknown condition') + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + new Error().stack;
    }

  var _floorf=Math.floor;

  var _ceilf=Math.ceil;

  var ___fpclassifyd;

  
  function _fmod(x, y) {
      return x % y;
    }var _fmodf;

  var _llvm_pow_f64=Math.pow;

  
  var ___tm_struct_layout={__size__:44,tm_sec:0,tm_min:4,tm_hour:8,tm_mday:12,tm_mon:16,tm_year:20,tm_wday:24,tm_yday:28,tm_isdst:32,tm_gmtoff:36,tm_zone:40};
  
  var ___tm_timezones={};function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      var offsets = ___tm_struct_layout;
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getUTCSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getUTCMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getUTCHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getUTCDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getUTCMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getUTCFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getUTCDay()
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=0
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=0
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.round((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
  
      var timezone = "GMT";
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
  
      return tmPtr;
    }

  
  
  var __tzname=allocate(8, "i32*", ALLOC_STACK);
  
  var __daylight=allocate(1, "i32*", ALLOC_STACK);
  
  var __timezone=allocate(1, "i32*", ALLOC_STACK);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((__timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
  
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((__tzname)>>2)]=winterNamePtr
      HEAP32[(((__tzname)+(4))>>2)]=summerNamePtr
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getDay()
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=start.getTimezoneOffset() * 60
  
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=dst
  
      var timezone = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | date.toString().match(/\(([A-Z]+)\)/)[1];
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
  
      return tmPtr;
    }

  function _mktime(tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var year = HEAP32[(((tmPtr)+(offsets.tm_year))>>2)];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_min))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)],
                               0).getTime() / 1000;
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=new Date(timestamp).getDay()
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      return timestamp;
    }

  function _gettimeofday(ptr) {
      // %struct.timeval = type { i32, i32 }
      
      var now = Date.now();
      HEAP32[((ptr)>>2)]=Math.floor(now/1000); // seconds
      HEAP32[(((ptr)+(4))>>2)]=Math.floor((now-1000*Math.floor(now/1000))*1000); // microseconds
      return 0;
    }

  
  
  
  function ___js_global_object() {
      return (typeof window === 'object') ? (window) : (global);
    }function ___js_fetch_object(mrb, handle) {
      var obj = ___js_global_object()["MRB_JS_OBJ_CACHE"];
      if (obj && (typeof obj === 'object') &&
          (typeof handle === 'number') && (handle > 0)) {
        return obj[handle];
      }
    }function ___js_fetch_argument(mrb, argv_p, idx) {
      // TODO: add array passing support
      var TYPE_HANDLERS = {
        0: function() { return false; }, // MRB_TT_FALSE
        1: function() { return true; },  // MRB_TT_TRUE
        2: _mruby_js_get_integer,        // MRB_TT_FIXNUM
        3: _mruby_js_get_float,          // MRB_TT_FLOAT
        4: function() {
          var handle = _mruby_js_get_object_handle.apply(null, arguments);
          return ___js_fetch_object(mrb, handle);
        },                        // MRB_TT_OBJECT
        5: function() {
          var str_p = _mruby_js_get_string.apply(null, arguments);
          return Module['Pointer_stringify'](str_p);
        },                        // MRB_TT_STRING
        6: function() { return undefined; }, // nil value
        7: function() {
          var proc = _mruby_js_get_proc.apply(null, arguments);
          return function() {
            // TODO: add argument passing support
            _mruby_js_invoke_proc(mrb, proc, 0, 0);
          };
        },                        // MRB_TT_PROC
        8: function() {
          var handle = _mruby_js_get_array_handle.apply(null, arguments);
          return ___js_fetch_object(mrb, handle);
        },                        // MRB_TT_ARRAY
        9: function() {
          var handle = _mruby_js_get_hash_handle.apply(null, arguments);
          return ___js_fetch_object(mrb, handle);
        },                        // MRB_TT_HASH
        10: function() {
          var str_p = _mruby_js_get_symbol.apply(null, arguments);
          return Module['Pointer_stringify'](str_p);
        }                         // MRB_TT_SYMBOL
      };
  
      var handler = TYPE_HANDLERS[_mruby_js_argument_type(mrb, argv_p, idx)];
      return handler(mrb, argv_p, idx);
    }
  
  
  function ___js_add_object(mrb, obj) {
      var global_object = ___js_global_object();
      global_object["MRB_JS_OBJ_CACHE"] = global_object["MRB_JS_OBJ_CACHE"] ||
        {"_mruby_js_next_id": 1, "_mruby_js_recycled_ids": []};
      var cache_object = global_object["MRB_JS_OBJ_CACHE"];
      var object_handle = -1;
  
      if (!("_mruby_js_id" in obj)) {
        // create new cache
        var new_id;
        if (cache_object["_mruby_js_recycled_ids"].length > 0) {
          // use recycled ids
          new_id = cache_object["_mruby_js_recycled_ids"].pop();
        } else {
          new_id = cache_object["_mruby_js_next_id"];
  
          cache_object["_mruby_js_next_id"] = new_id + 1;
        }
        cache_object[new_id] = obj;
  
        obj["_mruby_js_id"] = new_id;
        obj["_mruby_js_count"] = 1;
  
        object_handle = new_id;
      } else {
        // existing cache, only updates count
        obj["_mruby_js_count"] = obj["_mruby_js_count"] + 1;
  
        object_handle = obj["_mruby_js_id"];
      }
      return object_handle;
    }
  
  function ___js_is_floating_number(val) {
      var fixed = Math.round(val);
      var diff = Math.abs(fixed - val);
      var EPSILON = 1e-5;
  
      return (diff < EPSILON);
    }
  
  function ___js_is_array(val) {
      return (typeof val !== 'undefined' &&
              val && val.constructor === Array);
    }function ___js_fill_return_arg(mrb, ret_p, val, parent_p) {
      var stack = 0;
      var RETURN_HANDLERS = {
        'object': function () {
          var handle = ___js_add_object(mrb, val);
          if (___js_is_array(val)) {
            _mruby_js_set_array_handle(mrb, ret_p, handle);
          } else {
            _mruby_js_set_object_handle(mrb, ret_p, handle);
          }
        },
        'function': function () {
          var handle = ___js_add_object(mrb, val);
          _mruby_js_set_function_handle(mrb, ret_p, handle, parent_p);
        },
        'number': function () {
          if (___js_is_floating_number(val)) {
            _mruby_js_set_float(mrb, ret_p, val);
          } else {
            _mruby_js_set_integer(mrb, ret_p, val);
          }
        },
        'boolean': function () {
          _mruby_js_set_boolean(mrb, ret_p, (val) ? (1) : (0));
        },
        'undefined': function () {
          _mruby_js_set_nil(mrb, ret_p);
        },
        'string': function () {
          if (!stack) stack = Runtime.stackSave();
          var ret = Runtime.stackAlloc(val.length + 1);
          writeStringToMemory(val, ret);
          _mruby_js_set_string(mrb, ret_p, ret);
        }
      };
  
      if (ret_p) {
        var val_type = typeof val;
        if (val_type !== null) {
          RETURN_HANDLERS[val_type]();
        }
      }
      if (stack) Runtime.stackRestore(stack);
    }function _js_create_array(mrb, arr_p, len, ret_p) {
      var ret = [], i;
      if ((arr_p !== 0) && (len !== -1)) {
        for (i = 0; i < len; i++) {
          ret.push(___js_fetch_argument(mrb, arr_p, i));
        }
      }
      ___js_fill_return_arg(mrb, ret_p, ret, 0);
    }

  
  function ___js_invoke_using_new(func, args) {
      // This function uses "new" operator to call JavaScript functions.
      // It is implemented in the following way for two reasons:
      // 1. Function.prototype.bind only exists in ECMAScript 5
      // 2. Even if we only work with ECMAScript 5 compatible browsers,
      // my test shows that we cannot use this method to create ArrayBuffer
      // (at least in Chrome).
      // So we will use the old-fashioned way to do this:)
  
      switch(args.length) {
        case 0:
          return new func();
        case 1:
          return new func(args[0]);
        case 2:
          return new func(args[0], args[1]);
        case 3:
          return new func(args[0], args[1], args[2]);
        case 4:
          return new func(args[0], args[1], args[2], args[3]);
        case 5:
          return new func(args[0], args[1], args[2], args[3], args[4]);
        case 6:
          return new func(args[0], args[1], args[2], args[3], args[4], args[5]);
        case 7:
          return new func(args[0], args[1], args[2], args[3], args[4], args[5],
                          args[6]);
        case 8:
          return new func(args[0], args[1], args[2], args[3], args[4], args[5],
                          args[6], args[7]);
        case 9:
          return new func(args[0], args[1], args[2], args[3], args[4], args[5],
                          args[6], args[7], args[8]);
        case 10:
          return new func(args[0], args[1], args[2], args[3], args[4], args[5],
                          args[6], args[7], args[8], args[9]);
        default:
          assert(false, "We do not support that many arguments now-_-");
      }
    }function _js_invoke(mrb, this_value_p,
                         func_handle,
                         argv_p, argc,
                         ret_p, type) {
      var func = ___js_fetch_object(mrb, func_handle);
      if (typeof func !== 'function') {
        _mruby_js_name_error(mrb);
      }
  
      var this_value = ___js_fetch_argument(mrb, this_value_p, 0);
      if (type !== 2) {
        if (this_value === ___js_global_object()) {
          // ECMAScript 5 compatible calling convention
          this_value = undefined;
        }
      }
  
      var i = 0, args = [], type_handler;
      for (i = 0; i < argc; i++) {
        args.push(___js_fetch_argument(mrb, argv_p, i));
      }
  
      var val;
      if (type === 1) {
        val = ___js_invoke_using_new(func, args);
      } else {
        val = func.apply(this_value, args);
      }
  
      // Returned value does not have a parent
      ___js_fill_return_arg(mrb, ret_p, val, 0);
    }

  function _js_create_empty_object(mrb, ret_p) {
      ___js_fill_return_arg(mrb, ret_p, {}, 0);
    }

  function _js_set_field(mrb, obj_p, field_p, val_p) {
      var handle = _mruby_js_get_object_handle(mrb, obj_p, 0);
      var obj = ___js_fetch_object(mrb, handle);
      var field = ___js_fetch_argument(mrb, field_p, 0);
      var val = ___js_fetch_argument(mrb, val_p, 0);
      obj[field] = val;
    }

  function _js_get_field(mrb, obj_p, field_p, ret_p) {
      var handle = _mruby_js_get_object_handle(mrb, obj_p, 0);
      var obj = ___js_fetch_object(mrb, handle);
      var val = obj[___js_fetch_argument(mrb, field_p, 0)];
      ___js_fill_return_arg(mrb, ret_p, val, obj_p);
    }

  function _js_release_object(mrb, handle) {
      var cache_object = ___js_global_object()["MRB_JS_OBJ_CACHE"];
      if (cache_object) {
        var rel_object = cache_object[handle];
        if (rel_object && ("_mruby_js_id" in rel_object)) {
          rel_object["_mruby_js_count"] = rel_object["_mruby_js_count"] - 1;
          if (rel_object["_mruby_js_count"] === 0) {
            // reference count reaches 0, release object
            var next_id = cache_object["_mruby_js_next_id"];
  
            delete cache_object[handle];
            if (handle === (next_id - 1)) {
              cache_object["_mruby_js_next_id"] = next_id - 1;
            } else {
              cache_object["_mruby_js_recycled_ids"].push(handle);
            }
  
            delete rel_object["_mruby_js_id"];
            delete rel_object["_mruby_js_count"];
  
            // Reset the next id when we have all recycled ids. I wonder
            // if a slice loop which can recycle partial ids is needed here.
            if (cache_object["_mruby_js_recycled_ids"].length ===
                (cache_object["_mruby_js_next_id"] - 1)) {
              cache_object["_mruby_js_next_id"] = 1;
              cache_object["_mruby_js_recycled_ids"] = [];
            }
          }
        }
      }
    }

  function _js_get_root_object(mrb, ret_p) {
      // Global object must be of object type, and has no parent.
      ___js_fill_return_arg(mrb, ret_p, ___js_global_object(), 0);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }

  function _llvm_uadd_with_overflow_i32(x, y) {
      x = x>>>0;
      y = y>>>0;
      return (tempRet0 = x+y > 4294967295,(x+y)>>>0);
    }

  var _sqrtf=Math.sqrt;

  var _llvm_memset_p0i8_i64;





  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],ensureObjects:function () {
        if (Browser.ensured) return;
        Browser.ensured = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(-3)];
          return ret;
        }
  
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/.exec(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', { alpha: false });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
        }
        return ctx;
      },requestFullScreen:function () {
        var canvas = Module['canvas'];
        function fullScreenChange() {
          var isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                        canvas['mozRequestPointerLock'] ||
                                        canvas['webkitRequestPointerLock'];
            canvas.requestPointerLock();
            isFullScreen = true;
          }
          if (Module['onFullScreen']) Module['onFullScreen'](isFullScreen);
        }
  
        document.addEventListener('fullscreenchange', fullScreenChange, false);
        document.addEventListener('mozfullscreenchange', fullScreenChange, false);
        document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      }};
___setErrNo(0);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  


var FUNCTION_TABLE = [0,0,_mrb_mod_undef,0,_false_to_s,0,_mrb_ary_cmp,0,_mrb_time_mon,0,_gc_generational_mode_get,0,_mrb_class_new_class,0,_nil_to_s,0,_mrb_hash_to_hash,0,_flo_to_f,0,_mrb_obj_equal_m,0,_math_atan,0,_true_xor,0,_mrb_str_times,0,_mrb_str_capitalize_bang,0,_mrb_mod_remove_cvar,0,_math_log10,0,_flo_to_s,0,_mrb_str_rindex_m,0,_mrb_obj_public_methods,0,_mrb_ary_unshift_m,0,_math_erf,0,_mrb_str_inspect,0,_fix_to_s,0,_mrb_mod_to_s,0,_fix_minus,0,_mrb_time_getlocal,0,_mod_define_method,0,_mrb_f_global_variables,0,_fix_rev,0,_mrb_range_initialize,0,_mrb_mod_eqq,0,_mrb_ary_size,0,_mrb_bob_not,0,_fix_or,0,_num_round,0,_fix_to_f,0,_mrb_hash_aset,0,_mrb_ary_empty_p,0,_fix_mul,0,_gc_interval_ratio_set,0,_mrb_str_bytesize,0,_mrb_struct_init_copy,0,_mrb_obj_singleton_methods_m,0,_mrb_ary_equal,0,_mrb_struct_eql,0,_mrb_str_size,0,_mrb_any_to_s,0,_mrb_bob_missing,0,_flo_truncate,0,_gc_step_ratio_get,0,_mrb_obj_id_m,0,_true_to_s,0,_mrb_hash_inspect,0,_iv_mark_i,0,_mrb_time_utc,0,_mrb_singleton_class,0,_mrb_mod_const_set,0,_mrb_str_upcase_bang,0,_mrb_time_asctime,0,_mrb_str_chop,0,_mrb_time_utcp,0,_mrb_array_tojs,0,_mrb_hash_empty_p,0,_mrb_ary_inspect,0,_exc_initialize,0,_exc_equal,0,_mrb_mod_module_eval,0,_mrb_hash_clear,0,_mrb_js_array_create,0,_num_div,0,_mrb_f_sprintf,0,_mrb_hash_has_key,0,_mrb_hash_set_default,0,_fix_and,0,_mrb_mod_include,0,_mrb_struct_initialize_m,0,_mrb_struct_inspect,0,_mrb_hash_equal,0,_mrb_sym_to_s,0,_mrb_bob_init,0,_mrb_obj_ivar_set,0,_mrb_str_bytes,0,_mrb_hash_replace,0,_mrb_str_match,0,_sym_cmp,0,_mrb_mod_alias,0,_mrb_str_to_s,0,_mrb_obj_clone,0,_mrb_ary_rindex_m,0,_fix_divmod,0,_mrb_js_get_root_object,0,_mrb_time_yday,0,_num_pow,0,_mrb_obj_instance_eval,0,_fix_lshift,0,_mrb_str_equal_m,0,_mrb_f_raise,0,_math_exp,0,_mrb_str_downcase,0,_int_to_i,0,_mrb_str_to_i,0,_mrb_ary_times,0,_mrb_ary_clear,0,_mrb_printstr,0,_num_eql,0,_mrb_mod_append_features,0,_mrb_hash_shift,0,_fix_mod,0,_mrb_obj_class_m,0,_mrb_time_localtime,0,_mrb_range_end,0,_mrb_time_to_f,0,_mrb_hash_size_m,0,_gv_i,0,_mrb_struct_s_def,0,_num_uplus,0,_math_atanh,0,_mrb_time_usec,0,_mrb_time_plus,0,_mrb_str_aref_m,0,_mrb_false,0,_num_floor,0,_sym_equal,0,_mrb_obj_protected_methods,0,_range_inspect,0,_mrb_time_free,0,_math_sinh,0,_mrb_str_reverse_bang,0,_mrb_obj_ivar_get,0,_math_asin,0,_flo_mod,0,_mrb_mod_const_defined,0,_mrb_time_year,0,_num_cmp,0,_math_erfc,0,_mrb_range_beg,0,_mrb_ary_shift,0,_mrb_equal_m,0,_mrb_mod_included_modules,0,_mrb_struct_aset,0,_mrb_time_dstp,0,_range_eql,0,_mrb_time_at,0,_mrb_mod_remove_method,0,_allocf,0,_mrb_time_mday,0,_mrb_mod_cvar_get,0,_mrb_proc_init_copy,0,_mrb_hash_set_default_proc,0,_mrb_ary_concat_m,0,_mrb_ary_reverse_bang,0,_range_to_s,0,_mrb_hash_values,0,_mrb_struct_equal,0,_mruby_js_object_handle_free,0,_mrb_ary_delete_at,0,_mrb_ary_reverse,0,_mrb_true,0,_gc_start,0,_flo_eq,0,_gc_enable,0,_true_or,0,_mrb_time_gm,0,_mrb_obj_dup,0,_mrb_ary_join_m,0,_mrb_struct_ref,0,_mrb_hash_default,0,_flo_hash,0,_mrb_js_obj_initialize,0,_flo_ceil,0,_mrb_mod_extend_object,0,_mrb_obj_ivar_defined,0,_range_initialize_copy,0,_gc_interval_ratio_get,0,_mrb_obj_private_methods,0,_mrb_mod_const_get,0,_iv_i,0,_false_and,0,_mrb_time_sec,0,_mrb_obj_not_equal_m,0,_math_frexp,0,_mrb_str_cmp_m,0,_mrb_hash_keys,0,_mrb_hash_default_proc,0,_mrb_f_send,0,_mrb_range_excl,0,_mrb_hash_init_core,0,_exc_inspect,0,_mrb_time_initialize,0,_math_cos,0,_math_tanh,0,_mrb_hash_has_value,0,_mrb_str_intern,0,_mrb_class_superclass,0,_false_xor,0,_fix_equal,0,_true_and,0,_mrb_mod_method_defined,0,_mrb_mod_include_p,0,_mrb_struct_s_members_m,0,_gc_step_ratio_set,0,_mrb_str_upcase,0,_mrb_f_block_given_p_m,0,_mrb_range_each,0,_proc_lambda,0,_fix_rshift,0,_mrb_time_getutc,0,_mrb_str_empty_p,0,_obj_is_instance_of,0,_exc_to_s,0,_inspect_i,0,_mrb_str_split_m,0,_flo_finite_p,0,_flo_infinite_p,0,_exc_exception,0,_mrb_mod_cvar_defined,0,_math_tan,0,_nil_inspect,0,_flo_round,0,_flo_minus,0,_mrb_range_eq,0,_mrb_struct_aref,0,_mrb_time_initialize_copy,0,_mrb_obj_methods_m,0,_math_acos,0,_false_or,0,_num_uminus,0,_mrb_str_include,0,_mrb_time_minus,0,_mrb_str_reverse,0,_math_sin,0,_math_ldexp,0,_mrb_str_init,0,_math_atan2,0,_mrb_time_cmp,0,_math_acosh,0,_fix_plus,0,_math_log,0,_mrb_str_chomp_bang,0,_mrb_time_wday,0,_mrb_obj_instance_variables,0,_mrb_proc_initialize,0,_mrb_obj_extend_m,0,_mrb_str_downcase_bang,0,_mrb_time_hour,0,_mrb_str_to_f,0,_mrb_js_obj_create,0,_mrb_time_now,0,_fix_xor,0,_mrb_ary_last,0,_mrb_struct_set_m,0,_mrb_obj_is_kind_of_m,0,_fix_succ,0,_mrb_time_min,0,_mrb_ary_pop,0,_csym_i,0,_mrb_str_index_m,0,_mrb_struct_ref8,0,_mrb_struct_ref9,0,_mrb_struct_ref6,0,_mrb_struct_ref7,0,_mrb_struct_ref4,0,_mrb_struct_ref5,0,_mrb_struct_ref2,0,_mrb_struct_ref3,0,_mrb_struct_ref0,0,_mrb_struct_ref1,0,_mrb_ary_eql,0,_mrb_hash_aget,0,_mrb_ary_aset,0,_mrb_str_replace,0,_mrb_mod_cvar_set,0,_mrb_mod_remove_const,0,_mrb_str_chomp,0,_mrb_js_obj_get,0,_mrb_ary_index_m,0,_flo_plus,0,_mrb_time_to_i,0,_mrb_js_obj_set,0,_cv_i,0,_mrb_str_plus_m,0,_mrb_str_hash_m,0,_mrb_str_chop_bang,0,_obj_respond_to,0,_mrb_ary_push_m,0,_fix_uminus,0,_exc_message,0,_mrb_hash_eql,0,_math_log2,0,_mrb_hash_delete,0,_math_asinh,0,_mrb_str_eql,0,_gc_disable,0,_flo_floor,0,_mrb_ary_replace_m,0,_mrb_struct_members_m,0,_int_succ,0,_mrb_mod_instance_methods,0,_math_sqrt,0,_math_cosh,0,_mrb_time_day,0,_mrb_ary_plus,0,_mrb_obj_hash,0,_mrb_js_func_invoke_internal,0,_sym_inspect,0,_mrb_time_zone,0,_gc_generational_mode_set,0,_flo_mul,0,_num_abs,0,_mrb_time_eq,0,_mrb_mod_class_variables,0,_mrb_range_include,0,_mrb_ary_aget,0,_mrb_ary_first,0,_mrb_obj_remove_instance_variable,0,_mrb_str_capitalize,0,_mrb_mod_ancestors,0,_mrb_instance_new,0,_mrb_obj_init_copy,0,_mrb_ary_s_create,0,_sym_to_sym,0,_math_cbrt,0,_mrb_obj_inspect,0,_mrb_time_local,0,_math_hypot,0];

function _bin_to_uint16(r1, r2) {
  return (r1 & 255) << 8 | r2 & 255;
}
function _mrb_obj_value(r1, r2) {
  var r3;
  r3 = HEAP32[r2 >> 2] & 255;
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = r3;
  return;
}
function _bin_to_uint32(r1) {
  return HEAPU8[r1 + 1 | 0] << 16 | HEAPU8[r1] << 24 | HEAPU8[r1 + 2 | 0] << 8 | HEAPU8[r1 + 3 | 0];
}
function _hex_to_uint8(r1, r2) {
  return HEAP8[(r1 & 255) + 5310356 | 0] << 4 | HEAP8[(r2 & 255) + 5310356 | 0];
}
function _mrb_nil_value(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_fixnum_value(r1, r2) {
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 3;
  return;
}
function _mrb_float_value(r1, r2) {
  HEAPF32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 6;
  return;
}
function _mrb_proc_copy(r1, r2) {
  var r3;
  r3 = r1;
  HEAP32[r3 >> 2] = HEAP32[r3 >> 2] & 2047 | HEAP32[r2 >> 2] & -2048;
  HEAP32[r1 + 12 >> 2] = HEAP32[r2 + 12 >> 2];
  HEAP32[r1 + 16 >> 2] = HEAP32[r2 + 16 >> 2];
  HEAP32[r1 + 20 >> 2] = HEAP32[r2 + 20 >> 2];
  return;
}
function _webruby_internal_run(r1) {
  var r2, r3;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  _mrb_load_irep(r2, r1, 5313712);
  r3 = _check_and_print_errors(r1);
  STACKTOP = r2;
  return r3;
}
Module["_webruby_internal_run"] = _webruby_internal_run;
function _check_and_print_errors(r1) {
  var r2, r3, r4, r5;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r3 = r2;
  r4 = HEAP32[r1 + 48 >> 2];
  if ((r4 | 0) == 0) {
    r5 = 0;
  } else {
    _mrb_obj_value(r3, r4 | 0);
    _mrb_p(r1, r3);
    r5 = 1;
  }
  STACKTOP = r2;
  return r5;
}
function _webruby_internal_run_bytecode(r1, r2) {
  var r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  _mrb_load_irep(r3, r1, r2);
  r2 = _check_and_print_errors(r1);
  STACKTOP = r3;
  return r2;
}
Module["_webruby_internal_run_bytecode"] = _webruby_internal_run_bytecode;
function _webruby_internal_run_source(r1, r2) {
  var r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  _mrb_load_string(r3, r1, r2);
  r2 = _check_and_print_errors(r1);
  STACKTOP = r3;
  return r2;
}
Module["_webruby_internal_run_source"] = _webruby_internal_run_source;
function _mrb_read_irep(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20;
  r3 = 0;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  r5 = r4;
  r6 = r4 + 4;
  HEAP32[r5 >> 2] = 0;
  if ((r1 | 0) == 0 | (r2 | 0) == 0) {
    r7 = -7;
    STACKTOP = r4;
    return r7;
  }
  r8 = (r1 + 60 | 0) >> 2;
  r9 = HEAP32[r8];
  r10 = _read_rite_header(r2, r6);
  if ((r10 | 0) < 0) {
    r7 = r10;
    STACKTOP = r4;
    return r7;
  }
  r11 = r2 + 54 | 0;
  L22 : do {
    if ((r10 | 0) > 0) {
      r2 = 0;
      r12 = r11;
      while (1) {
        r13 = _read_rite_irep_record(r1, r12 + 4 | 0, r5);
        if ((r13 | 0) != 0) {
          r14 = r13;
          break L22;
        }
        r13 = r12 + HEAP32[r5 >> 2] + 4 | 0;
        r15 = r2 + 1 | 0;
        if ((r15 | 0) < (r10 | 0)) {
          r2 = r15;
          r12 = r13;
        } else {
          r16 = r13;
          r3 = 20;
          break L22;
        }
      }
    } else {
      r16 = r11;
      r3 = 20;
    }
  } while (0);
  do {
    if (r3 == 20) {
      r11 = (_bin_to_uint32(r16) | 0) != 0;
      if (r11) {
        r14 = r11 << 31 >> 31;
        break;
      }
      r7 = (_hex_to_uint8(HEAP8[r6 + 42 | 0], HEAP8[r6 + 43 | 0]) & 255) + r9 | 0;
      STACKTOP = r4;
      return r7;
    }
  } while (0);
  r6 = HEAP32[r8];
  if (r9 >>> 0 >= r6 >>> 0) {
    r7 = r14;
    STACKTOP = r4;
    return r7;
  }
  r16 = (r1 + 56 | 0) >> 2;
  r3 = r9;
  r9 = r6;
  while (1) {
    r6 = HEAP32[HEAP32[r16] + (r3 << 2) >> 2];
    if ((r6 | 0) == 0) {
      r17 = r9;
    } else {
      r11 = HEAP32[r6 + 8 >> 2];
      if ((r11 | 0) == 0) {
        r18 = r6;
      } else {
        _mrb_free(r1, r11);
        r18 = HEAP32[HEAP32[r16] + (r3 << 2) >> 2];
      }
      r11 = HEAP32[r18 + 12 >> 2];
      if ((r11 | 0) == 0) {
        r19 = r18;
      } else {
        _mrb_free(r1, r11);
        r19 = HEAP32[HEAP32[r16] + (r3 << 2) >> 2];
      }
      r11 = HEAP32[r19 + 16 >> 2];
      if ((r11 | 0) == 0) {
        r20 = r19;
      } else {
        _mrb_free(r1, r11);
        r20 = HEAP32[HEAP32[r16] + (r3 << 2) >> 2];
      }
      _mrb_free(r1, r20 | 0);
      r17 = HEAP32[r8];
    }
    r11 = r3 + 1 | 0;
    if (r11 >>> 0 < r17 >>> 0) {
      r3 = r11;
      r9 = r17;
    } else {
      r7 = r14;
      break;
    }
  }
  STACKTOP = r4;
  return r7;
}
_mrb_read_irep["X"] = 1;
function _read_rite_header(r1, r2) {
  var r3, r4;
  r3 = r2 | 0;
  _memcpy(r3, r1, 52);
  if ((_memcmp(r3, 5326560, 4) | 0) != 0) {
    r4 = -5;
    return r4;
  }
  if ((_memcmp(r2 + 12 | 0, 5323636, 8) | 0) != 0) {
    r4 = -5;
    return r4;
  }
  if (_calc_crc_16_ccitt(r3, 52) << 16 >> 16 != _bin_to_uint16(HEAP8[r1 + 52 | 0], HEAP8[r1 + 53 | 0]) << 16 >> 16) {
    r4 = -5;
    return r4;
  }
  r4 = _bin_to_uint16(HEAP8[r2 + 40 | 0], HEAP8[r2 + 41 | 0]) & 65535;
  return r4;
}
function _read_rite_irep_record(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 16;
  r8 = r4 + 24;
  r9 = _mrb_gc_arena_save(HEAP32[r1 + 544 >> 2]);
  r10 = _mrb_add_irep(r1);
  r11 = _mrb_malloc(r1, 128);
  L61 : do {
    if ((r11 | 0) == 0) {
      r12 = -1;
      r13 = 0;
    } else {
      if (HEAP8[r2] << 24 >> 24 != 83) {
        r14 = -6;
        STACKTOP = r4;
        return r14;
      }
      r15 = r10;
      HEAP32[r15 >> 2] = (_bin_to_uint16(HEAP8[r2 + 2 | 0], HEAP8[r2 + 3 | 0]) & 65535) << 16 | HEAP32[r15 >> 2] & 65535;
      r15 = r10 + 4 | 0;
      HEAP32[r15 >> 2] = _bin_to_uint16(HEAP8[r2 + 4 | 0], HEAP8[r2 + 5 | 0]) & 65535 | HEAP32[r15 >> 2] & -65536;
      r15 = r2;
      if (_calc_crc_16_ccitt(r2, 8) << 16 >> 16 != _bin_to_uint16(HEAP8[r2 + 8 | 0], HEAP8[r2 + 9 | 0]) << 16 >> 16) {
        r14 = -6;
        STACKTOP = r4;
        return r14;
      }
      r16 = _bin_to_uint16(HEAP8[r2 + 6 | 0], HEAP8[r2 + 7 | 0]) & 65535;
      r17 = r16 + (r2 + 8) | 0;
      r18 = _bin_to_uint32(r17);
      r19 = (r10 + 28 | 0) >> 2;
      HEAP32[r19] = r18;
      r20 = r16 + (r2 + 12) | 0;
      L69 : do {
        if ((r18 | 0) > 0) {
          r16 = _mrb_malloc(r1, r18 << 2);
          r21 = r16;
          r22 = r10 + 8 | 0;
          HEAP32[r22 >> 2] = r21;
          if ((r16 | 0) == 0) {
            r12 = -1;
            r13 = r11;
            break L61;
          }
          if ((HEAP32[r19] | 0) > 0) {
            r23 = 0;
            r24 = r20;
            r25 = r21;
          } else {
            r26 = r20;
            break;
          }
          while (1) {
            HEAP32[r25 + (r23 << 2) >> 2] = _bin_to_uint32(r24);
            r21 = r24 + 4 | 0;
            r16 = r23 + 1 | 0;
            if ((r16 | 0) >= (HEAP32[r19] | 0)) {
              r26 = r21;
              break L69;
            }
            r23 = r16;
            r24 = r21;
            r25 = HEAP32[r22 >> 2];
          }
        } else {
          r26 = r20;
        }
      } while (0);
      if (_calc_crc_16_ccitt(r17, r26 - r17 | 0) << 16 >> 16 != _bin_to_uint16(HEAP8[r26], HEAP8[r26 + 1 | 0]) << 16 >> 16) {
        r12 = -6;
        r13 = r11;
        break;
      }
      r20 = r26 + 2 | 0;
      r19 = _bin_to_uint32(r20);
      r18 = r26 + 6 | 0;
      L77 : do {
        if ((r19 | 0) > 0) {
          r22 = _mrb_malloc(r1, r19 << 3);
          r21 = (r10 + 12 | 0) >> 2;
          HEAP32[r21] = r22;
          if ((r22 | 0) == 0) {
            r12 = -1;
            r13 = r11;
            break L61;
          }
          r22 = r8;
          r16 = r10 + 32 | 0;
          r27 = r5;
          r28 = r6;
          r29 = r7;
          r30 = 128;
          r31 = r11;
          r32 = 0;
          r33 = r18;
          while (1) {
            r34 = HEAP8[r33];
            r35 = _bin_to_uint16(HEAP8[r33 + 1 | 0], HEAP8[r33 + 2 | 0]);
            r36 = r33 + 3 | 0;
            r37 = r35 & 65535;
            if ((r37 | 0) > ((r30 & 65535) - 1 | 0)) {
              _mrb_free(r1, r31);
              r38 = r35 + 1 & 65535;
              r35 = _mrb_malloc(r1, r38 & 65535);
              if ((r35 | 0) == 0) {
                r12 = -1;
                r13 = 0;
                break L61;
              } else {
                r39 = r35;
                r40 = r38;
              }
            } else {
              r39 = r31;
              r40 = r30;
            }
            _memcpy(r39, r36, r37);
            r36 = r37 + (r33 + 3) | 0;
            HEAP8[r39 + r37 | 0] = 0;
            r38 = r34 & 255;
            if ((r38 | 0) == 3) {
              r34 = _strtol(r39, 0, 10);
              r35 = (r32 << 3) + HEAP32[r21] | 0;
              _mrb_fixnum_value(r5, r34);
              r34 = r35;
              r35 = r27 | 0;
              r41 = r27 + 4 | 0;
              r42 = HEAP32[r41 >> 2];
              r43 = r34 | 0;
              HEAP32[r43 >> 2] = HEAP32[r35 >> 2];
              r44 = r34 + 4 | 0;
              HEAP32[r44 >> 2] = r42;
            } else if ((r38 | 0) == 6) {
              r42 = _strtod(r39, 0);
              r34 = (r32 << 3) + HEAP32[r21] | 0;
              _mrb_float_value(r6, r42);
              r42 = r34;
              r35 = r28 | 0;
              r41 = r28 + 4 | 0;
              r34 = HEAP32[r41 >> 2];
              r43 = r42 | 0;
              HEAP32[r43 >> 2] = HEAP32[r35 >> 2];
              r44 = r42 + 4 | 0;
              HEAP32[r44 >> 2] = r34;
            } else if ((r38 | 0) == 17) {
              r38 = (r32 << 3) + HEAP32[r21] | 0;
              _mrb_str_new(r7, r1, r39, r37);
              r37 = r38;
              r38 = r29 | 0;
              r34 = r29 + 4 | 0;
              r44 = HEAP32[r34 >> 2];
              r42 = r37 | 0;
              HEAP32[r42 >> 2] = HEAP32[r38 >> 2];
              r35 = r37 + 4 | 0;
              HEAP32[r35 >> 2] = r44;
            } else {
              r44 = (r32 << 3) + HEAP32[r21] | 0;
              _mrb_nil_value(r8);
              r37 = r44;
              r38 = r22 | 0;
              r34 = r22 + 4 | 0;
              r44 = HEAP32[r34 >> 2];
              r42 = r37 | 0;
              HEAP32[r42 >> 2] = HEAP32[r38 >> 2];
              r35 = r37 + 4 | 0;
              HEAP32[r35 >> 2] = r44;
            }
            HEAP32[r16 >> 2] = HEAP32[r16 >> 2] + 1 | 0;
            _mrb_gc_arena_restore(r1, r9);
            r44 = r32 + 1 | 0;
            if ((r44 | 0) < (r19 | 0)) {
              r30 = r40;
              r31 = r39;
              r32 = r44;
              r33 = r36;
            } else {
              r45 = r36;
              r46 = r39;
              r47 = r40;
              break L77;
            }
          }
        } else {
          r45 = r18;
          r46 = r11;
          r47 = 128;
        }
      } while (0);
      if (_calc_crc_16_ccitt(r20, r45 - r20 | 0) << 16 >> 16 != _bin_to_uint16(HEAP8[r45], HEAP8[r45 + 1 | 0]) << 16 >> 16) {
        r12 = -6;
        r13 = r46;
        break;
      }
      r18 = r45 + 2 | 0;
      r19 = _bin_to_uint32(r18);
      r17 = (r10 + 36 | 0) >> 2;
      HEAP32[r17] = r19;
      r33 = r45 + 6 | 0;
      L93 : do {
        if ((r19 | 0) > 0) {
          r32 = _mrb_malloc(r1, r19 << 1);
          r31 = r32;
          r30 = (r10 + 16 | 0) >> 2;
          HEAP32[r30] = r31;
          if ((r32 | 0) == 0) {
            r12 = -1;
            r13 = r46;
            break L61;
          }
          if ((HEAP32[r17] | 0) > 0) {
            r48 = 1;
            r49 = r31;
          } else {
            r50 = r33;
            r51 = r46;
            break;
          }
          while (1) {
            HEAP16[r49 >> 1] = 0;
            r52 = HEAP32[r17];
            if ((r48 | 0) >= (r52 | 0)) {
              break;
            }
            r48 = r48 + 1 | 0;
            r49 = HEAP32[r30];
          }
          if ((r52 | 0) > 0) {
            r53 = r47;
            r54 = r46;
            r55 = 0;
            r56 = r33;
          } else {
            r50 = r33;
            r51 = r46;
            break;
          }
          while (1) {
            r31 = _bin_to_uint16(HEAP8[r56], HEAP8[r56 + 1 | 0]);
            r32 = r56 + 2 | 0;
            r16 = r31 & 65535;
            if (r31 << 16 >> 16 == -1) {
              HEAP16[HEAP32[r30] + (r55 << 1) >> 1] = 0;
              r57 = r32;
              r58 = r54;
              r59 = r53;
            } else {
              if ((r16 | 0) > ((r53 & 65535) - 1 | 0)) {
                _mrb_free(r1, r54);
                r22 = r31 + 1 & 65535;
                r31 = _mrb_malloc(r1, r22 & 65535);
                if ((r31 | 0) == 0) {
                  r12 = -1;
                  r13 = 0;
                  break L61;
                } else {
                  r60 = r31;
                  r61 = r22;
                }
              } else {
                r60 = r54;
                r61 = r53;
              }
              _memcpy(r60, r32, r16);
              HEAP8[r60 + r16 | 0] = 0;
              r32 = _mrb_intern2(r1, r60, r16);
              HEAP16[HEAP32[r30] + (r55 << 1) >> 1] = r32;
              r57 = r16 + (r56 + 2) | 0;
              r58 = r60;
              r59 = r61;
            }
            r16 = r55 + 1 | 0;
            if ((r16 | 0) < (HEAP32[r17] | 0)) {
              r53 = r59;
              r54 = r58;
              r55 = r16;
              r56 = r57;
            } else {
              r50 = r57;
              r51 = r58;
              break L93;
            }
          }
        } else {
          r50 = r33;
          r51 = r46;
        }
      } while (0);
      if (_calc_crc_16_ccitt(r18, r50 - r18 | 0) << 16 >> 16 != _bin_to_uint16(HEAP8[r50], HEAP8[r50 + 1 | 0]) << 16 >> 16) {
        r12 = -6;
        r13 = r51;
        break;
      }
      HEAP32[r3 >> 2] = r50 + 2 - r15 | 0;
      r12 = 0;
      r13 = r51;
    }
  } while (0);
  _mrb_free(r1, r13);
  r14 = r12;
  STACKTOP = r4;
  return r14;
}
_read_rite_irep_record["X"] = 1;
function _irep_error(r1) {
  var r2, r3;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r3 = r2;
  _mrb_exc_new(r3, r1, _mrb_class_obj_get(r1, 5322800), 5310340, 15);
  HEAP32[r1 + 48 >> 2] = HEAP32[r3 >> 2];
  STACKTOP = r2;
  return;
}
function _mrb_load_irep(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r4;
  r6 = _mrb_read_irep(r2, r3);
  if ((r6 | 0) < 0) {
    _irep_error(r2);
    _mrb_nil_value(r1);
    STACKTOP = r4;
    return;
  } else {
    r3 = _mrb_proc_new(r2, HEAP32[HEAP32[r2 + 56 >> 2] + (r6 << 2) >> 2]);
    _mrb_top_self(r5);
    _mrb_run(r1, r2, r3, r5);
    STACKTOP = r4;
    return;
  }
}
function _mrb_p(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = r3;
  _mrb_funcall(r4, r1, r2, 5325664, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  r1 = r4;
  r4 = r2;
  r5 = HEAP32[r1 + 4 >> 2];
  HEAP32[r4 >> 2] = HEAP32[r1 >> 2];
  HEAP32[r4 + 4 >> 2] = r5;
  _printstr(r2);
  _fputc(10, HEAP32[_stdout >> 2]);
  STACKTOP = r3;
  return;
}
function _printstr(r1) {
  var r2, r3;
  r2 = STACKTOP;
  r3 = r1;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r1 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r1 + 4 >> 2] = HEAP32[r3 + 4 >> 2];
  if ((HEAP32[r1 + 4 >> 2] & 255 | 0) != 17) {
    STACKTOP = r2;
    return;
  }
  r3 = HEAP32[r1 >> 2];
  _fwrite(HEAP32[r3 + 20 >> 2], HEAP32[r3 + 12 >> 2], 1, HEAP32[_stdout >> 2]);
  STACKTOP = r2;
  return;
}
function _mrb_printstr(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _printstr(r5);
  r2 = r5;
  r5 = r1;
  r1 = HEAP32[r2 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r2 >> 2];
  HEAP32[r5 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_init_print(r1) {
  _mrb_define_method(r1, HEAP32[r1 + 124 >> 2], 5322100, 208);
  return;
}
function _mrb_proc_new(r1, r2) {
  var r3, r4, r5, r6;
  r3 = _mrb_obj_alloc(r1, 14, HEAP32[r1 + 84 >> 2]), r4 = r3 >> 2;
  r5 = HEAP32[r1 + 20 >> 2];
  if ((r5 | 0) == 0) {
    r6 = 0;
  } else {
    r6 = HEAP32[r5 + 28 >> 2];
  }
  HEAP32[r4 + 4] = r6;
  HEAP32[r4 + 3] = r2;
  HEAP32[r4 + 5] = 0;
  return r3;
}
function _mrb_closure_new(r1, r2) {
  var r3;
  r3 = _mrb_proc_new(r1, r2);
  _closure_setup(r1, r3, HEAP32[HEAP32[HEAP32[HEAP32[r1 + 20 >> 2] + 4 >> 2] + 12 >> 2] >> 2] >> 16);
  return r3;
}
function _closure_setup(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = (r1 + 20 | 0) >> 2;
  r5 = HEAP32[r4];
  r6 = HEAP32[r5 + 40 >> 2];
  if ((r6 | 0) != 0) {
    r7 = r6;
    r8 = r2 + 20 | 0;
    HEAP32[r8 >> 2] = r7;
    return;
  }
  r6 = _mrb_obj_alloc(r1, 24, HEAP32[HEAP32[r5 + 4 >> 2] + 20 >> 2]);
  r5 = r6;
  r9 = r6;
  HEAP32[r9 >> 2] = HEAP32[r9 >> 2] & 2047 | r3 << 11;
  HEAP16[r6 + 16 >> 1] = HEAP16[HEAP32[r4] >> 1];
  HEAP32[r6 + 20 >> 2] = (HEAP32[r4] - HEAP32[r1 + 24 >> 2] | 0) / 44 & -1;
  HEAP32[r6 + 12 >> 2] = HEAP32[r1 + 8 >> 2];
  HEAP32[HEAP32[r4] + 40 >> 2] = r5;
  r7 = r5;
  r8 = r2 + 20 | 0;
  HEAP32[r8 >> 2] = r7;
  return;
}
function _mrb_proc_new_cfunc(r1, r2) {
  var r3;
  r3 = _mrb_obj_alloc(r1, 14, HEAP32[r1 + 84 >> 2]);
  HEAP32[r3 + 12 >> 2] = r2;
  r2 = r3;
  HEAP32[r2 >> 2] = HEAP32[r2 >> 2] | 262144;
  return r3;
}
function _mrb_init_proc(r1) {
  var r2, r3, r4, r5;
  r2 = _mrb_alloca(r1), r3 = r2 >> 2;
  if ((r2 | 0) == 0) {
    return;
  }
  r4 = r2;
  for (r2 = r3, r5 = r2 + 10; r2 < r5; r2++) {
    HEAP32[r2] = 0;
  }
  HEAP32[r3 + 1] = 65536;
  HEAP32[r3] = 65535;
  HEAP32[r3 + 2] = 5313540;
  HEAP32[r3 + 7] = 1;
  r3 = _mrb_define_class(r1, 5319272, HEAP32[r1 + 72 >> 2]);
  r2 = (r1 + 84 | 0) >> 2;
  HEAP32[r2] = r3;
  r5 = r3;
  HEAP32[r5 >> 2] = HEAP32[r5 >> 2] & -522241 | 28672;
  _mrb_define_method(r1, HEAP32[r2], 5323508, 484);
  _mrb_define_method(r1, HEAP32[r2], 5318996, 296);
  r5 = _mrb_proc_new(r1, r4);
  _mrb_define_method_raw(r1, HEAP32[r2], _mrb_intern(r1, 5320144), r5);
  _mrb_define_method_raw(r1, HEAP32[r2], _mrb_intern(r1, 5322620), r5);
  r5 = r1 + 124 | 0;
  _mrb_define_class_method(r1, HEAP32[r5 >> 2], 5316904, 410);
  _mrb_define_method(r1, HEAP32[r5 >> 2], 5316904, 410);
  return;
}
function _mrb_proc_initialize(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5, r7 = r6 >> 2;
  _mrb_get_args(r2, 5320552, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r6, tempInt));
  do {
    if ((HEAP32[r7 + 1] & 255 | 0) == 0) {
      r6 = HEAP32[r7];
      if ((r6 | 0) == 0) {
        _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5314580);
        break;
      } else {
        r8 = r6;
        r4 = 123;
        break;
      }
    } else {
      r8 = HEAP32[r7];
      r4 = 123;
      break;
    }
  } while (0);
  if (r4 == 123) {
    _mrb_proc_copy(HEAP32[r3 >> 2], r8);
  }
  r8 = r3;
  r3 = r1;
  r1 = HEAP32[r8 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r8 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r5;
  return;
}
function _mrb_obj_value17(r1, r2) {
  var r3;
  r3 = HEAP32[r2 >> 2] & 255;
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = r3;
  return;
}
function _mrb_top_self(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 8;
  return;
}
function _str_with_class(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  HEAP32[r1 + 4 >> 2] = HEAP32[HEAP32[r2 >> 2] + 4 >> 2];
  STACKTOP = r3;
  return;
}
function _mrb_obj_value39(r1, r2) {
  var r3;
  r3 = HEAP32[r2 >> 2] & 255;
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = r3;
  return;
}
function _mrb_proc_init_copy(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((HEAP32[r5 + 4 >> 2] & 255 | 0) != 14) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5326548);
  }
  _mrb_proc_copy(HEAP32[r3 >> 2], HEAP32[r5 >> 2]);
  r5 = r3;
  r3 = r1;
  r1 = HEAP32[r5 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _proc_lambda(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4, r3 = r5 >> 2;
  _mrb_get_args(r2, 5320552, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  do {
    if ((HEAP32[r3 + 1] & 255 | 0) == 0) {
      if ((HEAP32[r3] | 0) != 0) {
        break;
      }
      _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5314580);
    }
  } while (0);
  r6 = HEAP32[r3];
  if ((HEAP32[r6 >> 2] & 524288 | 0) == 0) {
    r3 = _mrb_obj_alloc(r2, 14, HEAP32[r6 + 4 >> 2]);
    _mrb_proc_copy(r3, r6);
    r6 = r3;
    HEAP32[r6 >> 2] = HEAP32[r6 >> 2] | 524288;
    _mrb_obj_value17(r1, r3 | 0);
    STACKTOP = r4;
    return;
  } else {
    r3 = r5;
    r5 = r1;
    r1 = HEAP32[r3 + 4 >> 2];
    HEAP32[r5 >> 2] = HEAP32[r3 >> 2];
    HEAP32[r5 + 4 >> 2] = r1;
    STACKTOP = r4;
    return;
  }
}
function _mrb_open_allocf() {
  var r1, r2, r3, r4, r5, r6;
  r1 = _allocf(0, 0, 612, 0);
  r2 = r1;
  if ((r1 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r4 = r1 + 4 | 0;
  for (r5 = r1 >> 2, r6 = r5 + 153; r5 < r6; r5++) {
    HEAP32[r5] = 0;
  }
  HEAP32[r4 >> 2] = 290;
  HEAP32[r1 + 552 >> 2] = 1;
  _mrb_init_heap(r2);
  _mrb_init_core(r2);
  r3 = r2;
  return r3;
}
function _mrb_alloca(r1) {
  var r2, r3;
  r2 = _mrb_malloc(r1, 44);
  r3 = r1 + 588 | 0;
  HEAP32[r2 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r3 >> 2] = r2;
  return r2 + 4 | 0;
}
function _mrb_open() {
  return _mrb_open_allocf();
}
Module["_mrb_open"] = _mrb_open;
function _allocf(r1, r2, r3, r4) {
  var r5;
  if ((r3 | 0) == 0) {
    _free(r2);
    r5 = 0;
  } else {
    r5 = _realloc(r2, r3);
  }
  return r5;
}
function _mrb_close(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  _mrb_final_core(r1);
  _mrb_gc_free_gv(HEAP32[r1 + 52 >> 2]);
  _mrb_free(r1, HEAP32[r1 + 12 >> 2]);
  _mrb_free(r1, HEAP32[r1 + 24 >> 2]);
  r2 = r1 + 60 | 0;
  r3 = (r1 + 56 | 0) >> 2;
  r4 = HEAP32[r3];
  if ((HEAP32[r2 >> 2] | 0) == 0) {
    r5 = r4;
    r6 = r5;
    _mrb_free(r1, r6);
    r7 = r1 + 32 | 0;
    r8 = HEAP32[r7 >> 2];
    r9 = r8;
    _mrb_free(r1, r9);
    r10 = r1 + 40 | 0;
    r11 = HEAP32[r10 >> 2];
    r12 = r11;
    _mrb_free(r1, r12);
    _mrb_free_symtbl(r1);
    _mrb_free_heap(r1);
    _mrb_alloca_free(r1);
    r13 = r1;
    _mrb_free(r1, r13);
    return;
  } else {
    r14 = 0;
    r15 = r4;
  }
  while (1) {
    r4 = HEAP32[r15 + (r14 << 2) >> 2];
    if ((HEAP32[r4 + 4 >> 2] & 65536 | 0) == 0) {
      _mrb_free(r1, HEAP32[r4 + 8 >> 2]);
      r16 = HEAP32[HEAP32[r3] + (r14 << 2) >> 2];
    } else {
      r16 = r4;
    }
    _mrb_free(r1, HEAP32[r16 + 12 >> 2]);
    _mrb_free(r1, HEAP32[HEAP32[HEAP32[r3] + (r14 << 2) >> 2] + 16 >> 2]);
    _mrb_free(r1, HEAP32[HEAP32[HEAP32[r3] + (r14 << 2) >> 2] + 24 >> 2]);
    _mrb_free(r1, HEAP32[HEAP32[r3] + (r14 << 2) >> 2] | 0);
    r4 = r14 + 1 | 0;
    r17 = HEAP32[r3];
    if (r4 >>> 0 < HEAP32[r2 >> 2] >>> 0) {
      r14 = r4;
      r15 = r17;
    } else {
      r5 = r17;
      break;
    }
  }
  r6 = r5;
  _mrb_free(r1, r6);
  r7 = r1 + 32 | 0;
  r8 = HEAP32[r7 >> 2];
  r9 = r8;
  _mrb_free(r1, r9);
  r10 = r1 + 40 | 0;
  r11 = HEAP32[r10 >> 2];
  r12 = r11;
  _mrb_free(r1, r12);
  _mrb_free_symtbl(r1);
  _mrb_free_heap(r1);
  _mrb_alloca_free(r1);
  r13 = r1;
  _mrb_free(r1, r13);
  return;
}
Module["_mrb_close"] = _mrb_close;
_mrb_close["X"] = 1;
function _mrb_alloca_free(r1) {
  var r2, r3;
  r2 = HEAP32[r1 + 588 >> 2];
  if ((r2 | 0) == 0) {
    return;
  } else {
    r3 = r2;
  }
  while (1) {
    r2 = HEAP32[r3 >> 2];
    _mrb_free(r1, r3);
    if ((r2 | 0) == 0) {
      break;
    } else {
      r3 = r2;
    }
  }
  return;
}
function _mrb_add_irep(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10;
  r2 = (r1 + 56 | 0) >> 2;
  r3 = HEAP32[r2];
  L200 : do {
    if ((r3 | 0) == 0) {
      r4 = HEAP32[r1 + 60 >> 2];
      r5 = r4 >>> 0 > 256 ? r4 + 1 | 0 : 256;
      HEAP32[r2] = _mrb_calloc(r1, r5, 4);
      HEAP32[r1 + 64 >> 2] = r5;
    } else {
      r5 = (r1 + 64 | 0) >> 2;
      r4 = HEAP32[r5];
      r6 = HEAP32[r1 + 60 >> 2];
      if (r4 >>> 0 > r6 >>> 0) {
        break;
      } else {
        r7 = r4;
      }
      while (1) {
        r8 = r7 << 1;
        if (r8 >>> 0 > r6 >>> 0) {
          break;
        } else {
          r7 = r8;
        }
      }
      HEAP32[r5] = r8;
      r6 = _mrb_realloc(r1, r3, r7 << 3);
      HEAP32[r2] = r6;
      if (r4 >>> 0 < HEAP32[r5] >>> 0) {
        r9 = r4;
        r10 = r6;
      } else {
        break;
      }
      while (1) {
        HEAP32[r10 + (r9 << 2) >> 2] = 0;
        r6 = r9 + 1 | 0;
        if (r6 >>> 0 >= HEAP32[r5] >>> 0) {
          break L200;
        }
        r9 = r6;
        r10 = HEAP32[r2];
      }
    }
  } while (0);
  r10 = _mrb_malloc(r1, 40);
  r9 = r10;
  for (r7 = r10 >> 2, r3 = r7 + 10; r7 < r3; r7++) {
    HEAP32[r7] = 0;
  }
  r7 = (r1 + 60 | 0) >> 2;
  HEAP32[HEAP32[r2] + (HEAP32[r7] << 2) >> 2] = r9;
  r2 = HEAP32[r7];
  HEAP32[r7] = r2 + 1 | 0;
  r7 = r10;
  HEAP32[r7 >> 2] = HEAP32[r7 >> 2] & -65536 | r2 & 65535;
  return r9;
}
_mrb_add_irep["X"] = 1;
function _mrb_str_decref(r1, r2) {
  var r3, r4;
  r3 = r2 | 0;
  r4 = HEAP32[r3 >> 2] - 1 | 0;
  HEAP32[r3 >> 2] = r4;
  if ((r4 | 0) != 0) {
    return;
  }
  _mrb_free(r1, HEAP32[r2 + 4 >> 2]);
  _mrb_free(r1, r2);
  return;
}
function _mrb_str_resize(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11;
  r5 = STACKTOP;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = HEAP32[r3 >> 2];
  _str_modify(r2, r6);
  r7 = r6 + 12 | 0;
  r8 = HEAP32[r7 >> 2];
  if ((r8 | 0) != (r4 | 0)) {
    r9 = r6 + 20 | 0;
    r10 = HEAP32[r9 >> 2];
    if ((r8 | 0) < (r4 | 0) | (r8 - r4 | 0) > 1024) {
      r8 = _mrb_realloc(r2, r10, r4 + 1 | 0);
      HEAP32[r9 >> 2] = r8;
      r11 = r8;
    } else {
      r11 = r10;
    }
    HEAP32[r6 + 16 >> 2] = r4;
    HEAP32[r7 >> 2] = r4;
    HEAP8[r11 + r4 | 0] = 0;
  }
  r4 = r3;
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r5;
  return;
}
function _str_modify(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9;
  r3 = 0;
  r4 = r2 >> 2;
  if ((HEAP32[r4] & 524288 | 0) == 0) {
    return;
  }
  r5 = (r2 + 16 | 0) >> 2;
  r6 = HEAP32[r5], r7 = r6 >> 2;
  r8 = (r2 + 20 | 0) >> 2;
  r9 = HEAP32[r8];
  do {
    if ((HEAP32[r7] | 0) == 1) {
      if ((r9 | 0) != (HEAP32[r7 + 1] | 0)) {
        r3 = 186;
        break;
      }
      HEAP32[r8] = r9;
      HEAP32[r5] = HEAP32[r7 + 2];
      _mrb_free(r1, r6);
      break;
    } else {
      r3 = 186;
    }
  } while (0);
  if (r3 == 186) {
    r3 = HEAP32[r2 + 12 >> 2];
    r2 = _mrb_malloc(r1, r3 + 1 | 0);
    if ((r9 | 0) != 0) {
      _memcpy(r2, r9, r3);
    }
    HEAP8[r2 + r3 | 0] = 0;
    HEAP32[r8] = r2;
    HEAP32[r5] = r3;
    _mrb_str_decref(r1, r6);
  }
  HEAP32[r4] = HEAP32[r4] & -524289;
  return;
}
function _mrb_str_buf_new(r1, r2, r3) {
  var r4, r5, r6;
  r4 = _mrb_obj_alloc(r2, 17, HEAP32[r2 + 88 >> 2]), r5 = r4 >> 2;
  r6 = (r3 | 0) < 128 ? 128 : r3;
  HEAP32[r5 + 3] = 0;
  HEAP32[r5 + 4] = r6;
  r3 = _mrb_malloc(r2, r6 + 1 | 0);
  HEAP32[r5 + 5] = r3;
  HEAP8[r3] = 0;
  _mrb_obj_value39(r1, r4 | 0);
  return;
}
function _mrb_str_buf_cat(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10;
  r6 = STACKTOP;
  r7 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 4 >> 2];
  if ((r5 | 0) == 0) {
    r7 = r3;
    r8 = r1;
    r9 = HEAP32[r7 + 4 >> 2];
    r10 = r8 | 0;
    HEAP32[r10 >> 2] = HEAP32[r7 >> 2];
    r7 = r8 + 4 | 0;
    HEAP32[r7 >> 2] = r9;
    STACKTOP = r6;
    return;
  } else {
    _str_buf_cat(r2, HEAP32[r3 >> 2], r4, r5);
    r5 = r3;
    r3 = r1;
    r10 = r5 | 0;
    r7 = r5 + 4 | 0;
    r5 = HEAP32[r7 >> 2];
    HEAP32[r3 >> 2] = HEAP32[r10 >> 2];
    HEAP32[r3 + 4 >> 2] = r5;
    STACKTOP = r6;
    return;
  }
}
function _str_buf_cat(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r5 = 0;
  _str_modify(r1, r2);
  r6 = (r2 + 20 | 0) >> 2;
  r7 = HEAP32[r6];
  do {
    if (r7 >>> 0 > r3 >>> 0) {
      r8 = -1;
    } else {
      if ((r7 + HEAP32[r2 + 12 >> 2] | 0) >>> 0 < r3 >>> 0) {
        r8 = -1;
        break;
      }
      r8 = r3 - r7 | 0;
    }
  } while (0);
  if ((r4 | 0) == 0) {
    return;
  }
  r7 = r2 + 16 | 0;
  r9 = HEAP32[r7 >> 2];
  r10 = (r2 + 12 | 0) >> 2;
  r2 = HEAP32[r10];
  if ((r2 | 0) < (2147483647 - r4 | 0)) {
    r11 = r2;
  } else {
    _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5315092);
    r11 = HEAP32[r10];
  }
  r2 = r11 + r4 | 0;
  if ((r9 | 0) > (r2 | 0)) {
    r12 = HEAP32[r6];
  } else {
    r11 = r9;
    while (1) {
      if ((r2 | 0) <= (r11 | 0)) {
        r13 = r11;
        break;
      }
      r9 = r11 + 1 | 0;
      if ((r9 | 0) > 1073741822) {
        r5 = 210;
        break;
      } else {
        r11 = r9 << 1;
      }
    }
    if (r5 == 210) {
      r13 = (r2 + 4095 | 0) / 4096 & -1;
    }
    r5 = _mrb_realloc(r1, HEAP32[r6], r13 + 1 | 0);
    HEAP32[r6] = r5;
    HEAP32[r7 >> 2] = r13;
    r12 = r5;
  }
  if ((r8 | 0) == -1) {
    r14 = r3;
  } else {
    r14 = r12 + r8 | 0;
  }
  _memcpy(r12 + HEAP32[r10] | 0, r14, r4);
  HEAP32[r10] = r2;
  HEAP8[HEAP32[r6] + r2 | 0] = 0;
  return;
}
_str_buf_cat["X"] = 1;
function _mrb_str_new(r1, r2, r3, r4) {
  _mrb_obj_value39(r1, _str_new(r2, r3, r4) | 0);
  return;
}
function _str_new(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = _str_alloc(r1, HEAP32[r1 + 88 >> 2]);
  HEAP32[r4 + 12 >> 2] = r3;
  HEAP32[r4 + 16 >> 2] = r3;
  r5 = _mrb_malloc(r1, r3 + 1 | 0);
  r1 = r4 + 20 | 0;
  HEAP32[r1 >> 2] = r5;
  if ((r2 | 0) == 0) {
    r6 = r5;
    r7 = r6 + r3 | 0;
    HEAP8[r7] = 0;
    return r4;
  }
  _memcpy(r5, r2, r3);
  r6 = HEAP32[r1 >> 2];
  r7 = r6 + r3 | 0;
  HEAP8[r7] = 0;
  return r4;
}
function _mrb_str_new2(r1, r2, r3) {
  if ((r3 | 0) == 0) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5325812);
  }
  _mrb_obj_value39(r1, _str_new(r2, r3, _strlen(r3)) | 0);
  return;
}
function _mrb_str_new_cstr(r1, r2, r3) {
  var r4, r5, r6;
  r4 = _strlen(r3);
  r5 = _mrb_obj_alloc(r2, 17, HEAP32[r2 + 88 >> 2]);
  r6 = _mrb_malloc(r2, r4 + 1 | 0);
  r2 = r5 + 20 | 0;
  HEAP32[r2 >> 2] = r6;
  _memcpy(r6, r3, r4);
  HEAP8[HEAP32[r2 >> 2] + r4 | 0] = 0;
  HEAP32[r5 + 12 >> 2] = r4;
  HEAP32[r5 + 16 >> 2] = r4;
  _mrb_obj_value39(r1, r5 | 0);
  return;
}
function _mrb_str_literal(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = _str_alloc(r2, HEAP32[r2 + 88 >> 2]), r6 = r5 >> 2;
  r7 = HEAP32[r3 >> 2];
  if ((HEAP32[r7 >> 2] & 524288 | 0) == 0) {
    _str_make_shared(r2, r7);
  }
  r2 = HEAP32[r7 + 16 >> 2];
  r7 = r2 | 0;
  HEAP32[r7 >> 2] = HEAP32[r7 >> 2] + 1 | 0;
  HEAP32[r6 + 5] = HEAP32[r2 + 4 >> 2];
  HEAP32[r6 + 3] = HEAP32[r2 + 8 >> 2];
  HEAP32[r6 + 4] = r2;
  r2 = r5;
  HEAP32[r2 >> 2] = HEAP32[r2 >> 2] | 524288;
  _mrb_obj_value39(r1, r5 | 0);
  STACKTOP = r4;
  return;
}
function _str_alloc(r1, r2) {
  var r3;
  r3 = _mrb_obj_alloc(r1, 17, HEAP32[r1 + 88 >> 2]), r1 = r3 >> 2;
  HEAP32[r1 + 1] = r2;
  HEAP32[r1 + 5] = 0;
  HEAP32[r1 + 3] = 0;
  HEAP32[r1 + 4] = 0;
  return r3;
}
function _str_make_shared(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10;
  r3 = r2 >> 2;
  if ((HEAP32[r3] & 524288 | 0) != 0) {
    return;
  }
  r4 = _mrb_malloc(r1, 12), r5 = r4 >> 2;
  HEAP32[r5] = 1;
  r6 = r2 + 16 | 0;
  r7 = r2 + 12 | 0;
  r8 = HEAP32[r7 >> 2];
  r9 = r2 + 20 | 0;
  r2 = HEAP32[r9 >> 2];
  if ((HEAP32[r6 >> 2] | 0) > (r8 | 0)) {
    r10 = _mrb_realloc(r1, r2, r8 + 1 | 0);
    HEAP32[r5 + 1] = r10;
    HEAP32[r9 >> 2] = r10;
  } else {
    HEAP32[r5 + 1] = r2;
  }
  HEAP32[r5 + 2] = HEAP32[r7 >> 2];
  HEAP32[r6 >> 2] = r4;
  HEAP32[r3] = HEAP32[r3] | 524288;
  return;
}
function _mrb_str_concat(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r2, r6 = r5 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 1];
  r5 = r3, r6 = r5 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 1];
  r6 = r4;
  r5 = HEAP32[r2 >> 2];
  _str_modify(r1, r5);
  if ((HEAP32[r3 + 4 >> 2] & 255 | 0) == 17) {
    r7 = HEAP32[r3 >> 2];
  } else {
    _mrb_str_to_str(r6, r1, r3);
    r2 = r6;
    r6 = r3;
    r3 = HEAP32[r2 >> 2];
    r8 = HEAP32[r2 + 4 >> 2];
    HEAP32[r6 >> 2] = r3;
    HEAP32[r6 + 4 >> 2] = r8;
    r7 = r3;
  }
  r3 = (r5 + 12 | 0) >> 2;
  r8 = HEAP32[r3];
  r6 = r7 + 12 | 0;
  r2 = HEAP32[r6 >> 2];
  r9 = r2 + r8 | 0;
  r10 = r5 + 16 | 0;
  if ((HEAP32[r10 >> 2] | 0) < (r9 | 0)) {
    HEAP32[r10 >> 2] = r9;
    r10 = r5 + 20 | 0;
    r11 = _mrb_realloc(r1, HEAP32[r10 >> 2], r9 + 1 | 0);
    HEAP32[r10 >> 2] = r11;
    r12 = HEAP32[r3];
    r13 = HEAP32[r6 >> 2];
    r14 = r11;
  } else {
    r12 = r8;
    r13 = r2;
    r14 = HEAP32[r5 + 20 >> 2];
  }
  _memcpy(r14 + r12 | 0, HEAP32[r7 + 20 >> 2], r13);
  HEAP32[r3] = r9;
  HEAP8[HEAP32[r5 + 20 >> 2] + r9 | 0] = 0;
  STACKTOP = r4;
  return;
}
_mrb_str_concat["X"] = 1;
function _mrb_str_to_str(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  if ((HEAP32[r3 + 4 >> 2] & 255 | 0) == 17) {
    r7 = r3;
    r8 = r1;
    r9 = HEAP32[r7 + 4 >> 2];
    HEAP32[r8 >> 2] = HEAP32[r7 >> 2];
    HEAP32[r8 + 4 >> 2] = r9;
    STACKTOP = r4;
    return;
  }
  _mrb_check_convert_type(r5, r2, r3, 17, 5318580, 5313892);
  r9 = HEAP32[r5 >> 2];
  r8 = HEAP32[r5 + 4 >> 2];
  if ((r8 & 255 | r9 | 0) == 0) {
    _mrb_convert_type(r6, r2, r3, 17, 5318580, 5325416);
    r10 = HEAP32[r6 >> 2];
    r11 = HEAP32[r6 + 4 >> 2];
  } else {
    r10 = r9;
    r11 = r8;
  }
  HEAP32[r1 >> 2] = r10;
  HEAP32[r1 + 4 >> 2] = r11;
  STACKTOP = r4;
  return;
}
function _mrb_fixnum_value42(r1, r2) {
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 3;
  return;
}
function _mrb_nil_value43(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_str_hash(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9;
  r2 = STACKTOP;
  r3 = r1;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r1 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r1 + 4 >> 2] = HEAP32[r3 + 4 >> 2];
  r3 = HEAP32[r1 >> 2];
  r1 = HEAP32[r3 + 12 >> 2];
  L313 : do {
    if ((r1 | 0) == 0) {
      r4 = 0;
    } else {
      r5 = r1;
      r6 = HEAP32[r3 + 20 >> 2];
      r7 = 0;
      while (1) {
        r8 = r5 - 1 | 0;
        r9 = (HEAP8[r6] << 24 >> 24) + (r7 * 65599 & -1) | 0;
        if ((r8 | 0) == 0) {
          r4 = r9;
          break L313;
        } else {
          r5 = r8;
          r6 = r6 + 1 | 0;
          r7 = r9;
        }
      }
    }
  } while (0);
  STACKTOP = r2;
  return (r4 >> 5) + r4 | 0;
}
function _mrb_symbol_value(r1, r2) {
  HEAP16[r1 >> 1] = r2;
  HEAP32[r1 + 4 >> 2] = 4;
  return;
}
function _mrb_str_plus(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = STACKTOP;
  r6 = r3, r7 = r6 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r4, r7 = r6 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r7];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7 + 1];
  r7 = HEAP32[r3 >> 2];
  r3 = HEAP32[r4 >> 2];
  r4 = (r7 + 12 | 0) >> 2;
  r6 = r3 + 12 | 0;
  r8 = _str_new(r2, 0, HEAP32[r6 >> 2] + HEAP32[r4] | 0);
  r2 = r8 + 20 | 0;
  _memcpy(HEAP32[r2 >> 2], HEAP32[r7 + 20 >> 2], HEAP32[r4]);
  _memcpy(HEAP32[r2 >> 2] + HEAP32[r4] | 0, HEAP32[r3 + 20 >> 2], HEAP32[r6 >> 2]);
  _mrb_obj_value39(r1, r8 | 0);
  STACKTOP = r5;
  return;
}
function _mrb_str_size(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  _mrb_fixnum_value42(r1, HEAP32[HEAP32[r3 >> 2] + 12 >> 2]);
  STACKTOP = r2;
  return;
}
function _mrb_str_cmp(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r3 = STACKTOP;
  r4 = r1, r5 = r4 >> 2;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r1 >> 2] = HEAP32[r5];
  HEAP32[r1 + 4 >> 2] = HEAP32[r5 + 1];
  r4 = r2, r5 = r4 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r5];
  HEAP32[r2 + 4 >> 2] = HEAP32[r5 + 1];
  r5 = HEAP32[r1 >> 2];
  r1 = HEAP32[r2 >> 2];
  r2 = HEAP32[r5 + 12 >> 2];
  r4 = HEAP32[r1 + 12 >> 2];
  r6 = (r2 | 0) > (r4 | 0);
  r7 = _memcmp(HEAP32[r5 + 20 >> 2], HEAP32[r1 + 20 >> 2], r6 ? r4 : r2);
  if ((r7 | 0) != 0) {
    r8 = (r7 | 0) > 0 ? 1 : -1;
    STACKTOP = r3;
    return r8;
  }
  if ((r2 | 0) == (r4 | 0)) {
    r8 = 0;
    STACKTOP = r3;
    return r8;
  }
  r8 = r6 ? 1 : -1;
  STACKTOP = r3;
  return r8;
}
function _mrb_str_equal(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r2, r6 = r5 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 1];
  r5 = r3, r6 = r5 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 1];
  r6 = r4;
  do {
    if ((_mrb_obj_equal(r2, r3) | 0) == 0) {
      r5 = HEAP32[r3 + 4 >> 2] & 255;
      if ((r5 | 0) == 0) {
        if ((HEAP32[r3 >> 2] | 0) == 0) {
          r7 = 0;
          break;
        }
      } else if ((r5 | 0) == 17) {
        r7 = _str_eql(r2, r3);
        break;
      }
      if ((_mrb_respond_to(r1, r3, _mrb_intern(r1, 5313892)) | 0) == 0) {
        r7 = 0;
        break;
      }
      _mrb_funcall(r6, r1, r3, 5313892, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      r5 = r6;
      r8 = r3;
      r9 = HEAP32[r5 + 4 >> 2];
      HEAP32[r8 >> 2] = HEAP32[r5 >> 2];
      HEAP32[r8 + 4 >> 2] = r9;
      r7 = _mrb_equal(r1, r3, r2);
    } else {
      r7 = 1;
    }
  } while (0);
  STACKTOP = r4;
  return r7;
}
function _str_eql(r1, r2) {
  var r3, r4, r5, r6;
  r3 = STACKTOP;
  r4 = r1, r5 = r4 >> 2;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r1 >> 2] = HEAP32[r5];
  HEAP32[r1 + 4 >> 2] = HEAP32[r5 + 1];
  r4 = r2, r5 = r4 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r5];
  HEAP32[r2 + 4 >> 2] = HEAP32[r5 + 1];
  r5 = HEAP32[r1 >> 2];
  r1 = HEAP32[r5 + 12 >> 2];
  r4 = HEAP32[r2 >> 2];
  if ((r1 | 0) != (HEAP32[r4 + 12 >> 2] | 0)) {
    r6 = 0;
    STACKTOP = r3;
    return r6;
  }
  r6 = (_memcmp(HEAP32[r5 + 20 >> 2], HEAP32[r4 + 20 >> 2], r1) | 0) == 0 & 1;
  STACKTOP = r3;
  return r6;
}
function _mrb_string_value(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r4;
  r6 = r4 + 8;
  r7 = r3 >> 2;
  r3 = r5 >> 2;
  r8 = HEAP32[r7];
  r9 = HEAP32[r7 + 1];
  HEAP32[r3] = r8;
  HEAP32[r3 + 1] = r9;
  if ((r8 & 0 | 0) == 0 & (r9 & 255 | 0) == 17) {
    r10 = r9;
    r11 = r8;
    r12 = r1;
    r13 = r12 | 0;
    HEAP32[r13 >> 2] = r11;
    r14 = r12 + 4 | 0;
    HEAP32[r14 >> 2] = r10;
    STACKTOP = r4;
    return;
  }
  _mrb_str_to_str(r6, r2, r5);
  r5 = r6;
  r6 = HEAP32[r5 >> 2];
  r2 = HEAP32[r5 + 4 >> 2];
  HEAP32[r3] = r6;
  HEAP32[r3 + 1] = r2;
  HEAP32[r7] = r6;
  HEAP32[r7 + 1] = r2;
  r10 = r2;
  r11 = r6;
  r12 = r1;
  r13 = r12 | 0;
  HEAP32[r13 >> 2] = r11;
  r14 = r12 + 4 | 0;
  HEAP32[r14 >> 2] = r10;
  STACKTOP = r4;
  return;
}
function _mrb_string_value_ptr(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = r3;
  _mrb_string_value(r4, r1, r2);
  STACKTOP = r3;
  return HEAP32[HEAP32[r4 >> 2] + 20 >> 2];
}
function _mrb_str_dup(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = HEAP32[r3 >> 2];
  _mrb_str_new(r1, r2, HEAP32[r5 + 20 >> 2], HEAP32[r5 + 12 >> 2]);
  STACKTOP = r4;
  return;
}
function _mrb_str_substr(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r7 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 4 >> 2];
  r7 = r6;
  if ((r5 | 0) < 0) {
    _mrb_nil_value43(r1);
    STACKTOP = r6;
    return;
  }
  r8 = HEAP32[HEAP32[r3 >> 2] + 12 >> 2];
  r9 = (r8 | 0) == 0 ? 0 : r5;
  if ((r8 | 0) < (r4 | 0)) {
    _mrb_nil_value43(r1);
    STACKTOP = r6;
    return;
  }
  do {
    if ((r4 | 0) < 0) {
      r5 = r8 + r4 | 0;
      if ((r5 | 0) >= 0) {
        r10 = r5;
        break;
      }
      _mrb_nil_value43(r1);
      STACKTOP = r6;
      return;
    } else {
      r10 = r4;
    }
  } while (0);
  r4 = (r10 + r9 | 0) > (r8 | 0) ? r8 - r10 | 0 : r9;
  _mrb_str_subseq(r7, r2, r3, r10, (r4 | 0) > 0 ? r4 : 0);
  r4 = r7;
  r7 = HEAP32[r4 + 4 >> 2];
  r10 = r1;
  HEAP32[r10 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r10 + 4 >> 2] = r7;
  STACKTOP = r6;
  return;
}
function _mrb_str_subseq(r1, r2, r3, r4, r5) {
  var r6, r7, r8;
  r6 = STACKTOP;
  r7 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 4 >> 2];
  r7 = HEAP32[r3 >> 2];
  _str_make_shared(r2, r7);
  r3 = HEAP32[r7 + 16 >> 2];
  r8 = _mrb_obj_alloc(r2, 17, HEAP32[r2 + 88 >> 2]), r2 = r8 >> 2;
  HEAP32[r2 + 5] = HEAP32[r7 + 20 >> 2] + r4 | 0;
  HEAP32[r2 + 3] = r5;
  HEAP32[r2 + 4] = r3;
  r2 = r8;
  HEAP32[r2 >> 2] = HEAP32[r2 >> 2] | 524288;
  r2 = r3 | 0;
  HEAP32[r2 >> 2] = HEAP32[r2 >> 2] + 1 | 0;
  _mrb_obj_value39(r1, r8 | 0);
  STACKTOP = r6;
  return;
}
function _mrb_str_buf_append(r1, r2, r3, r4) {
  var r5, r6, r7;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r3, r7 = r6 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r4, r7 = r6 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r7];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7 + 1];
  r7 = HEAP32[r4 >> 2];
  _mrb_str_cat(r5, r2, r3, HEAP32[r7 + 20 >> 2], HEAP32[r7 + 12 >> 2]);
  r7 = r3;
  r3 = r1;
  r1 = HEAP32[r7 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r5;
  return;
}
function _mrb_str_cat(r1, r2, r3, r4, r5) {
  var r6, r7;
  r6 = STACKTOP;
  r7 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 4 >> 2];
  if ((r5 | 0) < 0) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5326284);
  }
  _str_buf_cat(r2, HEAP32[r3 >> 2], r4, r5);
  r5 = r3;
  r3 = r1;
  r1 = HEAP32[r5 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r6;
  return;
}
function _mrb_str_intern(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r3;
  r3 = r5;
  r7 = HEAP32[r6 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = r7;
  _mrb_symbol_value(r1, _mrb_intern_str(r2, r5));
  STACKTOP = r4;
  return;
}
function _mrb_obj_as_string(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  if ((HEAP32[r3 + 4 >> 2] & 255 | 0) == 17) {
    r6 = r3;
    r7 = r1;
    r8 = HEAP32[r6 + 4 >> 2];
    HEAP32[r7 >> 2] = HEAP32[r6 >> 2];
    HEAP32[r7 + 4 >> 2] = r8;
    STACKTOP = r4;
    return;
  }
  _mrb_funcall(r5, r2, r3, 5325416, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  r8 = HEAP32[r5 + 4 >> 2];
  if ((r8 & 255 | 0) == 17) {
    HEAPF32[r1 >> 2] = HEAPF32[r5 >> 2];
    HEAP32[r1 + 4 >> 2] = r8;
    STACKTOP = r4;
    return;
  } else {
    _mrb_any_to_s(r1, r2, r3);
    STACKTOP = r4;
    return;
  }
}
function _mrb_check_string_type(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_check_convert_type(r1, r2, r3, 17, 5318580, 5313892);
  STACKTOP = r4;
  return;
}
function _mrb_cstr_to_inum(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29;
  r6 = 0;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r8 = r7;
  L385 : do {
    if ((r3 | 0) == 0) {
      if ((r5 | 0) != 0) {
        r9 = 0;
        break;
      }
      _mrb_fixnum_value42(r1, 0);
      STACKTOP = r7;
      return;
    } else {
      r10 = r3;
      while (1) {
        r11 = r10 + 1 | 0;
        if ((_isspace(HEAPU8[r10]) | 0) == 0) {
          break;
        } else {
          r10 = r11;
        }
      }
      r12 = HEAP8[r10];
      if (r12 << 24 >> 24 == 45) {
        r13 = r11;
        r14 = 0;
      } else if (r12 << 24 >> 24 == 43) {
        r13 = r11;
        r14 = 1;
      } else {
        r13 = r10;
        r14 = 1;
      }
      r12 = HEAP8[r13];
      if (r12 << 24 >> 24 == 43 | r12 << 24 >> 24 == 45) {
        if ((r5 | 0) != 0) {
          r9 = r13;
          break;
        }
        _mrb_fixnum_value42(r1, 0);
        STACKTOP = r7;
        return;
      }
      do {
        if ((r4 | 0) < 1) {
          if (r12 << 24 >> 24 == 48) {
            r15 = HEAP8[r13 + 1 | 0];
            r16 = r15 << 24 >> 24;
            if ((r16 | 0) == 68 | (r16 | 0) == 100) {
              r17 = r15;
              r6 = 345;
              break;
            } else if ((r16 | 0) == 98 | (r16 | 0) == 66) {
              r18 = r15;
              r6 = 337;
              break;
            } else if ((r16 | 0) == 120 | (r16 | 0) == 88) {
              r19 = r15;
              r6 = 349;
              break;
            } else {
              r20 = r15;
              r6 = 341;
              break;
            }
          } else {
            r21 = (r4 | 0) < -1 ? -r4 | 0 : 10;
            r6 = 334;
            break;
          }
        } else {
          r21 = r4;
          r6 = 334;
        }
      } while (0);
      do {
        if (r6 == 334) {
          if ((r21 | 0) == 10) {
            if (r12 << 24 >> 24 != 48) {
              r22 = r13;
              r23 = 10;
              break;
            }
            r17 = HEAP8[r13 + 1 | 0];
            r6 = 345;
            break;
          } else if ((r21 | 0) == 3 | (r21 | 0) == 4 | (r21 | 0) == 5 | (r21 | 0) == 6 | (r21 | 0) == 7 | (r21 | 0) == 9 | (r21 | 0) == 11 | (r21 | 0) == 12 | (r21 | 0) == 13 | (r21 | 0) == 14 | (r21 | 0) == 15) {
            r22 = r13;
            r23 = r21;
            break;
          } else if ((r21 | 0) == 2) {
            if (r12 << 24 >> 24 != 48) {
              r22 = r13;
              r23 = 2;
              break;
            }
            r18 = HEAP8[r13 + 1 | 0];
            r6 = 337;
            break;
          } else if ((r21 | 0) == 16) {
            if (r12 << 24 >> 24 != 48) {
              r22 = r13;
              r23 = 16;
              break;
            }
            r19 = HEAP8[r13 + 1 | 0];
            r6 = 349;
            break;
          } else if ((r21 | 0) == 8) {
            if (r12 << 24 >> 24 != 48) {
              r22 = r13;
              r23 = 8;
              break;
            }
            r20 = HEAP8[r13 + 1 | 0];
            r6 = 341;
            break;
          } else {
            if ((r21 - 2 | 0) >>> 0 <= 34) {
              r22 = r13;
              r23 = r21;
              break;
            }
            _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5315296, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r21, tempInt));
            r22 = r13;
            r23 = r21;
            break;
          }
        }
      } while (0);
      do {
        if (r6 == 341) {
          if (!(r20 << 24 >> 24 == 111 | r20 << 24 >> 24 == 79)) {
            r22 = r13;
            r23 = 8;
            break;
          }
          r22 = r13 + 2 | 0;
          r23 = 8;
        } else if (r6 == 345) {
          if (!(r17 << 24 >> 24 == 100 | r17 << 24 >> 24 == 68)) {
            r22 = r13;
            r23 = 10;
            break;
          }
          r22 = r13 + 2 | 0;
          r23 = 10;
        } else if (r6 == 337) {
          if (!(r18 << 24 >> 24 == 98 | r18 << 24 >> 24 == 66)) {
            r22 = r13;
            r23 = 2;
            break;
          }
          r22 = r13 + 2 | 0;
          r23 = 2;
        } else if (r6 == 349) {
          if (!(r19 << 24 >> 24 == 120 | r19 << 24 >> 24 == 88)) {
            r22 = r13;
            r23 = 16;
            break;
          }
          r22 = r13 + 2 | 0;
          r23 = 16;
        }
      } while (0);
      do {
        if (HEAP8[r22] << 24 >> 24 == 48) {
          r12 = r22;
          r10 = 0;
          while (1) {
            r24 = r12 + 1 | 0;
            r15 = HEAP8[r24];
            if (r15 << 24 >> 24 == 48) {
              r12 = r24;
              r10 = 0;
              continue;
            } else if (r15 << 24 >> 24 == 0) {
              break;
            } else if (r15 << 24 >> 24 != 95) {
              r25 = r15;
              r6 = 356;
              break;
            }
            if ((r10 | 0) > 0) {
              r25 = 95;
              r6 = 356;
              break;
            } else {
              r12 = r24;
              r10 = r10 + 1 | 0;
            }
          }
          if (r6 == 356) {
            if ((_isspace(r25 & 255) | 0) == 0) {
              r26 = r24;
              break;
            }
          }
          r26 = r12;
        } else {
          r26 = r22;
        }
      } while (0);
      r10 = HEAP8[r26] << 24 >> 24;
      r15 = r10 - 48 | 0;
      do {
        if (r15 >>> 0 < 10) {
          r27 = r15;
        } else {
          if ((_islower(r10) | 0) == 0) {
            r27 = (_isupper(r10) | 0) == 0 ? -1 : r10 - 55 | 0;
            break;
          } else {
            r27 = r10 - 87 | 0;
            break;
          }
        }
      } while (0);
      if (!((r27 | 0) > -1 & (r27 | 0) < (r23 | 0))) {
        if ((r5 | 0) != 0) {
          r9 = r26;
          break;
        }
        _mrb_fixnum_value42(r1, 0);
        STACKTOP = r7;
        return;
      }
      r10 = _strtoul(r26, r8, r23);
      L445 : do {
        if ((r5 | 0) != 0) {
          r15 = HEAP32[r8 >> 2];
          if ((r15 | 0) == (r26 | 0)) {
            r9 = r26;
            break L385;
          }
          r16 = HEAP8[r15];
          if (r16 << 24 >> 24 == 0) {
            break;
          } else {
            r28 = r16;
            r29 = r15;
          }
          while (1) {
            if ((_isspace(r28 & 255) | 0) == 0) {
              break;
            }
            r15 = r29 + 1 | 0;
            HEAP32[r8 >> 2] = r15;
            r16 = HEAP8[r15];
            if (r16 << 24 >> 24 == 0) {
              break L445;
            } else {
              r28 = r16;
              r29 = r15;
            }
          }
          if (HEAP8[r29] << 24 >> 24 != 0) {
            r9 = r26;
            break L385;
          }
        }
      } while (0);
      if (r14 << 24 >> 24 == 0) {
        _mrb_fixnum_value42(r1, -r10 | 0);
        STACKTOP = r7;
        return;
      } else {
        _mrb_fixnum_value42(r1, r10);
        STACKTOP = r7;
        return;
      }
    }
  } while (0);
  _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5314848, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r9, tempInt));
  _mrb_fixnum_value42(r1, 0);
  STACKTOP = r7;
  return;
}
_mrb_cstr_to_inum["X"] = 1;
function _mrb_string_value_cstr(r1, r2) {
  var r3;
  r3 = HEAP32[r2 >> 2];
  r2 = HEAP32[r3 + 20 >> 2];
  do {
    if ((r2 | 0) != 0) {
      if ((HEAP32[r3 + 12 >> 2] | 0) != (_strlen(r2) | 0)) {
        break;
      }
      return r2;
    }
  } while (0);
  _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5322880);
  return r2;
}
function _mrb_str_to_inum(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r7 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 4 >> 2];
  _mrb_string_value(r6, r2, r3);
  if ((r5 | 0) == 0) {
    r8 = HEAP32[HEAP32[r3 >> 2] + 20 >> 2];
  } else {
    r8 = _mrb_string_value_cstr(r2, r3);
  }
  do {
    if ((r8 | 0) == 0) {
      r9 = 0;
    } else {
      r7 = HEAP32[HEAP32[r3 >> 2] + 12 >> 2];
      if (HEAP8[r8 + r7 | 0] << 24 >> 24 == 0) {
        r9 = r8;
        break;
      }
      r9 = HEAP32[_str_new(r2, r8, r7) + 20 >> 2];
    }
  } while (0);
  _mrb_cstr_to_inum(r1, r2, r9, r4, r5);
  STACKTOP = r6;
  return;
}
function _mrb_cstr_to_dbl(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 80 | 0;
  r6 = r5, r7 = r6 >> 2;
  r8 = r5 + 4;
  L479 : do {
    if ((r2 | 0) == 0) {
      r9 = 0;
    } else {
      r10 = r2;
      while (1) {
        r11 = r10 + 1 | 0;
        if ((_isspace(HEAPU8[r10]) | 0) == 0) {
          break;
        } else {
          r10 = r11;
        }
      }
      r12 = (r3 | 0) != 0;
      do {
        if (!r12) {
          if (HEAP8[r10] << 24 >> 24 != 48) {
            break;
          }
          r13 = HEAP8[r11];
          if (r13 << 24 >> 24 == 120 | r13 << 24 >> 24 == 88) {
            r9 = 0;
            break L479;
          }
        }
      } while (0);
      r13 = _strtod(r10, r6);
      r14 = HEAP32[r7];
      L487 : do {
        if ((r10 | 0) == (r14 | 0)) {
          if (r12) {
            r15 = r13;
            r16 = r10;
          } else {
            r9 = r13;
            break L479;
          }
        } else {
          if (HEAP8[r14] << 24 >> 24 == 0) {
            r9 = r13;
            break L479;
          }
          r17 = r8 | 0;
          r18 = r8 + 73 | 0;
          L491 : do {
            if (r10 >>> 0 < r14 >>> 0) {
              r19 = r10;
              r20 = r17;
              while (1) {
                r21 = r19 + 1 | 0;
                r22 = HEAP8[r19];
                r23 = r20 + 1 | 0;
                HEAP8[r20] = r22;
                if (r21 >>> 0 < HEAP32[r7] >>> 0 & r23 >>> 0 < r18 >>> 0) {
                  r19 = r21;
                  r20 = r23;
                } else {
                  r24 = r22;
                  r25 = r23;
                  r26 = r21;
                  break L491;
                }
              }
            } else {
              r24 = 0;
              r25 = r17;
              r26 = r10;
            }
          } while (0);
          L494 : while (1) {
            r20 = r25 >>> 0 < r18 >>> 0;
            r19 = (r25 | 0) != (r17 | 0);
            r21 = r24;
            r23 = r26;
            while (1) {
              r22 = r23;
              r27 = HEAP8[r23];
              L498 : while (1) {
                if (r27 << 24 >> 24 == 0) {
                  break L494;
                } else if (r27 << 24 >> 24 != 95) {
                  r28 = r22;
                  r29 = r27;
                  break;
                }
                if (r12) {
                  r4 = 408;
                  break;
                } else {
                  r30 = r22;
                }
                while (1) {
                  r31 = r30 + 1 | 0;
                  r32 = HEAP8[r31];
                  if (r32 << 24 >> 24 == 95) {
                    r30 = r31;
                  } else {
                    r22 = r31;
                    r27 = r32;
                    continue L498;
                  }
                }
              }
              if (r4 == 408) {
                r4 = 0;
                if (!(r19 & r21 << 24 >> 24 > 47 & r21 << 24 >> 24 < 58)) {
                  r15 = r13;
                  r16 = r22;
                  break L487;
                }
                r27 = r22 + 1 | 0;
                r32 = HEAP8[r27];
                if ((r32 - 48 & 255) < 10) {
                  r28 = r27;
                  r29 = r32;
                } else {
                  r15 = r13;
                  r16 = r27;
                  break L487;
                }
              }
              r33 = r28 + 1 | 0;
              if (r20) {
                break;
              } else {
                r21 = r29;
                r23 = r33;
              }
            }
            HEAP8[r25] = r29;
            r24 = r29;
            r25 = r25 + 1 | 0;
            r26 = r33;
          }
          HEAP8[r25] = 0;
          if (!r12) {
            if (HEAP8[r17] << 24 >> 24 != 48) {
              r9 = _strtod(r17, r6);
              break L479;
            }
            r18 = HEAP8[r8 + 1 | 0];
            if (r18 << 24 >> 24 == 120 | r18 << 24 >> 24 == 88) {
              r9 = 0;
              break L479;
            }
            r9 = _strtod(r17, r6);
            break L479;
          }
          r18 = _strtod(r17, r6);
          r23 = HEAP32[r7];
          if ((r23 | 0) == 0 | (r17 | 0) == (r23 | 0)) {
            r15 = r18;
            r16 = r17;
            break;
          }
          r21 = HEAP8[r23];
          if (r21 << 24 >> 24 == 0) {
            r9 = r18;
            break L479;
          } else {
            r34 = r21;
            r35 = r23;
          }
          while (1) {
            if ((_isspace(r34 & 255) | 0) == 0) {
              break;
            }
            r23 = r35 + 1 | 0;
            HEAP32[r7] = r23;
            r21 = HEAP8[r23];
            if (r21 << 24 >> 24 == 0) {
              r9 = r18;
              break L479;
            } else {
              r34 = r21;
              r35 = r23;
            }
          }
          if (HEAP8[r35] << 24 >> 24 == 0) {
            r9 = r18;
            break L479;
          } else {
            r15 = r18;
            r16 = r17;
          }
        }
      } while (0);
      _mrb_raisef(r1, _mrb_class_obj_get(r1, 5325168), 5314412, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r16, tempInt));
      r9 = r15;
    }
  } while (0);
  STACKTOP = r5;
  return r9;
}
_mrb_cstr_to_dbl["X"] = 1;
function _mrb_str_to_dbl(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_string_value(r4, r1, r2);
  r5 = HEAP32[r2 >> 2];
  r2 = HEAP32[r5 + 20 >> 2];
  r6 = HEAP32[r5 + 12 >> 2];
  do {
    if ((r2 | 0) == 0) {
      r7 = 0;
    } else {
      do {
        if ((r3 | 0) != 0) {
          if ((_memchr(r2, 0, r6) | 0) == 0) {
            break;
          }
          _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5313984);
        }
      } while (0);
      if (HEAP8[r2 + r6 | 0] << 24 >> 24 == 0) {
        r7 = r2;
        break;
      }
      r7 = HEAP32[_str_new(r1, r2, r6) + 20 >> 2];
    }
  } while (0);
  r6 = _mrb_cstr_to_dbl(r1, r7, r3);
  STACKTOP = r4;
  return r6;
}
function _mrb_str_dump(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r3;
  r6 = HEAP32[r5 >> 2];
  r7 = HEAP32[r6 + 20 >> 2];
  r8 = HEAP32[r6 + 12 >> 2];
  r6 = r7 + r8 | 0;
  L533 : do {
    if ((r8 | 0) > 0) {
      r9 = r7;
      r10 = 2;
      while (1) {
        r11 = r9 + 1 | 0;
        r12 = HEAPU8[r9];
        do {
          if ((r12 | 0) == 35) {
            do {
              if (r11 >>> 0 < r6 >>> 0) {
                r13 = HEAP8[r11];
                if (r13 << 24 >> 24 == 36 | r13 << 24 >> 24 == 64) {
                  r14 = 2;
                  break;
                }
                r14 = r13 << 24 >> 24 == 123 ? 2 : 1;
              } else {
                r14 = 1;
              }
            } while (0);
            r15 = r14 + r10 | 0;
          } else if ((r12 | 0) == 34 | (r12 | 0) == 92 | (r12 | 0) == 10 | (r12 | 0) == 13 | (r12 | 0) == 9 | (r12 | 0) == 12 | (r12 | 0) == 11 | (r12 | 0) == 8 | (r12 | 0) == 7 | (r12 | 0) == 27) {
            r15 = r10 + 2 | 0;
          } else {
            if ((_isprint(r12) | 0) == 0) {
              r15 = r10 + 4 | 0;
              break;
            } else {
              r15 = r10 + 1 | 0;
              break;
            }
          }
        } while (0);
        if (r11 >>> 0 < r6 >>> 0) {
          r9 = r11;
          r10 = r15;
        } else {
          r16 = r15;
          break L533;
        }
      }
    } else {
      r16 = 2;
    }
  } while (0);
  r15 = _str_new(r2, 0, r16);
  _str_with_class(r15, r3);
  r3 = HEAP32[r5 >> 2];
  r5 = HEAP32[r3 + 20 >> 2];
  r16 = HEAP32[r3 + 12 >> 2];
  r3 = r5 + r16 | 0;
  r2 = HEAP32[r15 + 20 >> 2];
  r6 = r2 + 1 | 0;
  HEAP8[r2] = 34;
  if ((r16 | 0) > 0) {
    r17 = r6;
    r18 = r5;
  } else {
    r19 = r6;
    HEAP8[r19] = 34;
    r20 = r15 | 0;
    _mrb_obj_value39(r1, r20);
    STACKTOP = r4;
    return;
  }
  while (1) {
    r6 = r18 + 1 | 0;
    r5 = HEAP8[r18];
    r16 = r5 & 255;
    do {
      if (r5 << 24 >> 24 == 34 | r5 << 24 >> 24 == 92) {
        HEAP8[r17] = 92;
        HEAP8[r17 + 1 | 0] = r5;
        r21 = r17 + 2 | 0;
      } else if (r5 << 24 >> 24 == 35) {
        do {
          if (r6 >>> 0 < r3 >>> 0) {
            r2 = HEAP8[r6];
            if (!(r2 << 24 >> 24 == 36 | r2 << 24 >> 24 == 64 | r2 << 24 >> 24 == 123)) {
              r22 = r17;
              break;
            }
            HEAP8[r17] = 92;
            r22 = r17 + 1 | 0;
          } else {
            r22 = r17;
          }
        } while (0);
        HEAP8[r22] = 35;
        r21 = r22 + 1 | 0;
      } else if (r5 << 24 >> 24 == 10) {
        HEAP8[r17] = 92;
        HEAP8[r17 + 1 | 0] = 110;
        r21 = r17 + 2 | 0;
      } else if (r5 << 24 >> 24 == 13) {
        HEAP8[r17] = 92;
        HEAP8[r17 + 1 | 0] = 114;
        r21 = r17 + 2 | 0;
      } else if (r5 << 24 >> 24 == 9) {
        HEAP8[r17] = 92;
        HEAP8[r17 + 1 | 0] = 116;
        r21 = r17 + 2 | 0;
      } else if (r5 << 24 >> 24 == 12) {
        HEAP8[r17] = 92;
        HEAP8[r17 + 1 | 0] = 102;
        r21 = r17 + 2 | 0;
      } else if (r5 << 24 >> 24 == 11) {
        HEAP8[r17] = 92;
        HEAP8[r17 + 1 | 0] = 118;
        r21 = r17 + 2 | 0;
      } else if (r5 << 24 >> 24 == 8) {
        HEAP8[r17] = 92;
        HEAP8[r17 + 1 | 0] = 98;
        r21 = r17 + 2 | 0;
      } else if (r5 << 24 >> 24 == 7) {
        HEAP8[r17] = 92;
        HEAP8[r17 + 1 | 0] = 97;
        r21 = r17 + 2 | 0;
      } else if (r5 << 24 >> 24 == 27) {
        HEAP8[r17] = 92;
        HEAP8[r17 + 1 | 0] = 101;
        r21 = r17 + 2 | 0;
      } else {
        r11 = r17 + 1 | 0;
        if ((_isprint(r16) | 0) == 0) {
          HEAP8[r17] = 92;
          _sprintf(r11, 5326368, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r16, tempInt));
          r21 = r17 + 4 | 0;
          break;
        } else {
          HEAP8[r17] = r5;
          r21 = r11;
          break;
        }
      }
    } while (0);
    if (r6 >>> 0 < r3 >>> 0) {
      r17 = r21;
      r18 = r6;
    } else {
      r19 = r21;
      break;
    }
  }
  HEAP8[r19] = 34;
  r20 = r15 | 0;
  _mrb_obj_value39(r1, r20);
  STACKTOP = r4;
  return;
}
_mrb_str_dump["X"] = 1;
function _mrb_str_cat2(r1, r2, r3, r4) {
  var r5, r6;
  r5 = STACKTOP;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  _mrb_str_cat(r1, r2, r3, r4, _strlen(r4));
  STACKTOP = r5;
  return;
}
function _mrb_str_append(r1, r2, r3, r4) {
  var r5, r6, r7;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r3, r7 = r6 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r4, r7 = r6 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r7];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7 + 1];
  _mrb_string_value(r5, r2, r4);
  _mrb_str_buf_append(r1, r2, r3, r4);
  STACKTOP = r5;
  return;
}
function _mrb_str_inspect(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 16;
  r7 = r4 + 24;
  r8 = r4 + 32;
  r9 = r4 + 40;
  r10 = r4 + 48;
  r11 = r4 + 56;
  _mrb_str_new(r6, r2, 5325876, 1);
  r12 = HEAP32[r3 >> 2];
  r3 = HEAP32[r12 + 20 >> 2];
  r13 = HEAP32[r12 + 12 >> 2];
  r12 = r3 + r13 | 0;
  L577 : do {
    if ((r13 | 0) > 0) {
      r14 = r5 | 0;
      r15 = r5 + 1 | 0;
      r16 = r3;
      while (1) {
        r17 = HEAP8[r16];
        r18 = r17 << 24 >> 24;
        do {
          if (r17 << 24 >> 24 == 92 | r17 << 24 >> 24 == 34) {
            HEAP8[r14] = 92;
            HEAP8[r15] = r17;
            _mrb_str_buf_cat(r7, r2, r6, r14, 2);
          } else {
            if ((_isprint(r17 & 255) | 0) != 0) {
              HEAP8[r14] = r17;
              _mrb_str_buf_cat(r8, r2, r6, r14, 1);
              break;
            }
            if ((r18 | 0) == 13) {
              r19 = 114;
            } else if ((r18 | 0) == 9) {
              r19 = 116;
            } else if ((r18 | 0) == 12) {
              r19 = 102;
            } else if ((r18 | 0) == 11) {
              r19 = 118;
            } else if ((r18 | 0) == 8) {
              r19 = 98;
            } else if ((r18 | 0) == 7) {
              r19 = 97;
            } else if ((r18 | 0) == 27) {
              r19 = 101;
            } else if ((r18 | 0) == 10) {
              r19 = 110;
            } else {
              _mrb_str_buf_cat(r10, r2, r6, r14, _sprintf(r14, 5325780, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r18 & 255, tempInt)));
              break;
            }
            HEAP8[r14] = 92;
            HEAP8[r15] = r19;
            _mrb_str_buf_cat(r9, r2, r6, r14, 2);
          }
        } while (0);
        r18 = r16 + 1 | 0;
        if (r18 >>> 0 < r12 >>> 0) {
          r16 = r18;
        } else {
          break L577;
        }
      }
    }
  } while (0);
  _mrb_str_buf_cat(r11, r2, r6, 5325876, 1);
  r2 = r6;
  r6 = r1;
  r1 = HEAP32[r2 + 4 >> 2];
  HEAP32[r6 >> 2] = HEAP32[r2 >> 2];
  HEAP32[r6 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
_mrb_str_inspect["X"] = 1;
function _mrb_init_string(r1) {
  var r2, r3;
  r2 = _mrb_define_class(r1, 5318580, HEAP32[r1 + 72 >> 2]);
  HEAP32[r1 + 88 >> 2] = r2;
  r3 = r2;
  HEAP32[r3 >> 2] = HEAP32[r3 >> 2] & -522241 | 34816;
  _mrb_include_module(r1, r2, _mrb_class_get(r1, 5325072));
  _mrb_define_method(r1, r2, 5326420, 562);
  _mrb_define_method(r1, r2, 5325008, 82);
  _mrb_define_method(r1, r2, 5320652, 92);
  _mrb_define_method(r1, r2, 5321540, 92);
  _mrb_define_method(r1, r2, 5325956, 26);
  _mrb_define_method(r1, r2, 5314124, 364);
  _mrb_define_method(r1, r2, 5314464, 192);
  _mrb_define_method(r1, r2, 5322616, 168);
  _mrb_define_method(r1, r2, 5322620, 240);
  _mrb_define_method(r1, r2, 5322244, 632);
  _mrb_define_method(r1, r2, 5321964, 28);
  _mrb_define_method(r1, r2, 5321848, 548);
  _mrb_define_method(r1, r2, 5321532, 478);
  _mrb_define_method(r1, r2, 5321324, 120);
  _mrb_define_method(r1, r2, 5321056, 566);
  _mrb_define_method(r1, r2, 5320876, 198);
  _mrb_define_method(r1, r2, 5320640, 488);
  _mrb_define_method(r1, r2, 5323880, 416);
  _mrb_define_method(r1, r2, 5322632, 584);
  _mrb_define_method(r1, r2, 5321020, 564);
  _mrb_define_method(r1, r2, 5324568, 456);
  _mrb_define_method(r1, r2, 5320696, 514);
  _mrb_define_method(r1, r2, 5323508, 466);
  _mrb_define_method(r1, r2, 5318996, 542);
  _mrb_define_method(r1, r2, 5325912, 386);
  _mrb_define_method(r1, r2, 5321064, 542);
  _mrb_define_method(r1, r2, 5319164, 460);
  _mrb_define_method(r1, r2, 5318928, 256);
  _mrb_define_method(r1, r2, 5318720, 36);
  _mrb_define_method(r1, r2, 5318e3, 240);
  _mrb_define_method(r1, r2, 5317844, 424);
  _mrb_define_method(r1, r2, 5320764, 202);
  _mrb_define_method(r1, r2, 5320568, 492);
  _mrb_define_method(r1, r2, 5325416, 174);
  _mrb_define_method(r1, r2, 5313892, 174);
  _mrb_define_method(r1, r2, 5317440, 386);
  _mrb_define_method(r1, r2, 5317160, 404);
  _mrb_define_method(r1, r2, 5316896, 116);
  _mrb_define_method(r1, r2, 5325664, 44);
  _mrb_define_method(r1, r2, 5316340, 164);
  return;
}
_mrb_init_string["X"] = 1;
function _mrb_str_plus_m(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5315788, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_str_plus(r1, r2, r3, r5);
  STACKTOP = r4;
  return;
}
function _mrb_str_bytesize(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  _mrb_fixnum_value42(r1, HEAP32[HEAP32[r3 >> 2] + 12 >> 2]);
  STACKTOP = r2;
  return;
}
function _mrb_str_times(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4, r6 = r5 >> 2;
  _mrb_get_args(r2, 5320132, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r5 = HEAP32[r6];
  if ((r5 | 0) < 0) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5314792);
    r7 = HEAP32[r6];
  } else {
    r7 = r5;
  }
  do {
    if ((r7 | 0) == 0) {
      r8 = 0;
      r9 = HEAP32[r3 >> 2];
    } else {
      r5 = HEAP32[r3 >> 2];
      if ((2147483647 / (r7 | 0) & -1 | 0) >= (HEAP32[r5 + 12 >> 2] | 0)) {
        r8 = r7;
        r9 = r5;
        break;
      }
      _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5315144);
      r8 = HEAP32[r6];
      r9 = r5;
    }
  } while (0);
  r6 = r8 * HEAP32[r9 + 12 >> 2] & -1;
  r9 = _str_new(r2, 0, r6);
  _str_with_class(r9, r3);
  r2 = HEAP32[r9 + 20 >> 2];
  if ((r6 | 0) <= 0) {
    r10 = r9 + 12 | 0;
    r11 = HEAP32[r10 >> 2];
    r12 = r2 + r11 | 0;
    HEAP8[r12] = 0;
    r13 = r9 | 0;
    _mrb_obj_value39(r1, r13);
    STACKTOP = r4;
    return;
  }
  r8 = HEAP32[r3 >> 2];
  r3 = HEAP32[r8 + 12 >> 2];
  _memcpy(r2, HEAP32[r8 + 20 >> 2], r3);
  r8 = (r6 | 0) / 2 & -1;
  r7 = r2 + r3 | 0;
  L614 : do {
    if ((r3 | 0) > (r8 | 0)) {
      r14 = r3;
      r15 = r7;
    } else {
      r5 = r3;
      r16 = r7;
      while (1) {
        _memcpy(r16, r2, r5);
        r17 = r5 << 1;
        r18 = r2 + r17 | 0;
        if ((r17 | 0) > (r8 | 0)) {
          r14 = r17;
          r15 = r18;
          break L614;
        } else {
          r5 = r17;
          r16 = r18;
        }
      }
    }
  } while (0);
  _memcpy(r15, r2, r6 - r14 | 0);
  r10 = r9 + 12 | 0;
  r11 = HEAP32[r10 >> 2];
  r12 = r2 + r11 | 0;
  HEAP8[r12] = 0;
  r13 = r9 | 0;
  _mrb_obj_value39(r1, r13);
  STACKTOP = r4;
  return;
}
_mrb_str_times["X"] = 1;
function _mrb_str_cmp_m(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8, r7 = r6 >> 2;
  r8 = r4 + 16;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((HEAP32[r5 + 4 >> 2] & 255 | 0) == 17) {
    r9 = _mrb_str_cmp(r3, r5);
  } else {
    if ((_mrb_respond_to(r2, r5, _mrb_intern(r2, 5325416)) | 0) == 0) {
      _mrb_nil_value43(r1);
      STACKTOP = r4;
      return;
    }
    if ((_mrb_respond_to(r2, r5, _mrb_intern(r2, 5314124)) | 0) == 0) {
      _mrb_nil_value43(r1);
      STACKTOP = r4;
      return;
    }
    _mrb_funcall(r6, r2, r5, 5314124, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r3 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r3 + 4 >> 2], tempInt));
    r3 = HEAP32[r7];
    r5 = (r3 | 0) == 0;
    do {
      if ((HEAP32[r7 + 1] & 255 | 0) == 0) {
        if (!r5) {
          break;
        }
        _mrb_nil_value43(r1);
        STACKTOP = r4;
        return;
      } else {
        if (!r5) {
          break;
        }
        _mrb_fixnum_value42(r8, 0);
        _mrb_funcall(r1, r2, r8, 5326088, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r7], HEAP32[tempInt + 4 >> 2] = HEAP32[r7 + 1], tempInt));
        STACKTOP = r4;
        return;
      }
    } while (0);
    r9 = -r3 | 0;
  }
  _mrb_fixnum_value42(r1, r9);
  STACKTOP = r4;
  return;
}
function _mrb_str_equal_m(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((_mrb_str_equal(r2, r3, r5) | 0) == 0) {
    _mrb_false_value(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value(r1);
    STACKTOP = r4;
    return;
  }
}
function _mrb_str_match(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  _mrb_nil_value43(r1);
  STACKTOP = r2;
  return;
}
function _mrb_str_aref_m(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = _mrb_get_args(r2, 5315560, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  if ((r7 | 0) == 2) {
    if ((HEAP32[r5 + 4 >> 2] & 255 | 0) == 19) {
      _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5315912);
      _mrb_nil_value43(r1);
      STACKTOP = r4;
      return;
    } else {
      _mrb_str_substr(r1, r2, r3, HEAP32[r5 >> 2], HEAP32[r6 >> 2]);
      STACKTOP = r4;
      return;
    }
  } else if ((r7 | 0) != 1) {
    _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5315336, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r7, tempInt));
  }
  _mrb_str_aref(r1, r2, r3, r5);
  STACKTOP = r4;
  return;
}
function _mrb_str_capitalize(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_str_dup(r5, r2, r3);
  r3 = r5;
  _mrb_str_capitalize_bang(r4 + 8, r2, r5);
  r5 = r1;
  r1 = HEAP32[r3 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r5 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_str_capitalize_bang(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = HEAP32[r3 >> 2];
  _str_modify(r2, r5);
  r2 = HEAP32[r5 + 12 >> 2];
  do {
    if ((r2 | 0) != 0) {
      r6 = HEAP32[r5 + 20 >> 2];
      if ((r6 | 0) == 0) {
        break;
      }
      r7 = r6 + r2 | 0;
      do {
        if ((_islower(HEAPU8[r6]) | 0) == 0) {
          r8 = r6;
          r9 = 0;
        } else {
          HEAP8[r6] = _toupper(HEAPU8[r6]) & 255;
          r8 = r6;
          r9 = 1;
          break;
        }
      } while (0);
      L666 : while (1) {
        r6 = r8;
        while (1) {
          r10 = r6 + 1 | 0;
          if (r10 >>> 0 >= r7 >>> 0) {
            break L666;
          }
          if ((_isupper(HEAPU8[r10]) | 0) == 0) {
            r6 = r10;
          } else {
            break;
          }
        }
        HEAP8[r10] = _tolower(HEAPU8[r10]) & 255;
        r8 = r10;
        r9 = 1;
      }
      if ((r9 | 0) == 0) {
        _mrb_nil_value43(r1);
        STACKTOP = r4;
        return;
      } else {
        r7 = r3;
        r6 = r1;
        r11 = HEAP32[r7 + 4 >> 2];
        HEAP32[r6 >> 2] = HEAP32[r7 >> 2];
        HEAP32[r6 + 4 >> 2] = r11;
        STACKTOP = r4;
        return;
      }
    }
  } while (0);
  _mrb_nil_value43(r1);
  STACKTOP = r4;
  return;
}
_mrb_str_capitalize_bang["X"] = 1;
function _mrb_str_chomp(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_str_dup(r5, r2, r3);
  r3 = r5;
  _mrb_str_chomp_bang(r4 + 8, r2, r5);
  r5 = r1;
  r1 = HEAP32[r3 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r5 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_str_chomp_bang(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4, r6 = r5 >> 2;
  r7 = HEAP32[r3 >> 2];
  _str_modify(r2, r7);
  r8 = (r7 + 12 | 0) >> 2;
  r9 = HEAP32[r8];
  r10 = (r9 | 0) == 0;
  L682 : do {
    if ((_mrb_get_args(r2, 5316748, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt)) | 0) == 0) {
      if (!r10) {
        r11 = HEAP32[r7 + 20 >> 2];
        break;
      }
      _mrb_nil_value43(r1);
      STACKTOP = r4;
      return;
    } else {
      do {
        if (!r10) {
          if ((HEAP32[r6 + 1] & 255 | 0) == 0) {
            r12 = HEAP32[r6];
            if ((r12 | 0) == 0) {
              break;
            }
            r13 = r12;
          } else {
            r13 = HEAP32[r6];
          }
          r12 = HEAP32[r7 + 20 >> 2];
          r14 = HEAP32[r13 + 12 >> 2];
          if ((r14 | 0) == 0) {
            L698 : do {
              if ((r9 | 0) > 0) {
                r15 = r9;
                while (1) {
                  r16 = r15 - 1 | 0;
                  if (HEAP8[r12 + r16 | 0] << 24 >> 24 != 10) {
                    r17 = r15;
                    break L698;
                  }
                  if ((r16 | 0) <= 0) {
                    r17 = r16;
                    break L698;
                  }
                  r18 = r15 - 2 | 0;
                  r19 = HEAP8[r12 + r18 | 0] << 24 >> 24 == 13 ? r18 : r16;
                  if ((r19 | 0) > 0) {
                    r15 = r19;
                  } else {
                    r17 = r19;
                    break L698;
                  }
                }
              } else {
                r17 = r9;
              }
            } while (0);
            if ((r17 | 0) < (HEAP32[r8] | 0)) {
              HEAP32[r8] = r17;
              HEAP8[r12 + r17 | 0] = 0;
              r15 = r3;
              r19 = r1;
              r20 = r15 | 0;
              r21 = r15 + 4 | 0;
              r15 = HEAP32[r21 >> 2];
              r22 = r19 | 0;
              HEAP32[r22 >> 2] = HEAP32[r20 >> 2];
              r23 = r19 + 4 | 0;
              HEAP32[r23 >> 2] = r15;
              STACKTOP = r4;
              return;
            } else {
              _mrb_nil_value43(r1);
              STACKTOP = r4;
              return;
            }
          }
          if ((r14 | 0) > (r9 | 0)) {
            _mrb_nil_value43(r1);
            STACKTOP = r4;
            return;
          }
          r15 = HEAP32[r13 + 20 >> 2];
          r19 = HEAP8[r15 + (r14 - 1) | 0];
          if ((r14 | 0) == 1 & r19 << 24 >> 24 == 10) {
            r11 = r12;
            break L682;
          }
          r16 = r9 - r14 | 0;
          r18 = r12 + r16 | 0;
          do {
            if (HEAP8[r12 + (r9 - 1) | 0] << 24 >> 24 == r19 << 24 >> 24) {
              if ((r14 | 0) >= 2) {
                if ((_memcmp(r15, r18, r14) | 0) != 0) {
                  break;
                }
              }
              HEAP32[r8] = r16;
              HEAP8[r18] = 0;
              r24 = r3;
              r25 = r1;
              r26 = HEAP32[r24 + 4 >> 2];
              HEAP32[r25 >> 2] = HEAP32[r24 >> 2];
              HEAP32[r25 + 4 >> 2] = r26;
              STACKTOP = r4;
              return;
            }
          } while (0);
          _mrb_nil_value43(r1);
          STACKTOP = r4;
          return;
        }
      } while (0);
      _mrb_nil_value43(r1);
      STACKTOP = r4;
      return;
    }
  } while (0);
  r13 = HEAP8[r11 + (r9 - 1) | 0];
  do {
    if (r13 << 24 >> 24 == 10) {
      r9 = HEAP32[r8];
      r17 = r9 - 1 | 0;
      HEAP32[r8] = r17;
      if ((r17 | 0) <= 0) {
        r27 = r17;
        break;
      }
      r7 = r9 - 2 | 0;
      if (HEAP8[r11 + r7 | 0] << 24 >> 24 != 13) {
        r27 = r17;
        break;
      }
      HEAP32[r8] = r7;
      r27 = r7;
    } else if (r13 << 24 >> 24 == 13) {
      r7 = HEAP32[r8] - 1 | 0;
      HEAP32[r8] = r7;
      r27 = r7;
    } else {
      _mrb_nil_value43(r1);
      STACKTOP = r4;
      return;
    }
  } while (0);
  HEAP8[r11 + r27 | 0] = 0;
  r27 = r3;
  r3 = r1;
  r20 = r27 | 0;
  r21 = r27 + 4 | 0;
  r27 = HEAP32[r21 >> 2];
  r22 = r3 | 0;
  HEAP32[r22 >> 2] = HEAP32[r20 >> 2];
  r23 = r3 + 4 | 0;
  HEAP32[r23 >> 2] = r27;
  STACKTOP = r4;
  return;
}
_mrb_str_chomp_bang["X"] = 1;
function _mrb_str_chop(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_str_dup(r5, r2, r3);
  r3 = r5;
  _mrb_str_chop_bang(r4 + 8, r2, r5);
  r5 = r1;
  r1 = HEAP32[r3 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r5 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_str_chop_bang(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = HEAP32[r3 >> 2];
  _str_modify(r2, r5);
  r2 = r5 + 12 | 0;
  r6 = HEAP32[r2 >> 2];
  if ((r6 | 0) <= 0) {
    _mrb_nil_value43(r1);
    STACKTOP = r4;
    return;
  }
  r7 = r6 - 1 | 0;
  r8 = HEAP32[r5 + 20 >> 2];
  if (HEAP8[r8 + r7 | 0] << 24 >> 24 == 10 & (r7 | 0) > 0) {
    r5 = r6 - 2 | 0;
    r9 = HEAP8[r8 + r5 | 0] << 24 >> 24 == 13 ? r5 : r7;
  } else {
    r9 = r7;
  }
  HEAP32[r2 >> 2] = r9;
  HEAP8[r8 + r9 | 0] = 0;
  r9 = r3;
  r3 = r1;
  r1 = HEAP32[r9 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r9 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_str_downcase(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_str_dup(r5, r2, r3);
  r3 = r5;
  _mrb_str_downcase_bang(r4 + 8, r2, r5);
  r5 = r1;
  r1 = HEAP32[r3 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r5 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_str_downcase_bang(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = HEAP32[r3 >> 2];
  _str_modify(r2, r5);
  r2 = HEAP32[r5 + 20 >> 2];
  r6 = HEAP32[r5 + 12 >> 2];
  r5 = r2 + r6 | 0;
  do {
    if ((r6 | 0) > 0) {
      r7 = 0;
      r8 = r2;
      while (1) {
        if ((_isupper(HEAPU8[r8]) | 0) == 0) {
          r9 = r7;
        } else {
          HEAP8[r8] = _tolower(HEAPU8[r8]) & 255;
          r9 = 1;
        }
        r10 = r8 + 1 | 0;
        if (r10 >>> 0 < r5 >>> 0) {
          r7 = r9;
          r8 = r10;
        } else {
          break;
        }
      }
      if ((r9 | 0) == 0) {
        break;
      }
      r8 = r3;
      r7 = r1;
      r10 = HEAP32[r8 + 4 >> 2];
      HEAP32[r7 >> 2] = HEAP32[r8 >> 2];
      HEAP32[r7 + 4 >> 2] = r10;
      STACKTOP = r4;
      return;
    }
  } while (0);
  _mrb_nil_value43(r1);
  STACKTOP = r4;
  return;
}
function _mrb_str_empty_p(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  if ((HEAP32[HEAP32[r3 >> 2] + 12 >> 2] | 0) == 0) {
    _mrb_true_value(r1);
    STACKTOP = r2;
    return;
  } else {
    _mrb_false_value(r1);
    STACKTOP = r2;
    return;
  }
}
function _mrb_str_eql(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((HEAP32[r5 + 4 >> 2] & 255 | 0) != 17) {
    _mrb_false_value(r1);
    STACKTOP = r4;
    return;
  }
  if ((_str_eql(r3, r5) | 0) == 0) {
    _mrb_false_value(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value(r1);
    STACKTOP = r4;
    return;
  }
}
function _mrb_str_hash_m(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  _mrb_fixnum_value42(r1, _mrb_str_hash(r3));
  STACKTOP = r2;
  return;
}
function _mrb_str_include(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((HEAP32[r5 + 4 >> 2] & 255 | 0) == 3) {
    r7 = HEAP32[r3 >> 2];
    if ((_memchr(HEAP32[r7 + 20 >> 2], HEAP32[r5 >> 2], HEAP32[r7 + 12 >> 2]) | 0) == 0) {
      _mrb_false_value(r1);
      STACKTOP = r4;
      return;
    } else {
      _mrb_true_value(r1);
      STACKTOP = r4;
      return;
    }
  } else {
    _mrb_string_value(r6, r2, r5);
    if ((_mrb_str_index(r3, r5, 0) | 0) == -1) {
      _mrb_false_value(r1);
      STACKTOP = r4;
      return;
    } else {
      _mrb_true_value(r1);
      STACKTOP = r4;
      return;
    }
  }
}
function _mrb_str_index_m(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  r7 = r5 + 4;
  r8 = r5 + 8;
  r9 = r5 + 16;
  r10 = r5 + 24;
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r6, HEAP32[tempInt + 4 >> 2] = r7, tempInt));
  r11 = HEAP32[r7 >> 2];
  do {
    if ((r11 | 0) == 2) {
      r7 = HEAP32[r6 >> 2];
      r12 = HEAP32[r7 + 8 >> 2];
      r13 = r7;
      r7 = r8;
      r14 = HEAP32[r13 >> 2];
      r15 = HEAP32[r13 + 4 >> 2];
      HEAP32[r7 >> 2] = r14;
      HEAP32[r7 + 4 >> 2] = r15;
      r7 = r15;
      r15 = r14;
      if ((r12 | 0) >= 0) {
        r16 = r12;
        r17 = r7;
        r18 = r15;
        break;
      }
      r14 = HEAP32[HEAP32[r3 >> 2] + 12 >> 2] + r12 | 0;
      if ((r14 | 0) >= 0) {
        r16 = r14;
        r17 = r7;
        r18 = r15;
        break;
      }
      if ((r7 & 255 | 0) == 19) {
        _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5315632);
      }
      _mrb_nil_value43(r1);
      STACKTOP = r5;
      return;
    } else {
      if ((r11 | 0) > 0) {
        r7 = HEAP32[r6 >> 2];
        r15 = r8;
        r14 = r7 | 0;
        r12 = HEAP32[r14 >> 2];
        r13 = r7 + 4 | 0;
        r7 = HEAP32[r13 >> 2];
        r19 = r15 | 0;
        HEAP32[r19 >> 2] = r12;
        r20 = r15 + 4 | 0;
        HEAP32[r20 >> 2] = r7;
        r16 = 0;
        r17 = r7;
        r18 = r12;
        break;
      } else {
        _mrb_nil_value43(r9);
        r12 = r9;
        r7 = r8;
        r14 = r12 | 0;
        r15 = HEAP32[r14 >> 2];
        r13 = r12 + 4 | 0;
        r12 = HEAP32[r13 >> 2];
        r19 = r7 | 0;
        HEAP32[r19 >> 2] = r15;
        r20 = r7 + 4 | 0;
        HEAP32[r20 >> 2] = r12;
        r16 = 0;
        r17 = r12;
        r18 = r15;
        break;
      }
    }
  } while (0);
  r9 = r8 + 4 | 0;
  r6 = r17 & 255;
  do {
    if ((r6 | 0) == 19) {
      _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5315912);
      r21 = r16;
      break;
    } else if ((r6 | 0) == 3) {
      r17 = HEAP32[r3 >> 2];
      r11 = HEAP32[r17 + 12 >> 2];
      r15 = HEAP32[r17 + 20 >> 2];
      r17 = r16;
      while (1) {
        if ((r17 | 0) >= (r11 | 0)) {
          r4 = 662;
          break;
        }
        if ((HEAPU8[r15 + r17 | 0] | 0) == (r18 | 0)) {
          r4 = 661;
          break;
        } else {
          r17 = r17 + 1 | 0;
        }
      }
      if (r4 == 661) {
        _mrb_fixnum_value42(r1, r17);
        STACKTOP = r5;
        return;
      } else if (r4 == 662) {
        _mrb_nil_value43(r1);
        STACKTOP = r5;
        return;
      }
    } else if ((r6 | 0) == 17) {
      r4 = 666;
    } else {
      _mrb_check_string_type(r10, r2, r8);
      r15 = HEAP32[r10 >> 2];
      r11 = HEAP32[r10 + 4 >> 2];
      if ((r11 & 255 | r15 | 0) == 0) {
        r12 = _mrb_class_obj_get(r2, 5325036);
        r20 = _mrb_obj_classname(r2, r8);
        _mrb_raisef(r2, r12, 5315828, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r20, tempInt));
      }
      HEAP32[r8 >> 2] = r15;
      HEAP32[r9 >> 2] = r11;
      r4 = 666;
      break;
    }
  } while (0);
  if (r4 == 666) {
    r21 = _mrb_str_index(r3, r8, r16);
  }
  if ((r21 | 0) == -1) {
    _mrb_nil_value43(r1);
    STACKTOP = r5;
    return;
  } else {
    _mrb_fixnum_value42(r1, r21);
    STACKTOP = r5;
    return;
  }
}
_mrb_str_index_m["X"] = 1;
function _mrb_str_init(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  if ((_mrb_get_args(r2, 5316748, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt)) | 0) == 1) {
    _str_replace(r4 + 8, r2, HEAP32[r3 >> 2], HEAP32[r5 >> 2]);
  }
  r5 = r3;
  r3 = r1;
  r1 = HEAP32[r5 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_str_replace(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5315788, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _str_replace(r1, r2, HEAP32[r3 >> 2], HEAP32[r5 >> 2]);
  STACKTOP = r4;
  return;
}
function _mrb_str_reverse(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r3;
  r6 = HEAP32[HEAP32[r5 >> 2] + 12 >> 2];
  if ((r6 | 0) < 2) {
    _mrb_str_dup(r1, r2, r3);
    STACKTOP = r4;
    return;
  }
  r7 = _str_new(r2, 0, r6);
  _str_with_class(r7, r3);
  r3 = HEAP32[r5 >> 2];
  r5 = HEAP32[r3 + 20 >> 2];
  r6 = HEAP32[r3 + 12 >> 2] - 1 | 0;
  L836 : do {
    if ((r6 | 0) >= 0) {
      r3 = r5 + r6 | 0;
      r2 = HEAP32[r7 + 20 >> 2];
      while (1) {
        r8 = r3 - 1 | 0;
        HEAP8[r2] = HEAP8[r3];
        if (r8 >>> 0 < r5 >>> 0) {
          break L836;
        } else {
          r3 = r8;
          r2 = r2 + 1 | 0;
        }
      }
    }
  } while (0);
  _mrb_obj_value39(r1, r7 | 0);
  STACKTOP = r4;
  return;
}
function _mrb_str_reverse_bang(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = HEAP32[r3 >> 2];
  _str_modify(r2, r5);
  r2 = HEAP32[r5 + 12 >> 2];
  L843 : do {
    if ((r2 | 0) > 1) {
      r6 = HEAP32[r5 + 20 >> 2];
      r7 = r2 - 1 | 0;
      if ((r7 | 0) <= 0) {
        break;
      }
      r8 = r6 + r7 | 0;
      r7 = r6;
      while (1) {
        r6 = HEAP8[r7];
        r9 = r7 + 1 | 0;
        HEAP8[r7] = HEAP8[r8];
        r10 = r8 - 1 | 0;
        HEAP8[r8] = r6;
        if (r9 >>> 0 < r10 >>> 0) {
          r8 = r10;
          r7 = r9;
        } else {
          break L843;
        }
      }
    }
  } while (0);
  r2 = r3;
  r3 = r1;
  r1 = HEAP32[r2 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r2 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_str_rindex_m(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  r7 = r5 + 4;
  r8 = r5 + 8;
  r9 = r5 + 16;
  r10 = r5 + 24;
  r11 = HEAP32[r3 >> 2];
  r12 = r11 + 12 | 0;
  r13 = HEAP32[r12 >> 2];
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r6, HEAP32[tempInt + 4 >> 2] = r7, tempInt));
  r14 = HEAP32[r7 >> 2];
  do {
    if ((r14 | 0) == 2) {
      r7 = HEAP32[r6 >> 2];
      r15 = r7;
      r16 = r8;
      r17 = r15 | 0, r18 = r17 >> 2;
      r19 = HEAP32[r18];
      r20 = r15 + 4 | 0, r15 = r20 >> 2;
      r21 = HEAP32[r15];
      r22 = r16 | 0, r23 = r22 >> 2;
      HEAP32[r23] = r19;
      r24 = r16 + 4 | 0, r16 = r24 >> 2;
      HEAP32[r16] = r21;
      r25 = HEAP32[r7 + 8 >> 2];
      r7 = r21;
      r21 = r19;
      do {
        if ((r25 | 0) < 0) {
          r19 = r25 + r13 | 0;
          if ((r19 | 0) >= 0) {
            r26 = r19;
            break;
          }
          if ((r7 & 255 | 0) == 19) {
            _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5315912);
          }
          _mrb_nil_value43(r1);
          STACKTOP = r5;
          return;
        } else {
          r26 = r25;
        }
      } while (0);
      r27 = (r26 | 0) > (r13 | 0) ? r13 : r26;
      r28 = r7;
      r29 = r21;
    } else {
      if ((r14 | 0) > 0) {
        r25 = HEAP32[r6 >> 2];
        r19 = r8;
        r17 = r25 | 0, r18 = r17 >> 2;
        r30 = HEAP32[r18];
        r20 = r25 + 4 | 0, r15 = r20 >> 2;
        r25 = HEAP32[r15];
        r22 = r19 | 0, r23 = r22 >> 2;
        HEAP32[r23] = r30;
        r24 = r19 + 4 | 0, r16 = r24 >> 2;
        HEAP32[r16] = r25;
        r27 = r13;
        r28 = r25;
        r29 = r30;
        break;
      } else {
        _mrb_nil_value43(r9);
        r30 = r9;
        r25 = r8;
        r17 = r30 | 0, r18 = r17 >> 2;
        r19 = HEAP32[r18];
        r20 = r30 + 4 | 0, r15 = r20 >> 2;
        r30 = HEAP32[r15];
        r22 = r25 | 0, r23 = r22 >> 2;
        HEAP32[r23] = r19;
        r24 = r25 + 4 | 0, r16 = r24 >> 2;
        HEAP32[r16] = r30;
        r27 = r13;
        r28 = r30;
        r29 = r19;
        break;
      }
    }
  } while (0);
  r13 = r8 + 4 | 0;
  r9 = r28 & 255;
  do {
    if ((r9 | 0) == 3) {
      r28 = HEAP32[r11 + 20 >> 2];
      r6 = HEAP32[r12 >> 2];
      while (1) {
        if ((r6 | 0) <= -1) {
          r4 = 710;
          break;
        }
        if ((HEAPU8[r28 + r6 | 0] | 0) == (r29 | 0)) {
          r4 = 709;
          break;
        } else {
          r6 = r6 - 1 | 0;
        }
      }
      if (r4 == 709) {
        _mrb_fixnum_value42(r1, r6);
        STACKTOP = r5;
        return;
      } else if (r4 == 710) {
        _mrb_nil_value43(r1);
        STACKTOP = r5;
        return;
      }
    } else if ((r9 | 0) == 19) {
      _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5315912);
      break;
    } else if ((r9 | 0) == 17) {
      r4 = 714;
    } else {
      _mrb_check_string_type(r10, r2, r8);
      r28 = HEAP32[r10 >> 2];
      r16 = HEAP32[r10 + 4 >> 2];
      if ((r16 & 255 | r28 | 0) == 0) {
        r24 = _mrb_class_obj_get(r2, 5325036);
        r23 = _mrb_obj_classname(r2, r8);
        _mrb_raisef(r2, r24, 5315828, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r23, tempInt));
      }
      HEAP32[r8 >> 2] = r28;
      HEAP32[r13 >> 2] = r16;
      r4 = 714;
      break;
    }
  } while (0);
  do {
    if (r4 == 714) {
      r13 = _mrb_str_rindex(r3, r8, r27);
      if ((r13 | 0) <= -1) {
        break;
      }
      _mrb_fixnum_value42(r1, r13);
      STACKTOP = r5;
      return;
    }
  } while (0);
  _mrb_nil_value43(r1);
  STACKTOP = r5;
  return;
}
_mrb_str_rindex_m["X"] = 1;
function _mrb_float_value44(r1, r2) {
  HEAPF32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 6;
  return;
}
function _mrb_true_value(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 2;
  return;
}
function _mrb_false_value(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_str_split_m(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 68 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  r7 = r5 + 8, r8 = r7 >> 2;
  r9 = r5 + 12;
  r10 = r5 + 20;
  r11 = r5 + 28;
  r12 = r5 + 36;
  r13 = r5 + 44;
  r14 = r5 + 52;
  r15 = r5 + 60;
  _mrb_nil_value43(r6);
  HEAP32[r8] = -1;
  r16 = _mrb_get_args(r2, 5316072, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r6, HEAP32[tempInt + 4 >> 2] = r7, tempInt));
  do {
    if ((r16 | 0) == 0) {
      r17 = 0;
      r4 = 735;
    } else if ((r16 | 0) == 2) {
      if ((HEAP32[r8] | 0) != 1) {
        r18 = 1;
        r4 = 731;
        break;
      }
      if ((HEAP32[HEAP32[r3 >> 2] + 12 >> 2] | 0) == 0) {
        _mrb_ary_new_capa(r1, r2, 0);
        STACKTOP = r5;
        return;
      } else {
        _mrb_ary_new_from_values(r1, r2, 1, r3);
        STACKTOP = r5;
        return;
      }
    } else {
      r18 = 0;
      r4 = 731;
    }
  } while (0);
  L898 : do {
    if (r4 == 731) {
      r16 = HEAP32[r6 + 4 >> 2] & 255;
      do {
        if ((r16 | 0) == 0) {
          if ((HEAP32[r6 >> 2] | 0) == 0) {
            r17 = r18;
            r4 = 735;
            break L898;
          } else {
            r4 = 734;
            break;
          }
        } else if ((r16 | 0) == 17) {
          r7 = r6;
          r19 = HEAP32[r7 >> 2];
          if ((HEAP32[r19 + 12 >> 2] | 0) != 1) {
            r20 = r7;
            r4 = 736;
            break;
          }
          r21 = HEAP8[HEAP32[r19 + 20 >> 2]] << 24 >> 24 == 32;
          _mrb_ary_new(r11, r2);
          r19 = r11;
          r22 = r9;
          r23 = r19 | 0, r24 = r23 >> 2;
          r25 = r19 + 4 | 0, r26 = r25 >> 2;
          r19 = HEAP32[r26];
          r27 = r22 | 0;
          HEAP32[r27 >> 2] = HEAP32[r24];
          r28 = r22 + 4 | 0;
          HEAP32[r28 >> 2] = r19;
          if (r21) {
            r29 = r18;
            r30 = r22;
            r4 = 738;
            break L898;
          } else {
            r31 = r22;
            r32 = r7;
            break;
          }
        } else {
          r4 = 734;
        }
      } while (0);
      do {
        if (r4 == 734) {
          _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5315912);
          r20 = r6;
          r4 = 736;
          break;
        }
      } while (0);
      if (r4 == 736) {
        _mrb_ary_new(r11, r2);
        r16 = r11;
        r7 = r9;
        r33 = r16 | 0;
        r34 = r16 + 4 | 0;
        r16 = HEAP32[r34 >> 2];
        r23 = r7 | 0, r24 = r23 >> 2;
        HEAP32[r24] = HEAP32[r33 >> 2];
        r25 = r7 + 4 | 0, r26 = r25 >> 2;
        HEAP32[r26] = r16;
        r31 = r7;
        r32 = r20;
      }
      r7 = HEAP32[r3 >> 2];
      r16 = HEAP32[r7 + 20 >> 2];
      r22 = r16 + HEAP32[r7 + 12 >> 2] | 0;
      r7 = HEAP32[r32 >> 2];
      r21 = HEAP32[r7 + 12 >> 2];
      L909 : do {
        if ((r21 | 0) == 0) {
          r19 = _mrb_gc_arena_save(HEAP32[r2 + 544 >> 2]);
          r35 = r16;
          r36 = r18;
          r37 = r16;
          while (1) {
            r38 = r37;
            while (1) {
              if (r38 >>> 0 >= r22 >>> 0) {
                r39 = r38;
                break L909;
              }
              _mrb_str_subseq(r13, r2, r3, r38 - r35 | 0, 1);
              _mrb_ary_push(r2, r9, r13);
              _mrb_gc_arena_restore(r2, r19);
              r40 = r38 + 1 | 0;
              r41 = HEAP32[r8];
              if ((r41 | 0) > -1) {
                break;
              } else {
                r38 = r40;
              }
            }
            r38 = r36 + 1 | 0;
            if ((r41 | 0) > (r38 | 0)) {
              r36 = r38;
              r37 = r40;
            } else {
              r39 = r40;
              break L909;
            }
          }
        } else {
          r37 = HEAP32[r7 + 20 >> 2];
          r36 = _mrb_gc_arena_save(HEAP32[r2 + 544 >> 2]);
          r19 = r22;
          r35 = r16;
          r38 = r18;
          r42 = r16;
          while (1) {
            r43 = r42;
            while (1) {
              if (r43 >>> 0 >= r22 >>> 0) {
                r39 = r43;
                break L909;
              }
              r44 = r43;
              r45 = _mrb_memsearch(r37, r21, r43, r19 - r44 | 0);
              if ((r45 | 0) <= -1) {
                r39 = r43;
                break L909;
              }
              _mrb_str_subseq(r14, r2, r3, r44 - r35 | 0, r45);
              _mrb_ary_push(r2, r9, r14);
              _mrb_gc_arena_restore(r2, r36);
              r46 = r43 + r45 + r21 | 0;
              r47 = HEAP32[r8];
              if ((r47 | 0) > -1) {
                break;
              } else {
                r43 = r46;
              }
            }
            r43 = r38 + 1 | 0;
            if ((r47 | 0) > (r43 | 0)) {
              r38 = r43;
              r42 = r46;
            } else {
              r39 = r46;
              break L909;
            }
          }
        }
      } while (0);
      r48 = r39 - r16 | 0;
      r49 = r31;
      break;
    }
  } while (0);
  do {
    if (r4 == 735) {
      _mrb_ary_new(r11, r2);
      r31 = r11;
      r39 = r9;
      r33 = r31 | 0;
      r34 = r31 + 4 | 0;
      r31 = HEAP32[r34 >> 2];
      r23 = r39 | 0, r24 = r23 >> 2;
      HEAP32[r24] = HEAP32[r33 >> 2];
      r25 = r39 + 4 | 0, r26 = r25 >> 2;
      HEAP32[r26] = r31;
      r29 = r17;
      r30 = r39;
      r4 = 738;
      break;
    }
  } while (0);
  L928 : do {
    if (r4 == 738) {
      r17 = HEAP32[r3 >> 2];
      r33 = HEAP32[r17 + 20 >> 2];
      r34 = r33 + HEAP32[r17 + 12 >> 2] | 0;
      r17 = r33;
      r11 = r2 + 544 | 0;
      r39 = 0;
      r31 = 0;
      r46 = r29;
      r47 = r33;
      r33 = HEAP32[r8];
      while (1) {
        r14 = (r33 | 0) < 0 | (r33 | 0) > (r46 | 0);
        r18 = r39;
        r40 = r31;
        r41 = r47;
        r13 = 0;
        L932 : while (1) {
          r32 = r18;
          r50 = r40;
          r20 = r41;
          L934 : while (1) {
            r51 = r32;
            r6 = r20;
            while (1) {
              if (r6 >>> 0 >= r34 >>> 0) {
                r48 = r51;
                r49 = r30;
                break L928;
              }
              r52 = r6 + 1 | 0;
              r53 = HEAP8[HEAPU8[r6] + 5310084 | 0] << 24 >> 24 != 0;
              if (r13) {
                break;
              }
              r54 = r52 - r17 | 0;
              if (r53) {
                r51 = r54;
                r6 = r52;
              } else {
                break L934;
              }
            }
            if (r53) {
              break L932;
            }
            r32 = r51;
            r50 = r52 - r17 | 0;
            r20 = r52;
          }
          if (r14) {
            r18 = r51;
            r40 = r54;
            r41 = r52;
            r13 = 1;
          } else {
            r48 = r51;
            r49 = r30;
            break L928;
          }
        }
        r13 = _mrb_gc_arena_save(HEAP32[r11 >> 2]);
        _mrb_str_subseq(r12, r2, r3, r51, r50 - r51 | 0);
        _mrb_ary_push(r2, r9, r12);
        _mrb_gc_arena_restore(r2, r13);
        r13 = HEAP32[r8];
        r39 = r52 - r17 | 0;
        r31 = r50;
        r46 = (r13 >>> 31 ^ 1) + r46 | 0;
        r47 = r52;
        r33 = r13;
      }
    }
  } while (0);
  r52 = HEAP32[HEAP32[r3 >> 2] + 12 >> 2];
  do {
    if ((r52 | 0) > 0) {
      r50 = HEAP32[r8];
      if (!((r50 | 0) > -1 | (r52 | 0) > (r48 | 0) | (r50 | 0) < 0)) {
        break;
      }
      if ((r52 | 0) == (r48 | 0)) {
        _mrb_str_new_empty(r10, r2, r3);
      } else {
        _mrb_str_subseq(r10, r2, r3, r48, r52 - r48 | 0);
      }
      _mrb_ary_push(r2, r9, r10);
    }
  } while (0);
  L953 : do {
    if ((HEAP32[r8] | 0) < 0) {
      r2 = r9;
      r48 = HEAP32[r2 >> 2];
      r52 = HEAP32[r48 + 12 >> 2];
      if ((r52 | 0) <= 0) {
        break;
      }
      r3 = r10;
      r50 = r48;
      r48 = r52;
      while (1) {
        r52 = (r48 - 1 << 3) + HEAP32[r50 + 20 >> 2] | 0;
        r23 = r52 | 0, r24 = r23 >> 2;
        r12 = HEAP32[r24];
        r25 = r52 + 4 | 0, r26 = r25 >> 2;
        r52 = HEAP32[r26];
        r27 = r3 | 0;
        HEAP32[r27 >> 2] = r12;
        r28 = r3 + 4 | 0;
        HEAP32[r28 >> 2] = r52;
        if ((HEAP32[r12 + 12 >> 2] | 0) != 0) {
          break L953;
        }
        _mrb_ary_pop(r15, undef, r9);
        r12 = HEAP32[r2 >> 2];
        r52 = HEAP32[r12 + 12 >> 2];
        if ((r52 | 0) > 0) {
          r50 = r12;
          r48 = r52;
        } else {
          break L953;
        }
      }
    }
  } while (0);
  r9 = r1;
  r1 = HEAP32[r49 + 4 >> 2];
  HEAP32[r9 >> 2] = HEAP32[r49 >> 2];
  HEAP32[r9 + 4 >> 2] = r1;
  STACKTOP = r5;
  return;
}
_mrb_str_split_m["X"] = 1;
function _mrb_str_to_i(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4;
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  do {
    if ((HEAP32[r6 >> 2] | 0) == 0) {
      r7 = 10;
    } else {
      r8 = HEAP32[HEAP32[r5 >> 2] >> 2];
      if ((r8 | 0) >= 0) {
        r7 = r8;
        break;
      }
      _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5315296, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r8, tempInt));
      r7 = r8;
    }
  } while (0);
  _mrb_str_to_inum(r1, r2, r3, r7, 0);
  STACKTOP = r4;
  return;
}
function _mrb_str_to_f(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_float_value44(r1, _mrb_str_to_dbl(r2, r3, 0));
  STACKTOP = r4;
  return;
}
function _mrb_str_to_s(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  if ((_mrb_obj_class(r2, r3) | 0) == (HEAP32[r2 + 88 >> 2] | 0)) {
    r5 = r3;
    r6 = r1;
    r7 = HEAP32[r5 + 4 >> 2];
    HEAP32[r6 >> 2] = HEAP32[r5 >> 2];
    HEAP32[r6 + 4 >> 2] = r7;
    STACKTOP = r4;
    return;
  } else {
    _mrb_str_dup(r1, r2, r3);
    STACKTOP = r4;
    return;
  }
}
function _mrb_str_upcase(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_str_dup(r5, r2, r3);
  r3 = r5;
  _mrb_str_upcase_bang(r4 + 8, r2, r5);
  r5 = r1;
  r1 = HEAP32[r3 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r5 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_str_upcase_bang(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = HEAP32[r3 >> 2];
  _str_modify(r2, r5);
  r2 = HEAP32[r5 + 20 >> 2];
  r6 = HEAP32[r5 + 12 >> 2];
  r5 = r2 + r6 | 0;
  do {
    if ((r6 | 0) > 0) {
      r7 = r2;
      r8 = 0;
      while (1) {
        if ((_islower(HEAPU8[r7]) | 0) == 0) {
          r9 = r8;
        } else {
          HEAP8[r7] = _toupper(HEAPU8[r7]) & 255;
          r9 = 1;
        }
        r10 = r7 + 1 | 0;
        if (r10 >>> 0 < r5 >>> 0) {
          r7 = r10;
          r8 = r9;
        } else {
          break;
        }
      }
      if ((r9 | 0) == 0) {
        break;
      }
      r8 = r3;
      r7 = r1;
      r10 = HEAP32[r8 + 4 >> 2];
      HEAP32[r7 >> 2] = HEAP32[r8 >> 2];
      HEAP32[r7 + 4 >> 2] = r10;
      STACKTOP = r4;
      return;
    }
  } while (0);
  _mrb_nil_value43(r1);
  STACKTOP = r4;
  return;
}
function _mrb_str_bytes(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = HEAP32[r3 >> 2];
  r3 = r7 + 12 | 0;
  _mrb_ary_new_capa(r5, r2, HEAP32[r3 >> 2]);
  r8 = HEAP32[r7 + 20 >> 2];
  r7 = HEAP32[r3 >> 2];
  r3 = r8 + r7 | 0;
  L987 : do {
    if ((r7 | 0) > 0) {
      r9 = r8;
      while (1) {
        _mrb_fixnum_value42(r6, HEAPU8[r9]);
        _mrb_ary_push(r2, r5, r6);
        r10 = r9 + 1 | 0;
        if (r10 >>> 0 < r3 >>> 0) {
          r9 = r10;
        } else {
          break L987;
        }
      }
    }
  } while (0);
  r3 = r5;
  r5 = r1;
  r1 = HEAP32[r3 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r5 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_memsearch(r1, r2, r3, r4) {
  var r5, r6, r7;
  L992 : do {
    if ((r2 | 0) > (r4 | 0)) {
      r5 = -1;
    } else {
      if ((r2 | 0) == (r4 | 0)) {
        r5 = ((_memcmp(r1, r3, r2) | 0) != 0) << 31 >> 31;
        break;
      }
      if ((r2 | 0) < 1) {
        r5 = 0;
        break;
      }
      if ((r2 | 0) != 1) {
        r5 = _mrb_memsearch_qs(r1, r2, r3, r4);
        break;
      }
      r6 = r3 + r4 | 0;
      r7 = r3;
      while (1) {
        if (r7 >>> 0 >= r6 >>> 0) {
          r5 = -1;
          break L992;
        }
        if (HEAP8[r1] << 24 >> 24 == HEAP8[r7] << 24 >> 24) {
          break;
        } else {
          r7 = r7 + 1 | 0;
        }
      }
      r5 = r7 - r3 | 0;
    }
  } while (0);
  return r5;
}
function _mrb_str_new_empty(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = _str_new(r2, 0, 0);
  _str_with_class(r5, r3);
  _mrb_obj_value39(r1, r5 | 0);
  STACKTOP = r4;
  return;
}
function _mrb_memsearch_qs(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r5 = 0;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 1024 | 0;
  r7 = r6 >> 2;
  r8 = r2 + 1 | 0;
  r9 = 0;
  while (1) {
    HEAP32[(r9 << 2 >> 2) + r7] = r8;
    r10 = r9 + 1 | 0;
    if ((r10 | 0) == 256) {
      break;
    } else {
      r9 = r10;
    }
  }
  r9 = r1 + r2 | 0;
  L1011 : do {
    if ((r2 | 0) > 0) {
      r8 = r9;
      r10 = r1;
      while (1) {
        HEAP32[(HEAPU8[r10] << 2 >> 2) + r7] = r8 - r10 | 0;
        r11 = r10 + 1 | 0;
        if (r11 >>> 0 < r9 >>> 0) {
          r10 = r11;
        } else {
          break L1011;
        }
      }
    }
  } while (0);
  r9 = r3 + r4 | 0;
  if ((r2 | 0) > (r4 | 0)) {
    r12 = -1;
    STACKTOP = r6;
    return r12;
  }
  r4 = HEAP8[r1];
  r10 = r3;
  r8 = r3 + r2 | 0;
  while (1) {
    if (r4 << 24 >> 24 == HEAP8[r10] << 24 >> 24) {
      if ((_memcmp(r1, r10, r2) | 0) == 0) {
        break;
      }
    }
    r11 = HEAP32[(HEAPU8[r8] << 2 >> 2) + r7];
    r13 = r10 + r11 + r2 | 0;
    if (r13 >>> 0 > r9 >>> 0) {
      r12 = -1;
      r5 = 828;
      break;
    } else {
      r10 = r10 + r11 | 0;
      r8 = r13;
    }
  }
  if (r5 == 828) {
    STACKTOP = r6;
    return r12;
  }
  r12 = r10 - r3 | 0;
  STACKTOP = r6;
  return r12;
}
_mrb_memsearch_qs["X"] = 1;
function _mrb_str_rindex(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  r4 = STACKTOP;
  r5 = r1, r6 = r5 >> 2;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r1 >> 2] = HEAP32[r6];
  HEAP32[r1 + 4 >> 2] = HEAP32[r6 + 1];
  r5 = r2, r6 = r5 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 1];
  r6 = HEAP32[r1 >> 2];
  r1 = HEAP32[r2 >> 2];
  r2 = HEAP32[r1 + 12 >> 2];
  r5 = HEAP32[r6 + 12 >> 2];
  L1029 : do {
    if ((r5 | 0) < (r2 | 0)) {
      r7 = -1;
    } else {
      r8 = (r5 - r3 | 0) < (r2 | 0) ? r5 - r2 | 0 : r3;
      r9 = HEAP32[r6 + 20 >> 2];
      r10 = HEAP32[r1 + 20 >> 2];
      if ((r2 | 0) == 0) {
        r7 = r8;
        break;
      }
      r11 = r9 + r8 | 0;
      while (1) {
        if (r9 >>> 0 > r11 >>> 0) {
          r7 = -1;
          break L1029;
        }
        if ((_memcmp(r11, r10, r2) | 0) == 0) {
          break;
        } else {
          r11 = r11 - 1 | 0;
        }
      }
      r7 = r11 - r9 | 0;
    }
  } while (0);
  STACKTOP = r4;
  return r7;
}
function _str_replace(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r5 = r4 >> 2;
  r6 = r3 >> 2;
  do {
    if ((HEAP32[r5] & 524288 | 0) == 0) {
      r7 = (r4 + 12 | 0) >> 2;
      r8 = HEAP32[r7];
      if ((r8 | 0) > 10) {
        _str_make_shared(r2, r4);
        break;
      }
      r9 = r3 >> 2;
      if ((HEAP32[r9] & 524288 | 0) == 0) {
        r10 = r3 + 20 | 0;
        r11 = _mrb_realloc(r2, HEAP32[r10 >> 2], r8 + 1 | 0);
        HEAP32[r10 >> 2] = r11;
        r12 = r11;
      } else {
        _mrb_str_decref(r2, HEAP32[r6 + 4]);
        HEAP32[r9] = HEAP32[r9] & -524289;
        r9 = _mrb_malloc(r2, HEAP32[r7] + 1 | 0);
        HEAP32[r6 + 5] = r9;
        r12 = r9;
      }
      _memcpy(r12, HEAP32[r5 + 5], HEAP32[r7]);
      HEAP8[HEAP32[r6 + 5] + HEAP32[r7] | 0] = 0;
      HEAP32[r6 + 3] = HEAP32[r7];
      HEAP32[r6 + 4] = HEAP32[r7];
      r13 = r3 | 0;
      _mrb_obj_value39(r1, r13);
      return;
    }
  } while (0);
  r12 = r3 >> 2;
  if ((HEAP32[r12] & 524288 | 0) == 0) {
    r4 = r3 + 20 | 0;
    _mrb_free(r2, HEAP32[r4 >> 2]);
    r14 = r4;
    r15 = r3 + 16 | 0;
  } else {
    r4 = r3 + 16 | 0;
    _mrb_str_decref(r2, HEAP32[r4 >> 2]);
    r14 = r3 + 20 | 0;
    r15 = r4;
  }
  HEAP32[r14 >> 2] = HEAP32[r5 + 5];
  HEAP32[r6 + 3] = HEAP32[r5 + 3];
  r6 = HEAP32[r5 + 4];
  HEAP32[r15 >> 2] = r6;
  HEAP32[r12] = HEAP32[r12] | 524288;
  r12 = r6 | 0;
  HEAP32[r12 >> 2] = HEAP32[r12 >> 2] + 1 | 0;
  r13 = r3 | 0;
  _mrb_obj_value39(r1, r13);
  return;
}
_str_replace["X"] = 1;
function _mrb_str_index(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  r4 = STACKTOP;
  r5 = r1, r6 = r5 >> 2;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r1 >> 2] = HEAP32[r6];
  HEAP32[r1 + 4 >> 2] = HEAP32[r6 + 1];
  r5 = r2, r6 = r5 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 1];
  r6 = HEAP32[r1 >> 2];
  r1 = HEAP32[r6 + 12 >> 2];
  r5 = HEAP32[r2 >> 2];
  r2 = HEAP32[r5 + 12 >> 2];
  do {
    if ((r3 | 0) < 0) {
      r7 = r1 + r3 | 0;
      if ((r7 | 0) < 0) {
        r8 = -1;
      } else {
        r9 = r7;
        break;
      }
      STACKTOP = r4;
      return r8;
    } else {
      r9 = r3;
    }
  } while (0);
  r3 = r1 - r9 | 0;
  if ((r3 | 0) < (r2 | 0)) {
    r8 = -1;
    STACKTOP = r4;
    return r8;
  }
  r1 = HEAP32[r6 + 20 >> 2];
  if ((r9 | 0) == 0) {
    r10 = r1;
  } else {
    r10 = r1 + r9 | 0;
  }
  if ((r2 | 0) == 0) {
    r8 = r9;
    STACKTOP = r4;
    return r8;
  } else {
    r8 = _mrb_memsearch(HEAP32[r5 + 20 >> 2], r2, r10, r3);
    STACKTOP = r4;
    return ((r8 | 0) < 0 ? 0 : r9) + r8 | 0;
  }
}
function _sym_hash_func(r1, r2) {
  var r3, r4, r5, r6, r7;
  if ((r1 | 0) == 0) {
    r3 = 0;
    return r3;
  } else {
    r4 = 0;
    r5 = 0;
    r6 = r2;
  }
  while (1) {
    r2 = (HEAP8[r6] << 24 >> 24) + (r4 * 31 & -1) | 0;
    r7 = r5 + 1 | 0;
    if ((r7 | 0) == (r1 | 0)) {
      r3 = r2;
      break;
    } else {
      r4 = r2;
      r5 = r7;
      r6 = r6 + 1 | 0;
    }
  }
  return r3;
}
function _mrb_sym2name_len(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = r1 + 28 | 0;
  r5 = HEAP32[r1 >> 2];
  L1075 : do {
    if ((r5 | 0) == 0) {
      r6 = 0;
      r7 = 0;
    } else {
      r8 = HEAP32[r1 + 16 >> 2];
      r9 = r1 + 20 | 0;
      r10 = 0;
      L1077 : while (1) {
        r11 = r10 >>> 3;
        r12 = HEAP8[(r10 & 7) + 5327036 | 0];
        do {
          if ((r12 & HEAP8[r8 + r11 | 0]) << 24 >> 24 == 0) {
            if ((HEAP8[HEAP32[r9 >> 2] + r11 | 0] & r12) << 24 >> 24 != 0) {
              break;
            }
            if (HEAP16[HEAP32[r4 >> 2] + (r10 << 1) >> 1] << 16 >> 16 == r2 << 16 >> 16) {
              break L1077;
            }
          }
        } while (0);
        r12 = r10 + 1 | 0;
        if ((r12 | 0) == (r5 | 0)) {
          r6 = 0;
          r7 = 0;
          break L1075;
        } else {
          r10 = r12;
        }
      }
      if ((r10 | 0) == (r5 | 0)) {
        r6 = 0;
        r7 = 0;
        break;
      }
      r9 = HEAP32[r1 + 24 >> 2];
      r6 = HEAP32[r9 + (r10 << 3) + 4 >> 2];
      r7 = HEAP32[r9 + (r10 << 3) >> 2];
    }
  } while (0);
  HEAP32[r3 >> 2] = r7;
  return r6;
}
function _mrb_str_aref(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r6 = r3, r7 = r6 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r4, r7 = r6 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r7];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7 + 1];
  r7 = r5;
  r6 = r5 + 8;
  r8 = r5 + 12;
  r9 = r5 + 16;
  r10 = HEAP32[r4 + 4 >> 2] & 255;
  do {
    if ((r10 | 0) == 17) {
      if ((_mrb_str_index(r3, r4, 0) | 0) == -1) {
        _mrb_nil_value43(r1);
        STACKTOP = r5;
        return;
      } else {
        _mrb_str_dup(r1, r2, r4);
        STACKTOP = r5;
        return;
      }
    } else if ((r10 | 0) == 19) {
      _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5315912);
      _mrb_nil_value43(r1);
      STACKTOP = r5;
      return;
    } else if ((r10 | 0) != 3) {
      r11 = HEAP32[HEAP32[r3 >> 2] + 12 >> 2];
      HEAP32[r8 >> 2] = r11;
      r12 = _mrb_range_beg_len(r4, r6, r8, r11);
      if ((r12 | 0) == 2) {
        _mrb_nil_value43(r1);
        STACKTOP = r5;
        return;
      } else if ((r12 | 0) == 0) {
        break;
      } else {
        _mrb_str_subseq(r9, r2, r3, HEAP32[r6 >> 2], HEAP32[r8 >> 2]);
        r12 = r9;
        r11 = HEAP32[r12 + 4 >> 2];
        r13 = r1;
        r14 = r13 | 0;
        HEAP32[r14 >> 2] = HEAP32[r12 >> 2];
        r15 = r13 + 4 | 0;
        HEAP32[r15 >> 2] = r11;
        STACKTOP = r5;
        return;
      }
    }
  } while (0);
  _mrb_str_substr(r7, r2, r3, HEAP32[r4 >> 2], 1);
  r4 = r7;
  r7 = r3;
  r3 = HEAP32[r4 >> 2];
  r2 = HEAP32[r4 + 4 >> 2];
  r14 = r7 | 0;
  HEAP32[r14 >> 2] = r3;
  r15 = r7 + 4 | 0;
  HEAP32[r15 >> 2] = r2;
  do {
    if (!((r3 & -1 | 0) == 0 & (r2 & 255 | 0) == 0)) {
      if ((HEAP32[r3 + 12 >> 2] | 0) != 0) {
        break;
      }
      _mrb_nil_value43(r1);
      STACKTOP = r5;
      return;
    }
  } while (0);
  r15 = r1;
  HEAP32[r15 >> 2] = r3;
  HEAP32[r15 + 4 >> 2] = r2;
  STACKTOP = r5;
  return;
}
_mrb_str_aref["X"] = 1;
function _kh_alloc_n2s(r1) {
  var r2, r3, r4, r5, r6, r7, r8;
  r2 = r1 >> 2;
  r3 = HEAP32[r2];
  HEAP32[r2 + 2] = 0;
  HEAP32[r2 + 1] = 0;
  r4 = r3 >>> 2;
  r5 = r3 >>> 1;
  HEAP32[r2 + 3] = r4 | r5;
  r6 = (r1 + 40 | 0) >> 2;
  r7 = _mrb_malloc(HEAP32[r6], r4);
  HEAP32[r2 + 4] = r7;
  r4 = r3 >>> 3;
  r8 = r1 + 20 | 0;
  HEAP32[r8 >> 2] = r7 + r4 | 0;
  _memset(r7, -1, r4);
  _memset(HEAP32[r8 >> 2], 0, r4);
  HEAP32[r2 + 6] = _mrb_malloc(HEAP32[r6], r3 << 3);
  HEAP32[r2 + 7] = _mrb_malloc(HEAP32[r6], r3 << 1);
  HEAP32[r2 + 8] = r3 - 1 | 0;
  HEAP32[r2 + 9] = r5 - 1 | 0;
  return;
}
function _kh_init_n2s_size(r1) {
  var r2, r3;
  r2 = _mrb_calloc(r1, 1, 44);
  r3 = r2;
  HEAP32[r2 >> 2] = 32;
  HEAP32[r2 + 40 >> 2] = r1;
  _kh_alloc_n2s(r3);
  return r3;
}
function _kh_init_n2s(r1) {
  return _kh_init_n2s_size(r1);
}
function _kh_destroy_n2s(r1) {
  var r2;
  if ((r1 | 0) == 0) {
    return;
  }
  r2 = (r1 + 40 | 0) >> 2;
  _mrb_free(HEAP32[r2], HEAP32[r1 + 24 >> 2]);
  _mrb_free(HEAP32[r2], HEAP32[r1 + 28 >> 2]);
  _mrb_free(HEAP32[r2], HEAP32[r1 + 16 >> 2]);
  _mrb_free(HEAP32[r2], r1);
  return;
}
function _kh_get_n2s(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r4 = _sym_hash_func(r2, r3);
  r5 = HEAP32[r1 + 32 >> 2];
  r6 = r5 & r4;
  r4 = r6 >>> 3;
  r7 = HEAP32[r1 + 16 >> 2];
  r8 = HEAP8[(r6 & 7) + 5327036 | 0];
  L1118 : do {
    if ((r8 & HEAP8[r7 + r4 | 0]) << 24 >> 24 == 0) {
      r9 = HEAP32[r1 + 20 >> 2];
      r10 = r1 + 24 | 0;
      r11 = r1 + 36 | 0;
      r12 = r6;
      r13 = r4;
      r14 = r8;
      L1120 : while (1) {
        do {
          if ((HEAP8[r9 + r13 | 0] & r14) << 24 >> 24 == 0) {
            r15 = HEAP32[r10 >> 2];
            if ((HEAP32[r15 + (r12 << 3) >> 2] | 0) != (r2 | 0)) {
              break;
            }
            if ((_memcmp(HEAP32[r15 + (r12 << 3) + 4 >> 2], r3, r2) | 0) == 0) {
              r16 = r12;
              break L1120;
            }
          }
        } while (0);
        r15 = HEAP32[r11 >> 2] + r12 & r5;
        r17 = r15 >>> 3;
        r18 = HEAP8[(r15 & 7) + 5327036 | 0];
        if ((r18 & HEAP8[r7 + r17 | 0]) << 24 >> 24 == 0) {
          r12 = r15;
          r13 = r17;
          r14 = r18;
        } else {
          break L1118;
        }
      }
      return r16;
    }
  } while (0);
  r16 = HEAP32[r1 >> 2];
  return r16;
}
_kh_get_n2s["X"] = 1;
function _kh_resize_n2s(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16;
  r3 = r2 >>> 0 < 8 ? 7 : r2 - 1 | 0;
  r2 = r3 >>> 1 | r3;
  r3 = r2 >>> 2 | r2;
  r2 = r3 >>> 4 | r3;
  r3 = r2 >>> 8 | r2;
  r2 = HEAP32[r1 + 16 >> 2];
  r4 = HEAP32[r1 + 24 >> 2];
  r5 = r1 + 28 | 0;
  r6 = HEAP32[r5 >> 2];
  r7 = r1 | 0;
  r8 = HEAP32[r7 >> 2];
  HEAP32[r7 >> 2] = (r3 >>> 16 | r3) + 1 | 0;
  _kh_alloc_n2s(r1);
  if ((r8 | 0) == 0) {
    r9 = r1 + 40 | 0, r10 = r9 >> 2;
    r11 = HEAP32[r10];
    _mrb_free(r11, r2);
    r12 = HEAP32[r10];
    r13 = r4;
    _mrb_free(r12, r13);
    r14 = HEAP32[r10];
    r15 = r6;
    _mrb_free(r14, r15);
    return;
  } else {
    r16 = 0;
  }
  while (1) {
    if ((HEAP8[(r16 & 7) + 5327036 | 0] & HEAP8[r2 + (r16 >>> 3) | 0]) << 24 >> 24 == 0) {
      r3 = _kh_put_n2s(r1, HEAP32[r4 + (r16 << 3) >> 2], HEAP32[r4 + (r16 << 3) + 4 >> 2]);
      HEAP16[HEAP32[r5 >> 2] + (r3 << 1) >> 1] = HEAP16[r6 + (r16 << 1) >> 1];
    }
    r3 = r16 + 1 | 0;
    if ((r3 | 0) == (r8 | 0)) {
      break;
    } else {
      r16 = r3;
    }
  }
  r9 = r1 + 40 | 0, r10 = r9 >> 2;
  r11 = HEAP32[r10];
  _mrb_free(r11, r2);
  r12 = HEAP32[r10];
  r13 = r4;
  _mrb_free(r12, r13);
  r14 = HEAP32[r10];
  r15 = r6;
  _mrb_free(r14, r15);
  return;
}
_kh_resize_n2s["X"] = 1;
function _kh_put_n2s(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31;
  r4 = r1 >> 2;
  r5 = (r1 + 8 | 0) >> 2;
  if (HEAP32[r5] >>> 0 >= HEAP32[r4 + 3] >>> 0) {
    _kh_resize_n2s(r1, HEAP32[r4] << 1);
  }
  r6 = _sym_hash_func(r2, r3);
  r7 = HEAP32[r4 + 8];
  r8 = r7 & r6;
  r6 = r8 >>> 3;
  r9 = r1 + 16 | 0;
  r10 = HEAP32[r9 >> 2];
  r11 = HEAP8[r10 + r6 | 0];
  r12 = (r8 & 7) + 5327036 | 0;
  r13 = HEAP8[r12];
  L1142 : do {
    if ((r13 & r11) << 24 >> 24 == 0) {
      r14 = HEAP32[r4 + 5];
      r15 = r1 + 24 | 0;
      r16 = r1 + 36 | 0;
      r17 = r8;
      r18 = r6;
      r19 = r12;
      r20 = r13;
      r21 = r11;
      while (1) {
        if ((HEAP8[r14 + r18 | 0] & r20) << 24 >> 24 != 0) {
          r22 = r17;
          r23 = r18;
          r24 = r19;
          r25 = r20;
          r26 = r21;
          break L1142;
        }
        r27 = HEAP32[r15 >> 2];
        if ((HEAP32[r27 + (r17 << 3) >> 2] | 0) == (r2 | 0)) {
          if ((_memcmp(HEAP32[r27 + (r17 << 3) + 4 >> 2], r3, r2) | 0) == 0) {
            r22 = r17;
            r23 = r18;
            r24 = r19;
            r25 = r20;
            r26 = r21;
            break L1142;
          }
        }
        r27 = HEAP32[r16 >> 2] + r17 & r7;
        r28 = r27 >>> 3;
        r29 = HEAP8[r10 + r28 | 0];
        r30 = (r27 & 7) + 5327036 | 0;
        r31 = HEAP8[r30];
        if ((r31 & r29) << 24 >> 24 == 0) {
          r17 = r27;
          r18 = r28;
          r19 = r30;
          r20 = r31;
          r21 = r29;
        } else {
          r22 = r27;
          r23 = r28;
          r24 = r30;
          r25 = r31;
          r26 = r29;
          break L1142;
        }
      }
    } else {
      r22 = r8;
      r23 = r6;
      r24 = r12;
      r25 = r13;
      r26 = r11;
    }
  } while (0);
  if ((r25 & r26) << 24 >> 24 != 0) {
    r26 = HEAP32[r4 + 6];
    HEAP32[r26 + (r22 << 3) >> 2] = r2;
    HEAP32[r26 + (r22 << 3) + 4 >> 2] = r3;
    r26 = HEAP32[r9 >> 2] + r23 | 0;
    HEAP8[r26] = HEAP8[r26] & (HEAP8[r24] ^ -1);
    r26 = r1 + 4 | 0;
    HEAP32[r26 >> 2] = HEAP32[r26 >> 2] + 1 | 0;
    HEAP32[r5] = HEAP32[r5] + 1 | 0;
    return r22;
  }
  r5 = r1 + 20 | 0;
  if ((HEAP8[HEAP32[r5 >> 2] + r23 | 0] & r25) << 24 >> 24 == 0) {
    return r22;
  }
  r25 = HEAP32[r4 + 6];
  HEAP32[r25 + (r22 << 3) >> 2] = r2;
  HEAP32[r25 + (r22 << 3) + 4 >> 2] = r3;
  r3 = HEAP32[r5 >> 2] + r23 | 0;
  HEAP8[r3] = HEAP8[r3] & (HEAP8[r24] ^ -1);
  r24 = r1 + 4 | 0;
  HEAP32[r24 >> 2] = HEAP32[r24 >> 2] + 1 | 0;
  return r22;
}
_kh_put_n2s["X"] = 1;
function _mrb_intern2(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = HEAP32[r1 + 596 >> 2], r5 = r4 >> 2;
  r6 = _kh_get_n2s(r4, r3, r2);
  if ((r6 | 0) == (HEAP32[r5] | 0)) {
    r7 = r1 + 592 | 0;
    r8 = HEAP16[r7 >> 1] + 1 & 65535;
    HEAP16[r7 >> 1] = r8;
    r7 = _mrb_malloc(r1, r3 + 1 | 0);
    _memcpy(r7, r2, r3);
    HEAP8[r7 + r3 | 0] = 0;
    r2 = _kh_put_n2s(r4, r3, r7);
    HEAP16[HEAP32[r5 + 7] + (r2 << 1) >> 1] = r8;
    r2 = r8;
    return r2;
  } else {
    r2 = HEAP16[HEAP32[r5 + 7] + (r6 << 1) >> 1];
    return r2;
  }
}
function _mrb_intern(r1, r2) {
  return _mrb_intern2(r1, r2, _strlen(r2));
}
function _mrb_intern_str(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[r2 >> 2];
  r2 = _mrb_intern2(r1, HEAP32[r4 + 20 >> 2], HEAP32[r4 + 12 >> 2]);
  STACKTOP = r3;
  return r2;
}
function _mrb_free_symtbl(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r2 = r1 + 596 | 0;
  r3 = HEAP32[r2 >> 2];
  r4 = r3 | 0;
  r5 = HEAP32[r4 >> 2];
  if ((r5 | 0) == 0) {
    r6 = r3;
    _kh_destroy_n2s(r6);
    return;
  }
  r7 = r3 + 16 | 0;
  r8 = r3 + 20 | 0;
  r9 = r3 + 24 | 0;
  r3 = 0;
  r10 = r5;
  while (1) {
    r5 = r3 >>> 3;
    r11 = HEAP8[(r3 & 7) + 5327036 | 0];
    do {
      if ((r11 & HEAP8[HEAP32[r7 >> 2] + r5 | 0]) << 24 >> 24 == 0) {
        if ((HEAP8[HEAP32[r8 >> 2] + r5 | 0] & r11) << 24 >> 24 != 0) {
          r12 = r10;
          break;
        }
        _mrb_free(r1, HEAP32[HEAP32[r9 >> 2] + (r3 << 3) + 4 >> 2]);
        r12 = HEAP32[r4 >> 2];
      } else {
        r12 = r10;
      }
    } while (0);
    r11 = r3 + 1 | 0;
    if ((r11 | 0) == (r12 | 0)) {
      break;
    } else {
      r3 = r11;
      r10 = r12;
    }
  }
  r6 = HEAP32[r2 >> 2];
  _kh_destroy_n2s(r6);
  return;
}
function _mrb_init_symtbl(r1) {
  HEAP32[r1 + 596 >> 2] = _kh_init_n2s(r1);
  return;
}
function _mrb_sym_to_s(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_str_new(r1, r2, _mrb_sym2name_len(HEAP32[r2 + 596 >> 2], HEAP16[r3 >> 1], r5), HEAP32[r5 >> 2]);
  STACKTOP = r4;
  return;
}
function _mrb_sym2name(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  r4 = r3;
  r5 = r3 + 4;
  r6 = r3 + 12;
  r7 = _mrb_sym2name_len(HEAP32[r1 + 596 >> 2], r2, r4);
  if ((r7 | 0) == 0) {
    r8 = 0;
    STACKTOP = r3;
    return r8;
  }
  do {
    if ((_symname_p(r7) | 0) == 0) {
      r9 = HEAP32[r4 >> 2];
    } else {
      r2 = _strlen(r7);
      r10 = HEAP32[r4 >> 2];
      if ((r2 | 0) == (r10 | 0)) {
        r8 = r7;
      } else {
        r9 = r10;
        break;
      }
      STACKTOP = r3;
      return r8;
    }
  } while (0);
  _mrb_str_new(r6, r1, r7, r9);
  _mrb_str_dump(r5, r1, r6);
  r8 = HEAP32[HEAP32[r5 >> 2] + 20 >> 2];
  STACKTOP = r3;
  return r8;
}
function _symname_p(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16;
  r2 = 0;
  if ((r1 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r4 = HEAP8[r1];
  r5 = r4 << 24 >> 24;
  do {
    if ((r5 | 0) == 60) {
      r6 = r1 + 1 | 0;
      r7 = HEAP8[r6] << 24 >> 24;
      if ((r7 | 0) == 61) {
        r8 = r1 + 2 | 0;
        r9 = HEAP8[r8] << 24 >> 24 == 62 ? r1 + 3 | 0 : r8;
        break;
      } else if ((r7 | 0) == 60) {
        r9 = r1 + 2 | 0;
        break;
      } else {
        r9 = r6;
        break;
      }
    } else if ((r5 | 0) == 64) {
      r6 = r1 + 1 | 0;
      r10 = 0;
      r11 = HEAP8[r6] << 24 >> 24 == 64 ? r1 + 2 | 0 : r6;
      r2 = 986;
      break;
    } else if ((r5 | 0) == 61) {
      r6 = HEAP8[r1 + 1 | 0] << 24 >> 24;
      if ((r6 | 0) == 126) {
        r9 = r1 + 2 | 0;
        break;
      } else if ((r6 | 0) == 61) {
        r6 = r1 + 2 | 0;
        r9 = HEAP8[r6] << 24 >> 24 == 61 ? r1 + 3 | 0 : r6;
        break;
      } else {
        r3 = 0;
        return r3;
      }
    } else if ((r5 | 0) == 62) {
      r6 = r1 + 1 | 0;
      r9 = ((HEAP8[r6] << 24 >> 24) - 61 | 0) >>> 0 < 2 ? r1 + 2 | 0 : r6;
      break;
    } else if ((r5 | 0) == 94 | (r5 | 0) == 47 | (r5 | 0) == 37 | (r5 | 0) == 126 | (r5 | 0) == 96) {
      r9 = r1 + 1 | 0;
      break;
    } else if ((r5 | 0) == 91) {
      if (HEAP8[r1 + 1 | 0] << 24 >> 24 == 93) {
        r6 = r1 + 2 | 0;
        r9 = HEAP8[r6] << 24 >> 24 == 61 ? r1 + 3 | 0 : r6;
        break;
      } else {
        r3 = 0;
        return r3;
      }
    } else if ((r5 | 0) == 0) {
      r3 = 0;
      return r3;
    } else if ((r5 | 0) == 43 | (r5 | 0) == 45) {
      r6 = r1 + 1 | 0;
      r9 = HEAP8[r6] << 24 >> 24 == 64 ? r1 + 2 | 0 : r6;
      break;
    } else if ((r5 | 0) == 42) {
      r6 = r1 + 1 | 0;
      r9 = HEAP8[r6] << 24 >> 24 == 42 ? r1 + 2 | 0 : r6;
      break;
    } else if ((r5 | 0) == 36) {
      r6 = r1 + 1 | 0;
      if ((_is_special_global_name(r6) | 0) == 0) {
        r10 = 0;
        r11 = r6;
        r2 = 986;
        break;
      } else {
        r3 = 1;
      }
      return r3;
    } else if ((r5 | 0) == 33) {
      r6 = r1 + 1 | 0;
      r9 = HEAP8[r6] << 24 >> 24 == 61 ? r1 + 2 | 0 : r6;
      break;
    } else if ((r5 | 0) == 124) {
      r6 = r1 + 1 | 0;
      r9 = HEAP8[r6] << 24 >> 24 == 124 ? r1 + 2 | 0 : r6;
      break;
    } else if ((r5 | 0) == 38) {
      r6 = r1 + 1 | 0;
      r9 = HEAP8[r6] << 24 >> 24 == 38 ? r1 + 2 | 0 : r6;
      break;
    } else {
      r10 = (_isupper(r4 & 255) | 0) == 0 & 1;
      r11 = r1;
      r2 = 986;
      break;
    }
  } while (0);
  do {
    if (r2 == 986) {
      r1 = HEAP8[r11];
      do {
        if (r1 << 24 >> 24 == 95) {
          r12 = r11;
          r13 = 95;
          r2 = 989;
        } else {
          if ((_isalpha(r1 & 255) | 0) == 0) {
            r3 = 0;
            return r3;
          } else {
            r4 = HEAP8[r11];
            if (r4 << 24 >> 24 == -1) {
              r14 = r11;
              r15 = -1;
              break;
            } else {
              r12 = r11;
              r13 = r4;
              r2 = 989;
              break;
            }
          }
        }
      } while (0);
      L1228 : do {
        if (r2 == 989) {
          while (1) {
            r2 = 0;
            if ((_isalnum(r13 & 255) | 0) == 0) {
              r16 = HEAP8[r12];
              if (r16 << 24 >> 24 != 95) {
                break;
              }
            }
            r1 = r12 + 1 | 0;
            r4 = HEAP8[r1];
            if (r4 << 24 >> 24 == -1) {
              r14 = r1;
              r15 = -1;
              break L1228;
            } else {
              r12 = r1;
              r13 = r4;
              r2 = 989;
            }
          }
          r14 = r12;
          r15 = r16 << 24 >> 24;
        }
      } while (0);
      if ((r10 | 0) == 0) {
        r9 = r14;
        break;
      }
      if (!((r15 | 0) == 33 | (r15 | 0) == 63 | (r15 | 0) == 61)) {
        r9 = r14;
        break;
      }
      r9 = r14 + 1 | 0;
    }
  } while (0);
  r3 = HEAP8[r9] << 24 >> 24 == 0 & 1;
  return r3;
}
_symname_p["X"] = 1;
function _mrb_init_symbol(r1) {
  var r2;
  r2 = _mrb_define_class(r1, 5324992, HEAP32[r1 + 72 >> 2]);
  HEAP32[r1 + 120 >> 2] = r2;
  _mrb_define_method(r1, r2, 5325704, 246);
  _mrb_define_method(r1, r2, 5321524, 158);
  _mrb_define_method(r1, r2, 5325416, 158);
  _mrb_define_method(r1, r2, 5317440, 642);
  _mrb_define_method(r1, r2, 5325664, 610);
  _mrb_define_method(r1, r2, 5314124, 170);
  HEAP16[r1 + 68 >> 1] = _mrb_intern(r1, 5323508);
  return;
}
function _sym_to_sym(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = r3;
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r2;
  return;
}
function _mrb_nil_value86(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_fixnum_value87(r1, r2) {
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 3;
  return;
}
function _mrb_true_value88(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 2;
  return;
}
function _mrb_false_value89(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _kh_get_iv(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r3 = r2 << 16 >> 16;
  r4 = HEAP32[r1 + 32 >> 2];
  r5 = r4 & (r3 << 2 ^ r3 ^ r3 >> 2);
  r3 = r5 >>> 3;
  r6 = HEAP32[r1 + 16 >> 2];
  r7 = HEAP8[(r5 & 7) + 5327036 | 0];
  L1247 : do {
    if ((r7 & HEAP8[r6 + r3 | 0]) << 24 >> 24 == 0) {
      r8 = HEAP32[r1 + 20 >> 2];
      r9 = r1 + 24 | 0;
      r10 = r1 + 36 | 0;
      r11 = r5;
      r12 = r3;
      r13 = r7;
      while (1) {
        if ((HEAP8[r8 + r12 | 0] & r13) << 24 >> 24 == 0) {
          if (HEAP16[HEAP32[r9 >> 2] + (r11 << 1) >> 1] << 16 >> 16 == r2 << 16 >> 16) {
            r14 = r11;
            break;
          }
        }
        r15 = HEAP32[r10 >> 2] + r11 & r4;
        r16 = r15 >>> 3;
        r17 = HEAP8[(r15 & 7) + 5327036 | 0];
        if ((r17 & HEAP8[r6 + r16 | 0]) << 24 >> 24 == 0) {
          r11 = r15;
          r12 = r16;
          r13 = r17;
        } else {
          break L1247;
        }
      }
      return r14;
    }
  } while (0);
  r14 = HEAP32[r1 >> 2];
  return r14;
}
_kh_get_iv["X"] = 1;
function _kh_del_iv(r1, r2) {
  var r3;
  r3 = HEAP32[r1 + 20 >> 2] + (r2 >>> 3) | 0;
  HEAP8[r3] = HEAP8[r3] | HEAP8[(r2 & 7) + 5327036 | 0];
  r2 = r1 + 4 | 0;
  HEAP32[r2 >> 2] = HEAP32[r2 >> 2] - 1 | 0;
  return;
}
function _iv_size(r1) {
  var r2;
  if ((r1 | 0) == 0) {
    r2 = 0;
  } else {
    r2 = HEAP32[r1 + 4 >> 2];
  }
  return r2;
}
function _mrb_fixnum_value106(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 3;
  return;
}
function _mrb_nil_value107(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _obj_iv_p(r1) {
  var r2, r3, r4;
  r2 = STACKTOP;
  r3 = r1;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r1 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r1 + 4 >> 2] = HEAP32[r3 + 4 >> 2];
  r3 = HEAP32[r1 + 4 >> 2] & 255;
  if ((r3 | 0) == 9 | (r3 | 0) == 10 | (r3 | 0) == 11 | (r3 | 0) == 13 | (r3 | 0) == 16 | (r3 | 0) == 25) {
    r4 = 1;
  } else {
    r4 = 0;
  }
  STACKTOP = r2;
  return r4;
}
function _sym_equal(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((_mrb_obj_equal(r3, r5) | 0) == 0) {
    _mrb_false_value89(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value88(r1);
    STACKTOP = r4;
    return;
  }
}
function _sym_inspect(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 12;
  r8 = r4 + 20;
  r9 = _mrb_sym2name_len(HEAP32[r2 + 596 >> 2], HEAP16[r3 >> 1], r6);
  r3 = HEAP32[r6 >> 2];
  _mrb_str_new(r7, r2, 0, r3 + 1 | 0);
  r6 = r7;
  r7 = r5 >> 2;
  r10 = HEAP32[r6 >> 2];
  r11 = HEAP32[r6 + 4 >> 2];
  HEAP32[r7] = r10;
  HEAP32[r7 + 1] = r11;
  r6 = r10 + 20 | 0;
  HEAP8[HEAP32[r6 >> 2]] = 58;
  _memcpy(HEAP32[r6 >> 2] + 1 | 0, r9, r3);
  do {
    if ((_symname_p(r9) | 0) != 0) {
      if ((_strlen(r9) | 0) == (r3 | 0)) {
        r12 = r11;
        r13 = r10;
      } else {
        break;
      }
      r14 = r1;
      r15 = r14 | 0;
      HEAP32[r15 >> 2] = r13;
      r16 = r14 + 4 | 0;
      HEAP32[r16 >> 2] = r12;
      STACKTOP = r4;
      return;
    }
  } while (0);
  _mrb_str_dump(r8, r2, r5);
  r5 = r8;
  r8 = HEAP32[r5 >> 2];
  r2 = HEAP32[r5 + 4 >> 2];
  HEAP32[r7] = r8;
  HEAP32[r7 + 1] = r2;
  r7 = HEAP32[r8 + 20 >> 2];
  tempBigInt = 8762;
  HEAP8[r7] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[r7 + 1] = tempBigInt & 255;
  r12 = r2;
  r13 = r8;
  r14 = r1;
  r15 = r14 | 0;
  HEAP32[r15 >> 2] = r13;
  r16 = r14 + 4 | 0;
  HEAP32[r16 >> 2] = r12;
  STACKTOP = r4;
  return;
}
_sym_inspect["X"] = 1;
function _sym_cmp(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 12;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((HEAP32[r5 + 4 >> 2] & 255 | 0) != 4) {
    _mrb_nil_value86(r1);
    STACKTOP = r4;
    return;
  }
  r8 = HEAP16[r3 >> 1];
  r3 = HEAP16[r5 >> 1];
  if (r8 << 16 >> 16 == r3 << 16 >> 16) {
    _mrb_fixnum_value87(r1, 0);
    STACKTOP = r4;
    return;
  }
  r5 = r2 + 596 | 0;
  r2 = _mrb_sym2name_len(HEAP32[r5 >> 2], r8, r6);
  r8 = _mrb_sym2name_len(HEAP32[r5 >> 2], r3, r7);
  r3 = HEAP32[r6 >> 2];
  r6 = HEAP32[r7 >> 2];
  r7 = (r3 | 0) > (r6 | 0);
  r5 = _memcmp(r2, r8, r7 ? r6 : r3);
  if ((r5 | 0) != 0) {
    if ((r5 | 0) > 0) {
      _mrb_fixnum_value87(r1, 1);
      STACKTOP = r4;
      return;
    } else {
      _mrb_fixnum_value87(r1, -1);
      STACKTOP = r4;
      return;
    }
  }
  if ((r3 | 0) == (r6 | 0)) {
    _mrb_fixnum_value87(r1, 0);
    STACKTOP = r4;
    return;
  }
  if (r7) {
    _mrb_fixnum_value87(r1, 1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_fixnum_value87(r1, -1);
    STACKTOP = r4;
    return;
  }
}
function _is_special_global_name(r1) {
  var r2, r3, r4, r5, r6, r7;
  r2 = HEAP8[r1];
  r3 = r2 << 24 >> 24;
  L1307 : do {
    if ((r3 | 0) == 45) {
      r4 = r1 + 1 | 0;
      r5 = HEAP8[r4];
      if (r5 << 24 >> 24 == -1) {
        r6 = r4;
        break;
      }
      if ((_isalnum(r5 & 255) | 0) == 0) {
        if (HEAP8[r4] << 24 >> 24 != 95) {
          r6 = r4;
          break;
        }
      }
      r6 = r1 + 2 | 0;
    } else if ((r3 | 0) == 126 | (r3 | 0) == 42 | (r3 | 0) == 36 | (r3 | 0) == 63 | (r3 | 0) == 33 | (r3 | 0) == 64 | (r3 | 0) == 47 | (r3 | 0) == 92 | (r3 | 0) == 59 | (r3 | 0) == 44 | (r3 | 0) == 46 | (r3 | 0) == 61 | (r3 | 0) == 58 | (r3 | 0) == 60 | (r3 | 0) == 62 | (r3 | 0) == 34 | (r3 | 0) == 38 | (r3 | 0) == 96 | (r3 | 0) == 39 | (r3 | 0) == 43 | (r3 | 0) == 48) {
      r6 = r1 + 1 | 0;
    } else {
      if (((r2 & 255) - 48 | 0) >>> 0 < 10) {
        r4 = r1;
        while (1) {
          r5 = r4 + 1 | 0;
          if ((HEAPU8[r5] - 48 | 0) >>> 0 < 10) {
            r4 = r5;
          } else {
            r6 = r5;
            break L1307;
          }
        }
      } else {
        r7 = 0;
        return r7;
      }
    }
  } while (0);
  r7 = HEAP8[r6] << 24 >> 24 == 0 & 1;
  return r7;
}
function _kh_alloc_iv(r1) {
  var r2, r3, r4, r5, r6, r7, r8;
  r2 = r1 >> 2;
  r3 = HEAP32[r2];
  HEAP32[r2 + 2] = 0;
  HEAP32[r2 + 1] = 0;
  r4 = r3 >>> 2;
  r5 = r3 >>> 1;
  HEAP32[r2 + 3] = r4 | r5;
  r6 = (r1 + 40 | 0) >> 2;
  r7 = _mrb_malloc(HEAP32[r6], r4);
  HEAP32[r2 + 4] = r7;
  r4 = r3 >>> 3;
  r8 = r1 + 20 | 0;
  HEAP32[r8 >> 2] = r7 + r4 | 0;
  _memset(r7, -1, r4);
  _memset(HEAP32[r8 >> 2], 0, r4);
  HEAP32[r2 + 6] = _mrb_malloc(HEAP32[r6], r3 << 1);
  HEAP32[r2 + 7] = _mrb_malloc(HEAP32[r6], r3 << 3);
  HEAP32[r2 + 8] = r3 - 1 | 0;
  HEAP32[r2 + 9] = r5 - 1 | 0;
  return;
}
function _kh_init_iv_size(r1, r2) {
  var r3, r4, r5;
  r3 = _mrb_calloc(r1, 1, 44);
  r4 = r3;
  r5 = r2 >>> 0 < 8 ? 7 : r2 - 1 | 0;
  r2 = r5 >>> 1 | r5;
  r5 = r2 >>> 2 | r2;
  r2 = r5 >>> 4 | r5;
  r5 = r2 >>> 8 | r2;
  HEAP32[r3 >> 2] = (r5 >>> 16 | r5) + 1 | 0;
  HEAP32[r3 + 40 >> 2] = r1;
  _kh_alloc_iv(r4);
  return r4;
}
function _kh_init_iv(r1) {
  return _kh_init_iv_size(r1, 32);
}
function _kh_destroy_iv(r1) {
  var r2;
  if ((r1 | 0) == 0) {
    return;
  }
  r2 = (r1 + 40 | 0) >> 2;
  _mrb_free(HEAP32[r2], HEAP32[r1 + 24 >> 2]);
  _mrb_free(HEAP32[r2], HEAP32[r1 + 28 >> 2]);
  _mrb_free(HEAP32[r2], HEAP32[r1 + 16 >> 2]);
  _mrb_free(HEAP32[r2], r1);
  return;
}
function _kh_resize_iv(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r3 = r2 >>> 0 < 8 ? 7 : r2 - 1 | 0;
  r2 = r3 >>> 1 | r3;
  r3 = r2 >>> 2 | r2;
  r2 = r3 >>> 4 | r3;
  r3 = r2 >>> 8 | r2;
  r2 = HEAP32[r1 + 16 >> 2];
  r4 = HEAP32[r1 + 24 >> 2];
  r5 = r1 + 28 | 0;
  r6 = HEAP32[r5 >> 2];
  r7 = r1 | 0;
  r8 = HEAP32[r7 >> 2];
  HEAP32[r7 >> 2] = (r3 >>> 16 | r3) + 1 | 0;
  _kh_alloc_iv(r1);
  if ((r8 | 0) == 0) {
    r9 = r1 + 40 | 0, r10 = r9 >> 2;
    r11 = HEAP32[r10];
    _mrb_free(r11, r2);
    r12 = HEAP32[r10];
    r13 = r4;
    _mrb_free(r12, r13);
    r14 = HEAP32[r10];
    r15 = r6;
    _mrb_free(r14, r15);
    return;
  } else {
    r16 = 0;
  }
  while (1) {
    if ((HEAP8[(r16 & 7) + 5327036 | 0] & HEAP8[r2 + (r16 >>> 3) | 0]) << 24 >> 24 == 0) {
      r3 = (r16 << 3) + r6 | 0;
      r7 = (_kh_put_iv(r1, HEAP16[r4 + (r16 << 1) >> 1]) << 3) + HEAP32[r5 >> 2] | 0;
      r17 = HEAP32[r3 + 4 >> 2];
      HEAP32[r7 >> 2] = HEAP32[r3 >> 2];
      HEAP32[r7 + 4 >> 2] = r17;
    }
    r17 = r16 + 1 | 0;
    if ((r17 | 0) == (r8 | 0)) {
      break;
    } else {
      r16 = r17;
    }
  }
  r9 = r1 + 40 | 0, r10 = r9 >> 2;
  r11 = HEAP32[r10];
  _mrb_free(r11, r2);
  r12 = HEAP32[r10];
  r13 = r4;
  _mrb_free(r12, r13);
  r14 = HEAP32[r10];
  r15 = r6;
  _mrb_free(r14, r15);
  return;
}
_kh_resize_iv["X"] = 1;
function _kh_put_iv(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29;
  r3 = (r1 + 8 | 0) >> 2;
  if (HEAP32[r3] >>> 0 >= HEAP32[r1 + 12 >> 2] >>> 0) {
    _kh_resize_iv(r1, HEAP32[r1 >> 2] << 1);
  }
  r4 = r2 << 16 >> 16;
  r5 = HEAP32[r1 + 32 >> 2];
  r6 = r5 & (r4 << 2 ^ r4 ^ r4 >> 2);
  r4 = (r1 + 24 | 0) >> 2;
  r7 = r6 >>> 3;
  r8 = r1 + 16 | 0;
  r9 = HEAP32[r8 >> 2];
  r10 = HEAP8[r9 + r7 | 0];
  r11 = (r6 & 7) + 5327036 | 0;
  r12 = HEAP8[r11];
  L1342 : do {
    if ((r12 & r10) << 24 >> 24 == 0) {
      r13 = HEAP32[r1 + 20 >> 2];
      r14 = r1 + 36 | 0;
      r15 = r6;
      r16 = r7;
      r17 = r11;
      r18 = r12;
      r19 = r10;
      while (1) {
        if ((HEAP8[r13 + r16 | 0] & r18) << 24 >> 24 != 0) {
          r20 = r15;
          r21 = r16;
          r22 = r17;
          r23 = r18;
          r24 = r19;
          break L1342;
        }
        if (HEAP16[HEAP32[r4] + (r15 << 1) >> 1] << 16 >> 16 == r2 << 16 >> 16) {
          r20 = r15;
          r21 = r16;
          r22 = r17;
          r23 = r18;
          r24 = r19;
          break L1342;
        }
        r25 = HEAP32[r14 >> 2] + r15 & r5;
        r26 = r25 >>> 3;
        r27 = HEAP8[r9 + r26 | 0];
        r28 = (r25 & 7) + 5327036 | 0;
        r29 = HEAP8[r28];
        if ((r29 & r27) << 24 >> 24 == 0) {
          r15 = r25;
          r16 = r26;
          r17 = r28;
          r18 = r29;
          r19 = r27;
        } else {
          r20 = r25;
          r21 = r26;
          r22 = r28;
          r23 = r29;
          r24 = r27;
          break L1342;
        }
      }
    } else {
      r20 = r6;
      r21 = r7;
      r22 = r11;
      r23 = r12;
      r24 = r10;
    }
  } while (0);
  if ((r23 & r24) << 24 >> 24 != 0) {
    HEAP16[HEAP32[r4] + (r20 << 1) >> 1] = r2;
    r24 = HEAP32[r8 >> 2] + r21 | 0;
    HEAP8[r24] = HEAP8[r24] & (HEAP8[r22] ^ -1);
    r24 = r1 + 4 | 0;
    HEAP32[r24 >> 2] = HEAP32[r24 >> 2] + 1 | 0;
    HEAP32[r3] = HEAP32[r3] + 1 | 0;
    return r20;
  }
  r3 = r1 + 20 | 0;
  if ((HEAP8[HEAP32[r3 >> 2] + r21 | 0] & r23) << 24 >> 24 == 0) {
    return r20;
  }
  HEAP16[HEAP32[r4] + (r20 << 1) >> 1] = r2;
  r2 = HEAP32[r3 >> 2] + r21 | 0;
  HEAP8[r2] = HEAP8[r2] & (HEAP8[r22] ^ -1);
  r22 = r1 + 4 | 0;
  HEAP32[r22 >> 2] = HEAP32[r22 >> 2] + 1 | 0;
  return r20;
}
_kh_put_iv["X"] = 1;
function _kh_copy_iv(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r3 = _kh_init_iv(r1);
  r1 = r2 | 0;
  r4 = HEAP32[r1 >> 2];
  if ((r4 | 0) == 0) {
    return r3;
  }
  r5 = r2 + 16 | 0;
  r6 = r2 + 20 | 0;
  r7 = r2 + 24 | 0;
  r8 = r3 + 28 | 0;
  r9 = r2 + 28 | 0;
  r2 = 0;
  r10 = r4;
  while (1) {
    r4 = r2 >>> 3;
    r11 = HEAP8[(r2 & 7) + 5327036 | 0];
    do {
      if ((r11 & HEAP8[HEAP32[r5 >> 2] + r4 | 0]) << 24 >> 24 == 0) {
        if ((HEAP8[HEAP32[r6 >> 2] + r4 | 0] & r11) << 24 >> 24 != 0) {
          r12 = r10;
          break;
        }
        r13 = _kh_put_iv(r3, HEAP16[HEAP32[r7 >> 2] + (r2 << 1) >> 1]);
        r14 = (r2 << 3) + HEAP32[r9 >> 2] | 0;
        r15 = (r13 << 3) + HEAP32[r8 >> 2] | 0;
        r13 = HEAP32[r14 + 4 >> 2];
        HEAP32[r15 >> 2] = HEAP32[r14 >> 2];
        HEAP32[r15 + 4 >> 2] = r13;
        r12 = HEAP32[r1 >> 2];
      } else {
        r12 = r10;
      }
    } while (0);
    r11 = r2 + 1 | 0;
    if ((r11 | 0) == (r12 | 0)) {
      break;
    } else {
      r2 = r11;
      r10 = r12;
    }
  }
  return r3;
}
_kh_copy_iv["X"] = 1;
function _mrb_gc_mark_gv(r1) {
  _mark_tbl(r1, HEAP32[r1 + 52 >> 2]);
  return;
}
function _mark_tbl(r1, r2) {
  if ((r2 | 0) == 0) {
    return;
  }
  _iv_foreach(r1, r2, 108, 0);
  return;
}
function _mrb_gc_free_gv(r1) {
  if ((r1 | 0) == 0) {
    return;
  }
  _iv_free(r1);
  return;
}
function _iv_free(r1) {
  _kh_destroy_iv(r1 | 0);
  return;
}
function _mrb_gc_mark_iv(r1, r2) {
  _mark_tbl(r1, r2);
  return;
}
function _mrb_gc_mark_iv_size(r1) {
  return _iv_size(r1);
}
function _mrb_gc_free_iv(r1) {
  if ((r1 | 0) == 0) {
    return;
  }
  _iv_free(r1);
  return;
}
function _mrb_vm_special_get(r1) {
  _mrb_fixnum_value106(r1);
  return;
}
function _mrb_obj_iv_get(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r4;
  do {
    if ((r2 | 0) != 0) {
      if ((_iv_get(r2, r3, r5) | 0) == 0) {
        break;
      }
      r6 = r5;
      r7 = r1;
      r8 = HEAP32[r6 + 4 >> 2];
      HEAP32[r7 >> 2] = HEAP32[r6 >> 2];
      HEAP32[r7 + 4 >> 2] = r8;
      STACKTOP = r4;
      return;
    }
  } while (0);
  _mrb_nil_value107(r1);
  STACKTOP = r4;
  return;
}
function _iv_get(r1, r2, r3) {
  var r4, r5;
  r4 = _kh_get_iv(r1 | 0, r2);
  if ((r4 | 0) == (HEAP32[r1 >> 2] | 0)) {
    r5 = 0;
    return r5;
  }
  if ((r3 | 0) == 0) {
    r5 = 1;
    return r5;
  }
  r2 = (r4 << 3) + HEAP32[r1 + 28 >> 2] | 0;
  r1 = r3;
  r3 = HEAP32[r2 + 4 >> 2];
  HEAP32[r1 >> 2] = HEAP32[r2 >> 2];
  HEAP32[r1 + 4 >> 2] = r3;
  r5 = 1;
  return r5;
}
function _mrb_iv_get(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  if ((_obj_iv_p(r2) | 0) == 0) {
    _mrb_nil_value107(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_obj_iv_get(r1, HEAP32[HEAP32[r2 >> 2] + 12 >> 2], r3);
    STACKTOP = r4;
    return;
  }
}
function _mrb_obj_iv_set(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9;
  r5 = STACKTOP;
  r6 = r4;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r4 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r2 + 12 | 0;
  r7 = HEAP32[r6 >> 2];
  if ((r7 | 0) == 0) {
    r8 = _iv_new(r1);
    HEAP32[r6 >> 2] = r8;
    r9 = r8;
  } else {
    r9 = r7;
  }
  _mrb_write_barrier(r1, r2);
  _iv_put(r9, r3, r4);
  STACKTOP = r5;
  return;
}
function _iv_new(r1) {
  return _kh_init_iv_size(r1, 8);
}
function _iv_put(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r3;
  r3 = (_kh_put_iv(r1 | 0, r2) << 3) + HEAP32[r1 + 28 >> 2] | 0;
  r1 = HEAP32[r5 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_obj_iv_ifnone(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9;
  r5 = STACKTOP;
  r6 = r4;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r4 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r2 + 12 | 0;
  r7 = HEAP32[r6 >> 2];
  do {
    if ((r7 | 0) == 0) {
      r8 = _iv_new(r1);
      HEAP32[r6 >> 2] = r8;
      r9 = r8;
    } else {
      if ((_iv_get(r7, r3, r4) | 0) == 0) {
        r9 = r7;
        break;
      }
      STACKTOP = r5;
      return;
    }
  } while (0);
  _mrb_write_barrier(r1, r2);
  _iv_put(r9, r3, r4);
  STACKTOP = r5;
  return;
}
function _mrb_obj_value110(r1, r2) {
  var r3;
  r3 = HEAP32[r2 >> 2] & 255;
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = r3;
  return;
}
function _mrb_undef_value(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 5;
  return;
}
function _mrb_iv_set(r1, r2, r3, r4) {
  var r5, r6, r7;
  r5 = STACKTOP;
  r6 = r2, r7 = r6 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r7];
  HEAP32[r2 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r4, r7 = r6 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r7];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7 + 1];
  if ((_obj_iv_p(r2) | 0) == 0) {
    _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5323740);
    STACKTOP = r5;
    return;
  } else {
    _mrb_obj_iv_set(r1, HEAP32[r2 >> 2], r3, r4);
    STACKTOP = r5;
    return;
  }
}
function _mrb_class_obj_get(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r4 = r3;
  r5 = r3 + 8;
  _mrb_obj_value110(r4, HEAP32[r1 + 72 >> 2] | 0);
  _mrb_const_get(r5, r1, r4, _mrb_intern(r1, r2));
  STACKTOP = r3;
  return HEAP32[r5 >> 2];
}
function _mrb_obj_iv_defined(r1, r2) {
  var r3;
  if ((r1 | 0) == 0) {
    r3 = 0;
  } else {
    r3 = _iv_get(r1, r2, 0);
  }
  return r3;
}
function _mrb_iv_copy(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  r5 = r2, r6 = r5 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 1];
  r5 = r3, r6 = r5 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 1];
  r6 = HEAP32[r3 >> 2];
  r3 = (HEAP32[r2 >> 2] + 12 | 0) >> 2;
  r2 = HEAP32[r3];
  if ((r2 | 0) != 0) {
    _iv_free(r2);
    HEAP32[r3] = 0;
  }
  r2 = HEAP32[r6 + 12 >> 2];
  if ((r2 | 0) == 0) {
    STACKTOP = r4;
    return;
  }
  HEAP32[r3] = _iv_copy(r1, r2);
  STACKTOP = r4;
  return;
}
function _iv_copy(r1, r2) {
  return _kh_copy_iv(r1, r2 | 0);
}
function _mrb_obj_iv_inspect(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 16;
  r8 = HEAP32[r3 + 12 >> 2];
  r9 = r3 | 0;
  if ((_iv_size(r8) | 0) > 0) {
    _mrb_obj_value110(r5, r9);
    r3 = _mrb_obj_classname(r2, r5);
    _mrb_sprintf(r6, r2, 5320980, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r3, HEAP32[tempInt + 4 >> 2] = r9, tempInt));
    _iv_foreach(r2, r8, 422, r6);
    r8 = r6;
    r6 = r1;
    r3 = HEAP32[r8 + 4 >> 2];
    HEAP32[r6 >> 2] = HEAP32[r8 >> 2];
    HEAP32[r6 + 4 >> 2] = r3;
    STACKTOP = r4;
    return;
  } else {
    _mrb_obj_value110(r7, r9);
    _mrb_any_to_s(r1, r2, r7);
    STACKTOP = r4;
    return;
  }
}
function _iv_foreach(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r5 = 0;
  r6 = r2 | 0;
  if ((r2 | 0) == 0) {
    return;
  }
  r7 = r2 + 24 | 0;
  r8 = r2 | 0;
  if ((HEAP32[r8 >> 2] | 0) == 0) {
    return;
  }
  r9 = r2 + 16 | 0;
  r10 = r2 + 20 | 0;
  r11 = r2 + 28 | 0;
  r2 = 0;
  L1457 : while (1) {
    r12 = r2 >>> 3;
    r13 = HEAP8[(r2 & 7) + 5327036 | 0];
    do {
      if ((r13 & HEAP8[HEAP32[r9 >> 2] + r12 | 0]) << 24 >> 24 == 0) {
        if ((HEAP8[HEAP32[r10 >> 2] + r12 | 0] & r13) << 24 >> 24 != 0) {
          break;
        }
        r14 = FUNCTION_TABLE[r3](r1, HEAP16[HEAP32[r7 >> 2] + (r2 << 1) >> 1], (r2 << 3) + HEAP32[r11 >> 2] | 0, r4);
        if ((r14 | 0) > 0) {
          r5 = 1202;
          break L1457;
        }
        if ((r14 | 0) >= 0) {
          break;
        }
        _kh_del_iv(r6, r2);
      }
    } while (0);
    r13 = r2 + 1 | 0;
    if ((r13 | 0) == (HEAP32[r8 >> 2] | 0)) {
      r5 = 1201;
      break;
    } else {
      r2 = r13;
    }
  }
  if (r5 == 1201) {
    return;
  } else if (r5 == 1202) {
    return;
  }
}
function _inspect_i(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 60 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  r7 = r5 + 8;
  r8 = r5 + 44;
  r9 = r4;
  r4 = r6;
  r10 = HEAP32[r9 >> 2];
  r11 = HEAP32[r9 + 4 >> 2];
  HEAP32[r4 >> 2] = r10;
  HEAP32[r4 + 4 >> 2] = r11;
  r11 = HEAP32[r10 + 20 >> 2];
  if (HEAP8[r11] << 24 >> 24 == 45) {
    HEAP8[r11] = 35;
    _mrb_str_cat2(r5 + 12, r1, r6, 5321232);
  } else {
    _mrb_str_cat2(r5 + 20, r1, r6, 5321476);
  }
  _mrb_str_cat(r5 + 28, r1, r6, _mrb_sym2name_len(HEAP32[r1 + 596 >> 2], r2, r7), HEAP32[r7 >> 2]);
  _mrb_str_cat(r5 + 36, r1, r6, 5321012, 1);
  _mrb_inspect(r8, r1, r3);
  _mrb_str_append(r5 + 52, r1, r6, r8);
  STACKTOP = r5;
  return 0;
}
function _mrb_iv_remove(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  do {
    if ((_obj_iv_p(r2) | 0) != 0) {
      r6 = HEAP32[HEAP32[r2 >> 2] + 12 >> 2];
      if ((r6 | 0) == 0) {
        break;
      }
      if ((_iv_del(r6, r3, r5) | 0) == 0) {
        break;
      }
      r6 = r5;
      r7 = r1;
      r8 = HEAP32[r6 + 4 >> 2];
      HEAP32[r7 >> 2] = HEAP32[r6 >> 2];
      HEAP32[r7 + 4 >> 2] = r8;
      STACKTOP = r4;
      return;
    }
  } while (0);
  _mrb_undef_value(r1);
  STACKTOP = r4;
  return;
}
function _iv_del(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = r1 | 0;
  if ((r1 | 0) == 0) {
    r5 = 0;
    return r5;
  }
  r6 = _kh_get_iv(r4, r2);
  if ((r6 | 0) == (HEAP32[r1 >> 2] | 0)) {
    r5 = 0;
    return r5;
  }
  r2 = (r6 << 3) + HEAP32[r1 + 28 >> 2] | 0;
  r1 = HEAP32[r2 >> 2];
  r7 = HEAP32[r2 + 4 >> 2];
  _kh_del_iv(r4, r6);
  if ((r3 | 0) == 0) {
    r5 = 1;
    return r5;
  }
  r6 = r3;
  HEAP32[r6 >> 2] = r1;
  HEAP32[r6 + 4 >> 2] = r7;
  r5 = 1;
  return r5;
}
function _mrb_vm_iv_get(r1, r2, r3) {
  _mrb_iv_get(r1, r2, r3);
  return;
}
function _mrb_vm_iv_set(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_iv_set(r1, HEAP32[r1 + 8 >> 2], r2, r3);
  STACKTOP = r4;
  return;
}
function _mrb_obj_instance_variables(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  _mrb_ary_new(r6, r2);
  r7 = r5;
  r8 = r6;
  r6 = r5 >> 2;
  r5 = HEAP32[r8 >> 2];
  r9 = HEAP32[r8 + 4 >> 2];
  HEAP32[r6] = r5;
  HEAP32[r6 + 1] = r9;
  do {
    if ((_obj_iv_p(r3) | 0) == 0) {
      r10 = r9;
      r11 = r5;
    } else {
      r8 = HEAP32[HEAP32[r3 >> 2] + 12 >> 2];
      if ((r8 | 0) == 0) {
        r10 = r9;
        r11 = r5;
        break;
      }
      _iv_foreach(r2, r8, 354, r7);
      r10 = HEAP32[r6 + 1];
      r11 = HEAP32[r6];
    }
  } while (0);
  r6 = r1;
  HEAP32[r6 >> 2] = r11;
  HEAP32[r6 + 4 >> 2] = r10;
  STACKTOP = r4;
  return;
}
function _iv_i(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  r3 = r5 + 8;
  r7 = r5 + 12;
  r8 = r4;
  r4 = r6;
  r9 = HEAP32[r8 + 4 >> 2];
  HEAP32[r4 >> 2] = HEAP32[r8 >> 2];
  HEAP32[r4 + 4 >> 2] = r9;
  r9 = _mrb_sym2name_len(HEAP32[r1 + 596 >> 2], r2, r3);
  if ((HEAP32[r3 >> 2] | 0) <= 1) {
    STACKTOP = r5;
    return 0;
  }
  if (HEAP8[r9] << 24 >> 24 != 64) {
    STACKTOP = r5;
    return 0;
  }
  if (HEAP8[r9 + 1 | 0] << 24 >> 24 == 64) {
    STACKTOP = r5;
    return 0;
  }
  _mrb_symbol_value111(r7, r2);
  _mrb_ary_push(r1, r6, r7);
  STACKTOP = r5;
  return 0;
}
function _mrb_mod_class_variables(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  _mrb_ary_new(r6, r2);
  r7 = r5;
  r8 = r6;
  r6 = r5 >> 2;
  r5 = HEAP32[r8 >> 2];
  r9 = HEAP32[r8 + 4 >> 2];
  HEAP32[r6] = r5;
  HEAP32[r6 + 1] = r9;
  do {
    if ((_obj_iv_p(r3) | 0) == 0) {
      r10 = r9;
      r11 = r5;
    } else {
      r8 = HEAP32[HEAP32[r3 >> 2] + 12 >> 2];
      if ((r8 | 0) == 0) {
        r10 = r9;
        r11 = r5;
        break;
      }
      _iv_foreach(r2, r8, 560, r7);
      r10 = HEAP32[r6 + 1];
      r11 = HEAP32[r6];
    }
  } while (0);
  r6 = r1;
  HEAP32[r6 >> 2] = r11;
  HEAP32[r6 + 4 >> 2] = r10;
  STACKTOP = r4;
  return;
}
function _cv_i(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  r3 = r5 + 8;
  r7 = r5 + 12;
  r8 = r4;
  r4 = r6;
  r9 = HEAP32[r8 + 4 >> 2];
  HEAP32[r4 >> 2] = HEAP32[r8 >> 2];
  HEAP32[r4 + 4 >> 2] = r9;
  r9 = _mrb_sym2name_len(HEAP32[r1 + 596 >> 2], r2, r3);
  if ((HEAP32[r3 >> 2] | 0) <= 2) {
    STACKTOP = r5;
    return 0;
  }
  if (HEAP8[r9] << 24 >> 24 != 64) {
    STACKTOP = r5;
    return 0;
  }
  if (HEAP8[r9 + 1 | 0] << 24 >> 24 != 64) {
    STACKTOP = r5;
    return 0;
  }
  _mrb_symbol_value111(r7, r2);
  _mrb_ary_push(r1, r6, r7);
  STACKTOP = r5;
  return 0;
}
function _mrb_mod_cv_get(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r5;
  L1527 : do {
    if ((r3 | 0) != 0) {
      r7 = r3;
      while (1) {
        r8 = HEAP32[r7 + 12 >> 2];
        if ((r8 | 0) != 0) {
          if ((_iv_get(r8, r4, r6) | 0) != 0) {
            break;
          }
        }
        r8 = HEAP32[r7 + 20 >> 2];
        if ((r8 | 0) == 0) {
          break L1527;
        } else {
          r7 = r8;
        }
      }
      r7 = r6;
      r8 = r1;
      r9 = HEAP32[r7 + 4 >> 2];
      HEAP32[r8 >> 2] = HEAP32[r7 >> 2];
      HEAP32[r8 + 4 >> 2] = r9;
      STACKTOP = r5;
      return;
    }
  } while (0);
  r6 = _mrb_class_obj_get(r2, 5323928);
  r9 = _mrb_sym2name(r2, r4);
  r4 = _mrb_class_name(r2, r3);
  _mrb_raisef(r2, r6, 5316984, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r9, HEAP32[tempInt + 4 >> 2] = r4, tempInt));
  _mrb_nil_value107(r1);
  STACKTOP = r5;
  return;
}
function _mrb_cv_get(r1, r2, r3, r4) {
  var r5, r6;
  r5 = STACKTOP;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  _mrb_mod_cv_get(r1, r2, HEAP32[r3 >> 2], r4);
  STACKTOP = r5;
  return;
}
function _mrb_mod_cv_set(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = STACKTOP;
  r6 = r4;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r4 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  L1539 : do {
    if ((r2 | 0) != 0) {
      r6 = r2;
      while (1) {
        r7 = HEAP32[r6 + 12 >> 2];
        if ((r7 | 0) != 0) {
          if ((_iv_get(r7, r3, 0) | 0) != 0) {
            break;
          }
        }
        r8 = HEAP32[r6 + 20 >> 2];
        if ((r8 | 0) == 0) {
          break L1539;
        } else {
          r6 = r8;
        }
      }
      _mrb_write_barrier(r1, r6);
      _iv_put(r7, r3, r4);
      STACKTOP = r5;
      return;
    }
  } while (0);
  r7 = (r2 + 12 | 0) >> 2;
  if ((HEAP32[r7] | 0) == 0) {
    HEAP32[r7] = _iv_new(r1);
  }
  _mrb_write_barrier(r1, r2);
  _iv_put(HEAP32[r7], r3, r4);
  STACKTOP = r5;
  return;
}
function _mrb_cv_set(r1, r2, r3, r4) {
  var r5, r6, r7;
  r5 = STACKTOP;
  r6 = r2, r7 = r6 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r7];
  HEAP32[r2 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r4, r7 = r6 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r7];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7 + 1];
  _mrb_mod_cv_set(r1, HEAP32[r2 >> 2], r3, r4);
  STACKTOP = r5;
  return;
}
function _mrb_mod_cv_defined(r1, r2) {
  var r3, r4, r5;
  L1554 : do {
    if ((r1 | 0) == 0) {
      r3 = 0;
    } else {
      r4 = r1;
      while (1) {
        r5 = HEAP32[r4 + 12 >> 2];
        if ((r5 | 0) != 0) {
          if ((_iv_get(r5, r2, 0) | 0) != 0) {
            r3 = 1;
            break L1554;
          }
        }
        r5 = HEAP32[r4 + 20 >> 2];
        if ((r5 | 0) == 0) {
          r3 = 0;
          break L1554;
        } else {
          r4 = r5;
        }
      }
    }
  } while (0);
  return r3;
}
function _mrb_cv_defined(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  r4 = r1;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r1 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r1 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = _mrb_mod_cv_defined(HEAP32[r1 >> 2], r2);
  STACKTOP = r3;
  return r4;
}
function _mrb_vm_cv_get(r1, r2, r3) {
  var r4, r5, r6;
  r4 = HEAP32[r2 + 20 >> 2];
  r5 = HEAP32[HEAP32[r4 + 4 >> 2] + 16 >> 2];
  if ((r5 | 0) == 0) {
    r6 = HEAP32[r4 + 28 >> 2];
  } else {
    r6 = r5;
  }
  _mrb_mod_cv_get(r1, r2, r6, r3);
  return;
}
function _mrb_vm_cv_set(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = 0;
  r5 = STACKTOP;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r1 + 20 | 0;
  r7 = HEAP32[r6 >> 2];
  r8 = HEAP32[HEAP32[r7 + 4 >> 2] + 16 >> 2];
  do {
    if ((r8 | 0) == 0) {
      r9 = HEAP32[r7 + 28 >> 2];
      if ((r9 | 0) == 0) {
        r10 = 0;
        break;
      } else {
        r11 = r9;
        r4 = 1287;
        break;
      }
    } else {
      r11 = r8;
      r4 = 1287;
    }
  } while (0);
  do {
    if (r4 == 1287) {
      while (1) {
        r4 = 0;
        r12 = HEAP32[r11 + 12 >> 2];
        if ((r12 | 0) != 0) {
          if ((_iv_get(r12, r2, 0) | 0) != 0) {
            break;
          }
        }
        r8 = HEAP32[r11 + 20 >> 2];
        if ((r8 | 0) == 0) {
          r4 = 1291;
          break;
        } else {
          r11 = r8;
          r4 = 1287;
        }
      }
      if (r4 == 1291) {
        r10 = HEAP32[HEAP32[r6 >> 2] + 28 >> 2];
        break;
      }
      _mrb_write_barrier(r1, r11);
      _iv_put(r12, r2, r3);
      STACKTOP = r5;
      return;
    }
  } while (0);
  r12 = (r10 + 12 | 0) >> 2;
  if ((HEAP32[r12] | 0) == 0) {
    HEAP32[r12] = _iv_new(r1);
  }
  _mrb_write_barrier(r1, r10);
  _iv_put(HEAP32[r12], r2, r3);
  STACKTOP = r5;
  return;
}
function _mrb_const_defined(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  r4 = r1;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r1 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r1 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[HEAP32[r1 >> 2] + 12 >> 2];
  if ((r4 | 0) == 0) {
    r5 = 0;
  } else {
    r5 = _iv_get(r4, r2, 0);
  }
  STACKTOP = r3;
  return r5;
}
function _mrb_const_get(r1, r2, r3, r4) {
  var r5, r6;
  r5 = STACKTOP;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  _mod_const_check(r2, r3);
  _const_get(r1, r2, HEAP32[r3 >> 2], r4);
  STACKTOP = r5;
  return;
}
function _mod_const_check(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[r2 + 4 >> 2] & 255;
  if ((r4 | 0) == 10 | (r4 | 0) == 11 | (r4 | 0) == 13) {
    STACKTOP = r3;
    return;
  }
  _mrb_raise(r1, _mrb_class_obj_get(r1, 5325036), 5314204);
  STACKTOP = r3;
  return;
}
function _const_get(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r5 = 0;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r7 = r6;
  r8 = r6 + 8;
  r9 = r6 + 16;
  r10 = r6 + 24;
  r11 = r3;
  r12 = r2 + 72 | 0;
  L1595 : do {
    if ((r3 | 0) == 0) {
      _mrb_intern(r2, 5315024);
    } else {
      r13 = r3;
      r14 = 0;
      L1596 : while (1) {
        L1598 : do {
          if ((r13 | 0) != 0) {
            r15 = r13;
            while (1) {
              r16 = HEAP32[r15 + 12 >> 2];
              if ((r16 | 0) != 0) {
                if ((_iv_get(r16, r4, r7) | 0) != 0) {
                  r5 = 1312;
                  break L1596;
                }
              }
              r16 = HEAP32[r15 + 20 >> 2];
              if ((r16 | 0) == 0) {
                break L1598;
              } else {
                r15 = r16;
              }
            }
          }
        } while (0);
        if ((r14 | 0) != 0) {
          break;
        }
        if ((HEAP32[r11 >> 2] & 255 | 0) != 11) {
          break;
        }
        r13 = HEAP32[r12 >> 2];
        r14 = 1;
      }
      if (r5 == 1312) {
        r14 = r7;
        r13 = r1;
        r15 = HEAP32[r14 + 4 >> 2];
        HEAP32[r13 >> 2] = HEAP32[r14 >> 2];
        HEAP32[r13 + 4 >> 2] = r15;
        STACKTOP = r6;
        return;
      }
      r15 = _mrb_intern(r2, 5315024);
      r13 = r3;
      while (1) {
        r17 = r13 | 0;
        _mrb_obj_value110(r8, r17);
        if ((_mrb_respond_to(r2, r8, r15) | 0) != 0) {
          break;
        }
        r14 = HEAP32[r13 + 20 >> 2];
        if ((r14 | 0) == 0) {
          break L1595;
        } else {
          r13 = r14;
        }
      }
      _mrb_symbol_value111(r9, r4);
      _mrb_obj_value110(r10, r17);
      _mrb_funcall_argv(r1, r2, r10, r15, 1, r9);
      STACKTOP = r6;
      return;
    }
  } while (0);
  r9 = _mrb_class_obj_get(r2, 5323928);
  r10 = _mrb_sym2name(r2, r4);
  _mrb_raisef(r2, r9, 5314624, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r10, tempInt));
  _mrb_nil_value107(r1);
  STACKTOP = r6;
  return;
}
_const_get["X"] = 1;
function _mrb_vm_const_get(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r5;
  r7 = HEAP32[r2 + 20 >> 2];
  r8 = HEAP32[HEAP32[r7 + 4 >> 2] + 16 >> 2];
  do {
    if ((r8 | 0) == 0) {
      r9 = HEAP32[r7 + 28 >> 2];
      if ((r9 | 0) == 0) {
        r10 = 0;
        break;
      } else {
        r11 = r9;
        r4 = 1328;
        break;
      }
    } else {
      r11 = r8;
      r4 = 1328;
    }
  } while (0);
  L1622 : do {
    if (r4 == 1328) {
      r8 = HEAP32[r11 + 12 >> 2];
      do {
        if ((r8 | 0) != 0) {
          if ((_iv_get(r8, r3, r6) | 0) == 0) {
            break;
          }
          r7 = r6;
          r9 = r1;
          r12 = r7 | 0;
          r13 = r7 + 4 | 0;
          r7 = HEAP32[r13 >> 2];
          r14 = r9 | 0;
          HEAP32[r14 >> 2] = HEAP32[r12 >> 2];
          r15 = r9 + 4 | 0;
          HEAP32[r15 >> 2] = r7;
          STACKTOP = r5;
          return;
        }
      } while (0);
      r8 = _mrb_class_outer_module(r2, r11);
      if ((r8 | 0) == 0) {
        r10 = r11;
        break;
      } else {
        r16 = r8;
      }
      while (1) {
        r8 = HEAP32[r16 + 12 >> 2];
        if ((r8 | 0) != 0) {
          if ((_iv_get(r8, r3, r6) | 0) != 0) {
            break;
          }
        }
        r8 = _mrb_class_outer_module(r2, r16);
        if ((r8 | 0) == 0) {
          r10 = r11;
          break L1622;
        } else {
          r16 = r8;
        }
      }
      r8 = r6;
      r7 = r1;
      r12 = r8 | 0;
      r13 = r8 + 4 | 0;
      r8 = HEAP32[r13 >> 2];
      r14 = r7 | 0;
      HEAP32[r14 >> 2] = HEAP32[r12 >> 2];
      r15 = r7 + 4 | 0;
      HEAP32[r15 >> 2] = r8;
      STACKTOP = r5;
      return;
    }
  } while (0);
  _const_get(r1, r2, r10, r3);
  STACKTOP = r5;
  return;
}
_mrb_vm_const_get["X"] = 1;
function _mrb_const_set(r1, r2, r3, r4) {
  var r5, r6, r7;
  r5 = STACKTOP;
  r6 = r2, r7 = r6 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r7];
  HEAP32[r2 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r4, r7 = r6 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r7];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7 + 1];
  _mod_const_check(r1, r2);
  _mrb_iv_set(r1, r2, r3, r4);
  STACKTOP = r5;
  return;
}
function _mrb_vm_const_set(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = HEAP32[r1 + 20 >> 2];
  r6 = HEAP32[HEAP32[r5 + 4 >> 2] + 16 >> 2];
  if ((r6 | 0) == 0) {
    r7 = HEAP32[r5 + 28 >> 2];
  } else {
    r7 = r6;
  }
  _mrb_obj_iv_set(r1, r7, r2, r3);
  STACKTOP = r4;
  return;
}
function _mrb_define_const(r1, r2, r3, r4) {
  var r5, r6;
  r5 = STACKTOP;
  r6 = r4;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r4 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  _mrb_obj_iv_set(r1, r2, _mrb_intern(r1, r3), r4);
  STACKTOP = r5;
  return;
}
function _mrb_gv_get(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r4;
  if ((r2 | 0) == 0) {
    _mrb_nil_value107(r1);
    STACKTOP = r4;
    return;
  }
  if ((_iv_get(r2, r3, r5) | 0) == 0) {
    _mrb_nil_value107(r1);
    STACKTOP = r4;
    return;
  } else {
    r3 = r5;
    r5 = r1;
    r1 = HEAP32[r3 + 4 >> 2];
    HEAP32[r5 >> 2] = HEAP32[r3 >> 2];
    HEAP32[r5 + 4 >> 2] = r1;
    STACKTOP = r4;
    return;
  }
}
function _mrb_gv_set(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r1 + 52 | 0;
  r6 = HEAP32[r5 >> 2];
  if ((r6 | 0) == 0) {
    r7 = _iv_new(r1);
    HEAP32[r5 >> 2] = r7;
    r8 = r7;
  } else {
    r8 = r6;
  }
  _iv_put(r8, r2, r3);
  STACKTOP = r4;
  return;
}
function _mrb_symbol_value111(r1, r2) {
  HEAP16[r1 >> 1] = r2;
  HEAP32[r1 + 4 >> 2] = 4;
  return;
}
function _csym_i(r1, r2, r3, r4) {
  var r5, r6;
  r1 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = HEAP32[r4 >> 2];
  do {
    if (((HEAP32[r5 >> 2] ^ HEAP32[r3 + 4 >> 2]) & 255 | 0) == 0) {
      if ((HEAP32[r3 >> 2] | 0) != (r5 | 0)) {
        r6 = 0;
        break;
      }
      HEAP16[r4 + 4 >> 1] = r2;
      r6 = 1;
    } else {
      r6 = 0;
    }
  } while (0);
  STACKTOP = r1;
  return r6;
}
function _uvenv(r1, r2) {
  var r3, r4, r5, r6, r7;
  L1665 : do {
    if ((r2 | 0) == 0) {
      r3 = r1;
    } else {
      r4 = r1;
      r5 = r2;
      while (1) {
        r6 = r5 - 1 | 0;
        if ((r4 | 0) == 0) {
          r3 = 0;
          break L1665;
        }
        r7 = HEAP32[r4 + 4 >> 2];
        if ((r6 | 0) == 0) {
          r3 = r7;
          break L1665;
        } else {
          r4 = r7;
          r5 = r6;
        }
      }
    }
  } while (0);
  return r3;
}
function _is_strict(r1, r2) {
  var r3, r4;
  do {
    if ((r2 | 0) > -1) {
      r3 = HEAP32[(HEAP32[r1 + 24 >> 2] + 4 >> 2) + (r2 * 11 | 0)];
      if ((r3 | 0) == 0) {
        break;
      }
      if ((HEAP32[r3 >> 2] & 524288 | 0) == 0) {
        break;
      } else {
        r4 = 1;
      }
      return r4;
    }
  } while (0);
  r4 = 0;
  return r4;
}
function _mrb_nil_value134(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_class(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[r2 + 4 >> 2] & 255;
  do {
    if ((r4 | 0) == 8) {
      r5 = r1 + 72 | 0;
    } else if ((r4 | 0) == 2) {
      r5 = r1 + 108 | 0;
    } else if ((r4 | 0) == 4) {
      r5 = r1 + 120 | 0;
    } else if ((r4 | 0) == 0) {
      if ((HEAP32[r2 >> 2] | 0) == 0) {
        r5 = r1 + 116 | 0;
        break;
      } else {
        r5 = r1 + 112 | 0;
        break;
      }
    } else if ((r4 | 0) == 6) {
      r5 = r1 + 100 | 0;
    } else if ((r4 | 0) == 3) {
      r5 = r1 + 104 | 0;
    } else {
      r5 = HEAP32[r2 >> 2] + 4 | 0;
    }
  } while (0);
  STACKTOP = r3;
  return HEAP32[r5 >> 2];
}
function _mrb_symbol_value135(r1, r2) {
  HEAP16[r1 >> 1] = r2;
  HEAP32[r1 + 4 >> 2] = 4;
  return;
}
function _stack_copy(r1, r2, r3) {
  var r4, r5, r6, r7;
  if ((r3 | 0) == 0) {
    return;
  } else {
    r4 = 0;
  }
  while (1) {
    r5 = (r4 << 3) + r2 | 0;
    r6 = (r4 << 3) + r1 | 0;
    r7 = HEAP32[r5 + 4 >> 2];
    HEAP32[r6 >> 2] = HEAP32[r5 >> 2];
    HEAP32[r6 + 4 >> 2] = r7;
    r7 = r4 + 1 | 0;
    if ((r7 | 0) == (r3 | 0)) {
      break;
    } else {
      r4 = r7;
    }
  }
  return;
}
function _mrb_f_global_variables(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r3 = r4 + 8;
  r6 = r4 + 12;
  r7 = HEAP32[r2 + 52 >> 2];
  _mrb_ary_new(r5, r2);
  if ((r7 | 0) != 0) {
    _iv_foreach(r2, r7, 228, r5);
  }
  r7 = r3 | 0;
  HEAP8[r7] = 36;
  HEAP8[r3 + 2 | 0] = 0;
  r8 = r3 + 1 | 0;
  HEAP8[r8] = 49;
  _mrb_symbol_value111(r6, _mrb_intern2(r2, r7, 2));
  _mrb_ary_push(r2, r5, r6);
  HEAP8[r8] = 50;
  _mrb_symbol_value111(r6, _mrb_intern2(r2, r7, 2));
  _mrb_ary_push(r2, r5, r6);
  HEAP8[r8] = 51;
  _mrb_symbol_value111(r6, _mrb_intern2(r2, r7, 2));
  _mrb_ary_push(r2, r5, r6);
  HEAP8[r8] = 52;
  _mrb_symbol_value111(r6, _mrb_intern2(r2, r7, 2));
  _mrb_ary_push(r2, r5, r6);
  HEAP8[r8] = 53;
  _mrb_symbol_value111(r6, _mrb_intern2(r2, r7, 2));
  _mrb_ary_push(r2, r5, r6);
  HEAP8[r8] = 54;
  _mrb_symbol_value111(r6, _mrb_intern2(r2, r7, 2));
  _mrb_ary_push(r2, r5, r6);
  HEAP8[r8] = 55;
  _mrb_symbol_value111(r6, _mrb_intern2(r2, r7, 2));
  _mrb_ary_push(r2, r5, r6);
  HEAP8[r8] = 56;
  _mrb_symbol_value111(r6, _mrb_intern2(r2, r7, 2));
  _mrb_ary_push(r2, r5, r6);
  HEAP8[r8] = 57;
  _mrb_symbol_value111(r6, _mrb_intern2(r2, r7, 2));
  _mrb_ary_push(r2, r5, r6);
  r6 = r5;
  r5 = r1;
  r1 = HEAP32[r6 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r5 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
_mrb_f_global_variables["X"] = 1;
function _gv_i(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  r3 = r5 + 8;
  r7 = r4;
  r4 = r6;
  r8 = HEAP32[r7 + 4 >> 2];
  HEAP32[r4 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r4 + 4 >> 2] = r8;
  _mrb_symbol_value111(r3, r2);
  _mrb_ary_push(r1, r6, r3);
  STACKTOP = r5;
  return 0;
}
function _mrb_const_defined_at(r1, r2, r3) {
  return _mrb_const_defined_0(r1, r2, r3);
}
function _mrb_const_defined_0(r1, r2, r3) {
  var r4, r5, r6, r7;
  L1705 : do {
    if ((r2 | 0) == 0) {
      r4 = 0;
    } else {
      r5 = r1 + 72 | 0;
      r6 = r2;
      while (1) {
        r7 = HEAP32[r6 + 12 >> 2];
        if ((r7 | 0) != 0) {
          if ((_iv_get(r7, r3, 0) | 0) != 0) {
            r4 = 1;
            break L1705;
          }
        }
        if ((HEAP32[r5 >> 2] | 0) != (r2 | 0)) {
          r4 = 0;
          break L1705;
        }
        r7 = HEAP32[r6 + 20 >> 2];
        if ((r7 | 0) == 0) {
          r4 = 0;
          break L1705;
        } else {
          r6 = r7;
        }
      }
    }
  } while (0);
  return r4;
}
function _mrb_attr_get(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_iv_get(r1, r2, r3);
  STACKTOP = r4;
  return;
}
function _mrb_class_sym(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r4;
  r6 = r4 + 8;
  r7 = _mrb_intern(r1, 5315376);
  _mrb_obj_iv_get(r5, HEAP32[r2 + 12 >> 2], r7);
  r7 = HEAP32[r5 >> 2];
  if ((HEAP32[r5 + 4 >> 2] & 255 | r7 | 0) != 0) {
    r8 = r7 & 65535;
    STACKTOP = r4;
    return r8;
  }
  if ((r3 | 0) == 0) {
    r8 = 0;
    STACKTOP = r4;
    return r8;
  }
  HEAP32[r6 >> 2] = r2;
  r2 = r6 + 4 | 0;
  HEAP16[r2 >> 1] = 0;
  _iv_foreach(r1, HEAP32[r3 + 12 >> 2], 512, r6);
  r8 = HEAP16[r2 >> 1];
  STACKTOP = r4;
  return r8;
}
function _iv_mark_i(r1, r2, r3, r4) {
  r4 = STACKTOP;
  r2 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r2 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r2 + 4 >> 2];
  if ((HEAP32[r3 + 4 >> 2] & 255) >>> 0 <= 8) {
    STACKTOP = r4;
    return 0;
  }
  _mrb_gc_mark(r1, HEAP32[r3 >> 2]);
  STACKTOP = r4;
  return 0;
}
function _stack_extend(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16;
  r4 = STACKTOP;
  r5 = (r1 + 8 | 0) >> 2;
  r6 = HEAP32[r5];
  r7 = r1 + 16 | 0;
  r8 = HEAP32[r7 >> 2];
  do {
    if (((r2 << 3) + r6 | 0) >>> 0 < r8 >>> 0) {
      r9 = r3;
    } else {
      r10 = r1 + 12 | 0;
      r11 = HEAP32[r10 >> 2];
      r12 = r11;
      r13 = r8 - r12 >> 3;
      r14 = (r13 | 0) < (r3 | 0) ? r13 : r3;
      r15 = ((r13 | 0) < (r2 | 0) ? r2 : 128) + r13 | 0;
      r13 = _mrb_realloc(r1, r11, r15 << 3);
      HEAP32[r10 >> 2] = r13;
      HEAP32[r5] = (r6 - r12 >> 3 << 3) + r13 | 0;
      HEAP32[r7 >> 2] = (r15 << 3) + r13 | 0;
      _envadjust(r1, r11, r13);
      if ((r15 | 0) <= 262016) {
        r9 = r14;
        break;
      }
      _mrb_raisef(r1, _mrb_class_obj_get(r1, 5319792), 5324580, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 262016, tempInt));
      r9 = r14;
    }
  } while (0);
  if ((r9 | 0) < (r2 | 0)) {
    r16 = r9;
  } else {
    STACKTOP = r4;
    return;
  }
  while (1) {
    r9 = (r16 << 3) + HEAP32[r5] | 0;
    HEAP32[r9 >> 2] = 0;
    HEAP32[r9 + 4 >> 2] = 0;
    r9 = r16 + 1 | 0;
    if ((r9 | 0) == (r2 | 0)) {
      break;
    } else {
      r16 = r9;
    }
  }
  STACKTOP = r4;
  return;
}
_stack_extend["X"] = 1;
function _top_env(r1, r2) {
  var r3, r4, r5, r6;
  r3 = 0;
  if ((_is_strict(r1, HEAP32[r2 + 20 >> 2]) | 0) == 0) {
    r4 = r2;
  } else {
    r5 = r2;
    return r5;
  }
  while (1) {
    r2 = HEAP32[r4 + 4 >> 2];
    if ((r2 | 0) == 0) {
      r5 = r4;
      r3 = 1432;
      break;
    }
    r6 = r2;
    if ((_is_strict(r1, HEAP32[r2 + 20 >> 2]) | 0) == 0) {
      r4 = r6;
    } else {
      r5 = r6;
      r3 = 1431;
      break;
    }
  }
  if (r3 == 1432) {
    return r5;
  } else if (r3 == 1431) {
    return r5;
  }
}
function _mrb_funcall(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 140 | 0;
  r8 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r8 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r8 + 4 >> 2];
  r8 = r7 >> 2;
  r9 = r7 + 4;
  r10 = r7 + 12;
  r11 = _mrb_intern(r2, r4);
  if ((r5 | 0) == 0) {
    _mrb_funcall_argv(r1, r2, r3, r11, 0, 0);
    STACKTOP = r7;
    return;
  } else if ((r5 | 0) == 1) {
    HEAP32[r8] = r6;
    r4 = HEAP32[r8];
    HEAP32[r8] = r4 + 8 | 0;
    r12 = r4;
    r4 = r9;
    r13 = HEAP32[r12 + 4 >> 2];
    HEAP32[r4 >> 2] = HEAP32[r12 >> 2];
    HEAP32[r4 + 4 >> 2] = r13;
    _mrb_funcall_argv(r1, r2, r3, r11, 1, r9);
    STACKTOP = r7;
    return;
  } else {
    if ((r5 | 0) > 16) {
      _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5326160, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 16, tempInt));
    }
    HEAP32[r8] = r6;
    if ((r5 | 0) > 0) {
      r6 = HEAP32[r8];
      r9 = r5 << 3;
      r13 = 0;
      r4 = r6;
      while (1) {
        r12 = r4;
        r14 = (r13 << 3) + r10 | 0;
        r15 = HEAP32[r12 + 4 >> 2];
        HEAP32[r14 >> 2] = HEAP32[r12 >> 2];
        HEAP32[r14 + 4 >> 2] = r15;
        r15 = r13 + 1 | 0;
        if ((r15 | 0) == (r5 | 0)) {
          break;
        } else {
          r13 = r15;
          r4 = r4 + 8 | 0;
        }
      }
      HEAP32[r8] = r6 + r9 | 0;
    }
    _mrb_funcall_argv(r1, r2, r3, r11, r5, r10 | 0);
    STACKTOP = r7;
    return;
  }
}
_mrb_funcall["X"] = 1;
function _mrb_funcall_argv(r1, r2, r3, r4, r5, r6) {
  var r7, r8;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r8 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r8 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r8 + 4 >> 2];
  r8 = r7;
  _mrb_nil_value134(r8);
  _mrb_funcall_with_block(r1, r2, r3, r4, r5, r6, r8);
  STACKTOP = r7;
  return;
}
function _mrb_funcall_with_block(r1, r2, r3, r4, r5, r6, r7) {
  var r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92, r93, r94, r95, r96, r97, r98, r99, r100, r101, r102, r103, r104, r105, r106, r107, r108, r109, r110, r111, r112, r113, r114, r115, r116, r117, r118, r119, r120, r121, r122, r123, r124, r125, r126, r127, r128, r129, r130, r131, r132, r133, r134, r135, r136, r137, r138, r139, r140, r141, r142, r143, r144, r145, r146, r147, r148, r149;
  r8 = 0;
  r9 = STACKTOP;
  STACKTOP = STACKTOP + 76 | 0;
  r10 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r10 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r10 + 4 >> 2];
  r10 = r7;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r7 >> 2] = HEAP32[r10 >> 2];
  HEAP32[r7 + 4 >> 2] = HEAP32[r10 + 4 >> 2];
  r8 = 2;
  r11 = {};
  r12 = {
    "3": (function(value) {
      r8 = 24;
      r13 = value;
    }),
    dummy: 0
  };
  while (1) try {
    switch (r8) {
     case 2:
      r14 = r9;
      r15 = r9 + 4;
      r16 = r9 + 12;
      r17 = r9 + 52;
      r18 = r9 + 60;
      r19 = r9 + 68;
      r20 = r2 | 0;
      r21 = HEAP32[r20 >> 2];
      r22 = (r21 | 0) == 0;
      if (r22) {
        r8 = 3;
        break;
      } else {
        r8 = 6;
        break;
      }
     case 3:
      r23 = r16 | 0;
      r13 = (tempInt = setjmpId++, r11[tempInt] = 1, setjmpLabels[tempInt] = r8, HEAP32[r23 >> 2] = tempInt, 0);
      r8 = 24;
      break;
     case 24:
      r24 = (r13 | 0) == 0;
      if (r24) {
        r8 = 5;
        break;
      } else {
        r8 = 4;
        break;
      }
     case 4:
      HEAP32[r20 >> 2] = 0;
      _mrb_nil_value134(r1);
      r8 = 23;
      break;
     case 5:
      r25 = r16;
      HEAP32[r20 >> 2] = r25;
      _mrb_funcall_with_block(r17, r2, r3, r4, r5, r6, r7);
      r26 = r17;
      r27 = r15;
      r28 = r26 | 0;
      r29 = HEAP32[r28 >> 2];
      r30 = r26 + 4 | 0;
      r31 = HEAP32[r30 >> 2];
      r32 = r27 | 0;
      HEAP32[r32 >> 2] = r29;
      r33 = r27 + 4 | 0;
      HEAP32[r33 >> 2] = r31;
      HEAP32[r20 >> 2] = 0;
      r34 = r1;
      r35 = r34 | 0;
      HEAP32[r35 >> 2] = r29;
      r36 = r34 + 4 | 0;
      HEAP32[r36 >> 2] = r31;
      r8 = 23;
      break;
     case 6:
      r37 = r2 + 8 | 0;
      r38 = HEAP32[r37 >> 2];
      r39 = (r38 | 0) == 0;
      if (r39) {
        r8 = 7;
        break;
      } else {
        r8 = 8;
        break;
      }
     case 7:
      _stack_init(r2);
      r8 = 8;
      break;
     case 8:
      r40 = r2 + 20 | 0;
      r41 = HEAP32[r40 >> 2];
      r42 = r41 + 12 | 0;
      r43 = HEAP32[r42 >> 2];
      r44 = (r5 | 0) < 0;
      if (r44) {
        r8 = 9;
        break;
      } else {
        r8 = 10;
        break;
      }
     case 9:
      r45 = _mrb_class_obj_get(r2, 5325168);
      _mrb_raisef(r2, r45, 5323260, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
      r8 = 10;
      break;
     case 10:
      r46 = _mrb_class(r2, r3);
      HEAP32[r14 >> 2] = r46;
      r47 = _mrb_method_search_vm(r14, r4);
      r48 = (r47 | 0) == 0;
      if (r48) {
        r8 = 11;
        break;
      } else {
        r49 = r4;
        r50 = r43;
        r51 = r5;
        r52 = 0;
        r53 = r47;
        r8 = 12;
        break;
      }
     case 11:
      r54 = _mrb_intern(r2, 5317196);
      r55 = _mrb_method_search_vm(r14, r54);
      r56 = r43 + 1 | 0;
      r57 = r5 + 1 | 0;
      r49 = r54;
      r50 = r56;
      r51 = r57;
      r52 = r4;
      r53 = r55;
      r8 = 12;
      break;
     case 12:
      r58 = _cipush(r2);
      r59 = r58 | 0;
      HEAP16[r59 >> 1] = r49;
      r60 = r58 + 4 | 0;
      HEAP32[r60 >> 2] = r53;
      r61 = HEAP32[r37 >> 2];
      r62 = r2 + 12 | 0;
      r63 = HEAP32[r62 >> 2];
      r64 = r61;
      r65 = r63;
      r66 = r64 - r65 | 0;
      r67 = r66 >> 3;
      r68 = r58 + 8 | 0;
      HEAP32[r68 >> 2] = r67;
      r69 = r58 + 16 | 0;
      HEAP32[r69 >> 2] = r51;
      r70 = r53 + 16 | 0;
      r71 = HEAP32[r70 >> 2];
      r72 = r58 + 28 | 0;
      HEAP32[r72 >> 2] = r71;
      r73 = r53;
      r74 = HEAP32[r73 >> 2];
      r75 = r74 & 262144;
      r76 = (r75 | 0) == 0;
      if (r76) {
        r8 = 14;
        break;
      } else {
        r8 = 13;
        break;
      }
     case 13:
      r77 = r51 + 2 | 0;
      r78 = r58 + 12 | 0;
      HEAP32[r78 >> 2] = r77;
      r8 = 15;
      break;
     case 14:
      r79 = r53 + 12 | 0;
      r80 = HEAP32[r79 >> 2];
      r81 = r80 + 4 | 0;
      r82 = r81;
      r83 = HEAP32[r82 >> 2];
      r84 = r83 << 16;
      r85 = r84 >> 16;
      r86 = r85 + 2 | 0;
      r87 = r58 + 12 | 0;
      HEAP32[r87 >> 2] = r86;
      r8 = 15;
      break;
     case 15:
      r88 = r58 + 24 | 0;
      HEAP32[r88 >> 2] = -1;
      r89 = HEAP32[r37 >> 2];
      r90 = r89 + (r50 << 3) | 0;
      HEAP32[r37 >> 2] = r90;
      r91 = r58 + 12 | 0;
      r92 = HEAP32[r91 >> 2];
      _stack_extend(r2, r92, 0);
      r93 = HEAP32[r37 >> 2];
      r94 = r3;
      r95 = r93;
      r96 = r94 | 0;
      r97 = HEAP32[r96 >> 2];
      r98 = r94 + 4 | 0;
      r99 = HEAP32[r98 >> 2];
      r35 = r95 | 0;
      HEAP32[r35 >> 2] = r97;
      r36 = r95 + 4 | 0;
      HEAP32[r36 >> 2] = r99;
      r100 = r52 << 16 >> 16 == 0;
      if (r100) {
        r8 = 17;
        break;
      } else {
        r8 = 16;
        break;
      }
     case 16:
      r101 = HEAP32[r37 >> 2];
      r102 = r101 + 8 | 0;
      _mrb_symbol_value135(r18, r52);
      r103 = r18;
      r104 = r102;
      r28 = r103 | 0;
      r105 = HEAP32[r28 >> 2];
      r30 = r103 + 4 | 0;
      r106 = HEAP32[r30 >> 2];
      r32 = r104 | 0;
      HEAP32[r32 >> 2] = r105;
      r33 = r104 + 4 | 0;
      HEAP32[r33 >> 2] = r106;
      r107 = HEAP32[r37 >> 2];
      r108 = r107 + 16 | 0;
      r109 = r51 - 1 | 0;
      _stack_copy(r108, r6, r109);
      r8 = 19;
      break;
     case 17:
      r110 = (r51 | 0) > 0;
      if (r110) {
        r8 = 18;
        break;
      } else {
        r8 = 19;
        break;
      }
     case 18:
      r111 = HEAP32[r37 >> 2];
      r112 = r111 + 8 | 0;
      _stack_copy(r112, r6, r51);
      r8 = 19;
      break;
     case 19:
      r113 = r51 + 1 | 0;
      r114 = HEAP32[r37 >> 2];
      r115 = r114 + (r113 << 3) | 0;
      r116 = r7;
      r117 = r115;
      r28 = r116 | 0;
      r118 = HEAP32[r28 >> 2];
      r30 = r116 + 4 | 0;
      r119 = HEAP32[r30 >> 2];
      r32 = r117 | 0;
      HEAP32[r32 >> 2] = r118;
      r33 = r117 + 4 | 0;
      HEAP32[r33 >> 2] = r119;
      r120 = HEAP32[r73 >> 2];
      r121 = r120 & 262144;
      r122 = (r121 | 0) == 0;
      if (r122) {
        r8 = 21;
        break;
      } else {
        r8 = 20;
        break;
      }
     case 20:
      r123 = r2 + 544 | 0;
      r124 = HEAP32[r123 >> 2];
      r125 = _mrb_gc_arena_save(r124);
      r126 = r53 + 12 | 0;
      r127 = r126;
      r128 = HEAP32[r127 >> 2];
      FUNCTION_TABLE[r128](r15, r2, r3);
      r129 = r15;
      _mrb_gc_arena_restore(r2, r125);
      _mrb_gc_protect(r2, r15);
      r130 = HEAP32[r62 >> 2];
      r131 = HEAP32[r40 >> 2];
      r132 = r131 + 8 | 0;
      r133 = HEAP32[r132 >> 2];
      r134 = r130 + (r133 << 3) | 0;
      HEAP32[r37 >> 2] = r134;
      _cipop(r2);
      r135 = r129 | 0;
      r136 = HEAP32[r135 >> 2];
      r137 = r129 + 4 | 0;
      r138 = HEAP32[r137 >> 2];
      r139 = r138;
      r140 = r136;
      r8 = 22;
      break;
     case 21:
      _mrb_run(r19, r2, r53, r3);
      r141 = r19;
      r142 = r15;
      r143 = r141 | 0;
      r144 = HEAP32[r143 >> 2];
      r145 = r141 + 4 | 0;
      r146 = HEAP32[r145 >> 2];
      r147 = r142 | 0;
      HEAP32[r147 >> 2] = r144;
      r148 = r142 + 4 | 0;
      HEAP32[r148 >> 2] = r146;
      r139 = r146;
      r140 = r144;
      r8 = 22;
      break;
     case 22:
      r149 = r1;
      r143 = r149 | 0;
      HEAP32[r143 >> 2] = r140;
      r145 = r149 + 4 | 0;
      HEAP32[r145 >> 2] = r139;
      r8 = 23;
      break;
     case 23:
      STACKTOP = r9;
      return;
    }
  } catch (e) {
    if (!e.longjmp || !(e.id in r11)) throw e;
    r12[setjmpLabels[e.id]](e.value);
  }
}
_mrb_funcall_with_block["X"] = 1;
function _stack_init(r1) {
  var r2, r3, r4;
  r2 = r1 >> 2;
  r3 = _mrb_calloc(r1, 128, 8);
  r4 = r3;
  HEAP32[r2 + 3] = r4;
  HEAP32[r2 + 4] = r3 + 1024 | 0;
  HEAP32[r2 + 2] = r4;
  r4 = _mrb_calloc(r1, 32, 44);
  r1 = r4;
  HEAP32[r2 + 6] = r1;
  HEAP32[r2 + 7] = r4 + 1408 | 0;
  HEAP32[r2 + 5] = r1;
  HEAP32[r4 + 28 >> 2] = HEAP32[r2 + 18];
  return;
}
function _cipush(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r2 = (r1 + 20 | 0) >> 2;
  r3 = HEAP32[r2];
  r4 = HEAP32[r3 + 36 >> 2];
  r5 = HEAP32[r3 + 32 >> 2];
  r6 = r1 + 28 | 0;
  if ((r3 + 44 | 0) == (HEAP32[r6 >> 2] | 0)) {
    r7 = r1 + 24 | 0;
    r8 = HEAP32[r7 >> 2];
    r9 = r3 - r8 | 0;
    r10 = (r9 | 0) / 44 & -1;
    r11 = _mrb_realloc(r1, r8, r9 << 1);
    HEAP32[r7 >> 2] = r11;
    r7 = r11 + r10 * 44 | 0;
    HEAP32[r2] = r7;
    HEAP32[r6 >> 2] = r11 + (r10 << 1) * 44 | 0;
    r12 = r7;
  } else {
    r12 = r3;
  }
  HEAP32[r2] = r12 + 44 | 0;
  HEAP32[r12 + 56 >> 2] = 2;
  HEAP32[HEAP32[r2] + 36 >> 2] = r4;
  HEAP32[HEAP32[r2] + 32 >> 2] = r5;
  HEAP32[HEAP32[r2] + 40 >> 2] = 0;
  return HEAP32[r2];
}
function _cipop(r1) {
  var r2, r3, r4, r5, r6, r7;
  r2 = (r1 + 20 | 0) >> 2;
  r3 = HEAP32[r2];
  r4 = HEAP32[r3 + 40 >> 2];
  if ((r4 | 0) == 0) {
    r5 = r3;
    r6 = r5 - 44 | 0;
    HEAP32[r2] = r6;
    return;
  }
  r3 = HEAP32[r4 >> 2] >>> 11;
  r7 = _mrb_malloc(r1, r3 << 3);
  HEAP32[r4 + 20 >> 2] = -1;
  r1 = r4 + 12 | 0;
  _stack_copy(r7, HEAP32[r1 >> 2], r3);
  HEAP32[r1 >> 2] = r7;
  r5 = HEAP32[r2];
  r6 = r5 - 44 | 0;
  HEAP32[r2] = r6;
  return;
}
function _mrb_run(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92, r93, r94, r95, r96, r97, r98, r99, r100, r101, r102, r103, r104, r105, r106, r107, r108, r109, r110, r111, r112, r113, r114, r115, r116, r117, r118, r119, r120, r121, r122, r123, r124, r125, r126, r127, r128, r129, r130, r131, r132, r133, r134, r135, r136, r137, r138, r139, r140, r141, r142, r143, r144, r145, r146, r147, r148, r149, r150, r151, r152, r153, r154, r155, r156, r157, r158, r159, r160, r161, r162, r163, r164, r165, r166, r167, r168, r169, r170, r171, r172, r173, r174, r175, r176, r177, r178, r179, r180, r181, r182, r183, r184, r185, r186, r187, r188, r189, r190, r191, r192, r193, r194, r195, r196, r197, r198, r199, r200, r201, r202, r203, r204, r205, r206, r207, r208, r209, r210, r211, r212, r213, r214, r215, r216, r217, r218, r219, r220, r221, r222, r223, r224, r225, r226, r227, r228, r229, r230, r231, r232, r233, r234, r235, r236, r237, r238, r239, r240, r241, r242, r243, r244, r245, r246, r247, r248, r249, r250, r251, r252, r253, r254, r255, r256, r257, r258, r259, r260, r261, r262, r263, r264, r265, r266, r267, r268, r269, r270, r271, r272, r273, r274, r275, r276, r277, r278, r279, r280, r281, r282, r283, r284, r285, r286, r287, r288, r289, r290, r291, r292, r293, r294, r295, r296, r297, r298, r299, r300, r301, r302, r303, r304, r305, r306, r307, r308, r309, r310, r311, r312, r313, r314, r315, r316, r317, r318, r319, r320, r321, r322, r323, r324, r325, r326, r327, r328, r329, r330, r331, r332, r333, r334, r335, r336, r337, r338, r339, r340, r341, r342, r343, r344, r345, r346, r347, r348, r349, r350, r351, r352, r353, r354, r355, r356, r357, r358, r359, r360, r361, r362, r363, r364, r365, r366, r367, r368, r369, r370, r371, r372, r373, r374, r375, r376, r377, r378, r379, r380, r381, r382, r383, r384, r385, r386, r387, r388, r389, r390, r391, r392, r393, r394, r395, r396, r397, r398, r399, r400, r401, r402, r403, r404, r405, r406, r407, r408, r409, r410, r411, r412, r413, r414, r415, r416, r417, r418, r419, r420, r421, r422, r423, r424, r425, r426, r427, r428, r429, r430, r431, r432, r433, r434, r435, r436, r437, r438, r439, r440, r441, r442, r443, r444, r445, r446, r447, r448, r449, r450, r451, r452, r453, r454, r455, r456, r457, r458, r459, r460, r461, r462, r463, r464, r465, r466, r467, r468, r469, r470, r471, r472, r473, r474, r475, r476, r477, r478, r479, r480, r481, r482, r483, r484, r485, r486, r487, r488, r489, r490, r491, r492, r493, r494, r495, r496, r497, r498, r499, r500, r501, r502, r503, r504, r505, r506, r507, r508, r509, r510, r511, r512, r513, r514, r515, r516, r517, r518, r519, r520, r521, r522, r523, r524, r525, r526, r527, r528, r529, r530, r531, r532, r533, r534, r535, r536, r537, r538, r539, r540, r541, r542, r543, r544, r545, r546, r547, r548, r549, r550, r551, r552, r553, r554, r555, r556, r557, r558, r559, r560, r561, r562, r563, r564, r565, r566, r567, r568, r569, r570, r571, r572, r573, r574, r575, r576, r577, r578, r579, r580, r581, r582, r583, r584, r585, r586, r587, r588, r589, r590, r591, r592, r593, r594, r595, r596, r597, r598, r599, r600, r601, r602, r603, r604, r605, r606, r607, r608, r609, r610, r611, r612, r613, r614, r615, r616, r617, r618, r619, r620, r621, r622, r623, r624, r625, r626, r627, r628, r629, r630, r631, r632, r633, r634, r635, r636, r637, r638, r639, r640, r641, r642, r643, r644, r645, r646, r647, r648, r649, r650, r651, r652, r653, r654, r655, r656, r657, r658, r659, r660, r661, r662, r663, r664, r665, r666, r667, r668, r669, r670, r671, r672, r673, r674, r675, r676, r677, r678, r679, r680, r681, r682, r683, r684, r685, r686, r687, r688, r689, r690, r691, r692, r693, r694, r695, r696, r697, r698, r699, r700, r701, r702, r703, r704, r705, r706, r707, r708, r709, r710, r711, r712, r713, r714, r715, r716, r717, r718, r719, r720, r721, r722, r723, r724, r725, r726, r727, r728, r729, r730, r731, r732, r733, r734, r735, r736, r737, r738, r739, r740, r741, r742, r743, r744, r745, r746, r747, r748, r749, r750, r751, r752, r753, r754, r755, r756, r757, r758, r759, r760, r761, r762, r763, r764, r765, r766, r767, r768, r769, r770, r771, r772, r773, r774, r775, r776, r777, r778, r779, r780, r781, r782, r783, r784, r785, r786, r787, r788, r789, r790, r791, r792, r793, r794, r795, r796, r797, r798, r799, r800, r801, r802, r803, r804, r805, r806, r807, r808, r809, r810, r811, r812, r813, r814, r815, r816, r817, r818, r819, r820, r821, r822, r823, r824, r825, r826, r827, r828, r829, r830, r831, r832, r833, r834, r835, r836, r837, r838, r839, r840, r841, r842, r843, r844, r845, r846, r847, r848, r849, r850, r851, r852, r853, r854, r855, r856, r857, r858, r859, r860, r861, r862, r863, r864, r865, r866, r867, r868, r869, r870, r871, r872, r873, r874, r875, r876, r877, r878, r879, r880, r881, r882, r883, r884, r885, r886, r887, r888, r889, r890, r891, r892, r893, r894, r895, r896, r897, r898, r899, r900, r901, r902, r903, r904, r905, r906, r907, r908, r909, r910, r911, r912, r913, r914, r915, r916, r917, r918, r919, r920, r921, r922, r923, r924, r925, r926, r927, r928, r929, r930, r931, r932, r933, r934, r935, r936, r937, r938, r939, r940, r941, r942, r943, r944, r945, r946, r947, r948, r949, r950, r951, r952, r953, r954, r955, r956, r957, r958, r959, r960, r961, r962, r963, r964, r965, r966, r967, r968, r969, r970, r971, r972, r973, r974, r975, r976, r977, r978, r979, r980, r981, r982, r983, r984, r985, r986, r987, r988, r989, r990, r991, r992, r993, r994, r995, r996, r997, r998, r999, r1000, r1001, r1002, r1003, r1004, r1005, r1006, r1007, r1008, r1009, r1010, r1011, r1012, r1013, r1014, r1015, r1016, r1017, r1018, r1019, r1020, r1021, r1022, r1023, r1024, r1025, r1026, r1027, r1028, r1029, r1030, r1031, r1032, r1033, r1034, r1035, r1036, r1037, r1038, r1039, r1040, r1041, r1042, r1043, r1044, r1045, r1046, r1047, r1048, r1049, r1050, r1051, r1052, r1053, r1054, r1055, r1056, r1057, r1058, r1059, r1060, r1061, r1062, r1063, r1064, r1065, r1066, r1067, r1068, r1069, r1070, r1071, r1072, r1073, r1074, r1075, r1076, r1077, r1078, r1079, r1080, r1081, r1082, r1083, r1084, r1085, r1086, r1087, r1088, r1089, r1090, r1091, r1092, r1093, r1094, r1095, r1096, r1097, r1098, r1099, r1100, r1101, r1102, r1103, r1104, r1105, r1106, r1107, r1108, r1109, r1110, r1111, r1112, r1113, r1114, r1115, r1116, r1117, r1118, r1119, r1120, r1121, r1122, r1123, r1124, r1125, r1126, r1127, r1128, r1129, r1130, r1131, r1132, r1133, r1134, r1135, r1136, r1137, r1138, r1139, r1140, r1141, r1142, r1143, r1144, r1145, r1146, r1147, r1148, r1149, r1150, r1151, r1152, r1153, r1154, r1155, r1156, r1157, r1158, r1159, r1160, r1161, r1162, r1163, r1164, r1165, r1166, r1167, r1168, r1169, r1170, r1171, r1172, r1173, r1174, r1175, r1176, r1177, r1178, r1179, r1180, r1181, r1182, r1183, r1184, r1185, r1186, r1187, r1188, r1189, r1190, r1191, r1192, r1193, r1194, r1195, r1196, r1197, r1198, r1199, r1200, r1201, r1202, r1203, r1204, r1205, r1206, r1207, r1208, r1209, r1210, r1211, r1212, r1213, r1214, r1215, r1216, r1217, r1218, r1219, r1220, r1221, r1222, r1223, r1224, r1225, r1226, r1227, r1228, r1229, r1230, r1231, r1232, r1233, r1234, r1235, r1236, r1237, r1238, r1239, r1240, r1241, r1242, r1243, r1244, r1245, r1246, r1247, r1248, r1249, r1250, r1251, r1252, r1253, r1254, r1255, r1256, r1257, r1258, r1259, r1260, r1261, r1262, r1263, r1264, r1265, r1266, r1267, r1268, r1269, r1270, r1271, r1272, r1273, r1274, r1275, r1276, r1277, r1278, r1279, r1280, r1281, r1282, r1283, r1284, r1285, r1286, r1287, r1288, r1289, r1290, r1291, r1292, r1293, r1294, r1295, r1296, r1297, r1298, r1299, r1300, r1301, r1302, r1303, r1304, r1305, r1306, r1307, r1308, r1309, r1310, r1311, r1312, r1313, r1314, r1315, r1316, r1317, r1318, r1319, r1320, r1321, r1322, r1323, r1324, r1325, r1326, r1327, r1328, r1329, r1330, r1331, r1332, r1333, r1334, r1335, r1336, r1337, r1338, r1339, r1340, r1341, r1342, r1343, r1344, r1345, r1346, r1347, r1348, r1349, r1350, r1351, r1352, r1353, r1354, r1355, r1356, r1357, r1358, r1359, r1360, r1361, r1362, r1363, r1364, r1365, r1366, r1367, r1368, r1369, r1370, r1371, r1372, r1373, r1374, r1375, r1376, r1377, r1378, r1379, r1380, r1381, r1382, r1383, r1384, r1385, r1386, r1387, r1388, r1389, r1390, r1391, r1392, r1393, r1394, r1395, r1396, r1397, r1398, r1399, r1400, r1401, r1402, r1403, r1404, r1405, r1406, r1407, r1408, r1409, r1410, r1411, r1412, r1413, r1414, r1415, r1416, r1417, r1418, r1419, r1420, r1421, r1422, r1423, r1424, r1425, r1426, r1427, r1428, r1429, r1430, r1431, r1432, r1433, r1434, r1435, r1436, r1437, r1438, r1439, r1440, r1441, r1442, r1443, r1444, r1445, r1446, r1447, r1448, r1449, r1450, r1451, r1452, r1453, r1454, r1455, r1456, r1457, r1458, r1459, r1460, r1461, r1462, r1463, r1464, r1465, r1466, r1467, r1468, r1469, r1470, r1471, r1472, r1473, r1474, r1475, r1476, r1477, r1478, r1479, r1480, r1481, r1482, r1483, r1484, r1485, r1486, r1487, r1488, r1489, r1490, r1491, r1492, r1493, r1494, r1495, r1496, r1497, r1498, r1499, r1500, r1501, r1502, r1503, r1504, r1505, r1506, r1507, r1508, r1509, r1510, r1511, r1512, r1513, r1514, r1515, r1516, r1517, r1518, r1519, r1520, r1521, r1522, r1523, r1524, r1525, r1526, r1527, r1528, r1529, r1530, r1531, r1532, r1533, r1534, r1535, r1536, r1537, r1538, r1539, r1540, r1541, r1542, r1543, r1544, r1545, r1546, r1547, r1548, r1549, r1550, r1551, r1552, r1553, r1554, r1555, r1556, r1557, r1558, r1559, r1560, r1561, r1562, r1563, r1564, r1565, r1566, r1567, r1568, r1569, r1570, r1571, r1572, r1573, r1574, r1575, r1576, r1577, r1578, r1579, r1580, r1581, r1582, r1583, r1584, r1585, r1586, r1587, r1588, r1589, r1590, r1591, r1592, r1593, r1594, r1595, r1596, r1597, r1598, r1599, r1600, r1601, r1602, r1603, r1604, r1605, r1606, r1607, r1608, r1609, r1610, r1611, r1612, r1613, r1614, r1615, r1616, r1617, r1618, r1619, r1620, r1621, r1622, r1623, r1624, r1625, r1626, r1627, r1628, r1629, r1630, r1631, r1632, r1633, r1634, r1635, r1636, r1637, r1638, r1639, r1640, r1641, r1642, r1643, r1644, r1645, r1646, r1647, r1648, r1649, r1650, r1651, r1652, r1653, r1654, r1655, r1656, r1657, r1658, r1659, r1660, r1661, r1662, r1663, r1664, r1665, r1666, r1667, r1668, r1669, r1670, r1671, r1672, r1673, r1674, r1675, r1676, r1677, r1678, r1679, r1680, r1681, r1682, r1683, r1684, r1685, r1686, r1687, r1688, r1689, r1690, r1691, r1692, r1693, r1694, r1695, r1696, r1697, r1698, r1699, r1700, r1701, r1702, r1703, r1704, r1705, r1706, r1707, r1708, r1709, r1710, r1711, r1712, r1713, r1714, r1715, r1716, r1717, r1718, r1719, r1720, r1721, r1722, r1723, r1724, r1725, r1726, r1727, r1728, r1729, r1730, r1731, r1732, r1733, r1734, r1735, r1736, r1737, r1738, r1739, r1740, r1741, r1742, r1743, r1744, r1745, r1746, r1747, r1748, r1749, r1750, r1751, r1752, r1753, r1754, r1755, r1756, r1757, r1758, r1759, r1760, r1761, r1762, r1763, r1764, r1765, r1766, r1767, r1768, r1769, r1770, r1771, r1772, r1773, r1774, r1775, r1776, r1777, r1778, r1779, r1780, r1781, r1782, r1783, r1784, r1785, r1786, r1787, r1788, r1789, r1790, r1791, r1792, r1793, r1794, r1795, r1796, r1797, r1798, r1799, r1800, r1801, r1802, r1803, r1804, r1805, r1806, r1807, r1808, r1809, r1810, r1811, r1812, r1813, r1814, r1815, r1816, r1817, r1818, r1819, r1820, r1821, r1822, r1823, r1824, r1825, r1826, r1827, r1828, r1829, r1830, r1831, r1832, r1833, r1834, r1835, r1836, r1837, r1838, r1839, r1840, r1841, r1842, r1843, r1844, r1845, r1846, r1847, r1848, r1849, r1850, r1851, r1852, r1853, r1854, r1855, r1856, r1857, r1858, r1859, r1860, r1861, r1862, r1863, r1864, r1865, r1866, r1867, r1868, r1869, r1870, r1871, r1872, r1873, r1874, r1875, r1876, r1877, r1878, r1879, r1880, r1881, r1882, r1883, r1884, r1885, r1886, r1887, r1888, r1889, r1890, r1891, r1892, r1893, r1894, r1895, r1896, r1897, r1898, r1899, r1900, r1901, r1902, r1903, r1904, r1905, r1906, r1907, r1908, r1909, r1910, r1911, r1912, r1913, r1914, r1915, r1916, r1917, r1918, r1919, r1920, r1921, r1922, r1923, r1924, r1925, r1926, r1927, r1928, r1929, r1930, r1931, r1932, r1933, r1934, r1935, r1936, r1937, r1938, r1939, r1940, r1941, r1942, r1943, r1944, r1945, r1946, r1947, r1948, r1949, r1950, r1951, r1952, r1953, r1954, r1955, r1956, r1957, r1958, r1959, r1960, r1961, r1962, r1963, r1964, r1965, r1966, r1967, r1968, r1969, r1970, r1971, r1972, r1973, r1974, r1975, r1976, r1977, r1978, r1979, r1980, r1981, r1982, r1983, r1984, r1985, r1986, r1987, r1988, r1989, r1990, r1991, r1992, r1993, r1994, r1995, r1996, r1997, r1998, r1999, r2000, r2001, r2002, r2003, r2004, r2005, r2006, r2007, r2008, r2009, r2010, r2011, r2012, r2013, r2014, r2015, r2016, r2017, r2018, r2019, r2020, r2021, r2022, r2023, r2024, r2025, r2026, r2027, r2028, r2029, r2030, r2031, r2032, r2033, r2034, r2035, r2036, r2037, r2038, r2039, r2040, r2041, r2042, r2043, r2044, r2045, r2046, r2047, r2048, r2049, r2050, r2051, r2052, r2053, r2054, r2055, r2056, r2057, r2058, r2059, r2060, r2061, r2062, r2063, r2064, r2065, r2066, r2067, r2068, r2069, r2070, r2071, r2072, r2073, r2074, r2075, r2076, r2077, r2078, r2079, r2080, r2081, r2082, r2083, r2084, r2085, r2086, r2087, r2088, r2089, r2090, r2091, r2092, r2093, r2094, r2095, r2096, r2097, r2098, r2099, r2100, r2101, r2102, r2103, r2104, r2105, r2106, r2107, r2108, r2109, r2110, r2111, r2112, r2113, r2114, r2115, r2116, r2117, r2118, r2119, r2120, r2121, r2122, r2123, r2124, r2125, r2126, r2127, r2128, r2129, r2130, r2131, r2132, r2133, r2134, r2135, r2136, r2137, r2138, r2139, r2140, r2141, r2142, r2143, r2144, r2145, r2146, r2147, r2148, r2149, r2150, r2151, r2152, r2153, r2154, r2155, r2156, r2157, r2158, r2159, r2160, r2161, r2162, r2163, r2164, r2165, r2166, r2167, r2168, r2169, r2170, r2171, r2172, r2173, r2174, r2175, r2176, r2177, r2178, r2179, r2180, r2181, r2182, r2183, r2184, r2185, r2186, r2187, r2188, r2189, r2190, r2191, r2192, r2193, r2194, r2195, r2196, r2197, r2198, r2199, r2200, r2201, r2202, r2203, r2204, r2205, r2206, r2207, r2208, r2209, r2210, r2211, r2212, r2213, r2214, r2215, r2216, r2217, r2218, r2219, r2220, r2221, r2222, r2223, r2224, r2225, r2226, r2227, r2228, r2229, r2230, r2231, r2232, r2233, r2234, r2235, r2236, r2237, r2238, r2239, r2240, r2241, r2242, r2243, r2244, r2245, r2246, r2247, r2248, r2249, r2250, r2251, r2252, r2253, r2254, r2255, r2256, r2257, r2258, r2259, r2260, r2261, r2262, r2263, r2264, r2265, r2266, r2267, r2268, r2269, r2270, r2271, r2272, r2273, r2274, r2275, r2276, r2277, r2278, r2279, r2280, r2281, r2282, r2283, r2284, r2285, r2286, r2287, r2288, r2289, r2290, r2291, r2292, r2293, r2294, r2295, r2296, r2297, r2298, r2299, r2300, r2301, r2302, r2303, r2304, r2305, r2306, r2307, r2308, r2309, r2310, r2311, r2312, r2313, r2314, r2315, r2316, r2317, r2318, r2319, r2320, r2321, r2322, r2323, r2324, r2325, r2326, r2327, r2328, r2329, r2330, r2331, r2332, r2333, r2334, r2335, r2336, r2337, r2338, r2339, r2340, r2341, r2342, r2343, r2344, r2345, r2346, r2347, r2348, r2349, r2350, r2351, r2352, r2353, r2354, r2355, r2356, r2357, r2358, r2359, r2360, r2361, r2362, r2363, r2364, r2365, r2366, r2367, r2368, r2369, r2370, r2371, r2372, r2373, r2374, r2375, r2376, r2377, r2378, r2379, r2380, r2381, r2382, r2383, r2384, r2385, r2386, r2387, r2388, r2389, r2390, r2391, r2392, r2393, r2394, r2395, r2396, r2397, r2398, r2399, r2400, r2401, r2402, r2403, r2404, r2405, r2406, r2407, r2408, r2409, r2410, r2411, r2412, r2413, r2414, r2415, r2416, r2417, r2418, r2419, r2420, r2421, r2422, r2423, r2424, r2425, r2426, r2427, r2428, r2429, r2430, r2431, r2432, r2433, r2434, r2435, r2436, r2437, r2438, r2439, r2440, r2441, r2442, r2443, r2444, r2445, r2446, r2447, r2448, r2449, r2450, r2451, r2452, r2453, r2454, r2455, r2456, r2457, r2458, r2459, r2460, r2461, r2462, r2463, r2464, r2465, r2466, r2467, r2468, r2469, r2470, r2471, r2472, r2473, r2474, r2475, r2476, r2477, r2478, r2479, r2480, r2481, r2482, r2483, r2484, r2485, r2486, r2487, r2488, r2489, r2490, r2491, r2492, r2493, r2494, r2495, r2496, r2497, r2498, r2499, r2500, r2501, r2502, r2503, r2504, r2505, r2506, r2507, r2508, r2509, r2510, r2511, r2512, r2513, r2514, r2515, r2516, r2517, r2518, r2519, r2520, r2521, r2522, r2523, r2524, r2525, r2526, r2527, r2528, r2529, r2530, r2531, r2532, r2533, r2534, r2535, r2536, r2537, r2538, r2539, r2540, r2541, r2542, r2543, r2544, r2545, r2546, r2547, r2548, r2549, r2550, r2551, r2552, r2553, r2554, r2555, r2556, r2557, r2558, r2559, r2560, r2561, r2562, r2563, r2564, r2565, r2566, r2567, r2568, r2569, r2570, r2571, r2572, r2573, r2574, r2575, r2576, r2577, r2578, r2579, r2580, r2581, r2582, r2583, r2584, r2585, r2586, r2587, r2588, r2589, r2590, r2591, r2592, r2593, r2594, r2595, r2596, r2597, r2598, r2599, r2600, r2601, r2602;
  r5 = 0;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 516 | 0;
  r7 = r4;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7 + 4 >> 2];
  r5 = 2;
  r8 = {};
  r9 = {
    "2": (function(value) {
      r5 = 377;
      r10 = value;
    }),
    dummy: 0
  };
  while (1) try {
    switch (r5) {
     case 2:
      r11 = r6;
      r12 = r6 + 40;
      r13 = r6 + 48;
      r14 = r6 + 56;
      r15 = r6 + 64;
      r16 = r6 + 72;
      r17 = r6 + 80;
      r18 = r6 + 88;
      r19 = r6 + 96;
      r20 = r6 + 100;
      r21 = r6 + 108;
      r22 = r6 + 116;
      r23 = r6 + 124;
      r24 = r6 + 132;
      r25 = r6 + 140;
      r26 = r6 + 148;
      r27 = r6 + 156;
      r28 = r6 + 164;
      r29 = r6 + 168;
      r30 = r6 + 176;
      r31 = r6 + 184;
      r32 = r6 + 192;
      r33 = r6 + 200;
      r34 = r6 + 208;
      r35 = r6 + 216;
      r36 = r6 + 224;
      r37 = r6 + 232;
      r38 = r6 + 240;
      r39 = r6 + 248;
      r40 = r6 + 256;
      r41 = r6 + 260;
      r42 = r6 + 268;
      r43 = r6 + 276;
      r44 = r6 + 284;
      r45 = r6 + 292;
      r46 = r6 + 300;
      r47 = r6 + 308;
      r48 = r6 + 316;
      r49 = r6 + 324;
      r50 = r6 + 332;
      r51 = r6 + 340;
      r52 = r6 + 348;
      r53 = r6 + 356;
      r54 = r6 + 364;
      r55 = r6 + 372;
      r56 = r6 + 380;
      r57 = r6 + 388;
      r58 = r6 + 396;
      r59 = r6 + 404;
      r60 = r6 + 412;
      r61 = r6 + 420;
      r62 = r6 + 428;
      r63 = r6 + 436;
      r64 = r6 + 444;
      r65 = r6 + 452;
      r66 = r6 + 460;
      r67 = r6 + 468;
      r68 = r6 + 476;
      r69 = r6 + 484;
      r70 = r6 + 492;
      r71 = r6 + 500;
      r72 = r6 + 508;
      r73 = r3 + 12 | 0;
      r74 = HEAP32[r73 >> 2];
      r75 = r74 + 8 | 0;
      r76 = HEAP32[r75 >> 2];
      r77 = r74 + 12 | 0;
      r78 = HEAP32[r77 >> 2];
      r79 = r74 + 16 | 0;
      r80 = HEAP32[r79 >> 2];
      r81 = r2 + 544 | 0;
      r82 = HEAP32[r81 >> 2];
      r83 = _mrb_gc_arena_save(r82);
      r84 = r2 | 0;
      r85 = HEAP32[r84 >> 2];
      r86 = r11 | 0;
      r10 = (tempInt = setjmpId++, r8[tempInt] = 1, setjmpLabels[tempInt] = r5, HEAP32[r86 >> 2] = tempInt, 0);
      r5 = 377;
      break;
     case 377:
      r87 = (r10 | 0) == 0;
      if (r87) {
        r5 = 4;
        break;
      } else {
        r5 = 3;
        break;
      }
     case 3:
      r88 = r2 + 20 | 0;
      r89 = r2 + 48 | 0;
      r90 = r3;
      r91 = r74;
      r92 = r76;
      r93 = 0;
      r94 = r88;
      r95 = r89;
      r5 = 143;
      break;
     case 4:
      r96 = r11;
      HEAP32[r84 >> 2] = r96;
      r97 = r2 + 8 | 0;
      r98 = HEAP32[r97 >> 2];
      r99 = (r98 | 0) == 0;
      if (r99) {
        r5 = 5;
        break;
      } else {
        r5 = 6;
        break;
      }
     case 5:
      _stack_init(r2);
      r5 = 6;
      break;
     case 6:
      r100 = r74 + 4 | 0;
      r101 = r100;
      r102 = HEAP32[r101 >> 2];
      r103 = r102 << 16;
      r104 = r103 >> 16;
      _stack_extend(r2, r104, r104);
      r105 = r2 + 20 | 0;
      r106 = HEAP32[r105 >> 2];
      r107 = r106 + 4 | 0;
      HEAP32[r107 >> 2] = r3;
      r108 = HEAP32[r101 >> 2];
      r109 = r108 << 16;
      r110 = r109 >> 16;
      r111 = r110 + 2 | 0;
      r112 = HEAP32[r105 >> 2];
      r113 = r112 + 12 | 0;
      HEAP32[r113 >> 2] = r111;
      r114 = HEAP32[r97 >> 2];
      r115 = r4;
      r116 = r114;
      r117 = r115 | 0;
      r118 = HEAP32[r117 >> 2];
      r119 = r115 + 4 | 0;
      r120 = HEAP32[r119 >> 2];
      r121 = r116 | 0;
      HEAP32[r121 >> 2] = r118;
      r122 = r116 + 4 | 0;
      HEAP32[r122 >> 2] = r120;
      r123 = r3;
      r124 = r74;
      r125 = r78;
      r126 = r80;
      r127 = r114;
      r128 = r76;
      r129 = r105;
      r130 = r97;
      r5 = 180;
      break;
     case 7:
      r131 = r132 + 4 | 0;
      r133 = HEAP32[r131 >> 2];
      r134 = r133 & 127;
      r135 = 5309552 + (r134 << 2) | 0;
      r136 = r135;
      r137 = r137;
      r138 = r138;
      r132 = r131;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r133;
      r5 = 376;
      break;
     case 8:
      r143 = r142 >>> 23;
      r144 = r141 + (r143 << 3) | 0;
      r145 = r142 >>> 14;
      r146 = r145 & 511;
      r147 = r141 + (r146 << 3) | 0;
      r148 = r147;
      r149 = r144;
      r150 = r148 | 0;
      r151 = HEAP32[r150 >> 2];
      r152 = r148 + 4 | 0;
      r153 = HEAP32[r152 >> 2];
      r154 = r149 | 0;
      HEAP32[r154 >> 2] = r151;
      r155 = r149 + 4 | 0;
      HEAP32[r155 >> 2] = r153;
      r156 = r132 + 4 | 0;
      r157 = HEAP32[r156 >> 2];
      r158 = r157 & 127;
      r159 = 5309552 + (r158 << 2) | 0;
      r136 = r159;
      r137 = r137;
      r138 = r138;
      r132 = r156;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r157;
      r5 = 376;
      break;
     case 9:
      r160 = r142 >>> 23;
      r161 = r141 + (r160 << 3) | 0;
      r162 = r142 >>> 7;
      r163 = r162 & 65535;
      r164 = r139 + (r163 << 3) | 0;
      r165 = r164;
      r166 = r161;
      r150 = r165 | 0;
      r167 = HEAP32[r150 >> 2];
      r152 = r165 + 4 | 0;
      r168 = HEAP32[r152 >> 2];
      r154 = r166 | 0;
      HEAP32[r154 >> 2] = r167;
      r155 = r166 + 4 | 0;
      HEAP32[r155 >> 2] = r168;
      r169 = r132 + 4 | 0;
      r170 = HEAP32[r169 >> 2];
      r171 = r170 & 127;
      r172 = 5309552 + (r171 << 2) | 0;
      r136 = r172;
      r137 = r137;
      r138 = r138;
      r132 = r169;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r170;
      r5 = 376;
      break;
     case 10:
      r173 = r142 >>> 23;
      r174 = r141 + (r173 << 3) + 4 | 0;
      r175 = r174;
      r176 = HEAP32[r175 >> 2];
      r177 = r176 & -256;
      r178 = r177 | 3;
      HEAP32[r175 >> 2] = r178;
      r179 = r142 >>> 7;
      r180 = r179 & 65535;
      r181 = r180 - 32767 | 0;
      r182 = r141 + (r173 << 3) | 0;
      r183 = r182;
      HEAP32[r183 >> 2] = r181;
      r184 = r132 + 4 | 0;
      r185 = HEAP32[r184 >> 2];
      r186 = r185 & 127;
      r187 = 5309552 + (r186 << 2) | 0;
      r136 = r187;
      r137 = r137;
      r138 = r138;
      r132 = r184;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r185;
      r5 = 376;
      break;
     case 11:
      r188 = r142 >>> 23;
      r189 = r141 + (r188 << 3) + 4 | 0;
      r190 = r189;
      r191 = HEAP32[r190 >> 2];
      r192 = r191 & -256;
      r193 = r192 | 4;
      HEAP32[r190 >> 2] = r193;
      r194 = r142 >>> 7;
      r195 = r194 & 65535;
      r196 = r140 + (r195 << 1) | 0;
      r197 = HEAP16[r196 >> 1];
      r198 = r141 + (r188 << 3) | 0;
      r199 = r198;
      HEAP16[r199 >> 1] = r197;
      r200 = r132 + 4 | 0;
      r201 = HEAP32[r200 >> 2];
      r202 = r201 & 127;
      r203 = 5309552 + (r202 << 2) | 0;
      r136 = r203;
      r137 = r137;
      r138 = r138;
      r132 = r200;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r201;
      r5 = 376;
      break;
     case 12:
      r204 = r142 >>> 23;
      r205 = r141 + (r204 << 3) | 0;
      r206 = r141;
      r207 = r205;
      r208 = r206 | 0;
      r209 = HEAP32[r208 >> 2];
      r210 = r206 + 4 | 0;
      r211 = HEAP32[r210 >> 2];
      r212 = r207 | 0;
      HEAP32[r212 >> 2] = r209;
      r213 = r207 + 4 | 0;
      HEAP32[r213 >> 2] = r211;
      r214 = r132 + 4 | 0;
      r215 = HEAP32[r214 >> 2];
      r216 = r215 & 127;
      r217 = 5309552 + (r216 << 2) | 0;
      r136 = r217;
      r137 = r137;
      r138 = r138;
      r132 = r214;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r215;
      r5 = 376;
      break;
     case 13:
      r218 = r142 >>> 23;
      r219 = r141 + (r218 << 3) + 4 | 0;
      r220 = r219;
      r221 = HEAP32[r220 >> 2];
      r222 = r221 & -256;
      r223 = r222 | 2;
      HEAP32[r220 >> 2] = r223;
      r224 = r141 + (r218 << 3) | 0;
      r225 = r224;
      HEAP32[r225 >> 2] = 1;
      r226 = r132 + 4 | 0;
      r227 = HEAP32[r226 >> 2];
      r228 = r227 & 127;
      r229 = 5309552 + (r228 << 2) | 0;
      r136 = r229;
      r137 = r137;
      r138 = r138;
      r132 = r226;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r227;
      r5 = 376;
      break;
     case 14:
      r230 = r142 >>> 23;
      r231 = r141 + (r230 << 3) + 4 | 0;
      r232 = r231;
      r233 = HEAP32[r232 >> 2];
      r234 = r233 & -256;
      HEAP32[r232 >> 2] = r234;
      r235 = r141 + (r230 << 3) | 0;
      r236 = r235;
      HEAP32[r236 >> 2] = 1;
      r237 = r132 + 4 | 0;
      r238 = HEAP32[r237 >> 2];
      r239 = r238 & 127;
      r240 = 5309552 + (r239 << 2) | 0;
      r136 = r240;
      r137 = r137;
      r138 = r138;
      r132 = r237;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r238;
      r5 = 376;
      break;
     case 15:
      r241 = r142 >>> 23;
      r242 = r141 + (r241 << 3) | 0;
      r243 = r142 >>> 7;
      r244 = r243 & 65535;
      r245 = r140 + (r244 << 1) | 0;
      r246 = HEAP16[r245 >> 1];
      r247 = HEAP32[r248 >> 2];
      _mrb_gv_get(r12, r247, r246);
      r249 = r242;
      r250 = r251 | 0;
      r252 = HEAP32[r250 >> 2];
      r253 = r251 + 4 | 0;
      r254 = HEAP32[r253 >> 2];
      r255 = r249 | 0;
      HEAP32[r255 >> 2] = r252;
      r256 = r249 + 4 | 0;
      HEAP32[r256 >> 2] = r254;
      r257 = r132 + 4 | 0;
      r258 = HEAP32[r257 >> 2];
      r259 = r258 & 127;
      r260 = 5309552 + (r259 << 2) | 0;
      r136 = r260;
      r137 = r137;
      r138 = r138;
      r132 = r257;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r258;
      r5 = 376;
      break;
     case 16:
      r261 = r142 >>> 7;
      r262 = r261 & 65535;
      r263 = r140 + (r262 << 1) | 0;
      r264 = HEAP16[r263 >> 1];
      r265 = r142 >>> 23;
      r266 = r141 + (r265 << 3) | 0;
      _mrb_gv_set(r2, r264, r266);
      r267 = r132 + 4 | 0;
      r268 = HEAP32[r267 >> 2];
      r269 = r268 & 127;
      r270 = 5309552 + (r269 << 2) | 0;
      r136 = r270;
      r137 = r137;
      r138 = r138;
      r132 = r267;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r268;
      r5 = 376;
      break;
     case 17:
      r271 = r142 >>> 23;
      r272 = r141 + (r271 << 3) | 0;
      _mrb_vm_special_get(r13);
      r273 = r272;
      r208 = r274 | 0;
      r275 = HEAP32[r208 >> 2];
      r210 = r274 + 4 | 0;
      r276 = HEAP32[r210 >> 2];
      r212 = r273 | 0;
      HEAP32[r212 >> 2] = r275;
      r213 = r273 + 4 | 0;
      HEAP32[r213 >> 2] = r276;
      r277 = r132 + 4 | 0;
      r278 = HEAP32[r277 >> 2];
      r279 = r278 & 127;
      r280 = 5309552 + (r279 << 2) | 0;
      r136 = r280;
      r137 = r137;
      r138 = r138;
      r132 = r277;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r278;
      r5 = 376;
      break;
     case 18:
      r281 = r132 + 4 | 0;
      r282 = HEAP32[r281 >> 2];
      r283 = r282 & 127;
      r284 = 5309552 + (r283 << 2) | 0;
      r136 = r284;
      r137 = r137;
      r138 = r138;
      r132 = r281;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r282;
      r5 = 376;
      break;
     case 19:
      r285 = r142 >>> 23;
      r286 = r141 + (r285 << 3) | 0;
      r287 = r142 >>> 7;
      r288 = r287 & 65535;
      r289 = r140 + (r288 << 1) | 0;
      r290 = HEAP16[r289 >> 1];
      r291 = HEAP32[r292 >> 2];
      _mrb_vm_iv_get(r14, r291, r290);
      r293 = r286;
      r250 = r294 | 0;
      r295 = HEAP32[r250 >> 2];
      r253 = r294 + 4 | 0;
      r296 = HEAP32[r253 >> 2];
      r255 = r293 | 0;
      HEAP32[r255 >> 2] = r295;
      r256 = r293 + 4 | 0;
      HEAP32[r256 >> 2] = r296;
      r297 = r132 + 4 | 0;
      r298 = HEAP32[r297 >> 2];
      r299 = r298 & 127;
      r300 = 5309552 + (r299 << 2) | 0;
      r136 = r300;
      r137 = r137;
      r138 = r138;
      r132 = r297;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r298;
      r5 = 376;
      break;
     case 20:
      r301 = r142 >>> 7;
      r302 = r301 & 65535;
      r303 = r140 + (r302 << 1) | 0;
      r304 = HEAP16[r303 >> 1];
      r305 = r142 >>> 23;
      r306 = r141 + (r305 << 3) | 0;
      _mrb_vm_iv_set(r2, r304, r306);
      r307 = r132 + 4 | 0;
      r308 = HEAP32[r307 >> 2];
      r309 = r308 & 127;
      r310 = 5309552 + (r309 << 2) | 0;
      r136 = r310;
      r137 = r137;
      r138 = r138;
      r132 = r307;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r308;
      r5 = 376;
      break;
     case 21:
      r311 = r142 >>> 23;
      r312 = r141 + (r311 << 3) | 0;
      r313 = r142 >>> 7;
      r314 = r313 & 65535;
      r315 = r140 + (r314 << 1) | 0;
      r316 = HEAP16[r315 >> 1];
      _mrb_vm_cv_get(r15, r2, r316);
      r317 = r312;
      r212 = r318 | 0;
      r319 = HEAP32[r212 >> 2];
      r213 = r318 + 4 | 0;
      r320 = HEAP32[r213 >> 2];
      r321 = r317 | 0;
      HEAP32[r321 >> 2] = r319;
      r322 = r317 + 4 | 0;
      HEAP32[r322 >> 2] = r320;
      r323 = r132 + 4 | 0;
      r324 = HEAP32[r323 >> 2];
      r325 = r324 & 127;
      r326 = 5309552 + (r325 << 2) | 0;
      r136 = r326;
      r137 = r137;
      r138 = r138;
      r132 = r323;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r324;
      r5 = 376;
      break;
     case 22:
      r327 = r142 >>> 7;
      r328 = r327 & 65535;
      r329 = r140 + (r328 << 1) | 0;
      r330 = HEAP16[r329 >> 1];
      r331 = r142 >>> 23;
      r332 = r141 + (r331 << 3) | 0;
      _mrb_vm_cv_set(r2, r330, r332);
      r333 = r132 + 4 | 0;
      r334 = HEAP32[r333 >> 2];
      r335 = r334 & 127;
      r336 = 5309552 + (r335 << 2) | 0;
      r136 = r336;
      r137 = r137;
      r138 = r138;
      r132 = r333;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r334;
      r5 = 376;
      break;
     case 23:
      r337 = r142 >>> 23;
      r338 = r141 + (r337 << 3) | 0;
      r339 = r142 >>> 7;
      r340 = r339 & 65535;
      r341 = r140 + (r340 << 1) | 0;
      r342 = HEAP16[r341 >> 1];
      _mrb_vm_const_get(r16, r2, r342);
      r343 = r338;
      r212 = r344 | 0;
      r345 = HEAP32[r212 >> 2];
      r213 = r344 + 4 | 0;
      r346 = HEAP32[r213 >> 2];
      r321 = r343 | 0;
      HEAP32[r321 >> 2] = r345;
      r322 = r343 + 4 | 0;
      HEAP32[r322 >> 2] = r346;
      r347 = r132 + 4 | 0;
      r348 = HEAP32[r347 >> 2];
      r349 = r348 & 127;
      r350 = 5309552 + (r349 << 2) | 0;
      r136 = r350;
      r137 = r137;
      r138 = r138;
      r132 = r347;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r348;
      r5 = 376;
      break;
     case 24:
      r351 = r142 >>> 7;
      r352 = r351 & 65535;
      r353 = r140 + (r352 << 1) | 0;
      r354 = HEAP16[r353 >> 1];
      r355 = r142 >>> 23;
      r356 = r141 + (r355 << 3) | 0;
      _mrb_vm_const_set(r2, r354, r356);
      r357 = r132 + 4 | 0;
      r358 = HEAP32[r357 >> 2];
      r359 = r358 & 127;
      r360 = 5309552 + (r359 << 2) | 0;
      r136 = r360;
      r137 = r137;
      r138 = r138;
      r132 = r357;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r358;
      r5 = 376;
      break;
     case 25:
      r361 = r142 >>> 23;
      r362 = r141 + (r361 << 3) | 0;
      r363 = r142 >>> 7;
      r364 = r363 & 65535;
      r365 = r140 + (r364 << 1) | 0;
      r366 = HEAP16[r365 >> 1];
      _mrb_const_get(r17, r2, r362, r366);
      r367 = r362;
      r212 = r368 | 0;
      r369 = HEAP32[r212 >> 2];
      r213 = r368 + 4 | 0;
      r370 = HEAP32[r213 >> 2];
      r321 = r367 | 0;
      HEAP32[r321 >> 2] = r369;
      r322 = r367 + 4 | 0;
      HEAP32[r322 >> 2] = r370;
      r371 = r132 + 4 | 0;
      r372 = HEAP32[r371 >> 2];
      r373 = r372 & 127;
      r374 = 5309552 + (r373 << 2) | 0;
      r136 = r374;
      r137 = r137;
      r138 = r138;
      r132 = r371;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r372;
      r5 = 376;
      break;
     case 26:
      r375 = r142 >>> 23;
      r376 = r375 + 1 | 0;
      r377 = r141 + (r376 << 3) | 0;
      r378 = r142 >>> 7;
      r379 = r378 & 65535;
      r380 = r140 + (r379 << 1) | 0;
      r381 = HEAP16[r380 >> 1];
      r382 = r141 + (r375 << 3) | 0;
      _mrb_const_set(r2, r377, r381, r382);
      r383 = r132 + 4 | 0;
      r384 = HEAP32[r383 >> 2];
      r385 = r384 & 127;
      r386 = 5309552 + (r385 << 2) | 0;
      r136 = r386;
      r137 = r137;
      r138 = r138;
      r132 = r383;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r384;
      r5 = 376;
      break;
     case 27:
      r387 = r142 >>> 23;
      r388 = r141 + (r387 << 3) | 0;
      r389 = r142 >>> 7;
      r390 = r389 & 127;
      r391 = r142 >>> 14;
      r392 = r391 & 511;
      r393 = HEAP32[r394 >> 2];
      r395 = r393 + 4 | 0;
      r396 = HEAP32[r395 >> 2];
      r397 = r396 + 20 | 0;
      r398 = HEAP32[r397 >> 2];
      _uvget(r18, r398, r390, r392);
      r399 = r388;
      r255 = r400 | 0;
      r401 = HEAP32[r255 >> 2];
      r256 = r400 + 4 | 0;
      r402 = HEAP32[r256 >> 2];
      r403 = r399 | 0;
      HEAP32[r403 >> 2] = r401;
      r404 = r399 + 4 | 0;
      HEAP32[r404 >> 2] = r402;
      r405 = r132 + 4 | 0;
      r406 = HEAP32[r405 >> 2];
      r407 = r406 & 127;
      r408 = 5309552 + (r407 << 2) | 0;
      r136 = r408;
      r137 = r137;
      r138 = r138;
      r132 = r405;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r406;
      r5 = 376;
      break;
     case 28:
      r409 = r142 >>> 7;
      r410 = r409 & 127;
      r411 = r142 >>> 14;
      r412 = r411 & 511;
      r413 = r142 >>> 23;
      r414 = r141 + (r413 << 3) | 0;
      _uvset(r2, r410, r412, r414);
      r415 = r132 + 4 | 0;
      r416 = HEAP32[r415 >> 2];
      r417 = r416 & 127;
      r418 = 5309552 + (r417 << 2) | 0;
      r136 = r418;
      r137 = r137;
      r138 = r138;
      r132 = r415;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r416;
      r5 = 376;
      break;
     case 29:
      r419 = r142 >>> 7;
      r420 = r419 & 65535;
      r421 = r420 - 32767 | 0;
      r422 = r132 + (r421 << 2) | 0;
      r423 = HEAP32[r422 >> 2];
      r424 = r423 & 127;
      r425 = 5309552 + (r424 << 2) | 0;
      r136 = r425;
      r137 = r137;
      r138 = r138;
      r132 = r422;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r423;
      r5 = 376;
      break;
     case 30:
      r426 = r142 >>> 23;
      r427 = r141 + (r426 << 3) + 4 | 0;
      r428 = r427;
      r429 = HEAP32[r428 >> 2];
      r430 = r429 & 255;
      r431 = (r430 | 0) == 0;
      if (r431) {
        r5 = 32;
        break;
      } else {
        r5 = 31;
        break;
      }
     case 31:
      r432 = r142 >>> 7;
      r433 = r432 & 65535;
      r434 = r433 - 32767 | 0;
      r435 = r132 + (r434 << 2) | 0;
      r436 = HEAP32[r435 >> 2];
      r437 = r436 & 127;
      r438 = 5309552 + (r437 << 2) | 0;
      r136 = r438;
      r137 = r137;
      r138 = r138;
      r132 = r435;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r436;
      r5 = 376;
      break;
     case 32:
      r439 = r132 + 4 | 0;
      r440 = HEAP32[r439 >> 2];
      r441 = r440 & 127;
      r442 = 5309552 + (r441 << 2) | 0;
      r136 = r442;
      r137 = r137;
      r138 = r138;
      r132 = r439;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r440;
      r5 = 376;
      break;
     case 33:
      r443 = r142 >>> 23;
      r444 = r141 + (r443 << 3) + 4 | 0;
      r445 = r444;
      r446 = HEAP32[r445 >> 2];
      r447 = r446 & 255;
      r448 = (r447 | 0) == 0;
      if (r448) {
        r5 = 34;
        break;
      } else {
        r5 = 35;
        break;
      }
     case 34:
      r449 = r142 >>> 7;
      r450 = r449 & 65535;
      r451 = r450 - 32767 | 0;
      r452 = r132 + (r451 << 2) | 0;
      r453 = HEAP32[r452 >> 2];
      r454 = r453 & 127;
      r455 = 5309552 + (r454 << 2) | 0;
      r136 = r455;
      r137 = r137;
      r138 = r138;
      r132 = r452;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r453;
      r5 = 376;
      break;
     case 35:
      r456 = r132 + 4 | 0;
      r457 = HEAP32[r456 >> 2];
      r458 = r457 & 127;
      r459 = 5309552 + (r458 << 2) | 0;
      r136 = r459;
      r137 = r137;
      r138 = r138;
      r132 = r456;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r457;
      r5 = 376;
      break;
     case 36:
      r460 = HEAP32[r461 >> 2];
      r462 = HEAP32[r129 >> 2];
      r463 = r462 + 32 | 0;
      r464 = HEAP32[r463 >> 2];
      r465 = (r460 | 0) > (r464 | 0);
      if (r465) {
        r466 = r462;
        r467 = r464;
        r5 = 38;
        break;
      } else {
        r5 = 37;
        break;
      }
     case 37:
      r468 = (r460 | 0) == 0;
      r469 = r460 << 1;
      r470 = r468 ? 16 : r469;
      HEAP32[r461 >> 2] = r470;
      r471 = HEAP32[r472 >> 2];
      r473 = r471;
      r474 = r470 << 2;
      r475 = _mrb_realloc(r2, r473, r474);
      r476 = r475;
      HEAP32[r472 >> 2] = r476;
      r477 = HEAP32[r129 >> 2];
      r478 = r477 + 32 | 0;
      r479 = HEAP32[r478 >> 2];
      r466 = r477;
      r467 = r479;
      r5 = 38;
      break;
     case 38:
      r480 = r142 >>> 7;
      r481 = r480 & 65535;
      r482 = r481 - 32767 | 0;
      r483 = r132 + (r482 << 2) | 0;
      r484 = r466 + 32 | 0;
      r485 = r467 + 1 | 0;
      HEAP32[r484 >> 2] = r485;
      r486 = HEAP32[r472 >> 2];
      r487 = r486 + (r467 << 2) | 0;
      HEAP32[r487 >> 2] = r483;
      r488 = r132 + 4 | 0;
      r489 = HEAP32[r488 >> 2];
      r490 = r489 & 127;
      r491 = 5309552 + (r490 << 2) | 0;
      r136 = r491;
      r137 = r137;
      r138 = r138;
      r132 = r488;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r489;
      r5 = 376;
      break;
     case 39:
      r492 = HEAP32[r493 >> 2];
      r494 = r492;
      r495 = HEAP32[r494 >> 2];
      r496 = r495 & 255;
      r497 = r142 >>> 23;
      r498 = r141 + (r497 << 3) + 4 | 0;
      r499 = r498;
      r500 = HEAP32[r499 >> 2];
      r501 = r500 & -256;
      r502 = r501 | r496;
      HEAP32[r499 >> 2] = r502;
      r503 = HEAP32[r493 >> 2];
      r504 = r503 | 0;
      r505 = r141 + (r497 << 3) | 0;
      r506 = r505;
      HEAP32[r506 >> 2] = r504;
      HEAP32[r493 >> 2] = 0;
      r507 = r132 + 4 | 0;
      r508 = HEAP32[r507 >> 2];
      r509 = r508 & 127;
      r510 = 5309552 + (r509 << 2) | 0;
      r136 = r510;
      r137 = r137;
      r138 = r138;
      r132 = r507;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r508;
      r5 = 376;
      break;
     case 40:
      r511 = r142 >>> 23;
      r512 = (r511 | 0) == 0;
      if (r512) {
        r5 = 42;
        break;
      } else {
        r513 = r511;
        r5 = 41;
        break;
      }
     case 41:
      r514 = r513 - 1 | 0;
      r515 = HEAP32[r129 >> 2];
      r516 = r515 + 32 | 0;
      r517 = HEAP32[r516 >> 2];
      r518 = r517 - 1 | 0;
      HEAP32[r516 >> 2] = r518;
      r519 = (r514 | 0) == 0;
      if (r519) {
        r5 = 42;
        break;
      } else {
        r513 = r514;
        r5 = 41;
        break;
      }
     case 42:
      r520 = r132 + 4 | 0;
      r521 = HEAP32[r520 >> 2];
      r522 = r521 & 127;
      r523 = 5309552 + (r522 << 2) | 0;
      r136 = r523;
      r137 = r137;
      r138 = r138;
      r132 = r520;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r521;
      r5 = 376;
      break;
     case 43:
      r524 = r142 >>> 23;
      r525 = r141 + (r524 << 3) | 0;
      r526 = r525;
      r527 = HEAP32[r526 >> 2];
      r528 = r527;
      HEAP32[r493 >> 2] = r528;
      r90 = r137;
      r91 = r138;
      r92 = r132;
      r93 = r141;
      r94 = r129;
      r95 = r493;
      r5 = 143;
      break;
     case 44:
      r529 = r138;
      r530 = HEAP32[r529 >> 2];
      r531 = r530 << 16;
      r532 = r531 >> 16;
      r533 = r142 >>> 7;
      r534 = r533 & 65535;
      r535 = r532 + r534 | 0;
      r536 = HEAP32[r537 >> 2];
      r538 = r536 + (r535 << 2) | 0;
      r539 = HEAP32[r538 >> 2];
      r540 = _mrb_closure_new(r2, r539);
      r541 = HEAP32[r542 >> 2];
      r543 = HEAP32[r129 >> 2];
      r544 = r543 + 36 | 0;
      r545 = HEAP32[r544 >> 2];
      r546 = (r541 | 0) > (r545 | 0);
      if (r546) {
        r547 = r543;
        r548 = r545;
        r5 = 46;
        break;
      } else {
        r5 = 45;
        break;
      }
     case 45:
      r549 = (r541 | 0) == 0;
      r550 = r541 << 1;
      r551 = r549 ? 16 : r550;
      HEAP32[r542 >> 2] = r551;
      r552 = HEAP32[r553 >> 2];
      r554 = r552;
      r555 = r551 << 2;
      r556 = _mrb_realloc(r2, r554, r555);
      r557 = r556;
      HEAP32[r553 >> 2] = r557;
      r558 = HEAP32[r129 >> 2];
      r559 = r558 + 36 | 0;
      r560 = HEAP32[r559 >> 2];
      r547 = r558;
      r548 = r560;
      r5 = 46;
      break;
     case 46:
      r561 = r547 + 36 | 0;
      r562 = r548 + 1 | 0;
      HEAP32[r561 >> 2] = r562;
      r563 = HEAP32[r553 >> 2];
      r564 = r563 + (r548 << 2) | 0;
      HEAP32[r564 >> 2] = r540;
      _mrb_gc_arena_restore(r2, r83);
      r565 = r132 + 4 | 0;
      r566 = HEAP32[r565 >> 2];
      r567 = r566 & 127;
      r568 = 5309552 + (r567 << 2) | 0;
      r136 = r568;
      r137 = r137;
      r138 = r138;
      r132 = r565;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r566;
      r5 = 376;
      break;
     case 47:
      r569 = r142 >>> 23;
      r570 = (r569 | 0) == 0;
      if (r570) {
        r5 = 49;
        break;
      } else {
        r571 = 0;
        r5 = 48;
        break;
      }
     case 48:
      r572 = HEAP32[r129 >> 2];
      r573 = r572 + 36 | 0;
      r574 = HEAP32[r573 >> 2];
      r575 = r574 - 1 | 0;
      HEAP32[r573 >> 2] = r575;
      _ecall(r2, r575);
      r576 = r571 + 1 | 0;
      r577 = (r576 | 0) < (r569 | 0);
      if (r577) {
        r571 = r576;
        r5 = 48;
        break;
      } else {
        r5 = 49;
        break;
      }
     case 49:
      _mrb_gc_arena_restore(r2, r83);
      r578 = r132 + 4 | 0;
      r579 = HEAP32[r578 >> 2];
      r580 = r579 & 127;
      r581 = 5309552 + (r580 << 2) | 0;
      r136 = r581;
      r137 = r137;
      r138 = r138;
      r132 = r578;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r579;
      r5 = 376;
      break;
     case 50:
      r582 = r142 >>> 23;
      r583 = r141 + (r582 << 3) + 4 | 0;
      r584 = r583;
      r585 = HEAP32[r584 >> 2];
      r586 = r585 & -256;
      HEAP32[r584 >> 2] = r586;
      r587 = r141 + (r582 << 3) | 0;
      r588 = r587;
      HEAP32[r588 >> 2] = 0;
      r589 = r132 + 4 | 0;
      r590 = HEAP32[r589 >> 2];
      r591 = r590 & 127;
      r592 = 5309552 + (r591 << 2) | 0;
      r136 = r592;
      r137 = r137;
      r138 = r138;
      r132 = r589;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r590;
      r5 = 376;
      break;
     case 51:
      r593 = r594 >>> 23;
      r595 = r594 >>> 7;
      r596 = r595 & 127;
      r597 = r594 >>> 14;
      r598 = r597 & 511;
      r599 = r140 + (r598 << 1) | 0;
      r600 = HEAP16[r599 >> 1];
      r601 = r141 + (r593 << 3) | 0;
      r602 = r601;
      r603 = r602 | 0;
      r604 = HEAP32[r603 >> 2];
      r605 = r602 + 4 | 0;
      r606 = HEAP32[r605 >> 2];
      r607 = r608 | 0;
      HEAP32[r607 >> 2] = r604;
      r609 = r608 + 4 | 0;
      HEAP32[r609 >> 2] = r606;
      r610 = r594 & 127;
      r611 = (r610 | 0) == 33;
      if (r611) {
        r5 = 55;
        break;
      } else {
        r5 = 52;
        break;
      }
     case 52:
      r612 = (r596 | 0) == 127;
      if (r612) {
        r5 = 53;
        break;
      } else {
        r5 = 54;
        break;
      }
     case 53:
      r613 = r593 + 2 | 0;
      r614 = r141 + (r613 << 3) + 4 | 0;
      r615 = r614;
      r616 = HEAP32[r615 >> 2];
      r617 = r616 & -256;
      HEAP32[r615 >> 2] = r617;
      r618 = r141 + (r613 << 3) | 0;
      r619 = r618;
      HEAP32[r619 >> 2] = 0;
      r5 = 55;
      break;
     case 54:
      r620 = r593 + 1 | 0;
      r621 = r620 + r596 | 0;
      r622 = r141 + (r621 << 3) + 4 | 0;
      r623 = r622;
      r624 = HEAP32[r623 >> 2];
      r625 = r624 & -256;
      HEAP32[r623 >> 2] = r625;
      r626 = r141 + (r621 << 3) | 0;
      r627 = r626;
      HEAP32[r627 >> 2] = 0;
      r5 = 55;
      break;
     case 55:
      r628 = _mrb_class(r2, r20);
      HEAP32[r19 >> 2] = r628;
      r629 = _mrb_method_search_vm(r19, r600);
      r630 = (r629 | 0) == 0;
      if (r630) {
        r5 = 56;
        break;
      } else {
        r631 = r596;
        r632 = r629;
        r633 = r600;
        r5 = 59;
        break;
      }
     case 56:
      _mrb_symbol_value135(r21, r600);
      r634 = _mrb_intern(r2, 5317196);
      r635 = _mrb_method_search_vm(r19, r634);
      r636 = (r596 | 0) == 127;
      if (r636) {
        r5 = 57;
        break;
      } else {
        r5 = 58;
        break;
      }
     case 57:
      r637 = r593 + 1 | 0;
      r638 = r141 + (r637 << 3) | 0;
      _mrb_ary_unshift(r22, r2, r638, r21);
      r631 = 127;
      r632 = r635;
      r633 = r634;
      r5 = 59;
      break;
     case 58:
      r639 = r593 + 2 | 0;
      r640 = r141 + (r639 << 3) | 0;
      r641 = r640;
      r642 = r593 + 1 | 0;
      r643 = r141 + (r642 << 3) | 0;
      r644 = r643;
      r645 = r596 + 1 | 0;
      r646 = r645 << 3;
      _memmove(r641, r644, r646, 4, 0);
      r647 = r643;
      r603 = r648 | 0;
      r649 = HEAP32[r603 >> 2];
      r605 = r648 + 4 | 0;
      r650 = HEAP32[r605 >> 2];
      r607 = r647 | 0;
      HEAP32[r607 >> 2] = r649;
      r609 = r647 + 4 | 0;
      HEAP32[r609 >> 2] = r650;
      r631 = r645;
      r632 = r635;
      r633 = r634;
      r5 = 59;
      break;
     case 59:
      r651 = _cipush(r2);
      r652 = r651 | 0;
      HEAP16[r652 >> 1] = r633;
      r653 = r651 + 4 | 0;
      HEAP32[r653 >> 2] = r632;
      r654 = HEAP32[r130 >> 2];
      r655 = HEAP32[r656 >> 2];
      r657 = r654;
      r658 = r655;
      r659 = r657 - r658 | 0;
      r660 = r659 >> 3;
      r661 = r651 + 8 | 0;
      HEAP32[r661 >> 2] = r660;
      r662 = r651 + 16 | 0;
      r663 = (r631 | 0) == 127;
      r664 = r663 ? -1 : r631;
      HEAP32[r662 >> 2] = r664;
      r665 = HEAP32[r19 >> 2];
      r666 = r651 + 28 | 0;
      HEAP32[r666 >> 2] = r665;
      r667 = r132 + 4 | 0;
      r668 = r651 + 20 | 0;
      HEAP32[r668 >> 2] = r667;
      r669 = r651 + 24 | 0;
      HEAP32[r669 >> 2] = r593;
      r670 = HEAP32[r130 >> 2];
      r671 = r670 + (r593 << 3) | 0;
      HEAP32[r130 >> 2] = r671;
      r672 = r632;
      r673 = HEAP32[r672 >> 2];
      r674 = r673 & 262144;
      r675 = (r674 | 0) == 0;
      if (r675) {
        r5 = 65;
        break;
      } else {
        r5 = 60;
        break;
      }
     case 60:
      if (r663) {
        r5 = 61;
        break;
      } else {
        r5 = 62;
        break;
      }
     case 61:
      r676 = r651 + 12 | 0;
      HEAP32[r676 >> 2] = 3;
      r5 = 63;
      break;
     case 62:
      r677 = r631 + 2 | 0;
      r678 = r651 + 12 | 0;
      HEAP32[r678 >> 2] = r677;
      r5 = 63;
      break;
     case 63:
      r679 = r632 + 12 | 0;
      r680 = r679;
      r681 = HEAP32[r680 >> 2];
      FUNCTION_TABLE[r681](r23, r2, r20);
      r208 = r682 | 0;
      r683 = HEAP32[r208 >> 2];
      r210 = r682 + 4 | 0;
      r684 = HEAP32[r210 >> 2];
      r685 = HEAP32[r130 >> 2];
      r686 = r685;
      r603 = r686 | 0;
      HEAP32[r603 >> 2] = r683;
      r605 = r686 + 4 | 0;
      HEAP32[r605 >> 2] = r684;
      _mrb_gc_arena_restore(r2, r83);
      r687 = HEAP32[r493 >> 2];
      r688 = (r687 | 0) == 0;
      if (r688) {
        r5 = 64;
        break;
      } else {
        r90 = r137;
        r91 = r138;
        r92 = r132;
        r93 = r141;
        r94 = r129;
        r95 = r493;
        r5 = 143;
        break;
      }
     case 64:
      r689 = HEAP32[r656 >> 2];
      r690 = HEAP32[r129 >> 2];
      r691 = r690 + 8 | 0;
      r692 = HEAP32[r691 >> 2];
      r693 = r689 + (r692 << 3) | 0;
      HEAP32[r130 >> 2] = r693;
      _cipop(r2);
      r694 = HEAP32[r667 >> 2];
      r695 = r694 & 127;
      r696 = 5309552 + (r695 << 2) | 0;
      r136 = r696;
      r137 = r137;
      r138 = r138;
      r132 = r667;
      r139 = r139;
      r140 = r140;
      r141 = r693;
      r142 = r694;
      r5 = 376;
      break;
     case 65:
      r697 = HEAP32[r129 >> 2];
      r698 = r697 + 4 | 0;
      HEAP32[r698 >> 2] = r632;
      r699 = r632 + 12 | 0;
      r700 = HEAP32[r699 >> 2];
      r701 = r700 + 12 | 0;
      r702 = HEAP32[r701 >> 2];
      r703 = r700 + 16 | 0;
      r704 = HEAP32[r703 >> 2];
      r705 = r700 + 4 | 0;
      r706 = r705;
      r707 = HEAP32[r706 >> 2];
      r708 = r707 << 16;
      r709 = r708 >> 16;
      r710 = r651 + 12 | 0;
      HEAP32[r710 >> 2] = r709;
      r711 = HEAP32[r662 >> 2];
      r712 = (r711 | 0) < 0;
      r713 = HEAP32[r706 >> 2];
      r714 = r713 << 16;
      r715 = r714 >> 16;
      if (r712) {
        r5 = 66;
        break;
      } else {
        r5 = 67;
        break;
      }
     case 66:
      r716 = (r714 | 0) < 196608;
      r717 = r716 ? 3 : r715;
      _stack_extend(r2, r717, 3);
      r5 = 68;
      break;
     case 67:
      r718 = r711 + 2 | 0;
      _stack_extend(r2, r715, r718);
      r5 = 68;
      break;
     case 68:
      r719 = HEAP32[r130 >> 2];
      r720 = r700 + 8 | 0;
      r721 = HEAP32[r720 >> 2];
      r722 = HEAP32[r721 >> 2];
      r723 = r722 & 127;
      r724 = 5309552 + (r723 << 2) | 0;
      r136 = r724;
      r137 = r632;
      r138 = r700;
      r132 = r721;
      r139 = r702;
      r140 = r704;
      r141 = r719;
      r142 = r722;
      r5 = 376;
      break;
     case 69:
      r725 = r132 + 4 | 0;
      r726 = HEAP32[r725 >> 2];
      r727 = r726 & 127;
      r728 = 5309552 + (r727 << 2) | 0;
      r136 = r728;
      r137 = r137;
      r138 = r138;
      r132 = r725;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r726;
      r5 = 376;
      break;
     case 70:
      r729 = HEAP32[r130 >> 2];
      r730 = r729;
      r731 = r730 | 0;
      r732 = HEAP32[r731 >> 2];
      r733 = r730 + 4 | 0;
      r734 = HEAP32[r733 >> 2];
      r735 = r736 | 0;
      HEAP32[r735 >> 2] = r732;
      r737 = r736 + 4 | 0;
      HEAP32[r737 >> 2] = r734;
      r738 = r732;
      r739 = r738;
      r740 = r739;
      r741 = r739;
      r742 = HEAP32[r129 >> 2];
      r743 = r740 + 16 | 0;
      r744 = r743;
      r745 = HEAP32[r744 >> 2];
      r746 = r742 + 28 | 0;
      HEAP32[r746 >> 2] = r745;
      r747 = r742 + 4 | 0;
      HEAP32[r747 >> 2] = r741;
      r748 = r740 + 20 | 0;
      r749 = r748;
      r750 = HEAP32[r749 >> 2];
      r751 = (r750 | 0) == 0;
      if (r751) {
        r5 = 75;
        break;
      } else {
        r5 = 71;
        break;
      }
     case 71:
      r752 = r750 + 16 | 0;
      r753 = HEAP16[r752 >> 1];
      r754 = r753 << 16 >> 16 == 0;
      if (r754) {
        r755 = r750;
        r5 = 73;
        break;
      } else {
        r5 = 72;
        break;
      }
     case 72:
      r756 = r742 | 0;
      HEAP16[r756 >> 1] = r753;
      r757 = HEAP32[r749 >> 2];
      r755 = r757;
      r5 = 73;
      break;
     case 73:
      r758 = r755 + 12 | 0;
      r759 = HEAP32[r758 >> 2];
      r760 = (r759 | 0) == 0;
      if (r760) {
        r5 = 74;
        break;
      } else {
        r5 = 75;
        break;
      }
     case 74:
      r761 = HEAP32[r130 >> 2];
      HEAP32[r758 >> 2] = r761;
      r5 = 75;
      break;
     case 75:
      r762 = r739;
      r763 = HEAP32[r762 >> 2];
      r764 = r763 & 262144;
      r765 = (r764 | 0) == 0;
      r766 = r740 + 12 | 0;
      if (r765) {
        r5 = 78;
        break;
      } else {
        r5 = 76;
        break;
      }
     case 76:
      r767 = r766;
      r768 = HEAP32[r767 >> 2];
      FUNCTION_TABLE[r768](r25, r2, r24);
      r769 = r770 | 0;
      r771 = HEAP32[r769 >> 2];
      r772 = r770 + 4 | 0;
      r773 = HEAP32[r772 >> 2];
      r150 = r736 | 0;
      HEAP32[r150 >> 2] = r771;
      r152 = r736 + 4 | 0;
      HEAP32[r152 >> 2] = r773;
      _mrb_gc_arena_restore(r2, r83);
      r774 = HEAP32[r493 >> 2];
      r775 = (r774 | 0) == 0;
      if (r775) {
        r5 = 77;
        break;
      } else {
        r90 = r137;
        r91 = r138;
        r92 = r132;
        r93 = r141;
        r94 = r129;
        r95 = r493;
        r5 = 143;
        break;
      }
     case 77:
      r776 = HEAP32[r129 >> 2];
      r777 = HEAP32[r656 >> 2];
      r778 = r776 + 8 | 0;
      r779 = HEAP32[r778 >> 2];
      r780 = r777 + (r779 << 3) | 0;
      HEAP32[r130 >> 2] = r780;
      r781 = r776 + 24 | 0;
      r782 = HEAP32[r781 >> 2];
      r783 = r782 + r779 | 0;
      r784 = r777 + (r783 << 3) | 0;
      r785 = r784;
      r154 = r736 | 0;
      r786 = HEAP32[r154 >> 2];
      r155 = r736 + 4 | 0;
      r787 = HEAP32[r155 >> 2];
      r788 = r785 | 0;
      HEAP32[r788 >> 2] = r786;
      r789 = r785 + 4 | 0;
      HEAP32[r789 >> 2] = r787;
      r790 = r776 + 20 | 0;
      r791 = HEAP32[r790 >> 2];
      _cipop(r2);
      r792 = HEAP32[r129 >> 2];
      r793 = r792 + 4 | 0;
      r794 = HEAP32[r793 >> 2];
      r795 = r794 + 12 | 0;
      r796 = HEAP32[r795 >> 2];
      r797 = r796 + 12 | 0;
      r798 = HEAP32[r797 >> 2];
      r799 = r796 + 16 | 0;
      r800 = HEAP32[r799 >> 2];
      r801 = HEAP32[r791 >> 2];
      r802 = r801 & 127;
      r803 = 5309552 + (r802 << 2) | 0;
      r136 = r803;
      r137 = r137;
      r138 = r796;
      r132 = r791;
      r139 = r798;
      r140 = r800;
      r141 = r780;
      r142 = r801;
      r5 = 376;
      break;
     case 78:
      r804 = r766;
      r805 = HEAP32[r804 >> 2];
      r806 = (r805 | 0) == 0;
      if (r806) {
        r5 = 79;
        break;
      } else {
        r5 = 80;
        break;
      }
     case 79:
      r807 = HEAP32[r130 >> 2];
      _mrb_nil_value134(r26);
      r808 = r26;
      r809 = r807;
      r208 = r808 | 0;
      r810 = HEAP32[r208 >> 2];
      r210 = r808 + 4 | 0;
      r811 = HEAP32[r210 >> 2];
      r212 = r809 | 0;
      HEAP32[r212 >> 2] = r810;
      r213 = r809 + 4 | 0;
      HEAP32[r213 >> 2] = r811;
      r812 = r741;
      r813 = 0;
      r5 = 142;
      break;
     case 80:
      r814 = r805 + 12 | 0;
      r815 = HEAP32[r814 >> 2];
      r816 = r805 + 16 | 0;
      r817 = HEAP32[r816 >> 2];
      r818 = r805 + 4 | 0;
      r819 = r818;
      r820 = HEAP32[r819 >> 2];
      r821 = r820 << 16;
      r822 = r821 >> 16;
      r823 = r742 + 12 | 0;
      HEAP32[r823 >> 2] = r822;
      r824 = r742 + 16 | 0;
      r825 = HEAP32[r824 >> 2];
      r826 = (r825 | 0) < 0;
      r827 = HEAP32[r819 >> 2];
      r828 = r827 << 16;
      r829 = r828 >> 16;
      if (r826) {
        r5 = 81;
        break;
      } else {
        r5 = 82;
        break;
      }
     case 81:
      r830 = (r828 | 0) < 196608;
      r831 = r830 ? 3 : r829;
      _stack_extend(r2, r831, 3);
      r5 = 83;
      break;
     case 82:
      r832 = r825 + 2 | 0;
      _stack_extend(r2, r829, r832);
      r5 = 83;
      break;
     case 83:
      r833 = HEAP32[r130 >> 2];
      r834 = HEAP32[r749 >> 2];
      r835 = r834 + 12 | 0;
      r836 = HEAP32[r835 >> 2];
      r837 = r836;
      r838 = r833;
      r735 = r837 | 0;
      r839 = HEAP32[r735 >> 2];
      r737 = r837 + 4 | 0;
      r840 = HEAP32[r737 >> 2];
      r603 = r838 | 0;
      HEAP32[r603 >> 2] = r839;
      r605 = r838 + 4 | 0;
      HEAP32[r605 >> 2] = r840;
      r841 = HEAP32[r804 >> 2];
      r842 = r841 + 8 | 0;
      r843 = HEAP32[r842 >> 2];
      r844 = HEAP32[r843 >> 2];
      r845 = r844 & 127;
      r846 = 5309552 + (r845 << 2) | 0;
      r136 = r846;
      r137 = r741;
      r138 = r805;
      r132 = r843;
      r139 = r815;
      r140 = r817;
      r141 = r833;
      r142 = r844;
      r5 = 376;
      break;
     case 84:
      r847 = HEAP32[r129 >> 2];
      r848 = r847 | 0;
      r849 = HEAP16[r848 >> 1];
      r850 = r142 >>> 23;
      r851 = r142 >>> 7;
      r852 = r851 & 127;
      r853 = r141;
      r150 = r853 | 0;
      r854 = HEAP32[r150 >> 2];
      r152 = r853 + 4 | 0;
      r855 = HEAP32[r152 >> 2];
      r154 = r856 | 0;
      HEAP32[r154 >> 2] = r854;
      r155 = r856 + 4 | 0;
      HEAP32[r155 >> 2] = r855;
      r857 = r847 + 28 | 0;
      r858 = HEAP32[r857 >> 2];
      r859 = r858 + 20 | 0;
      r860 = HEAP32[r859 >> 2];
      HEAP32[r28 >> 2] = r860;
      r861 = _mrb_method_search_vm(r28, r849);
      r862 = (r861 | 0) == 0;
      if (r862) {
        r5 = 85;
        break;
      } else {
        r863 = r861;
        r864 = r849;
        r865 = r852;
        r5 = 88;
        break;
      }
     case 85:
      r866 = _mrb_intern(r2, 5317196);
      r867 = _mrb_method_search_vm(r28, r866);
      r868 = (r852 | 0) == 127;
      if (r868) {
        r5 = 86;
        break;
      } else {
        r5 = 87;
        break;
      }
     case 86:
      r869 = r850 + 1 | 0;
      r870 = r141 + (r869 << 3) | 0;
      r871 = HEAP16[r848 >> 1];
      _mrb_symbol_value135(r29, r871);
      _mrb_ary_unshift(r30, r2, r870, r29);
      r863 = r867;
      r864 = r866;
      r865 = 127;
      r5 = 88;
      break;
     case 87:
      r872 = r850 + 2 | 0;
      r873 = r141 + (r872 << 3) | 0;
      r874 = r873;
      r875 = r850 + 1 | 0;
      r876 = r141 + (r875 << 3) | 0;
      r877 = r876;
      r878 = r852 + 1 | 0;
      r879 = r878 << 3;
      _memmove(r874, r877, r879, 4, 0);
      r880 = r141 + (r875 << 3) + 4 | 0;
      r881 = r880;
      r882 = HEAP32[r881 >> 2];
      r883 = r882 & -256;
      r884 = r883 | 4;
      HEAP32[r881 >> 2] = r884;
      r885 = HEAP16[r848 >> 1];
      r886 = r141 + (r875 << 3) | 0;
      r887 = r886;
      HEAP16[r887 >> 1] = r885;
      r863 = r867;
      r864 = r866;
      r865 = r878;
      r5 = 88;
      break;
     case 88:
      r888 = _cipush(r2);
      r889 = r888 | 0;
      HEAP16[r889 >> 1] = r864;
      r890 = r888 + 4 | 0;
      HEAP32[r890 >> 2] = r863;
      r891 = HEAP32[r130 >> 2];
      r892 = HEAP32[r656 >> 2];
      r893 = r891;
      r894 = r892;
      r895 = r893 - r894 | 0;
      r896 = r895 >> 3;
      r897 = r888 + 8 | 0;
      HEAP32[r897 >> 2] = r896;
      r898 = r888 + 16 | 0;
      r899 = (r865 | 0) == 127;
      r900 = r899 ? -1 : r865;
      HEAP32[r898 >> 2] = r900;
      r901 = r863 + 16 | 0;
      r902 = HEAP32[r901 >> 2];
      r903 = r888 + 28 | 0;
      HEAP32[r903 >> 2] = r902;
      r904 = r132 + 4 | 0;
      r905 = r888 + 20 | 0;
      HEAP32[r905 >> 2] = r904;
      r906 = HEAP32[r130 >> 2];
      r907 = r906 + (r850 << 3) | 0;
      HEAP32[r130 >> 2] = r907;
      r908 = r907;
      r909 = r856 | 0;
      r910 = HEAP32[r909 >> 2];
      r911 = r856 + 4 | 0;
      r912 = HEAP32[r911 >> 2];
      r913 = r908 | 0;
      HEAP32[r913 >> 2] = r910;
      r914 = r908 + 4 | 0;
      HEAP32[r914 >> 2] = r912;
      r915 = r863;
      r916 = HEAP32[r915 >> 2];
      r917 = r916 & 262144;
      r918 = (r917 | 0) == 0;
      if (r918) {
        r5 = 91;
        break;
      } else {
        r5 = 89;
        break;
      }
     case 89:
      r919 = HEAP32[r130 >> 2];
      r920 = r863 + 12 | 0;
      r921 = r920;
      r922 = HEAP32[r921 >> 2];
      FUNCTION_TABLE[r922](r31, r2, r27);
      r923 = r919;
      r735 = r924 | 0;
      r925 = HEAP32[r735 >> 2];
      r737 = r924 + 4 | 0;
      r926 = HEAP32[r737 >> 2];
      r603 = r923 | 0;
      HEAP32[r603 >> 2] = r925;
      r605 = r923 + 4 | 0;
      HEAP32[r605 >> 2] = r926;
      _mrb_gc_arena_restore(r2, r83);
      r927 = HEAP32[r493 >> 2];
      r928 = (r927 | 0) == 0;
      if (r928) {
        r5 = 90;
        break;
      } else {
        r90 = r137;
        r91 = r138;
        r92 = r132;
        r93 = r141;
        r94 = r129;
        r95 = r493;
        r5 = 143;
        break;
      }
     case 90:
      r929 = HEAP32[r656 >> 2];
      r930 = HEAP32[r129 >> 2];
      r931 = r930 + 8 | 0;
      r932 = HEAP32[r931 >> 2];
      r933 = r929 + (r932 << 3) | 0;
      HEAP32[r130 >> 2] = r933;
      _cipop(r2);
      r934 = HEAP32[r904 >> 2];
      r935 = r934 & 127;
      r936 = 5309552 + (r935 << 2) | 0;
      r136 = r936;
      r137 = r137;
      r138 = r138;
      r132 = r904;
      r139 = r139;
      r140 = r140;
      r141 = r933;
      r142 = r934;
      r5 = 376;
      break;
     case 91:
      r937 = r888 + 24 | 0;
      HEAP32[r937 >> 2] = r850;
      HEAP32[r890 >> 2] = r863;
      r938 = r863 + 12 | 0;
      r939 = HEAP32[r938 >> 2];
      r940 = r939 + 12 | 0;
      r941 = HEAP32[r940 >> 2];
      r942 = r939 + 16 | 0;
      r943 = HEAP32[r942 >> 2];
      r944 = r939 + 4 | 0;
      r945 = r944;
      r946 = HEAP32[r945 >> 2];
      r947 = r946 << 16;
      r948 = r947 >> 16;
      r949 = r888 + 12 | 0;
      HEAP32[r949 >> 2] = r948;
      r950 = HEAP32[r898 >> 2];
      r951 = (r950 | 0) < 0;
      r952 = HEAP32[r945 >> 2];
      r953 = r952 << 16;
      r954 = r953 >> 16;
      if (r951) {
        r5 = 92;
        break;
      } else {
        r5 = 93;
        break;
      }
     case 92:
      r955 = (r953 | 0) < 196608;
      r956 = r955 ? 3 : r954;
      _stack_extend(r2, r956, 3);
      r5 = 94;
      break;
     case 93:
      r957 = r950 + 2 | 0;
      _stack_extend(r2, r954, r957);
      r5 = 94;
      break;
     case 94:
      r958 = HEAP32[r130 >> 2];
      r959 = r939 + 8 | 0;
      r960 = HEAP32[r959 >> 2];
      r961 = HEAP32[r960 >> 2];
      r962 = r961 & 127;
      r963 = 5309552 + (r962 << 2) | 0;
      r136 = r963;
      r137 = r137;
      r138 = r939;
      r132 = r960;
      r139 = r941;
      r140 = r943;
      r141 = r958;
      r142 = r961;
      r5 = 376;
      break;
     case 95:
      r964 = r142 >>> 23;
      r965 = r142 >>> 7;
      r966 = r142 >>> 17;
      r967 = r966 & 63;
      r968 = r142 >>> 16;
      r969 = r968 & 1;
      r970 = r142 >>> 11;
      r971 = r970 & 31;
      r972 = r965 & 15;
      r973 = (r972 | 0) == 0;
      if (r973) {
        r974 = r141;
        r5 = 99;
        break;
      } else {
        r5 = 96;
        break;
      }
     case 96:
      r975 = r972 - 1 | 0;
      r976 = HEAP32[r394 >> 2];
      r977 = r976 + 4 | 0;
      r978 = HEAP32[r977 >> 2];
      r979 = r978 + 20 | 0;
      r980 = HEAP32[r979 >> 2];
      r981 = _uvenv(r980, r975);
      r982 = (r981 | 0) == 0;
      if (r982) {
        r5 = 97;
        break;
      } else {
        r5 = 98;
        break;
      }
     case 97:
      r983 = _mrb_class_obj_get(r2, 5314352);
      _mrb_exc_new(r32, r2, r983, 5309884, 30);
      r984 = r32;
      r985 = HEAP32[r984 >> 2];
      r986 = r985;
      HEAP32[r493 >> 2] = r986;
      r90 = r137;
      r91 = r138;
      r92 = r132;
      r93 = r141;
      r94 = r129;
      r95 = r493;
      r5 = 143;
      break;
     case 98:
      r987 = r981 + 12 | 0;
      r988 = HEAP32[r987 >> 2];
      r974 = r988;
      r5 = 99;
      break;
     case 99:
      r989 = r974 + 8 | 0;
      r990 = (r969 | 0) == 0;
      if (r990) {
        r5 = 100;
        break;
      } else {
        r5 = 101;
        break;
      }
     case 100:
      r991 = r141 + (r964 << 3) | 0;
      r992 = r967 + r971 | 0;
      _mrb_ary_new_elts(r33, r2, r992, r989);
      r993 = r991;
      r208 = r994 | 0;
      r995 = HEAP32[r208 >> 2];
      r210 = r994 + 4 | 0;
      r996 = HEAP32[r210 >> 2];
      r212 = r993 | 0;
      HEAP32[r212 >> 2] = r995;
      r213 = r993 + 4 | 0;
      HEAP32[r213 >> 2] = r996;
      r5 = 108;
      break;
     case 101:
      r997 = r967 + 1 | 0;
      r998 = r974 + (r997 << 3) + 4 | 0;
      r999 = r998;
      r1000 = HEAP32[r999 >> 2];
      r1001 = r1000 & 255;
      r1002 = (r1001 | 0) == 15;
      if (r1002) {
        r5 = 102;
        break;
      } else {
        r1003 = 0;
        r1004 = 0;
        r5 = 103;
        break;
      }
     case 102:
      r1005 = r974 + (r997 << 3) | 0;
      r1006 = r1005;
      r1007 = HEAP32[r1006 >> 2];
      r1008 = r1007 + 20 | 0;
      r1009 = r1008;
      r1010 = HEAP32[r1009 >> 2];
      r1011 = r1007 + 12 | 0;
      r1012 = r1011;
      r1013 = HEAP32[r1012 >> 2];
      r1003 = r1010;
      r1004 = r1013;
      r5 = 103;
      break;
     case 103:
      r1014 = r141 + (r964 << 3) | 0;
      r1015 = r971 + r967 | 0;
      r1016 = r1015 + r1004 | 0;
      _mrb_ary_new_capa(r34, r2, r1016);
      r1017 = r1014;
      r150 = r1018 | 0;
      r1019 = HEAP32[r150 >> 2];
      r152 = r1018 + 4 | 0;
      r1020 = HEAP32[r152 >> 2];
      r154 = r1017 | 0;
      HEAP32[r154 >> 2] = r1019;
      r155 = r1017 + 4 | 0;
      HEAP32[r155 >> 2] = r1020;
      r1021 = r1019;
      r1022 = r1021;
      r1023 = r1022;
      r1024 = r1023 + 20 | 0;
      r1025 = r1024;
      r1026 = HEAP32[r1025 >> 2];
      _stack_copy(r1026, r989, r967);
      r1027 = (r1004 | 0) > 0;
      if (r1027) {
        r5 = 104;
        break;
      } else {
        r5 = 105;
        break;
      }
     case 104:
      r1028 = HEAP32[r1025 >> 2];
      r1029 = r1028 + (r967 << 3) | 0;
      _stack_copy(r1029, r1003, r1004);
      r5 = 105;
      break;
     case 105:
      r1030 = (r971 | 0) == 0;
      if (r1030) {
        r5 = 107;
        break;
      } else {
        r5 = 106;
        break;
      }
     case 106:
      r1031 = HEAP32[r1025 >> 2];
      r1032 = r1004 + r967 | 0;
      r1033 = r1031 + (r1032 << 3) | 0;
      r1034 = r967 + 2 | 0;
      r1035 = r974 + (r1034 << 3) | 0;
      _stack_copy(r1033, r1035, r971);
      r5 = 107;
      break;
     case 107:
      r1036 = r1023 + 12 | 0;
      r1037 = r1036;
      HEAP32[r1037 >> 2] = r1016;
      r5 = 108;
      break;
     case 108:
      r1038 = r964 + 1 | 0;
      r1039 = r141 + (r1038 << 3) | 0;
      r1040 = r969 + 1 | 0;
      r1041 = r1040 + r967 | 0;
      r1042 = r1041 + r971 | 0;
      r1043 = r974 + (r1042 << 3) | 0;
      r1044 = r1043;
      r1045 = r1039;
      r212 = r1044 | 0;
      r1046 = HEAP32[r212 >> 2];
      r213 = r1044 + 4 | 0;
      r1047 = HEAP32[r213 >> 2];
      r321 = r1045 | 0;
      HEAP32[r321 >> 2] = r1046;
      r322 = r1045 + 4 | 0;
      HEAP32[r322 >> 2] = r1047;
      _mrb_gc_arena_restore(r2, r83);
      r1048 = r132 + 4 | 0;
      r1049 = HEAP32[r1048 >> 2];
      r1050 = r1049 & 127;
      r1051 = 5309552 + (r1050 << 2) | 0;
      r136 = r1051;
      r137 = r137;
      r138 = r138;
      r132 = r1048;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r1049;
      r5 = 376;
      break;
     case 109:
      r1052 = r142 >>> 14;
      r1053 = r142 >>> 25;
      r1054 = r1053 & 31;
      r1055 = r142 >>> 20;
      r1056 = r1055 & 31;
      r1057 = r142 >>> 19;
      r1058 = r1057 & 1;
      r1059 = r1052 & 31;
      r1060 = HEAP32[r129 >> 2];
      r1061 = r1060 + 16 | 0;
      r1062 = HEAP32[r1061 >> 2];
      r1063 = r141 + 8 | 0;
      r1064 = r1054 + r1056 | 0;
      r1065 = r1064 + r1058 | 0;
      r1066 = r1065 + r1059 | 0;
      r1067 = (r1062 | 0) < 0;
      r1068 = r1062 + 1 | 0;
      r1069 = r1067 ? 2 : r1068;
      r1070 = r141 + (r1069 << 3) | 0;
      if (r1067) {
        r5 = 110;
        break;
      } else {
        r1071 = r1062;
        r1072 = r1063;
        r1073 = r1060;
        r5 = 111;
        break;
      }
     case 110:
      r1074 = r1063;
      r1075 = HEAP32[r1074 >> 2];
      r1076 = r1075 + 20 | 0;
      r1077 = r1076;
      r1078 = HEAP32[r1077 >> 2];
      r1079 = r1075 + 12 | 0;
      r1080 = r1079;
      r1081 = HEAP32[r1080 >> 2];
      _mrb_gc_protect(r2, r1063);
      r1082 = HEAP32[r129 >> 2];
      r1071 = r1081;
      r1072 = r1078;
      r1073 = r1082;
      r5 = 111;
      break;
     case 111:
      r1083 = r1073 + 4 | 0;
      r1084 = HEAP32[r1083 >> 2];
      r1085 = (r1084 | 0) == 0;
      if (r1085) {
        r5 = 117;
        break;
      } else {
        r5 = 112;
        break;
      }
     case 112:
      r1086 = r1084;
      r1087 = HEAP32[r1086 >> 2];
      r1088 = r1087 & 524288;
      r1089 = (r1088 | 0) == 0;
      if (r1089) {
        r5 = 117;
        break;
      } else {
        r5 = 113;
        break;
      }
     case 113:
      r1090 = (r1071 | 0) > -1;
      if (r1090) {
        r5 = 114;
        break;
      } else {
        r1091 = r1071;
        r1092 = r1072;
        r5 = 120;
        break;
      }
     case 114:
      r1093 = r1054 + r1059 | 0;
      r1094 = (r1071 | 0) < (r1093 | 0);
      if (r1094) {
        r5 = 116;
        break;
      } else {
        r5 = 115;
        break;
      }
     case 115:
      r1095 = (r1058 | 0) == 0;
      r1096 = (r1071 | 0) > (r1066 | 0);
      r1097 = r1095 & r1096;
      if (r1097) {
        r5 = 116;
        break;
      } else {
        r1091 = r1071;
        r1092 = r1072;
        r5 = 120;
        break;
      }
     case 116:
      _argnum_error(r2, r1093);
      r90 = r137;
      r91 = r138;
      r92 = r132;
      r93 = r141;
      r94 = r129;
      r95 = r493;
      r5 = 143;
      break;
     case 117:
      r1098 = (r1066 | 0) > 1;
      r1099 = (r1071 | 0) == 1;
      r1100 = r1098 & r1099;
      if (r1100) {
        r5 = 118;
        break;
      } else {
        r1091 = r1071;
        r1092 = r1072;
        r5 = 120;
        break;
      }
     case 118:
      r1101 = r1072 + 4 | 0;
      r1102 = r1101;
      r1103 = HEAP32[r1102 >> 2];
      r1104 = r1103 & 255;
      r1105 = (r1104 | 0) == 15;
      if (r1105) {
        r5 = 119;
        break;
      } else {
        r1091 = 1;
        r1092 = r1072;
        r5 = 120;
        break;
      }
     case 119:
      r1106 = r1072;
      r1107 = HEAP32[r1106 >> 2];
      r1108 = r1107 + 12 | 0;
      r1109 = r1108;
      r1110 = HEAP32[r1109 >> 2];
      r1111 = r1107 + 20 | 0;
      r1112 = r1111;
      r1113 = HEAP32[r1112 >> 2];
      r1091 = r1110;
      r1092 = r1113;
      r5 = 120;
      break;
     case 120:
      r1114 = r1073 + 16 | 0;
      HEAP32[r1114 >> 2] = r1066;
      r1115 = (r1091 | 0) < (r1066 | 0);
      if (r1115) {
        r5 = 121;
        break;
      } else {
        r5 = 130;
        break;
      }
     case 121:
      r1116 = r1066 + 1 | 0;
      r1117 = r141 + (r1116 << 3) | 0;
      r1118 = r1070;
      r1119 = r1117;
      r208 = r1118 | 0;
      r1120 = HEAP32[r208 >> 2];
      r210 = r1118 + 4 | 0;
      r1121 = HEAP32[r210 >> 2];
      r212 = r1119 | 0;
      HEAP32[r212 >> 2] = r1120;
      r213 = r1119 + 4 | 0;
      HEAP32[r213 >> 2] = r1121;
      r1122 = (r1063 | 0) == (r1092 | 0);
      if (r1122) {
        r5 = 123;
        break;
      } else {
        r5 = 122;
        break;
      }
     case 122:
      r1123 = r1063;
      r1124 = r1092;
      r1125 = r1091 - r1059 | 0;
      r1126 = r1125 << 3;
      _memmove(r1123, r1124, r1126, 4, 0);
      r5 = 123;
      break;
     case 123:
      r1127 = (r1059 | 0) == 0;
      if (r1127) {
        r5 = 125;
        break;
      } else {
        r5 = 124;
        break;
      }
     case 124:
      r1128 = r1065 + 1 | 0;
      r1129 = r141 + (r1128 << 3) | 0;
      r1130 = r1129;
      r1131 = r1091 - r1059 | 0;
      r1132 = r1092 + (r1131 << 3) | 0;
      r1133 = r1132;
      r1134 = r1059 << 3;
      _memmove(r1130, r1133, r1134, 4, 0);
      r5 = 125;
      break;
     case 125:
      r1135 = (r1058 | 0) == 0;
      if (r1135) {
        r5 = 127;
        break;
      } else {
        r5 = 126;
        break;
      }
     case 126:
      r1136 = r1064 + 1 | 0;
      r1137 = r141 + (r1136 << 3) | 0;
      _mrb_ary_new_capa(r35, r2, 0);
      r1138 = r1137;
      r208 = r1139 | 0;
      r1140 = HEAP32[r208 >> 2];
      r210 = r1139 + 4 | 0;
      r1141 = HEAP32[r210 >> 2];
      r212 = r1138 | 0;
      HEAP32[r212 >> 2] = r1140;
      r213 = r1138 + 4 | 0;
      HEAP32[r213 >> 2] = r1141;
      r5 = 127;
      break;
     case 127:
      r1142 = (r1056 | 0) == 0;
      if (r1142) {
        r5 = 128;
        break;
      } else {
        r5 = 129;
        break;
      }
     case 128:
      r1143 = r132 + 4 | 0;
      r1144 = r1143;
      r5 = 139;
      break;
     case 129:
      r1145 = 1 - r1054 | 0;
      r1146 = r1145 - r1059 | 0;
      r1147 = r1146 + r1091 | 0;
      r1148 = r132 + (r1147 << 2) | 0;
      r1144 = r1148;
      r5 = 139;
      break;
     case 130:
      r1149 = (r1063 | 0) == (r1092 | 0);
      if (r1149) {
        r5 = 132;
        break;
      } else {
        r5 = 131;
        break;
      }
     case 131:
      r1150 = r1066 + 1 | 0;
      r1151 = r141 + (r1150 << 3) | 0;
      r1152 = r1070;
      r1153 = r1151;
      r208 = r1152 | 0;
      r1154 = HEAP32[r208 >> 2];
      r210 = r1152 + 4 | 0;
      r1155 = HEAP32[r210 >> 2];
      r212 = r1153 | 0;
      HEAP32[r212 >> 2] = r1154;
      r213 = r1153 + 4 | 0;
      HEAP32[r213 >> 2] = r1155;
      r1156 = r1063;
      r1157 = r1092;
      r1158 = r1064 << 3;
      _memmove(r1156, r1157, r1158, 4, 0);
      r5 = 132;
      break;
     case 132:
      r1159 = (r1058 | 0) == 0;
      if (r1159) {
        r5 = 134;
        break;
      } else {
        r5 = 133;
        break;
      }
     case 133:
      r1160 = r1064 + 1 | 0;
      r1161 = r141 + (r1160 << 3) | 0;
      r1162 = r1064 + r1059 | 0;
      r1163 = r1091 - r1162 | 0;
      r1164 = r1092 + (r1064 << 3) | 0;
      _mrb_ary_new_elts(r36, r2, r1163, r1164);
      r1165 = r1161;
      r150 = r1166 | 0;
      r1167 = HEAP32[r150 >> 2];
      r152 = r1166 + 4 | 0;
      r1168 = HEAP32[r152 >> 2];
      r154 = r1165 | 0;
      HEAP32[r154 >> 2] = r1167;
      r155 = r1165 + 4 | 0;
      HEAP32[r155 >> 2] = r1168;
      r5 = 134;
      break;
     case 134:
      r1169 = (r1059 | 0) == 0;
      if (r1169) {
        r5 = 136;
        break;
      } else {
        r5 = 135;
        break;
      }
     case 135:
      r1170 = r1065 + 1 | 0;
      r1171 = r141 + (r1170 << 3) | 0;
      r1172 = r1171;
      r1173 = r1091 - r1059 | 0;
      r1174 = r1092 + (r1173 << 3) | 0;
      r1175 = r1174;
      r1176 = r1059 << 3;
      _memmove(r1172, r1175, r1176, 4, 0);
      r5 = 136;
      break;
     case 136:
      if (r1149) {
        r5 = 137;
        break;
      } else {
        r5 = 138;
        break;
      }
     case 137:
      r1177 = r1066 + 1 | 0;
      r1178 = r141 + (r1177 << 3) | 0;
      r1179 = r1070;
      r1180 = r1178;
      r208 = r1179 | 0;
      r1181 = HEAP32[r208 >> 2];
      r210 = r1179 + 4 | 0;
      r1182 = HEAP32[r210 >> 2];
      r212 = r1180 | 0;
      HEAP32[r212 >> 2] = r1181;
      r213 = r1180 + 4 | 0;
      HEAP32[r213 >> 2] = r1182;
      r5 = 138;
      break;
     case 138:
      r1183 = r1056 + 1 | 0;
      r1184 = r132 + (r1183 << 2) | 0;
      r1144 = r1184;
      r5 = 139;
      break;
     case 139:
      r1185 = HEAP32[r1144 >> 2];
      r1186 = r1185 & 127;
      r1187 = 5309552 + (r1186 << 2) | 0;
      r136 = r1187;
      r137 = r137;
      r138 = r138;
      r132 = r1144;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r1185;
      r5 = 376;
      break;
     case 140:
      r1188 = r132 + 4 | 0;
      r1189 = HEAP32[r1188 >> 2];
      r1190 = r1189 & 127;
      r1191 = 5309552 + (r1190 << 2) | 0;
      r136 = r1191;
      r137 = r137;
      r138 = r138;
      r132 = r1188;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r1189;
      r5 = 376;
      break;
     case 141:
      r1192 = r132 + 4 | 0;
      r1193 = HEAP32[r1192 >> 2];
      r1194 = r1193 & 127;
      r1195 = 5309552 + (r1194 << 2) | 0;
      r136 = r1195;
      r137 = r137;
      r138 = r138;
      r132 = r1192;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r1193;
      r5 = 376;
      break;
     case 142:
      r1196 = HEAP32[r493 >> 2];
      r1197 = (r1196 | 0) == 0;
      if (r1197) {
        r5 = 159;
        break;
      } else {
        r90 = r812;
        r91 = r813;
        r92 = r132;
        r93 = r141;
        r94 = r129;
        r95 = r493;
        r5 = 143;
        break;
      }
     case 143:
      r1198 = HEAP32[r94 >> 2];
      r1199 = HEAP32[r95 >> 2];
      r1200 = _mrb_intern(r2, 5324224);
      r1201 = r92;
      _mrb_voidp_value(r37, r1201);
      _mrb_obj_iv_ifnone(r2, r1199, r1200, r37);
      r1202 = HEAP32[r95 >> 2];
      r1203 = _mrb_intern(r2, 5319840);
      r1204 = r2 + 24 | 0;
      r1205 = HEAP32[r1204 >> 2];
      r1206 = r1198;
      r1207 = r1205;
      r1208 = r1206 - r1207 | 0;
      r1209 = (r1208 | 0) / 44 & -1;
      _mrb_fixnum_value138(r38, r1209);
      _mrb_obj_iv_ifnone(r2, r1202, r1203, r38);
      r1210 = r1198 + 36 | 0;
      r1211 = HEAP32[r1210 >> 2];
      r1212 = HEAP32[r1204 >> 2];
      r1213 = (r1198 | 0) == (r1212 | 0);
      if (r1213) {
        r5 = 149;
        break;
      } else {
        r5 = 144;
        break;
      }
     case 144:
      r1214 = (r85 | 0) == 0;
      if (r1214) {
        r1215 = r1198;
        r1216 = r1211;
        r5 = 145;
        break;
      } else {
        r1217 = r1198;
        r1218 = r1211;
        r5 = 150;
        break;
      }
     case 145:
      r1219 = r1215 + 32 | 0;
      r1220 = HEAP32[r1219 >> 2];
      r1221 = r1215 - 44 + 32 | 0;
      r1222 = HEAP32[r1221 >> 2];
      r1223 = (r1220 | 0) == (r1222 | 0);
      if (r1223) {
        r5 = 148;
        break;
      } else {
        r1224 = r1215;
        r5 = 158;
        break;
      }
     case 146:
      r1225 = HEAP32[r1204 >> 2];
      r1226 = (r1227 | 0) == (r1225 | 0);
      if (r1226) {
        r1228 = r1227;
        r5 = 156;
        break;
      } else {
        r1215 = r1227;
        r1216 = r1229;
        r5 = 145;
        break;
      }
     case 147:
      r1230 = r1231 - 1 | 0;
      _ecall(r2, r1230);
      r1232 = HEAP32[r94 >> 2];
      r1233 = r1232 + 36 | 0;
      r1234 = HEAP32[r1233 >> 2];
      r1235 = (r1230 | 0) > (r1234 | 0);
      if (r1235) {
        r1231 = r1230;
        r5 = 147;
        break;
      } else {
        r1229 = r1230;
        r5 = 146;
        break;
      }
     case 148:
      _cipop(r2);
      r1227 = HEAP32[r94 >> 2];
      r1236 = r1227 + 36 | 0;
      r1237 = HEAP32[r1236 >> 2];
      r1238 = (r1216 | 0) > (r1237 | 0);
      if (r1238) {
        r1231 = r1216;
        r5 = 147;
        break;
      } else {
        r1229 = r1216;
        r5 = 146;
        break;
      }
     case 149:
      r1239 = r1198 + 32 | 0;
      r1240 = HEAP32[r1239 >> 2];
      r1241 = (r1240 | 0) == 0;
      if (r1241) {
        r1242 = r91;
        r1243 = r93;
        r5 = 366;
        break;
      } else {
        r1224 = r1198;
        r5 = 158;
        break;
      }
     case 150:
      r1244 = r1217 + 32 | 0;
      r1245 = HEAP32[r1244 >> 2];
      r1246 = r1217 - 44 + 32 | 0;
      r1247 = HEAP32[r1246 >> 2];
      r1248 = (r1245 | 0) == (r1247 | 0);
      if (r1248) {
        r5 = 151;
        break;
      } else {
        r1224 = r1217;
        r5 = 158;
        break;
      }
     case 151:
      _cipop(r2);
      r1249 = HEAP32[r94 >> 2];
      r1250 = r1249 + 68 | 0;
      r1251 = HEAP32[r1250 >> 2];
      r1252 = (r1251 | 0) > -1;
      if (r1252) {
        r5 = 152;
        break;
      } else {
        r5 = 153;
        break;
      }
     case 152:
      r1253 = r1249 + 36 | 0;
      r1254 = HEAP32[r1253 >> 2];
      r1255 = (r1218 | 0) > (r1254 | 0);
      if (r1255) {
        r1256 = r1218;
        r5 = 154;
        break;
      } else {
        r1257 = r1218;
        r5 = 155;
        break;
      }
     case 153:
      HEAP32[r84 >> 2] = r85;
      r1258 = r85;
      _longjmp(r1258, 1);
     case 154:
      r1259 = r1256 - 1 | 0;
      _ecall(r2, r1259);
      r1260 = HEAP32[r94 >> 2];
      r1261 = r1260 + 36 | 0;
      r1262 = HEAP32[r1261 >> 2];
      r1263 = (r1259 | 0) > (r1262 | 0);
      if (r1263) {
        r1256 = r1259;
        r5 = 154;
        break;
      } else {
        r1257 = r1259;
        r5 = 155;
        break;
      }
     case 155:
      r1264 = HEAP32[r1204 >> 2];
      r1265 = (r1249 | 0) == (r1264 | 0);
      if (r1265) {
        r1228 = r1249;
        r5 = 156;
        break;
      } else {
        r1217 = r1249;
        r1218 = r1257;
        r5 = 150;
        break;
      }
     case 156:
      r1266 = r1228 + 32 | 0;
      r1267 = HEAP32[r1266 >> 2];
      r1268 = (r1267 | 0) == 0;
      if (r1268) {
        r5 = 157;
        break;
      } else {
        r1224 = r1228;
        r5 = 158;
        break;
      }
     case 157:
      r1269 = r2 + 12 | 0;
      r1270 = HEAP32[r1269 >> 2];
      r1271 = r2 + 8 | 0;
      HEAP32[r1271 >> 2] = r1270;
      r1242 = r91;
      r1243 = r1270;
      r5 = 366;
      break;
     case 158:
      r1272 = r1224 + 4 | 0;
      r1273 = HEAP32[r1272 >> 2];
      r1274 = r1273 + 12 | 0;
      r1275 = HEAP32[r1274 >> 2];
      r1276 = r1275 + 12 | 0;
      r1277 = HEAP32[r1276 >> 2];
      r1278 = r1275 + 16 | 0;
      r1279 = HEAP32[r1278 >> 2];
      r1280 = r2 + 12 | 0;
      r1281 = HEAP32[r1280 >> 2];
      r1282 = r1224 + 52 | 0;
      r1283 = HEAP32[r1282 >> 2];
      r1284 = r1281 + (r1283 << 3) | 0;
      r1285 = r2 + 8 | 0;
      HEAP32[r1285 >> 2] = r1284;
      r1286 = r1224 + 32 | 0;
      r1287 = HEAP32[r1286 >> 2];
      r1288 = r1287 - 1 | 0;
      HEAP32[r1286 >> 2] = r1288;
      r1289 = r2 + 32 | 0;
      r1290 = HEAP32[r1289 >> 2];
      r1291 = r1290 + (r1288 << 2) | 0;
      r1292 = HEAP32[r1291 >> 2];
      r1293 = r2 + 20 | 0;
      r1294 = r90;
      r1295 = r1275;
      r1296 = r1292;
      r1297 = r1277;
      r1298 = r1279;
      r1299 = r1284;
      r1300 = r1293;
      r5 = 179;
      break;
     case 159:
      r1301 = HEAP32[r129 >> 2];
      r1302 = r1301 + 36 | 0;
      r1303 = HEAP32[r1302 >> 2];
      r1304 = r142 >>> 23;
      r1305 = r141 + (r1304 << 3) | 0;
      r1306 = r1305;
      r735 = r1306 | 0;
      r1307 = HEAP32[r735 >> 2];
      r737 = r1306 + 4 | 0;
      r1308 = HEAP32[r737 >> 2];
      r1309 = r142 >>> 14;
      r1310 = r1309 & 511;
      if ((r1310 | 0) == 2) {
        r5 = 160;
        break;
      } else if ((r1310 | 0) == 0) {
        r5 = 167;
        break;
      } else if ((r1310 | 0) == 1) {
        r5 = 169;
        break;
      } else {
        r1311 = r1301;
        r5 = 172;
        break;
      }
     case 160:
      r1312 = r812 + 20 | 0;
      r1313 = HEAP32[r1312 >> 2];
      r1314 = (r1313 | 0) == 0;
      if (r1314) {
        r5 = 167;
        break;
      } else {
        r5 = 161;
        break;
      }
     case 161:
      r1315 = r812;
      r1316 = HEAP32[r1315 >> 2];
      r1317 = r1316 & 524288;
      r1318 = (r1317 | 0) == 0;
      if (r1318) {
        r5 = 162;
        break;
      } else {
        r5 = 167;
        break;
      }
     case 162:
      r1319 = _top_env(r2, r1313);
      r1320 = r1319 + 20 | 0;
      r1321 = HEAP32[r1320 >> 2];
      r1322 = (r1321 | 0) < 0;
      if (r1322) {
        r5 = 163;
        break;
      } else {
        r5 = 164;
        break;
      }
     case 163:
      _localjump_error(r2, 5323500);
      r90 = r812;
      r91 = r813;
      r92 = r132;
      r93 = r141;
      r94 = r129;
      r95 = r493;
      r5 = 143;
      break;
     case 164:
      r1323 = r2 + 24 | 0;
      r1324 = HEAP32[r1323 >> 2];
      r1325 = r1324 + r1321 * 44 | 0;
      r1326 = (r1321 | 0) == 0;
      if (r1326) {
        r5 = 165;
        break;
      } else {
        r5 = 166;
        break;
      }
     case 165:
      _localjump_error(r2, 5323500);
      r90 = r812;
      r91 = r813;
      r92 = r132;
      r93 = r141;
      r94 = r129;
      r95 = r493;
      r5 = 143;
      break;
     case 166:
      HEAP32[r129 >> 2] = r1325;
      r1311 = r1325;
      r5 = 172;
      break;
     case 167:
      r1327 = r2 + 24 | 0;
      r1328 = HEAP32[r1327 >> 2];
      r1329 = (r1301 | 0) == (r1328 | 0);
      if (r1329) {
        r5 = 168;
        break;
      } else {
        r1311 = r1301;
        r5 = 172;
        break;
      }
     case 168:
      _localjump_error(r2, 5323500);
      r90 = r812;
      r91 = r813;
      r92 = r132;
      r93 = r141;
      r94 = r129;
      r95 = r493;
      r5 = 143;
      break;
     case 169:
      r1330 = r812 + 20 | 0;
      r1331 = HEAP32[r1330 >> 2];
      r1332 = r1331 + 20 | 0;
      r1333 = HEAP32[r1332 >> 2];
      r1334 = (r1333 | 0) < 0;
      if (r1334) {
        r5 = 170;
        break;
      } else {
        r5 = 171;
        break;
      }
     case 170:
      _localjump_error(r2, 5323896);
      r90 = r812;
      r91 = r813;
      r92 = r132;
      r93 = r141;
      r94 = r129;
      r95 = r493;
      r5 = 143;
      break;
     case 171:
      r1335 = r2 + 24 | 0;
      r1336 = HEAP32[r1335 >> 2];
      r1337 = r1333 + 1 | 0;
      r1338 = r1336 + r1337 * 44 | 0;
      HEAP32[r129 >> 2] = r1338;
      r1311 = r1338;
      r5 = 172;
      break;
     case 172:
      _cipop(r2);
      r1339 = r1311 + 24 | 0;
      r1340 = HEAP32[r1339 >> 2];
      r1341 = r1311 + 20 | 0;
      r1342 = HEAP32[r1341 >> 2];
      r1343 = HEAP32[r656 >> 2];
      r1344 = r1311 + 8 | 0;
      r1345 = HEAP32[r1344 >> 2];
      r1346 = r1343 + (r1345 << 3) | 0;
      HEAP32[r130 >> 2] = r1346;
      r1347 = HEAP32[r129 >> 2];
      r1348 = r1347 + 36 | 0;
      r1349 = HEAP32[r1348 >> 2];
      r1350 = (r1303 | 0) > (r1349 | 0);
      if (r1350) {
        r1351 = r1303;
        r5 = 174;
        break;
      } else {
        r1352 = r1347;
        r1353 = r1349;
        r5 = 173;
        break;
      }
     case 173:
      r1354 = (r1303 | 0) > (r1353 | 0);
      if (r1354) {
        r1355 = r1303;
        r5 = 175;
        break;
      } else {
        r1356 = r1352;
        r5 = 176;
        break;
      }
     case 174:
      r1357 = r1351 - 1 | 0;
      r1358 = HEAP32[r553 >> 2];
      r1359 = r1358 + (r1357 << 2) | 0;
      r1360 = HEAP32[r1359 >> 2];
      r1361 = r1360 | 0;
      _mrb_obj_value139(r39, r1361);
      _mrb_gc_protect(r2, r39);
      r1362 = HEAP32[r129 >> 2];
      r1363 = r1362 + 36 | 0;
      r1364 = HEAP32[r1363 >> 2];
      r1365 = (r1357 | 0) > (r1364 | 0);
      if (r1365) {
        r1351 = r1357;
        r5 = 174;
        break;
      } else {
        r1352 = r1362;
        r1353 = r1364;
        r5 = 173;
        break;
      }
     case 175:
      r1366 = r1355 - 1 | 0;
      _ecall(r2, r1366);
      r1367 = HEAP32[r129 >> 2];
      r1368 = r1367 + 36 | 0;
      r1369 = HEAP32[r1368 >> 2];
      r1370 = (r1366 | 0) > (r1369 | 0);
      if (r1370) {
        r1355 = r1366;
        r5 = 175;
        break;
      } else {
        r1356 = r1367;
        r5 = 176;
        break;
      }
     case 176:
      r1371 = (r1340 | 0) < 0;
      if (r1371) {
        r5 = 177;
        break;
      } else {
        r5 = 178;
        break;
      }
     case 177:
      HEAP32[r84 >> 2] = r85;
      r1372 = r1;
      r731 = r1372 | 0;
      HEAP32[r731 >> 2] = r1307;
      r733 = r1372 + 4 | 0;
      HEAP32[r733 >> 2] = r1308;
      r5 = 375;
      break;
     case 178:
      r1373 = r1356 + 4 | 0;
      r1374 = HEAP32[r1373 >> 2];
      r1375 = r1374 + 12 | 0;
      r1376 = HEAP32[r1375 >> 2];
      r1377 = r1376 + 12 | 0;
      r1378 = HEAP32[r1377 >> 2];
      r1379 = r1376 + 16 | 0;
      r1380 = HEAP32[r1379 >> 2];
      r1381 = r1345 + r1340 | 0;
      r1382 = r1343 + (r1381 << 3) | 0;
      r1383 = r1382;
      r154 = r1383 | 0;
      HEAP32[r154 >> 2] = r1307;
      r155 = r1383 + 4 | 0;
      HEAP32[r155 >> 2] = r1308;
      r1294 = r1374;
      r1295 = r1376;
      r1296 = r1342;
      r1297 = r1378;
      r1298 = r1380;
      r1299 = r1346;
      r1300 = r394;
      r5 = 179;
      break;
     case 179:
      r1384 = r2 + 8 | 0;
      r123 = r1294;
      r124 = r1295;
      r125 = r1297;
      r126 = r1298;
      r127 = r1299;
      r128 = r1296;
      r129 = r1300;
      r130 = r1384;
      r5 = 180;
      break;
     case 180:
      r1385 = HEAP32[r128 >> 2];
      r1386 = r1385 & 127;
      r1387 = 5309552 + (r1386 << 2) | 0;
      r251 = r12;
      r274 = r13;
      r294 = r14;
      r318 = r15;
      r344 = r16;
      r368 = r17;
      r400 = r18;
      r461 = r2 + 36 | 0;
      r472 = r2 + 32 | 0;
      r493 = r2 + 48 | 0;
      r537 = r2 + 56 | 0;
      r542 = r2 + 44 | 0;
      r553 = r2 + 40 | 0;
      r608 = r20;
      r648 = r21;
      r656 = r2 + 12 | 0;
      r682 = r23;
      r736 = r24;
      r770 = r25;
      r856 = r27;
      r924 = r31;
      r994 = r33;
      r1018 = r34;
      r1139 = r35;
      r1166 = r36;
      r1388 = r41;
      r1389 = r42;
      r1390 = r45;
      r1391 = r46;
      r1392 = r48;
      r1393 = r49;
      r1394 = r51;
      r1395 = r52;
      r1396 = r50;
      r1397 = r53;
      r1398 = r54;
      r1399 = r55;
      r1400 = r69;
      r1401 = r2 + 72 | 0;
      r1402 = r56;
      r1403 = r57;
      r1404 = r58;
      r1405 = r59;
      r1406 = r60;
      r1407 = r61;
      r1408 = r62;
      r1409 = r63;
      r1410 = r64;
      r1411 = r64;
      r1412 = r65;
      r1413 = r66;
      r1414 = r68;
      r248 = r2 + 52 | 0;
      r292 = r2 + 8 | 0;
      r394 = r2 + 20 | 0;
      r136 = r1387;
      r137 = r123;
      r138 = r124;
      r132 = r128;
      r139 = r125;
      r140 = r126;
      r141 = r127;
      r142 = r1385;
      r5 = 376;
      break;
     case 181:
      r1415 = r142 >>> 23;
      r1416 = r142 >>> 7;
      r1417 = r1416 & 127;
      r1418 = r142 >>> 14;
      r1419 = r1418 & 511;
      r1420 = r140 + (r1419 << 1) | 0;
      r1421 = HEAP16[r1420 >> 1];
      r1422 = r141 + (r1415 << 3) | 0;
      r1423 = r1422;
      r1424 = r1422;
      r603 = r1424 | 0;
      r1425 = HEAP32[r603 >> 2];
      r605 = r1424 + 4 | 0;
      r1426 = HEAP32[r605 >> 2];
      r607 = r1388 | 0;
      HEAP32[r607 >> 2] = r1425;
      r609 = r1388 + 4 | 0;
      HEAP32[r609 >> 2] = r1426;
      r1427 = _mrb_class(r2, r41);
      HEAP32[r40 >> 2] = r1427;
      r1428 = _mrb_method_search_vm(r40, r1421);
      r1429 = (r1428 | 0) == 0;
      if (r1429) {
        r5 = 182;
        break;
      } else {
        r1430 = r1417;
        r1431 = r1428;
        r1432 = r1421;
        r5 = 185;
        break;
      }
     case 182:
      _mrb_symbol_value135(r42, r1421);
      r1433 = _mrb_intern(r2, 5317196);
      r1434 = _mrb_method_search_vm(r40, r1433);
      r1435 = (r1417 | 0) == 127;
      if (r1435) {
        r5 = 183;
        break;
      } else {
        r5 = 184;
        break;
      }
     case 183:
      r1436 = r1415 + 1 | 0;
      r1437 = r141 + (r1436 << 3) | 0;
      _mrb_ary_unshift(r43, r2, r1437, r42);
      r1430 = 127;
      r1431 = r1434;
      r1432 = r1433;
      r5 = 185;
      break;
     case 184:
      r1438 = r1415 + 2 | 0;
      r1439 = r141 + (r1438 << 3) | 0;
      r1440 = r1439;
      r1441 = r1415 + 1 | 0;
      r1442 = r141 + (r1441 << 3) | 0;
      r1443 = r1442;
      r1444 = r1417 + 1 | 0;
      r1445 = r1444 << 3;
      _memmove(r1440, r1443, r1445, 4, 0);
      r1446 = r1442;
      r603 = r1389 | 0;
      r1447 = HEAP32[r603 >> 2];
      r605 = r1389 + 4 | 0;
      r1448 = HEAP32[r605 >> 2];
      r607 = r1446 | 0;
      HEAP32[r607 >> 2] = r1447;
      r609 = r1446 + 4 | 0;
      HEAP32[r609 >> 2] = r1448;
      r1430 = r1444;
      r1431 = r1434;
      r1432 = r1433;
      r5 = 185;
      break;
     case 185:
      r1449 = HEAP32[r129 >> 2];
      r1450 = r1449 | 0;
      HEAP16[r1450 >> 1] = r1432;
      r1451 = r1431 + 16 | 0;
      r1452 = HEAP32[r1451 >> 2];
      r1453 = r1449 + 28 | 0;
      HEAP32[r1453 >> 2] = r1452;
      r1454 = r1449 + 16 | 0;
      r1455 = (r1430 | 0) == 127;
      r1456 = r1455 ? -1 : r1430;
      HEAP32[r1454 >> 2] = r1456;
      r1457 = HEAP32[r130 >> 2];
      r1458 = r1457;
      r1459 = r1456 << 3;
      r1460 = r1459 + 8 | 0;
      _memmove(r1458, r1423, r1460, 4, 0);
      r1461 = r1431;
      r1462 = HEAP32[r1461 >> 2];
      r1463 = r1462 & 262144;
      r1464 = (r1463 | 0) == 0;
      if (r1464) {
        r5 = 187;
        break;
      } else {
        r5 = 186;
        break;
      }
     case 186:
      r1465 = HEAP32[r130 >> 2];
      r1466 = r1431 + 12 | 0;
      r1467 = r1466;
      r1468 = HEAP32[r1467 >> 2];
      FUNCTION_TABLE[r1468](r44, r2, r41);
      r1469 = r44;
      r1470 = r1465;
      r150 = r1469 | 0;
      r1471 = HEAP32[r150 >> 2];
      r152 = r1469 + 4 | 0;
      r1472 = HEAP32[r152 >> 2];
      r154 = r1470 | 0;
      HEAP32[r154 >> 2] = r1471;
      r155 = r1470 + 4 | 0;
      HEAP32[r155 >> 2] = r1472;
      _mrb_gc_arena_restore(r2, r83);
      r812 = r137;
      r813 = r138;
      r5 = 142;
      break;
     case 187:
      r1473 = r1431 + 12 | 0;
      r1474 = HEAP32[r1473 >> 2];
      r1475 = r1474 + 12 | 0;
      r1476 = HEAP32[r1475 >> 2];
      r1477 = r1474 + 16 | 0;
      r1478 = HEAP32[r1477 >> 2];
      r1479 = HEAP32[r1454 >> 2];
      r1480 = (r1479 | 0) < 0;
      r1481 = r1474 + 4 | 0;
      r1482 = r1481;
      r1483 = HEAP32[r1482 >> 2];
      r1484 = r1483 << 16;
      r1485 = r1484 >> 16;
      if (r1480) {
        r5 = 188;
        break;
      } else {
        r5 = 189;
        break;
      }
     case 188:
      r1486 = (r1484 | 0) < 196608;
      r1487 = r1486 ? 3 : r1485;
      _stack_extend(r2, r1487, 3);
      r5 = 190;
      break;
     case 189:
      r1488 = r1479 + 2 | 0;
      _stack_extend(r2, r1485, r1488);
      r5 = 190;
      break;
     case 190:
      r1489 = HEAP32[r130 >> 2];
      r1490 = r1474 + 8 | 0;
      r1491 = HEAP32[r1490 >> 2];
      r1492 = HEAP32[r1491 >> 2];
      r1493 = r1492 & 127;
      r1494 = 5309552 + (r1493 << 2) | 0;
      r136 = r1494;
      r137 = r137;
      r138 = r1474;
      r132 = r1491;
      r139 = r1476;
      r140 = r1478;
      r141 = r1489;
      r142 = r1492;
      r5 = 376;
      break;
     case 191:
      r1495 = r142 >>> 23;
      r1496 = r142 >>> 7;
      r1497 = r142 >>> 17;
      r1498 = r1497 & 63;
      r1499 = r142 >>> 16;
      r1500 = r1499 & 1;
      r1501 = r142 >>> 11;
      r1502 = r1501 & 31;
      r1503 = r1496 & 15;
      r1504 = (r1503 | 0) == 0;
      if (r1504) {
        r1505 = r141;
        r5 = 195;
        break;
      } else {
        r5 = 192;
        break;
      }
     case 192:
      r1506 = r1503 - 1 | 0;
      r1507 = HEAP32[r394 >> 2];
      r1508 = r1507 + 4 | 0;
      r1509 = HEAP32[r1508 >> 2];
      r1510 = r1509 + 20 | 0;
      r1511 = HEAP32[r1510 >> 2];
      r1512 = _uvenv(r1511, r1506);
      r1513 = (r1512 | 0) == 0;
      if (r1513) {
        r5 = 193;
        break;
      } else {
        r5 = 194;
        break;
      }
     case 193:
      _localjump_error(r2, 5323480);
      r90 = r137;
      r91 = r138;
      r92 = r132;
      r93 = r141;
      r94 = r129;
      r95 = r493;
      r5 = 143;
      break;
     case 194:
      r1514 = r1512 + 12 | 0;
      r1515 = HEAP32[r1514 >> 2];
      r1505 = r1515;
      r5 = 195;
      break;
     case 195:
      r1516 = r141 + (r1495 << 3) | 0;
      r1517 = r1500 + 1 | 0;
      r1518 = r1517 + r1498 | 0;
      r1519 = r1518 + r1502 | 0;
      r1520 = r1505 + (r1519 << 3) | 0;
      r1521 = r1520;
      r1522 = r1516;
      r212 = r1521 | 0;
      r1523 = HEAP32[r212 >> 2];
      r213 = r1521 + 4 | 0;
      r1524 = HEAP32[r213 >> 2];
      r321 = r1522 | 0;
      HEAP32[r321 >> 2] = r1523;
      r322 = r1522 + 4 | 0;
      HEAP32[r322 >> 2] = r1524;
      r1525 = r132 + 4 | 0;
      r1526 = HEAP32[r1525 >> 2];
      r1527 = r1526 & 127;
      r1528 = 5309552 + (r1527 << 2) | 0;
      r136 = r1528;
      r137 = r137;
      r138 = r138;
      r132 = r1525;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r1526;
      r5 = 376;
      break;
     case 196:
      r1529 = r142 >>> 23;
      r1530 = r141 + (r1529 << 3) | 0;
      r1531 = r141 + (r1529 << 3) + 4 | 0;
      r1532 = r1531;
      r1533 = HEAP32[r1532 >> 2];
      r1534 = r1533 << 8;
      r1535 = r1534 & 65280;
      r1536 = r1529 + 1 | 0;
      r1537 = r141 + (r1536 << 3) | 0;
      r1538 = r141 + (r1536 << 3) + 4 | 0;
      r1539 = r1538;
      r1540 = HEAP32[r1539 >> 2];
      r1541 = r1540 & 255;
      r1542 = r1535 | r1541;
      if ((r1542 | 0) == 771) {
        r5 = 197;
        break;
      } else if ((r1542 | 0) == 774) {
        r5 = 201;
        break;
      } else if ((r1542 | 0) == 1539) {
        r5 = 202;
        break;
      } else if ((r1542 | 0) == 1542) {
        r5 = 203;
        break;
      } else if ((r1542 | 0) == 4369) {
        r5 = 204;
        break;
      } else {
        r594 = r142;
        r5 = 51;
        break;
      }
     case 197:
      r1543 = r1530;
      r1544 = HEAP32[r1543 >> 2];
      r1545 = r1537;
      r1546 = HEAP32[r1545 >> 2];
      r1547 = r1546 + r1544 | 0;
      r1548 = r1546 ^ r1544;
      r1549 = (r1548 | 0) > -1;
      if (r1549) {
        r5 = 198;
        break;
      } else {
        r5 = 200;
        break;
      }
     case 198:
      r1550 = r1544 >>> 31;
      r1551 = r1547 >>> 31;
      r1552 = (r1550 | 0) == (r1551 | 0);
      if (r1552) {
        r5 = 200;
        break;
      } else {
        r5 = 199;
        break;
      }
     case 199:
      r1553 = r1533 & -256;
      r1554 = r1553 | 6;
      HEAP32[r1532 >> 2] = r1554;
      r1555 = r1544 | 0;
      r1556 = r1546 | 0;
      r1557 = r1555 + r1556;
      r1558 = r1530 | 0;
      HEAPF32[r1558 >> 2] = r1557;
      r5 = 205;
      break;
     case 200:
      r1559 = r1533 & -256;
      r1560 = r1559 | 3;
      HEAP32[r1532 >> 2] = r1560;
      HEAP32[r1543 >> 2] = r1547;
      r5 = 205;
      break;
     case 201:
      r1561 = r1530;
      r1562 = HEAP32[r1561 >> 2];
      r1563 = r1537 | 0;
      r1564 = HEAPF32[r1563 >> 2];
      r1565 = r1533 & -256;
      r1566 = r1565 | 6;
      HEAP32[r1532 >> 2] = r1566;
      r1567 = r1562 | 0;
      r1568 = r1567 + r1564;
      r1569 = r1530 | 0;
      HEAPF32[r1569 >> 2] = r1568;
      r5 = 205;
      break;
     case 202:
      r1570 = r1530 | 0;
      r1571 = HEAPF32[r1570 >> 2];
      r1572 = r1537;
      r1573 = HEAP32[r1572 >> 2];
      r1574 = r1573 | 0;
      r1575 = r1571 + r1574;
      HEAPF32[r1570 >> 2] = r1575;
      r5 = 205;
      break;
     case 203:
      r1576 = r1530 | 0;
      r1577 = HEAPF32[r1576 >> 2];
      r1578 = r1537 | 0;
      r1579 = HEAPF32[r1578 >> 2];
      r1580 = r1577 + r1579;
      HEAPF32[r1576 >> 2] = r1580;
      r5 = 205;
      break;
     case 204:
      _mrb_str_plus(r45, r2, r1530, r1537);
      r1581 = r1530;
      r731 = r1390 | 0;
      r1582 = HEAP32[r731 >> 2];
      r733 = r1390 + 4 | 0;
      r1583 = HEAP32[r733 >> 2];
      r735 = r1581 | 0;
      HEAP32[r735 >> 2] = r1582;
      r737 = r1581 + 4 | 0;
      HEAP32[r737 >> 2] = r1583;
      r5 = 205;
      break;
     case 205:
      _mrb_gc_arena_restore(r2, r83);
      r1584 = r132 + 4 | 0;
      r1585 = HEAP32[r1584 >> 2];
      r1586 = r1585 & 127;
      r1587 = 5309552 + (r1586 << 2) | 0;
      r136 = r1587;
      r137 = r137;
      r138 = r138;
      r132 = r1584;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r1585;
      r5 = 376;
      break;
     case 206:
      r1588 = r142 >>> 23;
      r1589 = r141 + (r1588 << 3) | 0;
      r1590 = r141 + (r1588 << 3) + 4 | 0;
      r1591 = r1590;
      r1592 = HEAP32[r1591 >> 2];
      r1593 = r1592 << 8;
      r1594 = r1593 & 65280;
      r1595 = r1588 + 1 | 0;
      r1596 = r141 + (r1595 << 3) | 0;
      r1597 = r141 + (r1595 << 3) + 4 | 0;
      r1598 = r1597;
      r1599 = HEAP32[r1598 >> 2];
      r1600 = r1599 & 255;
      r1601 = r1594 | r1600;
      if ((r1601 | 0) == 771) {
        r5 = 207;
        break;
      } else if ((r1601 | 0) == 774) {
        r5 = 211;
        break;
      } else if ((r1601 | 0) == 1539) {
        r5 = 212;
        break;
      } else if ((r1601 | 0) == 1542) {
        r5 = 213;
        break;
      } else {
        r594 = r142;
        r5 = 51;
        break;
      }
     case 207:
      r1602 = r1589;
      r1603 = HEAP32[r1602 >> 2];
      r1604 = r1596;
      r1605 = HEAP32[r1604 >> 2];
      r1606 = r1603 - r1605 | 0;
      r1607 = r1605 ^ r1603;
      r1608 = (r1607 | 0) < 0;
      if (r1608) {
        r5 = 208;
        break;
      } else {
        r5 = 210;
        break;
      }
     case 208:
      r1609 = r1603 >>> 31;
      r1610 = r1606 >>> 31;
      r1611 = (r1609 | 0) == (r1610 | 0);
      if (r1611) {
        r5 = 210;
        break;
      } else {
        r5 = 209;
        break;
      }
     case 209:
      r1612 = r1592 & -256;
      r1613 = r1612 | 6;
      HEAP32[r1591 >> 2] = r1613;
      r1614 = r1603 | 0;
      r1615 = r1605 | 0;
      r1616 = r1614 - r1615;
      r1617 = r1589 | 0;
      HEAPF32[r1617 >> 2] = r1616;
      r5 = 214;
      break;
     case 210:
      r1618 = r1592 & -256;
      r1619 = r1618 | 3;
      HEAP32[r1591 >> 2] = r1619;
      HEAP32[r1602 >> 2] = r1606;
      r5 = 214;
      break;
     case 211:
      r1620 = r1589;
      r1621 = HEAP32[r1620 >> 2];
      r1622 = r1596 | 0;
      r1623 = HEAPF32[r1622 >> 2];
      r1624 = r1592 & -256;
      r1625 = r1624 | 6;
      HEAP32[r1591 >> 2] = r1625;
      r1626 = r1621 | 0;
      r1627 = r1626 - r1623;
      r1628 = r1589 | 0;
      HEAPF32[r1628 >> 2] = r1627;
      r5 = 214;
      break;
     case 212:
      r1629 = r1589 | 0;
      r1630 = HEAPF32[r1629 >> 2];
      r1631 = r1596;
      r1632 = HEAP32[r1631 >> 2];
      r1633 = r1632 | 0;
      r1634 = r1630 - r1633;
      HEAPF32[r1629 >> 2] = r1634;
      r5 = 214;
      break;
     case 213:
      r1635 = r1589 | 0;
      r1636 = HEAPF32[r1635 >> 2];
      r1637 = r1596 | 0;
      r1638 = HEAPF32[r1637 >> 2];
      r1639 = r1636 - r1638;
      HEAPF32[r1635 >> 2] = r1639;
      r5 = 214;
      break;
     case 214:
      r1640 = r132 + 4 | 0;
      r1641 = HEAP32[r1640 >> 2];
      r1642 = r1641 & 127;
      r1643 = 5309552 + (r1642 << 2) | 0;
      r136 = r1643;
      r137 = r137;
      r138 = r138;
      r132 = r1640;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r1641;
      r5 = 376;
      break;
     case 215:
      r1644 = r142 >>> 23;
      r1645 = r141 + (r1644 << 3) | 0;
      r1646 = r141 + (r1644 << 3) + 4 | 0;
      r1647 = r1646;
      r1648 = HEAP32[r1647 >> 2];
      r1649 = r1648 << 8;
      r1650 = r1649 & 65280;
      r1651 = r1644 + 1 | 0;
      r1652 = r141 + (r1651 << 3) | 0;
      r1653 = r141 + (r1651 << 3) + 4 | 0;
      r1654 = r1653;
      r1655 = HEAP32[r1654 >> 2];
      r1656 = r1655 & 255;
      r1657 = r1650 | r1656;
      if ((r1657 | 0) == 771) {
        r5 = 216;
        break;
      } else if ((r1657 | 0) == 774) {
        r5 = 217;
        break;
      } else if ((r1657 | 0) == 1539) {
        r5 = 218;
        break;
      } else if ((r1657 | 0) == 1542) {
        r5 = 219;
        break;
      } else {
        r594 = r142;
        r5 = 51;
        break;
      }
     case 216:
      r1658 = r1645;
      r1659 = HEAP32[r1658 >> 2];
      r1660 = r1652;
      r1661 = HEAP32[r1660 >> 2];
      r1662 = r1661 * r1659 & -1;
      r1663 = r1648 & -256;
      r1664 = r1663 | 3;
      HEAP32[r1647 >> 2] = r1664;
      HEAP32[r1658 >> 2] = r1662;
      r5 = 220;
      break;
     case 217:
      r1665 = r1645;
      r1666 = HEAP32[r1665 >> 2];
      r1667 = r1652 | 0;
      r1668 = HEAPF32[r1667 >> 2];
      r1669 = r1648 & -256;
      r1670 = r1669 | 6;
      HEAP32[r1647 >> 2] = r1670;
      r1671 = r1666 | 0;
      r1672 = r1671 * r1668;
      r1673 = r1645 | 0;
      HEAPF32[r1673 >> 2] = r1672;
      r5 = 220;
      break;
     case 218:
      r1674 = r1645 | 0;
      r1675 = HEAPF32[r1674 >> 2];
      r1676 = r1652;
      r1677 = HEAP32[r1676 >> 2];
      r1678 = r1677 | 0;
      r1679 = r1675 * r1678;
      HEAPF32[r1674 >> 2] = r1679;
      r5 = 220;
      break;
     case 219:
      r1680 = r1645 | 0;
      r1681 = HEAPF32[r1680 >> 2];
      r1682 = r1652 | 0;
      r1683 = HEAPF32[r1682 >> 2];
      r1684 = r1681 * r1683;
      HEAPF32[r1680 >> 2] = r1684;
      r5 = 220;
      break;
     case 220:
      r1685 = r132 + 4 | 0;
      r1686 = HEAP32[r1685 >> 2];
      r1687 = r1686 & 127;
      r1688 = 5309552 + (r1687 << 2) | 0;
      r136 = r1688;
      r137 = r137;
      r138 = r138;
      r132 = r1685;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r1686;
      r5 = 376;
      break;
     case 221:
      r1689 = r142 >>> 23;
      r1690 = r141 + (r1689 << 3) | 0;
      r1691 = r141 + (r1689 << 3) + 4 | 0;
      r1692 = r1691;
      r1693 = HEAP32[r1692 >> 2];
      r1694 = r1693 << 8;
      r1695 = r1694 & 65280;
      r1696 = r1689 + 1 | 0;
      r1697 = r141 + (r1696 << 3) | 0;
      r1698 = r141 + (r1696 << 3) + 4 | 0;
      r1699 = r1698;
      r1700 = HEAP32[r1699 >> 2];
      r1701 = r1700 & 255;
      r1702 = r1695 | r1701;
      if ((r1702 | 0) == 771) {
        r5 = 222;
        break;
      } else if ((r1702 | 0) == 774) {
        r5 = 223;
        break;
      } else if ((r1702 | 0) == 1539) {
        r5 = 224;
        break;
      } else if ((r1702 | 0) == 1542) {
        r5 = 225;
        break;
      } else {
        r594 = r142;
        r5 = 51;
        break;
      }
     case 222:
      r1703 = r1690;
      r1704 = HEAP32[r1703 >> 2];
      r1705 = r1697;
      r1706 = HEAP32[r1705 >> 2];
      r1707 = r1693 & -256;
      r1708 = r1707 | 6;
      HEAP32[r1692 >> 2] = r1708;
      r1709 = r1704 | 0;
      r1710 = r1706 | 0;
      r1711 = r1709 / r1710;
      r1712 = r1690 | 0;
      HEAPF32[r1712 >> 2] = r1711;
      r5 = 226;
      break;
     case 223:
      r1713 = r1690;
      r1714 = HEAP32[r1713 >> 2];
      r1715 = r1697 | 0;
      r1716 = HEAPF32[r1715 >> 2];
      r1717 = r1693 & -256;
      r1718 = r1717 | 6;
      HEAP32[r1692 >> 2] = r1718;
      r1719 = r1714 | 0;
      r1720 = r1719 / r1716;
      r1721 = r1690 | 0;
      HEAPF32[r1721 >> 2] = r1720;
      r5 = 226;
      break;
     case 224:
      r1722 = r1690 | 0;
      r1723 = HEAPF32[r1722 >> 2];
      r1724 = r1697;
      r1725 = HEAP32[r1724 >> 2];
      r1726 = r1725 | 0;
      r1727 = r1723 / r1726;
      HEAPF32[r1722 >> 2] = r1727;
      r5 = 226;
      break;
     case 225:
      r1728 = r1690 | 0;
      r1729 = HEAPF32[r1728 >> 2];
      r1730 = r1697 | 0;
      r1731 = HEAPF32[r1730 >> 2];
      r1732 = r1729 / r1731;
      HEAPF32[r1728 >> 2] = r1732;
      r5 = 226;
      break;
     case 226:
      r1733 = r132 + 4 | 0;
      r1734 = HEAP32[r1733 >> 2];
      r1735 = r1734 & 127;
      r1736 = 5309552 + (r1735 << 2) | 0;
      r136 = r1736;
      r137 = r137;
      r138 = r138;
      r132 = r1733;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r1734;
      r5 = 376;
      break;
     case 227:
      r1737 = r142 >>> 23;
      r1738 = r141 + (r1737 << 3) | 0;
      r1739 = r141 + (r1737 << 3) + 4 | 0;
      r1740 = r1739;
      r1741 = HEAP32[r1740 >> 2];
      r1742 = r1741 & 255;
      if ((r1742 | 0) == 3) {
        r5 = 228;
        break;
      } else if ((r1742 | 0) == 6) {
        r5 = 231;
        break;
      } else {
        r5 = 232;
        break;
      }
     case 228:
      r1743 = r1738;
      r1744 = HEAP32[r1743 >> 2];
      r1745 = r142 >>> 7;
      r1746 = r1745 & 127;
      r1747 = r1744 + r1746 | 0;
      r1748 = (r1744 | 0) < 0;
      r1749 = (r1747 | 0) > -1;
      r1750 = r1748 | r1749;
      if (r1750) {
        r5 = 230;
        break;
      } else {
        r5 = 229;
        break;
      }
     case 229:
      r1751 = r1741 & -256;
      r1752 = r1751 | 6;
      HEAP32[r1740 >> 2] = r1752;
      r1753 = r1744 | 0;
      r1754 = r1746 | 0;
      r1755 = r1754 + r1753;
      r1756 = r1738 | 0;
      HEAPF32[r1756 >> 2] = r1755;
      r5 = 233;
      break;
     case 230:
      HEAP32[r1743 >> 2] = r1747;
      r5 = 233;
      break;
     case 231:
      r1757 = r142 >>> 7;
      r1758 = r1757 & 127;
      r1759 = r1758 | 0;
      r1760 = r1738 | 0;
      r1761 = HEAPF32[r1760 >> 2];
      r1762 = r1759 + r1761;
      HEAPF32[r1760 >> 2] = r1762;
      r5 = 233;
      break;
     case 232:
      r1763 = r1737 + 1 | 0;
      r1764 = r141 + (r1763 << 3) + 4 | 0;
      r1765 = r1764;
      r1766 = HEAP32[r1765 >> 2];
      r1767 = r1766 & -256;
      r1768 = r1767 | 3;
      HEAP32[r1765 >> 2] = r1768;
      r1769 = r142 >>> 7;
      r1770 = r1769 & 127;
      r1771 = r141 + (r1763 << 3) | 0;
      r1772 = r1771;
      HEAP32[r1772 >> 2] = r1770;
      r1773 = r1737 << 23;
      r1774 = r142 & 8372224;
      r1775 = r1774 | r1773;
      r1776 = r1775 | 160;
      r594 = r1776;
      r5 = 51;
      break;
     case 233:
      r1777 = r132 + 4 | 0;
      r1778 = HEAP32[r1777 >> 2];
      r1779 = r1778 & 127;
      r1780 = 5309552 + (r1779 << 2) | 0;
      r136 = r1780;
      r137 = r137;
      r138 = r138;
      r132 = r1777;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r1778;
      r5 = 376;
      break;
     case 234:
      r1781 = r142 >>> 23;
      r1782 = r141 + (r1781 << 3) | 0;
      r1783 = r141 + (r1781 << 3) + 4 | 0;
      r1784 = r1783;
      r1785 = HEAP32[r1784 >> 2];
      r1786 = r1785 & 255;
      if ((r1786 | 0) == 3) {
        r5 = 235;
        break;
      } else if ((r1786 | 0) == 6) {
        r5 = 239;
        break;
      } else {
        r5 = 240;
        break;
      }
     case 235:
      r1787 = r1782;
      r1788 = HEAP32[r1787 >> 2];
      r1789 = r142 >>> 7;
      r1790 = r1789 & 127;
      r1791 = r1788 - r1790 | 0;
      r1792 = (r1788 | 0) < 0;
      if (r1792) {
        r5 = 236;
        break;
      } else {
        r5 = 238;
        break;
      }
     case 236:
      r1793 = r1788 >>> 31;
      r1794 = r1791 >>> 31;
      r1795 = (r1793 | 0) == (r1794 | 0);
      if (r1795) {
        r5 = 238;
        break;
      } else {
        r5 = 237;
        break;
      }
     case 237:
      r1796 = r1785 & -256;
      r1797 = r1796 | 6;
      HEAP32[r1784 >> 2] = r1797;
      r1798 = r1788 | 0;
      r1799 = r1790 | 0;
      r1800 = r1798 - r1799;
      r1801 = r1782 | 0;
      HEAPF32[r1801 >> 2] = r1800;
      r5 = 241;
      break;
     case 238:
      HEAP32[r1787 >> 2] = r1791;
      r5 = 241;
      break;
     case 239:
      r1802 = r142 >>> 7;
      r1803 = r1802 & 127;
      r1804 = r1803 | 0;
      r1805 = r1782 | 0;
      r1806 = HEAPF32[r1805 >> 2];
      r1807 = r1806 - r1804;
      HEAPF32[r1805 >> 2] = r1807;
      r5 = 241;
      break;
     case 240:
      r1808 = r1781 + 1 | 0;
      r1809 = r141 + (r1808 << 3) + 4 | 0;
      r1810 = r1809;
      r1811 = HEAP32[r1810 >> 2];
      r1812 = r1811 & -256;
      r1813 = r1812 | 3;
      HEAP32[r1810 >> 2] = r1813;
      r1814 = r142 >>> 7;
      r1815 = r1814 & 127;
      r1816 = r141 + (r1808 << 3) | 0;
      r1817 = r1816;
      HEAP32[r1817 >> 2] = r1815;
      r1818 = r1781 << 23;
      r1819 = r142 & 8372224;
      r1820 = r1819 | r1818;
      r1821 = r1820 | 160;
      r594 = r1821;
      r5 = 51;
      break;
     case 241:
      r1822 = r132 + 4 | 0;
      r1823 = HEAP32[r1822 >> 2];
      r1824 = r1823 & 127;
      r1825 = 5309552 + (r1824 << 2) | 0;
      r136 = r1825;
      r137 = r137;
      r138 = r138;
      r132 = r1822;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r1823;
      r5 = 376;
      break;
     case 242:
      r1826 = r142 >>> 23;
      r1827 = r141 + (r1826 << 3) | 0;
      r1828 = r1826 + 1 | 0;
      r1829 = r141 + (r1828 << 3) | 0;
      r1830 = _mrb_obj_eq(r1827, r1829);
      r1831 = (r1830 | 0) == 0;
      r1832 = r141 + (r1826 << 3) + 4 | 0;
      r1833 = r1832;
      r1834 = HEAP32[r1833 >> 2];
      if (r1831) {
        r5 = 244;
        break;
      } else {
        r5 = 243;
        break;
      }
     case 243:
      r1835 = r1834 & -256;
      r1836 = r1835 | 2;
      HEAP32[r1833 >> 2] = r1836;
      r1837 = r1827;
      HEAP32[r1837 >> 2] = 1;
      r5 = 257;
      break;
     case 244:
      r1838 = r1834 << 8;
      r1839 = r1838 & 65280;
      r1840 = r141 + (r1828 << 3) + 4 | 0;
      r1841 = r1840;
      r1842 = HEAP32[r1841 >> 2];
      r1843 = r1842 & 255;
      r1844 = r1843 | r1839;
      if ((r1844 | 0) == 771) {
        r5 = 245;
        break;
      } else if ((r1844 | 0) == 774) {
        r5 = 248;
        break;
      } else if ((r1844 | 0) == 1539) {
        r5 = 251;
        break;
      } else if ((r1844 | 0) == 1542) {
        r5 = 254;
        break;
      } else {
        r594 = r142;
        r5 = 51;
        break;
      }
     case 245:
      r1845 = r1827;
      r1846 = HEAP32[r1845 >> 2];
      r1847 = r1829;
      r1848 = HEAP32[r1847 >> 2];
      r1849 = (r1846 | 0) == (r1848 | 0);
      r1850 = r1834 & -256;
      if (r1849) {
        r5 = 246;
        break;
      } else {
        r5 = 247;
        break;
      }
     case 246:
      r1851 = r1850 | 2;
      HEAP32[r1833 >> 2] = r1851;
      HEAP32[r1845 >> 2] = 1;
      r5 = 257;
      break;
     case 247:
      HEAP32[r1833 >> 2] = r1850;
      HEAP32[r1845 >> 2] = 1;
      r5 = 257;
      break;
     case 248:
      r1852 = r1827;
      r1853 = HEAP32[r1852 >> 2];
      r1854 = r1853 | 0;
      r1855 = r1829 | 0;
      r1856 = HEAPF32[r1855 >> 2];
      r1857 = r1854 == r1856;
      r1858 = r1834 & -256;
      if (r1857) {
        r5 = 249;
        break;
      } else {
        r5 = 250;
        break;
      }
     case 249:
      r1859 = r1858 | 2;
      HEAP32[r1833 >> 2] = r1859;
      HEAP32[r1852 >> 2] = 1;
      r5 = 257;
      break;
     case 250:
      HEAP32[r1833 >> 2] = r1858;
      HEAP32[r1852 >> 2] = 1;
      r5 = 257;
      break;
     case 251:
      r1860 = r1827 | 0;
      r1861 = HEAPF32[r1860 >> 2];
      r1862 = r1829;
      r1863 = HEAP32[r1862 >> 2];
      r1864 = r1863 | 0;
      r1865 = r1861 == r1864;
      r1866 = r1834 & -256;
      if (r1865) {
        r5 = 252;
        break;
      } else {
        r5 = 253;
        break;
      }
     case 252:
      r1867 = r1866 | 2;
      HEAP32[r1833 >> 2] = r1867;
      r1868 = r1827;
      HEAP32[r1868 >> 2] = 1;
      r5 = 257;
      break;
     case 253:
      HEAP32[r1833 >> 2] = r1866;
      r1869 = r1827;
      HEAP32[r1869 >> 2] = 1;
      r5 = 257;
      break;
     case 254:
      r1870 = r1827 | 0;
      r1871 = HEAPF32[r1870 >> 2];
      r1872 = r1829 | 0;
      r1873 = HEAPF32[r1872 >> 2];
      r1874 = r1871 == r1873;
      r1875 = r1834 & -256;
      if (r1874) {
        r5 = 255;
        break;
      } else {
        r5 = 256;
        break;
      }
     case 255:
      r1876 = r1875 | 2;
      HEAP32[r1833 >> 2] = r1876;
      r1877 = r1827;
      HEAP32[r1877 >> 2] = 1;
      r5 = 257;
      break;
     case 256:
      HEAP32[r1833 >> 2] = r1875;
      r1878 = r1827;
      HEAP32[r1878 >> 2] = 1;
      r5 = 257;
      break;
     case 257:
      r1879 = r132 + 4 | 0;
      r1880 = HEAP32[r1879 >> 2];
      r1881 = r1880 & 127;
      r1882 = 5309552 + (r1881 << 2) | 0;
      r136 = r1882;
      r137 = r137;
      r138 = r138;
      r132 = r1879;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r1880;
      r5 = 376;
      break;
     case 258:
      r1883 = r142 >>> 23;
      r1884 = r141 + (r1883 << 3) | 0;
      r1885 = r141 + (r1883 << 3) + 4 | 0;
      r1886 = r1885;
      r1887 = HEAP32[r1886 >> 2];
      r1888 = r1887 << 8;
      r1889 = r1888 & 65280;
      r1890 = r1883 + 1 | 0;
      r1891 = r141 + (r1890 << 3) | 0;
      r1892 = r141 + (r1890 << 3) + 4 | 0;
      r1893 = r1892;
      r1894 = HEAP32[r1893 >> 2];
      r1895 = r1894 & 255;
      r1896 = r1889 | r1895;
      if ((r1896 | 0) == 771) {
        r5 = 259;
        break;
      } else if ((r1896 | 0) == 774) {
        r5 = 262;
        break;
      } else if ((r1896 | 0) == 1539) {
        r5 = 265;
        break;
      } else if ((r1896 | 0) == 1542) {
        r5 = 268;
        break;
      } else {
        r594 = r142;
        r5 = 51;
        break;
      }
     case 259:
      r1897 = r1884;
      r1898 = HEAP32[r1897 >> 2];
      r1899 = r1891;
      r1900 = HEAP32[r1899 >> 2];
      r1901 = (r1898 | 0) < (r1900 | 0);
      r1902 = r1887 & -256;
      if (r1901) {
        r5 = 260;
        break;
      } else {
        r5 = 261;
        break;
      }
     case 260:
      r1903 = r1902 | 2;
      HEAP32[r1886 >> 2] = r1903;
      HEAP32[r1897 >> 2] = 1;
      r5 = 271;
      break;
     case 261:
      HEAP32[r1886 >> 2] = r1902;
      HEAP32[r1897 >> 2] = 1;
      r5 = 271;
      break;
     case 262:
      r1904 = r1884;
      r1905 = HEAP32[r1904 >> 2];
      r1906 = r1905 | 0;
      r1907 = r1891 | 0;
      r1908 = HEAPF32[r1907 >> 2];
      r1909 = r1906 < r1908;
      r1910 = r1887 & -256;
      if (r1909) {
        r5 = 263;
        break;
      } else {
        r5 = 264;
        break;
      }
     case 263:
      r1911 = r1910 | 2;
      HEAP32[r1886 >> 2] = r1911;
      HEAP32[r1904 >> 2] = 1;
      r5 = 271;
      break;
     case 264:
      HEAP32[r1886 >> 2] = r1910;
      HEAP32[r1904 >> 2] = 1;
      r5 = 271;
      break;
     case 265:
      r1912 = r1884 | 0;
      r1913 = HEAPF32[r1912 >> 2];
      r1914 = r1891;
      r1915 = HEAP32[r1914 >> 2];
      r1916 = r1915 | 0;
      r1917 = r1913 < r1916;
      r1918 = r1887 & -256;
      if (r1917) {
        r5 = 266;
        break;
      } else {
        r5 = 267;
        break;
      }
     case 266:
      r1919 = r1918 | 2;
      HEAP32[r1886 >> 2] = r1919;
      r1920 = r1884;
      HEAP32[r1920 >> 2] = 1;
      r5 = 271;
      break;
     case 267:
      HEAP32[r1886 >> 2] = r1918;
      r1921 = r1884;
      HEAP32[r1921 >> 2] = 1;
      r5 = 271;
      break;
     case 268:
      r1922 = r1884 | 0;
      r1923 = HEAPF32[r1922 >> 2];
      r1924 = r1891 | 0;
      r1925 = HEAPF32[r1924 >> 2];
      r1926 = r1923 < r1925;
      r1927 = r1887 & -256;
      if (r1926) {
        r5 = 269;
        break;
      } else {
        r5 = 270;
        break;
      }
     case 269:
      r1928 = r1927 | 2;
      HEAP32[r1886 >> 2] = r1928;
      r1929 = r1884;
      HEAP32[r1929 >> 2] = 1;
      r5 = 271;
      break;
     case 270:
      HEAP32[r1886 >> 2] = r1927;
      r1930 = r1884;
      HEAP32[r1930 >> 2] = 1;
      r5 = 271;
      break;
     case 271:
      r1931 = r132 + 4 | 0;
      r1932 = HEAP32[r1931 >> 2];
      r1933 = r1932 & 127;
      r1934 = 5309552 + (r1933 << 2) | 0;
      r136 = r1934;
      r137 = r137;
      r138 = r138;
      r132 = r1931;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r1932;
      r5 = 376;
      break;
     case 272:
      r1935 = r142 >>> 23;
      r1936 = r141 + (r1935 << 3) | 0;
      r1937 = r141 + (r1935 << 3) + 4 | 0;
      r1938 = r1937;
      r1939 = HEAP32[r1938 >> 2];
      r1940 = r1939 << 8;
      r1941 = r1940 & 65280;
      r1942 = r1935 + 1 | 0;
      r1943 = r141 + (r1942 << 3) | 0;
      r1944 = r141 + (r1942 << 3) + 4 | 0;
      r1945 = r1944;
      r1946 = HEAP32[r1945 >> 2];
      r1947 = r1946 & 255;
      r1948 = r1941 | r1947;
      if ((r1948 | 0) == 771) {
        r5 = 273;
        break;
      } else if ((r1948 | 0) == 774) {
        r5 = 276;
        break;
      } else if ((r1948 | 0) == 1539) {
        r5 = 279;
        break;
      } else if ((r1948 | 0) == 1542) {
        r5 = 282;
        break;
      } else {
        r594 = r142;
        r5 = 51;
        break;
      }
     case 273:
      r1949 = r1936;
      r1950 = HEAP32[r1949 >> 2];
      r1951 = r1943;
      r1952 = HEAP32[r1951 >> 2];
      r1953 = (r1950 | 0) > (r1952 | 0);
      r1954 = r1939 & -256;
      if (r1953) {
        r5 = 275;
        break;
      } else {
        r5 = 274;
        break;
      }
     case 274:
      r1955 = r1954 | 2;
      HEAP32[r1938 >> 2] = r1955;
      HEAP32[r1949 >> 2] = 1;
      r5 = 285;
      break;
     case 275:
      HEAP32[r1938 >> 2] = r1954;
      HEAP32[r1949 >> 2] = 1;
      r5 = 285;
      break;
     case 276:
      r1956 = r1936;
      r1957 = HEAP32[r1956 >> 2];
      r1958 = r1957 | 0;
      r1959 = r1943 | 0;
      r1960 = HEAPF32[r1959 >> 2];
      r1961 = r1958 > r1960;
      r1962 = r1939 & -256;
      if (r1961) {
        r5 = 278;
        break;
      } else {
        r5 = 277;
        break;
      }
     case 277:
      r1963 = r1962 | 2;
      HEAP32[r1938 >> 2] = r1963;
      HEAP32[r1956 >> 2] = 1;
      r5 = 285;
      break;
     case 278:
      HEAP32[r1938 >> 2] = r1962;
      HEAP32[r1956 >> 2] = 1;
      r5 = 285;
      break;
     case 279:
      r1964 = r1936 | 0;
      r1965 = HEAPF32[r1964 >> 2];
      r1966 = r1943;
      r1967 = HEAP32[r1966 >> 2];
      r1968 = r1967 | 0;
      r1969 = r1965 > r1968;
      r1970 = r1939 & -256;
      if (r1969) {
        r5 = 281;
        break;
      } else {
        r5 = 280;
        break;
      }
     case 280:
      r1971 = r1970 | 2;
      HEAP32[r1938 >> 2] = r1971;
      r1972 = r1936;
      HEAP32[r1972 >> 2] = 1;
      r5 = 285;
      break;
     case 281:
      HEAP32[r1938 >> 2] = r1970;
      r1973 = r1936;
      HEAP32[r1973 >> 2] = 1;
      r5 = 285;
      break;
     case 282:
      r1974 = r1936 | 0;
      r1975 = HEAPF32[r1974 >> 2];
      r1976 = r1943 | 0;
      r1977 = HEAPF32[r1976 >> 2];
      r1978 = r1975 > r1977;
      r1979 = r1939 & -256;
      if (r1978) {
        r5 = 284;
        break;
      } else {
        r5 = 283;
        break;
      }
     case 283:
      r1980 = r1979 | 2;
      HEAP32[r1938 >> 2] = r1980;
      r1981 = r1936;
      HEAP32[r1981 >> 2] = 1;
      r5 = 285;
      break;
     case 284:
      HEAP32[r1938 >> 2] = r1979;
      r1982 = r1936;
      HEAP32[r1982 >> 2] = 1;
      r5 = 285;
      break;
     case 285:
      r1983 = r132 + 4 | 0;
      r1984 = HEAP32[r1983 >> 2];
      r1985 = r1984 & 127;
      r1986 = 5309552 + (r1985 << 2) | 0;
      r136 = r1986;
      r137 = r137;
      r138 = r138;
      r132 = r1983;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r1984;
      r5 = 376;
      break;
     case 286:
      r1987 = r142 >>> 23;
      r1988 = r141 + (r1987 << 3) | 0;
      r1989 = r141 + (r1987 << 3) + 4 | 0;
      r1990 = r1989;
      r1991 = HEAP32[r1990 >> 2];
      r1992 = r1991 << 8;
      r1993 = r1992 & 65280;
      r1994 = r1987 + 1 | 0;
      r1995 = r141 + (r1994 << 3) | 0;
      r1996 = r141 + (r1994 << 3) + 4 | 0;
      r1997 = r1996;
      r1998 = HEAP32[r1997 >> 2];
      r1999 = r1998 & 255;
      r2000 = r1993 | r1999;
      if ((r2000 | 0) == 771) {
        r5 = 287;
        break;
      } else if ((r2000 | 0) == 774) {
        r5 = 290;
        break;
      } else if ((r2000 | 0) == 1539) {
        r5 = 293;
        break;
      } else if ((r2000 | 0) == 1542) {
        r5 = 296;
        break;
      } else {
        r594 = r142;
        r5 = 51;
        break;
      }
     case 287:
      r2001 = r1988;
      r2002 = HEAP32[r2001 >> 2];
      r2003 = r1995;
      r2004 = HEAP32[r2003 >> 2];
      r2005 = (r2002 | 0) > (r2004 | 0);
      r2006 = r1991 & -256;
      if (r2005) {
        r5 = 288;
        break;
      } else {
        r5 = 289;
        break;
      }
     case 288:
      r2007 = r2006 | 2;
      HEAP32[r1990 >> 2] = r2007;
      HEAP32[r2001 >> 2] = 1;
      r5 = 299;
      break;
     case 289:
      HEAP32[r1990 >> 2] = r2006;
      HEAP32[r2001 >> 2] = 1;
      r5 = 299;
      break;
     case 290:
      r2008 = r1988;
      r2009 = HEAP32[r2008 >> 2];
      r2010 = r2009 | 0;
      r2011 = r1995 | 0;
      r2012 = HEAPF32[r2011 >> 2];
      r2013 = r2010 > r2012;
      r2014 = r1991 & -256;
      if (r2013) {
        r5 = 291;
        break;
      } else {
        r5 = 292;
        break;
      }
     case 291:
      r2015 = r2014 | 2;
      HEAP32[r1990 >> 2] = r2015;
      HEAP32[r2008 >> 2] = 1;
      r5 = 299;
      break;
     case 292:
      HEAP32[r1990 >> 2] = r2014;
      HEAP32[r2008 >> 2] = 1;
      r5 = 299;
      break;
     case 293:
      r2016 = r1988 | 0;
      r2017 = HEAPF32[r2016 >> 2];
      r2018 = r1995;
      r2019 = HEAP32[r2018 >> 2];
      r2020 = r2019 | 0;
      r2021 = r2017 > r2020;
      r2022 = r1991 & -256;
      if (r2021) {
        r5 = 294;
        break;
      } else {
        r5 = 295;
        break;
      }
     case 294:
      r2023 = r2022 | 2;
      HEAP32[r1990 >> 2] = r2023;
      r2024 = r1988;
      HEAP32[r2024 >> 2] = 1;
      r5 = 299;
      break;
     case 295:
      HEAP32[r1990 >> 2] = r2022;
      r2025 = r1988;
      HEAP32[r2025 >> 2] = 1;
      r5 = 299;
      break;
     case 296:
      r2026 = r1988 | 0;
      r2027 = HEAPF32[r2026 >> 2];
      r2028 = r1995 | 0;
      r2029 = HEAPF32[r2028 >> 2];
      r2030 = r2027 > r2029;
      r2031 = r1991 & -256;
      if (r2030) {
        r5 = 297;
        break;
      } else {
        r5 = 298;
        break;
      }
     case 297:
      r2032 = r2031 | 2;
      HEAP32[r1990 >> 2] = r2032;
      r2033 = r1988;
      HEAP32[r2033 >> 2] = 1;
      r5 = 299;
      break;
     case 298:
      HEAP32[r1990 >> 2] = r2031;
      r2034 = r1988;
      HEAP32[r2034 >> 2] = 1;
      r5 = 299;
      break;
     case 299:
      r2035 = r132 + 4 | 0;
      r2036 = HEAP32[r2035 >> 2];
      r2037 = r2036 & 127;
      r2038 = 5309552 + (r2037 << 2) | 0;
      r136 = r2038;
      r137 = r137;
      r138 = r138;
      r132 = r2035;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r2036;
      r5 = 376;
      break;
     case 300:
      r2039 = r142 >>> 23;
      r2040 = r141 + (r2039 << 3) | 0;
      r2041 = r141 + (r2039 << 3) + 4 | 0;
      r2042 = r2041;
      r2043 = HEAP32[r2042 >> 2];
      r2044 = r2043 << 8;
      r2045 = r2044 & 65280;
      r2046 = r2039 + 1 | 0;
      r2047 = r141 + (r2046 << 3) | 0;
      r2048 = r141 + (r2046 << 3) + 4 | 0;
      r2049 = r2048;
      r2050 = HEAP32[r2049 >> 2];
      r2051 = r2050 & 255;
      r2052 = r2045 | r2051;
      if ((r2052 | 0) == 771) {
        r5 = 301;
        break;
      } else if ((r2052 | 0) == 774) {
        r5 = 304;
        break;
      } else if ((r2052 | 0) == 1539) {
        r5 = 307;
        break;
      } else if ((r2052 | 0) == 1542) {
        r5 = 310;
        break;
      } else {
        r594 = r142;
        r5 = 51;
        break;
      }
     case 301:
      r2053 = r2040;
      r2054 = HEAP32[r2053 >> 2];
      r2055 = r2047;
      r2056 = HEAP32[r2055 >> 2];
      r2057 = (r2054 | 0) < (r2056 | 0);
      r2058 = r2043 & -256;
      if (r2057) {
        r5 = 303;
        break;
      } else {
        r5 = 302;
        break;
      }
     case 302:
      r2059 = r2058 | 2;
      HEAP32[r2042 >> 2] = r2059;
      HEAP32[r2053 >> 2] = 1;
      r5 = 313;
      break;
     case 303:
      HEAP32[r2042 >> 2] = r2058;
      HEAP32[r2053 >> 2] = 1;
      r5 = 313;
      break;
     case 304:
      r2060 = r2040;
      r2061 = HEAP32[r2060 >> 2];
      r2062 = r2061 | 0;
      r2063 = r2047 | 0;
      r2064 = HEAPF32[r2063 >> 2];
      r2065 = r2062 < r2064;
      r2066 = r2043 & -256;
      if (r2065) {
        r5 = 306;
        break;
      } else {
        r5 = 305;
        break;
      }
     case 305:
      r2067 = r2066 | 2;
      HEAP32[r2042 >> 2] = r2067;
      HEAP32[r2060 >> 2] = 1;
      r5 = 313;
      break;
     case 306:
      HEAP32[r2042 >> 2] = r2066;
      HEAP32[r2060 >> 2] = 1;
      r5 = 313;
      break;
     case 307:
      r2068 = r2040 | 0;
      r2069 = HEAPF32[r2068 >> 2];
      r2070 = r2047;
      r2071 = HEAP32[r2070 >> 2];
      r2072 = r2071 | 0;
      r2073 = r2069 < r2072;
      r2074 = r2043 & -256;
      if (r2073) {
        r5 = 309;
        break;
      } else {
        r5 = 308;
        break;
      }
     case 308:
      r2075 = r2074 | 2;
      HEAP32[r2042 >> 2] = r2075;
      r2076 = r2040;
      HEAP32[r2076 >> 2] = 1;
      r5 = 313;
      break;
     case 309:
      HEAP32[r2042 >> 2] = r2074;
      r2077 = r2040;
      HEAP32[r2077 >> 2] = 1;
      r5 = 313;
      break;
     case 310:
      r2078 = r2040 | 0;
      r2079 = HEAPF32[r2078 >> 2];
      r2080 = r2047 | 0;
      r2081 = HEAPF32[r2080 >> 2];
      r2082 = r2079 < r2081;
      r2083 = r2043 & -256;
      if (r2082) {
        r5 = 312;
        break;
      } else {
        r5 = 311;
        break;
      }
     case 311:
      r2084 = r2083 | 2;
      HEAP32[r2042 >> 2] = r2084;
      r2085 = r2040;
      HEAP32[r2085 >> 2] = 1;
      r5 = 313;
      break;
     case 312:
      HEAP32[r2042 >> 2] = r2083;
      r2086 = r2040;
      HEAP32[r2086 >> 2] = 1;
      r5 = 313;
      break;
     case 313:
      r2087 = r132 + 4 | 0;
      r2088 = HEAP32[r2087 >> 2];
      r2089 = r2088 & 127;
      r2090 = 5309552 + (r2089 << 2) | 0;
      r136 = r2090;
      r137 = r137;
      r138 = r138;
      r132 = r2087;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r2088;
      r5 = 376;
      break;
     case 314:
      r2091 = r142 >>> 23;
      r2092 = r141 + (r2091 << 3) | 0;
      r2093 = r142 >>> 7;
      r2094 = r2093 & 127;
      r2095 = r142 >>> 14;
      r2096 = r2095 & 511;
      r2097 = r141 + (r2096 << 3) | 0;
      _mrb_ary_new_from_values(r46, r2, r2094, r2097);
      r2098 = r2092;
      r250 = r1391 | 0;
      r2099 = HEAP32[r250 >> 2];
      r253 = r1391 + 4 | 0;
      r2100 = HEAP32[r253 >> 2];
      r255 = r2098 | 0;
      HEAP32[r255 >> 2] = r2099;
      r256 = r2098 + 4 | 0;
      HEAP32[r256 >> 2] = r2100;
      _mrb_gc_arena_restore(r2, r83);
      r2101 = r132 + 4 | 0;
      r2102 = HEAP32[r2101 >> 2];
      r2103 = r2102 & 127;
      r2104 = 5309552 + (r2103 << 2) | 0;
      r136 = r2104;
      r137 = r137;
      r138 = r138;
      r132 = r2101;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r2102;
      r5 = 376;
      break;
     case 315:
      r2105 = r142 >>> 23;
      r2106 = r141 + (r2105 << 3) | 0;
      r2107 = r142 >>> 14;
      r2108 = r2107 & 511;
      r2109 = r141 + (r2108 << 3) | 0;
      _mrb_ary_splat(r47, r2, r2109);
      _mrb_ary_concat(r2, r2106, r47);
      _mrb_gc_arena_restore(r2, r83);
      r2110 = r132 + 4 | 0;
      r2111 = HEAP32[r2110 >> 2];
      r2112 = r2111 & 127;
      r2113 = 5309552 + (r2112 << 2) | 0;
      r136 = r2113;
      r137 = r137;
      r138 = r138;
      r132 = r2110;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r2111;
      r5 = 376;
      break;
     case 316:
      r2114 = r142 >>> 23;
      r2115 = r141 + (r2114 << 3) | 0;
      r2116 = r142 >>> 14;
      r2117 = r2116 & 511;
      r2118 = r141 + (r2117 << 3) | 0;
      _mrb_ary_push(r2, r2115, r2118);
      r2119 = r132 + 4 | 0;
      r2120 = HEAP32[r2119 >> 2];
      r2121 = r2120 & 127;
      r2122 = 5309552 + (r2121 << 2) | 0;
      r136 = r2122;
      r137 = r137;
      r138 = r138;
      r132 = r2119;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r2120;
      r5 = 376;
      break;
     case 317:
      r2123 = r142 >>> 23;
      r2124 = r142 >>> 7;
      r2125 = r2124 & 127;
      r2126 = r142 >>> 14;
      r2127 = r2126 & 511;
      r2128 = r141 + (r2127 << 3) | 0;
      r2129 = r2128;
      r150 = r2129 | 0;
      r2130 = HEAP32[r150 >> 2];
      r152 = r2129 + 4 | 0;
      r2131 = HEAP32[r152 >> 2];
      r154 = r1392 | 0;
      HEAP32[r154 >> 2] = r2130;
      r155 = r1392 + 4 | 0;
      HEAP32[r155 >> 2] = r2131;
      r2132 = 0;
      r2133 = 255;
      r2134 = r2130 & r2132;
      r2135 = r2131 & r2133;
      r2136 = 0;
      r2137 = 15;
      r2138 = (r2134 | 0) == (r2136 | 0) & (r2135 | 0) == (r2137 | 0);
      if (r2138) {
        r5 = 321;
        break;
      } else {
        r5 = 318;
        break;
      }
     case 318:
      r2139 = (r2125 | 0) == 0;
      if (r2139) {
        r5 = 319;
        break;
      } else {
        r5 = 320;
        break;
      }
     case 319:
      r2140 = r141 + (r2123 << 3) | 0;
      r2141 = r2140;
      r731 = r2141 | 0;
      HEAP32[r731 >> 2] = r2130;
      r733 = r2141 + 4 | 0;
      HEAP32[r733 >> 2] = r2131;
      r5 = 322;
      break;
     case 320:
      r2142 = r141 + (r2123 << 3) + 4 | 0;
      r2143 = r2142;
      r2144 = HEAP32[r2143 >> 2];
      r2145 = r2144 & -256;
      HEAP32[r2143 >> 2] = r2145;
      r2146 = r141 + (r2123 << 3) | 0;
      r2147 = r2146;
      HEAP32[r2147 >> 2] = 0;
      r5 = 322;
      break;
     case 321:
      r2148 = r141 + (r2123 << 3) | 0;
      _mrb_ary_ref(r49, r48, r2125);
      r2149 = r2148;
      r769 = r1393 | 0;
      r2150 = HEAP32[r769 >> 2];
      r772 = r1393 + 4 | 0;
      r2151 = HEAP32[r772 >> 2];
      r150 = r2149 | 0;
      HEAP32[r150 >> 2] = r2150;
      r152 = r2149 + 4 | 0;
      HEAP32[r152 >> 2] = r2151;
      r5 = 322;
      break;
     case 322:
      r2152 = r132 + 4 | 0;
      r2153 = HEAP32[r2152 >> 2];
      r2154 = r2153 & 127;
      r2155 = 5309552 + (r2154 << 2) | 0;
      r136 = r2155;
      r137 = r137;
      r138 = r138;
      r132 = r2152;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r2153;
      r5 = 376;
      break;
     case 323:
      r2156 = r142 >>> 14;
      r2157 = r2156 & 511;
      r2158 = r141 + (r2157 << 3) | 0;
      r2159 = r142 >>> 7;
      r2160 = r2159 & 127;
      r2161 = r142 >>> 23;
      r2162 = r141 + (r2161 << 3) | 0;
      _mrb_ary_set(r2, r2158, r2160, r2162);
      r2163 = r132 + 4 | 0;
      r2164 = HEAP32[r2163 >> 2];
      r2165 = r2164 & 127;
      r2166 = 5309552 + (r2165 << 2) | 0;
      r136 = r2166;
      r137 = r137;
      r138 = r138;
      r132 = r2163;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r2164;
      r5 = 376;
      break;
     case 324:
      r2167 = r142 >>> 23;
      r2168 = r141 + (r2167 << 3) | 0;
      r2169 = r141 + (r2167 << 3) + 4 | 0;
      r2170 = r2169;
      r2171 = HEAP32[r2170 >> 2];
      r2172 = r142 >>> 14;
      r2173 = r2172 & 511;
      r2174 = r142 >>> 7;
      r2175 = r2174 & 127;
      r2176 = r2171 & 255;
      r2177 = (r2176 | 0) == 15;
      if (r2177) {
        r5 = 327;
        break;
      } else {
        r5 = 325;
        break;
      }
     case 325:
      _mrb_ary_new_capa(r50, r2, 0);
      r2178 = r2168;
      r731 = r1396 | 0;
      r2179 = HEAP32[r731 >> 2];
      r733 = r1396 + 4 | 0;
      r2180 = HEAP32[r733 >> 2];
      r735 = r2178 | 0;
      HEAP32[r735 >> 2] = r2179;
      r737 = r2178 + 4 | 0;
      HEAP32[r737 >> 2] = r2180;
      r2181 = (r2175 | 0) == 0;
      if (r2181) {
        r5 = 336;
        break;
      } else {
        r2182 = r2175;
        r2183 = r2167;
        r5 = 326;
        break;
      }
     case 326:
      r2184 = r2183 + 1 | 0;
      r2185 = r2182 - 1 | 0;
      r2186 = r141 + (r2184 << 3) + 4 | 0;
      r2187 = r2186;
      r2188 = HEAP32[r2187 >> 2];
      r2189 = r2188 & -256;
      HEAP32[r2187 >> 2] = r2189;
      r2190 = r141 + (r2184 << 3) | 0;
      r2191 = r2190;
      HEAP32[r2191 >> 2] = 0;
      r2192 = (r2185 | 0) == 0;
      if (r2192) {
        r5 = 336;
        break;
      } else {
        r2182 = r2185;
        r2183 = r2184;
        r5 = 326;
        break;
      }
     case 327:
      r2193 = r2168;
      r2194 = HEAP32[r2193 >> 2];
      r2195 = r2194 + 12 | 0;
      r2196 = r2195;
      r2197 = HEAP32[r2196 >> 2];
      r2198 = r2173 + r2175 | 0;
      r2199 = (r2197 | 0) > (r2198 | 0);
      r2200 = r2167 + 1 | 0;
      if (r2199) {
        r5 = 328;
        break;
      } else {
        r5 = 331;
        break;
      }
     case 328:
      r2201 = r2197 - r2198 | 0;
      r2202 = r2194 + 20 | 0;
      r2203 = r2202;
      r2204 = HEAP32[r2203 >> 2];
      r2205 = r2204 + (r2173 << 3) | 0;
      _mrb_ary_new_elts(r51, r2, r2201, r2205);
      r2206 = r2168;
      r150 = r1394 | 0;
      r2207 = HEAP32[r150 >> 2];
      r152 = r1394 + 4 | 0;
      r2208 = HEAP32[r152 >> 2];
      r154 = r2206 | 0;
      HEAP32[r154 >> 2] = r2207;
      r155 = r2206 + 4 | 0;
      HEAP32[r155 >> 2] = r2208;
      r2209 = (r2175 | 0) == 0;
      if (r2209) {
        r5 = 336;
        break;
      } else {
        r5 = 329;
        break;
      }
     case 329:
      r2210 = r2197 - 1 | 0;
      r2211 = r2200;
      r2212 = r2175;
      r5 = 330;
      break;
     case 330:
      r2213 = r2212 - 1 | 0;
      r2214 = r2211 + 1 | 0;
      r2215 = r141 + (r2211 << 3) | 0;
      r2216 = 1 - r2212 | 0;
      r2217 = r2210 + r2216 | 0;
      r2218 = HEAP32[r2203 >> 2];
      r2219 = r2218 + (r2217 << 3) | 0;
      r2220 = r2219;
      r2221 = r2215;
      r154 = r2220 | 0;
      r2222 = HEAP32[r154 >> 2];
      r155 = r2220 + 4 | 0;
      r2223 = HEAP32[r155 >> 2];
      r788 = r2221 | 0;
      HEAP32[r788 >> 2] = r2222;
      r789 = r2221 + 4 | 0;
      HEAP32[r789 >> 2] = r2223;
      r2224 = (r2213 | 0) == 0;
      if (r2224) {
        r5 = 336;
        break;
      } else {
        r2211 = r2214;
        r2212 = r2213;
        r5 = 330;
        break;
      }
     case 331:
      _mrb_ary_new_capa(r52, r2, 0);
      r2225 = r2168;
      r731 = r1395 | 0;
      r2226 = HEAP32[r731 >> 2];
      r733 = r1395 + 4 | 0;
      r2227 = HEAP32[r733 >> 2];
      r735 = r2225 | 0;
      HEAP32[r735 >> 2] = r2226;
      r737 = r2225 + 4 | 0;
      HEAP32[r737 >> 2] = r2227;
      r2228 = (r2173 | 0) < (r2197 | 0);
      if (r2228) {
        r5 = 332;
        break;
      } else {
        r2229 = 0;
        r5 = 334;
        break;
      }
     case 332:
      r2230 = r2194 + 20 | 0;
      r2231 = r2230;
      r2232 = r2197 - r2173 | 0;
      r2233 = 0;
      r2234 = r2173;
      r5 = 333;
      break;
     case 333:
      r2235 = r2233 + r2200 | 0;
      r2236 = r141 + (r2235 << 3) | 0;
      r2237 = HEAP32[r2231 >> 2];
      r2238 = r2237 + (r2234 << 3) | 0;
      r2239 = r2238;
      r2240 = r2236;
      r212 = r2239 | 0;
      r2241 = HEAP32[r212 >> 2];
      r213 = r2239 + 4 | 0;
      r2242 = HEAP32[r213 >> 2];
      r321 = r2240 | 0;
      HEAP32[r321 >> 2] = r2241;
      r322 = r2240 + 4 | 0;
      HEAP32[r322 >> 2] = r2242;
      r2243 = r2233 + 1 | 0;
      r2244 = r2243 + r2173 | 0;
      r2245 = (r2243 | 0) == (r2232 | 0);
      if (r2245) {
        r2229 = r2232;
        r5 = 334;
        break;
      } else {
        r2233 = r2243;
        r2234 = r2244;
        r5 = 333;
        break;
      }
     case 334:
      r2246 = (r2229 | 0) < (r2175 | 0);
      if (r2246) {
        r2247 = r2229;
        r5 = 335;
        break;
      } else {
        r5 = 336;
        break;
      }
     case 335:
      r2248 = r2247 + r2200 | 0;
      r2249 = r141 + (r2248 << 3) + 4 | 0;
      r2250 = r2249;
      r2251 = HEAP32[r2250 >> 2];
      r2252 = r2251 & -256;
      HEAP32[r2250 >> 2] = r2252;
      r2253 = r141 + (r2248 << 3) | 0;
      r2254 = r2253;
      HEAP32[r2254 >> 2] = 0;
      r2255 = r2247 + 1 | 0;
      r2256 = (r2255 | 0) == (r2175 | 0);
      if (r2256) {
        r5 = 336;
        break;
      } else {
        r2247 = r2255;
        r5 = 335;
        break;
      }
     case 336:
      _mrb_gc_arena_restore(r2, r83);
      r2257 = r132 + 4 | 0;
      r2258 = HEAP32[r2257 >> 2];
      r2259 = r2258 & 127;
      r2260 = 5309552 + (r2259 << 2) | 0;
      r136 = r2260;
      r137 = r137;
      r138 = r138;
      r132 = r2257;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r2258;
      r5 = 376;
      break;
     case 337:
      r2261 = r142 >>> 23;
      r2262 = r141 + (r2261 << 3) | 0;
      r2263 = r142 >>> 7;
      r2264 = r2263 & 65535;
      r2265 = r139 + (r2264 << 3) | 0;
      _mrb_str_literal(r53, r2, r2265);
      r2266 = r2262;
      r150 = r1397 | 0;
      r2267 = HEAP32[r150 >> 2];
      r152 = r1397 + 4 | 0;
      r2268 = HEAP32[r152 >> 2];
      r154 = r2266 | 0;
      HEAP32[r154 >> 2] = r2267;
      r155 = r2266 + 4 | 0;
      HEAP32[r155 >> 2] = r2268;
      _mrb_gc_arena_restore(r2, r83);
      r2269 = r132 + 4 | 0;
      r2270 = HEAP32[r2269 >> 2];
      r2271 = r2270 & 127;
      r2272 = 5309552 + (r2271 << 2) | 0;
      r136 = r2272;
      r137 = r137;
      r138 = r138;
      r132 = r2269;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r2270;
      r5 = 376;
      break;
     case 338:
      r2273 = r142 >>> 23;
      r2274 = r141 + (r2273 << 3) | 0;
      r2275 = r142 >>> 14;
      r2276 = r2275 & 511;
      r2277 = r141 + (r2276 << 3) | 0;
      _mrb_str_concat(r2, r2274, r2277);
      r2278 = r132 + 4 | 0;
      r2279 = HEAP32[r2278 >> 2];
      r2280 = r2279 & 127;
      r2281 = 5309552 + (r2280 << 2) | 0;
      r136 = r2281;
      r137 = r137;
      r138 = r138;
      r132 = r2278;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r2279;
      r5 = 376;
      break;
     case 339:
      r2282 = r142 >>> 14;
      r2283 = r2282 & 511;
      r2284 = r142 >>> 7;
      r2285 = r2284 & 127;
      r2286 = r2285 << 1;
      r2287 = r2286 + r2283 | 0;
      _mrb_hash_new_capa(r54, r2, r2285);
      r2288 = (r2285 | 0) == 0;
      if (r2288) {
        r5 = 341;
        break;
      } else {
        r2289 = r2283;
        r5 = 340;
        break;
      }
     case 340:
      r2290 = r141 + (r2289 << 3) | 0;
      r2291 = r2289 + 1 | 0;
      r2292 = r141 + (r2291 << 3) | 0;
      _mrb_hash_set(r2, r54, r2290, r2292);
      r2293 = r2289 + 2 | 0;
      r2294 = (r2293 | 0) < (r2287 | 0);
      if (r2294) {
        r2289 = r2293;
        r5 = 340;
        break;
      } else {
        r5 = 341;
        break;
      }
     case 341:
      r2295 = r142 >>> 23;
      r2296 = r141 + (r2295 << 3) | 0;
      r2297 = r2296;
      r769 = r1398 | 0;
      r2298 = HEAP32[r769 >> 2];
      r772 = r1398 + 4 | 0;
      r2299 = HEAP32[r772 >> 2];
      r150 = r2297 | 0;
      HEAP32[r150 >> 2] = r2298;
      r152 = r2297 + 4 | 0;
      HEAP32[r152 >> 2] = r2299;
      _mrb_gc_arena_restore(r2, r83);
      r2300 = r132 + 4 | 0;
      r2301 = HEAP32[r2300 >> 2];
      r2302 = r2301 & 127;
      r2303 = 5309552 + (r2302 << 2) | 0;
      r136 = r2303;
      r137 = r137;
      r138 = r138;
      r132 = r2300;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r2301;
      r5 = 376;
      break;
     case 342:
      r2304 = r142 >>> 7;
      r2305 = r2304 & 2;
      r2306 = (r2305 | 0) == 0;
      r2307 = r138;
      r2308 = HEAP32[r2307 >> 2];
      r2309 = r2308 << 16;
      r2310 = r2309 >> 16;
      r2311 = r142 >>> 9;
      r2312 = r2311 & 16383;
      r2313 = r2310 + r2312 | 0;
      r2314 = HEAP32[r537 >> 2];
      r2315 = r2314 + (r2313 << 2) | 0;
      r2316 = HEAP32[r2315 >> 2];
      if (r2306) {
        r5 = 344;
        break;
      } else {
        r5 = 343;
        break;
      }
     case 343:
      r2317 = _mrb_closure_new(r2, r2316);
      r2318 = r2317;
      r5 = 345;
      break;
     case 344:
      r2319 = _mrb_proc_new(r2, r2316);
      r2318 = r2319;
      r5 = 345;
      break;
     case 345:
      r2320 = r2304 & 1;
      r2321 = (r2320 | 0) == 0;
      if (r2321) {
        r5 = 347;
        break;
      } else {
        r5 = 346;
        break;
      }
     case 346:
      r2322 = r2318;
      r2323 = HEAP32[r2322 >> 2];
      r2324 = r2323 | 524288;
      HEAP32[r2322 >> 2] = r2324;
      r5 = 347;
      break;
     case 347:
      r2325 = r142 >>> 23;
      r2326 = r141 + (r2325 << 3) | 0;
      r2327 = r2318 | 0;
      _mrb_obj_value139(r55, r2327);
      r2328 = r2326;
      r2329 = r1399 | 0;
      r2330 = HEAP32[r2329 >> 2];
      r2331 = r1399 + 4 | 0;
      r2332 = HEAP32[r2331 >> 2];
      r250 = r2328 | 0;
      HEAP32[r250 >> 2] = r2330;
      r253 = r2328 + 4 | 0;
      HEAP32[r253 >> 2] = r2332;
      _mrb_gc_arena_restore(r2, r83);
      r2333 = r132 + 4 | 0;
      r2334 = HEAP32[r2333 >> 2];
      r2335 = r2334 & 127;
      r2336 = 5309552 + (r2335 << 2) | 0;
      r136 = r2336;
      r137 = r137;
      r138 = r138;
      r132 = r2333;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r2334;
      r5 = 376;
      break;
     case 348:
      r2337 = r142 >>> 23;
      r2338 = r141 + (r2337 << 3) | 0;
      r2339 = HEAP32[r1401 >> 2];
      r2340 = r2339 | 0;
      _mrb_obj_value139(r56, r2340);
      r2341 = r2338;
      r735 = r1402 | 0;
      r2342 = HEAP32[r735 >> 2];
      r737 = r1402 + 4 | 0;
      r2343 = HEAP32[r737 >> 2];
      r603 = r2341 | 0;
      HEAP32[r603 >> 2] = r2342;
      r605 = r2341 + 4 | 0;
      HEAP32[r605 >> 2] = r2343;
      r2344 = r132 + 4 | 0;
      r2345 = HEAP32[r2344 >> 2];
      r2346 = r2345 & 127;
      r2347 = 5309552 + (r2346 << 2) | 0;
      r136 = r2347;
      r137 = r137;
      r138 = r138;
      r132 = r2344;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r2345;
      r5 = 376;
      break;
     case 349:
      r2348 = r142 >>> 23;
      r2349 = r142 >>> 14;
      r2350 = r2349 & 511;
      r2351 = r140 + (r2350 << 1) | 0;
      r2352 = HEAP16[r2351 >> 1];
      r2353 = r141 + (r2348 << 3) | 0;
      r2354 = r2353;
      r150 = r2354 | 0;
      r2355 = HEAP32[r150 >> 2];
      r152 = r2354 + 4 | 0;
      r2356 = HEAP32[r152 >> 2];
      r154 = r1403 | 0;
      HEAP32[r154 >> 2] = r2355;
      r155 = r1403 + 4 | 0;
      HEAP32[r155 >> 2] = r2356;
      r2357 = r2348 + 1 | 0;
      r2358 = r141 + (r2357 << 3) | 0;
      r2359 = r2358;
      r2360 = r2359 | 0;
      r2361 = HEAP32[r2360 >> 2];
      r2362 = r2359 + 4 | 0;
      r2363 = HEAP32[r2362 >> 2];
      r2364 = r1404 | 0;
      HEAP32[r2364 >> 2] = r2361;
      r2365 = r1404 + 4 | 0;
      HEAP32[r2365 >> 2] = r2363;
      r2366 = -1;
      r2367 = 255;
      r2368 = r2355 & r2366;
      r2369 = r2356 & r2367;
      r2370 = 0;
      r2371 = 0;
      r2372 = (r2368 | 0) == (r2370 | 0) & (r2369 | 0) == (r2371 | 0);
      if (r2372) {
        r5 = 350;
        break;
      } else {
        r5 = 351;
        break;
      }
     case 350:
      r2373 = HEAP32[r129 >> 2];
      r2374 = r2373 + 28 | 0;
      r2375 = HEAP32[r2374 >> 2];
      r2376 = r2375 | 0;
      _mrb_obj_value139(r59, r2376);
      r2329 = r1405 | 0;
      r2377 = HEAP32[r2329 >> 2];
      r2331 = r1405 + 4 | 0;
      r2378 = HEAP32[r2331 >> 2];
      r250 = r1403 | 0;
      HEAP32[r250 >> 2] = r2377;
      r253 = r1403 + 4 | 0;
      HEAP32[r253 >> 2] = r2378;
      r5 = 351;
      break;
     case 351:
      r2379 = _mrb_vm_define_class(r2, r57, r58, r2352);
      r2380 = r2379 | 0;
      _mrb_obj_value139(r60, r2380);
      r769 = r1406 | 0;
      r2381 = HEAP32[r769 >> 2];
      r772 = r1406 + 4 | 0;
      r2382 = HEAP32[r772 >> 2];
      r150 = r2354 | 0;
      HEAP32[r150 >> 2] = r2381;
      r152 = r2354 + 4 | 0;
      HEAP32[r152 >> 2] = r2382;
      _mrb_gc_arena_restore(r2, r83);
      r2383 = r132 + 4 | 0;
      r2384 = HEAP32[r2383 >> 2];
      r2385 = r2384 & 127;
      r2386 = 5309552 + (r2385 << 2) | 0;
      r136 = r2386;
      r137 = r137;
      r138 = r138;
      r132 = r2383;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r2384;
      r5 = 376;
      break;
     case 352:
      r2387 = r142 >>> 23;
      r2388 = r142 >>> 14;
      r2389 = r2388 & 511;
      r2390 = r140 + (r2389 << 1) | 0;
      r2391 = HEAP16[r2390 >> 1];
      r2392 = r141 + (r2387 << 3) | 0;
      r2393 = r2392;
      r150 = r2393 | 0;
      r2394 = HEAP32[r150 >> 2];
      r152 = r2393 + 4 | 0;
      r2395 = HEAP32[r152 >> 2];
      r154 = r1407 | 0;
      HEAP32[r154 >> 2] = r2394;
      r155 = r1407 + 4 | 0;
      HEAP32[r155 >> 2] = r2395;
      r2396 = -1;
      r2397 = 255;
      r2398 = r2394 & r2396;
      r2399 = r2395 & r2397;
      r2400 = 0;
      r2401 = 0;
      r2402 = (r2398 | 0) == (r2400 | 0) & (r2399 | 0) == (r2401 | 0);
      if (r2402) {
        r5 = 353;
        break;
      } else {
        r5 = 354;
        break;
      }
     case 353:
      r2403 = HEAP32[r129 >> 2];
      r2404 = r2403 + 28 | 0;
      r2405 = HEAP32[r2404 >> 2];
      r2406 = r2405 | 0;
      _mrb_obj_value139(r62, r2406);
      r2329 = r1408 | 0;
      r2407 = HEAP32[r2329 >> 2];
      r2331 = r1408 + 4 | 0;
      r2408 = HEAP32[r2331 >> 2];
      r250 = r1407 | 0;
      HEAP32[r250 >> 2] = r2407;
      r253 = r1407 + 4 | 0;
      HEAP32[r253 >> 2] = r2408;
      r5 = 354;
      break;
     case 354:
      r2409 = _mrb_vm_define_module(r2, r61, r2391);
      r2410 = r2409 | 0;
      _mrb_obj_value139(r63, r2410);
      r769 = r1409 | 0;
      r2411 = HEAP32[r769 >> 2];
      r772 = r1409 + 4 | 0;
      r2412 = HEAP32[r772 >> 2];
      r150 = r2393 | 0;
      HEAP32[r150 >> 2] = r2411;
      r152 = r2393 + 4 | 0;
      HEAP32[r152 >> 2] = r2412;
      _mrb_gc_arena_restore(r2, r83);
      r2413 = r132 + 4 | 0;
      r2414 = HEAP32[r2413 >> 2];
      r2415 = r2414 & 127;
      r2416 = 5309552 + (r2415 << 2) | 0;
      r136 = r2416;
      r137 = r137;
      r138 = r138;
      r132 = r2413;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r2414;
      r5 = 376;
      break;
     case 355:
      r2417 = r142 >>> 23;
      r2418 = r141 + (r2417 << 3) | 0;
      r2419 = r2418;
      r769 = r2419 | 0;
      r2420 = HEAP32[r769 >> 2];
      r772 = r2419 + 4 | 0;
      r2421 = HEAP32[r772 >> 2];
      r150 = r1410 | 0;
      HEAP32[r150 >> 2] = r2420;
      r152 = r1410 + 4 | 0;
      HEAP32[r152 >> 2] = r2421;
      r2422 = _cipush(r2);
      r2423 = r132 + 4 | 0;
      r2424 = r2422 + 20 | 0;
      HEAP32[r2424 >> 2] = r2423;
      r2425 = r2422 + 24 | 0;
      HEAP32[r2425 >> 2] = r2417;
      r2426 = r2422 | 0;
      HEAP16[r2426 >> 1] = 0;
      r2427 = HEAP32[r130 >> 2];
      r2428 = HEAP32[r656 >> 2];
      r2429 = r2427;
      r2430 = r2428;
      r2431 = r2429 - r2430 | 0;
      r2432 = r2431 >> 3;
      r2433 = r2422 + 8 | 0;
      HEAP32[r2433 >> 2] = r2432;
      r2434 = r2422 + 16 | 0;
      HEAP32[r2434 >> 2] = 0;
      r2435 = HEAP32[r1411 >> 2];
      r2436 = r2435;
      r2437 = r2422 + 28 | 0;
      HEAP32[r2437 >> 2] = r2436;
      r2438 = HEAP32[r130 >> 2];
      r2439 = r2438 + (r2417 << 3) | 0;
      HEAP32[r130 >> 2] = r2439;
      r2440 = r138;
      r2441 = HEAP32[r2440 >> 2];
      r2442 = r2441 << 16;
      r2443 = r2442 >> 16;
      r2444 = r142 >>> 7;
      r2445 = r2444 & 65535;
      r2446 = r2443 + r2445 | 0;
      r2447 = HEAP32[r537 >> 2];
      r2448 = r2447 + (r2446 << 2) | 0;
      r2449 = HEAP32[r2448 >> 2];
      r2450 = _mrb_proc_new(r2, r2449);
      r2451 = HEAP32[r2437 >> 2];
      r2452 = r2450 + 16 | 0;
      HEAP32[r2452 >> 2] = r2451;
      r2453 = r2422 + 4 | 0;
      HEAP32[r2453 >> 2] = r2450;
      r2454 = r2450;
      r2455 = HEAP32[r2454 >> 2];
      r2456 = r2455 & 262144;
      r2457 = (r2456 | 0) == 0;
      if (r2457) {
        r5 = 358;
        break;
      } else {
        r5 = 356;
        break;
      }
     case 356:
      r2458 = HEAP32[r130 >> 2];
      r2459 = r2450 + 12 | 0;
      r2460 = r2459;
      r2461 = HEAP32[r2460 >> 2];
      FUNCTION_TABLE[r2461](r65, r2, r64);
      r2462 = r2458;
      r735 = r1412 | 0;
      r2463 = HEAP32[r735 >> 2];
      r737 = r1412 + 4 | 0;
      r2464 = HEAP32[r737 >> 2];
      r603 = r2462 | 0;
      HEAP32[r603 >> 2] = r2463;
      r605 = r2462 + 4 | 0;
      HEAP32[r605 >> 2] = r2464;
      _mrb_gc_arena_restore(r2, r83);
      r2465 = HEAP32[r493 >> 2];
      r2466 = (r2465 | 0) == 0;
      if (r2466) {
        r5 = 357;
        break;
      } else {
        r90 = r137;
        r91 = r138;
        r92 = r132;
        r93 = r141;
        r94 = r129;
        r95 = r493;
        r5 = 143;
        break;
      }
     case 357:
      r2467 = HEAP32[r656 >> 2];
      r2468 = HEAP32[r129 >> 2];
      r2469 = r2468 + 8 | 0;
      r2470 = HEAP32[r2469 >> 2];
      r2471 = r2467 + (r2470 << 3) | 0;
      HEAP32[r130 >> 2] = r2471;
      _cipop(r2);
      r2472 = HEAP32[r2423 >> 2];
      r2473 = r2472 & 127;
      r2474 = 5309552 + (r2473 << 2) | 0;
      r136 = r2474;
      r137 = r137;
      r138 = r138;
      r132 = r2423;
      r139 = r139;
      r140 = r140;
      r141 = r2471;
      r142 = r2472;
      r5 = 376;
      break;
     case 358:
      r2475 = r2450 + 12 | 0;
      r2476 = HEAP32[r2475 >> 2];
      r2477 = r2476 + 12 | 0;
      r2478 = HEAP32[r2477 >> 2];
      r2479 = r2476 + 16 | 0;
      r2480 = HEAP32[r2479 >> 2];
      r2481 = r2476 + 4 | 0;
      r2482 = r2481;
      r2483 = HEAP32[r2482 >> 2];
      r2484 = r2483 << 16;
      r2485 = r2484 >> 16;
      _stack_extend(r2, r2485, 1);
      r2486 = HEAP32[r2482 >> 2];
      r2487 = r2486 << 16;
      r2488 = r2487 >> 16;
      r2489 = r2422 + 12 | 0;
      HEAP32[r2489 >> 2] = r2488;
      r2490 = HEAP32[r130 >> 2];
      r2491 = r2476 + 8 | 0;
      r2492 = HEAP32[r2491 >> 2];
      r2493 = HEAP32[r2492 >> 2];
      r2494 = r2493 & 127;
      r2495 = 5309552 + (r2494 << 2) | 0;
      r136 = r2495;
      r137 = r137;
      r138 = r2476;
      r132 = r2492;
      r139 = r2478;
      r140 = r2480;
      r141 = r2490;
      r142 = r2493;
      r5 = 376;
      break;
     case 359:
      r2496 = r142 >>> 23;
      r2497 = r141 + (r2496 << 3) | 0;
      r2498 = r2497;
      r2499 = HEAP32[r2498 >> 2];
      r2500 = r2499;
      r2501 = r142 >>> 14;
      r2502 = r2501 & 511;
      r2503 = r140 + (r2502 << 1) | 0;
      r2504 = HEAP16[r2503 >> 1];
      r2505 = r2496 + 1 | 0;
      r2506 = r141 + (r2505 << 3) | 0;
      _mrb_define_method_vm(r2, r2500, r2504, r2506);
      _mrb_gc_arena_restore(r2, r83);
      r2507 = r132 + 4 | 0;
      r2508 = HEAP32[r2507 >> 2];
      r2509 = r2508 & 127;
      r2510 = 5309552 + (r2509 << 2) | 0;
      r136 = r2510;
      r137 = r137;
      r138 = r138;
      r132 = r2507;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r2508;
      r5 = 376;
      break;
     case 360:
      r2511 = r142 >>> 23;
      r2512 = r141 + (r2511 << 3) | 0;
      r2513 = r142 >>> 14;
      r2514 = r2513 & 511;
      r2515 = r141 + (r2514 << 3) | 0;
      _mrb_singleton_class(r66, r2, r2515);
      r2516 = r2512;
      r150 = r1413 | 0;
      r2517 = HEAP32[r150 >> 2];
      r152 = r1413 + 4 | 0;
      r2518 = HEAP32[r152 >> 2];
      r154 = r2516 | 0;
      HEAP32[r154 >> 2] = r2517;
      r155 = r2516 + 4 | 0;
      HEAP32[r155 >> 2] = r2518;
      _mrb_gc_arena_restore(r2, r83);
      r2519 = r132 + 4 | 0;
      r2520 = HEAP32[r2519 >> 2];
      r2521 = r2520 & 127;
      r2522 = 5309552 + (r2521 << 2) | 0;
      r136 = r2522;
      r137 = r137;
      r138 = r138;
      r132 = r2519;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r2520;
      r5 = 376;
      break;
     case 361:
      r2523 = HEAP32[r129 >> 2];
      r2524 = r2523 + 28 | 0;
      r2525 = HEAP32[r2524 >> 2];
      r2526 = (r2525 | 0) == 0;
      if (r2526) {
        r5 = 362;
        break;
      } else {
        r5 = 363;
        break;
      }
     case 362:
      r2527 = _mrb_class_obj_get(r2, 5325036);
      _mrb_exc_new(r67, r2, r2527, 5309856, 25);
      r2528 = r67;
      r2529 = HEAP32[r2528 >> 2];
      r2530 = r2529;
      HEAP32[r493 >> 2] = r2530;
      r90 = r137;
      r91 = r138;
      r92 = r132;
      r93 = r141;
      r94 = r129;
      r95 = r493;
      r5 = 143;
      break;
     case 363:
      r2531 = r142 >>> 23;
      r2532 = r141 + (r2531 << 3) | 0;
      r2533 = r2525 | 0;
      _mrb_obj_value139(r68, r2533);
      r2534 = r2532;
      r2329 = r1414 | 0;
      r2535 = HEAP32[r2329 >> 2];
      r2331 = r1414 + 4 | 0;
      r2536 = HEAP32[r2331 >> 2];
      r250 = r2534 | 0;
      HEAP32[r250 >> 2] = r2535;
      r253 = r2534 + 4 | 0;
      HEAP32[r253 >> 2] = r2536;
      r2537 = r132 + 4 | 0;
      r2538 = HEAP32[r2537 >> 2];
      r2539 = r2538 & 127;
      r2540 = 5309552 + (r2539 << 2) | 0;
      r136 = r2540;
      r137 = r137;
      r138 = r138;
      r132 = r2537;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r2538;
      r5 = 376;
      break;
     case 364:
      r2541 = r142 >>> 14;
      r2542 = r2541 & 511;
      r2543 = r142 >>> 23;
      r2544 = r141 + (r2543 << 3) | 0;
      r2545 = r141 + (r2542 << 3) | 0;
      r2546 = r2542 + 1 | 0;
      r2547 = r141 + (r2546 << 3) | 0;
      r2548 = r142 >>> 7;
      r2549 = r2548 & 127;
      _mrb_range_new(r69, r2, r2545, r2547, r2549);
      r2550 = r2544;
      r154 = r1400 | 0;
      r2551 = HEAP32[r154 >> 2];
      r155 = r1400 + 4 | 0;
      r2552 = HEAP32[r155 >> 2];
      r788 = r2550 | 0;
      HEAP32[r788 >> 2] = r2551;
      r789 = r2550 + 4 | 0;
      HEAP32[r789 >> 2] = r2552;
      _mrb_gc_arena_restore(r2, r83);
      r2553 = r132 + 4 | 0;
      r2554 = HEAP32[r2553 >> 2];
      r2555 = r2554 & 127;
      r2556 = 5309552 + (r2555 << 2) | 0;
      r136 = r2556;
      r137 = r137;
      r138 = r138;
      r132 = r2553;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r2554;
      r5 = 376;
      break;
     case 365:
      r2557 = r142 >>> 23;
      r2558 = r142 >>> 14;
      r2559 = r2558 & 511;
      r2560 = r142 >>> 7;
      r2561 = r2560 & 127;
      r2562 = _printf(5326192, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r2557, HEAP32[tempInt + 4 >> 2] = r2559, HEAP32[tempInt + 8 >> 2] = r2561, tempInt));
      r2563 = r132 + 4 | 0;
      r2564 = HEAP32[r2563 >> 2];
      r2565 = r2564 & 127;
      r2566 = 5309552 + (r2565 << 2) | 0;
      r136 = r2566;
      r137 = r137;
      r138 = r138;
      r132 = r2563;
      r139 = r139;
      r140 = r140;
      r141 = r141;
      r142 = r2564;
      r5 = 376;
      break;
     case 366:
      r2567 = r2 + 20 | 0;
      r2568 = HEAP32[r2567 >> 2];
      r2569 = r2568 + 36 | 0;
      r2570 = HEAP32[r2569 >> 2];
      r2571 = (r2570 | 0) == 0;
      if (r2571) {
        r5 = 368;
        break;
      } else {
        r2572 = r2570;
        r5 = 367;
        break;
      }
     case 367:
      r2573 = r2572 - 1 | 0;
      _ecall(r2, r2573);
      r2574 = (r2573 | 0) == 0;
      if (r2574) {
        r5 = 368;
        break;
      } else {
        r2572 = r2573;
        r5 = 367;
        break;
      }
     case 368:
      HEAP32[r84 >> 2] = r85;
      r2575 = r2 + 48 | 0;
      r2576 = HEAP32[r2575 >> 2];
      r2577 = (r2576 | 0) == 0;
      if (r2577) {
        r5 = 370;
        break;
      } else {
        r5 = 369;
        break;
      }
     case 369:
      r2578 = r2576 | 0;
      _mrb_obj_value139(r1, r2578);
      r5 = 375;
      break;
     case 370:
      r2579 = r1242;
      r2580 = HEAP32[r2579 >> 2];
      r2581 = r2580 >> 16;
      r2582 = r1243 + (r2581 << 3) | 0;
      r2583 = r2582;
      r2584 = r1;
      r735 = r2583 | 0;
      r2585 = HEAP32[r735 >> 2];
      r737 = r2583 + 4 | 0;
      r2586 = HEAP32[r737 >> 2];
      r603 = r2584 | 0;
      HEAP32[r603 >> 2] = r2585;
      r605 = r2584 + 4 | 0;
      HEAP32[r605 >> 2] = r2586;
      r5 = 375;
      break;
     case 371:
      r2587 = r142 >>> 7;
      r2588 = r2587 & 65535;
      r2589 = r139 + (r2588 << 3) | 0;
      r2590 = r2589;
      r2591 = r70;
      r2329 = r2590 | 0;
      r2592 = HEAP32[r2329 >> 2];
      r2331 = r2590 + 4 | 0;
      r2593 = HEAP32[r2331 >> 2];
      r250 = r2591 | 0;
      HEAP32[r250 >> 2] = r2592;
      r253 = r2591 + 4 | 0;
      HEAP32[r253 >> 2] = r2593;
      r2594 = r142 >>> 0 < 8388608;
      if (r2594) {
        r5 = 372;
        break;
      } else {
        r5 = 373;
        break;
      }
     case 372:
      r2595 = _mrb_class_obj_get(r2, 5319792);
      _mrb_exc_new3(r71, r2, r2595, r70);
      r2596 = r71;
      r5 = 374;
      break;
     case 373:
      r2597 = _mrb_class_obj_get(r2, 5325708);
      _mrb_exc_new3(r72, r2, r2597, r70);
      r2596 = r72;
      r5 = 374;
      break;
     case 374:
      r2598 = r2596;
      r2599 = HEAP32[r2598 >> 2];
      r2600 = r2599;
      HEAP32[r493 >> 2] = r2600;
      r90 = r137;
      r91 = r138;
      r92 = r132;
      r93 = r141;
      r94 = r129;
      r95 = r493;
      r5 = 143;
      break;
     case 375:
      STACKTOP = r6;
      return;
     case 376:
      r2601 = HEAP32[r136 >> 2];
      r2602 = r2601;
      if (r2602 == 51) {
        r594 = r142;
      }
      if (r2602 == 142) {
        r812 = r137;
        r813 = r138;
      }
      if (r2602 == 366) {
        r1242 = r138;
        r1243 = r141;
      }
      r5 = r2602;
      break;
    }
  } catch (e) {
    if (!e.longjmp || !(e.id in r8)) throw e;
    r9[setjmpLabels[e.id]](e.value);
  }
}
_mrb_run["X"] = 1;
function _mrb_voidp_value(r1, r2) {
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 7;
  return;
}
function _mrb_fixnum_value138(r1, r2) {
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 3;
  return;
}
function _mrb_obj_value139(r1, r2) {
  var r3;
  r3 = HEAP32[r2 >> 2] & 255;
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = r3;
  return;
}
function _envadjust(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = HEAP32[r1 + 24 >> 2];
  r5 = r1 + 20 | 0;
  r1 = HEAP32[r5 >> 2];
  if (r4 >>> 0 > r1 >>> 0) {
    return;
  }
  r6 = r2;
  r2 = r4;
  r4 = r1;
  while (1) {
    r1 = HEAP32[r2 + 40 >> 2];
    do {
      if ((r1 | 0) == 0) {
        r7 = r4;
      } else {
        if ((HEAP32[r1 + 20 >> 2] | 0) <= -1) {
          r7 = r4;
          break;
        }
        r8 = r1 + 12 | 0;
        HEAP32[r8 >> 2] = (HEAP32[r8 >> 2] - r6 >> 3 << 3) + r3 | 0;
        r7 = HEAP32[r5 >> 2];
      }
    } while (0);
    r1 = r2 + 44 | 0;
    if (r1 >>> 0 > r7 >>> 0) {
      break;
    } else {
      r2 = r1;
      r4 = r7;
    }
  }
  return;
}
function _mrb_yield_internal(r1, r2, r3, r4, r5, r6, r7) {
  var r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r8 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r9 = r3, r10 = r9 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r10];
  HEAP32[r3 + 4 >> 2] = HEAP32[r10 + 1];
  r9 = r6, r10 = r9 >> 2;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r6 >> 2] = HEAP32[r10];
  HEAP32[r6 + 4 >> 2] = HEAP32[r10 + 1];
  r10 = r8;
  r9 = r8 + 8;
  r11 = r8 + 16;
  r12 = r2 + 20 | 0;
  r13 = HEAP32[r12 >> 2];
  r14 = HEAP16[r13 >> 1];
  r15 = HEAP32[r13 + 12 >> 2];
  r13 = HEAP32[r3 >> 2];
  r3 = r13;
  r16 = _cipush(r2);
  HEAP16[r16 >> 1] = r14;
  HEAP32[r16 + 4 >> 2] = r3;
  r14 = (r2 + 8 | 0) >> 2;
  r17 = r2 + 12 | 0;
  HEAP32[r16 + 8 >> 2] = HEAP32[r14] - HEAP32[r17 >> 2] >> 3;
  HEAP32[r16 + 16 >> 2] = r4;
  HEAP32[r16 + 28 >> 2] = r7;
  r7 = r13;
  if ((HEAP32[r7 >> 2] & 262144 | 0) == 0) {
    HEAP32[r16 + 12 >> 2] = (HEAP32[HEAP32[r13 + 12 >> 2] + 4 >> 2] << 16 >> 16) + 2 | 0;
  } else {
    HEAP32[r16 + 12 >> 2] = r4 + 2 | 0;
  }
  HEAP32[r16 + 24 >> 2] = -1;
  HEAP32[r14] = (r15 << 3) + HEAP32[r14] | 0;
  _stack_extend(r2, HEAP32[r16 + 12 >> 2], 0);
  r16 = r6;
  r15 = HEAP32[r14];
  r18 = HEAP32[r16 + 4 >> 2];
  HEAP32[r15 >> 2] = HEAP32[r16 >> 2];
  HEAP32[r15 + 4 >> 2] = r18;
  if ((r4 | 0) > 0) {
    _stack_copy(HEAP32[r14] + 8 | 0, r5, r4);
  }
  r5 = (r4 + 1 << 3) + HEAP32[r14] | 0;
  _mrb_nil_value134(r10);
  r4 = r10;
  r10 = r5;
  r5 = HEAP32[r4 + 4 >> 2];
  HEAP32[r10 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r10 + 4 >> 2] = r5;
  if ((HEAP32[r7 >> 2] & 262144 | 0) == 0) {
    _mrb_run(r11, r2, r3, r6);
    r3 = r11;
    r11 = HEAP32[r3 + 4 >> 2];
    r7 = HEAP32[r3 >> 2];
    r3 = r1;
    r5 = r3 | 0;
    HEAP32[r5 >> 2] = r7;
    r10 = r3 + 4 | 0;
    HEAP32[r10 >> 2] = r11;
    STACKTOP = r8;
    return;
  } else {
    FUNCTION_TABLE[HEAP32[r13 + 12 >> 2]](r9, r2, r6);
    r6 = r9;
    r9 = HEAP32[r6 >> 2];
    r13 = HEAP32[r6 + 4 >> 2];
    HEAP32[r14] = (HEAP32[HEAP32[r12 >> 2] + 8 >> 2] << 3) + HEAP32[r17 >> 2] | 0;
    _cipop(r2);
    r11 = r13;
    r7 = r9;
    r3 = r1;
    r5 = r3 | 0;
    HEAP32[r5 >> 2] = r7;
    r10 = r3 + 4 | 0;
    HEAP32[r10 >> 2] = r11;
    STACKTOP = r8;
    return;
  }
}
_mrb_yield_internal["X"] = 1;
function _mrb_yield_argv(r1, r2, r3, r4, r5) {
  var r6, r7;
  r6 = STACKTOP;
  r7 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 4 >> 2];
  _mrb_yield_internal(r1, r2, r3, r4, r5, HEAP32[r2 + 8 >> 2], HEAP32[HEAP32[r3 >> 2] + 16 >> 2]);
  STACKTOP = r6;
  return;
}
function _uvget(r1, r2, r3, r4) {
  var r5;
  r5 = _uvenv(r2, r3);
  if ((r5 | 0) == 0) {
    _mrb_nil_value134(r1);
    return;
  } else {
    r3 = (r4 << 3) + HEAP32[r5 + 12 >> 2] | 0;
    r5 = r1;
    r1 = HEAP32[r3 + 4 >> 2];
    HEAP32[r5 >> 2] = HEAP32[r3 >> 2];
    HEAP32[r5 + 4 >> 2] = r1;
    return;
  }
}
function _uvset(r1, r2, r3, r4) {
  var r5, r6;
  r5 = STACKTOP;
  r6 = r4;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r4 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = _uvenv(HEAP32[HEAP32[HEAP32[r1 + 20 >> 2] + 4 >> 2] + 20 >> 2], r2);
  if ((r6 | 0) == 0) {
    STACKTOP = r5;
    return;
  }
  r2 = r4;
  r4 = (r3 << 3) + HEAP32[r6 + 12 >> 2] | 0;
  r3 = HEAP32[r2 + 4 >> 2];
  HEAP32[r4 >> 2] = HEAP32[r2 >> 2];
  HEAP32[r4 + 4 >> 2] = r3;
  _mrb_write_barrier(r1, r6);
  STACKTOP = r5;
  return;
}
function _ecall(r1, r2) {
  var r3, r4, r5, r6;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r4 = (r1 + 8 | 0) >> 2;
  r5 = HEAP32[r4];
  r6 = HEAP32[HEAP32[r1 + 40 >> 2] + (r2 << 2) >> 2];
  r2 = _cipush(r1);
  HEAP32[r2 + 8 >> 2] = HEAP32[r4] - HEAP32[r1 + 12 >> 2] >> 3;
  HEAP16[r2 >> 1] = HEAP16[r2 - 44 >> 1];
  HEAP32[r2 + 24 >> 2] = -1;
  HEAP32[r2 + 16 >> 2] = 0;
  HEAP32[r2 + 4 >> 2] = r6;
  HEAP32[r2 + 12 >> 2] = HEAP32[HEAP32[r6 + 12 >> 2] + 4 >> 2] << 16 >> 16;
  HEAP32[r2 + 28 >> 2] = HEAP32[r6 + 16 >> 2];
  HEAP32[r4] = (HEAP32[r2 - 44 + 12 >> 2] << 3) + HEAP32[r4] | 0;
  r4 = (r1 + 48 | 0) >> 2;
  r2 = HEAP32[r4];
  HEAP32[r4] = 0;
  _mrb_run(r3, r1, r6, r5);
  if ((HEAP32[r4] | 0) != 0) {
    STACKTOP = r3;
    return;
  }
  HEAP32[r4] = r2;
  STACKTOP = r3;
  return;
}
_ecall["X"] = 1;
function _argnum_error(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 264 | 0;
  r4 = r3 + 256;
  r5 = r1 + 20 | 0;
  r6 = HEAP32[r5 >> 2];
  r7 = HEAP16[r6 >> 1];
  r8 = r3 | 0;
  if (r7 << 16 >> 16 == 0) {
    r9 = _snprintf(r8, 256, 5324952, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r6 + 16 >> 2], HEAP32[tempInt + 4 >> 2] = r2, tempInt));
  } else {
    r6 = _mrb_sym2name(r1, r7);
    r7 = HEAP32[HEAP32[r5 >> 2] + 16 >> 2];
    r9 = _snprintf(r8, 256, 5325280, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r6, HEAP32[tempInt + 4 >> 2] = r7, HEAP32[tempInt + 8 >> 2] = r2, tempInt));
  }
  _mrb_exc_new(r4, r1, _mrb_class_obj_get(r1, 5325168), r8, r9);
  HEAP32[r1 + 48 >> 2] = HEAP32[r4 >> 2];
  STACKTOP = r3;
  return;
}
function _localjump_error(r1, r2) {
  var r3, r4, r5, r6;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 264 | 0;
  r4 = r3 + 256;
  r5 = r3 | 0;
  r6 = _snprintf(r5, 256, 5325464, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r2, tempInt));
  _mrb_exc_new(r4, r1, _mrb_class_obj_get(r1, 5325708), r5, r6);
  HEAP32[r1 + 48 >> 2] = HEAP32[r4 >> 2];
  STACKTOP = r3;
  return;
}
function _yyparse(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82;
  r2 = 0;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 1348 | 0;
  r4 = r3;
  r5 = r3 + 4 | 0;
  r6 = r3 + 132 | 0;
  r7 = r3 + 532 | 0;
  r8 = (r1 | 0) >> 2;
  r9 = r4 | 0;
  r10 = (r1 + 36 | 0) >> 2;
  r11 = r1 + 72 | 0;
  r12 = r1 + 1124 | 0;
  r13 = (r1 + 60 | 0) >> 2;
  r14 = (r1 + 64 | 0) >> 2;
  r15 = (r1 + 48 | 0) >> 2;
  r16 = (r1 + 56 | 0) >> 2;
  r17 = r1 + 52 | 0;
  r18 = (r1 + 44 | 0) >> 2;
  r19 = (r1 + 68 | 0) >> 2;
  r20 = (r1 + 40 | 0) >> 2;
  r21 = r1 + 24 | 0;
  r22 = r3 + 1332 | 0;
  r23 = (r1 + 28 | 0) >> 2;
  r24 = r1 + 32 | 0;
  r25 = r4;
  r4 = -2;
  r26 = 0;
  r27 = 200;
  r28 = r7;
  r29 = r7;
  r7 = r6;
  r30 = r6;
  r31 = 128;
  r32 = r5;
  r33 = 0;
  r34 = 0;
  L1827 : while (1) {
    HEAP16[r7 >> 1] = r26 & 65535;
    if (((r27 - 1 << 1) + r30 | 0) >>> 0 > r7 >>> 0) {
      r35 = r27;
      r36 = r28;
      r37 = r29;
      r38 = r7;
      r39 = r30;
    } else {
      r40 = r7 - r30 >> 1;
      r41 = r40 + 1 | 0;
      if (r27 >>> 0 > 9999) {
        r42 = r7;
        r43 = r30;
        r44 = r32;
        r2 = 1986;
        break;
      }
      r45 = r27 << 1;
      r46 = r45 >>> 0 > 1e4 ? 1e4 : r45;
      r45 = _mrb_malloc(HEAP32[r8], r46 * 6 & -1 | 3);
      if ((r45 | 0) == 0) {
        r42 = r7;
        r43 = r30;
        r44 = r32;
        r2 = 1986;
        break;
      }
      r47 = r45;
      r48 = r30;
      _memcpy(r45, r48, r41 << 1);
      r49 = ((r46 >>> 1 & 1073741823) << 2) + r45 | 0;
      _memcpy(r49, r29, r41 << 2);
      if ((r30 | 0) != (r6 | 0)) {
        _mrb_free(HEAP32[r8], r48);
      }
      r48 = (r40 << 1) + r47 | 0;
      if ((r46 - 1 | 0) > (r40 | 0)) {
        r35 = r46;
        r36 = (r40 << 2) + r49 | 0;
        r37 = r49;
        r38 = r48;
        r39 = r47;
      } else {
        r50 = r32;
        r51 = r47;
        r52 = r48;
        break;
      }
    }
    r48 = HEAP16[(r26 << 1) + 5266832 >> 1];
    r47 = r48 << 16 >> 16;
    do {
      if (r48 << 16 >> 16 == -712) {
        r53 = r4;
        r54 = r33;
        r2 = 1523;
      } else {
        if ((r4 | 0) == -2) {
          r55 = _yylex(r25, r1);
        } else {
          r55 = r4;
        }
        do {
          if ((r55 | 0) < 1) {
            r56 = 0;
            r57 = 0;
          } else {
            if (r55 >>> 0 >= 374) {
              r56 = r55;
              r57 = 2;
              break;
            }
            r56 = r55;
            r57 = HEAPU8[r55 + 5242880 | 0];
          }
        } while (0);
        r49 = r57 + r47 | 0;
        if (r49 >>> 0 > 10246) {
          r53 = r56;
          r54 = r57;
          r2 = 1523;
          break;
        }
        if ((HEAP16[(r49 << 1) + 5270828 >> 1] << 16 >> 16 | 0) != (r57 | 0)) {
          r53 = r56;
          r54 = r57;
          r2 = 1523;
          break;
        }
        r40 = HEAP16[(r49 << 1) + 5244420 >> 1];
        r49 = r40 << 16 >> 16;
        if (r40 << 16 >> 16 < 1) {
          if (r40 << 16 >> 16 == -523 | r40 << 16 >> 16 == 0) {
            r58 = r56;
            r59 = r57;
            r2 = 1966;
            break;
          }
          r60 = r56;
          r61 = -r49 | 0;
          r62 = r57;
          r2 = 1525;
          break;
        } else {
          if (r40 << 16 >> 16 == 3) {
            r50 = r32;
            r51 = r39;
            r52 = r38;
            break L1827;
          }
          r40 = r36 + 4 | 0;
          HEAP32[r40 >> 2] = HEAP32[r9 >> 2];
          r63 = (r56 | 0) == 0 ? 0 : -2;
          r64 = r49;
          r65 = r40;
          r66 = r38;
          r67 = r31;
          r68 = r32;
          r69 = r57;
          r70 = (r34 | 0) == 0 ? 0 : r34 - 1 | 0;
          break;
        }
      }
    } while (0);
    do {
      if (r2 == 1523) {
        r2 = 0;
        r47 = HEAP16[(r26 << 1) + 5268976 >> 1];
        if (r47 << 16 >> 16 == 0) {
          r58 = r53;
          r59 = r54;
          r2 = 1966;
          break;
        }
        r60 = r53;
        r61 = r47 & 65535;
        r62 = r54;
        r2 = 1525;
        break;
      }
    } while (0);
    L1856 : do {
      if (r2 == 1525) {
        r2 = 0;
        r47 = HEAPU8[r61 + 5264968 | 0];
        r40 = 1 - r47 | 0;
        r49 = HEAP32[r36 + (r40 << 2) >> 2];
        do {
          if ((r61 | 0) == 24) {
            r71 = r34;
            r72 = _new_until(r1, _cond(HEAP32[r36 >> 2]), HEAP32[r36 - 8 >> 2]);
          } else if ((r61 | 0) == 25) {
            r71 = r34;
            r72 = _new_rescue(r1, HEAP32[r36 - 8 >> 2], _list1_gen(r1, _list3_gen(r1, 0, 0, HEAP32[r36 >> 2])), 0);
          } else if ((r61 | 0) == 26) {
            _yyerror(r1, 5326068);
            r71 = r34;
            r72 = _new_postexe(r1, HEAP32[r36 - 4 >> 2]);
          } else if ((r61 | 0) == 28) {
            r71 = r34;
            r72 = _new_masgn(r1, HEAP32[r36 - 8 >> 2], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 29) {
            r71 = r34;
            r72 = _new_op_asgn(r1, HEAP32[r36 - 8 >> 2], HEAP16[r36 - 4 >> 1], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 30) {
            r46 = HEAP32[r36 - 20 >> 2];
            r71 = r34;
            r72 = _new_op_asgn(r1, _new_call(r1, r46, _intern_gen(HEAP32[r8], 5322620), HEAP32[r36 - 12 >> 2]), HEAP16[r36 - 4 >> 1], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 31) {
            r71 = r34;
            r72 = _new_op_asgn(r1, _new_call(r1, HEAP32[r36 - 16 >> 2], HEAP16[r36 - 8 >> 1], 0), HEAP16[r36 - 4 >> 1], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 32) {
            r71 = r34;
            r72 = _new_op_asgn(r1, _new_call(r1, HEAP32[r36 - 16 >> 2], HEAP16[r36 - 8 >> 1], 0), HEAP16[r36 - 4 >> 1], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 2) {
            HEAP32[r10] = 0;
            if ((HEAP32[r11 >> 2] | 0) != 0) {
              r71 = r34;
              r72 = r49;
              break;
            }
            HEAP32[r11 >> 2] = _cons_gen(r1, 0, 0);
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 7) {
            r71 = r34;
            r72 = _append_gen(HEAP32[r36 - 8 >> 2], _list1_gen(r1, HEAP32[r36 >> 2]));
          } else if ((r61 | 0) == 8) {
            r71 = r34;
            r72 = _new_begin(r1, 0);
          } else if ((r61 | 0) == 10) {
            r71 = r34;
            r72 = _local_switch(r1);
          } else if ((r61 | 0) == 20) {
            r71 = r34;
            r72 = HEAP32[r36 >> 2];
          } else if ((r61 | 0) == 21) {
            r71 = r34;
            r72 = _new_if(r1, _cond(HEAP32[r36 >> 2]), HEAP32[r36 - 8 >> 2], 0);
          } else if ((r61 | 0) == 22) {
            r71 = r34;
            r72 = _new_unless(r1, _cond(HEAP32[r36 >> 2]), HEAP32[r36 - 8 >> 2], 0);
          } else if ((r61 | 0) == 23) {
            r71 = r34;
            r72 = _new_while(r1, _cond(HEAP32[r36 >> 2]), HEAP32[r36 - 8 >> 2]);
          } else if ((r61 | 0) == 3) {
            HEAP32[r12 >> 2] = _new_scope(r1, HEAP32[r36 >> 2]);
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 4) {
            r71 = r34;
            r72 = HEAP32[r36 - 4 >> 2];
          } else if ((r61 | 0) == 13) {
            r71 = r34;
            r72 = HEAP32[r36 - 4 >> 2];
          } else if ((r61 | 0) == 14) {
            r71 = r34;
            r72 = _new_begin(r1, 0);
          } else if ((r61 | 0) == 15) {
            r71 = r34;
            r72 = _new_begin(r1, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 16) {
            r71 = r34;
            r72 = _append_gen(HEAP32[r36 - 8 >> 2], _list1_gen(r1, HEAP32[r36 >> 2]));
          } else if ((r61 | 0) == 17) {
            r71 = r34;
            r72 = _new_begin(r1, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 18) {
            HEAP32[r10] = 7;
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 19) {
            r71 = r34;
            r72 = _new_alias(r1, HEAP16[r36 - 8 >> 1], HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 11) {
            _yyerror(r1, 5314104);
            _local_resume(r1, HEAP32[r36 - 12 >> 2]);
            r71 = r34;
            r72 = 0;
          } else if ((r61 | 0) == 12) {
            r46 = HEAP32[r36 - 8 >> 2];
            do {
              if ((r46 | 0) == 0) {
                r41 = r36 - 4 | 0;
                if ((HEAP32[r41 >> 2] | 0) == 0) {
                  r73 = HEAP32[r36 - 12 >> 2];
                  break;
                } else {
                  _yywarn(r1, 5326388);
                  r73 = _append_gen(HEAP32[r36 - 12 >> 2], _list1_gen(r1, HEAP32[r41 >> 2]));
                  break;
                }
              } else {
                r73 = _new_rescue(r1, HEAP32[r36 - 12 >> 2], r46, HEAP32[r36 - 4 >> 2]);
              }
            } while (0);
            r46 = HEAP32[r36 >> 2];
            if ((r46 | 0) == 0) {
              r71 = r34;
              r72 = r73;
              break;
            }
            if ((r73 | 0) == 0) {
              r71 = r34;
              r72 = _append_gen(r46, _list1_gen(r1, _new_nil(r1)));
              break;
            } else {
              r71 = r34;
              r72 = _new_ensure(r1, r73, r46);
              break;
            }
          } else if ((r61 | 0) == 5) {
            r71 = r34;
            r72 = _new_begin(r1, 0);
          } else if ((r61 | 0) == 6) {
            r71 = r34;
            r72 = _new_begin(r1, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 33) {
            _yyerror(r1, 5325640);
            r71 = r34;
            r72 = 0;
          } else if ((r61 | 0) == 34) {
            r71 = r34;
            r72 = _new_op_asgn(r1, _new_call(r1, HEAP32[r36 - 16 >> 2], HEAP16[r36 - 8 >> 1], 0), HEAP16[r36 - 4 >> 1], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 35) {
            _backref_error(r1, HEAP32[r36 - 8 >> 2]);
            r71 = r34;
            r72 = _new_begin(r1, 0);
          } else if ((r61 | 0) == 36) {
            r71 = r34;
            r72 = _new_asgn(r1, HEAP32[r36 - 8 >> 2], _new_array(r1, HEAP32[r36 >> 2]));
          } else if ((r61 | 0) == 37) {
            r71 = r34;
            r72 = _new_masgn(r1, HEAP32[r36 - 8 >> 2], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 38) {
            r71 = r34;
            r72 = _new_masgn(r1, HEAP32[r36 - 8 >> 2], _new_array(r1, HEAP32[r36 >> 2]));
          } else if ((r61 | 0) == 40) {
            r71 = r34;
            r72 = _new_asgn(r1, HEAP32[r36 - 8 >> 2], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 41) {
            r71 = r34;
            r72 = _new_asgn(r1, HEAP32[r36 - 8 >> 2], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 43) {
            r71 = r34;
            r72 = _new_and(r1, HEAP32[r36 - 8 >> 2], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 44) {
            r71 = r34;
            r72 = _new_or(r1, HEAP32[r36 - 8 >> 2], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 45) {
            r71 = r34;
            r72 = _call_uni_op(r1, _cond(HEAP32[r36 >> 2]), 5317384);
          } else if ((r61 | 0) == 46) {
            r71 = r34;
            r72 = _call_uni_op(r1, _cond(HEAP32[r36 >> 2]), 5317384);
          } else if ((r61 | 0) == 48) {
            r46 = HEAP32[r36 >> 2];
            if ((r46 | 0) != 0) {
              r71 = r34;
              r72 = r46;
              break;
            }
            r71 = r34;
            r72 = _new_nil(r1);
          } else if ((r61 | 0) == 53) {
            _local_nest(r1);
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 54) {
            r46 = _new_block(r1, HEAP32[r36 - 8 >> 2], HEAP32[r36 - 4 >> 2]);
            _local_unnest(r1);
            r71 = r34;
            r72 = r46;
          } else if ((r61 | 0) == 55) {
            r71 = r34;
            r72 = _new_fcall(r1, HEAP16[r36 - 4 >> 1], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 56) {
            r46 = r36 - 4 | 0;
            _args_with_block(r1, HEAP32[r46 >> 2], HEAP32[r36 >> 2]);
            r71 = r34;
            r72 = _new_fcall(r1, HEAP16[r36 - 8 >> 1], HEAP32[r46 >> 2]);
          } else if ((r61 | 0) == 57) {
            r71 = r34;
            r72 = _new_call(r1, HEAP32[r36 - 12 >> 2], HEAP16[r36 - 4 >> 1], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 58) {
            r46 = r36 - 4 | 0;
            _args_with_block(r1, HEAP32[r46 >> 2], HEAP32[r36 >> 2]);
            r71 = r34;
            r72 = _new_call(r1, HEAP32[r36 - 16 >> 2], HEAP16[r36 - 8 >> 1], HEAP32[r46 >> 2]);
          } else if ((r61 | 0) == 59) {
            r71 = r34;
            r72 = _new_call(r1, HEAP32[r36 - 12 >> 2], HEAP16[r36 - 4 >> 1], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 60) {
            r46 = r36 - 4 | 0;
            _args_with_block(r1, HEAP32[r46 >> 2], HEAP32[r36 >> 2]);
            r71 = r34;
            r72 = _new_call(r1, HEAP32[r36 - 16 >> 2], HEAP16[r36 - 8 >> 1], HEAP32[r46 >> 2]);
          } else if ((r61 | 0) == 61) {
            r71 = r34;
            r72 = _new_super(r1, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 62) {
            r71 = r34;
            r72 = _new_yield(r1, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 63) {
            r71 = r34;
            r72 = _new_return(r1, _ret_args(r1, HEAP32[r36 >> 2]));
          } else if ((r61 | 0) == 64) {
            r71 = r34;
            r72 = _new_break(r1, _ret_args(r1, HEAP32[r36 >> 2]));
          } else if ((r61 | 0) == 65) {
            r71 = r34;
            r72 = _new_next(r1, _ret_args(r1, HEAP32[r36 >> 2]));
          } else if ((r61 | 0) == 66) {
            r71 = r34;
            r72 = HEAP32[r36 >> 2];
          } else if ((r61 | 0) == 67) {
            r71 = r34;
            r72 = HEAP32[r36 - 4 >> 2];
          } else if ((r61 | 0) == 69) {
            r71 = r34;
            r72 = _list1_gen(r1, HEAP32[r36 - 4 >> 2]);
          } else if ((r61 | 0) == 70) {
            r71 = r34;
            r72 = _list1_gen(r1, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 71) {
            r71 = r34;
            r72 = _list1_gen(r1, _append_gen(HEAP32[r36 - 4 >> 2], _list1_gen(r1, HEAP32[r36 >> 2])));
          } else if ((r61 | 0) == 72) {
            r71 = r34;
            r72 = _list2_gen(r1, HEAP32[r36 - 8 >> 2], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 73) {
            r71 = r34;
            r72 = _list3_gen(r1, HEAP32[r36 - 16 >> 2], HEAP32[r36 - 8 >> 2], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 74) {
            r71 = r34;
            r72 = _list2_gen(r1, HEAP32[r36 - 4 >> 2], _new_nil(r1));
          } else if ((r61 | 0) == 75) {
            r46 = HEAP32[r36 - 12 >> 2];
            r71 = r34;
            r72 = _list3_gen(r1, r46, _new_nil(r1), HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 76) {
            r71 = r34;
            r72 = _list2_gen(r1, 0, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 77) {
            r71 = r34;
            r72 = _list3_gen(r1, 0, HEAP32[r36 - 8 >> 2], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 78) {
            r71 = r34;
            r72 = _list2_gen(r1, 0, _new_nil(r1));
          } else if ((r61 | 0) == 79) {
            r71 = r34;
            r72 = _list3_gen(r1, 0, _new_nil(r1), HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 81) {
            r71 = r34;
            r72 = HEAP32[r36 - 4 >> 2];
          } else if ((r61 | 0) == 82) {
            r71 = r34;
            r72 = _list1_gen(r1, HEAP32[r36 - 4 >> 2]);
          } else if ((r61 | 0) == 83) {
            r71 = r34;
            r72 = _append_gen(HEAP32[r36 - 8 >> 2], _list1_gen(r1, HEAP32[r36 - 4 >> 2]));
          } else if ((r61 | 0) == 84) {
            r71 = r34;
            r72 = _list1_gen(r1, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 85) {
            r71 = r34;
            r72 = _append_gen(HEAP32[r36 - 4 >> 2], _list1_gen(r1, HEAP32[r36 >> 2]));
          } else if ((r61 | 0) == 86) {
            _assignable(r1, HEAP32[r36 >> 2]);
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 87) {
            r46 = HEAP32[r36 - 12 >> 2];
            r71 = r34;
            r72 = _new_call(r1, r46, _intern_gen(HEAP32[r8], 5322620), HEAP32[r36 - 4 >> 2]);
          } else if ((r61 | 0) == 88) {
            r71 = r34;
            r72 = _new_call(r1, HEAP32[r36 - 8 >> 2], HEAP16[r36 >> 1], 0);
          } else if ((r61 | 0) == 89) {
            r71 = r34;
            r72 = _new_call(r1, HEAP32[r36 - 8 >> 2], HEAP16[r36 >> 1], 0);
          } else if ((r61 | 0) == 90) {
            r71 = r34;
            r72 = _new_call(r1, HEAP32[r36 - 8 >> 2], HEAP16[r36 >> 1], 0);
          } else if ((r61 | 0) == 91) {
            do {
              if ((HEAP32[r13] | 0) == 0) {
                if ((HEAP32[r14] | 0) == 0) {
                  break;
                } else {
                  r2 = 1616;
                  break;
                }
              } else {
                r2 = 1616;
              }
            } while (0);
            if (r2 == 1616) {
              r2 = 0;
              _yyerror(r1, 5325184);
            }
            r71 = r34;
            r72 = _new_colon2(r1, HEAP32[r36 - 8 >> 2], HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 92) {
            do {
              if ((HEAP32[r13] | 0) == 0) {
                if ((HEAP32[r14] | 0) == 0) {
                  break;
                } else {
                  r2 = 1620;
                  break;
                }
              } else {
                r2 = 1620;
              }
            } while (0);
            if (r2 == 1620) {
              r2 = 0;
              _yyerror(r1, 5325184);
            }
            r71 = r34;
            r72 = _new_colon3(r1, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 93) {
            _backref_error(r1, HEAP32[r36 >> 2]);
            r71 = r34;
            r72 = 0;
          } else if ((r61 | 0) == 94) {
            _assignable(r1, HEAP32[r36 >> 2]);
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 95) {
            r46 = HEAP32[r36 - 12 >> 2];
            r71 = r34;
            r72 = _new_call(r1, r46, _intern_gen(HEAP32[r8], 5322620), HEAP32[r36 - 4 >> 2]);
          } else if ((r61 | 0) == 96) {
            r71 = r34;
            r72 = _new_call(r1, HEAP32[r36 - 8 >> 2], HEAP16[r36 >> 1], 0);
          } else if ((r61 | 0) == 97) {
            r71 = r34;
            r72 = _new_call(r1, HEAP32[r36 - 8 >> 2], HEAP16[r36 >> 1], 0);
          } else if ((r61 | 0) == 98) {
            r71 = r34;
            r72 = _new_call(r1, HEAP32[r36 - 8 >> 2], HEAP16[r36 >> 1], 0);
          } else if ((r61 | 0) == 99) {
            do {
              if ((HEAP32[r13] | 0) == 0) {
                if ((HEAP32[r14] | 0) == 0) {
                  break;
                } else {
                  r2 = 1630;
                  break;
                }
              } else {
                r2 = 1630;
              }
            } while (0);
            if (r2 == 1630) {
              r2 = 0;
              _yyerror(r1, 5325184);
            }
            r71 = r34;
            r72 = _new_colon2(r1, HEAP32[r36 - 8 >> 2], HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 100) {
            do {
              if ((HEAP32[r13] | 0) == 0) {
                if ((HEAP32[r14] | 0) == 0) {
                  break;
                } else {
                  r2 = 1634;
                  break;
                }
              } else {
                r2 = 1634;
              }
            } while (0);
            if (r2 == 1634) {
              r2 = 0;
              _yyerror(r1, 5325184);
            }
            r71 = r34;
            r72 = _new_colon3(r1, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 101) {
            _backref_error(r1, HEAP32[r36 >> 2]);
            r71 = r34;
            r72 = 0;
          } else if ((r61 | 0) == 102) {
            _yyerror(r1, 5324824);
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 104) {
            r71 = r34;
            r72 = _cons_gen(r1, 1, HEAP16[r36 >> 1] << 16 >> 16);
          } else if ((r61 | 0) == 105) {
            r71 = r34;
            r72 = _cons_gen(r1, 0, HEAP16[r36 >> 1] << 16 >> 16);
          } else if ((r61 | 0) == 106) {
            r71 = r34;
            r72 = _cons_gen(r1, HEAP32[r36 - 8 >> 2], HEAP16[r36 >> 1] << 16 >> 16);
          } else if ((r61 | 0) == 110) {
            HEAP32[r10] = 3;
            r71 = r34;
            r72 = r49 & -65536 | HEAPU16[r36 >> 1];
          } else if ((r61 | 0) == 111) {
            HEAP32[r10] = 3;
            r71 = r34;
            r72 = r49 & -65536 | HEAPU16[r36 >> 1];
          } else if ((r61 | 0) == 114) {
            r71 = r34;
            r72 = _new_undef(r1, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 115) {
            HEAP32[r10] = 7;
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 116) {
            r71 = r34;
            r72 = _append_gen(HEAP32[r36 - 12 >> 2], _list1_gen(r1, HEAP16[r36 >> 1] << 16 >> 16));
          } else if ((r61 | 0) == 117) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5316560) & 65535;
          } else if ((r61 | 0) == 118) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5318564) & 65535;
          } else if ((r61 | 0) == 119) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5320552) & 65535;
          } else if ((r61 | 0) == 120) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5314124) & 65535;
          } else if ((r61 | 0) == 121) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5314464) & 65535;
          } else if ((r61 | 0) == 122) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5325704) & 65535;
          } else if ((r61 | 0) == 123) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5322616) & 65535;
          } else if ((r61 | 0) == 124) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5322284) & 65535;
          } else if ((r61 | 0) == 125) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5320772) & 65535;
          } else if ((r61 | 0) == 126) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5321728) & 65535;
          } else if ((r61 | 0) == 127) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5321452) & 65535;
          } else if ((r61 | 0) == 128) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5321212) & 65535;
          } else if ((r61 | 0) == 129) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5321488) & 65535;
          } else if ((r61 | 0) == 130) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5322356) & 65535;
          } else if ((r61 | 0) == 131) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5322040) & 65535;
          } else if ((r61 | 0) == 132) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5326420) & 65535;
          } else if ((r61 | 0) == 133) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5326088) & 65535;
          } else if ((r61 | 0) == 134) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5325956) & 65535;
          } else if ((r61 | 0) == 135) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5325956) & 65535;
          } else if ((r61 | 0) == 136) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5314516) & 65535;
          } else if ((r61 | 0) == 137) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5324216) & 65535;
          } else if ((r61 | 0) == 138) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5314988) & 65535;
          } else if ((r61 | 0) == 139) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5317384) & 65535;
          } else if ((r61 | 0) == 140) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5323600) & 65535;
          } else if ((r61 | 0) == 141) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5316616) & 65535;
          } else if ((r61 | 0) == 142) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5315496) & 65535;
          } else if ((r61 | 0) == 143) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5322620) & 65535;
          } else if ((r61 | 0) == 144) {
            r71 = r34;
            r72 = r49 & -65536 | _intern_gen(HEAP32[r8], 5322288) & 65535;
          } else if ((r61 | 0) == 185) {
            r71 = r34;
            r72 = _new_asgn(r1, HEAP32[r36 - 8 >> 2], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 186) {
            r71 = r34;
            r72 = _new_asgn(r1, HEAP32[r36 - 16 >> 2], _new_rescue(r1, HEAP32[r36 - 8 >> 2], _list1_gen(r1, _list3_gen(r1, 0, 0, HEAP32[r36 >> 2])), 0));
          } else if ((r61 | 0) == 187) {
            r71 = r34;
            r72 = _new_op_asgn(r1, HEAP32[r36 - 8 >> 2], HEAP16[r36 - 4 >> 1], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 188) {
            r71 = r34;
            r72 = _new_op_asgn(r1, HEAP32[r36 - 16 >> 2], HEAP16[r36 - 12 >> 1], _new_rescue(r1, HEAP32[r36 - 8 >> 2], _list1_gen(r1, _list3_gen(r1, 0, 0, HEAP32[r36 >> 2])), 0));
          } else if ((r61 | 0) == 189) {
            r46 = HEAP32[r36 - 20 >> 2];
            r71 = r34;
            r72 = _new_op_asgn(r1, _new_call(r1, r46, _intern_gen(HEAP32[r8], 5322620), HEAP32[r36 - 12 >> 2]), HEAP16[r36 - 4 >> 1], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 190) {
            r71 = r34;
            r72 = _new_op_asgn(r1, _new_call(r1, HEAP32[r36 - 16 >> 2], HEAP16[r36 - 8 >> 1], 0), HEAP16[r36 - 4 >> 1], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 191) {
            r71 = r34;
            r72 = _new_op_asgn(r1, _new_call(r1, HEAP32[r36 - 16 >> 2], HEAP16[r36 - 8 >> 1], 0), HEAP16[r36 - 4 >> 1], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 192) {
            r71 = r34;
            r72 = _new_op_asgn(r1, _new_call(r1, HEAP32[r36 - 16 >> 2], HEAP16[r36 - 8 >> 1], 0), HEAP16[r36 - 4 >> 1], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 193) {
            _yyerror(r1, 5325640);
            r71 = r34;
            r72 = _new_begin(r1, 0);
          } else if ((r61 | 0) == 194) {
            _yyerror(r1, 5325640);
            r71 = r34;
            r72 = _new_begin(r1, 0);
          } else if ((r61 | 0) == 195) {
            _backref_error(r1, HEAP32[r36 - 8 >> 2]);
            r71 = r34;
            r72 = _new_begin(r1, 0);
          } else if ((r61 | 0) == 196) {
            r71 = r34;
            r72 = _new_dot2(r1, HEAP32[r36 - 8 >> 2], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 197) {
            r71 = r34;
            r72 = _new_dot3(r1, HEAP32[r36 - 8 >> 2], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 198) {
            r71 = r34;
            r72 = _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5326420, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 199) {
            r71 = r34;
            r72 = _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5326088, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 200) {
            r71 = r34;
            r72 = _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5325956, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 201) {
            r71 = r34;
            r72 = _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5314516, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 202) {
            r71 = r34;
            r72 = _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5324216, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 203) {
            r71 = r34;
            r72 = _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5314988, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 204) {
            r71 = r34;
            r72 = _call_uni_op(r1, _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5314988, HEAP32[r36 >> 2]), 5315496);
          } else if ((r61 | 0) == 205) {
            r71 = r34;
            r72 = _call_uni_op(r1, _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5314988, HEAP32[r36 >> 2]), 5315496);
          } else if ((r61 | 0) == 206) {
            r71 = r34;
            r72 = _call_uni_op(r1, HEAP32[r36 >> 2], 5316616);
          } else if ((r61 | 0) == 207) {
            r71 = r34;
            r72 = _call_uni_op(r1, HEAP32[r36 >> 2], 5315496);
          } else if ((r61 | 0) == 208) {
            r71 = r34;
            r72 = _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5316560, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 209) {
            r71 = r34;
            r72 = _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5318564, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 210) {
            r71 = r34;
            r72 = _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5320552, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 211) {
            r71 = r34;
            r72 = _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5314124, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 212) {
            r71 = r34;
            r72 = _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5320772, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 213) {
            r71 = r34;
            r72 = _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5321728, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 214) {
            r71 = r34;
            r72 = _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5321452, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 215) {
            r71 = r34;
            r72 = _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5321212, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 216) {
            r71 = r34;
            r72 = _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5314464, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 217) {
            r71 = r34;
            r72 = _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5325704, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 218) {
            r71 = r34;
            r72 = _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5321488, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 219) {
            r71 = r34;
            r72 = _match_op(r1, HEAP32[r36 - 8 >> 2], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 220) {
            r71 = r34;
            r72 = _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5322284, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 221) {
            r71 = r34;
            r72 = _call_uni_op(r1, _cond(HEAP32[r36 >> 2]), 5317384);
          } else if ((r61 | 0) == 222) {
            r71 = r34;
            r72 = _call_uni_op(r1, _cond(HEAP32[r36 >> 2]), 5323600);
          } else if ((r61 | 0) == 223) {
            r71 = r34;
            r72 = _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5322356, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 224) {
            r71 = r34;
            r72 = _call_bin_op(r1, HEAP32[r36 - 8 >> 2], 5322040, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 225) {
            r71 = r34;
            r72 = _new_and(r1, HEAP32[r36 - 8 >> 2], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 226) {
            r71 = r34;
            r72 = _new_or(r1, HEAP32[r36 - 8 >> 2], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 227) {
            r71 = r34;
            r72 = _new_if(r1, _cond(HEAP32[r36 - 20 >> 2]), HEAP32[r36 - 12 >> 2], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 228) {
            r71 = r34;
            r72 = HEAP32[r36 >> 2];
          } else if ((r61 | 0) == 229) {
            r46 = HEAP32[r36 >> 2];
            if ((r46 | 0) != 0) {
              r71 = r34;
              r72 = r46;
              break;
            }
            r71 = r34;
            r72 = _new_nil(r1);
          } else if ((r61 | 0) == 231) {
            r71 = r34;
            r72 = HEAP32[r36 - 4 >> 2];
          } else if ((r61 | 0) == 232) {
            r71 = r34;
            r72 = _append_gen(HEAP32[r36 - 12 >> 2], _list1_gen(r1, _new_hash(r1, HEAP32[r36 - 4 >> 2])));
          } else if ((r61 | 0) == 233) {
            r71 = r34;
            r72 = _cons_gen(r1, _new_hash(r1, HEAP32[r36 - 4 >> 2]), 0);
          } else if ((r61 | 0) == 234) {
            r71 = r34;
            r72 = HEAP32[r36 - 4 >> 2];
          } else if ((r61 | 0) == 239) {
            r71 = r34;
            r72 = _cons_gen(r1, HEAP32[r36 - 4 >> 2], 0);
          } else if ((r61 | 0) == 240) {
            r71 = r34;
            r72 = _cons_gen(r1, _append_gen(HEAP32[r36 - 12 >> 2], _list1_gen(r1, _new_hash(r1, HEAP32[r36 - 4 >> 2]))), 0);
          } else if ((r61 | 0) == 241) {
            r71 = r34;
            r72 = _cons_gen(r1, _list1_gen(r1, _new_hash(r1, HEAP32[r36 - 4 >> 2])), 0);
          } else if ((r61 | 0) == 242) {
            r71 = r34;
            r72 = _cons_gen(r1, _list1_gen(r1, HEAP32[r36 >> 2]), 0);
          } else if ((r61 | 0) == 243) {
            r71 = r34;
            r72 = _cons_gen(r1, HEAP32[r36 - 4 >> 2], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 244) {
            r71 = r34;
            r72 = _cons_gen(r1, _list1_gen(r1, _new_hash(r1, HEAP32[r36 - 4 >> 2])), HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 245) {
            r71 = r34;
            r72 = _cons_gen(r1, _append_gen(HEAP32[r36 - 12 >> 2], _list1_gen(r1, _new_hash(r1, HEAP32[r36 - 4 >> 2]))), HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 246) {
            r71 = r34;
            r72 = _cons_gen(r1, 0, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 247) {
            r46 = HEAP32[r15];
            HEAP32[r15] = r46 << 1 | 1;
            r71 = r34;
            r72 = r46;
          } else if ((r61 | 0) == 248) {
            HEAP32[r15] = HEAP32[r36 - 4 >> 2];
            r71 = r34;
            r72 = HEAP32[r36 >> 2];
          } else if ((r61 | 0) == 249) {
            r71 = r34;
            r72 = _new_block_arg(r1, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 250) {
            r71 = r34;
            r72 = HEAP32[r36 >> 2];
          } else if ((r61 | 0) == 251) {
            r71 = r34;
            r72 = 0;
          } else if ((r61 | 0) == 252) {
            r71 = r34;
            r72 = _cons_gen(r1, HEAP32[r36 >> 2], 0);
          } else if ((r61 | 0) == 253) {
            r71 = r34;
            r72 = _cons_gen(r1, _new_splat(r1, HEAP32[r36 >> 2]), 0);
          } else if ((r61 | 0) == 254) {
            r71 = r34;
            r72 = _append_gen(HEAP32[r36 - 8 >> 2], _list1_gen(r1, HEAP32[r36 >> 2]));
          } else if ((r61 | 0) == 255) {
            r71 = r34;
            r72 = _append_gen(HEAP32[r36 - 12 >> 2], _list1_gen(r1, _new_splat(r1, HEAP32[r36 >> 2])));
          } else if ((r61 | 0) == 256) {
            r71 = r34;
            r72 = _append_gen(HEAP32[r36 - 8 >> 2], _list1_gen(r1, HEAP32[r36 >> 2]));
          } else if ((r61 | 0) == 257) {
            r71 = r34;
            r72 = _append_gen(HEAP32[r36 - 12 >> 2], _list1_gen(r1, _new_splat(r1, HEAP32[r36 >> 2])));
          } else if ((r61 | 0) == 258) {
            r71 = r34;
            r72 = _list1_gen(r1, _new_splat(r1, HEAP32[r36 >> 2]));
          } else if ((r61 | 0) == 264) {
            r71 = r34;
            r72 = _new_fcall(r1, HEAP16[r36 >> 1], 0);
          } else if ((r61 | 0) == 265) {
            HEAP32[r36 >> 2] = HEAP32[r15];
            HEAP32[r15] = 0;
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 266) {
            HEAP32[r15] = HEAP32[r36 - 12 >> 2];
            r71 = r34;
            r72 = HEAP32[r36 - 4 >> 2];
          } else if ((r61 | 0) == 267) {
            HEAP32[r10] = 2;
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 268) {
            r71 = r34;
            r72 = HEAP32[r36 - 8 >> 2];
          } else if ((r61 | 0) == 269) {
            HEAP32[r10] = 2;
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 270) {
            r71 = r34;
            r72 = 0;
          } else if ((r61 | 0) == 271) {
            r71 = r34;
            r72 = HEAP32[r36 - 4 >> 2];
          } else if ((r61 | 0) == 272) {
            r71 = r34;
            r72 = _new_colon2(r1, HEAP32[r36 - 8 >> 2], HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 273) {
            r71 = r34;
            r72 = _new_colon3(r1, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 274) {
            r71 = r34;
            r72 = _new_array(r1, HEAP32[r36 - 4 >> 2]);
          } else if ((r61 | 0) == 275) {
            r71 = r34;
            r72 = _new_hash(r1, HEAP32[r36 - 4 >> 2]);
          } else if ((r61 | 0) == 276) {
            r71 = r34;
            r72 = _new_return(r1, 0);
          } else if ((r61 | 0) == 277) {
            r71 = r34;
            r72 = _new_yield(r1, HEAP32[r36 - 4 >> 2]);
          } else if ((r61 | 0) == 278) {
            r71 = r34;
            r72 = _new_yield(r1, 0);
          } else if ((r61 | 0) == 279) {
            r71 = r34;
            r72 = _new_yield(r1, 0);
          } else if ((r61 | 0) == 280) {
            r71 = r34;
            r72 = _call_uni_op(r1, _cond(HEAP32[r36 - 4 >> 2]), 5317384);
          } else if ((r61 | 0) == 281) {
            r71 = r34;
            r72 = _call_uni_op(r1, _new_nil(r1), 5317384);
          } else if ((r61 | 0) == 282) {
            r71 = r34;
            r72 = _new_fcall(r1, HEAP16[r36 - 4 >> 1], _cons_gen(r1, 0, HEAP32[r36 >> 2]));
          } else if ((r61 | 0) == 284) {
            r46 = r36 - 4 | 0;
            _call_with_block(r1, HEAP32[r46 >> 2], HEAP32[r36 >> 2]);
            r71 = r34;
            r72 = HEAP32[r46 >> 2];
          } else if ((r61 | 0) == 285) {
            _local_nest(r1);
            r46 = HEAP32[r16];
            r41 = HEAP32[r17 >> 2] + 1 | 0;
            HEAP32[r17 >> 2] = r41;
            HEAP32[r16] = r41;
            r71 = r34;
            r72 = r46;
          } else if ((r61 | 0) == 286) {
            HEAP32[r16] = HEAP32[r36 - 8 >> 2];
            r46 = _new_lambda(r1, HEAP32[r36 - 4 >> 2], HEAP32[r36 >> 2]);
            _local_unnest(r1);
            r71 = r34;
            r72 = r46;
          } else if ((r61 | 0) == 287) {
            r71 = r34;
            r72 = _new_if(r1, _cond(HEAP32[r36 - 16 >> 2]), HEAP32[r36 - 8 >> 2], HEAP32[r36 - 4 >> 2]);
          } else if ((r61 | 0) == 288) {
            r71 = r34;
            r72 = _new_unless(r1, _cond(HEAP32[r36 - 16 >> 2]), HEAP32[r36 - 8 >> 2], HEAP32[r36 - 4 >> 2]);
          } else if ((r61 | 0) == 289) {
            HEAP32[r18] = HEAP32[r18] << 1 | 1;
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 290) {
            HEAP32[r18] = HEAP32[r18] >>> 1;
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 291) {
            r71 = r34;
            r72 = _new_while(r1, _cond(HEAP32[r36 - 16 >> 2]), HEAP32[r36 - 4 >> 2]);
          } else if ((r61 | 0) == 292) {
            HEAP32[r18] = HEAP32[r18] << 1 | 1;
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 293) {
            HEAP32[r18] = HEAP32[r18] >>> 1;
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 294) {
            r71 = r34;
            r72 = _new_until(r1, _cond(HEAP32[r36 - 16 >> 2]), HEAP32[r36 - 4 >> 2]);
          } else if ((r61 | 0) == 295) {
            r71 = r34;
            r72 = _new_case(r1, HEAP32[r36 - 12 >> 2], HEAP32[r36 - 4 >> 2]);
          } else if ((r61 | 0) == 296) {
            r71 = r34;
            r72 = _new_case(r1, 0, HEAP32[r36 - 4 >> 2]);
          } else if ((r61 | 0) == 297) {
            HEAP32[r18] = HEAP32[r18] << 1 | 1;
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 298) {
            HEAP32[r18] = HEAP32[r18] >>> 1;
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 299) {
            r71 = r34;
            r72 = _new_for(r1, HEAP32[r36 - 28 >> 2], HEAP32[r36 - 16 >> 2], HEAP32[r36 - 4 >> 2]);
          } else if ((r61 | 0) == 300) {
            do {
              if ((HEAP32[r13] | 0) == 0) {
                if ((HEAP32[r14] | 0) == 0) {
                  break;
                } else {
                  r2 = 1781;
                  break;
                }
              } else {
                r2 = 1781;
              }
            } while (0);
            if (r2 == 1781) {
              r2 = 0;
              _yyerror(r1, 5318252);
            }
            r71 = r34;
            r72 = _local_switch(r1);
          } else if ((r61 | 0) == 301) {
            r46 = _new_class(r1, HEAP32[r36 - 16 >> 2], HEAP32[r36 - 12 >> 2], HEAP32[r36 - 4 >> 2]);
            _local_resume(r1, HEAP32[r36 - 8 >> 2]);
            r71 = r34;
            r72 = r46;
          } else if ((r61 | 0) == 302) {
            r46 = HEAP32[r13];
            HEAP32[r13] = 0;
            r71 = r34;
            r72 = r46;
          } else if ((r61 | 0) == 303) {
            r46 = _cons_gen(r1, _local_switch(r1), HEAP32[r14]);
            HEAP32[r14] = 0;
            r71 = r34;
            r72 = r46;
          } else if ((r61 | 0) == 304) {
            r46 = _new_sclass(r1, HEAP32[r36 - 20 >> 2], HEAP32[r36 - 4 >> 2]);
            r41 = r36 - 8 | 0;
            _local_resume(r1, HEAP32[HEAP32[r41 >> 2] >> 2]);
            HEAP32[r13] = HEAP32[r36 - 16 >> 2];
            HEAP32[r14] = HEAP32[HEAP32[r41 >> 2] + 4 >> 2];
            r71 = r34;
            r72 = r46;
          } else if ((r61 | 0) == 305) {
            do {
              if ((HEAP32[r13] | 0) == 0) {
                if ((HEAP32[r14] | 0) == 0) {
                  break;
                } else {
                  r2 = 1789;
                  break;
                }
              } else {
                r2 = 1789;
              }
            } while (0);
            if (r2 == 1789) {
              r2 = 0;
              _yyerror(r1, 5318024);
            }
            r71 = r34;
            r72 = _local_switch(r1);
          } else if ((r61 | 0) == 306) {
            r46 = _new_module(r1, HEAP32[r36 - 12 >> 2], HEAP32[r36 - 4 >> 2]);
            _local_resume(r1, HEAP32[r36 - 8 >> 2]);
            r71 = r34;
            r72 = r46;
          } else if ((r61 | 0) == 307) {
            HEAP32[r13] = HEAP32[r13] + 1 | 0;
            r71 = r34;
            r72 = _local_switch(r1);
          } else if ((r61 | 0) == 308) {
            r46 = _new_def(r1, HEAP16[r36 - 16 >> 1], HEAP32[r36 - 8 >> 2], HEAP32[r36 - 4 >> 2]);
            _local_resume(r1, HEAP32[r36 - 12 >> 2]);
            HEAP32[r13] = HEAP32[r13] - 1 | 0;
            r71 = r34;
            r72 = r46;
          } else if ((r61 | 0) == 309) {
            HEAP32[r10] = 7;
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 310) {
            HEAP32[r14] = HEAP32[r14] + 1 | 0;
            HEAP32[r10] = 3;
            r71 = r34;
            r72 = _local_switch(r1);
          } else if ((r61 | 0) == 311) {
            r46 = _new_sdef(r1, HEAP32[r36 - 28 >> 2], HEAP16[r36 - 16 >> 1], HEAP32[r36 - 8 >> 2], HEAP32[r36 - 4 >> 2]);
            _local_resume(r1, HEAP32[r36 - 12 >> 2]);
            HEAP32[r14] = HEAP32[r14] - 1 | 0;
            r71 = r34;
            r72 = r46;
          } else if ((r61 | 0) == 312) {
            r71 = r34;
            r72 = _new_break(r1, 0);
          } else if ((r61 | 0) == 313) {
            r71 = r34;
            r72 = _new_next(r1, 0);
          } else if ((r61 | 0) == 314) {
            r71 = r34;
            r72 = _new_redo(r1);
          } else if ((r61 | 0) == 315) {
            r71 = r34;
            r72 = _new_retry(r1);
          } else if ((r61 | 0) == 316) {
            r46 = HEAP32[r36 >> 2];
            if ((r46 | 0) != 0) {
              r71 = r34;
              r72 = r46;
              break;
            }
            r71 = r34;
            r72 = _new_nil(r1);
          } else if ((r61 | 0) == 323) {
            r71 = r34;
            r72 = _new_if(r1, _cond(HEAP32[r36 - 12 >> 2]), HEAP32[r36 - 4 >> 2], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 325) {
            r71 = r34;
            r72 = HEAP32[r36 >> 2];
          } else if ((r61 | 0) == 326) {
            r71 = r34;
            r72 = _list1_gen(r1, _list1_gen(r1, HEAP32[r36 >> 2]));
          } else if ((r61 | 0) == 328) {
            r71 = r34;
            r72 = _new_arg(r1, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 329) {
            r71 = r34;
            r72 = _new_masgn(r1, HEAP32[r36 - 4 >> 2], 0);
          } else if ((r61 | 0) == 330) {
            r71 = r34;
            r72 = _list1_gen(r1, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 331) {
            r71 = r34;
            r72 = _append_gen(HEAP32[r36 - 8 >> 2], _list1_gen(r1, HEAP32[r36 >> 2]));
          } else if ((r61 | 0) == 332) {
            r71 = r34;
            r72 = _list3_gen(r1, HEAP32[r36 >> 2], 0, 0);
          } else if ((r61 | 0) == 333) {
            r71 = r34;
            r72 = _list3_gen(r1, HEAP32[r36 - 12 >> 2], _new_arg(r1, HEAP16[r36 >> 1]), 0);
          } else if ((r61 | 0) == 334) {
            r46 = HEAP32[r36 - 20 >> 2];
            r71 = r34;
            r72 = _list3_gen(r1, r46, _new_arg(r1, HEAP16[r36 - 8 >> 1]), HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 335) {
            r71 = r34;
            r72 = _list3_gen(r1, HEAP32[r36 - 8 >> 2], -1, 0);
          } else if ((r61 | 0) == 336) {
            r71 = r34;
            r72 = _list3_gen(r1, HEAP32[r36 - 16 >> 2], -1, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 337) {
            r71 = r34;
            r72 = _list3_gen(r1, 0, _new_arg(r1, HEAP16[r36 >> 1]), 0);
          } else if ((r61 | 0) == 338) {
            r71 = r34;
            r72 = _list3_gen(r1, 0, _new_arg(r1, HEAP16[r36 - 8 >> 1]), HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 339) {
            r71 = r34;
            r72 = _list3_gen(r1, 0, -1, 0);
          } else if ((r61 | 0) == 340) {
            r71 = r34;
            r72 = _list3_gen(r1, 0, -1, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 341) {
            r71 = r34;
            r72 = _new_args(r1, HEAP32[r36 - 20 >> 2], HEAP32[r36 - 12 >> 2], HEAP16[r36 - 4 >> 1], 0, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 342) {
            r71 = r34;
            r72 = _new_args(r1, HEAP32[r36 - 28 >> 2], HEAP32[r36 - 20 >> 2], HEAP16[r36 - 12 >> 1], HEAP32[r36 - 4 >> 2], HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 343) {
            r71 = r34;
            r72 = _new_args(r1, HEAP32[r36 - 12 >> 2], HEAP32[r36 - 4 >> 2], 0, 0, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 344) {
            r71 = r34;
            r72 = _new_args(r1, HEAP32[r36 - 20 >> 2], HEAP32[r36 - 12 >> 2], 0, HEAP32[r36 - 4 >> 2], HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 345) {
            r71 = r34;
            r72 = _new_args(r1, HEAP32[r36 - 12 >> 2], 0, HEAP16[r36 - 4 >> 1], 0, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 346) {
            r71 = r34;
            r72 = _new_args(r1, HEAP32[r36 - 4 >> 2], 0, 1, 0, 0);
          } else if ((r61 | 0) == 347) {
            r71 = r34;
            r72 = _new_args(r1, HEAP32[r36 - 20 >> 2], 0, HEAP16[r36 - 12 >> 1], HEAP32[r36 - 4 >> 2], HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 348) {
            r71 = r34;
            r72 = _new_args(r1, HEAP32[r36 - 4 >> 2], 0, 0, 0, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 349) {
            r71 = r34;
            r72 = _new_args(r1, 0, HEAP32[r36 - 12 >> 2], HEAP16[r36 - 4 >> 1], 0, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 350) {
            r71 = r34;
            r72 = _new_args(r1, 0, HEAP32[r36 - 20 >> 2], HEAP16[r36 - 12 >> 1], HEAP32[r36 - 4 >> 2], HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 351) {
            r71 = r34;
            r72 = _new_args(r1, 0, HEAP32[r36 - 4 >> 2], 0, 0, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 352) {
            r71 = r34;
            r72 = _new_args(r1, 0, HEAP32[r36 - 12 >> 2], 0, HEAP32[r36 - 4 >> 2], HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 353) {
            r71 = r34;
            r72 = _new_args(r1, 0, 0, HEAP16[r36 - 4 >> 1], 0, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 354) {
            r71 = r34;
            r72 = _new_args(r1, 0, 0, HEAP16[r36 - 12 >> 1], HEAP32[r36 - 4 >> 2], HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 355) {
            r71 = r34;
            r72 = _new_args(r1, 0, 0, 0, 0, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 357) {
            HEAP32[r19] = 1;
            r71 = r34;
            r72 = HEAP32[r36 >> 2];
          } else if ((r61 | 0) == 358) {
            _local_add_f(r1, 0);
            r71 = r34;
            r72 = 0;
          } else if ((r61 | 0) == 359) {
            _local_add_f(r1, 0);
            r71 = r34;
            r72 = 0;
          } else if ((r61 | 0) == 360) {
            r71 = r34;
            r72 = HEAP32[r36 - 8 >> 2];
          } else if ((r61 | 0) == 361) {
            r71 = r34;
            r72 = 0;
          } else if ((r61 | 0) == 362) {
            r71 = r34;
            r72 = 0;
          } else if ((r61 | 0) == 365) {
            _local_add_f(r1, HEAP16[r36 >> 1]);
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 367) {
            r71 = r34;
            r72 = HEAP32[r36 - 8 >> 2];
          } else if ((r61 | 0) == 368) {
            r71 = r34;
            r72 = HEAP32[r36 >> 2];
          } else if ((r61 | 0) == 369) {
            r71 = r34;
            r72 = HEAP32[r36 - 4 >> 2];
          } else if ((r61 | 0) == 370) {
            r71 = r34;
            r72 = HEAP32[r36 - 4 >> 2];
          } else if ((r61 | 0) == 371) {
            _local_nest(r1);
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 372) {
            r46 = _new_block(r1, HEAP32[r36 - 8 >> 2], HEAP32[r36 - 4 >> 2]);
            _local_unnest(r1);
            r71 = r34;
            r72 = r46;
          } else if ((r61 | 0) == 373) {
            r46 = r36 - 4 | 0;
            r41 = HEAP32[r46 >> 2];
            if ((HEAP32[r41 >> 2] | 0) == 38) {
              _yyerror(r1, 5317904);
            } else {
              _call_with_block(r1, r41, HEAP32[r36 >> 2]);
            }
            r71 = r34;
            r72 = HEAP32[r46 >> 2];
          } else if ((r61 | 0) == 374) {
            r71 = r34;
            r72 = _new_call(r1, HEAP32[r36 - 12 >> 2], HEAP16[r36 - 4 >> 1], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 375) {
            r46 = _new_call(r1, HEAP32[r36 - 16 >> 2], HEAP16[r36 - 8 >> 1], HEAP32[r36 - 4 >> 2]);
            _call_with_block(r1, r46, HEAP32[r36 >> 2]);
            r71 = r34;
            r72 = r46;
          } else if ((r61 | 0) == 376) {
            r46 = _new_call(r1, HEAP32[r36 - 16 >> 2], HEAP16[r36 - 8 >> 1], HEAP32[r36 - 4 >> 2]);
            _call_with_block(r1, r46, HEAP32[r36 >> 2]);
            r71 = r34;
            r72 = r46;
          } else if ((r61 | 0) == 377) {
            r71 = r34;
            r72 = _new_fcall(r1, HEAP16[r36 - 4 >> 1], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 378) {
            r71 = r34;
            r72 = _new_call(r1, HEAP32[r36 - 12 >> 2], HEAP16[r36 - 4 >> 1], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 379) {
            r71 = r34;
            r72 = _new_call(r1, HEAP32[r36 - 12 >> 2], HEAP16[r36 - 4 >> 1], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 380) {
            r71 = r34;
            r72 = _new_call(r1, HEAP32[r36 - 8 >> 2], HEAP16[r36 >> 1], 0);
          } else if ((r61 | 0) == 381) {
            r46 = HEAP32[r36 - 8 >> 2];
            r71 = r34;
            r72 = _new_call(r1, r46, _intern_gen(HEAP32[r8], 5320144), HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 382) {
            r46 = HEAP32[r36 - 8 >> 2];
            r71 = r34;
            r72 = _new_call(r1, r46, _intern_gen(HEAP32[r8], 5320144), HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 383) {
            r71 = r34;
            r72 = _new_super(r1, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 384) {
            r71 = r34;
            r72 = _new_zsuper(r1);
          } else if ((r61 | 0) == 385) {
            r46 = HEAP32[r36 - 12 >> 2];
            r71 = r34;
            r72 = _new_call(r1, r46, _intern_gen(HEAP32[r8], 5322620), HEAP32[r36 - 4 >> 2]);
          } else if ((r61 | 0) == 386) {
            _local_nest(r1);
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 387) {
            r46 = _new_block(r1, HEAP32[r36 - 8 >> 2], HEAP32[r36 - 4 >> 2]);
            _local_unnest(r1);
            r71 = r34;
            r72 = r46;
          } else if ((r61 | 0) == 388) {
            _local_nest(r1);
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 389) {
            r46 = _new_block(r1, HEAP32[r36 - 8 >> 2], HEAP32[r36 - 4 >> 2]);
            _local_unnest(r1);
            r71 = r34;
            r72 = r46;
          } else if ((r61 | 0) == 390) {
            r71 = r34;
            r72 = _cons_gen(r1, _cons_gen(r1, HEAP32[r36 - 12 >> 2], HEAP32[r36 - 4 >> 2]), HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 391) {
            r46 = HEAP32[r36 >> 2];
            if ((r46 | 0) == 0) {
              r71 = r34;
              r72 = 0;
              break;
            }
            r71 = r34;
            r72 = _cons_gen(r1, _cons_gen(r1, 0, r46), 0);
          } else if ((r61 | 0) == 393) {
            r46 = _list1_gen(r1, _list3_gen(r1, HEAP32[r36 - 16 >> 2], HEAP32[r36 - 12 >> 2], HEAP32[r36 - 4 >> 2]));
            r41 = HEAP32[r36 >> 2];
            if ((r41 | 0) == 0) {
              r71 = r34;
              r72 = r46;
              break;
            }
            r71 = r34;
            r72 = _append_gen(r46, r41);
          } else if ((r61 | 0) == 395) {
            r71 = r34;
            r72 = _list1_gen(r1, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 398) {
            r71 = r34;
            r72 = HEAP32[r36 >> 2];
          } else if ((r61 | 0) == 400) {
            r71 = r34;
            r72 = HEAP32[r36 >> 2];
          } else if ((r61 | 0) == 406) {
            r71 = r34;
            r72 = HEAP32[r36 >> 2];
          } else if ((r61 | 0) == 407) {
            r71 = r34;
            r72 = _new_dstr(r1, _append_gen(HEAP32[r36 - 4 >> 2], _list1_gen(r1, HEAP32[r36 >> 2])));
          } else if ((r61 | 0) == 408) {
            r41 = HEAP32[r20];
            HEAP32[r20] = 0;
            r71 = r34;
            r72 = r41;
          } else if ((r61 | 0) == 409) {
            HEAP32[r20] = HEAP32[r36 - 8 >> 2];
            r71 = r34;
            r72 = _list2_gen(r1, HEAP32[r36 - 12 >> 2], HEAP32[r36 - 4 >> 2]);
          } else if ((r61 | 0) == 410) {
            r41 = HEAP32[r20];
            HEAP32[r20] = 0;
            r71 = r34;
            r72 = r41;
          } else if ((r61 | 0) == 411) {
            HEAP32[r20] = HEAP32[r36 - 8 >> 2];
            r71 = r34;
            r72 = _append_gen(_append_gen(HEAP32[r36 - 16 >> 2], _list1_gen(r1, HEAP32[r36 - 12 >> 2])), _list1_gen(r1, HEAP32[r36 - 4 >> 2]));
          } else if ((r61 | 0) == 413) {
            r71 = r34;
            r72 = _new_sym(r1, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 414) {
            HEAP32[r10] = 1;
            r71 = r34;
            r72 = _new_dsym(r1, _append_gen(HEAP32[r36 - 4 >> 2], _list1_gen(r1, HEAP32[r36 >> 2])));
          } else if ((r61 | 0) == 415) {
            HEAP32[r10] = 1;
            r71 = r34;
            r72 = r49 & -65536 | HEAPU16[r36 >> 1];
          } else if ((r61 | 0) == 420) {
            r41 = HEAP32[HEAP32[r36 >> 2] + 4 >> 2];
            r71 = r34;
            r72 = r49 & -65536 | _new_strsym(HEAP32[r8], HEAP32[r41 >> 2], HEAP32[r41 + 4 >> 2]) & 65535;
          } else if ((r61 | 0) == 421) {
            r41 = HEAP32[HEAP32[r36 >> 2] + 4 >> 2];
            r71 = r34;
            r72 = r49 & -65536 | _new_strsym(HEAP32[r8], HEAP32[r41 >> 2], HEAP32[r41 + 4 >> 2]) & 65535;
          } else if ((r61 | 0) == 424) {
            r71 = r34;
            r72 = _negate_lit(r1, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 425) {
            r71 = r34;
            r72 = _negate_lit(r1, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 426) {
            r71 = r34;
            r72 = _new_lvar(r1, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 427) {
            r71 = r34;
            r72 = _new_ivar(r1, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 428) {
            r71 = r34;
            r72 = _new_gvar(r1, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 429) {
            r71 = r34;
            r72 = _new_cvar(r1, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 430) {
            r71 = r34;
            r72 = _new_const(r1, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 431) {
            _assignable(r1, HEAP32[r36 >> 2]);
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 432) {
            r71 = r34;
            r72 = _var_reference(r1, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 433) {
            r71 = r34;
            r72 = _new_nil(r1);
          } else if ((r61 | 0) == 434) {
            r71 = r34;
            r72 = _new_self(r1);
          } else if ((r61 | 0) == 435) {
            r71 = r34;
            r72 = _new_true(r1);
          } else if ((r61 | 0) == 436) {
            r71 = r34;
            r72 = _new_false(r1);
          } else if ((r61 | 0) == 437) {
            r41 = HEAP32[r21 >> 2];
            if ((r41 | 0) == 0) {
              HEAP32[r21 >> 2] = 5317608;
              r74 = 5317608;
            } else {
              r74 = r41;
            }
            r71 = r34;
            r72 = _new_str(r1, r74, _strlen(r74));
          } else if ((r61 | 0) == 438) {
            _snprintf(r22, 16, 5318828, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[r23], tempInt));
            r71 = r34;
            r72 = _new_int(r1, r22, 10);
          } else if ((r61 | 0) == 441) {
            r71 = r34;
            r72 = 0;
          } else if ((r61 | 0) == 442) {
            HEAP32[r10] = 0;
            HEAP32[r19] = 1;
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 443) {
            r71 = r34;
            r72 = HEAP32[r36 - 4 >> 2];
          } else if ((r61 | 0) == 444) {
            r71 = 0;
            r72 = 0;
          } else if ((r61 | 0) == 445) {
            r41 = HEAP32[r36 - 4 >> 2];
            HEAP32[r10] = 0;
            HEAP32[r19] = 1;
            r71 = r34;
            r72 = r41;
          } else if ((r61 | 0) == 446) {
            r71 = r34;
            r72 = HEAP32[r36 - 4 >> 2];
          } else if ((r61 | 0) == 447) {
            r71 = r34;
            r72 = _new_args(r1, HEAP32[r36 - 20 >> 2], HEAP32[r36 - 12 >> 2], HEAP16[r36 - 4 >> 1], 0, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 448) {
            r71 = r34;
            r72 = _new_args(r1, HEAP32[r36 - 28 >> 2], HEAP32[r36 - 20 >> 2], HEAP16[r36 - 12 >> 1], HEAP32[r36 - 4 >> 2], HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 449) {
            r71 = r34;
            r72 = _new_args(r1, HEAP32[r36 - 12 >> 2], HEAP32[r36 - 4 >> 2], 0, 0, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 450) {
            r71 = r34;
            r72 = _new_args(r1, HEAP32[r36 - 20 >> 2], HEAP32[r36 - 12 >> 2], 0, HEAP32[r36 - 4 >> 2], HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 451) {
            r71 = r34;
            r72 = _new_args(r1, HEAP32[r36 - 12 >> 2], 0, HEAP16[r36 - 4 >> 1], 0, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 452) {
            r71 = r34;
            r72 = _new_args(r1, HEAP32[r36 - 20 >> 2], 0, HEAP16[r36 - 12 >> 1], HEAP32[r36 - 4 >> 2], HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 453) {
            r71 = r34;
            r72 = _new_args(r1, HEAP32[r36 - 4 >> 2], 0, 0, 0, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 454) {
            r71 = r34;
            r72 = _new_args(r1, 0, HEAP32[r36 - 12 >> 2], HEAP16[r36 - 4 >> 1], 0, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 455) {
            r71 = r34;
            r72 = _new_args(r1, 0, HEAP32[r36 - 20 >> 2], HEAP16[r36 - 12 >> 1], HEAP32[r36 - 4 >> 2], HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 456) {
            r71 = r34;
            r72 = _new_args(r1, 0, HEAP32[r36 - 4 >> 2], 0, 0, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 457) {
            r71 = r34;
            r72 = _new_args(r1, 0, HEAP32[r36 - 12 >> 2], 0, HEAP32[r36 - 4 >> 2], HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 458) {
            r71 = r34;
            r72 = _new_args(r1, 0, 0, HEAP16[r36 - 4 >> 1], 0, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 459) {
            r71 = r34;
            r72 = _new_args(r1, 0, 0, HEAP16[r36 - 12 >> 1], HEAP32[r36 - 4 >> 2], HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 460) {
            r71 = r34;
            r72 = _new_args(r1, 0, 0, 0, 0, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 461) {
            _local_add_f(r1, 0);
            r71 = r34;
            r72 = _new_args(r1, 0, 0, 0, 0, 0);
          } else if ((r61 | 0) == 462) {
            _yyerror(r1, 5317256);
            r71 = r34;
            r72 = 0;
          } else if ((r61 | 0) == 463) {
            _yyerror(r1, 5317064);
            r71 = r34;
            r72 = 0;
          } else if ((r61 | 0) == 464) {
            _yyerror(r1, 5316804);
            r71 = r34;
            r72 = 0;
          } else if ((r61 | 0) == 465) {
            _yyerror(r1, 5316572);
            r71 = r34;
            r72 = 0;
          } else if ((r61 | 0) == 466) {
            r71 = r34;
            r72 = r49 & -65536;
          } else if ((r61 | 0) == 467) {
            r41 = r36;
            _local_add_f(r1, HEAP16[r41 >> 1]);
            r71 = r34;
            r72 = r49 & -65536 | HEAPU16[r41 >> 1];
          } else if ((r61 | 0) == 468) {
            r71 = r34;
            r72 = _new_arg(r1, HEAP16[r36 >> 1]);
          } else if ((r61 | 0) == 469) {
            r71 = r34;
            r72 = _new_masgn(r1, HEAP32[r36 - 4 >> 2], 0);
          } else if ((r61 | 0) == 470) {
            r71 = r34;
            r72 = _list1_gen(r1, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 471) {
            r71 = r34;
            r72 = _append_gen(HEAP32[r36 - 8 >> 2], _list1_gen(r1, HEAP32[r36 >> 2]));
          } else if ((r61 | 0) == 472) {
            r41 = r36 - 8 | 0;
            _local_add_f(r1, HEAP16[r41 >> 1]);
            r71 = r34;
            r72 = _cons_gen(r1, HEAP16[r41 >> 1] << 16 >> 16, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 473) {
            r41 = r36 - 8 | 0;
            _local_add_f(r1, HEAP16[r41 >> 1]);
            r71 = r34;
            r72 = _cons_gen(r1, HEAP16[r41 >> 1] << 16 >> 16, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 474) {
            r71 = r34;
            r72 = _list1_gen(r1, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 475) {
            r71 = r34;
            r72 = _append_gen(HEAP32[r36 - 8 >> 2], _list1_gen(r1, HEAP32[r36 >> 2]));
          } else if ((r61 | 0) == 476) {
            r71 = r34;
            r72 = _list1_gen(r1, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 477) {
            r71 = r34;
            r72 = _append_gen(HEAP32[r36 - 8 >> 2], _list1_gen(r1, HEAP32[r36 >> 2]));
          } else if ((r61 | 0) == 480) {
            r41 = r36;
            _local_add_f(r1, HEAP16[r41 >> 1]);
            r71 = r34;
            r72 = r49 & -65536 | HEAPU16[r41 >> 1];
          } else if ((r61 | 0) == 481) {
            _local_add_f(r1, 0);
            r71 = r34;
            r72 = r49 | 65535;
          } else if ((r61 | 0) == 484) {
            r41 = r36;
            _local_add_f(r1, HEAP16[r41 >> 1]);
            r71 = r34;
            r72 = r49 & -65536 | HEAPU16[r41 >> 1];
          } else if ((r61 | 0) == 485) {
            r71 = r34;
            r72 = r49 & -65536 | HEAPU16[r36 >> 1];
          } else if ((r61 | 0) == 486) {
            _local_add_f(r1, 0);
            r71 = r34;
            r72 = r49 & -65536;
          } else if ((r61 | 0) == 487) {
            r41 = HEAP32[r36 >> 2];
            if ((r41 | 0) != 0) {
              r71 = r34;
              r72 = r41;
              break;
            }
            r71 = r34;
            r72 = _new_nil(r1);
          } else if ((r61 | 0) == 488) {
            HEAP32[r10] = 0;
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 489) {
            r41 = r36 - 4 | 0;
            r46 = HEAP32[r41 >> 2];
            do {
              if ((r46 | 0) == 0) {
                _yyerror(r1, 5316212);
              } else {
                r45 = HEAP32[r46 >> 2];
                if (!((r45 | 0) == 55 | (r45 | 0) == 56 | (r45 | 0) == 57 | (r45 | 0) == 47 | (r45 | 0) == 51 | (r45 | 0) == 34)) {
                  break;
                }
                _yyerror(r1, 5316008);
              }
            } while (0);
            r71 = r34;
            r72 = HEAP32[r41 >> 2];
          } else if ((r61 | 0) == 491) {
            r71 = r34;
            r72 = HEAP32[r36 - 4 >> 2];
          } else if ((r61 | 0) == 492) {
            r71 = r34;
            r72 = _list1_gen(r1, HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 493) {
            r71 = r34;
            r72 = _append_gen(HEAP32[r36 - 8 >> 2], _list1_gen(r1, HEAP32[r36 >> 2]));
          } else if ((r61 | 0) == 494) {
            r71 = r34;
            r72 = _cons_gen(r1, HEAP32[r36 - 8 >> 2], HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 495) {
            r71 = r34;
            r72 = _cons_gen(r1, _new_sym(r1, HEAP16[r36 - 4 >> 1]), HEAP32[r36 >> 2]);
          } else if ((r61 | 0) == 517) {
            r71 = 0;
            r72 = r49;
          } else if ((r61 | 0) == 519) {
            HEAP32[r23] = HEAP32[r23] + 1 | 0;
            HEAP32[r24 >> 2] = 0;
            r71 = r34;
            r72 = r49;
          } else if ((r61 | 0) == 521) {
            r71 = 0;
            r72 = r49;
          } else if ((r61 | 0) == 522) {
            r71 = r34;
            r72 = 0;
          } else {
            r71 = r34;
            r72 = r49;
          }
        } while (0);
        r49 = (-r47 << 1) + r38 | 0;
        r46 = HEAP16[(r61 << 1) + 5265492 >> 1];
        r45 = (r40 << 2) + r36 | 0;
        HEAP32[r45 >> 2] = r72;
        r75 = (r46 & 65535) - 144 | 0;
        r46 = HEAP16[r49 >> 1];
        r76 = (r46 << 16 >> 16) + (HEAP16[(r75 << 1) + 5266540 >> 1] << 16 >> 16) | 0;
        do {
          if (r76 >>> 0 < 10247) {
            if (HEAP16[(r76 << 1) + 5270828 >> 1] << 16 >> 16 != r46 << 16 >> 16) {
              break;
            }
            r63 = r60;
            r64 = HEAP16[(r76 << 1) + 5244420 >> 1] << 16 >> 16;
            r65 = r45;
            r66 = r49;
            r67 = r31;
            r68 = r32;
            r69 = r62;
            r70 = r71;
            break L1856;
          }
        } while (0);
        r63 = r60;
        r64 = HEAP16[(r75 << 1) + 5268684 >> 1] << 16 >> 16;
        r65 = r45;
        r66 = r49;
        r67 = r31;
        r68 = r32;
        r69 = r62;
        r70 = r71;
      } else if (r2 == 1966) {
        r2 = 0;
        do {
          if ((r34 | 0) == 0) {
            r76 = _yysyntax_error(0, r26, r58);
            if (r31 >>> 0 < r76 >>> 0 & (r31 | 0) != -1) {
              r46 = r76 << 1;
              r40 = r76 >>> 0 > r46 >>> 0 ? -1 : r46;
              if ((r32 | 0) != (r5 | 0)) {
                _mrb_free(HEAP32[r8], r32);
              }
              r46 = _mrb_malloc(HEAP32[r8], r40);
              r47 = (r46 | 0) == 0;
              r77 = r47 ? 128 : r40;
              r78 = r47 ? r5 : r46;
            } else {
              r77 = r31;
              r78 = r32;
            }
            r46 = (r76 | 0) == 0;
            if (r46 | r76 >>> 0 > r77 >>> 0) {
              _yyerror(r1, 5315860);
              if (r46) {
                r79 = r77;
                r80 = r78;
                break;
              } else {
                r42 = r38;
                r43 = r39;
                r44 = r78;
                r2 = 1986;
                break L1827;
              }
            } else {
              _yysyntax_error(r78, r26, r58);
              _yyerror(r1, r78);
              r79 = r77;
              r80 = r78;
              break;
            }
          } else {
            r79 = r31;
            r80 = r32;
          }
        } while (0);
        do {
          if ((r34 | 0) == 3) {
            if ((r58 | 0) >= 1) {
              r81 = -2;
              break;
            }
            if ((r58 | 0) == 0) {
              r50 = r80;
              r51 = r39;
              r52 = r38;
              break L1827;
            } else {
              r81 = r58;
            }
          } else {
            r81 = r58;
          }
        } while (0);
        r49 = r36;
        r45 = r38;
        r75 = r48;
        L2335 : while (1) {
          do {
            if (r75 << 16 >> 16 != -712) {
              r46 = (r75 << 16 >> 16) + 1 | 0;
              if (r46 >>> 0 >= 10247) {
                break;
              }
              if (HEAP16[(r46 << 1) + 5270828 >> 1] << 16 >> 16 != 1) {
                break;
              }
              r82 = HEAP16[(r46 << 1) + 5244420 >> 1];
              if (r82 << 16 >> 16 > 0) {
                break L2335;
              }
            }
          } while (0);
          if ((r45 | 0) == (r39 | 0)) {
            r50 = r80;
            r51 = r39;
            r52 = r39;
            break L1827;
          }
          r41 = r45 - 2 | 0;
          r49 = r49 - 4 | 0;
          r45 = r41;
          r75 = HEAP16[(HEAP16[r41 >> 1] << 16 >> 16 << 1) + 5266832 >> 1];
        }
        if (r82 << 16 >> 16 == 3) {
          r50 = r80;
          r51 = r39;
          r52 = r45;
          break L1827;
        }
        r75 = r49 + 4 | 0;
        HEAP32[r75 >> 2] = HEAP32[r9 >> 2];
        r63 = r81;
        r64 = r82 << 16 >> 16;
        r65 = r75;
        r66 = r45;
        r67 = r79;
        r68 = r80;
        r69 = r59;
        r70 = 3;
      }
    } while (0);
    r4 = r63;
    r26 = r64;
    r27 = r35;
    r28 = r65;
    r29 = r37;
    r7 = r66 + 2 | 0;
    r30 = r39;
    r31 = r67;
    r32 = r68;
    r33 = r69;
    r34 = r70;
  }
  if (r2 == 1986) {
    _yyerror(r1, 5315672);
    r50 = r44;
    r51 = r43;
    r52 = r42;
  }
  L2349 : do {
    if ((r52 | 0) != (r51 | 0)) {
      r42 = r52;
      while (1) {
        r43 = r42 - 2 | 0;
        if ((r43 | 0) == (r51 | 0)) {
          break L2349;
        } else {
          r42 = r43;
        }
      }
    }
  } while (0);
  if ((r51 | 0) != (r6 | 0)) {
    _mrb_free(HEAP32[r8], r51);
  }
  if ((r50 | 0) == (r5 | 0)) {
    STACKTOP = r3;
    return;
  }
  _mrb_free(HEAP32[r8], r50);
  STACKTOP = r3;
  return;
}
_yyparse["X"] = 1;
function _cond(r1) {
  return r1;
}
function _append_gen(r1, r2) {
  var r3, r4, r5, r6;
  do {
    if ((r1 | 0) == 0) {
      r3 = r2;
    } else {
      r4 = r1;
      while (1) {
        r5 = r4 + 4 | 0;
        r6 = HEAP32[r5 >> 2];
        if ((r6 | 0) == 0) {
          break;
        } else {
          r4 = r6;
        }
      }
      if ((r2 | 0) == 0) {
        r3 = r1;
        break;
      }
      HEAP32[r5 >> 2] = r2;
      r3 = r1;
    }
  } while (0);
  return r3;
}
function _local_resume(r1, r2) {
  HEAP32[r1 + 72 >> 2] = r2;
  return;
}
function _local_unnest(r1) {
  var r2;
  r2 = r1 + 72 | 0;
  HEAP32[r2 >> 2] = HEAP32[HEAP32[r2 >> 2] + 4 >> 2];
  return;
}
function _yylex(r1, r2) {
  HEAP32[r2 + 1112 >> 2] = r1;
  return _parser_yylex(r2);
}
function _cons_gen(r1, r2, r3) {
  var r4, r5, r6;
  r4 = r1 + 8 | 0;
  r5 = HEAP32[r4 >> 2];
  if ((r5 | 0) == 0) {
    r6 = _parser_palloc(r1, 12);
  } else {
    HEAP32[r4 >> 2] = HEAP32[r5 + 4 >> 2];
    r6 = r5;
  }
  HEAP32[r6 >> 2] = r2;
  HEAP32[r6 + 4 >> 2] = r3;
  HEAP16[r6 + 8 >> 1] = HEAP32[r1 + 28 >> 2] & 65535;
  return r6;
}
function _new_scope(r1, r2) {
  return _cons_gen(r1, 3, _cons_gen(r1, HEAP32[HEAP32[r1 + 72 >> 2] >> 2], r2));
}
function _new_begin(r1, r2) {
  var r3;
  if ((r2 | 0) == 0) {
    r3 = _cons_gen(r1, 17, 0);
  } else {
    r3 = _list2_gen(r1, 17, r2);
  }
  return r3;
}
function _list1_gen(r1, r2) {
  return _cons_gen(r1, r2, 0);
}
function _local_switch(r1) {
  var r2, r3;
  r2 = r1 + 72 | 0;
  r3 = HEAP32[r2 >> 2];
  HEAP32[r2 >> 2] = _cons_gen(r1, 0, 0);
  return r3;
}
function _yyerror(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r3 = r1 >> 2;
  r4 = STACKTOP;
  do {
    if ((HEAP32[r3 + 282] | 0) == 0) {
      r5 = HEAP32[r3 + 6];
      r6 = HEAP32[_stderr >> 2];
      r7 = HEAP32[r3 + 7];
      r8 = HEAP32[r3 + 8];
      if ((r5 | 0) == 0) {
        _fprintf(r6, 5322484, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r7, HEAP32[tempInt + 4 >> 2] = r8, HEAP32[tempInt + 8 >> 2] = r2, tempInt));
        break;
      } else {
        _fprintf(r6, 5322500, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r7, HEAP32[tempInt + 8 >> 2] = r8, HEAP32[tempInt + 12 >> 2] = r2, tempInt));
        break;
      }
    } else {
      r8 = (r1 + 1116 | 0) >> 2;
      if (HEAP32[r8] >>> 0 >= 10) {
        break;
      }
      r7 = _strlen(r2) + 1 | 0;
      r5 = _parser_palloc(r1, r7);
      _memcpy(r5, r2, r7);
      HEAP32[r3 + (HEAP32[r8] * 3 | 0) + 285] = r5;
      HEAP32[r3 + (HEAP32[r8] * 3 | 0) + 283] = HEAP32[r3 + 7];
      HEAP32[r3 + (HEAP32[r8] * 3 | 0) + 284] = HEAP32[r3 + 8];
    }
  } while (0);
  r3 = r1 + 1116 | 0;
  HEAP32[r3 >> 2] = HEAP32[r3 >> 2] + 1 | 0;
  STACKTOP = r4;
  return;
}
function _new_rescue(r1, r2, r3, r4) {
  return _list4_gen(r1, 18, r2, r3, r4);
}
function _yywarn(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r3 = r1 >> 2;
  r4 = STACKTOP;
  do {
    if ((HEAP32[r3 + 282] | 0) == 0) {
      r5 = HEAP32[r3 + 6];
      r6 = HEAP32[_stderr >> 2];
      r7 = HEAP32[r3 + 7];
      r8 = HEAP32[r3 + 8];
      if ((r5 | 0) == 0) {
        _fprintf(r6, 5322484, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r7, HEAP32[tempInt + 4 >> 2] = r8, HEAP32[tempInt + 8 >> 2] = r2, tempInt));
        break;
      } else {
        _fprintf(r6, 5322500, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r7, HEAP32[tempInt + 8 >> 2] = r8, HEAP32[tempInt + 12 >> 2] = r2, tempInt));
        break;
      }
    } else {
      r8 = (r1 + 1120 | 0) >> 2;
      if (HEAP32[r8] >>> 0 >= 10) {
        break;
      }
      r7 = _strlen(r2) + 1 | 0;
      r5 = _parser_palloc(r1, r7);
      _memcpy(r5, r2, r7);
      HEAP32[r3 + (HEAP32[r8] * 3 | 0) + 315] = r5;
      HEAP32[r3 + (HEAP32[r8] * 3 | 0) + 313] = HEAP32[r3 + 7];
      HEAP32[r3 + (HEAP32[r8] * 3 | 0) + 314] = HEAP32[r3 + 8];
    }
  } while (0);
  r3 = r1 + 1120 | 0;
  HEAP32[r3 >> 2] = HEAP32[r3 >> 2] + 1 | 0;
  STACKTOP = r4;
  return;
}
function _new_ensure(r1, r2, r3) {
  return _cons_gen(r1, 19, _cons_gen(r1, r2, _cons_gen(r1, 0, r3)));
}
function _new_nil(r1) {
  return _list1_gen(r1, 83);
}
function _new_alias(r1, r2, r3) {
  return _cons_gen(r1, 69, _cons_gen(r1, r2 << 16 >> 16, r3 << 16 >> 16));
}
function _new_if(r1, r2, r3, r4) {
  return _list4_gen(r1, 5, r2, r3, r4);
}
function _new_unless(r1, r2, r3, r4) {
  return _list4_gen(r1, 5, r2, r4, r3);
}
function _new_while(r1, r2, r3) {
  return _cons_gen(r1, 9, _cons_gen(r1, r2, r3));
}
function _new_until(r1, r2, r3) {
  return _cons_gen(r1, 10, _cons_gen(r1, r2, r3));
}
function _list3_gen(r1, r2, r3, r4) {
  return _cons_gen(r1, r2, _cons_gen(r1, r3, _cons_gen(r1, r4, 0)));
}
function _new_postexe(r1, r2) {
  return _cons_gen(r1, 88, r2);
}
function _new_masgn(r1, r2, r3) {
  return _cons_gen(r1, 23, _cons_gen(r1, r2, r3));
}
function _new_op_asgn(r1, r2, r3, r4) {
  return _list4_gen(r1, 28, r2, r3 << 16 >> 16, r4);
}
function _new_call(r1, r2, r3, r4) {
  return _list4_gen(r1, 29, r2, r3 << 16 >> 16, r4);
}
function _intern_gen(r1, r2) {
  return _mrb_intern(r1, r2);
}
function _new_asgn(r1, r2, r3) {
  return _cons_gen(r1, 24, _cons_gen(r1, r2, r3));
}
function _new_array(r1, r2) {
  return _cons_gen(r1, 34, r2);
}
function _new_and(r1, r2, r3) {
  return _cons_gen(r1, 20, _cons_gen(r1, r2, r3));
}
function _new_or(r1, r2, r3) {
  return _cons_gen(r1, 21, _cons_gen(r1, r2, r3));
}
function _call_uni_op(r1, r2, r3) {
  return _new_call(r1, r2, _intern_gen(HEAP32[r1 >> 2], r3), 0);
}
function _local_nest(r1) {
  var r2;
  r2 = r1 + 72 | 0;
  HEAP32[r2 >> 2] = _cons_gen(r1, 0, HEAP32[r2 >> 2]);
  return;
}
function _new_block(r1, r2, r3) {
  return _list4_gen(r1, 4, HEAP32[HEAP32[r1 + 72 >> 2] >> 2], r2, r3);
}
function _new_fcall(r1, r2, r3) {
  return _list4_gen(r1, 30, _new_self(r1), r2 << 16 >> 16, r3);
}
function _args_with_block(r1, r2, r3) {
  var r4;
  if ((r3 | 0) == 0) {
    return;
  }
  r4 = r2 + 4 | 0;
  if ((HEAP32[r4 >> 2] | 0) != 0) {
    _yyerror(r1, 5316076);
  }
  HEAP32[r4 >> 2] = r3;
  return;
}
function _new_super(r1, r2) {
  return _cons_gen(r1, 32, r2);
}
function _new_yield(r1, r2) {
  var r3;
  if ((r2 | 0) == 0) {
    r3 = _cons_gen(r1, 38, 0);
    return r3;
  }
  if ((HEAP32[r2 + 4 >> 2] | 0) != 0) {
    _yyerror(r1, 5316076);
  }
  r3 = _cons_gen(r1, 38, HEAP32[r2 >> 2]);
  return r3;
}
function _new_return(r1, r2) {
  return _cons_gen(r1, 37, r2);
}
function _ret_args(r1, r2) {
  var r3;
  if ((HEAP32[r2 + 4 >> 2] | 0) != 0) {
    _yyerror(r1, 5316116);
  }
  r3 = HEAP32[r2 >> 2];
  if ((HEAP32[r3 + 4 >> 2] | 0) == 0) {
    r2 = HEAP32[r3 >> 2];
    return r2;
  } else {
    r2 = _new_array(r1, r3);
    return r2;
  }
}
function _new_break(r1, r2) {
  return _cons_gen(r1, 13, r2);
}
function _new_next(r1, r2) {
  return _cons_gen(r1, 14, r2);
}
function _list2_gen(r1, r2, r3) {
  return _cons_gen(r1, r2, _cons_gen(r1, r3, 0));
}
function _assignable(r1, r2) {
  if ((HEAP32[r2 >> 2] | 0) != 39) {
    return;
  }
  _local_add(r1, HEAP32[r2 + 4 >> 2] & 65535);
  return;
}
function _new_colon2(r1, r2, r3) {
  return _cons_gen(r1, 74, _cons_gen(r1, r2, r3 << 16 >> 16));
}
function _new_colon3(r1, r2) {
  return _cons_gen(r1, 75, r2 << 16 >> 16);
}
function _new_undef(r1, r2) {
  return _list2_gen(r1, 70, r2 << 16 >> 16);
}
function _new_dot2(r1, r2, r3) {
  return _cons_gen(r1, 77, _cons_gen(r1, r2, r3));
}
function _new_dot3(r1, r2, r3) {
  return _cons_gen(r1, 78, _cons_gen(r1, r2, r3));
}
function _call_bin_op(r1, r2, r3, r4) {
  return _new_call(r1, r2, _intern_gen(HEAP32[r1 >> 2], r3), _list1_gen(r1, _list1_gen(r1, r4)));
}
function _match_op(r1, r2, r3) {
  return _cons_gen(r1, 47, _cons_gen(r1, r2, r3));
}
function _new_hash(r1, r2) {
  return _cons_gen(r1, 36, r2);
}
function _new_block_arg(r1, r2) {
  return _cons_gen(r1, 66, r2);
}
function _new_splat(r1, r2) {
  return _cons_gen(r1, 63, r2);
}
function _call_with_block(r1, r2, r3) {
  var r4, r5;
  r4 = r2 + 4 | 0;
  r5 = HEAP32[r4 >> 2];
  if ((HEAP32[r2 >> 2] - 32 | 0) >>> 0 < 2) {
    if ((r5 | 0) == 0) {
      HEAP32[r4 >> 2] = _cons_gen(r1, 0, r3);
      return;
    } else {
      _args_with_block(r1, r5, r3);
      return;
    }
  } else {
    r4 = HEAP32[HEAP32[r5 + 4 >> 2] + 4 >> 2] | 0;
    r5 = HEAP32[r4 >> 2];
    if ((r5 | 0) == 0) {
      HEAP32[r4 >> 2] = _cons_gen(r1, 0, r3);
      return;
    } else {
      _args_with_block(r1, r5, r3);
      return;
    }
  }
}
function _new_lambda(r1, r2, r3) {
  return _list4_gen(r1, 53, HEAP32[HEAP32[r1 + 72 >> 2] >> 2], r2, r3);
}
function _new_case(r1, r2, r3) {
  var r4, r5;
  r4 = _list2_gen(r1, 6, r2);
  r2 = r4;
  while (1) {
    r5 = r2 + 4 | 0;
    r1 = HEAP32[r5 >> 2];
    if ((r1 | 0) == 0) {
      break;
    } else {
      r2 = r1;
    }
  }
  HEAP32[r5 >> 2] = r3;
  return r4;
}
function _new_for(r1, r2, r3, r4) {
  return _list4_gen(r1, 12, r2, r3, r4);
}
function _new_class(r1, r2, r3, r4) {
  return _list4_gen(r1, 71, r2, r3, _cons_gen(r1, HEAP32[HEAP32[r1 + 72 >> 2] >> 2], r4));
}
function _new_sclass(r1, r2, r3) {
  return _list3_gen(r1, 73, r2, _cons_gen(r1, HEAP32[HEAP32[r1 + 72 >> 2] >> 2], r3));
}
function _new_module(r1, r2, r3) {
  return _list3_gen(r1, 72, r2, _cons_gen(r1, HEAP32[HEAP32[r1 + 72 >> 2] >> 2], r3));
}
function _new_def(r1, r2, r3, r4) {
  return _list5_gen(r1, r2 << 16 >> 16, HEAP32[HEAP32[r1 + 72 >> 2] >> 2], r3, r4);
}
function _new_sdef(r1, r2, r3, r4, r5) {
  return _list6_gen(r1, r2, r3 << 16 >> 16, HEAP32[HEAP32[r1 + 72 >> 2] >> 2], r4, r5);
}
function _new_redo(r1) {
  return _list1_gen(r1, 15);
}
function _new_retry(r1) {
  return _list1_gen(r1, 16);
}
function _new_arg(r1, r2) {
  return _cons_gen(r1, 60, r2 << 16 >> 16);
}
function _new_args(r1, r2, r3, r4, r5, r6) {
  return _cons_gen(r1, r2, _cons_gen(r1, r3, _cons_gen(r1, r4 << 16 >> 16, _cons_gen(r1, r5, r6 << 16 >> 16))));
}
function _local_add_f(r1, r2) {
  var r3, r4;
  r3 = r1 + 72 | 0;
  r4 = _append_gen(HEAP32[HEAP32[r3 >> 2] >> 2], _list1_gen(r1, r2 << 16 >> 16));
  HEAP32[HEAP32[r3 >> 2] >> 2] = r4;
  return;
}
function _new_zsuper(r1) {
  return _list1_gen(r1, 33);
}
function _new_dstr(r1, r2) {
  return _cons_gen(r1, 56, r2);
}
function _new_sym(r1, r2) {
  return _cons_gen(r1, 54, r2 << 16 >> 16);
}
function _new_dsym(r1, r2) {
  return _cons_gen(r1, 94, _new_dstr(r1, r2));
}
function _new_strsym(r1, r2, r3) {
  return _mrb_intern2(r1, r2, r3);
}
function _negate_lit(r1, r2) {
  return _cons_gen(r1, 52, r2);
}
function _new_lvar(r1, r2) {
  return _cons_gen(r1, 39, r2 << 16 >> 16);
}
function _new_ivar(r1, r2) {
  return _cons_gen(r1, 42, r2 << 16 >> 16);
}
function _new_gvar(r1, r2) {
  return _cons_gen(r1, 41, r2 << 16 >> 16);
}
function _new_cvar(r1, r2) {
  return _cons_gen(r1, 44, r2 << 16 >> 16);
}
function _new_const(r1, r2) {
  return _cons_gen(r1, 43, r2 << 16 >> 16);
}
function _var_reference(r1, r2) {
  var r3, r4, r5;
  if ((HEAP32[r2 >> 2] | 0) != 39) {
    r3 = r2;
    return r3;
  }
  r4 = HEAP32[r2 + 4 >> 2] & 65535;
  if ((_local_var_p(HEAP32[r1 + 72 >> 2], r4) | 0) != 0) {
    r3 = r2;
    return r3;
  }
  r5 = _new_fcall(r1, r4, 0);
  _cons_free_gen(r1, r2);
  r3 = r5;
  return r3;
}
function _new_self(r1) {
  return _list1_gen(r1, 82);
}
function _new_true(r1) {
  return _list1_gen(r1, 84);
}
function _new_false(r1) {
  return _list1_gen(r1, 85);
}
function _new_str(r1, r2, r3) {
  return _cons_gen(r1, 55, _cons_gen(r1, _parser_strndup(r1, r2, r3), r3));
}
function _new_int(r1, r2, r3) {
  return _list3_gen(r1, 50, _parser_strdup(r1, r2), r3);
}
function _backref_error(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  r4 = HEAP32[r2 >> 2];
  if ((r4 | 0) == 45) {
    _yyerror_i(r1, 5322592, HEAP32[r2 + 4 >> 2]);
    STACKTOP = r3;
    return;
  } else if ((r4 | 0) == 46) {
    _yyerror_i(r1, 5322568, HEAP32[r2 + 4 >> 2]);
    STACKTOP = r3;
    return;
  } else {
    _mrb_bug(5322516, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r4, tempInt));
  }
}
function _mrb_undef_value231(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 5;
  return;
}
function _mrb_nil_value232(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _yysyntax_error(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 80 | 0;
  r6 = r5 >> 2;
  r7 = r5 + 20;
  r8 = HEAP16[(r2 << 1) + 5266832 >> 1];
  r2 = r8 << 16 >> 16;
  if (r8 << 16 >> 16 <= -712) {
    r9 = 0;
    STACKTOP = r5;
    return r9;
  }
  if (r3 >>> 0 < 374) {
    r10 = HEAPU8[r3 + 5242880 | 0];
  } else {
    r10 = 2;
  }
  r3 = HEAP32[(r10 << 2) + 5243256 >> 2];
  r10 = _yytnamerr(0, r3);
  r11 = r8 << 16 >> 16 < 0 ? -r2 | 0 : 0;
  r8 = 10246 - r2 + 1 | 0;
  r12 = (r8 | 0) < 144 ? r8 : 144;
  HEAP32[r6] = r3;
  r3 = r7 | 0;
  r8 = _yystpcpy(r3, 5264916);
  L9 : do {
    if ((r11 | 0) < (r12 | 0)) {
      r13 = 0;
      r14 = r11;
      r15 = r8;
      r16 = 5264952;
      r17 = r10;
      r18 = 1;
      while (1) {
        if ((HEAP16[(r14 + r2 << 1) + 5270828 >> 1] << 16 >> 16 | 0) == (r14 | 0) & (r14 | 0) != 1) {
          if ((r18 | 0) == 5) {
            break;
          }
          r19 = HEAP32[(r14 << 2) + 5243256 >> 2];
          HEAP32[(r18 << 2 >> 2) + r6] = r19;
          r20 = _llvm_uadd_with_overflow_i32(r17, _yytnamerr(0, r19));
          r19 = tempRet0 & 1 | r13;
          r21 = r18 + 1 | 0;
          r22 = r20;
          r23 = 5264944;
          r24 = _yystpcpy(r15, r16);
          r25 = r19;
        } else {
          r21 = r18;
          r22 = r17;
          r23 = r16;
          r24 = r15;
          r25 = r13;
        }
        r19 = r14 + 1 | 0;
        if ((r19 | 0) < (r12 | 0)) {
          r13 = r25;
          r14 = r19;
          r15 = r24;
          r16 = r23;
          r17 = r22;
          r18 = r21;
        } else {
          r26 = r21;
          r27 = r22;
          r28 = r25;
          break L9;
        }
      }
      HEAP8[r7 + 27 | 0] = 0;
      r26 = 1;
      r27 = r10;
      r28 = r13;
    } else {
      r26 = 1;
      r27 = r10;
      r28 = 0;
    }
  } while (0);
  r10 = _llvm_uadd_with_overflow_i32(r27, _yystrlen(r3));
  if ((tempRet0 & 1 | r28 | 0) != 0) {
    r9 = -1;
    STACKTOP = r5;
    return r9;
  }
  if ((r1 | 0) == 0) {
    r9 = r10;
    STACKTOP = r5;
    return r9;
  } else {
    r29 = 0;
    r30 = r1;
    r31 = r3;
  }
  L23 : while (1) {
    if ((r29 | 0) < (r26 | 0)) {
      r32 = r30;
      r33 = r31;
    } else {
      r34 = r30;
      r35 = r31;
      break;
    }
    while (1) {
      r3 = HEAP8[r33];
      HEAP8[r32] = r3;
      if (r3 << 24 >> 24 == 37) {
        r1 = r33 + 1 | 0;
        if (HEAP8[r1] << 24 >> 24 == 115) {
          break;
        } else {
          r36 = r1;
        }
      } else if (r3 << 24 >> 24 == 0) {
        r9 = r10;
        r4 = 26;
        break L23;
      } else {
        r36 = r33 + 1 | 0;
      }
      r32 = r32 + 1 | 0;
      r33 = r36;
    }
    r13 = r32 + _yytnamerr(r32, HEAP32[(r29 << 2 >> 2) + r6]) | 0;
    r29 = r29 + 1 | 0;
    r30 = r13;
    r31 = r33 + 2 | 0;
  }
  if (r4 == 26) {
    STACKTOP = r5;
    return r9;
  }
  while (1) {
    r4 = HEAP8[r35];
    HEAP8[r34] = r4;
    if (r4 << 24 >> 24 == 0) {
      r9 = r10;
      break;
    }
    r34 = r34 + 1 | 0;
    r35 = r35 + 1 | 0;
  }
  STACKTOP = r5;
  return r9;
}
_yysyntax_error["X"] = 1;
function _mrb_parser_parse(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21;
  r2 = 0;
  r2 = 2;
  r3 = {};
  r4 = {
    "2": (function(value) {
      r2 = 7;
      r5 = value;
    }),
    dummy: 0
  };
  while (1) try {
    switch (r2) {
     case 2:
      r6 = r1 + 1372 | 0;
      r5 = (tempInt = setjmpId++, r3[tempInt] = 1, setjmpLabels[tempInt] = r2, HEAP32[r6 >> 2] = tempInt, 0);
      r2 = 7;
      break;
     case 7:
      r7 = (r5 | 0) == 0;
      if (r7) {
        r2 = 4;
        break;
      } else {
        r2 = 3;
        break;
      }
     case 3:
      _yyerror(r1, 5315472);
      r8 = r1 + 1116 | 0;
      r9 = HEAP32[r8 >> 2];
      r10 = r9 + 1 | 0;
      HEAP32[r8 >> 2] = r10;
      r11 = r1 + 1124 | 0;
      HEAP32[r11 >> 2] = 0;
      r2 = 6;
      break;
     case 4:
      r12 = r1 + 68 | 0;
      HEAP32[r12 >> 2] = 1;
      r13 = r1 + 64 | 0;
      HEAP32[r13 >> 2] = 0;
      r14 = r1 + 60 | 0;
      HEAP32[r14 >> 2] = 0;
      r15 = r1 + 1120 | 0;
      HEAP32[r15 >> 2] = 0;
      r16 = r1 + 1116 | 0;
      HEAP32[r16 >> 2] = 0;
      r17 = r1 + 40 | 0;
      HEAP32[r17 >> 2] = 0;
      _yyparse(r1);
      r18 = r1 + 1124 | 0;
      r19 = HEAP32[r18 >> 2];
      r20 = (r19 | 0) == 0;
      if (r20) {
        r2 = 5;
        break;
      } else {
        r2 = 6;
        break;
      }
     case 5:
      r21 = _new_nil(r1);
      HEAP32[r18 >> 2] = r21;
      r2 = 6;
      break;
     case 6:
      return;
    }
  } catch (e) {
    if (!e.longjmp || !(e.id in r3)) throw e;
    r4[setjmpLabels[e.id]](e.value);
  }
}
function _mrb_parser_new(r1) {
  var r2, r3, r4, r5, r6, r7;
  r2 = _mrb_pool_open(r1);
  if ((r2 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r4 = _mrb_pool_alloc(r2, 1412), r5 = r4 >> 2;
  if ((r4 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r6 = r4;
  for (r4 = r5, r7 = r4 + 353; r4 < r7; r4++) {
    HEAP32[r4] = 0;
  }
  HEAP32[r5] = r1;
  HEAP32[r5 + 1] = r2;
  HEAP32[r5 + 4] = 0;
  HEAP32[r5 + 3] = 0;
  HEAP32[r5 + 5] = 0;
  HEAP32[r5 + 17] = 1;
  HEAP32[r5 + 16] = 0;
  HEAP32[r5 + 15] = 0;
  HEAP32[r5 + 282] = 0;
  HEAP32[r5 + 7] = 1;
  HEAP32[r5 + 8] = 0;
  r3 = r6;
  return r3;
}
function _mrb_parser_free(r1) {
  _mrb_pool_close(r1);
  return;
}
function _mrb_parse_nstring(r1, r2, r3) {
  var r4, r5;
  r4 = _mrb_parser_new(r1);
  if ((r4 | 0) == 0) {
    r5 = 0;
    return r5;
  }
  HEAP32[r4 + 12 >> 2] = r2;
  HEAP32[r4 + 16 >> 2] = r2 + r3 | 0;
  _mrb_parser_parse(r4);
  r5 = r4;
  return r5;
}
function _load_exec(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r4 = r3 >> 2;
  r5 = r2 >> 2;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 296 | 0;
  r7 = r6;
  r8 = r6 + 256;
  r9 = r6 + 264;
  r10 = r6 + 272;
  r11 = r6 + 280;
  r12 = r6 + 288;
  if ((r3 | 0) == 0) {
    _mrb_undef_value231(r1);
    STACKTOP = r6;
    return;
  }
  do {
    if ((HEAP32[r4 + 281] | 0) != 0) {
      if ((HEAP32[r4 + 279] | 0) != 0) {
        break;
      }
      r13 = _mrb_generate_code(r2, r3);
      _mrb_parser_free(HEAP32[r4 + 1]);
      if ((r13 | 0) < 0) {
        _mrb_exc_new(r10, r2, _mrb_class_obj_get(r2, 5322800), 5310056, 13);
        HEAP32[r5 + 12] = HEAP32[r10 >> 2];
        _mrb_nil_value232(r1);
        STACKTOP = r6;
        return;
      }
      r14 = _mrb_proc_new(r2, HEAP32[HEAP32[r5 + 14] + (r13 << 2) >> 2]);
      _mrb_top_self(r11);
      _mrb_run(r12, r2, r14, r11);
      if ((HEAP32[r5 + 12] | 0) == 0) {
        r14 = r12;
        r13 = HEAP32[r14 + 4 >> 2];
        r15 = r1;
        HEAP32[r15 >> 2] = HEAP32[r14 >> 2];
        HEAP32[r15 + 4 >> 2] = r13;
        STACKTOP = r6;
        return;
      } else {
        _mrb_nil_value232(r1);
        STACKTOP = r6;
        return;
      }
    }
  } while (0);
  if ((HEAP32[r4 + 282] | 0) == 0) {
    _mrb_exc_new(r9, r2, _mrb_class_obj_get(r2, 5322412), 5315860, 12);
    HEAP32[r5 + 12] = HEAP32[r9 >> 2];
    _mrb_parser_free(HEAP32[r4 + 1]);
    _mrb_undef_value231(r1);
    STACKTOP = r6;
    return;
  } else {
    r9 = r7 | 0;
    r7 = HEAP32[r4 + 285];
    r12 = _snprintf(r9, 256, 5324796, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r4 + 283], HEAP32[tempInt + 4 >> 2] = r7, tempInt));
    _mrb_exc_new(r8, r2, _mrb_class_obj_get(r2, 5322412), r9, r12);
    HEAP32[r5 + 12] = HEAP32[r8 >> 2];
    _mrb_parser_free(HEAP32[r4 + 1]);
    _mrb_undef_value231(r1);
    STACKTOP = r6;
    return;
  }
}
_load_exec["X"] = 1;
function _mrb_load_nstring_cxt(r1, r2, r3, r4) {
  _load_exec(r1, r2, _mrb_parse_nstring(r2, r3, r4));
  return;
}
function _mrb_load_string_cxt(r1, r2, r3) {
  _mrb_load_nstring_cxt(r1, r2, r3, _strlen(r3));
  return;
}
function _mrb_load_string(r1, r2, r3) {
  _mrb_load_string_cxt(r1, r2, r3);
  return;
}
function _parser_yylex(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92, r93, r94, r95, r96, r97, r98, r99, r100;
  r2 = r1 >> 2;
  r3 = 0;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 260 | 0;
  r5 = r4;
  r6 = r4 + 256;
  r7 = (r1 + 40 | 0) >> 2;
  r8 = HEAP32[r7];
  L79 : do {
    if ((r8 | 0) == 0) {
      r9 = (r1 + 68 | 0) >> 2;
      r10 = HEAP32[r9];
      HEAP32[r9] = 0;
      r11 = (r1 + 36 | 0) >> 2;
      r12 = (r1 + 28 | 0) >> 2;
      r13 = (r1 + 32 | 0) >> 2;
      r14 = 0;
      L82 : while (1) {
        r15 = HEAP32[r11];
        r16 = _nextc(r1);
        if ((r16 | 0) == 60) {
          r3 = 101;
          break;
        } else if ((r16 | 0) == 34) {
          r3 = 113;
          break;
        } else if ((r16 | 0) == 39) {
          r3 = 114;
          break;
        } else if ((r16 | 0) == 63) {
          r3 = 115;
          break;
        } else if ((r16 | 0) == 61) {
          if ((HEAP32[r13] | 0) != 1) {
            r3 = 96;
            break;
          }
          if ((_peeks(r1, 5324752) | 0) == 0) {
            r3 = 96;
            break;
          }
          _skips(r1);
          r14 = r14;
          continue;
        } else if ((r16 | 0) == 33) {
          r3 = 87;
          break;
        } else if ((r16 | 0) == 32 | (r16 | 0) == 9 | (r16 | 0) == 12 | (r16 | 0) == 13 | (r16 | 0) == 11) {
          r14 = 1;
          continue;
        } else if ((r16 | 0) == 35) {
          _skip(r1);
        } else if ((r16 | 0) == 42) {
          r3 = 75;
          break;
        } else if ((r16 | 0) == 62) {
          r3 = 108;
          break;
        } else if ((r16 | 0) == 38) {
          r3 = 136;
          break;
        } else if ((r16 | 0) == 124) {
          r3 = 148;
          break;
        } else if ((r16 | 0) == 43) {
          r3 = 154;
          break;
        } else if ((r16 | 0) == 45) {
          r3 = 167;
          break;
        } else if ((r16 | 0) == 46) {
          r3 = 181;
          break;
        } else if ((r16 | 0) == 48 | (r16 | 0) == 49 | (r16 | 0) == 50 | (r16 | 0) == 51 | (r16 | 0) == 52 | (r16 | 0) == 53 | (r16 | 0) == 54 | (r16 | 0) == 55 | (r16 | 0) == 56 | (r16 | 0) == 57) {
          r3 = 188;
          break;
        } else if ((r16 | 0) == 41 | (r16 | 0) == 93) {
          r3 = 270;
          break;
        } else if ((r16 | 0) == 125) {
          r17 = 125;
          r3 = 271;
          break;
        } else if ((r16 | 0) == 58) {
          r3 = 272;
          break;
        } else if ((r16 | 0) == 47) {
          r3 = 282;
          break;
        } else if ((r16 | 0) == 94) {
          r3 = 290;
          break;
        } else if ((r16 | 0) == 59) {
          r3 = 293;
          break;
        } else if ((r16 | 0) == 44) {
          r3 = 294;
          break;
        } else if ((r16 | 0) == 126) {
          r3 = 295;
          break;
        } else if ((r16 | 0) == 40) {
          r3 = 299;
          break;
        } else if ((r16 | 0) == 91) {
          r3 = 304;
          break;
        } else if ((r16 | 0) == 123) {
          r3 = 313;
          break;
        } else if ((r16 | 0) == 92) {
          r18 = _nextc(r1);
          if ((r18 | 0) != 10) {
            r3 = 322;
            break;
          }
          HEAP32[r12] = HEAP32[r12] + 1 | 0;
          HEAP32[r13] = 0;
          r14 = 1;
          continue;
        } else if ((r16 | 0) == 37) {
          r3 = 323;
          break;
        } else if ((r16 | 0) == 36) {
          r3 = 350;
          break;
        } else if ((r16 | 0) == 64) {
          r3 = 364;
          break;
        } else if ((r16 | 0) == 95) {
          r3 = 372;
          break;
        } else if ((r16 | 0) == 0 | (r16 | 0) == 4 | (r16 | 0) == 26 | (r16 | 0) == -1) {
          r19 = 0;
          break L79;
        } else if ((r16 | 0) != 10) {
          if (!((r16 | 0) != 95 & (_isalnum(r16) | 0) == 0 & r16 >>> 0 < 128)) {
            r3 = 375;
            break;
          }
          _yyerror_i(r1, 5323948, r16);
          r14 = r14;
          continue;
        }
        r20 = HEAP32[r11];
        if ((r20 | 0) == 0 | (r20 | 0) == 7 | (r20 | 0) == 8 | (r20 | 0) == 9 | (r20 | 0) == 10) {
          HEAP32[r12] = HEAP32[r12] + 1 | 0;
          HEAP32[r13] = 0;
          r14 = r14;
          continue;
        } else {
          r21 = r14;
        }
        while (1) {
          r22 = _nextc(r1);
          if ((r22 | 0) == 32 | (r22 | 0) == 9 | (r22 | 0) == 12 | (r22 | 0) == 13 | (r22 | 0) == 11) {
            r21 = 1;
          } else if ((r22 | 0) == 46) {
            break;
          } else if ((r22 | 0) == 0 | (r22 | 0) == -1) {
            r3 = 74;
            break L82;
          } else {
            r3 = 73;
            break L82;
          }
        }
        r20 = _nextc(r1);
        if ((r20 | 0) == 46) {
          r3 = 74;
          break;
        }
        _pushback(r1, r20);
        _pushback(r1, 46);
        r14 = r21;
      }
      do {
        if (r3 == 101) {
          r13 = _nextc(r1);
          HEAP32[r11] = (HEAP32[r11] - 7 | 0) >>> 0 < 2 ? 4 : 0;
          if ((r13 | 0) == 61) {
            r12 = _nextc(r1);
            if ((r12 | 0) == 62) {
              r19 = 325;
              break L79;
            }
            _pushback(r1, r12);
            r19 = 330;
            break L79;
          } else if ((r13 | 0) == 60) {
            r12 = _nextc(r1);
            if ((r12 | 0) == 61) {
              r20 = _intern_gen(HEAP32[r2], 5322356);
              HEAP16[HEAP32[r2 + 278] >> 1] = r20;
              HEAP32[r11] = 0;
              r19 = 343;
              break L79;
            } else {
              _pushback(r1, r12);
              r19 = 339;
              break L79;
            }
          } else {
            _pushback(r1, r13);
            r19 = 60;
            break L79;
          }
        } else if (r3 == 113) {
          HEAP32[r7] = 34;
          r19 = 358;
          break L79;
        } else if (r3 == 114) {
          r19 = _parse_qstring(r1, 39, 39);
          break L79;
        } else if (r3 == 115) {
          if ((HEAP32[r11] - 1 | 0) >>> 0 < 3) {
            HEAP32[r11] = 10;
            r19 = 63;
            break L79;
          }
          r13 = _nextc(r1);
          if ((r13 | 0) == -1) {
            _yyerror(r1, 5324716);
            r19 = 0;
            break L79;
          }
          do {
            if ((_isspace(r13) | 0) == 0) {
              _newtok(r1);
              if ((_isalnum(r13) | 0) != 0 | (r13 | 0) == 95) {
                r12 = _nextc(r1);
                _pushback(r1, r12);
                if ((_isalnum(r12) | 0) != 0 | (r12 | 0) == 95) {
                  break;
                }
              }
              do {
                if ((r13 | 0) == 92) {
                  r12 = _nextc(r1);
                  if ((r12 | 0) == 117) {
                    break;
                  }
                  _pushback(r1, r12);
                  _tokadd(r1, _read_escape(r1));
                } else {
                  _tokadd(r1, r13);
                }
              } while (0);
              _tokfix(r1);
              r12 = _new_str(r1, _tok(r1), _toklen(HEAP32[r2 + 276]));
              HEAP32[HEAP32[r2 + 278] >> 2] = r12;
              HEAP32[r11] = 1;
              r19 = 315;
              break L79;
            } else {
              if ((HEAP32[r11] - 4 | 0) >>> 0 < 2) {
                break;
              }
              if ((r13 | 0) == 10) {
                r23 = 110;
              } else if ((r13 | 0) == 9) {
                r23 = 116;
              } else if ((r13 | 0) == 11) {
                r23 = 118;
              } else if ((r13 | 0) == 13) {
                r23 = 114;
              } else if ((r13 | 0) == 12) {
                r23 = 102;
              } else if ((r13 | 0) == 32) {
                r23 = 115;
              } else {
                break;
              }
              r12 = r5 | 0;
              _snprintf(r12, 256, 5324664, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r23, tempInt));
              _yyerror(r1, r12);
            }
          } while (0);
          _pushback(r1, r13);
          HEAP32[r11] = 10;
          r19 = 63;
          break L79;
        } else if (r3 == 96) {
          HEAP32[r11] = (HEAP32[r11] - 7 | 0) >>> 0 < 2 ? 4 : 0;
          r12 = _nextc(r1);
          if ((r12 | 0) == 61) {
            r20 = _nextc(r1);
            if ((r20 | 0) == 61) {
              r19 = 327;
              break L79;
            }
            _pushback(r1, r20);
            r19 = 326;
            break L79;
          } else if ((r12 | 0) == 62) {
            r19 = 344;
            break L79;
          } else if ((r12 | 0) == 126) {
            r19 = 333;
            break L79;
          } else {
            _pushback(r1, r12);
            r19 = 61;
            break L79;
          }
        } else if (r3 == 87) {
          r12 = _nextc(r1);
          do {
            if ((HEAP32[r11] - 7 | 0) >>> 0 < 2) {
              HEAP32[r11] = 4;
              if ((r12 | 0) == 61) {
                r3 = 90;
                break;
              } else if ((r12 | 0) == 126) {
                r3 = 91;
                break;
              } else if ((r12 | 0) == 64) {
                r19 = 33;
                break L79;
              } else {
                r3 = 92;
                break;
              }
            } else {
              HEAP32[r11] = 0;
              if ((r12 | 0) == 61) {
                r3 = 90;
                break;
              } else if ((r12 | 0) == 126) {
                r3 = 91;
                break;
              } else {
                r3 = 92;
                break;
              }
            }
          } while (0);
          if (r3 == 90) {
            r19 = 328;
            break L79;
          } else if (r3 == 91) {
            r19 = 334;
            break L79;
          } else if (r3 == 92) {
            _pushback(r1, r12);
            r19 = 33;
            break L79;
          }
        } else if (r3 == 73) {
          _pushback(r1, r22);
          r3 = 74;
          break;
        } else if (r3 == 75) {
          r13 = _nextc(r1);
          L155 : do {
            if ((r13 | 0) == 42) {
              r20 = _nextc(r1);
              if ((r20 | 0) == 61) {
                r24 = _intern_gen(HEAP32[r2], 5314988);
                HEAP16[HEAP32[r2 + 278] >> 1] = r24;
                HEAP32[r11] = 0;
                r19 = 343;
                break L79;
              } else {
                _pushback(r1, r20);
                r25 = 324;
                break;
              }
            } else if ((r13 | 0) == 61) {
              r20 = _intern_gen(HEAP32[r2], 5325956);
              HEAP16[HEAP32[r2 + 278] >> 1] = r20;
              HEAP32[r11] = 0;
              r19 = 343;
              break L79;
            } else {
              _pushback(r1, r13);
              r20 = HEAP32[r11];
              do {
                if ((r20 - 4 | 0) >>> 0 > 1 | (r14 | 0) == 0) {
                  r26 = r20;
                } else {
                  if ((_isspace(r13 & 255) | 0) == 0) {
                    _yywarning(r1, 5324760);
                    r25 = 351;
                    break L155;
                  } else {
                    r26 = HEAP32[r11];
                    break;
                  }
                }
              } while (0);
              if ((r26 | 0) == 0 | (r26 | 0) == 6 | (r26 | 0) == 10 | (r26 | 0) == 9) {
                r25 = 351;
                break;
              }
              r25 = 42;
            }
          } while (0);
          HEAP32[r11] = (HEAP32[r11] - 7 | 0) >>> 0 < 2 ? 4 : 0;
          r19 = r25;
          break L79;
        } else if (r3 == 108) {
          HEAP32[r11] = (HEAP32[r11] - 7 | 0) >>> 0 < 2 ? 4 : 0;
          r13 = _nextc(r1);
          if ((r13 | 0) == 61) {
            r19 = 329;
            break L79;
          } else if ((r13 | 0) != 62) {
            _pushback(r1, r13);
            r19 = 62;
            break L79;
          }
          r13 = _nextc(r1);
          if ((r13 | 0) == 61) {
            r12 = _intern_gen(HEAP32[r2], 5322040);
            HEAP16[HEAP32[r2 + 278] >> 1] = r12;
            HEAP32[r11] = 0;
            r19 = 343;
            break L79;
          } else {
            _pushback(r1, r13);
            r19 = 340;
            break L79;
          }
        } else if (r3 == 136) {
          r13 = _nextc(r1);
          if ((r13 | 0) == 38) {
            HEAP32[r11] = 0;
            r12 = _nextc(r1);
            if ((r12 | 0) == 61) {
              r20 = _intern_gen(HEAP32[r2], 5324660);
              HEAP16[HEAP32[r2 + 278] >> 1] = r20;
              HEAP32[r11] = 0;
              r19 = 343;
              break L79;
            } else {
              _pushback(r1, r12);
              r19 = 331;
              break L79;
            }
          } else if ((r13 | 0) == 61) {
            r12 = _intern_gen(HEAP32[r2], 5320552);
            HEAP16[HEAP32[r2 + 278] >> 1] = r12;
            HEAP32[r11] = 0;
            r19 = 343;
            break L79;
          } else {
            _pushback(r1, r13);
            r12 = HEAP32[r11];
            do {
              if ((r12 - 4 | 0) >>> 0 > 1 | (r14 | 0) == 0) {
                r27 = r12;
                r3 = 145;
              } else {
                if ((_isspace(r13 & 255) | 0) == 0) {
                  _yywarning(r1, 5324504);
                  r28 = 352;
                  r29 = HEAP32[r11];
                  break;
                } else {
                  r27 = HEAP32[r11];
                  r3 = 145;
                  break;
                }
              }
            } while (0);
            do {
              if (r3 == 145) {
                if ((r27 | 0) == 0 | (r27 | 0) == 6 | (r27 | 0) == 10 | (r27 | 0) == 9) {
                  r28 = 352;
                  r29 = r27;
                  break;
                }
                r28 = 38;
                r29 = r27;
              }
            } while (0);
            HEAP32[r11] = (r29 - 7 | 0) >>> 0 < 2 ? 4 : 0;
            r19 = r28;
            break L79;
          }
        } else if (r3 == 148) {
          r13 = _nextc(r1);
          if ((r13 | 0) == 124) {
            HEAP32[r11] = 0;
            r12 = _nextc(r1);
            if ((r12 | 0) == 61) {
              r20 = _intern_gen(HEAP32[r2], 5324500);
              HEAP16[HEAP32[r2 + 278] >> 1] = r20;
              HEAP32[r11] = 0;
              r19 = 343;
              break L79;
            } else {
              _pushback(r1, r12);
              r19 = 332;
              break L79;
            }
          } else if ((r13 | 0) == 61) {
            r12 = _intern_gen(HEAP32[r2], 5316560);
            HEAP16[HEAP32[r2 + 278] >> 1] = r12;
            HEAP32[r11] = 0;
            r19 = 343;
            break L79;
          } else {
            HEAP32[r11] = (HEAP32[r11] - 7 | 0) >>> 0 < 2 ? 4 : 0;
            _pushback(r1, r13);
            r19 = 124;
            break L79;
          }
        } else if (r3 == 154) {
          r13 = _nextc(r1);
          r12 = HEAP32[r11];
          if ((r12 - 7 | 0) >>> 0 < 2) {
            HEAP32[r11] = 4;
            if ((r13 | 0) == 64) {
              r19 = 322;
              break L79;
            }
            _pushback(r1, r13);
            r19 = 43;
            break L79;
          }
          if ((r13 | 0) == 61) {
            r20 = _intern_gen(HEAP32[r2], 5326420);
            HEAP16[HEAP32[r2 + 278] >> 1] = r20;
            HEAP32[r11] = 0;
            r19 = 343;
            break L79;
          }
          do {
            if ((r12 | 0) == 4 | (r12 | 0) == 5) {
              if ((r14 | 0) == 0) {
                r3 = 166;
                break;
              }
              if ((_isspace(r13 & 255) | 0) != 0) {
                r3 = 166;
                break;
              }
              _arg_ambiguous(r1);
              break;
            } else if (!((r12 | 0) == 0 | (r12 | 0) == 6 | (r12 | 0) == 10 | (r12 | 0) == 9)) {
              r3 = 166;
            }
          } while (0);
          if (r3 == 166) {
            HEAP32[r11] = 0;
            _pushback(r1, r13);
            r19 = 43;
            break L79;
          }
          HEAP32[r11] = 0;
          _pushback(r1, r13);
          if ((r13 | 0) == -1) {
            r19 = 322;
            break L79;
          }
          if (((r13 & 255) - 48 | 0) >>> 0 >= 10) {
            r19 = 322;
            break L79;
          }
          HEAP32[r11] = 1;
          _newtok(r1);
          _tokadd(r1, 43);
          r30 = _nextc(r1);
          r3 = 189;
          break;
        } else if (r3 == 167) {
          r12 = _nextc(r1);
          r20 = HEAP32[r11];
          if ((r20 - 7 | 0) >>> 0 < 2) {
            HEAP32[r11] = 4;
            if ((r12 | 0) == 64) {
              r19 = 323;
              break L79;
            }
            _pushback(r1, r12);
            r19 = 45;
            break L79;
          }
          if ((r12 | 0) == 61) {
            r24 = _intern_gen(HEAP32[r2], 5326088);
            HEAP16[HEAP32[r2 + 278] >> 1] = r24;
            HEAP32[r11] = 0;
            r19 = 343;
            break L79;
          } else if ((r12 | 0) == 62) {
            HEAP32[r11] = 3;
            r19 = 353;
            break L79;
          } else {
            do {
              if ((r20 | 0) == 4 | (r20 | 0) == 5) {
                if ((r14 | 0) == 0) {
                  r3 = 180;
                  break;
                }
                if ((_isspace(r12 & 255) | 0) != 0) {
                  r3 = 180;
                  break;
                }
                _arg_ambiguous(r1);
                break;
              } else if (!((r20 | 0) == 0 | (r20 | 0) == 6 | (r20 | 0) == 10 | (r20 | 0) == 9)) {
                r3 = 180;
              }
            } while (0);
            if (r3 == 180) {
              HEAP32[r11] = 0;
              _pushback(r1, r12);
              r19 = 45;
              break L79;
            }
            HEAP32[r11] = 0;
            _pushback(r1, r12);
            if ((r12 | 0) != -1) {
              if (((r12 & 255) - 48 | 0) >>> 0 < 10) {
                r19 = 362;
                break L79;
              }
            }
            r19 = 323;
            break L79;
          }
        } else if (r3 == 181) {
          HEAP32[r11] = 0;
          r20 = _nextc(r1);
          if ((r20 | 0) == 46) {
            r13 = _nextc(r1);
            if ((r13 | 0) == 46) {
              r19 = 336;
              break L79;
            }
            _pushback(r1, r13);
            r19 = 335;
            break L79;
          }
          _pushback(r1, r20);
          do {
            if ((r20 | 0) != -1) {
              if (((r20 & 255) - 48 | 0) >>> 0 >= 10) {
                break;
              }
              _yyerror(r1, 5324444);
            }
          } while (0);
          HEAP32[r11] = 8;
          r19 = 46;
          break L79;
        } else if (r3 == 188) {
          HEAP32[r11] = 1;
          _newtok(r1);
          r30 = r16;
          r3 = 189;
          break;
        } else if (r3 == 270) {
          r20 = r1 + 52 | 0;
          HEAP32[r20 >> 2] = HEAP32[r20 >> 2] - 1 | 0;
          r17 = r16;
          r3 = 271;
          break;
        } else if (r3 == 272) {
          r20 = _nextc(r1);
          r12 = HEAP32[r11];
          if ((r20 | 0) != 58) {
            do {
              if ((r12 - 1 | 0) >>> 0 >= 3) {
                if ((_isspace(r20 & 255) | 0) != 0) {
                  break;
                }
                _pushback(r1, r20);
                HEAP32[r11] = 7;
                r19 = 354;
                break L79;
              }
            } while (0);
            _pushback(r1, r20);
            HEAP32[r11] = 0;
            r19 = 58;
            break L79;
          }
          do {
            if ((r12 | 0) == 4 | (r12 | 0) == 5) {
              if ((r14 | 0) == 0) {
                r3 = 277;
                break;
              }
              if ((_isspace(255) | 0) == 0) {
                r3 = 276;
                break;
              } else {
                r3 = 277;
                break;
              }
            } else if ((r12 | 0) == 0 | (r12 | 0) == 6 | (r12 | 0) == 10 | (r12 | 0) == 9) {
              r3 = 276;
            } else {
              r3 = 277;
            }
          } while (0);
          if (r3 == 276) {
            HEAP32[r11] = 0;
            r19 = 342;
            break L79;
          } else if (r3 == 277) {
            HEAP32[r11] = 8;
            r19 = 341;
            break L79;
          }
        } else if (r3 == 282) {
          r12 = HEAP32[r11];
          if ((r12 | 0) == 0 | (r12 | 0) == 6 | (r12 | 0) == 10 | (r12 | 0) == 9) {
            r19 = 355;
            break L79;
          }
          r12 = _nextc(r1);
          if ((r12 | 0) == 61) {
            r20 = _intern_gen(HEAP32[r2], 5314516);
            HEAP16[HEAP32[r2 + 278] >> 1] = r20;
            HEAP32[r11] = 0;
            r19 = 343;
            break L79;
          }
          _pushback(r1, r12);
          r20 = HEAP32[r11];
          do {
            if ((r20 - 4 | 0) >>> 0 > 1 | (r14 | 0) == 0) {
              r31 = r20;
            } else {
              if ((_isspace(r12 & 255) | 0) == 0) {
                _arg_ambiguous(r1);
                r19 = 355;
                break L79;
              } else {
                r31 = HEAP32[r11];
                break;
              }
            }
          } while (0);
          HEAP32[r11] = (r31 - 7 | 0) >>> 0 < 2 ? 4 : 0;
          r19 = 47;
          break L79;
        } else if (r3 == 290) {
          r12 = _nextc(r1);
          if ((r12 | 0) == 61) {
            r20 = _intern_gen(HEAP32[r2], 5318564);
            HEAP16[HEAP32[r2 + 278] >> 1] = r20;
            HEAP32[r11] = 0;
            r19 = 343;
            break L79;
          } else {
            HEAP32[r11] = (HEAP32[r11] - 7 | 0) >>> 0 < 2 ? 4 : 0;
            _pushback(r1, r12);
            r19 = 94;
            break L79;
          }
        } else if (r3 == 293) {
          HEAP32[r11] = 0;
          r19 = 59;
          break L79;
        } else if (r3 == 294) {
          HEAP32[r11] = 0;
          r19 = 44;
          break L79;
        } else if (r3 == 295) {
          do {
            if ((HEAP32[r11] - 7 | 0) >>> 0 < 2) {
              r12 = _nextc(r1);
              if ((r12 | 0) == 64) {
                r32 = 4;
                break;
              }
              _pushback(r1, r12);
              r32 = 4;
            } else {
              r32 = 0;
            }
          } while (0);
          HEAP32[r11] = r32;
          r19 = 126;
          break L79;
        } else if (r3 == 299) {
          r12 = HEAP32[r11];
          do {
            if ((r12 | 0) == 4) {
              if ((r14 | 0) == 0) {
                r33 = 40;
                break;
              } else {
                r3 = 302;
                break;
              }
            } else if ((r12 | 0) == 0 | (r12 | 0) == 6 | (r12 | 0) == 10 | (r12 | 0) == 9) {
              r33 = 345;
            } else {
              if ((r12 | 0) != 5 | (r14 | 0) == 0) {
                r33 = 40;
                break;
              } else {
                r3 = 302;
                break;
              }
            }
          } while (0);
          if (r3 == 302) {
            r33 = (_isspace(255) | 0) == 0 ? 346 : 40;
          }
          r12 = r1 + 52 | 0;
          HEAP32[r12 >> 2] = HEAP32[r12 >> 2] + 1 | 0;
          r12 = r1 + 44 | 0;
          HEAP32[r12 >> 2] = HEAP32[r12 >> 2] << 1;
          r12 = r1 + 48 | 0;
          HEAP32[r12 >> 2] = HEAP32[r12 >> 2] << 1;
          HEAP32[r11] = 0;
          r19 = r33;
          break L79;
        } else if (r3 == 304) {
          r12 = r1 + 52 | 0;
          HEAP32[r12 >> 2] = HEAP32[r12 >> 2] + 1 | 0;
          r12 = HEAP32[r11];
          do {
            if ((r12 | 0) == 7 | (r12 | 0) == 8) {
              HEAP32[r11] = 4;
              r20 = _nextc(r1);
              if ((r20 | 0) != 93) {
                _pushback(r1, r20);
                r19 = 91;
                break L79;
              }
              r20 = _nextc(r1);
              if ((r20 | 0) == 61) {
                r19 = 338;
                break L79;
              }
              _pushback(r1, r20);
              r19 = 337;
              break L79;
            } else if ((r12 | 0) == 4) {
              if ((r14 | 0) == 0) {
                r34 = 91;
                break;
              } else {
                r3 = 311;
                break;
              }
            } else if ((r12 | 0) == 0 | (r12 | 0) == 6 | (r12 | 0) == 10 | (r12 | 0) == 9) {
              r34 = 348;
            } else {
              if ((r12 | 0) != 5 | (r14 | 0) == 0) {
                r34 = 91;
                break;
              } else {
                r3 = 311;
                break;
              }
            }
          } while (0);
          if (r3 == 311) {
            r34 = 348;
          }
          HEAP32[r11] = 0;
          r12 = r1 + 44 | 0;
          HEAP32[r12 >> 2] = HEAP32[r12 >> 2] << 1;
          r12 = r1 + 48 | 0;
          HEAP32[r12 >> 2] = HEAP32[r12 >> 2] << 1;
          r19 = r34;
          break L79;
        } else if (r3 == 313) {
          r12 = r1 + 56 | 0;
          r20 = HEAP32[r12 >> 2];
          do {
            if ((r20 | 0) != 0) {
              r13 = r1 + 52 | 0;
              if ((r20 | 0) != (HEAP32[r13 >> 2] | 0)) {
                break;
              }
              HEAP32[r11] = 0;
              HEAP32[r12 >> 2] = 0;
              HEAP32[r13 >> 2] = r20 - 1 | 0;
              r13 = r1 + 44 | 0;
              HEAP32[r13 >> 2] = HEAP32[r13 >> 2] << 1;
              r13 = r1 + 48 | 0;
              HEAP32[r13 >> 2] = HEAP32[r13 >> 2] << 1;
              r19 = 360;
              break L79;
            }
          } while (0);
          r20 = HEAP32[r11];
          if ((r20 | 0) == 2) {
            r35 = 350;
          } else if ((r20 | 0) == 4 | (r20 | 0) == 5 | (r20 | 0) == 1 | (r20 | 0) == 3) {
            r35 = 123;
          } else {
            r35 = 349;
          }
          r20 = r1 + 44 | 0;
          HEAP32[r20 >> 2] = HEAP32[r20 >> 2] << 1;
          r20 = r1 + 48 | 0;
          HEAP32[r20 >> 2] = HEAP32[r20 >> 2] << 1;
          HEAP32[r11] = 0;
          r19 = r35;
          break L79;
        } else if (r3 == 322) {
          _pushback(r1, r18);
          r19 = 92;
          break L79;
        } else if (r3 == 323) {
          r20 = HEAP32[r11];
          do {
            if ((r20 | 0) == 0 | (r20 | 0) == 6 | (r20 | 0) == 10 | (r20 | 0) == 9) {
              r36 = _nextc(r1);
            } else {
              r12 = _nextc(r1);
              if ((r12 | 0) == 61) {
                r13 = _intern_gen(HEAP32[r2], 5324216);
                HEAP16[HEAP32[r2 + 278] >> 1] = r13;
                HEAP32[r11] = 0;
                r19 = 343;
                break L79;
              }
              r13 = HEAP32[r11];
              if ((r13 - 4 | 0) >>> 0 > 1 | (r14 | 0) == 0) {
                r37 = r13;
              } else {
                if ((_isspace(r12 & 255) | 0) == 0) {
                  r36 = r12;
                  break;
                }
                r37 = HEAP32[r11];
              }
              HEAP32[r11] = (r37 - 7 | 0) >>> 0 < 2 ? 4 : 0;
              _pushback(r1, r12);
              r19 = 37;
              break L79;
            }
          } while (0);
          do {
            if ((r36 | 0) != -1) {
              do {
                if ((_isalnum(r36 & 255) | 0) == 0) {
                  r38 = 81;
                  r39 = r36;
                  r40 = 0;
                } else {
                  r20 = _nextc(r1);
                  if ((_isalnum(r20) | 0) == 0) {
                    r38 = r36;
                    r39 = r20;
                    r40 = r20;
                    break;
                  }
                  _yyerror(r1, 5324232);
                  r19 = 0;
                  break L79;
                }
              } while (0);
              if ((r38 | 0) == -1 | (r39 | 0) == -1) {
                break;
              }
              if ((r39 | 0) == 91) {
                r41 = 93;
              } else if ((r39 | 0) == 123) {
                r41 = 125;
              } else if ((r39 | 0) == 40) {
                r41 = 41;
              } else {
                r41 = (r39 | 0) == 60 ? 62 : r39;
              }
              HEAP32[r7] = r41;
              if ((r38 | 0) == 113) {
                HEAP32[r7] = 0;
                r19 = _parse_qstring(r1, r40, r41);
                break L79;
              } else if ((r38 | 0) == 87) {
                while (1) {
                  r42 = _nextc(r1);
                  if ((_isspace(r42) | 0) == 0) {
                    break;
                  }
                }
                _pushback(r1, r42);
                r19 = 356;
                break L79;
              } else if ((r38 | 0) == 119) {
                while (1) {
                  r43 = _nextc(r1);
                  if ((_isspace(r43) | 0) == 0) {
                    break;
                  }
                }
                _pushback(r1, r43);
                r19 = 357;
                break L79;
              } else if ((r38 | 0) == 114) {
                r19 = 355;
                break L79;
              } else if ((r38 | 0) == 115) {
                HEAP32[r11] = 7;
                r19 = 354;
                break L79;
              } else if ((r38 | 0) == 81) {
                r19 = 358;
                break L79;
              } else {
                _yyerror(r1, 5324232);
                r19 = 0;
                break L79;
              }
            }
          } while (0);
          _yyerror(r1, 5324084);
          r19 = 0;
          break L79;
        } else if (r3 == 350) {
          HEAP32[r11] = 1;
          r20 = _newtok(r1);
          r12 = _nextc(r1);
          do {
            if ((r12 | 0) == 95) {
              _pushback(r1, _nextc(r1));
              r44 = 95;
              r3 = 352;
              break;
            } else if ((r12 | 0) == 126 | (r12 | 0) == 42 | (r12 | 0) == 36 | (r12 | 0) == 63 | (r12 | 0) == 33 | (r12 | 0) == 64 | (r12 | 0) == 47 | (r12 | 0) == 92 | (r12 | 0) == 59 | (r12 | 0) == 44 | (r12 | 0) == 46 | (r12 | 0) == 61 | (r12 | 0) == 58 | (r12 | 0) == 60 | (r12 | 0) == 62 | (r12 | 0) == 34) {
              r44 = r12;
              r3 = 352;
            } else if ((r12 | 0) == 45) {
              _tokadd(r1, 36);
              _tokadd(r1, 45);
              _pushback(r1, _nextc(r1));
              r3 = 354;
              break;
            } else if ((r12 | 0) == 38 | (r12 | 0) == 96 | (r12 | 0) == 39 | (r12 | 0) == 43) {
              if ((r15 | 0) == 7) {
                _tokadd(r1, 36);
                _tokadd(r1, r12);
                r3 = 354;
                break;
              } else {
                r13 = _new_back_ref(r1, r12);
                HEAP32[HEAP32[r2 + 278] >> 2] = r13;
                r19 = 320;
                break L79;
              }
            } else if ((r12 | 0) == 49 | (r12 | 0) == 50 | (r12 | 0) == 51 | (r12 | 0) == 52 | (r12 | 0) == 53 | (r12 | 0) == 54 | (r12 | 0) == 55 | (r12 | 0) == 56 | (r12 | 0) == 57) {
              r13 = r12;
              while (1) {
                _tokadd(r1, r13);
                r45 = _nextc(r1);
                if ((r45 | 0) != -1 & (r45 - 48 | 0) >>> 0 < 10) {
                  r13 = r45;
                } else {
                  break;
                }
              }
              _pushback(r1, r45);
              if ((r15 | 0) == 7) {
                r3 = 354;
                break;
              }
              _tokfix(r1);
              r13 = _new_nth_ref(r1, _atoi(_tok(r1)));
              HEAP32[HEAP32[r2 + 278] >> 2] = r13;
              r19 = 319;
              break L79;
            } else if ((r12 | 0) == 48) {
              r3 = 363;
            } else {
              if (!((r12 | 0) != 95 & (_isalnum(r12) | 0) == 0 & r12 >>> 0 < 128)) {
                r3 = 363;
                break;
              }
              _pushback(r1, r12);
              r19 = 36;
              break L79;
            }
          } while (0);
          if (r3 == 352) {
            _tokadd(r1, 36);
            _tokadd(r1, r44);
            _tokfix(r1);
            r13 = _tok(r1);
            r24 = _intern_gen(HEAP32[r2], r13);
            HEAP16[HEAP32[r2 + 278] >> 1] = r24;
            r19 = 308;
            break L79;
          } else if (r3 == 354) {
            _tokfix(r1);
            r24 = _tok(r1);
            r13 = _intern_gen(HEAP32[r2], r24);
            HEAP16[HEAP32[r2 + 278] >> 1] = r13;
            r19 = 308;
            break L79;
          } else if (r3 == 363) {
            _tokadd(r1, 36);
            r46 = r12;
            r47 = r20;
            r3 = 376;
            break;
          }
        } else if (r3 == 364) {
          r13 = _nextc(r1);
          r24 = _newtok(r1);
          _tokadd(r1, 64);
          if ((r13 | 0) == 64) {
            _tokadd(r1, 64);
            r48 = _nextc(r1);
          } else {
            r48 = r13;
          }
          if (!((r48 | 0) != -1 & (r48 - 48 | 0) >>> 0 < 10)) {
            if (!((r48 | 0) != 95 & (_isalnum(r48) | 0) == 0 & r48 >>> 0 < 128)) {
              r46 = r48;
              r47 = r24;
              r3 = 376;
              break;
            }
            _pushback(r1, r48);
            r19 = 64;
            break L79;
          }
          if ((HEAP32[r2 + 276] | 0) == 1) {
            _yyerror_i(r1, 5324032, r48);
            r19 = 0;
            break L79;
          } else {
            _yyerror_i(r1, 5323984, r48);
            r19 = 0;
            break L79;
          }
        } else if (r3 == 372) {
          r46 = 95;
          r47 = _newtok(r1);
          r3 = 376;
          break;
        } else if (r3 == 375) {
          r46 = r16;
          r47 = _newtok(r1);
          r3 = 376;
          break;
        }
      } while (0);
      if (r3 == 74) {
        HEAP32[r9] = 1;
        HEAP32[r11] = 0;
        r19 = 10;
        break;
      } else if (r3 == 189) {
        L384 : do {
          if ((r30 | 0) == 48) {
            r14 = (r1 + 1104 | 0) >> 2;
            r24 = _toklen(HEAP32[r14]);
            r13 = _nextc(r1);
            do {
              if ((r13 | 0) == 120 | (r13 | 0) == 88) {
                r49 = _nextc(r1);
                L388 : do {
                  if ((r49 | 0) == -1) {
                    r50 = -1;
                    r51 = 0;
                  } else {
                    if ((_isxdigit(r49 & 255) | 0) == 0) {
                      r50 = r49;
                      r51 = 0;
                      break;
                    } else {
                      r52 = r49;
                      r53 = 0;
                    }
                    while (1) {
                      if ((r52 | 0) == 95) {
                        if ((r53 | 0) == 0) {
                          r54 = 95;
                        } else {
                          r50 = 95;
                          r51 = r53;
                          break L388;
                        }
                      } else {
                        if ((_isxdigit(r52 & 255) | 0) == 0) {
                          r50 = r52;
                          r51 = r53;
                          break L388;
                        }
                        _tokadd(r1, _tolower(r52));
                        r54 = 0;
                      }
                      r55 = _nextc(r1);
                      if ((r55 | 0) == -1) {
                        r50 = -1;
                        r51 = r54;
                        break L388;
                      } else {
                        r52 = r55;
                        r53 = r54;
                      }
                    }
                  }
                } while (0);
                _pushback(r1, r50);
                _tokfix(r1);
                if ((_toklen(HEAP32[r14]) | 0) == (r24 | 0)) {
                  _yyerror(r1, 5324412);
                  r19 = 0;
                  break L79;
                }
                if ((r51 | 0) != 0) {
                  r56 = r51;
                  r57 = 0;
                  r3 = 262;
                  break L384;
                }
                r49 = _new_int(r1, _tok(r1), 16);
                HEAP32[HEAP32[r2 + 278] >> 2] = r49;
                r19 = 313;
                break L79;
              } else if ((r13 | 0) == 98 | (r13 | 0) == 66) {
                r49 = _nextc(r1);
                L403 : do {
                  if ((r49 - 48 | 0) >>> 0 < 2) {
                    r55 = r49;
                    r58 = 0;
                    while (1) {
                      if ((r55 | 0) == 95) {
                        if ((r58 | 0) == 0) {
                          r59 = 95;
                        } else {
                          r60 = 95;
                          r61 = r58;
                          break L403;
                        }
                      } else {
                        if ((r55 - 48 | 0) >>> 0 > 1) {
                          r60 = r55;
                          r61 = r58;
                          break L403;
                        }
                        _tokadd(r1, r55);
                        r59 = 0;
                      }
                      r62 = _nextc(r1);
                      if ((r62 | 0) == -1) {
                        r60 = -1;
                        r61 = r59;
                        break L403;
                      } else {
                        r55 = r62;
                        r58 = r59;
                      }
                    }
                  } else {
                    r60 = r49;
                    r61 = 0;
                  }
                } while (0);
                _pushback(r1, r60);
                _tokfix(r1);
                if ((_toklen(HEAP32[r14]) | 0) == (r24 | 0)) {
                  _yyerror(r1, 5324412);
                  r19 = 0;
                  break L79;
                }
                if ((r61 | 0) != 0) {
                  r56 = r61;
                  r57 = 0;
                  r3 = 262;
                  break L384;
                }
                r49 = _new_int(r1, _tok(r1), 2);
                HEAP32[HEAP32[r2 + 278] >> 2] = r49;
                r19 = 313;
                break L79;
              } else if ((r13 | 0) == 100 | (r13 | 0) == 68) {
                r49 = _nextc(r1);
                L417 : do {
                  if ((r49 | 0) == -1) {
                    r63 = -1;
                    r64 = 0;
                  } else {
                    if (((r49 & 255) - 48 | 0) >>> 0 < 10) {
                      r65 = r49;
                      r66 = 0;
                    } else {
                      r63 = r49;
                      r64 = 0;
                      break;
                    }
                    while (1) {
                      if ((r65 | 0) == 95) {
                        if ((r66 | 0) == 0) {
                          r67 = 95;
                        } else {
                          r63 = 95;
                          r64 = r66;
                          break L417;
                        }
                      } else {
                        if (((r65 & 255) - 48 | 0) >>> 0 >= 10) {
                          r63 = r65;
                          r64 = r66;
                          break L417;
                        }
                        _tokadd(r1, r65);
                        r67 = 0;
                      }
                      r58 = _nextc(r1);
                      if ((r58 | 0) == -1) {
                        r63 = -1;
                        r64 = r67;
                        break L417;
                      } else {
                        r65 = r58;
                        r66 = r67;
                      }
                    }
                  }
                } while (0);
                _pushback(r1, r63);
                _tokfix(r1);
                if ((_toklen(HEAP32[r14]) | 0) == (r24 | 0)) {
                  _yyerror(r1, 5324412);
                  r19 = 0;
                  break L79;
                }
                if ((r64 | 0) != 0) {
                  r56 = r64;
                  r57 = 0;
                  r3 = 262;
                  break L384;
                }
                r49 = _new_int(r1, _tok(r1), 10);
                HEAP32[HEAP32[r2 + 278] >> 2] = r49;
                r19 = 313;
                break L79;
              } else if ((r13 | 0) == 111 | (r13 | 0) == 79) {
                r49 = _nextc(r1);
                if (!((r49 | 0) == -1 | (r49 | 0) == 95)) {
                  if (((r49 & 255) - 48 | 0) >>> 0 < 10) {
                    r68 = r49;
                    r3 = 226;
                    break;
                  }
                }
                _yyerror(r1, 5324412);
                r19 = 0;
                break L79;
              } else if ((r13 | 0) == 95) {
                r69 = 95;
                r70 = 0;
                r3 = 227;
              } else {
                r68 = r13;
                r3 = 226;
              }
            } while (0);
            do {
              if (r3 == 226) {
                if ((r68 - 48 | 0) >>> 0 < 8) {
                  r69 = r68;
                  r70 = 0;
                  r3 = 227;
                  break;
                } else {
                  r71 = r68;
                  r3 = 238;
                  break;
                }
              }
            } while (0);
            L437 : do {
              if (r3 == 227) {
                while (1) {
                  r3 = 0;
                  if ((r69 | 0) == 95) {
                    if ((r70 | 0) == 0) {
                      r72 = 95;
                    } else {
                      r73 = 95;
                      r74 = r70;
                      break;
                    }
                  } else {
                    if ((r69 - 48 | 0) >>> 0 > 9) {
                      r73 = r69;
                      r74 = r70;
                      break;
                    }
                    if ((r69 | 0) > 55) {
                      r75 = r69;
                      r76 = r70;
                      break L437;
                    }
                    _tokadd(r1, r69);
                    r72 = 0;
                  }
                  r13 = _nextc(r1);
                  if ((r13 | 0) == -1) {
                    r73 = -1;
                    r74 = r72;
                    break;
                  } else {
                    r69 = r13;
                    r70 = r72;
                    r3 = 227;
                  }
                }
                if ((_toklen(HEAP32[r14]) | 0) > (r24 | 0)) {
                  _pushback(r1, r73);
                  _tokfix(r1);
                  if ((r74 | 0) != 0) {
                    r56 = r74;
                    r57 = 0;
                    r3 = 262;
                    break L384;
                  }
                  r13 = _new_int(r1, _tok(r1), 8);
                  HEAP32[HEAP32[r2 + 278] >> 2] = r13;
                  r19 = 313;
                  break L79;
                } else {
                  if ((r74 | 0) == 0) {
                    r71 = r73;
                    r3 = 238;
                    break;
                  }
                  _pushback(r1, r73);
                  r56 = r74;
                  r57 = 0;
                  r3 = 262;
                  break L384;
                }
              }
            } while (0);
            do {
              if (r3 == 238) {
                if ((r71 - 56 | 0) >>> 0 < 2) {
                  r75 = r71;
                  r76 = 0;
                  break;
                }
                if ((r71 | 0) == 101 | (r71 | 0) == 69 | (r71 | 0) == 46) {
                  _tokadd(r1, 48);
                  r77 = r71;
                  r78 = 0;
                  r79 = 0;
                  r80 = 0;
                  r81 = 0;
                  r3 = 259;
                  break L384;
                } else {
                  _pushback(r1, r71);
                  r24 = _new_int(r1, 5321016, 10);
                  HEAP32[HEAP32[r2 + 278] >> 2] = r24;
                  r19 = 313;
                  break L79;
                }
              }
            } while (0);
            _yyerror(r1, 5324372);
            r77 = r75;
            r78 = r76;
            r79 = 0;
            r80 = 0;
            r81 = 0;
            r3 = 259;
            break;
          } else {
            r77 = r30;
            r78 = 0;
            r79 = 0;
            r80 = 0;
            r81 = 0;
            r3 = 259;
          }
        } while (0);
        L459 : do {
          if (r3 == 259) {
            L460 : while (1) {
              r3 = 0;
              r82 = r77;
              r83 = r78;
              r24 = r79;
              r84 = r81;
              while (1) {
                if ((r82 | 0) == 48 | (r82 | 0) == 49 | (r82 | 0) == 50 | (r82 | 0) == 51 | (r82 | 0) == 52 | (r82 | 0) == 53 | (r82 | 0) == 54 | (r82 | 0) == 55 | (r82 | 0) == 56 | (r82 | 0) == 57) {
                  r3 = 244;
                  break;
                } else if ((r82 | 0) == 46) {
                  r3 = 245;
                  break;
                } else if ((r82 | 0) == 95) {
                  r3 = 256;
                  break;
                } else if (!((r82 | 0) == 101 | (r82 | 0) == 69)) {
                  r85 = r82;
                  break L460;
                }
                if ((r83 | 0) != 0) {
                  r3 = 252;
                  break L460;
                }
                if ((r24 | 0) != 0) {
                  r86 = r82;
                  r3 = 260;
                  break L460;
                }
                _tokadd(r1, r82);
                r87 = r84 + 1 | 0;
                r88 = _nextc(r1);
                if ((r88 | 0) == 45 | (r88 | 0) == 43) {
                  r3 = 255;
                  break;
                } else {
                  r83 = r82;
                  r82 = r88;
                  r24 = 1;
                  r84 = r87;
                }
              }
              if (r3 == 244) {
                r3 = 0;
                _tokadd(r1, r82);
                r89 = 0;
                r90 = r24;
                r91 = r80;
                r92 = r84;
              } else if (r3 == 245) {
                r3 = 0;
                if ((r83 | 0) != 0) {
                  r56 = r83;
                  r57 = r84;
                  r3 = 262;
                  break L459;
                }
                if ((r24 | r80 | 0) != 0) {
                  r86 = 46;
                  r3 = 260;
                  break;
                }
                r14 = _nextc(r1);
                if ((r14 | 0) == -1) {
                  r93 = -1;
                  r3 = 249;
                  break;
                }
                if (((r14 & 255) - 48 | 0) >>> 0 >= 10) {
                  r93 = r14;
                  r3 = 249;
                  break;
                }
                _tokadd(r1, 46);
                _tokadd(r1, r14);
                r89 = 0;
                r90 = r24;
                r91 = r80 + 1 | 0;
                r92 = r84 + 1 | 0;
              } else if (r3 == 255) {
                r3 = 0;
                _tokadd(r1, r88);
                r89 = r88;
                r90 = 1;
                r91 = r80;
                r92 = r87;
              } else if (r3 == 256) {
                r3 = 0;
                if ((r83 | 0) == 0) {
                  r89 = 95;
                  r90 = r24;
                  r91 = r80;
                  r92 = r84;
                } else {
                  r3 = 257;
                  break;
                }
              }
              r77 = _nextc(r1);
              r78 = r89;
              r79 = r90;
              r80 = r91;
              r81 = r92;
            }
            if (r3 == 249) {
              _pushback(r1, r93);
              _pushback(r1, 46);
              r94 = r84;
              break;
            } else if (r3 == 252) {
              _pushback(r1, r82);
              r85 = r83;
            } else if (r3 == 257) {
              _pushback(r1, 95);
              r56 = r83;
              r57 = r84;
              r3 = 262;
              break;
            } else if (r3 == 260) {
              _pushback(r1, r86);
              r94 = r84;
              break;
            }
            _pushback(r1, r85);
            if ((r83 | 0) == 0) {
              r94 = r84;
              break;
            } else {
              r56 = r83;
              r57 = r84;
              r3 = 262;
              break;
            }
          }
        } while (0);
        if (r3 == 262) {
          _yyerror_i(r1, 5324320, r56);
          r94 = r57;
        }
        _tokfix(r1);
        if ((r94 | 0) == 0) {
          r14 = _new_int(r1, _tok(r1), 10);
          HEAP32[HEAP32[r2 + 278] >> 2] = r14;
          r19 = 313;
          break;
        }
        HEAP32[___errno_location() >> 2] = 0;
        r14 = _tok(r1);
        do {
          if (_strtod(r14, r6) == 0 & (HEAP32[r6 >> 2] | 0) == (r14 | 0)) {
            _yywarning_s(r1, 5324292, r14);
          } else {
            if ((HEAP32[___errno_location() >> 2] | 0) != 34) {
              break;
            }
            _yywarning_s(r1, 5324256, r14);
            HEAP32[___errno_location() >> 2] = 0;
          }
        } while (0);
        r13 = _new_float(r1, r14);
        HEAP32[HEAP32[r2 + 278] >> 2] = r13;
        r19 = 314;
        break;
      } else if (r3 == 271) {
        r13 = r1 + 44 | 0;
        r20 = HEAP32[r13 >> 2];
        HEAP32[r13 >> 2] = r20 >>> 1 | r20 & 1;
        r20 = r1 + 48 | 0;
        r13 = HEAP32[r20 >> 2];
        HEAP32[r20 >> 2] = r13 >>> 1 | r13 & 1;
        HEAP32[r11] = (r17 | 0) == 41 ? 3 : 2;
        r19 = r17;
        break;
      } else if (r3 == 376) {
        r13 = r46;
        while (1) {
          _tokadd(r1, r13);
          r95 = _nextc(r1);
          if ((r95 | 0) < 0) {
            r96 = 1;
            break;
          }
          if ((_isalnum(r95) | 0) != 0 | (r95 | 0) == 95 | r95 >>> 0 > 127) {
            r13 = r95;
          } else {
            r96 = 0;
            break;
          }
        }
        do {
          if ((r47 | 0) == 0) {
            if ((_toklen(HEAP32[r2 + 276]) | 0) != 7) {
              break;
            }
            if (!(r96 | (r95 | 0) == 10)) {
              break;
            }
            if ((_strncmp(_tok(r1), 5323940, 7) | 0) == 0) {
              r19 = -1;
              break L79;
            }
          }
        } while (0);
        r13 = _tok(r1);
        r14 = HEAP8[r13] << 24 >> 24;
        L505 : do {
          if ((r14 | 0) == 64 | (r14 | 0) == 36) {
            _pushback(r1, r95);
          } else {
            do {
              if ((r95 | 0) == 63 | (r95 | 0) == 33) {
                if ((_peek_n(r1, 61, 0) | 0) != 0) {
                  break;
                }
                _tokadd(r1, r95);
                break L505;
              }
            } while (0);
            _pushback(r1, r95);
          }
        } while (0);
        _tokfix(r1);
        r14 = HEAP8[r13];
        r20 = r14 << 24 >> 24;
        L513 : do {
          if ((r20 | 0) == 36) {
            HEAP32[r11] = 1;
            r97 = 308;
          } else if ((r20 | 0) == 64) {
            HEAP32[r11] = 1;
            r97 = HEAP8[r13 + 1 | 0] << 24 >> 24 == 64 ? 311 : 309;
          } else {
            r12 = _toklast(r1);
            do {
              if ((r12 | 0) == 33 | (r12 | 0) == 63) {
                r98 = 307;
              } else {
                L519 : do {
                  if ((HEAP32[r11] | 0) == 7) {
                    r49 = _nextc(r1);
                    do {
                      if ((r49 | 0) == 61) {
                        if ((_peek_n(r1, 126, 0) | 0) != 0) {
                          break;
                        }
                        if ((_peek_n(r1, 62, 0) | 0) != 0) {
                          break;
                        }
                        if ((_peek_n(r1, 61, 0) | 0) != 0) {
                          if ((_peek_n(r1, 62, 1) | 0) == 0) {
                            break;
                          }
                        }
                        _tokadd(r1, 61);
                        _tokfix(r1);
                        break L519;
                      }
                    } while (0);
                    _pushback(r1, r49);
                    r99 = HEAP8[r13];
                    r3 = 401;
                    break;
                  } else {
                    r99 = r14;
                    r3 = 401;
                  }
                } while (0);
                if (r3 == 401) {
                  if ((_isupper(r99 << 24 >> 24) | 0) != 0) {
                    r98 = 310;
                    break;
                  }
                }
                r98 = 306;
              }
            } while (0);
            r12 = HEAP32[r11];
            r24 = (r10 | 0) == 0;
            do {
              if ((r12 | r10 | 0) == 0 | (r12 - 4 | 0) >>> 0 < 2) {
                if ((_peek_n(r1, 58, 0) | 0) == 0) {
                  break;
                }
                if ((_peek_n(r1, 58, 1) | 0) != 0) {
                  break;
                }
                HEAP32[r11] = 0;
                _nextc(r1);
                _tokfix(r1);
                r58 = _intern_gen(HEAP32[r2], r13);
                HEAP16[HEAP32[r2 + 278] >> 1] = r58;
                r19 = 312;
                break L79;
              }
            } while (0);
            r12 = HEAP32[r11];
            do {
              if ((r12 | 0) != 8) {
                r58 = _reserved_word(r13, _toklen(HEAP32[r2 + 276])), r55 = r58 >> 2;
                if ((r58 | 0) == 0) {
                  if ((r12 | 0) == 0 | (r12 | 0) == 6 | (r12 | 0) == 10 | (r12 | 0) == 9 | (r12 | 0) == 4 | (r12 | 0) == 5) {
                    break;
                  } else if ((r12 | 0) == 7) {
                    HEAP32[r11] = 3;
                    r97 = r98;
                    break L513;
                  } else {
                    HEAP32[r11] = 1;
                    r97 = r98;
                    break L513;
                  }
                }
                r62 = HEAP32[r55 + 3];
                HEAP32[r11] = r62;
                if ((r12 | 0) == 7) {
                  r100 = _intern_gen(HEAP32[r2], HEAP32[r55]);
                  HEAP16[HEAP32[r2 + 278] >> 1] = r100;
                  r19 = HEAP32[r55 + 1];
                  break L79;
                }
                if ((r62 | 0) == 0) {
                  HEAP32[r9] = 1;
                }
                r62 = HEAP32[r55 + 1];
                if ((r62 | 0) != 281) {
                  if ((r12 | 0) == 10 | (r12 | 0) == 0) {
                    r19 = r62;
                    break L79;
                  }
                  r55 = r58 + 8 | 0;
                  if ((r62 | 0) == (HEAP32[r55 >> 2] | 0)) {
                    r19 = r62;
                    break L79;
                  }
                  HEAP32[r11] = 0;
                  r19 = HEAP32[r55 >> 2];
                  break L79;
                }
                r55 = r1 + 56 | 0;
                r62 = HEAP32[r55 >> 2];
                do {
                  if ((r62 | 0) != 0) {
                    r58 = r1 + 52 | 0;
                    if ((r62 | 0) != (HEAP32[r58 >> 2] | 0)) {
                      break;
                    }
                    HEAP32[r55 >> 2] = 0;
                    HEAP32[r58 >> 2] = r62 - 1 | 0;
                    r19 = 284;
                    break L79;
                  }
                } while (0);
                if ((HEAP32[r2 + 11] & 1 | 0) != 0) {
                  r19 = 282;
                  break L79;
                }
                if (!((HEAP32[r2 + 12] & 1 | 0) == 0 | (r12 | 0) == 5)) {
                  r19 = 283;
                  break L79;
                }
                if ((r12 | 0) == 2 | (r12 | 0) == 0) {
                  r19 = 283;
                  break L79;
                }
                r19 = 281;
                break L79;
              }
            } while (0);
            if (r24) {
              HEAP32[r11] = 4;
              r97 = r98;
              break;
            } else {
              HEAP32[r11] = 5;
              r97 = r98;
              break;
            }
          }
        } while (0);
        r11 = _intern_gen(HEAP32[r2], r13);
        HEAP16[HEAP32[r2 + 278] >> 1] = r11;
        r19 = r97;
        break;
      }
    } else {
      r19 = _parse_string(r1, r8);
    }
  } while (0);
  STACKTOP = r4;
  return r19;
}
_parser_yylex["X"] = 1;
function _toklen(r1) {
  return r1;
}
function _newtok(r1) {
  HEAP32[r1 + 1104 >> 2] = 0;
  return HEAP32[r1 + 32 >> 2] - 1 | 0;
}
function _tokadd(r1, r2) {
  var r3, r4;
  r3 = r1 + 1104 | 0;
  r4 = HEAP32[r3 >> 2];
  if ((r4 | 0) >= 1024) {
    return;
  }
  HEAP32[r3 >> 2] = r4 + 1 | 0;
  HEAP8[r1 + (r4 + 80) | 0] = r2 & 255;
  return;
}
function _tok(r1) {
  return r1 + 80 | 0;
}
function _toklast(r1) {
  return HEAP8[HEAP32[r1 + 1104 >> 2] - 1 + r1 + 80 | 0] << 24 >> 24;
}
function _hash(r1, r2) {
  var r3, r4;
  r3 = r2 - 1 | 0;
  if (r3 >>> 0 < 2) {
    r4 = r2;
  } else {
    r4 = HEAPU8[HEAPU8[r1 + 2 | 0] + 5310612 | 0] + r2 | 0;
  }
  return HEAPU8[HEAPU8[r1] + 5310612 | 0] + r4 + HEAPU8[HEAPU8[r1 + r3 | 0] + 5310612 | 0] | 0;
}
function _scan_oct(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  L584 : do {
    if ((r2 | 0) == 0) {
      r4 = r1;
      r5 = 0;
    } else {
      r6 = r1;
      r7 = 0;
      r8 = r2;
      while (1) {
        r9 = r8 - 1 | 0;
        r10 = HEAP32[r6 >> 2] - 48 | 0;
        if (r10 >>> 0 >= 8) {
          r4 = r6;
          r5 = r7;
          break L584;
        }
        r11 = r6 + 4 | 0;
        r12 = r10 | r7 << 3;
        if ((r9 | 0) == 0) {
          r4 = r11;
          r5 = r12;
          break L584;
        } else {
          r6 = r11;
          r7 = r12;
          r8 = r9;
        }
      }
    }
  } while (0);
  HEAP32[r3 >> 2] = r4 - r1 >> 2;
  return r5;
}
function _cons_free_gen(r1, r2) {
  var r3;
  r3 = r1 + 8 | 0;
  HEAP32[r2 + 4 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r3 >> 2] = r2;
  return;
}
function _parse_string(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r3 = r1 >> 2;
  r4 = 0;
  _newtok(r1);
  r5 = _nextc(r1);
  L591 : do {
    if ((r5 | 0) != (r2 | 0)) {
      r6 = r5;
      L592 : while (1) {
        do {
          if ((r6 | 0) == -1) {
            r4 = 451;
            break L592;
          } else if ((r6 | 0) == 35) {
            r7 = _nextc(r1);
            if ((r7 | 0) == 123) {
              r4 = 456;
              break L592;
            }
            _tokadd(r1, 35);
            _pushback(r1, r7);
          } else if ((r6 | 0) == 92) {
            r7 = _nextc(r1);
            if ((r7 | 0) == (r2 | 0)) {
              _tokadd(r1, r2);
              break;
            } else {
              _pushback(r1, r7);
              _tokadd(r1, _read_escape(r1));
              break;
            }
          } else {
            _tokadd(r1, r6);
          }
        } while (0);
        r7 = _nextc(r1);
        if ((r7 | 0) == (r2 | 0)) {
          break L591;
        } else {
          r6 = r7;
        }
      }
      if (r4 == 451) {
        _yyerror(r1, 5322688);
        r8 = 0;
        return r8;
      } else if (r4 == 456) {
        _tokfix(r1);
        HEAP32[r3 + 9] = 0;
        HEAP32[r3 + 10] = r2;
        HEAP32[r3 + 17] = 1;
        r6 = _new_str(r1, _tok(r1), _toklen(HEAP32[r3 + 276]));
        HEAP32[HEAP32[r3 + 278] >> 2] = r6;
        r8 = 318;
        return r8;
      }
    }
  } while (0);
  _tokfix(r1);
  HEAP32[r3 + 9] = 1;
  HEAP32[r3 + 10] = 0;
  r2 = _new_str(r1, _tok(r1), _toklen(HEAP32[r3 + 276]));
  HEAP32[HEAP32[r3 + 278] >> 2] = r2;
  r8 = 317;
  return r8;
}
_parse_string["X"] = 1;
function _nextc(r1) {
  var r2, r3, r4, r5, r6, r7;
  r2 = r1 + 76 | 0;
  r3 = HEAP32[r2 >> 2];
  do {
    if ((r3 | 0) == 0) {
      r4 = r1 + 20 | 0;
      r5 = HEAP32[r4 >> 2];
      if ((r5 | 0) != 0) {
        if ((_feof(r5) | 0) != 0) {
          r6 = -1;
          return r6;
        }
        r5 = _fgetc(HEAP32[r4 >> 2]);
        if ((r5 | 0) == -1) {
          r6 = -1;
        } else {
          r7 = r5;
          break;
        }
        return r6;
      }
      r5 = r1 + 12 | 0;
      r4 = HEAP32[r5 >> 2];
      if ((r4 | 0) == 0) {
        r6 = -1;
        return r6;
      }
      if (r4 >>> 0 < HEAP32[r1 + 16 >> 2] >>> 0) {
        HEAP32[r5 >> 2] = r4 + 1 | 0;
        r7 = HEAPU8[r4];
        break;
      } else {
        r6 = -1;
        return r6;
      }
    } else {
      r4 = HEAP32[r3 >> 2];
      HEAP32[r2 >> 2] = HEAP32[r3 + 4 >> 2];
      _cons_free_gen(r1, r3);
      r7 = r4;
    }
  } while (0);
  r3 = r1 + 32 | 0;
  HEAP32[r3 >> 2] = HEAP32[r3 >> 2] + 1 | 0;
  r6 = r7;
  return r6;
}
function _skip(r1) {
  var r2;
  while (1) {
    r2 = _nextc(r1);
    if ((r2 | 0) < 0 | (r2 | 0) == 10) {
      break;
    }
  }
  return;
}
function _pushback(r1, r2) {
  var r3;
  if ((r2 | 0) < 0) {
    return;
  }
  r3 = r1 + 32 | 0;
  HEAP32[r3 >> 2] = HEAP32[r3 >> 2] - 1 | 0;
  r3 = r1 + 76 | 0;
  HEAP32[r3 >> 2] = _cons_gen(r1, r2, HEAP32[r3 >> 2]);
  return;
}
function _yywarning(r1, r2) {
  _yywarn(r1, r2);
  return;
}
function _peeks(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r3 = 0;
  r4 = _strlen(r2);
  if ((HEAP32[r1 + 20 >> 2] | 0) != 0) {
    r5 = 0;
    r6 = r2;
    while (1) {
      r7 = HEAP8[r6];
      if (r7 << 24 >> 24 == 0) {
        r8 = 1;
        r3 = 498;
        break;
      }
      if ((_peek_n(r1, r7 << 24 >> 24, r5) | 0) == 0) {
        r8 = 0;
        r3 = 499;
        break;
      } else {
        r5 = r5 + 1 | 0;
        r6 = r6 + 1 | 0;
      }
    }
    if (r3 == 499) {
      return r8;
    } else if (r3 == 498) {
      return r8;
    }
  }
  r3 = HEAP32[r1 + 12 >> 2];
  do {
    if ((r3 | 0) != 0) {
      if ((r3 + r4 | 0) >>> 0 < HEAP32[r1 + 16 >> 2] >>> 0) {
        break;
      }
      if ((_memcmp(r3, r2, r4) | 0) == 0) {
        r8 = 1;
      } else {
        break;
      }
      return r8;
    }
  } while (0);
  r8 = 0;
  return r8;
}
function _skips(r1) {
  var r2, r3, r4;
  r2 = 0;
  r3 = _nextc(r1);
  if ((r3 | 0) < 0) {
    return;
  } else {
    r4 = r3;
  }
  while (1) {
    if ((r4 | 0) == 10) {
      if ((_peeks(r1, 5324745) | 0) != 0) {
        break;
      }
    }
    r3 = _nextc(r1);
    if ((r3 | 0) < 0) {
      r2 = 509;
      break;
    } else {
      r4 = r3;
    }
  }
  if (r2 == 509) {
    return;
  }
  _nextc(r1);
  _nextc(r1);
  _nextc(r1);
  _nextc(r1);
  _nextc(r1);
  return;
}
function _parse_qstring(r1, r2, r3) {
  var r4, r5;
  r4 = _qstring_node(r1, r2, r3);
  if ((r4 | 0) == 0) {
    r5 = 0;
    return r5;
  }
  HEAP32[HEAP32[r1 + 1112 >> 2] >> 2] = r4;
  r5 = 317;
  return r5;
}
function _read_escape(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r2 = 0;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  r4 = r3;
  r5 = r3 + 12, r6 = r5 >> 2;
  r7 = r3 + 16;
  r8 = r3 + 24, r9 = r8 >> 2;
  r10 = _nextc(r1);
  do {
    if ((r10 | 0) == 98) {
      r11 = 8;
      break;
    } else if ((r10 | 0) == 115) {
      r11 = 32;
      break;
    } else if ((r10 | 0) == 77) {
      r12 = _nextc(r1);
      if ((r12 | 0) != 45) {
        _yyerror(r1, 5322728);
        _pushback(r1, r12);
        r11 = 0;
        break;
      }
      r12 = _nextc(r1);
      if ((r12 | 0) == 92) {
        r11 = _read_escape(r1) | 128;
        break;
      } else if ((r12 | 0) == -1) {
        r2 = 551;
        break;
      } else {
        r11 = r12 & 127 | 128;
        break;
      }
    } else if ((r10 | 0) == 97) {
      r11 = 7;
      break;
    } else if ((r10 | 0) == 48 | (r10 | 0) == 49 | (r10 | 0) == 50 | (r10 | 0) == 51 | (r10 | 0) == 52 | (r10 | 0) == 53 | (r10 | 0) == 54 | (r10 | 0) == 55) {
      r12 = r4 | 0;
      HEAP32[r12 >> 2] = r10;
      r13 = 1;
      while (1) {
        if ((r13 | 0) >= 3) {
          r2 = 528;
          break;
        }
        r14 = _nextc(r1);
        HEAP32[r4 + (r13 << 2) >> 2] = r14;
        if ((r14 | 0) == -1) {
          r2 = 549;
          break;
        }
        if ((r14 - 48 | 0) >>> 0 > 7) {
          r2 = 527;
          break;
        } else {
          r13 = r13 + 1 | 0;
        }
      }
      if (r2 == 528) {
        HEAP32[r6] = r13;
      } else if (r2 == 549) {
        HEAP32[r6] = r13;
        r2 = 551;
        break;
      } else if (r2 == 527) {
        HEAP32[r6] = r13;
        _pushback(r1, r14);
      }
      r11 = _scan_oct(r12, r13, r5);
      break;
    } else if ((r10 | 0) == 118) {
      r11 = 11;
      break;
    } else if ((r10 | 0) == 120) {
      r15 = 0;
      while (1) {
        if ((r15 | 0) >= 2) {
          r2 = 534;
          break;
        }
        r16 = _nextc(r1);
        r17 = (r15 << 2) + r7 | 0;
        HEAP32[r17 >> 2] = r16;
        if ((r16 | 0) == -1) {
          r2 = 550;
          break;
        }
        if ((_isxdigit(r16) | 0) == 0) {
          r2 = 533;
          break;
        } else {
          r15 = r15 + 1 | 0;
        }
      }
      if (r2 == 533) {
        HEAP32[r9] = r15;
        _pushback(r1, HEAP32[r17 >> 2]);
      } else if (r2 == 534) {
        HEAP32[r9] = r15;
      } else if (r2 == 550) {
        HEAP32[r9] = r15;
        r2 = 551;
        break;
      }
      r13 = _scan_hex(r7 | 0, r15, r8);
      if ((HEAP32[r9] | 0) != 0) {
        r11 = r13;
        break;
      }
      _yyerror(r1, 5322728);
      r11 = 0;
      break;
    } else if ((r10 | 0) == 110) {
      r11 = 10;
      break;
    } else if ((r10 | 0) == 67) {
      r13 = _nextc(r1);
      if ((r13 | 0) == 45) {
        r2 = 546;
        break;
      }
      _yyerror(r1, 5322728);
      _pushback(r1, r13);
      r11 = 0;
      break;
    } else if ((r10 | 0) == 114) {
      r11 = 13;
      break;
    } else if ((r10 | 0) == 99) {
      r2 = 546;
    } else if ((r10 | 0) == -1) {
      r2 = 551;
    } else if ((r10 | 0) == 101) {
      r11 = 27;
      break;
    } else if ((r10 | 0) == 102) {
      r11 = 12;
      break;
    } else if ((r10 | 0) == 116) {
      r11 = 9;
      break;
    } else {
      r11 = r10;
    }
  } while (0);
  do {
    if (r2 == 546) {
      r10 = _nextc(r1);
      if ((r10 | 0) == 63) {
        r11 = 127;
        break;
      } else if ((r10 | 0) == 92) {
        r18 = _read_escape(r1);
      } else if ((r10 | 0) == -1) {
        r2 = 551;
        break;
      } else {
        r18 = r10;
      }
      r11 = r18 & 159;
      break;
    }
  } while (0);
  if (r2 == 551) {
    _yyerror(r1, 5322728);
    r11 = 0;
  }
  STACKTOP = r3;
  return r11;
}
_read_escape["X"] = 1;
function _tokfix(r1) {
  var r2, r3, r4;
  r2 = r1 + 1104 | 0;
  r3 = HEAP32[r2 >> 2];
  if ((r3 | 0) > 1023) {
    _yyerror(r1, 5322772);
    r4 = HEAP32[r2 >> 2];
  } else {
    r4 = r3;
  }
  HEAP8[r1 + (r4 + 80) | 0] = 0;
  return;
}
function _arg_ambiguous(r1) {
  _yywarning(r1, 5322812);
  return;
}
function _yyerror_i(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 256 | 0;
  r5 = r4 | 0;
  _snprintf(r5, 256, r2, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r3, tempInt));
  _yyerror(r1, r5);
  STACKTOP = r4;
  return;
}
function _yywarning_s(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 256 | 0;
  r5 = r4 | 0;
  _snprintf(r5, 256, r2, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r3, tempInt));
  _yywarning(r1, r5);
  STACKTOP = r4;
  return;
}
function _new_float(r1, r2) {
  return _cons_gen(r1, 51, _parser_strdup(r1, r2));
}
function _new_back_ref(r1, r2) {
  return _cons_gen(r1, 46, r2);
}
function _new_nth_ref(r1, r2) {
  return _cons_gen(r1, 45, r2);
}
function _peek_n(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  r4 = 0;
  r5 = 0;
  r6 = r3;
  while (1) {
    r7 = _nextc(r1);
    if ((r7 | 0) < 0) {
      r8 = 0;
      r4 = 570;
      break;
    }
    r9 = _append_gen(r5, _list1_gen(r1, r7));
    if ((r6 | 0) == 0) {
      break;
    } else {
      r5 = r9;
      r6 = r6 - 1 | 0;
    }
  }
  if (r4 == 570) {
    return r8;
  }
  r4 = r1 + 76 | 0;
  r6 = HEAP32[r4 >> 2];
  if ((r6 | 0) == 0) {
    r10 = r9;
  } else {
    r10 = _append_gen(r6, _list1_gen(r1, r9));
  }
  HEAP32[r4 >> 2] = r10;
  r8 = (r7 | 0) == (r2 | 0) & 1;
  return r8;
}
function _reserved_word(r1, r2) {
  var r3, r4, r5;
  do {
    if ((r2 - 2 | 0) >>> 0 < 11) {
      r3 = _hash(r1, r2);
      if (r3 >>> 0 >= 51) {
        break;
      }
      r4 = (r3 << 4) + 5291408 | 0;
      r3 = HEAP32[r4 >> 2];
      if (HEAP8[r1] << 24 >> 24 != HEAP8[r3] << 24 >> 24) {
        break;
      }
      if ((_strcmp(r1 + 1 | 0, r3 + 1 | 0) | 0) == 0) {
        r5 = r4;
      } else {
        break;
      }
      return r5;
    }
  } while (0);
  r5 = 0;
  return r5;
}
function _parser_strdup(r1, r2) {
  return _parser_strndup(r1, r2, _strlen(r2));
}
function _parser_strndup(r1, r2, r3) {
  var r4;
  r4 = _parser_palloc(r1, r3 + 1 | 0);
  _memcpy(r4, r2, r3);
  HEAP8[r4 + r3 | 0] = 0;
  return r4;
}
function _scan_hex(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  L751 : do {
    if ((r2 | 0) == 0) {
      r4 = r1;
      r5 = 0;
    } else {
      r6 = r1;
      r7 = 0;
      r8 = r2;
      while (1) {
        r9 = r8 - 1 | 0;
        r10 = HEAP32[r6 >> 2];
        if ((r10 | 0) == 0) {
          r4 = r6;
          r5 = r7;
          break L751;
        }
        r11 = _memchr(5291372, r10, 33);
        if ((r11 | 0) == 0) {
          r4 = r6;
          r5 = r7;
          break L751;
        }
        r10 = r11 - 5291372 & 15 | r7 << 4;
        r11 = r6 + 4 | 0;
        if ((r9 | 0) == 0) {
          r4 = r11;
          r5 = r10;
          break L751;
        } else {
          r6 = r11;
          r7 = r10;
          r8 = r9;
        }
      }
    }
  } while (0);
  HEAP32[r3 >> 2] = r4 - r1 >> 2;
  return r5;
}
function _qstring_node(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  r4 = 0;
  _newtok(r1);
  r5 = _nextc(r1);
  L758 : do {
    if ((r5 | 0) != (r3 | 0)) {
      r6 = (r1 + 28 | 0) >> 2;
      r7 = r1 + 32 | 0;
      r8 = 0;
      r9 = r5;
      r10 = 0;
      r11 = 1;
      L760 : while (1) {
        L762 : do {
          if (r11) {
            r12 = r9;
            r13 = r10;
            while (1) {
              if ((r12 | 0) == -1) {
                break L760;
              }
              if ((r12 | 0) == (r2 | 0)) {
                r4 = 599;
                break L762;
              }
              if (r13) {
                r14 = r12;
                r4 = 601;
                break L762;
              }
              if ((r12 | 0) != 92) {
                r15 = r8;
                r16 = r12;
                break L762;
              }
              r17 = _nextc(r1);
              if ((r17 | 0) == (r2 | 0) | (r17 | 0) == (r3 | 0)) {
                r15 = r8;
                r16 = r17;
                break L762;
              }
              if ((r17 | 0) == 92) {
                r15 = r8;
                r16 = 92;
                break L762;
              } else if ((r17 | 0) != 10) {
                r18 = r17;
                r4 = 606;
                break L762;
              }
              HEAP32[r6] = HEAP32[r6] + 1 | 0;
              HEAP32[r7 >> 2] = 0;
              r17 = _nextc(r1);
              if ((r17 | 0) == (r3 | 0)) {
                break L758;
              } else {
                r12 = r17;
                r13 = 0;
              }
            }
          } else {
            r13 = r9;
            r12 = r10;
            while (1) {
              if ((r13 | 0) == -1) {
                break L760;
              }
              if ((r13 | 0) == (r2 | 0)) {
                r4 = 599;
                break L762;
              }
              if (r12) {
                r14 = r13;
                r4 = 601;
                break L762;
              }
              if ((r13 | 0) != 92) {
                r15 = r8;
                r16 = r13;
                break L762;
              }
              r17 = _nextc(r1);
              if ((r17 | 0) == (r2 | 0) | (r17 | 0) == (r3 | 0)) {
                r15 = r8;
                r16 = r17;
                break L762;
              }
              if ((r17 | 0) == 92) {
                r15 = r8;
                r16 = 92;
                break L762;
              } else if ((r17 | 0) != 10) {
                r18 = r17;
                r4 = 606;
                break L762;
              }
              HEAP32[r6] = HEAP32[r6] + 1 | 0;
              HEAP32[r7 >> 2] = 0;
              r17 = _nextc(r1);
              r13 = r17;
              r12 = (r17 | 0) == (r3 | 0);
            }
          }
        } while (0);
        if (r4 == 606) {
          r4 = 0;
          _tokadd(r1, 92);
          r15 = r8;
          r16 = r18;
        } else if (r4 == 599) {
          r4 = 0;
          r15 = r8 + 1 | 0;
          r16 = r2;
        } else if (r4 == 601) {
          r4 = 0;
          r15 = r8 - 1 | 0;
          r16 = r14;
        }
        _tokadd(r1, r16);
        r12 = _nextc(r1);
        r13 = (r12 | 0) == (r3 | 0);
        r17 = (r15 | 0) == 0;
        if (r13 & r17) {
          break L758;
        } else {
          r8 = r15;
          r9 = r12;
          r10 = r13;
          r11 = r17;
        }
      }
      _yyerror(r1, 5322688);
      r19 = 0;
      return r19;
    }
  } while (0);
  _tokfix(r1);
  HEAP32[r1 + 36 >> 2] = 1;
  r19 = _new_str(r1, _tok(r1), _toklen(HEAP32[r1 + 1104 >> 2]));
  return r19;
}
_qstring_node["X"] = 1;
function _parser_palloc(r1, r2) {
  var r3;
  r3 = _mrb_pool_alloc(HEAP32[r1 + 4 >> 2], r2);
  if ((r3 | 0) == 0) {
    _longjmp(r1 + 1372 | 0, 1);
  } else {
    return r3;
  }
}
function _yystpcpy(r1, r2) {
  var r3;
  r3 = r2;
  r2 = r1;
  while (1) {
    r1 = HEAP8[r3];
    HEAP8[r2] = r1;
    if (r1 << 24 >> 24 == 0) {
      break;
    } else {
      r3 = r3 + 1 | 0;
      r2 = r2 + 1 | 0;
    }
  }
  return r2;
}
function _yystrlen(r1) {
  var r2;
  r2 = 0;
  while (1) {
    if (HEAP8[r1 + r2 | 0] << 24 >> 24 == 0) {
      break;
    } else {
      r2 = r2 + 1 | 0;
    }
  }
  return r2;
}
function _local_var_p(r1, r2) {
  var r3, r4, r5, r6;
  r3 = 0;
  if ((r1 | 0) == 0) {
    r4 = 0;
    return r4;
  }
  r5 = r2 << 16 >> 16;
  r2 = r1;
  L804 : while (1) {
    r1 = r2 | 0;
    while (1) {
      r6 = HEAP32[r1 >> 2];
      if ((r6 | 0) == 0) {
        break;
      }
      if ((HEAP32[r6 >> 2] << 16 >> 16 | 0) == (r5 | 0)) {
        r4 = 1;
        r3 = 629;
        break L804;
      } else {
        r1 = r6 + 4 | 0;
      }
    }
    r1 = HEAP32[r2 + 4 >> 2];
    if ((r1 | 0) == 0) {
      r4 = 0;
      r3 = 630;
      break;
    } else {
      r2 = r1;
    }
  }
  if (r3 == 629) {
    return r4;
  } else if (r3 == 630) {
    return r4;
  }
}
function _mrb_obj_value591(r1, r2) {
  var r3;
  r3 = HEAP32[r2 >> 2] & 255;
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = r3;
  return;
}
function _array_copy(r1, r2, r3) {
  var r4, r5, r6, r7;
  if ((r3 | 0) == 0) {
    return;
  } else {
    r4 = 0;
  }
  while (1) {
    r5 = (r4 << 3) + r2 | 0;
    r6 = (r4 << 3) + r1 | 0;
    r7 = HEAP32[r5 + 4 >> 2];
    HEAP32[r6 >> 2] = HEAP32[r5 >> 2];
    HEAP32[r6 + 4 >> 2] = r7;
    r7 = r4 + 1 | 0;
    if ((r7 | 0) == (r3 | 0)) {
      break;
    } else {
      r4 = r7;
    }
  }
  return;
}
function _mrb_nil_value598(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_fixnum_value599(r1, r2) {
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 3;
  return;
}
function _yytnamerr(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  L823 : do {
    if (HEAP8[r2] << 24 >> 24 == 34) {
      r3 = (r1 | 0) == 0;
      L825 : do {
        if (r3) {
          r4 = r2;
          r5 = 0;
          while (1) {
            r6 = r4 + 1 | 0;
            r7 = HEAP8[r6] << 24 >> 24;
            if ((r7 | 0) == 39 | (r7 | 0) == 44) {
              break L823;
            } else if ((r7 | 0) == 92) {
              r8 = r4 + 2 | 0;
              if (HEAP8[r8] << 24 >> 24 == 92) {
                r9 = r8;
              } else {
                break L823;
              }
            } else if ((r7 | 0) == 34) {
              r10 = r5;
              break L825;
            } else {
              r9 = r6;
            }
            r4 = r9;
            r5 = r5 + 1 | 0;
          }
        } else {
          r5 = r2;
          r4 = 0;
          while (1) {
            r6 = r5 + 1 | 0;
            r7 = HEAP8[r6];
            r8 = r7 << 24 >> 24;
            if ((r8 | 0) == 39 | (r8 | 0) == 44) {
              break L823;
            } else if ((r8 | 0) == 92) {
              r11 = r5 + 2 | 0;
              if (HEAP8[r11] << 24 >> 24 == 92) {
                r12 = r11;
                r13 = 92;
              } else {
                break L823;
              }
            } else if ((r8 | 0) == 34) {
              r10 = r4;
              break L825;
            } else {
              r12 = r6;
              r13 = r7;
            }
            HEAP8[r1 + r4 | 0] = r13;
            r5 = r12;
            r4 = r4 + 1 | 0;
          }
        }
      } while (0);
      if (r3) {
        r14 = r10;
        return r14;
      }
      HEAP8[r1 + r10 | 0] = 0;
      r14 = r10;
      return r14;
    }
  } while (0);
  if ((r1 | 0) == 0) {
    r14 = _yystrlen(r2);
    return r14;
  } else {
    r14 = _yystpcpy(r1, r2) - r1 | 0;
    return r14;
  }
}
_yytnamerr["X"] = 1;
function _list6_gen(r1, r2, r3, r4, r5, r6) {
  return _cons_gen(r1, 68, _cons_gen(r1, r2, _cons_gen(r1, r3, _cons_gen(r1, r4, _cons_gen(r1, r5, _cons_gen(r1, r6, 0))))));
}
function _list5_gen(r1, r2, r3, r4, r5) {
  return _cons_gen(r1, 67, _cons_gen(r1, r2, _cons_gen(r1, r3, _cons_gen(r1, r4, _cons_gen(r1, r5, 0)))));
}
function _list4_gen(r1, r2, r3, r4, r5) {
  return _cons_gen(r1, r2, _cons_gen(r1, r3, _cons_gen(r1, r4, _cons_gen(r1, r5, 0))));
}
function _local_add(r1, r2) {
  if ((_local_var_p(HEAP32[r1 + 72 >> 2], r2) | 0) != 0) {
    return;
  }
  _local_add_f(r1, r2);
  return;
}
function _mrb_ary_new_capa(r1, r2, r3) {
  _mrb_obj_value591(r1, _ary_new_capa(r2, r3) | 0);
  return;
}
function _ary_new_capa(r1, r2) {
  var r3, r4, r5;
  r3 = r2 << 3;
  if ((r3 | 0) < (r2 | 0)) {
    _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5316172);
  }
  r4 = _mrb_obj_alloc(r1, 15, HEAP32[r1 + 92 >> 2]), r5 = r4 >> 2;
  HEAP32[r5 + 5] = _mrb_malloc(r1, r3);
  HEAP32[r5 + 4] = r2;
  HEAP32[r5 + 3] = 0;
  return r4;
}
function _mrb_ary_new(r1, r2) {
  _mrb_ary_new_capa(r1, r2, 0);
  return;
}
function _mrb_ary_new_from_values(r1, r2, r3, r4) {
  var r5, r6, r7;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r5;
  _mrb_ary_new_capa(r6, r2, r3);
  r2 = HEAP32[r6 >> 2];
  r7 = HEAP32[r6 + 4 >> 2];
  _array_copy(HEAP32[r2 + 20 >> 2], r4, r3);
  HEAP32[r2 + 12 >> 2] = r3;
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = r7;
  STACKTOP = r5;
  return;
}
function _mrb_assoc_new(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r6 = r3, r7 = r6 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r4, r7 = r6 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r7];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7 + 1];
  r7 = r5;
  r6 = r3;
  r3 = r7;
  r8 = HEAP32[r6 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = r8;
  r8 = r4;
  r4 = r7 + 8 | 0;
  r3 = HEAP32[r8 + 4 >> 2];
  HEAP32[r4 >> 2] = HEAP32[r8 >> 2];
  HEAP32[r4 + 4 >> 2] = r3;
  _mrb_ary_new_from_values(r1, r2, 2, r7 | 0);
  STACKTOP = r5;
  return;
}
function _mrb_ary_s_create(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r3 = r4 + 4;
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r3, tempInt));
  _mrb_ary_new_from_values(r1, r2, HEAP32[r3 >> 2], HEAP32[r5 >> 2]);
  STACKTOP = r4;
  return;
}
function _mrb_ary_concat(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  r5 = r2, r6 = r5 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 1];
  r5 = r3, r6 = r5 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 1];
  r6 = HEAP32[r3 >> 2];
  _ary_concat(r1, HEAP32[r2 >> 2], HEAP32[r6 + 20 >> 2], HEAP32[r6 + 12 >> 2]);
  STACKTOP = r4;
  return;
}
function _ary_concat(r1, r2, r3, r4) {
  var r5, r6;
  r5 = (r2 + 12 | 0) >> 2;
  r6 = HEAP32[r5] + r4 | 0;
  _ary_modify(r1, r2);
  if ((HEAP32[r2 + 16 >> 2] | 0) < (r6 | 0)) {
    _ary_expand_capa(r1, r2, r6);
  }
  _array_copy((HEAP32[r5] << 3) + HEAP32[r2 + 20 >> 2] | 0, r3, r4);
  _mrb_write_barrier(r1, r2);
  HEAP32[r5] = r6;
  return;
}
function _mrb_ary_concat_m(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4;
  _mrb_get_args(r2, 5325164, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  _ary_concat(r2, HEAP32[r3 >> 2], HEAP32[r5 >> 2], HEAP32[r6 >> 2]);
  r6 = r3;
  r3 = r1;
  r1 = HEAP32[r6 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_ary_plus(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4, r7 = r6 >> 2;
  r8 = r4 + 8;
  r9 = HEAP32[r3 >> 2];
  _mrb_get_args(r2, 5325164, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  r6 = (r9 + 12 | 0) >> 2;
  _mrb_ary_new_capa(r8, r2, HEAP32[r7] + HEAP32[r6] | 0);
  r2 = HEAP32[r8 >> 2];
  r3 = HEAP32[r8 + 4 >> 2];
  r8 = r2 + 20 | 0;
  _array_copy(HEAP32[r8 >> 2], HEAP32[r9 + 20 >> 2], HEAP32[r6]);
  _array_copy((HEAP32[r6] << 3) + HEAP32[r8 >> 2] | 0, HEAP32[r5 >> 2], HEAP32[r7]);
  HEAP32[r2 + 12 >> 2] = HEAP32[r7] + HEAP32[r6] | 0;
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = r3;
  STACKTOP = r4;
  return;
}
function _mrb_ary_cmp(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  r7 = r5 + 8;
  r8 = r5 + 16;
  r9 = r5 + 24;
  r10 = r5 + 32;
  _mrb_nil_value598(r7);
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r6, tempInt));
  if ((HEAP32[r6 + 4 >> 2] & 255 | 0) != 15) {
    _mrb_nil_value598(r1);
    STACKTOP = r5;
    return;
  }
  r11 = HEAP32[r3 >> 2];
  r12 = r6;
  r13 = HEAP32[r12 >> 2];
  r14 = (r11 + 12 | 0) >> 2;
  r15 = r13 + 12 | 0;
  do {
    if ((HEAP32[r14] | 0) == (HEAP32[r15 >> 2] | 0)) {
      if ((HEAP32[r11 + 20 >> 2] | 0) != (HEAP32[r13 + 20 >> 2] | 0)) {
        break;
      }
      _mrb_fixnum_value599(r1, 0);
      STACKTOP = r5;
      return;
    }
  } while (0);
  r13 = _mrb_intern(r2, 5314124);
  r11 = HEAP32[r14];
  r16 = HEAP32[HEAP32[r12 >> 2] + 12 >> 2];
  r12 = (r11 | 0) > (r16 | 0) ? r16 : r11;
  r11 = r10;
  r16 = r7;
  r7 = 0;
  while (1) {
    if ((r7 | 0) >= (r12 | 0)) {
      break;
    }
    _ary_elt(r8, r6, r7);
    _ary_elt(r9, r3, r7);
    _mrb_funcall_argv(r10, r2, r9, r13, 1, r8);
    r17 = HEAP32[r11 >> 2];
    r18 = HEAP32[r11 + 4 >> 2];
    HEAP32[r16 >> 2] = r17;
    HEAP32[r16 + 4 >> 2] = r18;
    if (!((r17 & 0 | 0) == 0 & (r18 & 255 | 0) == 3)) {
      r4 = 688;
      break;
    }
    if ((r17 | 0) == 0) {
      r7 = r7 + 1 | 0;
    } else {
      r4 = 688;
      break;
    }
  }
  if (r4 == 688) {
    r4 = r1;
    HEAP32[r4 >> 2] = r17;
    HEAP32[r4 + 4 >> 2] = r18;
    STACKTOP = r5;
    return;
  }
  r18 = HEAP32[r14];
  r14 = HEAP32[r15 >> 2];
  if ((r18 | 0) == (r14 | 0)) {
    r19 = 0;
  } else {
    r19 = (r18 - r14 | 0) > 0 ? 1 : -1;
  }
  _mrb_fixnum_value599(r1, r19);
  STACKTOP = r5;
  return;
}
_mrb_ary_cmp["X"] = 1;
function _ary_elt(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = HEAP32[r2 >> 2];
  r2 = HEAP32[r5 + 12 >> 2];
  if ((r2 | 0) == 0) {
    _mrb_nil_value598(r1);
    STACKTOP = r4;
    return;
  }
  if ((r3 | 0) > -1 & (r2 | 0) > (r3 | 0)) {
    r2 = (r3 << 3) + HEAP32[r5 + 20 >> 2] | 0;
    r5 = r1;
    r3 = HEAP32[r2 + 4 >> 2];
    HEAP32[r5 >> 2] = HEAP32[r2 >> 2];
    HEAP32[r5 + 4 >> 2] = r3;
    STACKTOP = r4;
    return;
  } else {
    _mrb_nil_value598(r1);
    STACKTOP = r4;
    return;
  }
}
function _mrb_ary_replace(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  r5 = r2, r6 = r5 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 1];
  r5 = r3, r6 = r5 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 1];
  r6 = HEAP32[r3 >> 2];
  _ary_replace(r1, HEAP32[r2 >> 2], HEAP32[r6 + 20 >> 2], HEAP32[r6 + 12 >> 2]);
  STACKTOP = r4;
  return;
}
function _ary_replace(r1, r2, r3, r4) {
  _ary_modify(r1, r2);
  if ((HEAP32[r2 + 16 >> 2] | 0) < (r4 | 0)) {
    _ary_expand_capa(r1, r2, r4);
  }
  _array_copy(HEAP32[r2 + 20 >> 2], r3, r4);
  _mrb_write_barrier(r1, r2);
  HEAP32[r2 + 12 >> 2] = r4;
  return;
}
function _mrb_ary_replace_m(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5317728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_ary_replace(r2, r3, r5);
  r5 = r3;
  r3 = r1;
  r1 = HEAP32[r5 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_ary_times(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4, r6 = r5 >> 2;
  r7 = r4 + 4;
  r8 = HEAP32[r3 >> 2];
  _mrb_get_args(r2, 5320132, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r5 = HEAP32[r6];
  if ((r5 | 0) < 0) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5314792);
    r9 = HEAP32[r6];
  } else {
    r9 = r5;
  }
  if ((r9 | 0) == 0) {
    _mrb_ary_new(r1, r2);
    STACKTOP = r4;
    return;
  }
  r5 = (r8 + 12 | 0) >> 2;
  _mrb_ary_new_capa(r7, r2, HEAP32[r5] * r9 & -1);
  r9 = HEAP32[r7 >> 2];
  r2 = HEAP32[r7 + 4 >> 2];
  r7 = HEAP32[r9 + 20 >> 2];
  r3 = HEAP32[r6];
  HEAP32[r6] = r3 - 1 | 0;
  L917 : do {
    if ((r3 | 0) != 0) {
      r10 = r8 + 20 | 0;
      r11 = r9 + 12 | 0;
      r12 = r7;
      while (1) {
        _array_copy(r12, HEAP32[r10 >> 2], HEAP32[r5]);
        r13 = HEAP32[r5];
        HEAP32[r11 >> 2] = HEAP32[r11 >> 2] + r13 | 0;
        r14 = HEAP32[r6];
        HEAP32[r6] = r14 - 1 | 0;
        if ((r14 | 0) == 0) {
          break L917;
        } else {
          r12 = (r13 << 3) + r12 | 0;
        }
      }
    }
  } while (0);
  HEAP32[r1 >> 2] = r9;
  HEAP32[r1 + 4 >> 2] = r2;
  STACKTOP = r4;
  return;
}
_mrb_ary_times["X"] = 1;
function _mrb_ary_reverse_bang(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = HEAP32[r3 >> 2];
  r6 = r5 + 12 | 0;
  L924 : do {
    if ((HEAP32[r6 >> 2] | 0) > 1) {
      _ary_modify(r2, r5);
      r7 = HEAP32[r5 + 20 >> 2];
      r8 = HEAP32[r6 >> 2] - 1 | 0;
      if ((r8 | 0) <= 0) {
        break;
      }
      r9 = r7;
      r10 = (r8 << 3) + r7 | 0;
      while (1) {
        r7 = r9 >> 2;
        r8 = HEAP32[r7];
        r11 = HEAP32[r7 + 1];
        r12 = r9 + 8 | 0;
        r13 = r10 >> 2;
        r14 = HEAP32[r13 + 1];
        HEAP32[r7] = HEAP32[r13];
        HEAP32[r7 + 1] = r14;
        r14 = r10 - 8 | 0;
        HEAP32[r13] = r8;
        HEAP32[r13 + 1] = r11;
        if (r12 >>> 0 < r14 >>> 0) {
          r9 = r12;
          r10 = r14;
        } else {
          break L924;
        }
      }
    }
  } while (0);
  r6 = r3;
  r3 = r1;
  r1 = HEAP32[r6 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
_mrb_ary_reverse_bang["X"] = 1;
function _ary_modify(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r3 = 0;
  r4 = r2 >> 2;
  if ((HEAP32[r4] & 524288 | 0) == 0) {
    return;
  }
  r5 = (r2 + 16 | 0) >> 2;
  r6 = HEAP32[r5];
  r7 = (r2 + 20 | 0) >> 2;
  r8 = HEAP32[r7];
  do {
    if ((HEAP32[r6 >> 2] | 0) == 1) {
      if ((r8 | 0) != (HEAP32[r6 + 4 >> 2] | 0)) {
        r3 = 731;
        break;
      }
      HEAP32[r7] = r8;
      HEAP32[r5] = HEAP32[r2 + 12 >> 2];
      _mrb_free(r1, r6);
      break;
    } else {
      r3 = 731;
    }
  } while (0);
  if (r3 == 731) {
    r3 = (r2 + 12 | 0) >> 2;
    r2 = _mrb_malloc(r1, HEAP32[r3] << 3);
    if ((r8 | 0) != 0) {
      _array_copy(r2, r8, HEAP32[r3]);
    }
    HEAP32[r7] = r2;
    HEAP32[r5] = HEAP32[r3];
    _mrb_ary_decref(r1, r6);
  }
  HEAP32[r4] = HEAP32[r4] & -524289;
  return;
}
function _mrb_ary_reverse(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = HEAP32[r3 >> 2];
  r3 = (r6 + 12 | 0) >> 2;
  _mrb_ary_new_capa(r5, r2, HEAP32[r3]);
  r2 = HEAP32[r5 >> 2];
  r7 = HEAP32[r5 + 4 >> 2];
  r5 = HEAP32[r3];
  if ((r5 | 0) <= 0) {
    r8 = r1;
    HEAP32[r8 >> 2] = r2;
    r9 = r1 + 4 | 0;
    r10 = r9;
    HEAP32[r10 >> 2] = r7;
    STACKTOP = r4;
    return;
  }
  r11 = HEAP32[r6 + 20 >> 2];
  r6 = (r5 << 3) + r11 | 0;
  r12 = (r5 - 1 << 3) + HEAP32[r2 + 20 >> 2] | 0;
  r5 = r11;
  while (1) {
    r11 = r5 + 8 | 0;
    r13 = r5;
    r14 = r12;
    r15 = HEAP32[r13 + 4 >> 2];
    HEAP32[r14 >> 2] = HEAP32[r13 >> 2];
    HEAP32[r14 + 4 >> 2] = r15;
    if (r11 >>> 0 < r6 >>> 0) {
      r12 = r12 - 8 | 0;
      r5 = r11;
    } else {
      break;
    }
  }
  HEAP32[r2 + 12 >> 2] = HEAP32[r3];
  r8 = r1;
  HEAP32[r8 >> 2] = r2;
  r9 = r1 + 4 | 0;
  r10 = r9;
  HEAP32[r10 >> 2] = r7;
  STACKTOP = r4;
  return;
}
_mrb_ary_reverse["X"] = 1;
function _mrb_ary_new4(r1, r2, r3, r4) {
  var r5, r6, r7;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r5;
  _mrb_ary_new_capa(r6, r2, r3);
  r2 = HEAP32[r6 >> 2];
  r7 = HEAP32[r6 + 4 >> 2];
  if (!((r3 | 0) < 1 | (r4 | 0) == 0)) {
    _array_copy(HEAP32[r2 + 20 >> 2], r4, r3);
    HEAP32[r2 + 12 >> 2] = r3;
  }
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = r7;
  STACKTOP = r5;
  return;
}
function _mrb_ary_new_elts(r1, r2, r3, r4) {
  _mrb_ary_new4(r1, r2, r3, r4);
  return;
}
function _mrb_ary_push(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  r5 = r2, r6 = r5 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 1];
  r5 = r3, r6 = r5 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 1];
  r6 = HEAP32[r2 >> 2];
  r2 = r6;
  _ary_modify(r1, r2);
  r5 = (r6 + 12 | 0) >> 2;
  r7 = HEAP32[r5];
  if ((r7 | 0) == (HEAP32[r6 + 16 >> 2] | 0)) {
    _ary_expand_capa(r1, r2, r7 + 1 | 0);
    r8 = HEAP32[r5];
  } else {
    r8 = r7;
  }
  HEAP32[r5] = r8 + 1 | 0;
  r5 = r3;
  r3 = (r8 << 3) + HEAP32[r6 + 20 >> 2] | 0;
  r8 = HEAP32[r5 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = r8;
  _mrb_write_barrier(r1, r6);
  STACKTOP = r4;
  return;
}
function _ary_expand_capa(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = r2 + 16 | 0;
  r5 = HEAP32[r4 >> 2];
  if ((r5 | 0) < (r3 | 0)) {
    r6 = r5;
  } else {
    return;
  }
  while (1) {
    r7 = (r6 | 0) == 0 ? 4 : r6 << 1;
    if ((r7 | 0) < (r3 | 0)) {
      r6 = r7;
    } else {
      break;
    }
  }
  if ((r7 | 0) <= (r5 | 0)) {
    return;
  }
  HEAP32[r4 >> 2] = r7;
  r4 = r2 + 20 | 0;
  HEAP32[r4 >> 2] = _mrb_realloc(r1, HEAP32[r4 >> 2], r7 << 3);
  return;
}
function _mrb_ary_push_m(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4, r7 = r6 >> 2;
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  r6 = HEAP32[r7];
  HEAP32[r7] = r6 - 1 | 0;
  L972 : do {
    if ((r6 | 0) != 0) {
      while (1) {
        r8 = HEAP32[r5 >> 2];
        HEAP32[r5 >> 2] = r8 + 8 | 0;
        _mrb_ary_push(r2, r3, r8);
        r8 = HEAP32[r7];
        HEAP32[r7] = r8 - 1 | 0;
        if ((r8 | 0) == 0) {
          break L972;
        }
      }
    }
  } while (0);
  r7 = r3;
  r3 = r1;
  r1 = HEAP32[r7 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_ary_pop(r1, r2, r3) {
  var r4, r5, r6;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[r3 >> 2];
  r3 = r4 + 12 | 0;
  r5 = HEAP32[r3 >> 2];
  if ((r5 | 0) == 0) {
    _mrb_nil_value598(r1);
    STACKTOP = r2;
    return;
  } else {
    r6 = r5 - 1 | 0;
    HEAP32[r3 >> 2] = r6;
    r3 = (r6 << 3) + HEAP32[r4 + 20 >> 2] | 0;
    r4 = r1;
    r1 = HEAP32[r3 + 4 >> 2];
    HEAP32[r4 >> 2] = HEAP32[r3 >> 2];
    HEAP32[r4 + 4 >> 2] = r1;
    STACKTOP = r2;
    return;
  }
}
function _mrb_ary_shift(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = HEAP32[r3 >> 2];
  r3 = r5;
  r6 = (r5 + 12 | 0) >> 2;
  r7 = HEAP32[r6];
  if ((r7 | 0) == 0) {
    _mrb_nil_value598(r1);
    STACKTOP = r4;
    return;
  }
  do {
    if ((HEAP32[r5 >> 2] & 524288 | 0) == 0) {
      if ((r7 | 0) > 10) {
        _ary_make_shared(r2, r3);
        r8 = HEAP32[r6];
        break;
      }
      r9 = HEAP32[r5 + 20 >> 2];
      r10 = r9;
      r11 = r10 | 0;
      r12 = HEAP32[r11 >> 2];
      r13 = r10 + 4 | 0;
      r10 = HEAP32[r13 >> 2];
      r14 = r7 - 1 | 0;
      if ((r14 | 0) == 0) {
        r15 = r7;
      } else {
        r16 = r9;
        r9 = r14;
        while (1) {
          r14 = r16 + 8 | 0;
          r17 = r14;
          r18 = r16;
          r19 = r17 | 0;
          r20 = r17 + 4 | 0;
          r17 = HEAP32[r20 >> 2];
          HEAP32[r18 >> 2] = HEAP32[r19 >> 2];
          HEAP32[r18 + 4 >> 2] = r17;
          r17 = r9 - 1 | 0;
          if ((r17 | 0) == 0) {
            break;
          } else {
            r16 = r14;
            r9 = r17;
          }
        }
        r15 = HEAP32[r6];
      }
      HEAP32[r6] = r15 - 1 | 0;
      r9 = r1;
      r11 = r9 | 0;
      HEAP32[r11 >> 2] = r12;
      r13 = r9 + 4 | 0;
      HEAP32[r13 >> 2] = r10;
      STACKTOP = r4;
      return;
    } else {
      r8 = r7;
    }
  } while (0);
  r7 = r5 + 20 | 0;
  r5 = HEAP32[r7 >> 2];
  r15 = r5;
  r19 = r15 | 0;
  r3 = HEAP32[r19 >> 2];
  r20 = r15 + 4 | 0;
  r15 = HEAP32[r20 >> 2];
  HEAP32[r7 >> 2] = r5 + 8 | 0;
  HEAP32[r6] = r8 - 1 | 0;
  r8 = r1;
  HEAP32[r8 >> 2] = r3;
  HEAP32[r8 + 4 >> 2] = r15;
  STACKTOP = r4;
  return;
}
_mrb_ary_shift["X"] = 1;
function _ary_make_shared(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10;
  r3 = r2 >> 2;
  if ((HEAP32[r3] & 524288 | 0) != 0) {
    return;
  }
  r4 = _mrb_malloc(r1, 12), r5 = r4 >> 2;
  HEAP32[r5] = 1;
  r6 = r2 + 16 | 0;
  r7 = r2 + 12 | 0;
  r8 = HEAP32[r7 >> 2];
  r9 = r2 + 20 | 0;
  r2 = HEAP32[r9 >> 2];
  if ((HEAP32[r6 >> 2] | 0) > (r8 | 0)) {
    r10 = _mrb_realloc(r1, r2, r8 << 3 | 1);
    HEAP32[r5 + 1] = r10;
    HEAP32[r9 >> 2] = r10;
  } else {
    HEAP32[r5 + 1] = r2;
  }
  HEAP32[r5 + 2] = HEAP32[r7 >> 2];
  HEAP32[r6 >> 2] = r4;
  HEAP32[r3] = HEAP32[r3] | 524288;
  return;
}
function _mrb_ary_unshift(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r5 = 0;
  r6 = STACKTOP;
  r7 = r3, r8 = r7 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r8];
  HEAP32[r3 + 4 >> 2] = HEAP32[r8 + 1];
  r7 = r4, r8 = r7 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r8];
  HEAP32[r4 + 4 >> 2] = HEAP32[r8 + 1];
  r8 = HEAP32[r3 >> 2];
  r7 = r8;
  r9 = r8 + 16 | 0;
  do {
    if ((HEAP32[r8 >> 2] & 524288 | 0) == 0) {
      r5 = 795;
    } else {
      r10 = HEAP32[r9 >> 2];
      if ((HEAP32[r10 >> 2] | 0) != 1) {
        r5 = 795;
        break;
      }
      r11 = r8 + 20 | 0;
      r12 = HEAP32[r11 >> 2];
      if ((r12 - HEAP32[r10 + 4 >> 2] | 0) <= 0) {
        r5 = 795;
        break;
      }
      r10 = r12 - 8 | 0;
      HEAP32[r11 >> 2] = r10;
      r11 = r4;
      r12 = r10;
      r10 = HEAP32[r11 + 4 >> 2];
      r13 = r12 | 0;
      HEAP32[r13 >> 2] = HEAP32[r11 >> 2];
      r14 = r12 + 4 | 0;
      HEAP32[r14 >> 2] = r10;
      r15 = r8 + 12 | 0;
      break;
    }
  } while (0);
  if (r5 == 795) {
    _ary_modify(r2, r7);
    r5 = r8 + 12 | 0;
    r10 = HEAP32[r5 >> 2];
    r12 = r10 + 1 | 0;
    if ((HEAP32[r9 >> 2] | 0) < (r12 | 0)) {
      _ary_expand_capa(r2, r7, r12);
      r16 = HEAP32[r5 >> 2];
    } else {
      r16 = r10;
    }
    r10 = r8 + 20 | 0;
    r12 = HEAP32[r10 >> 2];
    _memmove(r12 + 8 | 0, r12, r16 << 3, 4, 0);
    r16 = r4;
    r4 = HEAP32[r10 >> 2];
    r17 = r16 | 0;
    r18 = r16 + 4 | 0;
    r16 = HEAP32[r18 >> 2];
    HEAP32[r4 >> 2] = HEAP32[r17 >> 2];
    HEAP32[r4 + 4 >> 2] = r16;
    r15 = r5;
  }
  HEAP32[r15 >> 2] = HEAP32[r15 >> 2] + 1 | 0;
  _mrb_write_barrier(r2, r8);
  r8 = r3;
  r3 = r1;
  r13 = r8 | 0;
  r14 = r8 + 4 | 0;
  r8 = HEAP32[r14 >> 2];
  r17 = r3 | 0;
  HEAP32[r17 >> 2] = HEAP32[r13 >> 2];
  r18 = r3 + 4 | 0;
  HEAP32[r18 >> 2] = r8;
  STACKTOP = r6;
  return;
}
_mrb_ary_unshift["X"] = 1;
function _mrb_ary_unshift_m(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  r7 = r5 + 4, r8 = r7 >> 2;
  r9 = HEAP32[r3 >> 2], r10 = r9 >> 2;
  r11 = r9;
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r6, HEAP32[tempInt + 4 >> 2] = r7, tempInt));
  do {
    if ((HEAP32[r10] & 524288 | 0) == 0) {
      r4 = 803;
    } else {
      r7 = HEAP32[r10 + 4];
      if ((HEAP32[r7 >> 2] | 0) != 1) {
        r4 = 803;
        break;
      }
      r12 = r9 + 20 | 0;
      r13 = HEAP32[r12 >> 2];
      r14 = HEAP32[r8];
      if ((r13 - HEAP32[r7 + 4 >> 2] >> 3 | 0) < (r14 | 0)) {
        r4 = 803;
        break;
      }
      r7 = (-r14 << 3) + r13 | 0;
      HEAP32[r12 >> 2] = r7;
      r15 = r7;
      r16 = r9 + 12 | 0;
      break;
    }
  } while (0);
  if (r4 == 803) {
    _ary_modify(r2, r11);
    r4 = HEAP32[r8];
    if ((r4 | 0) == 0) {
      r7 = r3;
      r12 = r1;
      r13 = HEAP32[r7 + 4 >> 2];
      HEAP32[r12 >> 2] = HEAP32[r7 >> 2];
      HEAP32[r12 + 4 >> 2] = r13;
      STACKTOP = r5;
      return;
    }
    r13 = r9 + 12 | 0;
    r12 = HEAP32[r13 >> 2];
    r7 = r12 + r4 | 0;
    if ((HEAP32[r10 + 4] | 0) < (r7 | 0)) {
      _ary_expand_capa(r2, r11, r7);
      r17 = HEAP32[r8];
      r18 = HEAP32[r13 >> 2];
    } else {
      r17 = r4;
      r18 = r12;
    }
    r12 = r9 + 20 | 0;
    r4 = HEAP32[r12 >> 2];
    _memmove((r17 << 3) + r4 | 0, r4, r18 << 3, 4, 0);
    r15 = HEAP32[r12 >> 2];
    r16 = r13;
  }
  _array_copy(r15, HEAP32[r6 >> 2], HEAP32[r8]);
  HEAP32[r16 >> 2] = HEAP32[r16 >> 2] + HEAP32[r8] | 0;
  _mrb_write_barrier(r2, r9);
  r9 = r3;
  r3 = r1;
  r1 = HEAP32[r9 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r9 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r5;
  return;
}
_mrb_ary_unshift_m["X"] = 1;
function _mrb_ary_ref(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = 0;
  r5 = STACKTOP;
  r6 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = HEAP32[r2 >> 2];
  r2 = HEAP32[r6 + 12 >> 2];
  do {
    if ((r3 | 0) < 0) {
      r7 = r2 + r3 | 0;
      if ((r7 | 0) < 0) {
        break;
      } else {
        r8 = r7;
        r4 = 814;
        break;
      }
    } else {
      r8 = r3;
      r4 = 814;
    }
  } while (0);
  do {
    if (r4 == 814) {
      if ((r2 | 0) <= (r8 | 0)) {
        break;
      }
      r3 = (r8 << 3) + HEAP32[r6 + 20 >> 2] | 0;
      r7 = r1;
      r9 = HEAP32[r3 + 4 >> 2];
      HEAP32[r7 >> 2] = HEAP32[r3 >> 2];
      HEAP32[r7 + 4 >> 2] = r9;
      STACKTOP = r5;
      return;
    }
  } while (0);
  _mrb_nil_value598(r1);
  STACKTOP = r5;
  return;
}
function _mrb_ary_set(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11;
  r5 = STACKTOP;
  r6 = r2, r7 = r6 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r7];
  HEAP32[r2 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r4, r7 = r6 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r7];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7 + 1];
  r7 = HEAP32[r2 >> 2];
  r2 = r7;
  _ary_modify(r1, r2);
  r6 = (r7 + 12 | 0) >> 2;
  do {
    if ((r3 | 0) < 0) {
      r8 = HEAP32[r6] + r3 | 0;
      if ((r8 | 0) >= 0) {
        r9 = r8;
        break;
      }
      _mrb_raisef(r1, _mrb_class_obj_get(r1, 5314128), 5313948, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r8 - HEAP32[r6] | 0, tempInt));
      r9 = r8;
    } else {
      r9 = r3;
    }
  } while (0);
  r3 = HEAP32[r6];
  if ((r3 | 0) > (r9 | 0)) {
    r10 = r7 + 20 | 0;
  } else {
    r8 = r9 + 1 | 0;
    if ((HEAP32[r7 + 16 >> 2] | 0) > (r9 | 0)) {
      r11 = r3;
    } else {
      _ary_expand_capa(r1, r2, r8);
      r11 = HEAP32[r6];
    }
    r2 = r7 + 20 | 0;
    _ary_fill_with_nil((r11 << 3) + HEAP32[r2 >> 2] | 0, r8 - r11 | 0);
    HEAP32[r6] = r8;
    r10 = r2;
  }
  r2 = r4;
  r4 = (r9 << 3) + HEAP32[r10 >> 2] | 0;
  r10 = HEAP32[r2 + 4 >> 2];
  HEAP32[r4 >> 2] = HEAP32[r2 >> 2];
  HEAP32[r4 + 4 >> 2] = r10;
  _mrb_write_barrier(r1, r7);
  STACKTOP = r5;
  return;
}
_mrb_ary_set["X"] = 1;
function _ary_fill_with_nil(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r4 = r3;
  _mrb_nil_value598(r4);
  if ((r2 | 0) == 0) {
    STACKTOP = r3;
    return;
  }
  r5 = r4;
  r4 = r1;
  r1 = r2;
  while (1) {
    r2 = r1 - 1 | 0;
    r6 = r4;
    r7 = HEAP32[r5 + 4 >> 2];
    HEAP32[r6 >> 2] = HEAP32[r5 >> 2];
    HEAP32[r6 + 4 >> 2] = r7;
    if ((r2 | 0) == 0) {
      break;
    } else {
      r4 = r4 + 8 | 0;
      r1 = r2;
    }
  }
  STACKTOP = r3;
  return;
}
function _mrb_ary_splice(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29;
  r7 = 0;
  r8 = STACKTOP;
  r9 = r3, r10 = r9 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r10];
  HEAP32[r3 + 4 >> 2] = HEAP32[r10 + 1];
  r9 = r6, r10 = r9 >> 2;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r6 >> 2] = HEAP32[r10];
  HEAP32[r6 + 4 >> 2] = HEAP32[r10 + 1];
  r10 = HEAP32[r3 >> 2], r9 = r10 >> 2;
  r11 = r10;
  _ary_modify(r2, r11);
  r12 = (r10 + 12 | 0) >> 2;
  do {
    if ((r4 | 0) < 0) {
      r13 = HEAP32[r12] + r4 | 0;
      if ((r13 | 0) >= 0) {
        r14 = r13;
        break;
      }
      _mrb_raise(r2, _mrb_class_obj_get(r2, 5314128), 5326344);
      r14 = r13;
    } else {
      r14 = r4;
    }
  } while (0);
  r4 = HEAP32[r12];
  do {
    if ((r4 | 0) < (r5 | 0)) {
      r7 = 840;
    } else {
      if ((r4 | 0) < (r14 + r5 | 0)) {
        r7 = 840;
        break;
      } else {
        r15 = r5;
        break;
      }
    }
  } while (0);
  if (r7 == 840) {
    r15 = r4 - r14 | 0;
  }
  r7 = r15 + r14 | 0;
  if ((HEAP32[r6 + 4 >> 2] & 255 | 0) == 15) {
    r15 = HEAP32[r6 >> 2];
    r16 = HEAP32[r15 + 12 >> 2];
    r17 = HEAP32[r15 + 20 >> 2];
  } else {
    r16 = 1;
    r17 = r6;
  }
  r6 = r16 + r14 | 0;
  if ((r7 | 0) < (r4 | 0)) {
    r18 = r4 - r7 + r6 | 0;
  } else {
    r18 = r6;
  }
  if ((r18 | 0) > (HEAP32[r9 + 4] | 0)) {
    _ary_expand_capa(r2, r11, r18);
    r19 = HEAP32[r12];
  } else {
    r19 = r4;
  }
  do {
    if ((r14 | 0) > (r19 | 0)) {
      _ary_fill_with_nil((r19 << 3) + HEAP32[r9 + 5] | 0, r14 - r19 | 0);
    } else {
      if ((r14 | 0) >= (r19 | 0)) {
        break;
      }
      r4 = HEAP32[r9 + 5];
      _memmove((r6 << 3) + r4 | 0, (r7 << 3) + r4 | 0, r19 - r7 << 3, 4, 0);
    }
  } while (0);
  if ((r16 | 0) <= 0) {
    HEAP32[r12] = r18;
    r20 = r3;
    r21 = r1;
    r22 = r20 | 0;
    r23 = HEAP32[r22 >> 2];
    r24 = r20 + 4 | 0;
    r25 = HEAP32[r24 >> 2];
    r26 = r21 | 0, r27 = r26 >> 2;
    HEAP32[r27] = r23;
    r28 = r21 + 4 | 0, r29 = r28 >> 2;
    HEAP32[r29] = r25;
    STACKTOP = r8;
    return;
  }
  r7 = r10 + 20 | 0;
  r10 = 0;
  while (1) {
    r19 = (r10 << 3) + r17 | 0;
    r6 = (r10 + r14 << 3) + HEAP32[r7 >> 2] | 0;
    r26 = r19 | 0, r27 = r26 >> 2;
    r28 = r19 + 4 | 0, r29 = r28 >> 2;
    r19 = HEAP32[r29];
    HEAP32[r6 >> 2] = HEAP32[r27];
    HEAP32[r6 + 4 >> 2] = r19;
    r19 = r10 + 1 | 0;
    if ((r19 | 0) == (r16 | 0)) {
      break;
    } else {
      r10 = r19;
    }
  }
  HEAP32[r12] = r18;
  r20 = r3;
  r21 = r1;
  r22 = r20 | 0;
  r23 = HEAP32[r22 >> 2];
  r24 = r20 + 4 | 0;
  r25 = HEAP32[r24 >> 2];
  r26 = r21 | 0, r27 = r26 >> 2;
  HEAP32[r27] = r23;
  r28 = r21 + 4 | 0, r29 = r28 >> 2;
  HEAP32[r29] = r25;
  STACKTOP = r8;
  return;
}
_mrb_ary_splice["X"] = 1;
function _mrb_ary_decref(r1, r2) {
  var r3, r4;
  r3 = r2 | 0;
  r4 = HEAP32[r3 >> 2] - 1 | 0;
  HEAP32[r3 >> 2] = r4;
  if ((r4 | 0) != 0) {
    return;
  }
  _mrb_free(r1, HEAP32[r2 + 4 >> 2]);
  _mrb_free(r1, r2);
  return;
}
function _mrb_ary_aget(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5, r7 = r6 >> 2;
  r8 = r5 + 4;
  r9 = r5 + 8;
  r10 = HEAP32[r3 >> 2];
  r11 = r10;
  _mrb_get_args(r2, 5321004, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r6, HEAP32[tempInt + 4 >> 2] = r8, HEAP32[tempInt + 8 >> 2] = r9, tempInt));
  r6 = HEAP32[r9 >> 2];
  if ((r6 | 0) == 1) {
    if ((HEAP32[HEAP32[r8 >> 2] + 4 >> 2] & 255 | 0) != 3) {
      _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5325592);
    }
    r9 = HEAP32[r7];
    r12 = r10 + 12 | 0;
    do {
      if ((r9 | 0) < 0) {
        r10 = HEAP32[r12 >> 2] + r9 | 0;
        HEAP32[r7] = r10;
        if ((r10 | 0) < 0) {
          break;
        } else {
          r13 = r10;
          r4 = 868;
          break;
        }
      } else {
        r13 = r9;
        r4 = 868;
      }
    } while (0);
    do {
      if (r4 == 868) {
        r9 = HEAP32[r12 >> 2];
        if ((r9 | 0) < (r13 | 0)) {
          break;
        }
        r10 = HEAP32[HEAP32[r8 >> 2] >> 2];
        if ((r10 | 0) < 0) {
          _mrb_nil_value598(r1);
          STACKTOP = r5;
          return;
        }
        if ((r9 | 0) == (r13 | 0)) {
          _mrb_ary_new(r1, r2);
          STACKTOP = r5;
          return;
        } else {
          r14 = r9 - r13 | 0;
          _ary_subseq(r1, r2, r11, r13, (r10 | 0) > (r14 | 0) ? r14 : r10);
          STACKTOP = r5;
          return;
        }
      }
    } while (0);
    _mrb_nil_value598(r1);
    STACKTOP = r5;
    return;
  } else if ((r6 | 0) == 0) {
    _mrb_ary_ref(r1, r3, HEAP32[r7]);
    STACKTOP = r5;
    return;
  } else {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5314652);
    _mrb_nil_value598(r1);
    STACKTOP = r5;
    return;
  }
}
_mrb_ary_aget["X"] = 1;
function _ary_subseq(r1, r2, r3, r4, r5) {
  var r6;
  _ary_make_shared(r2, r3);
  r6 = _mrb_obj_alloc(r2, 15, HEAP32[r2 + 92 >> 2]), r2 = r6 >> 2;
  HEAP32[r2 + 5] = (r4 << 3) + HEAP32[r3 + 20 >> 2] | 0;
  HEAP32[r2 + 3] = r5;
  r5 = HEAP32[r3 + 16 >> 2];
  HEAP32[r2 + 4] = r5;
  r2 = r5 | 0;
  HEAP32[r2 >> 2] = HEAP32[r2 >> 2] + 1 | 0;
  r2 = r6;
  HEAP32[r2 >> 2] = HEAP32[r2 >> 2] | 524288;
  _mrb_obj_value591(r1, r6 | 0);
  return;
}
function _mrb_ary_aset(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4, r6 = r5 >> 2;
  r7 = r4 + 4;
  r8 = r4 + 8;
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r7, tempInt));
  r5 = HEAP32[r7 >> 2];
  if ((r5 | 0) == 2) {
    r7 = HEAP32[r6];
    if ((HEAP32[r7 + 4 >> 2] & 255 | 0) == 3) {
      r9 = r7;
    } else {
      _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5325128);
      r9 = HEAP32[r6];
    }
    _mrb_ary_set(r2, r3, HEAP32[r9 >> 2], r9 + 8 | 0);
    r9 = HEAP32[r6] + 8 | 0;
    r7 = r1;
    r10 = HEAP32[r9 + 4 >> 2];
    HEAP32[r7 >> 2] = HEAP32[r9 >> 2];
    HEAP32[r7 + 4 >> 2] = r10;
    STACKTOP = r4;
    return;
  } else if ((r5 | 0) == 3) {
    r5 = HEAP32[r6];
    _mrb_ary_splice(r8, r2, r3, HEAP32[r5 >> 2], HEAP32[r5 + 8 >> 2], r5 + 16 | 0);
    r5 = HEAP32[r6] + 16 | 0;
    r6 = r1;
    r3 = HEAP32[r5 + 4 >> 2];
    HEAP32[r6 >> 2] = HEAP32[r5 >> 2];
    HEAP32[r6 + 4 >> 2] = r3;
    STACKTOP = r4;
    return;
  } else {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5314652);
    _mrb_nil_value598(r1);
    STACKTOP = r4;
    return;
  }
}
_mrb_ary_aset["X"] = 1;
function _mrb_ary_delete_at(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5, r7 = r6 >> 2;
  r8 = HEAP32[r3 >> 2];
  r3 = r8;
  _mrb_get_args(r2, 5320132, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r6, tempInt));
  r6 = HEAP32[r7];
  r9 = (r8 + 12 | 0) >> 2;
  do {
    if ((r6 | 0) < 0) {
      r10 = HEAP32[r9] + r6 | 0;
      HEAP32[r7] = r10;
      if ((r10 | 0) < 0) {
        break;
      } else {
        r11 = r10;
        r4 = 896;
        break;
      }
    } else {
      r11 = r6;
      r4 = 896;
    }
  } while (0);
  do {
    if (r4 == 896) {
      if ((HEAP32[r9] | 0) <= (r11 | 0)) {
        break;
      }
      _ary_modify(r2, r3);
      r6 = HEAP32[r7];
      r10 = (r6 << 3) + HEAP32[r8 + 20 >> 2] | 0;
      r12 = r10;
      r13 = HEAP32[r12 >> 2];
      r14 = HEAP32[r12 + 4 >> 2];
      r12 = HEAP32[r9];
      r15 = r12 - r6 - 1 | 0;
      if ((r15 | 0) == 0) {
        r16 = r12;
      } else {
        r12 = r10;
        r10 = r15;
        while (1) {
          r15 = r12 + 8 | 0;
          r6 = r15;
          r17 = r12;
          r18 = r6 | 0;
          r19 = r6 + 4 | 0;
          r6 = HEAP32[r19 >> 2];
          HEAP32[r17 >> 2] = HEAP32[r18 >> 2];
          HEAP32[r17 + 4 >> 2] = r6;
          r6 = r10 - 1 | 0;
          if ((r6 | 0) == 0) {
            break;
          } else {
            r12 = r15;
            r10 = r6;
          }
        }
        r16 = HEAP32[r9];
      }
      HEAP32[r9] = r16 - 1 | 0;
      _ary_shrink_capa(r2, r3);
      r10 = r1;
      r18 = r10 | 0;
      HEAP32[r18 >> 2] = r13;
      r19 = r10 + 4 | 0;
      HEAP32[r19 >> 2] = r14;
      STACKTOP = r5;
      return;
    }
  } while (0);
  _mrb_nil_value598(r1);
  STACKTOP = r5;
  return;
}
_mrb_ary_delete_at["X"] = 1;
function _mrb_true_value614(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 2;
  return;
}
function _mrb_false_value615(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _ary_shrink_capa(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9;
  r3 = r2 + 16 | 0;
  r4 = HEAP32[r3 >> 2];
  if ((r4 | 0) < 8) {
    return;
  }
  r5 = HEAP32[r2 + 12 >> 2];
  r6 = r5 * 5 & -1;
  if ((r4 | 0) > (r6 | 0)) {
    r7 = r4;
  } else {
    return;
  }
  while (1) {
    r8 = (r7 | 0) / 2 & -1;
    if ((r7 | 0) < 8) {
      r9 = 4;
      break;
    }
    if ((r8 | 0) > (r6 | 0)) {
      r7 = r8;
    } else {
      r9 = r8;
      break;
    }
  }
  if (!((r9 | 0) > (r5 | 0) & (r9 | 0) < (r4 | 0))) {
    return;
  }
  HEAP32[r3 >> 2] = r9;
  r3 = r2 + 20 | 0;
  HEAP32[r3 >> 2] = _mrb_realloc(r1, HEAP32[r3 >> 2], r9 << 3);
  return;
}
function _mrb_ary_first(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4, r6 = r5 >> 2;
  r7 = HEAP32[r3 >> 2], r3 = r7 >> 2;
  r8 = r7;
  if ((_mrb_get_args(r2, 5317632, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt)) | 0) == 0) {
    if ((HEAP32[r3 + 3] | 0) > 0) {
      r5 = HEAP32[r3 + 5];
      r7 = r1;
      r9 = HEAP32[r5 + 4 >> 2];
      HEAP32[r7 >> 2] = HEAP32[r5 >> 2];
      HEAP32[r7 + 4 >> 2] = r9;
      STACKTOP = r4;
      return;
    } else {
      _mrb_nil_value598(r1);
      STACKTOP = r4;
      return;
    }
  }
  r9 = HEAP32[r6];
  if ((r9 | 0) < 0) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5324392);
    r10 = HEAP32[r6];
  } else {
    r10 = r9;
  }
  r9 = HEAP32[r3 + 3];
  if ((r10 | 0) > (r9 | 0)) {
    HEAP32[r6] = r9;
    r11 = r9;
  } else {
    r11 = r10;
  }
  if ((HEAP32[r3] & 524288 | 0) == 0) {
    _mrb_ary_new_from_values(r1, r2, r11, HEAP32[r3 + 5]);
    STACKTOP = r4;
    return;
  } else {
    _ary_subseq(r1, r2, r8, 0, r11);
    STACKTOP = r4;
    return;
  }
}
_mrb_ary_first["X"] = 1;
function _mrb_ary_last(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4;
  r7 = HEAP32[r3 >> 2], r3 = r7 >> 2;
  r8 = r7;
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  r7 = HEAP32[r6 >> 2];
  if ((r7 | 0) > 1) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5314652);
    r9 = HEAP32[r6 >> 2];
  } else {
    r9 = r7;
  }
  if ((r9 | 0) == 0) {
    r9 = HEAP32[r3 + 3];
    if ((r9 | 0) > 0) {
      r7 = (r9 - 1 << 3) + HEAP32[r3 + 5] | 0;
      r9 = r1;
      r6 = HEAP32[r7 + 4 >> 2];
      HEAP32[r9 >> 2] = HEAP32[r7 >> 2];
      HEAP32[r9 + 4 >> 2] = r6;
      STACKTOP = r4;
      return;
    } else {
      _mrb_nil_value598(r1);
      STACKTOP = r4;
      return;
    }
  }
  r6 = HEAP32[HEAP32[r5 >> 2] >> 2];
  if ((r6 | 0) < 0) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5324392);
  }
  r5 = HEAP32[r3 + 3];
  r9 = (r6 | 0) > (r5 | 0) ? r5 : r6;
  if ((HEAP32[r3] & 524288 | 0) != 0 | (r9 | 0) > 4) {
    _ary_subseq(r1, r2, r8, r5 - r9 | 0, r9);
    STACKTOP = r4;
    return;
  } else {
    _mrb_ary_new_from_values(r1, r2, r9, (r5 - r9 << 3) + HEAP32[r3 + 5] | 0);
    STACKTOP = r4;
    return;
  }
}
_mrb_ary_last["X"] = 1;
function _mrb_ary_index_m(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r6, tempInt));
  r7 = HEAP32[r3 >> 2];
  r3 = r7 + 12 | 0;
  r8 = r7 + 20 | 0;
  r7 = 0;
  while (1) {
    if ((r7 | 0) >= (HEAP32[r3 >> 2] | 0)) {
      r4 = 954;
      break;
    }
    if ((_mrb_equal(r2, (r7 << 3) + HEAP32[r8 >> 2] | 0, r6) | 0) == 0) {
      r7 = r7 + 1 | 0;
    } else {
      r4 = 953;
      break;
    }
  }
  if (r4 == 953) {
    _mrb_fixnum_value599(r1, r7);
    STACKTOP = r5;
    return;
  } else if (r4 == 954) {
    _mrb_nil_value598(r1);
    STACKTOP = r5;
    return;
  }
}
function _mrb_ary_rindex_m(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r6, tempInt));
  r7 = HEAP32[r3 >> 2];
  r3 = r7 + 20 | 0;
  r8 = HEAP32[r7 + 12 >> 2];
  while (1) {
    r9 = r8 - 1 | 0;
    if ((r8 | 0) <= 0) {
      r4 = 962;
      break;
    }
    if ((_mrb_equal(r2, (r9 << 3) + HEAP32[r3 >> 2] | 0, r6) | 0) == 0) {
      r8 = r9;
    } else {
      r4 = 961;
      break;
    }
  }
  if (r4 == 961) {
    _mrb_fixnum_value599(r1, r9);
    STACKTOP = r5;
    return;
  } else if (r4 == 962) {
    _mrb_nil_value598(r1);
    STACKTOP = r5;
    return;
  }
}
function _mrb_ary_splat(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  if ((HEAP32[r3 + 4 >> 2] & 255 | 0) == 15) {
    r5 = r3;
    r6 = r1;
    r7 = HEAP32[r5 + 4 >> 2];
    HEAP32[r6 >> 2] = HEAP32[r5 >> 2];
    HEAP32[r6 + 4 >> 2] = r7;
    STACKTOP = r4;
    return;
  } else {
    _mrb_ary_new_from_values(r1, r2, 1, r3);
    STACKTOP = r4;
    return;
  }
}
function _mrb_ary_clear(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = HEAP32[r3 >> 2];
  _ary_modify(r2, r5);
  HEAP32[r5 + 12 >> 2] = 0;
  HEAP32[r5 + 16 >> 2] = 0;
  r6 = r5 + 20 | 0;
  _mrb_free(r2, HEAP32[r6 >> 2]);
  HEAP32[r6 >> 2] = 0;
  r6 = r3;
  r3 = r1;
  r1 = HEAP32[r6 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_ary_empty_p(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  if ((HEAP32[HEAP32[r3 >> 2] + 12 >> 2] | 0) == 0) {
    _mrb_true_value614(r1);
    STACKTOP = r2;
    return;
  } else {
    _mrb_false_value615(r1);
    STACKTOP = r2;
    return;
  }
}
function _mrb_ary_join(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r6 = r3, r7 = r6 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r4, r7 = r6 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r7];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7 + 1];
  r7 = r5;
  r6 = r5 + 8;
  _mrb_obj_as_string(r7, r2, r4);
  r8 = r7;
  r7 = r4;
  r9 = HEAP32[r8 + 4 >> 2];
  HEAP32[r7 >> 2] = HEAP32[r8 >> 2];
  HEAP32[r7 + 4 >> 2] = r9;
  _mrb_ary_new(r6, r2);
  _join_ary(r1, r2, r3, r4, r6);
  STACKTOP = r5;
  return;
}
function _join_ary(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50;
  r6 = 0;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 80 | 0;
  r8 = r3, r9 = r8 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r9];
  HEAP32[r3 + 4 >> 2] = HEAP32[r9 + 1];
  r8 = r4, r9 = r8 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r9];
  HEAP32[r4 + 4 >> 2] = HEAP32[r9 + 1];
  r8 = r5, r9 = r8 >> 2;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r5 >> 2] = HEAP32[r9];
  HEAP32[r5 + 4 >> 2] = HEAP32[r9 + 1];
  r9 = r7;
  r8 = r7 + 8;
  r10 = r7 + 16;
  r11 = r7 + 24;
  r12 = r7 + 32;
  r13 = r7 + 40;
  r14 = r7 + 48;
  r15 = r7 + 56;
  r16 = r7 + 64;
  r17 = r7 + 72;
  r18 = HEAP32[r5 >> 2];
  r19 = r18 + 12 | 0;
  r20 = HEAP32[r19 >> 2];
  L1240 : do {
    if ((r20 | 0) > 0) {
      r21 = r18 + 20 | 0;
      r22 = 0;
      r23 = r20;
      while (1) {
        if ((_mrb_obj_equal(r3, (r22 << 3) + HEAP32[r21 >> 2] | 0) | 0) == 0) {
          r24 = r23;
        } else {
          _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5316412);
          r24 = HEAP32[r19 >> 2];
        }
        r25 = r22 + 1 | 0;
        if ((r25 | 0) < (r24 | 0)) {
          r22 = r25;
          r23 = r24;
        } else {
          break L1240;
        }
      }
    }
  } while (0);
  _mrb_ary_push(r2, r5, r3);
  _mrb_str_buf_new(r10, r2, 64);
  r24 = r10;
  r10 = r9 >> 2;
  r19 = r24 | 0, r20 = r19 >> 2;
  r18 = HEAP32[r20];
  r23 = r24 + 4 | 0, r24 = r23 >> 2;
  r22 = HEAP32[r24];
  HEAP32[r10] = r18;
  HEAP32[r10 + 1] = r22;
  r21 = HEAP32[r3 >> 2];
  r3 = r21 + 12 | 0;
  if ((HEAP32[r3 >> 2] | 0) <= 0) {
    r26 = r22;
    r27 = r18;
    _mrb_ary_pop(r17, undef, r5);
    r28 = r1;
    r19 = r28 | 0, r20 = r19 >> 2;
    HEAP32[r20] = r27;
    r23 = r28 + 4 | 0, r24 = r23 >> 2;
    HEAP32[r24] = r26;
    STACKTOP = r7;
    return;
  }
  r18 = r4 + 4 | 0;
  r22 = r4;
  r25 = r4;
  r29 = r21 + 20 | 0;
  r21 = r8;
  r30 = r8 + 4 | 0;
  r31 = r14;
  r32 = r14 + 4 | 0;
  r33 = r15;
  r34 = r15 + 4 | 0;
  r35 = r16;
  r36 = r8;
  r37 = r12;
  r38 = 0;
  while (1) {
    do {
      if ((r38 | 0) > 0) {
        if ((HEAP32[r18 >> 2] & 255 | 0) == 0) {
          r39 = HEAP32[r22 >> 2];
          if ((r39 | 0) == 0) {
            break;
          }
          r40 = r39;
        } else {
          r40 = HEAP32[r25 >> 2];
        }
        _mrb_str_buf_cat(r11, r2, r9, HEAP32[r40 + 20 >> 2], HEAP32[r40 + 12 >> 2]);
      }
    } while (0);
    r39 = (r38 << 3) + HEAP32[r29 >> 2] | 0;
    r41 = HEAP32[r39 >> 2];
    r42 = HEAP32[r39 + 4 >> 2];
    HEAP32[r21 >> 2] = r41;
    HEAP32[r21 + 4 >> 2] = r42;
    r39 = r42 & 255;
    do {
      if ((r39 | 0) == 17) {
        r43 = r41;
      } else if ((r39 | 0) == 15) {
        r6 = 994;
      } else {
        _mrb_check_string_type(r14, r2, r8);
        r42 = HEAP32[r31 >> 2];
        r44 = HEAP32[r32 >> 2];
        if ((r44 & 255 | r42 | 0) != 0) {
          HEAP32[r36 >> 2] = r42;
          HEAP32[r30 >> 2] = r44;
          r43 = r42;
          break;
        }
        _mrb_check_convert_type(r15, r2, r8, 15, 5319044, 5313940);
        r42 = HEAP32[r33 >> 2];
        r44 = HEAP32[r34 >> 2];
        if ((r44 & 255 | r42 | 0) == 0) {
          _mrb_obj_as_string(r16, r2, r8);
          r45 = r35 | 0;
          r46 = HEAP32[r45 >> 2];
          r47 = r35 + 4 | 0;
          r48 = HEAP32[r47 >> 2];
          r49 = r21 | 0;
          HEAP32[r49 >> 2] = r46;
          r50 = r21 + 4 | 0;
          HEAP32[r50 >> 2] = r48;
          r43 = r46;
          break;
        } else {
          HEAP32[r36 >> 2] = r42;
          HEAP32[r30 >> 2] = r44;
          r6 = 994;
          break;
        }
      }
    } while (0);
    if (r6 == 994) {
      r6 = 0;
      _join_ary(r12, r2, r8, r4, r5);
      r45 = r37 | 0;
      r39 = HEAP32[r45 >> 2];
      r47 = r37 + 4 | 0;
      r41 = HEAP32[r47 >> 2];
      r49 = r21 | 0;
      HEAP32[r49 >> 2] = r39;
      r50 = r21 + 4 | 0;
      HEAP32[r50 >> 2] = r41;
      r43 = r39;
    }
    r39 = r43;
    _mrb_str_buf_cat(r13, r2, r9, HEAP32[r39 + 20 >> 2], HEAP32[r39 + 12 >> 2]);
    r39 = r38 + 1 | 0;
    if ((r39 | 0) < (HEAP32[r3 >> 2] | 0)) {
      r38 = r39;
    } else {
      break;
    }
  }
  r26 = HEAP32[r10 + 1];
  r27 = HEAP32[r10];
  _mrb_ary_pop(r17, undef, r5);
  r28 = r1;
  r19 = r28 | 0, r20 = r19 >> 2;
  HEAP32[r20] = r27;
  r23 = r28 + 4 | 0, r24 = r23 >> 2;
  HEAP32[r24] = r26;
  STACKTOP = r7;
  return;
}
_join_ary["X"] = 1;
function _mrb_init_array(r1) {
  var r2, r3;
  r2 = _mrb_define_class(r1, 5319044, HEAP32[r1 + 72 >> 2]);
  HEAP32[r1 + 92 >> 2] = r2;
  r3 = r2;
  HEAP32[r3 >> 2] = HEAP32[r3 >> 2] & -522241 | 30720;
  _mrb_include_module(r1, r2, _mrb_class_get(r1, 5325048));
  _mrb_define_class_method(r1, r2, 5322620, 640);
  _mrb_define_method(r1, r2, 5325956, 204);
  _mrb_define_method(r1, r2, 5326420, 604);
  _mrb_define_method(r1, r2, 5322356, 570);
  _mrb_define_method(r1, r2, 5322620, 626);
  _mrb_define_method(r1, r2, 5322288, 540);
  _mrb_define_method(r1, r2, 5325788, 206);
  _mrb_define_method(r1, r2, 5321664, 300);
  _mrb_define_method(r1, r2, 5321384, 312);
  _mrb_define_method(r1, r2, 5323880, 76);
  _mrb_define_method(r1, r2, 5324944, 628);
  _mrb_define_method(r1, r2, 5320696, 552);
  _mrb_define_method(r1, r2, 5318996, 590);
  _mrb_define_method(r1, r2, 5320276, 330);
  _mrb_define_method(r1, r2, 5323808, 500);
  _mrb_define_method(r1, r2, 5321540, 64);
  _mrb_define_method(r1, r2, 5319772, 510);
  _mrb_define_method(r1, r2, 5319556, 570);
  _mrb_define_method(r1, r2, 5321064, 590);
  _mrb_define_method(r1, r2, 5319164, 314);
  _mrb_define_method(r1, r2, 5318928, 302);
  _mrb_define_method(r1, r2, 5318720, 178);
  _mrb_define_method(r1, r2, 5320888, 274);
  _mrb_define_method(r1, r2, 5320652, 64);
  _mrb_define_method(r1, r2, 5318e3, 626);
  _mrb_define_method(r1, r2, 5317880, 40);
  _mrb_define_method(r1, r2, 5325664, 128);
  _mrb_define_alias(r1, r2);
  _mrb_define_method(r1, r2, 5314464, 88);
  _mrb_define_method(r1, r2, 5322632, 536);
  _mrb_define_method(r1, r2, 5314124, 6);
  return;
}
function _mrb_ary_join_m(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_nil_value598(r5);
  _mrb_get_args(r2, 5316748, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_ary_join(r1, r2, r3, r5);
  STACKTOP = r4;
  return;
}
function _mrb_ary_size(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  _mrb_fixnum_value599(r1, HEAP32[HEAP32[r3 >> 2] + 12 >> 2]);
  STACKTOP = r2;
  return;
}
function _mrb_ary_inspect(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  if ((HEAP32[HEAP32[r3 >> 2] + 12 >> 2] | 0) == 0) {
    _mrb_str_new(r1, r2, 5322620, 2);
    STACKTOP = r4;
    return;
  } else {
    _mrb_ary_new(r5, r2);
    _inspect_ary(r1, r2, r3, r5);
    STACKTOP = r4;
    return;
  }
}
function _mrb_ary_equal(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  r7 = r5 + 8;
  r8 = r5 + 16;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r6, tempInt));
  if ((_mrb_obj_equal(r3, r6) | 0) != 0) {
    _mrb_true_value614(r1);
    STACKTOP = r5;
    return;
  }
  r9 = HEAP32[r6 + 4 >> 2] & 255;
  if (r9 >>> 0 < 9) {
    _mrb_false_value615(r1);
    STACKTOP = r5;
    return;
  }
  if ((r9 | 0) != 15) {
    if ((_mrb_respond_to(r2, r6, _mrb_intern(r2, 5313940)) | 0) == 0) {
      _mrb_false_value615(r1);
      STACKTOP = r5;
      return;
    }
    if ((_mrb_equal(r2, r6, r3) | 0) == 0) {
      _mrb_false_value615(r1);
      STACKTOP = r5;
      return;
    } else {
      _mrb_true_value614(r1);
      STACKTOP = r5;
      return;
    }
  }
  r9 = r3;
  r10 = HEAP32[HEAP32[r9 >> 2] + 12 >> 2];
  if ((r10 | 0) == (HEAP32[HEAP32[r6 >> 2] + 12 >> 2] | 0)) {
    r11 = 0;
    r12 = r10;
  } else {
    _mrb_false_value615(r1);
    STACKTOP = r5;
    return;
  }
  while (1) {
    if ((r11 | 0) >= (r12 | 0)) {
      r4 = 1030;
      break;
    }
    _ary_elt(r7, r3, r11);
    _ary_elt(r8, r6, r11);
    if ((_mrb_equal(r2, r7, r8) | 0) == 0) {
      r4 = 1029;
      break;
    }
    r11 = r11 + 1 | 0;
    r12 = HEAP32[HEAP32[r9 >> 2] + 12 >> 2];
  }
  if (r4 == 1029) {
    _mrb_false_value615(r1);
    STACKTOP = r5;
    return;
  } else if (r4 == 1030) {
    _mrb_true_value614(r1);
    STACKTOP = r5;
    return;
  }
}
_mrb_ary_equal["X"] = 1;
function _mrb_ary_eql(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  r7 = r5 + 8;
  r8 = r5 + 16;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r6, tempInt));
  if ((_mrb_obj_equal(r3, r6) | 0) != 0) {
    _mrb_true_value614(r1);
    STACKTOP = r5;
    return;
  }
  if ((HEAP32[r6 + 4 >> 2] & 255 | 0) != 15) {
    _mrb_false_value615(r1);
    STACKTOP = r5;
    return;
  }
  r9 = r3;
  r10 = HEAP32[HEAP32[r9 >> 2] + 12 >> 2];
  if ((r10 | 0) == (HEAP32[HEAP32[r6 >> 2] + 12 >> 2] | 0)) {
    r11 = 0;
    r12 = r10;
  } else {
    _mrb_false_value615(r1);
    STACKTOP = r5;
    return;
  }
  while (1) {
    if ((r11 | 0) >= (r12 | 0)) {
      r4 = 1050;
      break;
    }
    _ary_elt(r7, r3, r11);
    _ary_elt(r8, r6, r11);
    if ((_mrb_eql(r2, r7, r8) | 0) == 0) {
      r4 = 1049;
      break;
    }
    r11 = r11 + 1 | 0;
    r12 = HEAP32[HEAP32[r9 >> 2] + 12 >> 2];
  }
  if (r4 == 1049) {
    _mrb_false_value615(r1);
    STACKTOP = r5;
    return;
  } else if (r4 == 1050) {
    _mrb_true_value614(r1);
    STACKTOP = r5;
    return;
  }
}
_mrb_ary_eql["X"] = 1;
function _inspect_ary(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24;
  r5 = 0;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 76 | 0;
  r7 = r3, r8 = r7 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r8];
  HEAP32[r3 + 4 >> 2] = HEAP32[r8 + 1];
  r7 = r4, r8 = r7 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r8];
  HEAP32[r4 + 4 >> 2] = HEAP32[r8 + 1];
  r8 = r6;
  r7 = r6 + 12;
  r9 = r6 + 20;
  r10 = r6 + 28;
  r11 = r6 + 36;
  r12 = r6 + 44;
  r13 = r6 + 52;
  r14 = r6 + 60;
  r15 = r6 + 68;
  r16 = r6 + 8 | 0;
  HEAP8[r16] = 91;
  HEAP16[r7 >> 1] = 8236;
  r17 = r6 + 16 | 0;
  HEAP8[r17] = 93;
  r18 = HEAP32[r4 >> 2];
  r19 = HEAP32[r18 + 12 >> 2];
  r20 = r18 + 20 | 0;
  r18 = 0;
  while (1) {
    if ((r18 | 0) >= (r19 | 0)) {
      break;
    }
    if ((_mrb_obj_equal(r3, (r18 << 3) + HEAP32[r20 >> 2] | 0) | 0) == 0) {
      r18 = r18 + 1 | 0;
    } else {
      r5 = 1060;
      break;
    }
  }
  if (r5 == 1060) {
    _mrb_str_new(r1, r2, 5316964, 5);
    STACKTOP = r6;
    return;
  }
  _mrb_ary_push(r2, r4, r3);
  _mrb_str_buf_new(r8, r2, 64);
  r5 = r8;
  _mrb_str_buf_cat(r9, r2, r8, r16, 1);
  r16 = HEAP32[r3 >> 2];
  r3 = r16 + 12 | 0;
  L1345 : do {
    if ((HEAP32[r3 >> 2] | 0) > 0) {
      r9 = r7;
      r18 = r16 + 20 | 0;
      r20 = r2 + 544 | 0;
      r19 = 0;
      while (1) {
        r21 = _mrb_gc_arena_save(HEAP32[r20 >> 2]);
        if ((r19 | 0) > 0) {
          _mrb_str_buf_cat(r10, r2, r8, r9, 2);
        }
        r22 = HEAP32[r18 >> 2];
        r23 = (r19 << 3) + r22 | 0;
        if ((HEAP32[r22 + (r19 << 3) + 4 >> 2] & 255 | 0) == 15) {
          _inspect_ary(r11, r2, r23, r4);
          r24 = r11;
        } else {
          _mrb_inspect(r12, r2, r23);
          r24 = r12;
        }
        r23 = HEAP32[r24 >> 2];
        _mrb_str_buf_cat(r13, r2, r8, HEAP32[r23 + 20 >> 2], HEAP32[r23 + 12 >> 2]);
        _mrb_gc_arena_restore(r2, r21);
        r21 = r19 + 1 | 0;
        if ((r21 | 0) < (HEAP32[r3 >> 2] | 0)) {
          r19 = r21;
        } else {
          break L1345;
        }
      }
    }
  } while (0);
  _mrb_str_buf_cat(r14, r2, r8, r17, 1);
  _mrb_ary_pop(r15, undef, r4);
  r4 = r1;
  r1 = HEAP32[r5 + 4 >> 2];
  HEAP32[r4 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r4 + 4 >> 2] = r1;
  STACKTOP = r6;
  return;
}
_inspect_ary["X"] = 1;
function _kh_get_mt(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r3 = r2 << 16 >> 16;
  r4 = HEAP32[r1 + 32 >> 2];
  r5 = r4 & (r3 << 2 ^ r3 ^ r3 >> 2);
  r3 = r5 >>> 3;
  r6 = HEAP32[r1 + 16 >> 2];
  r7 = HEAP8[(r5 & 7) + 5327036 | 0];
  L1359 : do {
    if ((r7 & HEAP8[r6 + r3 | 0]) << 24 >> 24 == 0) {
      r8 = HEAP32[r1 + 20 >> 2];
      r9 = r1 + 24 | 0;
      r10 = r1 + 36 | 0;
      r11 = r5;
      r12 = r3;
      r13 = r7;
      while (1) {
        if ((HEAP8[r8 + r12 | 0] & r13) << 24 >> 24 == 0) {
          if (HEAP16[HEAP32[r9 >> 2] + (r11 << 1) >> 1] << 16 >> 16 == r2 << 16 >> 16) {
            r14 = r11;
            break;
          }
        }
        r15 = HEAP32[r10 >> 2] + r11 & r4;
        r16 = r15 >>> 3;
        r17 = HEAP8[(r15 & 7) + 5327036 | 0];
        if ((r17 & HEAP8[r6 + r16 | 0]) << 24 >> 24 == 0) {
          r11 = r15;
          r12 = r16;
          r13 = r17;
        } else {
          break L1359;
        }
      }
      return r14;
    }
  } while (0);
  r14 = HEAP32[r1 >> 2];
  return r14;
}
_kh_get_mt["X"] = 1;
function _kh_del_mt(r1, r2) {
  var r3;
  r3 = HEAP32[r1 + 20 >> 2] + (r2 >>> 3) | 0;
  HEAP8[r3] = HEAP8[r3] | HEAP8[(r2 & 7) + 5327036 | 0];
  r2 = r1 + 4 | 0;
  HEAP32[r2 >> 2] = HEAP32[r2 >> 2] - 1 | 0;
  return;
}
function _mrb_gc_mark_mt_size(r1) {
  var r2;
  if ((r1 | 0) == 0) {
    r2 = 0;
  } else {
    r2 = HEAP32[r1 + 4 >> 2];
  }
  return r2;
}
function _mrb_symbol_value717(r1, r2) {
  HEAP16[r1 >> 1] = r2;
  HEAP32[r1 + 4 >> 2] = 4;
  return;
}
function _mrb_obj_value718(r1, r2) {
  var r3;
  r3 = HEAP32[r2 >> 2] & 255;
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = r3;
  return;
}
function _mrb_class_real(r1) {
  var r2, r3;
  if (((HEAP32[r1 >> 2] & 255) - 12 | 0) >>> 0 < 2) {
    r2 = r1;
  } else {
    r3 = r1;
    return r3;
  }
  while (1) {
    r1 = HEAP32[r2 + 20 >> 2];
    if (((HEAP32[r1 >> 2] & 255) - 12 | 0) >>> 0 < 2) {
      r2 = r1;
    } else {
      r3 = r1;
      break;
    }
  }
  return r3;
}
function _kh_alloc_mt(r1) {
  var r2, r3, r4, r5, r6, r7, r8;
  r2 = r1 >> 2;
  r3 = HEAP32[r2];
  HEAP32[r2 + 2] = 0;
  HEAP32[r2 + 1] = 0;
  r4 = r3 >>> 2;
  r5 = r3 >>> 1;
  HEAP32[r2 + 3] = r4 | r5;
  r6 = (r1 + 40 | 0) >> 2;
  r7 = _mrb_malloc(HEAP32[r6], r4);
  HEAP32[r2 + 4] = r7;
  r4 = r3 >>> 3;
  r8 = r1 + 20 | 0;
  HEAP32[r8 >> 2] = r7 + r4 | 0;
  _memset(r7, -1, r4);
  _memset(HEAP32[r8 >> 2], 0, r4);
  HEAP32[r2 + 6] = _mrb_malloc(HEAP32[r6], r3 << 1);
  HEAP32[r2 + 7] = _mrb_malloc(HEAP32[r6], r3 << 2);
  HEAP32[r2 + 8] = r3 - 1 | 0;
  HEAP32[r2 + 9] = r5 - 1 | 0;
  return;
}
function _kh_init_mt_size(r1) {
  var r2, r3;
  r2 = _mrb_calloc(r1, 1, 44);
  r3 = r2;
  HEAP32[r2 >> 2] = 32;
  HEAP32[r2 + 40 >> 2] = r1;
  _kh_alloc_mt(r3);
  return r3;
}
function _kh_init_mt(r1) {
  return _kh_init_mt_size(r1);
}
function _kh_destroy_mt(r1) {
  var r2;
  if ((r1 | 0) == 0) {
    return;
  }
  r2 = (r1 + 40 | 0) >> 2;
  _mrb_free(HEAP32[r2], HEAP32[r1 + 24 >> 2]);
  _mrb_free(HEAP32[r2], HEAP32[r1 + 28 >> 2]);
  _mrb_free(HEAP32[r2], HEAP32[r1 + 16 >> 2]);
  _mrb_free(HEAP32[r2], r1);
  return;
}
function _kh_resize_mt(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16;
  r3 = r2 >>> 0 < 8 ? 7 : r2 - 1 | 0;
  r2 = r3 >>> 1 | r3;
  r3 = r2 >>> 2 | r2;
  r2 = r3 >>> 4 | r3;
  r3 = r2 >>> 8 | r2;
  r2 = HEAP32[r1 + 16 >> 2];
  r4 = HEAP32[r1 + 24 >> 2];
  r5 = r1 + 28 | 0;
  r6 = HEAP32[r5 >> 2];
  r7 = r1 | 0;
  r8 = HEAP32[r7 >> 2];
  HEAP32[r7 >> 2] = (r3 >>> 16 | r3) + 1 | 0;
  _kh_alloc_mt(r1);
  if ((r8 | 0) == 0) {
    r9 = r1 + 40 | 0, r10 = r9 >> 2;
    r11 = HEAP32[r10];
    _mrb_free(r11, r2);
    r12 = HEAP32[r10];
    r13 = r4;
    _mrb_free(r12, r13);
    r14 = HEAP32[r10];
    r15 = r6;
    _mrb_free(r14, r15);
    return;
  } else {
    r16 = 0;
  }
  while (1) {
    if ((HEAP8[(r16 & 7) + 5327036 | 0] & HEAP8[r2 + (r16 >>> 3) | 0]) << 24 >> 24 == 0) {
      r3 = _kh_put_mt(r1, HEAP16[r4 + (r16 << 1) >> 1]);
      HEAP32[HEAP32[r5 >> 2] + (r3 << 2) >> 2] = HEAP32[r6 + (r16 << 2) >> 2];
    }
    r3 = r16 + 1 | 0;
    if ((r3 | 0) == (r8 | 0)) {
      break;
    } else {
      r16 = r3;
    }
  }
  r9 = r1 + 40 | 0, r10 = r9 >> 2;
  r11 = HEAP32[r10];
  _mrb_free(r11, r2);
  r12 = HEAP32[r10];
  r13 = r4;
  _mrb_free(r12, r13);
  r14 = HEAP32[r10];
  r15 = r6;
  _mrb_free(r14, r15);
  return;
}
_kh_resize_mt["X"] = 1;
function _kh_put_mt(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29;
  r3 = (r1 + 8 | 0) >> 2;
  if (HEAP32[r3] >>> 0 >= HEAP32[r1 + 12 >> 2] >>> 0) {
    _kh_resize_mt(r1, HEAP32[r1 >> 2] << 1);
  }
  r4 = r2 << 16 >> 16;
  r5 = HEAP32[r1 + 32 >> 2];
  r6 = r5 & (r4 << 2 ^ r4 ^ r4 >> 2);
  r4 = (r1 + 24 | 0) >> 2;
  r7 = r6 >>> 3;
  r8 = r1 + 16 | 0;
  r9 = HEAP32[r8 >> 2];
  r10 = HEAP8[r9 + r7 | 0];
  r11 = (r6 & 7) + 5327036 | 0;
  r12 = HEAP8[r11];
  L1403 : do {
    if ((r12 & r10) << 24 >> 24 == 0) {
      r13 = HEAP32[r1 + 20 >> 2];
      r14 = r1 + 36 | 0;
      r15 = r6;
      r16 = r7;
      r17 = r11;
      r18 = r12;
      r19 = r10;
      while (1) {
        if ((HEAP8[r13 + r16 | 0] & r18) << 24 >> 24 != 0) {
          r20 = r15;
          r21 = r16;
          r22 = r17;
          r23 = r18;
          r24 = r19;
          break L1403;
        }
        if (HEAP16[HEAP32[r4] + (r15 << 1) >> 1] << 16 >> 16 == r2 << 16 >> 16) {
          r20 = r15;
          r21 = r16;
          r22 = r17;
          r23 = r18;
          r24 = r19;
          break L1403;
        }
        r25 = HEAP32[r14 >> 2] + r15 & r5;
        r26 = r25 >>> 3;
        r27 = HEAP8[r9 + r26 | 0];
        r28 = (r25 & 7) + 5327036 | 0;
        r29 = HEAP8[r28];
        if ((r29 & r27) << 24 >> 24 == 0) {
          r15 = r25;
          r16 = r26;
          r17 = r28;
          r18 = r29;
          r19 = r27;
        } else {
          r20 = r25;
          r21 = r26;
          r22 = r28;
          r23 = r29;
          r24 = r27;
          break L1403;
        }
      }
    } else {
      r20 = r6;
      r21 = r7;
      r22 = r11;
      r23 = r12;
      r24 = r10;
    }
  } while (0);
  if ((r23 & r24) << 24 >> 24 != 0) {
    HEAP16[HEAP32[r4] + (r20 << 1) >> 1] = r2;
    r24 = HEAP32[r8 >> 2] + r21 | 0;
    HEAP8[r24] = HEAP8[r24] & (HEAP8[r22] ^ -1);
    r24 = r1 + 4 | 0;
    HEAP32[r24 >> 2] = HEAP32[r24 >> 2] + 1 | 0;
    HEAP32[r3] = HEAP32[r3] + 1 | 0;
    return r20;
  }
  r3 = r1 + 20 | 0;
  if ((HEAP8[HEAP32[r3 >> 2] + r21 | 0] & r23) << 24 >> 24 == 0) {
    return r20;
  }
  HEAP16[HEAP32[r4] + (r20 << 1) >> 1] = r2;
  r2 = HEAP32[r3 >> 2] + r21 | 0;
  HEAP8[r2] = HEAP8[r2] & (HEAP8[r22] ^ -1);
  r22 = r1 + 4 | 0;
  HEAP32[r22 >> 2] = HEAP32[r22 >> 2] + 1 | 0;
  return r20;
}
_kh_put_mt["X"] = 1;
function _kh_copy_mt(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r3 = _kh_init_mt(r1);
  r1 = r2 | 0;
  r4 = HEAP32[r1 >> 2];
  if ((r4 | 0) == 0) {
    return r3;
  }
  r5 = r2 + 16 | 0;
  r6 = r2 + 20 | 0;
  r7 = r2 + 24 | 0;
  r8 = r2 + 28 | 0;
  r2 = r3 + 28 | 0;
  r9 = 0;
  r10 = r4;
  while (1) {
    r4 = r9 >>> 3;
    r11 = HEAP8[(r9 & 7) + 5327036 | 0];
    do {
      if ((r11 & HEAP8[HEAP32[r5 >> 2] + r4 | 0]) << 24 >> 24 == 0) {
        if ((HEAP8[HEAP32[r6 >> 2] + r4 | 0] & r11) << 24 >> 24 != 0) {
          r12 = r10;
          break;
        }
        r13 = _kh_put_mt(r3, HEAP16[HEAP32[r7 >> 2] + (r9 << 1) >> 1]);
        HEAP32[HEAP32[r2 >> 2] + (r13 << 2) >> 2] = HEAP32[HEAP32[r8 >> 2] + (r9 << 2) >> 2];
        r12 = HEAP32[r1 >> 2];
      } else {
        r12 = r10;
      }
    } while (0);
    r11 = r9 + 1 | 0;
    if ((r11 | 0) == (r12 | 0)) {
      break;
    } else {
      r9 = r11;
      r10 = r12;
    }
  }
  return r3;
}
function _mrb_gc_mark_mt(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11;
  if ((r2 | 0) == 0) {
    return;
  }
  r3 = r2 | 0;
  r4 = HEAP32[r3 >> 2];
  if ((r4 | 0) == 0) {
    return;
  }
  r5 = r2 + 16 | 0;
  r6 = r2 + 20 | 0;
  r7 = r2 + 28 | 0;
  r2 = 0;
  r8 = r4;
  while (1) {
    r4 = r2 >>> 3;
    r9 = HEAP8[(r2 & 7) + 5327036 | 0];
    do {
      if ((r9 & HEAP8[HEAP32[r5 >> 2] + r4 | 0]) << 24 >> 24 == 0) {
        if ((HEAP8[HEAP32[r6 >> 2] + r4 | 0] & r9) << 24 >> 24 != 0) {
          r10 = r8;
          break;
        }
        r11 = HEAP32[HEAP32[r7 >> 2] + (r2 << 2) >> 2];
        if ((r11 | 0) == 0) {
          r10 = r8;
          break;
        }
        _mrb_gc_mark(r1, r11);
        r10 = HEAP32[r3 >> 2];
      } else {
        r10 = r8;
      }
    } while (0);
    r9 = r2 + 1 | 0;
    if ((r9 | 0) == (r10 | 0)) {
      break;
    } else {
      r2 = r9;
      r8 = r10;
    }
  }
  return;
}
function _mrb_gc_free_mt(r1) {
  _kh_destroy_mt(r1);
  return;
}
function _mrb_name_class(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r4;
  r6 = _mrb_intern(r1, 5315376);
  _mrb_symbol_value717(r5, r3);
  _mrb_obj_iv_set(r1, r2, r6, r5);
  STACKTOP = r4;
  return;
}
function _mrb_define_module_id(r1, r2) {
  var r3, r4, r5, r6;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r4 = r3;
  r5 = _mrb_module_new(r1);
  r6 = HEAP32[r1 + 72 >> 2];
  _mrb_obj_value718(r4, r5 | 0);
  _mrb_obj_iv_set(r1, r6, r2, r4);
  _mrb_name_class(r1, r5, r2);
  STACKTOP = r3;
  return r5;
}
function _mrb_module_new(r1) {
  var r2;
  r2 = _mrb_obj_alloc(r1, 11, HEAP32[r1 + 80 >> 2]);
  HEAP32[r2 + 16 >> 2] = _kh_init_mt(r1);
  return r2;
}
function _mrb_define_module(r1, r2) {
  return _mrb_define_module_id(r1, _mrb_intern(r1, r2));
}
function _mrb_class_outer_module(r1, r2) {
  var r3, r4, r5, r6;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r4 = r3;
  r5 = _mrb_intern(r1, 5324812);
  _mrb_obj_iv_get(r4, HEAP32[r2 + 12 >> 2], r5);
  r5 = HEAP32[r4 >> 2];
  if ((HEAP32[r4 + 4 >> 2] & 255 | r5 | 0) == 0) {
    r6 = 0;
    STACKTOP = r3;
    return r6;
  }
  r6 = r5;
  STACKTOP = r3;
  return r6;
}
function _mrb_vm_define_module(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  if ((_mrb_const_defined(r2, r3) | 0) == 0) {
    r6 = _mrb_module_new(r1);
    _setup_class(r1, r2, r6, r3);
    r7 = r6;
    STACKTOP = r4;
    return r7;
  } else {
    _mrb_const_get(r5, r1, r2, r3);
    r7 = HEAP32[r5 >> 2];
    STACKTOP = r4;
    return r7;
  }
}
function _setup_class(r1, r2, r3, r4) {
  var r5, r6;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  _mrb_name_class(r1, r3, r4);
  _mrb_obj_value718(r6, r3 | 0);
  _mrb_const_set(r1, r2, r4, r6);
  _mrb_obj_iv_set(r1, r3, _mrb_intern(r1, 5324812), r2);
  STACKTOP = r5;
  return;
}
function _mrb_define_class_id(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r4;
  r6 = _mrb_class_new(r1, r3);
  r3 = HEAP32[r1 + 72 >> 2];
  _mrb_obj_value718(r5, r6 | 0);
  _mrb_obj_iv_set(r1, r3, r2, r5);
  _mrb_name_class(r1, r6, r2);
  STACKTOP = r4;
  return r6;
}
function _mrb_class_new(r1, r2) {
  var r3, r4, r5, r6;
  if ((r2 | 0) == 0) {
    r3 = _boot_defclass(r1, 0);
    r4 = r3;
    _prepare_singleton_class(r1, r4);
    return r3;
  } else {
    _mrb_check_inheritable(r1, r2);
    r5 = _boot_defclass(r1, r2);
    r6 = r5;
    HEAP32[r6 >> 2] = HEAP32[r6 >> 2] & -522241 | HEAP32[r2 >> 2] >>> 11 << 24 >> 13;
    r3 = r5;
    r4 = r3;
    _prepare_singleton_class(r1, r4);
    return r3;
  }
}
function _mrb_define_class(r1, r2, r3) {
  return _mrb_define_class_id(r1, _mrb_intern(r1, r2), r3);
}
function _mrb_vm_define_class(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r5 = 0;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r7 = r2, r8 = r7 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r8];
  HEAP32[r2 + 4 >> 2] = HEAP32[r8 + 1];
  r7 = r3, r8 = r7 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r8];
  HEAP32[r3 + 4 >> 2] = HEAP32[r8 + 1];
  r8 = r6;
  r7 = r6 + 8;
  r9 = r6 + 16;
  r10 = r6 + 24;
  if ((_mrb_const_defined(r2, r4) | 0) == 0) {
    r11 = HEAP32[r3 + 4 >> 2] & 255;
    do {
      if ((r11 | 0) == 10) {
        r5 = 1179;
      } else if ((r11 | 0) == 0) {
        if ((HEAP32[r3 >> 2] | 0) != 0) {
          r5 = 1178;
          break;
        }
        r12 = HEAP32[r1 + 72 >> 2];
        break;
      } else {
        r5 = 1178;
      }
    } while (0);
    do {
      if (r5 == 1178) {
        r11 = _mrb_class_obj_get(r1, 5325036);
        r13 = _mrb_obj_classname(r1, r3);
        _mrb_raisef(r1, r11, 5319608, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r13, tempInt));
        r5 = 1179;
        break;
      }
    } while (0);
    if (r5 == 1179) {
      r12 = HEAP32[r3 >> 2];
    }
    r13 = _mrb_class_new(r1, r12);
    _setup_class(r1, r2, r13, r4);
    _mrb_obj_value718(r7, r12 | 0);
    _mrb_obj_value718(r9, r13 | 0);
    _mrb_funcall(r10, r1, r7, 5315792, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r9 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r9 + 4 >> 2], tempInt));
    r14 = r13;
    STACKTOP = r6;
    return r14;
  }
  _mrb_const_get(r8, r1, r2, r4);
  _mrb_check_type(r1, r8, 10);
  r2 = HEAP32[r8 >> 2];
  r8 = r2;
  r13 = HEAP32[r3 + 4 >> 2] & 255;
  do {
    if ((r13 | 0) == 0) {
      if ((HEAP32[r3 >> 2] | 0) == 0) {
        r14 = r8;
      } else {
        r5 = 1172;
        break;
      }
      STACKTOP = r6;
      return r14;
    } else if ((r13 | 0) != 10) {
      r5 = 1172;
    }
  } while (0);
  if (r5 == 1172) {
    r5 = _mrb_class_obj_get(r1, 5325036);
    r13 = _mrb_obj_classname(r1, r3);
    _mrb_raisef(r1, r5, 5319608, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r13, tempInt));
  }
  r13 = HEAP32[r2 + 20 >> 2];
  do {
    if ((r13 | 0) != 0) {
      if ((HEAP32[r3 >> 2] | 0) == (_mrb_class_real(r13) | 0)) {
        r14 = r8;
      } else {
        break;
      }
      STACKTOP = r6;
      return r14;
    }
  } while (0);
  r13 = _mrb_class_obj_get(r1, 5325036);
  r3 = _mrb_sym2name(r1, r4);
  _mrb_raisef(r1, r13, 5317560, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r3, tempInt));
  r14 = r8;
  STACKTOP = r6;
  return r14;
}
_mrb_vm_define_class["X"] = 1;
function _mrb_obj_classname(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = _mrb_class_name(r1, _mrb_obj_class(r1, r2));
  STACKTOP = r3;
  return r4;
}
function _mrb_class_get(r1, r2) {
  return _class_from_sym(r1, HEAP32[r1 + 72 >> 2], _mrb_intern(r1, r2));
}
function _class_from_sym(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r4;
  r6 = r4 + 8;
  _mrb_obj_value718(r6, r2 | 0);
  _mrb_const_get(r5, r1, r6, r3);
  if (((HEAP32[r5 + 4 >> 2] & 255) - 10 | 0) >>> 0 < 2) {
    r7 = r5;
    r8 = HEAP32[r7 >> 2];
    r9 = r8;
    STACKTOP = r4;
    return r9;
  }
  r6 = _mrb_class_obj_get(r1, 5325036);
  r2 = _mrb_sym2name(r1, r3);
  _mrb_raisef(r1, r6, 5313812, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r2, tempInt));
  r7 = r5;
  r8 = HEAP32[r7 >> 2];
  r9 = r8;
  STACKTOP = r4;
  return r9;
}
function _mrb_define_class_under(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r6 = r5;
  r7 = r5 + 8;
  r8 = _mrb_intern(r1, r3);
  if ((_mrb_const_defined_at(r1, r2, r8) | 0) == 0) {
    r3 = r2 | 0;
    if ((r4 | 0) == 0) {
      _mrb_obj_value718(r6, r3);
      r9 = _mrb_obj_classname(r1, r6);
      r6 = _mrb_sym2name(r1, r8);
      _mrb_warn(5314732, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r9, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
    }
    r6 = _mrb_class_new(r1, r4);
    _mrb_obj_value718(r7, r3);
    _setup_class(r1, r7, r6, r8);
    r7 = r6;
    STACKTOP = r5;
    return r7;
  } else {
    r6 = _class_from_sym(r1, r2, r8);
    if ((_mrb_class_real(HEAP32[r6 + 20 >> 2]) | 0) == (r4 | 0)) {
      r7 = r6;
      STACKTOP = r5;
      return r7;
    }
    r4 = _mrb_sym2name(r1, r8);
    _mrb_name_error(r1, r8, 5315116, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r4, tempInt));
    r7 = r6;
    STACKTOP = r5;
    return r7;
  }
}
function _mrb_define_method_raw(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = r2 + 16 | 0;
  r6 = HEAP32[r5 >> 2];
  if ((r6 | 0) == 0) {
    r7 = _kh_init_mt(r1);
    HEAP32[r5 >> 2] = r7;
    r8 = r7;
  } else {
    r8 = r6;
  }
  r6 = _kh_put_mt(r8, r3);
  HEAP32[HEAP32[r8 + 28 >> 2] + (r6 << 2) >> 2] = r4;
  if ((r4 | 0) == 0) {
    return;
  }
  _mrb_field_write_barrier(r1, r2, r4);
  return;
}
function _mrb_define_method_id(r1, r2, r3, r4) {
  var r5;
  r5 = _mrb_proc_new_cfunc(r1, r4);
  HEAP32[r5 + 16 >> 2] = r2;
  _mrb_define_method_raw(r1, r2, r3, r5);
  return;
}
function _mrb_define_method(r1, r2, r3, r4) {
  _mrb_define_method_id(r1, r2, _mrb_intern(r1, r3), r4);
  return;
}
function _mrb_define_method_vm(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9;
  r5 = STACKTOP;
  r6 = r4;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r4 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r2 + 16 | 0;
  r7 = HEAP32[r6 >> 2];
  if ((r7 | 0) == 0) {
    r8 = _kh_init_mt(r1);
    HEAP32[r6 >> 2] = r8;
    r9 = r8;
  } else {
    r9 = r7;
  }
  r7 = _kh_put_mt(r9, r3);
  r3 = HEAP32[r4 >> 2];
  HEAP32[HEAP32[r9 + 28 >> 2] + (r7 << 2) >> 2] = r3;
  if ((r3 | 0) == 0) {
    STACKTOP = r5;
    return;
  }
  _mrb_field_write_barrier(r1, r2, r3);
  STACKTOP = r5;
  return;
}
function _mrb_nil_value743(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_get_args(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 92 | 0;
  r6 = r5 >> 2;
  r7 = r5 + 4;
  r8 = r5 + 12;
  r9 = r5 + 20;
  r10 = r5 + 28;
  r11 = r5 + 36;
  r12 = r5 + 44;
  r13 = r5 + 52;
  r14 = r5 + 60;
  r15 = r5 + 68;
  r16 = r5 + 76;
  r17 = r5 + 84;
  r18 = (r1 + 8 | 0) >> 2;
  r19 = HEAP32[r18] + 8 | 0;
  r20 = r1 + 20 | 0;
  r21 = HEAP32[HEAP32[r20 >> 2] + 16 >> 2];
  HEAP32[r6] = r3;
  if ((r21 | 0) < 0) {
    r3 = HEAP32[HEAP32[r18] + 8 >> 2];
    r22 = HEAP32[r3 + 20 >> 2];
    r23 = HEAP32[r3 + 12 >> 2];
  } else {
    r22 = r19;
    r23 = r21;
  }
  r21 = HEAP8[r2];
  L1535 : do {
    if (r21 << 24 >> 24 == 0) {
      r24 = 0;
    } else {
      r19 = r7;
      r3 = r8;
      r25 = r9;
      r26 = r10;
      r27 = r11;
      r28 = r12;
      r29 = r13 | 0;
      r30 = r14;
      r31 = r15;
      r32 = 0;
      r33 = r22, r34 = r33 >> 2;
      r35 = 0;
      r36 = r2;
      r37 = r21;
      while (1) {
        r38 = r36 + 1 | 0;
        r39 = r37 << 24 >> 24;
        do {
          if ((r39 | 0) == 38) {
            r4 = 1269;
          } else if ((r39 | 0) == 42) {
            r40 = HEAP32[r6];
            r41 = r40 + 4 | 0;
            HEAP32[r6] = r41;
            r42 = HEAP32[r40 >> 2];
            HEAP32[r6] = r40 + 8 | 0;
            r40 = HEAP32[r41 >> 2] >> 2;
            if ((r23 | 0) <= (r35 | 0)) {
              HEAP32[r40] = 0;
              HEAP32[r42 >> 2] = 0;
              r43 = r35;
              r44 = r33;
              r45 = r32;
              break;
            }
            r41 = r23 - r35 | 0;
            HEAP32[r40] = r41;
            if ((r41 | 0) > 0) {
              HEAP32[r42 >> 2] = r33;
              r46 = HEAP32[r40];
            } else {
              r46 = r41;
            }
            r43 = r23;
            r44 = (r46 << 3) + r33 | 0;
            r45 = r32;
            break;
          } else if ((r39 | 0) == 124) {
            r43 = r35;
            r44 = r33;
            r45 = 1;
          } else {
            if ((r23 | 0) <= (r35 | 0) & (r32 | 0) == 0) {
              _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5314652);
            }
            if ((r39 | 0) == 105) {
              r41 = HEAP32[r6];
              HEAP32[r6] = r41 + 4 | 0;
              r40 = HEAP32[r41 >> 2] >> 2;
              if ((r35 | 0) >= (r23 | 0)) {
                r43 = r35;
                r44 = r33;
                r45 = r32;
                break;
              }
              r41 = HEAP32[r34 + 1] & 255;
              if ((r41 | 0) == 3) {
                HEAP32[r40] = HEAP32[r34];
              } else if ((r41 | 0) == 6) {
                r42 = HEAPF32[r34];
                if (!(r42 <= 2147483648 & r42 >= -2147483648)) {
                  _mrb_raise(r1, _mrb_class_obj_get(r1, 5320524), 5325104);
                }
                HEAP32[r40] = r42 & -1;
              } else if ((r41 | 0) == 0) {
                HEAP32[r40] = 0;
              } else {
                _mrb_convert_type(r14, r1, r33, 3, 5326212, 5323324);
                HEAP32[r40] = HEAP32[r30 >> 2];
              }
              r43 = r35 + 1 | 0;
              r44 = r33 + 8 | 0;
              r45 = r32;
              break;
            } else if ((r39 | 0) == 122) {
              r40 = HEAP32[r6];
              HEAP32[r6] = r40 + 4 | 0;
              r41 = HEAP32[r40 >> 2];
              if ((r35 | 0) >= (r23 | 0)) {
                r43 = r35;
                r44 = r33;
                r45 = r32;
                break;
              }
              _to_str(r11, r1, r33);
              r40 = HEAP32[r27 >> 2];
              r42 = r40 + 20 | 0;
              r47 = HEAP32[r42 >> 2];
              if ((_strlen(r47) | 0) == (HEAP32[r40 + 12 >> 2] | 0)) {
                r48 = r47;
              } else {
                _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5326324);
                r48 = HEAP32[r42 >> 2];
              }
              HEAP32[r41 >> 2] = r48;
              r43 = r35 + 1 | 0;
              r44 = r33 + 8 | 0;
              r45 = r32;
              break;
            } else if ((r39 | 0) == 111) {
              r41 = HEAP32[r6];
              HEAP32[r6] = r41 + 4 | 0;
              if ((r35 | 0) >= (r23 | 0)) {
                r43 = r35;
                r44 = r33;
                r45 = r32;
                break;
              }
              r42 = r33;
              r47 = HEAP32[r41 >> 2];
              r41 = r42 | 0, r40 = r41 >> 2;
              r49 = r42 + 4 | 0, r42 = r49 >> 2;
              r50 = HEAP32[r42];
              r51 = r47 | 0, r52 = r51 >> 2;
              HEAP32[r52] = HEAP32[r40];
              r53 = r47 + 4 | 0, r47 = r53 >> 2;
              HEAP32[r47] = r50;
              r43 = r35 + 1 | 0;
              r44 = r33 + 8 | 0;
              r45 = r32;
              break;
            } else if ((r39 | 0) == 115) {
              r50 = HEAP32[r6];
              r54 = r50 + 4 | 0;
              HEAP32[r6] = r54;
              r55 = HEAP32[r50 >> 2];
              HEAP32[r6] = r50 + 8 | 0;
              if ((r35 | 0) >= (r23 | 0)) {
                r43 = r35;
                r44 = r33;
                r45 = r32;
                break;
              }
              r50 = HEAP32[r54 >> 2];
              _to_str(r10, r1, r33);
              r54 = HEAP32[r26 >> 2];
              HEAP32[r55 >> 2] = HEAP32[r54 + 20 >> 2];
              HEAP32[r50 >> 2] = HEAP32[r54 + 12 >> 2];
              r43 = r35 + 1 | 0;
              r44 = r33 + 8 | 0;
              r45 = r32;
              break;
            } else if ((r39 | 0) == 83) {
              r54 = HEAP32[r6];
              HEAP32[r6] = r54 + 4 | 0;
              if ((r35 | 0) >= (r23 | 0)) {
                r43 = r35;
                r44 = r33;
                r45 = r32;
                break;
              }
              r50 = HEAP32[r54 >> 2];
              _to_str(r7, r1, r33);
              r54 = r50;
              r41 = r19 | 0, r40 = r41 >> 2;
              r49 = r19 + 4 | 0, r42 = r49 >> 2;
              r50 = HEAP32[r42];
              r51 = r54 | 0, r52 = r51 >> 2;
              HEAP32[r52] = HEAP32[r40];
              r53 = r54 + 4 | 0, r47 = r53 >> 2;
              HEAP32[r47] = r50;
              r43 = r35 + 1 | 0;
              r44 = r33 + 8 | 0;
              r45 = r32;
              break;
            } else if ((r39 | 0) == 97) {
              r50 = HEAP32[r6];
              r54 = r50 + 4 | 0;
              HEAP32[r6] = r54;
              r55 = HEAP32[r50 >> 2];
              HEAP32[r6] = r50 + 8 | 0;
              if ((r35 | 0) >= (r23 | 0)) {
                r43 = r35;
                r44 = r33;
                r45 = r32;
                break;
              }
              r50 = HEAP32[r54 >> 2];
              _to_ary(r12, r1, r33);
              r54 = HEAP32[r28 >> 2];
              HEAP32[r55 >> 2] = HEAP32[r54 + 20 >> 2];
              HEAP32[r50 >> 2] = HEAP32[r54 + 12 >> 2];
              r43 = r35 + 1 | 0;
              r44 = r33 + 8 | 0;
              r45 = r32;
              break;
            } else if ((r39 | 0) == 102) {
              r54 = HEAP32[r6];
              HEAP32[r6] = r54 + 4 | 0;
              r50 = HEAP32[r54 >> 2] >> 2;
              if ((r35 | 0) >= (r23 | 0)) {
                r43 = r35;
                r44 = r33;
                r45 = r32;
                break;
              }
              r54 = HEAP32[r34 + 1] & 255;
              if ((r54 | 0) == 3) {
                HEAPF32[r50] = HEAP32[r34] | 0;
              } else if ((r54 | 0) == 17) {
                _mrb_raise(r1, _mrb_class_obj_get(r1, 5325036), 5325920);
              } else if ((r54 | 0) == 6) {
                HEAPF32[r50] = HEAPF32[r34];
              } else {
                _mrb_convert_type(r13, r1, r33, 6, 5322660, 5320568);
                HEAPF32[r50] = HEAPF32[r29 >> 2];
              }
              r43 = r35 + 1 | 0;
              r44 = r33 + 8 | 0;
              r45 = r32;
              break;
            } else if ((r39 | 0) == 65) {
              r50 = HEAP32[r6];
              HEAP32[r6] = r50 + 4 | 0;
              if ((r35 | 0) >= (r23 | 0)) {
                r43 = r35;
                r44 = r33;
                r45 = r32;
                break;
              }
              r54 = HEAP32[r50 >> 2];
              _to_ary(r8, r1, r33);
              r50 = r54;
              r41 = r3 | 0, r40 = r41 >> 2;
              r49 = r3 + 4 | 0, r42 = r49 >> 2;
              r54 = HEAP32[r42];
              r51 = r50 | 0, r52 = r51 >> 2;
              HEAP32[r52] = HEAP32[r40];
              r53 = r50 + 4 | 0, r47 = r53 >> 2;
              HEAP32[r47] = r54;
              r43 = r35 + 1 | 0;
              r44 = r33 + 8 | 0;
              r45 = r32;
              break;
            } else if ((r39 | 0) == 72) {
              r54 = HEAP32[r6];
              HEAP32[r6] = r54 + 4 | 0;
              if ((r35 | 0) >= (r23 | 0)) {
                r43 = r35;
                r44 = r33;
                r45 = r32;
                break;
              }
              r50 = HEAP32[r54 >> 2];
              _to_hash(r9, r1, r33);
              r54 = r50;
              r41 = r25 | 0, r40 = r41 >> 2;
              r49 = r25 + 4 | 0, r42 = r49 >> 2;
              r49 = HEAP32[r42];
              r51 = r54 | 0, r52 = r51 >> 2;
              HEAP32[r52] = HEAP32[r40];
              r53 = r54 + 4 | 0, r47 = r53 >> 2;
              HEAP32[r47] = r49;
              r43 = r35 + 1 | 0;
              r44 = r33 + 8 | 0;
              r45 = r32;
              break;
            } else if ((r39 | 0) == 98) {
              r49 = HEAP32[r6];
              HEAP32[r6] = r49 + 4 | 0;
              if ((r35 | 0) >= (r23 | 0)) {
                r43 = r35;
                r44 = r33;
                r45 = r32;
                break;
              }
              HEAP32[HEAP32[r49 >> 2] >> 2] = (HEAP32[r34 + 1] & 255 | 0) != 0 & 1;
              r43 = r35 + 1 | 0;
              r44 = r33 + 8 | 0;
              r45 = r32;
              break;
            } else if ((r39 | 0) == 110) {
              r49 = HEAP32[r6];
              HEAP32[r6] = r49 + 4 | 0;
              r47 = HEAP32[r49 >> 2];
              if ((r35 | 0) >= (r23 | 0)) {
                r43 = r35;
                r44 = r33;
                r45 = r32;
                break;
              }
              r49 = r33 + 8 | 0;
              r53 = r33;
              r54 = HEAP32[r53 >> 2];
              r40 = HEAP32[r53 + 4 >> 2];
              HEAP32[r31 >> 2] = r54;
              HEAP32[r31 + 4 >> 2] = r40;
              r53 = r40 & 255;
              if ((r53 | 0) == 4) {
                HEAP16[r47 >> 1] = r54 & 65535;
              } else if ((r53 | 0) == 17) {
                _to_str(r16, r1, r15);
                HEAP16[r47 >> 1] = _mrb_intern_str(r1, r16);
              } else {
                _mrb_funcall(r17, r1, r15, 5325664, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
                r47 = _mrb_class_obj_get(r1, 5325036);
                r53 = _mrb_string_value_ptr(r1, r17);
                _mrb_raisef(r1, r47, 5323120, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r53, tempInt));
              }
              r43 = r35 + 1 | 0;
              r44 = r49;
              r45 = r32;
              break;
            } else if ((r39 | 0) == 38) {
              r4 = 1269;
              break;
            } else if ((r39 | 0) == 124) {
              r43 = r35;
              r44 = r33;
              r45 = 1;
              break;
            } else {
              _mrb_raisef(r1, _mrb_class_obj_get(r1, 5325168), 5323448, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r39, tempInt));
              r43 = r35;
              r44 = r33;
              r45 = r32;
              break;
            }
          }
        } while (0);
        if (r4 == 1269) {
          r4 = 0;
          r39 = HEAP32[r6];
          HEAP32[r6] = r39 + 4 | 0;
          r49 = HEAP32[HEAP32[r20 >> 2] + 16 >> 2];
          r53 = HEAP32[r18];
          if ((r49 | 0) < 0) {
            r56 = r53 + 16 | 0;
          } else {
            r56 = (r49 + 1 << 3) + r53 | 0;
          }
          r53 = r56;
          r49 = HEAP32[r39 >> 2];
          r39 = HEAP32[r53 + 4 >> 2];
          HEAP32[r49 >> 2] = HEAP32[r53 >> 2];
          HEAP32[r49 + 4 >> 2] = r39;
          r43 = r35;
          r44 = r33;
          r45 = r32;
        }
        r39 = HEAP8[r38];
        if (r39 << 24 >> 24 == 0) {
          r24 = r43;
          break L1535;
        } else {
          r32 = r45;
          r33 = r44, r34 = r33 >> 2;
          r35 = r43;
          r36 = r38;
          r37 = r39;
        }
      }
    }
  } while (0);
  if ((r23 | 0) <= (r24 | 0)) {
    STACKTOP = r5;
    return r24;
  }
  _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5314652);
  STACKTOP = r5;
  return r24;
}
_mrb_get_args["X"] = 1;
function _to_str(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _check_type(r1, r2, r3, 17, 5318580, 5313892);
  STACKTOP = r4;
  return;
}
function _to_ary(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _check_type(r1, r2, r3, 15, 5319044, 5313940);
  STACKTOP = r4;
  return;
}
function _to_hash(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _check_type(r1, r2, r3, 16, 5317928, 5317780);
  STACKTOP = r4;
  return;
}
function _mrb_include_module(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r4 = 0;
  if ((r3 | 0) == 0) {
    return;
  }
  r5 = (r2 | 0) == 0;
  r6 = r1 + 76 | 0;
  r7 = r2;
  r8 = r3, r3 = r8 >> 2;
  while (1) {
    L1619 : do {
      if (r5) {
        r4 = 1297;
      } else {
        r9 = r8 + 16 | 0;
        r10 = r2, r11 = r10 >> 2;
        r12 = 0;
        while (1) {
          do {
            if ((r10 | 0) == (r2 | 0)) {
              r4 = 1294;
            } else {
              if ((HEAP32[r11] & 255 | 0) == 10) {
                r13 = 1;
                break;
              } else {
                r4 = 1294;
                break;
              }
            }
          } while (0);
          if (r4 == 1294) {
            r4 = 0;
            if ((HEAP32[r11 + 4] | 0) == (HEAP32[r9 >> 2] | 0)) {
              break;
            } else {
              r13 = r12;
            }
          }
          r14 = HEAP32[r11 + 5];
          if ((r14 | 0) == 0) {
            r4 = 1297;
            break L1619;
          } else {
            r10 = r14, r11 = r10 >> 2;
            r12 = r13;
          }
        }
        r15 = (HEAP32[r11] & 255 | 0) == 12 & (r12 | 0) == 0 ? r10 : r7;
        break;
      }
    } while (0);
    if (r4 == 1297) {
      r4 = 0;
      r9 = _mrb_obj_alloc(r1, 12, HEAP32[r6 >> 2]), r14 = r9 >> 2;
      r16 = r9;
      if ((HEAP32[r3] & 255 | 0) == 12) {
        HEAP32[r14 + 1] = HEAP32[r3 + 1];
      } else {
        HEAP32[r14 + 1] = r8;
      }
      HEAP32[r14 + 4] = HEAP32[r3 + 4];
      HEAP32[r14 + 3] = HEAP32[r3 + 3];
      r17 = r7 + 20 | 0;
      HEAP32[r14 + 5] = HEAP32[r17 >> 2];
      HEAP32[r17 >> 2] = r16;
      _mrb_field_write_barrier(r1, r7, r9);
      r15 = r16;
    }
    r16 = HEAP32[r3 + 5];
    if ((r16 | 0) == 0) {
      break;
    } else {
      r7 = r15;
      r8 = r16, r3 = r8 >> 2;
    }
  }
  return;
}
_mrb_include_module["X"] = 1;
function _mrb_mod_module_eval(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4 + 8;
  if ((_mrb_get_args(r2, 5314200, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r4, HEAP32[tempInt + 4 >> 2] = r5, tempInt)) | 0) == 1) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5326528), 5322432);
  }
  _mrb_yield_internal(r1, r2, r5, 0, 0, r3, HEAP32[r3 >> 2]);
  STACKTOP = r4;
  return;
}
function _mrb_singleton_class(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = HEAP32[r3 + 4 >> 2] & 255;
  if ((r5 | 0) == 2) {
    _mrb_obj_value718(r1, HEAP32[r2 + 108 >> 2] | 0);
    STACKTOP = r4;
    return;
  } else if ((r5 | 0) == 4 | (r5 | 0) == 3 | (r5 | 0) == 6) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5322172);
    _mrb_nil_value743(r1);
    STACKTOP = r4;
    return;
  } else if ((r5 | 0) == 0) {
    if ((HEAP32[r3 >> 2] | 0) == 0) {
      _mrb_obj_value718(r1, HEAP32[r2 + 116 >> 2] | 0);
      STACKTOP = r4;
      return;
    } else {
      _mrb_obj_value718(r1, HEAP32[r2 + 112 >> 2] | 0);
      STACKTOP = r4;
      return;
    }
  } else if ((r5 | 0) == 8 | (r5 | 0) == 7) {
    _mrb_obj_value718(r1, HEAP32[r2 + 72 >> 2] | 0);
    STACKTOP = r4;
    return;
  } else {
    r5 = HEAP32[r3 >> 2];
    _prepare_singleton_class(r2, r5);
    _mrb_obj_value718(r1, HEAP32[r5 + 4 >> 2] | 0);
    STACKTOP = r4;
    return;
  }
}
function _prepare_singleton_class(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r4 = r3;
  r5 = (r2 + 4 | 0) >> 2;
  if ((HEAP32[HEAP32[r5] >> 2] & 255 | 0) == 13) {
    STACKTOP = r3;
    return;
  }
  r6 = r1 + 76 | 0;
  r7 = _mrb_obj_alloc(r1, 13, HEAP32[r6 >> 2]), r8 = r7 >> 2;
  r9 = r7;
  HEAP32[r8 + 4] = 0;
  HEAP32[r8 + 3] = 0;
  r10 = HEAP32[r2 >> 2] & 255;
  do {
    if ((r10 | 0) == 10) {
      r11 = HEAP32[r2 + 20 >> 2];
      if ((r11 | 0) == 0) {
        HEAP32[r8 + 5] = HEAP32[r6 >> 2];
        break;
      } else {
        HEAP32[r8 + 5] = HEAP32[r11 + 4 >> 2];
        break;
      }
    } else if ((r10 | 0) == 13) {
      r11 = r2 + 20 | 0;
      _prepare_singleton_class(r1, HEAP32[r11 >> 2]);
      HEAP32[r8 + 5] = HEAP32[HEAP32[r11 >> 2] + 4 >> 2];
    } else {
      HEAP32[r8 + 5] = HEAP32[r5];
    }
  } while (0);
  HEAP32[r5] = r9;
  _mrb_field_write_barrier(r1, r2, r7);
  _mrb_field_write_barrier(r1, r7, r2);
  r9 = _mrb_intern(r1, 5323368);
  _mrb_obj_value718(r4, r2 | 0);
  _mrb_obj_iv_set(r1, r7, r9, r4);
  STACKTOP = r3;
  return;
}
_prepare_singleton_class["X"] = 1;
function _mrb_define_singleton_method(r1, r2, r3, r4) {
  _prepare_singleton_class(r1, r2);
  _mrb_define_method_id(r1, HEAP32[r2 + 4 >> 2], _mrb_intern(r1, r3), r4);
  return;
}
function _mrb_define_class_method(r1, r2, r3, r4) {
  _mrb_define_singleton_method(r1, r2, r3, r4);
  return;
}
function _mrb_define_module_function(r1, r2, r3, r4) {
  _mrb_define_class_method(r1, r2, r3, r4);
  _mrb_define_method(r1, r2, r3, r4);
  return;
}
function _mrb_method_search_vm(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r3 = 0;
  r4 = HEAP32[r1 >> 2];
  if ((r4 | 0) == 0) {
    r5 = 0;
    return r5;
  } else {
    r6 = r4;
  }
  while (1) {
    r7 = HEAP32[r6 + 16 >> 2];
    if ((r7 | 0) != 0) {
      r8 = _kh_get_mt(r7, r2);
      if ((r8 | 0) != (HEAP32[r7 >> 2] | 0)) {
        break;
      }
    }
    r4 = HEAP32[r6 + 20 >> 2];
    if ((r4 | 0) == 0) {
      r5 = 0;
      r3 = 1347;
      break;
    } else {
      r6 = r4;
    }
  }
  if (r3 == 1347) {
    return r5;
  }
  r3 = HEAP32[HEAP32[r7 + 28 >> 2] + (r8 << 2) >> 2];
  if ((r3 | 0) == 0) {
    r5 = 0;
    return r5;
  }
  HEAP32[r1 >> 2] = r6;
  r5 = r3;
  return r5;
}
function _mrb_method_search(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  r5 = r4;
  r6 = r4 + 4;
  r7 = r4 + 12;
  r8 = r4 + 20;
  r9 = r4 + 28;
  HEAP32[r5 >> 2] = r2;
  r2 = _mrb_method_search_vm(r5, r3);
  if ((r2 | 0) != 0) {
    STACKTOP = r4;
    return r2;
  }
  r10 = HEAP32[r5 >> 2] | 0;
  _mrb_obj_value718(r7, r10);
  _mrb_funcall(r6, r1, r7, 5325664, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  r7 = HEAP32[r6 >> 2];
  if ((HEAP32[r7 + 12 >> 2] | 0) > 64) {
    _mrb_obj_value718(r8, r10);
    _mrb_any_to_s(r9, r1, r8);
    r8 = r9;
    r9 = r6;
    r6 = HEAP32[r8 >> 2];
    r10 = HEAP32[r8 + 4 >> 2];
    HEAP32[r9 >> 2] = r6;
    HEAP32[r9 + 4 >> 2] = r10;
    r11 = r6;
  } else {
    r11 = r7;
  }
  r7 = _mrb_class_obj_get(r1, 5323928);
  r6 = _mrb_sym2name(r1, r3);
  r3 = HEAP32[r11 + 20 >> 2];
  _mrb_raisef(r1, r7, 5321608, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r6, HEAP32[tempInt + 4 >> 2] = r3, tempInt));
  STACKTOP = r4;
  return r2;
}
function _mrb_obj_call_init(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_funcall_argv(r4, r1, r2, HEAP16[r1 + 68 >> 1], 1, r3);
  STACKTOP = r4;
  return;
}
function _mrb_class_new_instance(r1, r2, r3, r4) {
  var r5, r6, r7;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r5;
  r7 = _mrb_obj_alloc(r2, HEAP32[r4 >> 2] & 255, r4);
  HEAP32[r7 + 20 >> 2] = r4;
  _mrb_obj_value718(r6, r7 | 0);
  r7 = r6;
  _mrb_obj_call_init(r2, r6, r3);
  r3 = r1;
  r1 = HEAP32[r7 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r5;
  return;
}
function _mrb_class750(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[r2 + 4 >> 2] & 255;
  do {
    if ((r4 | 0) == 2) {
      r5 = r1 + 108 | 0;
    } else if ((r4 | 0) == 3) {
      r5 = r1 + 104 | 0;
    } else if ((r4 | 0) == 0) {
      if ((HEAP32[r2 >> 2] | 0) == 0) {
        r5 = r1 + 116 | 0;
        break;
      } else {
        r5 = r1 + 112 | 0;
        break;
      }
    } else if ((r4 | 0) == 4) {
      r5 = r1 + 120 | 0;
    } else if ((r4 | 0) == 8) {
      r5 = r1 + 72 | 0;
    } else if ((r4 | 0) == 6) {
      r5 = r1 + 100 | 0;
    } else {
      r5 = HEAP32[r2 >> 2] + 4 | 0;
    }
  } while (0);
  STACKTOP = r3;
  return HEAP32[r5 >> 2];
}
function _mrb_true_value757(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 2;
  return;
}
function _mrb_false_value758(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_instance_new(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 16;
  r8 = r4 + 20;
  r9 = HEAP32[r3 >> 2];
  r3 = HEAP32[r9 >> 2] >>> 11 & 255;
  _mrb_obj_value718(r5, _mrb_obj_alloc(r2, (r3 | 0) == 0 ? 9 : r3, r9) | 0);
  r9 = r5;
  _mrb_get_args(r2, 5320328, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r7, HEAP32[tempInt + 4 >> 2] = r8, HEAP32[tempInt + 8 >> 2] = r6, tempInt));
  _mrb_funcall_with_block(r4 + 24, r2, r5, HEAP16[r2 + 68 >> 1], HEAP32[r8 >> 2], HEAP32[r7 >> 2], r6);
  r6 = r1;
  r1 = HEAP32[r9 + 4 >> 2];
  HEAP32[r6 >> 2] = HEAP32[r9 >> 2];
  HEAP32[r6 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_class_new_class(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r3 = r4 + 8;
  if ((_mrb_get_args(r2, 5320204, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt)) | 0) == 0) {
    _mrb_obj_value718(r3, HEAP32[r2 + 72 >> 2] | 0);
    r6 = r3;
    r3 = r5;
    r7 = HEAP32[r6 >> 2];
    r8 = HEAP32[r6 + 4 >> 2];
    HEAP32[r3 >> 2] = r7;
    HEAP32[r3 + 4 >> 2] = r8;
    r8 = r7;
    r7 = r8;
    r3 = _mrb_class_new(r2, r7);
    r6 = r3 | 0;
    _mrb_obj_value718(r1, r6);
    STACKTOP = r4;
    return;
  } else {
    r8 = HEAP32[r5 >> 2];
    r7 = r8;
    r3 = _mrb_class_new(r2, r7);
    r6 = r3 | 0;
    _mrb_obj_value718(r1, r6);
    STACKTOP = r4;
    return;
  }
}
function _mrb_class_superclass(r1, r2, r3) {
  var r4, r5, r6;
  r2 = 0;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = HEAP32[r3 >> 2] + 20 | 0;
  while (1) {
    r6 = HEAP32[r5 >> 2];
    if ((r6 | 0) == 0) {
      r2 = 1380;
      break;
    }
    if ((HEAP32[r6 >> 2] & 255 | 0) == 12) {
      r5 = r6 + 20 | 0;
    } else {
      r2 = 1381;
      break;
    }
  }
  if (r2 == 1381) {
    _mrb_obj_value718(r1, r6 | 0);
    STACKTOP = r4;
    return;
  } else if (r2 == 1380) {
    _mrb_nil_value743(r1);
    STACKTOP = r4;
    return;
  }
}
function _mrb_obj_respond_to(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = 0;
  if ((r1 | 0) == 0) {
    r4 = 0;
    return r4;
  } else {
    r5 = r1;
  }
  while (1) {
    r6 = HEAP32[r5 + 16 >> 2];
    if ((r6 | 0) != 0) {
      r7 = _kh_get_mt(r6, r2);
      if ((r7 | 0) != (HEAP32[r6 >> 2] | 0)) {
        break;
      }
    }
    r1 = HEAP32[r5 + 20 >> 2];
    if ((r1 | 0) == 0) {
      r4 = 0;
      r3 = 1391;
      break;
    } else {
      r5 = r1;
    }
  }
  if (r3 == 1391) {
    return r4;
  }
  r4 = (HEAP32[HEAP32[r6 + 28 >> 2] + (r7 << 2) >> 2] | 0) != 0 & 1;
  return r4;
}
function _mrb_respond_to(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = _mrb_obj_respond_to(_mrb_class750(r1, r2), r3);
  STACKTOP = r4;
  return r5;
}
function _mrb_class_path(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 44 | 0;
  r6 = r5;
  r7 = r5 + 8;
  r8 = r5 + 12;
  r9 = r5 + 20;
  r10 = r5 + 28;
  r11 = r5 + 36;
  r12 = r3;
  r13 = _mrb_intern(r2, 5320924);
  _mrb_obj_iv_get(r8, HEAP32[r3 + 12 >> 2], r13);
  r13 = r8;
  r8 = r6 >> 2;
  r14 = HEAP32[r13 >> 2];
  r15 = HEAP32[r13 + 4 >> 2];
  HEAP32[r8] = r14;
  HEAP32[r8 + 1] = r15;
  if ((r14 & -1 | 0) == 0 & (r15 & 255 | 0) == 0) {
    r13 = _mrb_class_outer_module(r2, r3);
    r16 = _mrb_class_sym(r2, r3, r13);
    if (r16 << 16 >> 16 == 0) {
      _mrb_nil_value743(r1);
      STACKTOP = r5;
      return;
    }
    do {
      if ((r13 | 0) == 0) {
        r4 = 1401;
      } else {
        if ((r13 | 0) == (HEAP32[r2 + 72 >> 2] | 0)) {
          r4 = 1401;
          break;
        }
        _mrb_class_path(r9, r2, r13);
        _mrb_str_new(r10, r2, 5320684, 2);
        _mrb_str_plus(r6, r2, r9, r10);
        _mrb_str_new(r11, r2, _mrb_sym2name_len(HEAP32[r2 + 596 >> 2], r16, r7), HEAP32[r7 >> 2]);
        _mrb_str_concat(r2, r6, r11);
        break;
      }
    } while (0);
    if (r4 == 1401) {
      _mrb_str_new(r6, r2, _mrb_sym2name_len(HEAP32[r2 + 596 >> 2], r16, r7), HEAP32[r7 >> 2]);
    }
    _mrb_obj_iv_set(r2, r12, _mrb_intern(r2, 5320924), r6);
    r17 = HEAP32[r8 + 1];
    r18 = HEAP32[r8];
  } else {
    r17 = r15;
    r18 = r14;
  }
  r14 = r1;
  HEAP32[r14 >> 2] = r18;
  HEAP32[r14 + 4 >> 2] = r17;
  STACKTOP = r5;
  return;
}
_mrb_class_path["X"] = 1;
function _mrb_class_name(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  r4 = r3, r5 = r4 >> 2;
  r6 = r3 + 8;
  r7 = r3 + 40;
  _mrb_class_path(r4, r1, r2);
  do {
    if ((HEAP32[r5 + 1] & 255 | 0) == 0) {
      r8 = HEAP32[r5];
      if ((r8 | 0) != 0) {
        r9 = r8;
        break;
      }
      r8 = r6 | 0;
      _snprintf(r8, 32, 5320408, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r2, tempInt));
      _mrb_str_new_cstr(r7, r1, r8);
      r8 = r7;
      r10 = r4;
      r11 = HEAP32[r8 >> 2];
      r12 = HEAP32[r8 + 4 >> 2];
      HEAP32[r10 >> 2] = r11;
      HEAP32[r10 + 4 >> 2] = r12;
      r9 = r11;
    } else {
      r9 = HEAP32[r5];
    }
  } while (0);
  STACKTOP = r3;
  return HEAP32[r9 + 20 >> 2];
}
function _mrb_obj_class(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = _mrb_class_real(_mrb_class750(r1, r2));
  STACKTOP = r3;
  return r4;
}
function _mrb_check_inheritable(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r4 = r3;
  r5 = r2;
  r6 = HEAP32[r5 >> 2];
  if ((r6 & 255 | 0) == 10) {
    r7 = r6;
  } else {
    r6 = _mrb_class_obj_get(r1, 5325036);
    _mrb_obj_value718(r4, r2 | 0);
    r8 = _mrb_obj_classname(r1, r4);
    _mrb_raisef(r1, r6, 5319608, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r8, tempInt));
    r7 = HEAP32[r5 >> 2];
  }
  if ((r7 & 255 | 0) == 13) {
    _mrb_raise(r1, _mrb_class_obj_get(r1, 5325036), 5320224);
  }
  if ((HEAP32[r1 + 76 >> 2] | 0) != (r2 | 0)) {
    STACKTOP = r3;
    return;
  }
  _mrb_raise(r1, _mrb_class_obj_get(r1, 5325036), 5320056);
  STACKTOP = r3;
  return;
}
function _boot_defclass(r1, r2) {
  var r3, r4;
  r3 = _mrb_obj_alloc(r1, 10, HEAP32[r1 + 76 >> 2]);
  if ((r2 | 0) == 0) {
    r4 = HEAP32[r1 + 72 >> 2];
  } else {
    r4 = r2;
  }
  HEAP32[r3 + 20 >> 2] = r4;
  _mrb_field_write_barrier(r1, r3, r2);
  HEAP32[r3 + 16 >> 2] = _kh_init_mt(r1);
  return r3;
}
function _mrb_alias_method(r1, r2, r3, r4) {
  var r5, r6;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r5;
  _mrb_obj_value718(r6, _mrb_method_search(r1, r2, r4) | 0);
  _mrb_define_method_vm(r1, r2, r3, r6);
  STACKTOP = r5;
  return;
}
function _mrb_define_alias(r1, r2) {
  _mrb_alias_method(r1, r2, _mrb_intern(r1, 5325416), _mrb_intern(r1, 5325664));
  return;
}
function _mrb_mod_alias(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = HEAP32[r3 >> 2];
  _mrb_get_args(r2, 5320556, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  _mrb_alias_method(r2, r7, HEAP16[r5 >> 1], HEAP16[r6 >> 1]);
  _mrb_nil_value743(r1);
  STACKTOP = r4;
  return;
}
function _mrb_undef_method(r1, r2, r3) {
  _undef_method(r1, r2, _mrb_intern(r1, r3));
  return;
}
function _undef_method(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r4;
  HEAP32[r5 + 4 >> 2] = 14;
  HEAP32[r5 >> 2] = 0;
  _mrb_define_method_vm(r1, r2, r3, r5);
  STACKTOP = r4;
  return;
}
function _mrb_undef_class_method(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r4 = r3;
  r5 = r3 + 8;
  _mrb_obj_value718(r4, r2 | 0);
  _mrb_singleton_class(r5, r1, r4);
  _mrb_undef_method(r1, HEAP32[r5 >> 2], 5325432);
  STACKTOP = r3;
  return;
}
function _mrb_mod_undef(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4, r6 = r5 >> 2;
  r7 = r4 + 4, r8 = r7 >> 2;
  r9 = HEAP32[r3 >> 2];
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r7, HEAP32[tempInt + 4 >> 2] = r5, tempInt));
  r5 = HEAP32[r6];
  HEAP32[r6] = r5 - 1 | 0;
  if ((r5 | 0) == 0) {
    _mrb_nil_value743(r1);
    STACKTOP = r4;
    return;
  }
  r5 = HEAP32[r8];
  while (1) {
    _undef_method(r2, r9, HEAP16[r5 >> 1]);
    r7 = HEAP32[r8] + 8 | 0;
    HEAP32[r8] = r7;
    r3 = HEAP32[r6];
    HEAP32[r6] = r3 - 1 | 0;
    if ((r3 | 0) == 0) {
      break;
    } else {
      r5 = r7;
    }
  }
  _mrb_nil_value743(r1);
  STACKTOP = r4;
  return;
}
function _mrb_mod_remove_cvar(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4, r6 = r5 >> 1;
  r7 = r4 + 4;
  _mrb_get_args(r2, 5325872, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _check_cv_name(r2, HEAP16[r6]);
  _mrb_iv_remove(r7, r3, HEAP16[r6]);
  r5 = HEAP32[r7 + 4 >> 2];
  if ((r5 & 255 | 0) != 5) {
    HEAPF32[r1 >> 2] = HEAPF32[r7 >> 2];
    HEAP32[r1 + 4 >> 2] = r5;
    STACKTOP = r4;
    return;
  }
  if ((_mrb_cv_defined(r3, HEAP16[r6]) | 0) == 0) {
    r8 = HEAP32[r3 >> 2];
  } else {
    r5 = HEAP16[r6];
    r7 = _mrb_sym2name(r2, r5);
    r9 = HEAP32[r3 >> 2];
    r3 = _mrb_class_name(r2, r9);
    _mrb_name_error(r2, r5, 5319312, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r7, HEAP32[tempInt + 4 >> 2] = r3, tempInt));
    r8 = r9;
  }
  r9 = HEAP16[r6];
  r6 = _mrb_sym2name(r2, r9);
  r3 = _mrb_class_name(r2, r8);
  _mrb_name_error(r2, r9, 5319112, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r6, HEAP32[tempInt + 4 >> 2] = r3, tempInt));
  _mrb_nil_value743(r1);
  STACKTOP = r4;
  return;
}
function _check_cv_name(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  r5 = _mrb_sym2name_len(HEAP32[r1 + 596 >> 2], r2, r4);
  do {
    if ((HEAP32[r4 >> 2] | 0) >= 3) {
      if (HEAP8[r5] << 24 >> 24 != 64) {
        break;
      }
      if (HEAP8[r5 + 1 | 0] << 24 >> 24 != 64) {
        break;
      }
      STACKTOP = r3;
      return;
    }
  } while (0);
  _mrb_name_error(r1, r2, 5314024, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  STACKTOP = r3;
  return;
}
function _mrb_mod_remove_method(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4, r6 = r5 >> 2;
  r7 = r4 + 4, r8 = r7 >> 2;
  r9 = HEAP32[r3 >> 2];
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r7, HEAP32[tempInt + 4 >> 2] = r5, tempInt));
  r5 = HEAP32[r6];
  HEAP32[r6] = r5 - 1 | 0;
  L1810 : do {
    if ((r5 | 0) != 0) {
      r7 = HEAP32[r8];
      while (1) {
        _remove_method(r2, r9, HEAP16[r7 >> 1]);
        r10 = HEAP32[r8] + 8 | 0;
        HEAP32[r8] = r10;
        r11 = HEAP32[r6];
        HEAP32[r6] = r11 - 1 | 0;
        if ((r11 | 0) == 0) {
          break L1810;
        } else {
          r7 = r10;
        }
      }
    }
  } while (0);
  r6 = r3;
  r3 = r1;
  r1 = HEAP32[r6 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _remove_method(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  r5 = HEAP32[r2 + 16 >> 2];
  do {
    if ((r5 | 0) != 0) {
      r6 = _kh_get_mt(r5, r3);
      if ((r6 | 0) == (HEAP32[r5 >> 2] | 0)) {
        break;
      }
      _kh_del_mt(r5, r6);
      STACKTOP = r4;
      return;
    }
  } while (0);
  r5 = _mrb_sym2name(r1, r3);
  r6 = _mrb_class_name(r1, r2);
  _mrb_name_error(r1, r3, 5314244, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  STACKTOP = r4;
  return;
}
function _mrb_mod_const_defined(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5325872, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _check_const_name(r2, HEAP16[r5 >> 1]);
  if ((_mrb_const_defined(r3, HEAP16[r5 >> 1]) | 0) == 0) {
    _mrb_false_value758(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value757(r1);
    STACKTOP = r4;
    return;
  }
}
function _check_const_name(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  r5 = _mrb_sym2name_len(HEAP32[r1 + 596 >> 2], r2, r4);
  do {
    if ((HEAP32[r4 >> 2] | 0) >= 1) {
      if ((_isupper(HEAPU8[r5]) | 0) == 0) {
        break;
      }
      STACKTOP = r3;
      return;
    }
  } while (0);
  _mrb_name_error(r1, r2, 5314276, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  STACKTOP = r3;
  return;
}
function _mrb_mod_const_get(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5325872, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _check_const_name(r2, HEAP16[r5 >> 1]);
  _mrb_const_get(r1, r2, r3, HEAP16[r5 >> 1]);
  STACKTOP = r4;
  return;
}
function _mrb_mod_const_set(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4;
  _mrb_get_args(r2, 5325768, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  _check_const_name(r2, HEAP16[r5 >> 1]);
  _mrb_const_set(r2, r3, HEAP16[r5 >> 1], r6);
  r5 = r6;
  r6 = r1;
  r1 = HEAP32[r5 + 4 >> 2];
  HEAP32[r6 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r6 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_mod_remove_const(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4, r6 = r5 >> 1;
  r7 = r4 + 4;
  _mrb_get_args(r2, 5325872, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _check_const_name(r2, HEAP16[r6]);
  _mrb_iv_remove(r7, r3, HEAP16[r6]);
  r3 = HEAPF32[r7 >> 2];
  r5 = HEAP32[r7 + 4 >> 2];
  if ((r5 & 255 | 0) == 5) {
    r7 = HEAP16[r6];
    r6 = _mrb_sym2name(r2, r7);
    _mrb_name_error(r2, r7, 5318684, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r6, tempInt));
  }
  HEAPF32[r1 >> 2] = r3;
  HEAP32[r1 + 4 >> 2] = r5;
  STACKTOP = r4;
  return;
}
function _mrb_init_class(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  r3 = r2;
  r4 = r2 + 8;
  r5 = r2 + 16;
  r6 = r2 + 24;
  r7 = r2 + 32;
  r8 = _boot_defclass(r1, 0);
  r9 = _boot_defclass(r1, r8);
  HEAP32[r1 + 72 >> 2] = r9;
  r10 = _boot_defclass(r1, r9);
  HEAP32[r1 + 80 >> 2] = r10;
  r11 = _boot_defclass(r1, r10);
  HEAP32[r1 + 76 >> 2] = r11;
  HEAP32[r11 + 4 >> 2] = r11;
  HEAP32[r10 + 4 >> 2] = r11;
  HEAP32[r9 + 4 >> 2] = r11;
  HEAP32[r8 + 4 >> 2] = r11;
  _prepare_singleton_class(r1, r8);
  _prepare_singleton_class(r1, r9);
  _prepare_singleton_class(r1, r10);
  _prepare_singleton_class(r1, r11);
  r12 = r8 | 0;
  _mrb_obj_value718(r3, r12);
  _mrb_define_const(r1, r8, 5318412, r3);
  _mrb_obj_value718(r4, r12);
  _mrb_define_const(r1, r9, 5318412, r4);
  _mrb_obj_value718(r5, r9 | 0);
  _mrb_define_const(r1, r9, 5319976, r5);
  _mrb_obj_value718(r6, r10 | 0);
  _mrb_define_const(r1, r9, 5320156, r6);
  _mrb_obj_value718(r7, r11 | 0);
  _mrb_define_const(r1, r9, 5319816, r7);
  _mrb_name_class(r1, r8, _mrb_intern(r1, 5318412));
  _mrb_name_class(r1, r9, _mrb_intern(r1, 5319976));
  _mrb_name_class(r1, r10, _mrb_intern(r1, 5320156));
  _mrb_name_class(r1, r11, _mrb_intern(r1, 5319816));
  _mrb_undef_method(r1, r10, 5325432);
  r9 = r11;
  HEAP32[r9 >> 2] = HEAP32[r9 >> 2] & -522241 | 20480;
  _mrb_define_method(r1, r8, 5323508, 160);
  _mrb_define_method(r1, r8, 5317384, 66);
  _mrb_define_method(r1, r8, 5317196, 96);
  _mrb_define_class_method(r1, r11, 5325432, 12);
  _mrb_define_method(r1, r11, 5316940, 388);
  _mrb_define_method(r1, r11, 5325432, 636);
  _mrb_define_method(r1, r11, 5315792, 160);
  _mrb_define_method(r1, r10, 5316712, 432);
  _mrb_define_method(r1, r10, 5316376, 294);
  _mrb_define_method(r1, r10, 5316152, 544);
  _mrb_define_method(r1, r10, 5315224, 342);
  _mrb_define_method(r1, r10, 5315184, 160);
  _mrb_define_method(r1, r10, 5315852, 150);
  _mrb_define_method(r1, r10, 5324568, 398);
  _mrb_define_method(r1, r10, 5315720, 212);
  _mrb_define_method(r1, r10, 5315660, 134);
  _mrb_define_method(r1, r10, 5315592, 160);
  _mrb_define_method(r1, r10, 5315564, 278);
  _mrb_define_method(r1, r10, 5315388, 596);
  _mrb_define_method(r1, r10, 5315316, 396);
  _mrb_define_method(r1, r10, 5315240, 134);
  _mrb_define_method(r1, r10, 5315196, 30);
  _mrb_define_method(r1, r10, 5315164, 288);
  _mrb_define_method(r1, r10, 5325416, 48);
  _mrb_define_method(r1, r10, 5325664, 48);
  _mrb_define_method(r1, r10, 5325796, 172);
  _mrb_define_method(r1, r10, 5315056, 634);
  _mrb_define_method(r1, r10, 5325576, 2);
  _mrb_define_method(r1, r10, 5315004, 264);
  _mrb_define_method(r1, r10, 5314904, 352);
  _mrb_define_method(r1, r10, 5314880, 114);
  _mrb_define_method(r1, r10, 5314828, 546);
  _mrb_define_method(r1, r10, 5314812, 54);
  _mrb_define_method(r1, r10, 5314776, 622);
  _mrb_define_method(r1, r10, 5325704, 62);
  _mrb_undef_method(r1, r11, 5315720);
  _mrb_undef_method(r1, r11, 5315224);
  STACKTOP = r2;
  return;
}
_mrb_init_class["X"] = 1;
function _mrb_bob_init(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  _mrb_nil_value743(r1);
  STACKTOP = r2;
  return;
}
function _mrb_bob_not(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  if ((HEAP32[r3 + 4 >> 2] & 255 | 0) == 0) {
    _mrb_true_value757(r1);
    STACKTOP = r2;
    return;
  } else {
    _mrb_false_value758(r1);
    STACKTOP = r2;
    return;
  }
}
function _mrb_bob_missing(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 16;
  r7 = r4 + 24;
  _mrb_get_args(r2, 5318132, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r4 + 8, HEAP32[tempInt + 8 >> 2] = r4 + 12, tempInt));
  if ((HEAP32[r5 + 4 >> 2] & 255 | 0) != 4) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5314372);
  }
  _mrb_funcall(r6, r2, r3, 5325664, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  r8 = HEAP32[r6 >> 2];
  if ((HEAP32[r8 + 12 >> 2] | 0) > 64) {
    _mrb_any_to_s(r7, r2, r3);
    r9 = HEAP32[r7 >> 2];
  } else {
    r9 = r8;
  }
  r8 = _mrb_class_obj_get(r2, 5314352);
  r7 = _mrb_sym2name(r2, HEAP16[r5 >> 1]);
  r5 = HEAP32[r9 + 20 >> 2];
  _mrb_raisef(r2, r8, 5314320, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r7, HEAP32[tempInt + 4 >> 2] = r5, tempInt));
  _mrb_nil_value743(r1);
  STACKTOP = r4;
  return;
}
function _mrb_mod_cvar_defined(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5325872, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _check_cv_name(r2, HEAP16[r5 >> 1]);
  if ((_mrb_cv_defined(r3, HEAP16[r5 >> 1]) | 0) == 0) {
    _mrb_false_value758(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value757(r1);
    STACKTOP = r4;
    return;
  }
}
function _mrb_mod_cvar_get(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5325872, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _check_cv_name(r2, HEAP16[r5 >> 1]);
  _mrb_cv_get(r1, r2, r3, HEAP16[r5 >> 1]);
  STACKTOP = r4;
  return;
}
function _mrb_mod_cvar_set(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  _mrb_get_args(r2, 5325768, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r6, HEAP32[tempInt + 4 >> 2] = r5, tempInt));
  _check_cv_name(r2, HEAP16[r6 >> 1]);
  _mrb_cv_set(r2, r3, HEAP16[r6 >> 1], r5);
  r6 = r5;
  r5 = r1;
  r1 = HEAP32[r6 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r5 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_mod_extend_object(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  _mrb_check_type(r2, r3, 11);
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_singleton_class(r6, r2, r5);
  _mrb_include_module(r2, HEAP32[r6 >> 2], HEAP32[r3 >> 2]);
  r6 = r3;
  r3 = r1;
  r1 = HEAP32[r6 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_mod_include(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4, r6 = r5 >> 2;
  r7 = r4 + 4, r8 = r7 >> 2;
  r9 = r4 + 8;
  r10 = r4 + 16;
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r7, tempInt));
  r7 = HEAP32[r8];
  L1865 : do {
    if ((r7 | 0) > 0) {
      r5 = 0;
      while (1) {
        _mrb_check_type(r2, (r5 << 3) + HEAP32[r6] | 0, 11);
        r11 = r5 + 1 | 0;
        r12 = HEAP32[r8];
        if ((r11 | 0) < (r12 | 0)) {
          r5 = r11;
        } else {
          r13 = r12;
          break L1865;
        }
      }
    } else {
      r13 = r7;
    }
  } while (0);
  r7 = r13 - 1 | 0;
  HEAP32[r8] = r7;
  if ((r13 | 0) == 0) {
    r14 = r3;
    r15 = r1;
    r16 = r14 | 0;
    r17 = HEAP32[r16 >> 2];
    r18 = r14 + 4 | 0;
    r19 = HEAP32[r18 >> 2];
    r20 = r15 | 0;
    HEAP32[r20 >> 2] = r17;
    r21 = r15 + 4 | 0;
    HEAP32[r21 >> 2] = r19;
    STACKTOP = r4;
    return;
  } else {
    r22 = r7;
  }
  while (1) {
    _mrb_funcall(r9, r2, (r22 << 3) + HEAP32[r6] | 0, 5315720, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r3 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r3 + 4 >> 2], tempInt));
    _mrb_funcall(r10, r2, (HEAP32[r8] << 3) + HEAP32[r6] | 0, 5315592, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r3 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r3 + 4 >> 2], tempInt));
    r7 = HEAP32[r8];
    r13 = r7 - 1 | 0;
    HEAP32[r8] = r13;
    if ((r7 | 0) == 0) {
      break;
    } else {
      r22 = r13;
    }
  }
  r14 = r3;
  r15 = r1;
  r16 = r14 | 0;
  r17 = HEAP32[r16 >> 2];
  r18 = r14 + 4 | 0;
  r19 = HEAP32[r18 >> 2];
  r20 = r15 | 0;
  HEAP32[r20 >> 2] = r17;
  r21 = r15 + 4 | 0;
  HEAP32[r21 >> 2] = r19;
  STACKTOP = r4;
  return;
}
function _mrb_mod_include_p(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = HEAP32[r3 >> 2];
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_check_type(r2, r5, 11);
  L1875 : do {
    if ((r6 | 0) != 0) {
      r2 = r5;
      r3 = r6, r7 = r3 >> 2;
      while (1) {
        if ((HEAP32[r7] & 255 | 0) == 12) {
          if ((HEAP32[r7 + 1] | 0) == (HEAP32[r2 >> 2] | 0)) {
            break;
          }
        }
        r8 = HEAP32[r7 + 5];
        if ((r8 | 0) == 0) {
          break L1875;
        } else {
          r3 = r8, r7 = r3 >> 2;
        }
      }
      _mrb_true_value757(r1);
      STACKTOP = r4;
      return;
    }
  } while (0);
  _mrb_false_value758(r1);
  STACKTOP = r4;
  return;
}
function _mrb_mod_append_features(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_check_type(r2, r3, 11);
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_include_module(r2, HEAP32[r5 >> 2], HEAP32[r3 >> 2]);
  r5 = r3;
  r3 = r1;
  r1 = HEAP32[r5 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_mod_included_modules(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 16;
  r8 = HEAP32[r3 >> 2];
  _mrb_ary_new(r6, r2);
  r3 = r6;
  r6 = r5 >> 2;
  r9 = HEAP32[r3 >> 2];
  r10 = HEAP32[r3 + 4 >> 2];
  HEAP32[r6] = r9;
  HEAP32[r6 + 1] = r10;
  if ((r8 | 0) == 0) {
    r11 = r10;
    r12 = r9;
    r13 = r1;
    r14 = r13 | 0;
    HEAP32[r14 >> 2] = r12;
    r15 = r13 + 4 | 0;
    HEAP32[r15 >> 2] = r11;
    STACKTOP = r4;
    return;
  }
  r9 = r8, r8 = r9 >> 2;
  while (1) {
    if ((HEAP32[r8] & 255 | 0) == 12) {
      _mrb_obj_value718(r7, HEAP32[r8 + 1] | 0);
      _mrb_ary_push(r2, r5, r7);
    }
    r10 = HEAP32[r8 + 5];
    if ((r10 | 0) == 0) {
      break;
    } else {
      r9 = r10, r8 = r9 >> 2;
    }
  }
  r11 = HEAP32[r6 + 1];
  r12 = HEAP32[r6];
  r13 = r1;
  r14 = r13 | 0;
  HEAP32[r14 >> 2] = r12;
  r15 = r13 + 4 | 0;
  HEAP32[r15 >> 2] = r11;
  STACKTOP = r4;
  return;
}
function _mrb_mod_instance_methods(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4 + 4;
  r6 = HEAP32[r3 >> 2];
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r4, HEAP32[tempInt + 4 >> 2] = r5, tempInt));
  _class_instance_method_list(r1, r2, HEAP32[r5 >> 2], r6);
  STACKTOP = r4;
  return;
}
function _mrb_mod_method_defined(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5325872, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((_mrb_obj_respond_to(HEAP32[r3 >> 2], HEAP16[r5 >> 1]) | 0) == 0) {
    _mrb_false_value758(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value757(r1);
    STACKTOP = r4;
    return;
  }
}



function _mrb_mod_to_s(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 336 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 24;
  r8 = r4 + 32;
  r9 = r4 + 40;
  r10 = r4 + 48;
  r11 = r4 + 56;
  r12 = r4 + 64;
  r13 = r4 + 320;
  r14 = r4 + 328;
  r15 = HEAP32[r3 + 4 >> 2] & 255;
  if ((r15 | 0) == 13) {
    _mrb_str_new(r5, r2, 5314576, 2);
    _mrb_iv_get(r6, r3, _mrb_intern(r2, 5323368));
    _mrb_str_cat2(r4 + 16, r2, r5, 5314444);
    r16 = HEAP32[r6 + 4 >> 2] & 255;
    if ((r16 | 0) == 10 | (r16 | 0) == 11 | (r16 | 0) == 13) {
      _mrb_inspect(r7, r2, r6);
      _mrb_str_append(r8, r2, r5, r7);
    } else {
      _mrb_any_to_s(r9, r2, r6);
      _mrb_str_append(r10, r2, r5, r9);
    }
    _mrb_str_cat2(r11, r2, r5, 5320772);
    r11 = r5;
    r5 = r1;
    r9 = HEAP32[r11 + 4 >> 2];
    HEAP32[r5 >> 2] = HEAP32[r11 >> 2];
    HEAP32[r5 + 4 >> 2] = r9;
    STACKTOP = r4;
    return;
  }
  r9 = HEAP32[r3 >> 2];
  r3 = _mrb_class_name(r2, r9);
  if ((r3 | 0) != 0) {
    _mrb_str_new_cstr(r14, r2, r3);
    _mrb_str_dup(r1, r2, r14);
    STACKTOP = r4;
    return;
  }
  if ((r15 | 0) == 10) {
    r14 = r12 | 0;
    r17 = _snprintf(r14, 256, 5320408, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r9, tempInt));
    r18 = r14;
  } else if ((r15 | 0) == 11) {
    r15 = r12 | 0;
    r17 = _snprintf(r15, 256, 5314396, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r9, tempInt));
    r18 = r15;
  } else {
    r17 = 0;
    r18 = r12 | 0;
  }
  _mrb_str_new(r13, r2, r18, r17);
  _mrb_str_dup(r1, r2, r13);
  STACKTOP = r4;
  return;
}
_mrb_mod_to_s["X"] = 1;
function _mrb_mod_ancestors(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 16;
  r8 = r4 + 24;
  r9 = HEAP32[r3 >> 2];
  _mrb_ary_new(r6, r2);
  r3 = r6;
  r6 = r5 >> 2;
  r10 = HEAP32[r3 >> 2];
  r11 = HEAP32[r3 + 4 >> 2];
  HEAP32[r6] = r10;
  HEAP32[r6 + 1] = r11;
  if ((r9 | 0) == 0) {
    r12 = r11;
    r13 = r10;
    r14 = r1;
    r15 = r14 | 0;
    HEAP32[r15 >> 2] = r13;
    r16 = r14 + 4 | 0;
    HEAP32[r16 >> 2] = r12;
    STACKTOP = r4;
    return;
  }
  r10 = r9, r9 = r10 >> 2;
  while (1) {
    if ((HEAP32[r9] & 255 | 0) == 12) {
      _mrb_obj_value718(r7, HEAP32[r9 + 1] | 0);
      _mrb_ary_push(r2, r5, r7);
    } else {
      _mrb_obj_value718(r8, r10 | 0);
      _mrb_ary_push(r2, r5, r8);
    }
    r11 = HEAP32[r9 + 5];
    if ((r11 | 0) == 0) {
      break;
    } else {
      r10 = r11, r9 = r10 >> 2;
    }
  }
  r12 = HEAP32[r6 + 1];
  r13 = HEAP32[r6];
  r14 = r1;
  r15 = r14 | 0;
  HEAP32[r15 >> 2] = r13;
  r16 = r14 + 4 | 0;
  HEAP32[r16 >> 2] = r12;
  STACKTOP = r4;
  return;
}
_mrb_mod_ancestors["X"] = 1;
function _mod_define_method(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4, r7 = r6 >> 2;
  r8 = HEAP32[r3 >> 2];
  _mrb_get_args(r2, 5314708, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  do {
    if ((HEAP32[r7 + 1] & 255 | 0) == 0) {
      if ((HEAP32[r7] | 0) != 0) {
        break;
      }
      _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5314680);
    }
  } while (0);
  r3 = _mrb_obj_alloc(r2, 14, HEAP32[r2 + 84 >> 2]);
  _mrb_proc_copy(r3, HEAP32[r7]);
  _mrb_define_method_raw(r2, r8, HEAP16[r5 >> 1], r3);
  r3 = r6;
  r6 = r1;
  r1 = HEAP32[r3 + 4 >> 2];
  HEAP32[r6 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r6 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_mod_eqq(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((_mrb_obj_is_kind_of(r2, r5, HEAP32[r3 >> 2]) | 0) == 0) {
    _mrb_false_value758(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value757(r1);
    STACKTOP = r4;
    return;
  }
}
function _check_type(r1, r2, r3, r4, r5, r6) {
  var r7, r8;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r8 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r8 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r8 + 4 >> 2];
  r8 = r7;
  _mrb_check_convert_type(r8, r2, r3, r4, r5, r6);
  r6 = HEAP32[r8 >> 2];
  r4 = HEAP32[r8 + 4 >> 2];
  if ((r4 & 255 | r6 | 0) == 0) {
    _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325036), 5313972, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  }
  HEAP32[r1 >> 2] = r6;
  HEAP32[r1 + 4 >> 2] = r4;
  STACKTOP = r7;
  return;
}
function _codegen_realloc(r1, r2, r3) {
  var r4;
  r4 = _mrb_realloc(HEAP32[r1 >> 2], r2, r3);
  if ((r4 | 0) != 0 | (r3 | 0) == 0) {
    return r4;
  }
  _codegen_error(r1, 5324360);
  return r4;
}
function _mrb_generate_code(r1, r2) {
  var r3, r4;
  r3 = HEAP32[r1 + 60 >> 2];
  r4 = _codegen_start(r1, r2);
  return (r4 | 0) < 0 ? r4 : r3;
}
function _codegen_start(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20;
  r3 = 0;
  r3 = 2;
  r4 = {};
  r5 = {
    "5": (function(value) {
      r3 = 8;
      r6 = value;
    }),
    dummy: 0
  };
  while (1) try {
    switch (r3) {
     case 2:
      r7 = _scope_new(r1, 0, 0);
      r8 = (r7 | 0) == 0;
      if (r8) {
        r9 = -1;
        r3 = 7;
        break;
      } else {
        r3 = 3;
        break;
      }
     case 3:
      r10 = r7 | 0;
      HEAP32[r10 >> 2] = r1;
      r11 = r2 + 24 | 0;
      r12 = HEAP32[r11 >> 2];
      r13 = (r12 | 0) == 0;
      if (r13) {
        r3 = 5;
        break;
      } else {
        r3 = 4;
        break;
      }
     case 4:
      r14 = r7 + 80 | 0;
      HEAP32[r14 >> 2] = r12;
      r3 = 5;
      break;
     case 5:
      r15 = r7 + 8 | 0;
      r6 = (tempInt = setjmpId++, r4[tempInt] = 1, setjmpLabels[tempInt] = r3, HEAP32[r15 >> 2] = tempInt, 0);
      r3 = 8;
      break;
     case 8:
      r16 = (r6 | 0) == 0;
      if (r16) {
        r3 = 6;
        break;
      } else {
        r3 = 7;
        break;
      }
     case 6:
      r17 = r2 + 1124 | 0;
      r18 = HEAP32[r17 >> 2];
      _codegen(r7, r18, 0);
      r19 = r7 + 4 | 0;
      r20 = HEAP32[r19 >> 2];
      _mrb_pool_close(r20);
      r9 = 0;
      r3 = 7;
      break;
     case 7:
      return r9;
    }
  } catch (e) {
    if (!e.longjmp || !(e.id in r4)) throw e;
    r5[setjmpLabels[e.id]](e.value);
  }
}
function _scope_new(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = _mrb_pool_open(r1);
  r5 = _mrb_pool_alloc(r4, 128);
  r6 = r5;
  if ((r5 | 0) == 0) {
    r7 = 0;
    return r7;
  }
  for (r8 = r5 >> 2, r9 = r8 + 32; r8 < r9; r8++) {
    HEAP32[r8] = 0;
  }
  HEAP32[r5 >> 2] = r1;
  HEAP32[r5 + 4 >> 2] = r4;
  if ((r2 | 0) == 0) {
    r7 = r6;
    return r7;
  }
  HEAP32[r5 + 48 >> 2] = r2;
  HEAP32[r5 + 68 >> 2] = 32767;
  r4 = _mrb_add_irep(r1);
  r8 = (r5 + 100 | 0) >> 2;
  HEAP32[r8] = r4;
  HEAP32[r5 + 124 >> 2] = HEAP32[r4 >> 2] << 16 >> 16;
  r4 = r5 + 96 | 0;
  HEAP32[r4 >> 2] = 1024;
  HEAP32[r5 + 88 >> 2] = _mrb_malloc(r1, 4096);
  HEAP32[r5 + 104 >> 2] = 32;
  r9 = _mrb_malloc(r1, 256);
  HEAP32[HEAP32[r8] + 12 >> 2] = r9;
  HEAP32[HEAP32[r8] + 32 >> 2] = 0;
  HEAP32[r5 + 108 >> 2] = 256;
  r9 = _mrb_malloc(r1, 512);
  HEAP32[HEAP32[r8] + 16 >> 2] = r9;
  HEAP32[HEAP32[r8] + 36 >> 2] = 0;
  HEAP32[r5 + 52 >> 2] = r3;
  r8 = r5 + 56 | 0;
  r9 = (_node_len(r3) + 1 | 0) + HEAP32[r8 >> 2] | 0;
  HEAP32[r8 >> 2] = r9;
  HEAP32[r5 + 112 >> 2] = r9;
  HEAP32[r5 + 120 >> 2] = _mrb_gc_arena_save(HEAP32[r1 + 544 >> 2]);
  r9 = HEAP32[r2 + 80 >> 2];
  HEAP32[r5 + 80 >> 2] = r9;
  if ((r9 | 0) != 0) {
    HEAP32[r5 + 92 >> 2] = _mrb_malloc(r1, HEAP32[r4 >> 2] << 1);
  }
  HEAP16[r5 + 84 >> 1] = HEAP16[r2 + 84 >> 1];
  r7 = r6;
  return r7;
}
_scope_new["X"] = 1;
function _codegen_error(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10;
  if ((r1 | 0) == 0) {
    STACKTOP = STACKTOP;
    return;
  }
  r3 = r1 + 48 | 0;
  r4 = (HEAP32[r3 >> 2] | 0) == 0;
  _mrb_pool_close(HEAP32[r1 + 4 >> 2]);
  L1972 : do {
    if (r4) {
      r5 = r1;
    } else {
      r6 = r3;
      while (1) {
        r7 = HEAP32[r6 >> 2];
        r8 = r7 + 48 | 0;
        r9 = (HEAP32[r8 >> 2] | 0) == 0;
        _mrb_pool_close(HEAP32[r7 + 4 >> 2]);
        if (r9) {
          r5 = r7;
          break L1972;
        } else {
          r6 = r8;
        }
      }
    }
  } while (0);
  r3 = HEAP32[r5 + 80 >> 2];
  do {
    if ((r3 | 0) != 0) {
      r1 = HEAP16[r5 + 84 >> 1];
      if (r1 << 16 >> 16 == 0) {
        break;
      }
      _fprintf(HEAP32[_stderr >> 2], 5313900, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r3, HEAP32[tempInt + 4 >> 2] = r1 << 16 >> 16, HEAP32[tempInt + 8 >> 2] = r2, tempInt));
      r10 = r5 + 8 | 0;
      _longjmp(r10, 1);
    }
  } while (0);
  _fprintf(HEAP32[_stderr >> 2], 5313860, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r2, tempInt));
  r10 = r5 + 8 | 0;
  _longjmp(r10, 1);
}
function _codegen(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 76 | 0;
  r6 = r5;
  r7 = r5 + 4;
  r8 = r5 + 8;
  r9 = r5 + 12;
  r10 = r5 + 16;
  r11 = r5 + 24;
  r12 = r5 + 32;
  r13 = r5 + 40;
  r14 = r5 + 48;
  r15 = r5 + 52;
  r16 = r5 + 60;
  r17 = r5 + 68;
  if ((r2 | 0) == 0) {
    STACKTOP = r5;
    return;
  }
  r18 = HEAP32[r2 >> 2];
  HEAP16[r1 + 84 >> 1] = HEAP16[r2 + 8 >> 1];
  r19 = HEAP32[r2 + 4 >> 2], r2 = r19 >> 2;
  if ((r18 | 0) == 17) {
    r20 = (r19 | 0) == 0;
    if ((r3 | 0) != 0 & r20) {
      _genop(r1, HEAP32[r1 + 56 >> 2] << 23 | 5);
      _push_(r1);
    }
    if (r20) {
      STACKTOP = r5;
      return;
    } else {
      r21 = r19;
    }
    while (1) {
      r20 = r21 + 4 | 0;
      _codegen(r1, HEAP32[r21 >> 2], (HEAP32[r20 >> 2] | 0) != 0 ? 0 : r3);
      r22 = HEAP32[r20 >> 2];
      if ((r22 | 0) == 0) {
        break;
      } else {
        r21 = r22;
      }
    }
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 36) {
    L1997 : do {
      if ((r19 | 0) == 0) {
        r23 = 0;
      } else {
        r21 = 0;
        r22 = r19;
        while (1) {
          r20 = r22 | 0;
          _codegen(r1, HEAP32[HEAP32[r20 >> 2] >> 2], r3);
          _codegen(r1, HEAP32[HEAP32[r20 >> 2] + 4 >> 2], r3);
          r20 = r21 + 1 | 0;
          r24 = HEAP32[r22 + 4 >> 2];
          if ((r24 | 0) == 0) {
            r23 = r20;
            break L1997;
          } else {
            r21 = r20;
            r22 = r24;
          }
        }
      }
    } while (0);
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    r22 = r1 + 56 | 0;
    r21 = HEAP32[r22 >> 2] - (r23 << 1) | 0;
    HEAP32[r22 >> 2] = r21;
    _genop(r1, r23 << 7 & 16256 | r21 << 23 | r21 << 14 & 8372224 | 63);
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 20) {
    _codegen(r1, HEAP32[r2], 1);
    r21 = _new_label(r1);
    r23 = r1 + 56 | 0;
    r22 = HEAP32[r23 >> 2] - 1 | 0;
    HEAP32[r23 >> 2] = r22;
    _genop(r1, r22 << 23 | 4194201);
    _codegen(r1, HEAP32[r2 + 1], r3);
    _dispatch(r1, r21);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 21) {
    _codegen(r1, HEAP32[r2], 1);
    r21 = _new_label(r1);
    r22 = r1 + 56 | 0;
    r23 = HEAP32[r22 >> 2] - 1 | 0;
    HEAP32[r22 >> 2] = r23;
    _genop(r1, r23 << 23 | 4194200);
    _codegen(r1, HEAP32[r2 + 1], r3);
    _dispatch(r1, r21);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 9) {
    r21 = _loop_push(r1, 0);
    r23 = r21 + 4 | 0;
    HEAP32[r23 >> 2] = _new_label(r1);
    _genop(r1, 4194199);
    r22 = r21 + 8 | 0;
    HEAP32[r22 >> 2] = _new_label(r1);
    _codegen(r1, HEAP32[r2 + 1], 0);
    _dispatch(r1, HEAP32[r23 >> 2]);
    _codegen(r1, HEAP32[r2], 1);
    r23 = r1 + 56 | 0;
    r21 = HEAP32[r23 >> 2] - 1 | 0;
    HEAP32[r23 >> 2] = r21;
    _genop(r1, r21 << 23 | (HEAP32[r22 >> 2] - HEAP32[r1 + 60 >> 2] << 7) + 4194176 & 8388480 | 24);
    _loop_pop(r1, r3);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 10) {
    r22 = _loop_push(r1, 0);
    r21 = r22 + 4 | 0;
    HEAP32[r21 >> 2] = _new_label(r1);
    _genop(r1, 4194199);
    r23 = r22 + 8 | 0;
    HEAP32[r23 >> 2] = _new_label(r1);
    _codegen(r1, HEAP32[r2 + 1], 0);
    _dispatch(r1, HEAP32[r21 >> 2]);
    _codegen(r1, HEAP32[r2], 1);
    r21 = r1 + 56 | 0;
    r22 = HEAP32[r21 >> 2] - 1 | 0;
    HEAP32[r21 >> 2] = r22;
    _genop(r1, r22 << 23 | (HEAP32[r23 >> 2] - HEAP32[r1 + 60 >> 2] << 7) + 4194176 & 8388480 | 25);
    _loop_pop(r1, r3);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 12) {
    _for_body(r1, r19);
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 6) {
    r23 = HEAP32[r2];
    if ((r23 | 0) == 0) {
      r25 = 0;
    } else {
      r22 = HEAP32[r1 + 56 >> 2];
      _codegen(r1, r23, 1);
      r25 = r22;
    }
    r22 = HEAP32[r2 + 1];
    L2022 : do {
      if ((r22 | 0) == 0) {
        r26 = 0;
      } else {
        r23 = (r3 | 0) == 0;
        r21 = (r1 + 56 | 0) >> 2;
        r24 = (r25 | 0) == 0;
        r20 = r25 << 14 & 8372224;
        r27 = r1 | 0;
        r28 = 0;
        r29 = r22;
        while (1) {
          r30 = (r29 | 0) >> 2;
          r31 = HEAP32[r30];
          r32 = HEAP32[r31 >> 2];
          do {
            if ((r32 | 0) == 0) {
              r33 = 0;
              r34 = r31;
            } else {
              r35 = 0;
              r36 = r32;
              while (1) {
                _codegen(r1, HEAP32[r36 >> 2], 1);
                r37 = HEAP32[r21];
                if (r24) {
                  HEAP32[r21] = r37 - 1 | 0;
                } else {
                  _genop(r1, r20 | r37 << 23 | 1);
                  r37 = HEAP32[r21] - 1 | 0;
                  HEAP32[r21] = r37;
                  _genop(r1, r37 << 23 | _new_msym(r1, _mrb_intern(HEAP32[r27 >> 2], 5325704)) << 14 & 8372224 | 160);
                }
                r38 = _new_label(r1);
                _genop(r1, (r35 << 7) + 4194176 & 8388480 | HEAP32[r21] << 23 | 24);
                r37 = HEAP32[r36 + 4 >> 2];
                if ((r37 | 0) == 0) {
                  break;
                } else {
                  r35 = r38;
                  r36 = r37;
                }
              }
              r36 = HEAP32[r30];
              if ((HEAP32[r36 >> 2] | 0) == 0) {
                r33 = 0;
                r34 = r36;
                break;
              }
              r36 = _new_label(r1);
              _genop(r1, 4194199);
              _dispatch_linked(r1, r38);
              r33 = r36;
              r34 = HEAP32[r30];
            }
          } while (0);
          _codegen(r1, HEAP32[r34 + 4 >> 2], r3);
          if (!r23) {
            HEAP32[r21] = HEAP32[r21] - 1 | 0;
          }
          r30 = _new_label(r1);
          _genop(r1, (r28 << 7) + 4194176 & 8388480 | 23);
          if ((r33 | 0) != 0) {
            _dispatch(r1, r33);
          }
          r32 = HEAP32[r29 + 4 >> 2];
          if ((r32 | 0) == 0) {
            r26 = r30;
            break L2022;
          } else {
            r28 = r30;
            r29 = r32;
          }
        }
      }
    } while (0);
    if ((r3 | 0) != 0) {
      _genop(r1, HEAP32[r1 + 56 >> 2] << 23 | 5);
      _push_(r1);
    }
    if ((r26 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _dispatch_linked(r1, r26);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 3) {
    _scope_body(r1, r19);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 30 | (r18 | 0) == 29) {
    _gen_call(r1, r19, 0, 0, r3);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 77) {
    _codegen(r1, HEAP32[r2], r3);
    _codegen(r1, HEAP32[r2 + 1], r3);
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    r26 = r1 + 56 | 0;
    r33 = HEAP32[r26 >> 2] - 2 | 0;
    HEAP32[r26 >> 2] = r33;
    _genop(r1, r33 << 23 | r33 << 14 & 8372224 | 65);
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 78) {
    _codegen(r1, HEAP32[r2], r3);
    _codegen(r1, HEAP32[r2 + 1], r3);
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    r33 = r1 + 56 | 0;
    r26 = HEAP32[r33 >> 2] - 2 | 0;
    HEAP32[r33 >> 2] = r26;
    _genop(r1, r26 << 23 | r26 << 14 & 8372224 | 193);
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 74) {
    r26 = _new_sym862(r1, HEAP32[r2 + 1] & 65535);
    _codegen(r1, HEAP32[r2], 1);
    r33 = r1 + 56 | 0;
    r34 = HEAP32[r33 >> 2] - 1 | 0;
    HEAP32[r33 >> 2] = r34;
    _genop(r1, r26 << 7 & 8388480 | r34 << 23 | 19);
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 75) {
    r34 = _new_sym862(r1, r19 & 65535);
    r26 = r1 + 56 | 0;
    _genop(r1, HEAP32[r26 >> 2] << 23 | 66);
    _genop(r1, r34 << 7 & 8388480 | HEAP32[r26 >> 2] << 23 | 19);
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 34) {
    r26 = _gen_values(r1, r19, r3);
    r34 = (r3 | 0) != 0;
    if ((r26 | 0) > -1) {
      if (!r34) {
        STACKTOP = r5;
        return;
      }
      r33 = r1 + 56 | 0;
      r38 = HEAP32[r33 >> 2] - r26 | 0;
      HEAP32[r33 >> 2] = r38;
      _genop(r1, r26 << 7 & 16256 | r38 << 23 | r38 << 14 & 8372224 | 55);
      _push_(r1);
      STACKTOP = r5;
      return;
    } else {
      if (!r34) {
        STACKTOP = r5;
        return;
      }
      _push_(r1);
      STACKTOP = r5;
      return;
    }
  } else if ((r18 | 0) == 63) {
    _codegen(r1, r19, 1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 24) {
    _codegen(r1, HEAP32[r2 + 1], 1);
    r34 = r1 + 56 | 0;
    r38 = HEAP32[r34 >> 2] - 1 | 0;
    HEAP32[r34 >> 2] = r38;
    r34 = HEAP32[r2];
    _gen_assignment(r1, HEAP32[r34 >> 2], HEAP32[r34 + 4 >> 2], r38, r3);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 23) {
    r38 = HEAP32[r2 + 1];
    r34 = (r1 + 56 | 0) >> 2;
    r26 = HEAP32[r34];
    do {
      if ((HEAP32[r38 >> 2] | 0) == 34) {
        r33 = HEAP32[r38 + 4 >> 2];
        if ((_nosplat(r33) | 0) == 0) {
          break;
        }
        L2094 : do {
          if ((r33 | 0) == 0) {
            r39 = 0;
          } else {
            r22 = 0;
            r25 = r33;
            while (1) {
              _codegen(r1, HEAP32[r25 >> 2], 1);
              r29 = r22 + 1 | 0;
              r28 = HEAP32[r25 + 4 >> 2];
              if ((r28 | 0) == 0) {
                r39 = r29;
                break L2094;
              } else {
                r22 = r29;
                r25 = r28;
              }
            }
          }
        } while (0);
        r33 = HEAP32[r2];
        r25 = HEAP32[r33 >> 2];
        L2098 : do {
          if ((r25 | 0) == 0) {
            r40 = 0;
          } else {
            r22 = r25;
            r28 = 0;
            while (1) {
              r29 = HEAP32[r22 >> 2];
              _gen_assignment(r1, HEAP32[r29 >> 2], HEAP32[r29 + 4 >> 2], r28 + r26 | 0, 0);
              r29 = r28 + 1 | 0;
              r21 = HEAP32[r22 + 4 >> 2];
              if ((r21 | 0) == 0) {
                r40 = r29;
                break L2098;
              } else {
                r22 = r21;
                r28 = r29;
              }
            }
          }
        } while (0);
        r25 = HEAP32[r33 + 4 >> 2];
        L2102 : do {
          if ((r25 | 0) != 0) {
            r28 = r25 + 4 | 0;
            r22 = HEAP32[r28 >> 2];
            L2104 : do {
              if ((r22 | 0) == 0) {
                r41 = 0;
              } else {
                r29 = HEAP32[r22 >> 2];
                if ((r29 | 0) == 0) {
                  r41 = 0;
                  break;
                } else {
                  r42 = 0;
                  r43 = r29;
                }
                while (1) {
                  r29 = r42 + 1 | 0;
                  r21 = HEAP32[r43 + 4 >> 2];
                  if ((r21 | 0) == 0) {
                    r41 = r29;
                    break L2104;
                  } else {
                    r42 = r29;
                    r43 = r21;
                  }
                }
              }
            } while (0);
            r21 = r25 | 0;
            if ((HEAP32[r21 >> 2] | 0) == 0) {
              r44 = r40;
              r45 = r22;
            } else {
              r29 = r39 - r41 | 0;
              _genop(r1, r40 + r26 << 14 & 8372224 | r29 - r40 << 7 & 16256 | HEAP32[r34] << 23 | 55);
              r23 = HEAP32[r21 >> 2];
              _gen_assignment(r1, HEAP32[r23 >> 2], HEAP32[r23 + 4 >> 2], HEAP32[r34], 0);
              r44 = r29;
              r45 = HEAP32[r28 >> 2];
            }
            if ((r45 | 0) == 0) {
              break;
            }
            r29 = HEAP32[r45 >> 2];
            if ((r29 | 0) != 0 & (r44 | 0) < (r39 | 0)) {
              r46 = r29;
              r47 = r44;
            } else {
              break;
            }
            while (1) {
              r29 = HEAP32[r46 >> 2];
              _gen_assignment(r1, HEAP32[r29 >> 2], HEAP32[r29 + 4 >> 2], r47 + r26 | 0, 0);
              r29 = r47 + 1 | 0;
              if ((r29 | 0) == (r39 | 0)) {
                break L2102;
              } else {
                r46 = HEAP32[r46 + 4 >> 2];
                r47 = r29;
              }
            }
          }
        } while (0);
        HEAP32[r34] = HEAP32[r34] - r39 | 0;
        if ((r3 | 0) == 0) {
          STACKTOP = r5;
          return;
        }
        _genop(r1, r26 << 23 | r26 << 14 & 8372224 | r39 << 7 & 16256 | 55);
        _push_(r1);
        STACKTOP = r5;
        return;
      }
    } while (0);
    _codegen(r1, r38, 1);
    _gen_vmassignment(r1, HEAP32[r2], r26, r3);
    if ((r3 | 0) != 0) {
      STACKTOP = r5;
      return;
    }
    HEAP32[r34] = HEAP32[r34] - 1 | 0;
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 19) {
    r34 = HEAP32[r1 + 60 >> 2];
    _genop(r1, 30);
    r26 = (r1 + 76 | 0) >> 2;
    HEAP32[r26] = HEAP32[r26] + 1 | 0;
    _codegen(r1, HEAP32[r2], r3);
    r38 = _scope_body(r1, HEAP32[r2 + 1]) << 7 & 8388480 | 30;
    HEAP32[HEAP32[r1 + 88 >> 2] + (r34 << 2) >> 2] = r38;
    HEAP32[r26] = HEAP32[r26] - 1 | 0;
    _genop_peep(r1, 8388639, 0);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 53) {
    _genop(r1, _lambda_body(r1, r19, 1) << 9 & 8388096 | HEAP32[r1 + 56 >> 2] << 23 | 448);
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 4) {
    _genop(r1, _lambda_body(r1, r19, 1) << 9 & 8388096 | HEAP32[r1 + 56 >> 2] << 23 | 320);
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 5) {
    r26 = (r19 + 4 | 0) >> 2;
    r38 = HEAP32[HEAP32[HEAP32[r26] + 4 >> 2] >> 2];
    _codegen(r1, HEAP32[r2], 1);
    r34 = (r1 + 56 | 0) >> 2;
    HEAP32[r34] = HEAP32[r34] - 1 | 0;
    r39 = _new_label(r1);
    _genop(r1, HEAP32[r34] << 23 | 4194201);
    _codegen(r1, HEAP32[HEAP32[r26] >> 2], r3);
    r47 = (r3 | 0) != 0;
    do {
      if (r47) {
        if ((HEAP32[HEAP32[r26] >> 2] | 0) != 0) {
          break;
        }
        _genop(r1, HEAP32[r34] << 23 | 5);
        _push_(r1);
      }
    } while (0);
    if ((r38 | 0) != 0) {
      if (r47) {
        HEAP32[r34] = HEAP32[r34] - 1 | 0;
      }
      r26 = _new_label(r1);
      _genop(r1, 4194199);
      _dispatch(r1, r39);
      _codegen(r1, r38, r3);
      _dispatch(r1, r26);
      STACKTOP = r5;
      return;
    }
    if (r47) {
      HEAP32[r34] = HEAP32[r34] - 1 | 0;
      r47 = _new_label(r1);
      _genop(r1, 4194199);
      _dispatch(r1, r39);
      _genop(r1, HEAP32[r34] << 23 | 5);
      _dispatch(r1, r47);
      _push_(r1);
      STACKTOP = r5;
      return;
    } else {
      _dispatch(r1, r39);
      STACKTOP = r5;
      return;
    }
  } else if ((r18 | 0) == 18) {
    r39 = _new_label(r1);
    _genop(r1, 26);
    r47 = _loop_push(r1, 3);
    HEAP32[r47 + 4 >> 2] = r39;
    r34 = HEAP32[r2];
    do {
      if ((r34 | 0) != 0) {
        _codegen(r1, r34, r3);
        if ((r3 | 0) == 0) {
          break;
        }
        r26 = r1 + 56 | 0;
        HEAP32[r26 >> 2] = HEAP32[r26 >> 2] - 1 | 0;
      }
    } while (0);
    HEAP32[r47 >> 2] = 4;
    r47 = _new_label(r1);
    _genop(r1, 23);
    _dispatch(r1, r39);
    r39 = HEAP32[r2 + 1];
    r34 = HEAP32[r39 >> 2];
    r26 = (r1 + 56 | 0) >> 2;
    do {
      if ((r34 | 0) == 0) {
        r48 = 0;
      } else {
        r38 = HEAP32[r26];
        r46 = r38 << 23;
        _genop(r1, r46 | 27);
        _push_(r1);
        r44 = r38 << 14 & 8372224;
        r45 = r1 | 0;
        r40 = r34;
        r41 = 0;
        r43 = 0;
        while (1) {
          r42 = HEAP32[r40 >> 2];
          r25 = HEAP32[r42 >> 2];
          do {
            if ((r41 | 0) == 0) {
              r49 = 0;
              r50 = r25;
            } else {
              _dispatch(r1, r41);
              r49 = 0;
              r50 = r25;
              break;
            }
          } while (0);
          while (1) {
            r25 = (r50 | 0) != 0;
            if (r25) {
              _codegen(r1, HEAP32[r50 >> 2], 1);
            } else {
              _genop(r1, HEAP32[r26] << 23 | _new_msym(r1, _mrb_intern(HEAP32[r45 >> 2], 5323064)) << 7 & 8388480 | 17);
              _push_(r1);
            }
            _genop(r1, r44 | HEAP32[r26] << 23 | 1);
            r33 = HEAP32[r26] - 1 | 0;
            HEAP32[r26] = r33;
            _genop(r1, r33 << 23 | _new_msym(r1, _mrb_intern(HEAP32[r45 >> 2], 5325704)) << 14 & 8372224 | 160);
            r51 = _new_label(r1);
            _genop(r1, (r49 << 7) + 4194176 & 8388480 | HEAP32[r26] << 23 | 24);
            if (!r25) {
              break;
            }
            r25 = HEAP32[r50 + 4 >> 2];
            if ((r25 | 0) == 0) {
              break;
            } else {
              r49 = r51;
              r50 = r25;
            }
          }
          r52 = _new_label(r1);
          _genop(r1, 4194199);
          _dispatch_linked(r1, r51);
          HEAP32[r26] = HEAP32[r26] - 1 | 0;
          r25 = r42 + 4 | 0;
          r33 = HEAP32[r25 >> 2];
          r28 = HEAP32[r33 >> 2];
          if ((r28 | 0) == 0) {
            r53 = r33;
          } else {
            _gen_assignment(r1, HEAP32[r28 >> 2], HEAP32[r28 + 4 >> 2], r38, 0);
            r53 = HEAP32[r25 >> 2];
          }
          r25 = HEAP32[HEAP32[r53 + 4 >> 2] >> 2];
          if ((r25 | 0) != 0) {
            _codegen(r1, r25, r3);
          }
          r54 = _new_label(r1);
          _genop(r1, (r43 << 7) + 4194176 & 8388480 | 23);
          r25 = HEAP32[r40 + 4 >> 2];
          _push_(r1);
          if ((r25 | 0) == 0) {
            break;
          } else {
            r40 = r25;
            r41 = r52;
            r43 = r54;
          }
        }
        if ((r52 | 0) == 0) {
          r48 = r54;
          break;
        }
        _dispatch(r1, r52);
        _genop(r1, r46 | 29);
        r48 = r54;
      }
    } while (0);
    HEAP32[r26] = HEAP32[r26] - 1 | 0;
    r26 = HEAP32[r39 + 4 >> 2];
    _dispatch(r1, r47);
    _genop(r1, 8388636);
    r47 = HEAP32[r26 >> 2];
    if ((r47 | 0) != 0) {
      _codegen(r1, r47, r3);
    }
    _dispatch_linked(r1, r48);
    _loop_pop(r1, 0);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 28) {
    r48 = (r19 + 4 | 0) >> 2;
    r47 = HEAP32[HEAP32[r48] >> 2] & 65535;
    r26 = _mrb_sym2name_len(HEAP32[HEAP32[r1 >> 2] + 596 >> 2], r47, r6);
    r39 = (r19 | 0) >> 2;
    _codegen(r1, HEAP32[r39], 1);
    r54 = HEAP32[r6 >> 2];
    r6 = (r54 | 0) == 2;
    do {
      if (r6) {
        r52 = HEAP8[r26];
        if (r52 << 24 >> 24 == 124) {
          if (HEAP8[r26 + 1 | 0] << 24 >> 24 != 124) {
            break;
          }
        } else if (r52 << 24 >> 24 == 38) {
          if (HEAP8[r26 + 1 | 0] << 24 >> 24 != 38) {
            break;
          }
        } else {
          break;
        }
        r52 = (r1 + 56 | 0) >> 2;
        HEAP32[r52] = HEAP32[r52] - 1 | 0;
        r53 = _new_label(r1);
        _genop(r1, HEAP32[r52] << 23 | (HEAP8[r26] << 24 >> 24 == 124 ? 24 : 25) | 4194176);
        _codegen(r1, HEAP32[HEAP32[HEAP32[r48] + 4 >> 2] >> 2], 1);
        r51 = HEAP32[r52] - 1 | 0;
        HEAP32[r52] = r51;
        r52 = HEAP32[r39];
        _gen_assignment(r1, HEAP32[r52 >> 2], HEAP32[r52 + 4 >> 2], r51, r3);
        _dispatch(r1, r53);
        STACKTOP = r5;
        return;
      }
    } while (0);
    _codegen(r1, HEAP32[HEAP32[HEAP32[r48] + 4 >> 2] >> 2], 1);
    r48 = (r1 + 56 | 0) >> 2;
    HEAP32[r48] = HEAP32[r48] - 2 | 0;
    r53 = _new_msym(r1, r47);
    r47 = (r54 | 0) == 1;
    do {
      if (r47) {
        r54 = HEAP8[r26];
        if (r54 << 24 >> 24 == 43) {
          _genop_peep(r1, r53 << 14 & 8372224 | HEAP32[r48] << 23 | 172, r3);
          break;
        } else if (r54 << 24 >> 24 == 45) {
          _genop_peep(r1, r53 << 14 & 8372224 | HEAP32[r48] << 23 | 174, r3);
          break;
        } else if (r54 << 24 >> 24 == 60) {
          _genop(r1, r53 << 14 & 8372224 | HEAP32[r48] << 23 | 179);
          break;
        } else {
          r4 = 1719;
          break;
        }
      } else {
        r4 = 1719;
      }
    } while (0);
    L2195 : do {
      if (r4 == 1719) {
        do {
          if (r6) {
            if (HEAP8[r26] << 24 >> 24 != 60) {
              break;
            }
            if (HEAP8[r26 + 1 | 0] << 24 >> 24 != 61) {
              break;
            }
            _genop(r1, r53 << 14 & 8372224 | HEAP32[r48] << 23 | 180);
            break L2195;
          }
        } while (0);
        do {
          if (r47) {
            if (HEAP8[r26] << 24 >> 24 != 62) {
              break;
            }
            _genop(r1, r53 << 14 & 8372224 | HEAP32[r48] << 23 | 181);
            break L2195;
          }
        } while (0);
        do {
          if (r6) {
            if (HEAP8[r26] << 24 >> 24 != 62) {
              break;
            }
            if (HEAP8[r26 + 1 | 0] << 24 >> 24 != 61) {
              break;
            }
            _genop(r1, r53 << 14 & 8372224 | HEAP32[r48] << 23 | 182);
            break L2195;
          }
        } while (0);
        _genop(r1, r53 << 14 & 8372224 | HEAP32[r48] << 23 | 160);
      }
    } while (0);
    r53 = HEAP32[r39];
    _gen_assignment(r1, HEAP32[r53 >> 2], HEAP32[r53 + 4 >> 2], HEAP32[r48], r3);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 32) {
    _push_(r1);
    do {
      if ((r19 | 0) == 0) {
        r55 = 0;
        r56 = 0;
        r4 = 1738;
      } else {
        r48 = HEAP32[r2];
        do {
          if ((r48 | 0) == 0) {
            r57 = 0;
            r58 = 0;
          } else {
            r53 = _gen_values(r1, r48, 1);
            if ((r53 | 0) >= 0) {
              r57 = 0;
              r58 = r53;
              break;
            }
            _push_(r1);
            r57 = 1;
            r58 = 1;
          }
        } while (0);
        r48 = HEAP32[r2 + 1];
        if ((r48 | 0) == 0) {
          r55 = r57;
          r56 = r58;
          r4 = 1738;
          break;
        }
        _codegen(r1, r48, 1);
        r48 = r1 + 56 | 0;
        r53 = HEAP32[r48 >> 2] - 1 | 0;
        HEAP32[r48 >> 2] = r53;
        r59 = r57;
        r60 = r58;
        r61 = r53;
        break;
      }
    } while (0);
    if (r4 == 1738) {
      r58 = r1 + 56 | 0;
      _genop(r1, HEAP32[r58 >> 2] << 23 | 5);
      r59 = r55;
      r60 = r56;
      r61 = HEAP32[r58 >> 2];
    }
    r58 = r61 + (r60 ^ -1) | 0;
    HEAP32[r1 + 56 >> 2] = r58;
    _genop(r1, ((r59 | 0) == 0 ? r60 << 7 & 16256 | 36 : 16292) | r58 << 23);
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 33) {
    _push_(r1);
    r58 = r1;
    r60 = 0;
    while (1) {
      r62 = HEAP32[r58 + 68 >> 2];
      if ((r62 & 32768 | 0) != 0) {
        r4 = 1744;
        break;
      }
      r59 = r60 + 1 | 0;
      r61 = HEAP32[r58 + 48 >> 2];
      if ((r61 | 0) == 0) {
        r63 = 0;
        r64 = r59;
        break;
      } else {
        r58 = r61;
        r60 = r59;
      }
    }
    do {
      if (r4 == 1744) {
        if ((r58 | 0) == 0) {
          r63 = 0;
          r64 = r60;
          break;
        }
        r63 = r62 << 4 & 65520;
        r64 = r60;
      }
    } while (0);
    r60 = (r1 + 56 | 0) >> 2;
    _genop(r1, (r63 | r64 & 15) << 7 | HEAP32[r60] << 23 | 37);
    do {
      if ((r19 | 0) != 0) {
        r64 = r19 + 4 | 0;
        if ((HEAP32[r64 >> 2] | 0) == 0) {
          break;
        }
        _push_(r1);
        _codegen(r1, HEAP32[r64 >> 2], 1);
        HEAP32[r60] = HEAP32[r60] - 2 | 0;
      }
    } while (0);
    r64 = HEAP32[r60] - 1 | 0;
    HEAP32[r60] = r64;
    _genop(r1, r64 << 23 | 16292);
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 37) {
    _codegen(r1, r19, 1);
    r64 = r1 + 56 | 0;
    r60 = HEAP32[r64 >> 2] - 1 | 0;
    HEAP32[r64 >> 2] = r60;
    r64 = r60 << 23;
    if ((HEAP32[r1 + 72 >> 2] | 0) == 0) {
      _genop_peep(r1, r64 | 41, 0);
    } else {
      _genop(r1, r64 | 32809);
    }
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 38) {
    r64 = r1;
    r60 = 0;
    while (1) {
      r65 = HEAP32[r64 + 68 >> 2];
      if ((r65 & 32768 | 0) != 0) {
        r4 = 1757;
        break;
      }
      r63 = r60 + 1 | 0;
      r62 = HEAP32[r64 + 48 >> 2];
      if ((r62 | 0) == 0) {
        r66 = 0;
        r67 = r63;
        break;
      } else {
        r64 = r62;
        r60 = r63;
      }
    }
    do {
      if (r4 == 1757) {
        if ((r64 | 0) == 0) {
          r66 = 0;
          r67 = r60;
          break;
        }
        r66 = r65 << 4 & 65520;
        r67 = r60;
      }
    } while (0);
    r60 = (r1 + 56 | 0) >> 2;
    _genop(r1, (r66 | r67 & 15) << 7 | HEAP32[r60] << 23 | 43);
    _push_(r1);
    do {
      if ((r19 | 0) == 0) {
        r68 = 0;
        r69 = 0;
      } else {
        r67 = _gen_values(r1, r19, 1);
        if ((r67 | 0) >= 0) {
          r68 = r67;
          r69 = r67;
          break;
        }
        _push_(r1);
        r68 = 1;
        r69 = 127;
      }
    } while (0);
    r67 = HEAP32[r60] + (r68 ^ -1) | 0;
    HEAP32[r60] = r67;
    _genop(r1, r69 << 7 & 16256 | r67 << 23 | _new_msym(r1, _mrb_intern(HEAP32[r1 >> 2], 5320144)) << 14 & 8372224 | 32);
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 13) {
    _loop_break(r1, r19);
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 14) {
    r67 = r1 + 72 | 0;
    r69 = HEAP32[r67 >> 2];
    do {
      if ((r69 | 0) == 0) {
        _raise_error(r1, 5315736);
      } else {
        if ((HEAP32[r69 >> 2] | 0) == 0) {
          r60 = HEAP32[r1 + 76 >> 2];
          r68 = HEAP32[r69 + 20 >> 2];
          if ((r60 | 0) > (r68 | 0)) {
            _genop_peep(r1, r60 - r68 << 23 | 31, 0);
          }
          _codegen(r1, r19, 0);
          _genop(r1, (HEAP32[HEAP32[r67 >> 2] + 4 >> 2] - HEAP32[r1 + 60 >> 2] << 7) + 4194176 & 8388480 | 23);
          break;
        }
        if ((r19 | 0) == 0) {
          r70 = HEAP32[r1 + 56 >> 2];
        } else {
          _codegen(r1, r19, 1);
          r68 = r1 + 56 | 0;
          r60 = HEAP32[r68 >> 2] - 1 | 0;
          HEAP32[r68 >> 2] = r60;
          r70 = r60;
        }
        _genop_peep(r1, r70 << 23 | 41, 0);
      }
    } while (0);
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 15) {
    r70 = r1 + 72 | 0;
    r67 = HEAP32[r70 >> 2];
    if ((r67 | 0) == 0) {
      _raise_error(r1, 5315072);
      STACKTOP = r5;
      return;
    }
    r69 = HEAP32[r1 + 76 >> 2];
    r60 = HEAP32[r67 + 20 >> 2];
    if ((r69 | 0) > (r60 | 0)) {
      _genop_peep(r1, r69 - r60 << 23 | 31, 0);
      r71 = HEAP32[r70 >> 2];
    } else {
      r71 = r67;
    }
    _genop(r1, (HEAP32[r71 + 8 >> 2] - HEAP32[r1 + 60 >> 2] << 7) + 4194176 & 8388480 | 23);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 16) {
    r71 = HEAP32[r1 + 72 >> 2];
    if ((r71 | 0) == 0) {
      _raise_error(r1, 5314712);
      STACKTOP = r5;
      return;
    } else {
      r72 = 0;
      r73 = r71, r74 = r73 >> 2;
    }
    while (1) {
      r71 = HEAP32[r74];
      if ((r71 | 0) == 4) {
        break;
      }
      r67 = HEAP32[r74 + 6];
      if ((r67 | 0) == 0) {
        r4 = 1787;
        break;
      } else {
        r72 = ((r71 | 0) == 3 & 1) + r72 | 0;
        r73 = r67, r74 = r73 >> 2;
      }
    }
    if (r4 == 1787) {
      _raise_error(r1, 5314712);
      STACKTOP = r5;
      return;
    }
    L2309 : do {
      if ((r72 | 0) > 0) {
        r4 = r72;
        while (1) {
          r73 = r4 - 1 | 0;
          _genop_peep(r1, 8388636, 0);
          if ((r73 | 0) == 0) {
            break L2309;
          } else {
            r4 = r73;
          }
        }
      }
    } while (0);
    r72 = HEAP32[r1 + 76 >> 2];
    r4 = HEAP32[r74 + 5];
    if ((r72 | 0) > (r4 | 0)) {
      _genop_peep(r1, r72 - r4 << 23 | 31, 0);
    }
    _genop(r1, (HEAP32[r74 + 1] - HEAP32[r1 + 60 >> 2] << 7) + 4194176 & 8388480 | 23);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 39) {
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    r74 = r19 & 65535;
    r4 = _lv_idx(HEAP32[r1 + 52 >> 2], r74);
    L2321 : do {
      if ((r4 | 0) > 0) {
        _genop(r1, r4 << 14 & 8372224 | HEAP32[r1 + 56 >> 2] << 23 | 1);
      } else {
        r72 = 0;
        r73 = r1;
        while (1) {
          r67 = HEAP32[r73 + 48 >> 2];
          if ((r67 | 0) == 0) {
            break L2321;
          }
          r75 = _lv_idx(HEAP32[r67 + 52 >> 2], r74);
          if ((r75 | 0) > 0) {
            break;
          } else {
            r72 = r72 + 1 | 0;
            r73 = r67;
          }
        }
        _genop(r1, r72 << 7 & 16256 | r75 << 14 & 8372224 | HEAP32[r1 + 56 >> 2] << 23 | 21);
      }
    } while (0);
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 41) {
    _genop(r1, _new_sym862(r1, r19 & 65535) << 7 & 8388480 | HEAP32[r1 + 56 >> 2] << 23 | 9);
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 42) {
    _genop(r1, _new_sym862(r1, r19 & 65535) << 7 & 8388480 | HEAP32[r1 + 56 >> 2] << 23 | 13);
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 44) {
    _genop(r1, _new_sym862(r1, r19 & 65535) << 7 & 8388480 | HEAP32[r1 + 56 >> 2] << 23 | 15);
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 43) {
    _genop(r1, _new_sym862(r1, r19 & 65535) << 7 & 8388480 | HEAP32[r1 + 56 >> 2] << 23 | 17);
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 86) {
    _codegen(r1, r19, 1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 46) {
    r75 = r7 | 0;
    r7 = _snprintf(r75, 4, 5314368, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r19, tempInt));
    _genop(r1, _new_sym862(r1, _mrb_intern2(HEAP32[r1 >> 2], r75, r7)) << 7 & 8388480 | HEAP32[r1 + 56 >> 2] << 23 | 9);
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 45) {
    r7 = r8 | 0;
    r8 = _snprintf(r7, 4, 5313928, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r19, tempInt));
    _genop(r1, _new_sym862(r1, _mrb_intern2(HEAP32[r1 >> 2], r7, r8)) << 7 & 8388480 | HEAP32[r1 + 56 >> 2] << 23 | 9);
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 66) {
    _codegen(r1, r19, 1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 50) {
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    r8 = HEAP32[r2];
    r7 = HEAP32[HEAP32[r2 + 1] >> 2];
    r75 = _readint_mrb_int(r1, r8, r7, 0, r9);
    if ((HEAP32[r9 >> 2] | 0) == 0) {
      if ((r75 + 32766 | 0) >>> 0 < 65533) {
        r76 = (r75 << 7) + 4194176 & 8388480 | HEAP32[r1 + 56 >> 2] << 23 | 3;
      } else {
        _mrb_fixnum_value864(r11, r75);
        r76 = _new_lit(r1, r11) << 7 & 8388480 | HEAP32[r1 + 56 >> 2] << 23 | 2;
      }
      _genop(r1, r76);
    } else {
      _mrb_float_value863(r10, _readint_float(r1, r8, r7));
      _genop(r1, _new_lit(r1, r10) << 7 & 8388480 | HEAP32[r1 + 56 >> 2] << 23 | 2);
    }
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 51) {
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _mrb_float_value863(r12, _strtod(r19, 0));
    _genop(r1, _new_lit(r1, r12) << 7 & 8388480 | HEAP32[r1 + 56 >> 2] << 23 | 2);
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 52) {
    r12 = HEAP32[r2];
    r10 = HEAP32[r2 + 1];
    if ((r12 | 0) == 51) {
      _mrb_float_value863(r13, -_strtod(r10, 0));
      _genop(r1, _new_lit(r1, r13) << 7 & 8388480 | HEAP32[r1 + 56 >> 2] << 23 | 2);
      _push_(r1);
      STACKTOP = r5;
      return;
    } else if ((r12 | 0) == 50) {
      r12 = HEAP32[r10 >> 2];
      r13 = HEAP32[HEAP32[r10 + 4 >> 2] >> 2];
      r7 = _readint_mrb_int(r1, r12, r13, 1, r14);
      if ((HEAP32[r14 >> 2] | 0) == 0) {
        if ((r7 + 32766 | 0) >>> 0 < 65533) {
          r77 = (r7 << 7) + 4194176 & 8388480 | HEAP32[r1 + 56 >> 2] << 23 | 3;
        } else {
          _mrb_fixnum_value864(r16, r7);
          r77 = _new_lit(r1, r16) << 7 & 8388480 | HEAP32[r1 + 56 >> 2] << 23 | 2;
        }
        _genop(r1, r77);
      } else {
        _mrb_float_value863(r15, -_readint_float(r1, r12, r13));
        _genop(r1, _new_lit(r1, r15) << 7 & 8388480 | HEAP32[r1 + 56 >> 2] << 23 | 2);
      }
      _push_(r1);
      STACKTOP = r5;
      return;
    } else {
      r15 = _new_msym(r1, _mrb_intern(HEAP32[r1 >> 2], 5326088));
      r13 = (r1 + 56 | 0) >> 2;
      _genop(r1, HEAP32[r13] << 23 | 3);
      _push_(r1);
      _codegen(r1, r10, 1);
      r10 = HEAP32[r13] - 2 | 0;
      HEAP32[r13] = r10;
      _genop(r1, r15 << 14 & 8372224 | r10 << 23 | 302);
      STACKTOP = r5;
      return;
    }
  } else if ((r18 | 0) == 55) {
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    r10 = HEAP32[r2];
    r15 = HEAP32[r2 + 1];
    r13 = r1 | 0;
    r12 = HEAP32[r13 >> 2];
    r77 = _mrb_gc_arena_save(HEAP32[r12 + 544 >> 2]);
    _mrb_str_new(r17, r12, r10, r15);
    r15 = _new_lit(r1, r17);
    _mrb_gc_arena_restore(HEAP32[r13 >> 2], r77);
    _genop(r1, r15 << 7 & 8388480 | HEAP32[r1 + 56 >> 2] << 23 | 61);
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 56) {
    if ((r3 | 0) != 0) {
      _codegen(r1, HEAP32[r2], 1);
      r15 = HEAP32[r2 + 1];
      if ((r15 | 0) == 0) {
        STACKTOP = r5;
        return;
      }
      r77 = r1 + 56 | 0;
      r13 = r15;
      while (1) {
        _codegen(r1, HEAP32[r13 >> 2], 1);
        r15 = HEAP32[r77 >> 2];
        r17 = r15 - 2 | 0;
        HEAP32[r77 >> 2] = r17;
        _genop(r1, r17 << 23 | (r15 << 14) + 8372224 & 8372224 | 62);
        _push_(r1);
        r15 = HEAP32[r13 + 4 >> 2];
        if ((r15 | 0) == 0) {
          break;
        } else {
          r13 = r15;
        }
      }
      STACKTOP = r5;
      return;
    }
    if ((r19 | 0) == 0) {
      STACKTOP = r5;
      return;
    } else {
      r78 = r19;
    }
    while (1) {
      r13 = HEAP32[r78 >> 2];
      if ((HEAP32[r13 >> 2] | 0) != 55) {
        _codegen(r1, r13, 0);
      }
      r13 = HEAP32[r78 + 4 >> 2];
      if ((r13 | 0) == 0) {
        break;
      } else {
        r78 = r13;
      }
    }
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 54) {
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _genop(r1, _new_sym862(r1, r19 & 65535) << 7 & 8388480 | HEAP32[r1 + 56 >> 2] << 23 | 4);
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 94) {
    _codegen(r1, r19, r3);
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    r78 = r1 + 56 | 0;
    r13 = HEAP32[r78 >> 2] - 1 | 0;
    HEAP32[r78 >> 2] = r13;
    _genop(r1, r13 << 23 | _new_msym(r1, _mrb_intern(HEAP32[r1 >> 2], 5325912)) << 14 & 8372224 | 32);
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 82) {
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _genop(r1, HEAP32[r1 + 56 >> 2] << 23 | 6);
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 83) {
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _genop(r1, HEAP32[r1 + 56 >> 2] << 23 | 5);
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 84) {
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _genop(r1, HEAP32[r1 + 56 >> 2] << 23 | 7);
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 85) {
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _genop(r1, HEAP32[r1 + 56 >> 2] << 23 | 8);
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 69) {
    r13 = _new_msym(r1, HEAP32[r2] & 65535);
    r78 = _new_msym(r1, HEAP32[r2 + 1] & 65535);
    r77 = _new_msym(r1, _mrb_intern(HEAP32[r1 >> 2], 5325796));
    r15 = (r1 + 56 | 0) >> 2;
    _genop(r1, HEAP32[r15] << 23 | 72);
    _push_(r1);
    _genop(r1, r13 << 7 & 8388480 | HEAP32[r15] << 23 | 4);
    _push_(r1);
    _genop(r1, r78 << 7 & 8388480 | HEAP32[r15] << 23 | 4);
    _push_(r1);
    _genop(r1, HEAP32[r15] << 23 | 5);
    r78 = HEAP32[r15] - 3 | 0;
    HEAP32[r15] = r78;
    _genop(r1, r77 << 14 & 8372224 | r78 << 23 | 288);
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 70) {
    r78 = _new_msym(r1, _mrb_intern(HEAP32[r1 >> 2], 5325576));
    r77 = (r1 + 56 | 0) >> 2;
    _genop(r1, HEAP32[r77] << 23 | 72);
    _push_(r1);
    L2438 : do {
      if ((r19 | 0) == 0) {
        r79 = 0;
      } else {
        r15 = 0;
        r13 = r19;
        while (1) {
          _genop(r1, _new_msym(r1, HEAP32[r13 >> 2] & 65535) << 7 & 8388480 | HEAP32[r77] << 23 | 4);
          _push_(r1);
          r17 = HEAP32[r13 + 4 >> 2];
          r10 = r15 + 1 | 0;
          if ((r17 | 0) == 0) {
            r79 = r10;
            break L2438;
          } else {
            r15 = r10;
            r13 = r17;
          }
        }
      }
    } while (0);
    r13 = HEAP32[r77] + (r79 ^ -1) | 0;
    HEAP32[r77] = r13;
    _genop(r1, r78 << 14 & 8372224 | r79 << 7 & 16256 | r13 << 23 | 32);
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 71) {
    r13 = r19 | 0;
    r79 = HEAP32[HEAP32[r13 >> 2] >> 2];
    r78 = r79;
    if ((r78 | 0) == 0) {
      _genop(r1, HEAP32[r1 + 56 >> 2] << 23 | 5);
      _push_(r1);
    } else if ((r78 | 0) == 1) {
      _genop(r1, HEAP32[r1 + 56 >> 2] << 23 | 66);
      _push_(r1);
    } else {
      _codegen(r1, r79, 1);
    }
    r79 = r19 + 4 | 0;
    r78 = HEAP32[HEAP32[r79 >> 2] >> 2];
    if ((r78 | 0) == 0) {
      r77 = r1 + 56 | 0;
      _genop(r1, HEAP32[r77 >> 2] << 23 | 5);
      _push_(r1);
      r15 = r77, r80 = r15 >> 2;
    } else {
      _codegen(r1, r78, 1);
      r15 = r1 + 56 | 0, r80 = r15 >> 2;
    }
    HEAP32[r80] = HEAP32[r80] - 2 | 0;
    _genop(r1, _new_msym(r1, HEAP32[HEAP32[r13 >> 2] + 4 >> 2] & 65535) << 14 & 8372224 | HEAP32[r80] << 23 | 67);
    _genop(r1, _scope_body(r1, HEAP32[HEAP32[HEAP32[r79 >> 2] + 4 >> 2] >> 2]) << 7 & 8388480 | HEAP32[r80] << 23 | 69);
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 72) {
    r80 = r19 | 0;
    r79 = HEAP32[HEAP32[r80 >> 2] >> 2];
    r13 = r79;
    if ((r13 | 0) == 0) {
      r15 = r1 + 56 | 0;
      _genop(r1, HEAP32[r15 >> 2] << 23 | 5);
      _push_(r1);
      r78 = r15, r81 = r78 >> 2;
    } else if ((r13 | 0) == 1) {
      r13 = r1 + 56 | 0;
      _genop(r1, HEAP32[r13 >> 2] << 23 | 66);
      _push_(r1);
      r78 = r13, r81 = r78 >> 2;
    } else {
      _codegen(r1, r79, 1);
      r78 = r1 + 56 | 0, r81 = r78 >> 2;
    }
    HEAP32[r81] = HEAP32[r81] - 1 | 0;
    _genop(r1, _new_msym(r1, HEAP32[HEAP32[r80 >> 2] + 4 >> 2] & 65535) << 14 & 8372224 | HEAP32[r81] << 23 | 68);
    _genop(r1, _scope_body(r1, HEAP32[HEAP32[r2 + 1] >> 2]) << 7 & 8388480 | HEAP32[r81] << 23 | 69);
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 73) {
    _codegen(r1, HEAP32[r2], 1);
    r81 = (r1 + 56 | 0) >> 2;
    r80 = HEAP32[r81] - 1 | 0;
    HEAP32[r81] = r80;
    _genop(r1, r80 << 23 | r80 << 14 & 8372224 | 71);
    _genop(r1, _scope_body(r1, HEAP32[HEAP32[r2 + 1] >> 2]) << 7 & 8388480 | HEAP32[r81] << 23 | 69);
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _push_(r1);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 67) {
    r81 = _new_msym(r1, HEAP32[r2] & 65535);
    r80 = _lambda_body(r1, HEAP32[r2 + 1], 0);
    r78 = (r1 + 56 | 0) >> 2;
    _genop(r1, HEAP32[r78] << 23 | 72);
    _push_(r1);
    _genop(r1, r80 << 9 & 8388096 | HEAP32[r78] << 23 | 192);
    r80 = HEAP32[r78] - 1 | 0;
    HEAP32[r78] = r80;
    _genop(r1, r81 << 14 & 8372224 | r80 << 23 | 70);
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _genop(r1, HEAP32[r78] << 23 | 5);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 68) {
    r78 = HEAP32[r2];
    r2 = r19 + 4 | 0;
    r80 = _new_msym(r1, HEAP32[HEAP32[r2 >> 2] >> 2] & 65535);
    r81 = _lambda_body(r1, HEAP32[HEAP32[r2 >> 2] + 4 >> 2], 0);
    _codegen(r1, r78, 1);
    r78 = (r1 + 56 | 0) >> 2;
    r2 = HEAP32[r78] - 1 | 0;
    HEAP32[r78] = r2;
    _genop(r1, r2 << 23 | r2 << 14 & 8372224 | 71);
    _push_(r1);
    _genop(r1, r81 << 9 & 8388096 | HEAP32[r78] << 23 | 192);
    r81 = HEAP32[r78] - 1 | 0;
    HEAP32[r78] = r81;
    _genop(r1, r80 << 14 & 8372224 | r81 << 23 | 70);
    if ((r3 | 0) == 0) {
      STACKTOP = r5;
      return;
    }
    _genop(r1, HEAP32[r78] << 23 | 5);
    STACKTOP = r5;
    return;
  } else if ((r18 | 0) == 88) {
    _codegen(r1, r19, 0);
    STACKTOP = r5;
    return;
  } else {
    STACKTOP = r5;
    return;
  }
}
_codegen["X"] = 1;
function _new_label(r1) {
  var r2;
  r2 = HEAP32[r1 + 60 >> 2];
  HEAP32[r1 + 64 >> 2] = r2;
  return r2;
}
function _genop(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r3 = (r1 + 60 | 0) >> 2;
  r4 = HEAP32[r3];
  r5 = (r1 + 96 | 0) >> 2;
  do {
    if ((r4 | 0) == (HEAP32[r5] | 0)) {
      HEAP32[r5] = r4 << 1;
      r6 = r1 + 88 | 0;
      HEAP32[r6 >> 2] = _codegen_realloc(r1, HEAP32[r6 >> 2], r4 << 3);
      r7 = r1 + 92 | 0;
      r8 = HEAP32[r7 >> 2];
      if ((r8 | 0) == 0) {
        r9 = r6;
        r10 = r7;
        break;
      }
      HEAP32[r7 >> 2] = _codegen_realloc(r1, r8, HEAP32[r5] << 1);
      r9 = r6;
      r10 = r7;
    } else {
      r9 = r1 + 88 | 0;
      r10 = r1 + 92 | 0;
    }
  } while (0);
  HEAP32[HEAP32[r9 >> 2] + (HEAP32[r3] << 2) >> 2] = r2;
  r2 = HEAP32[r10 >> 2];
  if ((r2 | 0) == 0) {
    r11 = HEAP32[r3];
    r12 = r11 + 1 | 0;
    HEAP32[r3] = r12;
    return;
  }
  HEAP16[r2 + (HEAP32[r3] << 1) >> 1] = HEAP16[r1 + 84 >> 1];
  r11 = HEAP32[r3];
  r12 = r11 + 1 | 0;
  HEAP32[r3] = r12;
  return;
}
function _push_(r1) {
  var r2, r3, r4;
  r2 = (r1 + 56 | 0) >> 2;
  r3 = HEAP32[r2];
  if ((r3 | 0) > 511) {
    _codegen_error(r1, 5323088);
    r4 = HEAP32[r2];
  } else {
    r4 = r3;
  }
  r3 = r4 + 1 | 0;
  HEAP32[r2] = r3;
  r2 = r1 + 116 | 0;
  if ((r3 | 0) <= (HEAP32[r2 >> 2] | 0)) {
    return;
  }
  HEAP32[r2 >> 2] = r3;
  return;
}
function _loop_push(r1, r2) {
  var r3, r4, r5;
  r3 = _codegen_palloc(r1, 28), r4 = r3 >> 2;
  r5 = r3;
  HEAP32[r4] = r2;
  HEAP32[r4 + 3] = 0;
  HEAP32[r4 + 2] = 0;
  HEAP32[r4 + 1] = 0;
  r2 = r1 + 72 | 0;
  HEAP32[r4 + 6] = HEAP32[r2 >> 2];
  HEAP32[r4 + 5] = HEAP32[r1 + 76 >> 2];
  HEAP32[r4 + 4] = HEAP32[r1 + 56 >> 2];
  HEAP32[r2 >> 2] = r5;
  return r5;
}
function _new_msym(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10;
  r3 = 0;
  r4 = (r1 + 100 | 0) >> 2;
  r5 = HEAP32[r4];
  r6 = HEAP32[r5 + 36 >> 2];
  r7 = (r6 | 0) > 256 ? 256 : r6;
  r6 = r5 + 16 | 0;
  r8 = 0;
  while (1) {
    if ((r8 | 0) >= (r7 | 0)) {
      break;
    }
    r9 = HEAP16[HEAP32[r6 >> 2] + (r8 << 1) >> 1];
    if (r9 << 16 >> 16 == r2 << 16 >> 16) {
      r3 = 2015;
      break;
    }
    if (r9 << 16 >> 16 == 0) {
      break;
    } else {
      r8 = r8 + 1 | 0;
    }
  }
  if (r3 == 2015) {
    return r8;
  }
  if ((r8 | 0) == 256) {
    _codegen_error(r1, 5323676);
    r10 = HEAP32[r4];
  } else {
    r10 = r5;
  }
  HEAP16[HEAP32[r10 + 16 >> 2] + (r8 << 1) >> 1] = r2;
  r2 = HEAP32[r4] + 36 | 0;
  if ((r8 | 0) != (HEAP32[r2 >> 2] | 0)) {
    return r8;
  }
  HEAP32[r2 >> 2] = r8 + 1 | 0;
  return r8;
}
function _dispatch_linked(r1, r2) {
  var r3, r4;
  if ((r2 | 0) == 0) {
    return;
  }
  r3 = r1 + 88 | 0;
  r4 = r2;
  while (1) {
    r2 = (HEAP32[HEAP32[r3 >> 2] + (r4 << 2) >> 2] >>> 7 & 65535) - 32767 | 0;
    _dispatch(r1, r4);
    if ((r2 | 0) == 0) {
      break;
    } else {
      r4 = r2;
    }
  }
  return;
}
function _gen_assignment(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12;
  r6 = STACKTOP;
  r7 = r2;
  L2531 : do {
    if ((r7 | 0) == 39) {
      r2 = r3 & 65535;
      r8 = _lv_idx(HEAP32[r1 + 52 >> 2], r2);
      if ((r8 | 0) > 0) {
        if ((r8 | 0) == (r4 | 0)) {
          break;
        }
        _genop_peep(r1, r4 << 14 & 8372224 | r8 << 23 | 1, r5);
        break;
      } else {
        r9 = r1;
        r10 = 0;
      }
      while (1) {
        r8 = HEAP32[r9 + 48 >> 2];
        if ((r8 | 0) == 0) {
          break L2531;
        }
        r11 = _lv_idx(HEAP32[r8 + 52 >> 2], r2);
        if ((r11 | 0) > 0) {
          break;
        } else {
          r9 = r8;
          r10 = r10 + 1 | 0;
        }
      }
      _genop_peep(r1, r4 << 23 | r10 << 7 & 16256 | r11 << 14 & 8372224 | 22, r5);
    } else if ((r7 | 0) == 42) {
      _genop_peep(r1, r4 << 23 | _new_sym862(r1, r3 & 65535) << 7 & 8388480 | 14, r5);
    } else if ((r7 | 0) == 43) {
      _genop_peep(r1, r4 << 23 | _new_sym862(r1, r3 & 65535) << 7 & 8388480 | 18, r5);
    } else if ((r7 | 0) == 41) {
      _genop_peep(r1, r4 << 23 | _new_sym862(r1, r3 & 65535) << 7 & 8388480 | 10, r5);
    } else if ((r7 | 0) == 44) {
      _genop_peep(r1, r4 << 23 | _new_sym862(r1, r3 & 65535) << 7 & 8388480 | 16, r5);
    } else if ((r7 | 0) == 74) {
      r2 = _new_sym862(r1, HEAP32[r3 + 4 >> 2] & 65535);
      r8 = (r1 + 56 | 0) >> 2;
      _genop_peep(r1, r4 << 14 & 8372224 | HEAP32[r8] << 23 | 1, 0);
      _push_(r1);
      _codegen(r1, HEAP32[r3 >> 2], 1);
      r12 = HEAP32[r8] - 2 | 0;
      HEAP32[r8] = r12;
      _genop_peep(r1, r2 << 7 & 8388480 | r12 << 23 | 20, r5);
    } else if ((r7 | 0) == 29) {
      _push_(r1);
      _gen_call(r1, r3, _attrsym(r1, HEAP32[HEAP32[r3 + 4 >> 2] >> 2] & 65535), r4, 0);
      r12 = r1 + 56 | 0;
      r2 = HEAP32[r12 >> 2] - 1 | 0;
      HEAP32[r12 >> 2] = r2;
      if ((r5 | 0) == 0) {
        STACKTOP = r6;
        return;
      } else {
        _genop_peep(r1, r4 << 14 & 8372224 | r2 << 23 | 1, r5);
        break;
      }
    } else {
      _printf(5324344, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r7, tempInt));
    }
  } while (0);
  if ((r5 | 0) == 0) {
    STACKTOP = r6;
    return;
  }
  _push_(r1);
  STACKTOP = r6;
  return;
}
_gen_assignment["X"] = 1;
function _loop_pop(r1, r2) {
  if ((r2 | 0) == 0) {
    r2 = (r1 + 72 | 0) >> 2;
    _dispatch_linked(r1, HEAP32[HEAP32[r2] + 12 >> 2]);
    HEAP32[r2] = HEAP32[HEAP32[r2] + 24 >> 2];
    return;
  } else {
    _genop(r1, HEAP32[r1 + 56 >> 2] << 23 | 5);
    r2 = (r1 + 72 | 0) >> 2;
    _dispatch_linked(r1, HEAP32[HEAP32[r2] + 12 >> 2]);
    HEAP32[r2] = HEAP32[HEAP32[r2] + 24 >> 2];
    _push_(r1);
    return;
  }
}
function _scope_body(r1, r2) {
  var r3, r4, r5;
  r3 = _scope_new(HEAP32[r1 >> 2], r1, HEAP32[r2 >> 2]), r4 = r3 >> 2;
  r5 = HEAP32[r4 + 31];
  _codegen(r3, HEAP32[r2 + 4 >> 2], 1);
  do {
    if ((HEAP32[r1 + 88 >> 2] | 0) == 0) {
      _genop(r3, 74);
    } else {
      if ((HEAP32[r4 + 29] | 0) == 0) {
        _genop(r3, 5);
        _genop(r3, 41);
        break;
      } else {
        _genop_peep(r3, HEAP32[r4 + 14] << 23 | 41, 0);
        break;
      }
    }
  } while (0);
  _scope_finish(r3);
  return r5 - HEAP32[r1 + 124 >> 2] | 0;
}
function _genop_peep(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r4 = r1 >> 2;
  r5 = (r1 + 60 | 0) >> 2;
  r6 = HEAP32[r5];
  do {
    if ((HEAP32[r4 + 16] | 0) != (r6 | 0) & (r6 | 0) > 0) {
      r7 = r6 - 1 | 0;
      r8 = r1 + 88 | 0;
      r9 = ((r7 << 2) + HEAP32[r8 >> 2] | 0) >> 2;
      r10 = HEAP32[r9];
      r11 = r2 & 127;
      r12 = r10 & 127;
      if ((r11 | 0) == 31) {
        if ((r12 | 0) != 31) {
          break;
        }
        HEAP32[r9] = (r10 & -8388608) + r2 & -8388608 | 31;
        return;
      } else if ((r11 | 0) == 41) {
        if ((r12 | 0) == 41) {
          return;
        } else if ((r12 | 0) == 1) {
          HEAP32[r9] = r10 >>> 14 << 23 | 41;
          return;
        } else if ((r12 | 0) == 3) {
          HEAP32[r9] = r10 & 8388480 | 3;
          _genop(r1, 41);
          return;
        } else if ((r12 | 0) == 55 | (r12 | 0) == 63 | (r12 | 0) == 65 | (r12 | 0) == 58 | (r12 | 0) == 21) {
          HEAP32[r9] = r10 & 8388607;
          _genop(r1, 41);
          return;
        } else if ((r12 | 0) == 4 | (r12 | 0) == 9 | (r12 | 0) == 13 | (r12 | 0) == 15 | (r12 | 0) == 17 | (r12 | 0) == 11 | (r12 | 0) == 2 | (r12 | 0) == 61) {
          HEAP32[r9] = r10 & 8388607;
          _genop(r1, 41);
          return;
        } else if ((r12 | 0) == 71) {
          HEAP32[r9] = r2 & -8388608 | r10 & 8372224 | 71;
          _genop(r1, 41);
          return;
        } else if ((r12 | 0) == 5 | (r12 | 0) == 6 | (r12 | 0) == 7 | (r12 | 0) == 8 | (r12 | 0) == 66) {
          HEAP32[r9] = r12;
          _genop(r1, 41);
          return;
        } else if ((r12 | 0) == 14 | (r12 | 0) == 16 | (r12 | 0) == 18 | (r12 | 0) == 20 | (r12 | 0) == 22 | (r12 | 0) == 10) {
          HEAP32[r5] = r7;
          _genop_peep(r1, r10, 0);
          _genop(r1, HEAP32[HEAP32[r8 >> 2] + (HEAP32[r5] - 1 << 2) >> 2] & -8388608 | 41);
          return;
        } else {
          break;
        }
      } else if ((r11 | 0) == 28) {
        if ((r12 | 0) != 28) {
          break;
        }
        HEAP32[r9] = (r10 & -8388608) + r2 & -8388608 | 28;
        return;
      } else if ((r11 | 0) == 1) {
        r8 = r2 >>> 23;
        r7 = r2 >>> 14 & 511;
        if ((r8 | 0) == (r7 | 0)) {
          return;
        }
        if ((r3 | 0) != 0) {
          break;
        }
        if ((r12 | 0) == 1) {
          if ((r7 | 0) != (r10 >>> 23 | 0)) {
            break;
          }
          r13 = HEAP32[r4 + 28];
          if (!((r8 | 0) != (r10 >>> 14 & 511 | 0) | (r8 | 0) < (r13 | 0))) {
            return;
          }
          if ((r7 | 0) < (r13 | 0)) {
            break;
          }
          HEAP32[r9] = r8 << 23 | r10 & 8372224 | 1;
          return;
        } else if ((r12 | 0) == 3) {
          if ((r7 | 0) != (r10 >>> 23 | 0)) {
            break;
          }
          if ((r7 | 0) < (HEAP32[r4 + 28] | 0)) {
            break;
          }
          HEAP32[r9] = r8 << 23 | r10 & 8388480 | 3;
          return;
        } else if ((r12 | 0) == 4 | (r12 | 0) == 9 | (r12 | 0) == 13 | (r12 | 0) == 15 | (r12 | 0) == 17 | (r12 | 0) == 11 | (r12 | 0) == 2 | (r12 | 0) == 61) {
          if ((r7 | 0) != (r10 >>> 23 | 0)) {
            break;
          }
          if ((r7 | 0) < (HEAP32[r4 + 28] | 0)) {
            break;
          }
          HEAP32[r9] = r12 | r8 << 23 | r10 & 8388480;
          return;
        } else if ((r12 | 0) == 55 | (r12 | 0) == 63 | (r12 | 0) == 65 | (r12 | 0) == 58 | (r12 | 0) == 21) {
          if ((r7 | 0) != (r10 >>> 23 | 0)) {
            break;
          }
          if ((r7 | 0) < (HEAP32[r4 + 28] | 0)) {
            break;
          }
          HEAP32[r9] = r12 | r8 << 23 | r10 & 8372224 | r10 & 16256;
          return;
        } else if ((r12 | 0) == 71) {
          if ((r7 | 0) != (r10 >>> 23 | 0)) {
            break;
          }
          if ((r7 | 0) < (HEAP32[r4 + 28] | 0)) {
            break;
          }
          HEAP32[r9] = r8 << 23 | r10 & 8372224 | 71;
          return;
        } else if ((r12 | 0) == 5 | (r12 | 0) == 6 | (r12 | 0) == 7 | (r12 | 0) == 8 | (r12 | 0) == 66) {
          if ((r7 | 0) != (r10 >>> 23 | 0)) {
            break;
          }
          if ((r7 | 0) < (HEAP32[r4 + 28] | 0)) {
            break;
          }
          HEAP32[r9] = r12 | r8 << 23;
          return;
        } else {
          break;
        }
      } else if ((r11 | 0) == 44 | (r11 | 0) == 46) {
        if ((r12 | 0) != 3) {
          break;
        }
        r8 = r10 >>> 7 & 65535;
        r7 = (r11 | 0) == 46 ? 32767 - r8 | 0 : r8 - 32767 | 0;
        if ((r7 + 127 | 0) >>> 0 > 254) {
          break;
        }
        r8 = r2 & -16384;
        if ((r7 | 0) > -1) {
          HEAP32[r9] = r8 | r7 << 7 & 16256 | 45;
          return;
        } else {
          HEAP32[r9] = r8 | -r7 << 7 & 16256 | 47;
          return;
        }
      } else if ((r11 | 0) == 14 | (r11 | 0) == 16 | (r11 | 0) == 18 | (r11 | 0) == 20 | (r11 | 0) == 10) {
        if (!((r3 | 0) == 0 & (r12 | 0) == 1)) {
          break;
        }
        if ((r2 >>> 23 | 0) != (r10 >>> 23 | 0)) {
          break;
        }
        HEAP32[r9] = r2 & 8388607 | r10 >>> 14 << 23;
        return;
      } else if ((r11 | 0) == 22) {
        if (!((r3 | 0) == 0 & (r12 | 0) == 1)) {
          break;
        }
        if ((r2 >>> 23 | 0) != (r10 >>> 23 | 0)) {
          break;
        }
        HEAP32[r9] = r2 & 8388607 | r10 >>> 14 << 23;
        return;
      } else {
        break;
      }
    }
  } while (0);
  _genop(r1, r2);
  return;
}
_genop_peep["X"] = 1;
function _dispatch(r1, r2) {
  var r3, r4, r5;
  r3 = HEAP32[r1 + 60 >> 2];
  r4 = (r2 << 2) + HEAP32[r1 + 88 >> 2] | 0;
  r5 = HEAP32[r4 >> 2];
  HEAP32[r1 + 64 >> 2] = r3;
  if (((r5 & 127) - 23 | 0) >>> 0 < 4) {
    HEAP32[r4 >> 2] = (r3 - r2 << 7) + 4194176 & 8388480 | r5 & -8388481;
    return;
  } else {
    _fwrite(5323412, 28, 1, HEAP32[_stderr >> 2]);
    _scope_error();
  }
}
function _nosplat(r1) {
  var r2, r3, r4;
  L2651 : do {
    if ((r1 | 0) == 0) {
      r2 = 1;
    } else {
      r3 = r1;
      while (1) {
        if ((HEAP32[HEAP32[r3 >> 2] >> 2] | 0) == 63) {
          r2 = 0;
          break L2651;
        }
        r4 = HEAP32[r3 + 4 >> 2];
        if ((r4 | 0) == 0) {
          r2 = 1;
          break L2651;
        } else {
          r3 = r4;
        }
      }
    }
  } while (0);
  return r2;
}
function _lambda_body(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20;
  r4 = HEAP32[r1 + 124 >> 2];
  r5 = _scope_new(HEAP32[r1 >> 2], r1, HEAP32[r2 >> 2]), r1 = r5 >> 2;
  r6 = HEAP32[r1 + 31];
  r7 = (r3 | 0) != 0;
  r3 = (r5 + 68 | 0) >> 2;
  HEAP32[r3] = (HEAP32[r3] & -32769 | (r7 & 1) << 15) ^ 32768;
  if (r7) {
    HEAP32[_loop_push(r5, 1) + 4 >> 2] = _new_label(r5);
  }
  r8 = HEAP32[r2 + 4 >> 2];
  r2 = r8 | 0;
  r9 = HEAP32[r2 >> 2];
  do {
    if ((r9 | 0) != 0) {
      r10 = HEAP32[r9 >> 2];
      r11 = _node_len(r10);
      r12 = r10;
      while (1) {
        if ((r12 | 0) == 0) {
          break;
        }
        r12 = HEAP32[r12 + 4 >> 2];
      }
      r12 = HEAP32[r9 + 4 >> 2];
      r10 = _node_len(HEAP32[r12 >> 2]);
      r13 = HEAP32[r12 + 4 >> 2];
      r12 = (HEAP32[r13 >> 2] | 0) != 0 & 1;
      r14 = HEAP32[r13 + 4 >> 2];
      r13 = _node_len(HEAP32[r14 >> 2]);
      r15 = (HEAP32[r14 + 4 >> 2] | 0) != 0 & 1;
      r14 = r13 & 31;
      HEAP32[r3] = r12 << 5 | r10 + r11 << 6 & 4032 | r14 | HEAP32[r3] & -32768;
      _genop(r5, (r10 << 13 & 253952 | r11 << 18 & 8126464 | r12 << 12 | r14 << 7 | r15) << 7 | 38);
      r15 = _new_label(r5);
      r14 = (r10 | 0) > 0;
      if (r14) {
        r12 = 0;
        while (1) {
          _new_label(r5);
          _genop(r5, 4194199);
          r13 = r12 + 1 | 0;
          if ((r13 | 0) == (r10 | 0)) {
            break;
          } else {
            r12 = r13;
          }
        }
        _genop(r5, 4194199);
      }
      r12 = HEAP32[HEAP32[HEAP32[r2 >> 2] + 4 >> 2] >> 2];
      L2671 : do {
        if ((r12 | 0) == 0) {
          r16 = 0;
        } else {
          r10 = r5 + 56 | 0;
          r11 = r5 + 52 | 0;
          r13 = 0;
          r17 = r12;
          while (1) {
            _dispatch(r5, r13 + r15 | 0);
            r18 = r17 | 0;
            _codegen(r5, HEAP32[HEAP32[r18 >> 2] + 4 >> 2], 1);
            r19 = _lv_idx(HEAP32[r11 >> 2], HEAP32[HEAP32[r18 >> 2] >> 2] & 65535);
            r18 = HEAP32[r10 >> 2] - 1 | 0;
            HEAP32[r10 >> 2] = r18;
            _genop_peep(r5, r19 << 23 | r18 << 14 & 8372224 | 1, 0);
            r18 = r13 + 1 | 0;
            r19 = HEAP32[r17 + 4 >> 2];
            if ((r19 | 0) == 0) {
              r16 = r18;
              break L2671;
            } else {
              r13 = r18;
              r17 = r19;
            }
          }
        }
      } while (0);
      if (!r14) {
        break;
      }
      _dispatch(r5, r16 + r15 | 0);
    }
  } while (0);
  _codegen(r5, HEAP32[HEAP32[r8 + 4 >> 2] >> 2], 1);
  r8 = r5 + 56 | 0;
  r16 = HEAP32[r8 >> 2] - 1 | 0;
  HEAP32[r8 >> 2] = r16;
  r8 = HEAP32[r1 + 15];
  do {
    if ((r8 | 0) > 0) {
      if ((HEAP32[HEAP32[r1 + 22] + (r8 - 1 << 2) >> 2] & 8372351 | 0) == 41) {
        if ((r8 | 0) != (HEAP32[r1 + 16] | 0)) {
          break;
        }
      }
      if ((HEAP32[r1 + 29] | 0) == 0) {
        _genop(r5, 5);
        _genop(r5, 41);
        break;
      } else {
        _genop_peep(r5, r16 << 23 | 41, 0);
        break;
      }
    }
  } while (0);
  if (!r7) {
    _scope_finish(r5);
    r20 = r6 - r4 | 0;
    return r20;
  }
  _loop_pop(r5, 0);
  _scope_finish(r5);
  r20 = r6 - r4 | 0;
  return r20;
}
_lambda_body["X"] = 1;
function _for_body(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r3 = 0;
  r4 = HEAP32[r1 + 124 >> 2];
  r5 = r2 + 4 | 0;
  _codegen(r1, HEAP32[HEAP32[r5 >> 2] >> 2], 1);
  r6 = r1 | 0;
  r7 = r2 | 0;
  r2 = _scope_new(HEAP32[r6 >> 2], r1, HEAP32[r7 >> 2]), r8 = r2 >> 2;
  r9 = HEAP32[r8 + 31];
  HEAP32[_loop_push(r2, 2) + 4 >> 2] = _new_label(r2);
  r10 = HEAP32[r7 >> 2];
  r7 = r10 | 0;
  r11 = HEAP32[r7 >> 2];
  do {
    if ((r11 | 0) == 0) {
      r3 = 2164;
    } else {
      if ((HEAP32[r11 + 4 >> 2] | 0) != 0) {
        r3 = 2164;
        break;
      }
      if ((HEAP32[r10 + 4 >> 2] | 0) != 0) {
        r3 = 2164;
        break;
      }
      _genop(r2, 33554470);
      r12 = HEAP32[HEAP32[r7 >> 2] >> 2];
      _gen_assignment(r2, HEAP32[r12 >> 2], HEAP32[r12 + 4 >> 2], 1, 0);
      break;
    }
  } while (0);
  if (r3 == 2164) {
    _genop(r2, 33554470);
    _gen_vmassignment(r2, r10, 1, 1);
  }
  _codegen(r2, HEAP32[HEAP32[HEAP32[r5 >> 2] + 4 >> 2] >> 2], 1);
  r5 = r2 + 56 | 0;
  r10 = HEAP32[r5 >> 2] - 1 | 0;
  HEAP32[r5 >> 2] = r10;
  r5 = HEAP32[r8 + 15];
  do {
    if ((r5 | 0) > 0) {
      if ((HEAP32[HEAP32[r8 + 22] + (r5 - 1 << 2) >> 2] & 8372351 | 0) == 41) {
        if ((r5 | 0) != (HEAP32[r8 + 16] | 0)) {
          break;
        }
      }
      _genop_peep(r2, r10 << 23 | 41, 0);
    }
  } while (0);
  _loop_pop(r2, 0);
  _scope_finish(r2);
  r2 = (r1 + 56 | 0) >> 2;
  _genop(r1, r9 - r4 << 9 & 8388096 | HEAP32[r2] << 23 | 320);
  HEAP32[r2] = HEAP32[r2] - 1 | 0;
  _genop(r1, _new_msym(r1, _mrb_intern(HEAP32[r6 >> 2], 5325456)) << 14 & 8372224 | HEAP32[r2] << 23 | 33);
  return;
}
_for_body["X"] = 1;
function _gen_call(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24;
  r6 = 0;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r8 = r7;
  r9 = r2 + 4 | 0;
  if (r3 << 16 >> 16 == 0) {
    r10 = HEAP32[HEAP32[r9 >> 2] >> 2] & 65535;
  } else {
    r10 = r3;
  }
  _codegen(r1, HEAP32[r2 >> 2], 1);
  r2 = _new_msym(r1, r10);
  r3 = HEAP32[HEAP32[HEAP32[r9 >> 2] + 4 >> 2] >> 2];
  r9 = (r3 | 0) != 0;
  do {
    if (r9) {
      r11 = _gen_values(r1, HEAP32[r3 >> 2], 1);
      if ((r11 | 0) >= 0) {
        r12 = 0;
        r13 = r11;
        break;
      }
      _push_(r1);
      r12 = 1;
      r13 = 1;
    } else {
      r12 = 0;
      r13 = 0;
    }
  } while (0);
  do {
    if ((r4 | 0) == 0) {
      r14 = r13;
    } else {
      r11 = r1 + 56 | 0;
      r15 = HEAP32[r11 >> 2];
      if ((r12 | 0) == 0) {
        _genop(r1, r4 << 14 & 8372224 | r15 << 23 | 1);
        _push_(r1);
        r14 = r13 + 1 | 0;
        break;
      } else {
        r16 = r15 - 1 | 0;
        HEAP32[r11 >> 2] = r16;
        _genop(r1, r4 << 14 & 8372224 | r16 << 23 | 57);
        _push_(r1);
        r14 = r13;
        break;
      }
    }
  } while (0);
  do {
    if (r9) {
      r13 = HEAP32[r3 + 4 >> 2];
      if ((r13 | 0) == 0) {
        r6 = 2182;
        break;
      }
      _codegen(r1, r13, 1);
      r13 = r1 + 56 | 0;
      r4 = HEAP32[r13 >> 2] - 1 | 0;
      HEAP32[r13 >> 2] = r4;
      r17 = 0;
      r18 = 1;
      r19 = r4;
      break;
    } else {
      r6 = 2182;
    }
  } while (0);
  if (r6 == 2182) {
    r3 = HEAP32[r1 + 56 >> 2];
    r17 = r3;
    r18 = r12;
    r19 = r3;
  }
  r3 = (r1 + 56 | 0) >> 2;
  HEAP32[r3] = r19 + (r14 ^ -1) | 0;
  r19 = _mrb_sym2name_len(HEAP32[HEAP32[r1 >> 2] + 596 >> 2], r10, r8);
  L2725 : do {
    if ((r18 | 0) == 0) {
      r10 = HEAP32[r8 >> 2];
      r9 = (r10 | 0) == 1;
      do {
        if (r9) {
          r4 = HEAP8[r19];
          if (r4 << 24 >> 24 == 60) {
            _genop(r1, r2 << 14 & 8372224 | r14 << 7 & 16256 | HEAP32[r3] << 23 | 51);
            break L2725;
          } else if (r4 << 24 >> 24 == 45) {
            _genop_peep(r1, r2 << 14 & 8372224 | r14 << 7 & 16256 | HEAP32[r3] << 23 | 46, r5);
            break L2725;
          } else if (r4 << 24 >> 24 == 42) {
            _genop(r1, r2 << 14 & 8372224 | r14 << 7 & 16256 | HEAP32[r3] << 23 | 48);
            break L2725;
          } else if (r4 << 24 >> 24 == 43) {
            _genop_peep(r1, r2 << 14 & 8372224 | r14 << 7 & 16256 | HEAP32[r3] << 23 | 44, r5);
            break L2725;
          } else if (r4 << 24 >> 24 == 47) {
            _genop(r1, r2 << 14 & 8372224 | r14 << 7 & 16256 | HEAP32[r3] << 23 | 49);
            break L2725;
          } else {
            r20 = r4;
            r21 = 0;
            r6 = 2196;
            break;
          }
        } else {
          if ((r10 | 0) != 2) {
            r6 = 2204;
            break L2725;
          }
          r4 = HEAP8[r19];
          do {
            if (r4 << 24 >> 24 == 60) {
              if (HEAP8[r19 + 1 | 0] << 24 >> 24 != 61) {
                r22 = 1;
                r23 = 60;
                break;
              }
              _genop(r1, r2 << 14 & 8372224 | r14 << 7 & 16256 | HEAP32[r3] << 23 | 52);
              break L2725;
            } else {
              r22 = 1;
              r23 = r4;
            }
          } while (0);
          if (r9) {
            r20 = r23;
            r21 = r22;
            r6 = 2196;
            break;
          } else {
            r24 = r23;
            break;
          }
        }
      } while (0);
      do {
        if (r6 == 2196) {
          if (r20 << 24 >> 24 == 62) {
            _genop(r1, r2 << 14 & 8372224 | r14 << 7 & 16256 | HEAP32[r3] << 23 | 53);
            break L2725;
          } else {
            if (r21) {
              r24 = r20;
              break;
            } else {
              r6 = 2204;
              break L2725;
            }
          }
        }
      } while (0);
      if (r24 << 24 >> 24 == 61) {
        if (HEAP8[r19 + 1 | 0] << 24 >> 24 != 61) {
          r6 = 2204;
          break;
        }
        _genop(r1, r2 << 14 & 8372224 | r14 << 7 & 16256 | HEAP32[r3] << 23 | 50);
        break;
      } else if (r24 << 24 >> 24 == 62) {
        if (HEAP8[r19 + 1 | 0] << 24 >> 24 != 61) {
          r6 = 2204;
          break;
        }
        _genop(r1, r2 << 14 & 8372224 | r14 << 7 & 16256 | HEAP32[r3] << 23 | 54);
        break;
      } else {
        r6 = 2204;
        break;
      }
    } else {
      r6 = 2204;
    }
  } while (0);
  do {
    if (r6 == 2204) {
      r19 = ((r12 | 0) == 0 ? r14 << 7 & 16256 : 16256) | r2 << 14 & 8372224 | HEAP32[r3] << 23;
      if ((r17 | 0) > 0) {
        _genop(r1, r19 | 32);
        break;
      } else {
        _genop(r1, r19 | 33);
        break;
      }
    }
  } while (0);
  if ((r5 | 0) == 0) {
    STACKTOP = r7;
    return;
  }
  _push_(r1);
  STACKTOP = r7;
  return;
}
_gen_call["X"] = 1;
function _new_sym862(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r3 = 0;
  r4 = (r1 + 100 | 0) >> 2;
  r5 = HEAP32[r4];
  r6 = HEAP32[r5 + 36 >> 2];
  r7 = r5 + 16 | 0;
  r8 = 0;
  while (1) {
    if ((r8 | 0) >= (r6 | 0)) {
      break;
    }
    if (HEAP16[HEAP32[r7 >> 2] + (r8 << 1) >> 1] << 16 >> 16 == r2 << 16 >> 16) {
      r9 = r8;
      r3 = 2221;
      break;
    } else {
      r8 = r8 + 1 | 0;
    }
  }
  if (r3 == 2221) {
    return r9;
  }
  if ((r6 - 126 | 0) >>> 0 < 130) {
    r3 = _codegen_realloc(r1, HEAP32[r7 >> 2], 131072);
    HEAP32[HEAP32[r4] + 16 >> 2] = r3;
    r3 = HEAP32[r4];
    r7 = r3 + 36 | 0;
    r1 = HEAP32[r7 >> 2];
    L2771 : do {
      if ((256 - r1 | 0) > 0) {
        r8 = 0;
        r10 = r3;
        r11 = r1;
        while (1) {
          HEAP16[HEAP32[r10 + 16 >> 2] + (r11 + r8 << 1) >> 1] = 0;
          r12 = r8 + 1 | 0;
          r13 = HEAP32[r4];
          r14 = r13 + 36 | 0;
          r15 = HEAP32[r14 >> 2];
          if ((r12 | 0) < (256 - r15 | 0)) {
            r8 = r12;
            r10 = r13;
            r11 = r15;
          } else {
            r16 = r14;
            break L2771;
          }
        }
      } else {
        r16 = r7;
      }
    } while (0);
    HEAP32[r16 >> 2] = 256;
    r16 = HEAP32[r4];
    r17 = r16;
    r18 = HEAP32[r16 + 36 >> 2];
  } else {
    r17 = r5;
    r18 = r6;
  }
  HEAP16[HEAP32[r17 + 16 >> 2] + (r18 << 1) >> 1] = r2;
  r2 = HEAP32[r4] + 36 | 0;
  r4 = HEAP32[r2 >> 2];
  HEAP32[r2 >> 2] = r4 + 1 | 0;
  r9 = r4;
  return r9;
}
_new_sym862["X"] = 1;
function _gen_values(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r4 = 0;
  if ((r2 | 0) == 0) {
    r5 = 0;
    return r5;
  } else {
    r6 = r2, r7 = r6 >> 2;
    r8 = 0;
  }
  while (1) {
    r9 = r6 | 0;
    r10 = HEAP32[r9 >> 2];
    if ((HEAP32[r10 >> 2] | 0) == 63) {
      break;
    }
    _codegen(r1, r10, r3);
    r2 = r8 + 1 | 0;
    r11 = HEAP32[r7 + 1];
    if ((r11 | 0) == 0) {
      r5 = r2;
      r4 = 2237;
      break;
    } else {
      r6 = r11, r7 = r6 >> 2;
      r8 = r2;
    }
  }
  if (r4 == 2237) {
    return r5;
  }
  if ((r3 | 0) == 0) {
    _codegen(r1, HEAP32[r10 + 4 >> 2], 0);
    r10 = HEAP32[r7 + 1];
    if ((r10 | 0) == 0) {
      r5 = -1;
      return r5;
    } else {
      r12 = r10;
    }
    while (1) {
      _codegen(r1, HEAP32[r12 >> 2], 0);
      r10 = HEAP32[r12 + 4 >> 2];
      if ((r10 | 0) == 0) {
        r5 = -1;
        break;
      } else {
        r12 = r10;
      }
    }
    return r5;
  }
  r12 = (r1 + 56 | 0) >> 2;
  r10 = HEAP32[r12] - r8 | 0;
  HEAP32[r12] = r10;
  _genop(r1, r8 << 7 & 16256 | r10 << 23 | r10 << 14 & 8372224 | 55);
  _push_(r1);
  _codegen(r1, HEAP32[r9 >> 2], 1);
  r9 = HEAP32[r12];
  r10 = r9 - 2 | 0;
  HEAP32[r12] = r10;
  _genop(r1, r10 << 23 | (r9 << 14) + 8372224 & 8372224 | 56);
  r9 = HEAP32[r7 + 1];
  if ((r9 | 0) == 0) {
    r5 = -1;
    return r5;
  } else {
    r13 = r9;
  }
  while (1) {
    _push_(r1);
    r9 = r13 | 0;
    _codegen(r1, HEAP32[r9 >> 2], 1);
    r7 = HEAP32[r12];
    r10 = r7 - 2 | 0;
    HEAP32[r12] = r10;
    r8 = (r7 << 14) + 8372224 & 8372224 | r10 << 23;
    if ((HEAP32[HEAP32[r9 >> 2] >> 2] | 0) == 63) {
      _genop(r1, r8 | 56);
    } else {
      _genop(r1, r8 | 57);
    }
    r8 = HEAP32[r13 + 4 >> 2];
    if ((r8 | 0) == 0) {
      r5 = -1;
      break;
    } else {
      r13 = r8;
    }
  }
  return r5;
}
_gen_values["X"] = 1;
function _lv_idx(r1, r2) {
  var r3, r4, r5, r6;
  r3 = 0;
  if ((r1 | 0) == 0) {
    r4 = 0;
    return r4;
  }
  r5 = r2 << 16 >> 16;
  r2 = 1;
  r6 = r1;
  while (1) {
    if ((HEAP32[r6 >> 2] << 16 >> 16 | 0) == (r5 | 0)) {
      r4 = r2;
      r3 = 2246;
      break;
    }
    r1 = HEAP32[r6 + 4 >> 2];
    if ((r1 | 0) == 0) {
      r4 = 0;
      r3 = 2248;
      break;
    } else {
      r2 = r2 + 1 | 0;
      r6 = r1;
    }
  }
  if (r3 == 2246) {
    return r4;
  } else if (r3 == 2248) {
    return r4;
  }
}
function _mrb_float_value863(r1, r2) {
  HEAPF32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 6;
  return;
}
function _mrb_fixnum_value864(r1, r2) {
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 3;
  return;
}
function _node_len(r1) {
  var r2, r3, r4, r5;
  if ((r1 | 0) == 0) {
    r2 = 0;
    return r2;
  } else {
    r3 = r1;
    r4 = 0;
  }
  while (1) {
    r1 = r4 + 1 | 0;
    r5 = HEAP32[r3 + 4 >> 2];
    if ((r5 | 0) == 0) {
      r2 = r1;
      break;
    } else {
      r3 = r5;
      r4 = r1;
    }
  }
  return r2;
}
function _calc_crc_16_ccitt(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  if ((r2 | 0) > 0) {
    r3 = r1;
    r4 = 0;
    r5 = 0;
  } else {
    r6 = 0;
    return r6;
  }
  while (1) {
    r1 = (HEAPU8[r3] | r4) << 1;
    r7 = ((r1 & 16777216 | 0) == 0 ? r1 : r1 ^ 17834240) << 1;
    r1 = ((r7 & 16777216 | 0) == 0 ? r7 : r7 ^ 17834240) << 1;
    r7 = ((r1 & 16777216 | 0) == 0 ? r1 : r1 ^ 17834240) << 1;
    r1 = ((r7 & 16777216 | 0) == 0 ? r7 : r7 ^ 17834240) << 1;
    r7 = ((r1 & 16777216 | 0) == 0 ? r1 : r1 ^ 17834240) << 1;
    r1 = ((r7 & 16777216 | 0) == 0 ? r7 : r7 ^ 17834240) << 1;
    r7 = ((r1 & 16777216 | 0) == 0 ? r1 : r1 ^ 17834240) << 1;
    r8 = (r7 & 16777216 | 0) == 0 ? r7 : r7 ^ 17834240;
    r7 = r5 + 1 | 0;
    if ((r7 | 0) == (r2 | 0)) {
      break;
    } else {
      r3 = r3 + 1 | 0;
      r4 = r8;
      r5 = r7;
    }
  }
  r6 = r8 >>> 8 & 65535;
  return r6;
}
_calc_crc_16_ccitt["X"] = 1;
function _mrb_obj_value904(r1, r2) {
  var r3;
  r3 = HEAP32[r2 >> 2] & 255;
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = r3;
  return;
}
function _mrb_symbol_value913(r1, r2) {
  HEAP16[r1 >> 1] = r2;
  HEAP32[r1 + 4 >> 2] = 4;
  return;
}
function _gen_vmassignment(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r5 = HEAP32[r2 >> 2];
  if ((r5 | 0) == 0) {
    r6 = 0;
  } else {
    r7 = r1 + 56 | 0;
    r8 = r3 << 14 & 8372224;
    r9 = 0;
    r10 = r5;
    while (1) {
      _genop(r1, r8 | r9 << 7 & 16256 | HEAP32[r7 >> 2] << 23 | 58);
      r5 = HEAP32[r10 >> 2];
      _gen_assignment(r1, HEAP32[r5 >> 2], HEAP32[r5 + 4 >> 2], HEAP32[r7 >> 2], 0);
      r11 = r9 + 1 | 0;
      r5 = HEAP32[r10 + 4 >> 2];
      if ((r5 | 0) == 0) {
        break;
      } else {
        r9 = r11;
        r10 = r5;
      }
    }
    r6 = r11 << 14 & 8372224;
  }
  r11 = HEAP32[r2 + 4 >> 2];
  if ((r11 | 0) == 0) {
    return;
  }
  r2 = r11 + 4 | 0;
  r10 = HEAP32[r2 >> 2];
  do {
    if ((r10 | 0) == 0) {
      r12 = 0;
    } else {
      r9 = HEAP32[r10 >> 2];
      if ((r9 | 0) == 0) {
        r12 = 0;
        break;
      } else {
        r13 = 0;
        r14 = r9;
      }
      while (1) {
        r15 = r13 + 1 | 0;
        r9 = HEAP32[r14 + 4 >> 2];
        if ((r9 | 0) == 0) {
          break;
        } else {
          r13 = r15;
          r14 = r9;
        }
      }
      r12 = r15 << 7 & 16256;
    }
  } while (0);
  r15 = (r1 + 56 | 0) >> 2;
  if ((r4 | 0) != 0) {
    _genop(r1, r3 << 14 & 8372224 | HEAP32[r15] << 23 | 1);
    _push_(r1);
  }
  r3 = HEAP32[r15] - 1 | 0;
  HEAP32[r15] = r3;
  _genop(r1, r6 | r12 | r3 << 23 | 60);
  r3 = HEAP32[r11 >> 2];
  if ((r3 | 0) != 0) {
    _gen_assignment(r1, HEAP32[r3 >> 2], HEAP32[r3 + 4 >> 2], HEAP32[r15], 0);
  }
  r3 = HEAP32[r2 >> 2];
  if ((r3 | 0) == 0) {
    return;
  }
  r2 = HEAP32[r3 >> 2];
  if ((r2 | 0) == 0) {
    return;
  } else {
    r16 = 1;
    r17 = r2;
  }
  while (1) {
    r2 = HEAP32[r17 >> 2];
    _gen_assignment(r1, HEAP32[r2 >> 2], HEAP32[r2 + 4 >> 2], HEAP32[r15] + r16 | 0, 0);
    r2 = HEAP32[r17 + 4 >> 2];
    if ((r2 | 0) == 0) {
      break;
    } else {
      r16 = r16 + 1 | 0;
      r17 = r2;
    }
  }
  return;
}
_gen_vmassignment["X"] = 1;
function _loop_break(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9;
  r3 = 0;
  r4 = (r1 + 72 | 0) >> 2;
  r5 = HEAP32[r4];
  if ((r5 | 0) == 0) {
    _codegen(r1, r2, 0);
    _raise_error(r1, 5325084);
    return;
  }
  r6 = (r2 | 0) != 0;
  if (r6) {
    _codegen(r1, r2, 1);
    r2 = r1 + 56 | 0;
    HEAP32[r2 >> 2] = HEAP32[r2 >> 2] - 1 | 0;
    r7 = HEAP32[r4];
  } else {
    r7 = r5;
  }
  L2868 : do {
    if ((HEAP32[r7 >> 2] | 0) == 3) {
      r5 = r7;
      while (1) {
        _genop_peep(r1, 8388636, 0);
        r2 = HEAP32[r5 + 24 >> 2];
        if ((HEAP32[r2 >> 2] | 0) == 3) {
          r5 = r2;
        } else {
          r8 = r2, r9 = r8 >> 2;
          break L2868;
        }
      }
    } else {
      r8 = r7, r9 = r8 >> 2;
    }
  } while (0);
  while (1) {
    r7 = HEAP32[r9];
    if ((r7 | 0) == 0) {
      break;
    } else if ((r7 | 0) != 4) {
      r3 = 2298;
      break;
    }
    r8 = HEAP32[r9 + 6], r9 = r8 >> 2;
  }
  if (r3 == 2298) {
    _genop(r1, HEAP32[r1 + 56 >> 2] << 23 | 16425);
    return;
  }
  r3 = HEAP32[r1 + 76 >> 2];
  r7 = HEAP32[HEAP32[r4] + 20 >> 2];
  if ((r3 | 0) > (r7 | 0)) {
    _genop_peep(r1, r3 - r7 << 23 | 31, 0);
  }
  if (r6) {
    _genop_peep(r1, HEAP32[r9 + 4] << 23 | HEAP32[r1 + 56 >> 2] << 14 & 8372224 | 1, 0);
  }
  r9 = _new_label(r1);
  r6 = r8 + 12 | 0;
  _genop(r1, (HEAP32[r6 >> 2] << 7) + 4194176 & 8388480 | 23);
  HEAP32[r6 >> 2] = r9;
  return;
}
_loop_break["X"] = 1;
function _raise_error(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r4 = r3;
  _mrb_str_new_cstr(r4, HEAP32[r1 >> 2], r2);
  _genop(r1, _new_lit(r1, r4) << 7 & 8388480 | 8388683);
  STACKTOP = r3;
  return;
}
function _readint_mrb_int(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r6 = 0;
  r7 = r2 + _strlen(r2) | 0;
  r8 = HEAP8[r2] << 24 >> 24 == 43 ? r2 + 1 | 0 : r2;
  L2887 : do {
    if (r8 >>> 0 < r7 >>> 0) {
      r2 = (r4 | 0) == 0;
      r9 = r8;
      r10 = 0;
      while (1) {
        r11 = _tolower(HEAPU8[r9]) << 24 >> 24;
        r12 = 0;
        while (1) {
          if ((r12 | 0) >= (r3 | 0)) {
            break;
          }
          if ((HEAP8[r12 + 5309940 | 0] << 24 >> 24 | 0) == (r11 | 0)) {
            break;
          } else {
            r12 = r12 + 1 | 0;
          }
        }
        if ((r12 | 0) == (r3 | 0)) {
          _codegen_error(r1, 5325384);
        }
        if (r2) {
          if (((2147483647 - r12 | 0) / (r3 | 0) & -1 | 0) < (r10 | 0)) {
            r6 = 2316;
            break;
          }
          r13 = r12 + (r10 * r3 & -1) | 0;
        } else {
          if (((r12 ^ -2147483648 | 0) / (r3 | 0) & -1 | 0) > (r10 | 0)) {
            r6 = 2313;
            break;
          }
          r13 = (r10 * r3 & -1) - r12 | 0;
        }
        r11 = r9 + 1 | 0;
        if (r11 >>> 0 < r7 >>> 0) {
          r9 = r11;
          r10 = r13;
        } else {
          r14 = r13;
          break L2887;
        }
      }
      if (r6 == 2316) {
        HEAP32[r5 >> 2] = 1;
        r15 = 0;
        return r15;
      } else if (r6 == 2313) {
        HEAP32[r5 >> 2] = 1;
        r15 = 0;
        return r15;
      }
    } else {
      r14 = 0;
    }
  } while (0);
  HEAP32[r5 >> 2] = 0;
  r15 = r14;
  return r15;
}
_readint_mrb_int["X"] = 1;
function _readint_float(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  r4 = 0;
  r5 = r2 + _strlen(r2) | 0;
  r6 = HEAP8[r2] << 24 >> 24 == 43 ? r2 + 1 | 0 : r2;
  if (r6 >>> 0 >= r5 >>> 0) {
    r7 = 0;
    return r7;
  }
  r2 = r3 | 0;
  r8 = r6;
  r6 = 0;
  while (1) {
    r9 = _tolower(HEAPU8[r8]) << 24 >> 24;
    r10 = 0;
    while (1) {
      if ((r10 | 0) >= (r3 | 0)) {
        r11 = r6;
        break;
      }
      if ((HEAP8[r10 + 5309940 | 0] << 24 >> 24 | 0) == (r9 | 0)) {
        r4 = 2329;
        break;
      } else {
        r10 = r10 + 1 | 0;
      }
    }
    if (r4 == 2329) {
      r4 = 0;
      r11 = r2 * r6 + (r10 | 0);
    }
    if ((r10 | 0) == (r3 | 0)) {
      _codegen_error(r1, 5325384);
    }
    r9 = r8 + 1 | 0;
    if ((r9 | 0) == (r5 | 0)) {
      r7 = r11;
      break;
    } else {
      r8 = r9;
      r6 = r11;
    }
  }
  return r7;
}
function _new_lit(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r3 = 0;
  r4 = STACKTOP;
  r5 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = (r1 + 100 | 0) >> 2;
  r6 = HEAP32[r5];
  r7 = HEAP32[r6 + 32 >> 2];
  r8 = r6 + 12 | 0;
  r9 = 0;
  while (1) {
    if ((r9 | 0) >= (r7 | 0)) {
      break;
    }
    if ((_mrb_obj_equal((r9 << 3) + HEAP32[r8 >> 2] | 0, r2) | 0) == 0) {
      r9 = r9 + 1 | 0;
    } else {
      r10 = r9;
      r3 = 2343;
      break;
    }
  }
  if (r3 == 2343) {
    STACKTOP = r4;
    return r10;
  }
  r3 = r1 + 104 | 0;
  if ((r7 | 0) == (HEAP32[r3 >> 2] | 0)) {
    HEAP32[r3 >> 2] = r7 << 1;
    r3 = _codegen_realloc(r1, HEAP32[r8 >> 2], r7 << 4);
    HEAP32[HEAP32[r5] + 12 >> 2] = r3;
    r3 = HEAP32[r5];
    r11 = r3;
    r12 = HEAP32[r3 + 32 >> 2];
  } else {
    r11 = r6;
    r12 = r7;
  }
  r7 = r2;
  r2 = (r12 << 3) + HEAP32[r11 + 12 >> 2] | 0;
  r11 = HEAP32[r7 + 4 >> 2];
  HEAP32[r2 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r2 + 4 >> 2] = r11;
  r11 = HEAP32[r5] + 32 | 0;
  r5 = HEAP32[r11 >> 2];
  HEAP32[r11 >> 2] = r5 + 1 | 0;
  r10 = r5;
  STACKTOP = r4;
  return r10;
}
_new_lit["X"] = 1;
function _scope_finish(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9;
  r2 = r1 >> 2;
  r3 = HEAP32[r2];
  r4 = HEAP32[r2 + 25], r5 = r4 >> 2;
  r6 = (r4 + 4 | 0) >> 2;
  HEAP32[r6] = HEAP32[r6] & -16711681;
  r7 = HEAP32[r2 + 22];
  do {
    if ((r7 | 0) != 0) {
      r8 = (r1 + 60 | 0) >> 2;
      HEAP32[r5 + 2] = _codegen_realloc(r1, r7, HEAP32[r8] << 2);
      HEAP32[r5 + 7] = HEAP32[r8];
      r9 = HEAP32[r2 + 23];
      if ((r9 | 0) == 0) {
        HEAP32[r5 + 6] = 0;
        break;
      } else {
        HEAP32[r5 + 6] = _codegen_realloc(r1, r9, HEAP32[r8] << 1);
        break;
      }
    }
  } while (0);
  r7 = r4 + 12 | 0;
  HEAP32[r7 >> 2] = _codegen_realloc(r1, HEAP32[r7 >> 2], HEAP32[r5 + 8] << 3);
  r7 = r4 + 16 | 0;
  HEAP32[r7 >> 2] = _codegen_realloc(r1, HEAP32[r7 >> 2], HEAP32[r5 + 9] << 1);
  r7 = HEAP32[r2 + 20];
  if ((r7 | 0) != 0) {
    HEAP32[r5 + 5] = r7;
  }
  r7 = r4;
  HEAP32[r7 >> 2] = HEAP32[r7 >> 2] & 65535 | HEAP32[r2 + 28] << 16;
  HEAP32[r6] = HEAP32[r6] & -65536 | HEAP32[r2 + 29] & 65535;
  _mrb_gc_arena_restore(r3, HEAP32[r2 + 30]);
  _mrb_pool_close(HEAP32[r2 + 1]);
  return;
}
_scope_finish["X"] = 1;
function _attrsym(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  r5 = r1 | 0;
  r6 = _mrb_sym2name_len(HEAP32[HEAP32[r5 >> 2] + 596 >> 2], r2, r4);
  r2 = HEAP32[r4 >> 2];
  r4 = r2 + 1 | 0;
  r7 = _codegen_palloc(r1, r4);
  _memcpy(r7, r6, r2);
  HEAP8[r7 + r2 | 0] = 61;
  HEAP8[r7 + r4 | 0] = 0;
  r2 = _mrb_intern2(HEAP32[r5 >> 2], r7, r4);
  STACKTOP = r3;
  return r2;
}
function _codegen_palloc(r1, r2) {
  var r3;
  r3 = _mrb_pool_alloc(HEAP32[r1 + 4 >> 2], r2);
  if ((r3 | 0) != 0) {
    return r3;
  }
  _codegen_error(r1, 5323904);
  return r3;
}
function _mrb_exc_new(r1, r2, r3, r4, r5) {
  var r6, r7, r8;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r7 = r6;
  r8 = r6 + 8;
  _mrb_obj_value904(r7, r3 | 0);
  _mrb_str_new(r8, r2, r4, r5);
  _mrb_funcall(r1, r2, r7, 5325432, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r8 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r8 + 4 >> 2], tempInt));
  STACKTOP = r6;
  return;
}
function _mrb_exc_new3(r1, r2, r3, r4) {
  var r5, r6;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r6 = r4;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r4 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5 + 8;
  _mrb_string_value(r5, r2, r4);
  _mrb_obj_value904(r6, r3 | 0);
  _mrb_funcall(r1, r2, r6, 5325432, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r4 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r4 + 4 >> 2], tempInt));
  STACKTOP = r5;
  return;
}
function _exc_debug_info(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r3 = 0;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 16;
  r8 = HEAP32[r1 + 20 >> 2];
  r9 = HEAP32[r8 + 20 >> 2];
  r10 = _mrb_intern(r1, 5319840);
  r11 = r1 + 24 | 0;
  _mrb_fixnum_value923(r5, (r8 - HEAP32[r11 >> 2] | 0) / 44 & -1);
  _mrb_obj_iv_set(r1, r2, r10, r5);
  r5 = r8 - 44 | 0;
  r10 = HEAP32[r11 >> 2];
  if (r5 >>> 0 < r10 >>> 0) {
    STACKTOP = r4;
    return;
  } else {
    r12 = r9;
    r13 = r8;
    r14 = r5;
  }
  L2959 : while (1) {
    r5 = HEAP32[r13 - 44 + 4 >> 2];
    do {
      if ((r5 | 0) != 0) {
        if ((HEAP32[r5 >> 2] & 262144 | 0) != 0) {
          break;
        }
        r8 = HEAP32[r5 + 12 >> 2];
        r15 = r8 + 20 | 0;
        if ((HEAP32[r15 >> 2] | 0) == 0) {
          break;
        }
        r16 = r8 + 24 | 0;
        if ((HEAP32[r16 >> 2] | 0) == 0) {
          break;
        }
        r17 = r8 + 8 | 0;
        r9 = HEAP32[r17 >> 2];
        if (r9 >>> 0 > r12 >>> 0) {
          break;
        }
        if (r12 >>> 0 < ((HEAP32[r8 + 28 >> 2] << 2) + r9 | 0) >>> 0) {
          break L2959;
        }
      }
    } while (0);
    r5 = r14 - 44 | 0;
    if (r5 >>> 0 < r10 >>> 0) {
      r3 = 2370;
      break;
    } else {
      r12 = HEAP32[r13 - 44 + 20 >> 2];
      r13 = r14;
      r14 = r5;
    }
  }
  if (r3 == 2370) {
    STACKTOP = r4;
    return;
  }
  r3 = _mrb_intern(r1, 5321880);
  _mrb_str_new_cstr(r6, r1, HEAP32[r15 >> 2]);
  _mrb_obj_iv_set(r1, r2, r3, r6);
  r6 = _mrb_intern(r1, 5321564);
  _mrb_fixnum_value923(r7, HEAP16[HEAP32[r16 >> 2] + ((r12 - HEAP32[r17 >> 2] >> 2) - 1 << 1) >> 1] << 16 >> 16);
  _mrb_obj_iv_set(r1, r2, r6, r7);
  STACKTOP = r4;
  return;
}
_exc_debug_info["X"] = 1;
function _mrb_raise(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r4;
  r6 = r4 + 8;
  _mrb_str_new2(r5, r1, r3);
  _mrb_exc_new3(r6, r1, r2, r5);
  _mrb_exc_raise(r1, r6);
  STACKTOP = r4;
  return;
}
function _mrb_raisef(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 268 | 0;
  r6 = r5;
  r7 = r5 + 260;
  HEAP32[r6 >> 2] = r4;
  r4 = r5 + 4 | 0;
  r8 = _snprintf(r4, 256, r3, HEAP32[r6 >> 2]);
  _mrb_exc_new(r7, r1, r2, r4, (r8 | 0) < 0 ? 0 : r8);
  _mrb_exc_raise(r1, r7);
  STACKTOP = r5;
  return;
}
function _mrb_name_error(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 292 | 0;
  r6 = r5;
  r7 = r5 + 8;
  r8 = r5 + 24;
  r9 = r5 + 284;
  HEAP32[r8 >> 2] = r4;
  r4 = r5 + 28 | 0;
  r10 = _snprintf(r4, 256, r3, HEAP32[r8 >> 2]);
  r8 = r7 | 0;
  _mrb_str_new(r8, r1, r4, (r10 | 0) < 0 ? 0 : r10);
  _mrb_symbol_value913(r9, r2);
  r2 = r9;
  r9 = r7 + 8 | 0;
  r7 = HEAP32[r2 + 4 >> 2];
  HEAP32[r9 >> 2] = HEAP32[r2 >> 2];
  HEAP32[r9 + 4 >> 2] = r7;
  _mrb_class_new_instance(r6, r1, r8, _mrb_class_obj_get(r1, 5323928));
  _mrb_exc_raise(r1, r6);
  STACKTOP = r5;
  return;
}
function _mrb_sprintf(r1, r2, r3, r4) {
  var r5, r6, r7;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 260 | 0;
  r6 = r5;
  HEAP32[r6 >> 2] = r4;
  r4 = r5 + 4 | 0;
  r7 = _snprintf(r4, 256, r3, HEAP32[r6 >> 2]);
  _mrb_str_new(r1, r2, r4, (r7 | 0) < 0 ? 0 : r7);
  STACKTOP = r5;
  return;
}
function _scope_error() {
  _exit(1);
}
function _mrb_exc_raise(r1, r2) {
  var r3;
  r3 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r3 + 4 >> 2];
  r3 = HEAP32[r2 >> 2];
  HEAP32[r1 + 48 >> 2] = r3;
  _exc_debug_info(r1, r3);
  r3 = HEAP32[r1 >> 2];
  if ((r3 | 0) == 0) {
    _abort();
  } else {
    _longjmp(r3, 1);
  }
}
function _mrb_nil_value920(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_true_value921(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 2;
  return;
}
function _mrb_false_value922(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_fixnum_value923(r1, r2) {
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 3;
  return;
}
function _mrb_warn(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  HEAP32[r4 >> 2] = r2;
  _printf(5321124, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  _printf(r1, HEAP32[r4 >> 2]);
  STACKTOP = r3;
  return;
}
function _make_exception(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20;
  r5 = 0;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r7 = r6;
  r8 = r6 + 8;
  r9 = r6 + 16;
  r10 = r6 + 24;
  _mrb_nil_value920(r7);
  r11 = r7, r12 = r11 >> 2;
  do {
    if ((r3 | 0) == 1) {
      if ((HEAP32[r4 + 4 >> 2] & 255 | 0) == 0) {
        if ((HEAP32[r4 >> 2] | 0) == 0) {
          r5 = 2395;
          break;
        }
      }
      _mrb_check_string_type(r8, r2, r4);
      r13 = r8;
      r14 = HEAP32[r13 >> 2];
      r15 = HEAP32[r13 + 4 >> 2];
      HEAP32[r12] = r14;
      HEAP32[r12 + 1] = r15;
      if ((r14 & -1 | 0) == 0 & (r15 & 255 | 0) == 0) {
        r16 = 0;
        r5 = 2391;
        break;
      }
      _mrb_exc_new3(r9, r2, _mrb_class_obj_get(r2, 5319792), r7);
      r15 = r9;
      r17 = r15 | 0;
      r18 = r15 + 4 | 0;
      r15 = HEAP32[r18 >> 2];
      r19 = r11 | 0;
      HEAP32[r19 >> 2] = HEAP32[r17 >> 2];
      r20 = r11 + 4 | 0;
      HEAP32[r20 >> 2] = r15;
      r5 = 2395;
      break;
    } else if ((r3 | 0) == 2 | (r3 | 0) == 3) {
      r16 = 1;
      r5 = 2391;
    } else if ((r3 | 0) != 0) {
      _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5325536, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r3, tempInt));
      r5 = 2395;
      break;
    }
  } while (0);
  do {
    if (r5 == 2391) {
      r9 = _mrb_intern(r2, 5313880);
      if ((_mrb_respond_to(r2, r4, r9) | 0) == 0) {
        _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5325880);
        r5 = 2395;
        break;
      } else {
        _mrb_funcall_argv(r10, r2, r4, r9, r16, r4 + 8 | 0);
        r9 = r10;
        r17 = r9 | 0;
        r18 = r9 + 4 | 0;
        r9 = HEAP32[r18 >> 2];
        r19 = r11 | 0;
        HEAP32[r19 >> 2] = HEAP32[r17 >> 2];
        r20 = r11 + 4 | 0;
        HEAP32[r20 >> 2] = r9;
        r5 = 2395;
        break;
      }
    }
  } while (0);
  do {
    if (r5 == 2395) {
      if ((r3 | 0) <= 0) {
        break;
      }
      if ((_mrb_obj_is_kind_of(r2, r7, HEAP32[r2 + 600 >> 2]) | 0) == 0) {
        _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5325356);
      }
      if ((r3 | 0) <= 2) {
        break;
      }
      _set_backtrace(r2, r7, r4 + 16 | 0);
    }
  } while (0);
  r4 = r1;
  r1 = HEAP32[r12 + 1];
  HEAP32[r4 >> 2] = HEAP32[r12];
  HEAP32[r4 + 4 >> 2] = r1;
  STACKTOP = r6;
  return;
}
_make_exception["X"] = 1;
function _set_backtrace(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r2, r6 = r5 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 1];
  r5 = r3, r6 = r5 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 1];
  _mrb_funcall(r4, r1, r2, 5320008, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r3 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r3 + 4 >> 2], tempInt));
  STACKTOP = r4;
  return;
}
function _mrb_make_exception(r1, r2, r3, r4) {
  _make_exception(r1, r2, r3, r4);
  return;
}
function _mrb_init_exception(r1) {
  var r2, r3;
  r2 = _mrb_define_class(r1, 5325060, HEAP32[r1 + 72 >> 2]);
  r3 = (r1 + 600 | 0) >> 2;
  HEAP32[r3] = r2;
  _mrb_define_class_method(r1, r2, 5313880, 636);
  _mrb_define_method(r1, r2, 5313880, 430);
  _mrb_define_method(r1, r2, 5323508, 130);
  _mrb_define_method(r1, r2, 5314464, 132);
  _mrb_define_method(r1, r2, 5325416, 420);
  _mrb_define_method(r1, r2, 5323660, 574);
  _mrb_define_method(r1, r2, 5325664, 376);
  r2 = _mrb_define_class(r1, 5323064, HEAP32[r3]);
  HEAP32[r1 + 604 >> 2] = r2;
  _mrb_define_class(r1, 5319792, r2);
  _mrb_define_class(r1, 5322412, _mrb_define_class(r1, 5322800, HEAP32[r3]));
  return;
}
function _exc_exception(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  if ((_mrb_get_args(r2, 5320204, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r6, tempInt)) | 0) == 0) {
    r7 = r3;
    r8 = r1;
    r9 = r7 | 0;
    r10 = r7 + 4 | 0;
    r7 = HEAP32[r10 >> 2];
    r11 = r8 | 0;
    HEAP32[r11 >> 2] = HEAP32[r9 >> 2];
    r12 = r8 + 4 | 0;
    HEAP32[r12 >> 2] = r7;
    STACKTOP = r4;
    return;
  }
  if ((_mrb_obj_equal(r3, r6) | 0) == 0) {
    _mrb_obj_clone(r5, r2, r3);
    r7 = r5;
    _mrb_iv_set(r2, r5, _mrb_intern(r2, 5322136), r6);
    r6 = r1;
    r2 = HEAP32[r7 + 4 >> 2];
    HEAP32[r6 >> 2] = HEAP32[r7 >> 2];
    HEAP32[r6 + 4 >> 2] = r2;
    STACKTOP = r4;
    return;
  } else {
    r2 = r3;
    r3 = r1;
    r9 = r2 | 0;
    r10 = r2 + 4 | 0;
    r2 = HEAP32[r10 >> 2];
    r11 = r3 | 0;
    HEAP32[r11 >> 2] = HEAP32[r9 >> 2];
    r12 = r3 + 4 | 0;
    HEAP32[r12 >> 2] = r2;
    STACKTOP = r4;
    return;
  }
}
function _exc_initialize(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  if ((_mrb_get_args(r2, 5320204, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt)) | 0) == 1) {
    _mrb_iv_set(r2, r3, _mrb_intern(r2, 5322136), r5);
  }
  r5 = r3;
  r3 = r1;
  r1 = HEAP32[r5 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _exc_equal(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 16;
  r8 = r4 + 24;
  r9 = r4 + 32;
  r10 = _mrb_intern(r2, 5322136);
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((_mrb_obj_equal(r3, r5) | 0) != 0) {
    _mrb_true_value921(r1);
    STACKTOP = r4;
    return;
  }
  do {
    if ((_mrb_obj_class(r2, r3) | 0) == (_mrb_obj_class(r2, r5) | 0)) {
      _mrb_attr_get(r8, r5, r10);
      r11 = r8;
      r12 = r6;
      r13 = r11 | 0;
      r14 = r11 + 4 | 0;
      r11 = HEAP32[r14 >> 2];
      r15 = r12 | 0;
      HEAP32[r15 >> 2] = HEAP32[r13 >> 2];
      r16 = r12 + 4 | 0;
      HEAP32[r16 >> 2] = r11;
    } else {
      if ((_mrb_respond_to(r2, r5, _mrb_intern(r2, 5323660)) | 0) != 0) {
        _mrb_funcall(r7, r2, r5, 5323660, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
        r11 = r7;
        r12 = r6;
        r13 = r11 | 0;
        r14 = r11 + 4 | 0;
        r11 = HEAP32[r14 >> 2];
        r15 = r12 | 0;
        HEAP32[r15 >> 2] = HEAP32[r13 >> 2];
        r16 = r12 + 4 | 0;
        HEAP32[r16 >> 2] = r11;
        break;
      }
      _mrb_false_value922(r1);
      STACKTOP = r4;
      return;
    }
  } while (0);
  _mrb_attr_get(r9, r3, r10);
  if ((_mrb_equal(r2, r9, r6) | 0) == 0) {
    _mrb_false_value922(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value921(r1);
    STACKTOP = r4;
    return;
  }
}
_exc_equal["X"] = 1;
function _exc_to_s(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_attr_get(r5, r3, _mrb_intern(r2, 5322136));
  do {
    if ((HEAP32[r5 + 4 >> 2] & 255 | 0) == 0) {
      if ((HEAP32[r5 >> 2] | 0) != 0) {
        break;
      }
      _mrb_str_new2(r1, r2, _mrb_obj_classname(r2, r3));
      STACKTOP = r4;
      return;
    }
  } while (0);
  r3 = r5;
  r5 = r1;
  r1 = HEAP32[r3 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r5 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _exc_message(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_funcall(r1, r2, r3, 5325416, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  STACKTOP = r4;
  return;
}
function _exc_inspect(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 136 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  r7 = r5 + 8;
  r8 = r5 + 16;
  r9 = r5 + 24;
  r10 = r5 + 32;
  r11 = r5 + 40;
  r12 = r5 + 48;
  r13 = r5 + 56;
  r14 = r5 + 64;
  r15 = r5 + 72;
  r16 = r5 + 80;
  r17 = r5 + 88;
  r18 = r5 + 96;
  r19 = r5 + 104;
  r20 = r5 + 112;
  r21 = r5 + 120;
  r22 = r5 + 128;
  _mrb_attr_get(r9, r3, _mrb_intern(r2, 5322136));
  r23 = r9;
  r9 = r7;
  r24 = HEAP32[r23 >> 2];
  r25 = HEAP32[r23 + 4 >> 2];
  HEAP32[r9 >> 2] = r24;
  HEAP32[r9 + 4 >> 2] = r25;
  _mrb_attr_get(r10, r3, _mrb_intern(r2, 5321880));
  r9 = HEAP32[r10 >> 2];
  r23 = HEAP32[r10 + 4 >> 2];
  _mrb_attr_get(r11, r3, _mrb_intern(r2, 5321564));
  r10 = r11;
  r11 = r8;
  r26 = HEAP32[r10 >> 2];
  r27 = HEAP32[r10 + 4 >> 2];
  HEAP32[r11 >> 2] = r26;
  HEAP32[r11 + 4 >> 2] = r27;
  r11 = r25;
  r25 = r24;
  r24 = r25;
  do {
    if ((r23 & 255 | r9 | 0) == 0) {
      r4 = 2450;
    } else {
      if ((r26 & -1 | 0) == 0 & (r27 & 255 | 0) == 0) {
        r4 = 2450;
        break;
      }
      HEAP32[r6 >> 2] = r9;
      HEAP32[r6 + 4 >> 2] = r23;
      _mrb_str_cat2(r12, r2, r6, 5291368);
      _mrb_str_append(r13, r2, r6, r8);
      _mrb_str_cat2(r14, r2, r6, 5321084);
      r10 = r7 + 4 | 0;
      do {
        if ((r11 & 255 | r25 | 0) == 0) {
          r28 = r11;
        } else {
          if ((HEAP32[r24 + 12 >> 2] | 0) <= 0) {
            r28 = r11;
            break;
          }
          _mrb_str_append(r15, r2, r6, r7);
          _mrb_str_cat2(r16, r2, r6, 5320904);
          r28 = HEAP32[r10 >> 2];
        }
      } while (0);
      _mrb_str_cat2(r17, r2, r6, _mrb_obj_classname(r2, r3));
      if ((r28 & 255 | 0) == 0) {
        r10 = HEAP32[r7 >> 2];
        if ((r10 | 0) == 0) {
          break;
        }
        r29 = r10;
      } else {
        r29 = HEAP32[r7 >> 2];
      }
      if ((HEAP32[r29 + 12 >> 2] | 0) <= 0) {
        break;
      }
      _mrb_str_cat2(r18, r2, r6, 5320664);
      break;
    }
  } while (0);
  L3064 : do {
    if (r4 == 2450) {
      _mrb_str_new2(r6, r2, _mrb_obj_classname(r2, r3));
      do {
        if ((r11 & 255 | r25 | 0) != 0) {
          if ((HEAP32[r24 + 12 >> 2] | 0) <= 0) {
            break;
          }
          _mrb_str_cat2(r19, r2, r6, 5321084);
          _mrb_str_append(r20, r2, r6, r7);
          break L3064;
        }
      } while (0);
      _mrb_str_cat2(r21, r2, r6, 5321084);
      _mrb_str_cat2(r22, r2, r6, _mrb_obj_classname(r2, r3));
    }
  } while (0);
  r3 = r6;
  r6 = r1;
  r1 = HEAP32[r3 + 4 >> 2];
  HEAP32[r6 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r6 + 4 >> 2] = r1;
  STACKTOP = r5;
  return;
}
_exc_inspect["X"] = 1;
function _mrb_realloc(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = r1 + 4 | 0;
  r5 = r1 + 608 | 0;
  r6 = FUNCTION_TABLE[HEAP32[r4 >> 2]](r1, r2, r3, HEAP32[r5 >> 2]);
  if ((r6 | 0) != 0 | (r3 | 0) == 0) {
    r7 = r6;
    return r7;
  }
  if ((HEAP32[r1 + 128 >> 2] | 0) == 0) {
    r7 = 0;
    return r7;
  }
  _mrb_garbage_collect(r1);
  r7 = FUNCTION_TABLE[HEAP32[r4 >> 2]](r1, r2, r3, HEAP32[r5 >> 2]);
  return r7;
}
function _mrb_garbage_collect(r1) {
  var r2, r3, r4, r5;
  r2 = (r1 + 580 | 0) >> 2;
  r3 = HEAP32[r2];
  if ((r3 & 1 | 0) != 0) {
    return;
  }
  r4 = (r1 + 548 | 0) >> 2;
  if ((HEAP32[r4] | 0) == 2) {
    while (1) {
      _incremental_gc(r1, -1);
      if ((HEAP32[r4] | 0) == 0) {
        break;
      }
    }
    r5 = HEAP32[r2];
  } else {
    r5 = r3;
  }
  do {
    if ((r5 & 4 | 0) != 0) {
      _clear_all_old(r1);
      HEAP32[r2] = HEAP32[r2] | 2;
      break;
    }
  } while (0);
  while (1) {
    _incremental_gc(r1, -1);
    if ((HEAP32[r4] | 0) == 0) {
      break;
    }
  }
  r4 = Math.floor((HEAP32[r1 + 564 >> 2] >>> 0) / 100);
  HEAP32[r1 + 568 >> 2] = HEAP32[r1 + 572 >> 2] * r4 & -1;
  r5 = HEAP32[r2];
  if ((r5 & 4 | 0) == 0) {
    return;
  }
  HEAP32[r1 + 584 >> 2] = r4 * 200 & -1;
  HEAP32[r2] = r5 & -3;
  return;
}
function _mrb_malloc(r1, r2) {
  return _mrb_realloc(r1, 0, r2);
}
function _mrb_calloc(r1, r2, r3) {
  var r4, r5;
  if (Math.floor(4294967295 / (r3 >>> 0)) >>> 0 < r2 >>> 0) {
    r4 = 0;
    return r4;
  }
  r5 = r3 * r2 & -1;
  r2 = _mrb_realloc(r1, 0, r5);
  if ((r2 | 0) == 0 | (r5 | 0) == 0) {
    r4 = r2;
    return r4;
  }
  _memset(r2, 0, r5);
  r4 = r2;
  return r4;
}
function _mrb_free(r1, r2) {
  FUNCTION_TABLE[HEAP32[r1 + 4 >> 2]](r1, r2, 0, HEAP32[r1 + 608 >> 2]);
  return;
}
function _mrb_init_heap(r1) {
  var r2;
  HEAP32[r1 + 128 >> 2] = 0;
  HEAP32[r1 + 136 >> 2] = 0;
  _add_heap(r1);
  HEAP32[r1 + 572 >> 2] = 200;
  HEAP32[r1 + 576 >> 2] = 200;
  r2 = r1 + 580 | 0;
  HEAP32[r2 >> 2] = HEAP32[r2 >> 2] | 6;
  return;
}
function _add_heap(r1) {
  var r2, r3, r4, r5, r6, r7, r8;
  r2 = _mrb_calloc(r1, 1, 24600);
  r3 = r2;
  r4 = r2 + 24600 | 0;
  r5 = r2 + 24 | 0;
  r6 = 0;
  while (1) {
    r7 = r5;
    HEAP32[r7 >> 2] = HEAP32[r7 >> 2] & -256 | 1;
    HEAP32[r5 + 12 >> 2] = r6;
    r8 = r5;
    r7 = r5 + 24 | 0;
    if (r7 >>> 0 < r4 >>> 0) {
      r5 = r7;
      r6 = r8;
    } else {
      break;
    }
  }
  HEAP32[r2 >> 2] = r8;
  _link_heap_page(r1, r3);
  _link_free_heap_page(r1, r3);
  return;
}
function _mrb_free_heap(r1) {
  var r2, r3, r4, r5, r6;
  r2 = HEAP32[r1 + 128 >> 2];
  if ((r2 | 0) == 0) {
    return;
  } else {
    r3 = r2;
  }
  while (1) {
    r2 = HEAP32[r3 + 8 >> 2];
    r4 = r3 + 24600 | 0;
    r5 = r3 + 24 | 0;
    while (1) {
      if ((HEAP32[r5 >> 2] & 255 | 0) != 1) {
        _obj_free(r1, r5);
      }
      r6 = r5 + 24 | 0;
      if (r6 >>> 0 < r4 >>> 0) {
        r5 = r6;
      } else {
        break;
      }
    }
    _mrb_free(r1, r3);
    if ((r2 | 0) == 0) {
      break;
    } else {
      r3 = r2;
    }
  }
  return;
}
function _obj_free(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = r2 >> 2;
  r4 = r2 >> 2;
  r5 = HEAP32[r4];
  r6 = r5 & 255;
  do {
    if ((r6 | 0) == 17) {
      if ((r5 & 524288 | 0) == 0) {
        _mrb_free(r1, HEAP32[r3 + 5] | 0);
        break;
      } else {
        _mrb_str_decref(r1, HEAP32[r3 + 4]);
        break;
      }
    } else if ((r6 | 0) == 24) {
      if ((HEAP32[r3 + 5] | 0) >= 0) {
        break;
      }
      r7 = r2 + 12 | 0;
      _mrb_free(r1, HEAP32[r7 >> 2]);
      HEAP32[r7 >> 2] = 0;
    } else if ((r6 | 0) == 10 | (r6 | 0) == 11 | (r6 | 0) == 13) {
      _mrb_gc_free_mt(HEAP32[r3 + 4]);
      _mrb_gc_free_iv(HEAP32[r3 + 3]);
    } else if ((r6 | 0) == 2 | (r6 | 0) == 3 | (r6 | 0) == 4 | (r6 | 0) == 6) {
      return;
    } else if ((r6 | 0) == 15) {
      if ((r5 & 524288 | 0) == 0) {
        _mrb_free(r1, HEAP32[r3 + 5] | 0);
        break;
      } else {
        _mrb_ary_decref(r1, HEAP32[r3 + 4]);
        break;
      }
    } else if ((r6 | 0) == 25) {
      r7 = HEAP32[HEAP32[r3 + 4] + 4 >> 2];
      if ((r7 | 0) != 0) {
        FUNCTION_TABLE[r7](r1, HEAP32[r3 + 5] | 0);
      }
      _mrb_gc_free_iv(HEAP32[r3 + 3]);
    } else if ((r6 | 0) == 9) {
      _mrb_gc_free_iv(HEAP32[r3 + 3]);
    } else if ((r6 | 0) == 20) {
      _mrb_free(r1, HEAP32[r3 + 4] | 0);
    } else if ((r6 | 0) == 16) {
      _mrb_gc_free_iv(HEAP32[r3 + 3]);
      _mrb_gc_free_ht(HEAP32[r3 + 4]);
    } else if ((r6 | 0) == 18) {
      _mrb_free(r1, HEAP32[r3 + 3]);
    }
  } while (0);
  HEAP32[r4] = HEAP32[r4] & -256 | 1;
  return;
}
_obj_free["X"] = 1;
function _mrb_gc_protect(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  if ((HEAP32[r2 + 4 >> 2] & 255) >>> 0 < 9) {
    STACKTOP = r3;
    return;
  }
  _gc_protect(r1, HEAP32[r2 >> 2]);
  STACKTOP = r3;
  return;
}
function _gc_protect(r1, r2) {
  var r3, r4, r5;
  r3 = (r1 + 544 | 0) >> 2;
  r4 = HEAP32[r3];
  if ((r4 | 0) > 100) {
    HEAP32[r3] = 96;
    _mrb_raise(r1, _mrb_class_obj_get(r1, 5319792), 5325512);
    r5 = HEAP32[r3];
  } else {
    r5 = r4;
  }
  HEAP32[r3] = r5 + 1 | 0;
  HEAP32[r1 + (r5 << 2) + 144 >> 2] = r2;
  return;
}
function _mrb_obj_alloc(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = (r1 + 140 | 0) >> 2;
  if (HEAP32[r1 + 568 >> 2] >>> 0 < HEAP32[r4] >>> 0) {
    _mrb_incremental_gc(r1);
  }
  r5 = (r1 + 136 | 0) >> 2;
  r6 = HEAP32[r5];
  if ((r6 | 0) == 0) {
    _add_heap(r1);
    r7 = HEAP32[r5];
  } else {
    r7 = r6;
  }
  r6 = r7 | 0;
  r7 = HEAP32[r6 >> 2];
  HEAP32[r6 >> 2] = HEAP32[r7 + 12 >> 2];
  r6 = HEAP32[r5];
  if ((HEAP32[r6 >> 2] | 0) == 0) {
    _unlink_free_heap_page(r1, r6);
  }
  HEAP32[r4] = HEAP32[r4] + 1 | 0;
  _gc_protect(r1, r7);
  r4 = (r7 | 0) >> 2;
  HEAP32[r4] = HEAP32[1327479];
  HEAP32[r4 + 1] = HEAP32[1327480];
  HEAP32[r4 + 2] = HEAP32[1327481];
  HEAP32[r4 + 3] = HEAP32[1327482];
  HEAP32[r4 + 4] = HEAP32[1327483];
  HEAP32[r4 + 5] = HEAP32[1327484];
  r4 = r2 & 255;
  r2 = r7;
  HEAP32[r2 >> 2] = r4;
  HEAP32[r7 + 4 >> 2] = r3;
  HEAP32[r2 >> 2] = r4 | HEAP32[r1 + 552 >> 2] << 8 & 1792;
  return r7;
}
function _mrb_bug(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  HEAP32[r4 >> 2] = r2;
  _printf(5319092, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  _printf(r1, HEAP32[r4 >> 2]);
  _exit(1);
}
function _mrb_gc_arena_save(r1) {
  return r1;
}
function _unlink_free_heap_page(r1, r2) {
  var r3, r4, r5;
  r3 = (r2 + 16 | 0) >> 2;
  r4 = HEAP32[r3];
  r5 = (r2 + 12 | 0) >> 2;
  if ((r4 | 0) != 0) {
    HEAP32[r4 + 12 >> 2] = HEAP32[r5];
  }
  r4 = HEAP32[r5];
  if ((r4 | 0) != 0) {
    HEAP32[r4 + 16 >> 2] = HEAP32[r3];
  }
  r4 = r1 + 136 | 0;
  if ((HEAP32[r4 >> 2] | 0) != (r2 | 0)) {
    HEAP32[r3] = 0;
    HEAP32[r5] = 0;
    return;
  }
  HEAP32[r4 >> 2] = HEAP32[r5];
  HEAP32[r3] = 0;
  HEAP32[r5] = 0;
  return;
}
function _add_gray_list(r1, r2) {
  var r3;
  r3 = r2;
  HEAP32[r3 >> 2] = HEAP32[r3 >> 2] & -1793;
  r3 = r1 + 556 | 0;
  HEAP32[r2 + 8 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r3 >> 2] = r2;
  return;
}
function _mrb_gc_arena_restore(r1, r2) {
  HEAP32[r1 + 544 >> 2] = r2;
  return;
}
function _mrb_write_barrier(r1, r2) {
  var r3, r4;
  r3 = r2;
  r4 = HEAP32[r3 >> 2];
  if ((r4 & 1024 | 0) == 0) {
    return;
  }
  HEAP32[r3 >> 2] = r4 & -1793;
  r4 = r1 + 560 | 0;
  HEAP32[r2 + 8 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r4 >> 2] = r2;
  return;
}
function _mrb_true_value964(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 2;
  return;
}
function _mrb_false_value965(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_nil_value966(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_fixnum_value967(r1, r2) {
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 3;
  return;
}
function _prepare_incremental_sweep(r1) {
  var r2;
  r2 = r1 >> 2;
  HEAP32[r2 + 137] = 2;
  HEAP32[r2 + 33] = HEAP32[r2 + 32];
  HEAP32[r2 + 141] = HEAP32[r2 + 35];
  return;
}
function _mrb_incremental_gc(r1) {
  var r2, r3, r4, r5, r6, r7, r8;
  r2 = r1 >> 2;
  r3 = (r1 + 580 | 0) >> 2;
  r4 = HEAP32[r3];
  if ((r4 & 1 | 0) != 0) {
    return;
  }
  L3196 : do {
    if ((r4 & 6 | 0) == 4) {
      r5 = r1 + 548 | 0;
      while (1) {
        _incremental_gc(r1, -1);
        if ((HEAP32[r5 >> 2] | 0) == 0) {
          break L3196;
        }
      }
    } else {
      r5 = HEAP32[r2 + 144] * 10 & -1;
      r6 = r1 + 548 | 0;
      r7 = 0;
      while (1) {
        if (r7 >>> 0 >= r5 >>> 0) {
          break;
        }
        r8 = _incremental_gc(r1, r5) + r7 | 0;
        if ((HEAP32[r6 >> 2] | 0) == 0) {
          break L3196;
        } else {
          r7 = r8;
        }
      }
      if ((HEAP32[r6 >> 2] | 0) == 0) {
        break;
      }
      HEAP32[r2 + 142] = HEAP32[r2 + 35] + 1024 | 0;
      return;
    }
  } while (0);
  r4 = Math.floor((HEAP32[r2 + 141] >>> 0) / 100);
  r7 = HEAP32[r2 + 143] * r4 & -1;
  HEAP32[r2 + 142] = r7 >>> 0 < 1024 ? 1024 : r7;
  r7 = HEAP32[r3];
  r5 = r7 & 6;
  if ((r5 | 0) == 4) {
    if (HEAP32[r2 + 35] >>> 0 <= HEAP32[r2 + 146] >>> 0) {
      return;
    }
    _clear_all_old(r1);
    HEAP32[r3] = HEAP32[r3] | 2;
    return;
  } else if ((r5 | 0) == 6) {
    HEAP32[r2 + 146] = r4 * 200 & -1;
    HEAP32[r3] = r7 & -3;
    return;
  } else {
    return;
  }
}
_mrb_incremental_gc["X"] = 1;
function _mrb_gc_mark(r1, r2) {
  if ((r2 | 0) == 0) {
    return;
  }
  if ((HEAP32[r2 >> 2] & 768 | 0) == 0) {
    return;
  }
  _add_gray_list(r1, r2);
  return;
}
function _incremental_gc(r1, r2) {
  var r3, r4, r5, r6;
  r3 = (r1 + 548 | 0) >> 2;
  r4 = HEAP32[r3];
  do {
    if ((r4 | 0) == 1) {
      if ((HEAP32[r1 + 556 >> 2] | 0) == 0) {
        _final_marking_phase(r1);
        _prepare_incremental_sweep(r1);
        r5 = 0;
        break;
      } else {
        r5 = _incremental_marking_phase(r1, r2);
        break;
      }
    } else if ((r4 | 0) == 2) {
      r6 = _incremental_sweep_phase(r1, r2);
      if ((r6 | 0) != 0) {
        r5 = r6;
        break;
      }
      HEAP32[r3] = 0;
      r5 = 0;
    } else if ((r4 | 0) == 0) {
      _root_scan_phase(r1);
      HEAP32[r3] = 1;
      r6 = r1 + 552 | 0;
      HEAP32[r6 >> 2] = HEAP32[r6 >> 2] ^ 3;
      r5 = 0;
    } else {
      r5 = 0;
    }
  } while (0);
  return r5;
}
function _clear_all_old(r1) {
  var r2, r3, r4, r5;
  r2 = (r1 + 580 | 0) >> 2;
  r3 = HEAP32[r2];
  r4 = r3 >>> 2 & 1;
  if ((r4 | 0) == 0 | (r3 & 2 | 0) == 0) {
    r5 = r3;
  } else {
    _advance_phase(r1);
    r5 = HEAP32[r2];
  }
  HEAP32[r2] = r5 & -5;
  _prepare_incremental_sweep(r1);
  _advance_phase(r1);
  HEAP32[r1 + 556 >> 2] = 0;
  HEAP32[r1 + 560 >> 2] = 0;
  HEAP32[r2] = HEAP32[r2] & -5 | r4 << 2;
  return;
}
function _mrb_field_write_barrier(r1, r2, r3) {
  var r4;
  r4 = r2;
  r2 = HEAP32[r4 >> 2];
  if ((r2 & 1024 | 0) == 0) {
    return;
  }
  if ((HEAP32[r3 >> 2] & 768 | 0) == 0) {
    return;
  }
  do {
    if ((HEAP32[r1 + 580 >> 2] & 4 | 0) == 0) {
      if ((HEAP32[r1 + 548 >> 2] | 0) == 1) {
        break;
      }
      HEAP32[r4 >> 2] = HEAP32[r1 + 552 >> 2] << 8 & 1792 | r2 & -1793;
      return;
    }
  } while (0);
  _add_gray_list(r1, r3);
  return;
}
function _mrb_init_gc(r1) {
  var r2;
  r2 = _mrb_define_module(r1, 5314020);
  _mrb_define_class_method(r1, r2, 5323732, 318);
  _mrb_define_class_method(r1, r2, 5320988, 322);
  _mrb_define_class_method(r1, r2, 5318968, 586);
  _mrb_define_class_method(r1, r2, 5317044, 348);
  _mrb_define_class_method(r1, r2, 5315604, 80);
  _mrb_define_class_method(r1, r2, 5315040, 100);
  _mrb_define_class_method(r1, r2, 5314696, 402);
  _mrb_define_class_method(r1, r2, 5314300, 614);
  _mrb_define_class_method(r1, r2, 5313840, 10);
  return;
}
function _gc_start(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_garbage_collect(r2);
  _mrb_nil_value966(r1);
  STACKTOP = r4;
  return;
}
function _gc_enable(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r2 + 580 | 0;
  r2 = HEAP32[r5 >> 2];
  HEAP32[r5 >> 2] = r2 & -2;
  if ((r2 & 1 | 0) == 0) {
    _mrb_false_value965(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value964(r1);
    STACKTOP = r4;
    return;
  }
}
function _gc_disable(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r2 + 580 | 0;
  r2 = HEAP32[r5 >> 2];
  HEAP32[r5 >> 2] = r2 | 1;
  if ((r2 & 1 | 0) == 0) {
    _mrb_false_value965(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value964(r1);
    STACKTOP = r4;
    return;
  }
}
function _gc_interval_ratio_get(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_fixnum_value967(r1, HEAP32[r2 + 572 >> 2]);
  STACKTOP = r4;
  return;
}
function _gc_interval_ratio_set(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320132, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  HEAP32[r2 + 572 >> 2] = HEAP32[r5 >> 2];
  _mrb_nil_value966(r1);
  STACKTOP = r4;
  return;
}
function _gc_step_ratio_get(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_fixnum_value967(r1, HEAP32[r2 + 576 >> 2]);
  STACKTOP = r4;
  return;
}
function _gc_step_ratio_set(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320132, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  HEAP32[r2 + 576 >> 2] = HEAP32[r5 >> 2];
  _mrb_nil_value966(r1);
  STACKTOP = r4;
  return;
}
function _gc_generational_mode_set(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5317144, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r3 = HEAP32[r2 + 580 >> 2] >>> 2 & 1;
  r6 = HEAP32[r5 >> 2];
  if ((r3 | 0) == (r6 | 0)) {
    r7 = r3;
  } else {
    _change_gen_gc_mode(r2, r6);
    r7 = HEAP32[r5 >> 2];
  }
  if ((r7 | 0) == 0) {
    _mrb_false_value965(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value964(r1);
    STACKTOP = r4;
    return;
  }
}
function _gc_generational_mode_get(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  if ((HEAP32[r2 + 580 >> 2] & 4 | 0) == 0) {
    _mrb_false_value965(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value964(r1);
    STACKTOP = r4;
    return;
  }
}
function _change_gen_gc_mode(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r3 = (r1 + 580 | 0) >> 2;
  r4 = HEAP32[r3];
  r5 = (r4 & 4 | 0) != 0;
  r6 = (r2 | 0) == 0;
  do {
    if (r5 & r6) {
      _clear_all_old(r1);
      r7 = HEAP32[r3] & -3;
      HEAP32[r3] = r7;
      r8 = r7;
    } else {
      if (r5 | r6) {
        r8 = r4;
        break;
      }
      _advance_phase(r1);
      HEAP32[r1 + 584 >> 2] = Math.floor((HEAP32[r1 + 564 >> 2] >>> 0) / 100) * 200 & -1;
      r7 = HEAP32[r3] & -3;
      HEAP32[r3] = r7;
      r8 = r7;
    }
  } while (0);
  HEAP32[r3] = r8 & -5 | r2 << 2 & 4;
  return;
}
function _advance_phase(r1) {
  var r2;
  r2 = r1 + 548 | 0;
  if ((HEAP32[r2 >> 2] | 0) == 0) {
    return;
  }
  while (1) {
    _incremental_gc(r1, -1);
    if ((HEAP32[r2 >> 2] | 0) == 0) {
      break;
    }
  }
  return;
}
function _root_scan_phase(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r2 = r1 >> 2;
  if ((HEAP32[r2 + 145] & 6 | 0) != 4) {
    HEAP32[r2 + 139] = 0;
    HEAP32[r2 + 140] = 0;
  }
  _mrb_gc_mark_gv(r1);
  r3 = HEAP32[r2 + 136];
  L3301 : do {
    if ((r3 | 0) > 0) {
      r4 = 0;
      while (1) {
        _mrb_gc_mark(r1, HEAP32[((r4 << 2) + 144 >> 2) + r2]);
        r5 = r4 + 1 | 0;
        if ((r5 | 0) == (r3 | 0)) {
          break L3301;
        } else {
          r4 = r5;
        }
      }
    }
  } while (0);
  _mrb_gc_mark(r1, HEAP32[r2 + 18]);
  _mrb_gc_mark(r1, HEAP32[r2 + 12]);
  r3 = r1 + 12 | 0;
  r4 = HEAP32[r3 >> 2];
  r5 = r4;
  r6 = HEAP32[r2 + 2] - r5 >> 3;
  r7 = (r1 + 20 | 0) >> 2;
  r8 = HEAP32[r7];
  if ((r8 | 0) == 0) {
    r9 = r6;
  } else {
    r9 = HEAP32[r8 + 12 >> 2] + r6 | 0;
  }
  r6 = HEAP32[r2 + 4];
  if (((r9 << 3) + r4 | 0) >>> 0 > r6 >>> 0) {
    r10 = r6 - r5 >> 3;
  } else {
    r10 = r9;
  }
  if ((r10 | 0) > 0) {
    r9 = 0;
    r5 = r4;
    while (1) {
      if ((HEAP32[r5 + (r9 << 3) + 4 >> 2] & 255) >>> 0 > 8) {
        _mrb_gc_mark(r1, HEAP32[r5 + (r9 << 3) >> 2]);
      }
      r4 = r9 + 1 | 0;
      if ((r4 | 0) == (r10 | 0)) {
        break;
      }
      r9 = r4;
      r5 = HEAP32[r3 >> 2];
    }
    r11 = HEAP32[r7];
  } else {
    r11 = r8;
  }
  do {
    if ((r11 | 0) == 0) {
      r12 = 0;
    } else {
      r8 = HEAP32[r11 + 36 >> 2];
      if ((r8 | 0) <= 0) {
        r12 = r11;
        break;
      }
      r3 = r1 + 40 | 0;
      r5 = 0;
      while (1) {
        _mrb_gc_mark(r1, HEAP32[HEAP32[r3 >> 2] + (r5 << 2) >> 2]);
        r9 = r5 + 1 | 0;
        if ((r9 | 0) == (r8 | 0)) {
          break;
        } else {
          r5 = r9;
        }
      }
      r12 = HEAP32[r7];
    }
  } while (0);
  r11 = HEAP32[r2 + 6];
  L3327 : do {
    if (r11 >>> 0 <= r12 >>> 0) {
      r5 = r11, r8 = r5 >> 2;
      r3 = r12;
      while (1) {
        if ((r5 | 0) == 0) {
          r13 = r3;
        } else {
          _mrb_gc_mark(r1, HEAP32[r8 + 10]);
          _mrb_gc_mark(r1, HEAP32[r8 + 1]);
          _mrb_gc_mark(r1, HEAP32[r8 + 7]);
          r13 = HEAP32[r7];
        }
        r9 = r5 + 44 | 0;
        if (r9 >>> 0 > r13 >>> 0) {
          break L3327;
        } else {
          r5 = r9, r8 = r5 >> 2;
          r3 = r13;
        }
      }
    }
  } while (0);
  r13 = r1 + 56 | 0;
  r7 = HEAP32[r13 >> 2];
  if ((r7 | 0) == 0) {
    return;
  }
  r12 = HEAP32[r2 + 15];
  r11 = HEAP32[r2 + 16];
  if (((r12 >>> 0 > r11 >>> 0 ? r11 : r12) | 0) == 0) {
    return;
  }
  r2 = r11 ^ -1;
  r11 = r12 ^ -1;
  r12 = (r2 >>> 0 > r11 >>> 0 ? r2 : r11) ^ -1;
  r11 = 0;
  r2 = r7;
  while (1) {
    r7 = HEAP32[r2 + (r11 << 2) >> 2];
    L3342 : do {
      if ((r7 | 0) != 0) {
        r3 = r7 + 32 | 0;
        r5 = HEAP32[r3 >> 2];
        if ((r5 | 0) <= 0) {
          break;
        }
        r8 = r7 + 12 | 0;
        r9 = 0;
        r10 = r5;
        while (1) {
          r5 = HEAP32[r8 >> 2];
          if ((HEAP32[r5 + (r9 << 3) + 4 >> 2] & 255) >>> 0 > 8) {
            _mrb_gc_mark(r1, HEAP32[r5 + (r9 << 3) >> 2]);
            r14 = HEAP32[r3 >> 2];
          } else {
            r14 = r10;
          }
          r5 = r9 + 1 | 0;
          if ((r5 | 0) < (r14 | 0)) {
            r9 = r5;
            r10 = r14;
          } else {
            break L3342;
          }
        }
      }
    } while (0);
    r7 = r11 + 1 | 0;
    if ((r7 | 0) == (r12 | 0)) {
      break;
    }
    r11 = r7;
    r2 = HEAP32[r13 >> 2];
  }
  return;
}
_root_scan_phase["X"] = 1;
function _incremental_marking_phase(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r3 = r1 + 556 | 0;
  r4 = HEAP32[r3 >> 2];
  if ((r4 | 0) != 0 & (r2 | 0) != 0) {
    r5 = 0;
    r6 = r4;
  } else {
    r7 = 0;
    return r7;
  }
  while (1) {
    r4 = _gc_gray_mark(r1, r6) + r5 | 0;
    r8 = HEAP32[r3 >> 2];
    if ((r8 | 0) != 0 & r4 >>> 0 < r2 >>> 0) {
      r5 = r4;
      r6 = r8;
    } else {
      r7 = r4;
      break;
    }
  }
  return r7;
}
function _final_marking_phase(r1) {
  var r2, r3, r4, r5, r6, r7, r8;
  r2 = 0;
  r3 = (r1 + 556 | 0) >> 2;
  r4 = HEAP32[r3];
  L3360 : do {
    if ((r4 | 0) != 0) {
      r5 = r4;
      while (1) {
        if ((HEAP32[r5 >> 2] & 1792 | 0) == 0) {
          _gc_mark_children(r1, r5);
          r6 = HEAP32[r3];
        } else {
          r7 = HEAP32[r5 + 8 >> 2];
          HEAP32[r3] = r7;
          r6 = r7;
        }
        if ((r6 | 0) == 0) {
          break L3360;
        } else {
          r5 = r6;
        }
      }
    }
  } while (0);
  r6 = r1 + 560 | 0;
  r4 = HEAP32[r6 >> 2];
  HEAP32[r3] = r4;
  HEAP32[r6 >> 2] = 0;
  if ((r4 | 0) == 0) {
    return;
  } else {
    r8 = r4;
  }
  while (1) {
    if ((HEAP32[r8 >> 2] & 1792 | 0) == 0) {
      _gc_mark_children(r1, r8);
      r4 = HEAP32[r3];
      if ((r4 | 0) == 0) {
        r2 = 2702;
        break;
      } else {
        r8 = r4;
        continue;
      }
    } else {
      r4 = HEAP32[r8 + 8 >> 2];
      HEAP32[r3] = r4;
      if ((r4 | 0) == 0) {
        r2 = 2701;
        break;
      } else {
        r8 = r4;
        continue;
      }
    }
  }
  if (r2 == 2701) {
    return;
  } else if (r2 == 2702) {
    return;
  }
}
function _unlink_heap_page(r1, r2) {
  var r3, r4, r5;
  r3 = (r2 + 4 | 0) >> 2;
  r4 = HEAP32[r3];
  r5 = (r2 + 8 | 0) >> 2;
  if ((r4 | 0) != 0) {
    HEAP32[r4 + 8 >> 2] = HEAP32[r5];
  }
  r4 = HEAP32[r5];
  if ((r4 | 0) != 0) {
    HEAP32[r4 + 4 >> 2] = HEAP32[r3];
  }
  r4 = r1 + 128 | 0;
  if ((HEAP32[r4 >> 2] | 0) != (r2 | 0)) {
    HEAP32[r3] = 0;
    HEAP32[r5] = 0;
    return;
  }
  HEAP32[r4 >> 2] = HEAP32[r5];
  HEAP32[r3] = 0;
  HEAP32[r5] = 0;
  return;
}
function _link_free_heap_page(r1, r2) {
  var r3;
  r3 = (r1 + 136 | 0) >> 2;
  HEAP32[r2 + 12 >> 2] = HEAP32[r3];
  r1 = HEAP32[r3];
  if ((r1 | 0) == 0) {
    HEAP32[r3] = r2;
    return;
  }
  HEAP32[r1 + 16 >> 2] = r2;
  HEAP32[r3] = r2;
  return;
}
function _link_heap_page(r1, r2) {
  var r3;
  r3 = (r1 + 128 | 0) >> 2;
  HEAP32[r2 + 8 >> 2] = HEAP32[r3];
  r1 = HEAP32[r3];
  if ((r1 | 0) == 0) {
    HEAP32[r3] = r2;
    return;
  }
  HEAP32[r1 + 4 >> 2] = r2;
  HEAP32[r3] = r2;
  return;
}
function _incremental_sweep_phase(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29;
  r3 = 0;
  r4 = (r1 + 132 | 0) >> 2;
  r5 = HEAP32[r4];
  if (!((r2 | 0) != 0 & (r5 | 0) != 0)) {
    r6 = 0;
    r7 = r5;
    HEAP32[r4] = r7;
    return r6;
  }
  r8 = (r1 + 580 | 0) >> 2;
  r9 = r1 + 140 | 0;
  r10 = r1 + 564 | 0;
  r11 = r1 + 552 | 0;
  r12 = 0;
  r13 = r5, r5 = r13 >> 2;
  while (1) {
    r14 = r13 + 24 | 0;
    r15 = r13 + 24600 | 0;
    r16 = (r13 | 0) >> 2;
    r17 = (HEAP32[r16] | 0) != 0;
    do {
      if ((HEAP32[r8] & 6 | 0) == 4) {
        r18 = HEAP32[r5 + 5] & 1;
        r19 = (r18 | 0) == 0;
        r20 = r18 ^ 1;
        if (r19) {
          r21 = r19 ? r14 : r15;
          r22 = 0;
          r23 = r20;
          r3 = 2726;
          break;
        } else {
          r24 = 0;
          r25 = r20;
          break;
        }
      } else {
        r21 = r14;
        r22 = 0;
        r23 = 1;
        r3 = 2726;
      }
    } while (0);
    L3407 : do {
      if (r3 == 2726) {
        while (1) {
          r3 = 0;
          r14 = r21;
          r20 = r21;
          r19 = HEAP32[r20 >> 2];
          r18 = HEAP32[r11 >> 2];
          r26 = (r19 & 255 | 0) == 1;
          do {
            if ((r19 >>> 8 & 3 & (r18 ^ 3) | 0) == 0) {
              if (r26) {
                r27 = r23;
                r28 = r22;
                break;
              }
              if ((HEAP32[r8] & 4 | 0) != 0) {
                r27 = 0;
                r28 = r22;
                break;
              }
              HEAP32[r20 >> 2] = r18 << 8 & 1792 | r19 & -1793;
              r27 = 0;
              r28 = r22;
            } else {
              if (r26) {
                r27 = r23;
                r28 = r22;
                break;
              }
              _obj_free(r1, r14);
              HEAP32[r21 + 12 >> 2] = HEAP32[r16];
              HEAP32[r16] = r14;
              r27 = r23;
              r28 = r22 + 1 | 0;
            }
          } while (0);
          r14 = r21 + 24 | 0;
          if (r14 >>> 0 < r15 >>> 0) {
            r21 = r14;
            r22 = r28;
            r23 = r27;
            r3 = 2726;
          } else {
            r24 = r28;
            r25 = r27;
            break L3407;
          }
        }
      }
    } while (0);
    if ((r25 | 0) != 0 & r24 >>> 0 < 1024) {
      r15 = HEAP32[r5 + 2];
      _unlink_heap_page(r1, r13);
      _unlink_free_heap_page(r1, r13);
      _mrb_free(r1, r13);
      r29 = r15;
    } else {
      if (!(r17 | (r24 | 0) == 0)) {
        _link_free_heap_page(r1, r13);
      }
      do {
        if ((HEAP32[r16] | 0) == 0) {
          if ((HEAP32[r8] & 6 | 0) != 4) {
            r3 = 2740;
            break;
          }
          r15 = r13 + 20 | 0;
          HEAP32[r15 >> 2] = HEAP32[r15 >> 2] | 1;
          break;
        } else {
          r3 = 2740;
        }
      } while (0);
      if (r3 == 2740) {
        r3 = 0;
        r16 = r13 + 20 | 0;
        HEAP32[r16 >> 2] = HEAP32[r16 >> 2] & -2;
      }
      r29 = HEAP32[r5 + 2];
    }
    r16 = r12 + 1024 | 0;
    HEAP32[r9 >> 2] = HEAP32[r9 >> 2] - r24 | 0;
    HEAP32[r10 >> 2] = HEAP32[r10 >> 2] - r24 | 0;
    if (r16 >>> 0 < r2 >>> 0 & (r29 | 0) != 0) {
      r12 = r16;
      r13 = r29, r5 = r13 >> 2;
    } else {
      r6 = r16;
      r7 = r29;
      break;
    }
  }
  HEAP32[r4] = r7;
  return r6;
}
_incremental_sweep_phase["X"] = 1;
function _gc_mark_children(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11;
  r3 = r2 >> 2;
  r4 = r2 >> 2;
  HEAP32[r4] = HEAP32[r4] & -1793 | 1024;
  HEAP32[r1 + 556 >> 2] = HEAP32[r3 + 2];
  _mrb_gc_mark(r1, HEAP32[r3 + 1]);
  r5 = HEAP32[r4];
  r4 = r5 & 255;
  if ((r4 | 0) == 24) {
    if ((HEAP32[r3 + 5] | 0) >= 0) {
      return;
    }
    r6 = r5 >>> 11;
    if ((r6 | 0) == 0) {
      return;
    }
    r5 = r2 + 12 | 0;
    r7 = 0;
    while (1) {
      r8 = HEAP32[r5 >> 2];
      if ((HEAP32[r8 + (r7 << 3) + 4 >> 2] & 255) >>> 0 > 8) {
        _mrb_gc_mark(r1, HEAP32[r8 + (r7 << 3) >> 2]);
      }
      r8 = r7 + 1 | 0;
      if ((r8 | 0) < (r6 | 0)) {
        r7 = r8;
      } else {
        break;
      }
    }
    return;
  } else if ((r4 | 0) == 14) {
    _mrb_gc_mark(r1, HEAP32[r3 + 5]);
    _mrb_gc_mark(r1, HEAP32[r3 + 4]);
    return;
  } else if ((r4 | 0) == 12) {
    _mrb_gc_mark(r1, HEAP32[r3 + 5]);
    return;
  } else if ((r4 | 0) == 10 | (r4 | 0) == 11 | (r4 | 0) == 13) {
    _mrb_gc_mark_mt(r1, HEAP32[r3 + 4]);
    _mrb_gc_mark(r1, HEAP32[r3 + 5]);
  } else if ((r4 | 0) == 20) {
    r7 = r2 + 12 | 0;
    r6 = HEAP32[r7 >> 2];
    if ((r6 | 0) <= 0) {
      return;
    }
    r5 = r2 + 16 | 0;
    r8 = 0;
    r9 = r6;
    while (1) {
      r6 = HEAP32[r5 >> 2];
      if ((HEAP32[r6 + (r8 << 3) + 4 >> 2] & 255) >>> 0 > 8) {
        _mrb_gc_mark(r1, HEAP32[r6 + (r8 << 3) >> 2]);
        r10 = HEAP32[r7 >> 2];
      } else {
        r10 = r9;
      }
      r6 = r8 + 1 | 0;
      if ((r6 | 0) < (r10 | 0)) {
        r8 = r6;
        r9 = r10;
      } else {
        break;
      }
    }
    return;
  } else if ((r4 | 0) == 16) {
    _mrb_gc_mark_iv(r1, HEAP32[r3 + 3]);
    _mrb_gc_mark_ht(r1, HEAP32[r3 + 4]);
    return;
  } else if ((r4 | 0) == 15) {
    r10 = HEAP32[r3 + 3];
    if ((r10 | 0) == 0) {
      return;
    }
    r9 = r2 + 20 | 0;
    r8 = 0;
    while (1) {
      r7 = HEAP32[r9 >> 2];
      if ((HEAP32[r7 + (r8 << 3) + 4 >> 2] & 255) >>> 0 > 8) {
        _mrb_gc_mark(r1, HEAP32[r7 + (r8 << 3) >> 2]);
      }
      r7 = r8 + 1 | 0;
      if ((r7 | 0) == (r10 | 0)) {
        break;
      } else {
        r8 = r7;
      }
    }
    return;
  } else if ((r4 | 0) == 18) {
    r8 = r2 + 12 | 0;
    r2 = HEAP32[r8 >> 2];
    if ((r2 | 0) == 0) {
      return;
    }
    if ((HEAP32[r2 + 4 >> 2] & 255) >>> 0 > 8) {
      _mrb_gc_mark(r1, HEAP32[r2 >> 2]);
      r11 = HEAP32[r8 >> 2];
    } else {
      r11 = r2;
    }
    if ((HEAP32[r11 + 12 >> 2] & 255) >>> 0 <= 8) {
      return;
    }
    _mrb_gc_mark(r1, HEAP32[r11 + 8 >> 2]);
    return;
  } else if (!((r4 | 0) == 9 | (r4 | 0) == 25)) {
    return;
  }
  _mrb_gc_mark_iv(r1, HEAP32[r3 + 3]);
  return;
}
_gc_mark_children["X"] = 1;
function _gc_gray_mark(r1, r2) {
  var r3, r4;
  r3 = r2 >> 2;
  _gc_mark_children(r1, r2);
  r2 = HEAP32[r3];
  r1 = r2 & 255;
  if ((r1 | 0) == 15) {
    r4 = HEAP32[r3 + 3];
  } else if ((r1 | 0) == 20) {
    r4 = HEAP32[r3 + 3];
  } else if ((r1 | 0) == 14 | (r1 | 0) == 18) {
    r4 = 2;
  } else if ((r1 | 0) == 16) {
    r4 = _mrb_gc_mark_iv_size(HEAP32[r3 + 3]) + _mrb_gc_mark_ht_size(HEAP32[r3 + 4]) | 0;
  } else if ((r1 | 0) == 12) {
    r4 = 1;
  } else if ((r1 | 0) == 9 | (r1 | 0) == 25) {
    r4 = _mrb_gc_mark_iv_size(HEAP32[r3 + 3]);
  } else if ((r1 | 0) == 10 | (r1 | 0) == 13 | (r1 | 0) == 11) {
    r4 = _mrb_gc_mark_iv_size(HEAP32[r3 + 3]) + _mrb_gc_mark_mt_size(HEAP32[r3 + 4]) + 1 | 0;
  } else if ((r1 | 0) == 24) {
    r4 = r2 >>> 11;
  } else {
    r4 = 0;
  }
  return r4;
}
function _kh_alloc_ht(r1) {
  var r2, r3, r4, r5, r6, r7, r8;
  r2 = r1 >> 2;
  r3 = HEAP32[r2];
  HEAP32[r2 + 2] = 0;
  HEAP32[r2 + 1] = 0;
  r4 = r3 >>> 2;
  r5 = r3 >>> 1;
  HEAP32[r2 + 3] = r4 | r5;
  r6 = (r1 + 40 | 0) >> 2;
  r7 = _mrb_malloc(HEAP32[r6], r4);
  HEAP32[r2 + 4] = r7;
  r4 = r3 >>> 3;
  r8 = r1 + 20 | 0;
  HEAP32[r8 >> 2] = r7 + r4 | 0;
  _memset(r7, -1, r4);
  _memset(HEAP32[r8 >> 2], 0, r4);
  r4 = r3 << 3;
  HEAP32[r2 + 6] = _mrb_malloc(HEAP32[r6], r4);
  HEAP32[r2 + 7] = _mrb_malloc(HEAP32[r6], r4);
  HEAP32[r2 + 8] = r3 - 1 | 0;
  HEAP32[r2 + 9] = r5 - 1 | 0;
  return;
}
function _kh_init_ht_size(r1) {
  var r2, r3;
  r2 = _mrb_calloc(r1, 1, 44);
  r3 = r2;
  HEAP32[r2 >> 2] = 32;
  HEAP32[r2 + 40 >> 2] = r1;
  _kh_alloc_ht(r3);
  return r3;
}
function _kh_init_ht(r1) {
  return _kh_init_ht_size(r1);
}
function _kh_destroy_ht(r1) {
  var r2;
  if ((r1 | 0) == 0) {
    return;
  }
  r2 = (r1 + 40 | 0) >> 2;
  _mrb_free(HEAP32[r2], HEAP32[r1 + 24 >> 2]);
  _mrb_free(HEAP32[r2], HEAP32[r1 + 28 >> 2]);
  _mrb_free(HEAP32[r2], HEAP32[r1 + 16 >> 2]);
  _mrb_free(HEAP32[r2], r1);
  return;
}
function _kh_clear_ht(r1) {
  var r2, r3;
  if ((r1 | 0) == 0) {
    return;
  }
  r2 = HEAP32[r1 + 16 >> 2];
  if ((r2 | 0) == 0) {
    return;
  }
  r3 = r1 | 0;
  _memset(r2, -1, HEAP32[r3 >> 2] >>> 3);
  _memset(HEAP32[r1 + 20 >> 2], 0, HEAP32[r3 >> 2] >>> 3);
  HEAP32[r1 + 8 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _kh_get_ht(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25;
  r3 = STACKTOP;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = r1 + 40 | 0;
  r5 = _mrb_hash_ht_hash_func(HEAP32[r4 >> 2], r2);
  r6 = r1 + 32 | 0;
  r7 = HEAP32[r6 >> 2];
  r8 = r7 & r5;
  r5 = r8 >>> 3;
  r9 = r1 + 16 | 0;
  r10 = HEAP32[r9 >> 2];
  r11 = HEAP8[(r8 & 7) + 5327036 | 0];
  L3516 : do {
    if ((r11 & HEAP8[r10 + r5 | 0]) << 24 >> 24 == 0) {
      r12 = r1 + 20 | 0;
      r13 = r1 + 24 | 0;
      r14 = r1 + 36 | 0;
      r15 = r8;
      r16 = r5;
      r17 = r11;
      r18 = r7;
      r19 = r10;
      while (1) {
        if ((HEAP8[HEAP32[r12 >> 2] + r16 | 0] & r17) << 24 >> 24 == 0) {
          if ((_mrb_hash_ht_hash_equal(HEAP32[r4 >> 2], (r15 << 3) + HEAP32[r13 >> 2] | 0, r2) | 0) != 0) {
            r20 = r15;
            break;
          }
          r21 = HEAP32[r6 >> 2];
          r22 = HEAP32[r9 >> 2];
        } else {
          r21 = r18;
          r22 = r19;
        }
        r23 = HEAP32[r14 >> 2] + r15 & r21;
        r24 = r23 >>> 3;
        r25 = HEAP8[(r23 & 7) + 5327036 | 0];
        if ((r25 & HEAP8[r22 + r24 | 0]) << 24 >> 24 == 0) {
          r15 = r23;
          r16 = r24;
          r17 = r25;
          r18 = r21;
          r19 = r22;
        } else {
          break L3516;
        }
      }
      STACKTOP = r3;
      return r20;
    }
  } while (0);
  r20 = HEAP32[r1 >> 2];
  STACKTOP = r3;
  return r20;
}
_kh_get_ht["X"] = 1;
function _mrb_hash_ht_hash_func(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = r3;
  r5 = HEAP32[r2 + 4 >> 2] << 24;
  _mrb_funcall(r4, r1, r2, 5321020, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 0, tempInt));
  STACKTOP = r3;
  return HEAP32[r4 >> 2] ^ r5;
}
function _mrb_hash_ht_hash_equal(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  r5 = r2, r6 = r5 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 1];
  r5 = r3, r6 = r5 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 1];
  r6 = _mrb_eql(r1, r2, r3);
  STACKTOP = r4;
  return r6;
}
function _kh_resize_ht(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r3 = r2 >>> 0 < 8 ? 7 : r2 - 1 | 0;
  r2 = r3 >>> 1 | r3;
  r3 = r2 >>> 2 | r2;
  r2 = r3 >>> 4 | r3;
  r3 = r2 >>> 8 | r2;
  r2 = HEAP32[r1 + 16 >> 2];
  r4 = HEAP32[r1 + 24 >> 2];
  r5 = r1 + 28 | 0;
  r6 = HEAP32[r5 >> 2];
  r7 = r1 | 0;
  r8 = HEAP32[r7 >> 2];
  HEAP32[r7 >> 2] = (r3 >>> 16 | r3) + 1 | 0;
  _kh_alloc_ht(r1);
  if ((r8 | 0) == 0) {
    r9 = r1 + 40 | 0, r10 = r9 >> 2;
    r11 = HEAP32[r10];
    _mrb_free(r11, r2);
    r12 = HEAP32[r10];
    r13 = r4;
    _mrb_free(r12, r13);
    r14 = HEAP32[r10];
    r15 = r6;
    _mrb_free(r14, r15);
    return;
  } else {
    r16 = 0;
  }
  while (1) {
    if ((HEAP8[(r16 & 7) + 5327036 | 0] & HEAP8[r2 + (r16 >>> 3) | 0]) << 24 >> 24 == 0) {
      r3 = (r16 << 3) + r6 | 0;
      r7 = (_kh_put_ht(r1, (r16 << 3) + r4 | 0) << 3) + HEAP32[r5 >> 2] | 0;
      r17 = HEAP32[r3 + 4 >> 2];
      HEAP32[r7 >> 2] = HEAP32[r3 >> 2];
      HEAP32[r7 + 4 >> 2] = r17;
    }
    r17 = r16 + 1 | 0;
    if ((r17 | 0) == (r8 | 0)) {
      break;
    } else {
      r16 = r17;
    }
  }
  r9 = r1 + 40 | 0, r10 = r9 >> 2;
  r11 = HEAP32[r10];
  _mrb_free(r11, r2);
  r12 = HEAP32[r10];
  r13 = r4;
  _mrb_free(r12, r13);
  r14 = HEAP32[r10];
  r15 = r6;
  _mrb_free(r14, r15);
  return;
}
_kh_resize_ht["X"] = 1;
function _kh_del_ht(r1, r2) {
  var r3;
  r3 = HEAP32[r1 + 20 >> 2] + (r2 >>> 3) | 0;
  HEAP8[r3] = HEAP8[r3] | HEAP8[(r2 & 7) + 5327036 | 0];
  r2 = r1 + 4 | 0;
  HEAP32[r2 >> 2] = HEAP32[r2 >> 2] - 1 | 0;
  return;
}
function _mrb_gc_mark_ht_size(r1) {
  var r2;
  if ((r1 | 0) == 0) {
    r2 = 0;
  } else {
    r2 = HEAP32[r1 + 4 >> 2] << 1;
  }
  return r2;
}
function _mrb_obj_value1023(r1, r2) {
  var r3;
  r3 = HEAP32[r2 >> 2] & 255;
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = r3;
  return;
}
function _mrb_nil_value1026(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _kh_put_ht(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39;
  r3 = 0;
  r4 = STACKTOP;
  r5 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = (r1 + 8 | 0) >> 2;
  if (HEAP32[r5] >>> 0 >= HEAP32[r1 + 12 >> 2] >>> 0) {
    _kh_resize_ht(r1, HEAP32[r1 >> 2] << 1);
  }
  r6 = r1 + 40 | 0;
  r7 = r1 + 32 | 0;
  r8 = _mrb_hash_ht_hash_func(HEAP32[r6 >> 2], r2) & HEAP32[r7 >> 2];
  r9 = (r1 + 20 | 0) >> 2;
  r10 = r8 >>> 3;
  r11 = (r1 + 16 | 0) >> 2;
  r12 = HEAP32[r11];
  r13 = HEAP8[r12 + r10 | 0];
  r14 = (r8 & 7) + 5327036 | 0;
  r15 = HEAP8[r14];
  L3549 : do {
    if ((r15 & r13) << 24 >> 24 == 0) {
      r16 = r1 + 24 | 0;
      r17 = r1 + 36 | 0;
      r18 = r8;
      r19 = r10;
      r20 = r14;
      r21 = r15;
      r22 = r12;
      while (1) {
        if ((HEAP8[HEAP32[r9] + r19 | 0] & r21) << 24 >> 24 != 0) {
          r23 = r22;
          r24 = r21;
          break;
        }
        if ((_mrb_hash_ht_hash_equal(HEAP32[r6 >> 2], (r18 << 3) + HEAP32[r16 >> 2] | 0, r2) | 0) != 0) {
          r3 = 2845;
          break;
        }
        r25 = HEAP32[r17 >> 2] + r18 & HEAP32[r7 >> 2];
        r26 = r25 >>> 3;
        r27 = HEAP32[r11];
        r28 = HEAP8[r27 + r26 | 0];
        r29 = (r25 & 7) + 5327036 | 0;
        r30 = HEAP8[r29];
        if ((r30 & r28) << 24 >> 24 == 0) {
          r18 = r25;
          r19 = r26;
          r20 = r29;
          r21 = r30;
          r22 = r27;
        } else {
          r31 = r25;
          r32 = r26;
          r33 = r29;
          r34 = r30;
          r35 = r28;
          break L3549;
        }
      }
      if (r3 == 2845) {
        r23 = HEAP32[r11];
        r24 = HEAP8[r20];
      }
      r31 = r18;
      r32 = r19;
      r33 = r20;
      r34 = r24;
      r35 = HEAP8[r23 + r19 | 0];
    } else {
      r31 = r8;
      r32 = r10;
      r33 = r14;
      r34 = r15;
      r35 = r13;
    }
  } while (0);
  if ((r34 & r35) << 24 >> 24 != 0) {
    r35 = r2;
    r13 = (r31 << 3) + HEAP32[r1 + 24 >> 2] | 0;
    r36 = r35 | 0;
    r37 = r35 + 4 | 0;
    r35 = HEAP32[r37 >> 2];
    r38 = r13 | 0;
    HEAP32[r38 >> 2] = HEAP32[r36 >> 2];
    r39 = r13 + 4 | 0;
    HEAP32[r39 >> 2] = r35;
    r35 = HEAP32[r11] + r32 | 0;
    HEAP8[r35] = HEAP8[r35] & (HEAP8[r33] ^ -1);
    r35 = r1 + 4 | 0;
    HEAP32[r35 >> 2] = HEAP32[r35 >> 2] + 1 | 0;
    HEAP32[r5] = HEAP32[r5] + 1 | 0;
    STACKTOP = r4;
    return r31;
  }
  if ((HEAP8[HEAP32[r9] + r32 | 0] & r34) << 24 >> 24 == 0) {
    STACKTOP = r4;
    return r31;
  }
  r34 = r2;
  r2 = (r31 << 3) + HEAP32[r1 + 24 >> 2] | 0;
  r36 = r34 | 0;
  r37 = r34 + 4 | 0;
  r34 = HEAP32[r37 >> 2];
  r38 = r2 | 0;
  HEAP32[r38 >> 2] = HEAP32[r36 >> 2];
  r39 = r2 + 4 | 0;
  HEAP32[r39 >> 2] = r34;
  r34 = HEAP32[r9] + r32 | 0;
  HEAP8[r34] = HEAP8[r34] & (HEAP8[r33] ^ -1);
  r33 = r1 + 4 | 0;
  HEAP32[r33 >> 2] = HEAP32[r33 >> 2] + 1 | 0;
  STACKTOP = r4;
  return r31;
}
_kh_put_ht["X"] = 1;
function _mrb_gc_mark_ht(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10;
  if ((r2 | 0) == 0) {
    return;
  }
  r3 = r2 | 0;
  if ((HEAP32[r3 >> 2] | 0) == 0) {
    return;
  }
  r4 = r2 + 16 | 0;
  r5 = r2 + 20 | 0;
  r6 = r2 + 24 | 0;
  r7 = r2 + 28 | 0;
  r2 = 0;
  while (1) {
    r8 = r2 >>> 3;
    r9 = HEAP8[(r2 & 7) + 5327036 | 0];
    do {
      if ((r9 & HEAP8[HEAP32[r4 >> 2] + r8 | 0]) << 24 >> 24 == 0) {
        if ((HEAP8[HEAP32[r5 >> 2] + r8 | 0] & r9) << 24 >> 24 != 0) {
          break;
        }
        r10 = HEAP32[r6 >> 2];
        if ((HEAP32[r10 + (r2 << 3) + 4 >> 2] & 255) >>> 0 > 8) {
          _mrb_gc_mark(r1, HEAP32[r10 + (r2 << 3) >> 2]);
        }
        r10 = HEAP32[r7 >> 2];
        if ((HEAP32[r10 + (r2 << 3) + 4 >> 2] & 255) >>> 0 <= 8) {
          break;
        }
        _mrb_gc_mark(r1, HEAP32[r10 + (r2 << 3) >> 2]);
      }
    } while (0);
    r9 = r2 + 1 | 0;
    if ((r9 | 0) == (HEAP32[r3 >> 2] | 0)) {
      break;
    } else {
      r2 = r9;
    }
  }
  return;
}
_mrb_gc_mark_ht["X"] = 1;
function _mrb_gc_free_ht(r1) {
  if ((r1 | 0) == 0) {
    return;
  }
  _kh_destroy_ht(r1);
  return;
}
function _mrb_hash_new_capa(r1, r2, r3) {
  var r4, r5;
  r4 = _mrb_obj_alloc(r2, 16, HEAP32[r2 + 96 >> 2]);
  r5 = _kh_init_ht(r2);
  HEAP32[r4 + 16 >> 2] = r5;
  if ((r3 | 0) > 0) {
    _kh_resize_ht(r5, r3);
  }
  HEAP32[r4 + 12 >> 2] = 0;
  _mrb_obj_value1023(r1, r4 | 0);
  return;
}
function _mrb_hash_get(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r3, r7 = r6 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r4, r7 = r6 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r7];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7 + 1];
  r7 = r5;
  r6 = r3;
  r8 = HEAP32[r6 >> 2];
  r9 = HEAP32[r8 + 16 >> 2];
  do {
    if ((r9 | 0) == 0) {
      r10 = r8;
    } else {
      r11 = _kh_get_ht(r9, r4);
      if ((r11 | 0) == (HEAP32[r9 >> 2] | 0)) {
        r10 = HEAP32[r6 >> 2];
        break;
      }
      r12 = (r11 << 3) + HEAP32[r9 + 28 >> 2] | 0;
      r11 = r1;
      r13 = HEAP32[r12 + 4 >> 2];
      HEAP32[r11 >> 2] = HEAP32[r12 >> 2];
      HEAP32[r11 + 4 >> 2] = r13;
      STACKTOP = r5;
      return;
    }
  } while (0);
  r9 = (HEAP32[r10 >> 2] & 524288 | 0) == 0;
  r10 = _mrb_intern(r2, 5313932);
  if (r9) {
    _mrb_iv_get(r1, r3, r10);
    STACKTOP = r5;
    return;
  } else {
    _mrb_iv_get(r7, r3, r10);
    _mrb_funcall(r1, r2, r7, 5320144, 2, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = HEAP32[r3 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r3 + 4 >> 2], HEAP32[tempInt + 8 >> 2] = HEAP32[r4 >> 2], HEAP32[tempInt + 12 >> 2] = HEAP32[r4 + 4 >> 2], tempInt));
    STACKTOP = r5;
    return;
  }
}
function _mrb_hash_fetch(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = STACKTOP;
  r6 = r2, r7 = r6 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r7];
  HEAP32[r2 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r3, r7 = r6 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r4, r7 = r6 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r7];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7 + 1];
  r7 = HEAP32[HEAP32[r2 >> 2] + 16 >> 2];
  do {
    if ((r7 | 0) != 0) {
      r2 = _kh_get_ht(r7, r3);
      if ((r2 | 0) == (HEAP32[r7 >> 2] | 0)) {
        break;
      }
      r6 = (r2 << 3) + HEAP32[r7 + 28 >> 2] | 0;
      r2 = r1;
      r8 = HEAP32[r6 + 4 >> 2];
      HEAP32[r2 >> 2] = HEAP32[r6 >> 2];
      HEAP32[r2 + 4 >> 2] = r8;
      STACKTOP = r5;
      return;
    }
  } while (0);
  r7 = r4;
  r4 = r1;
  r1 = HEAP32[r7 + 4 >> 2];
  HEAP32[r4 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r4 + 4 >> 2] = r1;
  STACKTOP = r5;
  return;
}
function _mrb_hash_set(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r2, r7 = r6 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r7];
  HEAP32[r2 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r3, r7 = r6 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r4, r7 = r6 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r7];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7 + 1];
  r7 = r5;
  _mrb_hash_modify(r1, r2);
  r6 = HEAP32[r2 >> 2];
  r2 = r6 + 16 | 0;
  r8 = HEAP32[r2 >> 2];
  if ((r8 | 0) == 0) {
    r9 = _kh_init_ht(r1);
    HEAP32[r2 >> 2] = r9;
    r10 = r9;
  } else {
    r10 = r8;
  }
  r8 = _kh_get_ht(r10, r3);
  if ((r8 | 0) == (HEAP32[r10 >> 2] | 0)) {
    _mrb_hash_ht_key(r7, r1, r3);
    r11 = _kh_put_ht(r10, r7);
  } else {
    r11 = r8;
  }
  r8 = r4;
  r4 = (r11 << 3) + HEAP32[r10 + 28 >> 2] | 0;
  r10 = HEAP32[r8 + 4 >> 2];
  HEAP32[r4 >> 2] = HEAP32[r8 >> 2];
  HEAP32[r4 + 4 >> 2] = r10;
  _mrb_write_barrier(r1, r6);
  STACKTOP = r5;
  return;
}
function _mrb_hash_modify(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  _mrb_hash_tbl(r1, r2);
  STACKTOP = r3;
  return;
}
function _mrb_hash_ht_key(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  if ((HEAP32[r3 + 4 >> 2] & 255 | 0) == 17) {
    _mrb_str_dup(r1, r2, r3);
    STACKTOP = r4;
    return;
  } else {
    r2 = r3;
    r3 = r1;
    r1 = HEAP32[r2 + 4 >> 2];
    HEAP32[r3 >> 2] = HEAP32[r2 >> 2];
    HEAP32[r3 + 4 >> 2] = r1;
    STACKTOP = r4;
    return;
  }
}
function _mrb_hash_tbl(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[r2 >> 2] + 16 | 0;
  if ((HEAP32[r4 >> 2] | 0) != 0) {
    STACKTOP = r3;
    return;
  }
  HEAP32[r4 >> 2] = _kh_init_ht(r1);
  STACKTOP = r3;
  return;
}
function _mrb_hash_aget(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_hash_get(r1, r2, r3, r5);
  STACKTOP = r4;
  return;
}
function _mrb_hash_delete_key(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  r5 = r2, r6 = r5 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 1];
  r5 = r3, r6 = r5 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 1];
  r6 = HEAP32[HEAP32[r2 >> 2] + 16 >> 2];
  do {
    if ((r6 | 0) != 0) {
      r2 = _kh_get_ht(r6, r3);
      if ((r2 | 0) == (HEAP32[r6 >> 2] | 0)) {
        break;
      }
      r5 = (r2 << 3) + HEAP32[r6 + 28 >> 2] | 0;
      r7 = HEAP32[r5 >> 2];
      r8 = HEAP32[r5 + 4 >> 2];
      _kh_del_ht(r6, r2);
      r2 = r1;
      HEAP32[r2 >> 2] = r7;
      HEAP32[r2 + 4 >> 2] = r8;
      STACKTOP = r4;
      return;
    }
  } while (0);
  _mrb_nil_value1026(r1);
  STACKTOP = r4;
  return;
}
function _mrb_hash_delete(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_hash_delete_key(r1, r3, r5);
  STACKTOP = r4;
  return;
}
function _mrb_hash_aset(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  _mrb_get_args(r2, 5320556, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  _mrb_hash_set(r2, r3, r5, r6);
  r5 = r6;
  r6 = r1;
  r1 = HEAP32[r5 + 4 >> 2];
  HEAP32[r6 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r6 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_hash_keys(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 16;
  r8 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2];
  if ((r8 | 0) == 0) {
    _mrb_ary_new(r1, r2);
    STACKTOP = r4;
    return;
  }
  _mrb_ary_new_capa(r6, r2, HEAP32[r8 + 4 >> 2]);
  r3 = r6;
  r6 = r5 >> 2;
  r9 = HEAP32[r3 >> 2];
  r10 = HEAP32[r3 + 4 >> 2];
  HEAP32[r6] = r9;
  HEAP32[r6 + 1] = r10;
  r3 = r8 | 0;
  r11 = HEAP32[r3 >> 2];
  if ((r11 | 0) == 0) {
    r12 = r10;
    r13 = r9;
  } else {
    r9 = r8 + 16 | 0;
    r10 = r8 + 20 | 0;
    r14 = r8 + 24 | 0;
    r8 = r7;
    r15 = 0;
    r16 = r11;
    while (1) {
      r11 = r15 >>> 3;
      r17 = HEAP8[(r15 & 7) + 5327036 | 0];
      do {
        if ((r17 & HEAP8[HEAP32[r9 >> 2] + r11 | 0]) << 24 >> 24 == 0) {
          if ((HEAP8[HEAP32[r10 >> 2] + r11 | 0] & r17) << 24 >> 24 != 0) {
            r18 = r16;
            break;
          }
          r19 = (r15 << 3) + HEAP32[r14 >> 2] | 0;
          r20 = r19 | 0;
          r21 = r19 + 4 | 0;
          r19 = HEAP32[r21 >> 2];
          HEAP32[r8 >> 2] = HEAP32[r20 >> 2];
          HEAP32[r8 + 4 >> 2] = r19;
          _mrb_ary_push(r2, r5, r7);
          r18 = HEAP32[r3 >> 2];
        } else {
          r18 = r16;
        }
      } while (0);
      r17 = r15 + 1 | 0;
      if ((r17 | 0) == (r18 | 0)) {
        break;
      } else {
        r15 = r17;
        r16 = r18;
      }
    }
    r12 = HEAP32[r6 + 1];
    r13 = HEAP32[r6];
  }
  r6 = r1;
  r20 = r6 | 0;
  HEAP32[r20 >> 2] = r13;
  r21 = r6 + 4 | 0;
  HEAP32[r21 >> 2] = r12;
  STACKTOP = r4;
  return;
}
_mrb_hash_keys["X"] = 1;
function _mrb_hash_has_keyWithKey(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  r5 = r2, r6 = r5 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 1];
  r5 = r3, r6 = r5 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 1];
  r6 = HEAP32[HEAP32[r2 >> 2] + 16 >> 2];
  do {
    if ((r6 | 0) != 0) {
      if ((_kh_get_ht(r6, r3) | 0) == (HEAP32[r6 >> 2] | 0)) {
        break;
      }
      _mrb_true_value1027(r1);
      STACKTOP = r4;
      return;
    }
  } while (0);
  _mrb_false_value1028(r1);
  STACKTOP = r4;
  return;
}
function _mrb_init_hash(r1) {
  var r2, r3;
  r2 = _mrb_define_class(r1, 5317928, HEAP32[r1 + 72 >> 2]);
  HEAP32[r1 + 96 >> 2] = r2;
  r3 = r2;
  HEAP32[r3 >> 2] = HEAP32[r3 >> 2] & -522241 | 32768;
  _mrb_include_module(r1, r2, _mrb_class_get(r1, 5325048));
  _mrb_define_method(r1, r2, 5314464, 156);
  _mrb_define_method(r1, r2, 5322620, 538);
  _mrb_define_method(r1, r2, 5322288, 74);
  _mrb_define_method(r1, r2, 5325788, 136);
  _mrb_define_method(r1, r2, 5325492, 334);
  _mrb_define_method(r1, r2, 5325344, 146);
  _mrb_define_method(r1, r2, 5325020, 368);
  _mrb_define_method(r1, r2, 5324700, 298);
  _mrb_define_method(r1, r2, 5324280, 580);
  _mrb_define_method(r1, r2, 5323880, 126);
  _mrb_define_method(r1, r2, 5323648, 144);
  _mrb_define_method(r1, r2, 5323388, 384);
  _mrb_define_method(r1, r2, 5324568, 144);
  _mrb_define_method(r1, r2, 5322760, 374);
  _mrb_define_method(r1, r2, 5318996, 166);
  _mrb_define_method(r1, r2, 5322116, 144);
  _mrb_define_method(r1, r2, 5321856, 366);
  _mrb_define_method(r1, r2, 5321540, 226);
  _mrb_define_method(r1, r2, 5323564, 144);
  _mrb_define_method(r1, r2, 5321064, 166);
  _mrb_define_method(r1, r2, 5320888, 214);
  _mrb_define_method(r1, r2, 5320652, 226);
  _mrb_define_method(r1, r2, 5320616, 74);
  _mrb_define_method(r1, r2, 5320360, 384);
  _mrb_define_method(r1, r2, 5320168, 306);
  _mrb_define_method(r1, r2, 5317780, 16);
  _mrb_define_method(r1, r2, 5325664, 106);
  _mrb_define_alias(r1, r2);
  _mrb_define_method(r1, r2, 5322632, 576);
  return;
}
function _mrb_hash_equal(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _hash_equal(r1, r2, r3, r5, 0);
  STACKTOP = r4;
  return;
}
function _mrb_hash_clear(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2];
  if ((r4 | 0) != 0) {
    _kh_clear_ht(r4);
  }
  r4 = r3;
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r2;
  return;
}
function _mrb_hash_default(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4;
  r7 = r4 + 8;
  r8 = r4 + 16;
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  if ((HEAP32[HEAP32[r3 >> 2] >> 2] & 524288 | 0) == 0) {
    _mrb_iv_get(r1, r3, _mrb_intern(r2, 5313932));
    STACKTOP = r4;
    return;
  }
  if ((HEAP32[r6 >> 2] | 0) == 0) {
    _mrb_nil_value1026(r1);
    STACKTOP = r4;
    return;
  } else {
    r6 = HEAP32[r5 >> 2];
    r5 = r7;
    r9 = HEAP32[r6 + 4 >> 2];
    HEAP32[r5 >> 2] = HEAP32[r6 >> 2];
    HEAP32[r5 + 4 >> 2] = r9;
    _mrb_iv_get(r8, r3, _mrb_intern(r2, 5313932));
    _mrb_funcall(r1, r2, r8, 5320144, 2, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = HEAP32[r3 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r3 + 4 >> 2], HEAP32[tempInt + 8 >> 2] = HEAP32[r7 >> 2], HEAP32[tempInt + 12 >> 2] = HEAP32[r7 + 4 >> 2], tempInt));
    STACKTOP = r4;
    return;
  }
}
function _mrb_hash_set_default(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_hash_modify(r2, r3);
  _mrb_iv_set(r2, r3, _mrb_intern(r2, 5313932), r5);
  r2 = HEAP32[r3 >> 2];
  HEAP32[r2 >> 2] = HEAP32[r2 >> 2] & -524289;
  r2 = r5;
  r5 = r1;
  r1 = HEAP32[r2 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r2 >> 2];
  HEAP32[r5 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_hash_default_proc(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  if ((HEAP32[HEAP32[r3 >> 2] >> 2] & 524288 | 0) == 0) {
    _mrb_nil_value1026(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_iv_get(r1, r3, _mrb_intern(r2, 5313932));
    STACKTOP = r4;
    return;
  }
}
function _mrb_hash_set_default_proc(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_hash_modify(r2, r3);
  _mrb_iv_set(r2, r3, _mrb_intern(r2, 5313932), r5);
  r2 = HEAP32[r3 >> 2];
  HEAP32[r2 >> 2] = HEAP32[r2 >> 2] | 524288;
  r2 = r5;
  r5 = r1;
  r1 = HEAP32[r2 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r2 >> 2];
  HEAP32[r5 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_hash_empty_p(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2];
  if ((r4 | 0) == 0) {
    _mrb_true_value1027(r1);
    STACKTOP = r2;
    return;
  }
  if ((HEAP32[r4 + 4 >> 2] | 0) == 0) {
    _mrb_true_value1027(r1);
    STACKTOP = r2;
    return;
  } else {
    _mrb_false_value1028(r1);
    STACKTOP = r2;
    return;
  }
}
function _mrb_hash_has_key(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_hash_has_keyWithKey(r1, r3, r5);
  STACKTOP = r4;
  return;
}
function _mrb_hash_has_value(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_hash_has_valueWithvalue(r1, r2, r3, r5);
  STACKTOP = r4;
  return;
}
function _mrb_hash_init_core(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  r7 = r5 + 8;
  r8 = r5 + 16;
  r9 = r5 + 20;
  _mrb_get_args(r2, 5318132, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r6, HEAP32[tempInt + 4 >> 2] = r8, HEAP32[tempInt + 8 >> 2] = r9, tempInt));
  _mrb_hash_modify(r2, r3);
  do {
    if ((HEAP32[r6 + 4 >> 2] & 255 | 0) == 0) {
      if ((HEAP32[r6 >> 2] | 0) != 0) {
        r4 = 2983;
        break;
      }
      r10 = HEAP32[r9 >> 2];
      if ((r10 | 0) <= 0) {
        _mrb_nil_value1026(r7);
        break;
      }
      if ((r10 | 0) != 1) {
        _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5314652);
      }
      r10 = HEAP32[r8 >> 2];
      r11 = r7;
      r12 = HEAP32[r10 + 4 >> 2];
      HEAP32[r11 >> 2] = HEAP32[r10 >> 2];
      HEAP32[r11 + 4 >> 2] = r12;
      break;
    } else {
      r4 = 2983;
    }
  } while (0);
  if (r4 == 2983) {
    if ((HEAP32[r9 >> 2] | 0) > 0) {
      _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5314652);
    }
    r9 = HEAP32[r3 >> 2];
    HEAP32[r9 >> 2] = HEAP32[r9 >> 2] | 524288;
    r9 = r6;
    r6 = r7;
    r13 = r9 | 0;
    r14 = r9 + 4 | 0;
    r9 = HEAP32[r14 >> 2];
    HEAP32[r6 >> 2] = HEAP32[r13 >> 2];
    HEAP32[r6 + 4 >> 2] = r9;
  }
  _mrb_iv_set(r2, r3, _mrb_intern(r2, 5313932), r7);
  r7 = r3;
  r3 = r1;
  r1 = HEAP32[r7 + 4 >> 2];
  r13 = r3 | 0;
  HEAP32[r13 >> 2] = HEAP32[r7 >> 2];
  r14 = r3 + 4 | 0;
  HEAP32[r14 >> 2] = r1;
  STACKTOP = r5;
  return;
}
_mrb_hash_init_core["X"] = 1;
function _mrb_hash_to_hash(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = r3;
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r2;
  return;
}
function _mrb_true_value1027(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 2;
  return;
}
function _mrb_false_value1028(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_fixnum_value1029(r1, r2) {
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 3;
  return;
}
function _mrb_class1102(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[r2 + 4 >> 2] & 255;
  do {
    if ((r4 | 0) == 0) {
      if ((HEAP32[r2 >> 2] | 0) == 0) {
        r5 = r1 + 116 | 0;
        break;
      } else {
        r5 = r1 + 112 | 0;
        break;
      }
    } else if ((r4 | 0) == 6) {
      r5 = r1 + 100 | 0;
    } else if ((r4 | 0) == 4) {
      r5 = r1 + 120 | 0;
    } else if ((r4 | 0) == 3) {
      r5 = r1 + 104 | 0;
    } else if ((r4 | 0) == 2) {
      r5 = r1 + 108 | 0;
    } else if ((r4 | 0) == 8) {
      r5 = r1 + 72 | 0;
    } else {
      r5 = HEAP32[r2 >> 2] + 4 | 0;
    }
  } while (0);
  STACKTOP = r3;
  return HEAP32[r5 >> 2];
}
function _mrb_hash_replace(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 16;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _to_hash1030(r7, r2, r5);
  r8 = r7;
  r7 = r5;
  r9 = r8 | 0;
  r10 = r8 + 4 | 0;
  r8 = HEAP32[r10 >> 2];
  HEAP32[r7 >> 2] = HEAP32[r9 >> 2];
  HEAP32[r7 + 4 >> 2] = r8;
  if ((_mrb_obj_equal(r3, r5) | 0) != 0) {
    r8 = r3;
    r7 = r1;
    r11 = HEAP32[r8 + 4 >> 2];
    HEAP32[r7 >> 2] = HEAP32[r8 >> 2];
    HEAP32[r7 + 4 >> 2] = r11;
    STACKTOP = r4;
    return;
  }
  _mrb_hash_clear(r4 + 24, r2, r3);
  r11 = r5;
  r7 = HEAP32[r11 >> 2];
  r8 = HEAP32[r7 + 16 >> 2];
  do {
    if ((r8 | 0) == 0) {
      r12 = r7;
    } else {
      r13 = r8 | 0;
      r14 = HEAP32[r13 >> 2];
      if ((r14 | 0) == 0) {
        r12 = r7;
        break;
      }
      r15 = r8 + 16 | 0;
      r16 = r8 + 20 | 0;
      r17 = r8 + 24 | 0;
      r18 = r8 + 28 | 0;
      r19 = 0;
      r20 = r14;
      while (1) {
        r14 = r19 >>> 3;
        r21 = HEAP8[(r19 & 7) + 5327036 | 0];
        do {
          if ((r21 & HEAP8[HEAP32[r15 >> 2] + r14 | 0]) << 24 >> 24 == 0) {
            if ((HEAP8[HEAP32[r16 >> 2] + r14 | 0] & r21) << 24 >> 24 != 0) {
              r22 = r20;
              break;
            }
            _mrb_hash_set(r2, r3, (r19 << 3) + HEAP32[r17 >> 2] | 0, (r19 << 3) + HEAP32[r18 >> 2] | 0);
            r22 = HEAP32[r13 >> 2];
          } else {
            r22 = r20;
          }
        } while (0);
        r21 = r19 + 1 | 0;
        if ((r21 | 0) == (r22 | 0)) {
          break;
        } else {
          r19 = r21;
          r20 = r22;
        }
      }
      r12 = HEAP32[r11 >> 2];
    }
  } while (0);
  if ((HEAP32[r12 >> 2] & 524288 | 0) == 0) {
    _mrb_iv_get(r6, r5, _mrb_intern(r2, 5313932));
  } else {
    r12 = HEAP32[r3 >> 2];
    HEAP32[r12 >> 2] = HEAP32[r12 >> 2] | 524288;
    _mrb_iv_get(r6, r5, _mrb_intern(r2, 5313932));
  }
  _mrb_iv_set(r2, r3, _mrb_intern(r2, 5313932), r6);
  r6 = r3;
  r3 = r1;
  r1 = HEAP32[r6 + 4 >> 2];
  r9 = r3 | 0;
  HEAP32[r9 >> 2] = HEAP32[r6 >> 2];
  r10 = r3 + 4 | 0;
  HEAP32[r10 >> 2] = r1;
  STACKTOP = r4;
  return;
}
_mrb_hash_replace["X"] = 1;
function _mrb_hash_size_m(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2];
  if ((r4 | 0) == 0) {
    _mrb_fixnum_value1029(r1, 0);
    STACKTOP = r2;
    return;
  } else {
    _mrb_fixnum_value1029(r1, HEAP32[r4 + 4 >> 2]);
    STACKTOP = r2;
    return;
  }
}
function _mrb_hash_shift(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 16;
  r8 = r4 + 24;
  r9 = r3;
  r10 = HEAP32[HEAP32[r9 >> 2] + 16 >> 2], r11 = r10 >> 2;
  _mrb_hash_modify(r2, r3);
  L3763 : do {
    if ((r10 | 0) != 0) {
      if ((HEAP32[r11 + 1] | 0) == 0) {
        break;
      }
      r12 = HEAP32[r11];
      if ((r12 | 0) == 0) {
        break;
      }
      r13 = HEAP32[r11 + 4];
      r14 = r10 + 20 | 0;
      r15 = 0;
      while (1) {
        r16 = r15 >>> 3;
        r17 = HEAP8[(r15 & 7) + 5327036 | 0];
        if ((r17 & HEAP8[r13 + r16 | 0]) << 24 >> 24 == 0) {
          if ((HEAP8[HEAP32[r14 >> 2] + r16 | 0] & r17) << 24 >> 24 == 0) {
            break;
          }
        }
        r17 = r15 + 1 | 0;
        if ((r17 | 0) == (r12 | 0)) {
          break L3763;
        } else {
          r15 = r17;
        }
      }
      r12 = (r15 << 3) + HEAP32[r11 + 6] | 0;
      r14 = r5;
      r13 = HEAP32[r12 + 4 >> 2];
      HEAP32[r14 >> 2] = HEAP32[r12 >> 2];
      HEAP32[r14 + 4 >> 2] = r13;
      _mrb_gc_protect(r2, r5);
      _mrb_hash_delete_key(r6, r3, r5);
      _mrb_gc_protect(r2, r6);
      _mrb_assoc_new(r1, r2, r5, r6);
      STACKTOP = r4;
      return;
    }
  } while (0);
  r6 = (HEAP32[HEAP32[r9 >> 2] >> 2] & 524288 | 0) == 0;
  r9 = _mrb_intern(r2, 5313932);
  if (r6) {
    _mrb_iv_get(r1, r3, r9);
    STACKTOP = r4;
    return;
  } else {
    _mrb_iv_get(r7, r3, r9);
    _mrb_nil_value1026(r8);
    _mrb_funcall(r1, r2, r7, 5320144, 2, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = HEAP32[r3 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r3 + 4 >> 2], HEAP32[tempInt + 8 >> 2] = HEAP32[r8 >> 2], HEAP32[tempInt + 12 >> 2] = HEAP32[r8 + 4 >> 2], tempInt));
    STACKTOP = r4;
    return;
  }
}
_mrb_hash_shift["X"] = 1;
function _mrb_hash_values(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 16;
  r8 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2];
  if ((r8 | 0) == 0) {
    _mrb_ary_new(r1, r2);
    STACKTOP = r4;
    return;
  }
  _mrb_ary_new_capa(r6, r2, HEAP32[r8 + 4 >> 2]);
  r3 = r6;
  r6 = r5 >> 2;
  r9 = HEAP32[r3 >> 2];
  r10 = HEAP32[r3 + 4 >> 2];
  HEAP32[r6] = r9;
  HEAP32[r6 + 1] = r10;
  r3 = r8 | 0;
  r11 = HEAP32[r3 >> 2];
  if ((r11 | 0) == 0) {
    r12 = r10;
    r13 = r9;
  } else {
    r9 = r8 + 16 | 0;
    r10 = r8 + 20 | 0;
    r14 = r8 + 28 | 0;
    r8 = r7;
    r15 = 0;
    r16 = r11;
    while (1) {
      r11 = r15 >>> 3;
      r17 = HEAP8[(r15 & 7) + 5327036 | 0];
      do {
        if ((r17 & HEAP8[HEAP32[r9 >> 2] + r11 | 0]) << 24 >> 24 == 0) {
          if ((HEAP8[HEAP32[r10 >> 2] + r11 | 0] & r17) << 24 >> 24 != 0) {
            r18 = r16;
            break;
          }
          r19 = (r15 << 3) + HEAP32[r14 >> 2] | 0;
          r20 = r19 | 0;
          r21 = r19 + 4 | 0;
          r19 = HEAP32[r21 >> 2];
          HEAP32[r8 >> 2] = HEAP32[r20 >> 2];
          HEAP32[r8 + 4 >> 2] = r19;
          _mrb_ary_push(r2, r5, r7);
          r18 = HEAP32[r3 >> 2];
        } else {
          r18 = r16;
        }
      } while (0);
      r17 = r15 + 1 | 0;
      if ((r17 | 0) == (r18 | 0)) {
        break;
      } else {
        r15 = r17;
        r16 = r18;
      }
    }
    r12 = HEAP32[r6 + 1];
    r13 = HEAP32[r6];
  }
  r6 = r1;
  r20 = r6 | 0;
  HEAP32[r20 >> 2] = r13;
  r21 = r6 + 4 | 0;
  HEAP32[r21 >> 2] = r12;
  STACKTOP = r4;
  return;
}
_mrb_hash_values["X"] = 1;
function _mrb_hash_inspect(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2];
  do {
    if ((r5 | 0) != 0) {
      if ((HEAP32[r5 + 4 >> 2] | 0) == 0) {
        break;
      }
      _inspect_hash(r1, r2, r3);
      STACKTOP = r4;
      return;
    }
  } while (0);
  _mrb_str_new(r1, r2, 5319424, 2);
  STACKTOP = r4;
  return;
}
function _mrb_hash_eql(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _hash_equal(r1, r2, r3, r5, 1);
  STACKTOP = r4;
  return;
}
function _hash_equal(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r7 = r3, r8 = r7 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r8];
  HEAP32[r3 + 4 >> 2] = HEAP32[r8 + 1];
  r7 = r4, r8 = r7 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r8];
  HEAP32[r4 + 4 >> 2] = HEAP32[r8 + 1];
  r8 = r6;
  if ((_mrb_obj_equal(r3, r4) | 0) != 0) {
    _mrb_true_value1027(r1);
    STACKTOP = r6;
    return;
  }
  if ((HEAP32[r4 + 4 >> 2] & 255 | 0) != 16) {
    if ((_mrb_respond_to(r2, r4, _mrb_intern(r2, 5317780)) | 0) == 0) {
      _mrb_false_value1028(r1);
      STACKTOP = r6;
      return;
    }
    if ((r5 | 0) == 0) {
      _mrb_fixnum_value1029(r1, _mrb_equal(r2, r4, r3));
      STACKTOP = r6;
      return;
    } else {
      _mrb_fixnum_value1029(r1, _mrb_eql(r2, r4, r3));
      STACKTOP = r6;
      return;
    }
  }
  r5 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2];
  r3 = HEAP32[HEAP32[r4 >> 2] + 16 >> 2];
  r4 = (r3 | 0) != 0;
  if ((r5 | 0) == 0) {
    if (r4) {
      _mrb_false_value1028(r1);
      STACKTOP = r6;
      return;
    } else {
      _mrb_true_value1027(r1);
      STACKTOP = r6;
      return;
    }
  }
  if (!r4) {
    _mrb_false_value1028(r1);
    STACKTOP = r6;
    return;
  }
  if ((HEAP32[r5 + 4 >> 2] | 0) != (HEAP32[r3 + 4 >> 2] | 0)) {
    _mrb_false_value1028(r1);
    STACKTOP = r6;
    return;
  }
  r4 = r5 | 0;
  r7 = HEAP32[r4 >> 2];
  L3837 : do {
    if ((r7 | 0) != 0) {
      r9 = r5 + 16 | 0;
      r10 = r5 + 20 | 0;
      r11 = r5 + 24 | 0;
      r12 = r8;
      r13 = r3 | 0;
      r14 = r5 + 28 | 0;
      r15 = r3 + 28 | 0;
      r16 = 0;
      r17 = r7;
      L3839 : while (1) {
        r18 = r16 >>> 3;
        r19 = HEAP8[(r16 & 7) + 5327036 | 0];
        do {
          if ((r19 & HEAP8[HEAP32[r9 >> 2] + r18 | 0]) << 24 >> 24 == 0) {
            if ((HEAP8[HEAP32[r10 >> 2] + r18 | 0] & r19) << 24 >> 24 != 0) {
              r20 = r17;
              break;
            }
            r21 = (r16 << 3) + HEAP32[r11 >> 2] | 0;
            r22 = HEAP32[r21 + 4 >> 2];
            HEAP32[r12 >> 2] = HEAP32[r21 >> 2];
            HEAP32[r12 + 4 >> 2] = r22;
            r22 = _kh_get_ht(r3, r8);
            if ((r22 | 0) == (HEAP32[r13 >> 2] | 0)) {
              break L3839;
            }
            if ((_mrb_equal(r2, (r16 << 3) + HEAP32[r14 >> 2] | 0, (r22 << 3) + HEAP32[r15 >> 2] | 0) | 0) == 0) {
              break L3839;
            }
            r20 = HEAP32[r4 >> 2];
          } else {
            r20 = r17;
          }
        } while (0);
        r19 = r16 + 1 | 0;
        if ((r19 | 0) == (r20 | 0)) {
          break L3837;
        } else {
          r16 = r19;
          r17 = r20;
        }
      }
      _mrb_false_value1028(r1);
      STACKTOP = r6;
      return;
    }
  } while (0);
  _mrb_true_value1027(r1);
  STACKTOP = r6;
  return;
}
_hash_equal["X"] = 1;
function _inspect_hash(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 16;
  r8 = r4 + 24;
  r9 = r4 + 32;
  r10 = r4 + 40;
  r11 = r4 + 48;
  r12 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2];
  _mrb_str_new(r5, r2, 5319052, 1);
  r3 = r5;
  L3852 : do {
    if ((r12 | 0) != 0) {
      if ((HEAP32[r12 + 4 >> 2] | 0) == 0) {
        break;
      }
      r13 = r12 | 0;
      r14 = HEAP32[r13 >> 2];
      if ((r14 | 0) == 0) {
        break;
      }
      r15 = r12 + 16 | 0;
      r16 = r12 + 20 | 0;
      r17 = r5;
      r18 = r12 + 24 | 0;
      r19 = r12 + 28 | 0;
      r20 = r2 + 544 | 0;
      r21 = 0;
      r22 = r14;
      while (1) {
        r14 = r21 >>> 3;
        r23 = HEAP8[(r21 & 7) + 5327036 | 0];
        do {
          if ((r23 & HEAP8[HEAP32[r15 >> 2] + r14 | 0]) << 24 >> 24 == 0) {
            if ((HEAP8[HEAP32[r16 >> 2] + r14 | 0] & r23) << 24 >> 24 != 0) {
              r24 = r22;
              break;
            }
            r25 = _mrb_gc_arena_save(HEAP32[r20 >> 2]);
            if ((HEAP32[HEAP32[r17 >> 2] + 12 >> 2] | 0) > 1) {
              _mrb_str_cat2(r7, r2, r5, 5321476);
            }
            _mrb_inspect(r6, r2, (r21 << 3) + HEAP32[r18 >> 2] | 0);
            _mrb_str_append(r8, r2, r5, r6);
            _mrb_str_buf_cat(r9, r2, r5, 5318620, 2);
            _mrb_inspect(r6, r2, (r21 << 3) + HEAP32[r19 >> 2] | 0);
            _mrb_str_append(r10, r2, r5, r6);
            _mrb_gc_arena_restore(r2, r25);
            r24 = HEAP32[r13 >> 2];
          } else {
            r24 = r22;
          }
        } while (0);
        r23 = r21 + 1 | 0;
        if ((r23 | 0) == (r24 | 0)) {
          break L3852;
        } else {
          r21 = r23;
          r22 = r24;
        }
      }
    }
  } while (0);
  _mrb_str_buf_cat(r11, r2, r5, 5318356, 1);
  r5 = r1;
  r1 = HEAP32[r3 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r5 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
_inspect_hash["X"] = 1;
function _to_hash1030(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_convert_type(r1, r2, r3, 16, 5317928, 5317780);
  STACKTOP = r4;
  return;
}
function _mrb_hash_has_valueWithvalue(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r5 = STACKTOP;
  r6 = r3, r7 = r6 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r4, r7 = r6 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r7];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7 + 1];
  r7 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2];
  L3868 : do {
    if ((r7 | 0) != 0) {
      r3 = r7 | 0;
      r6 = HEAP32[r3 >> 2];
      if ((r6 | 0) == 0) {
        break;
      }
      r8 = r7 + 16 | 0;
      r9 = r7 + 20 | 0;
      r10 = r7 + 28 | 0;
      r11 = 0;
      r12 = r6;
      L3871 : while (1) {
        r6 = r11 >>> 3;
        r13 = HEAP8[(r11 & 7) + 5327036 | 0];
        do {
          if ((r13 & HEAP8[HEAP32[r8 >> 2] + r6 | 0]) << 24 >> 24 == 0) {
            if ((HEAP8[HEAP32[r9 >> 2] + r6 | 0] & r13) << 24 >> 24 != 0) {
              r14 = r12;
              break;
            }
            if ((_mrb_equal(r2, (r11 << 3) + HEAP32[r10 >> 2] | 0, r4) | 0) != 0) {
              break L3871;
            }
            r14 = HEAP32[r3 >> 2];
          } else {
            r14 = r12;
          }
        } while (0);
        r13 = r11 + 1 | 0;
        if ((r13 | 0) == (r14 | 0)) {
          break L3868;
        } else {
          r11 = r13;
          r12 = r14;
        }
      }
      _mrb_true_value1027(r1);
      STACKTOP = r5;
      return;
    }
  } while (0);
  _mrb_false_value1028(r1);
  STACKTOP = r5;
  return;
}
function _mrb_init_core(r1) {
  _mrb_init_symtbl(r1);
  _mrb_gc_arena_restore(r1, 0);
  _mrb_init_class(r1);
  _mrb_gc_arena_restore(r1, 0);
  _mrb_init_object(r1);
  _mrb_gc_arena_restore(r1, 0);
  _mrb_init_kernel(r1);
  _mrb_gc_arena_restore(r1, 0);
  _mrb_init_comparable(r1);
  _mrb_gc_arena_restore(r1, 0);
  _mrb_init_enumerable(r1);
  _mrb_gc_arena_restore(r1, 0);
  _mrb_init_symbol(r1);
  _mrb_gc_arena_restore(r1, 0);
  _mrb_init_exception(r1);
  _mrb_gc_arena_restore(r1, 0);
  _mrb_init_proc(r1);
  _mrb_gc_arena_restore(r1, 0);
  _mrb_init_string(r1);
  _mrb_gc_arena_restore(r1, 0);
  _mrb_init_array(r1);
  _mrb_gc_arena_restore(r1, 0);
  _mrb_init_hash(r1);
  _mrb_gc_arena_restore(r1, 0);
  _mrb_init_numeric(r1);
  _mrb_gc_arena_restore(r1, 0);
  _mrb_init_range(r1);
  _mrb_gc_arena_restore(r1, 0);
  _mrb_init_struct(r1);
  _mrb_gc_arena_restore(r1, 0);
  _mrb_init_gc(r1);
  _mrb_gc_arena_restore(r1, 0);
  _mrb_init_print(r1);
  _mrb_gc_arena_restore(r1, 0);
  _mrb_init_time(r1);
  _mrb_gc_arena_restore(r1, 0);
  _mrb_init_math(r1);
  _mrb_gc_arena_restore(r1, 0);
  _mrb_init_mrblib(r1);
  _mrb_gc_arena_restore(r1, 0);
  _mrb_init_mrbgems(r1);
  _mrb_gc_arena_restore(r1, 0);
  return;
}
function _mrb_final_core(r1) {
  _mrb_gc_arena_restore(r1, 0);
  return;
}
function _mrb_obj_basic_to_s_p(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = _mrb_method_search(r1, _mrb_class1102(r1, r2), _mrb_intern(r1, 5325416));
  do {
    if ((r4 | 0) != 0) {
      if ((HEAP32[r4 >> 2] & 262144 | 0) == 0) {
        break;
      }
      if ((HEAP32[r4 + 12 >> 2] | 0) == 94) {
        r5 = 1;
      } else {
        break;
      }
      STACKTOP = r3;
      return r5;
    }
  } while (0);
  r5 = 0;
  STACKTOP = r3;
  return r5;
}
function _mrb_obj_inspect(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r3 + 4 | 0;
  r6 = HEAP32[r5 >> 2];
  do {
    if ((r6 & 255 | 0) == 9) {
      if ((_mrb_obj_basic_to_s_p(r2, r3) | 0) == 0) {
        r7 = HEAP32[r5 >> 2];
        break;
      }
      _mrb_obj_iv_inspect(r1, r2, HEAP32[r3 >> 2]);
      STACKTOP = r4;
      return;
    } else {
      r7 = r6;
    }
  } while (0);
  if ((r7 & 255 | 0) == 8) {
    _mrb_str_new(r1, r2, 5326276, 4);
    STACKTOP = r4;
    return;
  } else {
    _mrb_any_to_s(r1, r2, r3);
    STACKTOP = r4;
    return;
  }
}
function _mrb_obj_value1103(r1, r2) {
  var r3;
  r3 = HEAP32[r2 >> 2] & 255;
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = r3;
  return;
}
function _mrb_fixnum_value1106(r1, r2) {
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 3;
  return;
}
function _mrb_singleton_class_clone(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = r3;
  r5 = r3 + 8;
  r6 = r3 + 16;
  r7 = HEAP32[HEAP32[r2 >> 2] + 4 >> 2], r8 = r7 >> 2;
  if ((HEAP32[r8] & 255 | 0) != 13) {
    r9 = r7;
    STACKTOP = r3;
    return r9;
  }
  r10 = _mrb_obj_alloc(r1, 13, HEAP32[r1 + 76 >> 2]), r11 = r10 >> 2;
  r12 = r10;
  r13 = HEAP32[r2 + 4 >> 2] & 255;
  if ((r13 | 0) == 10 | (r13 | 0) == 13) {
    HEAP32[r11 + 1] = r12;
  } else {
    _mrb_obj_value1103(r4, r7 | 0);
    HEAP32[r11 + 1] = _mrb_singleton_class_clone(r1, r4);
  }
  HEAP32[r11 + 5] = HEAP32[r8 + 5];
  if ((HEAP32[r8 + 3] | 0) != 0) {
    _mrb_obj_value1103(r5, r10 | 0);
    _mrb_obj_value1103(r6, r7 | 0);
    _mrb_iv_copy(r1, r5, r6);
    _mrb_obj_iv_set(r1, r10, _mrb_intern(r1, 5323368), r2);
  }
  r2 = HEAP32[r8 + 4];
  if ((r2 | 0) == 0) {
    HEAP32[r11 + 4] = _kh_init_mt(r1);
  } else {
    HEAP32[r11 + 4] = _kh_copy_mt(r1, r2);
  }
  r2 = r10;
  HEAP32[r2 >> 2] = HEAP32[r2 >> 2] & -256 | 13;
  r9 = r12;
  STACKTOP = r3;
  return r9;
}
_mrb_singleton_class_clone["X"] = 1;
function _mrb_obj_clone(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r3 + 4 | 0;
  r7 = HEAP32[r6 >> 2];
  if ((r7 & 255) >>> 0 < 9) {
    r8 = _mrb_class_obj_get(r2, 5325036);
    r9 = _mrb_obj_classname(r2, r3);
    _mrb_raisef(r2, r8, 5318632, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r9, tempInt));
    r10 = HEAP32[r6 >> 2];
  } else {
    r10 = r7;
  }
  r7 = _mrb_obj_alloc(r2, r10 & 255, _mrb_obj_class(r2, r3));
  HEAP32[r7 + 4 >> 2] = _mrb_singleton_class_clone(r2, r3);
  _mrb_obj_value1103(r5, r7 | 0);
  r7 = r5;
  _init_copy(r2, r5, r3);
  r3 = r1;
  r1 = HEAP32[r7 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _init_copy(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r2, r6 = r5 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 1];
  r5 = r3, r6 = r5 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 1];
  r6 = HEAP32[r3 + 4 >> 2] & 255;
  if ((r6 | 0) == 9 | (r6 | 0) == 10 | (r6 | 0) == 11 | (r6 | 0) == 13 | (r6 | 0) == 16 | (r6 | 0) == 25) {
    _mrb_iv_copy(r1, r2, r3);
  }
  _mrb_funcall(r4, r1, r2, 5318996, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r3 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r3 + 4 >> 2], tempInt));
  STACKTOP = r4;
  return;
}
function _mrb_obj_dup(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r3 + 4 | 0;
  r7 = HEAP32[r6 >> 2];
  if ((r7 & 255) >>> 0 < 9) {
    r8 = _mrb_class_obj_get(r2, 5325036);
    r9 = _mrb_obj_classname(r2, r3);
    _mrb_raisef(r2, r8, 5316652, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r9, tempInt));
    r10 = HEAP32[r6 >> 2];
  } else {
    r10 = r7;
  }
  _mrb_obj_value1103(r5, _mrb_obj_alloc(r2, r10 & 255, _mrb_obj_class(r2, r3)) | 0);
  r10 = r5;
  _init_copy(r2, r5, r3);
  r3 = r1;
  r1 = HEAP32[r10 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r10 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_obj_extend_m(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4;
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  _mrb_obj_extend(r1, r2, HEAP32[r6 >> 2], HEAP32[r5 >> 2], r3);
  STACKTOP = r4;
  return;
}
function _mrb_obj_extend(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r7 = r5;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r5 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r5 + 4 >> 2] = HEAP32[r7 + 4 >> 2];
  r7 = r6;
  r8 = r6 + 8;
  L3936 : do {
    if ((r3 | 0) == 0) {
      _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5315256);
    } else {
      L3939 : do {
        if ((r3 | 0) > 0) {
          r9 = 0;
          while (1) {
            _mrb_check_type(r2, (r9 << 3) + r4 | 0, 11);
            r10 = r9 + 1 | 0;
            if ((r10 | 0) == (r3 | 0)) {
              r11 = r3;
              break L3939;
            } else {
              r9 = r10;
            }
          }
        } else {
          r11 = r3;
        }
      } while (0);
      while (1) {
        r9 = r11 - 1 | 0;
        r10 = (r9 << 3) + r4 | 0;
        _mrb_funcall(r7, r2, r10, 5315224, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r5 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r5 + 4 >> 2], tempInt));
        _mrb_funcall(r8, r2, r10, 5315184, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r5 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r5 + 4 >> 2], tempInt));
        if ((r9 | 0) == 0) {
          break L3936;
        } else {
          r11 = r9;
        }
      }
    }
  } while (0);
  r11 = r5;
  r5 = r1;
  r1 = HEAP32[r11 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r11 >> 2];
  HEAP32[r5 + 4 >> 2] = r1;
  STACKTOP = r6;
  return;
}
function _mrb_obj_hash(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  _mrb_fixnum_value1106(r1, _mrb_obj_id(r3));
  STACKTOP = r2;
  return;
}
function _mrb_true_value1107(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 2;
  return;
}
function _mrb_false_value1108(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_voidp_value1111(r1, r2) {
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 7;
  return;
}
function _mrb_nil_value1112(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_symbol_value1115(r1, r2) {
  HEAP16[r1 >> 1] = r2;
  HEAP32[r1 + 4 >> 2] = 4;
  return;
}
function _mrb_float_value1150(r1, r2) {
  HEAPF32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 6;
  return;
}
function _mrb_obj_init_copy(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r6, tempInt));
  if ((_mrb_obj_equal(r3, r6) | 0) != 0) {
    r7 = r3;
    r8 = r1;
    r9 = r7 | 0;
    r10 = r7 + 4 | 0;
    r7 = HEAP32[r10 >> 2];
    r11 = r8 | 0;
    HEAP32[r11 >> 2] = HEAP32[r9 >> 2];
    r12 = r8 + 4 | 0;
    HEAP32[r12 >> 2] = r7;
    STACKTOP = r5;
    return;
  }
  do {
    if (((HEAP32[r6 + 4 >> 2] ^ HEAP32[r3 + 4 >> 2]) & 255 | 0) == 0) {
      if ((_mrb_obj_class(r2, r3) | 0) == (_mrb_obj_class(r2, r6) | 0)) {
        break;
      } else {
        r4 = 11;
        break;
      }
    } else {
      r4 = 11;
    }
  } while (0);
  if (r4 == 11) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5314528);
  }
  r2 = r3;
  r3 = r1;
  r9 = r2 | 0;
  r10 = r2 + 4 | 0;
  r2 = HEAP32[r10 >> 2];
  r11 = r3 | 0;
  HEAP32[r11 >> 2] = HEAP32[r9 >> 2];
  r12 = r3 + 4 | 0;
  HEAP32[r12 >> 2] = r2;
  STACKTOP = r5;
  return;
}
function _mrb_obj_instance_eval(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4 + 8;
  r6 = r4 + 16;
  if ((_mrb_get_args(r2, 5314200, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r4, HEAP32[tempInt + 4 >> 2] = r5, tempInt)) | 0) == 1) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5326528), 5326232);
  }
  r7 = HEAP32[r3 + 4 >> 2] & 255;
  if ((r7 | 0) == 4 | (r7 | 0) == 3 | (r7 | 0) == 6) {
    r8 = 0;
    _mrb_yield_internal(r1, r2, r5, 0, 0, r3, r8);
    STACKTOP = r4;
    return;
  }
  _mrb_singleton_class(r6, r2, r3);
  r8 = HEAP32[r6 >> 2];
  _mrb_yield_internal(r1, r2, r5, 0, 0, r3, r8);
  STACKTOP = r4;
  return;
}
function _mrb_obj_is_instance_of(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = (_mrb_obj_class(r1, r2) | 0) == (r3 | 0) & 1;
  STACKTOP = r4;
  return r5;
}
function _mrb_obj_ivar_defined(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5325872, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _check_iv_name(r2, HEAP16[r5 >> 1]);
  if ((_mrb_obj_iv_defined(HEAP32[HEAP32[r3 >> 2] + 12 >> 2], HEAP16[r5 >> 1]) | 0) == 0) {
    _mrb_false_value1108(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value1107(r1);
    STACKTOP = r4;
    return;
  }
}
function _check_iv_name(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  r5 = _mrb_sym2name_len(HEAP32[r1 + 596 >> 2], r2, r4);
  do {
    if ((HEAP32[r4 >> 2] | 0) >= 2) {
      if (HEAP8[r5] << 24 >> 24 != 64) {
        break;
      }
      if (HEAP8[r5 + 1 | 0] << 24 >> 24 == 64) {
        break;
      }
      STACKTOP = r3;
      return;
    }
  } while (0);
  _mrb_name_error(r1, r2, 5315508, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  STACKTOP = r3;
  return;
}
function _mrb_obj_ivar_get(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5325872, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _check_iv_name(r2, HEAP16[r5 >> 1]);
  _mrb_iv_get(r1, r3, HEAP16[r5 >> 1]);
  STACKTOP = r4;
  return;
}
function _mrb_obj_ivar_set(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4;
  _mrb_get_args(r2, 5325768, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  _check_iv_name(r2, HEAP16[r5 >> 1]);
  _mrb_iv_set(r2, r3, HEAP16[r5 >> 1], r6);
  r5 = r6;
  r6 = r1;
  r1 = HEAP32[r5 + 4 >> 2];
  HEAP32[r6 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r6 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_obj_is_kind_of_m(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((_mrb_obj_is_kind_of(r2, r3, HEAP32[r5 >> 2]) | 0) == 0) {
    _mrb_false_value1108(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value1107(r1);
    STACKTOP = r4;
    return;
  }
}
function _class_instance_method_list(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r6 = r5;
  r7 = r5 + 8;
  if ((r3 | 0) == 0) {
    HEAP32[r7 >> 2] = 1;
  } else {
    _mrb_get_args(r2, 5317144, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r7, tempInt));
  }
  _mrb_ary_new(r6, r2);
  r3 = r6;
  L52 : do {
    if ((r4 | 0) != 0) {
      r8 = r4, r9 = r8 >> 2;
      while (1) {
        _method_entry_loop(r2, HEAP32[r9 + 4], r6);
        if (((HEAP32[r9] & 255) - 12 | 0) >>> 0 >= 2) {
          if ((HEAP32[r7 >> 2] | 0) == 0) {
            break L52;
          }
        }
        r10 = HEAP32[r9 + 5];
        if ((r10 | 0) == 0 | (r10 | 0) == (r8 | 0)) {
          break L52;
        } else {
          r8 = r10, r9 = r8 >> 2;
        }
      }
    }
  } while (0);
  r7 = r1;
  r1 = HEAP32[r3 + 4 >> 2];
  HEAP32[r7 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r7 + 4 >> 2] = r1;
  STACKTOP = r5;
  return;
}
function _method_entry_loop(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  if ((r2 | 0) == 0) {
    STACKTOP = r4;
    return;
  }
  r6 = r2 | 0;
  r7 = HEAP32[r6 >> 2];
  if ((r7 | 0) == 0) {
    STACKTOP = r4;
    return;
  }
  r8 = r2 + 16 | 0;
  r9 = r2 + 20 | 0;
  r10 = r2 + 24 | 0;
  r2 = 0;
  r11 = r7;
  while (1) {
    r7 = r2 >>> 3;
    r12 = HEAP8[(r2 & 7) + 5327036 | 0];
    do {
      if ((r12 & HEAP8[HEAP32[r8 >> 2] + r7 | 0]) << 24 >> 24 == 0) {
        if ((HEAP8[HEAP32[r9 >> 2] + r7 | 0] & r12) << 24 >> 24 != 0) {
          r13 = r11;
          break;
        }
        _mrb_symbol_value1115(r5, HEAP16[HEAP32[r10 >> 2] + (r2 << 1) >> 1]);
        _mrb_ary_push(r1, r3, r5);
        r13 = HEAP32[r6 >> 2];
      } else {
        r13 = r11;
      }
    } while (0);
    r12 = r2 + 1 | 0;
    if (r12 >>> 0 < r13 >>> 0) {
      r2 = r12;
      r11 = r13;
    } else {
      break;
    }
  }
  STACKTOP = r4;
  return;
}
function _mrb_obj_singleton_methods(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r7 = r5;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r5 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r5 + 4 >> 2] = HEAP32[r7 + 4 >> 2];
  r7 = r6;
  r8 = r6 + 8;
  if ((r3 | 0) == 0) {
    _mrb_true_value1107(r8);
    r9 = r8;
  } else {
    r9 = r4;
  }
  r4 = HEAP32[r9 + 4 >> 2];
  r9 = _mrb_class1102(r2, r5), r5 = r9 >> 2;
  _mrb_ary_new(r7, r2);
  r8 = r7;
  L77 : do {
    if ((r9 | 0) != 0) {
      if ((HEAP32[r5] & 255 | 0) == 13) {
        _method_entry_loop(r2, HEAP32[r5 + 4], r7);
        r10 = HEAP32[r5 + 5];
      } else {
        r10 = r9;
      }
      if ((r4 & 255 | 0) == 0 | (r10 | 0) == 0) {
        break;
      } else {
        r11 = r10, r12 = r11 >> 2;
      }
      while (1) {
        if (((HEAP32[r12] & 255) - 12 | 0) >>> 0 >= 2) {
          break L77;
        }
        _method_entry_loop(r2, HEAP32[r12 + 4], r7);
        r3 = HEAP32[r12 + 5];
        if ((r3 | 0) == 0) {
          break L77;
        } else {
          r11 = r3, r12 = r11 >> 2;
        }
      }
    }
  } while (0);
  r11 = r1;
  r1 = HEAP32[r8 + 4 >> 2];
  HEAP32[r11 >> 2] = HEAP32[r8 >> 2];
  HEAP32[r11 + 4 >> 2] = r1;
  STACKTOP = r6;
  return;
}
_mrb_obj_singleton_methods["X"] = 1;
function _mrb_obj_methods(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9;
  r6 = 0;
  r7 = STACKTOP;
  r8 = r5;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r5 >> 2] = HEAP32[r8 >> 2];
  HEAP32[r5 + 4 >> 2] = HEAP32[r8 + 4 >> 2];
  r8 = r4 + 4 | 0;
  r9 = r3;
  while (1) {
    if ((r9 | 0) == 0) {
      r6 = 75;
      break;
    }
    if ((HEAP32[r8 >> 2] & 255 | 0) == 0) {
      r6 = 77;
      break;
    } else {
      r9 = 0;
    }
  }
  if (r6 == 77) {
    _mrb_obj_singleton_methods(r1, r2, r9, r4, r5);
    STACKTOP = r7;
    return;
  } else if (r6 == 75) {
    _class_instance_method_list(r1, r2, 0, _mrb_class1102(r2, r5));
    STACKTOP = r7;
    return;
  }
}
function _mrb_obj_methods_m(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4;
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  _mrb_obj_methods(r1, r2, HEAP32[r6 >> 2], HEAP32[r5 >> 2], r3);
  STACKTOP = r4;
  return;
}
function _mrb_false(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  _mrb_false_value1108(r1);
  STACKTOP = r2;
  return;
}
function _mrb_obj_private_methods(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4;
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  _mrb_obj_methods(r1, r2, HEAP32[r6 >> 2], HEAP32[r5 >> 2], r3);
  STACKTOP = r4;
  return;
}
function _mrb_obj_protected_methods(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4;
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  _mrb_obj_methods(r1, r2, HEAP32[r6 >> 2], HEAP32[r5 >> 2], r3);
  STACKTOP = r4;
  return;
}
function _mrb_obj_public_methods(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4;
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  _mrb_obj_methods(r1, r2, HEAP32[r6 >> 2], HEAP32[r5 >> 2], r3);
  STACKTOP = r4;
  return;
}
function _mrb_f_raise(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r3 = r4 + 16;
  r6 = r4 + 24;
  r7 = r4 + 32;
  r8 = r4 + 40;
  r9 = r4 + 48;
  r10 = r5 | 0;
  r11 = r5 + 8 | 0;
  r12 = _mrb_get_args(r2, 5325340, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r10, HEAP32[tempInt + 4 >> 2] = r11, tempInt));
  do {
    if ((r12 | 0) == 0) {
      _mrb_raise(r2, _mrb_class_obj_get(r2, 5319792), 5316620);
      _mrb_nil_value1112(r1);
      STACKTOP = r4;
      return;
    } else if ((r12 | 0) == 1) {
      _mrb_check_string_type(r6, r2, r10);
      r13 = r6;
      r14 = r11;
      r15 = HEAP32[r13 >> 2];
      r16 = HEAP32[r13 + 4 >> 2];
      HEAP32[r14 >> 2] = r15;
      HEAP32[r14 + 4 >> 2] = r16;
      if ((r15 & -1 | 0) == 0 & (r16 & 255 | 0) == 0) {
        r17 = 1;
        break;
      }
      _mrb_obj_value1103(r7, _mrb_class_obj_get(r2, 5319792) | 0);
      r16 = r7;
      r15 = r5;
      r14 = HEAP32[r16 + 4 >> 2];
      HEAP32[r15 >> 2] = HEAP32[r16 >> 2];
      HEAP32[r15 + 4 >> 2] = r14;
      r17 = 2;
    } else {
      r17 = r12;
    }
  } while (0);
  _mrb_make_exception(r8, r2, r17, r10);
  r10 = r8;
  r8 = r3;
  r17 = HEAP32[r10 >> 2];
  r12 = HEAP32[r10 + 4 >> 2];
  HEAP32[r8 >> 2] = r17;
  HEAP32[r8 + 4 >> 2] = r12;
  r12 = _mrb_intern(r2, 5324224);
  _mrb_voidp_value1111(r9, HEAP32[HEAP32[r2 + 20 >> 2] + 20 >> 2]);
  _mrb_obj_iv_set(r2, r17, r12, r9);
  _mrb_exc_raise(r2, r3);
  _mrb_nil_value1112(r1);
  STACKTOP = r4;
  return;
}
_mrb_f_raise["X"] = 1;
function _mrb_obj_remove_instance_variable(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4, r6 = r5 >> 1;
  r7 = r4 + 4;
  _mrb_get_args(r2, 5325872, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _check_iv_name(r2, HEAP16[r6]);
  _mrb_iv_remove(r7, r3, HEAP16[r6]);
  r3 = HEAPF32[r7 >> 2];
  r5 = HEAP32[r7 + 4 >> 2];
  if ((r5 & 255 | 0) == 5) {
    r7 = HEAP16[r6];
    r6 = _mrb_sym2name(r2, r7);
    _mrb_name_error(r2, r7, 5323836, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r6, tempInt));
  }
  HEAPF32[r1 >> 2] = r3;
  HEAP32[r1 + 4 >> 2] = r5;
  STACKTOP = r4;
  return;
}
function _obj_respond_to(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4;
  r7 = r4 + 8;
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  r8 = HEAP32[r5 >> 2];
  r5 = r7;
  r9 = HEAP32[r8 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r8 >> 2];
  HEAP32[r5 + 4 >> 2] = r9;
  if ((HEAP32[r6 >> 2] | 0) <= 1) {
    _mrb_nil_value1112(r4 + 16);
  }
  if ((_basic_obj_respond_to(r2, r3, _mrb_to_id(r2, r7)) | 0) == 0) {
    _mrb_false_value1108(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value1107(r1);
    STACKTOP = r4;
    return;
  }
}
function _basic_obj_respond_to(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = _mrb_respond_to(r1, r2, r3);
  STACKTOP = r4;
  return r5;
}
function _mrb_obj_singleton_methods_m(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4;
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  _mrb_obj_singleton_methods(r1, r2, HEAP32[r6 >> 2], HEAP32[r5 >> 2], r3);
  STACKTOP = r4;
  return;
}
function _mrb_init_kernel(r1) {
  var r2, r3;
  r2 = _mrb_define_module(r1, 5323612);
  r3 = r1 + 124 | 0;
  HEAP32[r3 >> 2] = r2;
  _mrb_define_class_method(r1, r2, 5323352, 406);
  _mrb_define_class_method(r1, r2, 5323020, 56);
  _mrb_define_class_method(r1, r2, 5322676, 406);
  _mrb_define_class_method(r1, r2, 5322368, 194);
  _mrb_define_method(r1, r2, 5322052, 112);
  _mrb_define_method(r1, r2, 5314464, 20);
  _mrb_define_method(r1, r2, 5321488, 360);
  _mrb_define_method(r1, r2, 5325704, 276);
  _mrb_define_method(r1, r2, 5321032, 102);
  _mrb_define_method(r1, r2, 5320840, 370);
  _mrb_define_method(r1, r2, 5323352, 406);
  _mrb_define_method(r1, r2, 5320608, 218);
  _mrb_define_method(r1, r2, 5320352, 176);
  _mrb_define_method(r1, r2, 5320164, 328);
  _mrb_define_method(r1, r2, 5322632, 20);
  _mrb_define_method(r1, r2, 5319824, 20);
  _mrb_define_method(r1, r2, 5319728, 486);
  _mrb_define_method(r1, r2, 5323020, 56);
  _mrb_define_method(r1, r2, 5321020, 606);
  _mrb_define_method(r1, r2, 5318996, 638);
  _mrb_define_method(r1, r2, 5325664, 646);
  _mrb_define_method(r1, r2, 5318840, 188);
  _mrb_define_method(r1, r2, 5318604, 418);
  _mrb_define_method(r1, r2, 5318328, 344);
  _mrb_define_method(r1, r2, 5318108, 258);
  _mrb_define_method(r1, r2, 5317952, 162);
  _mrb_define_method(r1, r2, 5317804, 482);
  _mrb_define_method(r1, r2, 5317636, 504);
  _mrb_define_method(r1, r2, 5322676, 406);
  _mrb_define_method(r1, r2, 5317464, 504);
  _mrb_define_method(r1, r2, 5317336, 448);
  _mrb_define_method(r1, r2, 5315464, 242);
  _mrb_define_method(r1, r2, 5316856, 102);
  _mrb_define_method(r1, r2, 5316628, 350);
  _mrb_define_method(r1, r2, 5316300, 248);
  _mrb_define_method(r1, r2, 5316056, 38);
  _mrb_define_method(r1, r2, 5322368, 194);
  _mrb_define_method(r1, r2, 5315980, 630);
  _mrb_define_method(r1, r2, 5315900, 568);
  _mrb_define_method(r1, r2, 5315820, 370);
  _mrb_define_method(r1, r2, 5315768, 86);
  _mrb_define_method(r1, r2, 5325416, 94);
  _mrb_define_method(r1, r2, 5315712, 142);
  _mrb_define_method(r1, r2, 5315624, 142);
  _mrb_include_module(r1, HEAP32[r1 + 72 >> 2], HEAP32[r3 >> 2]);
  r3 = HEAP32[r1 + 80 >> 2];
  _mrb_alias_method(r1, r3, _mrb_intern(r1, 5320164), _mrb_intern(r1, 5320352));
  return;
}
_mrb_init_kernel["X"] = 1;
function _mrb_f_block_given_p_m(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = HEAP32[r2 + 20 >> 2];
  r3 = HEAP32[r2 + 12 >> 2];
  r6 = HEAP32[r5 + 8 >> 2] + 1 | 0;
  if ((r5 - 44 | 0) >>> 0 <= HEAP32[r2 + 24 >> 2] >>> 0) {
    _mrb_false_value1108(r1);
    STACKTOP = r4;
    return;
  }
  r2 = HEAP32[HEAP32[r5 - 44 + 4 >> 2] + 20 >> 2];
  do {
    if ((r2 | 0) != 0) {
      r7 = HEAP32[r2 + 12 >> 2];
      if ((r7 | 0) == 0) {
        break;
      }
      do {
        if ((r7 | 0) != (r3 | 0)) {
          if ((HEAP32[r7 + 12 >> 2] & 255 | 0) == 0) {
            if ((HEAP32[r7 + 8 >> 2] | 0) == 0) {
              break;
            }
          }
          _mrb_true_value1107(r1);
          STACKTOP = r4;
          return;
        }
      } while (0);
      _mrb_false_value1108(r1);
      STACKTOP = r4;
      return;
    }
  } while (0);
  r2 = HEAP32[r5 - 44 + 16 >> 2];
  r5 = r6 + ((r2 | 0) > 0 ? r2 : 0) | 0;
  do {
    if ((HEAP32[r3 + (r5 << 3) + 4 >> 2] & 255 | 0) == 0) {
      if ((HEAP32[r3 + (r5 << 3) >> 2] | 0) != 0) {
        break;
      }
      _mrb_false_value1108(r1);
      STACKTOP = r4;
      return;
    }
  } while (0);
  _mrb_true_value1107(r1);
  STACKTOP = r4;
  return;
}
_mrb_f_block_given_p_m["X"] = 1;
function _mrb_obj_equal_m(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((_mrb_obj_equal(r3, r5) | 0) == 0) {
    _mrb_false_value1108(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value1107(r1);
    STACKTOP = r4;
    return;
  }
}
function _mrb_obj_not_equal_m(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((_mrb_equal(r2, r3, r5) | 0) == 0) {
    _mrb_true_value1107(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_false_value1108(r1);
    STACKTOP = r4;
    return;
  }
}
function _mrb_equal_m(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((_mrb_equal(r2, r3, r5) | 0) == 0) {
    _mrb_false_value1108(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value1107(r1);
    STACKTOP = r4;
    return;
  }
}
function _mrb_obj_id_m(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  _mrb_fixnum_value1106(r1, _mrb_obj_id(r3));
  STACKTOP = r2;
  return;
}
function _mrb_f_send(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4;
  r7 = r4 + 12;
  r8 = r4 + 16;
  _mrb_get_args(r2, 5315588, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r7, HEAP32[tempInt + 8 >> 2] = r8, HEAP32[tempInt + 12 >> 2] = r6, tempInt));
  _mrb_funcall_with_block(r1, r2, r3, HEAP16[r5 >> 1], HEAP32[r8 >> 2], HEAP32[r7 >> 2], r6);
  STACKTOP = r4;
  return;
}
function _mrb_obj_class_m(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_obj_value1103(r1, _mrb_obj_class(r2, r3) | 0);
  STACKTOP = r4;
  return;
}
function _obj_is_instance_of(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((_mrb_obj_is_instance_of(r2, r3, HEAP32[r5 >> 2]) | 0) == 0) {
    _mrb_false_value1108(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value1107(r1);
    STACKTOP = r4;
    return;
  }
}
function _mrb_init_math(r1) {
  var r2, r3, r4, r5, r6;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r3 = r2;
  r4 = r2 + 8;
  r5 = r2 + 16;
  r6 = _mrb_define_module(r1, 5326028);
  _mrb_float_value1150(r3, 3.1415927410125732);
  _mrb_define_const(r1, r6, 5326220, r3);
  _mrb_float_value1150(r4, 2.7182817459106445);
  _mrb_define_const(r1, r6, 5323340, r4);
  _mrb_float_value1150(r5, 9999999747378752e-21);
  _mrb_define_const(r1, r6, 5320588, r5);
  _mrb_define_module_function(r1, r6, 5318588, 462);
  _mrb_define_module_function(r1, r6, 5316624, 380);
  _mrb_define_module_function(r1, r6, 5315504, 434);
  _mrb_define_module_function(r1, r6, 5314996, 260);
  _mrb_define_module_function(r1, r6, 5314520, 450);
  _mrb_define_module_function(r1, r6, 5314192, 22);
  _mrb_define_module_function(r1, r6, 5326520, 468);
  _mrb_define_module_function(r1, r6, 5326224, 254);
  _mrb_define_module_function(r1, r6, 5325864, 600);
  _mrb_define_module_function(r1, r6, 5325760, 382);
  _mrb_define_module_function(r1, r6, 5325484, 582);
  _mrb_define_module_function(r1, r6, 5325332, 472);
  _mrb_define_module_function(r1, r6, 5325e3, 234);
  _mrb_define_module_function(r1, r6, 5324656, 196);
  _mrb_define_module_function(r1, r6, 5324220, 476);
  _mrb_define_module_function(r1, r6, 5323828, 578);
  _mrb_define_module_function(r1, r6, 5323604, 32);
  _mrb_define_module_function(r1, r6, 5323344, 598);
  _mrb_define_module_function(r1, r6, 5323012, 644);
  _mrb_define_module_function(r1, r6, 5322668, 362);
  _mrb_define_module_function(r1, r6, 5322360, 464);
  _mrb_define_module_function(r1, r6, 5322044, 650);
  _mrb_define_module_function(r1, r6, 5321812, 42);
  _mrb_define_module_function(r1, r6, 5321480, 270);
  STACKTOP = r2;
  return;
}
function _math_sin(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = Math.sin(HEAPF32[r5 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _math_cos(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = Math.cos(HEAPF32[r5 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _math_tan(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = Math.tan(HEAPF32[r5 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _math_asin(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = Math.asin(HEAPF32[r5 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _mrb_fixnum_value1151(r1, r2) {
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 3;
  return;
}
function _mrb_float_value1211(r1, r2) {
  HEAPF32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 6;
  return;
}
function _mrb_fixnum_value1212(r1, r2) {
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 3;
  return;
}
function _num_uplus(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = r3;
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r2;
  return;
}
function _math_acos(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = Math.acos(HEAPF32[r5 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _math_atan(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = Math.atan(HEAPF32[r5 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _math_atan2(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r3 = r4 + 4;
  _mrb_get_args(r2, 5321028, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r3, tempInt));
  r2 = Math.atan2(HEAPF32[r5 >> 2], HEAPF32[r3 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _math_sinh(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = _sinh(HEAPF32[r5 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _math_cosh(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = _cosh(HEAPF32[r5 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _math_tanh(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = _tanh(HEAPF32[r5 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _math_asinh(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = _asinh(HEAPF32[r5 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _math_acosh(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = _acosh(HEAPF32[r5 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _math_atanh(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = _atanh(HEAPF32[r5 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _math_exp(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = Math.exp(HEAPF32[r5 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _math_log(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4, r3 = r5 >> 2;
  r6 = r4 + 4;
  r7 = _mrb_get_args(r2, 5314844, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  r5 = Math.log(HEAPF32[r3]);
  HEAPF32[r3] = r5;
  if ((r7 | 0) != 2) {
    r8 = r5;
    _mrb_float_value1150(r1, r8);
    STACKTOP = r4;
    return;
  }
  r7 = r5 / Math.log(HEAPF32[r6 >> 2]);
  HEAPF32[r3] = r7;
  r8 = r7;
  _mrb_float_value1150(r1, r8);
  STACKTOP = r4;
  return;
}
function _math_log2(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = Math.log(HEAPF32[r5 >> 2]) / .6931471805599453;
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _math_log10(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = _log10(HEAPF32[r5 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _math_sqrt(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = Math.sqrt(HEAPF32[r5 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _math_cbrt(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = _cbrt(HEAPF32[r5 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _math_frexp(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r3 = r4 + 4;
  r6 = r4 + 8;
  r7 = r4 + 16;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r8 = _frexp(HEAPF32[r5 >> 2], r3);
  HEAPF32[r5 >> 2] = r8;
  _mrb_float_value1150(r6, r8);
  _mrb_fixnum_value1151(r7, HEAP32[r3 >> 2]);
  _mrb_assoc_new(r1, r2, r6, r7);
  STACKTOP = r4;
  return;
}
function _math_ldexp(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r3 = r4 + 4;
  _mrb_get_args(r2, 5320836, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r3, tempInt));
  r2 = _ldexp(HEAPF32[r5 >> 2], HEAP32[r3 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _math_hypot(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r3 = r4 + 4;
  _mrb_get_args(r2, 5321028, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r3, tempInt));
  r2 = _hypot(HEAPF32[r5 >> 2], HEAPF32[r3 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _math_erf(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = _erf(HEAPF32[r5 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _math_erfc(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = _erfc(HEAPF32[r5 >> 2]);
  HEAPF32[r5 >> 2] = r2;
  _mrb_float_value1150(r1, r2);
  STACKTOP = r4;
  return;
}
function _mrb_to_flo(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[r2 + 4 >> 2] & 255;
  if ((r4 | 0) == 3) {
    r5 = HEAP32[r2 >> 2] | 0;
    STACKTOP = r3;
    return r5;
  } else if ((r4 | 0) != 6) {
    _mrb_raise(r1, _mrb_class_obj_get(r1, 5325036), 5315696);
  }
  r5 = HEAPF32[r2 >> 2];
  STACKTOP = r3;
  return r5;
}
function _mrb_fixnum_mul(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = STACKTOP;
  r6 = r3, r7 = r6 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r4, r7 = r6 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r7];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7 + 1];
  r7 = HEAP32[r3 >> 2];
  if ((r7 | 0) == 0) {
    r6 = r3;
    r3 = r1;
    r8 = HEAP32[r6 + 4 >> 2];
    HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
    HEAP32[r3 + 4 >> 2] = r8;
    STACKTOP = r5;
    return;
  }
  if ((HEAP32[r4 + 4 >> 2] & 255 | 0) != 3) {
    _mrb_float_value1211(r1, (r7 | 0) * _mrb_to_flo(r2, r4));
    STACKTOP = r5;
    return;
  }
  r2 = HEAP32[r4 >> 2];
  do {
    if ((r7 + 32768 | 0) >>> 0 < 65536) {
      if ((r2 + 32768 | 0) >>> 0 >= 65536) {
        break;
      }
      _mrb_fixnum_value1212(r1, r2 * r7 & -1);
      STACKTOP = r5;
      return;
    }
  } while (0);
  _mrb_fixnum_value1212(r1, r2 * r7 & -1);
  STACKTOP = r5;
  return;
}
function _mrb_flt2big(r1, r2, r3) {
  _mrb_fixnum_value1212(r1, _flt2big(r2, r3));
  return;
}
function _flt2big(r1, r2) {
  var r3;
  if ((___fpclassifyf(r2) | 0) == 1) {
    _mrb_raise(r1, _mrb_class_obj_get(r1, 5315880), r2 < 0 ? 5315808 : 5315756);
  }
  if ((___fpclassifyf(r2) | 0) != 0) {
    r3 = r2 & -1;
    return r3;
  }
  _mrb_raise(r1, _mrb_class_obj_get(r1, 5315880), 5319716);
  r3 = r2 & -1;
  return r3;
}
function _mrb_fixnum_plus(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = STACKTOP;
  r6 = r3, r7 = r6 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r4, r7 = r6 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r7];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7 + 1];
  r7 = HEAP32[r3 >> 2];
  if ((r7 | 0) == 0) {
    r3 = r4;
    r6 = r1;
    r8 = HEAP32[r3 + 4 >> 2];
    HEAP32[r6 >> 2] = HEAP32[r3 >> 2];
    HEAP32[r6 + 4 >> 2] = r8;
    STACKTOP = r5;
    return;
  }
  if ((HEAP32[r4 + 4 >> 2] & 255 | 0) != 3) {
    _mrb_float_value1211(r1, (r7 | 0) + _mrb_to_flo(r2, r4));
    STACKTOP = r5;
    return;
  }
  r2 = HEAP32[r4 >> 2];
  r4 = r2 + r7 | 0;
  do {
    if ((r2 ^ r7 | 0) > -1) {
      if ((r7 >>> 31 | 0) == (r4 >>> 31 | 0)) {
        break;
      }
      _mrb_float_value1211(r1, (r7 | 0) + (r2 | 0));
      STACKTOP = r5;
      return;
    }
  } while (0);
  _mrb_fixnum_value1212(r1, r4);
  STACKTOP = r5;
  return;
}
function _mrb_fixnum_minus(r1, r2, r3, r4) {
  var r5, r6, r7;
  r5 = STACKTOP;
  r6 = r3, r7 = r6 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r4, r7 = r6 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r7];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7 + 1];
  r7 = HEAP32[r3 >> 2];
  if ((HEAP32[r4 + 4 >> 2] & 255 | 0) != 3) {
    _mrb_float_value1211(r1, (r7 | 0) - _mrb_to_flo(r2, r4));
    STACKTOP = r5;
    return;
  }
  r2 = HEAP32[r4 >> 2];
  r4 = r7 - r2 | 0;
  do {
    if ((r2 ^ r7 | 0) < 0) {
      if ((r7 >>> 31 | 0) == (r4 >>> 31 | 0)) {
        break;
      }
      _mrb_float_value1211(r1, (r7 | 0) - (r2 | 0));
      STACKTOP = r5;
      return;
    }
  } while (0);
  _mrb_fixnum_value1212(r1, r4);
  STACKTOP = r5;
  return;
}
function _mrb_fix2str(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = HEAP32[r3 >> 2];
  if ((r4 - 2 | 0) >>> 0 > 34) {
    _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5318308, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r4, tempInt));
  }
  if ((r6 | 0) == 0) {
    _mrb_str_new(r1, r2, 5321016, 1);
    STACKTOP = r5;
    return;
  }
  r3 = (r6 | 0) < 0;
  r7 = r3 ? -r6 | 0 : r6;
  r8 = r5 + 33 | 0;
  HEAP8[r8] = 0;
  L272 : do {
    if ((r7 & r6 | 0) < 0) {
      r9 = r7;
      r10 = r8;
      while (1) {
        r11 = (r9 | 0) % (r4 | 0);
        r12 = r10 - 1 | 0;
        HEAP8[r12] = HEAP8[((r11 | 0) > -1 ? r11 : -r11 | 0) + 5309940 | 0];
        r11 = (r9 | 0) / (r4 | 0) & -1;
        if ((r11 | 0) == 0) {
          r13 = r12;
          break L272;
        } else {
          r9 = r11;
          r10 = r12;
        }
      }
    } else {
      r10 = r7;
      r9 = r8;
      while (1) {
        r12 = r9 - 1 | 0;
        HEAP8[r12] = HEAP8[(r10 | 0) % (r4 | 0) + 5309940 | 0];
        r11 = (r10 | 0) / (r4 | 0) & -1;
        if ((r11 | 0) == 0) {
          r13 = r12;
          break L272;
        } else {
          r10 = r11;
          r9 = r12;
        }
      }
    }
  } while (0);
  if (r3) {
    r3 = r13 - 1 | 0;
    HEAP8[r3] = 45;
    r14 = r3;
  } else {
    r14 = r13;
  }
  _mrb_str_new2(r1, r2, r14);
  STACKTOP = r5;
  return;
}
_mrb_fix2str["X"] = 1;
function _mrb_init_numeric(r1) {
  var r2, r3;
  r2 = _mrb_define_class(r1, 5320560, HEAP32[r1 + 72 >> 2]);
  _mrb_include_module(r1, r2, _mrb_class_get(r1, 5325072));
  _mrb_define_method(r1, r2, 5316616, 232);
  _mrb_define_method(r1, r2, 5315496, 454);
  _mrb_define_method(r1, r2, 5314988, 186);
  _mrb_define_method(r1, r2, 5314516, 140);
  _mrb_define_method(r1, r2, 5314188, 140);
  _mrb_define_method(r1, r2, 5326516, 618);
  _mrb_define_method(r1, r2, 5314124, 268);
  r3 = _mrb_define_class(r1, 5325324, _mrb_define_class(r1, 5326212, r2));
  HEAP32[r1 + 104 >> 2] = r3;
  _mrb_undef_class_method(r1, r3);
  _mrb_define_method(r1, r3, 5326420, 474);
  _mrb_define_method(r1, r3, 5326088, 50);
  _mrb_define_method(r1, r3, 5315496, 572);
  _mrb_define_method(r1, r3, 5325956, 78);
  _mrb_define_method(r1, r3, 5324216, 216);
  _mrb_define_method(r1, r3, 5314464, 392);
  _mrb_define_method(r1, r3, 5323600, 58);
  _mrb_define_method(r1, r3, 5320552, 148);
  _mrb_define_method(r1, r3, 5316560, 68);
  _mrb_define_method(r1, r3, 5318564, 498);
  _mrb_define_method(r1, r3, 5322356, 190);
  _mrb_define_method(r1, r3, 5322040, 412);
  _mrb_define_method(r1, r3, 5321804, 200);
  _mrb_define_method(r1, r3, 5322632, 210);
  _mrb_define_method(r1, r3, 5321284, 244);
  _mrb_define_method(r1, r3, 5321020, 336);
  _mrb_define_method(r1, r3, 5320828, 594);
  _mrb_define_method(r1, r3, 5320600, 70);
  _mrb_define_method(r1, r3, 5320344, 506);
  _mrb_define_method(r1, r3, 5320568, 72);
  _mrb_define_method(r1, r3, 5320764, 200);
  _mrb_define_method(r1, r3, 5325416, 46);
  _mrb_define_method(r1, r3, 5325664, 46);
  _mrb_define_method(r1, r3, 5319412, 200);
  _mrb_define_method(r1, r3, 5319280, 180);
  r3 = _mrb_define_class(r1, 5322660, r2);
  HEAP32[r1 + 100 >> 2] = r3;
  _mrb_undef_class_method(r1, r3);
  _mrb_define_method(r1, r3, 5326420, 554);
  _mrb_define_method(r1, r3, 5326088, 440);
  _mrb_define_method(r1, r3, 5325956, 616);
  _mrb_define_method(r1, r3, 5324216, 262);
  _mrb_define_method(r1, r3, 5314464, 320);
  _mrb_define_method(r1, r3, 5321804, 340);
  _mrb_define_method(r1, r3, 5318832, 426);
  _mrb_define_method(r1, r3, 5321284, 588);
  _mrb_define_method(r1, r3, 5318592, 428);
  _mrb_define_method(r1, r3, 5320600, 438);
  _mrb_define_method(r1, r3, 5320568, 18);
  _mrb_define_method(r1, r3, 5320764, 98);
  _mrb_define_method(r1, r3, 5319412, 98);
  _mrb_define_method(r1, r3, 5325416, 34);
  _mrb_define_method(r1, r3, 5325664, 34);
  return;
}
_mrb_init_numeric["X"] = 1;
function _num_uminus(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_float_value1211(r1, -_mrb_to_flo(r2, r3));
  STACKTOP = r4;
  return;
}
function _num_pow(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((HEAP32[r3 + 4 >> 2] & 255 | 0) == 3) {
    r6 = (HEAP32[r5 + 4 >> 2] & 255 | 0) == 3;
  } else {
    r6 = 0;
  }
  r7 = Math.pow(_mrb_to_flo(r2, r3), _mrb_to_flo(r2, r5));
  do {
    if (r6) {
      if (!(r7 <= 2147483648 & r7 >= -2147483648)) {
        break;
      }
      _mrb_fixnum_value1212(r1, r7 & -1);
      STACKTOP = r4;
      return;
    }
  } while (0);
  _mrb_float_value1211(r1, r7);
  STACKTOP = r4;
  return;
}
function _num_div(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_float_value1211(r1, _mrb_to_flo(r2, r3) / HEAPF32[r5 >> 2]);
  STACKTOP = r4;
  return;
}
function _num_abs(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  if (_mrb_to_flo(r2, r3) < 0) {
    _num_uminus(r1, r2, r3);
    STACKTOP = r4;
    return;
  } else {
    r2 = r3;
    r3 = r1;
    r1 = HEAP32[r2 + 4 >> 2];
    HEAP32[r3 >> 2] = HEAP32[r2 >> 2];
    HEAP32[r3 + 4 >> 2] = r1;
    STACKTOP = r4;
    return;
  }
}
function _num_cmp(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4, r6 = r5 >> 2;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r5 = _mrb_to_flo(r2, r3);
  r3 = HEAP32[r6 + 1] & 255;
  if ((r3 | 0) == 6) {
    r7 = HEAPF32[r6];
  } else if ((r3 | 0) == 3) {
    r7 = HEAP32[r6] | 0;
  } else {
    _mrb_nil_value1215(r1);
    STACKTOP = r4;
    return;
  }
  if (r5 > r7) {
    _mrb_fixnum_value1212(r1, 1);
    STACKTOP = r4;
    return;
  }
  if (r5 < r7) {
    _mrb_fixnum_value1212(r1, -1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_fixnum_value1212(r1, 0);
    STACKTOP = r4;
    return;
  }
}
function _fix_plus(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_fixnum_plus(r1, r2, r3, r5);
  STACKTOP = r4;
  return;
}
function _fix_minus(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_fixnum_minus(r1, r2, r3, r5);
  STACKTOP = r4;
  return;
}
function _fix_uminus(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  _mrb_fixnum_value1212(r1, -HEAP32[r3 >> 2] | 0);
  STACKTOP = r2;
  return;
}
function _fix_mul(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_fixnum_mul(r1, r2, r3, r5);
  STACKTOP = r4;
  return;
}
function _fix_mod(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 12;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r8 = HEAP32[r3 >> 2];
  do {
    if ((HEAP32[r5 + 4 >> 2] & 255 | 0) == 3) {
      r3 = HEAP32[r5 >> 2];
      if ((r3 | 0) == 0) {
        break;
      }
      _fixdivmod(r8, r3, 0, r6);
      _mrb_fixnum_value1212(r1, HEAP32[r6 >> 2]);
      STACKTOP = r4;
      return;
    }
  } while (0);
  _flodivmod(r8 | 0, _mrb_to_flo(r2, r5), 0, r7);
  _mrb_float_value1211(r1, HEAPF32[r7 >> 2]);
  STACKTOP = r4;
  return;
}
function _fix_equal(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((_mrb_obj_equal(r3, r5) | 0) != 0) {
    _mrb_true_value1217(r1);
    STACKTOP = r4;
    return;
  }
  do {
    if ((HEAP32[r5 + 4 >> 2] & 255 | 0) == 6) {
      if ((HEAP32[r3 >> 2] | 0) != HEAPF32[r5 >> 2]) {
        break;
      }
      _mrb_true_value1217(r1);
      STACKTOP = r4;
      return;
    }
  } while (0);
  _mrb_false_value1216(r1);
  STACKTOP = r4;
  return;
}
function _fix_rev(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  _mrb_fixnum_value1212(r1, HEAP32[r3 >> 2] ^ -1);
  STACKTOP = r2;
  return;
}
function _fix_and(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _bit_coerce(r6, r2, r5);
  r2 = r6;
  r6 = r5;
  r5 = HEAP32[r2 >> 2];
  r7 = HEAP32[r2 + 4 >> 2];
  HEAP32[r6 >> 2] = r5;
  HEAP32[r6 + 4 >> 2] = r7;
  _mrb_fixnum_value1212(r1, r5 & HEAP32[r3 >> 2]);
  STACKTOP = r4;
  return;
}
function _fix_or(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _bit_coerce(r6, r2, r5);
  r2 = r6;
  r6 = r5;
  r5 = HEAP32[r2 >> 2];
  r7 = HEAP32[r2 + 4 >> 2];
  HEAP32[r6 >> 2] = r5;
  HEAP32[r6 + 4 >> 2] = r7;
  _mrb_fixnum_value1212(r1, r5 | HEAP32[r3 >> 2]);
  STACKTOP = r4;
  return;
}
function _fix_xor(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _bit_coerce(r6, r2, r5);
  r2 = r6;
  r6 = r5;
  r5 = HEAP32[r2 >> 2];
  r7 = HEAP32[r2 + 4 >> 2];
  HEAP32[r6 >> 2] = r5;
  HEAP32[r6 + 4 >> 2] = r7;
  _mrb_fixnum_value1212(r1, r5 ^ HEAP32[r3 >> 2]);
  STACKTOP = r4;
  return;
}
function _fix_lshift(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r7 = HEAP32[r3 >> 2];
  _bit_coerce(r6, r2, r5);
  r3 = r6;
  r6 = r5;
  r5 = HEAP32[r3 >> 2];
  r8 = HEAP32[r3 + 4 >> 2];
  HEAP32[r6 >> 2] = r5;
  HEAP32[r6 + 4 >> 2] = r8;
  r8 = r5;
  if ((r8 | 0) < 0) {
    _rshift(r1, r7, -r8 | 0);
    STACKTOP = r4;
    return;
  } else {
    _lshift(r1, r2, r7, r8);
    STACKTOP = r4;
    return;
  }
}
function _fixdivmod(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r5 = 0;
  r6 = (r2 | 0) < 0;
  r7 = (r1 | 0) < 0;
  do {
    if (r6) {
      if (r7) {
        r8 = (-r1 | 0) / (-r2 | 0) & -1;
        r5 = 321;
        break;
      } else {
        r9 = (r1 | 0) / (-r2 | 0) & -1;
        r10 = -r9 | 0;
        r11 = (r9 * r2 & -1) + r1 | 0;
        r5 = 322;
        break;
      }
    } else {
      if (r7) {
        r8 = -((-r1 | 0) / (r2 | 0) & -1) | 0;
        r5 = 321;
        break;
      } else {
        r8 = (r1 | 0) / (r2 | 0) & -1;
        r5 = 321;
        break;
      }
    }
  } while (0);
  do {
    if (r5 == 321) {
      r7 = r1 - (r8 * r2 & -1) | 0;
      if ((r7 | 0) < 0 & (r2 | 0) > 0) {
        r12 = r8;
        r13 = r7;
        r5 = 323;
        break;
      } else {
        r10 = r8;
        r11 = r7;
        r5 = 322;
        break;
      }
    }
  } while (0);
  do {
    if (r5 == 322) {
      if ((r11 | 0) < 1 | r6 ^ 1) {
        r14 = r11;
        r15 = r10;
        break;
      } else {
        r12 = r10;
        r13 = r11;
        r5 = 323;
        break;
      }
    }
  } while (0);
  if (r5 == 323) {
    r14 = r13 + r2 | 0;
    r15 = r12 - 1 | 0;
  }
  if ((r3 | 0) != 0) {
    HEAP32[r3 >> 2] = r15;
  }
  if ((r4 | 0) == 0) {
    return;
  }
  HEAP32[r4 >> 2] = r14;
  return;
}
_fixdivmod["X"] = 1;
function _int_to_i(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = r3;
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r2;
  return;
}
function _flo_to_f(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = r3;
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r2;
  return;
}
function _mrb_nil_value1215(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_false_value1216(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_true_value1217(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 2;
  return;
}
function _mrb_obj_eq(r1, r2) {
  var r3, r4, r5, r6;
  r3 = STACKTOP;
  r4 = r1, r5 = r4 >> 2;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r1 >> 2] = HEAP32[r5];
  HEAP32[r1 + 4 >> 2] = HEAP32[r5 + 1];
  r4 = r2, r5 = r4 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r5];
  HEAP32[r2 + 4 >> 2] = HEAP32[r5 + 1];
  r5 = HEAP32[r1 + 4 >> 2] & 255;
  do {
    if ((r5 | 0) == (HEAP32[r2 + 4 >> 2] & 255 | 0)) {
      if ((r5 | 0) == 4) {
        r6 = HEAP16[r1 >> 1] << 16 >> 16 == HEAP16[r2 >> 1] << 16 >> 16 & 1;
        break;
      } else if ((r5 | 0) == 0 | (r5 | 0) == 3) {
        r6 = (HEAP32[r1 >> 2] | 0) == (HEAP32[r2 >> 2] | 0) & 1;
        break;
      } else if ((r5 | 0) == 6) {
        r6 = HEAPF32[r1 >> 2] == HEAPF32[r2 >> 2] & 1;
        break;
      } else if ((r5 | 0) == 2) {
        r6 = 1;
        break;
      } else {
        r6 = (HEAP32[r1 >> 2] | 0) == (HEAP32[r2 >> 2] | 0) & 1;
        break;
      }
    } else {
      r6 = 0;
    }
  } while (0);
  STACKTOP = r3;
  return r6;
}
function _fix_rshift(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r7 = HEAP32[r3 >> 2];
  _bit_coerce(r6, r2, r5);
  r8 = r6;
  r6 = r5;
  r5 = HEAP32[r8 >> 2];
  r9 = HEAP32[r8 + 4 >> 2];
  HEAP32[r6 >> 2] = r5;
  HEAP32[r6 + 4 >> 2] = r9;
  r9 = r5;
  if ((r9 | 0) == 0) {
    r5 = r3;
    r3 = r1;
    r6 = HEAP32[r5 + 4 >> 2];
    HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
    HEAP32[r3 + 4 >> 2] = r6;
    STACKTOP = r4;
    return;
  }
  if ((r9 | 0) < 0) {
    _lshift(r1, r2, r7, -r9 | 0);
    STACKTOP = r4;
    return;
  } else {
    _rshift(r1, r7, r9);
    STACKTOP = r4;
    return;
  }
}
function _num_eql(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if (((HEAP32[r5 + 4 >> 2] ^ HEAP32[r3 + 4 >> 2]) & 255 | 0) != 0) {
    _mrb_false_value1216(r1);
    STACKTOP = r4;
    return;
  }
  if ((_mrb_equal(r2, r3, r5) | 0) == 0) {
    _mrb_false_value1216(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value1217(r1);
    STACKTOP = r4;
    return;
  }
}
function _num_floor(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_Float(r5, r2, r3);
  _flo_floor(r1, r2, r5);
  STACKTOP = r4;
  return;
}
function _flo_hash(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[r3 >> 2] | 0;
  r3 = r4 == 0 ? 0 : (HEAPF32[tempDoublePtr >> 2] = r4, HEAP32[tempDoublePtr >> 2]);
  r4 = r3 >>> 24 ^ (r3 >>> 16 & 255 ^ (r3 >>> 8 & 255 ^ (r3 & 255) * 971 & -1) * 971 & -1) * 971 & -1;
  _mrb_fixnum_value1212(r1, (r4 | 0) < 0 ? -r4 | 0 : r4);
  STACKTOP = r2;
  return;
}
function _int_succ(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  if ((HEAP32[r3 + 4 >> 2] & 255 | 0) == 3) {
    _fix_succ(r1, r2, r3);
    STACKTOP = r4;
    return;
  } else {
    _mrb_fixnum_value1212(r5, 1);
    _mrb_funcall(r1, r2, r3, 5326420, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r5 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r5 + 4 >> 2], tempInt));
    STACKTOP = r4;
    return;
  }
}
function _num_round(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_Float(r5, r2, r3);
  _flo_round(r1, r2, r5);
  STACKTOP = r4;
  return;
}
function _fix_succ(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  _mrb_fixnum_value1212(r1, HEAP32[r3 >> 2] + 1 | 0);
  STACKTOP = r2;
  return;
}
function _fix_to_f(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  _mrb_float_value1211(r1, HEAP32[r3 >> 2] | 0);
  STACKTOP = r2;
  return;
}
function _fix_to_s(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  HEAP32[r5 >> 2] = 10;
  _mrb_get_args(r2, 5317632, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_fix2str(r1, r2, r3, HEAP32[r5 >> 2]);
  STACKTOP = r4;
  return;
}
function _fix_divmod(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 72 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 12;
  r8 = r4 + 16;
  r9 = r4 + 24;
  r10 = r4 + 32;
  r11 = r4 + 40;
  r12 = r4 + 48;
  r13 = r4 + 52;
  r14 = r4 + 56;
  r15 = r4 + 64;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((HEAP32[r5 + 4 >> 2] & 255 | 0) != 3) {
    _flodivmod(HEAP32[r3 >> 2] | 0, _mrb_to_flo(r2, r5), r12, r13);
    _mrb_float_value1211(r14, HEAPF32[r12 >> 2] & -1 | 0);
    _mrb_float_value1211(r15, HEAPF32[r13 >> 2]);
    _mrb_assoc_new(r1, r2, r14, r15);
    STACKTOP = r4;
    return;
  }
  r15 = HEAP32[r5 >> 2];
  if ((r15 | 0) == 0) {
    _mrb_float_value1211(r8, _strtod(5317332, 0));
    _mrb_float_value1211(r9, _strtod(5317148, 0));
    _mrb_assoc_new(r1, r2, r8, r9);
    STACKTOP = r4;
    return;
  } else {
    _fixdivmod(HEAP32[r3 >> 2], r15, r6, r7);
    _mrb_fixnum_value1212(r10, HEAP32[r6 >> 2]);
    _mrb_fixnum_value1212(r11, HEAP32[r7 >> 2]);
    _mrb_assoc_new(r1, r2, r10, r11);
    STACKTOP = r4;
    return;
  }
}
_fix_divmod["X"] = 1;
function _flo_plus(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = HEAPF32[r3 >> 2];
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_float_value1211(r1, r6 + HEAPF32[r5 >> 2]);
  STACKTOP = r4;
  return;
}
function _flo_minus(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_float_value1211(r1, HEAPF32[r3 >> 2] - _mrb_to_flo(r2, r5));
  STACKTOP = r4;
  return;
}
function _flo_mul(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_float_value1211(r1, HEAPF32[r3 >> 2] * _mrb_to_flo(r2, r5));
  STACKTOP = r4;
  return;
}
function _flo_mod(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r7 = _mrb_to_flo(r2, r5);
  _flodivmod(HEAPF32[r3 >> 2], r7, 0, r6);
  _mrb_float_value1211(r1, HEAPF32[r6 >> 2]);
  STACKTOP = r4;
  return;
}
function _flo_eq(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4, r6 = r5 >> 2;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r7 = HEAP32[r6 + 1] & 255;
  if ((r7 | 0) == 3) {
    r8 = HEAP32[r6] | 0;
  } else if ((r7 | 0) == 6) {
    r8 = HEAPF32[r6];
  } else {
    _num_equal(r1, r2, r3, r5);
    STACKTOP = r4;
    return;
  }
  if (HEAPF32[r3 >> 2] == r8) {
    _mrb_true_value1217(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_false_value1216(r1);
    STACKTOP = r4;
    return;
  }
}
function _flo_ceil(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = Math.ceil(HEAPF32[r3 >> 2]);
  if (r4 <= 2147483648 & r4 >= -2147483648) {
    _mrb_fixnum_value1212(r1, r4 & -1);
    STACKTOP = r2;
    return;
  } else {
    _mrb_float_value1211(r1, r4);
    STACKTOP = r2;
    return;
  }
}
function _flo_finite_p(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAPF32[r3 >> 2];
  do {
    if ((___fpclassifyf(r4) | 0) != 1) {
      if ((___fpclassifyf(r4) | 0) == 0) {
        break;
      }
      _mrb_true_value1217(r1);
      STACKTOP = r2;
      return;
    }
  } while (0);
  _mrb_false_value1216(r1);
  STACKTOP = r2;
  return;
}
function _flo_floor(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = Math.floor(HEAPF32[r3 >> 2]);
  if (r4 <= 2147483648 & r4 >= -2147483648) {
    _mrb_fixnum_value1212(r1, r4 & -1);
    STACKTOP = r2;
    return;
  } else {
    _mrb_float_value1211(r1, r4);
    STACKTOP = r2;
    return;
  }
}
function _flo_infinite_p(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAPF32[r3 >> 2];
  if ((___fpclassifyf(r4) | 0) == 1) {
    _mrb_fixnum_value1212(r1, r4 < 0 ? -1 : 1);
    STACKTOP = r2;
    return;
  } else {
    _mrb_nil_value1215(r1);
    STACKTOP = r2;
    return;
  }
}
function _flo_round(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5, r7 = r6 >> 2;
  HEAP32[r7] = 0;
  _mrb_get_args(r2, 5317632, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r6, tempInt));
  r6 = HEAPF32[r3 >> 2];
  r3 = HEAP32[r7];
  r2 = (r3 | 0) > -1 ? r3 : -r3 | 0;
  L471 : do {
    if ((r2 | 0) > 0) {
      r3 = 1;
      r8 = r2;
      while (1) {
        r9 = r8 - 1 | 0;
        r10 = r3 * 10;
        if ((r9 | 0) > 0) {
          r3 = r10;
          r8 = r9;
        } else {
          r11 = r10;
          break L471;
        }
      }
    } else {
      r11 = 1;
    }
  } while (0);
  r2 = (___fpclassifyf(r11) | 0) == 1;
  r8 = HEAP32[r7];
  r7 = (r8 | 0) < 0;
  do {
    if (r2) {
      r12 = r7 ? 0 : r6;
      r4 = 436;
      break;
    } else {
      if (r7) {
        r13 = r6 / r11;
      } else {
        r13 = r6 * r11;
      }
      do {
        if (r13 > 0) {
          r3 = Math.floor(r13);
          r14 = r3 + (r13 - r3 >= .5 & 1 | 0);
        } else {
          if (r13 >= 0) {
            r14 = r13;
            break;
          }
          r3 = Math.ceil(r13);
          r14 = r3 - (r3 - r13 >= .5 & 1 | 0);
        }
      } while (0);
      if (r7) {
        r15 = r11 * r14;
        break;
      } else {
        r12 = r14 / r11;
        r4 = 436;
        break;
      }
    }
  } while (0);
  do {
    if (r4 == 436) {
      if ((r8 | 0) <= 0) {
        r15 = r12;
        break;
      }
      _mrb_float_value1211(r1, r12);
      STACKTOP = r5;
      return;
    }
  } while (0);
  _mrb_fixnum_value1212(r1, r15 & -1);
  STACKTOP = r5;
  return;
}
_flo_round["X"] = 1;
function _flo_truncate(r1, r2, r3) {
  var r4, r5, r6;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAPF32[r3 >> 2];
  if (r4 > 0) {
    r5 = Math.floor(r4);
  } else {
    r5 = r4;
  }
  if (r5 < 0) {
    r6 = Math.ceil(r5);
  } else {
    r6 = r5;
  }
  if (r6 <= 2147483648 & r6 >= -2147483648) {
    _mrb_fixnum_value1212(r1, r6 & -1);
    STACKTOP = r2;
    return;
  } else {
    _mrb_float_value1211(r1, r6);
    STACKTOP = r2;
    return;
  }
}
function _flo_to_s(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = HEAPF32[r3 >> 2];
  if ((___fpclassifyf(r5) | 0) == 1) {
    r3 = r5 >= 0 & 1;
    _mrb_str_new(r1, r2, r3 * 5 + 5313520 | 0, HEAP32[(r3 << 2) + 5313532 >> 2]);
    STACKTOP = r4;
    return;
  }
  if ((___fpclassifyf(r5) | 0) == 0) {
    _mrb_str_new(r1, r2, 5319716, 3);
    STACKTOP = r4;
    return;
  }
  r3 = r4 | 0;
  r6 = _sprintf(r3, 5318100, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = r5, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt));
  if ((r6 | 0) <= -1) {
    ___assert_func(5317936, 203, 5327044, 5317796);
  }
  _mrb_str_new(r1, r2, r3, r6);
  STACKTOP = r4;
  return;
}
function _num_equal(r1, r2, r3, r4) {
  var r5, r6, r7;
  r5 = STACKTOP;
  r6 = r3, r7 = r6 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r4, r7 = r6 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r7];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7 + 1];
  if ((_mrb_obj_equal(r3, r4) | 0) == 0) {
    _mrb_funcall(r1, r2, r4, 5314464, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r3 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r3 + 4 >> 2], tempInt));
    STACKTOP = r5;
    return;
  } else {
    _mrb_true_value1217(r1);
    STACKTOP = r5;
    return;
  }
}
function _flodivmod(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9;
  r5 = 0;
  if (r2 == 0) {
    HEAPF32[r3 >> 2] = _strtod(5317332, 0);
    HEAPF32[r4 >> 2] = _strtod(5317148, 0);
    return;
  }
  r6 = _fmod(r1, r2);
  do {
    if ((___fpclassifyf(r1) | 0) == 1) {
      if ((___fpclassifyf(r2) | 0) == 1) {
        r5 = 474;
        break;
      }
      if ((___fpclassifyf(r2) | 0) == 0) {
        r5 = 474;
        break;
      } else {
        r7 = r1;
        break;
      }
    } else {
      r5 = 474;
    }
  } while (0);
  if (r5 == 474) {
    r7 = (r1 - r6) / r2;
  }
  if (r6 * r2 < 0) {
    r8 = r6 + r2;
    r9 = r7 - 1;
  } else {
    r8 = r6;
    r9 = r7;
  }
  if ((r4 | 0) != 0) {
    HEAPF32[r4 >> 2] = r8;
  }
  if ((r3 | 0) == 0) {
    return;
  }
  HEAPF32[r3 >> 2] = r9;
  return;
}
function _bit_coerce(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r5;
  r7 = r3;
  r8 = HEAP32[r3 + 4 >> 2];
  while (1) {
    r9 = r8 & 255;
    if ((r9 | 0) == 6) {
      _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5315944);
    } else if ((r9 | 0) == 3) {
      break;
    }
    _mrb_to_int(r5, r2, r3);
    r10 = r6 | 0;
    r11 = r6 + 4 | 0;
    r9 = HEAP32[r11 >> 2];
    r12 = r7 | 0;
    HEAP32[r12 >> 2] = HEAP32[r10 >> 2];
    r13 = r7 + 4 | 0;
    HEAP32[r13 >> 2] = r9;
    r8 = r9;
  }
  r8 = r1;
  r10 = r7 | 0;
  r11 = r7 + 4 | 0;
  r7 = HEAP32[r11 >> 2];
  r12 = r8 | 0;
  HEAP32[r12 >> 2] = HEAP32[r10 >> 2];
  r13 = r8 + 4 | 0;
  HEAP32[r13 >> 2] = r7;
  STACKTOP = r4;
  return;
}
function _lshift(r1, r2, r3, r4) {
  var r5;
  r5 = STACKTOP;
  if (r4 >>> 0 > 31) {
    _mrb_raisef(r2, _mrb_class_obj_get(r2, 5320524), 5316256, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r4, HEAP32[tempInt + 4 >> 2] = 31, tempInt));
  }
  _mrb_fixnum_value1212(r1, r3 << r4);
  STACKTOP = r5;
  return;
}
function _rshift(r1, r2, r3) {
  if (r3 >>> 0 <= 30) {
    _mrb_fixnum_value1212(r1, r2 >> r3);
    return;
  }
  if ((r2 | 0) < 0) {
    _mrb_fixnum_value1212(r1, -1);
    return;
  } else {
    _mrb_fixnum_value1212(r1, 0);
    return;
  }
}
function _mrb_obj_equal(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  r4 = r1, r5 = r4 >> 2;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r1 >> 2] = HEAP32[r5];
  HEAP32[r1 + 4 >> 2] = HEAP32[r5 + 1];
  r4 = r2, r5 = r4 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r5];
  HEAP32[r2 + 4 >> 2] = HEAP32[r5 + 1];
  r5 = _mrb_obj_eq(r1, r2);
  STACKTOP = r3;
  return r5;
}
function _mrb_equal(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r2, r6 = r5 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 1];
  r5 = r3, r6 = r5 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 1];
  r6 = r4;
  if ((_mrb_obj_eq(r2, r3) | 0) != 0) {
    r7 = 1;
    STACKTOP = r4;
    return r7;
  }
  _mrb_funcall(r6, r1, r2, 5314464, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r3 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r3 + 4 >> 2], tempInt));
  r7 = (HEAP32[r6 + 4 >> 2] & 255 | 0) != 0 & 1;
  STACKTOP = r4;
  return r7;
}
function _mrb_nil_value1276(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_class1287(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[r2 + 4 >> 2] & 255;
  do {
    if ((r4 | 0) == 0) {
      if ((HEAP32[r2 >> 2] | 0) == 0) {
        r5 = r1 + 116 | 0;
        break;
      } else {
        r5 = r1 + 112 | 0;
        break;
      }
    } else if ((r4 | 0) == 2) {
      r5 = r1 + 108 | 0;
    } else if ((r4 | 0) == 4) {
      r5 = r1 + 120 | 0;
    } else if ((r4 | 0) == 3) {
      r5 = r1 + 104 | 0;
    } else if ((r4 | 0) == 6) {
      r5 = r1 + 100 | 0;
    } else if ((r4 | 0) == 8) {
      r5 = r1 + 72 | 0;
    } else {
      r5 = HEAP32[r2 >> 2] + 4 | 0;
    }
  } while (0);
  STACKTOP = r3;
  return HEAP32[r5 >> 2];
}
function _mrb_float_value1292(r1, r2) {
  HEAPF32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 6;
  return;
}
function _mrb_true_value1297(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 2;
  return;
}
function _mrb_false_value1298(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_obj_value1336(r1, r2) {
  var r3;
  r3 = HEAP32[r2 >> 2] & 255;
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = r3;
  return;
}
function _mrb_range_beg(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[HEAP32[r3 >> 2] + 12 >> 2];
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r2;
  return;
}
function _mrb_range_end(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[HEAP32[r3 >> 2] + 12 >> 2] + 8 | 0;
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r2;
  return;
}
function _mrb_init_object(r1) {
  var r2, r3;
  r2 = (r1 + 72 | 0) >> 2;
  r3 = _mrb_define_class(r1, 5326016, HEAP32[r2]);
  HEAP32[r1 + 116 >> 2] = r3;
  _mrb_undef_class_method(r1, r3);
  _mrb_define_method(r1, r3, 5320552, 356);
  _mrb_define_method(r1, r3, 5318564, 390);
  _mrb_define_method(r1, r3, 5316560, 452);
  _mrb_define_method(r1, r3, 5315464, 316);
  _mrb_define_method(r1, r3, 5325416, 14);
  _mrb_define_method(r1, r3, 5325664, 436);
  r3 = _mrb_define_class(r1, 5314176, HEAP32[r2]);
  HEAP32[r1 + 108 >> 2] = r3;
  _mrb_undef_class_method(r1, r3);
  _mrb_define_method(r1, r3, 5320552, 394);
  _mrb_define_method(r1, r3, 5318564, 24);
  _mrb_define_method(r1, r3, 5325416, 104);
  _mrb_define_method(r1, r3, 5316560, 324);
  _mrb_define_method(r1, r3, 5325664, 104);
  r3 = _mrb_define_class(r1, 5326504, HEAP32[r2]);
  HEAP32[r1 + 112 >> 2] = r3;
  _mrb_undef_class_method(r1, r3);
  _mrb_define_method(r1, r3, 5320552, 356);
  _mrb_define_method(r1, r3, 5318564, 390);
  _mrb_define_method(r1, r3, 5325416, 4);
  _mrb_define_method(r1, r3, 5316560, 452);
  _mrb_define_method(r1, r3, 5325664, 4);
  return;
}
function _false_and(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_get_args(r2, 5317144, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r4, tempInt));
  _mrb_false_value1298(r1);
  STACKTOP = r4;
  return;
}
function _false_xor(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5317144, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((HEAP32[r5 >> 2] | 0) == 0) {
    _mrb_false_value1298(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value1297(r1);
    STACKTOP = r4;
    return;
  }
}
function _false_or(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5317144, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((HEAP32[r5 >> 2] | 0) == 0) {
    _mrb_false_value1298(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value1297(r1);
    STACKTOP = r4;
    return;
  }
}
function _mrb_true(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  _mrb_true_value1297(r1);
  STACKTOP = r2;
  return;
}
function _nil_to_s(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_str_new(r1, r2, 0, 0);
  STACKTOP = r4;
  return;
}
function _nil_inspect(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_str_new(r1, r2, 5325480, 3);
  STACKTOP = r4;
  return;
}
function _true_and(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5317144, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((HEAP32[r5 >> 2] | 0) == 0) {
    _mrb_false_value1298(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_true_value1297(r1);
    STACKTOP = r4;
    return;
  }
}
function _true_xor(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5317144, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((HEAP32[r5 >> 2] | 0) == 0) {
    _mrb_true_value1297(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_false_value1298(r1);
    STACKTOP = r4;
    return;
  }
}
function _true_to_s(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_str_new(r1, r2, 5320336, 4);
  STACKTOP = r4;
  return;
}
function _true_or(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_get_args(r2, 5317144, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r4, tempInt));
  _mrb_true_value1297(r1);
  STACKTOP = r4;
  return;
}
function _false_to_s(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_str_new(r1, r2, 5320580, 5);
  STACKTOP = r4;
  return;
}
function _convert_type(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9;
  r7 = STACKTOP;
  r8 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r8 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r8 + 4 >> 2];
  r8 = _mrb_intern(r2, r5);
  if ((_mrb_respond_to(r2, r3, r8) | 0) != 0) {
    _mrb_funcall_argv(r1, r2, r3, r8, 0, 0);
    STACKTOP = r7;
    return;
  }
  if ((r6 | 0) == 0) {
    _mrb_nil_value1276(r1);
    STACKTOP = r7;
    return;
  }
  r6 = _mrb_class_obj_get(r2, 5325036);
  r8 = HEAP32[r3 + 4 >> 2] & 255;
  if ((r8 | 0) == 0) {
    r9 = (HEAP32[r3 >> 2] | 0) == 0 ? 5325480 : 5320580;
  } else if ((r8 | 0) == 2) {
    r9 = 5320336;
  } else {
    r9 = _mrb_obj_classname(r2, r3);
  }
  _mrb_raisef(r2, r6, 5317304, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r9, HEAP32[tempInt + 4 >> 2] = r4, tempInt));
  _mrb_nil_value1276(r1);
  STACKTOP = r7;
  return;
}
function _mrb_convert_type(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r8 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r8 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r8 + 4 >> 2];
  r8 = r7;
  if ((HEAP32[r3 + 4 >> 2] & 255 | 0) == (r4 | 0)) {
    r9 = r3;
    r10 = r1;
    r11 = HEAP32[r9 + 4 >> 2];
    HEAP32[r10 >> 2] = HEAP32[r9 >> 2];
    HEAP32[r10 + 4 >> 2] = r11;
    STACKTOP = r7;
    return;
  }
  _convert_type(r8, r2, r3, r5, r6, 1);
  r11 = HEAPF32[r8 >> 2];
  r10 = HEAP32[r8 + 4 >> 2];
  if ((r10 & 255 | 0) != (r4 | 0)) {
    r4 = _mrb_class_obj_get(r2, 5325036);
    r8 = _mrb_obj_classname(r2, r3);
    _mrb_raisef(r2, r4, 5325724, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r8, HEAP32[tempInt + 4 >> 2] = r5, HEAP32[tempInt + 8 >> 2] = r6, tempInt));
  }
  HEAPF32[r1 >> 2] = r11;
  HEAP32[r1 + 4 >> 2] = r10;
  STACKTOP = r7;
  return;
}
function _mrb_check_convert_type(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r8 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r8 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r8 + 4 >> 2];
  r8 = r7;
  if ((HEAP32[r3 + 4 >> 2] & 255 | 0) == (r4 | 0) & (r4 | 0) != 25) {
    r9 = r3;
    r10 = r1;
    r11 = HEAP32[r9 + 4 >> 2];
    HEAP32[r10 >> 2] = HEAP32[r9 >> 2];
    HEAP32[r10 + 4 >> 2] = r11;
    STACKTOP = r7;
    return;
  }
  _convert_type(r8, r2, r3, r5, r6, 0);
  r6 = HEAP32[r8 >> 2];
  r5 = HEAP32[r8 + 4 >> 2];
  r8 = r5 & 255;
  if ((r8 | r6 | 0) != 0 & (r8 | 0) == (r4 | 0)) {
    HEAP32[r1 >> 2] = r6;
    HEAP32[r1 + 4 >> 2] = r5;
    STACKTOP = r7;
    return;
  } else {
    _mrb_nil_value1276(r1);
    STACKTOP = r7;
    return;
  }
}
function _mrb_check_type(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  r7 = (r2 + 4 | 0) >> 2;
  r8 = HEAP32[r7] & 255;
  if (!((r8 | 0) != (r3 | 0) | (r8 | 0) == 25)) {
    STACKTOP = r5;
    return;
  }
  r8 = r2;
  r9 = r6;
  r10 = 5313544;
  r11 = 0;
  while (1) {
    if ((r11 & 255 | 0) == (r3 | 0)) {
      r12 = HEAP32[r7] & 255;
      do {
        if ((r12 | 0) == 3) {
          r13 = 5325324;
        } else if ((r12 | 0) == 4) {
          r13 = 5324992;
          break;
        } else if ((r12 | 0) == 0) {
          if ((HEAP32[r8 >> 2] | 0) == 0) {
            r13 = 5325480;
            break;
          } else {
            r4 = 594;
            break;
          }
        } else {
          if (r12 >>> 0 < 9) {
            r4 = 594;
            break;
          }
          r13 = _mrb_obj_classname(r1, r2);
          break;
        }
      } while (0);
      if (r4 == 594) {
        r4 = 0;
        _mrb_obj_as_string(r6, r1, r2);
        r13 = HEAP32[HEAP32[r9 >> 2] + 20 >> 2];
      }
      r12 = _mrb_class_obj_get(r1, 5325036);
      r14 = HEAP32[r10 + 4 >> 2];
      _mrb_raisef(r1, r12, 5324616, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r13, HEAP32[tempInt + 4 >> 2] = r14, tempInt));
    }
    r14 = r10 + 8 | 0;
    r12 = HEAP8[r14 | 0];
    if ((r12 & 255) < 26) {
      r10 = r14;
      r11 = r12;
    } else {
      break;
    }
  }
  r11 = _mrb_class_obj_get(r1, 5325036);
  r10 = HEAP32[r7] & 255;
  _mrb_raisef(r1, r11, 5324184, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r3, HEAP32[tempInt + 4 >> 2] = r10, tempInt));
  STACKTOP = r5;
  return;
}
_mrb_check_type["X"] = 1;
function _mrb_any_to_s(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = _mrb_obj_classname(r2, r3);
  r6 = HEAP32[r3 >> 2];
  _mrb_sprintf(r1, r2, 5323816, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  STACKTOP = r4;
  return;
}
function _mrb_obj_is_kind_of(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  r5 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = _mrb_class1287(r1, r2);
  if (((HEAP32[r3 >> 2] & 255) - 10 | 0) >>> 0 >= 3) {
    _mrb_raise(r1, _mrb_class_obj_get(r1, 5325036), 5323572);
  }
  L684 : do {
    if ((r5 | 0) == 0) {
      r6 = 0;
    } else {
      r1 = r3 + 16 | 0;
      r2 = r5;
      while (1) {
        if ((r2 | 0) == (r3 | 0)) {
          r6 = 1;
          break L684;
        }
        if ((HEAP32[r2 + 16 >> 2] | 0) == (HEAP32[r1 >> 2] | 0)) {
          r6 = 1;
          break L684;
        }
        r7 = HEAP32[r2 + 20 >> 2];
        if ((r7 | 0) == 0) {
          r6 = 0;
          break L684;
        } else {
          r2 = r7;
        }
      }
    }
  } while (0);
  STACKTOP = r4;
  return r6;
}
function _mrb_to_int(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_to_integer(r1, r2, r3, 5323324);
  STACKTOP = r4;
  return;
}
function _mrb_to_integer(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  if ((HEAP32[r3 + 4 >> 2] & 255 | 0) == 3) {
    r7 = r3;
    r8 = r1;
    r9 = HEAP32[r7 + 4 >> 2];
    HEAP32[r8 >> 2] = HEAP32[r7 >> 2];
    HEAP32[r8 + 4 >> 2] = r9;
    STACKTOP = r5;
    return;
  }
  _convert_type(r6, r2, r3, 5326212, r4, 1);
  r9 = r6;
  if ((_mrb_obj_is_kind_of(r2, r6, HEAP32[r2 + 104 >> 2]) | 0) == 0) {
    r8 = _mrb_obj_classname(r2, r3);
    r3 = _mrb_class_obj_get(r2, 5325036);
    r7 = _mrb_obj_classname(r2, r6);
    _mrb_raisef(r2, r3, 5320780, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = r8, HEAP32[tempInt + 4 >> 2] = r8, HEAP32[tempInt + 8 >> 2] = r4, HEAP32[tempInt + 12 >> 2] = r7, tempInt));
  }
  r7 = r1;
  r1 = HEAP32[r9 + 4 >> 2];
  HEAP32[r7 >> 2] = HEAP32[r9 >> 2];
  HEAP32[r7 + 4 >> 2] = r1;
  STACKTOP = r5;
  return;
}
function _mrb_Integer(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_convert_to_integer(r1, r2, r3);
  STACKTOP = r4;
  return;
}
function _mrb_convert_to_integer(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r3 + 4 | 0;
  r7 = HEAP32[r6 >> 2];
  do {
    if ((r7 & 255 | 0) == 0) {
      if ((HEAP32[r3 >> 2] | 0) != 0) {
        r8 = r7;
        break;
      }
      _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5321772);
      r8 = HEAP32[r6 >> 2];
    } else {
      r8 = r7;
    }
  } while (0);
  r7 = r8 & 255;
  do {
    if ((r7 | 0) == 3) {
      r8 = r3;
      r6 = r1;
      r9 = HEAP32[r8 + 4 >> 2];
      HEAP32[r6 >> 2] = HEAP32[r8 >> 2];
      HEAP32[r6 + 4 >> 2] = r9;
      STACKTOP = r4;
      return;
    } else if ((r7 | 0) == 17) {
      _mrb_str_to_inum(r1, r2, r3, 0, 1);
      STACKTOP = r4;
      return;
    } else if ((r7 | 0) == 6) {
      r9 = HEAPF32[r3 >> 2];
      if (!(r9 > 2147483648 | r9 < -2147483648)) {
        break;
      }
      _mrb_flt2big(r1, r2, r9);
      STACKTOP = r4;
      return;
    }
  } while (0);
  _convert_type(r5, r2, r3, 5326212, 5323324, 0);
  r7 = HEAP32[r5 >> 2];
  r9 = HEAP32[r5 + 4 >> 2];
  if ((r9 & 255 | r7 | 0) == 0) {
    _mrb_to_integer(r1, r2, r3, 5320764);
    STACKTOP = r4;
    return;
  } else {
    HEAP32[r1 >> 2] = r7;
    HEAP32[r1 + 4 >> 2] = r9;
    STACKTOP = r4;
    return;
  }
}
_mrb_convert_to_integer["X"] = 1;
function _mrb_Float(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r3 + 4 | 0;
  r6 = HEAP32[r5 >> 2];
  do {
    if ((r6 & 255 | 0) == 0) {
      if ((HEAP32[r3 >> 2] | 0) != 0) {
        r7 = r6;
        break;
      }
      _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5322980);
      r7 = HEAP32[r5 >> 2];
    } else {
      r7 = r6;
    }
  } while (0);
  r6 = r7 & 255;
  if ((r6 | 0) == 17) {
    _mrb_float_value1292(r1, _mrb_str_to_dbl(r2, r3, 1));
    STACKTOP = r4;
    return;
  } else if ((r6 | 0) == 6) {
    r7 = r3;
    r5 = r1;
    r8 = HEAP32[r7 + 4 >> 2];
    HEAP32[r5 >> 2] = HEAP32[r7 >> 2];
    HEAP32[r5 + 4 >> 2] = r8;
    STACKTOP = r4;
    return;
  } else if ((r6 | 0) == 3) {
    _mrb_float_value1292(r1, HEAP32[r3 >> 2] | 0);
    STACKTOP = r4;
    return;
  } else {
    _mrb_convert_type(r1, r2, r3, 6, 5322660, 5320568);
    STACKTOP = r4;
    return;
  }
}
function _mrb_inspect(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_funcall(r5, r2, r3, 5325664, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 0, tempInt));
  _mrb_obj_as_string(r1, r2, r5);
  STACKTOP = r4;
  return;
}
function _mrb_eql(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r2, r6 = r5 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 1];
  r5 = r3, r6 = r5 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 1];
  r6 = r4;
  if ((_mrb_obj_eq(r2, r3) | 0) != 0) {
    r7 = 1;
    STACKTOP = r4;
    return r7;
  }
  _mrb_funcall(r6, r1, r2, 5322632, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r3 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r3 + 4 >> 2], tempInt));
  r7 = (HEAP32[r6 + 4 >> 2] & 255 | 0) != 0 & 1;
  STACKTOP = r4;
  return r7;
}
function _mrb_pool_open(r1) {
  var r2, r3;
  r2 = _mrb_malloc(r1, 8);
  r3 = r2;
  if ((r2 | 0) == 0) {
    return r3;
  }
  HEAP32[r2 >> 2] = r1;
  HEAP32[r2 + 4 >> 2] = 0;
  return r3;
}
function _mrb_pool_close(r1) {
  var r2, r3, r4, r5;
  if ((r1 | 0) == 0) {
    return;
  }
  r2 = HEAP32[r1 + 4 >> 2];
  r3 = r1 | 0;
  L750 : do {
    if ((r2 | 0) != 0) {
      r4 = r2;
      while (1) {
        r5 = HEAP32[r4 >> 2];
        _mrb_free(HEAP32[r3 >> 2], r4);
        if ((r5 | 0) == 0) {
          break L750;
        } else {
          r4 = r5;
        }
      }
    }
  } while (0);
  _mrb_free(HEAP32[r3 >> 2], r1);
  return;
}
function _mrb_pool_alloc(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10;
  r3 = 0;
  if ((r1 | 0) == 0) {
    r4 = 0;
    return r4;
  }
  r5 = (-r2 & 3) + r2 | 0;
  r2 = r1 + 4 | 0;
  r6 = r2;
  while (1) {
    r7 = HEAP32[r6 >> 2];
    if ((r7 | 0) == 0) {
      break;
    }
    r8 = r7 + 4 | 0;
    r9 = HEAP32[r8 >> 2];
    r10 = r9 + r5 | 0;
    if (r10 >>> 0 > HEAP32[r7 + 8 >> 2] >>> 0) {
      r6 = r7 | 0;
    } else {
      r3 = 673;
      break;
    }
  }
  if (r3 == 673) {
    HEAP32[r8 >> 2] = r10;
    r10 = r7 + (r9 + 16) | 0;
    HEAP32[r7 + 12 >> 2] = r10;
    r4 = r10;
    return r4;
  }
  r10 = _page_alloc(HEAP32[r1 >> 2], r5), r1 = r10 >> 2;
  if ((r10 | 0) == 0) {
    r4 = 0;
    return r4;
  }
  HEAP32[r1 + 1] = r5;
  HEAP32[r1] = HEAP32[r2 >> 2];
  HEAP32[r2 >> 2] = r10;
  r2 = r10 + 16 | 0;
  HEAP32[r1 + 3] = r2;
  r4 = r2;
  return r4;
}
function _page_alloc(r1, r2) {
  var r3;
  r3 = r2 >>> 0 < 16e3 ? 16e3 : r2;
  r2 = _mrb_malloc(r1, r3 + 19 | 0);
  r1 = r2;
  if ((r2 | 0) == 0) {
    return r1;
  }
  HEAP32[r2 + 4 >> 2] = 0;
  HEAP32[r2 + 8 >> 2] = r3;
  return r1;
}
function _mrb_range_new(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9;
  r6 = STACKTOP;
  r7 = r3, r8 = r7 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r8];
  HEAP32[r3 + 4 >> 2] = HEAP32[r8 + 1];
  r7 = r4, r8 = r7 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r8];
  HEAP32[r4 + 4 >> 2] = HEAP32[r8 + 1];
  r8 = _mrb_obj_alloc(r2, 18, _mrb_class_obj_get(r2, 5325772));
  _range_check(r2, r3, r4);
  r7 = _mrb_malloc(r2, 16);
  r2 = r8 + 12 | 0;
  HEAP32[r2 >> 2] = r7;
  r9 = r3;
  r3 = r7;
  r7 = HEAP32[r9 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r9 >> 2];
  HEAP32[r3 + 4 >> 2] = r7;
  r7 = r4;
  r4 = HEAP32[r2 >> 2] + 8 | 0;
  r2 = HEAP32[r7 + 4 >> 2];
  HEAP32[r4 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r4 + 4 >> 2] = r2;
  HEAP32[r8 + 16 >> 2] = r5;
  _mrb_obj_value1336(r1, r8 | 0);
  STACKTOP = r6;
  return;
}
function _range_check(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r2, r6 = r5 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 1];
  r5 = r3, r6 = r5 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 1];
  r6 = r4;
  r5 = HEAP32[r2 + 4 >> 2] & 255;
  r7 = HEAP32[r3 + 4 >> 2] & 255;
  do {
    if ((r5 | 0) == 6 | (r5 | 0) == 3) {
      if (!((r7 | 0) == 6 | (r7 | 0) == 3)) {
        break;
      }
      STACKTOP = r4;
      return;
    }
  } while (0);
  _mrb_funcall(r6, r1, r2, 5314124, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r3 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r3 + 4 >> 2], tempInt));
  if ((HEAP32[r6 + 4 >> 2] & 255 | 0) != 0) {
    STACKTOP = r4;
    return;
  }
  if ((HEAP32[r6 >> 2] | 0) != 0) {
    STACKTOP = r4;
    return;
  }
  _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5321264);
  STACKTOP = r4;
  return;
}
function _mrb_true_value1337(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 2;
  return;
}
function _mrb_false_value1338(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_range_each(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = r3;
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r2;
  return;
}
function _mrb_range_beg_len(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10;
  r5 = STACKTOP;
  r6 = r1;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r1 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r1 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = HEAP32[r1 >> 2];
  if ((HEAP32[r1 + 4 >> 2] & 255 | 0) != 18) {
    r7 = 0;
    STACKTOP = r5;
    return r7;
  }
  r1 = HEAP32[r6 + 12 >> 2];
  r8 = HEAP32[r1 >> 2];
  r9 = HEAP32[r1 + 8 >> 2];
  do {
    if ((r8 | 0) < 0) {
      r1 = r8 + r4 | 0;
      if ((r1 | 0) < 0) {
        r7 = 2;
      } else {
        r10 = r1;
        break;
      }
      STACKTOP = r5;
      return r7;
    } else {
      r10 = r8;
    }
  } while (0);
  if ((r10 | 0) > (r4 | 0)) {
    r7 = 2;
    STACKTOP = r5;
    return r7;
  }
  r8 = (r9 | 0) > (r4 | 0) ? r4 : r9;
  r9 = ((r8 | 0) < 0 ? r4 : 0) + r8 | 0;
  r8 = r9 - r10 + ((HEAP32[r6 + 16 >> 2] | 0) == 0 & (r9 | 0) < (r4 | 0) & 1) | 0;
  HEAP32[r2 >> 2] = r10;
  HEAP32[r3 >> 2] = (r8 | 0) < 0 ? 0 : r8;
  r7 = 1;
  STACKTOP = r5;
  return r7;
}
function _mrb_nil_value1391(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_range_excl(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  if ((HEAP32[HEAP32[r3 >> 2] + 16 >> 2] | 0) == 0) {
    _mrb_false_value1338(r1);
    STACKTOP = r2;
    return;
  } else {
    _mrb_true_value1337(r1);
    STACKTOP = r2;
    return;
  }
}
function _mrb_range_initialize(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 16;
  if ((_mrb_get_args(r2, 5326008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, HEAP32[tempInt + 8 >> 2] = r7, tempInt)) | 0) == 3) {
    r8 = HEAP32[r7 >> 2];
  } else {
    HEAP32[r7 >> 2] = 0;
    r8 = 0;
  }
  _range_init(r2, r3, r5, r6, r8);
  r8 = r3;
  r3 = r1;
  r1 = HEAP32[r8 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r8 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _range_init(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9;
  r6 = STACKTOP;
  r7 = r2, r8 = r7 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r8];
  HEAP32[r2 + 4 >> 2] = HEAP32[r8 + 1];
  r7 = r3, r8 = r7 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r8];
  HEAP32[r3 + 4 >> 2] = HEAP32[r8 + 1];
  r7 = r4, r8 = r7 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r8];
  HEAP32[r4 + 4 >> 2] = HEAP32[r8 + 1];
  r8 = HEAP32[r2 >> 2];
  _range_check(r1, r3, r4);
  HEAP32[r8 + 16 >> 2] = r5;
  r5 = (r8 + 12 | 0) >> 2;
  r8 = HEAP32[r5];
  if ((r8 | 0) == 0) {
    r2 = _mrb_malloc(r1, 16);
    HEAP32[r5] = r2;
    r9 = r2;
  } else {
    r9 = r8;
  }
  r8 = r3;
  r3 = r9;
  r9 = HEAP32[r8 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r8 >> 2];
  HEAP32[r3 + 4 >> 2] = r9;
  r9 = r4;
  r4 = HEAP32[r5] + 8 | 0;
  r5 = HEAP32[r9 + 4 >> 2];
  HEAP32[r4 >> 2] = HEAP32[r9 >> 2];
  HEAP32[r4 + 4 >> 2] = r5;
  STACKTOP = r6;
  return;
}
function _mrb_range_eq(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((_mrb_obj_equal(r3, r5) | 0) != 0) {
    _mrb_true_value1337(r1);
    STACKTOP = r4;
    return;
  }
  if ((_mrb_obj_is_instance_of(r2, r5, _mrb_obj_class(r2, r3)) | 0) == 0) {
    _mrb_false_value1338(r1);
    STACKTOP = r4;
    return;
  }
  r2 = HEAP32[r3 >> 2];
  r3 = HEAP32[r5 >> 2];
  r5 = HEAP32[r2 + 12 >> 2];
  r6 = HEAP32[r3 + 12 >> 2];
  if ((_mrb_obj_equal(r5 | 0, r6 | 0) | 0) == 0) {
    _mrb_false_value1338(r1);
    STACKTOP = r4;
    return;
  }
  if ((_mrb_obj_equal(r5 + 8 | 0, r6 + 8 | 0) | 0) == 0) {
    _mrb_false_value1338(r1);
    STACKTOP = r4;
    return;
  }
  if ((HEAP32[r2 + 16 >> 2] | 0) == (HEAP32[r3 + 16 >> 2] | 0)) {
    _mrb_true_value1337(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_false_value1338(r1);
    STACKTOP = r4;
    return;
  }
}
_mrb_range_eq["X"] = 1;
function _mrb_range_include(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 16;
  r8 = HEAP32[r3 >> 2];
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r3 = r8 + 12 | 0;
  r9 = HEAP32[r3 >> 2];
  r10 = r6;
  r11 = HEAP32[r9 + 4 >> 2];
  HEAP32[r10 >> 2] = HEAP32[r9 >> 2];
  HEAP32[r10 + 4 >> 2] = r11;
  r11 = HEAP32[r3 >> 2] + 8 | 0;
  r3 = r7;
  r10 = HEAP32[r11 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r11 >> 2];
  HEAP32[r3 + 4 >> 2] = r10;
  do {
    if ((_r_le(r2, r6, r5) | 0) != 0) {
      if ((HEAP32[r8 + 16 >> 2] | 0) == 0) {
        if ((_r_ge(r2, r7, r5) | 0) == 0) {
          break;
        }
        _mrb_true_value1337(r1);
        STACKTOP = r4;
        return;
      } else {
        if ((_r_gt(r2, r7, r5) | 0) == 0) {
          break;
        }
        _mrb_true_value1337(r1);
        STACKTOP = r4;
        return;
      }
    }
  } while (0);
  _mrb_false_value1338(r1);
  STACKTOP = r4;
  return;
}
_mrb_range_include["X"] = 1;
function _r_le(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r2, r6 = r5 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 1];
  r5 = r3, r6 = r5 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 1];
  r6 = r4;
  _mrb_funcall(r6, r1, r2, 5314124, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r3 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r3 + 4 >> 2], tempInt));
  do {
    if ((HEAP32[r6 + 4 >> 2] & 255 | 0) == 3) {
      r3 = HEAP32[r6 >> 2];
      if ((r3 | 0) == -1 | (r3 | 0) == 0) {
        r7 = 1;
      } else {
        break;
      }
      STACKTOP = r4;
      return r7;
    }
  } while (0);
  r7 = 0;
  STACKTOP = r4;
  return r7;
}
function _r_gt(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r2, r6 = r5 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 1];
  r5 = r3, r6 = r5 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 1];
  r6 = r4;
  _mrb_funcall(r6, r1, r2, 5314124, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r3 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r3 + 4 >> 2], tempInt));
  do {
    if ((HEAP32[r6 + 4 >> 2] & 255 | 0) == 3) {
      if ((HEAP32[r6 >> 2] | 0) == 1) {
        r7 = 1;
      } else {
        break;
      }
      STACKTOP = r4;
      return r7;
    }
  } while (0);
  r7 = 0;
  STACKTOP = r4;
  return r7;
}
function _r_ge(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r2, r6 = r5 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r6];
  HEAP32[r2 + 4 >> 2] = HEAP32[r6 + 1];
  r5 = r3, r6 = r5 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 1];
  r6 = r4;
  _mrb_funcall(r6, r1, r2, 5314124, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r3 >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[r3 + 4 >> 2], tempInt));
  do {
    if ((HEAP32[r6 + 4 >> 2] & 255 | 0) == 3) {
      if (HEAP32[r6 >> 2] >>> 0 < 2) {
        r7 = 1;
      } else {
        break;
      }
      STACKTOP = r4;
      return r7;
    }
  } while (0);
  r7 = 0;
  STACKTOP = r4;
  return r7;
}
function _range_initialize_copy(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((_mrb_obj_equal(r3, r5) | 0) != 0) {
    r6 = r3;
    r7 = r1;
    r8 = HEAP32[r6 + 4 >> 2];
    HEAP32[r7 >> 2] = HEAP32[r6 >> 2];
    HEAP32[r7 + 4 >> 2] = r8;
    STACKTOP = r4;
    return;
  }
  if ((_mrb_obj_is_instance_of(r2, r5, _mrb_obj_class(r2, r3)) | 0) == 0) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5318284);
  }
  r8 = HEAP32[r5 >> 2];
  r5 = HEAP32[r8 + 12 >> 2];
  _range_init(r2, r3, r5 | 0, r5 + 8 | 0, HEAP32[r8 + 16 >> 2]);
  r8 = r3;
  r3 = r1;
  r1 = HEAP32[r8 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r8 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_init_range(r1) {
  var r2, r3;
  r2 = _mrb_define_class(r1, 5325772, HEAP32[r1 + 72 >> 2]);
  r3 = r2;
  HEAP32[r3 >> 2] = HEAP32[r3 >> 2] & -522241 | 36864;
  _mrb_include_module(r1, r2, _mrb_class_get(r1, 5325048));
  _mrb_define_method(r1, r2, 5326496, 272);
  _mrb_define_method(r1, r2, 5326156, 222);
  _mrb_define_method(r1, r2, 5314464, 442);
  _mrb_define_method(r1, r2, 5325704, 624);
  _mrb_define_method(r1, r2, 5325456, 408);
  _mrb_define_method(r1, r2, 5325264, 372);
  _mrb_define_method(r1, r2, 5324944, 272);
  _mrb_define_method(r1, r2, 5324568, 624);
  _mrb_define_method(r1, r2, 5323508, 60);
  _mrb_define_method(r1, r2, 5323808, 222);
  _mrb_define_method(r1, r2, 5323564, 624);
  _mrb_define_method(r1, r2, 5325416, 304);
  _mrb_define_method(r1, r2, 5325664, 250);
  _mrb_define_method(r1, r2, 5322632, 284);
  _mrb_define_method(r1, r2, 5318996, 346);
  return;
}
function _range_to_s(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 16;
  r8 = HEAP32[r3 >> 2];
  r3 = r8 + 12 | 0;
  _mrb_obj_as_string(r5, r2, HEAP32[r3 >> 2] | 0);
  r9 = r5 >> 2;
  _mrb_obj_as_string(r6, r2, HEAP32[r3 >> 2] + 8 | 0);
  _mrb_str_dup(r7, r2, r5);
  r3 = r7;
  r7 = HEAP32[r3 + 4 >> 2];
  HEAP32[r9] = HEAP32[r3 >> 2];
  HEAP32[r9 + 1] = r7;
  _mrb_str_cat(r4 + 24, r2, r5, 5322036, (HEAP32[r8 + 16 >> 2] | 0) != 0 ? 3 : 2);
  _mrb_str_append(r4 + 32, r2, r5, r6);
  r6 = r1;
  r1 = HEAP32[r9 + 1];
  HEAP32[r6 >> 2] = HEAP32[r9];
  HEAP32[r6 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _range_inspect(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _inspect_range(r1, r2, r3);
  STACKTOP = r4;
  return;
}
function _range_eql(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((_mrb_obj_equal(r3, r5) | 0) != 0) {
    _mrb_true_value1337(r1);
    STACKTOP = r4;
    return;
  }
  if ((_mrb_obj_is_kind_of(r2, r5, _mrb_class_obj_get(r2, 5325772)) | 0) == 0) {
    _mrb_false_value1338(r1);
    STACKTOP = r4;
    return;
  }
  r6 = HEAP32[r3 >> 2];
  if ((HEAP32[r5 + 4 >> 2] & 255 | 0) != 18) {
    _mrb_false_value1338(r1);
    STACKTOP = r4;
    return;
  }
  r3 = HEAP32[r5 >> 2];
  r5 = r6 + 12 | 0;
  r7 = r3 + 12 | 0;
  if ((_mrb_eql(r2, HEAP32[r5 >> 2] | 0, HEAP32[r7 >> 2] | 0) | 0) == 0) {
    _mrb_false_value1338(r1);
    STACKTOP = r4;
    return;
  }
  if ((_mrb_eql(r2, HEAP32[r5 >> 2] + 8 | 0, HEAP32[r7 >> 2] + 8 | 0) | 0) == 0) {
    _mrb_false_value1338(r1);
    STACKTOP = r4;
    return;
  }
  if ((HEAP32[r6 + 16 >> 2] | 0) == (HEAP32[r3 + 16 >> 2] | 0)) {
    _mrb_true_value1337(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_false_value1338(r1);
    STACKTOP = r4;
    return;
  }
}
_range_eql["X"] = 1;
function _inspect_range(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 16;
  r8 = HEAP32[r3 >> 2];
  r3 = r8 + 12 | 0;
  _mrb_inspect(r5, r2, HEAP32[r3 >> 2] | 0);
  r9 = r5 >> 2;
  _mrb_inspect(r6, r2, HEAP32[r3 >> 2] + 8 | 0);
  _mrb_str_dup(r7, r2, r5);
  r3 = r7;
  r7 = HEAP32[r3 + 4 >> 2];
  HEAP32[r9] = HEAP32[r3 >> 2];
  HEAP32[r9 + 1] = r7;
  _mrb_str_cat(r4 + 24, r2, r5, 5322036, (HEAP32[r8 + 16 >> 2] | 0) != 0 ? 3 : 2);
  _mrb_str_append(r4 + 32, r2, r5, r6);
  r6 = r1;
  r1 = HEAP32[r9 + 1];
  HEAP32[r6 >> 2] = HEAP32[r9];
  HEAP32[r6 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_f_sprintf(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r3 = r4 + 4;
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r3, HEAP32[tempInt + 4 >> 2] = r5, tempInt));
  r6 = HEAP32[r5 >> 2];
  if ((r6 | 0) < 1) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5323216);
    _mrb_nil_value1391(r1);
    STACKTOP = r4;
    return;
  } else {
    r5 = HEAP32[r3 >> 2];
    _mrb_str_format(r1, r2, r6 - 1 | 0, r5 + 8 | 0, r5);
    STACKTOP = r4;
    return;
  }
}
function _mrb_str_format(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92, r93, r94, r95, r96, r97, r98, r99, r100, r101, r102, r103, r104, r105, r106, r107, r108, r109, r110, r111, r112, r113, r114, r115, r116, r117, r118, r119, r120, r121, r122, r123, r124, r125, r126, r127, r128, r129, r130, r131, r132, r133, r134, r135, r136, r137, r138, r139, r140, r141, r142, r143, r144, r145, r146, r147, r148, r149, r150, r151, r152, r153, r154, r155, r156, r157, r158, r159, r160, r161, r162, r163, r164, r165, r166, r167, r168, r169, r170, r171, r172, r173, r174, r175, r176, r177, r178, r179, r180, r181, r182, r183, r184, r185, r186, r187, r188, r189, r190, r191, r192, r193, r194, r195, r196, r197, r198, r199, r200, r201, r202, r203, r204, r205, r206, r207, r208, r209, r210, r211, r212, r213, r214, r215, r216, r217, r218, r219, r220, r221, r222, r223, r224, r225, r226, r227, r228, r229, r230, r231, r232, r233, r234, r235, r236, r237, r238, r239, r240, r241, r242, r243, r244, r245, r246, r247, r248, r249, r250, r251, r252, r253, r254, r255, r256, r257, r258, r259, r260, r261, r262, r263, r264, r265, r266, r267, r268, r269, r270, r271, r272, r273, r274, r275, r276, r277, r278, r279, r280, r281, r282, r283, r284, r285, r286, r287, r288, r289, r290;
  r6 = 0;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 676 | 0;
  r8 = r5;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r5 >> 2] = HEAP32[r8 >> 2];
  HEAP32[r5 + 4 >> 2] = HEAP32[r8 + 4 >> 2];
  r8 = r7;
  r9 = r7 + 8;
  r10 = r7 + 24;
  r11 = r7 + 32;
  r12 = r7 + 40;
  r13 = r7 + 48;
  r14 = r7 + 56;
  r15 = r7 + 64;
  r16 = r7 + 72;
  r17 = r7 + 80;
  r18 = r7 + 88;
  r19 = r7 + 96;
  r20 = r7 + 104;
  r21 = r7 + 112;
  r22 = r7 + 120;
  r23 = r7 + 128;
  r24 = r7 + 136;
  r25 = r7 + 144;
  r26 = r7 + 152;
  r27 = r7 + 160;
  r28 = r7 + 168;
  r29 = r7 + 176;
  r30 = r7 + 184;
  r31 = r7 + 192;
  r32 = r7 + 200;
  r33 = r7 + 208;
  r34 = r7 + 216;
  r35 = r7 + 224;
  r36 = r7 + 232;
  r37 = r7 + 240;
  r38 = r7 + 248;
  r39 = r7 + 256;
  r40 = r7 + 264;
  r41 = r7 + 272;
  r42 = r7 + 280;
  r43 = r7 + 288;
  r44 = r7 + 296;
  r45 = r7 + 304;
  r46 = r7 + 312;
  r47 = r7 + 320;
  r48 = r7 + 328;
  r49 = r7 + 336;
  r50 = r7 + 344;
  r51 = r7 + 352;
  r52 = r7 + 360;
  r53 = r7 + 368;
  r54 = r7 + 408;
  r55 = r7 + 472;
  r56 = r7 + 480;
  r57 = r7 + 488;
  r58 = r7 + 496;
  r59 = r7 + 504;
  r60 = r7 + 512;
  r61 = r7 + 520;
  r62 = r7 + 528;
  r63 = r7 + 536;
  r64 = r7 + 544;
  r65 = r7 + 552;
  r66 = r7 + 560;
  r67 = r7 + 568;
  r68 = r7 + 576;
  r69 = r7 + 584;
  r70 = r7 + 592;
  r71 = r7 + 600;
  r72 = r7 + 608;
  r73 = r7 + 644;
  r74 = r7 + 652;
  r75 = r7 + 660;
  r76 = r7 + 668;
  _mrb_undef_value1392(r9);
  r77 = r3 + 1 | 0;
  r3 = r4 - 8 | 0;
  _mrb_string_value(r7 + 16, r2, r5);
  r78 = HEAP32[r5 >> 2];
  r5 = HEAP32[r78 + 20 >> 2];
  r79 = HEAP32[r78 + 12 >> 2];
  r78 = r5 + r79 | 0;
  _mrb_str_buf_new(r10, r2, 120);
  r80 = r10;
  r10 = r8;
  r81 = HEAP32[r80 >> 2];
  r82 = HEAP32[r80 + 4 >> 2];
  HEAP32[r10 >> 2] = r81;
  HEAP32[r10 + 4 >> 2] = r82;
  r82 = r8 >> 2;
  _memset(HEAP32[r81 + 20 >> 2], 0, 120);
  if ((r79 | 0) <= 0) {
    r83 = 0;
    _mrb_str_resize(r76, r2, r8, r83);
    r84 = r1;
    r85 = r10 | 0, r86 = r85 >> 2;
    r87 = HEAP32[r86];
    r88 = r10 + 4 | 0, r89 = r88 >> 2;
    r90 = HEAP32[r89];
    r91 = r84 | 0, r92 = r91 >> 2;
    HEAP32[r92] = r87;
    r93 = r84 + 4 | 0, r94 = r93 >> 2;
    HEAP32[r94] = r90;
    STACKTOP = r7;
    return;
  }
  r79 = r12;
  r81 = r12 + 4 | 0;
  r80 = r18 + 4 | 0;
  r95 = r19 + 4 | 0;
  r96 = r23 + 4 | 0;
  r97 = r24;
  r98 = r25;
  r99 = r26;
  r100 = r27;
  r101 = r30;
  r102 = r28;
  r103 = r29;
  r104 = r31;
  r105 = r32;
  r106 = r33;
  r107 = r34;
  r108 = r37;
  r109 = r35;
  r110 = r36;
  r111 = r13 + 4 | 0;
  r112 = r14 + 4 | 0;
  r113 = r15 + 4 | 0;
  r114 = r16 + 4 | 0;
  r115 = r46;
  r116 = r47;
  r117 = r48;
  r118 = r46;
  r119 = r46 + 4 | 0;
  r120 = r39;
  r121 = r40;
  r122 = r40 + 4 | 0;
  r123 = r39;
  r124 = r39 + 4 | 0;
  r125 = r53;
  r126 = r53 + 4 | 0;
  r127 = r58;
  r128 = r53 | 0;
  r129 = r56;
  r130 = r55;
  r131 = r57;
  r132 = r7 + 376 | 0;
  r133 = r54 + 1 | 0;
  r134 = r54 | 0;
  r54 = r63;
  r135 = r53;
  r136 = r71;
  r137 = r73 | 0;
  r138 = r7 + 612 | 0;
  r139 = r71;
  r140 = r71 + 4 | 0;
  r141 = 0;
  r142 = 1;
  r143 = 120;
  r144 = 0;
  r145 = r5;
  while (1) {
    r5 = r145;
    while (1) {
      if (r5 >>> 0 >= r78 >>> 0) {
        r146 = 0;
        break;
      }
      if (HEAP8[r5] << 24 >> 24 == 37) {
        r146 = 1;
        break;
      } else {
        r5 = r5 + 1 | 0;
      }
    }
    r147 = r5;
    r148 = r145;
    r149 = r147 - r148 | 0;
    r150 = r149 + r144 | 0;
    r151 = r143;
    while (1) {
      if ((r150 | 0) < (r151 | 0)) {
        break;
      } else {
        r151 = r151 << 1;
      }
    }
    _mrb_str_resize(r11, r2, r8, r151);
    _memcpy(HEAP32[HEAP32[r82] + 20 >> 2] + r144 | 0, r145, r149);
    if (!r146) {
      r83 = r150;
      r6 = 1148;
      break;
    }
    _mrb_undef_value1392(r12);
    r152 = r5 + 1 | 0;
    r153 = -1;
    r154 = -1;
    r155 = 0;
    r156 = r142;
    r157 = r141;
    r158 = HEAP32[r81 >> 2];
    r159 = HEAP32[r79 >> 2];
    r160 = 0;
    L930 : while (1) {
      r161 = HEAP8[r152];
      r162 = r161 << 24 >> 24;
      if ((r162 | 0) == 43) {
        if ((r155 & 32 | 0) != 0) {
          _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5318536);
        }
        if ((r155 & 128 | 0) != 0) {
          _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5316524);
        }
        r152 = r152 + 1 | 0;
        r153 = r153;
        r154 = r154;
        r155 = r155 | 4;
        r156 = r156;
        r157 = r157;
        r158 = r158;
        r159 = r159;
        r160 = r160;
        continue;
      } else if ((r162 | 0) == 49 | (r162 | 0) == 50 | (r162 | 0) == 51 | (r162 | 0) == 52 | (r162 | 0) == 53 | (r162 | 0) == 54 | (r162 | 0) == 55 | (r162 | 0) == 56 | (r162 | 0) == 57) {
        L941 : do {
          if (r152 >>> 0 < r78 >>> 0) {
            r163 = 0;
            r164 = r152;
            r165 = r161;
            while (1) {
              if (((r165 & 255) - 48 | 0) >>> 0 >= 10) {
                r166 = r163;
                r167 = r164;
                r168 = r165;
                break L941;
              }
              r169 = (r165 << 24 >> 24) + ((r163 * 10 & -1) - 48) | 0;
              if (((r169 | 0) / 10 & -1 | 0) != (r163 | 0)) {
                _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5315448);
              }
              r170 = r164 + 1 | 0;
              if (r170 >>> 0 >= r78 >>> 0) {
                r171 = r169;
                r172 = r170;
                r6 = 852;
                break L941;
              }
              r163 = r169;
              r164 = r170;
              r165 = HEAP8[r170];
            }
          } else {
            r171 = 0;
            r172 = r152;
            r6 = 852;
          }
        } while (0);
        if (r6 == 852) {
          r6 = 0;
          _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5314952);
          r166 = r171;
          r167 = r172;
          r168 = HEAP8[r172];
        }
        if (r168 << 24 >> 24 != 36) {
          if ((r155 & 32 | 0) != 0) {
            _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5325844);
          }
          if ((r155 & 128 | 0) != 0) {
            _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5325680);
          }
          r152 = r167;
          r153 = r166;
          r154 = r154;
          r155 = r155 | 32;
          r156 = r156;
          r157 = r157;
          r158 = r158;
          r159 = r159;
          r160 = r160;
          continue;
        }
        if ((r158 & 255 | 0) != 5) {
          _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5314492, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r166, tempInt));
        }
        do {
          if ((r157 | 0) > 0) {
            _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5314140, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r166, HEAP32[tempInt + 4 >> 2] = r157, tempInt));
            _mrb_undef_value1392(r13);
            r173 = r157;
            r174 = r111;
            r175 = r13;
          } else {
            if ((r157 | 0) == -2) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5326468, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r166, tempInt));
              _mrb_undef_value1392(r14);
              r173 = -2;
              r174 = r112;
              r175 = r14;
              break;
            }
            if ((r166 | 0) < 1) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5326136, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r166, tempInt));
              _mrb_undef_value1392(r15);
              r173 = r157;
              r174 = r113;
              r175 = r15;
              break;
            }
            if ((r166 | 0) < (r77 | 0)) {
              r165 = r166 - 1 | 0;
              r173 = -1;
              r174 = (r165 << 3) + r4 + 4 | 0;
              r175 = (r165 << 3) + r4 | 0;
              break;
            } else {
              _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5323216);
              _mrb_undef_value1392(r16);
              r173 = -1;
              r174 = r114;
              r175 = r16;
              break;
            }
          }
        } while (0);
        r152 = r167 + 1 | 0;
        r153 = r153;
        r154 = r154;
        r155 = r155;
        r156 = r156;
        r157 = r173;
        r158 = HEAP32[r174 >> 2];
        r159 = HEAP32[r175 >> 2];
        r160 = r160;
        continue;
      } else if ((r162 | 0) == 32) {
        if ((r155 & 32 | 0) != 0) {
          _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5318536);
        }
        if ((r155 & 128 | 0) != 0) {
          _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5316524);
        }
        r152 = r152 + 1 | 0;
        r153 = r153;
        r154 = r154;
        r155 = r155 | 16;
        r156 = r156;
        r157 = r157;
        r158 = r158;
        r159 = r159;
        r160 = r160;
        continue;
      } else if ((r162 | 0) == 35) {
        if ((r155 & 32 | 0) != 0) {
          _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5318536);
        }
        if ((r155 & 128 | 0) != 0) {
          _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5316524);
        }
        r152 = r152 + 1 | 0;
        r153 = r153;
        r154 = r154;
        r155 = r155 | 1;
        r156 = r156;
        r157 = r157;
        r158 = r158;
        r159 = r159;
        r160 = r160;
        continue;
      } else if ((r162 | 0) == 45) {
        if ((r155 & 32 | 0) != 0) {
          _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5318536);
        }
        if ((r155 & 128 | 0) != 0) {
          _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5316524);
        }
        r152 = r152 + 1 | 0;
        r153 = r153;
        r154 = r154;
        r155 = r155 | 2;
        r156 = r156;
        r157 = r157;
        r158 = r158;
        r159 = r159;
        r160 = r160;
        continue;
      } else if ((r162 | 0) == 48) {
        if ((r155 & 32 | 0) != 0) {
          _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5318536);
        }
        if ((r155 & 128 | 0) != 0) {
          _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5316524);
        }
        r152 = r152 + 1 | 0;
        r153 = r153;
        r154 = r154;
        r155 = r155 | 8;
        r156 = r156;
        r157 = r157;
        r158 = r158;
        r159 = r159;
        r160 = r160;
        continue;
      } else if ((r162 | 0) == 60 | (r162 | 0) == 123) {
        r165 = r161 << 24 >> 24 == 60;
        r164 = r165 ? 62 : 125;
        r163 = r152;
        while (1) {
          if (r163 >>> 0 >= r78 >>> 0) {
            break;
          }
          if ((HEAP8[r163] << 24 >> 24 | 0) == (r164 | 0)) {
            break;
          } else {
            r163 = r163 + 1 | 0;
          }
        }
        if (r160 << 16 >> 16 == 0) {
          r176 = r163;
          r177 = r152;
        } else {
          r164 = _mrb_class_obj_get(r2, 5325168);
          r161 = r163;
          r170 = r152;
          r169 = _mrb_sym2name(r2, r160);
          _mrb_raisef(r2, r164, 5325436, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = 1 - r170 + r161 | 0, HEAP32[tempInt + 4 >> 2] = r152, HEAP32[tempInt + 8 >> 2] = r169, tempInt));
          r176 = r161;
          r177 = r170;
        }
        r170 = r176 - r177 | 0;
        _mrb_str_new(r17, r2, r152 + 1 | 0, r170 - 1 | 0);
        r161 = _mrb_intern_str(r2, r17);
        do {
          if ((r157 | 0) > 0) {
            _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5325232, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r170 + 1 | 0, HEAP32[tempInt + 4 >> 2] = r152, HEAP32[tempInt + 8 >> 2] = r157, tempInt));
            _mrb_undef_value1392(r18);
            r178 = r157;
            r179 = r80;
            r180 = r18;
          } else {
            if ((r157 | 0) == -1) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5324916, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r170 + 1 | 0, HEAP32[tempInt + 4 >> 2] = r152, tempInt));
              _mrb_undef_value1392(r19);
              r178 = -1;
              r179 = r95;
              r180 = r19;
              break;
            } else {
              _get_hash(r20, r2, r9, r77, r3);
              _mrb_symbol_value1393(r21, r161);
              _mrb_undef_value1392(r22);
              _mrb_hash_fetch(r23, r20, r21, r22);
              r178 = -2;
              r179 = r96;
              r180 = r23;
              break;
            }
          }
        } while (0);
        r169 = HEAP32[r179 >> 2];
        r164 = HEAP32[r180 >> 2];
        if ((r169 & 255 | 0) == 5) {
          _mrb_raisef(r2, _mrb_class_obj_get(r2, 5324556), 5324164, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r170 + 1 | 0, HEAP32[tempInt + 4 >> 2] = r152, tempInt));
        }
        if (!r165) {
          r181 = r163;
          r182 = r178;
          r183 = r169;
          r184 = r164;
          r6 = 984;
          break;
        }
        r152 = r163 + 1 | 0;
        r153 = r153;
        r154 = r154;
        r155 = r155;
        r156 = r156;
        r157 = r178;
        r158 = r169;
        r159 = r164;
        r160 = r161;
        continue;
      } else if ((r162 | 0) == 42) {
        if ((r155 & 32 | 0) != 0) {
          _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5325844);
        }
        if ((r155 & 128 | 0) != 0) {
          _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5325680);
        }
        r164 = r155 | 32;
        r169 = r152 + 1 | 0;
        L1032 : do {
          if (r169 >>> 0 < r78 >>> 0) {
            r185 = 0;
            r186 = r169;
            while (1) {
              r187 = HEAP8[r186];
              if (((r187 & 255) - 48 | 0) >>> 0 >= 10) {
                r188 = r185;
                r189 = r186;
                r190 = r187;
                break L1032;
              }
              r191 = (r187 << 24 >> 24) + ((r185 * 10 & -1) - 48) | 0;
              if (((r191 | 0) / 10 & -1 | 0) != (r185 | 0)) {
                _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5323796);
              }
              r187 = r186 + 1 | 0;
              if (r187 >>> 0 < r78 >>> 0) {
                r185 = r191;
                r186 = r187;
              } else {
                r192 = r191;
                r193 = r187;
                r6 = 895;
                break L1032;
              }
            }
          } else {
            r192 = 0;
            r193 = r169;
            r6 = 895;
          }
        } while (0);
        if (r6 == 895) {
          r6 = 0;
          _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5314952);
          r188 = r192;
          r189 = r193;
          r190 = HEAP8[r193];
        }
        do {
          if (r190 << 24 >> 24 == 36) {
            if ((r157 | 0) > 0) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5314140, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r188, HEAP32[tempInt + 4 >> 2] = r157, tempInt));
              _mrb_undef_value1392(r24);
              r194 = r189;
              r195 = r156;
              r196 = r157;
              r197 = HEAP32[r97 >> 2];
              break;
            }
            if ((r157 | 0) == -2) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5326468, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r188, tempInt));
              _mrb_undef_value1392(r25);
              r194 = r189;
              r195 = r156;
              r196 = -2;
              r197 = HEAP32[r98 >> 2];
              break;
            }
            if ((r188 | 0) < 1) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5326136, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r188, tempInt));
              _mrb_undef_value1392(r26);
              r194 = r189;
              r195 = r156;
              r196 = r157;
              r197 = HEAP32[r99 >> 2];
              break;
            }
            if ((r188 | 0) < (r77 | 0)) {
              r194 = r189;
              r195 = r156;
              r196 = -1;
              r197 = HEAP32[r4 + (r188 - 1 << 3) >> 2];
              break;
            } else {
              _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5323216);
              _mrb_undef_value1392(r27);
              r194 = r189;
              r195 = r156;
              r196 = -1;
              r197 = HEAP32[r100 >> 2];
              break;
            }
          } else {
            if ((r158 & 255 | 0) != 5) {
              r194 = r152;
              r195 = r156;
              r196 = r157;
              r197 = r159;
              break;
            }
            if ((r157 | 0) == -1) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5323528, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r156, tempInt));
              _mrb_undef_value1392(r28);
              r194 = r152;
              r195 = r156;
              r196 = -1;
              r197 = HEAP32[r102 >> 2];
              break;
            } else if ((r157 | 0) == -2) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5323292, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r156, tempInt));
              _mrb_undef_value1392(r29);
              r194 = r152;
              r195 = r156;
              r196 = -2;
              r197 = HEAP32[r103 >> 2];
              break;
            } else {
              r169 = r156 + 1 | 0;
              if ((r156 | 0) < (r77 | 0)) {
                r194 = r152;
                r195 = r169;
                r196 = r156;
                r197 = HEAP32[r4 + (r156 - 1 << 3) >> 2];
                break;
              } else {
                _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5323216);
                _mrb_undef_value1392(r30);
                r194 = r152;
                r195 = r169;
                r196 = r156;
                r197 = HEAP32[r101 >> 2];
                break;
              }
            }
          }
        } while (0);
        if ((r197 | 0) < 0) {
          r198 = -r197 | 0;
          r199 = r155 | 34;
        } else {
          r198 = r197;
          r199 = r164;
        }
        r152 = r194 + 1 | 0;
        r153 = r198;
        r154 = r154;
        r155 = r199;
        r156 = r195;
        r157 = r196;
        r158 = r158;
        r159 = r159;
        r160 = r160;
        continue;
      } else if ((r162 | 0) == 46) {
        if ((r155 & 128 | 0) != 0) {
          _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5322956);
        }
        r169 = r155 | 192;
        r161 = r152 + 1 | 0;
        r163 = HEAP8[r161];
        if (r163 << 24 >> 24 != 42) {
          L1075 : do {
            if (r161 >>> 0 < r78 >>> 0) {
              r165 = 0;
              r170 = r161;
              r186 = r163;
              while (1) {
                if (((r186 & 255) - 48 | 0) >>> 0 >= 10) {
                  r152 = r170;
                  r153 = r153;
                  r154 = r165;
                  r155 = r169;
                  r156 = r156;
                  r157 = r157;
                  r158 = r158;
                  r159 = r159;
                  r160 = r160;
                  continue L930;
                }
                r185 = (r186 << 24 >> 24) + ((r165 * 10 & -1) - 48) | 0;
                if (((r185 | 0) / 10 & -1 | 0) != (r165 | 0)) {
                  _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5322640);
                }
                r187 = r170 + 1 | 0;
                if (r187 >>> 0 >= r78 >>> 0) {
                  r200 = r185;
                  r201 = r187;
                  break L1075;
                }
                r165 = r185;
                r170 = r187;
                r186 = HEAP8[r187];
              }
            } else {
              r200 = 0;
              r201 = r161;
            }
          } while (0);
          _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5314952);
          r152 = r201;
          r153 = r153;
          r154 = r200;
          r155 = r169;
          r156 = r156;
          r157 = r157;
          r158 = r158;
          r159 = r159;
          r160 = r160;
          continue;
        }
        r163 = r152 + 2 | 0;
        L1085 : do {
          if (r163 >>> 0 < r78 >>> 0) {
            r164 = 0;
            r186 = r163;
            while (1) {
              r170 = HEAP8[r186];
              if (((r170 & 255) - 48 | 0) >>> 0 >= 10) {
                r202 = r164;
                r203 = r186;
                r204 = r170;
                break L1085;
              }
              r165 = (r170 << 24 >> 24) + ((r164 * 10 & -1) - 48) | 0;
              if (((r165 | 0) / 10 & -1 | 0) != (r164 | 0)) {
                _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5323796);
              }
              r170 = r186 + 1 | 0;
              if (r170 >>> 0 < r78 >>> 0) {
                r164 = r165;
                r186 = r170;
              } else {
                r205 = r165;
                r206 = r170;
                r6 = 925;
                break L1085;
              }
            }
          } else {
            r205 = 0;
            r206 = r163;
            r6 = 925;
          }
        } while (0);
        if (r6 == 925) {
          r6 = 0;
          _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5314952);
          r202 = r205;
          r203 = r206;
          r204 = HEAP8[r206];
        }
        do {
          if (r204 << 24 >> 24 == 36) {
            if ((r157 | 0) > 0) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5314140, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r202, HEAP32[tempInt + 4 >> 2] = r157, tempInt));
              _mrb_undef_value1392(r31);
              r207 = r203;
              r208 = r156;
              r209 = r157;
              r210 = HEAP32[r104 >> 2];
              break;
            }
            if ((r157 | 0) == -2) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5326468, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r202, tempInt));
              _mrb_undef_value1392(r32);
              r207 = r203;
              r208 = r156;
              r209 = -2;
              r210 = HEAP32[r105 >> 2];
              break;
            }
            if ((r202 | 0) < 1) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5326136, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r202, tempInt));
              _mrb_undef_value1392(r33);
              r207 = r203;
              r208 = r156;
              r209 = r157;
              r210 = HEAP32[r106 >> 2];
              break;
            }
            if ((r202 | 0) < (r77 | 0)) {
              r207 = r203;
              r208 = r156;
              r209 = -1;
              r210 = HEAP32[r4 + (r202 - 1 << 3) >> 2];
              break;
            } else {
              _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5323216);
              _mrb_undef_value1392(r34);
              r207 = r203;
              r208 = r156;
              r209 = -1;
              r210 = HEAP32[r107 >> 2];
              break;
            }
          } else {
            if ((r158 & 255 | 0) != 5) {
              r207 = r161;
              r208 = r156;
              r209 = r157;
              r210 = r159;
              break;
            }
            if ((r157 | 0) == -1) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5323528, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r156, tempInt));
              _mrb_undef_value1392(r35);
              r207 = r161;
              r208 = r156;
              r209 = -1;
              r210 = HEAP32[r109 >> 2];
              break;
            } else if ((r157 | 0) == -2) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5323292, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r156, tempInt));
              _mrb_undef_value1392(r36);
              r207 = r161;
              r208 = r156;
              r209 = -2;
              r210 = HEAP32[r110 >> 2];
              break;
            } else {
              r163 = r156 + 1 | 0;
              if ((r156 | 0) < (r77 | 0)) {
                r207 = r161;
                r208 = r163;
                r209 = r156;
                r210 = HEAP32[r4 + (r156 - 1 << 3) >> 2];
                break;
              } else {
                _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5323216);
                _mrb_undef_value1392(r37);
                r207 = r161;
                r208 = r163;
                r209 = r156;
                r210 = HEAP32[r108 >> 2];
                break;
              }
            }
          }
        } while (0);
        r152 = r207 + 1 | 0;
        r153 = r153;
        r154 = r210;
        r155 = (r210 | 0) < 0 ? r169 & -65 : r169;
        r156 = r208;
        r157 = r209;
        r158 = r158;
        r159 = r159;
        r160 = r160;
        continue;
      } else if ((r162 | 0) == 10 | (r162 | 0) == 0) {
        r6 = 950;
        break;
      } else if ((r162 | 0) == 37) {
        r211 = r152;
        r6 = 951;
        break;
      } else if ((r162 | 0) == 99) {
        r6 = 956;
        break;
      } else if ((r162 | 0) == 115 | (r162 | 0) == 112) {
        r181 = r152;
        r182 = r157;
        r183 = r158;
        r184 = r159;
        r6 = 984;
        break;
      } else if ((r162 | 0) == 100 | (r162 | 0) == 105 | (r162 | 0) == 111 | (r162 | 0) == 120 | (r162 | 0) == 88 | (r162 | 0) == 98 | (r162 | 0) == 66 | (r162 | 0) == 117) {
        r6 = 1013;
        break;
      } else if ((r162 | 0) == 102 | (r162 | 0) == 103 | (r162 | 0) == 71 | (r162 | 0) == 101 | (r162 | 0) == 69 | (r162 | 0) == 97 | (r162 | 0) == 65) {
        r6 = 1111;
        break;
      } else {
        r6 = 821;
        break;
      }
    }
    L1119 : do {
      if (r6 == 821) {
        r6 = 0;
        _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5320492, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP8[r152] << 24 >> 24, tempInt));
        r212 = r152;
        r213 = r150;
        r214 = r151;
        r215 = r156;
        r216 = r157;
        break;
      } else if (r6 == 950) {
        r6 = 0;
        r211 = r152 - 1 | 0;
        r6 = 951;
        break;
      } else if (r6 == 956) {
        r6 = 0;
        do {
          if ((r158 & 255 | 0) == 5) {
            if ((r157 | 0) == -1) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5323528, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r156, tempInt));
              _mrb_undef_value1392(r39);
              r217 = r156;
              r218 = -1;
              break;
            } else if ((r157 | 0) == -2) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5323292, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r156, tempInt));
              _mrb_undef_value1392(r39);
              r217 = r156;
              r218 = -2;
              break;
            } else {
              r160 = r156 + 1 | 0;
              if ((r156 | 0) < (r77 | 0)) {
                r5 = (r156 - 1 << 3) + r4 | 0;
                r85 = r5 | 0, r86 = r85 >> 2;
                r88 = r5 + 4 | 0, r89 = r88 >> 2;
                r5 = HEAP32[r89];
                r91 = r120 | 0, r92 = r91 >> 2;
                HEAP32[r92] = HEAP32[r86];
                r93 = r120 + 4 | 0, r94 = r93 >> 2;
                HEAP32[r94] = r5;
                r217 = r160;
                r218 = r156;
                break;
              } else {
                _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5323216);
                _mrb_undef_value1392(r39);
                r217 = r160;
                r218 = r156;
                break;
              }
            }
          } else {
            HEAP32[r123 >> 2] = r159;
            HEAP32[r124 >> 2] = r158;
            r217 = r156;
            r218 = r157;
          }
        } while (0);
        _mrb_check_string_type(r40, r2, r39);
        r162 = HEAP32[r121 >> 2];
        if ((HEAP32[r122 >> 2] & 255 | r162 | 0) == 0) {
          r219 = HEAP32[r123 >> 2];
        } else {
          r169 = r162;
          if ((HEAP32[r169 + 12 >> 2] | 0) != 1) {
            _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5321748);
          }
          r219 = HEAP8[HEAP32[r169 + 20 >> 2]] << 24 >> 24;
        }
        if ((r155 & 32 | 0) == 0) {
          r169 = r150 + 1 | 0;
          r162 = r151;
          while (1) {
            if ((r169 | 0) < (r162 | 0)) {
              break;
            } else {
              r162 = r162 << 1;
            }
          }
          _mrb_str_resize(r41, r2, r8, r162);
          HEAP8[HEAP32[HEAP32[r82] + 20 >> 2] + r150 | 0] = r219 & 255;
          r212 = r152;
          r213 = r169;
          r214 = r162;
          r215 = r217;
          r216 = r218;
          break;
        }
        if ((r155 & 2 | 0) == 0) {
          r160 = r153 - 1 | 0;
          r5 = r160 + r150 | 0;
          r149 = r151;
          while (1) {
            if ((r5 | 0) < (r149 | 0)) {
              break;
            } else {
              r149 = r149 << 1;
            }
          }
          _mrb_str_resize(r44, r2, r8, r149);
          _memset(HEAP32[HEAP32[r82] + 20 >> 2] + r150 | 0, 32, r160);
          r162 = r153 + r150 | 0;
          r169 = r149;
          while (1) {
            if ((r162 | 0) < (r169 | 0)) {
              break;
            } else {
              r169 = r169 << 1;
            }
          }
          _mrb_str_resize(r45, r2, r8, r169);
          HEAP8[HEAP32[HEAP32[r82] + 20 >> 2] + r5 | 0] = r219 & 255;
          r212 = r152;
          r213 = r162;
          r214 = r169;
          r215 = r217;
          r216 = r218;
          break;
        } else {
          r149 = r150 + 1 | 0;
          r160 = r151;
          while (1) {
            if ((r149 | 0) < (r160 | 0)) {
              break;
            } else {
              r160 = r160 << 1;
            }
          }
          _mrb_str_resize(r42, r2, r8, r160);
          HEAP8[HEAP32[HEAP32[r82] + 20 >> 2] + r150 | 0] = r219 & 255;
          r169 = r153 + r150 | 0;
          r162 = r160;
          while (1) {
            if ((r169 | 0) < (r162 | 0)) {
              break;
            } else {
              r162 = r162 << 1;
            }
          }
          _mrb_str_resize(r43, r2, r8, r162);
          _memset(HEAP32[HEAP32[r82] + 20 >> 2] + r149 | 0, 32, r153 - 1 | 0);
          r212 = r152;
          r213 = r169;
          r214 = r162;
          r215 = r217;
          r216 = r218;
          break;
        }
      } else if (r6 == 984) {
        r6 = 0;
        do {
          if ((r183 & 255 | 0) == 5) {
            if ((r182 | 0) == -1) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5323528, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r156, tempInt));
              _mrb_undef_value1392(r46);
              r220 = r156;
              r221 = -1;
              break;
            } else if ((r182 | 0) == -2) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5323292, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r156, tempInt));
              _mrb_undef_value1392(r46);
              r220 = r156;
              r221 = -2;
              break;
            } else {
              r160 = r156 + 1 | 0;
              if ((r156 | 0) < (r77 | 0)) {
                r5 = (r156 - 1 << 3) + r4 | 0;
                r85 = r5 | 0, r86 = r85 >> 2;
                r88 = r5 + 4 | 0, r89 = r88 >> 2;
                r5 = HEAP32[r89];
                r91 = r115 | 0, r92 = r91 >> 2;
                HEAP32[r92] = HEAP32[r86];
                r93 = r115 + 4 | 0, r94 = r93 >> 2;
                HEAP32[r94] = r5;
                r220 = r160;
                r221 = r156;
                break;
              } else {
                _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5323216);
                _mrb_undef_value1392(r46);
                r220 = r160;
                r221 = r156;
                break;
              }
            }
          } else {
            HEAP32[r118 >> 2] = r184;
            HEAP32[r119 >> 2] = r183;
            r220 = r156;
            r221 = r182;
          }
        } while (0);
        if (HEAP8[r181] << 24 >> 24 == 112) {
          _mrb_inspect(r47, r2, r46);
          r222 = r116 | 0, r223 = r222 >> 2;
          r224 = r116 + 4 | 0, r225 = r224 >> 2;
          r162 = HEAP32[r225];
          r226 = r115 | 0, r227 = r226 >> 2;
          HEAP32[r227] = HEAP32[r223];
          r228 = r115 + 4 | 0, r229 = r228 >> 2;
          HEAP32[r229] = r162;
        }
        _mrb_obj_as_string(r48, r2, r46);
        r162 = HEAP32[r117 >> 2];
        r169 = r162 + 12 | 0;
        r149 = HEAP32[r169 >> 2];
        HEAP32[HEAP32[r82] + 12 >> 2] = r150;
        do {
          if ((r155 & 96 | 0) == 0) {
            r230 = r149;
          } else {
            r160 = HEAP32[r169 >> 2];
            if ((r160 | 0) < 0) {
              _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5321236);
            }
            r5 = (r155 & 64 | 0) != 0 & (r154 | 0) < (r160 | 0);
            r161 = r5 ? r154 : r149;
            r163 = r5 ? r154 : r160;
            if (!((r155 & 32 | 0) != 0 & (r153 | 0) > (r163 | 0))) {
              r230 = r161;
              break;
            }
            r160 = r153 - r163 | 0;
            r5 = (r155 & 2 | 0) != 0;
            do {
              if (r5) {
                r231 = r150;
                r232 = r151;
                r233 = r160;
              } else {
                r186 = r160 + r150 | 0;
                r164 = r151;
                while (1) {
                  if ((r186 | 0) < (r164 | 0)) {
                    break;
                  } else {
                    r164 = r164 << 1;
                  }
                }
                _mrb_str_resize(r49, r2, r8, r164);
                if ((r153 | 0) == (r163 | 0)) {
                  r231 = r150;
                  r232 = r164;
                  r233 = r160 - 1 | 0;
                  break;
                }
                _memset(HEAP32[HEAP32[r82] + 20 >> 2] + (r144 + r147 - r148) | 0, 32, r160);
                r231 = r153 + r144 + r147 - r163 - r148 | 0;
                r232 = r164;
                r233 = -1;
              }
            } while (0);
            r163 = r231 + r161 | 0;
            r160 = r232;
            while (1) {
              if ((r163 | 0) < (r160 | 0)) {
                break;
              } else {
                r160 = r160 << 1;
              }
            }
            _mrb_str_resize(r50, r2, r8, r160);
            _memcpy(HEAP32[HEAP32[r82] + 20 >> 2] + r231 | 0, HEAP32[r162 + 20 >> 2], r161);
            if (!r5) {
              r212 = r181;
              r213 = r163;
              r214 = r160;
              r215 = r220;
              r216 = r221;
              break L1119;
            }
            r186 = r163 + r233 | 0;
            r170 = r160;
            while (1) {
              if ((r186 | 0) < (r170 | 0)) {
                break;
              } else {
                r170 = r170 << 1;
              }
            }
            _mrb_str_resize(r51, r2, r8, r170);
            if ((r233 | 0) == 0) {
              r212 = r181;
              r213 = r163;
              r214 = r170;
              r215 = r220;
              r216 = r221;
              break L1119;
            }
            _memset(HEAP32[HEAP32[r82] + 20 >> 2] + r163 | 0, 32, r233);
            r212 = r181;
            r213 = r161 + r233 + r231 | 0;
            r214 = r170;
            r215 = r220;
            r216 = r221;
            break L1119;
          }
        } while (0);
        r149 = r230 + r150 | 0;
        r169 = r151;
        while (1) {
          if ((r149 | 0) < (r169 | 0)) {
            break;
          } else {
            r169 = r169 << 1;
          }
        }
        _mrb_str_resize(r52, r2, r8, r169);
        _memcpy(HEAP32[HEAP32[r82] + 20 >> 2] + r150 | 0, HEAP32[r162 + 20 >> 2], r230);
        r212 = r181;
        r213 = r149;
        r214 = r169;
        r215 = r220;
        r216 = r221;
        break;
      } else if (r6 == 1013) {
        r6 = 0;
        do {
          if ((r158 & 255 | 0) == 5) {
            if ((r157 | 0) == -1) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5323528, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r156, tempInt));
              _mrb_undef_value1392(r53);
              r234 = r156;
              r235 = -1;
              break;
            } else if ((r157 | 0) == -2) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5323292, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r156, tempInt));
              _mrb_undef_value1392(r53);
              r234 = r156;
              r235 = -2;
              break;
            } else {
              r186 = r156 + 1 | 0;
              if ((r156 | 0) < (r77 | 0)) {
                r160 = (r156 - 1 << 3) + r4 | 0;
                r85 = r160 | 0, r86 = r85 >> 2;
                r88 = r160 + 4 | 0, r89 = r88 >> 2;
                r160 = HEAP32[r89];
                r91 = r125 | 0, r92 = r91 >> 2;
                HEAP32[r92] = HEAP32[r86];
                r93 = r125 + 4 | 0, r94 = r93 >> 2;
                HEAP32[r94] = r160;
                r234 = r186;
                r235 = r156;
                break;
              } else {
                _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5323216);
                _mrb_undef_value1392(r53);
                r234 = r186;
                r235 = r156;
                break;
              }
            }
          } else {
            HEAP32[r135 >> 2] = r159;
            HEAP32[r126 >> 2] = r158;
            r234 = r156;
            r235 = r157;
          }
        } while (0);
        r169 = HEAP8[r152] << 24 >> 24;
        if ((r169 | 0) == 100 | (r169 | 0) == 105 | (r169 | 0) == 117) {
          r236 = 1;
        } else if ((r169 | 0) == 111 | (r169 | 0) == 120 | (r169 | 0) == 88 | (r169 | 0) == 98 | (r169 | 0) == 66) {
          r236 = (r155 & 20 | 0) != 0 & 1;
        } else {
          r236 = 0;
        }
        do {
          if ((r155 & 1 | 0) == 0) {
            r237 = 0;
          } else {
            if ((r169 | 0) == 111) {
              r237 = 5321016;
              break;
            } else if ((r169 | 0) == 120) {
              r237 = 5320776;
              break;
            } else if ((r169 | 0) == 88) {
              r237 = 5320576;
              break;
            } else if ((r169 | 0) == 98) {
              r237 = 5320332;
              break;
            } else if ((r169 | 0) == 66) {
              r237 = 5320152;
              break;
            } else {
              r237 = 0;
              break;
            }
          }
        } while (0);
        r169 = HEAP32[r126 >> 2];
        while (1) {
          r149 = r169 & 255;
          if ((r149 | 0) == 6) {
            r162 = HEAPF32[r128 >> 2];
            if (r162 > 2147483648 | r162 < -2147483648) {
              _mrb_flt2big(r56, r2, r162);
              r222 = r129 | 0, r223 = r222 >> 2;
              r224 = r129 + 4 | 0, r225 = r224 >> 2;
              r186 = HEAP32[r225];
              r226 = r125 | 0, r227 = r226 >> 2;
              HEAP32[r227] = HEAP32[r223];
              r228 = r125 + 4 | 0, r229 = r228 >> 2;
              HEAP32[r229] = r186;
              r160 = r186;
              if ((r160 & 255 | 0) == 3) {
                r169 = r160;
                continue;
              } else {
                r238 = 0;
                break;
              }
            } else {
              _mrb_fixnum_value1394(r55, r162 & -1);
              r162 = HEAP32[r130 + 4 >> 2];
              HEAP32[r125 >> 2] = HEAP32[r130 >> 2];
              HEAP32[r125 + 4 >> 2] = r162;
              r169 = r162;
              continue;
            }
          } else if ((r149 | 0) == 17) {
            _mrb_str_to_inum(r57, r2, r53, 0, 1);
            r222 = r131 | 0, r223 = r222 >> 2;
            r224 = r131 + 4 | 0, r225 = r224 >> 2;
            r162 = HEAP32[r225];
            r226 = r125 | 0, r227 = r226 >> 2;
            HEAP32[r227] = HEAP32[r223];
            r228 = r125 + 4 | 0, r229 = r228 >> 2;
            HEAP32[r229] = r162;
            r169 = r162;
            continue;
          } else if ((r149 | 0) == 3) {
            r6 = 1037;
            break;
          } else {
            _mrb_Integer(r58, r2, r53);
            r222 = r127 | 0, r223 = r222 >> 2;
            r224 = r127 + 4 | 0, r225 = r224 >> 2;
            r149 = HEAP32[r225];
            r226 = r125 | 0, r227 = r226 >> 2;
            HEAP32[r227] = HEAP32[r223];
            r228 = r125 + 4 | 0, r229 = r228 >> 2;
            HEAP32[r229] = r149;
            r169 = r149;
            continue;
          }
        }
        if (r6 == 1037) {
          r6 = 0;
          r238 = HEAP32[r135 >> 2];
        }
        r169 = HEAP8[r152];
        r149 = r169 << 24 >> 24;
        if ((r149 | 0) == 120 | (r149 | 0) == 88) {
          r239 = 0;
          r240 = r238;
          r241 = 0;
          r242 = 16;
          r243 = 0;
          r244 = r169;
        } else if ((r149 | 0) == 98 | (r149 | 0) == 66) {
          if ((r238 | 0) < 0 & (r236 | 0) == 0) {
            _mrb_fixnum_value1394(r59, r238);
            _mrb_fix2binstr(r60, r2, r59);
            r245 = 1;
            r246 = r60;
          } else {
            _mrb_fixnum_value1394(r61, r238);
            _mrb_fix2str(r62, r2, r61, 2);
            r245 = 0;
            r246 = r62;
          }
          r162 = r246;
          r85 = r162 | 0, r86 = r85 >> 2;
          r88 = r162 + 4 | 0, r89 = r88 >> 2;
          r162 = HEAP32[r89];
          r91 = r125 | 0, r92 = r91 >> 2;
          HEAP32[r92] = HEAP32[r86];
          r93 = r125 + 4 | 0, r94 = r93 >> 2;
          HEAP32[r94] = r162;
          _mrb_str_to_inum(r63, r2, r53, 10, 0);
          r239 = r238;
          r240 = HEAP32[r54 >> 2];
          r241 = r245;
          r242 = 2;
          r243 = 1;
          r244 = HEAP8[r152];
        } else if ((r149 | 0) == 111) {
          r239 = 0;
          r240 = r238;
          r241 = 0;
          r242 = 8;
          r243 = 0;
          r244 = r169;
        } else {
          r239 = 0;
          r240 = r238;
          r241 = 0;
          r242 = 10;
          r243 = 0;
          r244 = r169;
        }
        do {
          if ((r236 | 0) == 0) {
            r169 = (r240 | 0) < 0;
            r149 = r169 ? 1 : r241;
            _snprintf(r132, 32, 5319968, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r243 ? 100 : r244 << 24 >> 24 == 88 ? 120 : r244 << 24 >> 24, tempInt));
            _snprintf(r133, 63, r132, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r240, tempInt));
            if (!r169) {
              r247 = r240;
              r248 = 0;
              r249 = r149;
              r250 = r133;
              r251 = r153;
              break;
            }
            r169 = _remove_sign_bits(r133, r242);
            if ((r242 | 0) == 8) {
              r252 = 55;
            } else if ((r242 | 0) == 2) {
              r252 = 49;
            } else if ((r242 | 0) == 16) {
              r252 = 102;
            } else {
              r247 = r240;
              r248 = 0;
              r249 = r149;
              r250 = r169;
              r251 = r153;
              break;
            }
            if ((HEAP8[r169] << 24 >> 24 | 0) == (r252 & 255 | 0)) {
              r247 = r240;
              r248 = 0;
              r249 = r149;
              r250 = r169;
              r251 = r153;
              break;
            }
            r162 = r169 - 1 | 0;
            HEAP8[r162] = r252;
            r247 = r240;
            r248 = 0;
            r249 = r149;
            r250 = r162;
            r251 = r153;
          } else {
            r162 = r244 << 24 >> 24 == 105;
            do {
              if ((r240 | 0) < 0) {
                r253 = -r240 | 0;
                r254 = 45;
                r255 = r153 - 1 | 0;
              } else {
                if ((r155 & 4 | 0) == 0) {
                  r149 = (r155 & 16 | 0) == 0;
                  r253 = r240;
                  r254 = r149 ? 0 : 32;
                  r255 = ((r149 ^ 1) << 31 >> 31) + r153 | 0;
                  break;
                } else {
                  r253 = r240;
                  r254 = 43;
                  r255 = r153 - 1 | 0;
                  break;
                }
              }
            } while (0);
            _snprintf(r132, 32, 5319968, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r243 ? 100 : r162 ? 100 : r244 << 24 >> 24, tempInt));
            _snprintf(r134, 64, r132, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r253, tempInt));
            r247 = r253;
            r248 = r254;
            r249 = r241;
            r250 = r134;
            r251 = r255;
          }
        } while (0);
        r170 = _strlen(r250);
        r161 = (r249 | 0) != 0;
        if (r161) {
          r256 = r251 - 2 | 0;
          r257 = r154 - 2 | 0;
        } else {
          r256 = r251;
          r257 = r154;
        }
        L1268 : do {
          if (HEAP8[r152] << 24 >> 24 == 88) {
            r163 = HEAP8[r250];
            if (r163 << 24 >> 24 == 0) {
              break;
            } else {
              r258 = r250;
              r259 = r163;
            }
            while (1) {
              HEAP8[r258] = _toupper(r259 & 255) & 255;
              r163 = r258 + 1 | 0;
              r149 = HEAP8[r163];
              if (r149 << 24 >> 24 == 0) {
                break L1268;
              } else {
                r258 = r163;
                r259 = r149;
              }
            }
          }
        } while (0);
        L1273 : do {
          if ((r237 | 0) == 0) {
            r6 = 1071;
          } else {
            if (HEAP8[r237 + 1 | 0] << 24 >> 24 != 0) {
              r6 = 1071;
              break;
            }
            if (r161) {
              r260 = r256;
              r261 = r257;
              r262 = 0;
              r263 = r170;
              r264 = 0;
              break;
            }
            do {
              if ((r170 | 0) == 1) {
                if (HEAP8[r250] << 24 >> 24 != 48) {
                  break;
                }
                r265 = 0;
                r266 = r237;
                r267 = (r155 << 25 >> 31) + r257 | 0;
                r6 = 1073;
                break L1273;
              }
            } while (0);
            r265 = r170;
            r266 = (r155 & 64 | 0) != 0 & (r257 | 0) > (r170 | 0) ? 0 : r237;
            r267 = r257;
            r6 = 1073;
            break;
          }
        } while (0);
        do {
          if (r6 == 1071) {
            r6 = 0;
            if ((r170 | 0) != 1) {
              r265 = r170;
              r266 = r237;
              r267 = r257;
              r6 = 1073;
              break;
            }
            r265 = 1;
            r266 = HEAP8[r250] << 24 >> 24 == 48 ? 0 : r237;
            r267 = r257;
            r6 = 1073;
            break;
          }
        } while (0);
        do {
          if (r6 == 1073) {
            r6 = 0;
            if ((r266 | 0) == 0) {
              r260 = r256;
              r261 = r267;
              r262 = 0;
              r263 = r265;
              r264 = 0;
              break;
            }
            r260 = r256 - _strlen(r266) | 0;
            r261 = r267;
            r262 = r266;
            r263 = r265;
            r264 = 1;
          }
        } while (0);
        if ((r155 & 74 | 0) == 8) {
          r268 = r263;
          r269 = 0;
          r270 = r260;
        } else {
          do {
            if ((r261 | 0) < (r263 | 0)) {
              if (!((r261 | 0) == 0 & (r264 ^ 1) & (r263 | 0) == 1)) {
                r271 = r263;
                r272 = r263;
                break;
              }
              r170 = HEAP8[r250] << 24 >> 24 != 48 & 1;
              r271 = r170;
              r272 = r170;
            } else {
              r271 = r263;
              r272 = r261;
            }
          } while (0);
          r268 = r271;
          r269 = r260 - r272 | 0;
          r270 = r272;
        }
        do {
          if ((r155 & 2 | 0) == 0) {
            r170 = r269 + r150 | 0;
            r162 = r151;
            while (1) {
              if ((r170 | 0) < (r162 | 0)) {
                break;
              } else {
                r162 = r162 << 1;
              }
            }
            _mrb_str_resize(r64, r2, r8, r162);
            if ((r269 | 0) <= 0) {
              r273 = r150;
              r274 = r162;
              r275 = r269 - 1 | 0;
              break;
            }
            _memset(HEAP32[HEAP32[r82] + 20 >> 2] + (r144 + r147 - r148) | 0, 32, r269);
            r273 = r269 + r144 + r147 - r148 | 0;
            r274 = r162;
            r275 = -1;
          } else {
            r273 = r150;
            r274 = r151;
            r275 = r269;
          }
        } while (0);
        if (r248 << 24 >> 24 == 0) {
          r276 = r273;
          r277 = r274;
        } else {
          r170 = r273 + 1 | 0;
          r149 = r274;
          while (1) {
            if ((r170 | 0) < (r149 | 0)) {
              break;
            } else {
              r149 = r149 << 1;
            }
          }
          _mrb_str_resize(r65, r2, r8, r149);
          HEAP8[HEAP32[HEAP32[r82] + 20 >> 2] + r273 | 0] = r248;
          r276 = r170;
          r277 = r149;
        }
        if (r264) {
          r163 = _strlen(r262);
          r169 = r163 + r276 | 0;
          r160 = r277;
          while (1) {
            if ((r169 | 0) < (r160 | 0)) {
              break;
            } else {
              r160 = r160 << 1;
            }
          }
          _mrb_str_resize(r66, r2, r8, r160);
          _memcpy(HEAP32[HEAP32[r82] + 20 >> 2] + r276 | 0, r262, r163);
          r278 = r169;
          r279 = r160;
        } else {
          r278 = r276;
          r279 = r277;
        }
        r149 = r270 - r268 | 0;
        r170 = r149 + r278 | 0;
        r186 = r279;
        while (1) {
          if ((r170 | 0) < (r186 | 0)) {
            break;
          } else {
            r186 = r186 << 1;
          }
        }
        _mrb_str_resize(r67, r2, r8, r186);
        r170 = HEAP32[HEAP32[r82] + 20 >> 2];
        if (r161) {
          r160 = r278 + 2 | 0;
          r169 = r186;
          while (1) {
            if ((r160 | 0) < (r169 | 0)) {
              break;
            } else {
              r169 = r169 << 1;
            }
          }
          _mrb_str_resize(r68, r2, r8, r169);
          r161 = HEAP32[HEAP32[r82] + 20 >> 2];
          r163 = r161 + r278 | 0;
          tempBigInt = 11822;
          HEAP8[r163] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r163 + 1] = tempBigInt & 255;
          r280 = r161;
          r281 = r160;
          r282 = r169;
        } else {
          r280 = r170;
          r281 = r278;
          r282 = r186;
        }
        do {
          if ((r247 | 0) < 0) {
            r6 = 1101;
          } else {
            if (r243 & (r239 | 0) < 0) {
              r6 = 1101;
              break;
            }
            if (!((r155 & 66 | 0) != 2 & (r268 | 0) < (r270 | 0))) {
              r283 = r281;
              break;
            }
            _memset(r280 + r281 | 0, 48, r149);
            r283 = r270 + r281 - r268 | 0;
            break;
          }
        } while (0);
        do {
          if (r6 == 1101) {
            r6 = 0;
            if ((r268 | 0) >= (r270 | 0)) {
              r283 = r281;
              break;
            }
            _memset(r280 + r281 | 0, _sign_bits(r242, r152), r149);
            r283 = r270 + r281 - r268 | 0;
          }
        } while (0);
        r149 = r283 + r268 | 0;
        r186 = r282;
        while (1) {
          if ((r149 | 0) < (r186 | 0)) {
            break;
          } else {
            r186 = r186 << 1;
          }
        }
        _mrb_str_resize(r69, r2, r8, r186);
        _memcpy(HEAP32[HEAP32[r82] + 20 >> 2] + r283 | 0, r250, r268);
        r170 = r149 + r275 | 0;
        r169 = r186;
        while (1) {
          if ((r170 | 0) < (r169 | 0)) {
            break;
          } else {
            r169 = r169 << 1;
          }
        }
        _mrb_str_resize(r70, r2, r8, r169);
        if ((r275 | 0) <= 0) {
          r212 = r152;
          r213 = r149;
          r214 = r169;
          r215 = r234;
          r216 = r235;
          break;
        }
        _memset(HEAP32[HEAP32[r82] + 20 >> 2] + r149 | 0, 32, r275);
        r212 = r152;
        r213 = r283 + r275 + r268 | 0;
        r214 = r169;
        r215 = r234;
        r216 = r235;
        break;
      } else if (r6 == 1111) {
        r6 = 0;
        do {
          if ((r158 & 255 | 0) == 5) {
            if ((r157 | 0) == -1) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5323528, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r156, tempInt));
              _mrb_undef_value1392(r71);
              r284 = r156;
              r285 = -1;
              break;
            } else if ((r157 | 0) == -2) {
              _mrb_raisef(r2, _mrb_class_obj_get(r2, 5325168), 5323292, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r156, tempInt));
              _mrb_undef_value1392(r71);
              r284 = r156;
              r285 = -2;
              break;
            } else {
              r170 = r156 + 1 | 0;
              if ((r156 | 0) < (r77 | 0)) {
                r186 = (r156 - 1 << 3) + r4 | 0;
                r85 = r186 | 0, r86 = r85 >> 2;
                r88 = r186 + 4 | 0, r89 = r88 >> 2;
                r186 = HEAP32[r89];
                r91 = r136 | 0, r92 = r91 >> 2;
                HEAP32[r92] = HEAP32[r86];
                r93 = r136 + 4 | 0, r94 = r93 >> 2;
                HEAP32[r94] = r186;
                r284 = r170;
                r285 = r156;
                break;
              } else {
                _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5323216);
                _mrb_undef_value1392(r71);
                r284 = r170;
                r285 = r156;
                break;
              }
            }
          } else {
            HEAP32[r139 >> 2] = r159;
            HEAP32[r140 >> 2] = r158;
            r284 = r156;
            r285 = r157;
          }
        } while (0);
        _mrb_Float(r73, r2, r71);
        r169 = HEAPF32[r137 >> 2];
        r149 = r169;
        do {
          if ((___fpclassifyf(r149) | 0) != 0) {
            if ((___fpclassifyf(r149) | 0) == 1) {
              break;
            }
            _fmt_setup(r138, HEAP8[r152] << 24 >> 24, r155, r153, r154);
            r170 = HEAP8[r152];
            do {
              if (r170 << 24 >> 24 == 101 | r170 << 24 >> 24 == 69) {
                r286 = 0;
              } else {
                HEAP32[r72 >> 2] = -2147483648;
                _frexp(r149, r72);
                r186 = HEAP32[r72 >> 2];
                if ((r186 | 0) <= 0) {
                  r286 = 0;
                  break;
                }
                r286 = ((r186 * 146 & -1 | 0) / 485 & -1) + 1 | 0;
              }
            } while (0);
            r170 = r286 + ((r155 & 64 | 0) != 0 ? r154 : 6) | 0;
            r162 = ((r155 & 32 | 0) != 0 & (r170 | 0) < (r153 | 0) ? r153 : r170) + 20 | 0;
            r170 = r162 + r150 | 0;
            r186 = r151;
            while (1) {
              if ((r170 | 0) < (r186 | 0)) {
                break;
              } else {
                r186 = r186 << 1;
              }
            }
            _mrb_str_resize(r75, r2, r8, r186);
            r212 = r152;
            r213 = _snprintf(HEAP32[HEAP32[r82] + 20 >> 2] + r150 | 0, r162, r138, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAPF64[tempDoublePtr >> 3] = r149, HEAP32[tempInt >> 2] = HEAP32[tempDoublePtr >> 2], HEAP32[tempInt + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2], tempInt)) + r150 | 0;
            r214 = r186;
            r215 = r284;
            r216 = r285;
            break L1119;
          }
        } while (0);
        r170 = (___fpclassifyf(r149) | 0) == 0 ? 5319716 : 5319388;
        r160 = r169 < 0;
        do {
          if ((___fpclassifyf(r149) | 0) != 0 & r160) {
            r6 = 1123;
          } else {
            if ((r155 & 4 | 0) == 0) {
              r287 = 3;
              break;
            } else {
              r6 = 1123;
              break;
            }
          }
        } while (0);
        if (r6 == 1123) {
          r6 = 0;
          r287 = 4;
        }
        r169 = (r155 & 32 | 0) != 0 & (r287 | 0) < (r153 | 0) ? r153 : r287;
        r161 = r169 + 1 | 0;
        r163 = r161 + r150 | 0;
        r5 = r151;
        while (1) {
          if ((r163 | 0) < (r5 | 0)) {
            break;
          } else {
            r5 = r5 << 1;
          }
        }
        _mrb_str_resize(r74, r2, r8, r5);
        r163 = HEAP32[HEAP32[r82] + 20 >> 2];
        r165 = r163 + r150 | 0;
        _snprintf(r165, r161, 5319268, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r169, HEAP32[tempInt + 4 >> 2] = 5316620, tempInt));
        r187 = (___fpclassifyf(r149) | 0) != 0 & r160;
        if ((r155 & 2 | 0) == 0) {
          do {
            if (r187) {
              HEAP8[r163 + (r150 - 4) + r169 | 0] = 45;
              r288 = r150;
            } else {
              if ((r155 & 4 | 0) == 0) {
                r288 = ((r155 & 16 | 0) != 0 & (r169 | 0) > (r153 | 0) & 1) + r150 | 0;
                break;
              } else {
                HEAP8[r163 + (r150 - 4) + r169 | 0] = 43;
                r288 = r150;
                break;
              }
            }
          } while (0);
          r160 = r163 + (r169 - 3) + r288 | 0;
          HEAP8[r160] = HEAP8[r170];
          HEAP8[r160 + 1] = HEAP8[r170 + 1];
          HEAP8[r160 + 2] = HEAP8[r170 + 2];
          r289 = r288;
        } else {
          do {
            if (r187) {
              HEAP8[r165] = 45;
              r290 = r150 + 1 | 0;
            } else {
              if ((r155 & 4 | 0) == 0) {
                r290 = (r155 >>> 4 & 1) + r150 | 0;
                break;
              } else {
                HEAP8[r165] = 43;
                r290 = r150 + 1 | 0;
                break;
              }
            }
          } while (0);
          r165 = r163 + r290 | 0;
          HEAP8[r165] = HEAP8[r170];
          HEAP8[r165 + 1] = HEAP8[r170 + 1];
          HEAP8[r165 + 2] = HEAP8[r170 + 2];
          r289 = r290;
        }
        r212 = r152;
        r213 = _strlen(r163 + r289 | 0) + r289 | 0;
        r214 = r5;
        r215 = r284;
        r216 = r285;
        break;
      }
    } while (0);
    if (r6 == 951) {
      r6 = 0;
      if ((r155 | 0) != 0) {
        _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5322324);
      }
      r152 = r150 + 1 | 0;
      r153 = r151;
      while (1) {
        if ((r152 | 0) < (r153 | 0)) {
          break;
        } else {
          r153 = r153 << 1;
        }
      }
      _mrb_str_resize(r38, r2, r8, r153);
      HEAP8[HEAP32[HEAP32[r82] + 20 >> 2] + r150 | 0] = 37;
      r212 = r211;
      r213 = r152;
      r214 = r153;
      r215 = r156;
      r216 = r157;
    }
    r151 = r212 + 1 | 0;
    if (r151 >>> 0 < r78 >>> 0) {
      r141 = r216;
      r142 = r215;
      r143 = r214;
      r144 = r213;
      r145 = r151;
    } else {
      r83 = r213;
      r6 = 1150;
      break;
    }
  }
  if (r6 == 1148) {
    _mrb_str_resize(r76, r2, r8, r83);
    r84 = r1;
    r85 = r10 | 0, r86 = r85 >> 2;
    r87 = HEAP32[r86];
    r88 = r10 + 4 | 0, r89 = r88 >> 2;
    r90 = HEAP32[r89];
    r91 = r84 | 0, r92 = r91 >> 2;
    HEAP32[r92] = r87;
    r93 = r84 + 4 | 0, r94 = r93 >> 2;
    HEAP32[r94] = r90;
    STACKTOP = r7;
    return;
  } else if (r6 == 1150) {
    _mrb_str_resize(r76, r2, r8, r83);
    r84 = r1;
    r85 = r10 | 0, r86 = r85 >> 2;
    r87 = HEAP32[r86];
    r88 = r10 + 4 | 0, r89 = r88 >> 2;
    r90 = HEAP32[r89];
    r91 = r84 | 0, r92 = r91 >> 2;
    HEAP32[r92] = r87;
    r93 = r84 + 4 | 0, r94 = r93 >> 2;
    HEAP32[r94] = r90;
    STACKTOP = r7;
    return;
  }
}
_mrb_str_format["X"] = 1;
function _sign_bits(r1, r2) {
  var r3;
  if ((r1 | 0) == 16) {
    r3 = HEAP8[r2] << 24 >> 24 == 88 ? 70 : 102;
  } else if ((r1 | 0) == 2) {
    r3 = 49;
  } else if ((r1 | 0) == 8) {
    r3 = 55;
  } else {
    r3 = 46;
  }
  return r3;
}
function _mrb_is_local_id(r1) {
  return r1 << 16 >> 16;
}
function _mrb_is_const_id(r1) {
  return r1 << 16 >> 16;
}
function _mrb_undef_value1392(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 5;
  return;
}
function _mrb_symbol_value1393(r1, r2) {
  HEAP16[r1 >> 1] = r2;
  HEAP32[r1 + 4 >> 2] = 4;
  return;
}
function _mrb_fixnum_value1394(r1, r2) {
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 3;
  return;
}
function _mrb_obj_value1436(r1, r2) {
  var r3;
  r3 = HEAP32[r2 >> 2] & 255;
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = r3;
  return;
}
function _mrb_symbol_value1437(r1, r2) {
  HEAP16[r1 >> 1] = r2;
  HEAP32[r1 + 4 >> 2] = 4;
  return;
}
function _mrb_nil_value1438(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _struct_copy(r1, r2, r3) {
  var r4, r5, r6, r7;
  if ((r3 | 0) == 0) {
    return;
  } else {
    r4 = 0;
  }
  while (1) {
    r5 = (r4 << 3) + r2 | 0;
    r6 = (r4 << 3) + r1 | 0;
    r7 = HEAP32[r5 + 4 >> 2];
    HEAP32[r6 >> 2] = HEAP32[r5 >> 2];
    HEAP32[r6 + 4 >> 2] = r7;
    r7 = r4 + 1 | 0;
    if ((r7 | 0) == (r3 | 0)) {
      break;
    } else {
      r4 = r7;
    }
  }
  return;
}
function _get_hash(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r7 = r6;
  r8 = r3 + 4 | 0;
  if ((HEAP32[r8 >> 2] & 255 | 0) != 5) {
    r9 = r3;
    r10 = r1;
    r11 = HEAP32[r9 + 4 >> 2];
    HEAP32[r10 >> 2] = HEAP32[r9 >> 2];
    HEAP32[r10 + 4 >> 2] = r11;
    STACKTOP = r6;
    return;
  }
  if ((r4 | 0) != 2) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5318072);
  }
  _mrb_check_convert_type(r7, r2, r5 + 8 | 0, 16, 5317928, 5317780);
  r5 = HEAP32[r7 >> 2];
  r4 = HEAP32[r7 + 4 >> 2];
  if ((r4 & 255 | r5 | 0) == 0) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5318072);
  }
  HEAP32[r3 >> 2] = r5;
  HEAP32[r8 >> 2] = r4;
  r4 = r3;
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r6;
  return;
}
_get_hash["X"] = 1;
function _mrb_fix2binstr(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r3;
  r3 = HEAP32[r5 >> 2];
  r6 = r3 >>> 0 > 1023 ? r3 & 1023 : r3;
  if ((r6 | 0) == 0) {
    _mrb_str_new(r1, r2, 5321016, 1);
    STACKTOP = r4;
    return;
  }
  r3 = r4 + 63 | 0;
  HEAP8[r3] = 0;
  r7 = r6;
  r6 = r3;
  while (1) {
    r8 = r6 - 1 | 0;
    HEAP8[r8] = HEAP8[(r7 & 1) + 5309940 | 0];
    r3 = r7 >>> 1;
    if ((r3 | 0) == 0) {
      break;
    } else {
      r7 = r3;
      r6 = r8;
    }
  }
  do {
    if ((HEAP32[r5 >> 2] | 0) < 0) {
      r6 = _remove_sign_bits(r8, 2);
      if (HEAP8[r6] << 24 >> 24 == 49) {
        r9 = r6;
        break;
      }
      r7 = r6 - 1 | 0;
      HEAP8[r7] = 49;
      r9 = r7;
    } else {
      r9 = r8;
    }
  } while (0);
  _mrb_str_new2(r1, r2, r9);
  STACKTOP = r4;
  return;
}
function _remove_sign_bits(r1, r2) {
  var r3, r4, r5, r6;
  if ((r2 | 0) == 8) {
    r3 = (-8 >> (_strlen(r1) * 3 & -1 & 31) & 7 | HEAPU8[r1]) & 255;
    HEAP8[r1] = r3;
    r4 = r1;
    r5 = r3;
    while (1) {
      r3 = r4 + 1 | 0;
      if (r5 << 24 >> 24 != 55) {
        r6 = r4;
        break;
      }
      r4 = r3;
      r5 = HEAP8[r3];
    }
    return r6;
  } else if ((r2 | 0) == 2) {
    r5 = r1;
    while (1) {
      if (HEAP8[r5] << 24 >> 24 == 49) {
        r5 = r5 + 1 | 0;
      } else {
        r6 = r5;
        break;
      }
    }
    return r6;
  } else if ((r2 | 0) == 16) {
    r2 = r1;
    while (1) {
      if (HEAP8[r2] << 24 >> 24 == 102) {
        r2 = r2 + 1 | 0;
      } else {
        r6 = r2;
        break;
      }
    }
    return r6;
  } else {
    r6 = r1;
    return r6;
  }
}
function _fmt_setup(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r6 = STACKTOP;
  r7 = r1 + 32 | 0;
  r8 = r1 + 1 | 0;
  HEAP8[r1] = 37;
  if ((r3 & 1 | 0) == 0) {
    r9 = r8;
  } else {
    HEAP8[r8] = 35;
    r9 = r1 + 2 | 0;
  }
  if ((r3 & 4 | 0) == 0) {
    r10 = r9;
  } else {
    HEAP8[r9] = 43;
    r10 = r9 + 1 | 0;
  }
  if ((r3 & 2 | 0) == 0) {
    r11 = r10;
  } else {
    HEAP8[r10] = 45;
    r11 = r10 + 1 | 0;
  }
  if ((r3 & 8 | 0) == 0) {
    r12 = r11;
  } else {
    HEAP8[r11] = 48;
    r12 = r11 + 1 | 0;
  }
  if ((r3 & 16 | 0) == 0) {
    r13 = r12;
  } else {
    HEAP8[r12] = 32;
    r13 = r12 + 1 | 0;
  }
  if ((r3 & 32 | 0) == 0) {
    r14 = r13;
  } else {
    r14 = r13 + _snprintf(r13, r7 - r13 | 0, 5318828, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r4, tempInt)) | 0;
  }
  if ((r3 & 64 | 0) == 0) {
    r15 = r14;
    r16 = r2 & 255;
    r17 = r15 + 1 | 0;
    HEAP8[r15] = r16;
    HEAP8[r17] = 0;
    STACKTOP = r6;
    return;
  }
  r15 = r14 + _snprintf(r14, r7 - r14 | 0, 5318576, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt)) | 0;
  r16 = r2 & 255;
  r17 = r15 + 1 | 0;
  HEAP8[r15] = r16;
  HEAP8[r17] = 0;
  STACKTOP = r6;
  return;
}
_fmt_setup["X"] = 1;
function _struct_ivar_get(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  r7 = r5 + 8;
  r8 = _struct_class(r2);
  _mrb_iv_get(r6, r3, r4);
  r2 = r6;
  r9 = HEAP32[r2 >> 2];
  r10 = r6 + 4 | 0;
  r11 = HEAP32[r10 >> 2];
  L1482 : do {
    if ((r11 & 255 | r9 | 0) == 0) {
      r12 = r3;
      r13 = r7;
      r14 = r3;
      while (1) {
        r15 = HEAP32[HEAP32[r12 >> 2] + 20 >> 2];
        if ((r15 | 0) == 0 | (r15 | 0) == (r8 | 0)) {
          break;
        }
        _mrb_obj_value1436(r7, r15 | 0);
        r15 = HEAP32[r13 + 4 >> 2];
        HEAP32[r14 >> 2] = HEAP32[r13 >> 2];
        HEAP32[r14 + 4 >> 2] = r15;
        _mrb_iv_get(r6, r3, r4);
        r15 = HEAP32[r2 >> 2];
        r16 = HEAP32[r10 >> 2];
        if ((r16 & 255 | r15 | 0) != 0) {
          r17 = r15;
          r18 = r16;
          break L1482;
        }
      }
      _mrb_nil_value1438(r1);
      STACKTOP = r5;
      return;
    } else {
      r17 = r9;
      r18 = r11;
    }
  } while (0);
  HEAP32[r1 >> 2] = r17;
  HEAP32[r1 + 4 >> 2] = r18;
  STACKTOP = r5;
  return;
}
_struct_ivar_get["X"] = 1;
function _mrb_struct_s_members(r1, r2, r3) {
  var r4, r5, r6;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  _struct_ivar_get(r6, r2, r3, _mrb_intern(r2, 5325500));
  r3 = HEAP32[r6 + 4 >> 2] & 255;
  do {
    if ((r3 | 0) == 0) {
      if ((HEAP32[r6 >> 2] | 0) != 0) {
        r4 = 1230;
        break;
      }
      _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5323192);
      r4 = 1230;
      break;
    } else if ((r3 | 0) != 15) {
      r4 = 1230;
    }
  } while (0);
  if (r4 == 1230) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5320472);
  }
  r2 = r6;
  r6 = r1;
  r1 = HEAP32[r2 + 4 >> 2];
  HEAP32[r6 >> 2] = HEAP32[r2 >> 2];
  HEAP32[r6 + 4 >> 2] = r1;
  STACKTOP = r5;
  return;
}
function _mrb_struct_members(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  _mrb_obj_value1436(r6, _mrb_obj_class(r2, r3) | 0);
  _mrb_struct_s_members(r5, r2, r6);
  do {
    if ((HEAP32[r3 + 4 >> 2] & 255 | 0) == 20) {
      r6 = HEAP32[r3 >> 2] + 12 | 0;
      r7 = HEAP32[r5 >> 2] + 12 | 0;
      if ((HEAP32[r6 >> 2] | 0) == (HEAP32[r7 >> 2] | 0)) {
        break;
      }
      r8 = _mrb_class_obj_get(r2, 5325036);
      r9 = HEAP32[r6 >> 2];
      _mrb_raisef(r2, r8, 5318488, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r7 >> 2], HEAP32[tempInt + 4 >> 2] = r9, tempInt));
    }
  } while (0);
  r2 = r5;
  r5 = r1;
  r1 = HEAP32[r2 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r2 >> 2];
  HEAP32[r5 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_struct_getmember(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10;
  r5 = 0;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r7 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 4 >> 2];
  r7 = r6;
  r8 = r6 + 8;
  r9 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2];
  _mrb_struct_members(r8, r2, r3);
  r3 = HEAP32[r8 >> 2];
  r8 = HEAP32[r3 + 20 >> 2];
  _mrb_symbol_value1437(r7, r4);
  r10 = HEAP32[r3 + 12 >> 2];
  r3 = 0;
  while (1) {
    if ((r3 | 0) >= (r10 | 0)) {
      r5 = 1240;
      break;
    }
    if ((_mrb_obj_equal((r3 << 3) + r8 | 0, r7) | 0) == 0) {
      r3 = r3 + 1 | 0;
    } else {
      r5 = 1239;
      break;
    }
  }
  if (r5 == 1240) {
    r7 = _mrb_sym2name(r2, r4);
    _mrb_name_error(r2, r4, 5316488, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r7, tempInt));
    _mrb_nil_value1438(r1);
    STACKTOP = r6;
    return;
  } else if (r5 == 1239) {
    r5 = (r3 << 3) + r9 | 0;
    r9 = r1;
    r1 = HEAP32[r5 + 4 >> 2];
    HEAP32[r9 >> 2] = HEAP32[r5 >> 2];
    HEAP32[r9 + 4 >> 2] = r1;
    STACKTOP = r6;
    return;
  }
}
function _mrb_id_attrset(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  r5 = _mrb_sym2name_len(HEAP32[r1 + 596 >> 2], r2, r4);
  r2 = HEAP32[r4 >> 2];
  r4 = _mrb_malloc(r1, r2 + 2 | 0);
  _memcpy(r4, r5, r2);
  HEAP8[r4 + r2 | 0] = 61;
  r5 = r2 + 1 | 0;
  HEAP8[r4 + r5 | 0] = 0;
  r2 = _mrb_intern2(r1, r4, r5);
  _mrb_free(r1, r4);
  STACKTOP = r3;
  return r2;
}
function _make_struct(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20;
  r6 = 0;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r8 = r3, r9 = r8 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r9];
  HEAP32[r3 + 4 >> 2] = HEAP32[r9 + 1];
  r8 = r4, r9 = r8 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r9];
  HEAP32[r4 + 4 >> 2] = HEAP32[r9 + 1];
  r9 = r7;
  r8 = r7 + 8;
  do {
    if ((HEAP32[r3 + 4 >> 2] & 255 | 0) == 0) {
      if ((HEAP32[r3 >> 2] | 0) != 0) {
        r6 = 1248;
        break;
      }
      r10 = _mrb_class_new(r2, r5);
      break;
    } else {
      r6 = 1248;
    }
  } while (0);
  if (r6 == 1248) {
    _mrb_str_to_str(r8, r2, r3);
    r11 = r8;
    r8 = r3;
    r12 = HEAP32[r11 + 4 >> 2];
    HEAP32[r8 >> 2] = HEAP32[r11 >> 2];
    HEAP32[r8 + 4 >> 2] = r12;
    r12 = _mrb_to_id(r2, r3);
    if ((_mrb_is_const_id(r12) | 0) == 0) {
      r8 = _mrb_string_value_ptr(r2, r3);
      _mrb_name_error(r2, r12, 5319232, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r8, tempInt));
    }
    if ((_mrb_const_defined_at(r2, r5, r12) | 0) != 0) {
      r12 = _mrb_string_value_ptr(r2, r3);
      _mrb_warn(5319012, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r12, tempInt));
    }
    r10 = _mrb_define_class_under(r2, r5, HEAP32[HEAP32[r3 >> 2] + 20 >> 2], r5);
  }
  r5 = r10;
  HEAP32[r5 >> 2] = HEAP32[r5 >> 2] & -522241 | 40960;
  _mrb_obj_value1436(r9, r10 | 0);
  r5 = r9;
  _mrb_iv_set(r2, r9, _mrb_intern(r2, 5325500), r4);
  _mrb_define_class_method(r2, r10, 5325432, 636);
  _mrb_define_class_method(r2, r10, 5322620, 636);
  _mrb_define_class_method(r2, r10, 5324156, 400);
  r9 = HEAP32[r4 >> 2];
  r4 = HEAP32[r9 + 20 >> 2];
  r3 = HEAP32[r9 + 12 >> 2];
  if ((r3 | 0) > 0) {
    r13 = 0;
  } else {
    r14 = r1;
    r15 = r5 | 0;
    r16 = HEAP32[r15 >> 2];
    r17 = r5 + 4 | 0;
    r18 = HEAP32[r17 >> 2];
    r19 = r14 | 0;
    HEAP32[r19 >> 2] = r16;
    r20 = r14 + 4 | 0;
    HEAP32[r20 >> 2] = r18;
    STACKTOP = r7;
    return;
  }
  while (1) {
    r9 = HEAP16[r4 + (r13 << 3) >> 1];
    do {
      if ((_mrb_is_local_id(r9) | 0) == 0) {
        if ((_mrb_is_const_id(r9) | 0) == 0) {
          break;
        } else {
          r6 = 1256;
          break;
        }
      } else {
        r6 = 1256;
      }
    } while (0);
    if (r6 == 1256) {
      r6 = 0;
      if ((r13 | 0) < 10) {
        _mrb_define_method_id(r2, r10, r9, HEAP32[(r13 << 2) + 5292224 >> 2]);
      } else {
        _mrb_define_method_id(r2, r10, r9, 332);
      }
      _mrb_define_method_id(r2, r10, _mrb_id_attrset(r2, r9), 502);
    }
    r12 = r13 + 1 | 0;
    if ((r12 | 0) == (r3 | 0)) {
      break;
    } else {
      r13 = r12;
    }
  }
  r14 = r1;
  r15 = r5 | 0;
  r16 = HEAP32[r15 >> 2];
  r17 = r5 + 4 | 0;
  r18 = HEAP32[r17 >> 2];
  r19 = r14 | 0;
  HEAP32[r19 >> 2] = r16;
  r20 = r14 + 4 | 0;
  HEAP32[r20 >> 2] = r18;
  STACKTOP = r7;
  return;
}
_make_struct["X"] = 1;
function _struct_class(r1) {
  return _mrb_class_get(r1, 5325672);
}
function _mrb_struct_initialize_withArg(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9;
  r6 = STACKTOP;
  r7 = r5;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r5 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r5 + 4 >> 2] = HEAP32[r7 + 4 >> 2];
  r7 = _num_members(r2, _mrb_obj_class(r2, r5));
  if ((r7 | 0) < (r3 | 0)) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5319696);
  }
  r8 = HEAP32[r5 >> 2];
  r9 = _mrb_calloc(r2, 8, r7);
  HEAP32[r8 + 16 >> 2] = r9;
  HEAP32[r8 + 12 >> 2] = r7;
  _struct_copy(r9, r4, r3);
  r3 = r5;
  r5 = r1;
  r1 = HEAP32[r3 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r5 + 4 >> 2] = r1;
  STACKTOP = r6;
  return;
}
function _mrb_struct_init_copy(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((_mrb_obj_equal(r3, r5) | 0) != 0) {
    r6 = r3;
    r7 = r1;
    r8 = HEAP32[r6 + 4 >> 2];
    HEAP32[r7 >> 2] = HEAP32[r6 >> 2];
    HEAP32[r7 + 4 >> 2] = r8;
    STACKTOP = r4;
    return;
  }
  if ((_mrb_obj_is_instance_of(r2, r5, _mrb_obj_class(r2, r3)) | 0) == 0) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5318284);
  }
  r8 = HEAP32[r3 >> 2];
  r7 = r8 + 12 | 0;
  r6 = HEAP32[r7 >> 2];
  r9 = r5;
  r5 = HEAP32[r9 >> 2];
  if ((r6 | 0) == (HEAP32[r5 + 12 >> 2] | 0)) {
    r10 = r5;
    r11 = r6;
  } else {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5314468);
    r10 = HEAP32[r9 >> 2];
    r11 = HEAP32[r7 >> 2];
  }
  _struct_copy(HEAP32[r8 + 16 >> 2], HEAP32[r10 + 16 >> 2], r11);
  r11 = r3;
  r3 = r1;
  r1 = HEAP32[r11 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r11 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
_mrb_struct_init_copy["X"] = 1;
function _mrb_struct_aref_n(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11;
  r5 = STACKTOP;
  r6 = r3, r7 = r6 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 1];
  r6 = r4, r7 = r6 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r7];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7 + 1];
  r7 = HEAP32[r4 + 4 >> 2] & 255;
  if ((r7 | 0) == 17 | (r7 | 0) == 4) {
    _mrb_struct_aref_id(r1, r2, r3, _mrb_to_id(r2, r4));
    STACKTOP = r5;
    return;
  }
  r7 = HEAP32[r4 >> 2];
  r4 = HEAP32[r3 >> 2];
  r3 = r4 + 12 | 0;
  do {
    if ((r7 | 0) < 0) {
      r6 = HEAP32[r3 >> 2] + r7 | 0;
      if ((r6 | 0) >= 0) {
        r8 = r6;
        r9 = r3;
        break;
      }
      r10 = _mrb_class_obj_get(r2, 5314128);
      r11 = HEAP32[r3 >> 2];
      _mrb_raisef(r2, r10, 5326424, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r6, HEAP32[tempInt + 4 >> 2] = r11, tempInt));
      r8 = r6;
      r9 = r3;
    } else {
      r8 = r7;
      r9 = r3;
    }
  } while (0);
  if ((HEAP32[r9 >> 2] | 0) <= (r8 | 0)) {
    r3 = _mrb_class_obj_get(r2, 5314128);
    r7 = HEAP32[r9 >> 2];
    _mrb_raisef(r2, r3, 5326092, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r8, HEAP32[tempInt + 4 >> 2] = r7, tempInt));
  }
  r7 = (r8 << 3) + HEAP32[r4 + 16 >> 2] | 0;
  r4 = r1;
  r1 = HEAP32[r7 + 4 >> 2];
  HEAP32[r4 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r4 + 4 >> 2] = r1;
  STACKTOP = r5;
  return;
}
function _mrb_struct_aref_id(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9;
  r5 = 0;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r7 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r7 + 4 >> 2];
  r7 = r6;
  r8 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2];
  _mrb_struct_members(r7, r2, r3);
  r3 = HEAP32[r7 >> 2];
  r7 = HEAP32[r3 + 20 >> 2];
  r9 = HEAP32[r3 + 12 >> 2];
  r3 = 0;
  while (1) {
    if ((r3 | 0) >= (r9 | 0)) {
      r5 = 1293;
      break;
    }
    if (HEAP16[r7 + (r3 << 3) >> 1] << 16 >> 16 == r4 << 16 >> 16) {
      r5 = 1292;
      break;
    } else {
      r3 = r3 + 1 | 0;
    }
  }
  if (r5 == 1293) {
    r7 = _mrb_sym2name(r2, r4);
    _mrb_name_error(r2, r4, 5319940, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r7, tempInt));
    _mrb_nil_value1438(r1);
    STACKTOP = r6;
    return;
  } else if (r5 == 1292) {
    r5 = (r3 << 3) + r8 | 0;
    r8 = r1;
    r1 = HEAP32[r5 + 4 >> 2];
    HEAP32[r8 >> 2] = HEAP32[r5 >> 2];
    HEAP32[r8 + 4 >> 2] = r1;
    STACKTOP = r6;
    return;
  }
}
function _mrb_struct_aref(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_struct_aref_n(r1, r2, r3, r5);
  STACKTOP = r4;
  return;
}
function _mrb_struct_aset(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  _mrb_get_args(r2, 5320556, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  r7 = HEAP32[r5 + 4 >> 2] & 255;
  if ((r7 | 0) == 17 | (r7 | 0) == 4) {
    _mrb_struct_aset_id(r1, r2, r3, _mrb_to_id(r2, r5), r6);
    STACKTOP = r4;
    return;
  }
  r7 = HEAP32[r5 >> 2];
  r5 = HEAP32[r3 >> 2];
  r3 = r5 + 12 | 0;
  do {
    if ((r7 | 0) < 0) {
      r8 = HEAP32[r3 >> 2] + r7 | 0;
      if ((r8 | 0) >= 0) {
        r9 = r8;
        r10 = r3;
        break;
      }
      r11 = _mrb_class_obj_get(r2, 5314128);
      r12 = HEAP32[r3 >> 2];
      _mrb_raisef(r2, r11, 5326424, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r8, HEAP32[tempInt + 4 >> 2] = r12, tempInt));
      r9 = r8;
      r10 = r3;
    } else {
      r9 = r7;
      r10 = r3;
    }
  } while (0);
  if ((HEAP32[r10 >> 2] | 0) <= (r9 | 0)) {
    r3 = _mrb_class_obj_get(r2, 5314128);
    r7 = HEAP32[r10 >> 2];
    _mrb_raisef(r2, r3, 5326092, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r9, HEAP32[tempInt + 4 >> 2] = r7, tempInt));
  }
  r7 = r6;
  r6 = (r9 << 3) + HEAP32[r5 + 16 >> 2] | 0;
  r5 = HEAP32[r7 >> 2];
  r9 = HEAP32[r7 + 4 >> 2];
  HEAP32[r6 >> 2] = r5;
  HEAP32[r6 + 4 >> 2] = r9;
  r6 = r1;
  HEAP32[r6 >> 2] = r5;
  HEAP32[r6 + 4 >> 2] = r9;
  STACKTOP = r4;
  return;
}
_mrb_struct_aset["X"] = 1;
function _mrb_true_value1441(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 2;
  return;
}
function _mrb_false_value1442(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_struct_ref0(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2];
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r2;
  return;
}
function _mrb_struct_ref1(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2] + 8 | 0;
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r2;
  return;
}
function _mrb_struct_ref2(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2] + 16 | 0;
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r2;
  return;
}
function _mrb_struct_ref3(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2] + 24 | 0;
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r2;
  return;
}
function _mrb_struct_ref4(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2] + 32 | 0;
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r2;
  return;
}
function _mrb_struct_ref5(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2] + 40 | 0;
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r2;
  return;
}
function _mrb_struct_ref6(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2] + 48 | 0;
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r2;
  return;
}
function _mrb_struct_ref7(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2] + 56 | 0;
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r2;
  return;
}
function _mrb_struct_ref8(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2] + 64 | 0;
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r2;
  return;
}
function _mrb_struct_ref9(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2] + 72 | 0;
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r2;
  return;
}
function _mrb_struct_aset_id(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12;
  r6 = 0;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r8 = r3, r9 = r8 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r9];
  HEAP32[r3 + 4 >> 2] = HEAP32[r9 + 1];
  r8 = r5, r9 = r8 >> 2;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r5 >> 2] = HEAP32[r9];
  HEAP32[r5 + 4 >> 2] = HEAP32[r9 + 1];
  r9 = r7;
  _mrb_struct_members(r9, r2, r3);
  r8 = HEAP32[r9 >> 2];
  r9 = HEAP32[r8 + 12 >> 2];
  r10 = HEAP32[r3 >> 2];
  r3 = r10 + 12 | 0;
  if ((HEAP32[r3 >> 2] | 0) != (r9 | 0)) {
    r11 = _mrb_class_obj_get(r2, 5325036);
    r12 = HEAP32[r3 >> 2];
    _mrb_raisef(r2, r11, 5318488, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r9, HEAP32[tempInt + 4 >> 2] = r12, tempInt));
  }
  r12 = HEAP32[r10 + 16 >> 2];
  r10 = HEAP32[r8 + 20 >> 2];
  r8 = 0;
  while (1) {
    if ((r8 | 0) >= (r9 | 0)) {
      r6 = 1327;
      break;
    }
    if (HEAP16[r10 + (r8 << 3) >> 1] << 16 >> 16 == r4 << 16 >> 16) {
      r6 = 1326;
      break;
    } else {
      r8 = r8 + 1 | 0;
    }
  }
  if (r6 == 1326) {
    r10 = r5;
    r9 = (r8 << 3) + r12 | 0;
    r12 = HEAP32[r10 >> 2];
    r8 = HEAP32[r10 + 4 >> 2];
    HEAP32[r9 >> 2] = r12;
    HEAP32[r9 + 4 >> 2] = r8;
    r9 = r1;
    HEAP32[r9 >> 2] = r12;
    HEAP32[r9 + 4 >> 2] = r8;
    STACKTOP = r7;
    return;
  } else if (r6 == 1327) {
    r6 = _mrb_sym2name(r2, r4);
    _mrb_name_error(r2, r4, 5319940, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r6, tempInt));
    r6 = r5;
    r5 = r1;
    r1 = HEAP32[r6 + 4 >> 2];
    HEAP32[r5 >> 2] = HEAP32[r6 >> 2];
    HEAP32[r5 + 4 >> 2] = r1;
    STACKTOP = r7;
    return;
  }
}
_mrb_struct_aset_id["X"] = 1;
function _mrb_init_struct(r1) {
  var r2;
  r2 = _mrb_define_class(r1, 5325672, HEAP32[r1 + 72 >> 2]);
  _mrb_define_class_method(r1, r2, 5325432, 230);
  _mrb_define_method(r1, r2, 5314464, 308);
  _mrb_define_method(r1, r2, 5322620, 444);
  _mrb_define_method(r1, r2, 5322288, 280);
  _mrb_define_method(r1, r2, 5324156, 592);
  _mrb_define_method(r1, r2, 5323508, 152);
  _mrb_define_method(r1, r2, 5318996, 84);
  _mrb_define_method(r1, r2, 5325664, 154);
  _mrb_define_alias(r1, r2);
  _mrb_define_method(r1, r2, 5322632, 90);
  return;
}
function _mrb_struct_s_def(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 112 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r3 = r4 + 8;
  r6 = r4 + 16;
  r7 = r4 + 24;
  r8 = r4 + 32, r9 = r8 >> 2;
  r10 = r4 + 36;
  r11 = r4 + 40;
  r12 = r4 + 48;
  r13 = r4 + 56;
  r14 = r4 + 64;
  r15 = r4 + 72;
  r16 = r4 + 80;
  r17 = r4 + 88;
  r18 = r4 + 96;
  r19 = r4 + 104;
  _mrb_nil_value1438(r11);
  r20 = r11;
  r11 = r5, r21 = r11 >> 2;
  r22 = HEAP32[r20 >> 2];
  r23 = HEAP32[r20 + 4 >> 2];
  HEAP32[r21] = r22;
  HEAP32[r21 + 1] = r23;
  _mrb_nil_value1438(r12);
  r20 = r12;
  r12 = r3;
  r24 = HEAP32[r20 >> 2];
  r25 = HEAP32[r20 + 4 >> 2];
  HEAP32[r12 >> 2] = r24;
  HEAP32[r12 + 4 >> 2] = r25;
  _mrb_get_args(r2, 5320328, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r8, HEAP32[tempInt + 4 >> 2] = r10, HEAP32[tempInt + 8 >> 2] = r6, tempInt));
  r8 = HEAP32[r10 >> 2];
  r10 = r25;
  r25 = r24;
  r24 = r25;
  L1619 : do {
    if ((r8 | 0) == 0) {
      _mrb_ary_new(r3, r2);
    } else {
      r20 = r22;
      r26 = r23;
      do {
        if ((r8 | 0) > 0) {
          r27 = HEAP32[r9];
          r28 = r27;
          r29 = r28 | 0, r30 = r29 >> 2;
          r31 = HEAP32[r30];
          r32 = r28 + 4 | 0, r33 = r32 >> 2;
          r28 = HEAP32[r33];
          r34 = r11 | 0, r35 = r34 >> 2;
          HEAP32[r35] = r31;
          r36 = r11 + 4 | 0, r37 = r36 >> 2;
          HEAP32[r37] = r28;
          r38 = r28;
          r28 = r31;
          if ((r8 | 0) <= 1) {
            r39 = r10;
            r40 = r25;
            r41 = r28;
            r42 = r38;
            r43 = r24;
            break;
          }
          r31 = r27 + 8 | 0;
          r29 = r31 | 0, r30 = r29 >> 2;
          r27 = HEAP32[r30];
          r32 = r31 + 4 | 0, r33 = r32 >> 2;
          r31 = HEAP32[r33];
          r34 = r12 | 0, r35 = r34 >> 2;
          HEAP32[r35] = r27;
          r36 = r12 + 4 | 0, r37 = r36 >> 2;
          HEAP32[r37] = r31;
          r44 = r27;
          r39 = r31;
          r40 = r44;
          r41 = r28;
          r42 = r38;
          r43 = r44;
        } else {
          r39 = r10;
          r40 = r25;
          r41 = r20;
          r42 = r26;
          r43 = r24;
        }
      } while (0);
      do {
        if ((r39 & 255 | 0) == 15) {
          r26 = r42 & 255;
          if (!((r26 | r41 | 0) != 0 & (r26 | 0) == 4)) {
            r45 = r40;
            r46 = r43;
            break;
          }
          _mrb_ary_unshift(r13, r2, r3, r5);
          _mrb_nil_value1438(r14);
          r26 = r14;
          r47 = r26 | 0, r48 = r47 >> 2;
          r49 = r26 + 4 | 0, r50 = r49 >> 2;
          r26 = HEAP32[r50];
          HEAP32[r21] = HEAP32[r48];
          HEAP32[r21 + 1] = r26;
          r26 = HEAP32[r3 >> 2];
          r45 = r26;
          r46 = r26;
        } else {
          r26 = HEAP32[r9] + 8 | 0;
          r20 = r42 & 255;
          if ((r20 | r41 | 0) != 0 & (r20 | 0) == 4) {
            _mrb_nil_value1438(r15);
            r20 = r15;
            r29 = r20 | 0, r30 = r29 >> 2;
            r32 = r20 + 4 | 0, r33 = r32 >> 2;
            r20 = HEAP32[r33];
            r34 = r11 | 0, r35 = r34 >> 2;
            HEAP32[r35] = HEAP32[r30];
            r36 = r11 + 4 | 0, r37 = r36 >> 2;
            HEAP32[r37] = r20;
            r51 = HEAP32[r9];
            r52 = r8;
          } else {
            r51 = r26;
            r52 = r8 - 1 | 0;
          }
          _mrb_ary_new_from_values(r16, r2, r52, r51);
          r26 = r16;
          r53 = r26 | 0;
          r20 = HEAP32[r53 >> 2];
          r54 = r26 + 4 | 0;
          r26 = HEAP32[r54 >> 2];
          r55 = r12 | 0;
          HEAP32[r55 >> 2] = r20;
          r56 = r12 + 4 | 0;
          HEAP32[r56 >> 2] = r26;
          r26 = r20;
          r45 = r26;
          r46 = r26;
        }
      } while (0);
      if ((HEAP32[r45 + 12 >> 2] | 0) <= 0) {
        break;
      }
      r26 = r46 + 20 | 0;
      r20 = r17;
      r44 = r46 + 12 | 0;
      r38 = 0;
      r28 = r45;
      while (1) {
        r31 = _mrb_to_id(r2, (r38 << 3) + HEAP32[r28 + 20 >> 2] | 0);
        r27 = (r38 << 3) + HEAP32[r26 >> 2] | 0;
        _mrb_symbol_value1437(r17, r31);
        r31 = r27;
        r27 = HEAP32[r20 + 4 >> 2];
        HEAP32[r31 >> 2] = HEAP32[r20 >> 2];
        HEAP32[r31 + 4 >> 2] = r27;
        r27 = r38 + 1 | 0;
        if ((r27 | 0) < (HEAP32[r44 >> 2] | 0)) {
          r38 = r27;
          r28 = r46;
        } else {
          break L1619;
        }
      }
    }
  } while (0);
  _make_struct(r18, r2, r5, r3, _struct_class(r2));
  r3 = r18;
  r18 = r7;
  r53 = r3 | 0;
  r5 = HEAP32[r53 >> 2];
  r54 = r3 + 4 | 0;
  r3 = HEAP32[r54 >> 2];
  r55 = r18 | 0;
  HEAP32[r55 >> 2] = r5;
  r56 = r18 + 4 | 0;
  HEAP32[r56 >> 2] = r3;
  do {
    if ((HEAP32[r6 + 4 >> 2] & 255 | 0) == 0) {
      if ((HEAP32[r6 >> 2] | 0) == 0) {
        r57 = r3;
        r58 = r5;
      } else {
        break;
      }
      r59 = r1;
      r47 = r59 | 0, r48 = r47 >> 2;
      HEAP32[r48] = r58;
      r49 = r59 + 4 | 0, r50 = r49 >> 2;
      HEAP32[r50] = r57;
      STACKTOP = r4;
      return;
    }
  } while (0);
  _mrb_funcall(r19, r2, r6, 5320144, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r7, tempInt));
  r57 = HEAP32[r18 + 4 >> 2];
  r58 = HEAP32[r18 >> 2];
  r59 = r1;
  r47 = r59 | 0, r48 = r47 >> 2;
  HEAP32[r48] = r58;
  r49 = r59 + 4 | 0, r50 = r49 >> 2;
  HEAP32[r50] = r57;
  STACKTOP = r4;
  return;
}
_mrb_struct_s_def["X"] = 1;
function _mrb_struct_members_m(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_obj_value1436(r5, _mrb_obj_class(r2, r3) | 0);
  _mrb_struct_s_members_m(r1, r2, r5);
  STACKTOP = r4;
  return;
}
function _mrb_struct_initialize_m(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4;
  _mrb_get_args(r2, 5325956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  _mrb_struct_initialize_withArg(r1, r2, HEAP32[r6 >> 2], HEAP32[r5 >> 2], r3);
  STACKTOP = r4;
  return;
}
function _mrb_struct_inspect(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _inspect_struct(r1, r2, r3);
  STACKTOP = r4;
  return;
}
function _inspect_struct(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 124 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  r7 = r5 + 8;
  r8 = r5 + 24;
  r9 = r5 + 32;
  r10 = r5 + 40;
  r11 = r5 + 48;
  r12 = r5 + 56;
  r13 = r5 + 60;
  r14 = r5 + 68;
  r15 = r5 + 76;
  r16 = r5 + 84;
  r17 = r5 + 92;
  r18 = r5 + 100;
  r19 = r5 + 108;
  r20 = r5 + 116;
  r21 = _mrb_class_name(r2, _mrb_obj_class(r2, r3));
  _mrb_str_new(r6, r2, 5322024, 9);
  r22 = (r21 | 0) != 0;
  if (r22) {
    _mrb_str_new_cstr(r7, r2, r21);
    _mrb_str_append(r5 + 16, r2, r6, r7);
  }
  _mrb_struct_members(r8, r2, r3);
  r7 = HEAP32[HEAP32[r8 >> 2] + 20 >> 2];
  r8 = HEAP32[r3 >> 2];
  r3 = HEAP32[r8 + 16 >> 2];
  r21 = HEAP32[r8 + 12 >> 2];
  if ((r21 | 0) <= 0) {
    _mrb_str_cat2(r20, r2, r6, 5320772);
    r23 = r6;
    r24 = r1;
    r25 = r23 | 0;
    r26 = HEAP32[r25 >> 2];
    r27 = r23 + 4 | 0;
    r28 = HEAP32[r27 >> 2];
    r29 = r24 | 0;
    HEAP32[r29 >> 2] = r26;
    r30 = r24 + 4 | 0;
    HEAP32[r30 >> 2] = r28;
    STACKTOP = r5;
    return;
  }
  r8 = r9;
  r31 = r2 + 596 | 0;
  r32 = 0;
  while (1) {
    do {
      if ((r32 | 0) > 0) {
        _mrb_str_cat2(r10, r2, r6, 5321476);
      } else {
        if (!r22) {
          break;
        }
        _mrb_str_cat2(r11, r2, r6, 5321232);
      }
    } while (0);
    r33 = (r32 << 3) + r7 | 0;
    r34 = HEAP32[r33 >> 2];
    r35 = HEAP32[r33 + 4 >> 2];
    HEAP32[r8 >> 2] = r34;
    HEAP32[r8 + 4 >> 2] = r35;
    r35 = r34 & 65535;
    do {
      if ((_mrb_is_local_id(r35) | 0) == 0) {
        if ((_mrb_is_const_id(r35) | 0) != 0) {
          r4 = 1365;
          break;
        }
        _mrb_inspect(r15, r2, r9);
        _mrb_str_append(r16, r2, r6, r15);
        break;
      } else {
        r4 = 1365;
      }
    } while (0);
    if (r4 == 1365) {
      r4 = 0;
      _mrb_str_new(r13, r2, _mrb_sym2name_len(HEAP32[r31 >> 2], r35, r12), HEAP32[r12 >> 2]);
      _mrb_str_append(r14, r2, r6, r13);
    }
    _mrb_str_cat2(r17, r2, r6, 5321012);
    _mrb_inspect(r18, r2, (r32 << 3) + r3 | 0);
    _mrb_str_append(r19, r2, r6, r18);
    r34 = r32 + 1 | 0;
    if ((r34 | 0) == (r21 | 0)) {
      break;
    } else {
      r32 = r34;
    }
  }
  _mrb_str_cat2(r20, r2, r6, 5320772);
  r23 = r6;
  r24 = r1;
  r25 = r23 | 0;
  r26 = HEAP32[r25 >> 2];
  r27 = r23 + 4 | 0;
  r28 = HEAP32[r27 >> 2];
  r29 = r24 | 0;
  HEAP32[r29 >> 2] = r26;
  r30 = r24 + 4 | 0;
  HEAP32[r30 >> 2] = r28;
  STACKTOP = r5;
  return;
}
_inspect_struct["X"] = 1;
function _mrb_struct_s_members_m(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 16;
  _mrb_struct_s_members(r6, r2, r3);
  r3 = HEAP32[r6 >> 2];
  r6 = r3 + 12 | 0;
  _mrb_ary_new_capa(r7, r2, HEAP32[r6 >> 2]);
  r8 = r7;
  r7 = r5 >> 2;
  r9 = HEAP32[r8 >> 2];
  r10 = HEAP32[r8 + 4 >> 2];
  HEAP32[r7] = r9;
  HEAP32[r7 + 1] = r10;
  r8 = HEAP32[r3 + 20 >> 2];
  r3 = HEAP32[r6 >> 2];
  r6 = (r3 << 3) + r8 | 0;
  if ((r3 | 0) > 0) {
    r11 = r8;
  } else {
    r12 = r10;
    r13 = r9;
    r14 = r1;
    r15 = r14 | 0;
    HEAP32[r15 >> 2] = r13;
    r16 = r14 + 4 | 0;
    HEAP32[r16 >> 2] = r12;
    STACKTOP = r4;
    return;
  }
  while (1) {
    _mrb_ary_push(r2, r5, r11);
    r9 = r11 + 8 | 0;
    if (r9 >>> 0 < r6 >>> 0) {
      r11 = r9;
    } else {
      break;
    }
  }
  r12 = HEAP32[r7 + 1];
  r13 = HEAP32[r7];
  r14 = r1;
  r15 = r14 | 0;
  HEAP32[r15 >> 2] = r13;
  r16 = r14 + 4 | 0;
  HEAP32[r16 >> 2] = r12;
  STACKTOP = r4;
  return;
}
function _num_members(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r4 = r3;
  r5 = r3 + 8;
  _mrb_obj_value1436(r4, r2 | 0);
  _struct_ivar_get(r5, r1, r4, _mrb_intern(r1, 5325500));
  r4 = HEAP32[r5 >> 2];
  if ((HEAP32[r5 + 4 >> 2] & 255 | 0) == 15) {
    r6 = r4 + 12 | 0;
    r7 = r6;
    r8 = HEAP32[r7 >> 2];
    STACKTOP = r3;
    return r8;
  }
  _mrb_raise(r1, _mrb_class_obj_get(r1, 5325036), 5319372);
  r6 = r4 + 12 | 0;
  r7 = r6;
  r8 = HEAP32[r7 >> 2];
  STACKTOP = r3;
  return r8;
}
function _mrb_struct_ref(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_struct_getmember(r1, r2, r3, HEAP16[HEAP32[r2 + 20 >> 2] >> 1]);
  STACKTOP = r4;
  return;
}
function _mrb_struct_set_m(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _mrb_struct_set(r1, r2, r3, r5);
  STACKTOP = r4;
  return;
}
function _mrb_struct_set(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11;
  r5 = 0;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r7 = r3, r8 = r7 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r8];
  HEAP32[r3 + 4 >> 2] = HEAP32[r8 + 1];
  r7 = r4, r8 = r7 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r4 >> 2] = HEAP32[r8];
  HEAP32[r4 + 4 >> 2] = HEAP32[r8 + 1];
  r8 = r6;
  r7 = r6 + 4;
  r9 = _mrb_intern2(r2, _mrb_sym2name_len(HEAP32[r2 + 596 >> 2], HEAP16[HEAP32[r2 + 20 >> 2] >> 1], r8), HEAP32[r8 >> 2] - 1 | 0);
  _mrb_struct_members(r7, r2, r3);
  r10 = HEAP32[r7 >> 2];
  r7 = HEAP32[r10 + 20 >> 2];
  r11 = HEAP32[r10 + 12 >> 2];
  HEAP32[r8 >> 2] = r11;
  r8 = HEAP32[HEAP32[r3 >> 2] + 16 >> 2];
  r3 = 0;
  while (1) {
    if ((r3 | 0) >= (r11 | 0)) {
      r5 = 1388;
      break;
    }
    if (HEAP16[r7 + (r3 << 3) >> 1] << 16 >> 16 == r9 << 16 >> 16) {
      r5 = 1387;
      break;
    } else {
      r3 = r3 + 1 | 0;
    }
  }
  if (r5 == 1387) {
    r7 = r4;
    r4 = (r3 << 3) + r8 | 0;
    r8 = HEAP32[r7 >> 2];
    r3 = HEAP32[r7 + 4 >> 2];
    HEAP32[r4 >> 2] = r8;
    HEAP32[r4 + 4 >> 2] = r3;
    r4 = r1;
    HEAP32[r4 >> 2] = r8;
    HEAP32[r4 + 4 >> 2] = r3;
    STACKTOP = r6;
    return;
  } else if (r5 == 1388) {
    r5 = _mrb_sym2name(r2, r9);
    _mrb_name_error(r2, r9, 5318800, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
    _mrb_nil_value1438(r1);
    STACKTOP = r6;
    return;
  }
}
_mrb_struct_set["X"] = 1;
function _mrb_time_update_datetime(r1) {
  var r2, r3;
  r2 = r1 | 0;
  r3 = r1 + 12 | 0;
  if ((HEAP32[r1 + 8 >> 2] | 0) == 1) {
    _gmtime_r(r2, r3);
    return;
  } else {
    _localtime_r(r2, r3);
    return;
  }
}
function _mrb_init_time(r1) {
  var r2, r3;
  r2 = _mrb_define_class(r1, 5325408, HEAP32[r1 + 72 >> 2]);
  r3 = r2;
  HEAP32[r3 >> 2] = HEAP32[r3 >> 2] & -522241 | 51200;
  _mrb_include_module(r1, r2, _mrb_class_get(r1, 5325072));
  _mrb_define_class_method(r1, r2, 5323180, 286);
  _mrb_define_class_method(r1, r2, 5320460, 326);
  _mrb_define_class_method(r1, r2, 5318468, 648);
  _mrb_define_class_method(r1, r2, 5316480, 648);
  _mrb_define_class_method(r1, r2, 5315444, 496);
  _mrb_define_class_method(r1, r2, 5314948, 326);
  _mrb_define_method(r1, r2, 5314464, 620);
  _mrb_define_method(r1, r2, 5314124, 470);
  _mrb_define_method(r1, r2, 5326420, 238);
  _mrb_define_method(r1, r2, 5326088, 458);
  _mrb_define_method(r1, r2, 5325416, 118);
  _mrb_define_method(r1, r2, 5325664, 118);
  _mrb_define_method(r1, r2, 5325424, 118);
  _mrb_define_method(r1, r2, 5325224, 118);
  _mrb_define_method(r1, r2, 5324912, 602);
  _mrb_define_method(r1, r2, 5324548, 282);
  _mrb_define_method(r1, r2, 5324148, 414);
  _mrb_define_method(r1, r2, 5323784, 52);
  _mrb_define_method(r1, r2, 5323520, 414);
  _mrb_define_method(r1, r2, 5323252, 122);
  _mrb_define_method(r1, r2, 5322948, 110);
  _mrb_define_method(r1, r2, 5322624, 490);
  _mrb_define_method(r1, r2, 5322292, 220);
  _mrb_define_method(r1, r2, 5322016, 292);
  _mrb_define_method(r1, r2, 5321744, 508);
  _mrb_define_method(r1, r2, 5321472, 8);
  _mrb_define_method(r1, r2, 5321224, 8);
  _mrb_define_method(r1, r2, 5321008, 358);
  _mrb_define_method(r1, r2, 5320764, 556);
  _mrb_define_method(r1, r2, 5320568, 224);
  _mrb_define_method(r1, r2, 5320320, 236);
  _mrb_define_method(r1, r2, 5314948, 110);
  _mrb_define_method(r1, r2, 5320136, 122);
  _mrb_define_method(r1, r2, 5319932, 480);
  _mrb_define_method(r1, r2, 5319808, 184);
  _mrb_define_method(r1, r2, 5319688, 266);
  _mrb_define_method(r1, r2, 5319364, 612);
  _mrb_define_method(r1, r2, 5323508, 378);
  _mrb_define_method(r1, r2, 5318996, 446);
  return;
}
_mrb_init_time["X"] = 1;
function _mrb_time_at(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4;
  HEAPF32[r6 >> 2] = 0;
  _mrb_get_args(r2, 5314844, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  _mrb_time_make(r1, r2, HEAP32[r3 >> 2], HEAPF32[r5 >> 2], HEAPF32[r6 >> 2], 2);
  STACKTOP = r4;
  return;
}
function _mrb_struct_equal(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r6, tempInt));
  if ((_mrb_obj_equal(r3, r6) | 0) != 0) {
    _mrb_true_value1441(r1);
    STACKTOP = r5;
    return;
  }
  if ((HEAP32[r6 + 4 >> 2] & 255 | 0) != 20) {
    _mrb_false_value1442(r1);
    STACKTOP = r5;
    return;
  }
  if ((_mrb_obj_class(r2, r3) | 0) != (_mrb_obj_class(r2, r6) | 0)) {
    _mrb_false_value1442(r1);
    STACKTOP = r5;
    return;
  }
  r7 = HEAP32[r3 >> 2];
  r3 = HEAP32[r7 + 12 >> 2];
  r8 = HEAP32[r6 >> 2];
  if ((r3 | 0) != (HEAP32[r8 + 12 >> 2] | 0)) {
    _mrb_bug(5322304, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  r6 = HEAP32[r7 + 16 >> 2];
  r7 = HEAP32[r8 + 16 >> 2];
  r8 = 0;
  while (1) {
    if ((r8 | 0) >= (r3 | 0)) {
      r4 = 1412;
      break;
    }
    if ((_mrb_equal(r2, (r8 << 3) + r6 | 0, (r8 << 3) + r7 | 0) | 0) == 0) {
      r4 = 1411;
      break;
    } else {
      r8 = r8 + 1 | 0;
    }
  }
  if (r4 == 1412) {
    _mrb_true_value1441(r1);
    STACKTOP = r5;
    return;
  } else if (r4 == 1411) {
    _mrb_false_value1442(r1);
    STACKTOP = r5;
    return;
  }
}
_mrb_struct_equal["X"] = 1;
function _mrb_struct_eql(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r6, tempInt));
  if ((_mrb_obj_equal(r3, r6) | 0) != 0) {
    _mrb_true_value1441(r1);
    STACKTOP = r5;
    return;
  }
  if ((HEAP32[r6 + 4 >> 2] & 255 | 0) != 20) {
    _mrb_false_value1442(r1);
    STACKTOP = r5;
    return;
  }
  if ((_mrb_obj_class(r2, r3) | 0) != (_mrb_obj_class(r2, r6) | 0)) {
    _mrb_false_value1442(r1);
    STACKTOP = r5;
    return;
  }
  r7 = HEAP32[r3 >> 2];
  r3 = HEAP32[r7 + 12 >> 2];
  r8 = HEAP32[r6 >> 2];
  if ((r3 | 0) != (HEAP32[r8 + 12 >> 2] | 0)) {
    _mrb_bug(5322304, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  r6 = HEAP32[r7 + 16 >> 2];
  r7 = HEAP32[r8 + 16 >> 2];
  r8 = 0;
  while (1) {
    if ((r8 | 0) >= (r3 | 0)) {
      r4 = 1431;
      break;
    }
    if ((_mrb_eql(r2, (r8 << 3) + r6 | 0, (r8 << 3) + r7 | 0) | 0) == 0) {
      r4 = 1430;
      break;
    } else {
      r8 = r8 + 1 | 0;
    }
  }
  if (r4 == 1430) {
    _mrb_false_value1442(r1);
    STACKTOP = r5;
    return;
  } else if (r4 == 1431) {
    _mrb_true_value1441(r1);
    STACKTOP = r5;
    return;
  }
}
_mrb_struct_eql["X"] = 1;
function _mrb_time_gm(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4;
  r7 = r4 + 8;
  r8 = r4 + 12;
  r9 = r4 + 16;
  r10 = r4 + 20;
  r11 = r4 + 24;
  HEAP32[r5 >> 2] = 0;
  HEAP32[r6 >> 2] = 1;
  HEAP32[r7 >> 2] = 1;
  HEAP32[r8 >> 2] = 0;
  HEAP32[r9 >> 2] = 0;
  HEAP32[r10 >> 2] = 0;
  HEAP32[r11 >> 2] = 0;
  _mrb_get_args(r2, 5314892, (tempInt = STACKTOP, STACKTOP = STACKTOP + 28 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, HEAP32[tempInt + 8 >> 2] = r7, HEAP32[tempInt + 12 >> 2] = r8, HEAP32[tempInt + 16 >> 2] = r9, HEAP32[tempInt + 20 >> 2] = r10, HEAP32[tempInt + 24 >> 2] = r11, tempInt));
  _mrb_time_wrap(r1, r2, HEAP32[r3 >> 2], _time_mktime(r2, HEAP32[r5 >> 2], HEAP32[r6 >> 2], HEAP32[r7 >> 2], HEAP32[r8 >> 2], HEAP32[r9 >> 2], HEAP32[r10 >> 2], HEAP32[r11 >> 2], 1));
  STACKTOP = r4;
  return;
}
function _mrb_time_local(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4;
  r7 = r4 + 8;
  r8 = r4 + 12;
  r9 = r4 + 16;
  r10 = r4 + 20;
  r11 = r4 + 24;
  HEAP32[r5 >> 2] = 0;
  HEAP32[r6 >> 2] = 1;
  HEAP32[r7 >> 2] = 1;
  HEAP32[r8 >> 2] = 0;
  HEAP32[r9 >> 2] = 0;
  HEAP32[r10 >> 2] = 0;
  HEAP32[r11 >> 2] = 0;
  _mrb_get_args(r2, 5314892, (tempInt = STACKTOP, STACKTOP = STACKTOP + 28 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, HEAP32[tempInt + 8 >> 2] = r7, HEAP32[tempInt + 12 >> 2] = r8, HEAP32[tempInt + 16 >> 2] = r9, HEAP32[tempInt + 20 >> 2] = r10, HEAP32[tempInt + 24 >> 2] = r11, tempInt));
  _mrb_time_wrap(r1, r2, HEAP32[r3 >> 2], _time_mktime(r2, HEAP32[r5 >> 2], HEAP32[r6 >> 2], HEAP32[r7 >> 2], HEAP32[r8 >> 2], HEAP32[r9 >> 2], HEAP32[r10 >> 2], HEAP32[r11 >> 2], 2));
  STACKTOP = r4;
  return;
}
function _mrb_time_now(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  _mrb_time_wrap(r1, r2, HEAP32[r3 >> 2], _current_mrb_time(r2));
  STACKTOP = r4;
  return;
}
function _mrb_time_eq(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = _mrb_get_datatype(r3);
  r3 = _mrb_get_datatype(r5);
  if ((r2 | 0) == 0 | (r3 | 0) == 0) {
    _mrb_false_value1523(r1);
    STACKTOP = r4;
    return;
  }
  do {
    if ((HEAP32[r2 >> 2] | 0) == (HEAP32[r3 >> 2] | 0)) {
      if ((HEAP32[r2 + 4 >> 2] | 0) != (HEAP32[r3 + 4 >> 2] | 0)) {
        break;
      }
      _mrb_true_value1522(r1);
      STACKTOP = r4;
      return;
    }
  } while (0);
  _mrb_false_value1523(r1);
  STACKTOP = r4;
  return;
}
function _mrb_time_cmp(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r2 = _mrb_get_datatype(r3);
  r3 = _mrb_get_datatype(r5);
  if ((r2 | 0) == 0 | (r3 | 0) == 0) {
    _mrb_nil_value1519(r1);
    STACKTOP = r4;
    return;
  }
  r5 = HEAP32[r2 >> 2];
  r6 = HEAP32[r3 >> 2];
  if ((r5 | 0) > (r6 | 0)) {
    _mrb_fixnum_value1520(r1, 1);
    STACKTOP = r4;
    return;
  }
  if ((r5 | 0) < (r6 | 0)) {
    _mrb_fixnum_value1520(r1, -1);
    STACKTOP = r4;
    return;
  }
  r6 = HEAP32[r2 + 4 >> 2];
  r2 = HEAP32[r3 + 4 >> 2];
  if ((r6 | 0) > (r2 | 0)) {
    _mrb_fixnum_value1520(r1, 1);
    STACKTOP = r4;
    return;
  }
  if ((r6 | 0) < (r2 | 0)) {
    _mrb_fixnum_value1520(r1, -1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_fixnum_value1520(r1, 0);
    STACKTOP = r4;
    return;
  }
}
function _mrb_time_plus(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  r6 = _mrb_get_datatype(r3), r7 = r6 >> 2;
  if ((r6 | 0) == 0) {
    _mrb_nil_value1519(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_time_make(r1, r2, _mrb_obj_class(r2, r3), (HEAP32[r7] | 0) + HEAPF32[r5 >> 2], HEAP32[r7 + 1] | 0, HEAP32[r7 + 2]);
    STACKTOP = r4;
    return;
  }
}
function _mrb_time_minus(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r6, tempInt));
  r7 = _mrb_get_datatype(r3), r8 = r7 >> 2;
  if ((r7 | 0) == 0) {
    _mrb_nil_value1519(r1);
    STACKTOP = r4;
    return;
  }
  r7 = _mrb_get_datatype(r6);
  if ((r7 | 0) == 0) {
    _mrb_get_args(r2, 5314992, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
    _mrb_time_make(r1, r2, _mrb_obj_class(r2, r3), (HEAP32[r8] | 0) - HEAPF32[r5 >> 2], HEAP32[r8 + 1] | 0, HEAP32[r8 + 2]);
    STACKTOP = r4;
    return;
  } else {
    r3 = (HEAP32[r8] - HEAP32[r7 >> 2] | 0) + (HEAP32[r8 + 1] - HEAP32[r7 + 4 >> 2] | 0) / 1e6;
    HEAPF32[r5 >> 2] = r3;
    _mrb_float_value1521(r1, r3);
    STACKTOP = r4;
    return;
  }
}
_mrb_time_minus["X"] = 1;
function _mrb_time_asctime(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 256 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = _mrb_get_datatype(r3), r3 = r5 >> 2;
  if ((r5 | 0) == 0) {
    _mrb_nil_value1519(r1);
    STACKTOP = r4;
    return;
  } else {
    r5 = r4 | 0;
    r6 = HEAP32[(HEAP32[r3 + 7] << 2) + 5310004 >> 2];
    r7 = HEAP32[r3 + 6];
    r8 = HEAP32[r3 + 5];
    r9 = HEAP32[r3 + 4];
    r10 = HEAP32[r3 + 3];
    r11 = (HEAP32[r3 + 2] | 0) == 1 ? 5316848 : 5316620;
    r12 = HEAP32[r3 + 8] + 1900 | 0;
    _mrb_str_new(r1, r2, r5, _snprintf(r5, 256, 5317112, (tempInt = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempInt >> 2] = HEAP32[(HEAP32[r3 + 9] << 2) + 5291324 >> 2], HEAP32[tempInt + 4 >> 2] = r6, HEAP32[tempInt + 8 >> 2] = r7, HEAP32[tempInt + 12 >> 2] = r8, HEAP32[tempInt + 16 >> 2] = r9, HEAP32[tempInt + 20 >> 2] = r10, HEAP32[tempInt + 24 >> 2] = r11, HEAP32[tempInt + 28 >> 2] = r12, tempInt)));
    STACKTOP = r4;
    return;
  }
}
function _mrb_time_day(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = _mrb_get_datatype(r3);
  if ((r4 | 0) == 0) {
    _mrb_nil_value1519(r1);
    STACKTOP = r2;
    return;
  } else {
    _mrb_fixnum_value1520(r1, HEAP32[r4 + 24 >> 2]);
    STACKTOP = r2;
    return;
  }
}
function _mrb_time_dstp(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = _mrb_get_datatype(r3);
  do {
    if ((r4 | 0) == 0) {
      _mrb_nil_value1519(r1);
    } else {
      if ((HEAP32[r4 + 44 >> 2] | 0) == 0) {
        _mrb_false_value1523(r1);
        break;
      } else {
        _mrb_true_value1522(r1);
        break;
      }
    }
  } while (0);
  STACKTOP = r2;
  return;
}
function _mrb_time_getutc(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = _mrb_get_datatype(r3);
  if ((r5 | 0) == 0) {
    r6 = r3;
    r7 = r1;
    r8 = HEAP32[r6 + 4 >> 2];
    HEAP32[r7 >> 2] = HEAP32[r6 >> 2];
    HEAP32[r7 + 4 >> 2] = r8;
    STACKTOP = r4;
    return;
  } else {
    r8 = _mrb_malloc(r2, 56);
    r7 = r8;
    for (r6 = r5 >> 2, r9 = r8 >> 2, r10 = r6 + 14; r6 < r10; r6++, r9++) {
      HEAP32[r9] = HEAP32[r6];
    }
    HEAP32[r8 + 8 >> 2] = 1;
    _mrb_time_update_datetime(r7);
    _mrb_time_wrap(r1, r2, _mrb_obj_class(r2, r3), r7);
    STACKTOP = r4;
    return;
  }
}
function _mrb_time_getlocal(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = _mrb_get_datatype(r3);
  if ((r5 | 0) == 0) {
    r6 = r3;
    r7 = r1;
    r8 = HEAP32[r6 + 4 >> 2];
    HEAP32[r7 >> 2] = HEAP32[r6 >> 2];
    HEAP32[r7 + 4 >> 2] = r8;
    STACKTOP = r4;
    return;
  } else {
    r8 = _mrb_malloc(r2, 56);
    r7 = r8;
    for (r6 = r5 >> 2, r9 = r8 >> 2, r10 = r6 + 14; r6 < r10; r6++, r9++) {
      HEAP32[r9] = HEAP32[r6];
    }
    HEAP32[r8 + 8 >> 2] = 2;
    _mrb_time_update_datetime(r7);
    _mrb_time_wrap(r1, r2, _mrb_obj_class(r2, r3), r7);
    STACKTOP = r4;
    return;
  }
}
function _mrb_time_utcp(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = _mrb_get_datatype(r3);
  do {
    if ((r4 | 0) == 0) {
      _mrb_nil_value1519(r1);
    } else {
      if ((HEAP32[r4 + 8 >> 2] | 0) == 1) {
        _mrb_true_value1522(r1);
        break;
      } else {
        _mrb_false_value1523(r1);
        break;
      }
    }
  } while (0);
  STACKTOP = r2;
  return;
}
function _mrb_time_utc(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = _mrb_get_datatype(r3);
  if ((r4 | 0) != 0) {
    HEAP32[r4 + 8 >> 2] = 1;
    _mrb_time_update_datetime(r4);
  }
  r4 = r3;
  r3 = r1;
  r1 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r2;
  return;
}
function _mrb_time_hour(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = _mrb_get_datatype(r3);
  if ((r4 | 0) == 0) {
    _mrb_nil_value1519(r1);
    STACKTOP = r2;
    return;
  } else {
    _mrb_fixnum_value1520(r1, HEAP32[r4 + 20 >> 2]);
    STACKTOP = r2;
    return;
  }
}
function _mrb_time_localtime(r1, r2, r3) {
  var r4, r5, r6, r7;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = _mrb_get_datatype(r3);
  if ((r4 | 0) == 0) {
    r5 = r3;
    r6 = r1;
    r7 = HEAP32[r5 + 4 >> 2];
    HEAP32[r6 >> 2] = HEAP32[r5 >> 2];
    HEAP32[r6 + 4 >> 2] = r7;
    STACKTOP = r2;
    return;
  } else {
    HEAP32[r4 + 8 >> 2] = 2;
    _mrb_time_update_datetime(r4);
    r4 = r3;
    r3 = r1;
    r1 = HEAP32[r4 + 4 >> 2];
    HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
    HEAP32[r3 + 4 >> 2] = r1;
    STACKTOP = r2;
    return;
  }
}
function _mrb_time_mday(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = _mrb_get_datatype(r3);
  if ((r4 | 0) == 0) {
    _mrb_nil_value1519(r1);
    STACKTOP = r2;
    return;
  } else {
    _mrb_fixnum_value1520(r1, HEAP32[r4 + 24 >> 2]);
    STACKTOP = r2;
    return;
  }
}
function _mrb_time_min(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = _mrb_get_datatype(r3);
  if ((r4 | 0) == 0) {
    _mrb_nil_value1519(r1);
    STACKTOP = r2;
    return;
  } else {
    _mrb_fixnum_value1520(r1, HEAP32[r4 + 16 >> 2]);
    STACKTOP = r2;
    return;
  }
}
function _mrb_time_mon(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = _mrb_get_datatype(r3);
  if ((r4 | 0) == 0) {
    _mrb_nil_value1519(r1);
    STACKTOP = r2;
    return;
  } else {
    _mrb_fixnum_value1520(r1, HEAP32[r4 + 28 >> 2] + 1 | 0);
    STACKTOP = r2;
    return;
  }
}
function _mrb_time_sec(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = _mrb_get_datatype(r3);
  if ((r4 | 0) == 0) {
    _mrb_nil_value1519(r1);
    STACKTOP = r2;
    return;
  } else {
    _mrb_fixnum_value1520(r1, HEAP32[r4 + 12 >> 2]);
    STACKTOP = r2;
    return;
  }
}
function _mrb_time_to_i(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = _mrb_get_datatype(r3);
  if ((r4 | 0) == 0) {
    _mrb_nil_value1519(r1);
    STACKTOP = r2;
    return;
  } else {
    _mrb_fixnum_value1520(r1, HEAP32[r4 >> 2]);
    STACKTOP = r2;
    return;
  }
}
function _mrb_time_to_f(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = _mrb_get_datatype(r3);
  if ((r4 | 0) == 0) {
    _mrb_nil_value1519(r1);
    STACKTOP = r2;
    return;
  } else {
    _mrb_float_value1521(r1, (HEAP32[r4 >> 2] | 0) + (HEAP32[r4 + 4 >> 2] | 0) / 1e6);
    STACKTOP = r2;
    return;
  }
}
function _mrb_time_usec(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = _mrb_get_datatype(r3);
  if ((r4 | 0) == 0) {
    _mrb_nil_value1519(r1);
    STACKTOP = r2;
    return;
  } else {
    _mrb_fixnum_value1520(r1, HEAP32[r4 + 4 >> 2]);
    STACKTOP = r2;
    return;
  }
}
function _mrb_time_wday(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = _mrb_get_datatype(r3);
  if ((r4 | 0) == 0) {
    _mrb_nil_value1519(r1);
    STACKTOP = r2;
    return;
  } else {
    _mrb_fixnum_value1520(r1, HEAP32[r4 + 36 >> 2]);
    STACKTOP = r2;
    return;
  }
}
function _mrb_time_yday(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = _mrb_check_datatype(r2, r3, 5309544);
  if ((r5 | 0) == 0) {
    _mrb_nil_value1519(r1);
    STACKTOP = r4;
    return;
  } else {
    _mrb_fixnum_value1520(r1, HEAP32[r5 + 40 >> 2] + 1 | 0);
    STACKTOP = r4;
    return;
  }
}
function _mrb_time_year(r1, r2, r3) {
  var r4;
  r2 = STACKTOP;
  r4 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = _mrb_get_datatype(r3);
  if ((r4 | 0) == 0) {
    _mrb_nil_value1519(r1);
    STACKTOP = r2;
    return;
  } else {
    _mrb_fixnum_value1520(r1, HEAP32[r4 + 32 >> 2] + 1900 | 0);
    STACKTOP = r2;
    return;
  }
}
function _mrb_time_zone(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = _mrb_get_datatype(r3);
  do {
    if ((r5 | 0) == 0) {
      _mrb_nil_value1519(r1);
    } else {
      r3 = HEAP32[r5 + 8 >> 2];
      if ((r3 | 0) == 0) {
        _mrb_nil_value1519(r1);
        break;
      }
      if (r3 >>> 0 > 2) {
        _mrb_nil_value1519(r1);
        break;
      } else {
        _mrb_str_new_cstr(r1, r2, HEAP32[(r3 << 2) + 5291352 >> 2]);
        break;
      }
    }
  } while (0);
  STACKTOP = r4;
  return;
}
function _mrb_time_initialize(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 4;
  r7 = r4 + 8;
  r8 = r4 + 12;
  r9 = r4 + 16;
  r10 = r4 + 20;
  r11 = r4 + 24;
  HEAP32[r5 >> 2] = 0;
  HEAP32[r6 >> 2] = 1;
  HEAP32[r7 >> 2] = 1;
  HEAP32[r8 >> 2] = 0;
  HEAP32[r9 >> 2] = 0;
  HEAP32[r10 >> 2] = 0;
  HEAP32[r11 >> 2] = 0;
  r12 = _mrb_get_datatype(r3);
  if ((r12 | 0) != 0) {
    _mrb_time_free(r2, r12);
  }
  if ((_mrb_get_args(r2, 5318060, (tempInt = STACKTOP, STACKTOP = STACKTOP + 28 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, HEAP32[tempInt + 8 >> 2] = r7, HEAP32[tempInt + 12 >> 2] = r8, HEAP32[tempInt + 16 >> 2] = r9, HEAP32[tempInt + 20 >> 2] = r10, HEAP32[tempInt + 24 >> 2] = r11, tempInt)) | 0) == 0) {
    r13 = _current_mrb_time(r2);
  } else {
    r13 = _time_mktime(r2, HEAP32[r5 >> 2], HEAP32[r6 >> 2], HEAP32[r7 >> 2], HEAP32[r8 >> 2], HEAP32[r9 >> 2], HEAP32[r10 >> 2], HEAP32[r11 >> 2], 2);
  }
  r11 = HEAP32[r3 >> 2];
  HEAP32[r11 + 20 >> 2] = r13;
  HEAP32[r11 + 16 >> 2] = 5309544;
  r11 = r3;
  r3 = r1;
  r1 = HEAP32[r11 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r11 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
_mrb_time_initialize["X"] = 1;
function _mrb_time_initialize_copy(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((_mrb_obj_equal(r3, r5) | 0) != 0) {
    r6 = r3;
    r7 = r1;
    r8 = HEAP32[r6 + 4 >> 2];
    HEAP32[r7 >> 2] = HEAP32[r6 >> 2];
    HEAP32[r7 + 4 >> 2] = r8;
    STACKTOP = r4;
    return;
  }
  if ((_mrb_obj_is_instance_of(r2, r5, _mrb_obj_class(r2, r3)) | 0) == 0) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325036), 5318284);
  }
  r8 = HEAP32[r3 >> 2];
  r7 = r8 + 20 | 0;
  r6 = HEAP32[r7 >> 2];
  if ((r6 | 0) == 0) {
    r9 = _mrb_malloc(r2, 56);
    HEAP32[r7 >> 2] = r9;
    HEAP32[r8 + 16 >> 2] = 5309544;
    r10 = r9;
  } else {
    r10 = r6;
  }
  r6 = HEAP32[HEAP32[r5 >> 2] + 20 >> 2];
  for (r5 = r6 >> 2, r9 = r10 >> 2, r8 = r5 + 14; r5 < r8; r5++, r9++) {
    HEAP32[r9] = HEAP32[r5];
  }
  r10 = r3;
  r3 = r1;
  r1 = HEAP32[r10 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r10 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
_mrb_time_initialize_copy["X"] = 1;
function _mrb_time_free(r1, r2) {
  _mrb_free(r1, r2);
  return;
}
function _current_mrb_time(r1) {
  var r2, r3, r4, r5;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r3 = r2;
  r4 = _mrb_malloc(r1, 56), r1 = r4 >> 2;
  r5 = r4;
  _gettimeofday(r3, 0);
  HEAP32[r1] = HEAP32[r3 >> 2];
  HEAP32[r1 + 1] = HEAP32[r3 + 4 >> 2];
  HEAP32[r1 + 2] = 2;
  _mrb_time_update_datetime(r5);
  STACKTOP = r2;
  return r5;
}
function _time_mktime(r1, r2, r3, r4, r5, r6, r7, r8, r9) {
  var r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  r10 = STACKTOP;
  STACKTOP = STACKTOP + 44 | 0;
  r11 = r10, r12 = r11 >> 2;
  r13 = r11;
  for (r14 = r13 >> 2, r15 = r14 + 11; r14 < r15; r14++) {
    HEAP32[r14] = 0;
  }
  HEAP32[r12 + 5] = r2 - 1900 | 0;
  HEAP32[r12 + 4] = r3 - 1 | 0;
  HEAP32[r12 + 3] = r4;
  HEAP32[r12 + 2] = r5;
  HEAP32[r12 + 1] = r6;
  HEAP32[r12] = r7;
  HEAP32[r12 + 8] = -1;
  if ((r9 | 0) == 1) {
    r16 = _my_timgm(r11);
  } else {
    r16 = _mktime(r11);
  }
  if ((r16 | 0) >= 0) {
    r17 = r16 | 0;
    r18 = r8 | 0;
    r19 = _mrb_time_alloc(r1, r17, r18, r9);
    STACKTOP = r10;
    return r19;
  }
  _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5317760);
  r17 = r16 | 0;
  r18 = r8 | 0;
  r19 = _mrb_time_alloc(r1, r17, r18, r9);
  STACKTOP = r10;
  return r19;
}
function _is_leapyear(r1) {
  var r2;
  do {
    if ((r1 & 3 | 0) == 0) {
      if (((r1 >>> 0) % 100 | 0) != 0) {
        r2 = 1;
        break;
      }
      r2 = ((r1 >>> 0) % 400 | 0) == 0;
    } else {
      r2 = 0;
    }
  } while (0);
  return r2 & 1;
}
function _mrb_nil_value1519(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_fixnum_value1520(r1, r2) {
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 3;
  return;
}
function _mrb_float_value1521(r1, r2) {
  HEAPF32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 6;
  return;
}
function _mrb_true_value1522(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 2;
  return;
}
function _mrb_false_value1523(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_obj_value1524(r1, r2) {
  var r3;
  r3 = HEAP32[r2 >> 2] & 255;
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = r3;
  return;
}
function _mrb_obj_value1531(r1, r2) {
  var r3;
  r3 = HEAP32[r2 >> 2] & 255;
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = r3;
  return;
}
function _mrb_obj_value1575(r1, r2) {
  var r3;
  r3 = HEAP32[r2 >> 2] & 255;
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = r3;
  return;
}
function _mrb_fixnum_value1576(r1, r2) {
  HEAP32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 3;
  return;
}
function _mrb_float_value1577(r1, r2) {
  HEAPF32[r1 >> 2] = r2;
  HEAP32[r1 + 4 >> 2] = 6;
  return;
}
function _mrb_true_value1578(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 2;
  return;
}
function _mrb_false_value1579(r1) {
  HEAP32[r1 >> 2] = 1;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _mrb_nil_value1580(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function _my_timgm(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9;
  r2 = r1 >> 2;
  r1 = HEAP32[r2 + 5];
  r3 = _is_leapyear(r1 + 1900 | 0);
  L1975 : do {
    if ((r1 | 0) > 70) {
      r4 = 70;
      r5 = 0;
      while (1) {
        r6 = ((_is_leapyear(r4 + 1900 | 0) | 0) != 0 ? 31622400 : 31536e3) + r5 | 0;
        r7 = r4 + 1 | 0;
        if ((r7 | 0) < (r1 | 0)) {
          r4 = r7;
          r5 = r6;
        } else {
          r8 = r6;
          break L1975;
        }
      }
    } else {
      r8 = 0;
    }
  } while (0);
  r1 = HEAP32[r2 + 4];
  L1979 : do {
    if ((r1 | 0) > 0) {
      r5 = 0;
      r4 = r8;
      while (1) {
        r6 = (HEAP32[((r5 << 2) + 5292264 >> 2) + (r3 * 12 | 0)] * 86400 & -1) + r4 | 0;
        r7 = r5 + 1 | 0;
        if ((r7 | 0) < (r1 | 0)) {
          r5 = r7;
          r4 = r6;
        } else {
          r9 = r6;
          break L1979;
        }
      }
    } else {
      r9 = r8;
    }
  } while (0);
  return r9 - 86400 + (HEAP32[r2 + 3] * 86400 & -1) + (HEAP32[r2 + 2] * 3600 & -1) + (HEAP32[r2 + 1] * 60 & -1) + HEAP32[r2] | 0;
}
function _mrb_time_alloc(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  r5 = _mrb_malloc(r1, 56);
  r1 = r5;
  r6 = r2 & -1;
  r7 = r5 >> 2;
  HEAP32[r7] = r6;
  r8 = (r5 + 4 | 0) >> 2;
  r9 = (r2 - r6) * 1e6 + r3 & -1;
  HEAP32[r8] = r9;
  if ((r9 | 0) < 0) {
    r3 = r6;
    r2 = r9;
    while (1) {
      r10 = r3 - 1 | 0;
      r11 = r2 + 1e6 & -1;
      if ((r11 | 0) < 0) {
        r3 = r10;
        r2 = r11;
      } else {
        break;
      }
    }
    HEAP32[r7] = r10;
    HEAP32[r8] = r11;
    r12 = r11;
    r13 = r10;
  } else {
    r12 = r9;
    r13 = r6;
  }
  if ((r12 | 0) > 1e6) {
    r14 = r13;
    r15 = r12;
  } else {
    r16 = r5 + 8 | 0;
    r17 = r16;
    HEAP32[r17 >> 2] = r4;
    _mrb_time_update_datetime(r1);
    return r1;
  }
  while (1) {
    r18 = r14 + 1 | 0;
    r19 = r15 - 1e6 & -1;
    if ((r19 | 0) > 1e6) {
      r14 = r18;
      r15 = r19;
    } else {
      break;
    }
  }
  HEAP32[r7] = r18;
  HEAP32[r8] = r19;
  r16 = r5 + 8 | 0;
  r17 = r16;
  HEAP32[r17 >> 2] = r4;
  _mrb_time_update_datetime(r1);
  return r1;
}
function _mrb_time_wrap(r1, r2, r3, r4) {
  _mrb_obj_value1524(r1, _mrb_data_object_alloc(r2, r3, r4, 5309544) | 0);
  return;
}
function _mrb_time_make(r1, r2, r3, r4, r5, r6) {
  _mrb_time_wrap(r1, r2, r3, _mrb_time_alloc(r2, r4, r5, r6));
  return;
}
function _mrb_init_mrbgems(r1) {
  _GENERATED_TMP_mrb_mruby_js_gem_init(r1);
  return;
}
function _mruby_js_argument_type(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  r5 = HEAP32[r2 + (r3 << 3) + 4 >> 2] & 255;
  if ((r5 | 0) == 9) {
    r6 = 4;
  } else if ((r5 | 0) == 0) {
    r6 = (HEAP32[r2 + (r3 << 3) >> 2] | 0) == 0 ? 6 : 0;
  } else if ((r5 | 0) == 6) {
    r6 = 3;
  } else if ((r5 | 0) == 2) {
    r6 = 1;
  } else if ((r5 | 0) == 3) {
    r6 = 2;
  } else if ((r5 | 0) == 17) {
    r6 = 5;
  } else if ((r5 | 0) == 14) {
    r6 = 7;
  } else if ((r5 | 0) == 15) {
    r6 = 8;
  } else if ((r5 | 0) == 16) {
    r6 = 9;
  } else if ((r5 | 0) == 4) {
    r6 = 10;
  } else {
    _mrb_raisef(r1, _mrb_class_obj_get(r1, 5325168), 5325960, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
    r6 = -1;
  }
  STACKTOP = r4;
  return r6;
}
Module["_mruby_js_argument_type"] = _mruby_js_argument_type;
function _mruby_js_get_string(r1, r2, r3) {
  var r4, r5;
  if ((HEAP32[r2 + (r3 << 3) + 4 >> 2] & 255 | 0) != 17) {
    _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5323140);
  }
  r4 = HEAP32[r2 + (r3 << 3) >> 2];
  r3 = r4 + 20 | 0;
  r2 = HEAP32[r3 >> 2];
  if ((_strlen(r2) | 0) == (HEAP32[r4 + 12 >> 2] | 0)) {
    r5 = r2;
    return r5;
  }
  _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5320428);
  r5 = HEAP32[r3 >> 2];
  return r5;
}
Module["_mruby_js_get_string"] = _mruby_js_get_string;
function _mruby_js_get_integer(r1, r2, r3) {
  if ((HEAP32[r2 + (r3 << 3) + 4 >> 2] & 255 | 0) != 3) {
    _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5318428);
  }
  return HEAP32[r2 + (r3 << 3) >> 2];
}
Module["_mruby_js_get_integer"] = _mruby_js_get_integer;
function _mruby_js_get_float(r1, r2, r3) {
  if ((HEAP32[r2 + (r3 << 3) + 4 >> 2] & 255 | 0) != 6) {
    _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5316436);
  }
  return HEAPF32[r2 + (r3 << 3) >> 2];
}
Module["_mruby_js_get_float"] = _mruby_js_get_float;
function _mruby_js_get_object_handle(r1, r2, r3) {
  if ((HEAP32[r2 + (r3 << 3) + 4 >> 2] & 255 | 0) != 9) {
    _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5315408);
  }
  return _mruby_js_get_object_handle_value(r1, (r3 << 3) + r2 | 0);
}
Module["_mruby_js_get_object_handle"] = _mruby_js_get_object_handle;
function _mruby_js_get_object_handle_value(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = r3;
  _mrb_iv_get(r4, r2, _mrb_intern(r1, 5319356));
  r2 = _mrb_check_datatype(r1, r4, 5292360);
  r4 = r2;
  if ((r2 | 0) != 0) {
    r5 = HEAP32[r4 >> 2];
    STACKTOP = r3;
    return r5;
  }
  _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5318772);
  r5 = HEAP32[r4 >> 2];
  STACKTOP = r3;
  return r5;
}
function _mruby_js_get_proc(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r4;
  r6 = (r3 << 3) + r2 | 0;
  if ((HEAP32[r2 + (r3 << 3) + 4 >> 2] & 255 | 0) != 14) {
    _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5314916);
  }
  _mrb_obj_value1575(r5, HEAP32[1327513] | 0);
  _mrb_funcall_argv(r4 + 8, r1, r5, _mrb_intern(r1, 5314452), 1, r6);
  STACKTOP = r4;
  return HEAP32[r6 >> 2];
}
Module["_mruby_js_get_proc"] = _mruby_js_get_proc;
function _mruby_js_get_array_handle(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r4;
  if ((HEAP32[r2 + (r3 << 3) + 4 >> 2] & 255 | 0) != 15) {
    _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5314072);
  }
  _mrb_funcall_argv(r5, r1, (r3 << 3) + r2 | 0, _mrb_intern(r1, 5326376), 0, 0);
  r2 = _mruby_js_get_object_handle(r1, r5, 0);
  STACKTOP = r4;
  return r2;
}
Module["_mruby_js_get_array_handle"] = _mruby_js_get_array_handle;
function _mruby_js_get_hash_handle(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r4;
  if ((HEAP32[r2 + (r3 << 3) + 4 >> 2] & 255 | 0) != 16) {
    _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5326036);
  }
  _mrb_funcall_argv(r5, r1, (r3 << 3) + r2 | 0, _mrb_intern(r1, 5325832), 0, 0);
  r2 = _mruby_js_get_object_handle(r1, r5, 0);
  STACKTOP = r4;
  return r2;
}
Module["_mruby_js_get_hash_handle"] = _mruby_js_get_hash_handle;
function _mruby_js_get_symbol(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r4;
  if ((HEAP32[r2 + (r3 << 3) + 4 >> 2] & 255 | 0) != 4) {
    _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5325608);
  }
  _mrb_funcall_argv(r5, r1, (r3 << 3) + r2 | 0, _mrb_intern(r1, 5325416), 0, 0);
  r2 = _mruby_js_get_string(r1, r5, 0);
  STACKTOP = r4;
  return r2;
}
Module["_mruby_js_get_symbol"] = _mruby_js_get_symbol;
function _mruby_js_invoke_proc(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  r6 = r5;
  r7 = r5 + 16;
  r8 = r5 + 24;
  _mrb_obj_value1575(r6, r2 | 0);
  _mrb_yield_argv(r5 + 8, r1, r6, r3, r4);
  r4 = HEAP32[r1 + 48 >> 2];
  if ((r4 | 0) != 0) {
    _mrb_obj_value1575(r7, r4 | 0);
    _mrb_p(r1, r7);
  }
  _mrb_obj_value1575(r8, HEAP32[1327513] | 0);
  _mrb_funcall_argv(r5 + 32, r1, r8, _mrb_intern(r1, 5325212), 1, r6);
  STACKTOP = r5;
  return;
}
Module["_mruby_js_invoke_proc"] = _mruby_js_invoke_proc;
function _mruby_js_name_error(r1) {
  _mrb_raise(r1, _mrb_class_obj_get(r1, 5325168), 5324860);
  return;
}
Module["_mruby_js_name_error"] = _mruby_js_name_error;
function _mruby_js_set_integer(r1, r2, r3) {
  var r4;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r4 = r1;
  _mrb_fixnum_value1576(r4, r3);
  r3 = r4;
  r4 = r2;
  r2 = HEAP32[r3 + 4 >> 2];
  HEAP32[r4 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r4 + 4 >> 2] = r2;
  STACKTOP = r1;
  return;
}
Module["_mruby_js_set_integer"] = _mruby_js_set_integer;
function _mruby_js_set_float(r1, r2, r3) {
  var r4;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r4 = r1;
  _mrb_float_value1577(r4, r3);
  r3 = r4;
  r4 = r2;
  r2 = HEAP32[r3 + 4 >> 2];
  HEAP32[r4 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r4 + 4 >> 2] = r2;
  STACKTOP = r1;
  return;
}
Module["_mruby_js_set_float"] = _mruby_js_set_float;
function _mruby_js_set_boolean(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r4 = r1;
  r5 = r1 + 8;
  if ((r3 | 0) == 1) {
    _mrb_true_value1578(r4);
    r3 = r4;
    r4 = r2;
    r6 = r3 | 0;
    r7 = r3 + 4 | 0;
    r3 = HEAP32[r7 >> 2];
    r8 = r4 | 0;
    HEAP32[r8 >> 2] = HEAP32[r6 >> 2];
    r9 = r4 + 4 | 0;
    HEAP32[r9 >> 2] = r3;
    STACKTOP = r1;
    return;
  } else {
    _mrb_false_value1579(r5);
    r3 = r5;
    r5 = r2;
    r6 = r3 | 0;
    r7 = r3 + 4 | 0;
    r3 = HEAP32[r7 >> 2];
    r8 = r5 | 0;
    HEAP32[r8 >> 2] = HEAP32[r6 >> 2];
    r9 = r5 + 4 | 0;
    HEAP32[r9 >> 2] = r3;
    STACKTOP = r1;
    return;
  }
}
Module["_mruby_js_set_boolean"] = _mruby_js_set_boolean;
function _mruby_js_set_nil(r1, r2) {
  var r3, r4;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r3 = r1;
  _mrb_nil_value1580(r3);
  r4 = r3;
  r3 = r2;
  r2 = HEAP32[r4 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r3 + 4 >> 2] = r2;
  STACKTOP = r1;
  return;
}
Module["_mruby_js_set_nil"] = _mruby_js_set_nil;
function _mruby_js_set_string(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r4;
  _mrb_str_new_cstr(r5, r1, r3);
  r3 = r5;
  r5 = r2;
  r2 = HEAP32[r3 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r5 + 4 >> 2] = r2;
  STACKTOP = r4;
  return;
}
Module["_mruby_js_set_string"] = _mruby_js_set_string;
function _mruby_js_set_object_handle(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r5 = r4;
  r6 = r4 + 8;
  r7 = HEAP32[1327518];
  r8 = HEAP32[r7 >> 2] >>> 11 & 255;
  _mrb_obj_value1575(r6, _mrb_obj_alloc(r1, (r8 | 0) == 0 ? 9 : r8, r7) | 0);
  r7 = r6;
  r6 = r2;
  r8 = HEAP32[r7 + 4 >> 2];
  HEAP32[r6 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r6 + 4 >> 2] = r8;
  _mrb_fixnum_value1576(r5, r3);
  _mrb_funcall_argv(r4 + 16, r1, r2, HEAP16[r1 + 68 >> 1], 1, r5);
  STACKTOP = r4;
  return;
}
Module["_mruby_js_set_object_handle"] = _mruby_js_set_object_handle;
function _mruby_js_set_array_handle(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r5 = r4;
  r6 = r4 + 8;
  r7 = HEAP32[1327520];
  r8 = HEAP32[r7 >> 2] >>> 11 & 255;
  _mrb_obj_value1575(r6, _mrb_obj_alloc(r1, (r8 | 0) == 0 ? 9 : r8, r7) | 0);
  r7 = r6;
  r6 = r2;
  r8 = HEAP32[r7 + 4 >> 2];
  HEAP32[r6 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r6 + 4 >> 2] = r8;
  _mrb_fixnum_value1576(r5, r3);
  _mrb_funcall_argv(r4 + 16, r1, r2, HEAP16[r1 + 68 >> 1], 1, r5);
  STACKTOP = r4;
  return;
}
Module["_mruby_js_set_array_handle"] = _mruby_js_set_array_handle;
function _mruby_js_set_function_handle(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  r6 = r5;
  r7 = r5 + 16;
  r8 = r5 + 24;
  r9 = r5 + 32;
  r10 = HEAP32[1327519];
  r11 = HEAP32[r10 >> 2] >>> 11 & 255;
  _mrb_obj_value1575(r7, _mrb_obj_alloc(r1, (r11 | 0) == 0 ? 9 : r11, r10) | 0);
  r10 = r7;
  r7 = r2;
  r11 = HEAP32[r10 + 4 >> 2];
  HEAP32[r7 >> 2] = HEAP32[r10 >> 2];
  HEAP32[r7 + 4 >> 2] = r11;
  r11 = r6 | 0;
  _mrb_fixnum_value1576(r11, r3);
  r3 = r6 + 8 | 0;
  if ((r4 | 0) == 0) {
    _mrb_nil_value1580(r8);
    r6 = r8;
    r8 = r3;
    r7 = HEAP32[r6 + 4 >> 2];
    HEAP32[r8 >> 2] = HEAP32[r6 >> 2];
    HEAP32[r8 + 4 >> 2] = r7;
    r7 = r1 + 68 | 0;
    r8 = HEAP16[r7 >> 1];
    _mrb_funcall_argv(r9, r1, r2, r8, 2, r11);
    STACKTOP = r5;
    return;
  } else {
    r6 = r4;
    r4 = r3;
    r3 = HEAP32[r6 + 4 >> 2];
    HEAP32[r4 >> 2] = HEAP32[r6 >> 2];
    HEAP32[r4 + 4 >> 2] = r3;
    r7 = r1 + 68 | 0;
    r8 = HEAP16[r7 >> 1];
    _mrb_funcall_argv(r9, r1, r2, r8, 2, r11);
    STACKTOP = r5;
    return;
  }
}
Module["_mruby_js_set_function_handle"] = _mruby_js_set_function_handle;
_mruby_js_set_function_handle["X"] = 1;
function _mrb_mruby_js_gem_init(r1) {
  var r2;
  r2 = _mrb_define_module(r1, 5324540);
  HEAP32[1327513] = r2;
  _mrb_define_class_method(r1, r2, 5324132, 182);
  r2 = _mrb_define_class_under(r1, HEAP32[1327513], 5323772, HEAP32[r1 + 72 >> 2]);
  HEAP32[1327518] = r2;
  _mrb_define_method(r1, r2, 5323508, 338);
  _mrb_define_method(r1, HEAP32[1327518], 5323248, 550);
  _mrb_define_method(r1, HEAP32[1327518], 5322944, 558);
  _mrb_define_method(r1, HEAP32[1327518], 5322620, 550);
  _mrb_define_method(r1, HEAP32[1327518], 5322288, 558);
  _mrb_define_class_method(r1, HEAP32[1327518], 5322008, 494);
  r2 = _mrb_define_class_under(r1, HEAP32[1327513], 5321732, HEAP32[1327518]);
  HEAP32[1327519] = r2;
  _mrb_define_method(r1, r2, 5321456, 608);
  r2 = _mrb_define_class_under(r1, HEAP32[1327513], 5321216, HEAP32[1327518]);
  HEAP32[1327520] = r2;
  _mrb_define_class_method(r1, r2, 5322008, 138);
  _mrb_define_method(r1, HEAP32[r1 + 92 >> 2], 5326376, 124);
  return;
}
function _mrb_js_get_root_object(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r6 + 4 >> 2];
  r6 = r5;
  r7 = _mrb_intern(r2, 5318984);
  _mrb_iv_get(r6, r3, r7);
  r8 = r6 + 4 | 0;
  do {
    if ((HEAP32[r8 >> 2] & 255 | 0) == 0) {
      r9 = r6;
      if ((HEAP32[r9 >> 2] | 0) != 0) {
        break;
      }
      _js_get_root_object(r2, r6);
      do {
        if ((HEAP32[r8 >> 2] & 255 | 0) == 0) {
          if ((HEAP32[r9 >> 2] | 0) == 0) {
            break;
          } else {
            r4 = 1736;
            break;
          }
        } else {
          r4 = 1736;
        }
      } while (0);
      if (r4 == 1736) {
        _mrb_iv_set(r2, r3, r7, r6);
      }
      r9 = r6;
      r10 = r1;
      r11 = r9 | 0;
      r12 = r9 + 4 | 0;
      r9 = HEAP32[r12 >> 2];
      r13 = r10 | 0;
      HEAP32[r13 >> 2] = HEAP32[r11 >> 2];
      r14 = r10 + 4 | 0;
      HEAP32[r14 >> 2] = r9;
      STACKTOP = r5;
      return;
    }
  } while (0);
  r7 = r6;
  r6 = r1;
  r11 = r7 | 0;
  r12 = r7 + 4 | 0;
  r7 = HEAP32[r12 >> 2];
  r13 = r6 | 0;
  HEAP32[r13 >> 2] = HEAP32[r11 >> 2];
  r14 = r6 + 4 | 0;
  HEAP32[r14 >> 2] = r7;
  STACKTOP = r5;
  return;
}
function _mrb_js_obj_initialize(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4, r6 = r5 >> 2;
  r7 = r4 + 4;
  HEAP32[r6] = -1;
  _mrb_get_args(r2, 5320132, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((HEAP32[r6] | 0) < 1) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5325168), 5319900);
  }
  r5 = _malloc(4);
  if ((r5 | 0) == 0) {
    _mrb_raise(r2, _mrb_class_obj_get(r2, 5319792), 5319664);
  }
  HEAP32[r5 >> 2] = HEAP32[r6];
  r6 = _mrb_intern(r2, 5319356);
  _mrb_obj_value1575(r7, _mrb_data_object_alloc(r2, HEAP32[r2 + 72 >> 2], r5, 5292360) | 0);
  _mrb_iv_set(r2, r3, r6, r7);
  r7 = r3;
  r3 = r1;
  r1 = HEAP32[r7 + 4 >> 2];
  HEAP32[r3 >> 2] = HEAP32[r7 >> 2];
  HEAP32[r3 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_js_obj_get(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  _mrb_nil_value1580(r6);
  _mrb_get_args(r2, 5320316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  _js_get_field(r2, r3, r5, r6);
  r5 = r6;
  r6 = r1;
  r1 = HEAP32[r5 + 4 >> 2];
  HEAP32[r6 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r6 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_js_obj_set(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  _mrb_get_args(r2, 5320556, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  _js_set_field(r2, r3, r5, r6);
  _mrb_nil_value1580(r1);
  STACKTOP = r4;
  return;
}
function _mrb_js_obj_create(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_nil_value1580(r5);
  _js_create_empty_object(r2, r5);
  r2 = r5;
  r5 = r1;
  r1 = HEAP32[r2 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r2 >> 2];
  HEAP32[r5 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_js_func_invoke_internal(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4, r6 = r5 >> 2;
  r7 = r4 + 4;
  r8 = r4 + 12;
  r9 = r4 + 20, r10 = r9 >> 2;
  r11 = r4 + 24, r12 = r11 >> 2;
  r13 = r4 + 28;
  HEAP32[r6] = 0;
  _mrb_nil_value1580(r7);
  HEAP32[r10] = 0;
  HEAP32[r12] = -1;
  _mrb_get_args(r2, 5321004, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r11, HEAP32[tempInt + 4 >> 2] = r5, HEAP32[tempInt + 8 >> 2] = r9, tempInt));
  if ((HEAP32[r12] | 0) == 2) {
    r9 = HEAP32[r6];
    r5 = r9;
    r11 = r8;
    r14 = HEAP32[r5 + 4 >> 2];
    r15 = r11 | 0;
    HEAP32[r15 >> 2] = HEAP32[r5 >> 2];
    r16 = r11 + 4 | 0;
    HEAP32[r16 >> 2] = r14;
    HEAP32[r6] = r9 + 8 | 0;
    HEAP32[r10] = HEAP32[r10] - 1 | 0;
  } else {
    _mrb_funcall_argv(r13, r2, r3, _mrb_intern(r2, 5320748), 0, 0);
    r9 = r13;
    r13 = r8;
    r14 = HEAP32[r9 + 4 >> 2];
    HEAP32[r13 >> 2] = HEAP32[r9 >> 2];
    HEAP32[r13 + 4 >> 2] = r14;
  }
  _js_invoke(r2, r8, _mruby_js_get_object_handle_value(r2, r3), HEAP32[r6], HEAP32[r10], r7, HEAP32[r12]);
  r12 = r7;
  r7 = r1;
  r15 = r12 | 0;
  r16 = r12 + 4 | 0;
  r12 = HEAP32[r16 >> 2];
  HEAP32[r7 >> 2] = HEAP32[r15 >> 2];
  HEAP32[r7 + 4 >> 2] = r12;
  STACKTOP = r4;
  return;
}
_mrb_js_func_invoke_internal["X"] = 1;
function _GENERATED_TMP_mrb_mruby_js_gem_init(r1) {
  var r2, r3, r4, r5;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r3 = r2 + 8;
  r4 = HEAP32[r1 + 544 >> 2];
  _mrb_mruby_js_gem_init(r1);
  _mrb_load_irep(r2, r1, 5310868);
  r5 = HEAP32[r1 + 48 >> 2];
  if ((r5 | 0) == 0) {
    _mrb_gc_arena_restore(r1, _mrb_gc_arena_save(r4));
    STACKTOP = r2;
    return;
  } else {
    _mrb_obj_value1531(r3, r5 | 0);
    _mrb_p(r1, r3);
    _exit(0);
  }
}
function _float_id(r1) {
  var r2;
  r2 = (HEAPF32[tempDoublePtr >> 2] = r1, HEAP32[tempDoublePtr >> 2]);
  r1 = (r2 >> 24) + (((r2 >>> 16 << 24 >> 24) + (((r2 >>> 8 << 24 >> 24) + ((r2 << 24 >> 24) * 65599 & -1)) * 65599 & -1)) * 65599 & -1) | 0;
  return (r1 >> 5) + r1 | 0;
}
function _mrb_get_datatype(r1) {
  var r2, r3, r4;
  r2 = STACKTOP;
  r3 = r1;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r1 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r1 + 4 >> 2] = HEAP32[r3 + 4 >> 2];
  do {
    if ((HEAP32[r1 + 4 >> 2] & 255 | 0) == 25) {
      r3 = HEAP32[r1 >> 2];
      if ((HEAP32[r3 + 16 >> 2] | 0) != 5309544) {
        r4 = 0;
        break;
      }
      r4 = HEAP32[r3 + 20 >> 2];
    } else {
      r4 = 0;
    }
  } while (0);
  STACKTOP = r2;
  return r4;
}
function _mrb_js_array_create(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_nil_value1580(r5);
  _js_create_array(r2, 0, -1, r5);
  r2 = r5;
  r5 = r1;
  r1 = HEAP32[r2 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r2 >> 2];
  HEAP32[r5 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mrb_array_tojs(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r3;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r3 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r3 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  _mrb_nil_value1580(r5);
  r6 = HEAP32[r3 >> 2];
  _js_create_array(r2, HEAP32[r6 + 20 >> 2], HEAP32[r6 + 12 >> 2], r5);
  r6 = r5;
  r5 = r1;
  r1 = HEAP32[r6 + 4 >> 2];
  HEAP32[r5 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r5 + 4 >> 2] = r1;
  STACKTOP = r4;
  return;
}
function _mruby_js_object_handle_free(r1, r2) {
  if ((r2 | 0) == 0) {
    _free(r2);
    return;
  }
  _js_release_object(r1, HEAP32[r2 >> 2]);
  _free(r2);
  return;
}
function _mrb_init_mrblib(r1) {
  var r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  _mrb_load_irep(r2, r1, 5292368);
  STACKTOP = r2;
  return;
}
function _mrb_init_comparable(r1) {
  _mrb_define_module(r1, 5325072);
  return;
}
function _mrb_init_enumerable(r1) {
  _mrb_define_module(r1, 5325048);
  return;
}
function _mrb_data_object_alloc(r1, r2, r3, r4) {
  var r5;
  r5 = _mrb_obj_alloc(r1, 25, r2);
  HEAP32[r5 + 20 >> 2] = r3;
  HEAP32[r5 + 16 >> 2] = r4;
  return r5;
}
function _mrb_check_datatype(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  r4 = STACKTOP;
  r5 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  if ((HEAP32[r2 + 4 >> 2] & 255 | 0) != 25) {
    _mrb_check_type(r1, r2, 25);
  }
  r5 = r2;
  r2 = HEAP32[r5 >> 2];
  r6 = HEAP32[r2 + 16 >> 2];
  if ((r6 | 0) == (r3 | 0)) {
    r7 = r2;
    r8 = r7 + 20 | 0;
    r9 = r8;
    r10 = HEAP32[r9 >> 2];
    STACKTOP = r4;
    return r10;
  }
  r2 = HEAP32[r6 >> 2];
  r6 = _mrb_class_obj_get(r1, 5325036);
  r11 = HEAP32[r3 >> 2];
  _mrb_raisef(r1, r6, 5324616, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r2, HEAP32[tempInt + 4 >> 2] = r11, tempInt));
  r7 = HEAP32[r5 >> 2];
  r8 = r7 + 20 | 0;
  r9 = r8;
  r10 = HEAP32[r9 >> 2];
  STACKTOP = r4;
  return r10;
}
function _mrb_to_id(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r3 = 0;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r5 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r5 >> 2];
  HEAP32[r2 + 4 >> 2] = HEAP32[r5 + 4 >> 2];
  r5 = r4;
  r6 = r4 + 8;
  r7 = r4 + 16;
  r8 = r2 + 4 | 0;
  r9 = HEAP32[r8 >> 2] & 255;
  if ((r9 | 0) == 4) {
    r10 = HEAP16[r2 >> 1];
    STACKTOP = r4;
    return r10;
  } else if ((r9 | 0) != 17) {
    r3 = 1781;
  }
  if (r3 == 1781) {
    _mrb_check_string_type(r5, r1, r2);
    r3 = HEAP32[r5 >> 2];
    r9 = HEAP32[r5 + 4 >> 2];
    if ((r9 & 255 | r3 | 0) == 0) {
      _mrb_inspect(r6, r1, r2);
      r5 = HEAP32[r6 >> 2];
      r11 = HEAP32[r6 + 4 >> 2];
      _mrb_raisef(r1, _mrb_class_obj_get(r1, 5325036), 5323120, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[r5 + 20 >> 2], tempInt));
      r12 = r5;
      r13 = r11;
    } else {
      r12 = r3;
      r13 = r9;
    }
    HEAP32[r2 >> 2] = r12;
    HEAP32[r8 >> 2] = r13;
  }
  _mrb_str_intern(r7, r1, r2);
  r1 = r7;
  r7 = r2;
  r2 = HEAP32[r1 >> 2];
  r13 = HEAP32[r1 + 4 >> 2];
  HEAP32[r7 >> 2] = r2;
  HEAP32[r7 + 4 >> 2] = r13;
  r10 = r2 & 65535;
  STACKTOP = r4;
  return r10;
}
_mrb_to_id["X"] = 1;
function _mrb_obj_id(r1) {
  var r2, r3, r4;
  r2 = STACKTOP;
  r3 = r1;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[r1 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r1 + 4 >> 2] = HEAP32[r3 + 4 >> 2];
  r3 = HEAP32[r1 + 4 >> 2] & 255;
  if ((r3 | 0) == 2) {
    r4 = 3;
  } else if ((r3 | 0) == 4) {
    r4 = HEAP16[r1 >> 1] << 16 >> 16 ^ 4;
  } else if ((r3 | 0) == 3) {
    r4 = _float_id(HEAP32[r1 >> 2] | 0) ^ 6;
  } else if ((r3 | 0) == 0) {
    STACKTOP = r2;
    return (HEAP32[r1 >> 2] | 0) == 0 & 1;
  } else if ((r3 | 0) == 1 | (r3 | 0) == 5) {
    r4 = r3;
  } else if ((r3 | 0) == 6) {
    r4 = _float_id(HEAPF32[r1 >> 2]) ^ 6;
  } else {
    r4 = HEAP32[r1 >> 2] ^ r3;
  }
  STACKTOP = r2;
  return r4;
}
function _malloc(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  do {
    if (r1 >>> 0 < 245) {
      if (r1 >>> 0 < 11) {
        r2 = 16;
      } else {
        r2 = r1 + 11 & -8;
      }
      r3 = r2 >>> 3;
      r4 = HEAP32[1331642];
      r5 = r4 >>> (r3 >>> 0);
      if ((r5 & 3 | 0) != 0) {
        r6 = (r5 & 1 ^ 1) + r3 | 0;
        r7 = r6 << 1;
        r8 = (r7 << 2) + 5326608 | 0;
        r9 = (r7 + 2 << 2) + 5326608 | 0;
        r7 = HEAP32[r9 >> 2];
        r10 = r7 + 8 | 0;
        r11 = HEAP32[r10 >> 2];
        do {
          if ((r8 | 0) == (r11 | 0)) {
            HEAP32[1331642] = r4 & (1 << r6 ^ -1);
          } else {
            if (r11 >>> 0 < HEAP32[1331646] >>> 0) {
              _abort();
            } else {
              HEAP32[r9 >> 2] = r11;
              HEAP32[r11 + 12 >> 2] = r8;
              break;
            }
          }
        } while (0);
        r8 = r6 << 3;
        HEAP32[r7 + 4 >> 2] = r8 | 3;
        r11 = r7 + (r8 | 4) | 0;
        HEAP32[r11 >> 2] = HEAP32[r11 >> 2] | 1;
        r12 = r10;
        return r12;
      }
      if (r2 >>> 0 <= HEAP32[1331644] >>> 0) {
        r13 = r2;
        break;
      }
      if ((r5 | 0) == 0) {
        if ((HEAP32[1331643] | 0) == 0) {
          r13 = r2;
          break;
        }
        r11 = _tmalloc_small(r2);
        if ((r11 | 0) == 0) {
          r13 = r2;
          break;
        } else {
          r12 = r11;
        }
        return r12;
      }
      r11 = 2 << r3;
      r8 = r5 << r3 & (r11 | -r11);
      r11 = (r8 & -r8) - 1 | 0;
      r8 = r11 >>> 12 & 16;
      r9 = r11 >>> (r8 >>> 0);
      r11 = r9 >>> 5 & 8;
      r14 = r9 >>> (r11 >>> 0);
      r9 = r14 >>> 2 & 4;
      r15 = r14 >>> (r9 >>> 0);
      r14 = r15 >>> 1 & 2;
      r16 = r15 >>> (r14 >>> 0);
      r15 = r16 >>> 1 & 1;
      r17 = (r11 | r8 | r9 | r14 | r15) + (r16 >>> (r15 >>> 0)) | 0;
      r15 = r17 << 1;
      r16 = (r15 << 2) + 5326608 | 0;
      r14 = (r15 + 2 << 2) + 5326608 | 0;
      r15 = HEAP32[r14 >> 2];
      r9 = r15 + 8 | 0;
      r8 = HEAP32[r9 >> 2];
      do {
        if ((r16 | 0) == (r8 | 0)) {
          HEAP32[1331642] = r4 & (1 << r17 ^ -1);
        } else {
          if (r8 >>> 0 < HEAP32[1331646] >>> 0) {
            _abort();
          } else {
            HEAP32[r14 >> 2] = r8;
            HEAP32[r8 + 12 >> 2] = r16;
            break;
          }
        }
      } while (0);
      r16 = r17 << 3;
      r8 = r16 - r2 | 0;
      HEAP32[r15 + 4 >> 2] = r2 | 3;
      r14 = r15;
      r4 = r14 + r2 | 0;
      HEAP32[r14 + (r2 | 4) >> 2] = r8 | 1;
      HEAP32[r14 + r16 >> 2] = r8;
      r16 = HEAP32[1331644];
      if ((r16 | 0) != 0) {
        r14 = HEAP32[1331647];
        r3 = r16 >>> 3;
        r16 = r3 << 1;
        r5 = (r16 << 2) + 5326608 | 0;
        r10 = HEAP32[1331642];
        r7 = 1 << r3;
        do {
          if ((r10 & r7 | 0) == 0) {
            HEAP32[1331642] = r10 | r7;
            r18 = r5;
            r19 = (r16 + 2 << 2) + 5326608 | 0;
          } else {
            r3 = (r16 + 2 << 2) + 5326608 | 0;
            r6 = HEAP32[r3 >> 2];
            if (r6 >>> 0 >= HEAP32[1331646] >>> 0) {
              r18 = r6;
              r19 = r3;
              break;
            }
            _abort();
          }
        } while (0);
        HEAP32[r19 >> 2] = r14;
        HEAP32[r18 + 12 >> 2] = r14;
        HEAP32[r14 + 8 >> 2] = r18;
        HEAP32[r14 + 12 >> 2] = r5;
      }
      HEAP32[1331644] = r8;
      HEAP32[1331647] = r4;
      r12 = r9;
      return r12;
    } else {
      if (r1 >>> 0 > 4294967231) {
        r13 = -1;
        break;
      }
      r16 = r1 + 11 & -8;
      if ((HEAP32[1331643] | 0) == 0) {
        r13 = r16;
        break;
      }
      r7 = _tmalloc_large(r16);
      if ((r7 | 0) == 0) {
        r13 = r16;
        break;
      } else {
        r12 = r7;
      }
      return r12;
    }
  } while (0);
  r1 = HEAP32[1331644];
  if (r13 >>> 0 > r1 >>> 0) {
    r18 = HEAP32[1331645];
    if (r13 >>> 0 < r18 >>> 0) {
      r19 = r18 - r13 | 0;
      HEAP32[1331645] = r19;
      r18 = HEAP32[1331648];
      r2 = r18;
      HEAP32[1331648] = r2 + r13 | 0;
      HEAP32[r13 + (r2 + 4) >> 2] = r19 | 1;
      HEAP32[r18 + 4 >> 2] = r13 | 3;
      r12 = r18 + 8 | 0;
      return r12;
    } else {
      r12 = _sys_alloc(r13);
      return r12;
    }
  } else {
    r18 = r1 - r13 | 0;
    r19 = HEAP32[1331647];
    if (r18 >>> 0 > 15) {
      r2 = r19;
      HEAP32[1331647] = r2 + r13 | 0;
      HEAP32[1331644] = r18;
      HEAP32[r13 + (r2 + 4) >> 2] = r18 | 1;
      HEAP32[r2 + r1 >> 2] = r18;
      HEAP32[r19 + 4 >> 2] = r13 | 3;
    } else {
      HEAP32[1331644] = 0;
      HEAP32[1331647] = 0;
      HEAP32[r19 + 4 >> 2] = r1 | 3;
      r13 = r1 + (r19 + 4) | 0;
      HEAP32[r13 >> 2] = HEAP32[r13 >> 2] | 1;
    }
    r12 = r19 + 8 | 0;
    return r12;
  }
}
_malloc["X"] = 1;
function _tmalloc_small(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21;
  r2 = HEAP32[1331643];
  r3 = (r2 & -r2) - 1 | 0;
  r2 = r3 >>> 12 & 16;
  r4 = r3 >>> (r2 >>> 0);
  r3 = r4 >>> 5 & 8;
  r5 = r4 >>> (r3 >>> 0);
  r4 = r5 >>> 2 & 4;
  r6 = r5 >>> (r4 >>> 0);
  r5 = r6 >>> 1 & 2;
  r7 = r6 >>> (r5 >>> 0);
  r6 = r7 >>> 1 & 1;
  r8 = HEAP32[((r3 | r2 | r4 | r5 | r6) + (r7 >>> (r6 >>> 0)) << 2) + 5326872 >> 2];
  r6 = r8;
  r7 = r8, r5 = r7 >> 2;
  r4 = (HEAP32[r8 + 4 >> 2] & -8) - r1 | 0;
  while (1) {
    r8 = HEAP32[r6 + 16 >> 2];
    if ((r8 | 0) == 0) {
      r2 = HEAP32[r6 + 20 >> 2];
      if ((r2 | 0) == 0) {
        break;
      } else {
        r9 = r2;
      }
    } else {
      r9 = r8;
    }
    r8 = (HEAP32[r9 + 4 >> 2] & -8) - r1 | 0;
    r2 = r8 >>> 0 < r4 >>> 0;
    r6 = r9;
    r7 = r2 ? r9 : r7, r5 = r7 >> 2;
    r4 = r2 ? r8 : r4;
  }
  r9 = r7;
  r6 = HEAP32[1331646];
  if (r9 >>> 0 < r6 >>> 0) {
    _abort();
  }
  r8 = r9 + r1 | 0;
  r2 = r8;
  if (r9 >>> 0 >= r8 >>> 0) {
    _abort();
  }
  r8 = HEAP32[r5 + 6];
  r3 = HEAP32[r5 + 3];
  L2222 : do {
    if ((r3 | 0) == (r7 | 0)) {
      r10 = r7 + 20 | 0;
      r11 = HEAP32[r10 >> 2];
      do {
        if ((r11 | 0) == 0) {
          r12 = r7 + 16 | 0;
          r13 = HEAP32[r12 >> 2];
          if ((r13 | 0) == 0) {
            r14 = 0, r15 = r14 >> 2;
            break L2222;
          } else {
            r16 = r13;
            r17 = r12;
            break;
          }
        } else {
          r16 = r11;
          r17 = r10;
        }
      } while (0);
      while (1) {
        r10 = r16 + 20 | 0;
        r11 = HEAP32[r10 >> 2];
        if ((r11 | 0) != 0) {
          r16 = r11;
          r17 = r10;
          continue;
        }
        r10 = r16 + 16 | 0;
        r11 = HEAP32[r10 >> 2];
        if ((r11 | 0) == 0) {
          break;
        } else {
          r16 = r11;
          r17 = r10;
        }
      }
      if (r17 >>> 0 < r6 >>> 0) {
        _abort();
      } else {
        HEAP32[r17 >> 2] = 0;
        r14 = r16, r15 = r14 >> 2;
        break;
      }
    } else {
      r10 = HEAP32[r5 + 2];
      if (r10 >>> 0 < r6 >>> 0) {
        _abort();
      } else {
        HEAP32[r10 + 12 >> 2] = r3;
        HEAP32[r3 + 8 >> 2] = r10;
        r14 = r3, r15 = r14 >> 2;
        break;
      }
    }
  } while (0);
  L2238 : do {
    if ((r8 | 0) != 0) {
      r3 = r7 + 28 | 0;
      r6 = (HEAP32[r3 >> 2] << 2) + 5326872 | 0;
      do {
        if ((r7 | 0) == (HEAP32[r6 >> 2] | 0)) {
          HEAP32[r6 >> 2] = r14;
          if ((r14 | 0) != 0) {
            break;
          }
          HEAP32[1331643] = HEAP32[1331643] & (1 << HEAP32[r3 >> 2] ^ -1);
          break L2238;
        } else {
          if (r8 >>> 0 < HEAP32[1331646] >>> 0) {
            _abort();
          }
          r16 = r8 + 16 | 0;
          if ((HEAP32[r16 >> 2] | 0) == (r7 | 0)) {
            HEAP32[r16 >> 2] = r14;
          } else {
            HEAP32[r8 + 20 >> 2] = r14;
          }
          if ((r14 | 0) == 0) {
            break L2238;
          }
        }
      } while (0);
      if (r14 >>> 0 < HEAP32[1331646] >>> 0) {
        _abort();
      }
      HEAP32[r15 + 6] = r8;
      r3 = HEAP32[r5 + 4];
      do {
        if ((r3 | 0) != 0) {
          if (r3 >>> 0 < HEAP32[1331646] >>> 0) {
            _abort();
          } else {
            HEAP32[r15 + 4] = r3;
            HEAP32[r3 + 24 >> 2] = r14;
            break;
          }
        }
      } while (0);
      r3 = HEAP32[r5 + 5];
      if ((r3 | 0) == 0) {
        break;
      }
      if (r3 >>> 0 < HEAP32[1331646] >>> 0) {
        _abort();
      } else {
        HEAP32[r15 + 5] = r3;
        HEAP32[r3 + 24 >> 2] = r14;
        break;
      }
    }
  } while (0);
  if (r4 >>> 0 < 16) {
    r14 = r4 + r1 | 0;
    HEAP32[r5 + 1] = r14 | 3;
    r15 = r14 + (r9 + 4) | 0;
    HEAP32[r15 >> 2] = HEAP32[r15 >> 2] | 1;
    r18 = r7 + 8 | 0;
    r19 = r18;
    return r19;
  }
  HEAP32[r5 + 1] = r1 | 3;
  HEAP32[r1 + (r9 + 4) >> 2] = r4 | 1;
  HEAP32[r9 + r4 + r1 >> 2] = r4;
  r1 = HEAP32[1331644];
  if ((r1 | 0) != 0) {
    r9 = HEAP32[1331647];
    r5 = r1 >>> 3;
    r1 = r5 << 1;
    r15 = (r1 << 2) + 5326608 | 0;
    r14 = HEAP32[1331642];
    r8 = 1 << r5;
    do {
      if ((r14 & r8 | 0) == 0) {
        HEAP32[1331642] = r14 | r8;
        r20 = r15;
        r21 = (r1 + 2 << 2) + 5326608 | 0;
      } else {
        r5 = (r1 + 2 << 2) + 5326608 | 0;
        r3 = HEAP32[r5 >> 2];
        if (r3 >>> 0 >= HEAP32[1331646] >>> 0) {
          r20 = r3;
          r21 = r5;
          break;
        }
        _abort();
      }
    } while (0);
    HEAP32[r21 >> 2] = r9;
    HEAP32[r20 + 12 >> 2] = r9;
    HEAP32[r9 + 8 >> 2] = r20;
    HEAP32[r9 + 12 >> 2] = r15;
  }
  HEAP32[1331644] = r4;
  HEAP32[1331647] = r2;
  r18 = r7 + 8 | 0;
  r19 = r18;
  return r19;
}
_tmalloc_small["X"] = 1;
function _sys_alloc(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22;
  r2 = 0;
  if ((HEAP32[1327495] | 0) == 0) {
    _init_mparams();
  }
  L2283 : do {
    if ((HEAP32[1331752] & 4 | 0) == 0) {
      r3 = HEAP32[1331648];
      do {
        if ((r3 | 0) == 0) {
          r2 = 1898;
        } else {
          r4 = _segment_holding(r3);
          if ((r4 | 0) == 0) {
            r2 = 1898;
            break;
          }
          r5 = HEAP32[1327497];
          r6 = r1 + 47 - HEAP32[1331645] + r5 & -r5;
          if (r6 >>> 0 >= 2147483647) {
            r7 = 0;
            break;
          }
          r5 = _sbrk(r6);
          r8 = (r5 | 0) == (HEAP32[r4 >> 2] + HEAP32[r4 + 4 >> 2] | 0);
          r9 = r8 ? r5 : -1;
          r10 = r8 ? r6 : 0;
          r11 = r5;
          r12 = r6;
          r2 = 1905;
          break;
        }
      } while (0);
      do {
        if (r2 == 1898) {
          r3 = _sbrk(0);
          if ((r3 | 0) == -1) {
            r7 = 0;
            break;
          }
          r6 = HEAP32[1327497];
          r5 = r6 + (r1 + 47) & -r6;
          r6 = r3;
          r8 = HEAP32[1327496];
          r4 = r8 - 1 | 0;
          if ((r4 & r6 | 0) == 0) {
            r13 = r5;
          } else {
            r13 = r5 - r6 + (r4 + r6 & -r8) | 0;
          }
          if (r13 >>> 0 >= 2147483647) {
            r7 = 0;
            break;
          }
          r8 = _sbrk(r13);
          r6 = (r8 | 0) == (r3 | 0);
          r9 = r6 ? r3 : -1;
          r10 = r6 ? r13 : 0;
          r11 = r8;
          r12 = r13;
          r2 = 1905;
          break;
        }
      } while (0);
      L2296 : do {
        if (r2 == 1905) {
          r8 = -r12 | 0;
          if ((r9 | 0) != -1) {
            r14 = r10;
            r15 = r9;
            r2 = 1918;
            break L2283;
          }
          do {
            if ((r11 | 0) != -1 & r12 >>> 0 < 2147483647) {
              if (r12 >>> 0 >= (r1 + 48 | 0) >>> 0) {
                r16 = r12;
                break;
              }
              r6 = HEAP32[1327497];
              r3 = r1 + 47 - r12 + r6 & -r6;
              if (r3 >>> 0 >= 2147483647) {
                r16 = r12;
                break;
              }
              if ((_sbrk(r3) | 0) == -1) {
                _sbrk(r8);
                r7 = r10;
                break L2296;
              } else {
                r16 = r3 + r12 | 0;
                break;
              }
            } else {
              r16 = r12;
            }
          } while (0);
          if ((r11 | 0) != -1) {
            r14 = r16;
            r15 = r11;
            r2 = 1918;
            break L2283;
          }
          HEAP32[1331752] = HEAP32[1331752] | 4;
          r17 = r10;
          r2 = 1915;
          break L2283;
        }
      } while (0);
      HEAP32[1331752] = HEAP32[1331752] | 4;
      r17 = r7;
      r2 = 1915;
      break;
    } else {
      r17 = 0;
      r2 = 1915;
    }
  } while (0);
  do {
    if (r2 == 1915) {
      r7 = HEAP32[1327497];
      r10 = r7 + (r1 + 47) & -r7;
      if (r10 >>> 0 >= 2147483647) {
        break;
      }
      r7 = _sbrk(r10);
      r10 = _sbrk(0);
      if (!((r10 | 0) != -1 & (r7 | 0) != -1 & r7 >>> 0 < r10 >>> 0)) {
        break;
      }
      r11 = r10 - r7 | 0;
      r10 = r11 >>> 0 > (r1 + 40 | 0) >>> 0;
      r16 = r10 ? r7 : -1;
      if ((r16 | 0) == -1) {
        break;
      } else {
        r14 = r10 ? r11 : r17;
        r15 = r16;
        r2 = 1918;
        break;
      }
    }
  } while (0);
  do {
    if (r2 == 1918) {
      r17 = HEAP32[1331750] + r14 | 0;
      HEAP32[1331750] = r17;
      if (r17 >>> 0 > HEAP32[1331751] >>> 0) {
        HEAP32[1331751] = r17;
      }
      r17 = HEAP32[1331648];
      L2318 : do {
        if ((r17 | 0) == 0) {
          r16 = HEAP32[1331646];
          if ((r16 | 0) == 0 | r15 >>> 0 < r16 >>> 0) {
            HEAP32[1331646] = r15;
          }
          HEAP32[1331753] = r15;
          HEAP32[1331754] = r14;
          HEAP32[1331756] = 0;
          HEAP32[1331651] = HEAP32[1327495];
          HEAP32[1331650] = -1;
          _init_bins();
          _init_top(r15, r14 - 40 | 0);
        } else {
          r16 = 5327012, r11 = r16 >> 2;
          while (1) {
            r18 = HEAP32[r11];
            r19 = r16 + 4 | 0;
            r20 = HEAP32[r19 >> 2];
            if ((r15 | 0) == (r18 + r20 | 0)) {
              r2 = 1926;
              break;
            }
            r10 = HEAP32[r11 + 2];
            if ((r10 | 0) == 0) {
              break;
            } else {
              r16 = r10, r11 = r16 >> 2;
            }
          }
          do {
            if (r2 == 1926) {
              if ((HEAP32[r11 + 3] & 8 | 0) != 0) {
                break;
              }
              r16 = r17;
              if (!(r16 >>> 0 >= r18 >>> 0 & r16 >>> 0 < r15 >>> 0)) {
                break;
              }
              HEAP32[r19 >> 2] = r20 + r14 | 0;
              _init_top(HEAP32[1331648], HEAP32[1331645] + r14 | 0);
              break L2318;
            }
          } while (0);
          if (r15 >>> 0 < HEAP32[1331646] >>> 0) {
            HEAP32[1331646] = r15;
          }
          r11 = r15 + r14 | 0;
          r16 = 5327012;
          while (1) {
            r21 = r16 | 0;
            if ((HEAP32[r21 >> 2] | 0) == (r11 | 0)) {
              r2 = 1934;
              break;
            }
            r10 = HEAP32[r16 + 8 >> 2];
            if ((r10 | 0) == 0) {
              break;
            } else {
              r16 = r10;
            }
          }
          do {
            if (r2 == 1934) {
              if ((HEAP32[r16 + 12 >> 2] & 8 | 0) != 0) {
                break;
              }
              HEAP32[r21 >> 2] = r15;
              r10 = r16 + 4 | 0;
              HEAP32[r10 >> 2] = HEAP32[r10 >> 2] + r14 | 0;
              r22 = _prepend_alloc(r15, r11, r1);
              return r22;
            }
          } while (0);
          _add_segment(r15, r14);
        }
      } while (0);
      r17 = HEAP32[1331645];
      if (r17 >>> 0 <= r1 >>> 0) {
        break;
      }
      r11 = r17 - r1 | 0;
      HEAP32[1331645] = r11;
      r17 = HEAP32[1331648];
      r16 = r17;
      HEAP32[1331648] = r16 + r1 | 0;
      HEAP32[r1 + (r16 + 4) >> 2] = r11 | 1;
      HEAP32[r17 + 4 >> 2] = r1 | 3;
      r22 = r17 + 8 | 0;
      return r22;
    }
  } while (0);
  HEAP32[___errno_location() >> 2] = 12;
  r22 = 0;
  return r22;
}
_sys_alloc["X"] = 1;
function _tmalloc_large(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36;
  r2 = r1 >> 2;
  r3 = 0;
  r4 = -r1 | 0;
  r5 = r1 >>> 8;
  do {
    if ((r5 | 0) == 0) {
      r6 = 0;
    } else {
      if (r1 >>> 0 > 16777215) {
        r6 = 31;
        break;
      }
      r7 = (r5 + 1048320 | 0) >>> 16 & 8;
      r8 = r5 << r7;
      r9 = (r8 + 520192 | 0) >>> 16 & 4;
      r10 = r8 << r9;
      r8 = (r10 + 245760 | 0) >>> 16 & 2;
      r11 = 14 - (r9 | r7 | r8) + (r10 << r8 >>> 15) | 0;
      r6 = r1 >>> ((r11 + 7 | 0) >>> 0) & 1 | r11 << 1;
    }
  } while (0);
  r5 = HEAP32[(r6 << 2) + 5326872 >> 2];
  L2352 : do {
    if ((r5 | 0) == 0) {
      r12 = 0;
      r13 = r4;
      r14 = 0;
    } else {
      if ((r6 | 0) == 31) {
        r15 = 0;
      } else {
        r15 = 25 - (r6 >>> 1) | 0;
      }
      r11 = 0;
      r8 = r4;
      r10 = r5, r7 = r10 >> 2;
      r9 = r1 << r15;
      r16 = 0;
      while (1) {
        r17 = HEAP32[r7 + 1] & -8;
        r18 = r17 - r1 | 0;
        if (r18 >>> 0 < r8 >>> 0) {
          if ((r17 | 0) == (r1 | 0)) {
            r12 = r10;
            r13 = r18;
            r14 = r10;
            break L2352;
          } else {
            r19 = r10;
            r20 = r18;
          }
        } else {
          r19 = r11;
          r20 = r8;
        }
        r18 = HEAP32[r7 + 5];
        r17 = HEAP32[((r9 >>> 31 << 2) + 16 >> 2) + r7];
        r21 = (r18 | 0) == 0 | (r18 | 0) == (r17 | 0) ? r16 : r18;
        if ((r17 | 0) == 0) {
          r12 = r19;
          r13 = r20;
          r14 = r21;
          break L2352;
        } else {
          r11 = r19;
          r8 = r20;
          r10 = r17, r7 = r10 >> 2;
          r9 = r9 << 1;
          r16 = r21;
        }
      }
    }
  } while (0);
  do {
    if ((r14 | 0) == 0 & (r12 | 0) == 0) {
      r20 = 2 << r6;
      r19 = HEAP32[1331643] & (r20 | -r20);
      if ((r19 | 0) == 0) {
        r22 = 0;
        return r22;
      } else {
        r20 = (r19 & -r19) - 1 | 0;
        r19 = r20 >>> 12 & 16;
        r15 = r20 >>> (r19 >>> 0);
        r20 = r15 >>> 5 & 8;
        r5 = r15 >>> (r20 >>> 0);
        r15 = r5 >>> 2 & 4;
        r4 = r5 >>> (r15 >>> 0);
        r5 = r4 >>> 1 & 2;
        r16 = r4 >>> (r5 >>> 0);
        r4 = r16 >>> 1 & 1;
        r23 = HEAP32[((r20 | r19 | r15 | r5 | r4) + (r16 >>> (r4 >>> 0)) << 2) + 5326872 >> 2];
        break;
      }
    } else {
      r23 = r14;
    }
  } while (0);
  L2369 : do {
    if ((r23 | 0) == 0) {
      r24 = r13;
      r25 = r12, r26 = r25 >> 2;
    } else {
      r14 = r23, r6 = r14 >> 2;
      r4 = r13;
      r16 = r12;
      while (1) {
        r5 = (HEAP32[r6 + 1] & -8) - r1 | 0;
        r15 = r5 >>> 0 < r4 >>> 0;
        r19 = r15 ? r5 : r4;
        r5 = r15 ? r14 : r16;
        r15 = HEAP32[r6 + 4];
        if ((r15 | 0) != 0) {
          r14 = r15, r6 = r14 >> 2;
          r4 = r19;
          r16 = r5;
          continue;
        }
        r15 = HEAP32[r6 + 5];
        if ((r15 | 0) == 0) {
          r24 = r19;
          r25 = r5, r26 = r25 >> 2;
          break L2369;
        } else {
          r14 = r15, r6 = r14 >> 2;
          r4 = r19;
          r16 = r5;
        }
      }
    }
  } while (0);
  if ((r25 | 0) == 0) {
    r22 = 0;
    return r22;
  }
  if (r24 >>> 0 >= (HEAP32[1331644] - r1 | 0) >>> 0) {
    r22 = 0;
    return r22;
  }
  r12 = r25, r13 = r12 >> 2;
  r23 = HEAP32[1331646];
  if (r12 >>> 0 < r23 >>> 0) {
    _abort();
  }
  r16 = r12 + r1 | 0;
  r4 = r16;
  if (r12 >>> 0 >= r16 >>> 0) {
    _abort();
  }
  r14 = HEAP32[r26 + 6];
  r6 = HEAP32[r26 + 3];
  L2386 : do {
    if ((r6 | 0) == (r25 | 0)) {
      r5 = r25 + 20 | 0;
      r19 = HEAP32[r5 >> 2];
      do {
        if ((r19 | 0) == 0) {
          r15 = r25 + 16 | 0;
          r20 = HEAP32[r15 >> 2];
          if ((r20 | 0) == 0) {
            r27 = 0, r28 = r27 >> 2;
            break L2386;
          } else {
            r29 = r20;
            r30 = r15;
            break;
          }
        } else {
          r29 = r19;
          r30 = r5;
        }
      } while (0);
      while (1) {
        r5 = r29 + 20 | 0;
        r19 = HEAP32[r5 >> 2];
        if ((r19 | 0) != 0) {
          r29 = r19;
          r30 = r5;
          continue;
        }
        r5 = r29 + 16 | 0;
        r19 = HEAP32[r5 >> 2];
        if ((r19 | 0) == 0) {
          break;
        } else {
          r29 = r19;
          r30 = r5;
        }
      }
      if (r30 >>> 0 < r23 >>> 0) {
        _abort();
      } else {
        HEAP32[r30 >> 2] = 0;
        r27 = r29, r28 = r27 >> 2;
        break;
      }
    } else {
      r5 = HEAP32[r26 + 2];
      if (r5 >>> 0 < r23 >>> 0) {
        _abort();
      } else {
        HEAP32[r5 + 12 >> 2] = r6;
        HEAP32[r6 + 8 >> 2] = r5;
        r27 = r6, r28 = r27 >> 2;
        break;
      }
    }
  } while (0);
  L2402 : do {
    if ((r14 | 0) == 0) {
      r31 = r25;
    } else {
      r6 = r25 + 28 | 0;
      r23 = (HEAP32[r6 >> 2] << 2) + 5326872 | 0;
      do {
        if ((r25 | 0) == (HEAP32[r23 >> 2] | 0)) {
          HEAP32[r23 >> 2] = r27;
          if ((r27 | 0) != 0) {
            break;
          }
          HEAP32[1331643] = HEAP32[1331643] & (1 << HEAP32[r6 >> 2] ^ -1);
          r31 = r25;
          break L2402;
        } else {
          if (r14 >>> 0 < HEAP32[1331646] >>> 0) {
            _abort();
          }
          r29 = r14 + 16 | 0;
          if ((HEAP32[r29 >> 2] | 0) == (r25 | 0)) {
            HEAP32[r29 >> 2] = r27;
          } else {
            HEAP32[r14 + 20 >> 2] = r27;
          }
          if ((r27 | 0) == 0) {
            r31 = r25;
            break L2402;
          }
        }
      } while (0);
      if (r27 >>> 0 < HEAP32[1331646] >>> 0) {
        _abort();
      }
      HEAP32[r28 + 6] = r14;
      r6 = HEAP32[r26 + 4];
      do {
        if ((r6 | 0) != 0) {
          if (r6 >>> 0 < HEAP32[1331646] >>> 0) {
            _abort();
          } else {
            HEAP32[r28 + 4] = r6;
            HEAP32[r6 + 24 >> 2] = r27;
            break;
          }
        }
      } while (0);
      r6 = HEAP32[r26 + 5];
      if ((r6 | 0) == 0) {
        r31 = r25;
        break;
      }
      if (r6 >>> 0 < HEAP32[1331646] >>> 0) {
        _abort();
      } else {
        HEAP32[r28 + 5] = r6;
        HEAP32[r6 + 24 >> 2] = r27;
        r31 = r25;
        break;
      }
    }
  } while (0);
  do {
    if (r24 >>> 0 < 16) {
      r25 = r24 + r1 | 0;
      HEAP32[r31 + 4 >> 2] = r25 | 3;
      r27 = r25 + (r12 + 4) | 0;
      HEAP32[r27 >> 2] = HEAP32[r27 >> 2] | 1;
    } else {
      HEAP32[r31 + 4 >> 2] = r1 | 3;
      HEAP32[r2 + (r13 + 1)] = r24 | 1;
      HEAP32[(r24 >> 2) + r13 + r2] = r24;
      r27 = r24 >>> 3;
      if (r24 >>> 0 < 256) {
        r25 = r27 << 1;
        r28 = (r25 << 2) + 5326608 | 0;
        r26 = HEAP32[1331642];
        r14 = 1 << r27;
        do {
          if ((r26 & r14 | 0) == 0) {
            HEAP32[1331642] = r26 | r14;
            r32 = r28;
            r33 = (r25 + 2 << 2) + 5326608 | 0;
          } else {
            r27 = (r25 + 2 << 2) + 5326608 | 0;
            r6 = HEAP32[r27 >> 2];
            if (r6 >>> 0 >= HEAP32[1331646] >>> 0) {
              r32 = r6;
              r33 = r27;
              break;
            }
            _abort();
          }
        } while (0);
        HEAP32[r33 >> 2] = r4;
        HEAP32[r32 + 12 >> 2] = r4;
        HEAP32[r2 + (r13 + 2)] = r32;
        HEAP32[r2 + (r13 + 3)] = r28;
        break;
      }
      r25 = r16;
      r14 = r24 >>> 8;
      do {
        if ((r14 | 0) == 0) {
          r34 = 0;
        } else {
          if (r24 >>> 0 > 16777215) {
            r34 = 31;
            break;
          }
          r26 = (r14 + 1048320 | 0) >>> 16 & 8;
          r27 = r14 << r26;
          r6 = (r27 + 520192 | 0) >>> 16 & 4;
          r23 = r27 << r6;
          r27 = (r23 + 245760 | 0) >>> 16 & 2;
          r29 = 14 - (r6 | r26 | r27) + (r23 << r27 >>> 15) | 0;
          r34 = r24 >>> ((r29 + 7 | 0) >>> 0) & 1 | r29 << 1;
        }
      } while (0);
      r14 = (r34 << 2) + 5326872 | 0;
      HEAP32[r2 + (r13 + 7)] = r34;
      HEAP32[r2 + (r13 + 5)] = 0;
      HEAP32[r2 + (r13 + 4)] = 0;
      r28 = HEAP32[1331643];
      r29 = 1 << r34;
      if ((r28 & r29 | 0) == 0) {
        HEAP32[1331643] = r28 | r29;
        HEAP32[r14 >> 2] = r25;
        HEAP32[r2 + (r13 + 6)] = r14;
        HEAP32[r2 + (r13 + 3)] = r25;
        HEAP32[r2 + (r13 + 2)] = r25;
        break;
      }
      if ((r34 | 0) == 31) {
        r35 = 0;
      } else {
        r35 = 25 - (r34 >>> 1) | 0;
      }
      r29 = r24 << r35;
      r28 = HEAP32[r14 >> 2];
      while (1) {
        if ((HEAP32[r28 + 4 >> 2] & -8 | 0) == (r24 | 0)) {
          break;
        }
        r36 = (r29 >>> 31 << 2) + r28 + 16 | 0;
        r14 = HEAP32[r36 >> 2];
        if ((r14 | 0) == 0) {
          r3 = 2013;
          break;
        } else {
          r29 = r29 << 1;
          r28 = r14;
        }
      }
      if (r3 == 2013) {
        if (r36 >>> 0 < HEAP32[1331646] >>> 0) {
          _abort();
        } else {
          HEAP32[r36 >> 2] = r25;
          HEAP32[r2 + (r13 + 6)] = r28;
          HEAP32[r2 + (r13 + 3)] = r25;
          HEAP32[r2 + (r13 + 2)] = r25;
          break;
        }
      }
      r29 = r28 + 8 | 0;
      r14 = HEAP32[r29 >> 2];
      r27 = HEAP32[1331646];
      if (r28 >>> 0 < r27 >>> 0) {
        _abort();
      }
      if (r14 >>> 0 < r27 >>> 0) {
        _abort();
      } else {
        HEAP32[r14 + 12 >> 2] = r25;
        HEAP32[r29 >> 2] = r25;
        HEAP32[r2 + (r13 + 2)] = r14;
        HEAP32[r2 + (r13 + 3)] = r28;
        HEAP32[r2 + (r13 + 6)] = 0;
        break;
      }
    }
  } while (0);
  r22 = r31 + 8 | 0;
  return r22;
}
_tmalloc_large["X"] = 1;
function _release_unused_segments() {
  var r1, r2;
  r1 = 5327020;
  while (1) {
    r2 = HEAP32[r1 >> 2];
    if ((r2 | 0) == 0) {
      break;
    } else {
      r1 = r2 + 8 | 0;
    }
  }
  HEAP32[1331650] = -1;
  return;
}
function _sys_trim() {
  var r1, r2, r3, r4, r5, r6, r7;
  if ((HEAP32[1327495] | 0) == 0) {
    _init_mparams();
  }
  r1 = HEAP32[1331648];
  if ((r1 | 0) == 0) {
    return;
  }
  r2 = HEAP32[1331645];
  do {
    if (r2 >>> 0 > 40) {
      r3 = HEAP32[1327497];
      r4 = (Math.floor(((r2 - 41 + r3 | 0) >>> 0) / (r3 >>> 0)) - 1) * r3 & -1;
      r5 = _segment_holding(r1);
      if ((HEAP32[r5 + 12 >> 2] & 8 | 0) != 0) {
        break;
      }
      r6 = _sbrk(0);
      r7 = (r5 + 4 | 0) >> 2;
      if ((r6 | 0) != (HEAP32[r5 >> 2] + HEAP32[r7] | 0)) {
        break;
      }
      r5 = _sbrk(-(r4 >>> 0 > 2147483646 ? -2147483648 - r3 | 0 : r4) | 0);
      r4 = _sbrk(0);
      if (!((r5 | 0) != -1 & r4 >>> 0 < r6 >>> 0)) {
        break;
      }
      r5 = r6 - r4 | 0;
      if ((r6 | 0) == (r4 | 0)) {
        break;
      }
      HEAP32[r7] = HEAP32[r7] - r5 | 0;
      HEAP32[1331750] = HEAP32[1331750] - r5 | 0;
      _init_top(HEAP32[1331648], HEAP32[1331645] - r5 | 0);
      return;
    }
  } while (0);
  if (HEAP32[1331645] >>> 0 <= HEAP32[1331649] >>> 0) {
    return;
  }
  HEAP32[1331649] = -1;
  return;
}
_sys_trim["X"] = 1;
function _free(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40;
  r2 = r1 >> 2;
  r3 = 0;
  if ((r1 | 0) == 0) {
    return;
  }
  r4 = r1 - 8 | 0;
  r5 = r4;
  r6 = HEAP32[1331646];
  if (r4 >>> 0 < r6 >>> 0) {
    _abort();
  }
  r7 = HEAP32[r1 - 4 >> 2];
  r8 = r7 & 3;
  if ((r8 | 0) == 1) {
    _abort();
  }
  r9 = r7 & -8, r10 = r9 >> 2;
  r11 = r1 + (r9 - 8) | 0;
  r12 = r11;
  L2501 : do {
    if ((r7 & 1 | 0) == 0) {
      r13 = HEAP32[r4 >> 2];
      if ((r8 | 0) == 0) {
        return;
      }
      r14 = -8 - r13 | 0, r15 = r14 >> 2;
      r16 = r1 + r14 | 0;
      r17 = r16;
      r18 = r13 + r9 | 0;
      if (r16 >>> 0 < r6 >>> 0) {
        _abort();
      }
      if ((r17 | 0) == (HEAP32[1331647] | 0)) {
        r19 = (r1 + (r9 - 4) | 0) >> 2;
        if ((HEAP32[r19] & 3 | 0) != 3) {
          r20 = r17, r21 = r20 >> 2;
          r22 = r18;
          break;
        }
        HEAP32[1331644] = r18;
        HEAP32[r19] = HEAP32[r19] & -2;
        HEAP32[r15 + (r2 + 1)] = r18 | 1;
        HEAP32[r11 >> 2] = r18;
        return;
      }
      r19 = r13 >>> 3;
      if (r13 >>> 0 < 256) {
        r13 = HEAP32[r15 + (r2 + 2)];
        r23 = HEAP32[r15 + (r2 + 3)];
        if ((r13 | 0) == (r23 | 0)) {
          HEAP32[1331642] = HEAP32[1331642] & (1 << r19 ^ -1);
          r20 = r17, r21 = r20 >> 2;
          r22 = r18;
          break;
        }
        r24 = (r19 << 3) + 5326608 | 0;
        if ((r13 | 0) != (r24 | 0) & r13 >>> 0 < r6 >>> 0) {
          _abort();
        }
        if ((r23 | 0) == (r24 | 0) | r23 >>> 0 >= r6 >>> 0) {
          HEAP32[r13 + 12 >> 2] = r23;
          HEAP32[r23 + 8 >> 2] = r13;
          r20 = r17, r21 = r20 >> 2;
          r22 = r18;
          break;
        } else {
          _abort();
        }
      }
      r13 = r16;
      r16 = HEAP32[r15 + (r2 + 6)];
      r23 = HEAP32[r15 + (r2 + 3)];
      L2526 : do {
        if ((r23 | 0) == (r13 | 0)) {
          r24 = r14 + (r1 + 20) | 0;
          r19 = HEAP32[r24 >> 2];
          do {
            if ((r19 | 0) == 0) {
              r25 = r14 + (r1 + 16) | 0;
              r26 = HEAP32[r25 >> 2];
              if ((r26 | 0) == 0) {
                r27 = 0, r28 = r27 >> 2;
                break L2526;
              } else {
                r29 = r26;
                r30 = r25;
                break;
              }
            } else {
              r29 = r19;
              r30 = r24;
            }
          } while (0);
          while (1) {
            r24 = r29 + 20 | 0;
            r19 = HEAP32[r24 >> 2];
            if ((r19 | 0) != 0) {
              r29 = r19;
              r30 = r24;
              continue;
            }
            r24 = r29 + 16 | 0;
            r19 = HEAP32[r24 >> 2];
            if ((r19 | 0) == 0) {
              break;
            } else {
              r29 = r19;
              r30 = r24;
            }
          }
          if (r30 >>> 0 < r6 >>> 0) {
            _abort();
          } else {
            HEAP32[r30 >> 2] = 0;
            r27 = r29, r28 = r27 >> 2;
            break;
          }
        } else {
          r24 = HEAP32[r15 + (r2 + 2)];
          if (r24 >>> 0 < r6 >>> 0) {
            _abort();
          } else {
            HEAP32[r24 + 12 >> 2] = r23;
            HEAP32[r23 + 8 >> 2] = r24;
            r27 = r23, r28 = r27 >> 2;
            break;
          }
        }
      } while (0);
      if ((r16 | 0) == 0) {
        r20 = r17, r21 = r20 >> 2;
        r22 = r18;
        break;
      }
      r23 = r14 + (r1 + 28) | 0;
      r24 = (HEAP32[r23 >> 2] << 2) + 5326872 | 0;
      do {
        if ((r13 | 0) == (HEAP32[r24 >> 2] | 0)) {
          HEAP32[r24 >> 2] = r27;
          if ((r27 | 0) != 0) {
            break;
          }
          HEAP32[1331643] = HEAP32[1331643] & (1 << HEAP32[r23 >> 2] ^ -1);
          r20 = r17, r21 = r20 >> 2;
          r22 = r18;
          break L2501;
        } else {
          if (r16 >>> 0 < HEAP32[1331646] >>> 0) {
            _abort();
          }
          r19 = r16 + 16 | 0;
          if ((HEAP32[r19 >> 2] | 0) == (r13 | 0)) {
            HEAP32[r19 >> 2] = r27;
          } else {
            HEAP32[r16 + 20 >> 2] = r27;
          }
          if ((r27 | 0) == 0) {
            r20 = r17, r21 = r20 >> 2;
            r22 = r18;
            break L2501;
          }
        }
      } while (0);
      if (r27 >>> 0 < HEAP32[1331646] >>> 0) {
        _abort();
      }
      HEAP32[r28 + 6] = r16;
      r13 = HEAP32[r15 + (r2 + 4)];
      do {
        if ((r13 | 0) != 0) {
          if (r13 >>> 0 < HEAP32[1331646] >>> 0) {
            _abort();
          } else {
            HEAP32[r28 + 4] = r13;
            HEAP32[r13 + 24 >> 2] = r27;
            break;
          }
        }
      } while (0);
      r13 = HEAP32[r15 + (r2 + 5)];
      if ((r13 | 0) == 0) {
        r20 = r17, r21 = r20 >> 2;
        r22 = r18;
        break;
      }
      if (r13 >>> 0 < HEAP32[1331646] >>> 0) {
        _abort();
      } else {
        HEAP32[r28 + 5] = r13;
        HEAP32[r13 + 24 >> 2] = r27;
        r20 = r17, r21 = r20 >> 2;
        r22 = r18;
        break;
      }
    } else {
      r20 = r5, r21 = r20 >> 2;
      r22 = r9;
    }
  } while (0);
  r5 = r20, r27 = r5 >> 2;
  if (r5 >>> 0 >= r11 >>> 0) {
    _abort();
  }
  r5 = r1 + (r9 - 4) | 0;
  r28 = HEAP32[r5 >> 2];
  if ((r28 & 1 | 0) == 0) {
    _abort();
  }
  do {
    if ((r28 & 2 | 0) == 0) {
      if ((r12 | 0) == (HEAP32[1331648] | 0)) {
        r6 = HEAP32[1331645] + r22 | 0;
        HEAP32[1331645] = r6;
        HEAP32[1331648] = r20;
        HEAP32[r21 + 1] = r6 | 1;
        if ((r20 | 0) == (HEAP32[1331647] | 0)) {
          HEAP32[1331647] = 0;
          HEAP32[1331644] = 0;
        }
        if (r6 >>> 0 <= HEAP32[1331649] >>> 0) {
          return;
        }
        _sys_trim();
        return;
      }
      if ((r12 | 0) == (HEAP32[1331647] | 0)) {
        r6 = HEAP32[1331644] + r22 | 0;
        HEAP32[1331644] = r6;
        HEAP32[1331647] = r20;
        HEAP32[r21 + 1] = r6 | 1;
        HEAP32[(r6 >> 2) + r27] = r6;
        return;
      }
      r6 = (r28 & -8) + r22 | 0;
      r29 = r28 >>> 3;
      L2591 : do {
        if (r28 >>> 0 < 256) {
          r30 = HEAP32[r2 + r10];
          r8 = HEAP32[((r9 | 4) >> 2) + r2];
          if ((r30 | 0) == (r8 | 0)) {
            HEAP32[1331642] = HEAP32[1331642] & (1 << r29 ^ -1);
            break;
          }
          r4 = (r29 << 3) + 5326608 | 0;
          do {
            if ((r30 | 0) != (r4 | 0)) {
              if (r30 >>> 0 >= HEAP32[1331646] >>> 0) {
                break;
              }
              _abort();
            }
          } while (0);
          do {
            if ((r8 | 0) != (r4 | 0)) {
              if (r8 >>> 0 >= HEAP32[1331646] >>> 0) {
                break;
              }
              _abort();
            }
          } while (0);
          HEAP32[r30 + 12 >> 2] = r8;
          HEAP32[r8 + 8 >> 2] = r30;
        } else {
          r4 = r11;
          r7 = HEAP32[r10 + (r2 + 4)];
          r13 = HEAP32[((r9 | 4) >> 2) + r2];
          L2605 : do {
            if ((r13 | 0) == (r4 | 0)) {
              r16 = r9 + (r1 + 12) | 0;
              r23 = HEAP32[r16 >> 2];
              do {
                if ((r23 | 0) == 0) {
                  r24 = r9 + (r1 + 8) | 0;
                  r14 = HEAP32[r24 >> 2];
                  if ((r14 | 0) == 0) {
                    r31 = 0, r32 = r31 >> 2;
                    break L2605;
                  } else {
                    r33 = r14;
                    r34 = r24;
                    break;
                  }
                } else {
                  r33 = r23;
                  r34 = r16;
                }
              } while (0);
              while (1) {
                r16 = r33 + 20 | 0;
                r23 = HEAP32[r16 >> 2];
                if ((r23 | 0) != 0) {
                  r33 = r23;
                  r34 = r16;
                  continue;
                }
                r16 = r33 + 16 | 0;
                r23 = HEAP32[r16 >> 2];
                if ((r23 | 0) == 0) {
                  break;
                } else {
                  r33 = r23;
                  r34 = r16;
                }
              }
              if (r34 >>> 0 < HEAP32[1331646] >>> 0) {
                _abort();
              } else {
                HEAP32[r34 >> 2] = 0;
                r31 = r33, r32 = r31 >> 2;
                break;
              }
            } else {
              r16 = HEAP32[r2 + r10];
              if (r16 >>> 0 < HEAP32[1331646] >>> 0) {
                _abort();
              } else {
                HEAP32[r16 + 12 >> 2] = r13;
                HEAP32[r13 + 8 >> 2] = r16;
                r31 = r13, r32 = r31 >> 2;
                break;
              }
            }
          } while (0);
          if ((r7 | 0) == 0) {
            break;
          }
          r13 = r9 + (r1 + 20) | 0;
          r30 = (HEAP32[r13 >> 2] << 2) + 5326872 | 0;
          do {
            if ((r4 | 0) == (HEAP32[r30 >> 2] | 0)) {
              HEAP32[r30 >> 2] = r31;
              if ((r31 | 0) != 0) {
                break;
              }
              HEAP32[1331643] = HEAP32[1331643] & (1 << HEAP32[r13 >> 2] ^ -1);
              break L2591;
            } else {
              if (r7 >>> 0 < HEAP32[1331646] >>> 0) {
                _abort();
              }
              r8 = r7 + 16 | 0;
              if ((HEAP32[r8 >> 2] | 0) == (r4 | 0)) {
                HEAP32[r8 >> 2] = r31;
              } else {
                HEAP32[r7 + 20 >> 2] = r31;
              }
              if ((r31 | 0) == 0) {
                break L2591;
              }
            }
          } while (0);
          if (r31 >>> 0 < HEAP32[1331646] >>> 0) {
            _abort();
          }
          HEAP32[r32 + 6] = r7;
          r4 = HEAP32[r10 + (r2 + 2)];
          do {
            if ((r4 | 0) != 0) {
              if (r4 >>> 0 < HEAP32[1331646] >>> 0) {
                _abort();
              } else {
                HEAP32[r32 + 4] = r4;
                HEAP32[r4 + 24 >> 2] = r31;
                break;
              }
            }
          } while (0);
          r4 = HEAP32[r10 + (r2 + 3)];
          if ((r4 | 0) == 0) {
            break;
          }
          if (r4 >>> 0 < HEAP32[1331646] >>> 0) {
            _abort();
          } else {
            HEAP32[r32 + 5] = r4;
            HEAP32[r4 + 24 >> 2] = r31;
            break;
          }
        }
      } while (0);
      HEAP32[r21 + 1] = r6 | 1;
      HEAP32[(r6 >> 2) + r27] = r6;
      if ((r20 | 0) != (HEAP32[1331647] | 0)) {
        r35 = r6;
        break;
      }
      HEAP32[1331644] = r6;
      return;
    } else {
      HEAP32[r5 >> 2] = r28 & -2;
      HEAP32[r21 + 1] = r22 | 1;
      HEAP32[(r22 >> 2) + r27] = r22;
      r35 = r22;
    }
  } while (0);
  r22 = r35 >>> 3;
  if (r35 >>> 0 < 256) {
    r27 = r22 << 1;
    r28 = (r27 << 2) + 5326608 | 0;
    r5 = HEAP32[1331642];
    r31 = 1 << r22;
    do {
      if ((r5 & r31 | 0) == 0) {
        HEAP32[1331642] = r5 | r31;
        r36 = r28;
        r37 = (r27 + 2 << 2) + 5326608 | 0;
      } else {
        r22 = (r27 + 2 << 2) + 5326608 | 0;
        r32 = HEAP32[r22 >> 2];
        if (r32 >>> 0 >= HEAP32[1331646] >>> 0) {
          r36 = r32;
          r37 = r22;
          break;
        }
        _abort();
      }
    } while (0);
    HEAP32[r37 >> 2] = r20;
    HEAP32[r36 + 12 >> 2] = r20;
    HEAP32[r21 + 2] = r36;
    HEAP32[r21 + 3] = r28;
    return;
  }
  r28 = r20;
  r36 = r35 >>> 8;
  do {
    if ((r36 | 0) == 0) {
      r38 = 0;
    } else {
      if (r35 >>> 0 > 16777215) {
        r38 = 31;
        break;
      }
      r37 = (r36 + 1048320 | 0) >>> 16 & 8;
      r27 = r36 << r37;
      r31 = (r27 + 520192 | 0) >>> 16 & 4;
      r5 = r27 << r31;
      r27 = (r5 + 245760 | 0) >>> 16 & 2;
      r22 = 14 - (r31 | r37 | r27) + (r5 << r27 >>> 15) | 0;
      r38 = r35 >>> ((r22 + 7 | 0) >>> 0) & 1 | r22 << 1;
    }
  } while (0);
  r36 = (r38 << 2) + 5326872 | 0;
  HEAP32[r21 + 7] = r38;
  HEAP32[r21 + 5] = 0;
  HEAP32[r21 + 4] = 0;
  r22 = HEAP32[1331643];
  r27 = 1 << r38;
  do {
    if ((r22 & r27 | 0) == 0) {
      HEAP32[1331643] = r22 | r27;
      HEAP32[r36 >> 2] = r28;
      HEAP32[r21 + 6] = r36;
      HEAP32[r21 + 3] = r20;
      HEAP32[r21 + 2] = r20;
    } else {
      if ((r38 | 0) == 31) {
        r39 = 0;
      } else {
        r39 = 25 - (r38 >>> 1) | 0;
      }
      r5 = r35 << r39;
      r37 = HEAP32[r36 >> 2];
      while (1) {
        if ((HEAP32[r37 + 4 >> 2] & -8 | 0) == (r35 | 0)) {
          break;
        }
        r40 = (r5 >>> 31 << 2) + r37 + 16 | 0;
        r31 = HEAP32[r40 >> 2];
        if ((r31 | 0) == 0) {
          r3 = 2166;
          break;
        } else {
          r5 = r5 << 1;
          r37 = r31;
        }
      }
      if (r3 == 2166) {
        if (r40 >>> 0 < HEAP32[1331646] >>> 0) {
          _abort();
        } else {
          HEAP32[r40 >> 2] = r28;
          HEAP32[r21 + 6] = r37;
          HEAP32[r21 + 3] = r20;
          HEAP32[r21 + 2] = r20;
          break;
        }
      }
      r5 = r37 + 8 | 0;
      r6 = HEAP32[r5 >> 2];
      r31 = HEAP32[1331646];
      if (r37 >>> 0 < r31 >>> 0) {
        _abort();
      }
      if (r6 >>> 0 < r31 >>> 0) {
        _abort();
      } else {
        HEAP32[r6 + 12 >> 2] = r28;
        HEAP32[r5 >> 2] = r28;
        HEAP32[r21 + 2] = r6;
        HEAP32[r21 + 3] = r37;
        HEAP32[r21 + 6] = 0;
        break;
      }
    }
  } while (0);
  r21 = HEAP32[1331650] - 1 | 0;
  HEAP32[1331650] = r21;
  if ((r21 | 0) != 0) {
    return;
  }
  _release_unused_segments();
  return;
}
_free["X"] = 1;
function _mmap_resize(r1, r2) {
  var r3, r4;
  r3 = HEAP32[r1 + 4 >> 2] & -8;
  do {
    if (r2 >>> 0 < 256) {
      r4 = 0;
    } else {
      if (r3 >>> 0 >= (r2 + 4 | 0) >>> 0) {
        if ((r3 - r2 | 0) >>> 0 <= HEAP32[1327497] << 1 >>> 0) {
          r4 = r1;
          break;
        }
      }
      r4 = 0;
    }
  } while (0);
  return r4;
}
function _segment_holding(r1) {
  var r2, r3, r4, r5, r6;
  r2 = 0;
  r3 = 5327012, r4 = r3 >> 2;
  while (1) {
    r5 = HEAP32[r4];
    if (r5 >>> 0 <= r1 >>> 0) {
      if ((r5 + HEAP32[r4 + 1] | 0) >>> 0 > r1 >>> 0) {
        r6 = r3;
        r2 = 2209;
        break;
      }
    }
    r5 = HEAP32[r4 + 2];
    if ((r5 | 0) == 0) {
      r6 = 0;
      r2 = 2208;
      break;
    } else {
      r3 = r5, r4 = r3 >> 2;
    }
  }
  if (r2 == 2208) {
    return r6;
  } else if (r2 == 2209) {
    return r6;
  }
}
function _init_top(r1, r2) {
  var r3, r4, r5;
  r3 = r1;
  r4 = r1 + 8 | 0;
  if ((r4 & 7 | 0) == 0) {
    r5 = 0;
  } else {
    r5 = -r4 & 7;
  }
  r4 = r2 - r5 | 0;
  HEAP32[1331648] = r3 + r5 | 0;
  HEAP32[1331645] = r4;
  HEAP32[r5 + (r3 + 4) >> 2] = r4 | 1;
  HEAP32[r2 + (r3 + 4) >> 2] = 40;
  HEAP32[1331649] = HEAP32[1327499];
  return;
}
function _init_bins() {
  var r1, r2, r3;
  r1 = 0;
  while (1) {
    r2 = r1 << 1;
    r3 = (r2 << 2) + 5326608 | 0;
    HEAP32[(r2 + 3 << 2) + 5326608 >> 2] = r3;
    HEAP32[(r2 + 2 << 2) + 5326608 >> 2] = r3;
    r3 = r1 + 1 | 0;
    if ((r3 | 0) == 32) {
      break;
    } else {
      r1 = r3;
    }
  }
  return;
}
function _realloc(r1, r2) {
  var r3;
  if ((r1 | 0) == 0) {
    r3 = _malloc(r2);
  } else {
    r3 = _internal_realloc(r1, r2);
  }
  return r3;
}
Module["_realloc"] = _realloc;
function _internal_realloc(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16;
  r3 = 0;
  if (r2 >>> 0 > 4294967231) {
    HEAP32[___errno_location() >> 2] = 12;
    r4 = 0;
    return r4;
  }
  r5 = r1 - 8 | 0;
  r6 = r5;
  r7 = (r1 - 4 | 0) >> 2;
  r8 = HEAP32[r7];
  r9 = r8 & -8;
  r10 = r9 - 8 | 0;
  r11 = r1 + r10 | 0;
  if (r5 >>> 0 < HEAP32[1331646] >>> 0) {
    _abort();
  }
  r5 = r8 & 3;
  if (!((r5 | 0) != 1 & (r10 | 0) > -8)) {
    _abort();
  }
  r10 = (r1 + (r9 - 4) | 0) >> 2;
  if ((HEAP32[r10] & 1 | 0) == 0) {
    _abort();
  }
  if (r2 >>> 0 < 11) {
    r12 = 16;
  } else {
    r12 = r2 + 11 & -8;
  }
  do {
    if ((r5 | 0) == 0) {
      r13 = _mmap_resize(r6, r12);
      r14 = 0;
      r3 = 2236;
      break;
    } else {
      if (r9 >>> 0 >= r12 >>> 0) {
        r15 = r9 - r12 | 0;
        if (r15 >>> 0 <= 15) {
          r13 = r6;
          r14 = 0;
          r3 = 2236;
          break;
        }
        HEAP32[r7] = r12 | r8 & 1 | 2;
        HEAP32[r1 + (r12 - 4) >> 2] = r15 | 3;
        HEAP32[r10] = HEAP32[r10] | 1;
        r13 = r6;
        r14 = r1 + r12 | 0;
        r3 = 2236;
        break;
      }
      if ((r11 | 0) != (HEAP32[1331648] | 0)) {
        break;
      }
      r15 = HEAP32[1331645] + r9 | 0;
      if (r15 >>> 0 <= r12 >>> 0) {
        break;
      }
      r16 = r15 - r12 | 0;
      HEAP32[r7] = r12 | r8 & 1 | 2;
      HEAP32[r1 + (r12 - 4) >> 2] = r16 | 1;
      HEAP32[1331648] = r1 + (r12 - 8) | 0;
      HEAP32[1331645] = r16;
      r13 = r6;
      r14 = 0;
      r3 = 2236;
      break;
    }
  } while (0);
  do {
    if (r3 == 2236) {
      if ((r13 | 0) == 0) {
        break;
      }
      if ((r14 | 0) != 0) {
        _free(r14);
      }
      r4 = r13 + 8 | 0;
      return r4;
    }
  } while (0);
  r13 = _malloc(r2);
  if ((r13 | 0) == 0) {
    r4 = 0;
    return r4;
  }
  r14 = r9 - ((HEAP32[r7] & 3 | 0) == 0 ? 8 : 4) | 0;
  _memcpy(r13, r1, r14 >>> 0 < r2 >>> 0 ? r14 : r2);
  _free(r1);
  r4 = r13;
  return r4;
}
_internal_realloc["X"] = 1;
function _init_mparams() {
  var r1;
  if ((HEAP32[1327495] | 0) != 0) {
    return;
  }
  r1 = _sysconf(8);
  if ((r1 - 1 & r1 | 0) != 0) {
    _abort();
  }
  HEAP32[1327497] = r1;
  HEAP32[1327496] = r1;
  HEAP32[1327498] = -1;
  HEAP32[1327499] = 2097152;
  HEAP32[1327500] = 0;
  HEAP32[1331752] = 0;
  HEAP32[1327495] = _time(0) & -16 ^ 1431655768;
  return;
}
function _prepend_alloc(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40;
  r4 = r2 >> 2;
  r5 = r1 >> 2;
  r6 = 0;
  r7 = r1 + 8 | 0;
  if ((r7 & 7 | 0) == 0) {
    r8 = 0;
  } else {
    r8 = -r7 & 7;
  }
  r7 = r2 + 8 | 0;
  if ((r7 & 7 | 0) == 0) {
    r9 = 0, r10 = r9 >> 2;
  } else {
    r9 = -r7 & 7, r10 = r9 >> 2;
  }
  r7 = r2 + r9 | 0;
  r11 = r7;
  r12 = r8 + r3 | 0, r13 = r12 >> 2;
  r14 = r1 + r12 | 0;
  r12 = r14;
  r15 = r7 - (r1 + r8) - r3 | 0;
  HEAP32[(r8 + 4 >> 2) + r5] = r3 | 3;
  if ((r11 | 0) == (HEAP32[1331648] | 0)) {
    r3 = HEAP32[1331645] + r15 | 0;
    HEAP32[1331645] = r3;
    HEAP32[1331648] = r12;
    HEAP32[r13 + (r5 + 1)] = r3 | 1;
    r16 = r8 | 8;
    r17 = r1 + r16 | 0;
    return r17;
  }
  if ((r11 | 0) == (HEAP32[1331647] | 0)) {
    r3 = HEAP32[1331644] + r15 | 0;
    HEAP32[1331644] = r3;
    HEAP32[1331647] = r12;
    HEAP32[r13 + (r5 + 1)] = r3 | 1;
    HEAP32[(r3 >> 2) + r5 + r13] = r3;
    r16 = r8 | 8;
    r17 = r1 + r16 | 0;
    return r17;
  }
  r3 = HEAP32[r10 + (r4 + 1)];
  if ((r3 & 3 | 0) == 1) {
    r18 = r3 & -8;
    r19 = r3 >>> 3;
    L2783 : do {
      if (r3 >>> 0 < 256) {
        r20 = HEAP32[((r9 | 8) >> 2) + r4];
        r21 = HEAP32[r10 + (r4 + 3)];
        if ((r20 | 0) == (r21 | 0)) {
          HEAP32[1331642] = HEAP32[1331642] & (1 << r19 ^ -1);
          break;
        }
        r22 = (r19 << 3) + 5326608 | 0;
        do {
          if ((r20 | 0) != (r22 | 0)) {
            if (r20 >>> 0 >= HEAP32[1331646] >>> 0) {
              break;
            }
            _abort();
          }
        } while (0);
        do {
          if ((r21 | 0) != (r22 | 0)) {
            if (r21 >>> 0 >= HEAP32[1331646] >>> 0) {
              break;
            }
            _abort();
          }
        } while (0);
        HEAP32[r20 + 12 >> 2] = r21;
        HEAP32[r21 + 8 >> 2] = r20;
      } else {
        r22 = r7;
        r23 = HEAP32[((r9 | 24) >> 2) + r4];
        r24 = HEAP32[r10 + (r4 + 3)];
        L2797 : do {
          if ((r24 | 0) == (r22 | 0)) {
            r25 = r9 | 16;
            r26 = r25 + (r2 + 4) | 0;
            r27 = HEAP32[r26 >> 2];
            do {
              if ((r27 | 0) == 0) {
                r28 = r2 + r25 | 0;
                r29 = HEAP32[r28 >> 2];
                if ((r29 | 0) == 0) {
                  r30 = 0, r31 = r30 >> 2;
                  break L2797;
                } else {
                  r32 = r29;
                  r33 = r28;
                  break;
                }
              } else {
                r32 = r27;
                r33 = r26;
              }
            } while (0);
            while (1) {
              r26 = r32 + 20 | 0;
              r27 = HEAP32[r26 >> 2];
              if ((r27 | 0) != 0) {
                r32 = r27;
                r33 = r26;
                continue;
              }
              r26 = r32 + 16 | 0;
              r27 = HEAP32[r26 >> 2];
              if ((r27 | 0) == 0) {
                break;
              } else {
                r32 = r27;
                r33 = r26;
              }
            }
            if (r33 >>> 0 < HEAP32[1331646] >>> 0) {
              _abort();
            } else {
              HEAP32[r33 >> 2] = 0;
              r30 = r32, r31 = r30 >> 2;
              break;
            }
          } else {
            r26 = HEAP32[((r9 | 8) >> 2) + r4];
            if (r26 >>> 0 < HEAP32[1331646] >>> 0) {
              _abort();
            } else {
              HEAP32[r26 + 12 >> 2] = r24;
              HEAP32[r24 + 8 >> 2] = r26;
              r30 = r24, r31 = r30 >> 2;
              break;
            }
          }
        } while (0);
        if ((r23 | 0) == 0) {
          break;
        }
        r24 = r9 + (r2 + 28) | 0;
        r20 = (HEAP32[r24 >> 2] << 2) + 5326872 | 0;
        do {
          if ((r22 | 0) == (HEAP32[r20 >> 2] | 0)) {
            HEAP32[r20 >> 2] = r30;
            if ((r30 | 0) != 0) {
              break;
            }
            HEAP32[1331643] = HEAP32[1331643] & (1 << HEAP32[r24 >> 2] ^ -1);
            break L2783;
          } else {
            if (r23 >>> 0 < HEAP32[1331646] >>> 0) {
              _abort();
            }
            r21 = r23 + 16 | 0;
            if ((HEAP32[r21 >> 2] | 0) == (r22 | 0)) {
              HEAP32[r21 >> 2] = r30;
            } else {
              HEAP32[r23 + 20 >> 2] = r30;
            }
            if ((r30 | 0) == 0) {
              break L2783;
            }
          }
        } while (0);
        if (r30 >>> 0 < HEAP32[1331646] >>> 0) {
          _abort();
        }
        HEAP32[r31 + 6] = r23;
        r22 = r9 | 16;
        r24 = HEAP32[(r22 >> 2) + r4];
        do {
          if ((r24 | 0) != 0) {
            if (r24 >>> 0 < HEAP32[1331646] >>> 0) {
              _abort();
            } else {
              HEAP32[r31 + 4] = r24;
              HEAP32[r24 + 24 >> 2] = r30;
              break;
            }
          }
        } while (0);
        r24 = HEAP32[(r22 + 4 >> 2) + r4];
        if ((r24 | 0) == 0) {
          break;
        }
        if (r24 >>> 0 < HEAP32[1331646] >>> 0) {
          _abort();
        } else {
          HEAP32[r31 + 5] = r24;
          HEAP32[r24 + 24 >> 2] = r30;
          break;
        }
      }
    } while (0);
    r34 = r2 + (r18 | r9) | 0;
    r35 = r18 + r15 | 0;
  } else {
    r34 = r11;
    r35 = r15;
  }
  r15 = r34 + 4 | 0;
  HEAP32[r15 >> 2] = HEAP32[r15 >> 2] & -2;
  HEAP32[r13 + (r5 + 1)] = r35 | 1;
  HEAP32[(r35 >> 2) + r5 + r13] = r35;
  r15 = r35 >>> 3;
  if (r35 >>> 0 < 256) {
    r34 = r15 << 1;
    r11 = (r34 << 2) + 5326608 | 0;
    r18 = HEAP32[1331642];
    r9 = 1 << r15;
    do {
      if ((r18 & r9 | 0) == 0) {
        HEAP32[1331642] = r18 | r9;
        r36 = r11;
        r37 = (r34 + 2 << 2) + 5326608 | 0;
      } else {
        r15 = (r34 + 2 << 2) + 5326608 | 0;
        r2 = HEAP32[r15 >> 2];
        if (r2 >>> 0 >= HEAP32[1331646] >>> 0) {
          r36 = r2;
          r37 = r15;
          break;
        }
        _abort();
      }
    } while (0);
    HEAP32[r37 >> 2] = r12;
    HEAP32[r36 + 12 >> 2] = r12;
    HEAP32[r13 + (r5 + 2)] = r36;
    HEAP32[r13 + (r5 + 3)] = r11;
    r16 = r8 | 8;
    r17 = r1 + r16 | 0;
    return r17;
  }
  r11 = r14;
  r14 = r35 >>> 8;
  do {
    if ((r14 | 0) == 0) {
      r38 = 0;
    } else {
      if (r35 >>> 0 > 16777215) {
        r38 = 31;
        break;
      }
      r36 = (r14 + 1048320 | 0) >>> 16 & 8;
      r12 = r14 << r36;
      r37 = (r12 + 520192 | 0) >>> 16 & 4;
      r34 = r12 << r37;
      r12 = (r34 + 245760 | 0) >>> 16 & 2;
      r9 = 14 - (r37 | r36 | r12) + (r34 << r12 >>> 15) | 0;
      r38 = r35 >>> ((r9 + 7 | 0) >>> 0) & 1 | r9 << 1;
    }
  } while (0);
  r14 = (r38 << 2) + 5326872 | 0;
  HEAP32[r13 + (r5 + 7)] = r38;
  HEAP32[r13 + (r5 + 5)] = 0;
  HEAP32[r13 + (r5 + 4)] = 0;
  r9 = HEAP32[1331643];
  r12 = 1 << r38;
  if ((r9 & r12 | 0) == 0) {
    HEAP32[1331643] = r9 | r12;
    HEAP32[r14 >> 2] = r11;
    HEAP32[r13 + (r5 + 6)] = r14;
    HEAP32[r13 + (r5 + 3)] = r11;
    HEAP32[r13 + (r5 + 2)] = r11;
    r16 = r8 | 8;
    r17 = r1 + r16 | 0;
    return r17;
  }
  if ((r38 | 0) == 31) {
    r39 = 0;
  } else {
    r39 = 25 - (r38 >>> 1) | 0;
  }
  r38 = r35 << r39;
  r39 = HEAP32[r14 >> 2];
  while (1) {
    if ((HEAP32[r39 + 4 >> 2] & -8 | 0) == (r35 | 0)) {
      break;
    }
    r40 = (r38 >>> 31 << 2) + r39 + 16 | 0;
    r14 = HEAP32[r40 >> 2];
    if ((r14 | 0) == 0) {
      r6 = 2323;
      break;
    } else {
      r38 = r38 << 1;
      r39 = r14;
    }
  }
  if (r6 == 2323) {
    if (r40 >>> 0 < HEAP32[1331646] >>> 0) {
      _abort();
    }
    HEAP32[r40 >> 2] = r11;
    HEAP32[r13 + (r5 + 6)] = r39;
    HEAP32[r13 + (r5 + 3)] = r11;
    HEAP32[r13 + (r5 + 2)] = r11;
    r16 = r8 | 8;
    r17 = r1 + r16 | 0;
    return r17;
  }
  r40 = r39 + 8 | 0;
  r6 = HEAP32[r40 >> 2];
  r38 = HEAP32[1331646];
  if (r39 >>> 0 < r38 >>> 0) {
    _abort();
  }
  if (r6 >>> 0 < r38 >>> 0) {
    _abort();
  }
  HEAP32[r6 + 12 >> 2] = r11;
  HEAP32[r40 >> 2] = r11;
  HEAP32[r13 + (r5 + 2)] = r6;
  HEAP32[r13 + (r5 + 3)] = r39;
  HEAP32[r13 + (r5 + 6)] = 0;
  r16 = r8 | 8;
  r17 = r1 + r16 | 0;
  return r17;
}
_prepend_alloc["X"] = 1;
function _add_segment(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16;
  r3 = 0;
  r4 = HEAP32[1331648], r5 = r4 >> 2;
  r6 = r4;
  r7 = _segment_holding(r6);
  r8 = HEAP32[r7 >> 2];
  r9 = HEAP32[r7 + 4 >> 2];
  r7 = r8 + r9 | 0;
  r10 = r8 + (r9 - 39) | 0;
  if ((r10 & 7 | 0) == 0) {
    r11 = 0;
  } else {
    r11 = -r10 & 7;
  }
  r10 = r8 + (r9 - 47) + r11 | 0;
  r11 = r10 >>> 0 < (r4 + 16 | 0) >>> 0 ? r6 : r10;
  r10 = r11 + 8 | 0, r9 = r10 >> 2;
  _init_top(r1, r2 - 40 | 0);
  HEAP32[r11 + 4 >> 2] = 27;
  HEAP32[r9] = HEAP32[1331753];
  HEAP32[r9 + 1] = HEAP32[1331754];
  HEAP32[r9 + 2] = HEAP32[1331755];
  HEAP32[r9 + 3] = HEAP32[1331756];
  HEAP32[1331753] = r1;
  HEAP32[1331754] = r2;
  HEAP32[1331756] = 0;
  HEAP32[1331755] = r10;
  r10 = r11 + 28 | 0;
  HEAP32[r10 >> 2] = 7;
  L2882 : do {
    if ((r11 + 32 | 0) >>> 0 < r7 >>> 0) {
      r2 = r10;
      while (1) {
        r1 = r2 + 4 | 0;
        HEAP32[r1 >> 2] = 7;
        if ((r2 + 8 | 0) >>> 0 < r7 >>> 0) {
          r2 = r1;
        } else {
          break L2882;
        }
      }
    }
  } while (0);
  if ((r11 | 0) == (r6 | 0)) {
    return;
  }
  r7 = r11 - r4 | 0;
  r11 = r7 + (r6 + 4) | 0;
  HEAP32[r11 >> 2] = HEAP32[r11 >> 2] & -2;
  HEAP32[r5 + 1] = r7 | 1;
  HEAP32[r6 + r7 >> 2] = r7;
  r6 = r7 >>> 3;
  if (r7 >>> 0 < 256) {
    r11 = r6 << 1;
    r10 = (r11 << 2) + 5326608 | 0;
    r2 = HEAP32[1331642];
    r1 = 1 << r6;
    do {
      if ((r2 & r1 | 0) == 0) {
        HEAP32[1331642] = r2 | r1;
        r12 = r10;
        r13 = (r11 + 2 << 2) + 5326608 | 0;
      } else {
        r6 = (r11 + 2 << 2) + 5326608 | 0;
        r9 = HEAP32[r6 >> 2];
        if (r9 >>> 0 >= HEAP32[1331646] >>> 0) {
          r12 = r9;
          r13 = r6;
          break;
        }
        _abort();
      }
    } while (0);
    HEAP32[r13 >> 2] = r4;
    HEAP32[r12 + 12 >> 2] = r4;
    HEAP32[r5 + 2] = r12;
    HEAP32[r5 + 3] = r10;
    return;
  }
  r10 = r4;
  r12 = r7 >>> 8;
  do {
    if ((r12 | 0) == 0) {
      r14 = 0;
    } else {
      if (r7 >>> 0 > 16777215) {
        r14 = 31;
        break;
      }
      r13 = (r12 + 1048320 | 0) >>> 16 & 8;
      r11 = r12 << r13;
      r1 = (r11 + 520192 | 0) >>> 16 & 4;
      r2 = r11 << r1;
      r11 = (r2 + 245760 | 0) >>> 16 & 2;
      r6 = 14 - (r1 | r13 | r11) + (r2 << r11 >>> 15) | 0;
      r14 = r7 >>> ((r6 + 7 | 0) >>> 0) & 1 | r6 << 1;
    }
  } while (0);
  r12 = (r14 << 2) + 5326872 | 0;
  HEAP32[r5 + 7] = r14;
  HEAP32[r5 + 5] = 0;
  HEAP32[r5 + 4] = 0;
  r6 = HEAP32[1331643];
  r11 = 1 << r14;
  if ((r6 & r11 | 0) == 0) {
    HEAP32[1331643] = r6 | r11;
    HEAP32[r12 >> 2] = r10;
    HEAP32[r5 + 6] = r12;
    HEAP32[r5 + 3] = r4;
    HEAP32[r5 + 2] = r4;
    return;
  }
  if ((r14 | 0) == 31) {
    r15 = 0;
  } else {
    r15 = 25 - (r14 >>> 1) | 0;
  }
  r14 = r7 << r15;
  r15 = HEAP32[r12 >> 2];
  while (1) {
    if ((HEAP32[r15 + 4 >> 2] & -8 | 0) == (r7 | 0)) {
      break;
    }
    r16 = (r14 >>> 31 << 2) + r15 + 16 | 0;
    r12 = HEAP32[r16 >> 2];
    if ((r12 | 0) == 0) {
      r3 = 2362;
      break;
    } else {
      r14 = r14 << 1;
      r15 = r12;
    }
  }
  if (r3 == 2362) {
    if (r16 >>> 0 < HEAP32[1331646] >>> 0) {
      _abort();
    }
    HEAP32[r16 >> 2] = r10;
    HEAP32[r5 + 6] = r15;
    HEAP32[r5 + 3] = r4;
    HEAP32[r5 + 2] = r4;
    return;
  }
  r4 = r15 + 8 | 0;
  r16 = HEAP32[r4 >> 2];
  r3 = HEAP32[1331646];
  if (r15 >>> 0 < r3 >>> 0) {
    _abort();
  }
  if (r16 >>> 0 < r3 >>> 0) {
    _abort();
  }
  HEAP32[r16 + 12 >> 2] = r10;
  HEAP32[r4 >> 2] = r10;
  HEAP32[r5 + 2] = r16;
  HEAP32[r5 + 3] = r15;
  HEAP32[r5 + 6] = 0;
  return;
}



_add_segment["X"]=1;

// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);


  var ret;

  ret = Module['_main'](argc, argv, 0);


  return ret;
}




function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }

  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

initRuntime();

var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

if (shouldRunNow) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}






  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_new_alias","_mrb_mod_undef","_mrb_ary_cmp","_mrb_check_string_type","_nosplat","_new_strsym","_mrb_funcall_with_block","_mrb_time_make","_append_gen","_mrb_bob_missing","_mrb_fixnum_plus","_mrb_true_value1441","_mrb_str_capitalize_bang","_mrb_mod_remove_cvar","_math_log10","_mrb_fixnum_value1029","_remove_sign_bits","_true_or","_math_acos","_new_retry","_mrb_str_new_empty","_new_return","_mrb_true_value1217","_cons_free_gen","_mrb_garbage_collect","_mrb_gc_mark_ht_size","_fix_mul","_mrb_str_bytesize","_mrb_struct_init_copy","_mrb_str_new_cstr","_mrb_alias_method","_mrb_struct_members","_mrb_ary_equal","_mrb_false_value758","_mrb_hash_to_hash","_mrb_make_exception","_mrb_string_value_cstr","_math_hypot","_mrb_str_subseq","_mrb_ary_splat","_add_gray_list","_mrb_time_hour","_tmalloc_large","_mrb_init_exception","_ary_concat","_sys_alloc","_flo_mul","_parser_strndup","_math_ldexp","_mrb_ary_inspect","_new_block","_obj_iv_p","_mrb_false_value1338","_mrb_str_cat2","_str_make_shared","_mrb_obj_value1023","_mrb_hash_set_default","_fix_and","_mrb_fix2str","_mrb_symbol_value913","_struct_class","_mrb_hash_equal","_mrb_hash_ht_key","_mrb_mod_include_p","_mrb_ary_reverse_bang","_add_segment","_kh_put_mt","_mrb_time_gm","_sym_cmp","_str_new","_mrb_obj_clone","_mrb_symbol_value1393","_mrb_hash_inspect","_mrb_ary_last","_num_pow","_mrb_f_raise","_mrb_define_module_function","_mrb_nil_value107","_mrb_str_to_f","_mrb_str_to_i","_mrb_ary_times","_mrb_printstr","_mrb_hash_shift","_mrb_undef_method","_mrb_str_new2","_mrb_define_method","_mrb_obj_iv_ifnone","_new_unless","_new_sclass","_list4_gen","_nil_inspect","_mrb_load_irep","_mrb_vm_define_class","_mrb_ary_empty_p","_mrb_check_datatype","_mrb_obj_ivar_get","_mrb_str_buf_append","_mrb_str_cat","_iv_size","_mrb_time_free","_list5_gen","_mrb_str_hash","_mrb_exc_new","_mrb_fixnum_value1576","_mrb_intern2","_mrb_js_array_create","_mrb_final_core","_class_instance_method_list","_mrb_obj_id","_math_erfc","_fix_to_s","_mrb_str_format","_kh_get_n2s","_mrb_mod_included_modules","_mruby_js_set_boolean","_range_eql","_mrb_sym2name_len","_new_if","_mrb_float_value","_mrb_proc_init_copy","_kh_resize_iv","_codegen_palloc","_mrb_hash_values","_mrb_ary_replace","_mrb_ary_delete_at","_mrb_obj_value39","_mrb_js_obj_get","_mrb_range_beg","_fix_lshift","_fix_succ","_gc_disable","_str_alloc","_mrb_f_global_variables","_new_fcall","_sys_trim","_mrb_hash_default","_mrb_false_value","_readint_float","_mrb_ary_unshift","_mrb_to_id","_iv_get","_mrb_realloc","_mrb_str_reverse","_incremental_gc","_mrb_undef_value231","_iv_i","_mrb_undef_class_method","_prepare_incremental_sweep","_mrb_fixnum_value864","_mrb_obj_not_equal_m","_math_frexp","_final_marking_phase","_mrb_intern_str","_new_false","_num_eql","_mrb_pool_open","_mrb_time_dstp","_local_add","_flo_finite_p","_mrb_false_value1579","_new_break","_mrb_init_print","_mrb_obj_value110","_scope_finish","_mrb_obj_respond_to","_mrb_f_block_given_p_m","_mrb_str_concat","_mrb_nil_value1215","_mrb_str_empty_p","_exc_to_s","_mrb_Integer","_mruby_js_set_nil","_mrb_str_decref","_flo_minus","_local_unnest","_mrb_hash_aset","_mrb_init_proc","_cond","_mrb_cv_get","_mrb_time_initialize_copy","_scope_new","_mruby_js_set_function_handle","_mrb_nil_value920","_mrb_time_minus","_new_true","_kh_del_iv","_mrb_obj_singleton_methods_m","_arg_ambiguous","_mrb_hash_ht_hash_equal","_gen_call","_mrb_fixnum_value967","_kh_put_iv","_kh_init_ht_size","_new_for","_mrb_define_class_id","_math_log","_mrb_str_chomp_bang","_call_uni_op","_mrb_const_set","_mrb_is_local_id","_mrb_proc_initialize","_mrb_time_initialize","_mrb_iv_remove","_new_dsym","_mrb_name_class","_mrb_obj_value","_mrb_method_search_vm","_irep_error","_mrb_generate_code","_mrb_time_min","_cv_i","_gen_assignment","_math_sin","_mrb_fixnum_value","_mrb_pool_alloc","_mrb_cv_defined","_mrb_define_method_raw","_flo_plus","_mrb_str_cmp","_new_block_arg","_mrb_hash_get","_webruby_internal_run_bytecode","_intern_gen","_call_bin_op","_mruby_js_name_error","_mrb_float_value1577","_mrb_ary_rindex_m","_mrb_str_aref","_mrb_free_heap","_kh_put_n2s","_loop_break","_gc_enable","_negate_lit","_mrb_class_get","_mrb_time_mday","_mrb_str_append","_mrb_any_to_s","_ary_subseq","_mrb_mod_instance_methods","_mrb_hash_new_capa","_math_cosh","_mrb_write_barrier","_new_sym","_mrb_obj_hash","_mrb_obj_value1336","_bin_to_uint16","_mrb_obj_value1531","_math_acosh","_class_from_sym","_mrb_mod_cvar_set","_mrb_range_include","_new_hash","_stack_copy","_mrb_proc_new","_var_reference","_codegen_error","_mrb_mod_remove_const","_mrb_check_type","_mrb_false_value965","_tokfix","_mrb_false_value89","_mrb_cstr_to_inum","_calc_crc_16_ccitt","_gc_generational_mode_get","_mrb_class_new_instance","_mrb_convert_to_integer","_mrb_nil_value1391","_new_msym","_new_dot2","_new_dot3","_mrb_str_times","_mruby_js_get_hash_handle","_mrb_gc_arena_save","_mrb_intern","_join_ary","_mrb_vm_special_get","_localjump_error","_kh_get_mt","_mrb_init_mrblib","_mrb_true_value1297","_range_to_s","_undef_method","_mod_define_method","_mrb_true_value614","_sign_bits","_mrb_true_value964","_mrb_hash_clear","_toklen","_mrb_mod_const_set","_mrb_init_heap","_mrb_incremental_gc","_toklast","_mruby_js_get_proc","_mrb_nil_value1519","_new_nth_ref","_mrb_struct_eql","_node_len","_mmap_resize","_mrb_load_nstring_cxt","_mrb_gc_mark_gv","_mrb_pool_close","_mrb_nil_value598","_new_and","_iv_mark_i","_mrb_array_tojs","_kh_del_mt","_mruby_js_set_float","_new_asgn","_mrb_define_class_under","_mrb_time_asctime","_mrb_obj_as_string","_mrb_str_chop","_kh_get_ht","_exc_equal","_mrb_mod_module_eval","_mrb_str_substr","_set_backtrace","_mrb_f_sprintf","_mrb_struct_ref3","_webruby_internal_run","_mrb_sprintf","_num_floor","_mrb_struct_initialize_m","_flo_infinite_p","_mrb_define_method_vm","_range_check","_link_heap_page","_mrb_hash_replace","_mrb_class1287","_mrb_fixnum_value1106","_new_str","_kh_alloc_mt","_mrb_ary_new4","_math_exp","_fix_plus","_mrb_class_superclass","_tmalloc_small","_mrb_to_integer","_math_asinh","_mrb_nil_value966","_mrb_nil_value743","_mrb_fixnum_value599","_mrb_mod_append_features","_math_cbrt","_fix_mod","_mrb_true_value1027","_gv_i","_yylex","_mrb_struct_s_def","_call_with_block","_mrb_str_buf_cat","_uvget","_mrb_mod_cv_defined","_mrb_ary_new_from_values","_range_inspect","_remove_method","_mrb_range_beg_len","_math_cos","_mrb_str_reverse_bang","_kh_destroy_ht","_str_eql","_str_replace","_mrb_class_real","_mruby_js_object_handle_free","_new_super","_mrb_nil_value134","_mrb_init_kernel","_mrb_str_intern","_mrb_run","_new_call","_mruby_js_argument_type","_mrb_mod_remove_method","_allocf","_ary_new_capa","_mrb_obj_is_kind_of","_num_equal","_mrb_str_equal","_mrb_obj_value1575","_mrb_parser_parse","_mrb_yield_argv","_gc_interval_ratio_set","_false_xor","_gc_start","_hash","_mrb_raise","_uvenv","_mrb_false_value922","_mrb_ary_join_m","_closure_setup","_mrb_struct_ref","_mrb_vm_iv_get","_flo_hash","_mrb_const_defined_at","_change_gen_gc_mode","_mruby_js_set_object_handle","_mrb_ary_size","_true_and","_mrb_cv_set","_push_","_inspect_hash","_mrb_iv_get","_mrb_float_value1150","_lv_idx","_mrb_float_value44","_r_le","_mrb_hash_tbl","_realloc","_new_redo","_mrb_str_to_dbl","_mrb_gc_mark_ht","_mrb_hash_default_proc","_list3_gen","_exc_inspect","_math_tanh","_mrb_module_new","_mrb_str_to_s","_kh_del_ht","_mrb_symbol_value1115","_kh_destroy_iv","_mrb_mod_method_defined","_assignable","_mrb_true_value1337","_kh_put_ht","_mruby_js_get_integer","_struct_copy","_hash_equal","_iv_foreach","_kh_alloc_n2s","_mrb_range_each","_to_hash","_mrb_time_getutc","_ary_replace","_mrb_class_outer_module","_obj_is_instance_of","_mrb_to_flo","_inspect_i","_mrb_str_split_m","_mrb_obj_alloc","_incremental_marking_phase","_kh_copy_mt","_mrb_struct_set","_mrb_true_value921","_mrb_hash_modify","_float_id","_mrb_mod_cv_get","_mrb_init_comparable","_iv_free","_mrb_define_singleton_method","_mruby_js_get_string","_new_dstr","_mrb_fixnum_minus","_mrb_str_include","_mrb_init_gc","_mrb_time_alloc","_mrb_str_init","_dispatch_linked","_mrb_struct_aref","_pushback","_kh_destroy_n2s","_init_copy","_num_cmp","_mrb_str_buf_new","_loop_pop","_gc_interval_ratio_get","_mrb_time_wday","_mrb_ary_push","_add_heap","_kh_init_n2s","_mrb_struct_initialize_withArg","_boot_defclass","_mrb_const_defined","_mrb_str_downcase","_fix_equal","_kh_destroy_mt","_fix_xor","_mrb_struct_set_m","_kh_alloc_iv","_num_members","_mrb_str_new","_csym_i","_mrb_str_index_m","_mrb_struct_ref8","_mrb_respond_to","_mrb_true_value88","_mrb_struct_ref7","_codegen","_mrb_struct_ref5","_mrb_ary_join","_match_op","_mrb_struct_ref0","_mrb_ary_s_create","_yywarn","_mrb_time_zone","_new_def","_new_next","_mrb_str_resize","_mrb_closure_new","_current_mrb_time","_true_xor","_mrb_gv_set","_mrb_hash_fetch","_mrb_ary_push_m","_tokadd","_new_class","_mrb_obj_iv_inspect","_exc_message","_mrb_init_struct","_mrb_obj_methods","_mrb_memsearch_qs","_printstr","_new_ensure","_make_struct","_mrb_assoc_new","_iv_put","_mrb_class_new","_mrb_time_day","_mrb_ary_plus","_proc_lambda","_mruby_js_set_array_handle","_gc_generational_mode_set","_incremental_sweep_phase","_mrb_time_eq","_inspect_ary","_mrb_proc_copy","_mrb_time_cmp","_fixdivmod","_mrb_read_irep","_mrb_define_method_id","_mrb_obj_ivar_defined","_mrb_mod_ancestors","_mrb_name_error","_new_case","_mrb_obj_value1436","_fix_divmod","_new_float","_mrb_obj_inspect","_to_ary","_mrb_time_year","_mrb_true_value1107","_mrb_method_search","_false_to_s","_yysyntax_error","_mrb_yield_internal","_mrb_class","_mrb_struct_getmember","_mrb_float_value1211","_mrb_define_alias","_mrb_p","_math_atan","_new_op_asgn","_mrb_init_range","_ret_args","_to_str","_mrb_str_rindex_m","_math_erf","_kh_get_iv","_mrb_obj_methods_m","_math_sqrt","_codegen_realloc","_fix_minus","_mrb_init_string","_parser_palloc","_mrb_hash_has_key","_mrb_range_initialize","_mrb_mod_eqq","_mrb_nil_value","_mrb_bob_not","_mrb_str_to_inum","_mrb_gc_protect","_fix_to_f","_basic_obj_respond_to","_num_abs","_kh_copy_iv","_mrb_struct_aset_id","_mrb_is_const_id","_mrb_symbol_value1437","_mrb_struct_inspect","_mrb_symbol_value111","_fix_uminus","_mrb_obj_public_methods","_mrb_vm_cv_get","_gc_step_ratio_get","_unlink_heap_page","_attrsym","_new_lit","_mrb_time_to_i","_release_unused_segments","_str_with_class","_mrb_obj_equal_m","_local_switch","_mrb_inspect","_list2_gen","_mrb_fixnum_value1151","_mrb_str_upcase_bang","_mrb_exc_new3","_mrb_exc_raise","_local_nest","_num_div","_ecall","_mrb_ary_concat","_mrb_time_to_f","_raise_error","_mrb_false_value1028","_mrb_obj_value17","_link_free_heap_page","_mrb_class_path","_mrb_init_array","_mrb_time_wrap","_iv_del","_mrb_bob_init","_mrb_obj_iv_set","_flt2big","_math_log2","_kh_clear_ht","_mrb_vm_const_set","_mrb_field_write_barrier","_mrb_class_sym","_mrb_gc_mark","_mrb_vm_define_module","_r_gt","_math_tan","_mrb_alloca_free","_mrb_struct_aref_id","_mrb_vm_cv_set","_mrb_struct_ref9","_mrb_float_value1292","_mrb_str_bytes","_mrb_flt2big","_r_ge","_mrb_hash_keys","_mrb_fix2binstr","_mrb_nil_value86","_mrb_true_value1522","_flo_to_s","_mrb_time_utcp","_check_cv_name","_mrb_init_enumerable","_mrb_define_const","_argnum_error","_mrb_init_numeric","_mrb_funcall_argv","_mrb_proc_new_cfunc","_mrb_f_send","_int_to_i","_mrb_obj_iv_defined","_new_cvar","_new_postexe","_mrb_eql","_yywarning_s","_genop_peep","_mruby_js_get_symbol","_mrb_ary_shift","_read_rite_header","_local_resume","_make_exception","_mrb_funcall","_mrb_time_local","_yytnamerr","_mrb_gc_mark_mt","_scope_body","_mrb_hash_set_default_proc","_mrb_parser_new","_mrb_ary_concat_m","_loop_push","_malloc","_mrb_fixnum_value106","_mrb_ary_reverse","_new_int","_mrb_true","_bit_coerce","_mrb_gc_free_mt","_iv_new","_advance_phase","_mrb_gc_arena_restore","_mrb_obj_dup","_kh_init_ht","_mrb_false_value1523","_kh_init_n2s_size","_check_type","_mrb_ary_splice","_mrb_time_getlocal","_mrb_obj_value139","_mrb_fixnum_value1212","_inspect_struct","_webruby_internal_run_source","_tok","_fix_rev","_mrb_str_cmp_m","_mrb_obj_instance_eval","_mrb_hash_init_core","_mrb_false","_mrb_load_string","_new_nil","_mrb_to_int","_mrb_vm_const_get","_mrb_time_at","_mrb_struct_ref2","_local_var_p","_genop","_mrb_ary_decref","_mrb_class1102","_mruby_js_get_array_handle","_yystrlen","_mrb_str_upcase","_range_init","_mrb_parse_nstring","_scan_hex","_mrb_obj_extend_m","_mrb_obj_classname","_mrb_sym2name","_mrb_ary_pop","_new_self","_mrb_class750","_mrb_fixnum_value42","_top_env","_mrb_nil_value1112","_mrb_hash_has_valueWithvalue","_mrb_ary_new_capa","_mrb_mod_cvar_defined","_mrb_add_irep","_mrb_false_value1108","_mrb_true_value","_mrb_obj_extend","_nil_to_s","_bin_to_uint32","_obj_free","_num_uminus","_new_masgn","_mrb_mruby_js_gem_init","_parse_qstring","_inspect_range","_mruby_js_set_integer","_mrb_false_value1216","_mruby_js_invoke_proc","_mrb_top_self","_new_or","_mrb_obj_value1524","_mrb_js_func_invoke_internal","_mruby_js_set_string","_mrb_iv_copy","_mrb_obj_is_instance_of","_peek_n","_mrb_hash_set","_mrb_free_symtbl","_mrb_time_now","_mrb_gc_free_gv","_mrb_hash_has_keyWithKey","_mrb_struct_ref6","_mrb_obj_value591","_mrb_init_core","_mrb_obj_instance_variables","_mrb_parser_free","_mrb_hash_ht_hash_func","_mrb_struct_ref4","_kh_init_mt","_mrb_undef_value1392","_mrb_ary_eql","_mrb_struct_aref_n","_mrb_float_value863","_mark_tbl","_mrb_gc_mark_mt_size","_mrb_Float","_mrb_ary_index_m","_readint_mrb_int","_mrb_fixnum_value1520","_new_sdef","_codegen_start","_mrb_ary_new_elts","_mrb_const_defined_0","_mrb_str_hash_m","_mrb_id_attrset","_lambda_body","_mrb_str_capitalize","_mrb_struct_ref1","_mrb_ary_new","_new_lvar","_check_iv_name","_gc_mark_children","_mrb_ary_replace_m","_mrb_struct_s_members_m","_ary_fill_with_nil","_gc_protect","_new_colon2","_new_colon3","_mrb_gc_mark_iv","_mrb_str_replace","_kh_init_iv_size","_mrb_gc_free_iv","_newtok","_stack_extend","_mrb_define_module","_mrb_ary_aget","_scope_error","_skip","_lshift","_mrb_obj_remove_instance_variable","_is_leapyear","_flodivmod","_qstring_node","_mrb_obj_init_copy","_mrb_open","_mrb_voidp_value1111","_clear_all_old","_mrb_obj_value718","_mrb_data_object_alloc","_mrb_init_time","_mrb_str_plus","_mrb_class_new_class","_new_scope","_init_top","_gen_vmassignment","_symname_p","_flo_to_f","_str_buf_cat","_mrb_string_value_ptr","_GENERATED_TMP_mrb_mruby_js_gem_init","_mrb_js_obj_set","_true_to_s","_mrb_close","_to_hash1030","_mrb_singleton_class_clone","_mrb_raisef","_mrb_ary_unshift_m","_math_sinh","_mrb_str_inspect","_mrb_singleton_class","_mrb_mod_to_s","_kh_resize_ht","_new_module","_ary_expand_capa","_mrb_class_name","_prepare_singleton_class","_backref_error","_mrb_js_get_root_object","_mrb_init_object","_list6_gen","_exc_exception","_new_const","_check_and_print_errors","_for_body","_fmt_setup","_flo_round","_internal_realloc","_mrb_str_plus_m","_mrb_obj_class","_obj_respond_to","_method_entry_loop","_mrb_str_size","_mrb_ary_set","_kh_alloc_ht","_flo_truncate","_fix_or","_mrb_obj_id_m","_mrb_free","_read_rite_irep_record","_sym_hash_func","_free","_mrb_time_utc","_ary_elt","_fix_rshift","_gen_values","_mrb_fixnum_value1394","_mrb_str_dup","_mrb_obj_value1103","_mrb_str_dump","_mrb_hash_empty_p","_exc_initialize","_root_scan_phase","_mrb_gv_get","_setup_class","_new_yield","_mrb_js_obj_create","_mrb_time_sec","_is_special_global_name","_mrb_false_value615","_mrb_check_inheritable","_unlink_free_heap_page","_convert_type","_new_zsuper","_mrb_js_obj_initialize","_mrb_str_match","_flo_ceil","_mrb_mod_alias","_mrb_equal","_int_succ","_get_hash","_envadjust","_yyerror","_mrb_nil_value1276","_kh_init_iv","_mrb_str_equal_m","_check_const_name","_mrb_time_plus","_parse_string","_mrb_fixnum_value923","_mrb_ary_clear","_mrb_alloca","_mrb_obj_class_m","_new_sym862","_struct_ivar_get","_mrb_instance_new","_mrb_range_excl","_my_timgm","_mrb_time_update_datetime","_num_uplus","_math_atanh","_mrb_obj_equal","_mrb_obj_eq","_mrb_load_string_cxt","_mrb_str_aref_m","_gc_step_ratio_set","_mrb_cstr_to_dbl","_mod_const_check","_mrb_mod_include","_sym_equal","_mrb_obj_protected_methods","_mrb_gc_mark_iv_size","_mrb_sym_to_s","_mrb_str_index","_mrb_float_value1521","_iv_copy","_math_asin","_flo_mod","_mrb_mod_const_defined","_mrb_nil_value1026","_kh_resize_n2s","_mrb_time_yday","_mrb_hash_has_value","_mrb_equal_m","_new_begin","_mrb_struct_aset","_mrb_ary_ref","_mrb_obj_iv_get","_mruby_js_get_object_handle_value","_new_until","_exc_debug_info","_mrb_time_usec","_mrb_fixnum_mul","_mrb_nil_value1580","_mrb_obj_ivar_set","_new_splat","_mrb_obj_basic_to_s_p","_flo_eq","_new_while","_uvset","_mrb_convert_type","_yyparse","_kh_init_mt_size","_mrb_mod_extend_object","_mrb_attr_get","_parser_yylex","_new_label","_mrb_include_module","_false_and","_mrb_symbol_value717","_peeks","_array_copy","_mrb_define_class_method","_mrb_str_rindex","_mrb_mod_cv_set","_mrb_obj_singleton_methods","_reserved_word","_prepend_alloc","_mrb_class_obj_get","_mrb_mod_cvar_get","_mrb_symbol_value","_ary_shrink_capa","_const_get","_mrb_iv_set","_mrb_warn","_mrb_init_hash","_mrb_open_allocf","_mrb_fixnum_value138","_read_escape","_mrb_obj_call_init","_scan_oct","_mrb_check_convert_type","_mrb_vm_iv_set","_mrb_false_value1298","_mruby_js_get_object_handle","_mrb_define_module_id","_new_ivar","_parser_strdup","_mrb_init_symtbl","_mrb_range_eq","_time_mktime","_new_back_ref","_false_or","_mrb_voidp_value","_mrb_nil_value232","_load_exec","_mrb_hash_delete_key","_init_bins","_new_rescue","_math_atan2","_page_alloc","_ary_make_shared","_mrb_undef_value","_mrb_define_class","_dispatch","_args_with_block","_skips","_mrb_init_math","_kh_resize_mt","_new_arg","_mrb_init_class","_mrb_malloc","_mrb_str_downcase_bang","_local_add_f","_cipush","_stack_init","_cons_gen","_cipop","_mrb_range_new","_mrb_nil_value43","_mrb_string_value","_rshift","_mrb_nil_value1438","_mrb_obj_is_kind_of_m","_mrb_bug","_mrb_true_value1578","_mrb_get_args","_new_args","_mrb_mod_const_get","_mrb_hash_aget","_mrb_hash_size_m","_mrb_str_chop_bang","_mrb_get_datatype","_mrb_time_localtime","_mrb_const_get","_mrb_ary_aset","_sym_inspect","_mrb_gc_free_ht","_mrb_str_chomp","_ary_modify","_mrb_calloc","_mruby_js_get_float","_mrb_init_symbol","_num_round","_is_strict","_mrb_obj_private_methods","_init_mparams","_mrb_hash_eql","_mrb_symbol_value135","_mrb_hash_delete","_new_gvar","_mrb_str_eql","_mrb_str_literal","_segment_holding","_mrb_struct_s_members","_flo_floor","_mrb_struct_members_m","_new_undef","_yyerror_i","_gc_gray_mark","_range_initialize_copy","_yywarning","_mrb_true_value757","_mrb_memsearch","_mrb_false_value1442","_mrb_range_end","_mrb_mod_class_variables","_mrb_str_to_str","_new_lambda","_mrb_ary_first","_new_array","_list1_gen","_mrb_time_mon","_mrb_fixnum_value87","_mrb_struct_equal","_hex_to_uint8","_mrb_obj_value904","_sym_to_sym","_yystpcpy","_mrb_init_mrbgems","_str_modify","_nextc"]


(function() {
  function WEBRUBY() {
    var instance = {};
    instance.mrb = _mrb_open();
    instance['close'] = function() {
      _mrb_close(instance.mrb);
    };
    instance['run'] = function() {
      _webruby_internal_run(instance.mrb);
    };
    instance['run_bytecode'] = function(bc) {
      var stack = Runtime.stackSave();
      var addr = Runtime.stackAlloc(bc.length);
      var ret;
      writeArrayToMemory(bc, addr);

      ret = _webruby_internal_run_bytecode(instance.mrb, addr);

      Runtime.stackRestore(stack);
      return ret;
    };
    instance['run_source'] = function(src) {
      var stack = Runtime.stackSave();
      var addr = Runtime.stackAlloc(src.length);
      var ret;
      writeStringToMemory(src, addr);

      ret = _webruby_internal_run_source(instance.mrb, addr);

      Runtime.stackRestore(stack);
      return ret;
    };
    return instance;
  };

  if (typeof window === 'object') {
    window['WEBRUBY'] = WEBRUBY;
  } else {
    global['WEBRUBY'] = WEBRUBY;
  }
}) ();


