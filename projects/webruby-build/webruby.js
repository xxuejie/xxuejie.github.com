// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function(filename) { return Module['read'](filename, true) };
  Module['load'] = function(f) {
    globalEval(read(f));
  };
  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}
if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  Module['read'] = read;
  Module['readBinary'] = function(f) {
    return read(f, 'binary');
  };
  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}
if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }
  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}
if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  Module['load'] = importScripts;
}
if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 4,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert((STACKTOP|0) < (STACK_MAX|0)); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = ((((DYNAMICTOP)+3)>>2)<<2); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? (((low)>>>(0))+(((high)>>>(0))*4294967296)) : (((low)>>>(0))+(((high)|(0))*4294967296))); return ret; },
  GLOBAL_BASE: 4,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = globalScope['Module']['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (HEAPF64[(tempDoublePtr)>>3]=value,HEAP32[((ptr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((ptr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((ptr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown
var runtimeInitialized = false;
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledInit = false, calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
function addPreRun(func) {
  if (!Module['preRun']) Module['preRun'] = [];
  else if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
  Module['preRun'].push(func);
}
var awaitingMemoryInitializer = false;
function loadMemoryInitializer(filename) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
    runPostSets();
  }
  // always do this asynchronously, to keep shell and web as similar as possible
  addPreRun(function() {
    if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
      applyData(Module['readBinary'](filename));
    } else {
      Browser.asyncLoad(filename, function(data) {
        applyData(data);
      }, function(data) {
        throw 'could not load memory initializer ' + filename;
      });
    }
  });
  awaitingMemoryInitializer = false;
}
// === Body ===
STATIC_BASE = 4;
STATICTOP = STATIC_BASE + 114508;
var _stdout;
var _stderr;
var _stdout = _stdout=allocate([0,0,0,0], "i8", ALLOC_STATIC);
var _stderr = _stderr=allocate([0,0,0,0], "i8", ALLOC_STATIC);
/* memory initializer */ allocate([0,2,2,2,2,2,2,2,2,2,150,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,127,2,2,2,125,120,2,146,147,123,121,144,122,143,124,2,2,2,2,2,2,2,2,2,2,115,149,117,113,116,114,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,142,2,148,119,2,145,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,140,118,141,128,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,126,129,130,131,132,133,134,135,136,137,138,139,4,159,1,0,228,158,1,0,212,158,1,0,148,158,1,0,112,158,1,0,100,158,1,0,232,157,1,0,216,157,1,0,200,157,1,0,184,157,1,0,152,157,1,0,104,157,1,0,88,157,1,0,64,157,1,0,36,157,1,0,20,157,1,0,184,156,1,0,168,156,1,0,152,156,1,0,136,156,1,0,104,156,1,0,84,156,1,0,68,156,1,0,44,156,1,0,0,156,1,0,244,155,1,0,124,155,1,0,108,155,1,0,88,155,1,0,68,155,1,0,44,155,1,0,24,155,1,0,8,155,1,0,228,154,1,0,204,154,1,0,176,154,1,0,92,154,1,0,80,154,1,0,68,154,1,0,56,154,1,0,36,154,1,0,0,154,1,0,240,153,1,0,204,153,1,0,156,153,1,0,140,153,1,0,36,153,1,0,24,153,1,0,8,153,1,0,240,152,1,0,212,152,1,0,196,152,1,0,188,152,1,0,160,152,1,0,136,152,1,0,96,152,1,0,4,152,1,0,232,151,1,0,192,151,1,0,136,151,1,0,44,151,1,0,224,150,1,0,184,150,1,0,152,150,1,0,92,150,1,0,80,150,1,0,220,149,1,0,208,149,1,0,196,149,1,0,188,149,1,0,180,149,1,0,160,149,1,0,152,149,1,0,132,149,1,0,100,149,1,0,92,149,1,0,32,149,1,0,24,149,1,0,16,149,1,0,8,149,1,0,0,149,1,0,200,148,1,0,192,148,1,0,164,148,1,0,140,148,1,0,132,148,1,0,68,148,1,0,60,148,1,0,52,148,1,0,44,148,1,0,32,148,1,0,240,147,1,0,232,147,1,0,204,147,1,0,188,147,1,0,180,147,1,0,108,147,1,0,96,147,1,0,88,147,1,0,80,147,1,0,72,147,1,0,56,147,1,0,40,147,1,0,12,147,1,0,244,146,1,0,232,146,1,0,120,146,1,0,104,146,1,0,96,146,1,0,80,146,1,0,24,146,1,0,252,145,1,0,244,145,1,0,216,145,1,0,204,145,1,0,200,145,1,0,124,145,1,0,120,145,1,0,116,145,1,0,112,145,1,0,108,145,1,0,84,145,1,0,80,145,1,0,52,145,1,0,32,145,1,0,28,145,1,0,160,144,1,0,156,144,1,0,152,144,1,0,144,144,1,0,128,144,1,0,88,144,1,0,80,144,1,0,28,144,1,0,248,143,1,0,216,143,1,0,92,143,1,0,60,143,1,0,40,143,1,0,28,143,1,0,24,143,1,0,216,142,1,0,212,142,1,0,184,142,1,0,160,142,1,0,156,142,1,0,60,142,1,0,56,142,1,0,52,142,1,0,48,142,1,0,40,142,1,0,20,142,1,0,12,142,1,0,236,141,1,0,204,141,1,0,168,141,1,0,84,141,1,0,36,141,1,0,4,141,1,0,212,140,1,0,160,140,1,0,76,140,1,0,56,140,1,0,4,140,1,0,240,139,1,0,228,139,1,0,72,139,1,0,56,139,1,0,40,139,1,0,36,139,1,0,28,139,1,0,0,139,1,0,244,138,1,0,212,138,1,0,192,138,1,0,180,138,1,0,52,138,1,0,40,138,1,0,8,138,1,0,0,138,1,0,248,137,1,0,224,137,1,0,216,137,1,0,184,137,1,0,172,137,1,0,168,137,1,0,64,137,1,0,60,137,1,0,48,137,1,0,36,137,1,0,24,137,1,0,248,136,1,0,232,136,1,0,196,136,1,0,172,136,1,0,168,136,1,0,72,136,1,0,56,136,1,0,48,136,1,0,40,136,1,0,32,136,1,0,12,136,1,0,4,136,1,0,232,135,1,0,216,135,1,0,212,135,1,0,160,135,1,0,156,135,1,0,152,135,1,0,148,135,1,0,108,135,1,0,92,135,1,0,88,135,1,0,64,135,1,0,52,135,1,0,48,135,1,0,244,134,1,0,240,134,1,0,224,134,1,0,8,167,1,0,20,165,1,0,216,134,1,0,204,134,1,0,180,134,1,0,164,134,1,0,132,134,1,0,108,134,1,0,96,134,1,0,44,134,1,0,28,134,1,0,16,134,1,0,4,134,1,0,252,133,1,0,228,133,1,0,216,133,1,0,188,133,1,0,176,133,1,0,164,133,1,0,64,133,1,0,52,133,1,0,48,133,1,0,44,133,1,0,32,133,1,0,248,132,1,0,236,132,1,0,204,132,1,0,180,132,1,0,168,132,1,0,84,132,1,0,76,132,1,0,64,132,1,0,48,132,1,0,44,132,1,0,20,132,1,0,12,132,1,0,240,131,1,0,216,131,1,0,152,131,1,0,104,131,1,0,32,131,1,0,220,130,1,0,164,130,1,0,140,130,1,0,72,130,1,0,248,129,1,0,208,129,1,0,188,129,1,0,180,129,1,0,140,129,1,0,84,129,1,0,80,129,1,0,68,129,1,0,60,129,1,0,28,129,1,0,252,128,1,0,216,128,1,0,200,128,1,0,192,128,1,0,152,128,1,0,96,128,1,0,84,128,1,0,60,128,1,0,48,128,1,0,20,128,1,0,244,127,1,0,204,127,1,0,184,127,1,0,180,127,1,0,144,127,1,0,92,127,1,0,84,127,1,0,72,127,1,0,60,127,1,0,32,127,1,0,0,127,1,0,224,126,1,0,208,126,1,0,200,126,1,0,152,126,1,0,136,126,1,0,128,126,1,0,124,126,1,0,120,126,1,0,112,126,1,0,88,126,1,0,0,0,0,0,99,0,114,1,3,1,60,1,151,1,172,1,226,0,214,0,214,0,214,0,211,0,242,0,242,0,78,1,194,0,242,0,5,1,11,2,104,2,115,0,115,0,120,2,248,0,248,0,120,2,32,1,248,0,0,1,227,1,115,0,211,0,123,1,237,1,221,0,224,0,183,1,100,0,247,0,247,0,78,2,50,2,247,0,48,2,138,2,56,2,122,2,20,1,59,2,25,1,29,1,196,1,209,1,16,2,1,3,198,1,110,2,24,1,28,1,227,0,226,0,168,255,42,1,216,2,67,0,76,2,67,0,115,0,203,2,77,2,204,1,166,255,23,1,226,2,206,1,64,1,63,1,18,1,122,2,107,2,7,3,94,2,239,1,48,2,61,3,56,2,223,2,64,3,153,2,242,1,112,1,115,0,242,1,142,1,242,1,113,2,242,1,177,2,242,1,77,2,1,1,118,3,252,2,112,1,117,1,234,2,142,1,120,1,129,3,129,1,3,0,0,1,227,0,109,1,162,255,46,2,23,3,54,2,245,0,250,0,54,2,155,255,251,0,30,3,192,1,117,1,77,2,159,255,70,1,71,1,196,2,197,2,237,1,241,2,2,1,169,2,156,255,237,254,223,0,46,2,60,254,54,2,7,1,160,255,189,255,57,254,160,255,141,2,58,254,168,255,11,1,77,2,158,255,72,1,158,255,46,2,121,1,54,2,112,3,166,255,122,1,227,0,126,1,162,255,200,1,159,255,150,1,154,2,110,1,46,2,223,0,54,2,79,3,161,255,170,2,175,255,118,1,115,1,129,3,118,3,168,255,74,1,190,1,168,255,58,1,59,1,168,255,7,2,75,1,155,255,166,255,237,254,237,254,166,255,172,1,247,253,166,255,46,2,54,2,161,255,57,254,222,0,223,0,58,254,113,1,156,255,141,1,123,2,64,3,142,3,255,0,125,2,215,2,79,1,154,1,42,1,128,2,113,1,152,2,226,0,1,3,46,2,237,1,54,2,230,2,208,1,133,2,214,0,214,0,222,0,223,0,135,2,209,1,170,255,202,2,153,1,120,2,120,2,138,1,170,3,163,255,223,0,222,0,223,0,207,2,157,255,170,1,170,1,242,0,252,0,242,0,242,0,157,1,158,1,181,1,164,255,182,1,184,1,122,2,248,0,248,253,248,0,227,0,159,255,159,255,168,255,226,0,16,3,227,0,36,3,255,0,227,0,3,2,166,255,247,0,252,2,247,0,12,2,127,1,160,255,160,255,195,1,194,1,252,2,167,255,209,1,248,253,105,3,158,255,158,255,203,1,81,0,169,255,81,0,116,0,116,0,223,0,176,2,18,1,217,0,217,0,217,0,115,0,56,254,234,0,217,0,217,0,9,2,74,2,217,0,222,0,223,0,151,2,62,2,64,2,2,1,212,2,193,254,227,0,214,0,214,0,214,0,214,0,55,254,255,1,0,2,202,1,202,1,149,1,206,2,191,1,202,1,145,1,237,1,14,1,161,255,161,255,81,0,217,0,222,0,223,0,33,1,124,1,125,1,250,1,251,1,252,1,253,1,115,0,53,254,154,1,217,0,5,2,249,1,173,1,251,253,176,1,5,2,56,254,242,0,106,1,18,1,181,1,54,254,165,255,33,1,247,253,130,1,159,1,205,2,55,2,193,254,193,254,146,1,11,2,124,254,56,1,69,2,55,254,45,1,46,1,65,254,67,0,242,0,61,254,156,1,181,1,254,1,79,2,58,3,163,1,237,2,167,1,160,1,55,2,88,2,242,1,14,1,217,0,242,0,81,0,231,2,181,1,137,2,53,254,208,1,168,1,103,2,109,2,109,2,55,2,171,1,179,3,242,0,107,1,108,1,181,1,65,254,54,254,188,1,186,1,131,1,132,1,12,3,55,2,120,2,47,1,147,1,148,1,227,0,129,2,121,2,105,2,106,3,170,1,170,1,65,254,124,254,240,2,61,254,247,2,99,0,80,1,212,1,211,0,250,253,122,2,161,1,162,1,193,1,246,1,55,2,190,255,45,1,46,1,209,1,95,3,80,1,208,1,223,0,227,0,227,0,59,254,136,2,199,1,242,0,205,1,246,254,181,1,251,253,236,254,65,254,65,254,147,1,189,1,251,253,55,2,207,1,144,3,211,1,115,0,247,1,115,0,60,254,223,0,136,3,158,2,248,1,158,2,124,254,158,2,124,254,124,254,66,2,151,2,245,2,40,3,213,1,214,1,152,3,47,1,81,0,10,2,224,2,67,0,238,1,162,255,61,254,237,2,103,1,104,1,105,1,173,2,134,2,85,2,134,3,59,254,59,254,217,0,217,0,181,2,246,254,246,254,225,2,236,254,236,254,160,255,116,1,254,2,70,1,71,1,2,3,86,2,60,3,90,2,115,0,106,2,170,255,186,2,137,3,138,3,217,0,11,3,217,0,217,0,52,3,158,255,217,0,217,0,187,1,155,255,237,1,81,0,131,1,132,1,14,1,124,2,81,0,81,0,250,253,144,2,61,254,61,254,190,1,186,2,250,253,184,2,193,2,161,255,126,2,193,2,173,2,173,2,127,2,190,2,200,2,33,1,190,2,218,2,215,2,214,0,163,255,186,2,164,3,131,2,210,2,156,255,77,2,193,2,208,2,175,255,161,2,151,2,184,2,151,2,190,2,102,3,214,2,217,2,211,0,217,2,186,2,104,3,209,2,156,2,201,2,244,253,159,2,217,2,81,0,217,0,217,0,217,0,217,0,81,0,217,0,217,0,164,255,14,1,217,0,5,2,81,0,33,1,162,2,217,0,31,3,214,0,227,0,208,1,186,2,80,1,165,2,170,1,12,2,164,2,3,255,19,3,21,3,185,2,175,2,249,2,227,0,26,3,28,3,178,2,238,2,192,2,179,2,204,2,195,2,215,2,235,2,217,0,229,2,239,2,246,2,4,3,46,2,249,2,54,2,217,0,217,0,2,255,18,3,227,0,24,3,151,2,114,3,244,253,39,3,41,3,188,2,47,3,46,2,51,3,189,2,217,0,43,3,81,0,217,0,101,1,102,1,103,1,104,1,105,1,89,2,53,3,59,3,81,0,25,3,62,3,65,3,217,0,97,2,160,255,202,1,81,0,120,3,158,255,145,2,66,3,216,1,217,1,218,1,219,1,115,0,217,0,68,3,38,3,127,3,173,2,130,3,161,255,67,3,69,3,151,2,71,3,151,2,73,3,75,3,244,253,78,3,244,253,244,253,45,3,168,255,248,253,49,3,214,0,166,255,80,3,81,0,81,3,26,1,44,1,90,3,45,1,46,1,83,3,85,3,81,0,87,3,109,2,169,255,1,255,93,3,92,3,151,2,108,3,170,1,249,2,109,3,125,3,50,3,33,1,111,3,33,1,0,255,217,0,241,1,227,0,45,1,46,1,132,3,158,2,158,2,133,3,158,2,135,3,158,2,158,2,50,1,45,1,46,1,143,3,158,2,147,3,158,2,158,2,151,3,153,3,176,3,166,2,47,1,155,3,81,0,5,3,161,3,216,1,217,1,218,1,219,1,244,2,158,3,227,0,169,3,98,0,215,1,98,0,216,1,217,1,218,1,219,1,248,253,98,0,98,0,98,0,247,253,47,1,33,1,98,0,98,0,182,3,232,0,98,0,52,1,45,1,46,1,130,2,47,1,0,3,120,0,217,2,3,3,80,1,194,2,115,0,220,1,168,3,243,2,171,3,8,3,167,3,221,1,222,1,54,1,45,1,46,1,220,1,93,1,94,1,32,3,98,0,98,0,221,1,222,1,228,2,145,2,197,0,216,1,217,1,218,1,219,1,96,3,126,3,223,1,98,0,253,2,224,1,227,0,145,3,115,0,0,0,47,1,136,1,227,0,223,1,45,1,46,1,224,1,0,0,217,0,81,0,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,81,0,47,1,80,1,223,0,158,2,158,2,158,2,158,2,0,0,0,0,225,1,158,2,158,2,158,2,0,0,158,2,158,2,93,1,94,1,242,0,0,0,98,0,181,1,98,0,88,2,217,2,186,2,80,1,0,0,0,0,55,2,98,2,47,1,0,0,0,0,217,0,45,1,46,1,164,1,165,1,166,1,0,0,93,1,94,1,0,0,215,1,0,0,216,1,217,1,218,1,219,1,0,0,101,1,102,1,103,1,104,1,105,1,158,2,113,3,0,0,158,2,158,2,158,2,158,2,65,1,66,1,67,1,68,1,69,1,250,2,251,2,158,2,81,0,81,0,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,227,2,47,1,0,0,0,0,220,1,13,3,0,0,0,0,81,0,0,0,221,1,222,1,0,0,0,0,0,0,33,1,217,0,0,0,0,0,217,0,217,0,0,0,119,3,0,0,121,3,217,0,217,0,0,0,122,3,0,0,33,3,34,3,223,1,81,0,81,0,224,1,128,3,0,0,131,3,238,1,45,1,46,1,98,0,243,1,45,1,46,1,0,0,0,0,4,2,46,3,0,0,0,0,81,0,15,2,0,0,217,0,0,0,0,0,80,2,98,0,98,0,244,1,45,1,46,1,0,0,55,3,56,3,57,3,81,0,81,0,81,0,245,1,45,1,46,1,215,1,0,0,216,1,217,1,218,1,219,1,0,0,0,0,98,0,0,0,98,0,98,0,0,0,47,1,98,0,98,0,0,0,47,1,145,2,98,0,216,1,217,1,218,1,219,1,98,0,98,0,172,3,48,1,51,1,53,1,55,1,57,1,175,3,0,0,177,3,47,1,0,0,178,3,0,0,0,0,0,0,220,1,0,0,0,0,217,0,47,1,0,0,221,1,222,1,0,0,0,0,0,0,94,3,0,0,15,2,81,0,81,0,0,0,0,0,146,2,0,0,186,3,99,3,103,3,0,0,147,2,81,0,117,2,119,2,223,1,0,0,26,1,224,1,0,0,0,0,0,0,98,0,98,0,98,0,98,0,98,0,98,0,98,0,98,0,0,0,0,0,98,0,0,0,98,0,0,0,145,2,98,0,216,1,217,1,218,1,219,1,0,0,124,3,0,0,0,0,119,2,0,0,115,3,26,1,216,1,217,1,218,1,219,1,0,0,145,2,0,0,216,1,217,1,218,1,219,1,81,0,0,0,0,0,139,3,98,0,140,3,81,0,0,0,81,0,0,0,0,0,141,3,98,0,98,0,81,0,0,0,146,2,0,0,0,0,0,0,0,0,0,0,63,3,0,0,0,0,0,0,0,0,0,0,98,0,0,0,98,0,98,0,0,0,0,0,145,2,220,1,216,1,217,1,218,1,219,1,98,0,217,0,222,1,174,2,98,0,0,0,0,0,224,253,98,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,224,253,98,0,0,0,224,253,224,253,224,253,223,1,224,253,0,0,180,2,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,146,2,0,0,243,0,243,0,0,0,0,0,243,0,0,0,98,0,224,253,224,253,0,0,224,253,224,253,224,253,224,253,224,253,98,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,8,1,10,1,93,1,94,1,98,0,243,0,243,0,0,0,5,3,0,0,216,1,217,1,218,1,219,1,0,0,0,0,0,0,61,1,62,1,0,0,0,0,211,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,95,1,98,0,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,220,1,0,0,0,0,0,0,236,2,0,0,221,1,222,1,0,0,0,0,0,0,26,255,119,2,26,1,94,0,0,0,94,0,117,0,117,0,117,0,198,2,0,0,0,0,0,0,0,0,0,0,0,0,236,0,223,1,0,0,242,2,224,1,224,253,224,253,0,0,224,253,0,0,0,0,255,0,224,253,0,0,224,253,224,253,0,0,0,0,0,0,0,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,94,0,15,3,93,1,94,1,34,1,0,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,1,0,0,95,1,0,0,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,54,3,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,243,0,243,0,61,1,0,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,88,3,0,0,243,0,0,0,243,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,0,0,0,0,26,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,98,0,98,0,98,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,14,2,17,2,18,2,19,2,20,2,21,2,22,2,23,2,24,2,25,2,26,2,27,2,28,2,29,2,30,2,31,2,32,2,33,2,34,2,35,2,36,2,37,2,38,2,39,2,40,2,41,2,42,2,0,0,243,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,63,2,65,2,98,0,94,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,98,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,34,1,0,0,98,0,0,0,0,0,0,0,0,0,0,0,91,2,0,0,243,0,0,0,63,2,65,2,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,243,0,243,0,0,0,94,0,243,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,34,1,0,0,0,0,0,0,0,0,98,0,0,0,132,2,0,0,0,0,0,0,98,0,0,0,98,0,0,0,0,0,0,0,243,0,0,0,98,0,243,0,95,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,97,0,118,0,118,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,2,168,2,94,0,95,0,78,0,0,0,78,0,0,0,0,0,0,0,94,0,243,0,0,0,0,0,0,0,0,0,0,0,233,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,35,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,78,0,35,1,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,34,1,0,0,34,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,2,0,0,163,2,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,1,0,0,0,0,0,0,243,0,80,1,223,253,223,253,223,253,223,253,85,1,86,1,243,0,243,0,223,253,223,253,0,0,0,0,0,0,0,0,93,1,94,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,243,0,0,0,94,0,97,0,91,2,17,3,0,0,20,3,22,3,0,0,0,0,0,0,94,0,27,3,29,3,0,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,35,3,0,0,89,1,90,1,0,0,0,0,0,0,78,0,93,1,94,1,0,0,95,0,0,0,0,0,0,0,0,0,95,0,95,0,0,0,0,0,0,0,0,0,0,0,20,3,22,3,0,0,27,3,29,3,0,0,0,0,0,0,97,0,243,0,0,0,0,0,0,0,97,0,97,0,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,1,0,0,0,0,78,0,0,0,0,0,94,0,94,0,78,0,78,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,243,0,95,0,0,0,0,0,89,3,0,0,0,0,94,0,95,0,0,0,0,0,91,3,0,0,0,0,34,1,0,0,97,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,35,1,0,0,0,0,94,0,94,0,0,0,0,0,0,0,0,0,91,3,0,0,0,0,0,0,0,0,78,0,0,0,243,0,0,0,0,0,78,0,0,0,0,0,94,0,0,0,0,0,0,0,78,0,0,0,0,0,13,2,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,94,0,94,0,94,0,0,0,0,0,0,0,0,0,0,0,95,0,70,3,72,3,0,0,74,3,0,0,76,3,77,3,95,0,0,0,97,0,0,0,82,3,0,0,84,3,86,3,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,78,0,89,1,90,1,0,0,0,0,0,0,95,0,93,1,94,1,0,0,78,0,243,0,0,0,0,0,0,0,95,0,94,0,94,0,78,0,0,0,0,0,0,0,0,0,100,3,0,0,0,0,97,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,180,2,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,35,1,0,0,35,1,0,0,78,0,0,0,0,0,0,0,0,0,117,0,0,0,95,0,0,0,78,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,94,0,0,0,93,1,94,1,97,0,0,0,94,0,0,0,94,0,0,0,146,3,148,3,149,3,150,3,94,0,0,0,0,0,154,3,156,3,157,3,0,0,159,3,160,3,0,0,0,0,0,0,0,0,0,0,35,1,0,0,95,1,78,0,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,3,0,0,0,0,181,3,183,3,184,3,185,3,0,0,95,0,0,0,0,0,43,2,44,2,0,0,187,3,45,2,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,97,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,95,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,0,0,95,0,0,0,97,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,95,0,95,0,35,1,0,0,78,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,97,0,97,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,2,0,0,0,0,0,0,0,0,95,0,95,0,95,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,97,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,78,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,97,0,0,0,0,0,0,0,0,0,0,0,101,3,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,78,0,0,0,0,0,0,0,0,0,0,0,98,3,0,0,0,0,0,0,78,0,0,0,95,0,0,0,118,0,0,0,0,0,0,0,95,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,78,0,0,0,0,0,0,0,224,253,4,0,78,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,254,0,0,61,0,62,0,63,0,0,0,0,0,0,0,237,254,237,254,237,254,0,0,0,0,237,254,237,254,237,254,0,0,237,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,237,254,237,254,237,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,254,237,254,0,0,237,254,237,254,237,254,237,254,237,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,0,0,0,0,93,1,94,1,0,0,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,0,0,0,0,237,254,237,254,237,254,0,0,222,2,237,254,0,0,0,0,0,0,0,0,95,1,237,254,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,237,254,0,0,0,0,0,0,0,0,157,255,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,0,0,0,0,0,0,0,0,0,0,0,0,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,254,237,254,237,254,237,254,125,254,0,0,237,254,237,254,237,254,237,254,0,0,0,0,125,254,125,254,125,254,0,0,0,0,125,254,125,254,125,254,0,0,125,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,254,125,254,125,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,254,125,254,0,0,125,254,125,254,125,254,125,254,125,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,0,0,0,0,93,1,94,1,0,0,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,0,0,0,0,125,254,125,254,125,254,0,0,0,0,125,254,0,0,0,0,0,0,0,0,95,1,125,254,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,0,0,0,0,0,0,125,254,0,0,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,254,125,254,125,254,125,254,125,254,245,254,255,0,125,254,125,254,125,254,125,254,0,0,0,0,245,254,245,254,245,254,0,0,0,0,245,254,245,254,245,254,0,0,245,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,254,245,254,245,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,254,245,254,0,0,245,254,245,254,245,254,245,254,245,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,223,253,223,253,0,0,0,0,93,1,94,1,0,0,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,0,0,0,0,245,254,245,254,245,254,0,0,0,0,245,254,0,0,0,0,0,0,0,0,0,0,245,254,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,245,254,0,0,0,0,0,0,0,0,0,0,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,254,245,254,245,254,245,254,224,253,0,0,245,254,245,254,245,254,245,254,0,0,0,0,224,253,224,253,224,253,0,0,0,0,224,253,224,253,224,253,0,0,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,0,0,224,253,224,253,224,253,224,253,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,0,0,0,0,224,253,224,253,224,253,0,0,0,0,224,253,0,0,0,0,0,0,0,0,0,0,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,0,0,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,224,253,224,253,224,253,230,254,255,0,224,253,224,253,224,253,224,253,0,0,0,0,230,254,230,254,230,254,0,0,0,0,230,254,230,254,230,254,0,0,230,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,254,230,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,254,230,254,0,0,230,254,230,254,230,254,230,254,230,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,0,0,0,0,230,254,230,254,230,254,0,0,0,0,230,254,0,0,0,0,0,0,0,0,0,0,230,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,254,0,0,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,254,230,254,230,254,230,254,244,253,252,0,230,254,230,254,230,254,230,254,0,0,0,0,244,253,244,253,244,253,0,0,0,0,0,0,244,253,244,253,0,0,244,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,253,244,253,0,0,244,253,244,253,244,253,244,253,244,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,0,0,0,0,244,253,244,253,244,253,237,254,182,2,0,0,0,0,0,0,0,0,0,0,0,0,237,254,237,254,237,254,0,0,0,0,0,0,237,254,237,254,0,0,237,254,0,0,0,0,0,0,0,0,0,0,0,0,159,255,244,253,0,0,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,237,254,237,254,0,0,237,254,237,254,237,254,237,254,237,254,0,0,0,0,0,0,0,0,0,0,0,0,244,253,244,253,244,253,244,253,167,255,0,0,0,0,244,253,0,0,244,253,244,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,0,0,0,0,237,254,237,254,237,254,0,0,183,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,255,237,254,0,0,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,254,237,254,237,254,165,255,0,0,0,0,237,254,0,0,237,254,237,254,12,1,0,0,5,0,6,0,7,0,8,0,9,0,224,253,224,253,224,253,10,0,11,0,0,0,0,0,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,1,0,0,5,0,6,0,7,0,8,0,9,0,224,253,224,253,224,253,10,0,11,0,0,0,224,253,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,224,253,10,0,11,0,224,253,224,253,224,253,12,0,224,253,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,224,253,10,0,11,0,224,253,224,253,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,224,253,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].concat([0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,224,253,224,253,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,224,253,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,13,1,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,0,0,224,253,224,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,0,0,224,253,224,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,224,253,224,253,224,253,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,224,253,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,0,240,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,223,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,222,0,223,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,62,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,223,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,156,1,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,1,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,148,0,149,0,150,0,151,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,35,0,36,0,163,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,251,253,251,253,251,253,0,0,251,253,0,0,0,0,0,0,251,253,251,253,0,0,192,0,193,0,251,253,0,0,251,253,251,253,251,253,251,253,251,253,251,253,251,253,0,0,251,253,0,0,0,0,0,0,251,253,251,253,251,253,251,253,251,253,251,253,251,253,0,0,0,0,251,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,253,251,253,0,0,251,253,251,253,251,253,251,253,251,253,251,253,251,253,251,253,251,253,251,253,0,0,0,0,251,253,0,0,0,0,251,253,251,253,0,0,251,253,251,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,253,0,0,0,0,251,253,251,253,0,0,251,253,251,253,0,0,251,253,251,253,251,253,251,253,251,253,251,253,251,253,251,253,251,253,0,0,0,0,251,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,253,251,253,251,253,0,0,0,0,0,0,0,0,0,0,250,253,250,253,250,253,0,0,250,253,0,0,251,253,0,0,250,253,250,253,0,0,0,0,251,253,250,253,0,0,250,253,250,253,250,253,250,253,250,253,250,253,250,253,0,0,250,253,0,0,0,0,0,0,250,253,250,253,250,253,250,253,250,253,250,253,250,253,0,0,0,0,250,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,253,250,253,0,0,250,253,250,253,250,253,250,253,250,253,250,253,250,253,250,253,250,253,250,253,0,0,0,0,250,253,0,0,0,0,250,253,250,253,0,0,250,253,250,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,253,0,0,0,0,250,253,250,253,0,0,250,253,250,253,0,0,250,253,250,253,250,253,250,253,250,253,250,253,250,253,250,253,250,253,0,0,0,0,250,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,253,250,253,250,253,0,0,0,0,0,0,0,0,0,0,248,253,248,253,248,253,0,0,248,253,0,0,250,253,0,0,248,253,248,253,0,0,0,0,250,253,248,253,0,0,248,253,248,253,248,253,248,253,248,253,248,253,248,253,0,0,0,0,0,0,0,0,0,0,248,253,248,253,248,253,248,253,248,253,248,253,248,253,0,0,0,0,248,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,253,248,253,0,0,248,253,248,253,248,253,248,253,248,253,248,253,248,253,248,253,248,253,248,253,0,0,0,0,248,253,0,0,0,0,248,253,248,253,0,0,248,253,248,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,253,221,2,0,0,248,253,248,253,0,0,248,253,248,253,0,0,248,253,248,253,248,253,248,253,248,253,248,253,248,253,248,253,248,253,0,0,0,0,248,253,0,0,0,0,0,0,159,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,253,246,253,246,253,0,0,246,253,248,253,248,253,248,253,246,253,246,253,0,0,0,0,0,0,246,253,0,0,246,253,246,253,246,253,246,253,246,253,246,253,246,253,0,0,0,0,0,0,248,253,0,0,246,253,246,253,246,253,246,253,246,253,246,253,246,253,0,0,0,0,246,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,253,246,253,0,0,246,253,246,253,246,253,246,253,246,253,246,253,246,253,246,253,246,253,246,253,0,0,0,0,246,253,0,0,0,0,246,253,246,253,0,0,246,253,246,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,253,0,0,0,0,246,253,246,253,0,0,246,253,246,253,0,0,246,253,246,253,246,253,246,253,246,253,246,253,246,253,246,253,246,253,0,0,0,0,246,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,253,245,253,245,253,0,0,245,253,246,253,246,253,246,253,245,253,245,253,0,0,0,0,0,0,245,253,0,0,245,253,245,253,245,253,245,253,245,253,245,253,245,253,0,0,0,0,0,0,246,253,0,0,245,253,245,253,245,253,245,253,245,253,245,253,245,253,0,0,0,0,245,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,253,245,253,0,0,245,253,245,253,245,253,245,253,245,253,245,253,245,253,245,253,245,253,245,253,0,0,0,0,245,253,0,0,0,0,245,253,245,253,0,0,245,253,245,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,253,0,0,0,0,245,253,245,253,0,0,245,253,245,253,0,0,245,253,245,253,245,253,245,253,245,253,245,253,245,253,245,253,245,253,0,0,0,0,245,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,253,245,253,245,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,253,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,199,0,200,0,201,0,202,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,203,0,204,0,160,0,205,0,162,0,37,1,38,1,206,0,39,1,0,0,0,0,0,0,0,0,0,0,0,0,40,1,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,41,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,199,0,200,0,201,0,202,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,203,0,204,0,160,0,205,0,162,0,37,1,38,1,206,0,39,1,0,0,0,0,0,0,0,0,0,0,0,0,40,1,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,137,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,199,0,200,0,201,0,202,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,203,0,204,0,160,0,205,0,162,0,0,0,0,0,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,199,0,200,0,201,0,202,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,203,0,204,0,160,0,205,0,162,0,0,0,0,0,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,192,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,112,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,31,1,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,112,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,8,2,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,62,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,62,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,0,240,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,118,2,240,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,240,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,118,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,2,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,2,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,14,3,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,118,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,62,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,107,0,34,0,35,0,36,0,108,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,110,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,76,1,49,0,0,0,50,0,51,0,0,0,77,1,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0])
.concat([0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,107,0,34,0,35,0,36,0,108,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,76,1,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,3,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,3,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,51,2,52,2,0,0,0,0,53,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,72,2,44,2,0,0,0,0,73,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,57,2,52,2,0,0,0,0,58,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,92,2,44,2,0,0,0,0,93,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,95,2,52,2,0,0,0,0,96,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,111,2,44,2,0,0,0,0,112,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,114,2,52,2,0,0,0,0,115,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,139,2,44,2,0,0,0,0,140,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,142,2,52,2,0,0,0,0,143,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,162,3,44,2,0,0,0,0,163,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,165,3,52,2,0,0,0,0,166,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,173,3,44,2,0,0,0,0,174,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,57,2,52,2,0,0,0,0,58,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,115,121,110,116,97,120,32,101,114,114,111,114,44,32,117,110,101,120,112,101,99,116,101,100,32,37,115,0,32,111,114,32,37,115,0,0,44,32,101,120,112,101,99,116,105,110,103,32,37,115,0,0,0,0,152,0,153,0,0,0,1,0,3,0,4,0,5,0,6,0,7,0,11,0,12,0,16,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,39,0,45,0,46,0,47,0,48,0,49,0,51,0,52,0,53,0,54,0,55,0,56,0,58,0,59,0,60,0,63,0,66,0,67,0,69,0,70,0,89,0,92,0,93,0,95,0,96,0,98,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,109,0,126,0,127,0,128,0,154,0,155,0,156,0,161,0,163,0,164,0,166,0,167,0,170,0,171,0,173,0,174,0,175,0,177,0,178,0,187,0,200,0,218,0,237,0,238,0,248,0,249,0,253,0,254,0,255,0,3,1,4,1,5,1,7,1,8,1,9,1,10,1,11,1,12,1,35,1,48,1,156,0,21,0,22,0,30,0,31,0,32,0,39,0,51,0,55,0,86,0,89,0,92,0,126,0,179,0,180,0,200,0,218,0,9,1,12,1,35,1,180,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,55,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,80,0,81,0,84,0,85,0,86,0,87,0,98,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,127,0,128,0,145,0,146,0,181,0,185,0,186,0,11,1,30,1,33,0,34,0,35,0,36,0,48,0,49,0,51,0,55,0,101,0,181,0,182,0,183,0,5,1,201,0,89,0,164,0,165,0,178,0,218,0,9,1,10,1,12,1,165,0,149,0,150,0,165,0,39,1,44,1,45,1,47,1,205,0,207,0,89,0,171,0,178,0,218,0,223,0,9,1,12,1,57,0,98,0,99,0,127,0,170,0,187,0,188,0,193,0,196,0,198,0,33,1,34,1,193,0,193,0,146,0,194,0,195,0,146,0,190,0,194,0,146,0,40,1,45,1,182,0,157,0,140,0,187,0,218,0,187,0,55,0,1,0,92,0,159,0,160,0,161,0,172,0,173,0,48,1,164,0,203,0,189,0,198,0,33,1,48,1,188,0,32,1,33,1,48,1,89,0,144,0,177,0,218,0,9,1,12,1,204,0,53,0,54,0,56,0,63,0,105,0,181,0,6,1,62,0,64,0,65,0,111,0,250,0,251,0,63,0,250,0,63,0,250,0,63,0,250,0,61,0,250,0,58,0,59,0,166,0,187,0,187,0,39,1,47,1,40,0,41,0,42,0,43,0,44,0,37,0,38,0,28,0,235,0,113,0,144,0,92,0,98,0,174,0,113,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,86,0,87,0,114,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,88,0,142,0,143,0,88,0,143,0,38,1,26,0,140,0,239,0,90,0,90,0,190,0,194,0,239,0,164,0,51,0,55,0,179,0,58,0,59,0,1,0,117,0,13,1,44,1,88,0,142,0,143,0,214,0,31,1,215,0,38,1,105,0,144,0,158,0,159,0,55,0,13,0,219,0,44,1,113,0,88,0,142,0,143,0,90,0,90,0,219,0,46,1,39,1,17,0,242,0,149,0,165,0,165,0,55,0,88,0,142,0,143,0,25,0,188,0,188,0,188,0,91,0,144,0,197,0,48,1,144,0,197,0,193,0,40,1,41,1,193,0,192,0,193,0,198,0,33,1,48,1,164,0,41,1,164,0,162,0,140,0,159,0,88,0,143,0,90,0,161,0,172,0,147,0,39,1,47,1,41,1,202,0,41,1,148,0,144,0,43,1,45,1,144,0,43,1,141,0,43,1,55,0,174,0,175,0,176,0,144,0,88,0,142,0,143,0,51,0,53,0,54,0,55,0,56,0,92,0,98,0,99,0,120,0,123,0,146,0,233,0,16,1,17,1,18,1,19,1,20,1,21,1,24,1,25,1,26,1,27,1,28,1,63,0,251,0,252,0,62,0,251,0,63,0,63,0,63,0,61,0,71,0,71,0,156,0,165,0,165,0,165,0,165,0,161,0,164,0,164,0,236,0,98,0,166,0,188,0,198,0,199,0,172,0,144,0,177,0,144,0,163,0,166,0,178,0,187,0,188,0,199,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,51,0,52,0,55,0,185,0,190,0,36,1,37,1,192,0,51,0,52,0,55,0,185,0,190,0,36,1,51,0,55,0,36,1,241,0,240,0,166,0,187,0,166,0,187,0,97,0,168,0,212,0,44,1,14,1,211,0,51,0,55,0,179,0,36,1,192,0,36,1,158,0,164,0,146,0,15,1,16,1,216,0,184,0,10,0,8,0,244,0,48,1,159,0,13,0,187,0,51,0,55,0,192,0,51,0,55,0,159,0,110,0,250,0,0,1,1,1,2,1,48,1,242,0,198,0,10,0,27,0,220,0,44,1,220,0,51,0,55,0,192,0,51,0,55,0,209,0,188,0,98,0,188,0,196,0,33,1,34,1,41,1,147,0,41,1,144,0,144,0,41,1,182,0,154,0,141,0,187,0,41,1,161,0,41,1,33,1,174,0,176,0,51,0,55,0,192,0,51,0,55,0,113,0,51,0,92,0,98,0,224,0,225,0,226,0,18,1,16,1,29,0,108,0,234,0,144,0,29,1,48,1,144,0,29,1,51,0,144,0,29,1,51,0,63,0,159,0,187,0,187,0,79,0,118,0,228,0,229,0,48,1,188,0,144,0,41,1,176,0,144,0,113,0,44,0,40,1,90,0,90,0,190,0,194,0,40,1,42,1,90,0,90,0,190,0,191,0,194,0,48,1,191,0,194,0,228,0,228,0,44,0,169,0,44,1,165,0,158,0,42,1,10,0,41,1,16,1,158,0,44,1,181,0,182,0,188,0,199,0,245,0,48,1,15,0,222,0,48,1,14,0,221,0,222,0,90,0,90,0,42,1,90,0,90,0,222,0,110,0,2,1,10,0,144,0,219,0,206,0,208,0,42,1,165,0,188,0,197,0,33,1,141,0,43,1,42,1,188,0,226,0,144,0,18,1,144,0,41,1,230,0,40,1,159,0,159,0,19,1,24,1,26,1,28,1,20,1,21,1,26,1,20,1,141,0,51,0,227,0,230,0,20,1,22,1,23,1,26,1,28,1,159,0,98,0,188,0,176,0,187,0,115,0,166,0,187,0,166,0,187,0,168,0,148,0,90,0,166,0,187,0,166,0,187,0,168,0,239,0,235,0,159,0,159,0,187,0,228,0,213,0,44,1,10,0,41,1,10,0,217,0,91,0,246,0,48,1,159,0,9,0,247,0,48,1,165,0,10,0,90,0,10,0,188,0,159,0,159,0,159,0,220,0,144,0,41,1,225,0,144,0,98,0,224,0,147,0,149,0,10,0,141,0,144,0,29,1,144,0,29,1,144,0,29,1,144,0,29,1,29,1,113,0,230,0,118,0,144,0,29,1,144,0,29,1,144,0,29,1,10,0,188,0,187,0,166,0,187,0,10,0,141,0,159,0,158,0,15,1,89,0,178,0,218,0,9,1,12,1,219,0,159,0,219,0,222,0,242,0,243,0,10,0,10,0,210,0,144,0,225,0,144,0,18,1,51,0,231,0,232,0,17,1,20,1,26,1,20,1,20,1,89,0,218,0,118,0,23,1,26,1,20,1,22,1,26,1,20,1,141,0,10,0,158,0,55,0,88,0,142,0,143,0,159,0,159,0,159,0,225,0,144,0,144,0,40,1,29,1,144,0,29,1,29,1,29,1,55,0,88,0,144,0,29,1,144,0,29,1,29,1,144,0,29,1,29,1,10,0,51,0,55,0,192,0,51,0,55,0,244,0,221,0,10,0,225,0,232,0,20,1,51,0,55,0,20,1,26,1,20,1,20,1,42,1,29,1,29,1,144,0,29,1,29,1,29,1,20,1,29,1,0,0,74,4,74,4,74,4,84,4,90,4,94,4,98,4,102,4,108,4,110,4,109,4,121,4,147,4,153,4,157,4,161,4,165,4,171,4,171,4,175,4,179,4,183,4,187,4,191,4,195,4,199,4,204,4,205,4,209,4,213,4,217,4,221,4,225,4,230,4,234,4,239,4,243,4,247,4,251,4,254,4,2,5,9,5,10,5,14,5,18,5,22,5,26,5,29,5,36,5,37,5,40,5,41,5,45,5,44,5,57,5,61,5,66,5,70,5,75,5,79,5,84,5,88,5,92,5,96,5,100,5,106,5,110,5,116,5,117,5,123,5,127,5,131,5,135,5,139,5,143,5,147,5,151,5,155,5,159,5,165,5,166,5,172,5,176,5,182,5,186,5,192,5,196,5,200,5,204,5,208,5,212,5,218,5,224,5,231,5,235,5,239,5,243,5,247,5,251,5,1,6,7,6,14,6,18,6,21,6,25,6,29,6,35,6,36,6,37,6,38,6,43,6,50,6,51,6,54,6,58,6,58,6,64,6,65,6,66,6,67,6,68,6,69,6,70,6,71,6,72,6,73,6,74,6,75,6,76,6,77,6,78,6,79,6,80,6,81,6,82,6,83,6,84,6,85,6,86,6,87,6,88,6,89,6,90,6,91,6,92,6,95,6,95,6,95,6,96,6,96,6,97,6,97,6,97,6,98,6,98,6,98,6,98,6,99,6,99,6,99,6,100,6,100,6,100,6,101,6,101,6,101,6,101,6,102,6,102,6,102,6,102,6,103,6,103,6,103,6,103,6,104,6,104,6,104,6,104,6,105,6,105,6,105,6,105,6,106,6,106,6,109,6,113,6,117,6,121,6,125,6,129,6,133,6,137,6,141,6,146,6,151,6,156,6,160,6,164,6,168,6,172,6,176,6,180,6,184,6,188,6,192,6,196,6,200,6,204,6,208,6,212,6,216,6,220,6,224,6,228,6,232,6,236,6,240,6,244,6,248,6,252,6,0,7,4,7,8,7,12,7,16,7,20,7,24,7,28,7,34,7,41,7,42,7,46,7,50,7,56,7,62,7,63,7,66,7,67,7,68,7,72,7,76,7,82,7,86,7,90,7,94,7,98,7,104,7,104,7,115,7,121,7,125,7,131,7,135,7,139,7,143,7,149,7,153,7,157,7,163,7,164,7,165,7,166,7,167,7,168,7,169,7,170,7,175,7,174,7,185,7,185,7,189,7,189,7,193,7,197,7,201,7,205,7,209,7,213,7,217,7,221,7,225,7,229,7,233,7,237,7,241,7,242,7,248,7,247,7,4,8,11,8,18,8,18,8,18,8,24,8,24,8,24,8,30,8,36,8,41,8,43,8,40,8,50,8,49,8,62,8,67,8,61,8,80,8,79,8,92,8,91,8,104,8,105,8,104,8,118,8,122,8,126,8,130,8,136,8,143,8,144,8,145,8,148,8,149,8,152,8,153,8,161,8,162,8,168,8,172,8,175,8,179,8,185,8,189,8,195,8,199,8,203,8,207,8,211,8,215,8,219,8,223,8,227,8,233,8,237,8,241,8,245,8,249,8,253,8,1,9,5,9,9,9,13,9,17,9,21,9,25,9,29,9,33,9,39,9,40,9,47,9,52,9,57,9,64,9,68,9,74,9,75,9,78,9,83,9,86,9,90,9,96,9,100,9,107,9,106,9,119,9,129,9,133,9,138,9,145,9,149,9,153,9,157,9,161,9,165,9,169,9,173,9,177,9,184,9,183,9,194,9,193,9,205,9,213,9,222,9,225,9,232,9,235,9,239,9,240,9,243,9,247,9,250,9,254,9,1,10,2,10,3,10,4,10,7,10,8,10,9,10,13,10,19,10,20,10,26,10,31,10,30,10,41,10,47,10,51,10,57,10,61,10,67,10,70,10,71,10,74,10,75,10,78,10,83,10,90,10,94,10,101,10,105,10,112,10,119,10,120,10,121,10,122,10,123,10,127,10,133,10,137,10,143,10,144,10,145,10,149,10,155,10,159,10,163,10,167,10,171,10,177,10,183,10,187,10,191,10,195,10,199,10,203,10,210,10,219,10,220,10,223,10,228,10,227,10,236,10,243,10,249,10,255,10,3,11,7,11,11,11,15,11,19,11,23,11,27,11,31,11,35,11,39,11,43,11,47,11,51,11,56,11,62,11,67,11,72,11,77,11,84,11,88,11,95,11,99,11,105,11,109,11,115,11,122,11,129,11,133,11,139,11,143,11,149,11,150,11,153,11,158,11,165,11,166,11,169,11,176,11,180,11,187,11,192,11,192,11,217,11,218,11,224,11,228,11,234,11,238,11,244,11,245,11,246,11,249,11,250,11,251,11,252,11,255,11,0,12,1,12,4,12,5,12,8,12,9,12,12,12,13,12,16,12,19,12,22,12,23,12,24,12,27,12,28,12,32,12,31,12,38,12,39,12,43,12,0,0,152,0,0,0,255,255,255,255,153,0,154,0,255,255,155,0,39,1,255,255,48,1,255,255,156,0,255,255,155,0,47,1,156,0,255,255,1,0,156,0,255,255,161,0,255,255,255,255,46,0,157,0,140,0,154,0,141,0,255,255,159,0,244,0,222,0,247,0,255,255,160,0,39,1,255,255,48,1,255,255,161,0,255,255,160,0,47,1,161,0,255,255,1,0,161,0,255,255,255,255,45,0,182,0,162,0,182,0,255,255,6,0,183,0,255,255,161,0,40,0,165,0,255,255,161,0,41,0,165,0,255,255,161,0,42,0,165,0,255,255,161,0,43,0,165,0,255,255,161,0,44,0,161,0,255,255,47,0,140,0,159,0,141,0,255,255,163,0,255,255,171,0,113,0,166,0,255,255,10,1,90,0,166,0,255,255,218,0,142,0,192,0,42,1,90,0,166,0,255,255,218,0,143,0,51,0,90,0,166,0,255,255,218,0,143,0,55,0,90,0,166,0,255,255,218,0,88,0,55,0,90,0,166,0,255,255,218,0,88,0,51,0,90,0,166,0,255,255,12,1,90,0,166,0,255,255,178,0,113,0,199,0,255,255,171,0,113,0,188,0,255,255,171,0,113,0,199,0,255,255,164,0,255,255,178,0,113,0,166,0,255,255,178,0,113,0,163,0,255,255,166,0,255,255,164,0,37,0,164,0,255,255,164,0,38,0,164,0,255,255,39,0,40,1,164,0,255,255,127,0,166,0,255,255,187,0,255,255,164,0,255,255,170,0,255,255,167,0,255,255,237,0,255,255,237,0,38,1,36,1,194,0,255,255,255,255,97,0,169,0,228,0,159,0,141,0,255,255,35,1,194,0,255,255,35,1,194,0,168,0,255,255,218,0,143,0,36,1,194,0,255,255,218,0,143,0,36,1,194,0,168,0,255,255,218,0,88,0,36,1,194,0,255,255,218,0,88,0,36,1,194,0,168,0,255,255,32,0,194,0,255,255,31,0,194,0,255,255,30,0,193,0,255,255,21,0,193,0,255,255,22,0,193,0,255,255,173,0,255,255,92,0,172,0,41,1,255,255,173,0,255,255,92,0,172,0,41,1,255,255,175,0,255,255,175,0,174,0,255,255,175,0,98,0,177,0,255,255,175,0,98,0,177,0,144,0,176,0,255,255,175,0,98,0,255,255,175,0,98,0,144,0,176,0,255,255,98,0,177,0,255,255,98,0,177,0,144,0,176,0,255,255,98,0,255,255,98,0,144,0,176,0,255,255,177,0,255,255,92,0,172,0,41,1,255,255,174,0,144,0,255,255,175,0,174,0,144,0,255,255,174,0,255,255,175,0,174,0,255,255,9,1,255,255,218,0,142,0,192,0,42,1,255,255,218,0,143,0,51,0,255,255,218,0,88,0,51,0,255,255,218,0,143,0,55,0,255,255,218,0,88,0,55,0,255,255,89,0,55,0,255,255,12,1,255,255,9,1,255,255,218,0,142,0,192,0,42,1,255,255,218,0,143,0,51,0,255,255,218,0,88,0,51,0,255,255,218,0,143,0,55,0,255,255,218,0,88,0,55,0,255,255,89,0,55,0,255,255,12,1,255,255,51,0,255,255,55,0,255,255,89,0,179,0,255,255,179,0,255,255,218,0,88,0,179,0,255,255,51,0,255,255,55,0,255,255,52,0,255,255,185,0,255,255,186,0,255,255,181,0,255,255,5,1,255,255,182,0,255,255,255,255,183,0,144,0,184,0,182,0,255,255,118,0,255,255,119,0,255,255,120,0,255,255,72,0,255,255,73,0,255,255,74,0,255,255,80,0,255,255,81,0,255,255,116,0,255,255,76,0,255,255,117,0,255,255,77,0,255,255,75,0,255,255,86,0,255,255,87,0,255,255,121,0,255,255,122,0,255,255,123,0,255,255,98,0,255,255,124,0,255,255,125,0,255,255,71,0,255,255,127,0,255,255,128,0,255,255,69,0,255,255,70,0,255,255,84,0,255,255,85,0,255,255,145,0,255,255,48,0,255,255,49,0,255,255,50,0,255,255,46,0,255,255,47,0,255,255,45,0,255,255,37,0,255,255,7,0,255,255,21,0,255,255,16,0,255,255,3,0,255,255,5,0,255,255,26,0,255,255,15,0,255,255,14,0,255,255,10,0,255,255,9,0,255,255,36,0,255,255,20,0,255,255,25,0,255,255,4,0,255,255,22,0,255,255,34,0,255,255,39,0,255,255,38,0,255,255,23,0,255,255,8,0,255,255,24,0,255,255,30,0,255,255,33,0,255,255,32,0,255,255,13,0,255,255,35,0,255,255,6,0,255,255,17,0,255,255,31,0,255,255,11,0,255,255,12,0,255,255,18,0,255,255,19,0,255,255,178,0,113,0,187,0,255,255,178,0,113,0,187,0,44,0,187,0,255,255,10,1,90,0,187,0,255,255,10,1,90,0,187,0,44,0,187,0,255,255,218,0,142,0,192,0,42,1,90,0,187,0,255,255,218,0,143,0,51,0,90,0,187,0,255,255,218,0,143,0,55,0,90,0,187,0,255,255,218,0,88,0,51,0,90,0,187,0,255,255,218,0,88,0,55,0,90,0,187,0,255,255,89,0,55,0,90,0,187,0,255,255,12,1,90,0,187,0,255,255,187,0,82,0,187,0,255,255,187,0,83,0,187,0,255,255,187,0,121,0,187,0,255,255,187,0,122,0,187,0,255,255,187,0,123,0,187,0,255,255,187,0,124,0,187,0,255,255,187,0,125,0,187,0,255,255,187,0,71,0,187,0,255,255,126,0,58,0,71,0,187,0,255,255,126,0,59,0,71,0,187,0,255,255,69,0,187,0,255,255,70,0,187,0,255,255,187,0,118,0,187,0,255,255,187,0,119,0,187,0,255,255,187,0,120,0,187,0,255,255,187,0,72,0,187,0,255,255,187,0,116,0,187,0,255,255,187,0,76,0,187,0,255,255,187,0,117,0,187,0,255,255,187,0,77,0,187,0,255,255,187,0,73,0,187,0,255,255,187,0,74,0,187,0,255,255,187,0,75,0,187,0,255,255,187,0,80,0,187,0,255,255,187,0,81,0,187,0,255,255,127,0,187,0,255,255,128,0,187,0,255,255,187,0,86,0,187,0,255,255,187,0,87,0,187,0,255,255,187,0,78,0,187,0,255,255,187,0,79,0,187,0,255,255,187,0,114,0,187,0,40,1,115,0,187,0,255,255,200,0,255,255,187,0,255,255,48,1,255,255,198,0,43,1,255,255,198,0,144,0,33,1,43,1,255,255,33,1,43,1,255,255,146,0,192,0,41,1,255,255,48,1,255,255,190,0,255,255,48,1,255,255,193,0,255,255,198,0,144,0,255,255,198,0,144,0,33,1,144,0,255,255,33,1,144,0,255,255,170,0,255,255,198,0,197,0,255,255,33,1,197,0,255,255,198,0,144,0,33,1,197,0,255,255,196,0,255,255,255,255,195,0,193,0,255,255,99,0,188,0,255,255,144,0,196,0,255,255,48,1,255,255,188,0,255,255,98,0,188,0,255,255,198,0,144,0,188,0,255,255,198,0,144,0,98,0,188,0,255,255,198,0,144,0,188,0,255,255,198,0,144,0,98,0,188,0,255,255,98,0,188,0,255,255,248,0,255,255,249,0,255,255,253,0,255,255,254,0,255,255,255,0,255,255,11,1,255,255,12,1,255,255,52,0,255,255,255,255,7,0,201,0,158,0,10,0,255,255,255,255,93,0,164,0,202,0,41,1,255,255,255,255,93,0,203,0,41,1,255,255,92,0,159,0,147,0,255,255,218,0,88,0,55,0,255,255,89,0,55,0,255,255,95,0,189,0,148,0,255,255,96,0,32,1,141,0,255,255,30,0,255,255,31,0,146,0,193,0,41,1,255,255,31,0,146,0,41,1,255,255,31,0,255,255,39,0,146,0,164,0,41,1,255,255,39,0,146,0,41,1,255,255,35,1,239,0,255,255,238,0,255,255,238,0,239,0,255,255,255,255,100,0,204,0,233,0,234,0,255,255,11,0,165,0,219,0,159,0,221,0,10,0,255,255,12,0,165,0,219,0,159,0,222,0,10,0,255,255,255,255,255,255,18,0,205,0,165,0,220,0,206,0,159,0,10,0,255,255,255,255,255,255,19,0,207,0,165,0,220,0,208,0,159,0,10,0,255,255,16,0,165,0,39,1,242,0,10,0,255,255,16,0,39,1,242,0,10,0,255,255,255,255,255,255,20,0,223,0,25,0,209,0,165,0,220,0,210,0,159,0,10,0,255,255,255,255,3,0,180,0,13,1,211,0,158,0,10,0,255,255,255,255,255,255,3,0,86,0,164,0,212,0,44,1,213,0,158,0,10,0,255,255,255,255,4,0,180,0,214,0,158,0,10,0,255,255,255,255,5,0,181,0,215,0,15,1,158,0,10,0,255,255,255,255,255,255,5,0,30,1,38,1,216,0,181,0,217,0,15,1,158,0,10,0,255,255,21,0,255,255,22,0,255,255,23,0,255,255,24,0,255,255,200,0,255,255,44,1,255,255,13,0,255,255,44,1,13,0,255,255,44,1,255,255,27,0,255,255,222,0,255,255,14,0,165,0,219,0,159,0,221,0,255,255,48,1,255,255,15,0,159,0,255,255,178,0,255,255,171,0,255,255,18,1,255,255,92,0,226,0,41,1,255,255,224,0,255,255,225,0,144,0,224,0,255,255,225,0,255,255,225,0,144,0,98,0,18,1,255,255,225,0,144,0,98,0,18,1,144,0,225,0,255,255,225,0,144,0,98,0,255,255,225,0,144,0,98,0,144,0,225,0,255,255,98,0,18,1,255,255,98,0,18,1,144,0,225,0,255,255,98,0,255,255,98,0,144,0,225,0,255,255,20,1,144,0,23,1,144,0,26,1,29,1,255,255,20,1,144,0,23,1,144,0,26,1,144,0,20,1,29,1,255,255,20,1,144,0,23,1,29,1,255,255,20,1,144,0,23,1,144,0,20,1,29,1,255,255,20,1,144,0,26,1,29,1,255,255,20,1,144,0,255,255,20,1,144,0,26,1,144,0,20,1,29,1,255,255,20,1,29,1,255,255,23,1,144,0,26,1,29,1,255,255,23,1,144,0,26,1,144,0,20,1,29,1,255,255,23,1,29,1,255,255,23,1,144,0,20,1,29,1,255,255,26,1,29,1,255,255,26,1,144,0,20,1,29,1,255,255,28,1,255,255,48,1,255,255,229,0,255,255,118,0,230,0,118,0,255,255,79,0,255,255,118,0,227,0,230,0,118,0,255,255,40,1,255,255,40,1,149,0,231,0,40,1,255,255,232,0,255,255,231,0,144,0,232,0,255,255,51,0,255,255,17,1,255,255,146,0,16,1,230,0,147,0,255,255,16,1,255,255,108,0,159,0,141,0,255,255,29,0,159,0,10,0,255,255,255,255,28,0,236,0,228,0,159,0,10,0,255,255,170,0,235,0,255,255,237,0,38,1,36,1,191,0,255,255,237,0,38,1,36,1,191,0,239,0,255,255,237,0,38,1,36,1,194,0,235,0,255,255,35,1,190,0,255,255,218,0,143,0,36,1,191,0,255,255,218,0,88,0,36,1,190,0,255,255,218,0,88,0,37,1,255,255,218,0,143,0,190,0,255,255,218,0,88,0,190,0,255,255,32,0,190,0,255,255,32,0,255,255,218,0,142,0,192,0,42,1,255,255,255,255,140,0,240,0,228,0,159,0,141,0,255,255,255,255,26,0,241,0,228,0,159,0,10,0,255,255,17,0,198,0,219,0,159,0,243,0,255,255,222,0,255,255,242,0,255,255,8,0,245,0,246,0,219,0,159,0,244,0,255,255,48,1,255,255,188,0,255,255,199,0,255,255,48,1,255,255,91,0,178,0,255,255,48,1,255,255,9,0,159,0,255,255,48,1,255,255,8,1,255,255,4,1,255,255,3,1,255,255,7,1,255,255,60,0,255,255,63,0,255,255,105,0,63,0,255,255,105,0,250,0,63,0,255,255,251,0,255,255,250,0,251,0,255,255,65,0,255,255,255,255,64,0,252,0,159,0,141,0,255,255,111,0,255,255,106,0,61,0,255,255,106,0,250,0,61,0,255,255,102,0,62,0,255,255,102,0,250,0,62,0,255,255,109,0,255,255,48,1,255,255,1,1,255,255,2,1,255,255,1,1,2,1,255,255,110,0,255,255,250,0,110,0,255,255,103,0,63,0,255,255,103,0,250,0,63,0,255,255,5,1,255,255,101,0,105,0,251,0,63,0,255,255,101,0,6,1,255,255,181,0,255,255,54,0,255,255,53,0,255,255,56,0,255,255,63,0,255,255,105,0,63,0,255,255,104,0,63,0,255,255,104,0,250,0,63,0,255,255,58,0,255,255,59,0,255,255,126,0,58,0,255,255,126,0,59,0,255,255,51,0,255,255,54,0,255,255,53,0,255,255,56,0,255,255,55,0,255,255,9,1,255,255,9,1,255,255,34,0,255,255,33,0,255,255,35,0,255,255,36,0,255,255,49,0,255,255,48,0,255,255,66,0,255,255,67,0,255,255,44,1,255,255,255,255,117,0,14,1,165,0,44,1,255,255,1,0,44,1,255,255,146,0,16,1,41,1,255,255,16,1,44,1,255,255,20,1,144,0,24,1,144,0,26,1,29,1,255,255,20,1,144,0,24,1,144,0,26,1,144,0,20,1,29,1,255,255,20,1,144,0,24,1,29,1,255,255,20,1,144,0,24,1,144,0,20,1,29,1,255,255,20,1,144,0,26,1,29,1,255,255,20,1,144,0,26,1,144,0,20,1,29,1,255,255,20,1,29,1,255,255,24,1,144,0,26,1,29,1,255,255,24,1,144,0,26,1,144,0,20,1,29,1,255,255,24,1,29,1,255,255,24,1,144,0,20,1,29,1,255,255,26,1,29,1,255,255,26,1,144,0,20,1,29,1,255,255,28,1,255,255,255,255,55,0,255,255,54,0,255,255,53,0,255,255,56,0,255,255,17,1,255,255,51,0,255,255,18,1,255,255,92,0,226,0,41,1,255,255,19,1,255,255,20,1,144,0,19,1,255,255,51,0,113,0,188,0,255,255,51,0,113,0,218,0,255,255,22,1,255,255,23,1,144,0,22,1,255,255,21,1,255,255,24,1,144,0,21,1,255,255,123,0,255,255,98,0,255,255,25,1,51,0,255,255,25,1,255,255,120,0,255,255,99,0,255,255,27,1,51,0,255,255,144,0,28,1,255,255,48,1,255,255,11,1,255,255,255,255,146,0,31,1,164,0,41,1,255,255,48,1,255,255,33,1,43,1,255,255,34,1,255,255,33,1,144,0,34,1,255,255,188,0,91,0,188,0,255,255,57,0,188,0,255,255,51,0,255,255,55,0,255,255,52,0,255,255,51,0,255,255,55,0,255,255,52,0,255,255,185,0,255,255,51,0,255,255,52,0,255,255,185,0,255,255,143,0,255,255,88,0,255,255,255,255,47,1,255,255,255,255,45,1,255,255,40,1,147,0,255,255,40,1,148,0,255,255,255,255,45,1,255,255,144,0,255,255,149,0,255,255,45,1,255,255,255,255,150,0,46,1,0,1,255,255,44,1,255,255,47,1,149,0,255,255,255,255,0,2,0,2,2,1,1,3,2,1,0,5,4,2,1,1,3,2,0,4,2,3,3,3,3,3,4,1,3,3,6,5,5,5,5,3,3,3,3,1,3,3,1,3,3,3,2,1,1,1,1,1,4,0,5,2,3,4,5,4,5,2,2,2,2,2,1,3,1,3,1,2,3,5,2,4,2,4,1,3,1,3,2,3,1,2,1,4,3,3,3,3,2,1,1,4,3,3,3,3,2,1,1,1,2,1,3,1,1,1,1,1,1,1,1,0,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,5,3,5,6,5,5,5,5,4,3,3,3,3,3,3,3,3,3,4,4,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,6,1,1,1,2,4,2,3,1,1,1,1,2,4,2,1,2,2,4,1,0,2,2,2,1,1,2,3,4,3,4,2,1,1,1,1,1,1,1,1,0,4,0,4,0,3,3,3,2,3,3,1,4,3,1,4,3,2,1,2,0,4,6,6,0,0,7,0,0,7,5,4,0,0,9,0,6,0,0,8,0,5,0,6,0,0,9,1,1,1,1,1,1,1,2,1,1,1,5,1,2,1,1,1,3,1,3,1,4,6,3,5,2,4,1,3,6,8,4,6,4,2,6,2,4,6,2,4,2,4,1,1,1,3,1,4,1,4,1,3,1,1,4,1,3,3,0,5,2,4,5,5,2,4,4,3,3,3,2,1,4,0,5,0,5,5,1,1,6,1,1,1,1,2,1,2,1,1,1,1,1,1,1,2,3,1,2,1,0,4,1,2,3,2,3,1,1,1,1,2,1,2,2,3,1,4,2,1,1,1,1,1,2,2,3,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,4,2,3,2,6,8,4,6,4,6,2,4,6,2,4,2,4,1,0,1,1,1,1,1,1,1,3,1,3,3,3,1,3,1,3,1,1,2,1,1,1,2,2,1,1,0,4,1,2,1,3,3,2,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,2,2,0,1,1,1,1,0,3,1,2,0,0,0,0,0,0,151,0,153,0,152,0,154,0,155,0,155,0,155,0,155,0,156,0,157,0,156,0,158,0,159,0,160,0,160,0,160,0,160,0,162,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,163,0,163,0,164,0,164,0,164,0,164,0,164,0,164,0,165,0,166,0,166,0,167,0,167,0,169,0,168,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,171,0,171,0,172,0,172,0,173,0,173,0,173,0,173,0,173,0,173,0,173,0,173,0,173,0,173,0,174,0,174,0,175,0,175,0,176,0,176,0,177,0,177,0,177,0,177,0,177,0,177,0,177,0,177,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,179,0,179,0,180,0,180,0,180,0,181,0,181,0,181,0,181,0,181,0,182,0,182,0,183,0,184,0,183,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0])
.concat
.concat([117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,1,255,255,255,255,7,1,255,255,255,255,153,2,154,2,12,1,13,1,255,255,255,255,255,255,64,1,255,255,255,255,255,255,14,3,69,1,255,255,255,255,18,3,255,255,255,255,171,2,76,1,255,255,255,255,25,3,255,255,255,255,178,2,255,255,64,1,255,255,255,255,255,255,255,255,69,1,255,255,255,255,255,255,255,255,255,255,255,255,76,1,77,1,255,255,255,255,196,2,197,2,255,255,255,255,255,255,255,255,52,3,255,255,255,255,255,255,255,255,64,1,255,255,59,3,255,255,255,255,69,1,255,255,255,255,215,2,255,255,255,255,255,255,76,1,255,255,255,255,79,1,255,255,255,255,255,255,255,255,255,255,255,255,133,1,255,255,231,2,232,2,233,2,255,255,255,255,255,255,255,255,255,255,143,1,253,2,254,2,255,255,0,3,255,255,2,3,3,3,151,1,255,255,133,1,255,255,8,3,255,255,10,3,11,3,255,255,255,255,255,255,255,255,143,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,151,1,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,133,1,80,0,81,0,255,255,255,255,255,255,186,1,86,0,87,0,255,255,143,1,137,3,255,255,255,255,255,255,195,1,36,3,37,3,151,1,255,255,255,255,255,255,255,255,43,3,255,255,255,255,186,1,47,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,195,1,44,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,209,1,255,255,211,1,255,255,186,1,255,255,255,255,255,255,255,255,78,3,255,255,240,1,255,255,195,1,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,96,3,255,255,86,0,87,0,240,1,255,255,102,3,255,255,104,3,255,255,119,3,120,3,121,3,122,3,110,3,255,255,255,255,126,3,127,3,128,3,255,255,130,3,131,3,255,255,255,255,255,255,255,255,255,255,8,2,255,255,114,0,240,1,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,172,3,255,255,255,255,175,3,176,3,177,3,178,3,255,255,71,2,255,255,255,255,51,0,52,0,255,255,186,3,55,0,255,255,255,255,81,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,2,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,81,2,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,2,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,81,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,153,2,154,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,255,255,171,2,255,255,153,2,154,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,171,2,255,255,255,255,255,255,255,255,196,2,197,2,178,2,255,255,153,2,154,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,215,2,196,2,197,2,171,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,179,2,255,255,255,255,255,255,255,255,231,2,232,2,233,2,255,255,215,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,196,2,197,2,255,255,255,255,255,255,255,255,255,255,255,255,231,2,232,2,233,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,215,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,231,2,232,2,233,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,36,3,37,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,47,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,36,3,37,3,255,255,255,255,255,255,255,255,255,255,43,3,255,255,255,255,255,255,47,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,36,3,37,3,255,255,255,255,255,255,255,255,255,255,43,3,255,255,255,255,255,255,47,3,255,255,96,3,255,255,78,3,255,255,255,255,255,255,102,3,255,255,104,3,255,255,255,255,255,255,255,255,255,255,110,3,255,255,255,255,255,255,255,255,255,255,96,3,255,255,255,255,255,255,255,255,255,255,102,3,255,255,104,3,255,255,255,255,255,255,255,255,255,255,110,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,3,255,255,255,255,255,255,255,255,255,255,102,3,255,255,104,3,255,255,255,255,255,255,0,0,1,0,110,3,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,255,255,126,0,127,0,128,0,255,255,255,255,255,255,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,149,0,150,0,27,0,28,0,29,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,90,0,91,0,255,255,255,255,255,255,255,255,114,0,97,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,108,0,255,255,255,255,255,255,255,255,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,150,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,142,0,143,0,144,0,0,0,255,255,147,0,148,0,149,0,150,0,255,255,255,255,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,26,0,27,0,28,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,255,255,91,0,255,255,255,255,255,255,255,255,114,0,97,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,140,0,141,0,142,0,143,0,144,0,0,0,146,0,147,0,148,0,149,0,150,0,255,255,255,255,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,27,0,28,0,29,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,255,255,91,0,255,255,255,255,255,255,255,255,255,255,97,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,108,0,255,255,255,255,255,255,255,255,255,255,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,142,0,143,0,144,0,0,0,255,255,147,0,148,0,149,0,150,0,255,255,255,255,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,26,0,27,0,28,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,255,255,91,0,255,255,255,255,255,255,255,255,255,255,97,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,140,0,141,0,142,0,143,0,144,0,0,0,146,0,147,0,148,0,149,0,150,0,255,255,255,255,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,27,0,28,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,255,255,91,0,255,255,255,255,255,255,255,255,255,255,97,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,142,0,143,0,144,0,0,0,146,0,147,0,148,0,149,0,150,0,255,255,255,255,8,0,9,0,10,0,255,255,255,255,255,255,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,26,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,0,0,90,0,255,255,255,255,255,255,255,255,255,255,255,255,8,0,9,0,10,0,255,255,255,255,255,255,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,113,0,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,140,0,141,0,142,0,143,0,144,0,255,255,255,255,147,0,255,255,149,0,150,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,90,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,113,0,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,142,0,143,0,144,0,255,255,255,255,147,0,255,255,149,0,150,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,255,255,255,255,15,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,149,0,150,0,10,0,11,0,12,0,255,255,14,0,15,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,10,0,11,0,12,0,149,0,150,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,10,0,11,0,12,0,149,0,150,0,15,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,149,0,150,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,149,0,150,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,9,0,10,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,149,0,150,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,147,0,255,255,149,0,150,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,147,0,255,255,149,0,150,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,149,0,150,0,10,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,149,0,150,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,150,0,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,149,0,150,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,150,0,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,149,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,149,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,145,0,146,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,140,0,255,255,11,0,12,0,255,255,255,255,146,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,140,0,255,255,11,0,12,0,255,255,255,255,146,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,90,0,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,113,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,126,0,127,0,128,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,146,0,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,126,0,127,0,128,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,146,0,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,146,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,255,255,255,255,255,255,255,255,255,255,255,255,63,0,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,105,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,255,255,255,255,255,255,255,255,255,255,255,255,63,0,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,105,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,101,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,145,0,18,0,19,0,20,0])
.concat([21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,126,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,144,0,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,126,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,144,0,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,86,0,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,44,121,1,0,228,120,1,0,152,120,1,0,36,120,1,0,200,119,1,0,104,119,1,0,28,119,1,0,168,135,1,0,0,135,1,0,64,134,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0,0,0,0,164,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,164,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,164,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,164,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,164,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,164,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,164,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,164,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,204,167,1,0,20,1,0,0,20,1,0,0,6,0,0,0,172,167,1,0,14,1,0,0,14,1,0,0,0,0,0,0,168,167,1,0,33,1,0,0,33,1,0,0,1,0,0,0,20,167,1,0,8,1,0,0,8,1,0,0,0,0,0,0,16,167,1,0,9,1,0,0,9,1,0,0,1,0,0,0,8,167,1,0,12,1,0,0,12,1,0,0,0,0,0,0,0,167,1,0,38,1,0,0,38,1,0,0,4,0,0,0,236,166,1,0,35,1,0,0,35,1,0,0,1,0,0,0,196,166,1,0,32,1,0,0,32,1,0,0,1,0,0,0,188,166,1,0,13,1,0,0,13,1,0,0,10,0,0,0,164,166,1,0,7,1,0,0,43,1,0,0,6,0,0,0,136,166,1,0,34,1,0,0,34,1,0,0,1,0,0,0,64,166,1,0,18,1,0,0,42,1,0,0,10,0,0,0,180,165,1,0,11,1,0,0,40,1,0,0,10,0,0,0,136,165,1,0,29,1,0,0,29,1,0,0,6,0,0,0,116,165,1,0,4,1,0,0,4,1,0,0,7,0,0,0,76,165,1,0,36,1,0,0,36,1,0,0,10,0,0,0,20,165,1,0,25,1,0,0,25,1,0,0,0,0,0,0,200,164,1,0,30,1,0,0,30,1,0,0,4,0,0,0,160,164,1,0,19,1,0,0,19,1,0,0,10,0,0,0,124,164,1,0,5,1,0,0,5,1,0,0,7,0,0,0,92,164,1,0,37,1,0,0,37,1,0,0,10,0,0,0,88,164,1,0,24,1,0,0,24,1,0,0,10,0,0,0,184,163,1,0,16,1,0,0,16,1,0,0,10,0,0,0,176,163,1,0,23,1,0,0,23,1,0,0,1,0,0,0,172,163,1,0,10,1,0,0,39,1,0,0,10,0,0,0,164,163,1,0,15,1,0,0,15,1,0,0,10,0,0,0,152,163,1,0,22,1,0,0,22,1,0,0,1,0,0,0,140,163,1,0,21,1,0,0,21,1,0,0,6,0,0,0,132,163,1,0,31,1,0,0,31,1,0,0,4,0,0,0,96,163,1,0,3,1,0,0,3,1,0,0,10,0,0,0,72,163,1,0,6,1,0,0,6,1,0,0,0,0,0,0,60,163,1,0,47,1,0,0,47,1,0,0,1,0,0,0,176,162,1,0,48,1,0,0,48,1,0,0,1,0,0,0,160,162,1,0,49,1,0,0,49,1,0,0,1,0,0,0,156,162,1,0,46,1,0,0,46,1,0,0,1,0,0,0,148,162,1,0,44,1,0,0,44,1,0,0,7,0,0,0,136,162,1,0,45,1,0,0,45,1,0,0,1,0,0,0,164,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,108,162,1,0,2,1,0,0,2,1,0,0,9,0,0,0,164,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,164,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,100,162,1,0,17,1,0,0,41,1,0,0,10,0,0,0,86,1,0,0,88,1,0,0,82,1,0,0,84,1,0,0,78,1,0,0,80,1,0,0,74,1,0,0,76,1,0,0,70,1,0,0,72,1,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,89,64,0,0,0,0,0,136,195,64,0,0,0,0,132,215,151,65,0,128,224,55,121,195,65,67,23,110,5,181,181,184,147,70,245,249,63,233,3,79,56,77,50,29,48,249,72,119,130,90,60,191,115,127,221,79,21,117,31,0,0,0,28,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,29,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,113,2,0,0,232,187,1,0,56,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
.concat([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,142,1,0,98,0,0,0,82,73,84,69,48,48,48,49,107,173,0,0,57,174,77,65,84,90,48,48,48,48,73,82,69,80,0,0,57,144,48,48,48,48,0,143,0,0,0,0,3,47,0,1,0,3,0,0,0,123,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,128,0,5,0,128,64,68,0,128,4,69,0,128,0,5,0,128,128,68,0,128,4,197,0,128,0,5,1,0,0,5,0,128,0,67,0,128,5,69,0,128,0,5,1,0,0,5,0,128,192,67,0,128,6,69,0,128,0,5,0,128,128,68,0,128,10,197,0,128,0,5,0,128,64,68,0,128,14,69,0,128,0,5,1,0,0,5,0,129,0,67,0,128,32,69,0,128,0,5,1,0,2,145,0,129,128,67,0,128,33,69,0,128,0,5,1,0,2,145,0,129,192,67,0,128,33,197,0,128,0,5,1,0,2,145,0,130,0,67,0,128,34,69,0,128,0,5,1,0,4,17,0,130,64,67,0,128,34,197,0,128,0,5,1,0,2,145,0,130,128,67,0,128,35,69,0,128,0,5,1,0,2,145,0,130,192,67,0,128,35,197,0,128,0,5,1,0,2,145,0,131,0,67,0,128,36,69,0,128,0,5,1,0,6,17,0,131,64,67,0,128,37,197,0,128,0,5,1,0,2,145,0,131,128,67,0,128,38,69,0,128,0,5,1,0,7,17,0,131,192,67,0,128,38,197,0,128,0,5,1,0,8,17,0,132,64,67,0,128,39,69,0,128,0,5,1,0,0,5,0,132,128,67,0,128,39,197,0,128,0,5,0,128,64,68,0,128,51,69,0,128,0,5,1,0,0,5,0,132,128,67,0,128,51,197,0,128,0,5,0,132,192,68,0,128,52,69,0,128,0,5,1,0,0,5,0,133,0,67,0,128,55,197,0,128,0,5,0,128,128,68,0,128,60,69,0,128,0,5,1,0,0,5,0,133,64,67,0,128,60,197,0,128,0,5,0,132,192,68,0,128,61,69,0,128,0,5,1,0,0,5,0,133,128,67,0,128,63,197,0,128,0,5,0,128,64,68,0,128,64,197,0,128,0,5,1,0,0,5,0,133,128,67,0,128,65,69,0,128,0,5,1,0,0,5,0,133,192,67,0,128,65,197,0,128,0,5,0,128,128,68,0,128,70,197,0,128,0,5,1,0,0,5,0,133,192,67,0,128,71,69,0,0,0,74,0,0,0,0,0,0,0,24,0,5,65,114,114,97,121,0,0,10,69,110,117,109,101,114,97,98,108,101,0,0,10,67,111,109,112,97,114,97,98,108,101,0,0,6,77,111,100,117,108,101,0,0,9,69,120,99,101,112,116,105,111,110,0,0,13,83,116,97,110,100,97,114,100,69,114,114,111,114,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,14,76,111,99,97,108,74,117,109,112,69,114,114,111,114,0,0,10,82,97,110,103,101,69,114,114,111,114,0,0,16,70,108,111,97,116,68,111,109,97,105,110,69,114,114,111,114,0,0,11,82,101,103,101,120,112,69,114,114,111,114,0,0,9,84,121,112,101,69,114,114,111,114,0,0,9,78,97,109,101,69,114,114,111,114,0,0,13,78,111,77,101,116,104,111,100,69,114,114,111,114,0,0,10,73,110,100,101,120,69,114,114,111,114,0,0,8,75,101,121,69,114,114,111,114,0,0,11,83,99,114,105,112,116,69,114,114,111,114,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,4,72,97,115,104,0,0,6,75,101,114,110,101,108,0,0,7,73,110,116,101,103,101,114,0,0,7,78,117,109,101,114,105,99,0,0,5,82,97,110,103,101,0,0,6,83,116,114,105,110,103,0,0,0,0,183,0,1,0,4,0,0,0,22,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,1,132,1,128,1,4,2,0,0,5,0,129,1,32,0,128,0,72,1,0,10,192,0,129,64,70,0,128,0,72,1,0,12,192,0,129,128,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,7,0,4,101,97,99,104,0,0,10,101,97,99,104,95,105,110,100,101,120,0,0,8,99,111,108,108,101,99,116,33,0,0,4,109,97,112,33,0,0,12,97,108,105,97,115,95,109,101,116,104,111,100,0,0,10,105,110,105,116,105,97,108,105,122,101,0,0,6,100,101,108,101,116,101,0,0,0,0,252,0,5,0,8,0,0,0,46,0,0,0,166,2,191,255,3,3,0,0,6,3,0,0,32,3,0,64,175,1,1,64,1,1,129,128,1,0,64,11,23,2,128,0,6,3,0,128,1,3,0,192,173,1,1,128,1,2,128,128,160,2,1,64,1,2,129,0,1,2,192,0,153,0,64,5,23,2,129,0,1,3,0,0,5,2,129,0,178,2,192,2,25,2,128,192,1,3,0,0,6,3,0,0,32,2,129,64,182,2,192,0,153,0,64,8,151,2,128,64,1,3,1,0,1,2,129,128,160,2,128,128,1,3,0,192,1,2,129,192,179,2,192,2,25,2,128,192,1,3,0,0,6,3,0,0,32,2,130,0,180,2,192,2,25,2,128,0,6,2,128,0,32,2,128,64,175,1,129,64,1,2,191,238,24,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,9,0,6,108,101,110,103,116,104,0,0,1,45,0,0,2,91,93,0,0,1,43,0,0,2,61,61,0,0,2,62,61,0,0,4,99,97,108,108,0,0,1,60,0,0,2,60,61,0,0,0,0,108,0,3,0,5,0,0,0,16,0,0,0,166,1,63,255,131,0,64,3,23,1,128,64,1,2,0,128,1,1,128,0,160,1,128,128,1,1,128,64,173,1,0,192,1,1,128,128,1,2,0,0,6,2,0,192,32,1,128,128,179,1,191,250,152,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,4,0,4,99,97,108,108,0,0,1,43,0,0,1,60,0,0,6,108,101,110,103,116,104,0,0,0,0,57,0,2,0,4,0,0,0,6,0,0,0,166,1,0,0,6,1,128,3,64,1,0,0,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,1,0,10,101,97,99,104,95,105,110,100,101,120,0,0,0,0,82,0,3,0,7,0,0,0,11,2,0,0,38,1,128,64,21,2,0,0,6,2,128,64,1,2,0,64,160,1,128,0,160,2,0,0,6,2,128,64,1,3,0,192,1,2,0,129,32,1,128,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,2,91,93,0,0,3,91,93,61,0,0,0,1,144,0,5,0,9,0,0,0,57,0,32,0,166,0,64,1,23,0,64,1,23,0,64,1,23,0,191,255,131,1,0,0,5,2,128,64,1,3,0,0,145,2,128,0,160,2,192,0,153,0,64,2,23,2,128,0,6,3,0,1,145,3,128,0,61,2,128,129,32,2,128,64,1,3,63,255,131,2,129,0,179,2,192,2,25,2,128,0,6,3,0,2,145,3,128,0,189,2,128,129,32,2,128,0,6,2,129,128,32,2,128,64,1,3,63,255,131,2,129,192,181,2,192,13,25,2,128,0,5,3,0,0,6,3,128,64,1,3,130,64,175,4,1,64,1,3,2,1,32,2,63,255,131,0,64,7,23,2,128,192,1,2,192,2,25,2,128,192,1,3,1,0,1,2,130,128,160,0,64,0,151,2,128,128,1,3,0,0,6,3,129,0,1,4,1,64,1,3,2,1,32,2,129,0,1,2,130,192,173,2,1,64,1,2,129,0,1,3,0,64,1,2,129,0,179,2,191,247,24,0,0,0,6,0,0,0,41,0,0,0,2,16,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,16,0,19,110,101,103,97,116,105,118,101,32,97,114,114,97,121,32,115,105,122,101,0,0,0,12,0,8,107,105,110,100,95,111,102,63,0,0,7,73,110,116,101,103,101,114,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,1,60,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,5,99,108,101,97,114,0,0,1,62,0,0,3,91,93,61,0,0,1,45,0,0,4,99,97,108,108,0,0,1,43,0,0,0,0,140,0,5,0,7,0,0,0,22,2,0,0,166,0,64,2,23,2,128,0,6,3,0,192,1,2,128,0,160,2,0,64,1,2,128,0,6,3,0,64,1,2,128,64,160,1,129,64,1,2,191,251,152,2,129,0,1,3,0,0,5,2,128,128,178,2,192,0,153,2,128,128,1,2,192,1,153,2,128,128,1,2,128,192,32,0,64,0,151,2,129,0,1,2,128,0,41,0,0,0,0,0,0,0,4,0,9,100,101,108,101,116,101,95,97,116,0,0,5,105,110,100,101,120,0,0,2,61,61,0,0,4,99,97,108,108,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,108,0,1,0,3,0,0,0,11,0,128,0,6,1,0,0,145,0,128,0,160,0,128,0,6,1,0,1,17,0,128,0,160,0,128,0,72,1,0,2,192,0,128,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,4,0,7,105,110,99,108,117,100,101,0,0,10,69,110,117,109,101,114,97,98,108,101,0,0,10,67,111,109,112,97,114,97,98,108,101,0,0,5,115,111,114,116,33,0,0,0,0,65,0,2,0,5,0,0,0,7,0,0,0,166,1,0,0,6,1,128,0,6,2,0,64,1,1,128,64,33,1,0,0,160,1,0,0,41,0,0,0,0,0,0,0,2,0,7,114,101,112,108,97,99,101,0,0,4,115,111,114,116,0,0,0,0,127,0,1,0,2,0,0,0,14,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,8,192,0,128,64,70,0,128,0,72,1,0,14,192,0,128,128,70,0,128,0,72,1,0,16,192,0,128,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,4,0,11,97,116,116,114,95,114,101,97,100,101,114,0,0,11,97,116,116,114,95,119,114,105,116,101,114,0,0,13,97,116,116,114,95,97,99,99,101,115,115,111,114,0,0,4,97,116,116,114,0,0,0,0,47,0,3,0,5,0,0,0,5,0,8,0,38,1,128,64,1,2,0,3,64,1,128,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,108,0,4,0,7,0,0,0,12,2,0,0,38,2,0,0,61,2,128,64,1,2,128,64,32,2,0,0,172,2,0,128,32,1,129,0,1,2,0,0,6,2,128,64,1,3,0,3,64,2,0,192,161,2,0,0,41,0,0,0,1,16,0,1,64,0,0,0,4,0,1,43,0,0,4,116,111,95,115,0,0,6,105,110,116,101,114,110,0,0,13,100,101,102,105,110,101,95,109,101,116,104,111,100,0,0,0,0,60,0,1,0,3,0,0,0,4,0,128,0,6,1,0,192,21,0,128,0,160,0,128,0,41,0,0,0,0,0,0,0,1,0,21,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,103,101,116,0,0,0,0,47,0,3,0,5,0,0,0,5,0,8,0,38,1,128,64,1,2,0,3,64,1,128,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,136,0,4,0,7,0,0,0,18,2,0,0,38,2,0,0,61,2,128,64,1,2,128,64,32,2,0,0,172,2,0,128,32,1,129,0,1,2,0,64,1,2,0,64,32,2,128,0,189,2,0,0,172,2,0,128,32,0,129,0,1,2,0,0,6,2,128,64,1,3,0,3,64,2,0,192,161,2,0,0,41,0,0,0,2,16,0,1,64,16,0,1,61,0,0,0,4,0,1,43,0,0,4,116,111,95,115,0,0,6,105,110,116,101,114,110,0,0,13,100,101,102,105,110,101,95,109,101,116,104,111,100,0,0,0,0,68,0,3,0,6,0,0,0,6,2,0,0,38,1,128,0,6,2,0,192,21,2,128,64,1,1,128,1,32,1,128,0,41,0,0,0,0,0,0,0,1,0,21,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,115,101,116,0,0,0,0,96,0,3,0,6,0,0,0,12,0,8,0,38,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,127,160,1,128,0,41,0,0,0,0,0,0,0,2,0,11,97,116,116,114,95,114,101,97,100,101,114,0,0,11,97,116,116,114,95,119,114,105,116,101,114,0,0,0,0,54,0,3,0,5,0,0,0,5,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,11,97,116,116,114,95,114,101,97,100,101,114,0,0,0,0,134,0,1,0,2,0,0,0,20,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,128,0,72,1,0,12,192,0,129,64,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,6,0,1,60,0,0,2,60,61,0,0,2,61,61,0,0,1,62,0,0,2,62,61,0,0,8,98,101,116,119,101,101,110,63,0,0,0,0,109,0,4,0,6,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,0,64,32,2,64,1,25,2,0,0,8,0,64,3,151,2,0,192,1,2,191,255,131,2,0,128,179,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,0,0,0,0,0,0,0,3,0,3,60,61,62,0,0,4,110,105,108,63,0,0,1,60,0,0,0,0,110,0,4,0,6,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,0,64,32,2,64,1,25,2,0,0,8,0,64,3,151,2,0,192,1,2,191,255,131,2,0,128,180,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,0,0,0,0,0,0,0,3,0,3,60,61,62,0,0,4,110,105,108,63,0,0,2,60,61,0,0,0,0,83,0,4,0,6,0,0,0,13,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,191,255,131,2,0,64,178,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,0,0,0,0,0,0,0,2,0,3,60,61,62,0,0,2,61,61,0,0,0,0,109,0,4,0,6,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,0,64,32,2,64,1,25,2,0,0,8,0,64,3,151,2,0,192,1,2,191,255,131,2,0,128,181,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,0,0,0,0,0,0,0,3,0,3,60,61,62,0,0,4,110,105,108,63,0,0,1,62,0,0,0,0,110,0,4,0,6,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,0,64,32,2,64,1,25,2,0,0,8,0,64,3,151,2,0,192,1,2,191,255,131,2,0,128,182,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,0,0,0,0,0,0,0,3,0,3,60,61,62,0,0,4,110,105,108,63,0,0,2,62,61,0,0,0,0,80,0,4,0,6,0,0,0,13,4,0,0,38,2,0,0,6,2,128,64,1,2,0,0,179,2,64,1,152,2,0,0,6,2,128,128,1,2,0,64,181,2,64,1,25,2,0,0,8,0,64,0,151,2,0,0,7,2,0,0,41,0,0,0,0,0,0,0,2,0,1,60,0,0,1,62,0,0,0,2,41,0,1,0,4,0,0,0,79,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,8,192,0,128,64,70,0,128,0,72,1,0,14,192,0,128,128,70,0,128,0,72,1,0,18,192,0,128,192,70,0,128,0,72,1,0,22,192,0,129,0,70,0,128,0,72,1,0,26,192,0,129,64,70,0,128,0,72,1,0,3,4,1,128,1,132,2,0,0,5,0,129,193,32,0,128,0,72,1,0,30,192,0,130,0,70,0,128,0,72,1,0,34,192,0,130,64,70,0,128,0,72,1,0,38,192,0,130,128,70,0,128,0,72,1,0,42,192,0,130,192,70,0,128,0,72,1,0,6,4,1,128,5,132,2,0,0,5,0,129,193,32,0,128,0,72,1,0,6,132,1,128,1,4,2,0,0,5,0,129,193,32,0,128,0,72,1,0,48,192,0,131,128,70,0,128,0,72,1,0,52,192,0,131,192,70,0,128,0,72,1,0,8,4,1,128,5,4,2,0,0,5,0,129,193,32,0,128,0,72,1,0,56,192,0,132,64,70,0,128,0,72,1,0,60,192,0,132,128,70,0,128,0,72,1,0,9,132,1,128,4,4,2,0,0,5,0,129,193,32,0,128,0,72,1,0,64,192,0,133,0,70,0,128,0,72,1,0,68,192,0,133,64,70,0,128,0,72,1,0,11,4,1,128,2,132,2,0,0,5,0,129,193,32,1,0,0,41,0,0,0,0,0,0,0,23,0,4,97,108,108,63,0,0,4,97,110,121,63,0,0,7,99,111,108,108,101,99,116,0,0,6,100,101,116,101,99,116,0,0,15,101,97,99,104,95,119,105,116,104,95,105,110,100,101,120,0,0,7,101,110,116,114,105,101,115,0,0,4,102,105,110,100,0,0,12,97,108,105,97,115,95,109,101,116,104,111,100,0,0,8,102,105,110,100,95,97,108,108,0,0,4,103,114,101,112,0,0,8,105,110,99,108,117,100,101,63,0,0,6,105,110,106,101,99,116,0,0,6,114,101,100,117,99,101,0,0,3,109,97,112,0,0,3,109,97,120,0,0,3,109,105,110,0,0,7,109,101,109,98,101,114,63,0,0,9,112,97,114,116,105,116,105,111,110,0,0,6,114,101,106,101,99,116,0,0,6,115,101,108,101,99,116,0,0,12,95,95,115,111,114,116,95,115,117,98,95,95,0,0,4,115,111,114,116,0,0,4,116,111,95,97,0,0,0,0,75,0,3,0,5,0,0,0,12,0,0,0,166,1,0,0,7,1,128,64,1,1,192,2,25,1,128,0,6,2,0,3,64,1,128,0,33,0,64,1,151,1,128,0,6,2,0,5,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,71,0,3,0,5,0,0,0,11,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,8,1,128,128,22,1,128,64,41,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,56,0,3,0,4,0,0,0,9,2,0,0,38,1,128,64,1,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,8,1,128,128,22,1,128,64,41,1,128,0,41,0,0,0,0,0,0,0,0,0,0,0,75,0,3,0,5,0,0,0,12,0,0,0,166,1,0,0,8,1,128,64,1,1,192,2,25,1,128,0,6,2,0,3,64,1,128,0,33,0,64,1,151,1,128,0,6,2,0,5,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,71,0,3,0,5,0,0,0,11,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,2,25,1,128,0,7,1,128,128,22,1,128,64,41,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,56,0,3,0,4,0,0,0,9,2,0,0,38,1,128,64,1,1,192,2,25,1,128,0,7,1,128,128,22,1,128,64,41,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,0,0,0,0,51,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,62,0,3,0,6,0,0,0,7,2,0,0,38,1,128,128,21,2,0,64,21,2,128,64,1,2,0,64,160,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,112,117,115,104,0,0,4,99,97,108,108,0,0,0,0,63,0,4,0,6,0,0,0,9,0,16,0,166,0,64,0,151,0,64,0,151,0,128,0,5,1,128,64,1,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,67,0,3,0,5,0,0,0,10,2,0,0,38,1,128,128,21,2,0,64,1,1,128,0,160,1,192,1,153,0,128,192,22,1,128,64,41,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,55,0,3,0,5,0,0,0,7,0,0,0,166,1,63,255,131,1,128,0,6,2,0,3,64,1,128,0,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,67,0,3,0,6,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,2,128,128,21,1,128,1,32,1,128,128,21,1,128,64,173,1,128,128,22,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,1,43,0,0,0,0,51,0,3,0,5,0,0,0,6,0,0,0,38,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,47,0,3,0,5,0,0,0,5,2,0,0,38,1,128,128,21,2,0,64,1,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,4,112,117,115,104,0,0,0,0,51,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,78,0,3,0,5,0,0,0,11,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,2,25,1,128,128,21,2,0,64,1,1,128,64,160,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,4,112,117,115,104,0,0,0,0,51,0,4,0,6,0,0,0,6,2,0,0,166,1,129,0,55,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,108,0,3,0,6,0,0,0,17,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,5,25,1,128,192,21,2,0,128,21,2,64,2,25,2,0,128,21,2,128,64,1,2,0,128,160,0,64,0,151,2,0,64,1,1,128,64,160,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,3,0,3,61,61,61,0,0,4,112,117,115,104,0,0,4,99,97,108,108,0,0,0,0,51,0,4,0,6,0,0,0,6,2,0,0,38,1,128,0,8,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,69,0,3,0,5,0,0,0,11,2,0,0,38,1,128,64,1,2,0,64,21,1,128,0,178,1,192,2,25,1,128,0,7,1,128,192,22,1,128,64,41,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,1,0,2,61,61,0,0,0,1,18,0,6,0,9,0,0,0,39,0,8,0,166,3,0,64,1,3,0,0,32,3,192,0,131,3,0,64,181,3,64,2,25,3,0,0,6,3,128,1,145,4,0,0,61,3,0,129,32,3,0,2,17,3,128,64,1,4,63,255,3,3,129,128,160,3,1,64,160,3,64,4,25,3,0,64,1,3,191,255,3,3,1,128,160,1,129,128,1,3,0,3,192,1,1,128,1,3,0,64,1,3,1,192,32,3,0,64,1,3,2,0,32,3,64,1,153,2,0,0,7,2,128,0,5,0,64,2,151,2,0,0,8,3,0,64,1,3,191,255,131,3,1,128,160,2,129,128,1,3,0,0,6,3,128,5,64,3,2,64,33,2,128,0,41,0,0,0,1,16,0,18,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,0,0,0,10,0,4,115,105,122,101,0,0,1,62,0,0,5,114,97,105,115,101,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,6,83,121,109,98,111,108,0,0,3,61,61,61,0,0,2,91,93,0,0,3,112,111,112,0,0,6,101,109,112,116,121,63,0,0,4,101,97,99,104,0,0,0,0,51,0,4,0,7,0,0,0,6,4,0,0,38,2,0,64,1,2,128,192,21,3,0,128,1,2,0,1,32,2,0,0,41,0,0,0,0,0,0,0,1,0,4,115,101,110,100,0,0,0,0,83,0,3,0,6,0,0,0,14,2,0,0,38,1,129,0,21,1,192,2,153,1,128,0,8,1,129,0,22,1,128,64,1,1,129,64,22,0,64,2,151,1,128,128,21,2,1,64,21,2,128,64,1,1,128,1,32,1,129,64,22,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,55,0,4,0,6,0,0,0,7,0,0,0,166,1,0,0,7,1,128,0,5,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,165,0,3,0,6,0,0,0,32,2,0,0,38,1,128,128,21,1,192,2,25,0,128,192,22,1,128,0,8,1,128,128,22,0,64,12,23,1,128,64,21,1,192,6,25,1,128,64,21,2,0,64,1,2,128,192,21,1,128,1,32,2,63,255,131,1,128,64,181,1,192,1,153,1,128,64,1,1,128,192,22,0,64,0,151,1,128,0,5,0,64,5,23,1,128,64,1,2,0,192,21,1,128,128,160,2,63,255,131,1,128,64,181,1,192,1,153,1,128,64,1,1,128,192,22,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,1,62,0,0,3,60,61,62,0,0,0,0,55,0,4,0,6,0,0,0,7,0,0,0,166,1,0,0,7,1,128,0,5,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,165,0,3,0,6,0,0,0,32,2,0,0,38,1,128,128,21,1,192,2,25,0,128,192,22,1,128,0,8,1,128,128,22,0,64,12,23,1,128,64,21,1,192,6,25,1,128,64,21,2,0,64,1,2,128,192,21,1,128,1,32,2,63,255,131,1,128,64,179,1,192,1,153,1,128,64,1,1,128,192,22,0,64,0,151,1,128,0,5,0,64,5,23,1,128,64,1,2,0,192,21,1,128,128,160,2,63,255,131,1,128,64,179,1,192,1,153,1,128,64,1,1,128,192,22,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,1,60,0,0,3,60,61,62,0,0,0,0,67,0,4,0,6,0,0,0,10,0,0,0,166,1,1,0,55,1,129,0,55,2,0,0,6,2,128,3,64,2,0,0,33,2,0,128,1,2,128,192,1,0,1,1,55,0,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,86,0,3,0,5,0,0,0,13,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,2,25,1,128,128,21,2,0,64,1,1,128,64,160,0,64,1,151,1,128,192,21,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,4,112,117,115,104,0,0,0,0,51,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,78,0,3,0,5,0,0,0,11,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,1,25,1,128,0,5,0,64,1,151,1,128,128,21,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,4,112,117,115,104,0,0,0,1,154,0,12,0,19,0,0,0,83,10,0,0,166,6,1,0,1,6,129,64,1,6,0,0,178,6,64,6,153,6,0,192,1,6,192,0,3,6,0,0,178,6,64,3,153,6,0,128,1,6,129,0,1,6,0,64,160,6,128,64,1,7,1,0,1,7,131,0,1,6,128,129,32,0,0,0,5,0,0,0,41,6,0,192,1,6,191,255,131,6,0,0,178,6,64,2,153,6,0,64,1,6,128,128,1,3,131,0,1,4,3,64,1,0,64,2,23,6,0,128,1,6,128,64,1,3,131,0,1,4,3,64,1,6,1,192,1,6,129,0,1,6,0,64,160,4,131,0,1,6,1,0,1,6,129,64,1,5,3,0,1,5,131,64,1,6,1,0,1,6,0,192,173,6,129,64,1,7,0,3,64,6,1,0,161,6,2,64,1,6,128,64,1,7,2,128,1,7,131,0,1,6,128,129,32,6,0,192,1,6,0,192,173,6,192,0,131,6,1,64,160,1,131,0,1,6,2,128,1,6,129,0,1,6,1,128,181,6,64,4,153,6,0,0,6,6,128,64,1,7,0,128,1,7,128,192,1,8,1,0,1,8,130,128,1,8,130,0,175,9,1,128,1,6,1,194,161,6,2,128,1,6,129,64,1,6,2,64,179,6,64,5,25,6,0,0,6,6,128,64,1,7,0,128,1,7,128,192,1,8,2,128,1,8,0,192,173,8,129,64,1,9,1,128,1,6,1,194,161,0,64,0,151,6,0,0,5,6,0,0,41,0,0,0,0,0,0,0,10,0,2,61,61,0,0,2,91,93,0,0,3,91,93,61,0,0,1,43,0,0,4,117,112,116,111,0,0,1,37,0,0,1,62,0,0,12,95,95,115,111,114,116,95,115,117,98,95,95,0,0,1,45,0,0,1,60,0,0,0,0,216,0,3,0,7,0,0,0,40,2,0,0,38,1,129,128,21,1,192,3,153,1,129,128,21,2,1,192,21,2,128,64,1,2,0,64,160,2,130,64,21,1,128,1,32,0,64,2,151,1,129,192,21,2,0,64,1,1,128,64,160,2,2,64,21,1,128,128,160,2,63,255,131,1,128,192,181,1,192,5,153,1,129,192,21,2,0,64,1,1,128,64,160,2,2,0,21,2,130,192,21,3,0,192,1,2,1,1,32,1,130,192,21,1,129,64,175,1,130,192,22,0,64,5,23,1,129,192,21,2,0,64,1,1,128,64,160,2,2,0,21,2,130,128,21,3,0,192,1,2,1,1,32,1,130,128,21,1,129,128,173,1,130,128,22,1,128,0,41,0,0,0,0,0,0,0,7,0,4,99,97,108,108,0,0,2,91,93,0,0,3,60,61,62,0,0,1,62,0,0,3,91,93,61,0,0,1,45,0,0,1,43,0,0,0,0,172,0,3,0,10,0,0,0,24,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,128,128,1,1,128,64,32,1,192,0,153,0,64,7,23,1,128,0,6,2,0,128,1,2,128,0,66,2,128,1,147,3,0,128,1,3,1,64,32,2,129,0,160,3,63,255,131,3,191,255,131,4,0,128,1,4,1,64,32,4,1,128,175,4,128,64,1,1,128,130,161,1,0,0,41,0,0,0,0,0,0,0,7,0,4,101,97,99,104,0,0,6,101,109,112,116,121,63,0,0,12,95,95,115,111,114,116,95,115,117,98,95,95,0,0,5,65,114,114,97,121,0,0,3,110,101,119,0,0,4,115,105,122,101,0,0,1,45,0,0,0,0,47,0,3,0,5,0,0,0,5,2,0,0,38,1,128,128,21,2,0,64,1,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,4,112,117,115,104,0,0,0,0,56,0,1,0,2,0,0,0,6,0,128,0,6,0,128,64,71,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,9,101,120,99,101,112,116,105,111,110,0,0,0,0,58,0,3,0,6,0,0,0,8,0,8,0,166,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,2,128,128,1,1,128,63,161,1,128,0,41,0,0,0,0,0,0,0,1,0,3,110,101,119,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,106,0,1,0,3,0,0,0,11,0,128,0,6,1,0,0,132,0,128,0,160,0,128,0,72,1,0,2,192,0,128,128,70,0,128,0,72,1,0,4,192,0,128,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,4,0,13,97,116,116,114,95,97,99,99,101,115,115,111,114,0,0,4,110,97,109,101,0,0,3,110,101,119,0,0,10,105,110,105,116,105,97,108,105,122,101,0,0,0,0,89,0,4,0,7,0,0,0,11,0,32,0,38,0,64,1,23,0,64,1,23,0,64,1,23,0,128,0,61,1,0,0,5,2,0,0,6,2,128,64,1,3,0,128,1,2,0,1,32,2,0,0,41,0,0,0,1,16,0,9,78,97,109,101,69,114,114,111,114,0,0,0,1,0,10,105,110,105,116,105,97,108,105,122,101,0,0,0,0,72,0,4,0,6,0,0,0,11,0,32,0,38,0,64,1,23,0,64,1,23,0,64,1,23,0,128,0,5,1,0,0,5,1,0,0,14,2,128,64,1,3,0,0,5,2,0,0,164,2,0,0,41,0,0,0,0,0,0,0,1,0,5,64,110,97,109,101,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,247,0,1,0,2,0,0,0,32,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,8,192,0,128,128,70,0,128,0,72,1,0,12,192,0,128,192,70,0,128,0,72,1,0,16,192,0,129,0,70,0,128,0,72,1,0,18,192,0,129,64,70,0,128,0,72,1,0,26,192,0,129,128,70,0,128,0,72,1,0,32,192,0,129,192,70,0,128,0,72,1,0,36,192,0,130,0,70,0,128,0,72,1,0,42,192,0,130,64,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,10,0,6,100,101,108,101,116,101,0,0,4,101,97,99,104,0,0,8,101,97,99,104,95,107,101,121,0,0,10,101,97,99,104,95,118,97,108,117,101,0,0,10,105,110,105,116,105,97,108,105,122,101,0,0,5,109,101,114,103,101,0,0,7,114,101,106,101,99,116,33,0,0,6,114,101,106,101,99,116,0,0,7,115,101,108,101,99,116,33,0,0,6,115,101,108,101,99,116,0,0,0,0,117,0,3,0,5,0,0,0,16,2,0,0,166,1,128,128,1,1,192,2,25,1,128,0,6,2,0,64,1,1,128,0,160,1,128,64,32,1,192,2,25,1,128,128,1,2,0,64,1,1,128,128,160,0,64,1,151,1,128,0,6,2,0,64,1,1,128,192,160,1,128,0,41,0,0,0,0,0,0,0,4,0,8,104,97,115,95,107,101,121,63,0,0,1,33,0,0,4,99,97,108,108,0,0,8,95,95,100,101,108,101,116,101,0,0,0,0,62,0,2,0,4,0,0,0,7,0,0,0,166,1,0,0,6,1,0,0,32,1,128,3,64,1,0,64,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,2,0,4,107,101,121,115,0,0,4,101,97,99,104,0,0,0,0,68,0,3,0,7,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,2,128,0,6,3,0,64,1,2,128,64,160,2,1,1,55,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,2,91,93,0,0,0,0,62,0,2,0,4,0,0,0,7,0,0,0,166,1,0,0,6,1,0,0,32,1,128,3,64,1,0,64,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,2,0,4,107,101,121,115,0,0,4,101,97,99,104,0,0,0,0,47,0,3,0,5,0,0,0,5,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,62,0,2,0,4,0,0,0,7,0,0,0,166,1,0,0,6,1,0,0,32,1,128,3,64,1,0,64,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,2,0,4,107,101,121,115,0,0,4,101,97,99,104,0,0,0,0,60,0,3,0,6,0,0,0,7,2,0,0,38,1,128,64,21,2,0,0,6,2,128,64,1,2,0,64,160,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,2,91,93,0,0,0,0,66,0,3,0,6,0,0,0,8,0,8,0,166,1,128,0,6,2,0,128,1,2,1,0,183,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,0,0,0,0,0,0,0,1,0,11,95,95,105,110,105,116,95,99,111,114,101,0,0,0,0,202,0,4,0,6,0,0,0,26,2,0,0,166,1,129,0,63,2,0,64,1,2,128,0,132,2,0,0,160,2,64,0,153,0,64,1,151,2,0,0,6,2,128,0,61,2,0,128,160,2,0,64])
.concat([1,2,0,64,32,0,129,0,1,2,0,0,6,2,128,3,64,2,0,192,33,2,0,128,1,2,64,2,25,2,0,64,1,2,128,5,64,2,0,192,33,0,64,1,151,2,0,64,1,2,128,7,64,2,0,192,33,1,128,0,41,0,0,0,1,16,0,32,99,97,110,39,116,32,99,111,110,118,101,114,116,32,97,114,103,117,109,101,110,116,32,105,110,116,111,32,72,97,115,104,0,0,0,4,0,11,114,101,115,112,111,110,100,95,116,111,63,0,0,7,116,111,95,104,97,115,104,0,0,5,114,97,105,115,101,0,0,8,101,97,99,104,95,107,101,121,0,0,0,0,67,0,3,0,7,0,0,0,9,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,2,0,192,21,2,128,64,1,3,0,192,1,2,0,65,32,1,128,0,41,0,0,0,0,0,0,0,2,0,2,91,93,0,0,3,91,93,61,0,0,0,0,141,0,3,0,8,0,0,0,23,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,192,5,25,1,128,128,21,2,0,64,1,2,128,0,6,3,0,64,1,2,128,128,160,3,0,64,21,3,128,64,1,3,0,128,160,1,128,65,160,0,64,1,151,1,128,64,21,2,0,64,1,1,128,128,160,2,0,192,21,2,128,64,1,3,0,192,1,2,0,193,32,1,128,0,41,0,0,0,0,0,0,0,4,0,8,104,97,115,95,107,101,121,63,0,0,4,99,97,108,108,0,0,2,91,93,0,0,3,91,93,61,0,0,0,0,67,0,3,0,7,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,2,0,192,21,2,128,64,1,3,0,192,1,2,0,65,32,1,128,0,41,0,0,0,0,0,0,0,2,0,2,91,93,0,0,3,91,93,61,0,0,0,0,118,0,3,0,5,0,0,0,17,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,128,128,1,1,128,64,32,2,63,255,131,1,128,128,178,1,192,1,25,0,0,0,5,0,0,0,41,1,128,128,1,2,0,5,64,1,128,192,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,4,0,8,101,97,99,104,95,107,101,121,0,0,4,115,105,122,101,0,0,2,61,61,0,0,4,101,97,99,104,0,0,0,0,103,0,4,0,7,0,0,0,16,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,64,1,3,0,192,1,2,0,65,32,2,64,2,25,2,0,128,21,2,128,64,1,2,0,128,160,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,4,99,97,108,108,0,0,4,112,117,115,104,0,0,0,0,49,0,3,0,5,0,0,0,5,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,6,100,101,108,101,116,101,0,0,0,0,55,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,63,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,8,101,97,99,104,95,107,101,121,0,0,0,0,110,0,4,0,8,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,64,1,3,0,192,1,2,0,65,32,2,64,1,25,2,0,0,5,0,64,2,151,2,0,192,1,2,128,128,21,3,0,64,1,3,129,0,1,2,128,129,32,2,0,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,4,99,97,108,108,0,0,3,91,93,61,0,0,0,0,118,0,3,0,5,0,0,0,17,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,128,128,1,1,128,64,32,2,63,255,131,1,128,128,178,1,192,1,25,0,0,0,5,0,0,0,41,1,128,128,1,2,0,5,64,1,128,192,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,4,0,8,101,97,99,104,95,107,101,121,0,0,4,115,105,122,101,0,0,2,61,61,0,0,4,101,97,99,104,0,0,0,0,103,0,4,0,7,0,0,0,16,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,64,1,3,0,192,1,2,0,65,32,2,64,1,25,2,0,0,5,0,64,1,151,2,0,128,21,2,128,64,1,2,0,128,160,2,0,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,4,99,97,108,108,0,0,4,112,117,115,104,0,0,0,0,49,0,3,0,5,0,0,0,5,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,6,100,101,108,101,116,101,0,0,0,0,55,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,63,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,8,101,97,99,104,95,107,101,121,0,0,0,0,110,0,4,0,8,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,64,1,3,0,192,1,2,0,65,32,2,64,3,25,2,0,192,1,2,128,128,21,3,0,64,1,3,129,0,1,2,128,129,32,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,4,99,97,108,108,0,0,3,91,93,61,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,59,0,1,0,3,0,0,0,4,0,128,0,6,1,0,0,145,0,128,0,160,1,0,0,41,0,0,0,0,0,0,0,2,0,7,105,110,99,108,117,100,101,0,0,10,69,110,117,109,101,114,97,98,108,101,0,0,0,0,130,0,1,0,2,0,0,0,23,0,128,0,6,0,128,64,71,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,0,70,0,128,0,6,0,128,64,71,1,0,6,192,0,128,64,70,0,128,0,6,0,128,64,71,1,0,8,192,0,128,128,70,0,128,0,72,1,0,10,192,0,128,128,70,0,128,0,72,1,0,12,192,0,128,64,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,3,0,1,96,0,0,4,108,111,111,112,0,0,4,101,118,97,108,0,0,0,0,104,0,3,0,6,0,0,0,7,2,0,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,17,96,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,53,0,3,0,5,0,0,0,5,2,0,0,38,1,128,0,17,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,6,75,101,114,110,101,108,0,0,1,96,0,0,0,0,59,0,2,0,3,0,0,0,8,0,0,0,38,0,64,1,23,1,0,0,43,1,0,0,32,1,0,0,7,1,63,254,24,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,107,0,3,0,6,0,0,0,7,2,0,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,20,101,118,97,108,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,56,0,3,0,5,0,0,0,5,2,0,0,38,1,128,0,17,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,6,75,101,114,110,101,108,0,0,4,101,118,97,108,0,0,0,0,59,0,2,0,3,0,0,0,8,0,0,0,38,0,64,1,23,1,0,0,43,1,0,0,32,1,0,0,7,1,63,254,24,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,189,0,1,0,2,0,0,0,26,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,128,0,72,1,0,12,192,0,129,64,70,0,128,0,72,1,0,14,192,0,129,128,70,0,128,0,72,1,0,16,192,0,129,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,8,0,4,99,101,105,108,0,0,6,100,111,119,110,116,111,0,0,5,102,108,111,111,114,0,0,5,116,105,109,101,115,0,0,5,114,111,117,110,100,0,0,8,116,114,117,110,99,97,116,101,0,0,4,117,112,116,111,0,0,4,115,116,101,112,0,0,0,0,32,0,2,0,3,0,0,0,3,0,0,0,38,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,96,0,4,0,6,0,0,0,15,2,0,0,166,1,128,0,6,0,64,3,23,2,0,128,1,2,128,192,1,2,0,0,160,2,0,192,1,2,0,64,175,1,129,0,1,2,0,192,1,2,128,64,1,2,0,128,182,2,63,251,24,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,1,45,0,0,2,62,61,0,0,0,0,32,0,2,0,3,0,0,0,3,0,0,0,38,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,95,0,3,0,5,0,0,0,15,0,0,0,166,1,63,255,131,0,64,3,23,1,128,64,1,2,0,128,1,1,128,0,160,1,128,128,1,1,128,64,173,1,0,192,1,1,128,128,1,2,0,0,6,1,128,128,179,1,191,251,24,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,1,43,0,0,1,60,0,0,0,0,32,0,2,0,3,0,0,0,3,0,0,0,38,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,32,0,2,0,3,0,0,0,3,0,0,0,38,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,96,0,4,0,6,0,0,0,15,2,0,0,166,1,128,0,6,0,64,3,23,2,0,128,1,2,128,192,1,2,0,0,160,2,0,192,1,2,0,64,173,1,129,0,1,2,0,192,1,2,128,64,1,2,0,128,180,2,63,251,24,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,1,43,0,0,2,60,61,0,0,0,0,170,0,5,0,7,0,0,0,27,2,16,0,166,0,64,0,151,0,64,0,151,1,64,0,3,2,128,64,1,3,0,0,145,2,128,0,160,2,192,1,153,2,128,0,6,2,128,128,32,0,64,0,151,2,128,0,6,2,1,64,1,0,64,3,151,2,128,192,1,3,1,0,1,2,128,192,160,2,129,0,1,3,0,128,1,2,129,0,172,2,1,64,1,2,129,0,1,3,0,64,1,2,129,64,180,2,191,250,152,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,6,0,8,107,105,110,100,95,111,102,63,0,0,5,70,108,111,97,116,0,0,4,116,111,95,102,0,0,4,99,97,108,108,0,0,1,43,0,0,2,60,61,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,59,0,1,0,3,0,0,0,4,0,128,0,6,1,0,0,145,0,128,0,160,1,0,0,41,0,0,0,0,0,0,0,2,0,7,105,110,99,108,117,100,101,0,0,10,67,111,109,112,97,114,97,98,108,101,0,0,0,0,104,0,1,0,2,0,0,0,14,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,4,0,5,112,114,105,110,116,0,0,4,112,117,116,115,0,0,1,112,0,0,6,112,114,105,110,116,102,0,0,0,0,106,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,19,112,114,105,110,116,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,105,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,18,112,117,116,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,102,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,15,112,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,107,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,20,112,114,105,110,116,102,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,47,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,1,89,0,4,0,7,0,0,0,52,0,0,0,166,2,0,0,6,2,0,0,32,1,1,0,1,2,0,128,1,2,128,1,4,2,0,64,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,2,17,3,0,0,61,2,0,193,32,2,0,0,6,2,1,64,32,1,129,0,1,2,0,128,1,2,128,192,1,2,1,128,160,2,191,255,131,2,1,192,181,2,64,1,25,0,0,0,6,0,0,0,41,0,64,3,23,2,0,64,1,2,128,128,1,2,2,0,160,2,0,128,1,2,0,128,32,1,1,0,1,2,0,128,1,2,128,192,1,2,1,128,160,2,191,255,131,2,2,64,179,2,63,250,24,2,0,0,6,2,2,128,32,2,2,192,32,2,64,2,153,2,0,128,1,2,128,192,1,2,1,128,160,2,191,255,131,2,3,0,178,2,64,1,153,2,0,64,1,2,128,128,1,2,2,0,160,0,0,0,6,0,0,0,41,0,0,0,1,16,0,13,99,97,110,39,116,32,105,116,101,114,97,116,101,0,0,0,13,0,5,102,105,114,115,116,0,0,11,114,101,115,112,111,110,100,95,116,111,63,0,0,4,115,117,99,99,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,4,108,97,115,116,0,0,3,60,61,62,0,0,1,62,0,0,4,99,97,108,108,0,0,1,60,0,0,12,101,120,99,108,117,100,101,95,101,110,100,63,0,0,1,33,0,0,2,61,61,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,59,0,1,0,3,0,0,0,4,0,128,0,6,1,0,0,145,0,128,0,160,1,0,0,41,0,0,0,0,0,0,0,2,0,7,105,110,99,108,117,100,101,0,0,10,69,110,117,109,101,114,97,98,108,101,0,0,0,0,213,0,1,0,2,0,0,0,29,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,128,0,72,1,0,12,192,0,129,64,70,0,128,0,72,1,0,14,192,0,129,128,70,0,128,0,72,1,0,16,192,0,129,192,70,0,128,0,72,1,0,18,192,0,130,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,9,0,9,101,97,99,104,95,108,105,110,101,0,0,4,103,115,117,98,0,0,5,103,115,117,98,33,0,0,4,115,99,97,110,0,0,3,115,117,98,0,0,4,115,117,98,33,0,0,9,101,97,99,104,95,99,104,97,114,0,0,9,101,97,99,104,95,98,121,116,101,0,0,3,91,93,61,0,0,0,0,207,0,4,0,9,0,0,0,37,0,0,0,166,1,63,255,131,0,64,6,23,2,0,64,1,2,128,0,6,3,0,128,1,3,128,192,1,3,128,128,173,4,0,128,1,3,128,192,174,2,128,65,32,2,0,0,160,2,0,192,1,2,0,128,173,1,1,0,1,2,0,0,6,2,192,4,131,3,0,128,1,2,1,1,32,1,129,0,1,2,63,247,24,2,0,0,6,2,1,64,32,2,128,128,1,2,1,128,181,2,64,4,153,2,0,64,1,2,128,0,6,3,0,128,1,3,128,0,6,3,129,64,32,4,0,128,1,3,128,192,174,2,128,65,32,2,0,0,160,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,7,0,4,99,97,108,108,0,0,2,91,93,0,0,1,43,0,0,1,45,0,0,5,105,110,100,101,120,0,0,4,115,105,122,101,0,0,1,62,0,0,0,1,23,0,3,0,7,0,0,0,42,0,8,0,166,1,128,64,1,1,128,0,32,2,64,0,131,1,128,64,178,1,192,5,153,1,128,0,6,2,0,64,1,2,191,255,131,2,0,192,160,2,191,255,3,1,128,129,32,2,0,64,1,2,192,0,3,2,0,192,160,1,129,0,160,0,64,12,23,1,128,64,1,1,128,0,32,2,64,0,3,1,128,64,178,1,192,0,153,1,128,128,1,1,192,6,153,1,128,0,6,2,0,64,1,2,191,255,131,2,0,192,160,2,191,255,3,1,128,129,32,2,0,128,1,2,128,64,1,3,63,255,131,2,128,192,160,2,1,64,160,1,129,0,160,0,64,2,23,1,128,0,6,2,0,3,145,2,128,0,61,1,129,129,32,1,128,0,41,0,0,0,1,16,0,25,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,8,0,4,115,105,122,101,0,0,2,61,61,0,0,5,115,112,108,105,116,0,0,2,91,93,0,0,4,106,111,105,110,0,0,4,99,97,108,108,0,0,5,114,97,105,115,101,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,0,118,0,4,0,7,0,0,0,19,0,8,0,166,2,0,0,6,2,129,64,55,3,0,64,1,2,129,128,56,3,0,128,1,2,0,63,161,1,129,0,1,2,0,192,1,2,128,0,6,2,0,64,160,2,64,2,153,2,0,0,6,2,128,192,1,2,0,128,160,2,0,0,6,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,3,0,4,103,115,117,98,0,0,2,33,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,160,0,3,0,6,0,0,0,12,2,0,0,166,1,128,0,17,2,0,1,4,1,128,64,160,1,192,1,25,1,128,0,5,0,64,2,23,1,128,0,6,2,0,2,17,2,128,0,61,1,128,193,32,1,128,0,41,0,0,0,1,16,0,24,115,99,97,110,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,40,121,101,116,41,0,0,0,5,0,6,79,98,106,101,99,116,0,0,14,99,111,110,115,116,95,100,101,102,105,110,101,100,63,0,0,6,82,101,103,101,120,112,0,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,0,1,23,0,3,0,7,0,0,0,42,0,8,0,166,1,128,64,1,1,128,0,32,2,64,0,131,1,128,64,178,1,192,5,153,1,128,0,6,2,0,64,1,2,191,255,131,2,0,192,160,2,192,0,131,1,128,129,32,2,0,64,1,2,192,0,3,2,0,192,160,1,129,0,160,0,64,12,23,1,128,64,1,1,128,0,32,2,64,0,3,1,128,64,178,1,192,0,153,1,128,128,1,1,192,6,153,1,128,0,6,2,0,64,1,2,191,255,131,2,0,192,160,2,192,0,131,1,128,129,32,2,0,128,1,2,128,64,1,3,63,255,131,2,128,192,160,2,1,64,160,1,129,0,160,0,64,2,23,1,128,0,6,2,0,3,145,2,128,0,61,1,129,129,32,1,128,0,41,0,0,0,1,16,0,25,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,8,0,4,115,105,122,101,0,0,2,61,61,0,0,5,115,112,108,105,116,0,0,2,91,93,0,0,4,106,111,105,110,0,0,4,99,97,108,108,0,0,5,114,97,105,115,101,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,0,117,0,4,0,7,0,0,0,19,0,8,0,166,2,0,0,6,2,129,64,55,3,0,64,1,2,129,128,56,3,0,128,1,2,0,63,161,1,129,0,1,2,0,192,1,2,128,0,6,2,0,64,160,2,64,2,153,2,0,0,6,2,128,192,1,2,0,128,160,2,0,0,6,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,3,0,3,115,117,98,0,0,2,33,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,119,0,3,0,6,0,0,0,18,0,0,0,166,1,63,255,131,0,64,4,23,1,128,64,1,2,0,0,6,2,128,128,1,2,0,64,160,1,128,0,160,1,128,128,1,1,128,128,173,1,0,192,1,1,128,128,1,2,0,0,6,2,1,0,32,1,128,192,179,1,191,249,152,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,5,0,4,99,97,108,108,0,0,2,91,93,0,0,1,43,0,0,1,60,0,0,4,115,105,122,101,0,0,0,0,139,0,4,0,7,0,0,0,21,0,0,0,166,2,0,0,6,2,0,0,32,1,1,0,1,1,191,255,131,0,64,4,23,2,0,64,1,2,128,128,1,3,0,192,1,2,128,128,160,2,0,64,160,2,0,192,1,2,0,192,173,1,129,0,1,2,0,192,1,2,128,128,1,2,129,64,32,2,1,0,179,2,63,249,152,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,6,0,5,98,121,116,101,115,0,0,4,99,97,108,108,0,0,2,91,93,0,0,1,43,0,0,1,60,0,0,4,115,105,122,101,0,0,0,0,137,0,6,0,10,0,0,0,22,4,0,0,38,3,0,0,6,3,191,255,131,4,0,64,1,3,0,1,32,2,1,128,1,3,0,0,6,3,128,64,1,3,128,64,173,4,63,255,3,3,129,192,65,3,0,0,160,2,129,128,1,3,0,0,6,3,129,0,1,4,0,128,1,4,129,64,1,3,129,193,183,4,0,0,61,3,128,192,160,3,0,128,160,3,0,0,41,0,0,0,1,16,0,0,0,0,0,4,0,2,91,93,0,0,1,43,0,0,7,114,101,112,108,97,99,101,0,0,4,106,111,105,110,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,59,0,1,0,3,0,0,0,4,0,128,0,6,1,0,0,145,0,128,0,160,1,0,0,41,0,0,0,0,0,0,0,2,0,7,105,110,99,108,117,100,101,0,0,10,67,111,109,112,97,114,97,98,108,101,0,69,78,68,0,0,0,0,8,0,0,20,171,1,0,86,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,14,0,0,0,75,0,0,0,17,0,0,0,18,0,0,0,21,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,40,0,0,0,43,0,0,0,44,0,0,0,47,0,0,0,50,0,0,0,56,0,0,0,59,0,0,0,63,0,0,0,64,0,0,0,70,0,0,0,80,0,0,0,78,0,0,0,118,0,0,0,119,0,0,0,138,0,0,0,159,0,0,0,174,0,0,0,218,0,0,0,219,0,0,0,221,0,0,0,16,1,0,0,34,1,0,0,40,1,0,0,116,1,0,0,60,1,0,0,128,1,0,0,80,1,0,0,101,1,0,0,141,1,0,0,191,1,0,0,236,1,0,0,25,2,0,0,70,2,0,0,115,2,0,0,116,2,0,0,117,2,0,0,118,2,0,0,127,2,0,0,128,2,0,0,152,2,0,0,153,2,0,0,154,2,0,0,158,2,0,0,183,2,0,0,164,2,0,0,165,2,0,0,169,2,0,0,173,2,0,0,178,2,0,0,179,2,0,0,180,2,0,0,184,2,0,0,185,2,0,0,192,2,0,0,110,111,32,116,97,114,103,101,116,32,99,108,97,115,115,32,111,114,32,109,111,100,117,108,101,0,0,0,115,117,112,101,114,32,99,97,108,108,101,100,32,111,117,116,115,105,100,101,32,111,102,32,109,101,116,104,111,100,0,0,0,0,0,0,223,176,8,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,129,1,0,164,128,1,0,156,127,1,0,164,126,1,0,236,125,1,0,236,124,1,0,96,124,1,0,28,124,1,0,164,123,1,0,32,123,1,0,228,121,1,0,132,121,1,0,0,0,0,0,255,1,0,0,117,110,101,120,112,101,99,116,101,100,32,0,6,5,5,0,114,101,116,117,114,110,0,98,114,101,97,107,0,0,121,105,101,108,100,0,0,0,0,0,99,111,100,101,103,101,110,32,101,114,114,111,114,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,114,101,112,32,108,111,97,100,32,101,114,114,111,114,0,40,46,46,46,32,46,46,46,32,46,46,46,41,0,40,46,46,46,32,46,46,32,46,46,46,41,0,0,13,0,0,0,12,0,0,0,93,0,0,0,44,32,0,0,91,0,0,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,14,51,16,8,11,13,51,51,51,51,10,51,13,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,11,51,13,1,26,4,1,8,28,51,23,51,1,1,27,5,19,21,51,8,3,3,11,51,21,24,16,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,0,0,0,223,176,8,153,82,73,84,69,48,48,48,49,111,233,0,0,1,1,77,65,84,90,48,48,48,48,73,82,69,80,0,0,0,227,48,48,48,48,0,4,0,0,0,0,0,49,0,1,0,3,0,0,0,5,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,6,83,121,109,98,111,108,0,0,0,0,50,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,7,116,111,95,112,114,111,99,0,0,0,0,53,0,2,0,4,0,0,0,5,0,0,0,38,1,0,0,17,1,128,3,64,1,0,64,33,1,0,0,41,0,0,0,0,0,0,0,2,0,4,80,114,111,99,0,0,3,110,101,119,0,0,0,0,59,0,4,0,7,0,0,0,8,2,8,0,38,2,0,64,1,2,128,0,6,2,129,64,183,3,0,128,1,2,129,128,56,2,0,63,160,2,0,0,41,0,0,0,0,0,0,0,1,0,4,115,101,110,100,0,69,78,68,0,0,0,0,8,0,0,0,82,73,84,69,48,48,48,49,121,204,0,0,2,192,77,65,84,90,48,48,48,48,73,82,69,80,0,0,2,162,48,48,48,48,0,8,0,0,0,0,0,99,0,1,0,3,0,0,0,11,0,128,0,17,1,0,1,4,0,128,64,160,0,192,2,153,0,128,0,5,1,0,0,5,0,128,128,67,0,128,0,197,0,64,0,151,0,128,0,5,0,0,0,74,0,0,0,0,0,0,0,3,0,6,79,98,106,101,99,116,0,0,14,99,111,110,115,116,95,100,101,102,105,110,101,100,63,0,0,6,83,116,114,117,99,116,0,0,0,0,92,0,1,0,2,0,0,0,11,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,6,192,0,128,64,70,0,128,0,72,1,0,10,192,0,128,128,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,3,0,4,101,97,99,104,0,0,9,101,97,99,104,95,112,97,105,114,0,0,6,115,101,108,101,99,116,0,0,0,0,77,0,2,0,4,0,0,0,8,0,0,0,166,1,0,0,6,1,0,0,32,1,0,64,32,1,128,3,64,1,0,128,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,3,0,5,99,108,97,115,115,0,0,7,109,101,109,98,101,114,115,0,0,4,101,97,99,104,0,0,0,0,60,0,3,0,6,0,0,0,7,2,0,0,38,1,128,64,21,2,0,0,6,2,128,64,1,2,0,64,160,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,2,91,93,0,0,0,0,77,0,2,0,4,0,0,0,8,0,0,0,166,1,0,0,6,1,0,0,32,1,0,64,32,1,128,3,64,1,0,128,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,3,0,5,99,108,97,115,115,0,0,7,109,101,109,98,101,114,115,0,0,4,101,97,99,104,0,0,0,0,77,0,3,0,7,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,2,0,64,32,2,128,0,6,3,0,64,1,2,128,128,160,1,128,1,32,1,128,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,6,116,111,95,115,121,109,0,0,2,91,93,0,0,0,0,77,0,3,0,5,0,0,0,8,0,0,0,166,1,0,192,55,1,128,0,6,1,128,0,32,1,128,64,32,2,0,3,64,1,128,128,33,1,0,0,41,0,0,0,0,0,0,0,3,0,5,99,108,97,115,115,0,0,7,109,101,109,98,101,114,115,0,0,4,101,97,99,104,0,0,0,0,99,0,4,0,6,0,0,0,15,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,192,1,2,0,64,160,2,64,2,25,2,0,128,21,2,128,192,1,2,0,128,160,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,4,99,97,108,108,0,0,4,112,117,115,104,0,69,78,68,0,0,0,0,8,82,73,84,69,48,48,48,49,170,180,0,0,5,22,77,65,84,90,48,48,48,48,73,82,69,80,0,0,4,248,48,48,48,48,0,9,0,0,0,0,0,49,0,1,0,3,0,0,0,5,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,6,83,116,114,105,110,103,0,0,0,0,177,0,1,0,2,0,0,0,23,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,128,0,72,1,0,12,192,0,129,64,70,0,128,0,72,1,0,14,192,0,129,128,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,7,0,6,108,115,116,114,105,112,0,0,6,114,115,116,114,105,112,0,0,5,115,116,114,105,112,0,0,7,108,115,116,114,105,112,33,0,0,7,114,115,116,114,105,112,33,0,0,6,115,116,114,105,112,33,0,0,7,99,97,115,101])
.concat([99,109,112,0,0,0,0,201,0,4,0,7,0,0,0,32,0,0,0,38,1,63,255,131,2,0,0,6,2,0,0,32,2,0,64,175,1,129,0,1,0,64,1,151,2,0,128,1,2,0,128,173,1,1,0,1,2,0,0,61,2,128,0,6,3,0,128,1,2,129,0,160,2,0,192,160,2,64,1,153,2,0,128,1,2,128,192,1,2,1,64,180,2,63,249,152,2,0,192,1,2,191,255,131,2,1,128,182,2,64,3,25,2,0,0,6,2,128,128,1,3,0,192,1,2,129,64,65,2,1,0,160,0,64,0,151,2,0,0,189,2,0,0,41,0,0,0,2,16,0,6,32,12,10,13,9,11,16,0,0,0,0,0,7,0,4,115,105,122,101,0,0,1,45,0,0,1,43,0,0,8,105,110,99,108,117,100,101,63,0,0,2,91,93,0,0,2,60,61,0,0,2,62,61,0,0,0,0,198,0,4,0,7,0,0,0,32,0,0,0,38,1,63,255,131,2,0,0,6,2,0,0,32,2,0,64,175,1,129,0,1,0,64,1,151,2,0,192,1,2,0,64,175,1,129,0,1,2,0,0,61,2,128,0,6,3,0,192,1,2,128,192,160,2,0,128,160,2,64,1,153,2,0,128,1,2,128,192,1,2,1,0,180,2,63,249,152,2,0,192,1,2,191,255,131,2,1,64,182,2,64,3,25,2,0,0,6,2,128,128,1,3,0,192,1,2,129,64,65,2,0,192,160,0,64,0,151,2,0,0,189,2,0,0,41,0,0,0,2,16,0,7,32,12,10,13,9,11,0,16,0,0,0,0,0,6,0,4,115,105,122,101,0,0,1,45,0,0,8,105,110,99,108,117,100,101,63,0,0,2,91,93,0,0,2,60,61,0,0,2,62,61,0,0,0,1,11,0,4,0,7,0,0,0,46,0,0,0,38,1,63,255,131,2,0,0,6,2,0,0,32,2,0,64,175,1,129,0,1,0,64,1,151,2,0,128,1,2,0,128,173,1,1,0,1,2,0,0,61,2,128,0,6,3,0,128,1,2,129,0,160,2,0,192,160,2,64,1,153,2,0,128,1,2,128,192,1,2,1,64,180,2,63,249,152,0,64,1,151,2,0,192,1,2,0,64,175,1,129,0,1,2,0,0,189,2,128,0,6,3,0,192,1,2,129,0,160,2,0,192,160,2,64,1,153,2,0,128,1,2,128,192,1,2,1,64,180,2,63,249,152,2,0,192,1,2,191,255,131,2,1,128,182,2,64,3,25,2,0,0,6,2,128,128,1,3,0,192,1,2,129,64,65,2,1,0,160,0,64,0,151,2,0,1,61,2,0,0,41,0,0,0,3,16,0,6,32,12,10,13,9,11,16,0,7,32,12,10,13,9,11,0,16,0,0,0,0,0,7,0,4,115,105,122,101,0,0,1,45,0,0,1,43,0,0,8,105,110,99,108,117,100,101,63,0,0,2,91,93,0,0,2,60,61,0,0,2,62,61,0,0,0,0,100,0,3,0,5,0,0,0,14,0,0,0,38,1,128,0,6,1,128,0,32,1,0,192,1,1,128,128,1,2,0,0,6,1,128,64,178,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,6,2,0,128,1,1,128,128,160,1,128,0,41,0,0,0,0,0,0,0,3,0,6,108,115,116,114,105,112,0,0,2,61,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,100,0,3,0,5,0,0,0,14,0,0,0,38,1,128,0,6,1,128,0,32,1,0,192,1,1,128,128,1,2,0,0,6,1,128,64,178,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,6,2,0,128,1,1,128,128,160,1,128,0,41,0,0,0,0,0,0,0,3,0,6,114,115,116,114,105,112,0,0,2,61,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,99,0,3,0,5,0,0,0,14,0,0,0,38,1,128,0,6,1,128,0,32,1,0,192,1,1,128,128,1,2,0,0,6,1,128,64,178,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,6,2,0,128,1,1,128,128,160,1,128,0,41,0,0,0,0,0,0,0,3,0,5,115,116,114,105,112,0,0,2,61,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,65,0,3,0,5,0,0,0,7,2,0,0,38,1,128,0,6,1,128,0,32,2,0,64,1,2,0,0,32,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,8,100,111,119,110,99,97,115,101,0,0,3,60,61,62,0,69,78,68,0,0,0,0,8,0,0,82,73,84,69,48,48,48,49,191,38,0,0,3,222,77,65,84,90,48,48,48,48,73,82,69,80,0,0,3,192,48,48,48,48,0,9,0,0,0,0,0,47,0,1,0,3,0,0,0,5,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,4,80,114,111,99,0,0,0,0,108,0,1,0,2,0,0,0,14,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,4,0,3,61,61,61,0,0,5,121,105,101,108,100,0,0,7,116,111,95,112,114,111,99,0,0,5,99,117,114,114,121,0,0,0,0,55,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,55,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,32,0,2,0,3,0,0,0,3,0,0,0,38,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,0,0,0,1,134,0,7,0,12,0,0,0,60,0,16,0,38,0,64,0,151,0,64,1,151,3,128,0,6,3,128,0,32,0,129,192,1,3,128,0,6,4,0,3,64,3,128,64,33,1,129,192,1,3,128,192,1,4,0,64,1,3,128,128,160,0,129,192,1,3,128,0,6,3,128,192,32,3,192,17,153,3,128,0,6,3,128,0,32,2,1,192,1,3,129,0,1,4,63,255,131,3,129,0,182,3,192,1,153,3,128,64,1,4,1,0,1,3,129,64,160,3,192,4,152,3,129,0,1,4,63,255,131,3,129,128,179,3,192,2,153,3,128,192,1,4,1,0,1,3,128,128,160,4,0,64,1,3,129,192,181,3,192,7,25,3,128,0,6,4,0,4,145,4,128,0,61,5,0,64,1,4,130,128,62,5,0,0,189,4,130,128,62,5,0,192,1,5,129,0,1,5,0,128,160,4,130,128,62,5,0,1,61,4,130,128,62,3,130,1,32,2,128,0,6,3,128,0,6,4,0,5,64,3,130,128,33,3,1,192,1,3,129,128,1,3,130,192,32,3,128,0,41,0,0,0,3,16,0,27,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,16,0,5,32,102,111,114,32,16,0,1,41,0,0,0,12,0,5,97,114,105,116,121,0,0,6,108,97,109,98,100,97,0,0,2,91,93,0,0,7,108,97,109,98,100,97,63,0,0,2,62,61,0,0,2,33,61,0,0,1,60,0,0,1,62,0,0,5,114,97,105,115,101,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,4,112,114,111,99,0,0,4,99,97,108,108,0,0,0,0,77,0,3,0,5,0,0,0,11,2,0,0,38,1,128,64,1,2,63,255,131,1,128,0,179,1,192,2,25,1,128,64,1,1,128,64,32,1,128,128,175,0,64,0,151,1,128,64,1,1,128,0,41,0,0,0,0,0,0,0,3,0,1,60,0,0,2,45,64,0,0,1,45,0,0,0,0,59,0,3,0,5,0,0,0,8,0,16,0,38,0,64,0,151,0,64,0,151,0,128,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,112,114,111,99,0,0,0,0,121,0,4,0,7,0,0,0,20,0,8,0,38,2,0,64,21,2,128,64,1,2,0,0,172,1,129,0,1,2,0,192,1,2,0,64,32,2,128,64,149,2,0,128,182,2,64,3,25,2,1,64,149,2,129,64,55,3,0,192,1,2,129,128,56,2,0,255,160,0,64,1,151,2,1,128,149,2,128,192,1,2,0,192,160,2,0,0,41,0,0,0,0,0,0,0,4,0,1,43,0,0,4,115,105,122,101,0,0,2,62,61,0,0,2,91,93,0,69,78,68,0,0,0,0,8,0,0,82,73,84,69,48,48,48,49,95,93,0,0,4,103,77,65,84,90,48,48,48,48,73,82,69,80,0,0,4,73,48,48,48,48,0,8,0,0,0,0,0,45,0,1,0,2,0,0,0,4,0,128,0,5,0,128,0,68,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,6,75,101,114,110,101,108,0,0,0,0,185,0,1,0,3,0,0,0,26,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,1,145,1,0,2,132,0,129,0,160,0,192,2,153,0,128,0,72,1,0,8,192,0,129,128,70,0,128,0,5,0,64,3,151,0,128,0,72,1,0,10,192,0,129,128,70,0,128,0,72,1,0,12,192,0,129,64,70,0,128,0,5,1,0,0,41,0,0,0,0,0,0,0,7,0,5,112,114,105,110,116,0,0,4,112,117,116,115,0,0,1,112,0,0,6,75,101,114,110,101,108,0,0,11,114,101,115,112,111,110,100,95,116,111,63,0,0,7,115,112,114,105,110,116,102,0,0,6,112,114,105,110,116,102,0,0,0,0,146,0,5,0,8,0,0,0,21,0,8,0,38,1,191,255,131,2,128,64,1,2,128,0,32,2,1,64,1,0,64,4,151,2,128,0,6,3,0,64,1,3,128,192,1,3,0,128,160,3,0,192,32,2,128,64,160,2,128,192,1,2,129,0,173,1,129,64,1,2,128,192,1,3,1,0,1,2,129,64,179,2,191,249,152,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,6,0,4,115,105,122,101,0,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,0,2,91,93,0,0,4,116,111,95,115,0,0,1,43,0,0,1,60,0,0,0,0,232,0,6,0,8,0,0,0,39,0,8,0,38,1,191,255,131,3,0,64,1,3,0,0,32,2,1,128,1,0,64,10,23,3,0,64,1,3,128,192,1,3,0,64,160,3,0,128,32,2,129,128,1,3,0,0,6,3,129,64,1,3,0,192,160,3,1,64,1,3,191,255,3,3,0,64,160,3,128,0,61,3,1,0,160,3,64,1,153,3,0,0,6,3,128,0,61,3,0,192,160,3,0,192,1,3,1,64,173,1,129,128,1,3,0,192,1,3,129,0,1,3,1,128,179,3,63,244,24,3,1,0,1,3,191,255,131,3,1,192,178,3,64,1,153,3,0,0,6,3,128,0,61,3,0,192,160,0,0,0,5,0,0,0,41,0,0,0,1,16,0,1,10,0,0,0,8,0,4,115,105,122,101,0,0,2,91,93,0,0,4,116,111,95,115,0,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,0,2,33,61,0,0,1,43,0,0,1,60,0,0,2,61,61,0,0,0,0,173,0,5,0,8,0,0,0,26,0,8,0,38,1,191,255,131,2,128,64,1,2,128,0,32,2,1,64,1,0,64,6,23,2,128,0,6,3,0,64,1,3,128,192,1,3,0,128,160,3,0,192,32,2,128,64,160,2,128,0,6,3,0,0,61,2,128,64,160,2,128,192,1,2,129,0,173,1,129,64,1,2,128,192,1,3,1,0,1,2,129,64,179,2,191,248,24,2,128,64,1,3,63,255,131,2,128,128,160,2,128,0,41,0,0,0,1,16,0,1,10,0,0,0,6,0,4,115,105,122,101,0,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,0,2,91,93,0,0,7,105,110,115,112,101,99,116,0,0,1,43,0,0,1,60,0,0,0,0,85,0,3,0,7,0,0,0,10,0,8,0,38,1,128,0,6,2,0,0,6,2,129,64,55,3,0,64,1,2,129,128,56,2,0,127,160,1,128,0,160,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,2,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,0,7,115,112,114,105,110,116,102,0,0,0,0,107,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,20,112,114,105,110,116,102,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,108,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,21,115,112,114,105,110,116,102,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,69,78,68,0,0,0,0,8,0,82,73,84,69,48,48,48,49,152,139,0,0,11,33,77,65,84,90,48,48,48,48,73,82,69,80,0,0,11,3,48,48,48,48,0,27,0,0,0,0,0,117,0,1,0,3,0,0,0,16,0,128,0,5,0,128,0,68,0,128,0,197,0,128,0,5,1,0,0,5,0,128,64,67,0,128,9,197,0,128,0,5,1,0,0,5,0,128,128,67,0,128,10,197,0,128,0,5,1,0,0,5,0,128,192,67,0,128,12,69,0,0,0,74,0,0,0,0,0,0,0,4,0,7,77,114,117,98,121,74,115,0,0,4,80,114,111,99,0,0,4,72,97,115,104,0,0,6,83,121,109,98,111,108,0,0,0,0,179,0,1,0,3,0,0,0,23,0,128,64,63,0,128,0,16,0,128,0,6,0,128,64,71,1,0,2,192,0,128,64,70,0,128,0,6,0,128,64,71,1,0,4,192,0,128,128,70,0,128,0,5,1,0,0,5,0,128,192,67,0,128,1,197,0,128,0,5,1,0,0,5,0,129,0,67,0,128,4,197,0,128,0,5,1,0,0,5,0,129,64,67,0,128,8,69,1,0,0,41,0,0,0,0,0,0,0,6,0,7,64,64,112,114,111,99,115,0,0,8,97,100,100,95,112,114,111,99,0,0,9,99,97,108,108,95,112,114,111,99,0,0,8,74,115,79,98,106,101,99,116,0,0,10,74,115,70,117,110,99,116,105,111,110,0,0,7,74,115,65,114,114,97,121,0,0,0,0,111,0,4,0,8,0,0,0,16,2,16,0,38,0,64,0,151,0,64,0,151,1,63,255,3,2,0,0,15,2,128,64,1,2,0,64,160,2,64,1,25,2,0,0,5,0,64,2,151,2,0,128,1,2,128,0,15,3,0,64,1,3,129,0,1,2,128,129,32,2,0,0,41,0,0,0,0,0,0,0,3,0,7,64,64,112,114,111,99,115,0,0,8,104,97,115,95,107,101,121,63,0,0,3,91,93,61,0,0,0,0,203,0,4,0,8,0,0,0,32,2,0,0,38,2,0,0,15,2,128,64,1,2,0,64,160,2,64,12,153,2,0,0,15,2,128,64,1,2,0,128,160,1,129,0,1,2,0,192,1,2,191,255,3,2,0,192,178,2,64,1,25,0,0,0,5,0,0,0,41,2,0,192,1,2,192,0,3,2,1,0,180,2,64,2,25,2,0,0,15,2,128,64,1,2,1,64,160,0,64,3,23,2,0,192,1,2,1,128,175,2,128,0,15,3,0,64,1,3,129,0,1,2,129,193,32,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,8,0,7,64,64,112,114,111,99,115,0,0,8,104,97,115,95,107,101,121,63,0,0,2,91,93,0,0,2,61,61,0,0,2,60,61,0,0,6,100,101,108,101,116,101,0,0,1,45,0,0,3,91,93,61,0,0,0,0,151,0,1,0,2,0,0,0,17,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,5,0,4,99,97,108,108,0,0,8,99,97,108,108,95,110,101,119,0,0,14,99,97,108,108,95,119,105,116,104,95,116,104,105,115,0,0,8,103,101,116,95,102,117,110,99,0,0,14,109,101,116,104,111,100,95,109,105,115,115,105,110,103,0,0,0,0,76,0,4,0,7,0,0,0,9,2,8,0,38,2,0,0,6,2,128,64,1,2,0,0,160,2,129,64,55,3,0,128,1,2,129,128,56,2,0,127,160,2,0,0,41,0,0,0,0,0,0,0,2,0,8,103,101,116,95,102,117,110,99,0,0,6,105,110,118,111,107,101,0,0,0,0,80,0,4,0,7,0,0,0,9,2,8,0,38,2,0,0,6,2,128,64,1,2,0,0,160,2,129,64,55,3,0,128,1,2,129,128,56,2,0,127,160,2,0,0,41,0,0,0,0,0,0,0,2,0,8,103,101,116,95,102,117,110,99,0,0,10,105,110,118,111,107,101,95,110,101,119,0,0,0,0,90,0,5,0,8,0,0,0,10,4,8,0,38,2,128,0,6,3,0,64,1,2,128,0,160,3,0,128,1,3,1,128,183,3,128,192,1,3,1,192,56,2,128,127,160,2,128,0,41,0,0,0,0,0,0,0,2,0,8,103,101,116,95,102,117,110,99,0,0,16,105,110,118,111,107,101,95,119,105,116,104,95,116,104,105,115,0,0,0,0,140,0,4,0,8,0,0,0,17,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,64,0,153,0,64,4,23,2,0,0,6,2,128,1,17,3,0,0,61,3,128,64,1,3,1,192,62,3,128,0,189,3,1,192,62,2,0,65,32,1,128,0,41,0,0,0,2,16,0,0,16,0,16,32,100,111,101,115,32,110,111,116,32,101,120,105,115,116,33,0,0,0,3,0,3,103,101,116,0,0,5,114,97,105,115,101,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,1,13,0,4,0,8,0,0,0,44,2,8,0,166,2,0,64,1,2,0,0,32,0,129,0,1,2,0,64,1,2,191,255,3,2,0,64,160,2,128,0,61,2,0,128,178,2,64,5,153,2,0,0,6,2,128,64,1,3,63,255,131,3,191,254,131,3,1,128,65,2,128,64,160,2,129,64,183,3,0,128,1,2,129,128,56,2,0,255,160,0,64,11,23,2,0,192,1,2,64,2,153,2,0,128,1,2,128,2,145,3,0,192,1,2,129,128,33,2,1,0,160,2,0,128,1,2,1,192,32,2,191,255,131,2,2,0,181,2,64,3,153,2,0,0,6,2,128,64,1,2,129,64,183,3,0,128,1,2,129,128,56,2,2,127,160,2,0,0,41,2,0,0,6,2,128,64,1,2,2,128,160,2,0,0,41,0,0,0,1,16,0,1,61,0,0,0,11,0,4,116,111,95,115,0,0,2,91,93,0,0,2,61,61,0,0,3,115,101,116,0,0,4,112,117,115,104,0,0,4,80,114,111,99,0,0,3,110,101,119,0,0,6,108,101,110,103,116,104,0,0,1,62,0,0,4,99,97,108,108,0,0,3,103,101,116,0,0,0,0,218,0,1,0,3,0,0,0,23,0,128,0,6,1,0,0,132,0,128,0,160,0,128,0,72,1,0,2,192,0,128,128,70,0,128,0,72,1,0,4,192,0,128,192,70,0,128,0,72,1,0,6,192,0,129,0,70,0,128,0,72,1,0,8,192,0,129,64,70,0,128,0,72,1,0,10,192,0,129,128,70,0,128,0,72,1,0,12,192,0,129,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,8,0,11,97,116,116,114,95,114,101,97,100,101,114,0,0,13,112,97,114,101,110,116,95,111,98,106,101,99,116,0,0,10,105,110,105,116,105,97,108,105,122,101,0,0,6,105,110,118,111,107,101,0,0,10,105,110,118,111,107,101,95,110,101,119,0,0,16,105,110,118,111,107,101,95,119,105,116,104,95,116,104,105,115,0,0,2,91,93,0,0,14,109,101,116,104,111,100,95,109,105,115,115,105,110,103,0,0,0,0,61,0,4,0,6,0,0,0,6,4,0,0,38,2,128,64,1,3,0,0,5,2,0,0,164,1,0,0,14,1,0,0,41,0,0,0,0,0,0,0,1,0,14,64,112,97,114,101,110,116,95,111,98,106,101,99,116,0,0,0,0,70,0,3,0,6,0,0,0,8,0,8,0,38,1,128,0,6,2,63,255,131,2,1,0,183,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,0,0,0,0,0,0,0,1,0,15,105,110,118,111,107,101,95,105,110,116,101,114,110,97,108,0,0,0,0,70,0,3,0,6,0,0,0,8,0,8,0,38,1,128,0,6,2,64,0,3,2,1,0,183,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,0,0,0,0,0,0,0,1,0,15,105,110,118,111,107,101,95,105,110,116,101,114,110,97,108,0,0,0,0,74,0,4,0,7,0,0,0,9,2,8,0,38,2,0,0,6,2,192,0,131,3,0,64,1,2,129,65,55,3,0,128,1,2,129,128,56,2,0,63,160,2,0,0,41,0,0,0,0,0,0,0,1,0,15,105,110,118,111,107,101,95,105,110,116,101,114,110,97,108,0,0,0,0,57,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,0,0,0,0,0,0,0,1,0,6,105,110,118,111,107,101,0,0,0,0,72,0,4,0,7,0,0,0,9,2,8,0,38,2,0,0,6,2,128,64,1,2,128,64,32,2,129,64,183,3,0,128,1,2,129,128,56,2,0,63,160,2,0,0,41,0,0,0,0,0,0,0,2,0,6,105,110,118,111,107,101,0,0,4,116,111,95,115,0,0,0,0,47,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,133,0,4,0,7,0,0,0,21,0,0,0,166,2,63,255,131,2,128,0,6,2,128,0,32,1,1,0,1,1,129,64,1,0,64,4,23,2,0,64,1,2,128,0,6,3,0,128,1,2,128,128,160,2,0,64,160,2,0,128,1,2,0,192,173,1,1,0,1,2,0,128,1,2,128,192,1,2,1,0,179,2,63,250,24,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,5,0,6,108,101,110,103,116,104,0,0,4,99,97,108,108,0,0,2,91,93,0,0,1,43,0,0,1,60,0,0,0,0,56,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,13,114,101,108,101,97,115,101,95,97,102,116,101,114,0,0,0,0,69,0,3,0,6,0,0,0,7,2,0,0,38,1,128,0,17,2,0,0,6,2,128,64,1,1,128,65,32,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,2,0,7,77,114,117,98,121,74,115,0,0,8,97,100,100,95,112,114,111,99,0,0,0,0,53,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,10,116,111,74,115,79,98,106,101,99,116,0,0,0,0,93,0,3,0,5,0,0,0,9,0,0,0,38,1,128,0,145,1,128,0,19,1,128,128,32,1,0,192,1,1,128,0,6,2,0,3,64,1,128,192,33,1,0,0,41,0,0,0,0,0,0,0,4,0,8,74,115,79,98,106,101,99,116,0,0,7,77,114,117,98,121,74,115,0,0,6,99,114,101,97,116,101,0,0,4,101,97,99,104,0,0,0,0,54,0,4,0,8,0,0,0,7,4,0,0,38,2,0,128,1,2,128,128,21,3,0,64,1,3,129,0,1,2,128,1,32,2,0,0,41,0,0,0,0,0,0,0,1,0,3,91,93,61,0,0,0,0,53,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,10,116,111,95,106,115,95,112,114,111,99,0,0,0,0,69,0,4,0,6,0,0,0,9,0,16,0,38,0,64,0,151,0,64,0,151,0,191,255,3,1,128,0,6,2,0,0,17,2,128,3,64,2,0,64,33,2,0,0,41,0,0,0,0,0,0,0,2,0,4,80,114,111,99,0,0,3,110,101,119,0,0,0,0,138,0,3,0,6,0,0,0,22,0,8,0,38,1,128,64,21,2,63,255,3,1,128,0,160,1,192,2,25,1,128,64,1,1,128,64,32,2,0,64,21,1,128,128,181,1,192,2,153,1,128,64,1,2,63,255,131,2,128,64,21,1,128,193,32,0,128,192,1,1,128,0,6,2,0,192,21,2,1,0,183,2,128,64,1,2,1,64,56,1,129,63,160,1,128,0,41,0,0,0,0,0,0,0,5,0,2,33,61,0,0,6,108,101,110,103,116,104,0,0,1,62,0,0,2,91,93,0,0,4,115,101,110,100,0,69,78,68,0,0,0,0,8,0,0,0,82,73,84,69,48,48,48,49,106,86,0,0,2,16,77,65,84,90,48,48,48,48,73,82,69,80,0,0,1,242,48,48,48,48,0,5,0,0,0,0,0,47,0,1,0,3,0,0,0,5,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,4,72,97,115,104,0,0,0,0,49,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,6,109,101,114,103,101,33,0,0,0,0,178,0,3,0,5,0,0,0,20,2,0,0,166,1,128,64,1,2,0,0,132,1,128,0,160,1,192,0,153,0,64,1,151,1,128,0,6,2,0,0,61,1,128,128,160,1,128,128,1,1,192,2,25,1,128,64,1,2,0,3,64,1,128,192,33,0,64,1,151,1,128,64,1,2,0,5,64,1,128,192,33,0,0,0,6,0,0,0,41,0,0,0,1,16,0,32,99,97,110,39,116,32,99,111,110,118,101,114,116,32,97,114,103,117,109,101,110,116,32,105,110,116,111,32,72,97,115,104,0,0,0,4,0,11,114,101,115,112,111,110,100,95,116,111,63,0,0,7,116,111,95,104,97,115,104,0,0,5,114,97,105,115,101,0,0,8,101,97,99,104,95,107,101,121,0,0,0,0,141,0,3,0,8,0,0,0,23,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,192,5,25,1,128,128,21,2,0,64,1,2,128,0,6,3,0,64,1,2,128,128,160,3,0,64,21,3,128,64,1,3,0,128,160,1,128,65,160,0,64,1,151,1,128,64,21,2,0,64,1,1,128,128,160,2,0,0,6,2,128,64,1,3,0,192,1,2,0,193,32,1,128,0,41,0,0,0,0,0,0,0,4,0,8,104,97,115,95,107,101,121,63,0,0,4,99,97,108,108,0,0,2,91,93,0,0,3,91,93,61,0,0,0,0,67,0,3,0,7,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,2,0,0,6,2,128,64,1,3,0,192,1,2,0,65,32,1,128,0,41,0,0,0,0,0,0,0,2,0,2,91,93,0,0,3,91,93,61,0,69,78,68,0,0,0,0,8,82,73,84,69,48,48,48,49,8,107,0,0,8,173,77,65,84,90,48,48,48,48,73,82,69,80,0,0,8,143,48,48,48,48,0,16,0,0,0,0,0,49,0,1,0,2,0,0,0,4,0,128,0,5,0,128,0,68,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,10,69,110,117,109,101,114,97,98,108,101,0,0,0,0,188,0,1,0,2,0,0,0,23,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,6,192,0,128,64,70,0,128,0,72,1,0,10,192,0,128,128,70,0,128,0,72,1,0,14,192,0,128,192,70,0,128,0,72,1,0,18,192,0,129,0,70,0,128,0,72,1,0,22,192,0,129,64,70,0,128,0,72,1,0,26,192,0,129,128,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,7,0,4,100,114,111,112,0,0,10,100,114,111,112,95,119,104,105,108,101,0,0,4,116,97,107,101,0,0,10,116,97,107,101,95,119,104,105,108,101,0,0,9,101,97,99,104,95,99,111,110,115,0,0,10,101,97,99,104,95,115,108,105,99,101,0,0,8,103,114,111,117,112,95,98,121,0,0,0,0,248,0,4,0,7,0,0,0,23,2,0,0,38,2,0,64,1,2,128,0,145,2,0,0,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,1,145,3,0,0,61,2,0,129,32,2,0,64,1,2,191,255,131,2,1,0,179,2,64,2,25,2,0,0,6,2,128,2,145,3,0,0,189,2,0,129,32,1,129,0,55,2,0,0,6,2,128,3,64,2,1,128,33,1,128,0,41,0,0,0,2,16,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,16,0,29,97,116,116,101,109,112,116,32,116,111,32,100,114,111,112,32,110,101,103,97,116,105,118,101,32,115,105,122,101,0,0,0,7,0,8,107,105,110,100,95,111,102,63,0,0,7,73,110,116,101,103,101,114,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,1,60,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,4,101,97,99,104,0,0,0,0,86,0,3,0,5,0,0,0,13,2,0,0,38,1,128,64,21,2,63,255,131,1,128,0,178,1,192,2,25,1,128,192,21,2,0,64,1,1,128,64,160,0,64,1,151,1,128,64,21,1,128,128,175,1,128,64,22,1,128,0,41,0,0,0,0,0,0,0,3,0,2,61,61,0,0,2,60,60,0,0,1,45,0,0,0,0,63,0,4,0,6,0,0,0,9,0,0,0,166,2,1,0,55,2,128,0,8,1,1,0,1,1,129,64,1,2,0,0,6,2,128,3,64,2,0,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,112,0,3,0,5,0,0,0,19,2,0,0,38,1,128,192,21,1,128,0,32,1,192,2,25,1,128,64,21,2,0,64,1,1,128,64,160,1,128,0,32,1,192,1,25,1,128,0,7,1,128,192,22,1,128,192,21,1,192,2,25,1,128,128,21,2,0,64,1,1,128,128,160,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,3,0,1,33,0,0,4,99,97,108,108,0,0,2,60,60,0,0,0,0,248,0,4,0,7,0,0,0,23,2,0,0,38,2,0,64,1,2,128,0,145,2,0,0,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,1,145,3,0,0,61,2,0,129,32,2,0,64,1,2,191,255,131,2,1,0,179,2,64,2,25,2,0,0,6,2,128,2,145,3,0,0,189,2,0,129,32,1,129,0,55,2,0,0,6,2,128,3,64,2,1,128,33,1,128,0,41,0,0,0,2,16,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,16,0,29,97,116,116,101,109,112,116,32,116,111,32,116,97,107,101,32,110,101,103,97,116,105,118,101,32,115,105,122,101,0,0,0,7,0,8,107,105,110,100,95,111,102,63,0,0,7,73,110,116,101,103,101,114,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,1,60,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,4,101,97,99,104,0,0,0,0,81,0,3,0,5,0,0,0,11,2,0,0,38,1,128,192,21,1,128,0,32,2,0,64,21,1,128,64,182,1,192,0,153,1,128,64,41,1,128,192,21,2,0,64,1,1,128,128,160,1,128,0,41,0,0,0,0,0,0,0,3,0,4,115,105,122,101,0,0,2,62,61,0,0,2,60,60,0,0,0,0,51,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,80,0,3,0,5,0,0,0,12,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,0,153,0,64,1,23,1,128,128,21,1,128,128,41,1,128,128,21,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,2,60,60,0,0,0,0,232,0,4,0,7,0,0,0,23,2,0,0,166,2,0,64,1,2,128,0,145,2,0,0,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,1,145,3,0,0,61,2,0,129,32,2,0,64,1,2,191,255,131,2,1,0,180,2,64,2,25,2,0,0,6,2,128,2,145,3,0,0,189,2,0,129,32,1,129,0,55,2,0,0,6,2,128,3,64,2,1,128,33,2,0,0,41,0,0,0,2,16,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,16,0,12,105,110,118,97,108,105,100,32,115,105,122,101,0,0,0,7,0,8,107,105,110,100,95,111,102,63,0,0,7,73,110,116,101,103,101,114,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,2,60,61,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,4,101,97,99,104,0,0,0,0,150,0,3,0,5,0,0,0,23,2,0,0,38,1,128,192,21,1,128,0,32,2,0,64,21,1,128,64,178,1,192,1,25,1,128,192,21,1,128,128,32,1,128,192,21,2,0,64,1,1,128,192,160,1,128,192,21,1,128,0,32,2,0,64,21,1,128,64,178,1,192,2,153,1,128,128,21,2,0,192,21,2,1,64,32,1,129,0,160,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,6,0,4,115,105,122,101,0,0,2,61,61,0,0,5,115,104,105,102,116,0,0,2,60,60,0,0,4,99,97,108,108,0,0,3,100,117,112,0,0,0,1,30,0,4,0,7,0,0,0,31,2,0,0,166,2,0,64,1,2,128,0,145,2,0,0,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,1,145,3,0,0,61,2,0,129,32,2,0,64,1,2,191,255,131,2,1,0,180,2,64,2,25,2,0,0,6,2,128,2,145,3,0,0,189,2,0,129,32,1,129,0,55,2,0,0,6,2,128,3,64,2,1,128,33,2,0,192,1,2,1,192,32,2,64,1,25,2,0,0,5,0,64,1,151,2,0,128,1,2,128,192,1,2,2,0,160,2,0,0,41,0,0,0,2,16,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,16,0,18,105,110,118,97,108,105,100,32,115,108,105,99,101,32,115,105,122,101,0,0,0,9,0,8,107,105,110,100,95,111,102,63,0,0,7,73,110,116,101,103,101,114,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,2,60,61,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,4,101,97,99,104,0,0,6,101,109,112,116,121,63,0,0,4,99,97,108,108,0,0,0,0,112,0,3,0,5,0,0,0,17,2,0,0,38,1,128,192,21,2,0,64,1,1,128,0,160,1,128,192,21,1,128,64,32,2,0,64,21,1,128,128,178,1,192,3,25,1,128,128,21,2,0,192,21,1,128,192,160,1,128,192,55,1,128,192,22,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,4,0,2,60,60,0,0,4,115,105,122,101,0,0,2,61,61,0,0,4,99,97,108,108,0,0,0,0,51,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,63,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,138,0,4,0,8,0,0,0,22,2,0,0,38,2,0,64,21,2,128,64,1,2,0,0,160,1,129,0,1,2,0,128,21,2,128,192,1,2,0,64,160,2,64,3,25,2,0,128,21,2,128,192,1,2,0,128,160,2,128,64,1,2,0,192,160,0,64,3,23,2,0,64,1,2,1,0,183,2,128,128,21,3,0,192,1,3,129,0,1,2,129,1,32,2,0,0,41,0,0,0,0,0,0,0,5,0,4,99,97,108,108,0,0,4,107,101,121,63,0,0,2,91,93,0,0,2,60,60,0,0,3,91,93,61,0,69,78,68,0,0,0,0,8,0,0,0,82,73,84,69,48,48,48,49,127,107,0,0,8,174,77,65,84,90,48,48,48,48,73,82,69,80,0,0,8,144,48,48,48,48,0,18,0,0,0,0,0,48,0,1,0,3,0,0,0,5,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,5,65,114,114,97,121,0,0,0,0,205,0,1,0,2,0,0,0,29,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,12,192,0,128,192,70,0,128,0,72,1,0,14,192,0,129,0,70,0,128,0,72,1,0,20,192,0,129,64,70,0,128,0,72,1,0,24,192,0,129,128,70,0,128,0,72,1,0,28,192,0,129,192,70,0,128,0,72,1,0,30,192,0,130,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,9,0,5,117,110,105,113,33,0,0,4,117,110,105,113,0,0,1,45,0,0,1,124,0,0,1,38,0,0,7,102,108,97,116,116,101,110,0,0,8,102,108,97,116,116,101,110,33,0,0,7,99,111,109,112,97,99,116,0,0,8,99,111,109,112,97,99,116,33,0,0,0,0,205,0,4,0,6,0,0,0,31,0,0,0,38,2,0,0,6,2,0,0,32,1,1,0,1,1,129,0,55,0,64,4,23,2,0,192,1,2,128,128,1,2,128,128,32,2,0,64,160,2,0,128,1,2,128,192,1,2,129,0,32,2,0,192,160,2,0,128,1,2,1,64,32,2,191,255,131,2,1,128,181,2,63,249,152,2,0,192,1,2,1,64,32,2,128,0,6,2,129,64,32,2,1,192,178,2,64,1,25,2,0,0,5,0,64,1,151,2,0,0,6,2,128,192,1,2,2,0,160,2,0,0,41,0,0,0,0,0,0,0,9,0,3,100,117,112,0,0,2,60,60,0,0,5,115,104,105,102,116,0,0,6,100,101,108,101,116,101,0,0,4,108,97,115,116,0,0,4,115,105,122,101,0,0,1,62,0,0,2,61,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,62,0,3,0,4,0,0,0,7,0,0,0,38,1,128,0,6,1,128,0,32,1,0,192,1,1,128,128,1,1,128,64,32,1,0,0,41,0,0,0,0,0,0,0,2,0,3,100,117,112,0,0,5,117,110,105,113,33,0,0,0,0,199,0,5,0,9,0,0,0,25,2,0,0,38,2,128,64,1,2,128,0,32,3,0,1,17,2,128,64,178,2,192,0,153,0,64,4,151,2,128,0,6,3,0,2,17,3,128,0,61,4,0,64,1,4,0,0,32,3,130,0,62,4,0,0,189,3,130,0,62,2,128,193,32,1,129,64,63,2,1,64,55,2,128,64,1,3,0,3,64,2,129,64,33,2,128,0,6,3,0,5,64,2,129,64,33,2,0,0,41,0,0,0,2,16,0,14,99,97,110,39,116,32,99,111,110,118,101,114,116,32,16,0,11,32,105,110,116,111,32,65,114,114,97,121,0,0,0,6,0,5,99,108,97,115,115,0,0,2,61,61,0,0,5,65,114,114,97,121,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,4,101,97,99,104,0,0,0,0,54,0,3,0,7,0,0,0,7,2,0,0,38,1,128,0,7,2,0,192,21,2,128,64,1,3,0,192,1,2,0,1,32,1,128,0,41,0,0,0,0,0,0,0,1,0,3,91,93,61,0,0,0,0,74,0,3,0,5,0,0,0,11,2,0,0,38,1,128,192,21,2,0,64,1,1,128,0,160,1,192,1,25,1,128,0,5,0,64,1,151,1,129,0,21,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,2,91,93,0,0,2,60,60,0,0,0,0,204,0,4,0,8,0,0,0,25,2,0,0,38,2,0,64,1,2,0,0,32,2,128,1,17,2,0,64,178,2,64,0,153,0,64,4,151,2,0,0,6,2,128,2,17,3,0,0,61,3,128,64,1,3,128,0,32,3,1,192,62,3,128,0,189,3,1,192,62,2,0,193,32,2,0,0,6,2,128,64,1,2,1,64,172,1,129,0,1,2,0,192,1,2,1,128,32,2,64,0,152,2,0,192,1,2,0,0,41,0,0,0,2,16,0,14,99,97,110,39,116,32,99,111,110,118,101,114,116,32,16,0,11,32,105,110,116,111,32,65,114,114,97,121,0,0,0,7,0,5,99,108,97,115,115,0,0,2,61,61,0,0,5,65,114,114,97,121,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,1,43,0,0,5,117,110,105,113,33,0,0,0,0,199,0,5,0,9,0,0,0,25,2,0,0,38,2,128,64,1,2,128,0,32,3,0,1,17,2,128,64,178,2,192,0,153,0,64,4,151,2,128,0,6,3,0,2,17,3,128,0,61,4,0,64,1,4,0,0,32,3,130,0,62,4,0,0,189,3,130,0,62,2,128,193,32,1,129,64,63,2,1,64,55,2,128,64,1,3,0,3,64,2,129,64,33,2,128,0,6,3,0,5,64,2,129,64,33,2,0,0,41,0,0,0,2,16,0,14,99,97,110,39,116,32,99,111,110,118,101,114,116,32,16,0,11,32,105,110,116,111,32,65,114,114,97,121,0,0,0,6,0,5,99,108,97,115,115,0,0,2,61,61,0,0,5,65,114,114,97,121,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,4,101,97,99,104,0,0,0,0,54,0,3,0,7,0,0,0,7,2,0,0,38,1,128,0,7,2,0,192,21,2,128,64,1,3,0,192,1,2,0,1,32,1,128,0,41,0,0,0,0,0,0,0,1,0,3,91,93,61,0,0,0,0,95,0,3,0,5,0,0,0,14,2,0,0,38,1,128,192,21,2,0,64,1,1,128,0,160,1,192,3,153,1,129,0,21,2,0,64,1,1,128,64,160,1,128,192,21,2,0,64,1,1,128,128,160,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,2,60,60,0,0,6,100,101,108,101,116,101,0,0,0,0,63,0,4,0,6,0,0,0,9,0,16,0,38,0,64,0,151,0,64,0,151,0,128,0,5,1,129,0,55,2,0,0])
.concat([6,2,128,3,64,2,0,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,186,0,3,0,7,0,0,0,29,2,0,0,38,1,128,64,1,2,0,0,145,1,128,0,160,1,192,3,25,1,128,64,21,1,128,128,32,1,192,1,152,1,128,64,21,2,63,255,131,1,128,192,181,1,192,6,153,1,128,192,21,2,0,64,1,2,128,64,21,2,128,128,32,2,192,1,25,2,128,0,5,0,64,1,23,2,128,64,21,2,129,64,175,2,1,0,160,1,129,128,172,1,128,192,22,0,64,1,151,1,128,192,21,2,0,64,1,1,129,192,160,1,128,0,41,0,0,0,0,0,0,0,8,0,5,105,115,95,97,63,0,0,5,65,114,114,97,121,0,0,4,110,105,108,63,0,0,1,62,0,0,7,102,108,97,116,116,101,110,0,0,1,45,0,0,1,43,0,0,2,60,60,0,0,0,0,105,0,5,0,7,0,0,0,17,0,16,0,38,0,64,0,151,0,64,0,151,0,128,0,5,1,128,0,8,2,1,64,55,2,128,0,6,3,0,3,64,2,128,0,33,2,128,192,1,2,192,2,25,2,128,0,6,3,1,0,1,2,128,64,160,0,64,0,151,2,128,0,5,2,128,0,41,0,0,0,0,0,0,0,2,0,4,101,97,99,104,0,0,7,114,101,112,108,97,99,101,0,0,0,0,194,0,3,0,7,0,0,0,31,2,0,0,38,1,128,64,1,2,0,0,145,1,128,0,160,1,192,3,25,1,128,64,21,1,128,128,32,1,192,1,152,1,128,64,21,2,63,255,131,1,128,192,181,1,192,7,153,1,129,0,21,2,0,64,1,2,128,64,21,2,128,128,32,2,192,1,25,2,128,0,5,0,64,1,23,2,128,64,21,2,129,64,175,2,1,0,160,1,129,128,172,1,129,0,22,1,128,0,7,1,128,192,22,0,64,1,151,1,129,0,21,2,0,64,1,1,129,192,160,1,128,0,41,0,0,0,0,0,0,0,8,0,5,105,115,95,97,63,0,0,5,65,114,114,97,121,0,0,4,110,105,108,63,0,0,1,62,0,0,7,102,108,97,116,116,101,110,0,0,1,45,0,0,1,43,0,0,2,60,60,0,0,0,0,65,0,3,0,4,0,0,0,7,0,0,0,38,1,128,0,6,1,128,0,32,1,0,192,1,1,128,128,1,1,128,64,32,1,0,0,41,0,0,0,0,0,0,0,2,0,3,100,117,112,0,0,8,99,111,109,112,97,99,116,33,0,0,0,0,119,0,3,0,5,0,0,0,17,0,0,0,38,1,128,0,6,2,0,3,64,1,128,0,33,1,0,192,1,1,128,128,1,1,128,64,32,2,0,0,6,2,0,64,32,1,128,128,178,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,6,2,0,128,1,1,128,192,160,1,128,0,41,0,0,0,0,0,0,0,4,0,6,115,101,108,101,99,116,0,0,4,115,105,122,101,0,0,2,61,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,45,0,3,0,5,0,0,0,5,2,0,0,38,1,128,64,1,2,0,0,5,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,2,33,61,0,69,78,68,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,35,0,0,0,0,0,0,0,64,149,1,0,2,0,0,0,108,148,1,0,3,0,0,0,108,176,1,0,4,0,0,0,188,174,1,0,10,0,0,0,152,147,1,0,8,0,0,0,204,146,1,0,9,0,0,0,176,145,1,0,11,0,0,0,252,144,1,0,12,0,0,0,180,143,1,0,13,0,0,0,128,142,1,0,6,0,0,0,196,159,1,0,14,0,0,0,132,141,1,0,15,0,0,0,192,139,1,0,16,0,0,0,132,138,1,0,17,0,0,0,124,137,1,0,19,0,0,0,120,136,1,0,21,0,0,0,176,135,1,0,255,0,0,0,0,0,0,0,82,73,84,69,48,48,48,49,188,85,0,0,0,152,77,65,84,90,48,48,48,48,73,82,69,80,0,0,0,122,48,48,48,48,0,2,0,0,0,0,0,44,0,1,0,3,0,0,0,4,0,192,2,3,1,0,3,64,0,128,0,33,0,0,0,74,0,0,0,0,0,0,0,1,0,5,116,105,109,101,115,0,0,0,0,62,0,1,0,3,0,0,0,4,0,128,0,6,1,0,0,61,0,128,0,160,0,128,0,41,0,0,0,1,16,0,16,82,117,98,121,32,105,115,32,97,119,101,115,111,109,101,33,0,0,0,1,0,4,112,117,116,115,0,69,78,68,0,0,0,0,8,79,80,95,117,110,107,110,111,119,110,32,37,100,9,37,100,9,37,100,9,37,100,10,0,83,116,114,105,110,103,0,0,115,116,101,112,95,114,97,116,105,111,61,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,37,115,0,0,79,80,95,69,80,79,80,9,37,100,10,0,116,111,95,97,114,121,0,0,58,34,0,0,44,32,0,0,45,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,79,80,95,80,79,80,69,82,82,9,37,100,10,0,0,0,65,114,114,97,121,0,0,0,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,58,10,0,0,0,79,80,95,82,65,73,83,69,9,82,37,100,10,0,0,0,101,120,112,101,99,116,101,100,32,37,83,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,78,79,68,69,95,83,67,79,80,69,58,10,0,0,0,0,79,80,95,82,69,83,67,85,69,9,82,37,100,10,0,0,105,110,100,101,120,32,37,83,32,111,117,116,32,111,102,32,97,114,114,97,121,0,0,0,116,111,95,104,97,115,104,0,100,111,58,10,0,0,0,0,79,80,95,79,78,69,82,82,9,37,48,51,100,10,0,0,72,97,115,104,0,0,0,0,105,110,58,10,0,0,0,0,115,116,114,105,110,103,32,40,37,83,41,32,116,111,111,32,98,105,103,32,102,111,114,32,105,110,116,101,103,101,114,0,79,80,95,69,80,85,83,72,9,58,73,40,37,100,41,10,0,0,0,0,109,101,116,104,111,100,32,96,37,83,39,32,110,111,116,32,100,101,102,105,110,101,100,32,105,110,32,37,83,0,0,0,112,111,115,116,58,10,0,0,79,80,95,69,82,82,9,76,40,37,100,41,10,0,0,0,119,114,111,110,103,32,99,111,110,115,116,97,110,116,32,110,97,109,101,32,37,83,0,0,114,101,115,116,58,10,0,0,79,80,95,84,67,76,65,83,83,9,82,37,100,10,0,0,60,61,62,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,99,108,97,115,115,0,0,0,0,117,110,100,101,102,105,110,101,100,32,109,101,116,104,111,100,32,39,37,83,39,32,102,111,114,32,37,83,0,0,0,0,83,0,0,0,110,117,109,98,101,114,101,100,40,37,83,41,32,97,102,116,101,114,32,117,110,110,117,109,98,101,114,101,100,40,37,83,41,0,0,0,116,111,95,105,110,116,0,0,64,0,0,0,116,114,105,101,100,32,116,111,32,99,114,101,97,116,101,32,80,114,111,99,32,111,98,106,101,99,116,32,119,105,116,104,111,117,116,32,97,32,98,108,111,99,107,0,66,69,71,73,78,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,77,82,66,95,84,84,95,70,76,79,65,84,0,0,0,0,97,116,97,110,0,0,0,0,116,111,74,115,65,114,114,97,121,0,0,0,114,101,115,117,109,105,110,103,32,100,101,97,100,32,102,105,98,101,114,0,61,61,0,0,100,111,117,98,108,101,32,114,101,115,117,109,101,0,0,0,84,114,117,101,67,108,97,115,115,0,0,0,45,73,110,102,105,110,105,116,121,0,0,0,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,84,121,112,101,69,114,114,111,114,0,0,0,61,61,0,0,112,114,101,58,10,0,0,0,79,80,95,83,67,76,65,83,83,9,82,37,100,9,82,37,100,10,0,0,78,111,77,101,116,104,111,100,69,114,114,111,114,0,0,0,110,101,119,0,118,97,114,58,10,0,0,0,80,114,111,99,0,0,0,0,79,80,95,69,88,69,67,9,82,37,100,9,73,40,37,100,41,10,0,0,110,97,109,101,32,115,104,111,117,108,100,32,98,101,32,97,32,115,121,109,98,111,108,0,115,116,101,112,95,114,97,116,105,111,0,0,101,120,99,101,112,116,105,111,110,32,99,108,97,115,115,47,111,98,106,101,99,116,32,101,120,112,101,99,116,101,100,0,78,79,68,69,95,70,79,82,58,10,0,0,79,80,95,77,79,68,85,76,69,9,82,37,100,9,58,37,115,10,0,0,111,42,0,0,111,0,0,0,36,0,0,0,78,79,68,69,95,85,78,84,73,76,58,10,0,0,0,0,79,80,95,67,76,65,83,83,9,82,37,100,9,58,37,115,10,0,0,0,96,37,83,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0,0,0,0,78,79,68,69,95,87,72,73,76,69,58,10,0,0,0,0,79,80,95,79,67,76,65,83,83,9,82,37,100,10,0,0,124,98,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,99,97,115,101,58,10,0,0,79,80,95,72,65,83,72,9,82,37,100,9,82,37,100,9,37,100,10,0,73,110,100,101,120,69,114,114,111,114,0,0,35,60,63,63,63,63,63,63,58,0,0,0,78,79,68,69,95,67,65,83,69,58,10,0,79,80,95,83,84,82,67,65,84,9,82,37,100,9,82,37,100,10,0,0,35,60,77,111,100,117,108,101,58,0,0,0,78,79,68,69,95,79,82,58,10,0,0,0,79,80,95,83,84,82,73,78,71,9,82,37,100,9,37,115,10,0,0,0,105,108,108,101,103,97,108,32,114,97,100,105,120,32,37,83,0,0,0,0,95,95,97,116,116,97,99,104,101,100,95,95,0,0,0,0,78,79,68,69,95,65,78,68,58,10,0,0,79,80,95,65,80,79,83,84,9,82,37,100,9,37,100,9,37,100,10,0,110,111,32,98,108,111,99,107,32,103,105,118,101,110,0,0,116,104,101,110,58,10,0,0,9,91,37,100,93,32,37,115,58,37,100,10,0,0,0,0,79,80,95,65,82,69,70,9,82,37,100,9,82,37,100,9,37,100,10,0,61,61,0,0,111,0,0,0,42,0,0,0,110,38,0,0,118,97,108,117,101,32,103,105,118,101,110,32,116,119,105,99,101,32,45,32,37,83,36,0,70,105,120,110,117,109,0,0,35,60,80,114,111,99,58,0,83,104,105,102,116,105,110,103,0,0,0,0,77,82,66,95,84,84,95,85,78,68,69,70,0,0,0,0,97,99,111,115,0,0,0,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,110,32,97,114,114,97,121,33,0,100,111,117,98,108,101,32,114,101,115,117,109,101,0,0,0,101,110,100,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,105,110,115,112,101,99,116,0,70,108,111,97,116,68,111,109,97,105,110,69,114,114,111,114,0,0,0,0,124,83,38,0,117,110,105,110,105,116,105,97,108,105,122,101,100,32,99,111,110,115,116,97,110,116,32,37,83,0,0,0,69,110,117,109,101,114,97,98,108,101,0,0,99,111,110,100,58,10,0,0,79,80,95,65,82,89,80,85,83,72,9,82,37,100,9,82,37,100,10,0,111,0,0,0,78,79,68,69,95,73,70,58,10,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,79,80,95,65,82,89,67,65,84,9,82,37,100,9,82,37,100,10,0,0,77,111,100,117,108,101,46,99,111,110,115,116,97,110,116,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,0,105,110,116,101,114,118,97,108,95,114,97,116,105,111,61,0,109,114,98,95,109,97,108,108,111,99,0,0,84,121,112,101,69,114,114,111,114,0,0,0,98,108,107,61,38,37,115,10,0,0,0,0,79,80,95,65,82,82,65,89,9,82,37,100,9,82,37,100,9,37,100,10,0,0,0,0,61,61,61,0,105,110,105,116,105,97,108,105,122,101,0,0,117,110,101,120,112,101,99,116,101,100,32,114,101,116,114,121,0,0,0,0,112,111,115,116,32,109,97,110,100,97,116,111,114,121,32,97,114,103,115,58,10,0,0,0,79,80,95,83,84,79,80,10,0,0,0,0,99,108,97,115,115,95,118,97,114,105,97,98,108,101,115,0,114,101,115,116,61,42,37,115,10,0,0,0,79,80,95,69,81,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,100,101,102,105,110,101,95,109,101,116,104,111,100,0,0,0,110,111,32,115,117,112,101,114,32,99,108,97,115,115,32,102,111,114,32,96,37,83,58,58,37,83,39,44,32,79,98,106,101,99,116,32,97,115,115,117,109,101,100,0,37,115,61,0,79,80,95,71,69,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,110,101,103,97,116,105,118,101,32,97,114,103,117,109,101,110,116,0,0,0,114,101,109,111,118,101,95,99,111,110,115,116,0,0,0,0,111,112,116,105,111,110,97,108,32,97,114,103,115,58,10,0,79,80,95,71,84,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,99,111,110,115,116,97,110,116,115,0,0,0,109,97,110,100,97,116,111,114,121,32,97,114,103,115,58,10,0,0,0,0,83,121,109,98,111,108,0,0,79,80,95,76,69,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,99,111,110,115,116,95,115,101,116,0,0,0,116,111,95,115,0,0,0,0,78,79,68,69,95,66,76,79,67,75,58,10,0,0,0,0,102,124,102,0,115,116,114,105,110,103,32,115,105,122,101,115,32,116,111,111,32,98,105,103,0,0,0,0,79,80,95,76,84,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,99,111,110,115,116,95,103,101,116,0,0,0,101,110,115,117,114,101,58,10,0,0,0,0,105,124,105,105,105,105,105,105,0,0,0,0,110,101,103,97,116,105,118,101,32,97,114,103,117,109,101,110,116,0,0,0,9,91,37,100,93,32,37,115,58,37,100,58,105,110,32,37,115,10,0,0,79,80,95,68,73,86,9,82,37,100,9,58,37,115,9,37,100,10,0,0,117,116,99,0,37,83,32,105,115,32,110,111,116,32,115,116,114,117,99,116,32,109,101,109,98,101,114,0,101,110,100,95,119,105,116,104,63,0,0,0,99,111,110,115,116,95,100,101,102,105,110,101,100,63,0,0,109,97,108,102,111,114,109,101,100,32,102,111,114,109,97,116,32,115,116,114,105,110,103,32,45,32,37,42,91,48,45,57,93,0,0,0,60,61,62,0,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,116,121,112,101,0,0,0,116,114,105,101,100,32,116,111,32,99,114,101,97,116,101,32,80,114,111,99,32,111,98,106,101,99,116,32,119,105,116,104,111,117,116,32,97,32,98,108,111,99,107,0,10,0,0,0,77,82,66,95,84,84,95,83,89,77,66,79,76,0,0,0,97,115,105,110,0,0,0,0,97,100,100,95,112,114,111,99,0,0,0,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,98,101,103,105,110,0,0,0,99,105,105,100,120,0,0,0,116,111,95,115,0,0,0,0,78,79,68,69,95,69,78,83,85,82,69,58,10,0,0,0,102,0,0,0,84,111,111,32,108,97,114,103,101,32,101,120,112,111,114,110,101,110,116,46,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,32,115,104,111,117,108,100,32,116,97,107,101,32,115,97,109,101,32,99,108,97,115,115,32,111,98,106,101,99,116,0,0,0,99,111,110,115,116,95,109,105,115,115,105,110,103,0,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,105,0,0,0,79,80,95,77,85,76,9,82,37,100,9,58,37,115,9,37,100,10,0,0,117,110,100,101,102,95,109,101,116,104,111,100,0,0,0,0,101,108,115,101,58,10,0,0,83,97,116,0,45,0,0,0,38,0,0,0,79,80,95,83,85,66,73,9,82,37,100,9,58,37,115,9,37,100,10,0,97,110,99,101,115,116,111,114,115,0,0,0,105,110,116,101,114,118,97,108,95,114,97,116,105,111,0,0,114,101,115,99,117,101,32,98,111,100,121,58,10,0,0,0,70,114,105,0,101,120,99,101,112,116,105,111,110,0,0,0,82,101,103,101,120,112,32,99,108,97,115,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,0,79,80,95,83,85,66,9,82,37,100,9,58,37,115,9,37,100,10,0,0,97,108,105,97,115,95,109,101,116,104,111,100,0,0,0,0,101,120,99,95,118,97,114,58,10,0,0,0,84,104,117,0,117,110,101,120,112,101,99,116,101,100,32,114,101,100,111,0,60,61,62,0,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,79,80,95,65,68,68,73,9,82,37,100,9,58,37,115,9,37,100,10,0,116,111,95,115,0,0,0,0,104,97,110,100,108,101,32,99,108,97,115,115,101,115,58,10,0,0,0,0,87,101,100,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,83,32,102,111,114,32,49,41,0,0,0,0,79,80,95,65,68,68,9,82,37,100,9,58,37,115,9,37,100,10,0,0,114,101,109,111,118,101,95,109,101,116,104,111,100,0,0,0,37,83,32,105,115,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,0,0,0,114,101,115,99,117,101,58,10,0,0,0,0,84,117,115,0,111,124,111,0,79,80,95,77,69,84,72,79,68,9,82,37,100,9,58,37,115,10,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,114,101,109,111,118,101,95,99,108,97,115,115,95,118,97,114,105,97,98,108,101,0,0,0,98,111,100,121,58,10,0,0,77,111,110,0,111,0,0,0,95,95,99,108,97,115,115,105,100,95,95,0,79,80,95,82,65,78,71,69,9,82,37,100,9,82,37,100,9,37,100,10,0,0,0,0,109,111,100,117,108,101,95,101,118,97,108,0,78,79,68,69,95,82,69,83,67,85,69,58,10,0,0,0,83,117,110,0,101,120,116,101,110,100,101,100,0,0,0,0,124,83,0,0,79,80,95,76,65,77,66,68,65,9,82,37,100,9,73,40,37,43,100,41,9,37,100,10,0,0,0,0,109,101,116,104,111,100,95,100,101,102,105,110,101,100,63,0,83,116,114,105,110,103,0,0,78,79,68,69,95,66,69,71,73,78,58,10,0,0,0,0,68,101,99,0,101,120,116,101,110,100,95,111,98,106,101,99,116,0,0,0,83,0,0,0,79,80,95,66,76,75,80,85,83,72,9,82,37,100,9,37,100,58,37,100,58,37,100,58,37,100,10,0,105,110,115,116,97,110,99,101,95,109,101,116,104,111,100,115,0,0,0,0,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,0,78,111,118,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,97,116,32,108,101,97,115,116,32,49,41,0,0,82,101,103,101,120,112,0,0,9,91,37,100,93,32,37,115,58,37,100,58,105,110,32,37,115,37,115,37,115,10,0,0,9,98,114,111,107,101,110,10,0,0,0,0,110,111,119,0,73,110,100,101,120,69,114,114,111,114,0,0,115,116,97,114,116,95,119,105,116,104,63,0,105,110,99,108,117,100,101,100,95,109,111,100,117,108,101,115,0,0,0,0,119,105,100,116,104,32,116,111,111,32,98,105,103,0,0,0,111,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,78,101,120,116,32,116,111,107,101,110,32,105,115,0,0,0,77,82,66,95,84,84,95,70,73,88,78,85,77,0,0,0,108,97,109,98,100,97,0,0,116,97,110,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,112,114,111,99,33,0,0,0,42,0,0,0,69,110,117,109,101,114,97,98,108,101,0,0,108,97,115,116,112,99,0,0,110,105,108,63,0,0,0,0,67,108,101,97,110,117,112,58,32,112,111,112,112,105,110,103,0,0,0,0,79,99,116,0,105,110,102,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,111,0,0,0,95,95,99,108,97,115,115,105,100,95,95,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,116,121,112,101,32,109,105,115,109,97,116,99,104,58,32,37,83,32,103,105,118,101,110,0,9,98,114,101,97,107,10,0,105,110,99,108,117,100,101,100,0,0,0,0,67,108,101,97,110,117,112,58,32,100,105,115,99,97,114,100,105,110,103,32,108,111,111,107,97,104,101,97,100,0,0,0,83,101,112,0,96,37,83,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0,0,0,0,124,111,105,0,105,110,115,112,101,99,116,0,9,114,101,116,117,114,110,10,0,0,0,0,99,108,97,115,115,95,101,118,97,108,0,0,100,105,115,97,98,108,101,0,109,101,109,111,114,121,32,101,120,104,97,117,115,116,101,100,0,0,0,0,65,117,103,0,110,42,38,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,98,121,116,101,115,0,0,0,10,0,0,0,97,112,112,101,110,100,95,102,101,97,116,117,114,101,115,0,69,114,114,111,114,58,32,112,111,112,112,105,110,103,0,0,74,117,108,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,70,108,111,97,116,32,105,110,116,111,32,73,110,116,101,103,101,114,0,0,0,0,115,105,110,103,108,101,116,111,110,95,109,101,116,104,111,100,115,0,0,0,105,110,115,112,101,99,116,0,117,110,101,120,112,101,99,116,101,100,32,110,101,120,116,0,105,110,115,112,101,99,116,0,79,80,95,82,69,84,85,82,78,9,82,37,100,0,0,0,105,110,99,108,117,100,101,63,0,0,0,0,69,114,114,111,114,58,32,100,105,115,99,97,114,100,105,110,103,0,0,0,74,117,110,0,119,105,100,116,104,40,37,83,41,32,62,32,40,37,83,58,115,105,122,101,111,102,40,109,114,98,95,105,110,116,41,42,67,72,65,82,95,66,73,84,45,49,41,0,115,101,110,100,0,0,0,0,117,112,99,97,115,101,33,0,79,80,95,69,78,84,69,82,9,37,100,58,37,100,58,37,100,58,37,100,58,37,100,58,37,100,58,37,100,10,0,0,42,0,0,0,105,110,99,108,117,100,101,0,41,0,0,0,110,116,101,114,109,32,37,115,32,40,0,0,105,110,104,101,114,105,116,101,100,0,0,0,116,111,107,101,110,32,37,115,32,40,0,0,32,32,32,36,37,100,32,61,32,0,0,0,82,101,100,117,99,105,110,103,32,115,116,97,99,107,32,98,121,32,114,117,108,101,32,37,100,32,40,108,105,110,101,32,37,108,117,41,58,10,0,0,115,121,110,116,97,120,32,101,114,114,111,114,0,0,0,0,98,111,116,104,32,98,108,111,99,107,32,97,114,103,32,97,110,100,32,97,99,116,117,97,108,32,98,108,111,99,107,32,103,105,118,101,110,0,0,0,77,97,121,0,102,0,0,0,114,101,115,112,111,110,100,95,116,111,63,0,98,108,111,99,107,32,97,114,103,117,109,101,110,116,32,115,104,111,117,108,100,32,110,111,116,32,98,101,32,103,105,118,101,110,0,0,32,37,100,0,117,112,99,97,115,101,0,0,83,116,97,99,107,32,110,111,119,0,0,0,79,80,95,65,82,71,65,82,89,9,82,37,100,9,37,100,58,37,100,58,37,100,58,37,100,10,0,0,110,111,110,101,0,0,0,0,105,0,0,0,101,120,116,101,110,100,101,100,0,0,0,0,116,101,114,109,115,0,0,0,64,51,48,0,110,108,0,0,116,101,114,109,0,0,0,0,116,114,97,105,108,101,114,0,45,62,32,36,36,32,61,0,114,98,114,97,99,107,101,116,0,0,0,0,65,112,114,0,110,97,110,0,114,101,109,111,118,101,95,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,0,0,0,0,114,112,97,114,101,110,0,0,111,112,116,95,110,108,0,0,116,111,95,115,121,109,0,0,111,112,116,95,116,101,114,109,115,0,0,0,79,80,95,83,85,80,69,82,9,82,37,100,9,37,100,10,0,0,0,0,100,111,116,95,111,114,95,99,111,108,111,110,0,0,0,0,101,120,116,101,110,100,95,111,98,106,101,99,116,0,0,0,111,112,101,114,97,116,105,111,110,51,0,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,111,112,101,114,97,116,105,111,110,50,0,0,111,112,101,114,97,116,105,111,110,0,0,0,97,115,115,111,99,0,0,0,97,115,115,111,99,115,0,0,99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,32,109,101,116,104,111,100,32,102,111,114,32,108,105,116,101,114,97,108,115,0,0,97,115,115,111,99,95,108,105,115,116,0,0,77,97,114,0,111,0,0,0,112,117,98,108,105,99,95,109,101,116,104,111,100,115,0,0,64,50,57,0,115,105,110,103,108,101,116,111,110,0,0,0,116,111,95,102,0,0,0,0,111,112,116,95,102,95,98,108,111,99,107,95,97,114,103,0,79,80,95,84,65,73,76,67,65,76,76,9,82,37,100,9,58,37,115,9,37,100,10,0,102,95,98,108,111,99,107,95,97,114,103,0,99,108,97,115,115,95,118,97,114,105,97,98,108,101,95,115,101,116,0,0,98,108,107,97,114,103,95,109,97,114,107,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,102,95,114,101,115,116,95,97,114,103,0,0,114,101,115,116,97,114,103,95,109,97,114,107,0,0,0,0,116,111,95,115,116,114,0,0,102,95,111,112,116,97,114,103,0,0,0,0,102,95,98,108,111,99,107,95,111,112,116,97,114,103,0,0,99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,32,109,101,116,104,111,100,32,102,111,114,32,40,41,46,0,0,0,102,95,98,108,111,99,107,95,111,112,116,0,70,101,98,0,124,105,0,0,112,114,111,116,101,99,116,101,100,95,109,101,116,104,111,100,115,0,0,0,102,95,111,112,116,0,0,0,102,95,97,114,103,0,0,0,116,111,95,105,0,0,0,0,102,95,97,114,103,95,105,116,101,109,0,0,79,80,95,83,69,78,68,66,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,0,102,95,110,111,114,109,95,97,114,103,0,0,99,108,97,115,115,95,118,97,114,105,97,98,108,101,95,103,101,116,0,0,102,95,98,97,100,95,97,114,103,0,0,0,97,114,114,97,121,32,115,105,122,101,32,116,111,111,32,98,105,103,0,0,102,95,97,114,103,115,0,0,102,95,97,114,103,108,105,115,116,0,0,0,64,50,56,0,115,117,112,101,114,99,108,97,115,115,0,0,102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,0,0,98,97,99,107,114,101,102,0,74,97,110,0,116,114,117,110,99,97,116,101,0,0,0,0,112,114,105,118,97,116,101,95,109,101,116,104,111,100,115,0,118,97,114,95,114,101,102,0,118,97,114,95,108,104,115,0,115,117,98,33,0,0,0,0,35,0,0,0,118,97,114,105,97,98,108,101,0,0,0,0,79,80,95,83,69,78,68,9,82,37,100,9,58,37,115,9,37,100,10,0,109,107,116,105,109,101,0,0,110,117,109,101,114,105,99,0,115,116,114,117,99,116,32,115,105,122,101,32,100,105,102,102,101,114,115,32,40,37,83,32,114,101,113,117,105,114,101,100,32,37,83,32,103,105,118,101,110,41,0,0,60,60,0,0,99,108,97,115,115,95,118,97,114,105,97,98,108,101,95,100,101,102,105,110,101,100,63,0,115,121,109,98,111,108,115,0,102,108,97,103,32,97,102,116,101,114,32,112,114,101,99,105,115,105,111,110,0,0,0,0,116,111,95,97,0,0,0,0,124,111,0,0,114,101,99,117,114,115,105,118,101,32,97,114,114,97,121,32,106,111,105,110,0,0,0,0,115,121,109,0,38,0,0,0,77,82,66,95,84,84,95,84,82,85,69,0,37,115,32,0,98,97,115,105,99,95,115,121,109,98,111,108,0,0,0,0,99,111,115,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,110,32,111,98,106,101,99,116,33,0,0,0,0,115,121,109,98,111,108,0,0,91,93,0,0,99,97,110,39,116,32,121,105,101,108,100,32,102,114,111,109,32,114,111,111,116,32,102,105,98,101,114,0,105,0,0,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,99,108,97,115,115,0,0,0,0,119,111,114,100,115,0,0,0,78,111,77,101,116,104,111,100,69,114,114,111,114,0,0,0,124,0,0,0,102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,103,108,111,98,97,108,32,118,97,114,105,97,98,108,101,0,104,101,114,101,100,111,99,95,98,111,100,121,0,0,0,0,0,0,0,0,45,105,110,102,0,0,0,0,114,111,117,110,100,0,0,0,111,98,106,101,99,116,95,105,100,0,0,0,104,101,114,101,100,111,99,95,98,111,100,105,101,115,0,0,42,0,0,0,117,110,105,110,105,116,105,97,108,105,122,101,100,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,37,83,32,105,110,32,37,83,0,0,0,111,111,0,0,111,112,116,95,104,101,114,101,100,111,99,95,98,111,100,105,101,115,0,0,115,117,98,0,104,101,114,101,100,111,99,0,79,80,95,74,77,80,78,79,84,9,82,37,100,9,37,48,51,100,10,0,114,101,103,101,120,112,0,0,120,115,116,114,105,110,103,0,115,117,112,101,114,99,108,97,115,115,0,0,124,83,0,0,64,50,55,0,115,116,114,105,110,103,95,105,110,116,101,114,112,0,0,0,115,116,114,105,110,103,95,114,101,112,0,0,115,116,114,105,110,103,0,0,108,105,116,101,114,97,108,0,102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,0,0,85,84,67,32,0,0,0,0,105,110,102,105,110,105,116,101,63,0,0,0,110,105,108,63,0,0,0,0,111,112,116,95,101,110,115,117,114,101,0,0,101,120,99,95,118,97,114,0,115,112,108,105,116,0,0,0,48,48,48,49,0,0,0,0,101,120,99,95,108,105,115,116,0,0,0,0,79,80,95,74,77,80,73,70,9,82,37,100,9,37,48,51,100,10,0,0,111,112,116,95,114,101,115,99,117,101,0,0,99,97,115,101,115,0,0,0,109,101,116,104,111,100,95,109,105,115,115,105,110,103,0,0,101,110,97,98,108,101,0,0,91,46,46,46,93,0,0,0,99,97,115,101,95,98,111,100,121,0,0,0,64,50,54,0,64,50,53,0,98,114,97,99,101,95,98,108,111,99,107,0,109,101,116,104,111,100,95,99,97,108,108,0,102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,99,111,110,115,116,97,110,116,0,0,0,0,37,115,32,37,115,32,37,48,50,100,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,32,37,115,37,100,0,0,102,108,111,111,114,0,0,0,109,101,116,104,111,100,115,0,98,108,111,99,107,95,99,97,108,108,0,0,64,50,52,0,115,108,105,99,101,0,0,0,100,111,95,98,108,111,99,107,0,0,0,0,79,80,95,74,77,80,9,9,37,48,51,100,10,0,0,0,108,97,109,98,100,97,95,98,111,100,121,0,102,95,108,97,114,103,108,105,115,116,0,0,33,0,0,0,101,113,108,63,0,0,0,0,98,118,97,114,0,0,0,0,98,118,95,100,101,99,108,115,0,0,0,0,111,112,116,95,98,118,95,100,101,99,108,0,98,108,111,99,107,95,112,97,114,97,109,95,100,101,102,0,111,112,116,95,98,108,111,99,107,95,112,97,114,97,109,0,37,100,0,0,76,79,67,65,76,0,0,0,98,0,0,0,102,105,110,105,116,101,63,0,107,105,110,100,95,111,102,63,0,0,0,0,98,108,111,99,107,95,112,97,114,97,109,0,102,95,109,97,114,103,115,0,115,99,97,110,0,0,0,0,99,97,108,108,0,0,0,0,102,95,109,97,114,103,95,108,105,115,116,0,79,80,95,83,69,84,67,86,9,37,115,9,82,37,100,10,0,0,0,0,102,95,109,97,114,103,0,0,116,111,95,115,121,109,0,0,102,111,114,95,118,97,114,0,105,110,105,116,105,97,108,105,122,101,0,0,61,61,0,0,111,112,116,95,101,108,115,101,0,0,0,0,105,102,95,116,97,105,108,0,112,114,105,109,97,114,121,95,118,97,108,117,101,0,0,0,64,50,51,0,64,50,50,0,40,110,117,108,108,41,0,0,85,84,67,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,37,83,32,105,110,116,111,32,37,83,0,0,0,0,99,101,105,108,0,0,0,0,105,115,95,97,63,0,0,0,64,50,49,0,64,50,48,0,114,105,110,100,101,120,0,0,64,49,57,0,79,80,95,71,69,84,67,86,9,82,37,100,9,37,115,10,0,0,0,0,64,49,56,0,64,49,55,0,110,101,119,0,116,111,95,115,0,0,0,0,64,49,54,0,115,117,112,101,114,99,108,97,115,115,32,109,105,115,109,97,116,99,104,32,102,111,114,32,99,108,97,115,115,32,37,83,0,0,0,0,64,49,53,0,64,49,52,0,64,49,51,0,64,49,50,0,0,0,0,0,110,111,110,101,0,0,0,0,68,97,116,97,0,0,0,0,70,108,111,97,116,0,0,0,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,115,0,0,64,49,49,0,64,49,48,0,114,101,118,101,114,115,101,33,0,0,0,0,64,57,0,0,79,80,95,83,69,84,85,80,86,65,82,9,82,37,100,9,37,100,9,37,100,10,0,0,64,56,0,0,65,0,0,0,64,55,0,0,67,108,97,115,115,0,0,0,105,110,115,112,101,99,116,0,112,114,105,109,97,114,121,0,109,114,104,115,0,0,0,0,97,114,103,115,0,0,0,0,111,112,116,95,98,108,111,99,107,95,97,114,103,0,0,0,98,108,111,99,107,95,97,114,103,0,0,0,99,97,108,108,0,0,0,0,78,111,116,32,97,32,118,97,108,105,100,32,116,105,109,101,46,0,0,0,116,111,95,104,97,115,104,0,70,105,108,101,0,0,0,0,100,105,118,109,111,100,0,0,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,115,101,116,0,0,0,104,97,115,104,0,0,0,0,64,54,0,0,99,111,109,109,97,110,100,95,97,114,103,115,0,0,0,0,114,101,118,101,114,115,101,0,99,97,108,108,95,97,114,103,115,0,0,0,79,80,95,71,69,84,85,80,86,65,82,9,82,37,100,9,37,100,9,37,100,10,0,0,111,112,116,95,99,97,108,108,95,97,114,103,115,0,0,0,111,112,116,95,112,97,114,101,110,95,97,114,103,115,0,0,77,111,100,117,108,101,0,0,117,110,115,104,105,102,116,0,112,97,114,101,110,95,97,114,103,115,0,0,97,114,101,102,95,97,114,103,115,0,0,0,97,114,103,95,118,97,108,117,101,0,0,0,97,114,103,0,114,101,115,119,111,114,100,115,0,0,0,0,98,108,111,99,107,32,103,105,118,101,110,32,116,111,32,121,105,101,108,100,0,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,72,97,115,104,0,0,0,0,82,97,110,103,101,0,0,0,105,110,115,112,101,99,116,0,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,103,101,116,0,0,0,42,0,0,0,111,112,0,0,64,53,0,0,114,101,112,108,97,99,101,0,117,110,100,101,102,95,108,105,115,116,0,0,79,80,95,83,69,84,73,86,9,37,115,9,82,37,100,10,0,0,0,0,102,115,121,109,0,0,0,0,102,110,97,109,101,0,0,0,79,98,106,101,99,116,0,0,115,108,105,99,101,0,0,0,99,112,97,116,104,0,0,0,99,110,97,109,101,0,0,0,108,104,115,0,115,116,114,105,110,103,32,99,111,110,116,97,105,110,115,32,110,117,108,108,32,98,121,116,101,0,0,0,109,108,104,115,95,110,111,100,101,0,0,0,109,108,104,115,95,112,111,115,116,0,0,0,109,111,100,117,108,101,32,100,101,102,105,110,105,116,105,111,110,32,105,110,32,109,101,116,104,111,100,32,98,111,100,121,0,0,0,0,124,105,105,105,105,105,105,105,0,0,0,0,111,110,101,32,104,97,115,104,32,114,101,113,117,105,114,101,100,0,0,0,83,116,114,105,110,103,0,0,116,111,95,115,0,0,0,0,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,100,101,102,105,110,101,100,63,0,0,111,42,0,0,109,108,104,115,95,108,105,115,116,0,0,0,109,108,104,115,95,105,116,101,109,0,0,0,109,97,116,99,104,0,0,0,109,108,104,115,95,98,97,115,105,99,0,0,79,80,95,71,69,84,73,86,9,82,37,100,9,37,115,10,0,0,0,0,109,108,104,115,95,105,110,110,101,114,0,0,109,108,104,115,0,0,0,0,66,97,115,105,99,79,98,106,101,99,116,0,115,105,122,101,0,0,0,0,99,111,109,109,97,110,100,0,64,52,0,0,99,109,100,95,98,114,97,99,101,95,98,108,111,99,107,0,98,108,111,99,107,95,99,111,109,109,97,110,100,0,0,0,99,111,109,109,97,110,100,95,99,97,108,108,0,0,0,0,99,108,97,115,115,32,100,101,102,105,110,105,116,105,111,110,32,105,110,32,109,101,116,104,111,100,32,98,111,100,121,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,99,108,97,115,115,0,0,0,0,105,110,118,97,108,105,100,32,114,97,100,105,120,32,37,83,0,0,0,0,67,97,110,110,111,116,32,103,101,116,32,104,97,110,100,108,101,32,118,97,108,117,101,33,0,0,0,0,72,97,115,104,0,0,0,0,116,111,95,102,0,0,0,0,105,110,115,116,97,110,99,101,95,111,102,63,0,0,0,0,125,0,0,0,101,120,112,114,95,118,97,108,117,101,0,0,101,120,112,114,0,0,0,0,105,110,116,101,114,110,0,0,46,0,0,0,99,111,109,109,97,110,100,95,97,115,103,110,0,0,0,0,79,80,95,83,69,84,77,67,78,83,84,9,82,37,100,58,58,37,115,9,82,37,100,10,0,0,0,0,108,111,99,97,108,0,0,0,64,51,0,0,83,116,114,117,99,116,0,0,99,111,110,99,97,116,0,0,115,116,109,116,0,0,0,0,99,111,110,115,116,97,110,116,32,37,83,32,110,111,116,32,100,101,102,105,110,101,100,0,102,108,97,103,32,97,102,116,101,114,32,119,105,100,116,104,0,0,0,0,124,111,0,0,36,109,114,98,95,105,95,114,97,110,100,95,115,101,101,100,0,0,0,0,115,104,105,102,116,0,0,0,115,116,109,116,115,0,0,0,112,114,111,99,0,0,0,0,77,82,66,95,84,84,95,70,82,69,69,0,78,111,119,32,97,116,32,101,110,100,32,111,102,32,105,110,112,117,116,46,10,0,0,0,99,111,109,112,115,116,109,116,0,0,0,0,115,105,110,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,102,108,111,97,116,33,0,0,98,111,100,121,115,116,109,116,0,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,111,0,0,0,64,50,0,0,101,120,112,101,99,116,101,100,32,82,97,110,103,101,46,0,99,97,108,108,0,0,0,0,110,111,32,98,108,111,99,107,32,103,105,118,101,110,0,0,94,0,0,0,116,111,112,95,115,116,109,116,0,0,0,0,126,0,0,0,84,121,112,101,69,114,114,111,114,0,0,0,46,37,100,0,78,97,78,0,82,79,79,84,95,79,66,74,69,67,84,0,65,114,114,97,121,0,0,0,115,117,99,99,0,0,0,0,105,110,115,116,97,110,99,101,95,101,118,97,108,0,0,0,61,62,0,0,116,111,112,95,115,116,109,116,115,0,0,0,99,97,110,39,116,32,100,117,112,32,37,83,0,0,0,0,62,0,0,0,111,0,0,0,116,111,112,95,99,111,109,112,115,116,109,116,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,64,49,0,0,79,80,95,71,69,84,77,67,78,83,84,9,82,37,100,9,82,37,100,58,58,37,115,10,0,0,0,0,112,114,111,103,114,97,109,0,36,97,99,99,101,112,116,0,110,111,0,0,114,105,110,100,101,120,0,0,39,92,110,39,0,0,0,0,39,59,39,0,39,93,39,0,39,41,39,0,39,40,39,0,60,0,0,0,111,0,0,0,96,37,83,39,32,105,115,32,110,111,116,32,97,32,115,116,114,117,99,116,32,109,101,109,98,101,114,0,37,100,0,0,109,114,117,98,121,95,106,115,95,111,98,106,101,99,116,95,104,97,110,100,108,101,0,0,80,114,111,99,0,0,0,0,110,101,120,116,0,0,0,0,105,110,115,112,101,99,116,0,44,32,0,0,39,96,39,0,39,44,39,0,105,110,105,116,105,97,108,105,122,101,0,0,82,73,84,69,0,0,0,0,39,46,39,0,79,80,95,83,69,84,67,79,78,83,84,9,58,37,115,9,82,37,100,10,0,0,0,0,39,91,39,0,39,125,39,0,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,37,83,32,110,111,116,32,100,101,102,105,110,101,100,32,102,111,114,32,37,83,0,0,0,0,115,116,97,114,116,0,0,0,114,101,118,101,114,115,101,33,0,0,0,0,39,123,39,0,116,76,65,83,84,95,84,79,75,69,78,0,105,100,95,99,111,114,101,95,115,101,116,95,112,111,115,116,101,120,101,0,105,100,95,99,111,114,101,95,100,101,102,105,110,101,95,115,105,110,103,108,101,116,111,110,95,109,101,116,104,111,100,0,105,100,95,99,111,114,101,95,100,101,102,105,110,101,95,109,101,116,104,111,100,0,0,0,62,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,114,101,100,101,102,105,110,105,110,103,32,99,111,110,115,116,97,110,116,32,83,116,114,117,99,116,58,58,37,83,0,0,0,0,0,0,104,97,110,100,108,101,0,0,83,67,108,97,115,115,0,0,104,97,115,104,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,123,0,0,0,105,100,95,99,111,114,101,95,117,110,100,101,102,95,109,101,116,104,111,100,0,0,0,0,98,117,103,58,32,0,0,0,105,100,95,99,111,114,101,95,115,101,116,95])
.concat([118,97,114,105,97,98,108,101,95,97,108,105,97,115,0,0,105,110,100,101,120,0,0,0,105,100,95,99,111,114,101,95,115,101,116,95,109,101,116,104,111,100,95,97,108,105,97,115,0,0,0,0,79,80,95,71,69,84,67,79,78,83,84,9,82,37,100,9,58,37,115,10,0,0,0,0,105,100,67,70,85,78,67,0,105,100,73,70,85,78,67,0,99,97,110,110,111,116,32,114,101,109,111,118,101,32,37,83,32,102,111,114,32,37,83,0,114,101,118,101,114,115,101,0,105,100,82,101,115,112,111,110,100,95,116,111,0,0,0,0,105,100,78,85,76,76,0,0,39,126,39,0,39,33,39,0,116,85,77,73,78,85,83,95,78,85,77,0,38,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,105,100,101,110,116,105,102,105,101,114,32,37,83,32,110,101,101,100,115,32,116,111,32,98,101,32,99,111,110,115,116,97,110,116,0,0,37,42,115,0,67,97,110,110,111,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,33,0,105,67,108,97,115,115,0,0,101,113,108,63,0,0,0,0,104,97,115,104,0,0,0,0,123,46,46,46,125,0,0,0,39,37,39,0,39,47,39,0,105,110,99,108,117,100,101,63,0,0,0,0,61,61,61,0,39,42,39,0,79,80,95,83,69,84,71,76,79,66,65,76,9,58,37,115,9,82,37,100,10,0,0,0,39,45,39,0,39,43,39,0,116,111,95,115,0,0,0,0,110,0,0,0,114,101,112,108,97,99,101,0,39,38,39,0,39,94,39,0,39,124,39,0,39,60,39,0,39,62,39,0,94,0,0,0,122,111,110,101,0,0,0,0,98,114,111,107,101,110,32,109,101,109,98,101,114,115,0,0,73,110,102,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,67,108,97,115,115,0,0,0,62,62,0,0,101,120,116,101,110,100,0,0,123,125,0,0,39,58,39,0,39,63,39,0,104,97,115,104,0,0,0,0,39,61,39,0,79,80,95,71,69,84,71,76,79,66,65,76,9,82,37,100,9,58,37,115,10,0,0,0,116,76,79,87,69,83,84,0,116,76,73,84,69,82,65,76,95,68,69,76,73,77,0,0,42,0,0,0,112,117,115,104,0,0,0,0,116,72,69,82,69,68,79,67,95,69,78,68,0,0,0,0,115,117,112,101,114,99,108,97,115,115,32,109,117,115,116,32,98,101,32,97,32,67,108,97,115,115,32,40,37,83,32,103,105,118,101,110,41,0,0,0,116,72,69,82,69,68,79,67,95,66,69,71,0,0,0,0,116,76,65,77,66,69,71,0,116,83,84,82,73,78,71,95,68,86,65,82,0,0,0,0,116,88,83,84,82,73,78,71,95,66,69,71,0,0,0,0,121,101,97,114,0,0,0,0,124,0,0,0,115,116,114,117,99,116,32,115,105,122,101,32,100,105,102,102,101,114,115,0,78,97,78,0,78,111,32,118,97,108,105,100,32,104,97,110,100,108,101,32,105,115,32,112,114,111,118,105,100,101,100,33,0,0,0,0,79,98,106,101,99,116,0,0,60,60,0,0,101,113,117,97,108,63,0,0,101,113,108,63,0,0,0,0,116,83,84,82,73,78,71,95,66,69,71,0,116,83,89,77,66,79,76,83,95,66,69,71,0,0,0,0,103,115,117,98,33,0,0,0,116,87,79,82,68,83,95,66,69,71,0,0,79,80,95,76,79,65,68,70,9,82,37,100,10,0,0,0,116,82,69,71,69,88,80,95,66,69,71,0,60,61,62,0,116,83,89,77,66,69,71,0,111,111,0,0,112,111,112,0,116,76,65,77,66,68,65,0,116,65,77,80,69,82,0,0,116,83,84,65,82,0,0,0,116,76,66,82,65,67,69,95,65,82,71,0,116,76,66,82,65,67,69,0,121,100,97,121,0,0,0,0,37,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,46,46,0,0,105,0,0,0,77,111,100,117,108,101,0,0,94,0,0,0,101,113,108,63,0,0,0,0,116,111,95,115,0,0,0,0,116,76,66,82,65,67,75,0,116,82,80,65,82,69,78,0,103,115,117,98,0,0,0,0,116,76,80,65,82,69,78,95,65,82,71,0,79,80,95,76,79,65,68,84,9,82,37,100,10,0,0,0,116,76,80,65,82,69,78,0,116,65,83,83,79,67,0,0,99,97,110,39,116,32,109,97,107,101,32,115,117,98,99,108,97,115,115,32,111,102,32,67,108,97,115,115,0,0,0,0,108,101,110,103,116,104,0,0,116,79,80,95,65,83,71,78,0,0,0,0,116,67,79,76,79,78,51,0,116,67,79,76,79,78,50,0,116,82,83,72,70,84,0,0,116,76,83,72,70,84,0,0,119,100,97,121,0,0,0,0,47,0,0,0,99,97,108,108,0,0,0,0,37,37,108,37,99,0,0,0,111,0,0,0,116,114,117,101,0,0,0,0,124,0,0,0,100,117,112,0,105,110,115,112,101,99,116,0,116,65,83,69,84,0,0,0,116,65,82,69,70,0,0,0,101,113,108,63,0,0,0,0,99,105,105,100,120,0,0,0,116,68,79,84,51,0,0,0,79,80,95,76,79,65,68,83,69,76,70,9,82,37,100,10,0,0,0,0,116,68,79,84,50,0,0,0,116,78,77,65,84,67,72,0,99,97,110,39,116,32,109,97,107,101,32,115,117,98,99,108,97,115,115,32,111,102,32,115,105,110,103,108,101,116,111,110,32,99,108,97,115,115,0,0,108,97,115,116,0,0,0,0,116,77,65,84,67,72,0,0,116,79,82,79,80,0,0,0,116,65,78,68,79,80,0,0,116,76,69,81,0,0,0,0,116,71,69,81,0,0,0,0,117,116,99,63,0,0,0,0,42,0,0,0,42,38,0,0,48,66,0,0,111,111,0,0,102,97,108,115,101,0,0,0,38,0,0,0,99,108,111,110,101,0,0,0,118,97,108,117,101,115,0,0,116,78,69,81,0,0,0,0,116,69,81,81,0,0,0,0,101,109,112,116,121,63,0,0,115,101,116,95,98,97,99,107,116,114,97,99,101,0,0,0,116,69,81,0,79,80,95,76,79,65,68,78,73,76,9,82,37,100,10,0,116,67,77,80,0,0,0,0,116,80,79,87,0,0,0,0,62,0,0,0,106,111,105,110,0,0,0,0,116,85,77,73,78,85,83,0,116,85,80,76,85,83,0,0,116,82,69,71,69,88,80,95,69,78,68,0,116,66,65,67,75,95,82,69,70,0,0,0,116,78,84,72,95,82,69,70,0,0,0,0,117,115,101,99,0,0,0,0,45,0,0,0,42,0,0,0,48,98,0,0,112,97,114,101,110,116,95,111,98,106,101,99,116,0,0,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,37,83,32,116,111,32,73,110,116,101,103,101,114,32,40,37,83,35,37,83,32,103,105,118,101,115,32,37,83,41,0,0,0,0,126,0,0,0,99,108,97,115,115,0,0,0,118,97,108,117,101,63,0,0,116,83,84,82,73,78,71,95,77,73,68,0,116,83,84,82,73,78,71,95,80,65,82,84,0,0,0,0,100,111,119,110,99,97,115,101,33,0,0,0,124,111,0,0,37,83,32,105,115,32,110,111,116,32,97,32,115,121,109,98,111,108,0,0,108,97,115,116,112,99,0,0,116,83,84,82,73,78,71,0,79,80,95,76,79,65,68,83,89,77,9,82,37,100,9,58,37,115,10,0,103,109,0,0,116,82,69,71,69,88,80,0,99,111,114,114,117,112,116,101,100,32,115,116,114,117,99,116,0,0,0,0,115,119,97,112,99,97,115,101,0,0,0,0,116,88,83,84,82,73,78,71,0,0,0,0,35,60,67,108,97,115,115,58,0,0,0,0,109,97,108,102,111,114,109,101,100,32,102,111,114,109,97,116,32,115,116,114,105,110,103,32,45,32,92,37,37,83,0,0,108,97,115,116,0,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,116,67,72,65,82,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,105,110,115,112,101,99,116,0,77,82,66,95,84,84,95,70,65,76,83,69,0,0,0,0,37,83,32,111,117,116,32,111,102,32,99,104,97,114,32,114,97,110,103,101,0,0,0,0,82,101,97,100,105,110,103,32,97,32,116,111,107,101,110,58,32,0,0,0,116,70,76,79,65,84,0,0,84,79,76,69,82,65,78,67,69,0,0,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,110,32,105,110,116,101,103,101,114,33,0,0,0,116,73,78,84,69,71,69,82,0,0,0,0,121,105,101,108,100,0,0,0,114,97,115,115,111,99,0,0,84,121,112,101,69,114,114,111,114,0,0,0,116,76,65,66,69,76,0,0,109,101,116,104,111,100,95,109,105,115,115,105,110,103,0,0,38,0,0,0,116,67,86,65,82,0,0,0,97,114,105,116,121,0,0,0,116,111,95,102,0,0,0,0,43,0,0,0,62,0,0,0,48,88,0,0,110,111,110,32,102,108,111,97,116,32,118,97,108,117,101,0,102,124,102,0,105,42,0,0,116,111,95,105,0,0,0,0,61,61,0,0,95,95,115,101,110,100,95,95,0,0,0,0,115,116,111,114,101,0,0,0,116,67,79,78,83,84,65,78,84,0,0,0,99,97,110,39,116,32,99,108,111,110,101,32,37,83,0,0,116,111,95,104,97,115,104,0,58,0,0,0,116,73,86,65,82,0,0,0,100,111,119,110,99,97,115,101,0,0,0,0,111,0,0,0,116,71,86,65,82,0,0,0,79,80,95,76,79,65,68,73,9,82,37,100,9,37,100,10,0,0,0,0,116,70,73,68,0,0,0,0,116,73,68,69,78,84,73,70,73,69,82,0,58,58,0,0,107,101,121,119,111,114,100,95,95,69,78,67,79,68,73,78,71,95,95,0,105,110,100,101,120,0,0,0,107,101,121,119,111,114,100,95,95,70,73,76,69,95,95,0,99,104,111,112,33,0,0,0,107,101,121,119,111,114,100,95,95,76,73,78,69,95,95,0,107,101,121,119,111,114,100,95,69,78,68,0,107,101,121,119,111,114,100,95,66,69,71,73,78,0,0,0,116,111,95,105,0,0,0,0,91,93,61,0,61,0,0,0,48,120,0,0,102,105,0,0,74,115,65,114,114,97,121,0,98,97,115,101,32,115,112,101,99,105,102,105,101,100,32,102,111,114,32,110,111,110,32,115,116,114,105,110,103,32,118,97,108,117,101,0,37,0,0,0,95,95,105,100,95,95,0,0,115,105,122,101,0,0,0,0,107,101,121,119,111,114,100,95,97,108,105,97,115,0,0,0,109,111,100,105,102,105,101,114,95,114,101,115,99,117,101,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,83,99,114,105,112,116,69,114,114,111,114,0,41,0,0,0,109,111,100,105,102,105,101,114,95,117,110,116,105,108,0,0,79,80,95,76,79,65,68,76,9,82,37,100,9,76,40,37,100,41,10,0,109,111,100,105,102,105,101,114,95,119,104,105,108,101,0,0,109,111,100,105,102,105,101,114,95,117,110,108,101,115,115,0,95,95,99,108,97,115,115,112,97,116,104,95,95,0,0,0,71,67,0,0,109,111,100,105,102,105,101,114,95,105,102,0,102,105,114,115,116,0,0,0,107,101,121,119,111,114,100,95,110,111,116,0,107,101,121,119,111,114,100,95,111,114,0,0,107,101,121,119,111,114,100,95,97,110,100,0,107,101,121,119,111,114,100,95,102,97,108,115,101,0,0,0,115,101,99,0,45,64,0,0,32,0,0,0,48,0,0,0,102,102,0,0,105,110,118,111,107,101,95,105,110,116,101,114,110,97,108,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,42,0,0,0,61,61,61,0,115,104,105,102,116,0,0,0,107,101,121,119,111,114,100,95,116,114,117,101,0,0,0,0,119,97,114,110,105,110,103,58,32,0,0,0,107,101,121,119,111,114,100,95,110,105,108,0,99,104,111,112,0,0,0,0,32,40,0,0,107,101,121,119,111,114,100,95,115,101,108,102,0,0,0,0,79,80,95,77,79,86,69,9,82,37,100,9,82,37,100,10,0,0,0,0,107,101,121,119,111,114,100,95,115,117,112,101,114,0,0,0,107,101,121,119,111,114,100,95,121,105,101,108,100,0,0,0,124,111,0,0,107,101,121,119,111,114,100,95,114,101,116,117,114,110,0,0,101,109,112,116,121,63,0,0,107,101,121,119,111,114,100,95,100,111,95,76,65,77,66,68,65,0,0,0,107,101,121,119,111,114,100,95,100,111,95,98,108,111,99,107,0,0,0,0,107,101,121,119,111,114,100,95,100,111,95,99,111,110,100,0,107,101,121,119,111,114,100,95,100,111,0,0,109,111,110,116,104,0,0,0,44,32,0,0,43,64,0,0,105,110,118,97,108,105,100,32,109,98,115,116,114,105,110,103,32,115,101,113,117,101,110,99,101,0,0,0,102,0,0,0,74,115,70,117,110,99,116,105,111,110,0,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,110,105,108,32,105,110,116,111,32,73,110,116,101,103,101,114,0,0,45,0,0,0,33,61,0,0,114,101,112,108,97,99,101,0,107,101,121,119,111,114,100,95,105,110,0,0,107,101,121,119,111,114,100,95,114,101,116,114,121,0,0,0,99,104,111,109,112,33,0,0,83,116,97,110,100,97,114,100,69,114,114,111,114,0,0,0,58,32,0,0,107,101,121,119,111,114,100,95,114,101,100,111,0,0,0,0,79,80,95,78,79,80,10,0,107,101,121,119,111,114,100,95,110,101,120,116,0,0,0,0,107,101,121,119,111,114,100,95,98,114,101,97,107,0,0,0,42,38,0,0,107,101,121,119,111,114,100,95,102,111,114,0,105,100,50,110,97,109,101,0,100,101,108,101,116,101,95,97,116,0,0,0,107,101,121,119,111,114,100,95,117,110,116,105,108,0,0,0,107,101,121,119,111,114,100,95,119,104,105,108,101,0,0,0,107,101,121,119,111,114,100,95,119,104,101,110,0,0,0,0,107,101,121,119,111,114,100,95,99,97,115,101,0,0,0,0,109,111,110,0,58,46,46,46,62,0,0,0,42,42,0,0,105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,0,0,0,101,114,102,99,0,0,0,0,99,114,101,97,116,101,0,0,101,113,108,63,0,0,0,0,43,0,0,0,61,61,0,0,109,101,109,98,101,114,63,0,107,101,121,119,111,114,100,95,101,108,115,101,0,0,0,0,107,101,121,119,111,114,100,95,101,108,115,105,102,0,0,0,99,104,111,109,112,0,0,0,58,0,0,0,107,101,121,119,111,114,100,95,116,104,101,110,0,0,0,0,37,48,51,100,32,0,0,0,107,101,121,119,111,114,100,95,117,110,108,101,115,115,0,0,107,101,121,119,111,114,100,95,105,102,0,0,117,110,100,101,102,105,110,101,100,32,109,101,116,104,111,100,32,39,37,83,39,32,102,111,114,32,99,108,97,115,115,32,37,83,0,0,107,101,121,119,111,114,100,95,101,110,100,0,99,111,110,99,97,116,0,0,84,121,112,101,69,114,114,111,114,0,0,0,107,101,121,119,111,114,100,95,101,110,115,117,114,101,0,0,107,101,121,119,111,114,100,95,114,101,115,99,117,101,0,0,107,101,121,119,111,114,100,95,98,101,103,105,110,0,0,0,107,101,121,119,111,114,100,95,117,110,100,101,102,0,0,0,109,105,110,0,35,60,115,116,114,117,99,116,32,0,0,0,62,62,0,0,37,99,32,114,101,113,117,105,114,101,115,32,97,32,99,104,97,114,97,99,116,101,114,0,99,111,117,110,116,95,111,98,106,101,99,116,115,0,0,0,101,114,102,0,91,93,61,0,116,111,95,102,0,0,0,0,70,105,120,110,117,109,0,0,115,105,110,103,108,101,116,111,110,95,99,108,97,115,115,0,108,101,110,103,116,104,0,0,107,101,121,119,111,114,100,95,100,101,102,0,107,101,121,119,111,114,100,95,109,111,100,117,108,101,0,0,99,97,112,105,116,97,108,105,122,101,33,0,108,105,110,101,0,0,0,0,107,101,121,119,111,114,100,95,99,108,97,115,115,0,0,0,105,114,101,112,32,37,100,32,110,114,101,103,115,61,37,100,32,110,108,111,99,97,108,115,61,37,100,32,112,111,111,108,115,61,37,100,32,115,121,109,115,61,37,100,10,0,0,0,36,117,110,100,101,102,105,110,101,100,0,0,111,0,0,0,101,114,114,111,114,0,0,0,99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,0,0,36,101,110,100,0,0,0,0,99,108,101,97,114,0,0,0,68,101,108,101,116,105,110,103,0,0,0,0,108,105,110,101,32,37,100,58,37,100,58,32,37,115,10,0,37,115,58,37,100,58,37,100,58,32,37,115,10,0,0,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,32,105,110,32,98,97,99,107,114,101,102,95,101,114,114,111,114,40,41,32,58,32,110,61,62,99,97,114,32,61,61,32,37,100,0,0,0,0,109,100,97,121,0,0,0,0,105,110,99,111,110,115,105,115,116,101,110,116,32,115,116,114,117,99,116,0,60,60,0,0,37,0,0,0,79,98,106,101,99,116,83,112,97,99,101,0,104,121,112,111,116,0,0,0,91,93,0,0,98,97,100,32,118,97,108,117,101,32,102,111,114,32,114,97,110,103,101,0,70,108,111,97,116,0,0,0,116,111,95,105,110,116,0,0,114,97,105,115,101,0,0,0,107,101,121,115,0,0,0,0,99,97,110,39,116,32,115,101,116,32,118,97,114,105,97,98,108,101,32,36,37,99,0,0,99,97,110,39,116,32,115,101,116,32,118,97,114,105,97,98,108,101,32,36,37,100,0,0,99,97,112,105,116,97,108,105,122,101,0,0,102,105,108,101,0,0,0,0,109,0,0,0,116,111,111,32,99,111,109,112,108,101,120,32,101,120,112,114,101,115,115,105,111,110,0,0,120,0,0,0,105,0,0,0,109,111,100,117,108,101,95,101,118,97,108,47,99,108,97,115,115,95,101,118,97,108,32,119,105,116,104,32,115,116,114,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,115,0,0,0,91,93,61,0,117,110,107,110,111,119,110,32,114,101,103,101,120,112,32,111,112,116,105,111,110,37,115,32,45,32,37,115,0,0,0,0,117,110,116,101,114,109,105,110,97,116,101,100,32,115,116,114,105,110,103,32,109,101,101,116,115,32,101,110,100,32,111,102,32,102,105,108,101,0,0,0,99,97,110,39,116,32,102,105,110,100,32,115,116,114,105,110,103,32,34,37,115,34,32,97,110,121,119,104,101,114,101,32,98,101,102,111,114,101,32,69,79,70,0,0,117,110,116,101,114,109,105,110,97,116,101,100,32,104,101,114,101,32,100,111,99,117,109,101,110,116,32,105,100,101,110,116,105,102,105,101,114,0,0,0,108,111,99,97,108,116,105,109,101,0,0,0,101,113,108,63,0,0,0,0,33,61,0,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,99,104,97,114,97,99,116,101,114,32,45,32,37,0,0,0,0,77,82,66,95,84,84,95,68,65,84,65,0,108,100,101,120,112,0,0,0,115,101,116,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,110,105,108,32,105,110,116,111,32,70,108,111,97,116,0,0,0,0,116,111,95,105,0,0,0,0,105,116,101,114,97,116,111,114,63,0,0,0,107,101,121,63,0,0,0,0,73,110,118,97,108,105,100,32,101,115,99,97,112,101,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,0,115,116,114,105,110,103,32,116,111,111,32,108,111,110,103,32,40,116,114,117,110,99,97,116,101,100,41,0,91,93,0,0,109,101,115,103,0,0,0,0,97,109,98,105,103,117,111,117,115,32,102,105,114,115,116,32,97,114,103,117,109,101,110,116,59,32,112,117,116,32,112,97,114,101,110,116,104,101,115,101,115,32,111,114,32,101,118,101,110,32,115,112,97,99,101,115,0,0,0,0,98,117,103,58,32,100,105,115,112,97,116,99,104,32,111,110,32,110,111,110,32,74,77,80,32,111,112,10,0,0,0,0,119,104,105,108,101,0,0,0,99,108,97,115,115,0,0,0,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,66,69,71,73,78,0,0,0,60,60,0,0,97,108,105,97,115,0,0,0,69,78,68,0,95,95,69,78,67,79,68,73,78,71,95,95,0,0,0,0,95,95,70,73,76,69,95,95,0,0,0,0,84,121,112,101,69,114,114,111,114,0,0,0,104,111,117,114,0,0,0,0,116,111,95,115,0,0,0,0,60,61,0,0,112,114,101,99,105,115,105,111,110,32,116,111,111,32,98,105,103,0,0,0,77,82,66,95,84,84,95,69,78,86,0,0,102,114,101,120,112,0,0,0,103,101,116,0,60,61,62,0,116,111,95,105,110,116,0,0,110,101,119,0,103,108,111,98,97,108,95,118,97,114,105,97,98,108,101,115,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,95,95,76,73,78,69,95,95,0,0,0,0,98,101,103,105,110,0,0,0,61,126,0,0,83,121,110,116,97,120,69,114,114,111,114,0,109,111,100,117,108,101,0,0,116,111,111,32,109,97,110,121,32,115,121,109,98,111,108,115,32,40,109,97,120,32,50,53,54,41,0,0,115,117,112,101,114,0,0,0,110,101,120,116,0,0,0,0,124,83,38,0,114,101,100,111,0,0,0,0,43,0,0,0,99,97,115,101,0,0,0,0,105,102,0,0,114,101,116,114,121,0,0,0,119,104,101,110,0,0,0,0,109,97,105,110,0,0,0,0,103,109,116,105,109,101,0,0,105,110,115,112,101,99,116,0,62,61,0,0,112,114,101,99,105,115,105,111,110,32,103,105,118,101,110,32,116,119,105,99,101,0,0,0,77,82,66,95,84,84,95,70,73,76,69,0,99,98,114,116,0,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,46,46,46,0,99,108,97,115,115,32,111,114,32,109,111,100,117,108,101,32,114,101,113,117,105,114,101,100,0,0,0,0,73,110,116,101,103,101,114,0,98,108,111,99,107,95,103,105,118,101,110,63,0,0,0,0,95,95,105,110,105,116,95,99,111,114,101,0,105,110,0,0,111,114,0,0,61,61,0,0,83,99,114,105,112,116,69,114,114,111,114,0,40,117,110,107,110,111,119,110,41,0,0,0,117,110,100,101,102,0,0,0,97,116,0,0,112,111,111,108,32,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,0,0,102,111,114,0,117,110,105,110,105,116,105,97,108,105,122,101,100,32,115,116,114,117,99,116,0,0,0,0,115,119,97,112,99,97,115,101,33,0,0,0,121,105,101,108,100,0,0,0,116,111,111,32,102,101,119,32,97,114,103,117,109,101,110,116,115,0,0,0,99,121,99,108,105,99,32,105,110,99,108,117,100,101,32,100,101,116,101,99,116,101,100,0,102,111,114,109,97,116,0,0,102,105,114,115,116,0,0,0,82,97,110,100,111,109,0,0,100,111,0,0,116,111,95,115,0,0,0,0,91,93,0,0,70,82,69,69,0,0,0,0,82,97,110,103,101,69,114,114,111,114,0,0,69,110,116,101,114,105,110,103,32,115,116,97,116,101,32,37,100,10,0,0,97,110,100,0,69,0,0,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,115,116,114,105,110,103,33,0,100,101,102,0,114,101,115,117,109,101,0,0,97,116,0,0,111,0,0,0,114,101,116,117,114,110,0,0,110,101,103,97,116,105,118,101,32,97,114,103,99,32,102,111,114,32,102,117,110,99,97,108,108,32,40,37,83,41,0,0,110,101,119,0,117,110,108,101,115,115,0,0,103,109,116,63,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,33,126,0,0,117,110,110,117,109,98,101,114,101,100,40,37,83,41,32,109,105,120,101,100,32,119,105,116,104,32,110,97,109,101,100,0,84,121,112,101,69,114,114,111,114,0,0,0,77,82,66,95,84,84,95,69,88,67,69,80,84,73,79,78,0,0,0,0,115,113,114,116,0,0,0,0,74,115,79,98,106,101,99,116,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,62,0,0,0,117,110,116,105,108,0,0,0,60,61,62,0,75,101,114,110,101,108,0,0,105,110,99,108,117,100,101,63,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,84,121,112,101,69,114,114,111,114,0,0,0,72,97,115,104,0,0,0,0,45,60,0,0,116,114,117,101,0,0,0,0,60,61,62,0,83,116,97,110,100,97,114,100,69,114,114,111,114,0,0,0,114,101,115,99,117,101,0,0,117,110,107,110,111,119,110,32,108,104,115,32,37,100,10,0,101,108,115,105,102,0,0,0,115,101,108,102,0,0,0,0,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,115,112,101,99,105,102,105,101,114,32,37,83,0,0,0,102,97,108,115,101,0,0,0,69,110,117,109,101,114,97,98,108,101,0,0,110,111,116,0,42,0,0,0,116,104,101,110,0,0,0,0,101,110,100,0,101,110,115,117,114,101,0,0,103,101,116,117,116,99,0,0,105,110,105,116,105,97,108,105,122,101,0,0,61,126,0,0,117,110,110,117,109,98,101,114,101,100,40,37,83,41,32,109,105,120,101,100,32,119,105,116,104,32,110,117,109,98,101,114,101,100,0,0,77,82,66,95,84,84,95,82,65,78,71,69,0,0,0,0,108,111,103,49,48,0,0,0,103,108,111,98,97,108,0,0,101,113,108,63,0,0,0,0,58,0,0,0,97,98,115,0,114,101,115,112,111,110,100,95,116,111,95,109,105,115,115,105,110,103,63,0,104,97,115,95,118,97,108,117,101,63,0,0,110,105,108,0,101,108,115,101,0,0,0,0,105,110,115,112,101,99,116,0,69,78,68,0,0,0,0,0,105,110,115,112,101,99,116,0,98,114,101,97,107,0,0,0,99,97,110,110,111,116,32,115,101,116,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,0,0,0,0,101,97,99,104,0,0,0,0,95,95,69,78,68,95,95,0,73,110,118,97,108,105,100,32,99,104,97,114,32,96,92,120,37,48,50,88,39,32,105,110,32,101,120,112,114,101,115,115,105,111,110,0,37,83,32,105,115,32,110,111,116,32,97,32,115,121,109,98,111,108,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,96,64,64,37,99,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0,0,116,111,95,97,114,121,0,0,96,64,37,99,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0,0,0,105,110,99,111,109,112,108,101,116,101,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,115,121,110,116,97,120,0,0,0,0,105,110,99,111,109,112,108,101,116,101,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,115,121,110,116,97,120,0,84,121,112,101,69,114,114,111,114,0,0,0,105,110,99,111,109,112,108,101,116,101,32,103,108,111,98,97,108,32,118,97,114,105,97,98,108,101,32,115,121,110,116,97,120,0,0,0,103,101,116,108,111,99,97,108,0,0,0,0,69,110,117,109,101,114,97,98,108,101,0,0,109,101,109,98,101,114,115,0,118,97,108,32,116,111,111,32,98,105,103,0,61,61,61,0,77,82,66,95,84,84,95,83,84,82,73,78,71,0,0,0,108,111,103,50,0,0,0,0,67,111,109,112,97,114,97,98,108,101,0,0,119,105,110,100,111,119,0,0,105,110,115,112,101,99,116,0,35,60,0,0,113,117,111,0,37,83,32,105,115,32,110,111,116,32,97,32,115,121,109,98,111,108,0,0,104,97,115,95,107,101,121,63,0,0,0,0,117,110,116,101,114,109,105,110,97,116,101,100,32,113,117,111,116,101,100,32,115,116,114,105,110,103,32,109,101,101,116,115,32,101,110,100,32,111,102,32,102,105,108,101,0,0,0,0,78,97,109,101,69,114,114,111,114,0,0,0,116,114,97,99,101,58,10,0,117,110,107,110,111,119,110,32,116,121,112,101,32,111,102,32,37,115,116,114,105,110,103,0,108,101,110,103,116,104,0,0,109,101,115,115,97,103,101,0,102,108,111,97,116,32,37,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,117,110,101,120,112,101,99,116,101,100,32,98,114,101,97,107,0,0,0,0,99,111,114,114,117,112,116,101,100,32,102,108,111,97,116,32,118,97,108,117,101,32,37,115,0,0,0,0,116,114,97,105,108,105,110,103,32,96,37,99,39,32,105,110,32,110,117,109,98,101,114,0,105,110,115,112,101,99,116,0,48,0,0,0,65,114,114,97,121,0,0,0,73,110,118,97,108,105,100,32,111,99,116,97,108,32,100,105,103,105,116,0,110,117,109,101,114,105,99,32,108,105,116,101,114,97,108,32,119,105,116,104,111,117,116,32,100,105,103,105,116,115,0,0,110,111,32,46,60,100,105,103,105,116,62,32,102,108,111,97,116,105,110,103,32,108,105,116,101,114,97,108,32,97,110,121,109,111,114,101,59,32,112,117,116,32,48,32,98,101,102,111,114,101,32,100,111,116,0,0,124,124,0,0,103,101,116,103,109,0,0,0,84,105,109,101,0,0,0,0,91,93,61,0,107,101,121,37,83,32,110,111,116,32,102,111,117,110,100,0,61,61,0,0,77,82,66,95,84,84,95,72,65,83,72,0,108,111,103,0,103,101,116,95,114,111,111,116,95,111,98,106,101,99,116,0,116,111,95,115,0,0,0,0,117,110,107,110,111,119,110,32,116,121,112,101,32,37,83,32,40,37,83,32,103,105,118,101,110,41,0,0,47,0,0,0,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,37,83,32,110,111,116,32,100,101,102,105,110,101,100,0,0,0,0,101,109,112,116,121,63,0,0,96,38,39,32,105,110,116,101,114,112,114,101,116,101,100,32,97,115,32,97,114,103,117,109,101,110,116,32,112,114,101,102,105,120,0,0,97,108,108,95,115,121,109,98,111,108,115,0,38,38,0,0,115,105,122,101,0,0,0,0,109,114,98,95,114,101,97,108,108,111,99,0,116,111,95,115,0,0,0,0,105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,59,32,117,115,101,32,63,92,37,99,0,0,109,97,108,102,111,114,109,101,100,32,114,101,97,100,105,110,116,32,105,110,112,117,116,0,105,110,99,111,109,112,108,101,116,101,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,0,10,61,101,110,100,10,0,0,116,111,95,105,110,116,0,0,98,101,103,105,110,10,0,0,110,101,103,97,116,105,118,101,32,97,114,114,97,121,32,115,105,122,101,0,96,42,39,32,105,110,116,101,114,112,114,101,116,101,100,32,97,115,32,97,114,103,117,109,101,110,116,32,112,114,101,102,105,120,0,0,95,95,109,101,109,98,101,114,115,95,95,0,61,61,61,0,83,99,114,105,112,116,69,114,114,111,114,0,100,117,109,112,0,0,0,0,83,121,110,116,97,120,69,114,114,111,114,0,100,115,116,63,0,0,0,0,91,93,0,0,75,101,121,69,114,114,111,114,0,0,0,0,60,61,62,0,77,82,66,95,84,84,95,65,82,82,65,89,0,0,0,0,101,120,112,0,77,114,117,98,121,74,115,0,109,101,109,98,101,114,63,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,116,121,112,101,32,37,83,32,40,101,120,112,101,99,116,101,100,32,37,83,41,0,0,0,0,42,42,0,0,108,97,115,116,112,99,0,0,95,95,100,101,108,101,116,101,0,0,0,0,108,105,110,101,32,37,100,58,32,37,115,10,0,0,0,0,110,111,100,101,32,116,121,112,101,58,32,37,100,32,40,48,120,37,120,41,10,0,0,0,98,121,116,101,115,105,122,101,0,0,0,0,61,61,0,0,78,79,68,69,95,72,69,82,69,68,79,67,58,10,0,0,105,110,116,101,114,110,0,0,78,79,68,69,95,80,79,83,84,69,88,69,58,10,0,0,78,79,68,69,95,83,68,69,70,58,10,0,42,0,0,0,73,110,116,101,103,101,114,0,75,101,114,110,101,108,0,0,37,115,10,0,124,105,0,0,95,95,111,117,116,101,114,95,95,0,0,0,78,79,68,69,95,68,69,70,58,10,0,0,82,97,110,103,101,0,0,0,78,79,68,69,95,83,67,76,65,83,83,58,10,0,0,0,78,79,68,69,95,77,79,68,85,76,69,58,10,0,0,0,115,117,112,101,114,58,10,0,100,97,121,0,61,61,0,0,110,97,109,101,100,37,83,32,97,102,116,101,114,32,110,117,109,98,101,114,101,100,0,0,99,108,97,115,115,47,109,111,100,117,108,101,32,110,97,109,101,32,109,117,115,116,32,98,101,32,67,79,78,83,84,65,78,84,0,0,114,97,110,100,0,0,0,0,77,82,66,95,84,84,95,80,82,79,67,0,97,116,97,110,104,0,0,0,69,114,114,111,114,32,111,99,99,117,114,115,32,119,104,101,110,32,108,111,99,97,116,105,110,103,32,116,104,101,32,102,117,110,99,116,105,111,110,32,116,111,32,99,97,108,108,33,0,0,0,0,108,97,115,116,0,0,0,0,83,121,109,98,111,108,0,0,45,64,0,0,0,0,0,0,100,101,102,97,117,108,116,95,112,114,111,99,61,0,0,0,58,37,115,10,0,0,0,0,78,79,68,69,95,67,76,65,83,83,58,10,0,0,0,0,43,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,108,97,109,98,100,97,63,0,58,10,0,0,117,110,100,101,102,95,109,101,116,104,111,100,0,0,0,0,32,37,115,0,111,0,0,0,78,79,68,69,95,85,78,68,69,70,0,0,97,0,0,0,102,108,111,97,116,32,116,111,111,32,98,105,103,32,102,111,114,32,105,110,116,0,0,0,78,79,68,69,95,65,76,73,65,83,32,37,115,32,37,115,58,10,0,0,101,120,112,101,99,116,101,100,32,70,105,120,110,117,109,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,0,0,0,0,78,79,68,69,95,70,65,76,83,69,10,0,124,72,0,0,78,79,68,69,95,84,82,85,69,10,0,0,78,79,68,69,95,78,73,76,10,0,0,0,73,110,116,101,103,101,114,0,78,79,68,69,95,83,69,76,70,10,0,0,99,116,105,109,101,0,0,0,110,101,119,0,110,97,109,101,100,37,83,32,97,102,116,101,114,32,117,110,110,117,109,98,101,114,101,100,40,37,83,41,0,0,0,0,100,121,110,97,109,105,99,32,99,111,110,115,116,97,110,116,32,97,115,115,105,103,110,109,101,110,116,0,77,82,66,95,84,84,95,83,67,76,65,83,83,0,0,0,97,99,111,115,104,0,0,0,99,97,108,108,95,112,114,111,99,0,0,0,115,116,97,99,107,32,108,101,118,101,108,32,116,111,111,32,100,101,101,112,46,32,40,108,105,109,105,116,61,40,48,120,52,48,48,48,48,32,45,32,49,50,56,41,41,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,70,105,120,110,117,109,0,0,43,64,0,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,100,101,102,97,117,108,116,95,112,114,111,99,0,0,0,0,78,79,68,69,95,83,89,77,32,58,37,115,10,0,0,0,111,112,116,58,32,37,115,10,0,0,0,0,67,111,109,112,97,114,97,98,108,101,0,0,97,114,101,110,97,32,111,118,101,114,102,108,111,119,32,101,114,114,111,114,0,0,0,0,116,97,105,108,58,32,37,115,10,0,0,0,69,120,99,101,112,116,105,111,110,0,0,0,83,116,97,114,116,105,110,103,32,112,97,114,115,101,10,0,77,97,116,104,0,0,0,0,97,108,105,97,115,95,109,101,116,104,111,100,0,0,0,0,78,79,68,69,95,68,82,69,71,88,10,0,78,79,68,69,95,82,69,71,88,32,47,37,115,47,37,115,10,0,0,0,82,97,110,103,101,69,114,114,111,114,0,0,78,79,68,69,95,68,88,83,84,82,10,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,78,79,68,69,95,88,83,84,82,32,34,37,115,34,32,108,101,110,32,37,100,10,0,0,78,79,68,69,95,68,83,84,82,10,0,0,78,79,68,69,95,83,84,82,32,34,37,115,34,32,108,101,110,32,37,100,10,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,78,79,68,69,95,78,69,71,65,84,69,10,0,0,0,0,97,115,99,116,105,109,101,0,111,111,0,0,118,97,108,117,101,115,95,97,116,0,0,0,110,97,109,101,37,83,32,97,102,116,101,114,32,60,37,83,62,0,0,0,33,0,0,0,77,82,66,95,84,84,95,73,67,76,65,83,83,0,0,0,97,115,105,110,104,0,0,0,70,97,105,108,101,100,32,116,111,32,99,111,110,118,101,114,116,32,115,121,109,98,111,108,32,116,111,32,115,116,114,105,110,103,33,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,83,32,102,111,114,32,37,83,41,0,0,0,105,110,99,108,117,100,101,63,0,0,0,0,110,105,108,0,67,111,109,112,97,114,97,98,108,101,0,0,124,111,111,0,100,101,102,97,117,108,116,61,0,0,0,0,78,79,68,69,95,70,76,79,65,84,32,37,115,10,0,0,78,79,68,69,95,73,78,84,32,37,115,32,98,97,115,101,32,37,100,10,0,0,0,0,34,0,0,0,105,0,0,0,70,105,98,101,114,0,0,0,78,79,68,69,95,66,76,79,67,75,95,65,82,71,58,10,0,0,0,0,101,118,97,108,0,0,0,0,99,111,109,112,105,108,101,0,78,79,68,69,95,65,82,71,32,37,115,10,0,0,0,0,78,79,68,69,95,78,84,72,95,82,69,70,58,32,36,37,100,10,0,0,116,111,95,102,0,0,0,0,78,79,68,69,95,66,65,67,75,95,82,69,70,58,32,36,37,99,10,0,101,120,112,101,99,116,101,100,32,70,105,120,110,117,109,0,116,114,121,95,99,111,110,118,101,114,116,0,78,79,68,69,95,77,65,84,67,72,58,10,0,0,0,0,78,79,68,69,95,67,79,78,83,84,32,37,115,10,0,0,78,79,68,69,95,67,86,65,82,32,37,115,10,0,0,0,78,79,68,69,95,73,86,65,82,32,37,115,10,0,0,0,105,110,115,112,101,99,116,0,111,102,102,115,101,116,32,37,83,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,115,116,114,117,99,116,40,115,105,122,101,58,37,83,41,0,119,105,100,116,104,32,97,102,116,101,114,32,112,114,101,99,105,115,105,111,110,0,0,0,36,109,114,98,95,103,95,114,97,110,100,95,115,101,101,100,0,0,0,0,99,111,110,115,116,97,110,116,32,114,101,45,97,115,115,105,103,110,109,101,110,116,0,0,62,0,0,0,77,82,66,95,84,84,95,77,79,68,85,76,69,0,0,0,116,97,110,104,0,0,0,0,116,111,95,115,0,0,0,0,116,114,105,101,100,32,116,111,32,99,114,101,97,116,101,32,70,105,98,101,114,32,102,114,111,109,32,67,32,100,101,102,105,110,101,100,32,109,101,116,104,111,100,0,39,37,83,39,58,32,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,83,32,102,111,114,32,37,83,41,0,102,105,114,115,116,0,0,0,37,83,32,99,97,110,110,111,116,32,98,101,32,99,111,110,118,101,114,116,101,100,32,116,111,32,37,83,32,98,121,32,35,37,83,0,78,79,68,69,95,71,86,65,82,32,37,115,10,0,0,0,82,97,110,103,101,0,0,0,78,117,109,101,114,105,99,0,61,0,0,0,124,98,0,0,100,101,102,97,117,108,116,0,97,114,103,117,109,101,110,116,32,116,111,111,32,98,105,103,0,0,0,0,78,79,68,69,95,76,86,65,82,32,37,115,10,0,0,0,110,101,103,97,116,105,118,101,32,115,116,114,105,110,103,32,115,105,122,101,32,40,111,114,32,115,105,122,101,32,116,111,111,32,98,105,103,41,0,0,98,0,0,0,78,79,68,69,95,82,69,84,82,89,10,0,82,101,103,101,120,112,0,0,78,79,68,69,95,82,69,68,79,10,0,0,78,79,68,69,95,78,69,88,84,58,10,0,70,108,111,97,116,0,0,0,78,79,68,69,95,66,82,69,65,75,58,10,0,0,0,0,84,121,112,101,69,114,114,111,114,0,0,0,78,79,68,69,95,89,73,69,76,68,58,10,0,0,0,0,78,79,68,69,95,82,69,84,85,82,78,58,10,0,0,0,78,79,68,69,95,90,83,85,80,69,82,10,0,0,0,0,61,61,0,0,78,79,68,69,95,83,85,80,69,82,58,10,0,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,116,111,95,115,0,0,0,0,111,102,102,115,101,116,32,37,83,32,116,111,111,32,115,109,97,108,108,32,102,111,114,32,115,116,114,117,99,116,40,115,105,122,101,58,37,83,41,0,119,105,100,116,104,32,103,105,118,101,110,32,116,119,105,99,101,0,0,0,109,116,95,115,116,97,116,101,32,103,101,116,32,102,114,111,109,32,109,114,98,95,105,118,95,103,101,116,32,102,97,105,108,101,100,0,91,93,0,0,32,40,108,97,109,98,100,97,41,0,0,0,77,82,66,95,84,84,95,67,76,65,83,83,0,0,0,0,99,111,115,104,0,0,0,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,115,121,109,98,111,108,33,0,116,114,105,101,100,32,116,111,32,99,114,101,97,116,101,32,70,105,98,101,114,32,111,98,106,101,99,116,32,119,105,116,104,111,117,116,32,97,32,98,108,111,99,107,0,0,0,0,76,111,99,97,108,74,117,109,112,69,114,114,111,114,0,0,101,120,99,108,117,100,101,95,101,110,100,63,0,0,0,0,84,121,112,101,69,114,114,111,114,0,0,0,111,112,61,39,37,115,39,32,40,37,100,41,10,0,0,0,105,110,118,97,108,105,100,32,114,97,100,105,120,32,37,83,0,0,0,0,44,32,0,0,110,111,0,0,99,108,101,97,114,0,0,0,116,111,95,115,0,0,0,0,78,79,68,69,95,79,80,95,65,83,71,78,58,10,0,0,115,116,114,105,110,103,32,102,111,114,32,70,108,111,97,116,32,99,111,110,116,97,105,110,115,32,110,117,108,108,32,98,121,116,101,0,103,101,110,101,114,97,116,105,111,110,97,108,95,109,111,100,101,0,0,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,116,121,112,101,32,37,83,32,40,101,120,112,101,99,116,101,100,32,37,83,41,0,0,0,0,101,120,99,101,112,116,105,111,110,32,111,98,106,101,99,116,32,101,120,112,101,99,116,101,100,0,0,0,99,105,105,100,120,0,0,0,40,101,109,112,116,121,41,10,0,0,0,0,67,111,109,112,97,114,97,98,108,101,0,0,96,0,0,0,109,108,104,115,58,10,0,0,84,121,112,101,69,114,114,111,114,0,0,0,103,101,116,98,121,116,101,0,78,79,68,69,95,77,65,83,71,78,58,10,0,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,115,112,114,105,110,116,102,0,83,116,114,105,110,103,32,99])
.concat([97,110,39,116,32,98,101,32,99,111,101,114,99,101,100,32,105,110,116,111,32,70,108,111,97,116,0,0,99,111,118,101,114,63,0,0,115,114,97,110,100,0,0,0,114,104,115,58,10,0,0,0,115,111,117,114,99,101,95,108,111,99,97,116,105,111,110,0,95,95,112,114,105,110,116,115,116,114,95,95,0,0,0,0,105,42,0,0,82,97,110,103,101,69,114,114,111,114,0,0,84,79,84,65,76,0,0,0,99,104,114,0,83,116,97,99,107,32,115,105,122,101,32,105,110,99,114,101,97,115,101,100,32,116,111,32,37,108,117,10,0,0,0,0,108,104,115,58,10,0,0,0,80,73,0,0,71,105,118,101,110,32,116,121,112,101,32,37,100,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,74,97,118,97,83,99,114,105,112,116,33,10,0,0,42,0,0,0,105,110,118,97,108,105,100,32,115,116,114,105,110,103,32,102,111,114,32,102,108,111,97,116,40,37,83,41,0,0,0,0,78,79,68,69,95,65,83,71,78,58,10,0,105,110,105,116,105,97,108,105,122,101,0,0,115,0,0,0,97,115,115,111,99,0,0,0,111,111,124,98,0,0,0,0,78,79,68,69,95,83,80,76,65,84,58,10,0,0,0,0,84,111,111,32,108,111,110,103,32,97,114,103,117,109,101,110,116,115,46,32,40,108,105,109,105,116,61,49,54,41,0,0,78,105,108,67,108,97,115,115,0,0,0,0,118,97,108,117,101,58,10,0,45,0,0,0,110,111,32,109,101,109,98,101,114,32,39,37,83,39,32,105,110,32,115,116,114,117,99,116,0,0,0,0,105,110,118,97,108,105,100,32,105,110,100,101,120,32,45,32,37,83,36,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,58,0,0,0,69,78,68,32,110,111,116,32,115,117,112,111,114,116,101,100,0,0,0,0,84,111,111,32,108,97,114,103,101,32,109,97,120,95,100,105,103,105,116,46,0,0,0,0,77,82,66,95,84,84,95,79,66,74,69,67,84,0,0,0,115,105,110,104,0,0,0,0,116,111,74,115,79,98,106,101,99,116,0,0,38,0,0,0,79,80,95,68,69,66,85,71,32,37,100,32,37,100,32,37,100,10,0,0,101,97,99,104,0,0,0,0,73,110,116,101,103,101,114,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,32,0,0,0,110,0,0,0,91,93,61,0,107,101,121,58,10,0,0,0,95,95,97,116,116,97,99,104,101,100,95,95,0,0,0,0,78,79,68,69,95,72,65,83,72,58,10,0,99,97,108,108,0,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,110,111,116,32,97,32,112,114,111,99,0,0,103,101,110,101,114,97,116,105,111,110,97,108,95,109,111,100,101,61,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,83,32,102,111,114,32,48,46,46,51,41,0,78,79,68,69,95,65,82,82,65,89,58,10,0,0,0,0,75,101,114,110,101,108,0,0,78,79,68,69,95,67,79,76,79,78,51,58,10,0,0,0,116,111,95,115,0,0,0,0,58,58,37,115,10,0,0,0,83,116,114,105,110,103,32,99,111,110,116,97,105,110,115,32,78,85,76,0,78,79,68,69,95,67,79,76,79,78,50,58,10,0,0,0,105,110,100,101,120,32,105,115,32,111,117,116,32,111,102,32,97,114,114,97,121,0,0,0,78,79,68,69,95,68,79,84,51,58,10,0,105,110,118,97,108,105,100,32,115,116,114,105,110,103,32,102,111,114,32,110,117,109,98,101,114,40,37,83,41,0,0,0,78,79,68,69,95,68,79,84,50,58,10,0,98,108,111,99,107,58,10,0,97,114,103,115,58,10,0,0,99,111,100,101,103,101,110,32,101,114,114,111,114,58,32,37,115,10,0,0,43,0,0,0,115,116,114,117,99,116,32,115,105,122,101,32,109,105,115,109,97,116,99,104,0,0,0,0,37,83,32,105,115,32,110,111,116,32,97,32,99,108,97,115,115,47,109,111,100,117,108,101,0,0,0,0,105,0,0,0,110,117,109,98,101,114,101,100,40,37,83,41,32,97,102,116,101,114,32,110,97,109,101,100,0,0,0,0,36,109,114,98,95,105,95,109,116,95,115,116,97,116,101,0,45,0,0,0,101,108,115,101,32,119,105,116,104,111,117,116,32,114,101,115,99,117,101,32,105,115,32,117,115,101,108,101,115,115,0,0,77,82,66,95,84,84,95,86,79,73,68,80,0,0,0,0,97,116,97,110,50,0,0,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,104,97,115,104,33,0,0,0,117,110,105,110,105,116,105,97,108,105,122,101,100,32,70,105,98,101,114,0,61,61,61,0,84,121,112,101,69,114,114,111,114,0,0,0,70,97,108,115,101,67,108,97,115,115,0,0,73,110,102,105,110,105,116,121,0,0,0,0,105,110,115,116,97,110,99,101,95,101,118,97,108,32,119,105,116,104,32,115,116,114,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,99,111,110,115,116,97,110,116,32,108,111,111,107,45,117,112,32,102,111,114,32,110,111,110,32,99,108,97,115,115,47,109,111,100,117,108,101,0,0,0,91,93,0,0,109,101,116,104,111,100,61,39,37,115,39,32,40,37,100,41,10,0,0,0,99,111,100,101,103,101,110,32,101,114,114,111,114,58,37,115,58,37,100,58,32,37,115,10,0,0,0,0,116,111,95,115,116,114,0,0,105,102,110,111,110,101,0,0,78,79,68,69,95,67,65,76,76,58,10,0,111,0,0,0,76,73,78,69,0,0,0,0,73,82,69,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,8,16,32,64,128,1,2,4,8,16,32,64,128,1,2,4,8,16,32,64,128,1,2,4,8,16,32,64,128,1,2,4,8,16,32,64,128,1,2,4,8,16,32,64,128])
, "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
function runPostSets() {
}
if (!awaitingMemoryInitializer) runPostSets();
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  function _memcmp(p1, p2, num) {
      p1 = p1|0; p2 = p2|0; num = num|0;
      var i = 0, v1 = 0, v2 = 0;
      while ((i|0) < (num|0)) {
        var v1 = HEAPU8[(((p1)+(i))|0)];
        var v2 = HEAPU8[(((p2)+(i))|0)];
        if ((v1|0) != (v2|0)) return ((v1|0) > (v2|0) ? 1 : -1)|0;
        i = (i+1)|0;
      }
      return 0;
    }
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOPNOTSUPP:45,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  var __impure_ptr=allocate(1, "i32*", ALLOC_STATIC);var FS={currentPath:"/",nextInode:2,streams:[null],checkStreams:function () {
        for (var i in FS.streams) if (FS.streams.hasOwnProperty(i)) assert(i >= 0 && i < FS.streams.length); // no keys not in dense span
        for (var i = 0; i < FS.streams.length; i++) assert(typeof FS.streams[i] == 'object'); // no non-null holes in dense span
      },ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.init();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureRoot();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === 10) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        // TODO: put these low in memory like we used to assert on: assert(Math.max(_stdin, _stdout, _stderr) < 15000); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        FS.checkStreams();
        // see previous TODO on stdin etc.: assert(FS.streams.length < 1024); // at this early stage, we should not have a large set of file descriptors - just a few
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_NORMAL) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output(10);
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output(10);
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[(((buf)+(i))|0)];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[(((buf)+(i))|0)]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return chr;
      }
    }var _putc=_fputc;
  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }
  function _islower(chr) {
      return chr >= 97 && chr <= 122;
    }
  function _isupper(chr) {
      return chr >= 65 && chr <= 90;
    }
  function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == 45) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
      // Apply sign.
      ret *= multiplier;
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
      if (bits == 64) {
        return tempRet0 = Math.min(Math.floor((ret)/4294967296), 4294967295)>>>0,ret>>>0;
      }
      return ret;
    }function _strtoul(str, endptr, base) {
      return __parseInt(str, endptr, base, 0, 4294967295, 32, true);  // ULONG_MAX.
    }
  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }
  function _isprint(chr) {
      return 0x1F < chr && chr < 0x7F;
    }
  function _toupper(chr) {
      if (chr >= 97 && chr <= 122) {
        return chr - 97 + 65;
      } else {
        return chr;
      }
    }
  function _tolower(chr) {
      chr = chr|0;
      if ((chr|0) < 65) return chr|0;
      if ((chr|0) > 90) return chr|0;
      return (chr - 65 + 97)|0;
    }
  function _isalpha(chr) {
      return (chr >= 97 && chr <= 122) ||
             (chr >= 65 && chr <= 90);
    }
  function _isalnum(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 122) ||
             (chr >= 65 && chr <= 90);
    }
  var _llvm_va_start=undefined;
  function _llvm_va_end() {}
  var _setjmp=undefined;
  function _longjmp(env, value) {
      throw { longjmp: true, id: HEAP32[((env)>>2)], value: value || 1 };
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],HEAPF64[(tempDoublePtr)>>3]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (flagAlwaysSigned) {
                if (currArg < 0) {
                  prefix = '-' + prefix;
                } else {
                  prefix = '+' + prefix;
                }
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (flagAlwaysSigned && currArg >= 0) {
                  argText = '+' + argText;
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }
  function ___errno_location() {
      return ___errno_state;
    }var ___errno=___errno_location;
  function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }
  function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }
  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }
  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      return Number(FS.streams[stream] && FS.streams[stream].eof);
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[((buf++)|0)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        if (contents.subarray) { // typed array
          HEAPU8.set(contents.subarray(offset, offset+size), buf);
        } else
        if (contents.slice) { // normal array
          for (var i = 0; i < size; i++) {
            HEAP8[(((buf)+(i))|0)]=contents[offset + i]
          }
        } else {
          for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
            HEAP8[(((buf)+(i))|0)]=contents.get(offset + i)
          }
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[((buf++)|0)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[(((buf)+(i))|0)]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      if (!FS.streams[stream]) return -1;
      var streamObj = FS.streams[stream];
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _read(stream, _fgetc.ret, 1);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i32=_memset;
  function _strcat(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      var pdestEnd = 0;
      pdestEnd = (pdest + (_strlen(pdest)|0))|0;
      do {
        HEAP8[((pdestEnd+i)|0)]=HEAP8[((psrc+i)|0)];
        i = (i+1)|0;
      } while (HEAP8[(((psrc)+(i-1))|0)]);
      return pdest|0;
    }
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      function ExitStatus() {
        this.name = "ExitStatus";
        this.message = "Program terminated with exit(" + status + ")";
        this.status = status;
        Module.print('Exit Status: ' + status);
      };
      ExitStatus.prototype = new Error();
      ExitStatus.prototype.constructor = ExitStatus;
      exitRuntime();
      ABORT = true;
      throw new ExitStatus();
    }function _exit(status) {
      __exit(status);
    }
  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }
  function ___fpclassifyf(x) {
      if (isNaN(x)) return 0;
      if (!isFinite(x)) return 1;
      if (x == 0) return 2;
      // FP_SUBNORMAL..?
      return 4;
    }var ___fpclassifyd=___fpclassifyf;
  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }
  var _llvm_pow_f64=Math.pow;
  var _floor=Math.floor;
  var _ceil=Math.ceil;
  var _abs=Math.abs;
  function _fmod(x, y) {
      return x % y;
    }
  function ___js_global_object() {
      return (typeof window === 'object') ? (window) : (global);
    }function ___js_fetch_object(mrb, handle) {
      var obj = ___js_global_object()["MRB_JS_OBJ_CACHE"];
      if (obj && (typeof obj === 'object') &&
          (typeof handle === 'number') && (handle > 0)) {
        return obj[handle];
      }
    }
  function ___js_add_object(mrb, obj) {
      var global_object = ___js_global_object();
      global_object["MRB_JS_OBJ_CACHE"] = global_object["MRB_JS_OBJ_CACHE"] ||
        {"_mruby_js_next_id": 1, "_mruby_js_recycled_ids": []};
      var cache_object = global_object["MRB_JS_OBJ_CACHE"];
      var object_handle = -1;
      if (!("_mruby_js_id" in obj)) {
        // create new cache
        var new_id;
        if (cache_object["_mruby_js_recycled_ids"].length > 0) {
          // use recycled ids
          new_id = cache_object["_mruby_js_recycled_ids"].pop();
        } else {
          new_id = cache_object["_mruby_js_next_id"];
          cache_object["_mruby_js_next_id"] = new_id + 1;
        }
        cache_object[new_id] = obj;
        obj["_mruby_js_id"] = new_id;
        obj["_mruby_js_count"] = 1;
        object_handle = new_id;
      } else {
        // existing cache, only updates count
        obj["_mruby_js_count"] = obj["_mruby_js_count"] + 1;
        object_handle = obj["_mruby_js_id"];
      }
      return object_handle;
    }
  function ___js_is_floating_number(val) {
      var fixed = Math.round(val);
      var diff = Math.abs(fixed - val);
      var EPSILON = 1e-5;
      return (diff >= EPSILON);
    }
  function ___js_is_array(val) {
      return (typeof val !== 'undefined' &&
              val && val.constructor === Array);
    }function ___js_fill_return_arg(mrb, ret_p, val, parent_p) {
      var stack = 0;
      var RETURN_HANDLERS = {
        'object': function () {
          var handle = ___js_add_object(mrb, val);
          if (___js_is_array(val)) {
            _mruby_js_set_array_handle(mrb, ret_p, handle);
          } else {
            _mruby_js_set_object_handle(mrb, ret_p, handle);
          }
        },
        'function': function () {
          var handle = ___js_add_object(mrb, val);
          _mruby_js_set_function_handle(mrb, ret_p, handle, parent_p);
        },
        'number': function () {
          if (___js_is_floating_number(val)) {
            _mruby_js_set_float(mrb, ret_p, val);
          } else {
            _mruby_js_set_integer(mrb, ret_p, val);
          }
        },
        'boolean': function () {
          _mruby_js_set_boolean(mrb, ret_p, (val) ? (1) : (0));
        },
        'undefined': function () {
          _mruby_js_set_nil(mrb, ret_p);
        },
        'string': function () {
          if (!stack) stack = Runtime.stackSave();
          var ret = Runtime.stackAlloc(val.length + 1);
          writeStringToMemory(val, ret);
          _mruby_js_set_string(mrb, ret_p, ret);
        }
      };
      if (ret_p) {
        var val_type = typeof val;
        if (val_type !== null) {
          RETURN_HANDLERS[val_type]();
        }
      }
      if (stack) Runtime.stackRestore(stack);
    }function ___js_fetch_argument(mrb, argv_p, idx) {
      var TYPE_HANDLERS = {
        0: function() { return false; }, // MRB_TT_FALSE
        1: function() { return true; },  // MRB_TT_TRUE
        2: _mruby_js_get_integer,        // MRB_TT_FIXNUM
        3: _mruby_js_get_float,          // MRB_TT_FLOAT
        4: function() {
          var handle = _mruby_js_get_object_handle.apply(null, arguments);
          return ___js_fetch_object(mrb, handle);
        },                        // MRB_TT_OBJECT
        5: function() {
          var str_len = _mruby_js_get_string_len.apply(null, arguments);
          var str_p = _mruby_js_get_string_ptr.apply(null, arguments);
          return Module['Pointer_stringify'](str_p, str_len);
        },                        // MRB_TT_STRING
        6: function() { return undefined; }, // nil value
        7: function() {
          var proc = _mruby_js_get_proc.apply(null, arguments);
          return function() {
            // Callback arguments
            var cargc = arguments.length;
            var cargv = 0;
            if (cargc > 0) {
              var i;
              cargv = _mruby_js_invoke_alloc_argv(mrb, cargc);
              for (i = 0; i < cargc; i++) {
                ___js_fill_return_arg(mrb,
                                      _mruby_js_invoke_fetch_argp(mrb, cargv, i),
                                      arguments[i], 0);
              }
            }
            _mruby_js_invoke_proc(mrb, proc, cargc, cargv);
            if (cargc > 0) {
              _mruby_js_invoke_release_argv(mrb, cargv);
            }
          };
        },                        // MRB_TT_PROC
        8: function() {
          var handle = _mruby_js_get_array_handle.apply(null, arguments);
          return ___js_fetch_object(mrb, handle);
        },                        // MRB_TT_ARRAY
        9: function() {
          var handle = _mruby_js_get_hash_handle.apply(null, arguments);
          return ___js_fetch_object(mrb, handle);
        },                        // MRB_TT_HASH
        10: function() {
          _mruby_js_convert_symbol_to_string.apply(null, arguments);
          return TYPE_HANDLERS[5].apply(null, arguments);
        }                         // MRB_TT_SYMBOL
      };
      var handler = TYPE_HANDLERS[_mruby_js_argument_type(mrb, argv_p, idx)];
      return handler(mrb, argv_p, idx);
    }function _js_create_array(mrb, arr_p, len, ret_p) {
      var ret = [], i;
      if ((arr_p !== 0) && (len !== -1)) {
        for (i = 0; i < len; i++) {
          ret.push(___js_fetch_argument(mrb, arr_p, i));
        }
      }
      ___js_fill_return_arg(mrb, ret_p, ret, 0);
    }
  function ___js_invoke_using_new(func, args) {
      // This function uses "new" operator to call JavaScript functions.
      // It is implemented in the following way for two reasons:
      // 1. Function.prototype.bind only exists in ECMAScript 5
      // 2. Even if we only work with ECMAScript 5 compatible browsers,
      // my test shows that we cannot use this method to create ArrayBuffer
      // (at least in Chrome).
      // So we will use the old-fashioned way to do this:)
      switch(args.length) {
        case 0:
          return new func();
        case 1:
          return new func(args[0]);
        case 2:
          return new func(args[0], args[1]);
        case 3:
          return new func(args[0], args[1], args[2]);
        case 4:
          return new func(args[0], args[1], args[2], args[3]);
        case 5:
          return new func(args[0], args[1], args[2], args[3], args[4]);
        case 6:
          return new func(args[0], args[1], args[2], args[3], args[4], args[5]);
        case 7:
          return new func(args[0], args[1], args[2], args[3], args[4], args[5],
                          args[6]);
        case 8:
          return new func(args[0], args[1], args[2], args[3], args[4], args[5],
                          args[6], args[7]);
        case 9:
          return new func(args[0], args[1], args[2], args[3], args[4], args[5],
                          args[6], args[7], args[8]);
        case 10:
          return new func(args[0], args[1], args[2], args[3], args[4], args[5],
                          args[6], args[7], args[8], args[9]);
        default:
          assert(false, "We do not support that many arguments now-_-");
      }
    }function _js_invoke(mrb, this_value_p,
                         func_handle,
                         argv_p, argc,
                         ret_p, type) {
      var func = ___js_fetch_object(mrb, func_handle);
      if (typeof func !== 'function') {
        _mruby_js_name_error(mrb);
      }
      var this_value = ___js_fetch_argument(mrb, this_value_p, 0);
      if (type !== 2) {
        if (this_value === ___js_global_object()) {
          // ECMAScript 5 compatible calling convention
          this_value = undefined;
        }
      }
      var i = 0, args = [], type_handler;
      for (i = 0; i < argc; i++) {
        args.push(___js_fetch_argument(mrb, argv_p, i));
      }
      var val;
      if (type === 1) {
        val = ___js_invoke_using_new(func, args);
      } else {
        val = func.apply(this_value, args);
      }
      // Returned value does not have a parent
      ___js_fill_return_arg(mrb, ret_p, val, 0);
    }
  function _js_create_empty_object(mrb, ret_p) {
      ___js_fill_return_arg(mrb, ret_p, {}, 0);
    }
  function _js_set_field(mrb, obj_p, field_p, val_p) {
      var handle = _mruby_js_get_object_handle(mrb, obj_p, 0);
      var obj = ___js_fetch_object(mrb, handle);
      var field = ___js_fetch_argument(mrb, field_p, 0);
      var val = ___js_fetch_argument(mrb, val_p, 0);
      obj[field] = val;
    }
  function _js_get_field(mrb, obj_p, field_p, ret_p) {
      var handle = _mruby_js_get_object_handle(mrb, obj_p, 0);
      var obj = ___js_fetch_object(mrb, handle);
      var val = obj[___js_fetch_argument(mrb, field_p, 0)];
      ___js_fill_return_arg(mrb, ret_p, val, obj_p);
    }
  function _js_release_object(mrb, handle) {
      var cache_object = ___js_global_object()["MRB_JS_OBJ_CACHE"];
      if (cache_object) {
        var rel_object = cache_object[handle];
        if (rel_object && ("_mruby_js_id" in rel_object)) {
          rel_object["_mruby_js_count"] = rel_object["_mruby_js_count"] - 1;
          if (rel_object["_mruby_js_count"] === 0) {
            // reference count reaches 0, release object
            var next_id = cache_object["_mruby_js_next_id"];
            delete cache_object[handle];
            if (handle === (next_id - 1)) {
              cache_object["_mruby_js_next_id"] = next_id - 1;
            } else {
              cache_object["_mruby_js_recycled_ids"].push(handle);
            }
            delete rel_object["_mruby_js_id"];
            delete rel_object["_mruby_js_count"];
            // Reset the next id when we have all recycled ids. I wonder
            // if a slice loop which can recycle partial ids is needed here.
            if (cache_object["_mruby_js_recycled_ids"].length ===
                (cache_object["_mruby_js_next_id"] - 1)) {
              cache_object["_mruby_js_next_id"] = 1;
              cache_object["_mruby_js_recycled_ids"] = [];
            }
          }
        }
      }
    }
  function _js_get_root_object(mrb, ret_p) {
      // Global object must be of object type, and has no parent.
      ___js_fill_return_arg(mrb, ret_p, ___js_global_object(), 0);
    }
  function _erfc(x) {
      var MATH_TOLERANCE = 1E-12;
      var ONE_SQRTPI = 0.564189583547756287;
      var a = 1;
      var b = x;
      var c = x;
      var d = x * x + 0.5;
      var n = 1.0;
      var q2 = b / d;
      var q1, t;
      if (Math.abs(x) < 2.2) {
        return 1.0 - _erf(x);
      }
      if (x < 0) {
        return 2.0 - _erfc(-x);
      }
      do {
        t = a * n + b * x;
        a = b;
        b = t;
        t = c * n + d * x;
        c = d;
        d = t;
        n += 0.5;
        q1 = q2;
        q2 = b / d;
      } while (Math.abs(q1 - q2) / q2 > MATH_TOLERANCE);
      return (ONE_SQRTPI * Math.exp(- x * x) * q2);
    }
  function _erf(x) {
      var MATH_TOLERANCE = 1E-12;
      var TWO_SQRTPI = 1.128379167095512574;
      var sum = x;
      var term = x;
      var xsqr = x*x;
      var j = 1;
      if (Math.abs(x) > 2.2) {
        return 1.0 - _erfc(x);
      }
      do {
        term *= xsqr / j;
        sum -= term / (2 * j + 1);
        ++j;
        term *= xsqr / j;
        sum += term / (2 * j + 1);
        ++j;
      } while (Math.abs(term / sum) > MATH_TOLERANCE);
      return (TWO_SQRTPI * sum);
    }
  function _hypot(a, b) {
       return Math.sqrt(a*a + b*b);
    }
  function _ldexp(x, exp_) {
      return x * Math.pow(2, exp_);
    }
  function _frexp(x, exp_addr) {
      var sig = 0, exp_ = 0;
      if (x !== 0) {
        var raw_exp = Math.log(x)/Math.log(2);
        exp_ = Math.ceil(raw_exp);
        if (exp_ === raw_exp) exp_ += 1;
        sig = x/Math.pow(2, exp_);
      }
      HEAP32[((exp_addr)>>2)]=exp_
      return sig;
    }
  function _cbrt(x) {
      return Math.pow(x, 1/3);
    }
  var _sqrt=Math.sqrt;
  var _log=Math.log;
  var _exp=Math.exp;
  function _atanh(x) {
      return Math.log((1 + x) / (1 - x)) / 2;
    }
  function _acosh(x) {
      return Math.log(x * 1 + Math.sqrt(x * x - 1));
    }
  function _asinh(x) {
      return Math.log(x + Math.sqrt(x * x + 1));
    }
  function _sinh(x) {
      var p = Math.pow(Math.E, x);
      return (p - (1 / p)) / 2;
    }
  function _cosh(x) {
      var p = Math.pow(Math.E, x);
      return (p + (1 / p)) / 2;
    }function _tanh(x) {
      return _sinh(x) / _cosh(x);
    }
  var _atan2=Math.atan2;
  var _atan=Math.atan;
  var _acos=Math.acos;
  var _asin=Math.asin;
  var _tan=Math.tan;
  var _cos=Math.cos;
  var _sin=Math.sin;
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  var ___tm_struct_layout={__size__:44,tm_sec:0,tm_min:4,tm_hour:8,tm_mday:12,tm_mon:16,tm_year:20,tm_wday:24,tm_yday:28,tm_isdst:32,tm_gmtoff:36,tm_zone:40};
  var __tzname=allocate(8, "i32*", ALLOC_STATIC);
  var __daylight=allocate(1, "i32*", ALLOC_STATIC);
  var __timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
      HEAP32[((__timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((__tzname)>>2)]=winterNamePtr
      HEAP32[(((__tzname)+(4))>>2)]=summerNamePtr
    }function _mktime(tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var year = HEAP32[(((tmPtr)+(offsets.tm_year))>>2)];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_min))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)],
                               0).getTime() / 1000;
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=new Date(timestamp).getDay()
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      return timestamp;
    }
  var ___tm_timezones={};function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      var offsets = ___tm_struct_layout;
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getUTCSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getUTCMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getUTCHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getUTCDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getUTCMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getUTCFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getUTCDay()
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=0
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=0
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.round((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      var timezone = "GMT";
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
      return tmPtr;
    }
  function _localtime_r(time, tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getDay()
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=start.getTimezoneOffset() * 60
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=dst
      var timezone = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | date.toString().match(/\(([A-Z]+)\)/)[1];
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
      return tmPtr;
    }
  function _gettimeofday(ptr) {
      // %struct.timeval = type { i32, i32 }
      var now = Date.now();
      HEAP32[((ptr)>>2)]=Math.floor(now/1000); // seconds
      HEAP32[(((ptr)+(4))>>2)]=Math.floor((now-1000*Math.floor(now/1000))*1000); // microseconds
      return 0;
    }
  var _llvm_expect_i32=undefined;
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
        case 10: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (Browser.initted) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(name.lastIndexOf('.')+1)];
        }
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/.exec(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', {
              alpha: false
            });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x = event.pageX - (window.scrollX + rect.left);
          var y = event.pageY - (window.scrollY + rect.top);
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        Browser.updateResizeListeners();
      }};
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
var FUNCTION_TABLE = [0,0,_mrb_mod_undef,0,_mrb_ary_cmp,0,_mrb_struct_aref,0,_mrb_bob_missing,0,_mrb_str_capitalize_bang
,0,_mrb_mod_remove_cvar,0,_math_log10,0,_mrb_proc_lambda,0,_mrb_f_global_variables,0,_mrb_ary_assoc
,0,_mrb_hash_aset,0,_fix_mul,0,_mrb_str_bytesize,0,_mrb_struct_init_copy,0,_mrb_ary_equal
,0,_mrb_hash_to_hash,0,_mrb_range_first,0,_flo_mul,0,_mrb_array_tojs,0,_mrb_ary_inspect
,0,_mrb_hash_set_default,0,_fix_and,0,_mrb_range_cover,0,_mrb_hash_equal,0,_mrb_mod_include_p
,0,_mrb_ary_reverse_bang,0,_mrb_time_gm,0,_sym_cmp,0,_mrb_str_to_s,0,_mrb_obj_clone
,0,_num_pow,0,_mrb_f_raise,0,_mrb_str_to_f,0,_mrb_str_to_i,0,_mrb_ary_times
,0,_mrb_printstr,0,_mrb_str_reverse_bang,0,_mrb_range_each,0,_nil_inspect,0,_mrb_ary_empty_p
,0,_fiber_yield,0,_mrb_obj_ivar_get,0,_mrb_time_free,0,_math_erfc,0,_mrb_mod_included_modules
,0,_range_eql,0,_mrb_proc_init_copy,0,_mrb_hash_values,0,_mruby_js_object_handle_free,0,_mrb_ary_delete_at
,0,_mrb_ary_eql,0,_mrb_js_obj_get,0,_gc_disable,0,_mrb_proc_initialize,0,_gc_interval_ratio_get
,0,_mrb_mod_constants,0,_iv_i,0,_mrb_obj_not_equal_m,0,_math_frexp,0,_mrb_hash_keys
,0,_num_eql,0,_mrb_range_excl,0,_mrb_kernel_proc,0,_mrb_f_block_given_p_m,0,_mrb_str_empty_p
,0,_exc_to_s,0,_mrb_str_concat2,0,_fix_rev,0,_mrb_time_initialize_copy,0,_mrb_time_minus
,0,_mrb_str_reverse,0,_math_ldexp,0,_math_log,0,_mrb_str_chomp_bang,0,_mrb_hash_default
,0,_mrb_time_initialize,0,_mrb_time_min,0,_cv_i,0,_math_sin,0,_flo_plus
,0,_mrb_ary_rindex_m,0,_math_asinh,0,_flo_eq,0,_gc_enable,0,_mrb_time_mday
,0,_mrb_mod_instance_methods,0,_math_sqrt,0,_math_cosh,0,_mrb_obj_hash,0,_math_acosh
,0,_mrb_range_include,0,_mrb_str_capitalize,0,_mrb_mod_remove_const,0,_math_hypot,0,_false_to_s
,0,_gc_generational_mode_get,0,_mrb_obj_equal_m,0,_mrb_str_times,0,_range_to_s,0,_mrb_time_getlocal
,0,_mod_define_method,0,_math_tan,0,_fix_or,0,_flo_floor,0,_mrb_obj_singleton_methods_m
,0,_mrb_struct_eql,0,_mrb_hash_inspect,0,_iv_mark_i,0,_mrb_struct_ref,0,_mrb_time_asctime
,0,_mrb_str_chop,0,_exc_equal,0,_mrb_mod_module_eval,0,_mrb_f_sprintf,0,_fiber_resume
,0,_mrb_struct_initialize_m,0,_flo_infinite_p,0,_mrb_obj_ivar_set,0,_mrb_hash_replace,0,_math_exp
,0,_mrb_mod_append_features,0,_math_cbrt,0,_fix_mod,0,_gv_i,0,_fiber_init
,0,_mrb_str_start_with,0,_range_inspect,0,_math_cos,0,_mrb_hash_shift,0,_mrb_time_dstp
,0,_mrb_mod_remove_method,0,_allocf,0,_mrb_str_swapcase,0,_gc_interval_ratio_set,0,_gc_start
,0,_mrb_range_last,0,_mrb_ary_join_m,0,_flo_hash,0,_mrb_ary_size,0,_mrb_hash_default_proc
,0,_mrb_random_srand,0,_exc_inspect,0,_math_tanh,0,_mrb_str_intern,0,_false_xor
,0,_mrb_mod_method_defined,0,_mrb_time_getutc,0,_mrb_ary_s_try_convert,0,_obj_is_instance_of,0,_inspect_i
,0,_mrb_str_split_m,0,_mrb_random_g_rand,0,_mrb_obj_methods_m,0,_mrb_str_include,0,_mrb_str_init
,0,_num_cmp,0,_mrb_str_downcase,0,_fix_equal,0,_fix_xor,0,_mrb_struct_set_m
,0,_csym_i,0,_mrb_str_index_m,0,_mrb_struct_ref8,0,_mrb_struct_ref9,0,_mrb_struct_ref6
,0,_mrb_struct_ref7,0,_mrb_struct_ref4,0,_mrb_struct_ref5,0,_mrb_struct_ref2,0,_mrb_struct_ref3
,0,_mrb_struct_ref0,0,_mrb_struct_ref1,0,_mrb_time_zone,0,_mrb_random_rand,0,_true_xor
,0,_mrb_ary_push_m,0,_fix_uminus,0,_exc_message,0,_mrb_time_day,0,_mrb_ary_plus
,0,_proc_lambda,0,_gc_generational_mode_set,0,_mrb_time_eq,0,_mrb_time_cmp,0,_mrb_struct_inspect
,0,_mrb_obj_ivar_defined,0,_mrb_mod_ancestors,0,_fix_divmod,0,_mrb_time_year,0,_math_atan
,0,_mrb_str_rindex_m,0,_math_erf,0,_fix_to_s,0,_fix_minus,0,_mrb_range_initialize
,0,_mrb_mod_eqq,0,_mrb_bob_not,0,_fix_to_f,0,_num_abs,0,_mrb_any_to_s
,0,_gc_step_ratio_get,0,_mrb_mod_const_set,0,_mrb_proc_source_location,0,_mrb_str_upcase_bang,0,_mrb_hash_clear
,0,_num_div,0,_mrb_hash_has_key,0,_mrb_time_to_f,0,_mrb_bob_init,0,_mrb_time_to_i
,0,_mrb_js_get_root_object,0,_mrb_time_yday,0,_mrb_str_bytes,0,_f_eval,0,_mrb_random_g_srand
,0,_sym_equal,0,_mrb_proc_inspect,0,_mrb_js_obj_create,0,_int_to_i,0,_mrb_ary_shift
,0,_mrb_time_at,0,_mrb_time_local,0,_mrb_mod_cvar_get,0,_mrb_hash_set_default_proc,0,_mrb_ary_concat_m
,0,_mrb_ary_reverse,0,_mrb_true,0,_mrb_random_init,0,_true_or,0,_mrb_obj_dup
,0,_noregexp,0,_mrb_time_sec,0,_mrb_str_cmp_m,0,_mrb_obj_instance_eval,0,_mrb_hash_init_core
,0,_mrb_false,0,_mrb_hash_has_value,0,_mrb_ary_at,0,_mrb_str_upcase,0,_mrb_obj_extend_m
,0,_mrb_ary_pop,0,_flo_finite_p,0,_mrb_mod_cvar_defined,0,_nil_to_s,0,_math_acos
,0,_num_uminus,0,_mrb_sym_all_symbols,0,_mrb_js_func_invoke_internal,0,_mrb_class_superclass,0,_mrb_time_now
,0,_mrb_obj_instance_variables,0,_mrb_mod_cvar_set,0,_mrb_ary_index_m,0,_mrb_str_hash_m,0,_flo_minus
,0,_mrb_struct_s_def,0,_mrb_int_chr,0,_mrb_ary_replace_m,0,_mrb_struct_s_members_m,0,_mrb_ary_rassoc
,0,_int_succ,0,_mrb_str_getbyte,0,_mrb_str_replace,0,_mrb_ary_aget,0,_mrb_time_wday
,0,_mrb_obj_remove_instance_variable,0,_mrb_ary_s_create,0,_mrb_obj_inspect,0,_mrb_class_new_class,0,_flo_to_f
,0,_inspect_main,0,_flo_to_s,0,_mrb_ary_unshift_m,0,_math_sinh,0,_mrb_str_inspect
,0,_mrb_mod_to_s,0,_mrb_f_send,0,_exc_exception,0,_flo_round,0,_mrb_str_plus_m
,0,_mrb_str_size,0,_flo_truncate,0,_mrb_obj_id_m,0,_mrb_free,0,_true_to_s
,0,_mrb_time_utc,0,_mrb_singleton_class,0,_fix_rshift,0,_mrb_str_dump,0,_mrb_hash_empty_p
,0,_exc_initialize,0,_mrb_js_array_create,0,_mrb_mod_include,0,_mrb_str_swapcase_bang,0,_mrb_js_obj_initialize
,0,_flo_ceil,0,_mrb_mod_alias,0,_fix_lshift,0,_mrb_str_equal_m,0,_mrb_ary_clear
,0,_mrb_obj_class_m,0,_mrb_range_end,0,_mrb_instance_new,0,_num_uplus,0,_math_atanh
,0,_mrb_time_plus,0,_mrb_str_aref_m,0,_mrb_time_utcp,0,_mrb_obj_protected_methods,0,_mrb_sym_to_s
,0,_math_asin,0,_flo_mod,0,_mrb_mod_const_defined,0,_mrb_range_beg,0,_mrb_equal_m
,0,_mrb_struct_aset,0,_mrb_mod_s_constants,0,_mrb_struct_members_m,0,_mrb_proc_arity,0,_math_atan2
,0,_os_count_objects,0,_mrb_mod_extend_object,0,_false_and,0,_fix_succ,0,_true_and
,0,_gc_step_ratio_set,0,_hash_values_at,0,_os_count_object_type,0,_mrb_range_eq,0,_false_or
,0,_fix_plus,0,_mrb_str_downcase_bang,0,_mrb_time_hour,0,_mrb_ary_last,0,_mrb_obj_is_kind_of_m
,0,_mrb_obj_public_methods,0,_mrb_mod_const_get,0,_mrb_hash_aget,0,_mrb_hash_size_m,0,_mrb_str_chop_bang
,0,_mrb_struct_equal,0,_mrb_obj_init_copy,0,_mrb_ary_aset,0,_sym_inspect,0,_mrb_str_chomp
,0,_mrb_js_obj_set,0,_obj_respond_to,0,_mrb_obj_private_methods,0,_mrb_str_end_with,0,_mrb_hash_eql
,0,_math_log2,0,_mrb_hash_delete,0,_mrb_str_eql,0,_mrb_time_usec,0,_range_initialize_copy
,0,_mrb_mod_class_variables,0,_const_i,0,_mrb_ary_first,0,_mrb_time_mon,0,_mrb_time_localtime,0,_sym_to_sym];
// EMSCRIPTEN_START_FUNCS
function _offset_crc_body() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $header=__stackBase__;
  var $binary_crc=(($header+8)|0);
  var $arraydecay=(($binary_crc)|0);
  var $0=$header;
  var $sub_ptr_lhs_cast=$arraydecay;
  var $sub_ptr_rhs_cast=$0;
  var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
  var $add=((($sub_ptr_sub)+(2))|0);
  STACKTOP = __stackBase__;
  return $add;
}
function _bin_to_uint32($bin) {
  var label = 0;
  var $bin_addr;
  $bin_addr=$bin;
  var $0=$bin_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAP8[($arrayidx)];
  var $conv=(($1)&(255));
  var $shl=$conv << 24;
  var $2=$bin_addr;
  var $arrayidx1=(($2+1)|0);
  var $3=HEAP8[($arrayidx1)];
  var $conv2=(($3)&(255));
  var $shl3=$conv2 << 16;
  var $or=$shl | $shl3;
  var $4=$bin_addr;
  var $arrayidx4=(($4+2)|0);
  var $5=HEAP8[($arrayidx4)];
  var $conv5=(($5)&(255));
  var $shl6=$conv5 << 8;
  var $or7=$or | $shl6;
  var $6=$bin_addr;
  var $arrayidx8=(($6+3)|0);
  var $7=HEAP8[($arrayidx8)];
  var $conv9=(($7)&(255));
  var $or10=$or7 | $conv9;
  return $or10;
}
function _bin_to_uint16($bin) {
  var label = 0;
  var $bin_addr;
  $bin_addr=$bin;
  var $0=$bin_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAP8[($arrayidx)];
  var $conv=(($1)&(255));
  var $conv1=(($conv)&(65535));
  var $shl=$conv1 << 8;
  var $2=$bin_addr;
  var $arrayidx2=(($2+1)|0);
  var $3=HEAP8[($arrayidx2)];
  var $conv3=(($3)&(255));
  var $conv4=(($conv3)&(65535));
  var $or=$shl | $conv4;
  var $conv5=(($or) & 65535);
  return $conv5;
}
function _webruby_internal_run_bytecode($mrb, $bc, $print_level) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $bc_addr;
  var $print_level_addr;
  var $agg_tmp=__stackBase__;
  $mrb_addr=$mrb;
  $bc_addr=$bc;
  $print_level_addr=$print_level;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $2=$bc_addr;
  _mrb_load_irep($agg_tmp, $1, $2);
  var $3=$print_level_addr;
  var $call=_check_and_print_errors($0, $agg_tmp, $3);
  STACKTOP = __stackBase__;
  return $call;
}
Module["_webruby_internal_run_bytecode"] = _webruby_internal_run_bytecode;
function _check_and_print_errors($mrb, $result, $print_level) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $result; $result = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($result)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($result)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($result)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $print_level_addr;
      var $agg_tmp=__stackBase__;
      $mrb_addr=$mrb;
      $print_level_addr=$print_level;
      var $0=$mrb_addr;
      var $exc=(($0+16)|0);
      var $1=HEAP32[(($exc)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $2=$print_level_addr;
      var $cmp=(($2)|(0)) > 0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $exc1=(($4+16)|0);
      var $5=HEAP32[(($exc1)>>2)];
      var $6=$5;
      _mrb_obj_value($agg_tmp, $6);
      _mrb_p($3, $agg_tmp);
      var $7=$mrb_addr;
      var $exc2=(($7+16)|0);
      HEAP32[(($exc2)>>2)]=0;
      $retval=1;
      label = 8; break;
    case 5: 
      var $8=$print_level_addr;
      var $cmp3=(($8)|(0)) > 1;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $9=$mrb_addr;
      _mrb_p($9, $result);
      label = 7; break;
    case 7: 
      $retval=0;
      label = 8; break;
    case 8: 
      var $10=$retval;
      STACKTOP = __stackBase__;
      return $10;
    default: assert(0, "bad label: " + label);
  }
}
function _webruby_internal_run($mrb, $print_level) {
  var label = 0;
  var $mrb_addr;
  var $print_level_addr;
  $mrb_addr=$mrb;
  $print_level_addr=$print_level;
  var $0=$mrb_addr;
  var $1=$print_level_addr;
  var $call=_webruby_internal_run_bytecode($0, ((93120)|0), $1);
  return $call;
}
Module["_webruby_internal_run"] = _webruby_internal_run;
function _webruby_internal_run_source($mrb, $s, $print_level) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $s_addr;
  var $print_level_addr;
  var $agg_tmp=__stackBase__;
  $mrb_addr=$mrb;
  $s_addr=$s;
  $print_level_addr=$print_level;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $2=$s_addr;
  _mrb_load_string($agg_tmp, $1, $2);
  var $3=$print_level_addr;
  var $call=_check_and_print_errors($0, $agg_tmp, $3);
  STACKTOP = __stackBase__;
  return $call;
}
Module["_webruby_internal_run_source"] = _webruby_internal_run_source;
function _mrb_obj_value($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_read_irep($mrb, $bin) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $bin_addr;
      var $result;
      var $total_nirep;
      var $section_header;
      var $crc=__stackBase__;
      var $bin_size=(__stackBase__)+(4);
      var $n;
      var $sirep;
      $mrb_addr=$mrb;
      $bin_addr=$bin;
      $total_nirep=0;
      HEAP32[(($bin_size)>>2)]=0;
      var $0=$mrb_addr;
      var $cmp=(($0)|(0))==0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$bin_addr;
      var $cmp1=(($1)|(0))==0;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $retval=-7;
      label = 22; break;
    case 5: 
      var $2=$bin_addr;
      var $call=_read_rite_binary_header($2, $bin_size, $crc);
      $result=$call;
      var $3=$result;
      var $cmp2=(($3)|(0))!=0;
      if ($cmp2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $4=$result;
      $retval=$4;
      label = 22; break;
    case 7: 
      var $call5=_offset_crc_body();
      $n=$call5;
      var $5=HEAP16[(($crc)>>1)];
      var $conv=(($5)&(65535));
      var $6=$bin_addr;
      var $7=$n;
      var $add_ptr=(($6+$7)|0);
      var $8=HEAP32[(($bin_size)>>2)];
      var $9=$n;
      var $sub=((($8)-($9))|0);
      var $call6=_calc_crc_16_ccitt($add_ptr, $sub, 0);
      var $conv7=(($call6)&(65535));
      var $cmp8=(($conv)|(0))!=(($conv7)|(0));
      if ($cmp8) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $retval=-5;
      label = 22; break;
    case 9: 
      var $10=$bin_addr;
      var $add_ptr12=(($10+22)|0);
      $bin_addr=$add_ptr12;
      var $11=$mrb_addr;
      var $irep_len=(($11+28)|0);
      var $12=HEAP32[(($irep_len)>>2)];
      $sirep=$12;
      label = 10; break;
    case 10: 
      var $13=$bin_addr;
      var $14=$13;
      $section_header=$14;
      var $15=$section_header;
      var $section_identify=(($15)|0);
      var $arraydecay=(($section_identify)|0);
      var $call13=_memcmp($arraydecay, ((113984)|0), 4);
      var $cmp14=(($call13)|(0))==0;
      if ($cmp14) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $16=$mrb_addr;
      var $17=$bin_addr;
      var $call17=_read_rite_section_irep($16, $17);
      $result=$call17;
      var $18=$result;
      var $cmp18=(($18)|(0)) < 0;
      if ($cmp18) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $19=$result;
      $retval=$19;
      label = 22; break;
    case 13: 
      var $20=$result;
      var $21=$total_nirep;
      var $add=((($21)+($20))|0);
      $total_nirep=$add;
      label = 19; break;
    case 14: 
      var $22=$section_header;
      var $section_identify22=(($22)|0);
      var $arraydecay23=(($section_identify22)|0);
      var $call24=_memcmp($arraydecay23, ((113976)|0), 4);
      var $cmp25=(($call24)|(0))==0;
      if ($cmp25) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $23=$mrb_addr;
      var $24=$bin_addr;
      var $25=$sirep;
      var $call28=_read_rite_section_lineno($23, $24, $25);
      $result=$call28;
      var $26=$result;
      var $cmp29=(($26)|(0)) < 0;
      if ($cmp29) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $27=$result;
      $retval=$27;
      label = 22; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $28=$section_header;
      var $section_size=(($28+4)|0);
      var $arraydecay35=(($section_size)|0);
      var $call36=_bin_to_uint32($arraydecay35);
      var $29=$bin_addr;
      var $add_ptr37=(($29+$call36)|0);
      $bin_addr=$add_ptr37;
      label = 20; break;
    case 20: 
      var $30=$section_header;
      var $section_identify38=(($30)|0);
      var $arraydecay39=(($section_identify38)|0);
      var $call40=_memcmp($arraydecay39, ((108476)|0), 4);
      var $cmp41=(($call40)|(0))!=0;
      if ($cmp41) { label = 10; break; } else { label = 21; break; }
    case 21: 
      var $31=$total_nirep;
      $retval=$31;
      label = 22; break;
    case 22: 
      var $32=$retval;
      STACKTOP = __stackBase__;
      return $32;
    default: assert(0, "bad label: " + label);
  }
}
function _read_rite_binary_header($bin, $bin_size, $crc) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $bin_addr;
      var $bin_size_addr;
      var $crc_addr;
      var $header;
      $bin_addr=$bin;
      $bin_size_addr=$bin_size;
      $crc_addr=$crc;
      var $0=$bin_addr;
      var $1=$0;
      $header=$1;
      var $2=$header;
      var $binary_identify=(($2)|0);
      var $arraydecay=(($binary_identify)|0);
      var $call=_memcmp($arraydecay, ((102064)|0), 4);
      var $cmp=(($call)|(0))!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=-5;
      label = 9; break;
    case 4: 
      var $3=$header;
      var $binary_version=(($3+4)|0);
      var $arraydecay1=(($binary_version)|0);
      var $call2=_memcmp($arraydecay1, ((99524)|0), 4);
      var $cmp3=(($call2)|(0))!=0;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=-5;
      label = 9; break;
    case 6: 
      var $4=$header;
      var $binary_crc=(($4+8)|0);
      var $arraydecay6=(($binary_crc)|0);
      var $call7=_bin_to_uint16($arraydecay6);
      var $5=$crc_addr;
      HEAP16[(($5)>>1)]=$call7;
      var $6=$bin_size_addr;
      var $tobool=(($6)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $7=$header;
      var $binary_size=(($7+10)|0);
      var $arraydecay9=(($binary_size)|0);
      var $call10=_bin_to_uint32($arraydecay9);
      var $8=$bin_size_addr;
      HEAP32[(($8)>>2)]=$call10;
      label = 8; break;
    case 8: 
      $retval=0;
      label = 9; break;
    case 9: 
      var $9=$retval;
      return $9;
    default: assert(0, "bad label: " + label);
  }
}
function _read_rite_section_irep($mrb, $bin) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $bin_addr;
      var $result;
      var $sirep;
      var $i;
      var $len=__stackBase__;
      var $nirep;
      var $n;
      var $header;
      $mrb_addr=$mrb;
      $bin_addr=$bin;
      var $0=$bin_addr;
      var $1=$0;
      $header=$1;
      var $2=$bin_addr;
      var $add_ptr=(($2+16)|0);
      $bin_addr=$add_ptr;
      var $3=$mrb_addr;
      var $irep_len=(($3+28)|0);
      var $4=HEAP32[(($irep_len)>>2)];
      $sirep=$4;
      var $5=$header;
      var $nirep1=(($5+12)|0);
      var $arraydecay=(($nirep1)|0);
      var $call=_bin_to_uint16($arraydecay);
      $nirep=$call;
      $n=0;
      var $6=$sirep;
      $i=$6;
      label = 3; break;
    case 3: 
      var $7=$n;
      var $conv=(($7)&(65535));
      var $8=$nirep;
      var $conv2=(($8)&(65535));
      var $cmp=(($conv)|(0)) < (($conv2)|(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $9=$mrb_addr;
      var $10=$bin_addr;
      var $call4=_read_rite_irep_record($9, $10, $len);
      $result=$call4;
      var $11=$result;
      var $cmp5=(($11)|(0))!=0;
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 9; break;
    case 6: 
      var $12=HEAP32[(($len)>>2)];
      var $13=$bin_addr;
      var $add_ptr7=(($13+$12)|0);
      $bin_addr=$add_ptr7;
      label = 7; break;
    case 7: 
      var $14=$n;
      var $inc=((($14)+(1))&65535);
      $n=$inc;
      var $15=$i;
      var $inc8=((($15)+(1))|0);
      $i=$inc8;
      label = 3; break;
    case 8: 
      var $16=$sirep;
      var $17=$header;
      var $sirep9=(($17+14)|0);
      var $arraydecay10=(($sirep9)|0);
      var $call11=_bin_to_uint16($arraydecay10);
      var $conv12=(($call11)&(65535));
      var $add=((($16)+($conv12))|0);
      $result=$add;
      label = 9; break;
    case 9: 
      var $18=$result;
      var $cmp13=(($18)|(0)) < 0;
      if ($cmp13) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $19=$sirep;
      var $20=$mrb_addr;
      _irep_free($19, $20);
      label = 11; break;
    case 11: 
      var $21=$result;
      STACKTOP = __stackBase__;
      return $21;
    default: assert(0, "bad label: " + label);
  }
}
function _read_rite_section_lineno($mrb, $bin, $sirep) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $bin_addr;
      var $sirep_addr;
      var $result;
      var $i;
      var $len=__stackBase__;
      var $nirep;
      var $n;
      var $header;
      $mrb_addr=$mrb;
      $bin_addr=$bin;
      $sirep_addr=$sirep;
      HEAP32[(($len)>>2)]=0;
      var $0=$bin_addr;
      var $1=$0;
      $header=$1;
      var $2=$bin_addr;
      var $add_ptr=(($2+12)|0);
      $bin_addr=$add_ptr;
      var $3=$header;
      var $nirep1=(($3+8)|0);
      var $arraydecay=(($nirep1)|0);
      var $call=_bin_to_uint16($arraydecay);
      $nirep=$call;
      $n=0;
      var $4=$sirep_addr;
      $i=$4;
      label = 3; break;
    case 3: 
      var $5=$n;
      var $conv=(($5)&(65535));
      var $6=$nirep;
      var $conv2=(($6)&(65535));
      var $cmp=(($conv)|(0)) < (($conv2)|(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $7=$mrb_addr;
      var $8=$bin_addr;
      var $9=$i;
      var $call4=_read_rite_lineno_record($7, $8, $9, $len);
      $result=$call4;
      var $10=$result;
      var $cmp5=(($10)|(0))!=0;
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 9; break;
    case 6: 
      var $11=HEAP32[(($len)>>2)];
      var $12=$bin_addr;
      var $add_ptr7=(($12+$11)|0);
      $bin_addr=$add_ptr7;
      label = 7; break;
    case 7: 
      var $13=$n;
      var $inc=((($13)+(1))&65535);
      $n=$inc;
      var $14=$i;
      var $inc8=((($14)+(1))|0);
      $i=$inc8;
      label = 3; break;
    case 8: 
      var $15=$sirep_addr;
      var $16=$header;
      var $sirep9=(($16+10)|0);
      var $arraydecay10=(($sirep9)|0);
      var $call11=_bin_to_uint16($arraydecay10);
      var $conv12=(($call11)&(65535));
      var $add=((($15)+($conv12))|0);
      $result=$add;
      label = 9; break;
    case 9: 
      var $17=$result;
      STACKTOP = __stackBase__;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_load_irep($agg_result, $mrb, $bin) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $bin_addr;
      var $n;
      var $agg_tmp=__stackBase__;
      $mrb_addr=$mrb;
      $bin_addr=$bin;
      var $0=$mrb_addr;
      var $1=$bin_addr;
      var $call=_mrb_read_irep($0, $1);
      $n=$call;
      var $2=$n;
      var $cmp=(($2)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      var $4=$n;
      _irep_error($3, $4);
      _mrb_nil_value($agg_result);
      label = 5; break;
    case 4: 
      var $5=$mrb_addr;
      var $6=$mrb_addr;
      var $7=$n;
      var $8=$mrb_addr;
      var $irep=(($8+24)|0);
      var $9=HEAP32[(($irep)>>2)];
      var $arrayidx=(($9+($7<<2))|0);
      var $10=HEAP32[(($arrayidx)>>2)];
      var $call1=_mrb_proc_new($6, $10);
      var $11=$mrb_addr;
      _mrb_top_self($agg_tmp, $11);
      _mrb_run($agg_result, $5, $call1, $agg_tmp);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _irep_error($mrb, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $n_addr;
  var $tmp=__stackBase__;
  $mrb_addr=$mrb;
  $n_addr=$n;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $call=_mrb_class_get($1, ((104892)|0));
  _mrb_exc_new($tmp, $0, $call, ((80372)|0), 15);
  var $value=(($tmp)|0);
  var $p=$value;
  var $2=HEAP32[(($p)>>2)];
  var $3=$2;
  var $4=$mrb_addr;
  var $exc=(($4+16)|0);
  HEAP32[(($exc)>>2)]=$3;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_nil_value($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _read_rite_lineno_record($mrb, $bin, $irepno, $len) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $bin_addr;
      var $irepno_addr;
      var $len_addr;
      var $ret;
      var $i;
      var $fname_len;
      var $niseq;
      var $fname;
      var $lines;
      $mrb_addr=$mrb;
      $bin_addr=$bin;
      $irepno_addr=$irepno;
      $len_addr=$len;
      $ret=0;
      var $0=$len_addr;
      HEAP32[(($0)>>2)]=0;
      var $1=$bin_addr;
      var $add_ptr=(($1+4)|0);
      $bin_addr=$add_ptr;
      var $2=$len_addr;
      var $3=HEAP32[(($2)>>2)];
      var $add=((($3)+(4))|0);
      HEAP32[(($2)>>2)]=$add;
      var $4=$bin_addr;
      var $call=_bin_to_uint16($4);
      var $conv=(($call)&(65535));
      $fname_len=$conv;
      var $5=$bin_addr;
      var $add_ptr1=(($5+2)|0);
      $bin_addr=$add_ptr1;
      var $6=$len_addr;
      var $7=HEAP32[(($6)>>2)];
      var $add2=((($7)+(2))|0);
      HEAP32[(($6)>>2)]=$add2;
      var $8=$mrb_addr;
      var $9=$fname_len;
      var $add3=((($9)+(1))|0);
      var $call4=_mrb_malloc($8, $add3);
      $fname=$call4;
      var $10=$fname;
      var $cmp=(($10)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $ret=-1;
      label = 11; break;
    case 4: 
      var $11=$fname;
      var $12=$bin_addr;
      var $13=$fname_len;
      assert($13 % 1 === 0);_memcpy($11, $12, $13);
      var $14=$fname_len;
      var $15=$fname;
      var $arrayidx=(($15+$14)|0);
      HEAP8[($arrayidx)]=0;
      var $16=$fname_len;
      var $17=$bin_addr;
      var $add_ptr6=(($17+$16)|0);
      $bin_addr=$add_ptr6;
      var $18=$fname_len;
      var $19=$len_addr;
      var $20=HEAP32[(($19)>>2)];
      var $add7=((($20)+($18))|0);
      HEAP32[(($19)>>2)]=$add7;
      var $21=$bin_addr;
      var $call8=_bin_to_uint32($21);
      $niseq=$call8;
      var $22=$bin_addr;
      var $add_ptr9=(($22+4)|0);
      $bin_addr=$add_ptr9;
      var $23=$len_addr;
      var $24=HEAP32[(($23)>>2)];
      var $add10=((($24)+(4))|0);
      HEAP32[(($23)>>2)]=$add10;
      var $25=$mrb_addr;
      var $26=$niseq;
      var $mul=($26<<1);
      var $call11=_mrb_malloc($25, $mul);
      var $27=$call11;
      $lines=$27;
      var $28=$lines;
      var $cmp12=(($28)|(0))==0;
      if ($cmp12) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $ret=-1;
      label = 11; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $29=$i;
      var $30=$niseq;
      var $cmp16=(($29)>>>(0)) < (($30)>>>(0));
      if ($cmp16) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $31=$bin_addr;
      var $call18=_bin_to_uint16($31);
      var $32=$i;
      var $33=$lines;
      var $arrayidx19=(($33+($32<<1))|0);
      HEAP16[(($arrayidx19)>>1)]=$call18;
      var $34=$bin_addr;
      var $add_ptr20=(($34+2)|0);
      $bin_addr=$add_ptr20;
      var $35=$len_addr;
      var $36=HEAP32[(($35)>>2)];
      var $add21=((($36)+(2))|0);
      HEAP32[(($35)>>2)]=$add21;
      label = 9; break;
    case 9: 
      var $37=$i;
      var $inc=((($37)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 10: 
      var $38=$fname;
      var $39=$irepno_addr;
      var $40=$mrb_addr;
      var $irep=(($40+24)|0);
      var $41=HEAP32[(($irep)>>2)];
      var $arrayidx22=(($41+($39<<2))|0);
      var $42=HEAP32[(($arrayidx22)>>2)];
      var $filename=(($42+24)|0);
      HEAP32[(($filename)>>2)]=$38;
      var $43=$lines;
      var $44=$irepno_addr;
      var $45=$mrb_addr;
      var $irep23=(($45+24)|0);
      var $46=HEAP32[(($irep23)>>2)];
      var $arrayidx24=(($46+($44<<2))|0);
      var $47=HEAP32[(($arrayidx24)>>2)];
      var $lines25=(($47+28)|0);
      HEAP32[(($lines25)>>2)]=$43;
      label = 11; break;
    case 11: 
      var $48=$ret;
      return $48;
    default: assert(0, "bad label: " + label);
  }
}
function _irep_free($sirep, $mrb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $sirep_addr;
      var $mrb_addr;
      var $i;
      var $p;
      $sirep_addr=$sirep;
      $mrb_addr=$mrb;
      var $0=$sirep_addr;
      $i=$0;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $2=$mrb_addr;
      var $irep_len=(($2+28)|0);
      var $3=HEAP32[(($irep_len)>>2)];
      var $cmp=(($1)>>>(0)) < (($3)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 14; break; }
    case 4: 
      var $4=$i;
      var $5=$mrb_addr;
      var $irep=(($5+24)|0);
      var $6=HEAP32[(($irep)>>2)];
      var $arrayidx=(($6+($4<<2))|0);
      var $7=HEAP32[(($arrayidx)>>2)];
      var $tobool=(($7)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 12; break; }
    case 5: 
      var $8=$i;
      var $9=$mrb_addr;
      var $irep1=(($9+24)|0);
      var $10=HEAP32[(($irep1)>>2)];
      var $arrayidx2=(($10+($8<<2))|0);
      var $11=HEAP32[(($arrayidx2)>>2)];
      var $iseq=(($11+12)|0);
      var $12=HEAP32[(($iseq)>>2)];
      var $13=$12;
      $p=$13;
      var $14=$p;
      var $tobool3=(($14)|(0))!=0;
      if ($tobool3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $15=$mrb_addr;
      var $16=$p;
      _mrb_free($15, $16);
      label = 7; break;
    case 7: 
      var $17=$i;
      var $18=$mrb_addr;
      var $irep5=(($18+24)|0);
      var $19=HEAP32[(($irep5)>>2)];
      var $arrayidx6=(($19+($17<<2))|0);
      var $20=HEAP32[(($arrayidx6)>>2)];
      var $pool=(($20+16)|0);
      var $21=HEAP32[(($pool)>>2)];
      var $22=$21;
      $p=$22;
      var $23=$p;
      var $tobool7=(($23)|(0))!=0;
      if ($tobool7) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $24=$mrb_addr;
      var $25=$p;
      _mrb_free($24, $25);
      label = 9; break;
    case 9: 
      var $26=$i;
      var $27=$mrb_addr;
      var $irep10=(($27+24)|0);
      var $28=HEAP32[(($irep10)>>2)];
      var $arrayidx11=(($28+($26<<2))|0);
      var $29=HEAP32[(($arrayidx11)>>2)];
      var $syms=(($29+20)|0);
      var $30=HEAP32[(($syms)>>2)];
      var $31=$30;
      $p=$31;
      var $32=$p;
      var $tobool12=(($32)|(0))!=0;
      if ($tobool12) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $33=$mrb_addr;
      var $34=$p;
      _mrb_free($33, $34);
      label = 11; break;
    case 11: 
      var $35=$mrb_addr;
      var $36=$i;
      var $37=$mrb_addr;
      var $irep15=(($37+24)|0);
      var $38=HEAP32[(($irep15)>>2)];
      var $arrayidx16=(($38+($36<<2))|0);
      var $39=HEAP32[(($arrayidx16)>>2)];
      var $40=$39;
      _mrb_free($35, $40);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $41=$i;
      var $inc=((($41)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 14: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_proc_iseq($mrb, $p) {
  var label = 0;
  var $mrb_addr;
  var $p_addr;
  $mrb_addr=$mrb;
  $p_addr=$p;
  var $0=$p_addr;
  var $body=(($0+12)|0);
  var $irep=$body;
  var $1=HEAP32[(($irep)>>2)];
  var $iseq=(($1+12)|0);
  var $2=HEAP32[(($iseq)>>2)];
  return $2;
}
function _read_rite_irep_record($mrb, $bin, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $bin_addr;
      var $len_addr;
      var $ret;
      var $i;
      var $src;
      var $tt;
      var $pool_data_len;
      var $snl;
      var $plen;
      var $ai;
      var $irep;
      var $s=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      var $tmp41=(__stackBase__)+(24);
      var $tmp46=(__stackBase__)+(36);
      var $tmp52=(__stackBase__)+(48);
      $mrb_addr=$mrb;
      $bin_addr=$bin;
      $len_addr=$len;
      var $0=$bin_addr;
      $src=$0;
      var $1=$mrb_addr;
      var $call=_mrb_gc_arena_save($1);
      $ai=$call;
      var $2=$mrb_addr;
      var $call1=_mrb_add_irep($2);
      $irep=$call1;
      var $3=$src;
      var $add_ptr=(($3+4)|0);
      $src=$add_ptr;
      var $4=$src;
      var $call2=_bin_to_uint16($4);
      var $5=$irep;
      var $nlocals=(($5+4)|0);
      HEAP16[(($nlocals)>>1)]=$call2;
      var $6=$src;
      var $add_ptr3=(($6+2)|0);
      $src=$add_ptr3;
      var $7=$src;
      var $call4=_bin_to_uint16($7);
      var $8=$irep;
      var $nregs=(($8+6)|0);
      HEAP16[(($nregs)>>1)]=$call4;
      var $9=$src;
      var $add_ptr5=(($9+2)|0);
      $src=$add_ptr5;
      var $10=$src;
      var $call6=_bin_to_uint32($10);
      var $11=$irep;
      var $ilen=(($11+32)|0);
      HEAP32[(($ilen)>>2)]=$call6;
      var $12=$src;
      var $add_ptr7=(($12+4)|0);
      $src=$add_ptr7;
      var $13=$irep;
      var $ilen8=(($13+32)|0);
      var $14=HEAP32[(($ilen8)>>2)];
      var $cmp=(($14)>>>(0)) > 0;
      if ($cmp) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $15=$mrb_addr;
      var $16=$irep;
      var $ilen9=(($16+32)|0);
      var $17=HEAP32[(($ilen9)>>2)];
      var $mul=($17<<2);
      var $call10=_mrb_malloc($15, $mul);
      var $18=$call10;
      var $19=$irep;
      var $iseq=(($19+12)|0);
      HEAP32[(($iseq)>>2)]=$18;
      var $20=$irep;
      var $iseq11=(($20+12)|0);
      var $21=HEAP32[(($iseq11)>>2)];
      var $cmp12=(($21)|(0))==0;
      if ($cmp12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $ret=-1;
      label = 34; break;
    case 5: 
      $i=0;
      label = 6; break;
    case 6: 
      var $22=$i;
      var $23=$irep;
      var $ilen14=(($23+32)|0);
      var $24=HEAP32[(($ilen14)>>2)];
      var $cmp15=(($22)>>>(0)) < (($24)>>>(0));
      if ($cmp15) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $25=$src;
      var $call16=_bin_to_uint32($25);
      var $26=$i;
      var $27=$irep;
      var $iseq17=(($27+12)|0);
      var $28=HEAP32[(($iseq17)>>2)];
      var $arrayidx=(($28+($26<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$call16;
      var $29=$src;
      var $add_ptr18=(($29+4)|0);
      $src=$add_ptr18;
      label = 8; break;
    case 8: 
      var $30=$i;
      var $inc=((($30)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $31=$src;
      var $call20=_bin_to_uint32($31);
      $plen=$call20;
      var $32=$src;
      var $add_ptr21=(($32+4)|0);
      $src=$add_ptr21;
      var $33=$plen;
      var $cmp22=(($33)>>>(0)) > 0;
      if ($cmp22) { label = 11; break; } else { label = 23; break; }
    case 11: 
      var $34=$mrb_addr;
      var $35=$plen;
      var $mul24=((($35)*(12))&-1);
      var $call25=_mrb_malloc($34, $mul24);
      var $36=$call25;
      var $37=$irep;
      var $pool=(($37+16)|0);
      HEAP32[(($pool)>>2)]=$36;
      var $38=$irep;
      var $pool26=(($38+16)|0);
      var $39=HEAP32[(($pool26)>>2)];
      var $cmp27=(($39)|(0))==0;
      if ($cmp27) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $ret=-1;
      label = 34; break;
    case 13: 
      $i=0;
      label = 14; break;
    case 14: 
      var $40=$i;
      var $41=$plen;
      var $cmp31=(($40)>>>(0)) < (($41)>>>(0));
      if ($cmp31) { label = 15; break; } else { label = 22; break; }
    case 15: 
      var $42=$src;
      var $incdec_ptr=(($42+1)|0);
      $src=$incdec_ptr;
      var $43=HEAP8[($42)];
      var $conv=(($43)&(255));
      $tt=$conv;
      var $44=$src;
      var $call33=_bin_to_uint16($44);
      $pool_data_len=$call33;
      var $45=$src;
      var $add_ptr34=(($45+2)|0);
      $src=$add_ptr34;
      var $46=$mrb_addr;
      var $47=$src;
      var $48=$pool_data_len;
      var $conv35=(($48)&(65535));
      _mrb_str_new($tmp, $46, $47, $conv35);
      var $49=$s;
      var $50=$tmp;
      assert(12 % 1 === 0);HEAP32[(($49)>>2)]=HEAP32[(($50)>>2)];HEAP32[((($49)+(4))>>2)]=HEAP32[((($50)+(4))>>2)];HEAP32[((($49)+(8))>>2)]=HEAP32[((($50)+(8))>>2)];
      var $51=$pool_data_len;
      var $conv36=(($51)&(65535));
      var $52=$src;
      var $add_ptr37=(($52+$conv36)|0);
      $src=$add_ptr37;
      var $53=$tt;
      var $conv38=(($53)&(65535));
      if ((($conv38)|(0))==3) {
        label = 16; break;
      }
      else if ((($conv38)|(0))==6) {
        label = 17; break;
      }
      else if ((($conv38)|(0))==16) {
        label = 18; break;
      }
      else {
      label = 19; break;
      }
    case 16: 
      var $54=$i;
      var $55=$irep;
      var $pool39=(($55+16)|0);
      var $56=HEAP32[(($pool39)>>2)];
      var $arrayidx40=(($56+((($54)*(12))&-1))|0);
      var $57=$mrb_addr;
      _mrb_str_to_inum($tmp41, $57, $s, 10, 0);
      var $58=$arrayidx40;
      var $59=$tmp41;
      assert(12 % 1 === 0);HEAP32[(($58)>>2)]=HEAP32[(($59)>>2)];HEAP32[((($58)+(4))>>2)]=HEAP32[((($59)+(4))>>2)];HEAP32[((($58)+(8))>>2)]=HEAP32[((($59)+(8))>>2)];
      label = 20; break;
    case 17: 
      var $60=$i;
      var $61=$irep;
      var $pool43=(($61+16)|0);
      var $62=HEAP32[(($pool43)>>2)];
      var $arrayidx44=(($62+((($60)*(12))&-1))|0);
      var $63=$mrb_addr;
      var $call45=_mrb_str_to_dbl($63, $s, 0);
      _mrb_float_value($tmp46, $call45);
      var $64=$arrayidx44;
      var $65=$tmp46;
      assert(12 % 1 === 0);HEAP32[(($64)>>2)]=HEAP32[(($65)>>2)];HEAP32[((($64)+(4))>>2)]=HEAP32[((($65)+(4))>>2)];HEAP32[((($64)+(8))>>2)]=HEAP32[((($65)+(8))>>2)];
      label = 20; break;
    case 18: 
      var $66=$i;
      var $67=$irep;
      var $pool48=(($67+16)|0);
      var $68=HEAP32[(($pool48)>>2)];
      var $arrayidx49=(($68+((($66)*(12))&-1))|0);
      var $69=$arrayidx49;
      var $70=$s;
      assert(12 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($70)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($70)+(4))>>2)];HEAP32[((($69)+(8))>>2)]=HEAP32[((($70)+(8))>>2)];
      label = 20; break;
    case 19: 
      var $71=$i;
      var $72=$irep;
      var $pool50=(($72+16)|0);
      var $73=HEAP32[(($pool50)>>2)];
      var $arrayidx51=(($73+((($71)*(12))&-1))|0);
      _mrb_nil_value($tmp52);
      var $74=$arrayidx51;
      var $75=$tmp52;
      assert(12 % 1 === 0);HEAP32[(($74)>>2)]=HEAP32[(($75)>>2)];HEAP32[((($74)+(4))>>2)]=HEAP32[((($75)+(4))>>2)];HEAP32[((($74)+(8))>>2)]=HEAP32[((($75)+(8))>>2)];
      label = 20; break;
    case 20: 
      var $76=$irep;
      var $plen53=(($76+36)|0);
      var $77=HEAP32[(($plen53)>>2)];
      var $inc54=((($77)+(1))|0);
      HEAP32[(($plen53)>>2)]=$inc54;
      var $78=$mrb_addr;
      var $79=$ai;
      _mrb_gc_arena_restore($78, $79);
      label = 21; break;
    case 21: 
      var $80=$i;
      var $inc56=((($80)+(1))|0);
      $i=$inc56;
      label = 14; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $81=$src;
      var $call59=_bin_to_uint32($81);
      var $82=$irep;
      var $slen=(($82+40)|0);
      HEAP32[(($slen)>>2)]=$call59;
      var $83=$src;
      var $add_ptr60=(($83+4)|0);
      $src=$add_ptr60;
      var $84=$irep;
      var $slen61=(($84+40)|0);
      var $85=HEAP32[(($slen61)>>2)];
      var $cmp62=(($85)>>>(0)) > 0;
      if ($cmp62) { label = 24; break; } else { label = 33; break; }
    case 24: 
      var $86=$mrb_addr;
      var $87=$irep;
      var $slen65=(($87+40)|0);
      var $88=HEAP32[(($slen65)>>2)];
      var $mul66=($88<<1);
      var $call67=_mrb_malloc($86, $mul66);
      var $89=$call67;
      var $90=$irep;
      var $syms=(($90+20)|0);
      HEAP32[(($syms)>>2)]=$89;
      var $91=$irep;
      var $syms68=(($91+20)|0);
      var $92=HEAP32[(($syms68)>>2)];
      var $cmp69=(($92)|(0))==0;
      if ($cmp69) { label = 25; break; } else { label = 26; break; }
    case 25: 
      $ret=-1;
      label = 34; break;
    case 26: 
      $i=0;
      label = 27; break;
    case 27: 
      var $93=$i;
      var $94=$irep;
      var $slen74=(($94+40)|0);
      var $95=HEAP32[(($slen74)>>2)];
      var $cmp75=(($93)>>>(0)) < (($95)>>>(0));
      if ($cmp75) { label = 28; break; } else { label = 32; break; }
    case 28: 
      var $96=$src;
      var $call78=_bin_to_uint16($96);
      $snl=$call78;
      var $97=$src;
      var $add_ptr79=(($97+2)|0);
      $src=$add_ptr79;
      var $98=$snl;
      var $conv80=(($98)&(65535));
      var $cmp81=(($conv80)|(0))==65535;
      if ($cmp81) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $99=$i;
      var $100=$irep;
      var $syms84=(($100+20)|0);
      var $101=HEAP32[(($syms84)>>2)];
      var $arrayidx85=(($101+($99<<1))|0);
      HEAP16[(($arrayidx85)>>1)]=0;
      label = 31; break;
    case 30: 
      var $102=$mrb_addr;
      var $103=$src;
      var $104=$snl;
      var $conv87=(($104)&(65535));
      var $call88=_mrb_intern2($102, $103, $conv87);
      var $105=$i;
      var $106=$irep;
      var $syms89=(($106+20)|0);
      var $107=HEAP32[(($syms89)>>2)];
      var $arrayidx90=(($107+($105<<1))|0);
      HEAP16[(($arrayidx90)>>1)]=$call88;
      var $108=$snl;
      var $conv91=(($108)&(65535));
      var $add=((($conv91)+(1))|0);
      var $109=$src;
      var $add_ptr92=(($109+$add)|0);
      $src=$add_ptr92;
      var $110=$mrb_addr;
      var $111=$ai;
      _mrb_gc_arena_restore($110, $111);
      label = 31; break;
    case 31: 
      var $112=$i;
      var $inc94=((($112)+(1))|0);
      $i=$inc94;
      label = 27; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $113=$src;
      var $114=$bin_addr;
      var $sub_ptr_lhs_cast=$113;
      var $sub_ptr_rhs_cast=$114;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $115=$len_addr;
      HEAP32[(($115)>>2)]=$sub_ptr_sub;
      $ret=0;
      label = 34; break;
    case 34: 
      var $116=$ret;
      STACKTOP = __stackBase__;
      return $116;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_float_value($agg_result, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $f_addr;
      var $v=__stackBase__;
      $f_addr=$f;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=6;
      var $0=$f_addr;
      var $value=(($v)|0);
      var $f1=$value;
      (HEAPF64[(tempDoublePtr)>>3]=$0,HEAP32[(($f1)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_p($mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $tmp=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_funcall($tmp, $0, $obj, ((97248)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $1=$obj;
  var $2=$tmp;
  assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
  var $3=$mrb_addr;
  _printstr($3, $obj);
  var $4=HEAP32[((_stdout)>>2)];
  var $call=_fputc(10, $4);
  STACKTOP = __stackBase__;
  return;
}
function _printstr($mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $str;
      var $s;
      var $len;
      $mrb_addr=$mrb;
      var $tt=(($obj+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)|(0))==16;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $value=(($obj)|0);
      var $p=$value;
      var $1=HEAP32[(($p)>>2)];
      var $2=$1;
      $str=$2;
      var $3=$str;
      var $ptr=(($3+20)|0);
      var $4=HEAP32[(($ptr)>>2)];
      $s=$4;
      var $5=$str;
      var $len1=(($5+12)|0);
      var $6=HEAP32[(($len1)>>2)];
      $len=$6;
      var $7=$s;
      var $8=$len;
      var $9=HEAP32[((_stdout)>>2)];
      var $call=_fwrite($7, $8, 1, $9);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_proc_new($mrb, $irep) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $irep_addr;
      var $p;
      $mrb_addr=$mrb;
      $irep_addr=$irep;
      var $0=$mrb_addr;
      var $1=$mrb_addr;
      var $proc_class=(($1+56)|0);
      var $2=HEAP32[(($proc_class)>>2)];
      var $call=_mrb_obj_alloc($0, 13, $2);
      var $3=$call;
      $p=$3;
      var $4=$mrb_addr;
      var $c=(($4+8)|0);
      var $5=HEAP32[(($c)>>2)];
      var $ci=(($5+16)|0);
      var $6=HEAP32[(($ci)>>2)];
      var $tobool=(($6)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=$mrb_addr;
      var $c1=(($7+8)|0);
      var $8=HEAP32[(($c1)>>2)];
      var $ci2=(($8+16)|0);
      var $9=HEAP32[(($ci2)>>2)];
      var $target_class=(($9+28)|0);
      var $10=HEAP32[(($target_class)>>2)];
      var $cond = $10;label = 5; break;
    case 4: 
      var $cond = 0;label = 5; break;
    case 5: 
      var $cond;
      var $11=$p;
      var $target_class3=(($11+16)|0);
      HEAP32[(($target_class3)>>2)]=$cond;
      var $12=$irep_addr;
      var $13=$p;
      var $body=(($13+12)|0);
      var $irep4=$body;
      HEAP32[(($irep4)>>2)]=$12;
      var $14=$p;
      var $env=(($14+20)|0);
      HEAP32[(($env)>>2)]=0;
      var $15=$p;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_closure_new($mrb, $irep) {
  var label = 0;
  var $mrb_addr;
  var $irep_addr;
  var $p;
  $mrb_addr=$mrb;
  $irep_addr=$irep;
  var $0=$mrb_addr;
  var $1=$irep_addr;
  var $call=_mrb_proc_new($0, $1);
  $p=$call;
  var $2=$mrb_addr;
  var $3=$p;
  var $4=$mrb_addr;
  var $c=(($4+8)|0);
  var $5=HEAP32[(($c)>>2)];
  var $ci=(($5+16)|0);
  var $6=HEAP32[(($ci)>>2)];
  var $proc=(($6+4)|0);
  var $7=HEAP32[(($proc)>>2)];
  var $body=(($7+12)|0);
  var $irep1=$body;
  var $8=HEAP32[(($irep1)>>2)];
  var $nlocals=(($8+4)|0);
  var $9=HEAP16[(($nlocals)>>1)];
  var $conv=(($9)&(65535));
  _closure_setup($2, $3, $conv);
  var $10=$p;
  return $10;
}
function _closure_setup($mrb, $p, $nlocals) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $p_addr;
      var $nlocals_addr;
      var $e;
      $mrb_addr=$mrb;
      $p_addr=$p;
      $nlocals_addr=$nlocals;
      var $0=$mrb_addr;
      var $c=(($0+8)|0);
      var $1=HEAP32[(($c)>>2)];
      var $ci=(($1+16)|0);
      var $2=HEAP32[(($ci)>>2)];
      var $env=(($2+40)|0);
      var $3=HEAP32[(($env)>>2)];
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $c1=(($5+8)|0);
      var $6=HEAP32[(($c1)>>2)];
      var $ci2=(($6+16)|0);
      var $7=HEAP32[(($ci2)>>2)];
      var $proc=(($7+4)|0);
      var $8=HEAP32[(($proc)>>2)];
      var $env3=(($8+20)|0);
      var $9=HEAP32[(($env3)>>2)];
      var $10=$9;
      var $call=_mrb_obj_alloc($4, 20, $10);
      var $11=$call;
      $e=$11;
      var $12=$nlocals_addr;
      var $13=$e;
      var $bf_value=$12 & 2097151;
      var $14=$13;
      var $15=$bf_value & 2097151;
      var $16=$15 << 11;
      var $17=HEAP32[(($14)>>2)];
      var $18=$17 & 2047;
      var $19=$18 | $16;
      HEAP32[(($14)>>2)]=$19;
      var $20=$mrb_addr;
      var $c4=(($20+8)|0);
      var $21=HEAP32[(($c4)>>2)];
      var $ci5=(($21+16)|0);
      var $22=HEAP32[(($ci5)>>2)];
      var $mid=(($22)|0);
      var $23=HEAP16[(($mid)>>1)];
      var $24=$e;
      var $mid6=(($24+16)|0);
      HEAP16[(($mid6)>>1)]=$23;
      var $25=$mrb_addr;
      var $c7=(($25+8)|0);
      var $26=HEAP32[(($c7)>>2)];
      var $ci8=(($26+16)|0);
      var $27=HEAP32[(($ci8)>>2)];
      var $28=$mrb_addr;
      var $c9=(($28+8)|0);
      var $29=HEAP32[(($c9)>>2)];
      var $cibase=(($29+20)|0);
      var $30=HEAP32[(($cibase)>>2)];
      var $sub_ptr_lhs_cast=$27;
      var $sub_ptr_rhs_cast=$30;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|(0)))/(44))&-1);
      var $31=$e;
      var $cioff=(($31+20)|0);
      HEAP32[(($cioff)>>2)]=$sub_ptr_div;
      var $32=$mrb_addr;
      var $c10=(($32+8)|0);
      var $33=HEAP32[(($c10)>>2)];
      var $stack=(($33+4)|0);
      var $34=HEAP32[(($stack)>>2)];
      var $35=$e;
      var $stack11=(($35+12)|0);
      HEAP32[(($stack11)>>2)]=$34;
      var $36=$e;
      var $37=$mrb_addr;
      var $c12=(($37+8)|0);
      var $38=HEAP32[(($c12)>>2)];
      var $ci13=(($38+16)|0);
      var $39=HEAP32[(($ci13)>>2)];
      var $env14=(($39+40)|0);
      HEAP32[(($env14)>>2)]=$36;
      label = 5; break;
    case 4: 
      var $40=$mrb_addr;
      var $c15=(($40+8)|0);
      var $41=HEAP32[(($c15)>>2)];
      var $ci16=(($41+16)|0);
      var $42=HEAP32[(($ci16)>>2)];
      var $env17=(($42+40)|0);
      var $43=HEAP32[(($env17)>>2)];
      $e=$43;
      label = 5; break;
    case 5: 
      var $44=$e;
      var $45=$p_addr;
      var $env18=(($45+20)|0);
      HEAP32[(($env18)>>2)]=$44;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_proc_new_cfunc($mrb, $func) {
  var label = 0;
  var $mrb_addr;
  var $func_addr;
  var $p;
  $mrb_addr=$mrb;
  $func_addr=$func;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $proc_class=(($1+56)|0);
  var $2=HEAP32[(($proc_class)>>2)];
  var $call=_mrb_obj_alloc($0, 13, $2);
  var $3=$call;
  $p=$3;
  var $4=$func_addr;
  var $5=$p;
  var $body=(($5+12)|0);
  var $func1=$body;
  HEAP32[(($func1)>>2)]=$4;
  var $6=$p;
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=$8 >>> 11;
  var $bf_clear=$9 & 2097151;
  var $or=$bf_clear | 128;
  var $bf_value=$or & 2097151;
  var $10=$6;
  var $11=$bf_value & 2097151;
  var $12=$11 << 11;
  var $13=HEAP32[(($10)>>2)];
  var $14=$13 & 2047;
  var $15=$14 | $12;
  HEAP32[(($10)>>2)]=$15;
  var $16=$p;
  return $16;
}
function _mrb_proc_copy($a, $b) {
  var label = 0;
  var $a_addr;
  var $b_addr;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$b_addr;
  var $1=$0;
  var $2=HEAP32[(($1)>>2)];
  var $3=$2 >>> 11;
  var $bf_clear=$3 & 2097151;
  var $4=$a_addr;
  var $bf_value=$bf_clear & 2097151;
  var $5=$4;
  var $6=$bf_value & 2097151;
  var $7=$6 << 11;
  var $8=HEAP32[(($5)>>2)];
  var $9=$8 & 2047;
  var $10=$9 | $7;
  HEAP32[(($5)>>2)]=$10;
  var $11=$a_addr;
  var $body=(($11+12)|0);
  var $12=$b_addr;
  var $body1=(($12+12)|0);
  var $13=$body;
  var $14=$body1;
  assert(4 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];
  var $15=$b_addr;
  var $target_class=(($15+16)|0);
  var $16=HEAP32[(($target_class)>>2)];
  var $17=$a_addr;
  var $target_class2=(($17+16)|0);
  HEAP32[(($target_class2)>>2)]=$16;
  var $18=$b_addr;
  var $env=(($18+20)|0);
  var $19=HEAP32[(($env)>>2)];
  var $20=$a_addr;
  var $env3=(($20+20)|0);
  HEAP32[(($env3)>>2)]=$19;
  return;
}
function _mrb_init_proc($mrb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $m;
      var $call_irep;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_alloca($0, 44);
      var $1=$call;
      $call_irep=$1;
      var $2=$call_irep;
      var $cmp=(($2)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      var $3=$call_irep;
      var $4=$3;
      assert(44 % 1 === 0);_memcpy($4, 79824, 44);
      var $5=$call_irep;
      var $flags=(($5+8)|0);
      HEAP8[($flags)]=1;
      var $6=$call_irep;
      var $idx=(($6)|0);
      HEAP32[(($idx)>>2)]=-1;
      var $7=$call_irep;
      var $iseq=(($7+12)|0);
      HEAP32[(($iseq)>>2)]=((92972)|0);
      var $8=$call_irep;
      var $ilen=(($8+32)|0);
      HEAP32[(($ilen)>>2)]=1;
      var $9=$mrb_addr;
      var $10=$mrb_addr;
      var $object_class=(($10+44)|0);
      var $11=HEAP32[(($object_class)>>2)];
      var $call1=_mrb_define_class($9, ((94128)|0), $11);
      var $12=$mrb_addr;
      var $proc_class=(($12+56)|0);
      HEAP32[(($proc_class)>>2)]=$call1;
      var $13=$mrb_addr;
      var $proc_class2=(($13+56)|0);
      var $14=HEAP32[(($proc_class2)>>2)];
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=$16 >>> 11;
      var $bf_clear=$17 & 2097151;
      var $and=$bf_clear & -256;
      var $or=$and | 13;
      var $18=$mrb_addr;
      var $proc_class3=(($18+56)|0);
      var $19=HEAP32[(($proc_class3)>>2)];
      var $bf_value=$or & 2097151;
      var $20=$19;
      var $21=$bf_value & 2097151;
      var $22=$21 << 11;
      var $23=HEAP32[(($20)>>2)];
      var $24=$23 & 2047;
      var $25=$24 | $22;
      HEAP32[(($20)>>2)]=$25;
      var $26=$mrb_addr;
      var $27=$mrb_addr;
      var $proc_class4=(($27+56)|0);
      var $28=HEAP32[(($proc_class4)>>2)];
      _mrb_define_method($26, $28, ((113260)|0), 108, 0);
      var $29=$mrb_addr;
      var $30=$mrb_addr;
      var $proc_class5=(($30+56)|0);
      var $31=HEAP32[(($proc_class5)>>2)];
      _mrb_define_method($29, $31, ((108128)|0), 94, 262144);
      var $32=$mrb_addr;
      var $33=$mrb_addr;
      var $proc_class6=(($33+56)|0);
      var $34=HEAP32[(($proc_class6)>>2)];
      _mrb_define_method($32, $34, ((104460)|0), 638, 0);
      var $35=$mrb_addr;
      var $36=$call_irep;
      var $call7=_mrb_proc_new($35, $36);
      $m=$call7;
      var $37=$mrb_addr;
      var $38=$mrb_addr;
      var $proc_class8=(($38+56)|0);
      var $39=HEAP32[(($proc_class8)>>2)];
      var $40=$mrb_addr;
      var $call9=_mrb_intern($40, ((101688)|0));
      var $41=$m;
      _mrb_define_method_raw($37, $39, $call9, $41);
      var $42=$mrb_addr;
      var $43=$mrb_addr;
      var $proc_class10=(($43+56)|0);
      var $44=HEAP32[(($proc_class10)>>2)];
      var $45=$mrb_addr;
      var $call11=_mrb_intern($45, ((99044)|0));
      var $46=$m;
      _mrb_define_method_raw($42, $44, $call11, $46);
      var $47=$mrb_addr;
      var $48=$mrb_addr;
      var $kernel_module=(($48+96)|0);
      var $49=HEAP32[(($kernel_module)>>2)];
      _mrb_define_class_method($47, $49, ((96960)|0), 362, 0);
      var $50=$mrb_addr;
      var $51=$mrb_addr;
      var $kernel_module12=(($51+96)|0);
      var $52=HEAP32[(($kernel_module12)>>2)];
      _mrb_define_method($50, $52, ((96960)|0), 362, 0);
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_proc_initialize($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $blk=__stackBase__;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((96036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$blk,tempInt));
      var $tt=(($blk+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $value=(($blk)|0);
      var $i=$value;
      var $2=HEAP32[(($i)>>2)];
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call1=_mrb_class_get($4, ((94936)|0));
      _mrb_raise($3, $call1, ((93872)|0));
      label = 6; break;
    case 5: 
      var $value2=(($self)|0);
      var $p=$value2;
      var $5=HEAP32[(($p)>>2)];
      var $6=$5;
      var $value3=(($blk)|0);
      var $p4=$value3;
      var $7=HEAP32[(($p4)>>2)];
      var $8=$7;
      _mrb_proc_copy($6, $8);
      label = 6; break;
    case 6: 
      var $9=$agg_result;
      var $10=$self;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_proc_init_copy($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $proc=__stackBase__;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((113972)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$proc,tempInt));
      var $tt=(($proc+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))!=13;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$mrb_addr;
      var $3=$mrb_addr;
      var $call1=_mrb_class_get($3, ((94936)|0));
      _mrb_raise($2, $call1, ((113272)|0));
      label = 4; break;
    case 4: 
      var $value=(($self)|0);
      var $p=$value;
      var $4=HEAP32[(($p)>>2)];
      var $5=$4;
      var $value2=(($proc)|0);
      var $p3=$value2;
      var $6=HEAP32[(($p3)>>2)];
      var $7=$6;
      _mrb_proc_copy($5, $7);
      var $8=$agg_result;
      var $9=$self;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_proc_arity($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $p;
      var $iseq;
      var $aspec;
      var $ma;
      var $ra;
      var $pa;
      var $arity;
      $mrb_addr=$mrb;
      var $value=(($self)|0);
      var $p1=$value;
      var $0=HEAP32[(($p1)>>2)];
      var $1=$0;
      $p=$1;
      var $2=$mrb_addr;
      var $3=$p;
      var $call=_mrb_proc_iseq($2, $3);
      $iseq=$call;
      var $4=$iseq;
      var $5=HEAP32[(($4)>>2)];
      var $shr=$5 >>> 7;
      var $and=$shr & 33554431;
      $aspec=$and;
      var $6=$aspec;
      var $shr2=$6 >>> 18;
      var $and3=$shr2 & 31;
      $ma=$and3;
      var $7=$aspec;
      var $and4=$7 & 4096;
      $ra=$and4;
      var $8=$aspec;
      var $shr5=$8 >>> 7;
      var $and6=$shr5 & 31;
      $pa=$and6;
      var $9=$ra;
      var $tobool=(($9)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$ma;
      var $11=$pa;
      var $add=((($10)+($11))|0);
      var $add7=((($add)+(1))|0);
      var $sub=(((-$add7))|0);
      var $cond = $sub;label = 5; break;
    case 4: 
      var $12=$ma;
      var $13=$pa;
      var $add8=((($12)+($13))|0);
      var $cond = $add8;label = 5; break;
    case 5: 
      var $cond;
      $arity=$cond;
      var $14=$arity;
      _mrb_fixnum_value($agg_result, $14);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern($mrb, $cstr) {
  var label = 0;
  var $mrb_addr;
  var $cstr_addr;
  $mrb_addr=$mrb;
  $cstr_addr=$cstr;
  var $0=$mrb_addr;
  var $1=$cstr_addr;
  var $call=_mrb_intern_cstr($0, $1);
  return $call;
}
function _proc_lambda($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $blk=__stackBase__;
      var $p;
      var $p2;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((96036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$blk,tempInt));
      var $tt=(($blk+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $value=(($blk)|0);
      var $i=$value;
      var $2=HEAP32[(($i)>>2)];
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call1=_mrb_class_get($4, ((94936)|0));
      _mrb_raise($3, $call1, ((93872)|0));
      label = 5; break;
    case 5: 
      var $value2=(($blk)|0);
      var $p3=$value2;
      var $5=HEAP32[(($p3)>>2)];
      var $6=$5;
      $p=$6;
      var $7=$p;
      var $8=$7;
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 >>> 11;
      var $bf_clear=$10 & 2097151;
      var $and=$bf_clear & 256;
      var $cmp4=(($and)|(0))!=0;
      if ($cmp4) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $11=$mrb_addr;
      var $12=$p;
      var $c=(($12+4)|0);
      var $13=HEAP32[(($c)>>2)];
      var $call6=_mrb_obj_alloc($11, 13, $13);
      var $14=$call6;
      $p2=$14;
      var $15=$p2;
      var $16=$p;
      _mrb_proc_copy($15, $16);
      var $17=$p2;
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19 >>> 11;
      var $bf_clear7=$20 & 2097151;
      var $or=$bf_clear7 | 256;
      var $bf_value=$or & 2097151;
      var $21=$17;
      var $22=$bf_value & 2097151;
      var $23=$22 << 11;
      var $24=HEAP32[(($21)>>2)];
      var $25=$24 & 2047;
      var $26=$25 | $23;
      HEAP32[(($21)>>2)]=$26;
      var $27=$p2;
      var $28=$27;
      _mrb_obj_value19($agg_result, $28);
      label = 8; break;
    case 7: 
      var $29=$agg_result;
      var $30=$blk;
      assert(12 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($29)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value19($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_open_allocf($f, $ud) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $f_addr;
      var $ud_addr;
      var $mrb;
      $f_addr=$f;
      $ud_addr=$ud;
      var $0=$f_addr;
      var $1=$ud_addr;
      var $call=FUNCTION_TABLE[$0](0, 0, 584, $1);
      var $2=$call;
      $mrb=$2;
      var $3=$mrb;
      var $cmp=(($3)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      var $4=$mrb;
      var $5=$4;
      assert(584 % 1 === 0);_memcpy($5, 79164, 584);
      var $6=$ud_addr;
      var $7=$mrb;
      var $ud1=(($7+580)|0);
      HEAP32[(($ud1)>>2)]=$6;
      var $8=$f_addr;
      var $9=$mrb;
      var $allocf=(($9+4)|0);
      HEAP32[(($allocf)>>2)]=$8;
      var $10=$mrb;
      var $current_white_part=(($10+524)|0);
      HEAP32[(($current_white_part)>>2)]=1;
      var $11=$mrb;
      _mrb_init_heap($11);
      var $12=$mrb;
      var $call2=_mrb_malloc($12, 52);
      var $13=$call2;
      var $14=$mrb;
      var $c=(($14+8)|0);
      HEAP32[(($c)>>2)]=$13;
      var $15=$mrb;
      var $c3=(($15+8)|0);
      var $16=HEAP32[(($c3)>>2)];
      var $17=$16;
      assert(52 % 1 === 0);_memcpy($17, 79748, 52);
      var $18=$mrb;
      var $c4=(($18+8)|0);
      var $19=HEAP32[(($c4)>>2)];
      var $20=$mrb;
      var $root_c=(($20+12)|0);
      HEAP32[(($root_c)>>2)]=$19;
      var $21=$mrb;
      _mrb_init_core($21);
      var $22=$mrb;
      $retval=$22;
      label = 5; break;
    case 5: 
      var $23=$retval;
      return $23;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_alloca($mrb, $size) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $size_addr;
      var $p;
      $mrb_addr=$mrb;
      $size_addr=$size;
      var $0=$mrb_addr;
      var $1=$size_addr;
      var $add=((($1)+(4))|0);
      var $call=_mrb_malloc($0, $add);
      var $2=$call;
      $p=$2;
      var $3=$p;
      var $cmp=(($3)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      var $4=$mrb_addr;
      var $mems=(($4+560)|0);
      var $5=HEAP32[(($mems)>>2)];
      var $6=$p;
      var $next=(($6)|0);
      HEAP32[(($next)>>2)]=$5;
      var $7=$p;
      var $8=$mrb_addr;
      var $mems1=(($8+560)|0);
      HEAP32[(($mems1)>>2)]=$7;
      var $9=$p;
      var $buf=(($9+4)|0);
      var $arraydecay=(($buf)|0);
      $retval=$arraydecay;
      label = 5; break;
    case 5: 
      var $10=$retval;
      return $10;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_open() {
  var label = 0;
  var $mrb;
  var $call=_mrb_open_allocf(264, 0);
  $mrb=$call;
  var $0=$mrb;
  return $0;
}
Module["_mrb_open"] = _mrb_open;
function _allocf($mrb, $p, $size, $ud) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $p_addr;
      var $size_addr;
      var $ud_addr;
      $mrb_addr=$mrb;
      $p_addr=$p;
      $size_addr=$size;
      $ud_addr=$ud;
      var $0=$size_addr;
      var $cmp=(($0)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$p_addr;
      _free($1);
      $retval=0;
      label = 5; break;
    case 4: 
      var $2=$p_addr;
      var $3=$size_addr;
      var $call=_realloc($2, $3);
      $retval=$call;
      label = 5; break;
    case 5: 
      var $4=$retval;
      return $4;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_irep_free($mrb, $irep) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $irep_addr;
      $mrb_addr=$mrb;
      $irep_addr=$irep;
      var $0=$irep_addr;
      var $flags=(($0+8)|0);
      var $1=HEAP8[($flags)];
      var $conv=(($1)&(255));
      var $and=$conv & 1;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$mrb_addr;
      var $3=$irep_addr;
      var $iseq=(($3+12)|0);
      var $4=HEAP32[(($iseq)>>2)];
      var $5=$4;
      _mrb_free($2, $5);
      label = 4; break;
    case 4: 
      var $6=$mrb_addr;
      var $7=$irep_addr;
      var $pool=(($7+16)|0);
      var $8=HEAP32[(($pool)>>2)];
      var $9=$8;
      _mrb_free($6, $9);
      var $10=$mrb_addr;
      var $11=$irep_addr;
      var $syms=(($11+20)|0);
      var $12=HEAP32[(($syms)>>2)];
      var $13=$12;
      _mrb_free($10, $13);
      var $14=$mrb_addr;
      var $15=$irep_addr;
      var $filename=(($15+24)|0);
      var $16=HEAP32[(($filename)>>2)];
      _mrb_free($14, $16);
      var $17=$mrb_addr;
      var $18=$irep_addr;
      var $lines=(($18+28)|0);
      var $19=HEAP32[(($lines)>>2)];
      var $20=$19;
      _mrb_free($17, $20);
      var $21=$mrb_addr;
      var $22=$irep_addr;
      var $23=$22;
      _mrb_free($21, $23);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_free_context($mrb, $c) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $c_addr;
      $mrb_addr=$mrb;
      $c_addr=$c;
      var $0=$c_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 5; break;
    case 4: 
      var $1=$mrb_addr;
      var $2=$c_addr;
      var $stbase=(($2+8)|0);
      var $3=HEAP32[(($stbase)>>2)];
      var $4=$3;
      _mrb_free($1, $4);
      var $5=$mrb_addr;
      var $6=$c_addr;
      var $cibase=(($6+20)|0);
      var $7=HEAP32[(($cibase)>>2)];
      var $8=$7;
      _mrb_free($5, $8);
      var $9=$mrb_addr;
      var $10=$c_addr;
      var $rescue=(($10+28)|0);
      var $11=HEAP32[(($rescue)>>2)];
      var $12=$11;
      _mrb_free($9, $12);
      var $13=$mrb_addr;
      var $14=$c_addr;
      var $ensure=(($14+36)|0);
      var $15=HEAP32[(($ensure)>>2)];
      var $16=$15;
      _mrb_free($13, $16);
      var $17=$mrb_addr;
      var $18=$c_addr;
      var $19=$18;
      _mrb_free($17, $19);
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_close($mrb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $i;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      _mrb_final_core($0);
      var $1=$mrb_addr;
      _mrb_gc_free_gv($1);
      $i=0;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $3=$mrb_addr;
      var $irep_len=(($3+28)|0);
      var $4=HEAP32[(($irep_len)>>2)];
      var $cmp=(($2)>>>(0)) < (($4)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $5=$mrb_addr;
      var $6=$i;
      var $7=$mrb_addr;
      var $irep=(($7+24)|0);
      var $8=HEAP32[(($irep)>>2)];
      var $arrayidx=(($8+($6<<2))|0);
      var $9=HEAP32[(($arrayidx)>>2)];
      _mrb_irep_free($5, $9);
      label = 5; break;
    case 5: 
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $11=$mrb_addr;
      var $12=$mrb_addr;
      var $irep1=(($12+24)|0);
      var $13=HEAP32[(($irep1)>>2)];
      var $14=$13;
      _mrb_free($11, $14);
      var $15=$mrb_addr;
      var $16=$mrb_addr;
      var $root_c=(($16+12)|0);
      var $17=HEAP32[(($root_c)>>2)];
      _mrb_free_context($15, $17);
      var $18=$mrb_addr;
      _mrb_free_symtbl($18);
      var $19=$mrb_addr;
      _mrb_free_heap($19);
      var $20=$mrb_addr;
      _mrb_alloca_free($20);
      var $21=$mrb_addr;
      var $22=$mrb_addr;
      var $23=$22;
      _mrb_free($21, $23);
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mrb_close"] = _mrb_close;
function _mrb_alloca_free($mrb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $p;
      var $tmp;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $cmp=(($0)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 7; break;
    case 4: 
      var $1=$mrb_addr;
      var $mems=(($1+560)|0);
      var $2=HEAP32[(($mems)>>2)];
      $p=$2;
      label = 5; break;
    case 5: 
      var $3=$p;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $4=$p;
      $tmp=$4;
      var $5=$p;
      var $next=(($5)|0);
      var $6=HEAP32[(($next)>>2)];
      $p=$6;
      var $7=$mrb_addr;
      var $8=$tmp;
      var $9=$8;
      _mrb_free($7, $9);
      label = 5; break;
    case 7: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_add_irep($mrb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $irep;
      var $max;
      var $i;
      var $old_capa;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $irep1=(($0+24)|0);
      var $1=HEAP32[(($irep1)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 3; break; }
    case 3: 
      $max=256;
      var $2=$mrb_addr;
      var $irep_len=(($2+28)|0);
      var $3=HEAP32[(($irep_len)>>2)];
      var $4=$max;
      var $cmp=(($3)>>>(0)) > (($4)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$mrb_addr;
      var $irep_len3=(($5+28)|0);
      var $6=HEAP32[(($irep_len3)>>2)];
      var $add=((($6)+(1))|0);
      $max=$add;
      label = 5; break;
    case 5: 
      var $7=$mrb_addr;
      var $8=$max;
      var $call=_mrb_calloc($7, $8, 4);
      var $9=$call;
      var $10=$mrb_addr;
      var $irep4=(($10+24)|0);
      HEAP32[(($irep4)>>2)]=$9;
      var $11=$max;
      var $12=$mrb_addr;
      var $irep_capa=(($12+32)|0);
      HEAP32[(($irep_capa)>>2)]=$11;
      label = 16; break;
    case 6: 
      var $13=$mrb_addr;
      var $irep_capa5=(($13+32)|0);
      var $14=HEAP32[(($irep_capa5)>>2)];
      var $15=$mrb_addr;
      var $irep_len6=(($15+28)|0);
      var $16=HEAP32[(($irep_len6)>>2)];
      var $cmp7=(($14)>>>(0)) <= (($16)>>>(0));
      if ($cmp7) { label = 7; break; } else { label = 15; break; }
    case 7: 
      var $17=$mrb_addr;
      var $irep_capa9=(($17+32)|0);
      var $18=HEAP32[(($irep_capa9)>>2)];
      $old_capa=$18;
      label = 8; break;
    case 8: 
      var $19=$mrb_addr;
      var $irep_capa10=(($19+32)|0);
      var $20=HEAP32[(($irep_capa10)>>2)];
      var $21=$mrb_addr;
      var $irep_len11=(($21+28)|0);
      var $22=HEAP32[(($irep_len11)>>2)];
      var $cmp12=(($20)>>>(0)) <= (($22)>>>(0));
      if ($cmp12) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $23=$mrb_addr;
      var $irep_capa13=(($23+32)|0);
      var $24=HEAP32[(($irep_capa13)>>2)];
      var $mul=($24<<1);
      HEAP32[(($irep_capa13)>>2)]=$mul;
      label = 8; break;
    case 10: 
      var $25=$mrb_addr;
      var $26=$mrb_addr;
      var $irep14=(($26+24)|0);
      var $27=HEAP32[(($irep14)>>2)];
      var $28=$27;
      var $29=$mrb_addr;
      var $irep_capa15=(($29+32)|0);
      var $30=HEAP32[(($irep_capa15)>>2)];
      var $mul16=($30<<2);
      var $call17=_mrb_realloc($25, $28, $mul16);
      var $31=$call17;
      var $32=$mrb_addr;
      var $irep18=(($32+24)|0);
      HEAP32[(($irep18)>>2)]=$31;
      var $33=$old_capa;
      $i=$33;
      label = 11; break;
    case 11: 
      var $34=$i;
      var $35=$mrb_addr;
      var $irep_capa19=(($35+32)|0);
      var $36=HEAP32[(($irep_capa19)>>2)];
      var $cmp20=(($34)>>>(0)) < (($36)>>>(0));
      if ($cmp20) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $37=$i;
      var $38=$mrb_addr;
      var $irep21=(($38+24)|0);
      var $39=HEAP32[(($irep21)>>2)];
      var $arrayidx=(($39+($37<<2))|0);
      HEAP32[(($arrayidx)>>2)]=0;
      label = 13; break;
    case 13: 
      var $40=$i;
      var $inc=((($40)+(1))|0);
      $i=$inc;
      label = 11; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $41=$mrb_addr;
      var $call24=_mrb_malloc($41, 44);
      var $42=$call24;
      $irep=$42;
      var $43=$irep;
      var $44=$43;
      assert(44 % 1 === 0);_memcpy($44, 79908, 44);
      var $45=$irep;
      var $46=$mrb_addr;
      var $irep_len25=(($46+28)|0);
      var $47=HEAP32[(($irep_len25)>>2)];
      var $48=$mrb_addr;
      var $irep26=(($48+24)|0);
      var $49=HEAP32[(($irep26)>>2)];
      var $arrayidx27=(($49+($47<<2))|0);
      HEAP32[(($arrayidx27)>>2)]=$45;
      var $50=$mrb_addr;
      var $irep_len28=(($50+28)|0);
      var $51=HEAP32[(($irep_len28)>>2)];
      var $inc29=((($51)+(1))|0);
      HEAP32[(($irep_len28)>>2)]=$inc29;
      var $52=$irep;
      var $idx=(($52)|0);
      HEAP32[(($idx)>>2)]=$51;
      var $53=$irep;
      return $53;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_top_self($agg_result, $mrb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $top_self=(($0+40)|0);
      var $1=HEAP32[(($top_self)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$mrb_addr;
      var $3=$mrb_addr;
      var $object_class=(($3+44)|0);
      var $4=HEAP32[(($object_class)>>2)];
      var $call=_mrb_obj_alloc($2, 8, $4);
      var $5=$call;
      var $6=$mrb_addr;
      var $top_self1=(($6+40)|0);
      HEAP32[(($top_self1)>>2)]=$5;
      var $7=$mrb_addr;
      var $8=$mrb_addr;
      var $top_self2=(($8+40)|0);
      var $9=HEAP32[(($top_self2)>>2)];
      _mrb_define_singleton_method($7, $9, ((108468)|0), 542, 0);
      var $10=$mrb_addr;
      var $11=$mrb_addr;
      var $top_self3=(($11+40)|0);
      var $12=HEAP32[(($top_self3)>>2)];
      _mrb_define_singleton_method($10, $12, ((112384)|0), 542, 0);
      label = 4; break;
    case 4: 
      var $13=$mrb_addr;
      var $top_self4=(($13+40)|0);
      var $14=HEAP32[(($top_self4)>>2)];
      var $15=$14;
      _mrb_obj_value29($agg_result, $15);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _inspect_main($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_str_new($agg_result, $0, ((107456)|0), 4);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_value29($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_modify($mrb, $s) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $s_addr;
      var $shared;
      var $ptr8;
      var $p;
      var $len9;
      var $p25;
      $mrb_addr=$mrb;
      $s_addr=$s;
      var $0=$s_addr;
      var $1=$0;
      var $2=HEAP32[(($1)>>2)];
      var $3=$2 >>> 11;
      var $bf_clear=$3 & 2097151;
      var $and=$bf_clear & 1;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $4=$s_addr;
      var $aux=(($4+16)|0);
      var $shared1=$aux;
      var $5=HEAP32[(($shared1)>>2)];
      $shared=$5;
      var $6=$shared;
      var $refcnt=(($6+4)|0);
      var $7=HEAP32[(($refcnt)>>2)];
      var $cmp=(($7)|(0))==1;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $8=$s_addr;
      var $ptr=(($8+20)|0);
      var $9=HEAP32[(($ptr)>>2)];
      var $10=$shared;
      var $ptr2=(($10+8)|0);
      var $11=HEAP32[(($ptr2)>>2)];
      var $cmp3=(($9)|(0))==(($11)|(0));
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $12=$shared;
      var $ptr5=(($12+8)|0);
      var $13=HEAP32[(($ptr5)>>2)];
      var $14=$s_addr;
      var $ptr6=(($14+20)|0);
      HEAP32[(($ptr6)>>2)]=$13;
      var $15=$shared;
      var $len=(($15+12)|0);
      var $16=HEAP32[(($len)>>2)];
      var $17=$s_addr;
      var $aux7=(($17+16)|0);
      var $capa=$aux7;
      HEAP32[(($capa)>>2)]=$16;
      var $18=$mrb_addr;
      var $19=$shared;
      var $20=$19;
      _mrb_free($18, $20);
      label = 9; break;
    case 6: 
      var $21=$s_addr;
      var $ptr10=(($21+20)|0);
      var $22=HEAP32[(($ptr10)>>2)];
      $p=$22;
      var $23=$s_addr;
      var $len11=(($23+12)|0);
      var $24=HEAP32[(($len11)>>2)];
      $len9=$24;
      var $25=$mrb_addr;
      var $26=$len9;
      var $add=((($26)+(1))|0);
      var $call=_mrb_malloc($25, $add);
      $ptr8=$call;
      var $27=$p;
      var $tobool12=(($27)|(0))!=0;
      if ($tobool12) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $28=$ptr8;
      var $29=$p;
      var $30=$len9;
      assert($30 % 1 === 0);_memcpy($28, $29, $30);
      label = 8; break;
    case 8: 
      var $31=$len9;
      var $32=$ptr8;
      var $arrayidx=(($32+$31)|0);
      HEAP8[($arrayidx)]=0;
      var $33=$ptr8;
      var $34=$s_addr;
      var $ptr14=(($34+20)|0);
      HEAP32[(($ptr14)>>2)]=$33;
      var $35=$len9;
      var $36=$s_addr;
      var $aux15=(($36+16)|0);
      var $capa16=$aux15;
      HEAP32[(($capa16)>>2)]=$35;
      var $37=$mrb_addr;
      var $38=$shared;
      _str_decref($37, $38);
      label = 9; break;
    case 9: 
      var $39=$s_addr;
      var $40=$39;
      var $41=HEAP32[(($40)>>2)];
      var $42=$41 >>> 11;
      var $bf_clear18=$42 & 2097151;
      var $and19=$bf_clear18 & -2;
      var $bf_value=$and19 & 2097151;
      var $43=$39;
      var $44=$bf_value & 2097151;
      var $45=$44 << 11;
      var $46=HEAP32[(($43)>>2)];
      var $47=$46 & 2047;
      var $48=$47 | $45;
      HEAP32[(($43)>>2)]=$48;
      label = 14; break;
    case 10: 
      var $49=$s_addr;
      var $50=$49;
      var $51=HEAP32[(($50)>>2)];
      var $52=$51 >>> 11;
      var $bf_clear21=$52 & 2097151;
      var $and22=$bf_clear21 & 2;
      var $tobool23=(($and22)|(0))!=0;
      if ($tobool23) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $53=$s_addr;
      var $ptr26=(($53+20)|0);
      var $54=HEAP32[(($ptr26)>>2)];
      $p25=$54;
      var $55=$mrb_addr;
      var $56=$s_addr;
      var $len27=(($56+12)|0);
      var $57=HEAP32[(($len27)>>2)];
      var $add28=((($57)+(1))|0);
      var $call29=_mrb_malloc($55, $add28);
      var $58=$s_addr;
      var $ptr30=(($58+20)|0);
      HEAP32[(($ptr30)>>2)]=$call29;
      var $59=$p25;
      var $tobool31=(($59)|(0))!=0;
      if ($tobool31) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $60=$s_addr;
      var $ptr33=(($60+20)|0);
      var $61=HEAP32[(($ptr33)>>2)];
      var $62=$p25;
      var $63=$s_addr;
      var $len34=(($63+12)|0);
      var $64=HEAP32[(($len34)>>2)];
      assert($64 % 1 === 0);_memcpy($61, $62, $64);
      label = 13; break;
    case 13: 
      var $65=$s_addr;
      var $len36=(($65+12)|0);
      var $66=HEAP32[(($len36)>>2)];
      var $67=$s_addr;
      var $ptr37=(($67+20)|0);
      var $68=HEAP32[(($ptr37)>>2)];
      var $arrayidx38=(($68+$66)|0);
      HEAP8[($arrayidx38)]=0;
      var $69=$s_addr;
      var $len39=(($69+12)|0);
      var $70=HEAP32[(($len39)>>2)];
      var $71=$s_addr;
      var $aux40=(($71+16)|0);
      var $capa41=$aux40;
      HEAP32[(($capa41)>>2)]=$70;
      label = 14; break;
    case 14: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _str_decref($mrb, $shared) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $shared_addr;
      $mrb_addr=$mrb;
      $shared_addr=$shared;
      var $0=$shared_addr;
      var $refcnt=(($0+4)|0);
      var $1=HEAP32[(($refcnt)>>2)];
      var $dec=((($1)-(1))|0);
      HEAP32[(($refcnt)>>2)]=$dec;
      var $2=$shared_addr;
      var $refcnt1=(($2+4)|0);
      var $3=HEAP32[(($refcnt1)>>2)];
      var $cmp=(($3)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $4=$shared_addr;
      var $nofree=(($4)|0);
      var $5=HEAP8[($nofree)];
      var $tobool=(($5 << 24) >> 24)!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $6=$mrb_addr;
      var $7=$shared_addr;
      var $ptr=(($7+8)|0);
      var $8=HEAP32[(($ptr)>>2)];
      _mrb_free($6, $8);
      label = 5; break;
    case 5: 
      var $9=$mrb_addr;
      var $10=$shared_addr;
      var $11=$10;
      _mrb_free($9, $11);
      label = 6; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _str_with_class($mrb, $s, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $s_addr;
  $mrb_addr=$mrb;
  $s_addr=$s;
  var $value=(($obj)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  var $c=(($1+4)|0);
  var $2=HEAP32[(($c)>>2)];
  var $3=$s_addr;
  var $c1=(($3+4)|0);
  HEAP32[(($c1)>>2)]=$2;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_resize($agg_result, $mrb, $str, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $len_addr;
      var $slen;
      var $s;
      $mrb_addr=$mrb;
      $len_addr=$len;
      var $value=(($str)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $s=$1;
      var $2=$mrb_addr;
      var $3=$s;
      _mrb_str_modify($2, $3);
      var $4=$s;
      var $len1=(($4+12)|0);
      var $5=HEAP32[(($len1)>>2)];
      $slen=$5;
      var $6=$len_addr;
      var $7=$slen;
      var $cmp=(($6)|(0))!=(($7)|(0));
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $8=$slen;
      var $9=$len_addr;
      var $cmp2=(($8)|(0)) < (($9)|(0));
      if ($cmp2) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $10=$slen;
      var $11=$len_addr;
      var $sub=((($10)-($11))|0);
      var $cmp3=(($sub)|(0)) > 1024;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $12=$mrb_addr;
      var $13=$s;
      var $ptr=(($13+20)|0);
      var $14=HEAP32[(($ptr)>>2)];
      var $15=$len_addr;
      var $add=((($15)+(1))|0);
      var $call=_mrb_realloc($12, $14, $add);
      var $16=$s;
      var $ptr5=(($16+20)|0);
      HEAP32[(($ptr5)>>2)]=$call;
      label = 6; break;
    case 6: 
      var $17=$len_addr;
      var $18=$s;
      var $aux=(($18+16)|0);
      var $capa=$aux;
      HEAP32[(($capa)>>2)]=$17;
      var $19=$len_addr;
      var $20=$s;
      var $len6=(($20+12)|0);
      HEAP32[(($len6)>>2)]=$19;
      var $21=$len_addr;
      var $22=$s;
      var $ptr7=(($22+20)|0);
      var $23=HEAP32[(($ptr7)>>2)];
      var $arrayidx=(($23+$21)|0);
      HEAP8[($arrayidx)]=0;
      label = 7; break;
    case 7: 
      var $24=$agg_result;
      var $25=$str;
      assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_buf_new($agg_result, $mrb, $capa) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $capa_addr;
      var $s;
      $mrb_addr=$mrb;
      $capa_addr=$capa;
      var $0=$mrb_addr;
      var $1=$mrb_addr;
      var $string_class=(($1+60)|0);
      var $2=HEAP32[(($string_class)>>2)];
      var $call=_mrb_obj_alloc($0, 16, $2);
      var $3=$call;
      $s=$3;
      var $4=$capa_addr;
      var $cmp=(($4)|(0)) < 128;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $capa_addr=128;
      label = 4; break;
    case 4: 
      var $5=$s;
      var $len=(($5+12)|0);
      HEAP32[(($len)>>2)]=0;
      var $6=$capa_addr;
      var $7=$s;
      var $aux=(($7+16)|0);
      var $capa1=$aux;
      HEAP32[(($capa1)>>2)]=$6;
      var $8=$mrb_addr;
      var $9=$capa_addr;
      var $add=((($9)+(1))|0);
      var $call2=_mrb_malloc($8, $add);
      var $10=$s;
      var $ptr=(($10+20)|0);
      HEAP32[(($ptr)>>2)]=$call2;
      var $11=$s;
      var $ptr3=(($11+20)|0);
      var $12=HEAP32[(($ptr3)>>2)];
      var $arrayidx=(($12)|0);
      HEAP8[($arrayidx)]=0;
      var $13=$s;
      var $14=$13;
      _mrb_obj_value44($agg_result, $14);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value44($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_buf_cat($agg_result, $mrb, $str, $ptr, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ptr_addr;
      var $len_addr;
      $mrb_addr=$mrb;
      $ptr_addr=$ptr;
      $len_addr=$len;
      var $0=$len_addr;
      var $cmp=(($0)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$agg_result;
      var $2=$str;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      label = 5; break;
    case 4: 
      var $3=$mrb_addr;
      var $value=(($str)|0);
      var $p=$value;
      var $4=HEAP32[(($p)>>2)];
      var $5=$4;
      var $6=$ptr_addr;
      var $7=$len_addr;
      _str_buf_cat($3, $5, $6, $7);
      var $8=$agg_result;
      var $9=$str;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _str_buf_cat($mrb, $s, $ptr, $len) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $s_addr;
      var $ptr_addr;
      var $len_addr;
      var $capa;
      var $total;
      var $off;
      $mrb_addr=$mrb;
      $s_addr=$s;
      $ptr_addr=$ptr;
      $len_addr=$len;
      $off=-1;
      var $0=$mrb_addr;
      var $1=$s_addr;
      _mrb_str_modify($0, $1);
      var $2=$ptr_addr;
      var $3=$s_addr;
      var $ptr1=(($3+20)|0);
      var $4=HEAP32[(($ptr1)>>2)];
      var $cmp=(($2)>>>(0)) >= (($4)>>>(0));
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $5=$ptr_addr;
      var $6=$s_addr;
      var $ptr2=(($6+20)|0);
      var $7=HEAP32[(($ptr2)>>2)];
      var $8=$s_addr;
      var $len3=(($8+12)|0);
      var $9=HEAP32[(($len3)>>2)];
      var $add_ptr=(($7+$9)|0);
      var $cmp4=(($5)>>>(0)) <= (($add_ptr)>>>(0));
      if ($cmp4) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $10=$ptr_addr;
      var $11=$s_addr;
      var $ptr5=(($11+20)|0);
      var $12=HEAP32[(($ptr5)>>2)];
      var $sub_ptr_lhs_cast=$10;
      var $sub_ptr_rhs_cast=$12;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $off=$sub_ptr_sub;
      label = 5; break;
    case 5: 
      var $13=$len_addr;
      var $cmp6=(($13)|(0))==0;
      if ($cmp6) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 21; break;
    case 7: 
      var $14=$s_addr;
      var $aux=(($14+16)|0);
      var $capa9=$aux;
      var $15=HEAP32[(($capa9)>>2)];
      $capa=$15;
      var $16=$s_addr;
      var $len10=(($16+12)|0);
      var $17=HEAP32[(($len10)>>2)];
      var $18=$len_addr;
      var $sub=(((2147483647)-($18))|0);
      var $cmp11=(($17)|(0)) >= (($sub)|(0));
      if ($cmp11) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $19=$mrb_addr;
      var $20=$mrb_addr;
      var $call=_mrb_class_get($20, ((104876)|0));
      _mrb_raise($19, $call, ((95460)|0));
      label = 9; break;
    case 9: 
      var $21=$s_addr;
      var $len14=(($21+12)|0);
      var $22=HEAP32[(($len14)>>2)];
      var $23=$len_addr;
      var $add=((($22)+($23))|0);
      $total=$add;
      var $24=$capa;
      var $25=$total;
      var $cmp15=(($24)|(0)) <= (($25)|(0));
      if ($cmp15) { label = 10; break; } else { label = 18; break; }
    case 10: 
      label = 11; break;
    case 11: 
      var $26=$total;
      var $27=$capa;
      var $cmp17=(($26)|(0)) > (($27)|(0));
      if ($cmp17) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $28=$capa;
      var $add18=((($28)+(1))|0);
      var $cmp19=(($add18)|(0)) >= 1073741823;
      if ($cmp19) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $29=$total;
      var $add21=((($29)+(4095))|0);
      var $div=((((($add21)|(0)))/(4096))&-1);
      $capa=$div;
      label = 15; break;
    case 14: 
      var $30=$capa;
      var $add23=((($30)+(1))|0);
      var $mul=($add23<<1);
      $capa=$mul;
      label = 11; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $31=$mrb_addr;
      var $32=$s_addr;
      var $ptr24=(($32+20)|0);
      var $33=HEAP32[(($ptr24)>>2)];
      var $34=$capa;
      var $add25=((($34)+(1))|0);
      var $call26=_mrb_realloc($31, $33, $add25);
      var $35=$s_addr;
      var $ptr27=(($35+20)|0);
      HEAP32[(($ptr27)>>2)]=$call26;
      var $36=$capa;
      var $37=$s_addr;
      var $aux28=(($37+16)|0);
      var $capa29=$aux28;
      HEAP32[(($capa29)>>2)]=$36;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $38=$off;
      var $cmp31=(($38)|(0))!=-1;
      if ($cmp31) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $39=$s_addr;
      var $ptr33=(($39+20)|0);
      var $40=HEAP32[(($ptr33)>>2)];
      var $41=$off;
      var $add_ptr34=(($40+$41)|0);
      $ptr_addr=$add_ptr34;
      label = 20; break;
    case 20: 
      var $42=$s_addr;
      var $ptr36=(($42+20)|0);
      var $43=HEAP32[(($ptr36)>>2)];
      var $44=$s_addr;
      var $len37=(($44+12)|0);
      var $45=HEAP32[(($len37)>>2)];
      var $add_ptr38=(($43+$45)|0);
      var $46=$ptr_addr;
      var $47=$len_addr;
      assert($47 % 1 === 0);_memcpy($add_ptr38, $46, $47);
      var $48=$total;
      var $49=$s_addr;
      var $len39=(($49+12)|0);
      HEAP32[(($len39)>>2)]=$48;
      var $50=$total;
      var $51=$s_addr;
      var $ptr40=(($51+20)|0);
      var $52=HEAP32[(($ptr40)>>2)];
      var $arrayidx=(($52+$50)|0);
      HEAP8[($arrayidx)]=0;
      label = 21; break;
    case 21: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_new($agg_result, $mrb, $p, $len) {
  var label = 0;
  var $mrb_addr;
  var $p_addr;
  var $len_addr;
  var $s;
  $mrb_addr=$mrb;
  $p_addr=$p;
  $len_addr=$len;
  var $0=$mrb_addr;
  var $1=$p_addr;
  var $2=$len_addr;
  var $call=_str_new($0, $1, $2);
  $s=$call;
  var $3=$s;
  var $4=$3;
  _mrb_obj_value44($agg_result, $4);
  return;
}
function _str_new($mrb, $p, $len) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $p_addr;
      var $len_addr;
      var $s;
      $mrb_addr=$mrb;
      $p_addr=$p;
      $len_addr=$len;
      var $0=$mrb_addr;
      var $1=$mrb_addr;
      var $string_class=(($1+60)|0);
      var $2=HEAP32[(($string_class)>>2)];
      var $call=_mrb_obj_alloc($0, 16, $2);
      var $3=$call;
      $s=$3;
      var $4=$len_addr;
      var $5=$s;
      var $len1=(($5+12)|0);
      HEAP32[(($len1)>>2)]=$4;
      var $6=$len_addr;
      var $7=$s;
      var $aux=(($7+16)|0);
      var $capa=$aux;
      HEAP32[(($capa)>>2)]=$6;
      var $8=$mrb_addr;
      var $9=$len_addr;
      var $add=((($9)+(1))|0);
      var $call2=_mrb_malloc($8, $add);
      var $10=$s;
      var $ptr=(($10+20)|0);
      HEAP32[(($ptr)>>2)]=$call2;
      var $11=$p_addr;
      var $tobool=(($11)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=$s;
      var $ptr3=(($12+20)|0);
      var $13=HEAP32[(($ptr3)>>2)];
      var $14=$p_addr;
      var $15=$len_addr;
      assert($15 % 1 === 0);_memcpy($13, $14, $15);
      label = 4; break;
    case 4: 
      var $16=$len_addr;
      var $17=$s;
      var $ptr4=(($17+20)|0);
      var $18=HEAP32[(($ptr4)>>2)];
      var $arrayidx=(($18+$16)|0);
      HEAP8[($arrayidx)]=0;
      var $19=$s;
      return $19;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_new_cstr($agg_result, $mrb, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $p_addr;
      var $s;
      var $len;
      $mrb_addr=$mrb;
      $p_addr=$p;
      var $0=$p_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$p_addr;
      var $call=_strlen($1);
      $len=$call;
      var $2=$len;
      var $cmp=(($2)|(0)) < 0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call2=_mrb_class_get($4, ((104876)|0));
      _mrb_raise($3, $call2, ((111820)|0));
      label = 5; break;
    case 5: 
      label = 7; break;
    case 6: 
      $len=0;
      label = 7; break;
    case 7: 
      var $5=$mrb_addr;
      var $6=$mrb_addr;
      var $string_class=(($6+60)|0);
      var $7=HEAP32[(($string_class)>>2)];
      var $call4=_mrb_obj_alloc($5, 16, $7);
      var $8=$call4;
      $s=$8;
      var $9=$mrb_addr;
      var $10=$len;
      var $add=((($10)+(1))|0);
      var $call5=_mrb_malloc($9, $add);
      var $11=$s;
      var $ptr=(($11+20)|0);
      HEAP32[(($ptr)>>2)]=$call5;
      var $12=$p_addr;
      var $tobool6=(($12)|(0))!=0;
      if ($tobool6) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $13=$s;
      var $ptr8=(($13+20)|0);
      var $14=HEAP32[(($ptr8)>>2)];
      var $15=$p_addr;
      var $16=$len;
      assert($16 % 1 === 0);_memcpy($14, $15, $16);
      label = 9; break;
    case 9: 
      var $17=$len;
      var $18=$s;
      var $ptr10=(($18+20)|0);
      var $19=HEAP32[(($ptr10)>>2)];
      var $arrayidx=(($19+$17)|0);
      HEAP8[($arrayidx)]=0;
      var $20=$len;
      var $21=$s;
      var $len11=(($21+12)|0);
      HEAP32[(($len11)>>2)]=$20;
      var $22=$len;
      var $23=$s;
      var $aux=(($23+16)|0);
      var $capa=$aux;
      HEAP32[(($capa)>>2)]=$22;
      var $24=$s;
      var $25=$24;
      _mrb_obj_value44($agg_result, $25);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_new_static($agg_result, $mrb, $p, $len) {
  var label = 0;
  var $mrb_addr;
  var $p_addr;
  var $len_addr;
  var $s;
  $mrb_addr=$mrb;
  $p_addr=$p;
  $len_addr=$len;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $string_class=(($1+60)|0);
  var $2=HEAP32[(($string_class)>>2)];
  var $call=_mrb_obj_alloc($0, 16, $2);
  var $3=$call;
  $s=$3;
  var $4=$len_addr;
  var $5=$s;
  var $len1=(($5+12)|0);
  HEAP32[(($len1)>>2)]=$4;
  var $6=$s;
  var $aux=(($6+16)|0);
  var $capa=$aux;
  HEAP32[(($capa)>>2)]=0;
  var $7=$p_addr;
  var $8=$s;
  var $ptr=(($8+20)|0);
  HEAP32[(($ptr)>>2)]=$7;
  var $9=$s;
  var $10=$9;
  var $11=HEAP32[(($10)>>2)];
  var $12=$11 & 2047;
  var $13=$12 | 4096;
  HEAP32[(($10)>>2)]=$13;
  var $14=$s;
  var $15=$14;
  _mrb_obj_value44($agg_result, $15);
  return;
}
function _mrb_gc_free_str($mrb, $str) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $str_addr;
      $mrb_addr=$mrb;
      $str_addr=$str;
      var $0=$str_addr;
      var $1=$0;
      var $2=HEAP32[(($1)>>2)];
      var $3=$2 >>> 11;
      var $bf_clear=$3 & 2097151;
      var $and=$bf_clear & 1;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$mrb_addr;
      var $5=$str_addr;
      var $aux=(($5+16)|0);
      var $shared=$aux;
      var $6=HEAP32[(($shared)>>2)];
      _str_decref($4, $6);
      label = 7; break;
    case 4: 
      var $7=$str_addr;
      var $8=$7;
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 >>> 11;
      var $bf_clear1=$10 & 2097151;
      var $and2=$bf_clear1 & 2;
      var $cmp=(($and2)|(0))==0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $11=$mrb_addr;
      var $12=$str_addr;
      var $ptr=(($12+20)|0);
      var $13=HEAP32[(($ptr)>>2)];
      _mrb_free($11, $13);
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_literal($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $s;
      var $orig;
      var $shared;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $1=$mrb_addr;
      var $string_class=(($1+60)|0);
      var $2=HEAP32[(($string_class)>>2)];
      var $call=_mrb_obj_alloc($0, 16, $2);
      var $3=$call;
      $s=$3;
      var $value=(($str)|0);
      var $p=$value;
      var $4=HEAP32[(($p)>>2)];
      var $5=$4;
      $orig=$5;
      var $6=$orig;
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 >>> 11;
      var $bf_clear=$9 & 2097151;
      var $and=$bf_clear & 1;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $10=$mrb_addr;
      var $11=$orig;
      _str_make_shared($10, $11);
      label = 4; break;
    case 4: 
      var $12=$orig;
      var $aux=(($12+16)|0);
      var $shared1=$aux;
      var $13=HEAP32[(($shared1)>>2)];
      $shared=$13;
      var $14=$shared;
      var $refcnt=(($14+4)|0);
      var $15=HEAP32[(($refcnt)>>2)];
      var $inc=((($15)+(1))|0);
      HEAP32[(($refcnt)>>2)]=$inc;
      var $16=$shared;
      var $ptr=(($16+8)|0);
      var $17=HEAP32[(($ptr)>>2)];
      var $18=$s;
      var $ptr2=(($18+20)|0);
      HEAP32[(($ptr2)>>2)]=$17;
      var $19=$shared;
      var $len=(($19+12)|0);
      var $20=HEAP32[(($len)>>2)];
      var $21=$s;
      var $len3=(($21+12)|0);
      HEAP32[(($len3)>>2)]=$20;
      var $22=$shared;
      var $23=$s;
      var $aux4=(($23+16)|0);
      var $shared5=$aux4;
      HEAP32[(($shared5)>>2)]=$22;
      var $24=$s;
      var $25=$24;
      var $26=HEAP32[(($25)>>2)];
      var $27=$26 >>> 11;
      var $bf_clear6=$27 & 2097151;
      var $or=$bf_clear6 | 1;
      var $bf_value=$or & 2097151;
      var $28=$24;
      var $29=$bf_value & 2097151;
      var $30=$29 << 11;
      var $31=HEAP32[(($28)>>2)];
      var $32=$31 & 2047;
      var $33=$32 | $30;
      HEAP32[(($28)>>2)]=$33;
      var $34=$s;
      var $35=$34;
      _mrb_obj_value44($agg_result, $35);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _str_make_shared($mrb, $s) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $s_addr;
      var $shared;
      $mrb_addr=$mrb;
      $s_addr=$s;
      var $0=$s_addr;
      var $1=$0;
      var $2=HEAP32[(($1)>>2)];
      var $3=$2 >>> 11;
      var $bf_clear=$3 & 2097151;
      var $and=$bf_clear & 1;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 10; break; } else { label = 3; break; }
    case 3: 
      var $4=$mrb_addr;
      var $call=_mrb_malloc($4, 16);
      var $5=$call;
      $shared=$5;
      var $6=$shared;
      var $refcnt=(($6+4)|0);
      HEAP32[(($refcnt)>>2)]=1;
      var $7=$s_addr;
      var $8=$7;
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 >>> 11;
      var $bf_clear1=$10 & 2097151;
      var $and2=$bf_clear1 & 2;
      var $tobool3=(($and2)|(0))!=0;
      if ($tobool3) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $11=$shared;
      var $nofree=(($11)|0);
      HEAP8[($nofree)]=1;
      var $12=$s_addr;
      var $ptr=(($12+20)|0);
      var $13=HEAP32[(($ptr)>>2)];
      var $14=$shared;
      var $ptr5=(($14+8)|0);
      HEAP32[(($ptr5)>>2)]=$13;
      var $15=$s_addr;
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17 >>> 11;
      var $bf_clear6=$18 & 2097151;
      var $and7=$bf_clear6 & -3;
      var $bf_value=$and7 & 2097151;
      var $19=$15;
      var $20=$bf_value & 2097151;
      var $21=$20 << 11;
      var $22=HEAP32[(($19)>>2)];
      var $23=$22 & 2047;
      var $24=$23 | $21;
      HEAP32[(($19)>>2)]=$24;
      label = 9; break;
    case 5: 
      var $25=$shared;
      var $nofree8=(($25)|0);
      HEAP8[($nofree8)]=0;
      var $26=$s_addr;
      var $aux=(($26+16)|0);
      var $capa=$aux;
      var $27=HEAP32[(($capa)>>2)];
      var $28=$s_addr;
      var $len=(($28+12)|0);
      var $29=HEAP32[(($len)>>2)];
      var $cmp=(($27)|(0)) > (($29)|(0));
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $30=$mrb_addr;
      var $31=$s_addr;
      var $ptr10=(($31+20)|0);
      var $32=HEAP32[(($ptr10)>>2)];
      var $33=$s_addr;
      var $len11=(($33+12)|0);
      var $34=HEAP32[(($len11)>>2)];
      var $add=((($34)+(1))|0);
      var $call12=_mrb_realloc($30, $32, $add);
      var $35=$shared;
      var $ptr13=(($35+8)|0);
      HEAP32[(($ptr13)>>2)]=$call12;
      var $36=$s_addr;
      var $ptr14=(($36+20)|0);
      HEAP32[(($ptr14)>>2)]=$call12;
      label = 8; break;
    case 7: 
      var $37=$s_addr;
      var $ptr16=(($37+20)|0);
      var $38=HEAP32[(($ptr16)>>2)];
      var $39=$shared;
      var $ptr17=(($39+8)|0);
      HEAP32[(($ptr17)>>2)]=$38;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $40=$s_addr;
      var $len19=(($40+12)|0);
      var $41=HEAP32[(($len19)>>2)];
      var $42=$shared;
      var $len20=(($42+12)|0);
      HEAP32[(($len20)>>2)]=$41;
      var $43=$shared;
      var $44=$s_addr;
      var $aux21=(($44+16)|0);
      var $shared22=$aux21;
      HEAP32[(($shared22)>>2)]=$43;
      var $45=$s_addr;
      var $46=$45;
      var $47=HEAP32[(($46)>>2)];
      var $48=$47 >>> 11;
      var $bf_clear23=$48 & 2097151;
      var $or=$bf_clear23 | 1;
      var $bf_value24=$or & 2097151;
      var $49=$45;
      var $50=$bf_value24 & 2097151;
      var $51=$50 << 11;
      var $52=HEAP32[(($49)>>2)];
      var $53=$52 & 2047;
      var $54=$53 | $51;
      HEAP32[(($49)>>2)]=$54;
      label = 10; break;
    case 10: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_concat($mrb, $self, $other) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $other; $other = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($other)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($other)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($other)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $s1;
      var $s2;
      var $len;
      var $tmp=__stackBase__;
      $mrb_addr=$mrb;
      var $value=(($self)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $s1=$1;
      var $2=$mrb_addr;
      var $3=$s1;
      _mrb_str_modify($2, $3);
      var $tt=(($other+8)|0);
      var $4=HEAP32[(($tt)>>2)];
      var $cmp=(($4)|(0))==16;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $5=$mrb_addr;
      _mrb_str_to_str($tmp, $5, $other);
      var $6=$other;
      var $7=$tmp;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      label = 4; break;
    case 4: 
      var $value1=(($other)|0);
      var $p2=$value1;
      var $8=HEAP32[(($p2)>>2)];
      var $9=$8;
      $s2=$9;
      var $10=$s1;
      var $len3=(($10+12)|0);
      var $11=HEAP32[(($len3)>>2)];
      var $12=$s2;
      var $len4=(($12+12)|0);
      var $13=HEAP32[(($len4)>>2)];
      var $add=((($11)+($13))|0);
      $len=$add;
      var $14=$s1;
      var $aux=(($14+16)|0);
      var $capa=$aux;
      var $15=HEAP32[(($capa)>>2)];
      var $16=$len;
      var $cmp5=(($15)|(0)) < (($16)|(0));
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=$len;
      var $18=$s1;
      var $aux7=(($18+16)|0);
      var $capa8=$aux7;
      HEAP32[(($capa8)>>2)]=$17;
      var $19=$mrb_addr;
      var $20=$s1;
      var $ptr=(($20+20)|0);
      var $21=HEAP32[(($ptr)>>2)];
      var $22=$len;
      var $add9=((($22)+(1))|0);
      var $call=_mrb_realloc($19, $21, $add9);
      var $23=$s1;
      var $ptr10=(($23+20)|0);
      HEAP32[(($ptr10)>>2)]=$call;
      label = 6; break;
    case 6: 
      var $24=$s1;
      var $ptr12=(($24+20)|0);
      var $25=HEAP32[(($ptr12)>>2)];
      var $26=$s1;
      var $len13=(($26+12)|0);
      var $27=HEAP32[(($len13)>>2)];
      var $add_ptr=(($25+$27)|0);
      var $28=$s2;
      var $ptr14=(($28+20)|0);
      var $29=HEAP32[(($ptr14)>>2)];
      var $30=$s2;
      var $len15=(($30+12)|0);
      var $31=HEAP32[(($len15)>>2)];
      assert($31 % 1 === 0);_memcpy($add_ptr, $29, $31);
      var $32=$len;
      var $33=$s1;
      var $len16=(($33+12)|0);
      HEAP32[(($len16)>>2)]=$32;
      var $34=$len;
      var $35=$s1;
      var $ptr17=(($35+20)|0);
      var $36=HEAP32[(($ptr17)>>2)];
      var $arrayidx=(($36+$34)|0);
      HEAP8[($arrayidx)]=0;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_to_str($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $s=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      var $tmp4=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      var $tt=(($str+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)|(0))==16;
      if ($cmp) { label = 7; break; } else { label = 3; break; }
    case 3: 
      var $1=$mrb_addr;
      _mrb_check_convert_type($tmp, $1, $str, 16, ((96620)|0), ((98380)|0));
      var $2=$s;
      var $3=$tmp;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      var $tt1=(($s+8)|0);
      var $4=HEAP32[(($tt1)>>2)];
      var $cmp2=(($4)|(0))==0;
      if ($cmp2) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $value=(($s)|0);
      var $i=$value;
      var $5=HEAP32[(($i)>>2)];
      var $tobool=(($5)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $6=$mrb_addr;
      _mrb_convert_type($tmp4, $6, $str, 16, ((96620)|0), ((95432)|0));
      var $7=$s;
      var $8=$tmp4;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      label = 6; break;
    case 6: 
      var $9=$agg_result;
      var $10=$s;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      label = 8; break;
    case 7: 
      var $11=$agg_result;
      var $12=$str;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_hash($mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $s;
      var $len;
      var $p2;
      var $key;
      $mrb_addr=$mrb;
      var $value=(($str)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $s=$1;
      var $2=$s;
      var $len1=(($2+12)|0);
      var $3=HEAP32[(($len1)>>2)];
      $len=$3;
      var $4=$s;
      var $ptr=(($4+20)|0);
      var $5=HEAP32[(($ptr)>>2)];
      $p2=$5;
      $key=0;
      label = 3; break;
    case 3: 
      var $6=$len;
      var $dec=((($6)-(1))|0);
      $len=$dec;
      var $tobool=(($6)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $7=$key;
      var $mul=((($7)*(65599))&-1);
      var $8=$p2;
      var $9=HEAP8[($8)];
      var $conv=(($9 << 24) >> 24);
      var $add=((($mul)+($conv))|0);
      $key=$add;
      var $10=$p2;
      var $incdec_ptr=(($10+1)|0);
      $p2=$incdec_ptr;
      label = 3; break;
    case 5: 
      var $11=$key;
      var $12=$key;
      var $shr=$12 >> 5;
      var $add3=((($11)+($shr))|0);
      $key=$add3;
      var $13=$key;
      STACKTOP = __stackBase__;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_plus($agg_result, $mrb, $a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $s;
  var $s2;
  var $t;
  $mrb_addr=$mrb;
  var $value=(($a)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  $s=$1;
  var $value1=(($b)|0);
  var $p2=$value1;
  var $2=HEAP32[(($p2)>>2)];
  var $3=$2;
  $s2=$3;
  var $4=$mrb_addr;
  var $5=$s;
  var $len=(($5+12)|0);
  var $6=HEAP32[(($len)>>2)];
  var $7=$s2;
  var $len3=(($7+12)|0);
  var $8=HEAP32[(($len3)>>2)];
  var $add=((($6)+($8))|0);
  var $call=_str_new($4, 0, $add);
  $t=$call;
  var $9=$t;
  var $ptr=(($9+20)|0);
  var $10=HEAP32[(($ptr)>>2)];
  var $11=$s;
  var $ptr4=(($11+20)|0);
  var $12=HEAP32[(($ptr4)>>2)];
  var $13=$s;
  var $len5=(($13+12)|0);
  var $14=HEAP32[(($len5)>>2)];
  assert($14 % 1 === 0);_memcpy($10, $12, $14);
  var $15=$t;
  var $ptr6=(($15+20)|0);
  var $16=HEAP32[(($ptr6)>>2)];
  var $17=$s;
  var $len7=(($17+12)|0);
  var $18=HEAP32[(($len7)>>2)];
  var $add_ptr=(($16+$18)|0);
  var $19=$s2;
  var $ptr8=(($19+20)|0);
  var $20=HEAP32[(($ptr8)>>2)];
  var $21=$s2;
  var $len9=(($21+12)|0);
  var $22=HEAP32[(($len9)>>2)];
  assert($22 % 1 === 0);_memcpy($add_ptr, $20, $22);
  var $23=$t;
  var $24=$23;
  _mrb_obj_value44($agg_result, $24);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_size($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $s;
  $mrb_addr=$mrb;
  var $value=(($self)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  $s=$1;
  var $2=$s;
  var $len=(($2+12)|0);
  var $3=HEAP32[(($len)>>2)];
  _mrb_fixnum_value47($agg_result, $3);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_fixnum_value47($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_cmp($mrb, $str1, $str2) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str1; $str1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $str2; $str2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $len;
      var $retval1;
      var $s1;
      var $s2;
      $mrb_addr=$mrb;
      var $value=(($str1)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $s1=$1;
      var $value2=(($str2)|0);
      var $p3=$value2;
      var $2=HEAP32[(($p3)>>2)];
      var $3=$2;
      $s2=$3;
      var $4=$s1;
      var $len4=(($4+12)|0);
      var $5=HEAP32[(($len4)>>2)];
      var $6=$s2;
      var $len5=(($6+12)|0);
      var $7=HEAP32[(($len5)>>2)];
      var $cmp=(($5)|(0)) > (($7)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$s2;
      var $len6=(($8+12)|0);
      var $9=HEAP32[(($len6)>>2)];
      var $cond = $9;label = 5; break;
    case 4: 
      var $10=$s1;
      var $len7=(($10+12)|0);
      var $11=HEAP32[(($len7)>>2)];
      var $cond = $11;label = 5; break;
    case 5: 
      var $cond;
      $len=$cond;
      var $12=$s1;
      var $ptr=(($12+20)|0);
      var $13=HEAP32[(($ptr)>>2)];
      var $14=$s2;
      var $ptr8=(($14+20)|0);
      var $15=HEAP32[(($ptr8)>>2)];
      var $16=$len;
      var $call=_memcmp($13, $15, $16);
      $retval1=$call;
      var $17=$retval1;
      var $cmp9=(($17)|(0))==0;
      if ($cmp9) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $18=$s1;
      var $len10=(($18+12)|0);
      var $19=HEAP32[(($len10)>>2)];
      var $20=$s2;
      var $len11=(($20+12)|0);
      var $21=HEAP32[(($len11)>>2)];
      var $cmp12=(($19)|(0))==(($21)|(0));
      if ($cmp12) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=0;
      label = 14; break;
    case 8: 
      var $22=$s1;
      var $len14=(($22+12)|0);
      var $23=HEAP32[(($len14)>>2)];
      var $24=$s2;
      var $len15=(($24+12)|0);
      var $25=HEAP32[(($len15)>>2)];
      var $cmp16=(($23)|(0)) > (($25)|(0));
      if ($cmp16) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $retval=1;
      label = 14; break;
    case 10: 
      $retval=-1;
      label = 14; break;
    case 11: 
      var $26=$retval1;
      var $cmp20=(($26)|(0)) > 0;
      if ($cmp20) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $retval=1;
      label = 14; break;
    case 13: 
      $retval=-1;
      label = 14; break;
    case 14: 
      var $27=$retval;
      STACKTOP = __stackBase__;
      return $27;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_equal($mrb, $str1, $str2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str1; $str1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $str2; $str2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $tmp=__stackBase__;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_obj_equal($0, $str1, $str2);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=1;
      label = 12; break;
    case 4: 
      var $tt=(($str2+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==16;
      if ($cmp) { label = 11; break; } else { label = 5; break; }
    case 5: 
      var $tt2=(($str2+8)|0);
      var $2=HEAP32[(($tt2)>>2)];
      var $cmp3=(($2)|(0))==0;
      if ($cmp3) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $value=(($str2)|0);
      var $i=$value;
      var $3=HEAP32[(($i)>>2)];
      var $tobool4=(($3)|(0))!=0;
      if ($tobool4) { label = 8; break; } else { label = 7; break; }
    case 7: 
      $retval=0;
      label = 12; break;
    case 8: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call7=_mrb_intern2($5, ((98380)|0), 6);
      var $call8=_mrb_respond_to($4, $str2, $call7);
      var $tobool9=(($call8)|(0))!=0;
      if ($tobool9) { label = 10; break; } else { label = 9; break; }
    case 9: 
      $retval=0;
      label = 12; break;
    case 10: 
      var $6=$mrb_addr;
      _mrb_funcall($tmp, $6, $str2, ((98380)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $7=$str2;
      var $8=$tmp;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      var $9=$mrb_addr;
      var $call12=_mrb_equal($9, $str2, $str1);
      $retval=$call12;
      label = 12; break;
    case 11: 
      var $10=$mrb_addr;
      var $call14=_str_eql($10, $str1, $str2);
      $retval=$call14;
      label = 12; break;
    case 12: 
      var $11=$retval;
      STACKTOP = __stackBase__;
      return $11;
    default: assert(0, "bad label: " + label);
  }
}
function _str_eql($mrb, $str1, $str2) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str1; $str1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $str2; $str2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $len;
      $mrb_addr=$mrb;
      var $value=(($str1)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $len1=(($1+12)|0);
      var $2=HEAP32[(($len1)>>2)];
      $len=$2;
      var $3=$len;
      var $value2=(($str2)|0);
      var $p3=$value2;
      var $4=HEAP32[(($p3)>>2)];
      var $5=$4;
      var $len4=(($5+12)|0);
      var $6=HEAP32[(($len4)>>2)];
      var $cmp=(($3)|(0))!=(($6)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 7; break;
    case 4: 
      var $value5=(($str1)|0);
      var $p6=$value5;
      var $7=HEAP32[(($p6)>>2)];
      var $8=$7;
      var $ptr=(($8+20)|0);
      var $9=HEAP32[(($ptr)>>2)];
      var $value7=(($str2)|0);
      var $p8=$value7;
      var $10=HEAP32[(($p8)>>2)];
      var $11=$10;
      var $ptr9=(($11+20)|0);
      var $12=HEAP32[(($ptr9)>>2)];
      var $13=$len;
      var $call=_memcmp($9, $12, $13);
      var $cmp10=(($call)|(0))==0;
      if ($cmp10) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=1;
      label = 7; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $14=$retval;
      STACKTOP = __stackBase__;
      return $14;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_dup($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $s;
  $mrb_addr=$mrb;
  var $value=(($str)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  $s=$1;
  var $2=$mrb_addr;
  var $3=$s;
  var $ptr=(($3+20)|0);
  var $4=HEAP32[(($ptr)>>2)];
  var $5=$s;
  var $len=(($5+12)|0);
  var $6=HEAP32[(($len)>>2)];
  _mrb_str_new($agg_result, $2, $4, $6);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_substr($agg_result, $mrb, $str, $beg, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $beg_addr;
      var $len_addr;
      var $str2=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      $beg_addr=$beg;
      $len_addr=$len;
      var $0=$len_addr;
      var $cmp=(($0)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      _mrb_nil_value48($agg_result);
      label = 17; break;
    case 4: 
      var $value=(($str)|0);
      var $p=$value;
      var $1=HEAP32[(($p)>>2)];
      var $2=$1;
      var $len1=(($2+12)|0);
      var $3=HEAP32[(($len1)>>2)];
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $len_addr=0;
      label = 6; break;
    case 6: 
      var $4=$beg_addr;
      var $value4=(($str)|0);
      var $p5=$value4;
      var $5=HEAP32[(($p5)>>2)];
      var $6=$5;
      var $len6=(($6+12)|0);
      var $7=HEAP32[(($len6)>>2)];
      var $cmp7=(($4)|(0)) > (($7)|(0));
      if ($cmp7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _mrb_nil_value48($agg_result);
      label = 17; break;
    case 8: 
      var $8=$beg_addr;
      var $cmp10=(($8)|(0)) < 0;
      if ($cmp10) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $value12=(($str)|0);
      var $p13=$value12;
      var $9=HEAP32[(($p13)>>2)];
      var $10=$9;
      var $len14=(($10+12)|0);
      var $11=HEAP32[(($len14)>>2)];
      var $12=$beg_addr;
      var $add=((($12)+($11))|0);
      $beg_addr=$add;
      var $13=$beg_addr;
      var $cmp15=(($13)|(0)) < 0;
      if ($cmp15) { label = 10; break; } else { label = 11; break; }
    case 10: 
      _mrb_nil_value48($agg_result);
      label = 17; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $14=$beg_addr;
      var $15=$len_addr;
      var $add19=((($14)+($15))|0);
      var $value20=(($str)|0);
      var $p21=$value20;
      var $16=HEAP32[(($p21)>>2)];
      var $17=$16;
      var $len22=(($17+12)|0);
      var $18=HEAP32[(($len22)>>2)];
      var $cmp23=(($add19)|(0)) > (($18)|(0));
      if ($cmp23) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $value25=(($str)|0);
      var $p26=$value25;
      var $19=HEAP32[(($p26)>>2)];
      var $20=$19;
      var $len27=(($20+12)|0);
      var $21=HEAP32[(($len27)>>2)];
      var $22=$beg_addr;
      var $sub=((($21)-($22))|0);
      $len_addr=$sub;
      label = 14; break;
    case 14: 
      var $23=$len_addr;
      var $cmp29=(($23)|(0)) <= 0;
      if ($cmp29) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $len_addr=0;
      label = 16; break;
    case 16: 
      var $24=$mrb_addr;
      var $25=$beg_addr;
      var $26=$len_addr;
      _mrb_str_subseq($tmp, $24, $str, $25, $26);
      var $27=$str2;
      var $28=$tmp;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      var $29=$agg_result;
      var $30=$str2;
      assert(12 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($29)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];
      label = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value48($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_subseq($agg_result, $mrb, $str, $beg, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $beg_addr;
  var $len_addr;
  var $orig;
  var $s;
  var $shared;
  $mrb_addr=$mrb;
  $beg_addr=$beg;
  $len_addr=$len;
  var $value=(($str)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  $orig=$1;
  var $2=$mrb_addr;
  var $3=$orig;
  _str_make_shared($2, $3);
  var $4=$orig;
  var $aux=(($4+16)|0);
  var $shared1=$aux;
  var $5=HEAP32[(($shared1)>>2)];
  $shared=$5;
  var $6=$mrb_addr;
  var $7=$mrb_addr;
  var $string_class=(($7+60)|0);
  var $8=HEAP32[(($string_class)>>2)];
  var $call=_mrb_obj_alloc($6, 16, $8);
  var $9=$call;
  $s=$9;
  var $10=$orig;
  var $ptr=(($10+20)|0);
  var $11=HEAP32[(($ptr)>>2)];
  var $12=$beg_addr;
  var $add_ptr=(($11+$12)|0);
  var $13=$s;
  var $ptr2=(($13+20)|0);
  HEAP32[(($ptr2)>>2)]=$add_ptr;
  var $14=$len_addr;
  var $15=$s;
  var $len3=(($15+12)|0);
  HEAP32[(($len3)>>2)]=$14;
  var $16=$shared;
  var $17=$s;
  var $aux4=(($17+16)|0);
  var $shared5=$aux4;
  HEAP32[(($shared5)>>2)]=$16;
  var $18=$s;
  var $19=$18;
  var $20=HEAP32[(($19)>>2)];
  var $21=$20 >>> 11;
  var $bf_clear=$21 & 2097151;
  var $or=$bf_clear | 1;
  var $bf_value=$or & 2097151;
  var $22=$18;
  var $23=$bf_value & 2097151;
  var $24=$23 << 11;
  var $25=HEAP32[(($22)>>2)];
  var $26=$25 & 2047;
  var $27=$26 | $24;
  HEAP32[(($22)>>2)]=$27;
  var $28=$shared;
  var $refcnt=(($28+4)|0);
  var $29=HEAP32[(($refcnt)>>2)];
  var $inc=((($29)+(1))|0);
  HEAP32[(($refcnt)>>2)]=$inc;
  var $30=$s;
  var $31=$30;
  _mrb_obj_value44($agg_result, $31);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_buf_append($agg_result, $mrb, $str, $str2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $str2; $str2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $tmp=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $value=(($str2)|0);
  var $p=$value;
  var $1=HEAP32[(($p)>>2)];
  var $2=$1;
  var $ptr=(($2+20)|0);
  var $3=HEAP32[(($ptr)>>2)];
  var $value1=(($str2)|0);
  var $p2=$value1;
  var $4=HEAP32[(($p2)>>2)];
  var $5=$4;
  var $len=(($5+12)|0);
  var $6=HEAP32[(($len)>>2)];
  _mrb_str_cat($tmp, $0, $str, $3, $6);
  var $7=$agg_result;
  var $8=$str;
  assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_cat($agg_result, $mrb, $str, $ptr, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ptr_addr;
      var $len_addr;
      $mrb_addr=$mrb;
      $ptr_addr=$ptr;
      $len_addr=$len;
      var $0=$len_addr;
      var $cmp=(($0)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mrb_addr;
      var $2=$mrb_addr;
      var $call=_mrb_class_get($2, ((104876)|0));
      _mrb_raise($1, $call, ((111856)|0));
      label = 4; break;
    case 4: 
      var $3=$mrb_addr;
      var $value=(($str)|0);
      var $p=$value;
      var $4=HEAP32[(($p)>>2)];
      var $5=$4;
      var $6=$ptr_addr;
      var $7=$len_addr;
      _str_buf_cat($3, $5, $6, $7);
      var $8=$agg_result;
      var $9=$str;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_intern($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $id;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_intern_str($0, $self);
  $id=$call;
  var $1=$id;
  _mrb_symbol_value($agg_result, $1);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_symbol_value($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=4;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $sym=$value;
      HEAP16[(($sym)>>1)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_as_string($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $str=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $tt=(($obj+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)|(0))==16;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$agg_result;
      var $2=$obj;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      label = 7; break;
    case 4: 
      var $3=$mrb_addr;
      _mrb_funcall($tmp, $3, $obj, ((95432)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=$str;
      var $5=$tmp;
      assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
      var $tt1=(($str+8)|0);
      var $6=HEAP32[(($tt1)>>2)];
      var $cmp2=(($6)|(0))==16;
      if ($cmp2) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $7=$mrb_addr;
      _mrb_any_to_s($agg_result, $7, $obj);
      label = 7; break;
    case 6: 
      var $8=$agg_result;
      var $9=$str;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ptr_to_str($agg_result, $mrb, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $p_addr;
      var $p_str;
      var $p1;
      var $p2;
      var $n;
      var $c;
      $mrb_addr=$mrb;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $n=$1;
      var $2=$mrb_addr;
      var $call=_str_new($2, 0, 10);
      $p_str=$call;
      var $3=$p_str;
      var $ptr=(($3+20)|0);
      var $4=HEAP32[(($ptr)>>2)];
      $p1=$4;
      var $5=$p1;
      var $incdec_ptr=(($5+1)|0);
      $p1=$incdec_ptr;
      HEAP8[($5)]=48;
      var $6=$p1;
      var $incdec_ptr1=(($6+1)|0);
      $p1=$incdec_ptr1;
      HEAP8[($6)]=120;
      var $7=$p1;
      $p2=$7;
      label = 3; break;
    case 3: 
      var $8=$n;
      var $rem=((($8)|(0)))%(16);
      var $arrayidx=((79868+$rem)|0);
      var $9=HEAP8[($arrayidx)];
      var $10=$p2;
      var $incdec_ptr2=(($10+1)|0);
      $p2=$incdec_ptr2;
      HEAP8[($10)]=$9;
      var $11=$n;
      var $div=((((($11)|(0)))/(16))&-1);
      $n=$div;
      label = 4; break;
    case 4: 
      var $12=$n;
      var $cmp=(($12)|(0)) > 0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 5: 
      var $13=$p2;
      HEAP8[($13)]=0;
      var $14=$p2;
      var $15=$p_str;
      var $ptr3=(($15+20)|0);
      var $16=HEAP32[(($ptr3)>>2)];
      var $sub_ptr_lhs_cast=$14;
      var $sub_ptr_rhs_cast=$16;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $17=$p_str;
      var $len=(($17+12)|0);
      HEAP32[(($len)>>2)]=$sub_ptr_sub;
      label = 6; break;
    case 6: 
      var $18=$p1;
      var $19=$p2;
      var $cmp4=(($18)>>>(0)) < (($19)>>>(0));
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $20=$p1;
      var $21=HEAP8[($20)];
      $c=$21;
      var $22=$p2;
      var $incdec_ptr5=((($22)-(1))|0);
      $p2=$incdec_ptr5;
      var $23=HEAP8[($incdec_ptr5)];
      var $24=$p1;
      var $incdec_ptr6=(($24+1)|0);
      $p1=$incdec_ptr6;
      HEAP8[($24)]=$23;
      var $25=$c;
      var $26=$p2;
      HEAP8[($26)]=$25;
      label = 6; break;
    case 8: 
      var $27=$p_str;
      var $28=$27;
      _mrb_obj_value44($agg_result, $28);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_check_string_type($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_check_convert_type($agg_result, $0, $str, 16, ((96620)|0), ((98380)|0));
  STACKTOP = __stackBase__;
  return;
}
function _mrb_cstr_to_inum($agg_result, $mrb, $str, $base, $badcheck) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $str_addr;
      var $base_addr;
      var $badcheck_addr;
      var $end=__stackBase__;
      var $sign;
      var $c;
      var $n;
      var $val;
      var $agg_tmp=(__stackBase__)+(4);
      var $us;
      var $agg_tmp201=(__stackBase__)+(16);
      var $agg_tmp230=(__stackBase__)+(28);
      $mrb_addr=$mrb;
      $str_addr=$str;
      $base_addr=$base;
      $badcheck_addr=$badcheck;
      $sign=1;
      var $0=$str_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 3; break; }
    case 3: 
      var $1=$badcheck_addr;
      var $tobool1=(($1)|(0))!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 107; break;
    case 5: 
      _mrb_fixnum_value47($agg_result, 0);
      label = 108; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $2=$str_addr;
      var $3=HEAP8[($2)];
      var $conv=(($3)&(255));
      var $call=_isspace($conv);
      var $tobool4=(($call)|(0))!=0;
      if ($tobool4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $4=$str_addr;
      var $incdec_ptr=(($4+1)|0);
      $str_addr=$incdec_ptr;
      label = 7; break;
    case 9: 
      var $5=$str_addr;
      var $arrayidx=(($5)|0);
      var $6=HEAP8[($arrayidx)];
      var $conv5=(($6 << 24) >> 24);
      var $cmp=(($conv5)|(0))==43;
      if ($cmp) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $7=$str_addr;
      var $incdec_ptr8=(($7+1)|0);
      $str_addr=$incdec_ptr8;
      label = 14; break;
    case 11: 
      var $8=$str_addr;
      var $arrayidx9=(($8)|0);
      var $9=HEAP8[($arrayidx9)];
      var $conv10=(($9 << 24) >> 24);
      var $cmp11=(($conv10)|(0))==45;
      if ($cmp11) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $10=$str_addr;
      var $incdec_ptr14=(($10+1)|0);
      $str_addr=$incdec_ptr14;
      $sign=0;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $11=$str_addr;
      var $arrayidx17=(($11)|0);
      var $12=HEAP8[($arrayidx17)];
      var $conv18=(($12 << 24) >> 24);
      var $cmp19=(($conv18)|(0))==43;
      if ($cmp19) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $13=$str_addr;
      var $arrayidx21=(($13)|0);
      var $14=HEAP8[($arrayidx21)];
      var $conv22=(($14 << 24) >> 24);
      var $cmp23=(($conv22)|(0))==45;
      if ($cmp23) { label = 16; break; } else { label = 19; break; }
    case 16: 
      var $15=$badcheck_addr;
      var $tobool26=(($15)|(0))!=0;
      if ($tobool26) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 107; break;
    case 18: 
      _mrb_fixnum_value47($agg_result, 0);
      label = 108; break;
    case 19: 
      var $16=$base_addr;
      var $cmp30=(($16)|(0)) <= 0;
      if ($cmp30) { label = 20; break; } else { label = 33; break; }
    case 20: 
      var $17=$str_addr;
      var $arrayidx33=(($17)|0);
      var $18=HEAP8[($arrayidx33)];
      var $conv34=(($18 << 24) >> 24);
      var $cmp35=(($conv34)|(0))==48;
      if ($cmp35) { label = 21; break; } else { label = 28; break; }
    case 21: 
      var $19=$str_addr;
      var $arrayidx38=(($19+1)|0);
      var $20=HEAP8[($arrayidx38)];
      var $conv39=(($20 << 24) >> 24);
      if ((($conv39)|(0))==120 | (($conv39)|(0))==88) {
        label = 22; break;
      }
      else if ((($conv39)|(0))==98 | (($conv39)|(0))==66) {
        label = 23; break;
      }
      else if ((($conv39)|(0))==111 | (($conv39)|(0))==79) {
        label = 24; break;
      }
      else if ((($conv39)|(0))==100 | (($conv39)|(0))==68) {
        label = 25; break;
      }
      else {
      label = 26; break;
      }
    case 22: 
      $base_addr=16;
      label = 27; break;
    case 23: 
      $base_addr=2;
      label = 27; break;
    case 24: 
      $base_addr=8;
      label = 27; break;
    case 25: 
      $base_addr=10;
      label = 27; break;
    case 26: 
      $base_addr=8;
      label = 27; break;
    case 27: 
      label = 32; break;
    case 28: 
      var $21=$base_addr;
      var $cmp44=(($21)|(0)) < -1;
      if ($cmp44) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $22=$base_addr;
      var $sub=(((-$22))|0);
      $base_addr=$sub;
      label = 31; break;
    case 30: 
      $base_addr=10;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $23=$base_addr;
      if ((($23)|(0))==2) {
        label = 34; break;
      }
      else if ((($23)|(0))==3) {
        label = 39; break;
      }
      else if ((($23)|(0))==8) {
        label = 40; break;
      }
      else if ((($23)|(0))==4 | (($23)|(0))==5 | (($23)|(0))==6 | (($23)|(0))==7) {
        label = 45; break;
      }
      else if ((($23)|(0))==10) {
        label = 46; break;
      }
      else if ((($23)|(0))==9 | (($23)|(0))==11 | (($23)|(0))==12 | (($23)|(0))==13 | (($23)|(0))==14 | (($23)|(0))==15) {
        label = 51; break;
      }
      else if ((($23)|(0))==16) {
        label = 52; break;
      }
      else {
      label = 57; break;
      }
    case 34: 
      var $24=$str_addr;
      var $arrayidx52=(($24)|0);
      var $25=HEAP8[($arrayidx52)];
      var $conv53=(($25 << 24) >> 24);
      var $cmp54=(($conv53)|(0))==48;
      if ($cmp54) { label = 35; break; } else { label = 38; break; }
    case 35: 
      var $26=$str_addr;
      var $arrayidx56=(($26+1)|0);
      var $27=HEAP8[($arrayidx56)];
      var $conv57=(($27 << 24) >> 24);
      var $cmp58=(($conv57)|(0))==98;
      if ($cmp58) { label = 37; break; } else { label = 36; break; }
    case 36: 
      var $28=$str_addr;
      var $arrayidx61=(($28+1)|0);
      var $29=HEAP8[($arrayidx61)];
      var $conv62=(($29 << 24) >> 24);
      var $cmp63=(($conv62)|(0))==66;
      if ($cmp63) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $30=$str_addr;
      var $add_ptr=(($30+2)|0);
      $str_addr=$add_ptr;
      label = 38; break;
    case 38: 
      label = 61; break;
    case 39: 
      label = 61; break;
    case 40: 
      var $31=$str_addr;
      var $arrayidx69=(($31)|0);
      var $32=HEAP8[($arrayidx69)];
      var $conv70=(($32 << 24) >> 24);
      var $cmp71=(($conv70)|(0))==48;
      if ($cmp71) { label = 41; break; } else { label = 44; break; }
    case 41: 
      var $33=$str_addr;
      var $arrayidx74=(($33+1)|0);
      var $34=HEAP8[($arrayidx74)];
      var $conv75=(($34 << 24) >> 24);
      var $cmp76=(($conv75)|(0))==111;
      if ($cmp76) { label = 43; break; } else { label = 42; break; }
    case 42: 
      var $35=$str_addr;
      var $arrayidx79=(($35+1)|0);
      var $36=HEAP8[($arrayidx79)];
      var $conv80=(($36 << 24) >> 24);
      var $cmp81=(($conv80)|(0))==79;
      if ($cmp81) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $37=$str_addr;
      var $add_ptr84=(($37+2)|0);
      $str_addr=$add_ptr84;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 61; break;
    case 46: 
      var $38=$str_addr;
      var $arrayidx88=(($38)|0);
      var $39=HEAP8[($arrayidx88)];
      var $conv89=(($39 << 24) >> 24);
      var $cmp90=(($conv89)|(0))==48;
      if ($cmp90) { label = 47; break; } else { label = 50; break; }
    case 47: 
      var $40=$str_addr;
      var $arrayidx93=(($40+1)|0);
      var $41=HEAP8[($arrayidx93)];
      var $conv94=(($41 << 24) >> 24);
      var $cmp95=(($conv94)|(0))==100;
      if ($cmp95) { label = 49; break; } else { label = 48; break; }
    case 48: 
      var $42=$str_addr;
      var $arrayidx98=(($42+1)|0);
      var $43=HEAP8[($arrayidx98)];
      var $conv99=(($43 << 24) >> 24);
      var $cmp100=(($conv99)|(0))==68;
      if ($cmp100) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $44=$str_addr;
      var $add_ptr103=(($44+2)|0);
      $str_addr=$add_ptr103;
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 61; break;
    case 52: 
      var $45=$str_addr;
      var $arrayidx107=(($45)|0);
      var $46=HEAP8[($arrayidx107)];
      var $conv108=(($46 << 24) >> 24);
      var $cmp109=(($conv108)|(0))==48;
      if ($cmp109) { label = 53; break; } else { label = 56; break; }
    case 53: 
      var $47=$str_addr;
      var $arrayidx112=(($47+1)|0);
      var $48=HEAP8[($arrayidx112)];
      var $conv113=(($48 << 24) >> 24);
      var $cmp114=(($conv113)|(0))==120;
      if ($cmp114) { label = 55; break; } else { label = 54; break; }
    case 54: 
      var $49=$str_addr;
      var $arrayidx117=(($49+1)|0);
      var $50=HEAP8[($arrayidx117)];
      var $conv118=(($50 << 24) >> 24);
      var $cmp119=(($conv118)|(0))==88;
      if ($cmp119) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $51=$str_addr;
      var $add_ptr122=(($51+2)|0);
      $str_addr=$add_ptr122;
      label = 56; break;
    case 56: 
      label = 61; break;
    case 57: 
      var $52=$base_addr;
      var $cmp125=(($52)|(0)) < 2;
      if ($cmp125) { label = 59; break; } else { label = 58; break; }
    case 58: 
      var $53=$base_addr;
      var $cmp128=36 < (($53)|(0));
      if ($cmp128) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $54=$mrb_addr;
      var $55=$mrb_addr;
      var $call131=_mrb_class_get($55, ((104876)|0));
      var $56=$base_addr;
      _mrb_fixnum_value47($agg_tmp, $56);
      _mrb_raisef($54, $call131, ((94532)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $57=$str_addr;
      var $58=HEAP8[($57)];
      var $conv134=(($58 << 24) >> 24);
      var $cmp135=(($conv134)|(0))==48;
      if ($cmp135) { label = 62; break; } else { label = 76; break; }
    case 62: 
      $us=0;
      label = 63; break;
    case 63: 
      var $59=$str_addr;
      var $incdec_ptr139=(($59+1)|0);
      $str_addr=$incdec_ptr139;
      var $60=HEAP8[($incdec_ptr139)];
      var $conv140=(($60 << 24) >> 24);
      $c=$conv140;
      var $cmp141=(($conv140)|(0))==48;
      if ($cmp141) { var $62 = 1;label = 65; break; } else { label = 64; break; }
    case 64: 
      var $61=$c;
      var $cmp143=(($61)|(0))==95;
      var $62 = $cmp143;label = 65; break;
    case 65: 
      var $62;
      if ($62) { label = 66; break; } else { label = 72; break; }
    case 66: 
      var $63=$c;
      var $cmp146=(($63)|(0))==95;
      if ($cmp146) { label = 67; break; } else { label = 70; break; }
    case 67: 
      var $64=$us;
      var $inc=((($64)+(1))|0);
      $us=$inc;
      var $cmp149=(($inc)|(0)) >= 2;
      if ($cmp149) { label = 68; break; } else { label = 69; break; }
    case 68: 
      label = 72; break;
    case 69: 
      label = 71; break;
    case 70: 
      $us=0;
      label = 71; break;
    case 71: 
      label = 63; break;
    case 72: 
      var $65=$str_addr;
      var $66=HEAP8[($65)];
      var $conv156=(($66 << 24) >> 24);
      $c=$conv156;
      var $tobool157=(($conv156)|(0))!=0;
      if ($tobool157) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $67=$c;
      var $conv159=(($67) & 255);
      var $conv160=(($conv159)&(255));
      var $call161=_isspace($conv160);
      var $tobool162=(($call161)|(0))!=0;
      if ($tobool162) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $68=$str_addr;
      var $incdec_ptr164=((($68)-(1))|0);
      $str_addr=$incdec_ptr164;
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      var $69=$str_addr;
      var $70=HEAP8[($69)];
      var $conv167=(($70 << 24) >> 24);
      $c=$conv167;
      var $71=$c;
      var $call168=_isdigit($71);
      var $tobool169=(($call168)|(0))!=0;
      if ($tobool169) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $72=$c;
      var $sub170=((($72)-(48))|0);
      var $cond185 = $sub170;label = 85; break;
    case 78: 
      var $73=$c;
      var $call171=_islower($73);
      var $tobool172=(($call171)|(0))!=0;
      if ($tobool172) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $74=$c;
      var $sub174=((($74)-(97))|0);
      var $add=((($sub174)+(10))|0);
      var $cond183 = $add;label = 84; break;
    case 80: 
      var $75=$c;
      var $call176=_isupper($75);
      var $tobool177=(($call176)|(0))!=0;
      if ($tobool177) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $76=$c;
      var $sub179=((($76)-(65))|0);
      var $add180=((($sub179)+(10))|0);
      var $cond = $add180;label = 83; break;
    case 82: 
      var $cond = -1;label = 83; break;
    case 83: 
      var $cond;
      var $cond183 = $cond;label = 84; break;
    case 84: 
      var $cond183;
      var $cond185 = $cond183;label = 85; break;
    case 85: 
      var $cond185;
      $c=$cond185;
      var $77=$c;
      var $cmp186=(($77)|(0)) < 0;
      if ($cmp186) { label = 87; break; } else { label = 86; break; }
    case 86: 
      var $78=$c;
      var $79=$base_addr;
      var $cmp189=(($78)|(0)) >= (($79)|(0));
      if ($cmp189) { label = 87; break; } else { label = 90; break; }
    case 87: 
      var $80=$badcheck_addr;
      var $tobool192=(($80)|(0))!=0;
      if ($tobool192) { label = 88; break; } else { label = 89; break; }
    case 88: 
      label = 107; break;
    case 89: 
      _mrb_fixnum_value47($agg_result, 0);
      label = 108; break;
    case 90: 
      var $81=$str_addr;
      var $82=$base_addr;
      var $call196=_strtoul($81, $end, $82);
      $n=$call196;
      var $83=$n;
      var $cmp197=(($83)>>>(0)) > 2147483647;
      if ($cmp197) { label = 91; break; } else { label = 92; break; }
    case 91: 
      var $84=$mrb_addr;
      var $85=$mrb_addr;
      var $call200=_mrb_class_get($85, ((104876)|0));
      var $86=$mrb_addr;
      var $87=$str_addr;
      _mrb_str_new_cstr($agg_tmp201, $86, $87);
      _mrb_raisef($84, $call200, ((93604)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp201)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp201)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp201)+(8))>>2)],tempInt));
      label = 92; break;
    case 92: 
      var $88=$n;
      $val=$88;
      var $89=$badcheck_addr;
      var $tobool203=(($89)|(0))!=0;
      if ($tobool203) { label = 93; break; } else { label = 103; break; }
    case 93: 
      var $90=HEAP32[(($end)>>2)];
      var $91=$str_addr;
      var $cmp205=(($90)|(0))==(($91)|(0));
      if ($cmp205) { label = 94; break; } else { label = 95; break; }
    case 94: 
      label = 107; break;
    case 95: 
      label = 96; break;
    case 96: 
      var $92=HEAP32[(($end)>>2)];
      var $93=HEAP8[($92)];
      var $conv210=(($93 << 24) >> 24);
      var $tobool211=(($conv210)|(0))!=0;
      if ($tobool211) { label = 97; break; } else { var $96 = 0;label = 98; break; }
    case 97: 
      var $94=HEAP32[(($end)>>2)];
      var $95=HEAP8[($94)];
      var $conv212=(($95)&(255));
      var $call213=_isspace($conv212);
      var $tobool214=(($call213)|(0))!=0;
      var $96 = $tobool214;label = 98; break;
    case 98: 
      var $96;
      if ($96) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $97=HEAP32[(($end)>>2)];
      var $incdec_ptr216=(($97+1)|0);
      HEAP32[(($end)>>2)]=$incdec_ptr216;
      label = 96; break;
    case 100: 
      var $98=HEAP32[(($end)>>2)];
      var $99=HEAP8[($98)];
      var $tobool218=(($99 << 24) >> 24)!=0;
      if ($tobool218) { label = 101; break; } else { label = 102; break; }
    case 101: 
      label = 107; break;
    case 102: 
      label = 103; break;
    case 103: 
      var $100=$sign;
      var $conv222=(($100 << 24) >> 24);
      var $tobool223=(($conv222)|(0))!=0;
      if ($tobool223) { label = 104; break; } else { label = 105; break; }
    case 104: 
      var $101=$val;
      var $cond228 = $101;label = 106; break;
    case 105: 
      var $102=$val;
      var $sub226=(((-$102))|0);
      var $cond228 = $sub226;label = 106; break;
    case 106: 
      var $cond228;
      _mrb_fixnum_value47($agg_result, $cond228);
      label = 108; break;
    case 107: 
      var $103=$mrb_addr;
      var $104=$mrb_addr;
      var $call229=_mrb_class_get($104, ((104876)|0));
      var $105=$mrb_addr;
      var $106=$str_addr;
      _mrb_str_new_cstr($agg_tmp230, $105, $106);
      _mrb_raisef($103, $call229, ((113472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp230)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp230)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp230)+(8))>>2)],tempInt));
      _mrb_fixnum_value47($agg_result, 0);
      label = 108; break;
    case 108: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_string_value_cstr($mrb, $ptr) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ptr_addr;
      var $ps;
      var $s;
      $mrb_addr=$mrb;
      $ptr_addr=$ptr;
      var $0=$ptr_addr;
      var $value=(($0)|0);
      var $p=$value;
      var $1=HEAP32[(($p)>>2)];
      var $2=$1;
      $ps=$2;
      var $3=$ps;
      var $ptr1=(($3+20)|0);
      var $4=HEAP32[(($ptr1)>>2)];
      $s=$4;
      var $5=$s;
      var $tobool=(($5)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$ps;
      var $len=(($6+12)|0);
      var $7=HEAP32[(($len)>>2)];
      var $8=$s;
      var $call=_strlen($8);
      var $cmp=(($7)|(0))!=(($call)|(0));
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $9=$mrb_addr;
      var $10=$mrb_addr;
      var $call2=_mrb_class_get($10, ((104876)|0));
      _mrb_raise($9, $call2, ((100876)|0));
      label = 5; break;
    case 5: 
      var $11=$s;
      return $11;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_to_inum($agg_result, $mrb, $str, $base, $badcheck) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $base_addr;
      var $badcheck_addr;
      var $s;
      var $len;
      var $tmp=__stackBase__;
      var $temp_str;
      $mrb_addr=$mrb;
      $base_addr=$base;
      $badcheck_addr=$badcheck;
      var $0=$mrb_addr;
      _mrb_str_to_str($tmp, $0, $str);
      var $1=$str;
      var $2=$tmp;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      var $3=$badcheck_addr;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$mrb_addr;
      var $call=_mrb_string_value_cstr($4, $str);
      $s=$call;
      label = 5; break;
    case 4: 
      var $value=(($str)|0);
      var $p=$value;
      var $5=HEAP32[(($p)>>2)];
      var $6=$5;
      var $ptr=(($6+20)|0);
      var $7=HEAP32[(($ptr)>>2)];
      $s=$7;
      label = 5; break;
    case 5: 
      var $8=$s;
      var $tobool1=(($8)|(0))!=0;
      if ($tobool1) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $value3=(($str)|0);
      var $p4=$value3;
      var $9=HEAP32[(($p4)>>2)];
      var $10=$9;
      var $len5=(($10+12)|0);
      var $11=HEAP32[(($len5)>>2)];
      $len=$11;
      var $12=$len;
      var $13=$s;
      var $arrayidx=(($13+$12)|0);
      var $14=HEAP8[($arrayidx)];
      var $tobool6=(($14 << 24) >> 24)!=0;
      if ($tobool6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $15=$mrb_addr;
      var $16=$s;
      var $17=$len;
      var $call9=_str_new($15, $16, $17);
      $temp_str=$call9;
      var $18=$temp_str;
      var $ptr10=(($18+20)|0);
      var $19=HEAP32[(($ptr10)>>2)];
      $s=$19;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $20=$mrb_addr;
      var $21=$s;
      var $22=$base_addr;
      var $23=$badcheck_addr;
      _mrb_cstr_to_inum($agg_result, $20, $21, $22, $23);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_cstr_to_dbl($mrb, $p, $badcheck) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 92)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $p_addr;
      var $badcheck_addr;
      var $end=__stackBase__;
      var $d;
      var $agg_tmp=(__stackBase__)+(4);
      var $buf=(__stackBase__)+(16);
      var $n;
      var $e;
      var $prev;
      $mrb_addr=$mrb;
      $p_addr=$p;
      $badcheck_addr=$badcheck;
      var $0=$p_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=0;
      label = 62; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $1=$p_addr;
      var $2=HEAP8[($1)];
      var $conv=(($2)&(255));
      var $call=_isspace($conv);
      var $tobool1=(($call)|(0))!=0;
      if ($tobool1) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $3=$p_addr;
      var $incdec_ptr=(($3+1)|0);
      $p_addr=$incdec_ptr;
      label = 5; break;
    case 7: 
      var $4=$badcheck_addr;
      var $tobool2=(($4)|(0))!=0;
      if ($tobool2) { label = 12; break; } else { label = 8; break; }
    case 8: 
      var $5=$p_addr;
      var $arrayidx=(($5)|0);
      var $6=HEAP8[($arrayidx)];
      var $conv3=(($6 << 24) >> 24);
      var $cmp=(($conv3)|(0))==48;
      if ($cmp) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $7=$p_addr;
      var $arrayidx6=(($7+1)|0);
      var $8=HEAP8[($arrayidx6)];
      var $conv7=(($8 << 24) >> 24);
      var $cmp8=(($conv7)|(0))==120;
      if ($cmp8) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $9=$p_addr;
      var $arrayidx10=(($9+1)|0);
      var $10=HEAP8[($arrayidx10)];
      var $conv11=(($10 << 24) >> 24);
      var $cmp12=(($conv11)|(0))==88;
      if ($cmp12) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $retval=0;
      label = 62; break;
    case 12: 
      var $11=$p_addr;
      var $call16=_strtod($11, $end);
      $d=$call16;
      var $12=$p_addr;
      var $13=HEAP32[(($end)>>2)];
      var $cmp17=(($12)|(0))==(($13)|(0));
      if ($cmp17) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $14=$badcheck_addr;
      var $tobool20=(($14)|(0))!=0;
      if ($tobool20) { label = 14; break; } else { label = 16; break; }
    case 14: 
      label = 15; break;
    case 15: 
      var $15=$mrb_addr;
      var $16=$mrb_addr;
      var $call22=_mrb_class_get($16, ((104876)|0));
      var $17=$mrb_addr;
      var $18=$p_addr;
      _mrb_str_new_cstr($agg_tmp, $17, $18);
      _mrb_raisef($15, $call22, ((112852)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 16; break;
    case 16: 
      var $19=$d;
      $retval=$19;
      label = 62; break;
    case 17: 
      var $20=HEAP32[(($end)>>2)];
      var $21=HEAP8[($20)];
      var $tobool25=(($21 << 24) >> 24)!=0;
      if ($tobool25) { label = 18; break; } else { label = 61; break; }
    case 18: 
      var $arraydecay=(($buf)|0);
      $n=$arraydecay;
      var $arraydecay27=(($buf)|0);
      var $add_ptr=(($arraydecay27+74)|0);
      var $add_ptr28=((($add_ptr)-(1))|0);
      $e=$add_ptr28;
      $prev=0;
      label = 19; break;
    case 19: 
      var $22=$p_addr;
      var $23=HEAP32[(($end)>>2)];
      var $cmp30=(($22)>>>(0)) < (($23)>>>(0));
      if ($cmp30) { label = 20; break; } else { var $26 = 0;label = 21; break; }
    case 20: 
      var $24=$n;
      var $25=$e;
      var $cmp32=(($24)>>>(0)) < (($25)>>>(0));
      var $26 = $cmp32;label = 21; break;
    case 21: 
      var $26;
      if ($26) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $27=$p_addr;
      var $incdec_ptr35=(($27+1)|0);
      $p_addr=$incdec_ptr35;
      var $28=HEAP8[($27)];
      var $29=$n;
      var $incdec_ptr36=(($29+1)|0);
      $n=$incdec_ptr36;
      HEAP8[($29)]=$28;
      $prev=$28;
      label = 19; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $30=$p_addr;
      var $31=HEAP8[($30)];
      var $tobool39=(($31 << 24) >> 24)!=0;
      if ($tobool39) { label = 25; break; } else { label = 43; break; }
    case 25: 
      var $32=$p_addr;
      var $33=HEAP8[($32)];
      var $conv41=(($33 << 24) >> 24);
      var $cmp42=(($conv41)|(0))==95;
      if ($cmp42) { label = 26; break; } else { label = 40; break; }
    case 26: 
      var $34=$badcheck_addr;
      var $tobool45=(($34)|(0))!=0;
      if ($tobool45) { label = 27; break; } else { label = 35; break; }
    case 27: 
      var $35=$n;
      var $arraydecay47=(($buf)|0);
      var $cmp48=(($35)|(0))==(($arraydecay47)|(0));
      if ($cmp48) { label = 30; break; } else { label = 28; break; }
    case 28: 
      var $36=$prev;
      var $conv51=(($36 << 24) >> 24);
      var $cmp52=48 <= (($conv51)|(0));
      if ($cmp52) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $37=$prev;
      var $conv55=(($37 << 24) >> 24);
      var $cmp56=(($conv55)|(0)) <= 57;
      if ($cmp56) { label = 31; break; } else { label = 30; break; }
    case 30: 
      label = 15; break;
    case 31: 
      var $38=$p_addr;
      var $incdec_ptr60=(($38+1)|0);
      $p_addr=$incdec_ptr60;
      var $39=$p_addr;
      var $40=HEAP8[($39)];
      var $conv61=(($40 << 24) >> 24);
      var $cmp62=48 <= (($conv61)|(0));
      if ($cmp62) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $41=$p_addr;
      var $42=HEAP8[($41)];
      var $conv65=(($42 << 24) >> 24);
      var $cmp66=(($conv65)|(0)) <= 57;
      if ($cmp66) { label = 34; break; } else { label = 33; break; }
    case 33: 
      label = 15; break;
    case 34: 
      label = 39; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $43=$p_addr;
      var $incdec_ptr71=(($43+1)|0);
      $p_addr=$incdec_ptr71;
      var $44=HEAP8[($incdec_ptr71)];
      var $conv72=(($44 << 24) >> 24);
      var $cmp73=(($conv72)|(0))==95;
      if ($cmp73) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 36; break;
    case 38: 
      label = 24; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $45=$p_addr;
      var $incdec_ptr79=(($45+1)|0);
      $p_addr=$incdec_ptr79;
      var $46=HEAP8[($45)];
      $prev=$46;
      var $47=$n;
      var $48=$e;
      var $cmp80=(($47)>>>(0)) < (($48)>>>(0));
      if ($cmp80) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $49=$prev;
      var $50=$n;
      var $incdec_ptr83=(($50+1)|0);
      $n=$incdec_ptr83;
      HEAP8[($50)]=$49;
      label = 42; break;
    case 42: 
      label = 24; break;
    case 43: 
      var $51=$n;
      HEAP8[($51)]=0;
      var $arraydecay86=(($buf)|0);
      $p_addr=$arraydecay86;
      var $52=$badcheck_addr;
      var $tobool87=(($52)|(0))!=0;
      if ($tobool87) { label = 48; break; } else { label = 44; break; }
    case 44: 
      var $53=$p_addr;
      var $arrayidx89=(($53)|0);
      var $54=HEAP8[($arrayidx89)];
      var $conv90=(($54 << 24) >> 24);
      var $cmp91=(($conv90)|(0))==48;
      if ($cmp91) { label = 45; break; } else { label = 48; break; }
    case 45: 
      var $55=$p_addr;
      var $arrayidx94=(($55+1)|0);
      var $56=HEAP8[($arrayidx94)];
      var $conv95=(($56 << 24) >> 24);
      var $cmp96=(($conv95)|(0))==120;
      if ($cmp96) { label = 47; break; } else { label = 46; break; }
    case 46: 
      var $57=$p_addr;
      var $arrayidx99=(($57+1)|0);
      var $58=HEAP8[($arrayidx99)];
      var $conv100=(($58 << 24) >> 24);
      var $cmp101=(($conv100)|(0))==88;
      if ($cmp101) { label = 47; break; } else { label = 48; break; }
    case 47: 
      $retval=0;
      label = 62; break;
    case 48: 
      var $59=$p_addr;
      var $call105=_strtod($59, $end);
      $d=$call105;
      var $60=$badcheck_addr;
      var $tobool106=(($60)|(0))!=0;
      if ($tobool106) { label = 49; break; } else { label = 60; break; }
    case 49: 
      var $61=HEAP32[(($end)>>2)];
      var $tobool108=(($61)|(0))!=0;
      if ($tobool108) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $62=$p_addr;
      var $63=HEAP32[(($end)>>2)];
      var $cmp110=(($62)|(0))==(($63)|(0));
      if ($cmp110) { label = 51; break; } else { label = 52; break; }
    case 51: 
      label = 15; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $64=HEAP32[(($end)>>2)];
      var $65=HEAP8[($64)];
      var $conv115=(($65 << 24) >> 24);
      var $tobool116=(($conv115)|(0))!=0;
      if ($tobool116) { label = 54; break; } else { var $68 = 0;label = 55; break; }
    case 54: 
      var $66=HEAP32[(($end)>>2)];
      var $67=HEAP8[($66)];
      var $conv118=(($67)&(255));
      var $call119=_isspace($conv118);
      var $tobool120=(($call119)|(0))!=0;
      var $68 = $tobool120;label = 55; break;
    case 55: 
      var $68;
      if ($68) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $69=HEAP32[(($end)>>2)];
      var $incdec_ptr123=(($69+1)|0);
      HEAP32[(($end)>>2)]=$incdec_ptr123;
      label = 53; break;
    case 57: 
      var $70=HEAP32[(($end)>>2)];
      var $71=HEAP8[($70)];
      var $tobool125=(($71 << 24) >> 24)!=0;
      if ($tobool125) { label = 58; break; } else { label = 59; break; }
    case 58: 
      label = 15; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $72=$d;
      $retval=$72;
      label = 62; break;
    case 62: 
      var $73=$retval;
      STACKTOP = __stackBase__;
      return $73;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_to_dbl($mrb, $str, $badcheck) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $badcheck_addr;
      var $s;
      var $len;
      var $tmp=__stackBase__;
      var $temp_str;
      $mrb_addr=$mrb;
      $badcheck_addr=$badcheck;
      var $0=$mrb_addr;
      _mrb_str_to_str($tmp, $0, $str);
      var $1=$str;
      var $2=$tmp;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      var $value=(($str)|0);
      var $p=$value;
      var $3=HEAP32[(($p)>>2)];
      var $4=$3;
      var $ptr=(($4+20)|0);
      var $5=HEAP32[(($ptr)>>2)];
      $s=$5;
      var $value1=(($str)|0);
      var $p2=$value1;
      var $6=HEAP32[(($p2)>>2)];
      var $7=$6;
      var $len3=(($7+12)|0);
      var $8=HEAP32[(($len3)>>2)];
      $len=$8;
      var $9=$s;
      var $tobool=(($9)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $10=$badcheck_addr;
      var $tobool4=(($10)|(0))!=0;
      if ($tobool4) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $11=$s;
      var $12=$len;
      var $call=_memchr($11, 0, $12);
      var $tobool5=(($call)|(0))!=0;
      if ($tobool5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $13=$mrb_addr;
      var $14=$mrb_addr;
      var $call7=_mrb_class_get($14, ((104876)|0));
      _mrb_raise($13, $call7, ((112408)|0));
      label = 6; break;
    case 6: 
      var $15=$len;
      var $16=$s;
      var $arrayidx=(($16+$15)|0);
      var $17=HEAP8[($arrayidx)];
      var $tobool8=(($17 << 24) >> 24)!=0;
      if ($tobool8) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $18=$mrb_addr;
      var $19=$s;
      var $20=$len;
      var $call11=_str_new($18, $19, $20);
      $temp_str=$call11;
      var $21=$temp_str;
      var $ptr12=(($21+20)|0);
      var $22=HEAP32[(($ptr12)>>2)];
      $s=$22;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $23=$mrb_addr;
      var $24=$s;
      var $25=$badcheck_addr;
      var $call15=_mrb_cstr_to_dbl($23, $24, $25);
      STACKTOP = __stackBase__;
      return $call15;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_dump($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $len;
      var $p;
      var $pend;
      var $q;
      var $result;
      var $c;
      var $c34;
      $mrb_addr=$mrb;
      $len=2;
      var $value=(($str)|0);
      var $p1=$value;
      var $0=HEAP32[(($p1)>>2)];
      var $1=$0;
      var $ptr=(($1+20)|0);
      var $2=HEAP32[(($ptr)>>2)];
      $p=$2;
      var $3=$p;
      var $value2=(($str)|0);
      var $p3=$value2;
      var $4=HEAP32[(($p3)>>2)];
      var $5=$4;
      var $len4=(($5+12)|0);
      var $6=HEAP32[(($len4)>>2)];
      var $add_ptr=(($3+$6)|0);
      $pend=$add_ptr;
      label = 3; break;
    case 3: 
      var $7=$p;
      var $8=$pend;
      var $cmp=(($7)>>>(0)) < (($8)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 17; break; }
    case 4: 
      var $9=$p;
      var $incdec_ptr=(($9+1)|0);
      $p=$incdec_ptr;
      var $10=HEAP8[($9)];
      $c=$10;
      var $11=$c;
      var $conv=(($11)&(255));
      if ((($conv)|(0))==34 | (($conv)|(0))==92 | (($conv)|(0))==10 | (($conv)|(0))==13 | (($conv)|(0))==9 | (($conv)|(0))==12 | (($conv)|(0))==11 | (($conv)|(0))==8 | (($conv)|(0))==7 | (($conv)|(0))==27) {
        label = 5; break;
      }
      else if ((($conv)|(0))==35) {
        label = 6; break;
      }
      else {
      label = 12; break;
      }
    case 5: 
      var $12=$len;
      var $add=((($12)+(2))|0);
      $len=$add;
      label = 16; break;
    case 6: 
      var $13=$p;
      var $14=$pend;
      var $cmp6=(($13)>>>(0)) < (($14)>>>(0));
      if ($cmp6) { label = 7; break; } else { var $22 = 0;label = 11; break; }
    case 7: 
      var $15=$p;
      var $16=HEAP8[($15)];
      var $conv8=(($16 << 24) >> 24);
      var $cmp9=(($conv8)|(0))==36;
      if ($cmp9) { var $21 = 1;label = 10; break; } else { label = 8; break; }
    case 8: 
      var $17=$p;
      var $18=HEAP8[($17)];
      var $conv11=(($18 << 24) >> 24);
      var $cmp12=(($conv11)|(0))==64;
      if ($cmp12) { var $21 = 1;label = 10; break; } else { label = 9; break; }
    case 9: 
      var $19=$p;
      var $20=HEAP8[($19)];
      var $conv14=(($20 << 24) >> 24);
      var $cmp15=(($conv14)|(0))==123;
      var $21 = $cmp15;label = 10; break;
    case 10: 
      var $21;
      var $22 = $21;label = 11; break;
    case 11: 
      var $22;
      var $cond=$22 ? 2 : 1;
      var $23=$len;
      var $add17=((($23)+($cond))|0);
      $len=$add17;
      label = 16; break;
    case 12: 
      var $24=$c;
      var $conv18=(($24)&(255));
      var $call=_isprint($conv18);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $25=$len;
      var $inc=((($25)+(1))|0);
      $len=$inc;
      label = 15; break;
    case 14: 
      var $26=$len;
      var $add19=((($26)+(4))|0);
      $len=$add19;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 3; break;
    case 17: 
      var $27=$mrb_addr;
      var $28=$len;
      var $call20=_str_new($27, 0, $28);
      $result=$call20;
      var $29=$mrb_addr;
      var $30=$result;
      _str_with_class($29, $30, $str);
      var $value21=(($str)|0);
      var $p22=$value21;
      var $31=HEAP32[(($p22)>>2)];
      var $32=$31;
      var $ptr23=(($32+20)|0);
      var $33=HEAP32[(($ptr23)>>2)];
      $p=$33;
      var $34=$p;
      var $value24=(($str)|0);
      var $p25=$value24;
      var $35=HEAP32[(($p25)>>2)];
      var $36=$35;
      var $len26=(($36+12)|0);
      var $37=HEAP32[(($len26)>>2)];
      var $add_ptr27=(($34+$37)|0);
      $pend=$add_ptr27;
      var $38=$result;
      var $ptr28=(($38+20)|0);
      var $39=HEAP32[(($ptr28)>>2)];
      $q=$39;
      var $40=$q;
      var $incdec_ptr29=(($40+1)|0);
      $q=$incdec_ptr29;
      HEAP8[($40)]=34;
      label = 18; break;
    case 18: 
      var $41=$p;
      var $42=$pend;
      var $cmp31=(($41)>>>(0)) < (($42)>>>(0));
      if ($cmp31) { label = 19; break; } else { label = 40; break; }
    case 19: 
      var $43=$p;
      var $incdec_ptr35=(($43+1)|0);
      $p=$incdec_ptr35;
      var $44=HEAP8[($43)];
      $c34=$44;
      var $45=$c34;
      var $conv36=(($45)&(255));
      if ((($conv36)|(0))==34 | (($conv36)|(0))==92) {
        label = 20; break;
      }
      else if ((($conv36)|(0))==10) {
        label = 21; break;
      }
      else if ((($conv36)|(0))==13) {
        label = 22; break;
      }
      else if ((($conv36)|(0))==9) {
        label = 23; break;
      }
      else if ((($conv36)|(0))==12) {
        label = 24; break;
      }
      else if ((($conv36)|(0))==11) {
        label = 25; break;
      }
      else if ((($conv36)|(0))==8) {
        label = 26; break;
      }
      else if ((($conv36)|(0))==7) {
        label = 27; break;
      }
      else if ((($conv36)|(0))==27) {
        label = 28; break;
      }
      else if ((($conv36)|(0))==35) {
        label = 29; break;
      }
      else {
      label = 35; break;
      }
    case 20: 
      var $46=$q;
      var $incdec_ptr38=(($46+1)|0);
      $q=$incdec_ptr38;
      HEAP8[($46)]=92;
      var $47=$c34;
      var $48=$q;
      var $incdec_ptr39=(($48+1)|0);
      $q=$incdec_ptr39;
      HEAP8[($48)]=$47;
      label = 39; break;
    case 21: 
      var $49=$q;
      var $incdec_ptr41=(($49+1)|0);
      $q=$incdec_ptr41;
      HEAP8[($49)]=92;
      var $50=$q;
      var $incdec_ptr42=(($50+1)|0);
      $q=$incdec_ptr42;
      HEAP8[($50)]=110;
      label = 39; break;
    case 22: 
      var $51=$q;
      var $incdec_ptr44=(($51+1)|0);
      $q=$incdec_ptr44;
      HEAP8[($51)]=92;
      var $52=$q;
      var $incdec_ptr45=(($52+1)|0);
      $q=$incdec_ptr45;
      HEAP8[($52)]=114;
      label = 39; break;
    case 23: 
      var $53=$q;
      var $incdec_ptr47=(($53+1)|0);
      $q=$incdec_ptr47;
      HEAP8[($53)]=92;
      var $54=$q;
      var $incdec_ptr48=(($54+1)|0);
      $q=$incdec_ptr48;
      HEAP8[($54)]=116;
      label = 39; break;
    case 24: 
      var $55=$q;
      var $incdec_ptr50=(($55+1)|0);
      $q=$incdec_ptr50;
      HEAP8[($55)]=92;
      var $56=$q;
      var $incdec_ptr51=(($56+1)|0);
      $q=$incdec_ptr51;
      HEAP8[($56)]=102;
      label = 39; break;
    case 25: 
      var $57=$q;
      var $incdec_ptr53=(($57+1)|0);
      $q=$incdec_ptr53;
      HEAP8[($57)]=92;
      var $58=$q;
      var $incdec_ptr54=(($58+1)|0);
      $q=$incdec_ptr54;
      HEAP8[($58)]=118;
      label = 39; break;
    case 26: 
      var $59=$q;
      var $incdec_ptr56=(($59+1)|0);
      $q=$incdec_ptr56;
      HEAP8[($59)]=92;
      var $60=$q;
      var $incdec_ptr57=(($60+1)|0);
      $q=$incdec_ptr57;
      HEAP8[($60)]=98;
      label = 39; break;
    case 27: 
      var $61=$q;
      var $incdec_ptr59=(($61+1)|0);
      $q=$incdec_ptr59;
      HEAP8[($61)]=92;
      var $62=$q;
      var $incdec_ptr60=(($62+1)|0);
      $q=$incdec_ptr60;
      HEAP8[($62)]=97;
      label = 39; break;
    case 28: 
      var $63=$q;
      var $incdec_ptr62=(($63+1)|0);
      $q=$incdec_ptr62;
      HEAP8[($63)]=92;
      var $64=$q;
      var $incdec_ptr63=(($64+1)|0);
      $q=$incdec_ptr63;
      HEAP8[($64)]=101;
      label = 39; break;
    case 29: 
      var $65=$p;
      var $66=$pend;
      var $cmp65=(($65)>>>(0)) < (($66)>>>(0));
      if ($cmp65) { label = 30; break; } else { label = 34; break; }
    case 30: 
      var $67=$p;
      var $68=HEAP8[($67)];
      var $conv67=(($68 << 24) >> 24);
      var $cmp68=(($conv67)|(0))==36;
      if ($cmp68) { label = 33; break; } else { label = 31; break; }
    case 31: 
      var $69=$p;
      var $70=HEAP8[($69)];
      var $conv71=(($70 << 24) >> 24);
      var $cmp72=(($conv71)|(0))==64;
      if ($cmp72) { label = 33; break; } else { label = 32; break; }
    case 32: 
      var $71=$p;
      var $72=HEAP8[($71)];
      var $conv75=(($72 << 24) >> 24);
      var $cmp76=(($conv75)|(0))==123;
      if ($cmp76) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $73=$q;
      var $incdec_ptr79=(($73+1)|0);
      $q=$incdec_ptr79;
      HEAP8[($73)]=92;
      label = 34; break;
    case 34: 
      var $74=$q;
      var $incdec_ptr81=(($74+1)|0);
      $q=$incdec_ptr81;
      HEAP8[($74)]=35;
      label = 39; break;
    case 35: 
      var $75=$c34;
      var $conv83=(($75)&(255));
      var $call84=_isprint($conv83);
      var $tobool85=(($call84)|(0))!=0;
      if ($tobool85) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $76=$c34;
      var $77=$q;
      var $incdec_ptr87=(($77+1)|0);
      $q=$incdec_ptr87;
      HEAP8[($77)]=$76;
      label = 38; break;
    case 37: 
      var $78=$q;
      var $incdec_ptr89=(($78+1)|0);
      $q=$incdec_ptr89;
      HEAP8[($78)]=92;
      var $79=$c34;
      var $conv90=(($79)&(255));
      var $rem=((($conv90)|(0)))%(8);
      var $add91=((($rem)+(48))|0);
      var $conv92=(($add91) & 255);
      var $80=$q;
      var $arrayidx=(($80+2)|0);
      HEAP8[($arrayidx)]=$conv92;
      var $81=$c34;
      var $conv93=(($81)&(255));
      var $div=((((($conv93)|(0)))/(8))&-1);
      var $conv94=(($div) & 255);
      $c34=$conv94;
      var $82=$c34;
      var $conv95=(($82)&(255));
      var $rem96=((($conv95)|(0)))%(8);
      var $add97=((($rem96)+(48))|0);
      var $conv98=(($add97) & 255);
      var $83=$q;
      var $arrayidx99=(($83+1)|0);
      HEAP8[($arrayidx99)]=$conv98;
      var $84=$c34;
      var $conv100=(($84)&(255));
      var $div101=((((($conv100)|(0)))/(8))&-1);
      var $conv102=(($div101) & 255);
      $c34=$conv102;
      var $85=$c34;
      var $conv103=(($85)&(255));
      var $rem104=((($conv103)|(0)))%(8);
      var $add105=((($rem104)+(48))|0);
      var $conv106=(($add105) & 255);
      var $86=$q;
      var $arrayidx107=(($86)|0);
      HEAP8[($arrayidx107)]=$conv106;
      var $87=$q;
      var $add_ptr108=(($87+3)|0);
      $q=$add_ptr108;
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 18; break;
    case 40: 
      var $88=$q;
      var $incdec_ptr112=(($88+1)|0);
      $q=$incdec_ptr112;
      HEAP8[($88)]=34;
      var $89=$result;
      var $90=$89;
      _mrb_obj_value44($agg_result, $90);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_cat_cstr($agg_result, $mrb, $str, $ptr) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $ptr_addr;
  $mrb_addr=$mrb;
  $ptr_addr=$ptr;
  var $0=$mrb_addr;
  var $1=$ptr_addr;
  var $2=$ptr_addr;
  var $call=_strlen($2);
  _mrb_str_cat($agg_result, $0, $str, $1, $call);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_append($agg_result, $mrb, $str, $str2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $str2; $str2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $tmp=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_str_to_str($tmp, $0, $str2);
  var $1=$str2;
  var $2=$tmp;
  assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
  var $3=$mrb_addr;
  _mrb_str_buf_append($agg_result, $3, $str, $str2);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_inspect($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 88)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $p;
      var $pend;
      var $buf=__stackBase__;
      var $result=(__stackBase__)+(16);
      var $c;
      var $cc;
      var $tmp=(__stackBase__)+(28);
      var $tmp36=(__stackBase__)+(40);
      var $tmp51=(__stackBase__)+(52);
      var $tmp65=(__stackBase__)+(64);
      var $tmp66=(__stackBase__)+(76);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      _mrb_str_new($result, $0, ((111280)|0), 1);
      var $value=(($str)|0);
      var $p1=$value;
      var $1=HEAP32[(($p1)>>2)];
      var $2=$1;
      var $ptr=(($2+20)|0);
      var $3=HEAP32[(($ptr)>>2)];
      $p=$3;
      var $value2=(($str)|0);
      var $p3=$value2;
      var $4=HEAP32[(($p3)>>2)];
      var $5=$4;
      var $ptr4=(($5+20)|0);
      var $6=HEAP32[(($ptr4)>>2)];
      var $value5=(($str)|0);
      var $p6=$value5;
      var $7=HEAP32[(($p6)>>2)];
      var $8=$7;
      var $len=(($8+12)|0);
      var $9=HEAP32[(($len)>>2)];
      var $add_ptr=(($6+$9)|0);
      $pend=$add_ptr;
      label = 3; break;
    case 3: 
      var $10=$p;
      var $11=$pend;
      var $cmp=(($10)>>>(0)) < (($11)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 28; break; }
    case 4: 
      var $12=$p;
      var $13=HEAP8[($12)];
      var $conv=(($13 << 24) >> 24);
      $c=$conv;
      var $14=$c;
      var $cmp7=(($14)|(0))==34;
      if ($cmp7) { label = 11; break; } else { label = 5; break; }
    case 5: 
      var $15=$c;
      var $cmp9=(($15)|(0))==92;
      if ($cmp9) { label = 11; break; } else { label = 6; break; }
    case 6: 
      var $16=$c;
      var $cmp12=(($16)|(0))==35;
      if ($cmp12) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $17=$p;
      var $18=$pend;
      var $cmp14=(($17)>>>(0)) < (($18)>>>(0));
      if ($cmp14) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $19=$p;
      var $20=HEAP8[($19)];
      var $conv17=(($20 << 24) >> 24);
      var $cmp18=(($conv17)|(0))==36;
      if ($cmp18) { label = 11; break; } else { label = 9; break; }
    case 9: 
      var $21=$p;
      var $22=HEAP8[($21)];
      var $conv21=(($22 << 24) >> 24);
      var $cmp22=(($conv21)|(0))==64;
      if ($cmp22) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $23=$p;
      var $24=HEAP8[($23)];
      var $conv25=(($24 << 24) >> 24);
      var $cmp26=(($conv25)|(0))==123;
      if ($cmp26) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $arrayidx=(($buf)|0);
      HEAP8[($arrayidx)]=92;
      var $25=$c;
      var $conv28=(($25) & 255);
      var $arrayidx29=(($buf+1)|0);
      HEAP8[($arrayidx29)]=$conv28;
      var $26=$mrb_addr;
      var $arraydecay=(($buf)|0);
      _mrb_str_buf_cat($tmp, $26, $result, $arraydecay, 2);
      label = 27; break;
    case 12: 
      var $27=$c;
      var $conv30=(($27) & 255);
      var $conv31=(($conv30)&(255));
      var $call=_isprint($conv31);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $28=$c;
      var $conv33=(($28) & 255);
      var $arrayidx34=(($buf)|0);
      HEAP8[($arrayidx34)]=$conv33;
      var $29=$mrb_addr;
      var $arraydecay35=(($buf)|0);
      _mrb_str_buf_cat($tmp36, $29, $result, $arraydecay35, 1);
      label = 27; break;
    case 14: 
      var $30=$c;
      if ((($30)|(0))==10) {
        label = 15; break;
      }
      else if ((($30)|(0))==13) {
        label = 16; break;
      }
      else if ((($30)|(0))==9) {
        label = 17; break;
      }
      else if ((($30)|(0))==12) {
        label = 18; break;
      }
      else if ((($30)|(0))==11) {
        label = 19; break;
      }
      else if ((($30)|(0))==8) {
        label = 20; break;
      }
      else if ((($30)|(0))==7) {
        label = 21; break;
      }
      else if ((($30)|(0))==27) {
        label = 22; break;
      }
      else {
      label = 23; break;
      }
    case 15: 
      $cc=110;
      label = 24; break;
    case 16: 
      $cc=114;
      label = 24; break;
    case 17: 
      $cc=116;
      label = 24; break;
    case 18: 
      $cc=102;
      label = 24; break;
    case 19: 
      $cc=118;
      label = 24; break;
    case 20: 
      $cc=98;
      label = 24; break;
    case 21: 
      $cc=97;
      label = 24; break;
    case 22: 
      $cc=101;
      label = 24; break;
    case 23: 
      $cc=0;
      label = 24; break;
    case 24: 
      var $31=$cc;
      var $tobool45=(($31)|(0))!=0;
      if ($tobool45) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $arrayidx47=(($buf)|0);
      HEAP8[($arrayidx47)]=92;
      var $32=$cc;
      var $conv48=(($32) & 255);
      var $arrayidx49=(($buf+1)|0);
      HEAP8[($arrayidx49)]=$conv48;
      var $33=$mrb_addr;
      var $arraydecay50=(($buf)|0);
      _mrb_str_buf_cat($tmp51, $33, $result, $arraydecay50, 2);
      label = 27; break;
    case 26: 
      var $arrayidx52=(($buf)|0);
      HEAP8[($arrayidx52)]=92;
      var $34=$c;
      var $rem=((($34)>>>(0)))%(8);
      var $add=((($rem)+(48))|0);
      var $conv53=(($add) & 255);
      var $arrayidx54=(($buf+3)|0);
      HEAP8[($arrayidx54)]=$conv53;
      var $35=$c;
      var $div=Math.floor(((($35)>>>(0)))/(8));
      $c=$div;
      var $36=$c;
      var $rem55=((($36)>>>(0)))%(8);
      var $add56=((($rem55)+(48))|0);
      var $conv57=(($add56) & 255);
      var $arrayidx58=(($buf+2)|0);
      HEAP8[($arrayidx58)]=$conv57;
      var $37=$c;
      var $div59=Math.floor(((($37)>>>(0)))/(8));
      $c=$div59;
      var $38=$c;
      var $rem60=((($38)>>>(0)))%(8);
      var $add61=((($rem60)+(48))|0);
      var $conv62=(($add61) & 255);
      var $arrayidx63=(($buf+1)|0);
      HEAP8[($arrayidx63)]=$conv62;
      var $39=$mrb_addr;
      var $arraydecay64=(($buf)|0);
      _mrb_str_buf_cat($tmp65, $39, $result, $arraydecay64, 4);
      label = 27; break;
    case 27: 
      var $40=$p;
      var $incdec_ptr=(($40+1)|0);
      $p=$incdec_ptr;
      label = 3; break;
    case 28: 
      var $41=$mrb_addr;
      _mrb_str_buf_cat($tmp66, $41, $result, ((111280)|0), 1);
      var $42=$agg_result;
      var $43=$result;
      assert(12 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];HEAP32[((($42)+(8))>>2)]=HEAP32[((($43)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_string($mrb) {
  var label = 0;
  var $mrb_addr;
  var $s;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $object_class=(($1+44)|0);
  var $2=HEAP32[(($object_class)>>2)];
  var $call=_mrb_define_class($0, ((96620)|0), $2);
  var $3=$mrb_addr;
  var $string_class=(($3+60)|0);
  HEAP32[(($string_class)>>2)]=$call;
  $s=$call;
  var $4=$s;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=$6 >>> 11;
  var $bf_clear=$7 & 2097151;
  var $and=$bf_clear & -256;
  var $or=$and | 16;
  var $8=$s;
  var $bf_value=$or & 2097151;
  var $9=$8;
  var $10=$bf_value & 2097151;
  var $11=$10 << 11;
  var $12=HEAP32[(($9)>>2)];
  var $13=$12 & 2047;
  var $14=$13 | $11;
  HEAP32[(($9)>>2)]=$14;
  var $15=$mrb_addr;
  var $16=$s;
  var $17=$mrb_addr;
  var $call1=_mrb_class_get($17, ((110772)|0));
  _mrb_include_module($15, $16, $call1);
  var $18=$mrb_addr;
  var $19=$s;
  _mrb_define_method($18, $19, ((110324)|0), 560, 262144);
  var $20=$mrb_addr;
  var $21=$s;
  _mrb_define_method($20, $21, ((109944)|0), 26, 0);
  var $22=$mrb_addr;
  var $23=$s;
  _mrb_define_method($22, $23, ((109532)|0), 562, 0);
  var $24=$mrb_addr;
  var $25=$s;
  _mrb_define_method($24, $25, ((109080)|0), 562, 0);
  var $26=$mrb_addr;
  var $27=$s;
  _mrb_define_method($26, $27, ((108292)|0), 196, 262144);
  var $28=$mrb_addr;
  var $29=$s;
  _mrb_define_method($28, $29, ((108176)|0), 466, 262144);
  var $30=$mrb_addr;
  var $31=$s;
  _mrb_define_method($30, $31, ((107616)|0), 598, 262144);
  var $32=$mrb_addr;
  var $33=$s;
  _mrb_define_method($32, $33, ((107344)|0), 462, 262144);
  var $34=$mrb_addr;
  var $35=$s;
  _mrb_define_method($34, $35, ((107004)|0), 614, 4096);
  var $36=$mrb_addr;
  var $37=$s;
  _mrb_define_method($36, $37, ((106516)|0), 184, 0);
  var $38=$mrb_addr;
  var $39=$s;
  _mrb_define_method($38, $39, ((106112)|0), 10, 262144);
  var $40=$mrb_addr;
  var $41=$s;
  _mrb_define_method($40, $41, ((105780)|0), 690, 4096);
  var $42=$mrb_addr;
  var $43=$s;
  _mrb_define_method($42, $43, ((105488)|0), 148, 4096);
  var $44=$mrb_addr;
  var $45=$s;
  _mrb_define_method($44, $45, ((105176)|0), 222, 262144);
  var $46=$mrb_addr;
  var $47=$s;
  _mrb_define_method($46, $47, ((104704)|0), 680, 262144);
  var $48=$mrb_addr;
  var $49=$s;
  _mrb_define_method($48, $49, ((104592)|0), 314, 0);
  var $50=$mrb_addr;
  var $51=$s;
  _mrb_define_method($50, $51, ((104044)|0), 664, 0);
  var $52=$mrb_addr;
  var $53=$s;
  _mrb_define_method($52, $53, ((103788)|0), 130, 0);
  var $54=$mrb_addr;
  var $55=$s;
  _mrb_define_method($54, $55, ((103572)|0), 706, 262144);
  var $56=$mrb_addr;
  var $57=$s;
  _mrb_define_method($56, $57, ((103364)|0), 462, 262144);
  var $58=$mrb_addr;
  var $59=$s;
  _mrb_define_method($58, $59, ((103172)|0), 462, 262144);
  var $60=$mrb_addr;
  var $61=$s;
  _mrb_define_method($60, $61, ((102864)|0), 508, 262144);
  var $62=$mrb_addr;
  var $63=$s;
  _mrb_define_method($62, $63, ((102692)|0), 308, 262144);
  var $64=$mrb_addr;
  var $65=$s;
  _mrb_define_method($64, $65, ((102420)|0), 324, 4096);
  var $66=$mrb_addr;
  var $67=$s;
  _mrb_define_method($66, $67, ((102052)|0), 310, 262144);
  var $68=$mrb_addr;
  var $69=$s;
  _mrb_define_method($68, $69, ((101852)|0), 526, 262144);
  var $70=$mrb_addr;
  var $71=$s;
  _mrb_define_method($70, $71, ((101368)|0), 288, 0);
  var $72=$mrb_addr;
  var $73=$s;
  _mrb_define_method($72, $73, ((101068)|0), 462, 262144);
  var $74=$mrb_addr;
  var $75=$s;
  _mrb_define_method($74, $75, ((100784)|0), 526, 262144);
  var $76=$mrb_addr;
  var $77=$s;
  _mrb_define_method($76, $77, ((100540)|0), 142, 0);
  var $78=$mrb_addr;
  var $79=$s;
  _mrb_define_method($78, $79, ((100316)|0), 74, 0);
  var $80=$mrb_addr;
  var $81=$s;
  _mrb_define_method($80, $81, ((100152)|0), 382, 4096);
  var $82=$mrb_addr;
  var $83=$s;
  _mrb_define_method($82, $83, ((99956)|0), 462, 262144);
  var $84=$mrb_addr;
  var $85=$s;
  _mrb_define_method($84, $85, ((99764)|0), 614, 4096);
  var $86=$mrb_addr;
  var $87=$s;
  _mrb_define_method($86, $87, ((99516)|0), 302, 4096);
  var $88=$mrb_addr;
  var $89=$s;
  _mrb_define_method($88, $89, ((99308)|0), 462, 262144);
  var $90=$mrb_addr;
  var $91=$s;
  _mrb_define_method($90, $91, ((98756)|0), 462, 262144);
  var $92=$mrb_addr;
  var $93=$s;
  _mrb_define_method($92, $93, ((98512)|0), 68, 4096);
  var $94=$mrb_addr;
  var $95=$s;
  _mrb_define_method($94, $95, ((98244)|0), 66, 0);
  var $96=$mrb_addr;
  var $97=$s;
  _mrb_define_method($96, $97, ((95432)|0), 58, 0);
  var $98=$mrb_addr;
  var $99=$s;
  _mrb_define_method($98, $99, ((98380)|0), 58, 0);
  var $100=$mrb_addr;
  var $101=$s;
  _mrb_define_method($100, $101, ((98008)|0), 288, 0);
  var $102=$mrb_addr;
  var $103=$s;
  _mrb_define_method($102, $103, ((97832)|0), 478, 262144);
  var $104=$mrb_addr;
  var $105=$s;
  _mrb_define_method($104, $105, ((97572)|0), 408, 262144);
  var $106=$mrb_addr;
  var $107=$s;
  _mrb_define_method($106, $107, ((97436)|0), 550, 0);
  var $108=$mrb_addr;
  var $109=$s;
  _mrb_define_method($108, $109, ((97332)|0), 426, 0);
  return;
}
function _mrb_str_plus_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $str=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((96664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$str,tempInt));
  var $1=$mrb_addr;
  _mrb_str_plus($agg_result, $1, $self, $str);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_bytesize($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $s;
  $mrb_addr=$mrb;
  var $value=(($self)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  $s=$1;
  var $2=$s;
  var $len=(($2+12)|0);
  var $3=HEAP32[(($len)>>2)];
  _mrb_fixnum_value47($agg_result, $3);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_times($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $n;
      var $len;
      var $times=__stackBase__;
      var $str2;
      var $p;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((95980)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$times,tempInt));
      var $1=HEAP32[(($times)>>2)];
      var $cmp=(($1)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$mrb_addr;
      var $3=$mrb_addr;
      var $call1=_mrb_class_get($3, ((104876)|0));
      _mrb_raise($2, $call1, ((95540)|0));
      label = 4; break;
    case 4: 
      var $4=HEAP32[(($times)>>2)];
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $5=HEAP32[(($times)>>2)];
      var $div=(((2147483647)/((($5)|(0))))&-1);
      var $value=(($self)|0);
      var $p2=$value;
      var $6=HEAP32[(($p2)>>2)];
      var $7=$6;
      var $len3=(($7+12)|0);
      var $8=HEAP32[(($len3)>>2)];
      var $cmp4=(($div)|(0)) < (($8)|(0));
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $9=$mrb_addr;
      var $10=$mrb_addr;
      var $call6=_mrb_class_get($10, ((104876)|0));
      _mrb_raise($9, $call6, ((111820)|0));
      label = 7; break;
    case 7: 
      var $value8=(($self)|0);
      var $p9=$value8;
      var $11=HEAP32[(($p9)>>2)];
      var $12=$11;
      var $len10=(($12+12)|0);
      var $13=HEAP32[(($len10)>>2)];
      var $14=HEAP32[(($times)>>2)];
      var $mul=Math.imul($13,$14);
      $len=$mul;
      var $15=$mrb_addr;
      var $16=$len;
      var $call11=_str_new($15, 0, $16);
      $str2=$call11;
      var $17=$mrb_addr;
      var $18=$str2;
      _str_with_class($17, $18, $self);
      var $19=$str2;
      var $ptr=(($19+20)|0);
      var $20=HEAP32[(($ptr)>>2)];
      $p=$20;
      var $21=$len;
      var $cmp12=(($21)|(0)) > 0;
      if ($cmp12) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $value14=(($self)|0);
      var $p15=$value14;
      var $22=HEAP32[(($p15)>>2)];
      var $23=$22;
      var $len16=(($23+12)|0);
      var $24=HEAP32[(($len16)>>2)];
      $n=$24;
      var $25=$p;
      var $value17=(($self)|0);
      var $p18=$value17;
      var $26=HEAP32[(($p18)>>2)];
      var $27=$26;
      var $ptr19=(($27+20)|0);
      var $28=HEAP32[(($ptr19)>>2)];
      var $29=$n;
      assert($29 % 1 === 0);_memcpy($25, $28, $29);
      label = 9; break;
    case 9: 
      var $30=$n;
      var $31=$len;
      var $div20=((((($31)|(0)))/(2))&-1);
      var $cmp21=(($30)|(0)) <= (($div20)|(0));
      if ($cmp21) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $32=$p;
      var $33=$n;
      var $add_ptr=(($32+$33)|0);
      var $34=$p;
      var $35=$n;
      assert($35 % 1 === 0);_memcpy($add_ptr, $34, $35);
      var $36=$n;
      var $mul22=($36<<1);
      $n=$mul22;
      label = 9; break;
    case 11: 
      var $37=$p;
      var $38=$n;
      var $add_ptr23=(($37+$38)|0);
      var $39=$p;
      var $40=$len;
      var $41=$n;
      var $sub=((($40)-($41))|0);
      assert($sub % 1 === 0);_memcpy($add_ptr23, $39, $sub);
      label = 12; break;
    case 12: 
      var $42=$str2;
      var $len25=(($42+12)|0);
      var $43=HEAP32[(($len25)>>2)];
      var $44=$p;
      var $arrayidx=(($44+$43)|0);
      HEAP8[($arrayidx)]=0;
      var $45=$str2;
      var $46=$45;
      _mrb_obj_value44($agg_result, $46);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_cmp_m($agg_result, $mrb, $str1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str1; $str1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $str2=__stackBase__;
      var $result;
      var $tmp=(__stackBase__)+(12);
      var $agg_tmp=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((96488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$str2,tempInt));
      var $tt=(($str2+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==16;
      if ($cmp) { label = 15; break; } else { label = 3; break; }
    case 3: 
      var $2=$mrb_addr;
      var $3=$mrb_addr;
      var $call1=_mrb_intern2($3, ((95432)|0), 4);
      var $call2=_mrb_respond_to($2, $str2, $call1);
      var $tobool=(($call2)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      _mrb_nil_value48($agg_result);
      label = 17; break;
    case 5: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call4=_mrb_intern2($5, ((108176)|0), 3);
      var $call5=_mrb_respond_to($4, $str2, $call4);
      var $tobool6=(($call5)|(0))!=0;
      if ($tobool6) { label = 7; break; } else { label = 6; break; }
    case 6: 
      _mrb_nil_value48($agg_result);
      label = 17; break;
    case 7: 
      var $6=$mrb_addr;
      _mrb_funcall($tmp, $6, $str2, ((108176)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($str1)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($str1)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($str1)+(8))>>2)],tempInt));
      var $tt9=(($tmp+8)|0);
      var $7=HEAP32[(($tt9)>>2)];
      var $cmp10=(($7)|(0))==0;
      if ($cmp10) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $value=(($tmp)|0);
      var $i=$value;
      var $8=HEAP32[(($i)>>2)];
      var $tobool11=(($8)|(0))!=0;
      if ($tobool11) { label = 10; break; } else { label = 9; break; }
    case 9: 
      _mrb_nil_value48($agg_result);
      label = 17; break;
    case 10: 
      var $value13=(($tmp)|0);
      var $i14=$value13;
      var $9=HEAP32[(($i14)>>2)];
      var $tobool15=(($9)|(0))!=0;
      if ($tobool15) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $10=$mrb_addr;
      _mrb_fixnum_value47($agg_tmp, 0);
      _mrb_funcall($agg_result, $10, $agg_tmp, ((96032)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($tmp)+(8))>>2)],tempInt));
      label = 17; break;
    case 12: 
      var $value18=(($tmp)|0);
      var $i19=$value18;
      var $11=HEAP32[(($i19)>>2)];
      var $sub=(((-$11))|0);
      $result=$sub;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 16; break;
    case 15: 
      var $12=$mrb_addr;
      var $call23=_mrb_str_cmp($12, $str1, $str2);
      $result=$call23;
      label = 16; break;
    case 16: 
      var $13=$result;
      _mrb_fixnum_value47($agg_result, $13);
      label = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_equal_m($agg_result, $mrb, $str1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str1; $str1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $str2=__stackBase__;
  var $equal_p;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((96488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$str2,tempInt));
  var $1=$mrb_addr;
  var $call1=_mrb_str_equal($1, $str1, $str2);
  var $conv=(($call1) & 255);
  $equal_p=$conv;
  var $2=$equal_p;
  _mrb_bool_value($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _noregexp($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $call=_mrb_class_get($1, ((96224)|0));
  _mrb_raise($0, $call, ((96120)|0));
  _mrb_nil_value48($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_aref_m($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a1=__stackBase__;
      var $a2=(__stackBase__)+(12);
      var $argc;
      var $agg_tmp=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((96412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$a1,HEAP32[(((tempInt)+(4))>>2)]=$a2,tempInt));
      $argc=$call;
      var $1=$argc;
      var $cmp=(($1)|(0))==2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$mrb_addr;
      _regexp_check($2, $a1);
      var $3=$mrb_addr;
      var $value=(($a1)|0);
      var $i=$value;
      var $4=HEAP32[(($i)>>2)];
      var $value1=(($a2)|0);
      var $i2=$value1;
      var $5=HEAP32[(($i2)>>2)];
      _mrb_str_substr($agg_result, $3, $str, $4, $5);
      label = 7; break;
    case 4: 
      var $6=$argc;
      var $cmp3=(($6)|(0))!=1;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$mrb_addr;
      var $8=$mrb_addr;
      var $call5=_mrb_class_get($8, ((104876)|0));
      var $9=$argc;
      _mrb_fixnum_value47($agg_tmp, $9);
      _mrb_raisef($7, $call5, ((96296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 6; break;
    case 6: 
      var $10=$mrb_addr;
      _mrb_str_aref($agg_result, $10, $str, $a1);
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_capitalize($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $str=__stackBase__;
  var $tmp=(__stackBase__)+(12);
  var $tmp1=(__stackBase__)+(24);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_str_dup($tmp, $0, $self);
  var $1=$str;
  var $2=$tmp;
  assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
  var $3=$mrb_addr;
  _mrb_str_capitalize_bang($tmp1, $3, $str);
  var $4=$agg_result;
  var $5=$str;
  assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_capitalize_bang($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $p;
      var $pend;
      var $modify;
      var $s;
      $mrb_addr=$mrb;
      $modify=0;
      var $value=(($str)|0);
      var $p1=$value;
      var $0=HEAP32[(($p1)>>2)];
      var $1=$0;
      $s=$1;
      var $2=$mrb_addr;
      var $3=$s;
      _mrb_str_modify($2, $3);
      var $4=$s;
      var $len=(($4+12)|0);
      var $5=HEAP32[(($len)>>2)];
      var $cmp=(($5)|(0))==0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $6=$s;
      var $ptr=(($6+20)|0);
      var $7=HEAP32[(($ptr)>>2)];
      var $tobool=(($7)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      _mrb_nil_value48($agg_result);
      label = 15; break;
    case 5: 
      var $8=$s;
      var $ptr2=(($8+20)|0);
      var $9=HEAP32[(($ptr2)>>2)];
      $p=$9;
      var $10=$s;
      var $ptr3=(($10+20)|0);
      var $11=HEAP32[(($ptr3)>>2)];
      var $12=$s;
      var $len4=(($12+12)|0);
      var $13=HEAP32[(($len4)>>2)];
      var $add_ptr=(($11+$13)|0);
      $pend=$add_ptr;
      var $14=$p;
      var $15=HEAP8[($14)];
      var $conv=(($15)&(255));
      var $call=_islower($conv);
      var $tobool5=(($call)|(0))!=0;
      if ($tobool5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $16=$p;
      var $17=HEAP8[($16)];
      var $conv7=(($17)&(255));
      var $call8=_toupper($conv7);
      var $conv9=(($call8) & 255);
      var $18=$p;
      HEAP8[($18)]=$conv9;
      $modify=1;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $19=$p;
      var $incdec_ptr=(($19+1)|0);
      $p=$incdec_ptr;
      var $20=$pend;
      var $cmp11=(($incdec_ptr)>>>(0)) < (($20)>>>(0));
      if ($cmp11) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $21=$p;
      var $22=HEAP8[($21)];
      var $conv13=(($22)&(255));
      var $call14=_isupper($conv13);
      var $tobool15=(($call14)|(0))!=0;
      if ($tobool15) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $23=$p;
      var $24=HEAP8[($23)];
      var $conv17=(($24)&(255));
      var $call18=_tolower($conv17);
      var $conv19=(($call18) & 255);
      var $25=$p;
      HEAP8[($25)]=$conv19;
      $modify=1;
      label = 11; break;
    case 11: 
      label = 8; break;
    case 12: 
      var $26=$modify;
      var $tobool21=(($26)|(0))!=0;
      if ($tobool21) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $27=$agg_result;
      var $28=$str;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      label = 15; break;
    case 14: 
      _mrb_nil_value48($agg_result);
      label = 15; break;
    case 15: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_chomp($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $str=__stackBase__;
  var $tmp=(__stackBase__)+(12);
  var $tmp1=(__stackBase__)+(24);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_str_dup($tmp, $0, $self);
  var $1=$str;
  var $2=$tmp;
  assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
  var $3=$mrb_addr;
  _mrb_str_chomp_bang($tmp1, $3, $str);
  var $4=$agg_result;
  var $5=$str;
  assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_chomp_bang($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $rs=__stackBase__;
      var $newline;
      var $p;
      var $pp;
      var $rslen;
      var $len;
      var $s;
      $mrb_addr=$mrb;
      var $value=(($str)|0);
      var $p1=$value;
      var $0=HEAP32[(($p1)>>2)];
      var $1=$0;
      $s=$1;
      var $2=$mrb_addr;
      var $3=$s;
      _mrb_str_modify($2, $3);
      var $4=$s;
      var $len2=(($4+12)|0);
      var $5=HEAP32[(($len2)>>2)];
      $len=$5;
      var $6=$mrb_addr;
      var $call=_mrb_get_args($6, ((96572)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$rs,tempInt));
      var $cmp=(($call)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 16; break; }
    case 3: 
      var $7=$len;
      var $cmp3=(($7)|(0))==0;
      if ($cmp3) { label = 4; break; } else { label = 5; break; }
    case 4: 
      _mrb_nil_value48($agg_result);
      label = 45; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $8=$len;
      var $sub=((($8)-(1))|0);
      var $9=$s;
      var $ptr=(($9+20)|0);
      var $10=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($10+$sub)|0);
      var $11=HEAP8[($arrayidx)];
      var $conv=(($11 << 24) >> 24);
      var $cmp5=(($conv)|(0))==10;
      if ($cmp5) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $12=$s;
      var $len8=(($12+12)|0);
      var $13=HEAP32[(($len8)>>2)];
      var $dec=((($13)-(1))|0);
      HEAP32[(($len8)>>2)]=$dec;
      var $14=$s;
      var $len9=(($14+12)|0);
      var $15=HEAP32[(($len9)>>2)];
      var $cmp10=(($15)|(0)) > 0;
      if ($cmp10) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $16=$s;
      var $len12=(($16+12)|0);
      var $17=HEAP32[(($len12)>>2)];
      var $sub13=((($17)-(1))|0);
      var $18=$s;
      var $ptr14=(($18+20)|0);
      var $19=HEAP32[(($ptr14)>>2)];
      var $arrayidx15=(($19+$sub13)|0);
      var $20=HEAP8[($arrayidx15)];
      var $conv16=(($20 << 24) >> 24);
      var $cmp17=(($conv16)|(0))==13;
      if ($cmp17) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $21=$s;
      var $len20=(($21+12)|0);
      var $22=HEAP32[(($len20)>>2)];
      var $dec21=((($22)-(1))|0);
      HEAP32[(($len20)>>2)]=$dec21;
      label = 10; break;
    case 10: 
      label = 15; break;
    case 11: 
      var $23=$len;
      var $sub23=((($23)-(1))|0);
      var $24=$s;
      var $ptr24=(($24+20)|0);
      var $25=HEAP32[(($ptr24)>>2)];
      var $arrayidx25=(($25+$sub23)|0);
      var $26=HEAP8[($arrayidx25)];
      var $conv26=(($26 << 24) >> 24);
      var $cmp27=(($conv26)|(0))==13;
      if ($cmp27) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $27=$s;
      var $len30=(($27+12)|0);
      var $28=HEAP32[(($len30)>>2)];
      var $dec31=((($28)-(1))|0);
      HEAP32[(($len30)>>2)]=$dec31;
      label = 14; break;
    case 13: 
      _mrb_nil_value48($agg_result);
      label = 45; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $29=$s;
      var $len35=(($29+12)|0);
      var $30=HEAP32[(($len35)>>2)];
      var $31=$s;
      var $ptr36=(($31+20)|0);
      var $32=HEAP32[(($ptr36)>>2)];
      var $arrayidx37=(($32+$30)|0);
      HEAP8[($arrayidx37)]=0;
      var $33=$agg_result;
      var $34=$str;
      assert(12 % 1 === 0);HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];HEAP32[((($33)+(8))>>2)]=HEAP32[((($34)+(8))>>2)];
      label = 45; break;
    case 16: 
      var $35=$len;
      var $cmp39=(($35)|(0))==0;
      if ($cmp39) { label = 19; break; } else { label = 17; break; }
    case 17: 
      var $tt=(($rs+8)|0);
      var $36=HEAP32[(($tt)>>2)];
      var $cmp41=(($36)|(0))==0;
      if ($cmp41) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $value44=(($rs)|0);
      var $i=$value44;
      var $37=HEAP32[(($i)>>2)];
      var $tobool=(($37)|(0))!=0;
      if ($tobool) { label = 20; break; } else { label = 19; break; }
    case 19: 
      _mrb_nil_value48($agg_result);
      label = 45; break;
    case 20: 
      var $38=$s;
      var $ptr47=(($38+20)|0);
      var $39=HEAP32[(($ptr47)>>2)];
      $p=$39;
      var $value48=(($rs)|0);
      var $p49=$value48;
      var $40=HEAP32[(($p49)>>2)];
      var $41=$40;
      var $len50=(($41+12)|0);
      var $42=HEAP32[(($len50)>>2)];
      $rslen=$42;
      var $43=$rslen;
      var $cmp51=(($43)|(0))==0;
      if ($cmp51) { label = 21; break; } else { label = 32; break; }
    case 21: 
      label = 22; break;
    case 22: 
      var $44=$len;
      var $cmp54=(($44)|(0)) > 0;
      if ($cmp54) { label = 23; break; } else { var $48 = 0;label = 24; break; }
    case 23: 
      var $45=$len;
      var $sub56=((($45)-(1))|0);
      var $46=$p;
      var $arrayidx57=(($46+$sub56)|0);
      var $47=HEAP8[($arrayidx57)];
      var $conv58=(($47 << 24) >> 24);
      var $cmp59=(($conv58)|(0))==10;
      var $48 = $cmp59;label = 24; break;
    case 24: 
      var $48;
      if ($48) { label = 25; break; } else { label = 29; break; }
    case 25: 
      var $49=$len;
      var $dec61=((($49)-(1))|0);
      $len=$dec61;
      var $50=$len;
      var $cmp62=(($50)|(0)) > 0;
      if ($cmp62) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $51=$len;
      var $sub65=((($51)-(1))|0);
      var $52=$p;
      var $arrayidx66=(($52+$sub65)|0);
      var $53=HEAP8[($arrayidx66)];
      var $conv67=(($53 << 24) >> 24);
      var $cmp68=(($conv67)|(0))==13;
      if ($cmp68) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $54=$len;
      var $dec71=((($54)-(1))|0);
      $len=$dec71;
      label = 28; break;
    case 28: 
      label = 22; break;
    case 29: 
      var $55=$len;
      var $56=$s;
      var $len73=(($56+12)|0);
      var $57=HEAP32[(($len73)>>2)];
      var $cmp74=(($55)|(0)) < (($57)|(0));
      if ($cmp74) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $58=$len;
      var $59=$s;
      var $len77=(($59+12)|0);
      HEAP32[(($len77)>>2)]=$58;
      var $60=$len;
      var $61=$p;
      var $arrayidx78=(($61+$60)|0);
      HEAP8[($arrayidx78)]=0;
      var $62=$agg_result;
      var $63=$str;
      assert(12 % 1 === 0);HEAP32[(($62)>>2)]=HEAP32[(($63)>>2)];HEAP32[((($62)+(4))>>2)]=HEAP32[((($63)+(4))>>2)];HEAP32[((($62)+(8))>>2)]=HEAP32[((($63)+(8))>>2)];
      label = 45; break;
    case 31: 
      _mrb_nil_value48($agg_result);
      label = 45; break;
    case 32: 
      var $64=$rslen;
      var $65=$len;
      var $cmp81=(($64)|(0)) > (($65)|(0));
      if ($cmp81) { label = 33; break; } else { label = 34; break; }
    case 33: 
      _mrb_nil_value48($agg_result);
      label = 45; break;
    case 34: 
      var $66=$rslen;
      var $sub85=((($66)-(1))|0);
      var $value86=(($rs)|0);
      var $p87=$value86;
      var $67=HEAP32[(($p87)>>2)];
      var $68=$67;
      var $ptr88=(($68+20)|0);
      var $69=HEAP32[(($ptr88)>>2)];
      var $arrayidx89=(($69+$sub85)|0);
      var $70=HEAP8[($arrayidx89)];
      var $conv90=(($70 << 24) >> 24);
      $newline=$conv90;
      var $71=$rslen;
      var $cmp91=(($71)|(0))==1;
      if ($cmp91) { label = 35; break; } else { label = 37; break; }
    case 35: 
      var $72=$newline;
      var $cmp94=(($72)|(0))==10;
      if ($cmp94) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $73=$rslen;
      var $sub97=((($73)-(1))|0);
      var $value98=(($rs)|0);
      var $p99=$value98;
      var $74=HEAP32[(($p99)>>2)];
      var $75=$74;
      var $ptr100=(($75+20)|0);
      var $76=HEAP32[(($ptr100)>>2)];
      var $arrayidx101=(($76+$sub97)|0);
      var $77=HEAP8[($arrayidx101)];
      var $conv102=(($77 << 24) >> 24);
      $newline=$conv102;
      label = 37; break;
    case 37: 
      var $78=$rslen;
      var $cmp104=(($78)|(0))==1;
      if ($cmp104) { label = 38; break; } else { label = 40; break; }
    case 38: 
      var $79=$newline;
      var $cmp107=(($79)|(0))==10;
      if ($cmp107) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 6; break;
    case 40: 
      var $80=$p;
      var $81=$len;
      var $add_ptr=(($80+$81)|0);
      var $82=$rslen;
      var $idx_neg=(((-$82))|0);
      var $add_ptr111=(($add_ptr+$idx_neg)|0);
      $pp=$add_ptr111;
      var $83=$len;
      var $sub112=((($83)-(1))|0);
      var $84=$p;
      var $arrayidx113=(($84+$sub112)|0);
      var $85=HEAP8[($arrayidx113)];
      var $conv114=(($85 << 24) >> 24);
      var $86=$newline;
      var $cmp115=(($conv114)|(0))==(($86)|(0));
      if ($cmp115) { label = 41; break; } else { label = 44; break; }
    case 41: 
      var $87=$rslen;
      var $cmp118=(($87)|(0)) <= 1;
      if ($cmp118) { label = 43; break; } else { label = 42; break; }
    case 42: 
      var $value121=(($rs)|0);
      var $p122=$value121;
      var $88=HEAP32[(($p122)>>2)];
      var $89=$88;
      var $ptr123=(($89+20)|0);
      var $90=HEAP32[(($ptr123)>>2)];
      var $91=$pp;
      var $92=$rslen;
      var $call124=_memcmp($90, $91, $92);
      var $cmp125=(($call124)|(0))==0;
      if ($cmp125) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $93=$len;
      var $94=$rslen;
      var $sub128=((($93)-($94))|0);
      var $95=$s;
      var $len129=(($95+12)|0);
      HEAP32[(($len129)>>2)]=$sub128;
      var $96=$s;
      var $len130=(($96+12)|0);
      var $97=HEAP32[(($len130)>>2)];
      var $98=$p;
      var $arrayidx131=(($98+$97)|0);
      HEAP8[($arrayidx131)]=0;
      var $99=$agg_result;
      var $100=$str;
      assert(12 % 1 === 0);HEAP32[(($99)>>2)]=HEAP32[(($100)>>2)];HEAP32[((($99)+(4))>>2)]=HEAP32[((($100)+(4))>>2)];HEAP32[((($99)+(8))>>2)]=HEAP32[((($100)+(8))>>2)];
      label = 45; break;
    case 44: 
      _mrb_nil_value48($agg_result);
      label = 45; break;
    case 45: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_chop($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $str=__stackBase__;
  var $tmp=(__stackBase__)+(12);
  var $tmp1=(__stackBase__)+(24);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_str_dup($tmp, $0, $self);
  var $1=$str;
  var $2=$tmp;
  assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
  var $3=$mrb_addr;
  _mrb_str_chop_bang($tmp1, $3, $str);
  var $4=$agg_result;
  var $5=$str;
  assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_chop_bang($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $s;
      var $len1;
      $mrb_addr=$mrb;
      var $value=(($str)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $s=$1;
      var $2=$mrb_addr;
      var $3=$s;
      _mrb_str_modify($2, $3);
      var $4=$s;
      var $len=(($4+12)|0);
      var $5=HEAP32[(($len)>>2)];
      var $cmp=(($5)|(0)) > 0;
      if ($cmp) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $6=$s;
      var $len2=(($6+12)|0);
      var $7=HEAP32[(($len2)>>2)];
      var $sub=((($7)-(1))|0);
      $len1=$sub;
      var $8=$len1;
      var $9=$s;
      var $ptr=(($9+20)|0);
      var $10=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($10+$8)|0);
      var $11=HEAP8[($arrayidx)];
      var $conv=(($11 << 24) >> 24);
      var $cmp3=(($conv)|(0))==10;
      if ($cmp3) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $12=$len1;
      var $cmp6=(($12)|(0)) > 0;
      if ($cmp6) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $13=$len1;
      var $sub8=((($13)-(1))|0);
      var $14=$s;
      var $ptr9=(($14+20)|0);
      var $15=HEAP32[(($ptr9)>>2)];
      var $arrayidx10=(($15+$sub8)|0);
      var $16=HEAP8[($arrayidx10)];
      var $conv11=(($16 << 24) >> 24);
      var $cmp12=(($conv11)|(0))==13;
      if ($cmp12) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $17=$len1;
      var $dec=((($17)-(1))|0);
      $len1=$dec;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $18=$len1;
      var $19=$s;
      var $len16=(($19+12)|0);
      HEAP32[(($len16)>>2)]=$18;
      var $20=$len1;
      var $21=$s;
      var $ptr17=(($21+20)|0);
      var $22=HEAP32[(($ptr17)>>2)];
      var $arrayidx18=(($22+$20)|0);
      HEAP8[($arrayidx18)]=0;
      var $23=$agg_result;
      var $24=$str;
      assert(12 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
      label = 10; break;
    case 9: 
      _mrb_nil_value48($agg_result);
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_downcase($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $str=__stackBase__;
  var $tmp=(__stackBase__)+(12);
  var $tmp1=(__stackBase__)+(24);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_str_dup($tmp, $0, $self);
  var $1=$str;
  var $2=$tmp;
  assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
  var $3=$mrb_addr;
  _mrb_str_downcase_bang($tmp1, $3, $str);
  var $4=$agg_result;
  var $5=$str;
  assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_downcase_bang($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $p;
      var $pend;
      var $modify;
      var $s;
      $mrb_addr=$mrb;
      $modify=0;
      var $value=(($str)|0);
      var $p1=$value;
      var $0=HEAP32[(($p1)>>2)];
      var $1=$0;
      $s=$1;
      var $2=$mrb_addr;
      var $3=$s;
      _mrb_str_modify($2, $3);
      var $4=$s;
      var $ptr=(($4+20)|0);
      var $5=HEAP32[(($ptr)>>2)];
      $p=$5;
      var $6=$s;
      var $ptr2=(($6+20)|0);
      var $7=HEAP32[(($ptr2)>>2)];
      var $8=$s;
      var $len=(($8+12)|0);
      var $9=HEAP32[(($len)>>2)];
      var $add_ptr=(($7+$9)|0);
      $pend=$add_ptr;
      label = 3; break;
    case 3: 
      var $10=$p;
      var $11=$pend;
      var $cmp=(($10)>>>(0)) < (($11)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $12=$p;
      var $13=HEAP8[($12)];
      var $conv=(($13)&(255));
      var $call=_isupper($conv);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $14=$p;
      var $15=HEAP8[($14)];
      var $conv3=(($15)&(255));
      var $call4=_tolower($conv3);
      var $conv5=(($call4) & 255);
      var $16=$p;
      HEAP8[($16)]=$conv5;
      $modify=1;
      label = 6; break;
    case 6: 
      var $17=$p;
      var $incdec_ptr=(($17+1)|0);
      $p=$incdec_ptr;
      label = 3; break;
    case 7: 
      var $18=$modify;
      var $tobool6=(($18)|(0))!=0;
      if ($tobool6) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $19=$agg_result;
      var $20=$str;
      assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
      label = 10; break;
    case 9: 
      _mrb_nil_value48($agg_result);
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_empty_p($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $s;
  $mrb_addr=$mrb;
  var $value=(($self)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  $s=$1;
  var $2=$s;
  var $len=(($2+12)|0);
  var $3=HEAP32[(($len)>>2)];
  var $cmp=(($3)|(0))==0;
  var $conv=(($cmp)&(1));
  var $conv1=(($conv) & 255);
  _mrb_bool_value($agg_result, $conv1);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_eql($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $str2=__stackBase__;
      var $eql_p;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((96488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$str2,tempInt));
      var $tt=(($str2+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==16;
      if ($cmp) { label = 3; break; } else { var $3 = 0;label = 4; break; }
    case 3: 
      var $2=$mrb_addr;
      var $call1=_str_eql($2, $self, $str2);
      var $tobool=(($call1)|(0))!=0;
      var $3 = $tobool;label = 4; break;
    case 4: 
      var $3;
      var $land_ext=(($3)&(1));
      var $conv=(($land_ext) & 255);
      $eql_p=$conv;
      var $4=$eql_p;
      _mrb_bool_value($agg_result, $4);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_hash_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $key;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_str_hash($0, $self);
  $key=$call;
  var $1=$key;
  _mrb_fixnum_value47($agg_result, $1);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_include($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $i;
      var $str2=__stackBase__;
      var $include_p;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((96488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$str2,tempInt));
      var $tt=(($str2+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $value=(($self)|0);
      var $p=$value;
      var $2=HEAP32[(($p)>>2)];
      var $3=$2;
      var $ptr=(($3+20)|0);
      var $4=HEAP32[(($ptr)>>2)];
      var $value1=(($str2)|0);
      var $i2=$value1;
      var $5=HEAP32[(($i2)>>2)];
      var $value3=(($self)|0);
      var $p4=$value3;
      var $6=HEAP32[(($p4)>>2)];
      var $7=$6;
      var $len=(($7+12)|0);
      var $8=HEAP32[(($len)>>2)];
      var $call5=_memchr($4, $5, $8);
      var $cmp6=(($call5)|(0))!=0;
      var $conv=(($cmp6)&(1));
      var $conv7=(($conv) & 255);
      $include_p=$conv7;
      label = 5; break;
    case 4: 
      var $9=$mrb_addr;
      _mrb_str_to_str($tmp, $9, $str2);
      var $10=$str2;
      var $11=$tmp;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      var $12=$mrb_addr;
      var $call8=_mrb_str_index($12, $self, $str2, 0);
      $i=$call8;
      var $13=$i;
      var $cmp9=(($13)|(0))!=-1;
      var $conv10=(($cmp9)&(1));
      var $conv11=(($conv10) & 255);
      $include_p=$conv11;
      label = 5; break;
    case 5: 
      var $14=$include_p;
      _mrb_bool_value($agg_result, $14);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_index_m($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argv=__stackBase__;
      var $argc=(__stackBase__)+(4);
      var $sub=(__stackBase__)+(8);
      var $pos;
      var $tmp=(__stackBase__)+(20);
      var $c;
      var $len18;
      var $p23;
      var $tmp33=(__stackBase__)+(32);
      var $tmp34=(__stackBase__)+(44);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((108292)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      var $1=HEAP32[(($argc)>>2)];
      var $cmp=(($1)|(0))==2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[(($argv)>>2)];
      var $arrayidx=(($2+12)|0);
      var $value=(($arrayidx)|0);
      var $i=$value;
      var $3=HEAP32[(($i)>>2)];
      $pos=$3;
      var $4=HEAP32[(($argv)>>2)];
      var $arrayidx1=(($4)|0);
      var $5=$sub;
      var $6=$arrayidx1;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      label = 8; break;
    case 4: 
      $pos=0;
      var $7=HEAP32[(($argc)>>2)];
      var $cmp2=(($7)|(0)) > 0;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=HEAP32[(($argv)>>2)];
      var $arrayidx4=(($8)|0);
      var $9=$sub;
      var $10=$arrayidx4;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      label = 7; break;
    case 6: 
      _mrb_nil_value48($tmp);
      var $11=$sub;
      var $12=$tmp;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $13=$mrb_addr;
      _regexp_check($13, $sub);
      var $14=$pos;
      var $cmp7=(($14)|(0)) < 0;
      if ($cmp7) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $value9=(($str)|0);
      var $p=$value9;
      var $15=HEAP32[(($p)>>2)];
      var $16=$15;
      var $len=(($16+12)|0);
      var $17=HEAP32[(($len)>>2)];
      var $18=$pos;
      var $add=((($18)+($17))|0);
      $pos=$add;
      var $19=$pos;
      var $cmp10=(($19)|(0)) < 0;
      if ($cmp10) { label = 10; break; } else { label = 11; break; }
    case 10: 
      _mrb_nil_value48($agg_result);
      label = 28; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $tt=(($sub+8)|0);
      var $20=HEAP32[(($tt)>>2)];
      if ((($20)|(0))==3) {
        label = 13; break;
      }
      else if ((($20)|(0))==16) {
        label = 24; break;
      }
      else {
      label = 20; break;
      }
    case 13: 
      var $value15=(($sub)|0);
      var $i16=$value15;
      var $21=HEAP32[(($i16)>>2)];
      $c=$21;
      var $value19=(($str)|0);
      var $p20=$value19;
      var $22=HEAP32[(($p20)>>2)];
      var $23=$22;
      var $len21=(($23+12)|0);
      var $24=HEAP32[(($len21)>>2)];
      $len18=$24;
      var $value24=(($str)|0);
      var $p25=$value24;
      var $25=HEAP32[(($p25)>>2)];
      var $26=$25;
      var $ptr=(($26+20)|0);
      var $27=HEAP32[(($ptr)>>2)];
      $p23=$27;
      label = 14; break;
    case 14: 
      var $28=$pos;
      var $29=$len18;
      var $cmp26=(($28)|(0)) < (($29)|(0));
      if ($cmp26) { label = 15; break; } else { label = 19; break; }
    case 15: 
      var $30=$pos;
      var $31=$p23;
      var $arrayidx27=(($31+$30)|0);
      var $32=HEAP8[($arrayidx27)];
      var $conv=(($32)&(255));
      var $33=$c;
      var $cmp28=(($conv)|(0))==(($33)|(0));
      if ($cmp28) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $34=$pos;
      _mrb_fixnum_value47($agg_result, $34);
      label = 28; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $35=$pos;
      var $inc=((($35)+(1))|0);
      $pos=$inc;
      label = 14; break;
    case 19: 
      _mrb_nil_value48($agg_result);
      label = 28; break;
    case 20: 
      var $36=$mrb_addr;
      _mrb_check_string_type($tmp34, $36, $sub);
      var $37=$tmp33;
      var $38=$tmp34;
      assert(12 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];HEAP32[((($37)+(8))>>2)]=HEAP32[((($38)+(8))>>2)];
      var $tt35=(($tmp33+8)|0);
      var $39=HEAP32[(($tt35)>>2)];
      var $cmp36=(($39)|(0))==0;
      if ($cmp36) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $value38=(($tmp33)|0);
      var $i39=$value38;
      var $40=HEAP32[(($i39)>>2)];
      var $tobool=(($40)|(0))!=0;
      if ($tobool) { label = 23; break; } else { label = 22; break; }
    case 22: 
      var $41=$mrb_addr;
      var $42=$mrb_addr;
      var $call41=_mrb_class_get($42, ((107196)|0));
      _mrb_raisef($41, $call41, ((97112)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($sub)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($sub)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($sub)+(8))>>2)],tempInt));
      label = 23; break;
    case 23: 
      var $43=$sub;
      var $44=$tmp33;
      assert(12 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];
      label = 24; break;
    case 24: 
      var $45=$mrb_addr;
      var $46=$pos;
      var $call44=_mrb_str_index($45, $str, $sub, $46);
      $pos=$call44;
      label = 25; break;
    case 25: 
      var $47=$pos;
      var $cmp45=(($47)|(0))==-1;
      if ($cmp45) { label = 26; break; } else { label = 27; break; }
    case 26: 
      _mrb_nil_value48($agg_result);
      label = 28; break;
    case 27: 
      var $48=$pos;
      _mrb_fixnum_value47($agg_result, $48);
      label = 28; break;
    case 28: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_init($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $str2=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((96572)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$str2,tempInt));
      var $cmp=(($call)|(0))==1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mrb_addr;
      var $value=(($self)|0);
      var $p=$value;
      var $2=HEAP32[(($p)>>2)];
      var $3=$2;
      var $value1=(($str2)|0);
      var $p2=$value1;
      var $4=HEAP32[(($p2)>>2)];
      var $5=$4;
      _str_replace($tmp, $1, $3, $5);
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$self;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_replace($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $str2=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((96664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$str2,tempInt));
  var $1=$mrb_addr;
  var $value=(($str)|0);
  var $p=$value;
  var $2=HEAP32[(($p)>>2)];
  var $3=$2;
  var $value1=(($str2)|0);
  var $p2=$value1;
  var $4=HEAP32[(($p2)>>2)];
  var $5=$4;
  _str_replace($agg_result, $1, $3, $5);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_reverse($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $s2;
      var $s;
      var $e;
      var $p;
      $mrb_addr=$mrb;
      var $value=(($str)|0);
      var $p1=$value;
      var $0=HEAP32[(($p1)>>2)];
      var $1=$0;
      var $len=(($1+12)|0);
      var $2=HEAP32[(($len)>>2)];
      var $cmp=(($2)|(0)) <= 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      _mrb_str_dup($agg_result, $3, $str);
      label = 8; break;
    case 4: 
      var $4=$mrb_addr;
      var $value2=(($str)|0);
      var $p3=$value2;
      var $5=HEAP32[(($p3)>>2)];
      var $6=$5;
      var $len4=(($6+12)|0);
      var $7=HEAP32[(($len4)>>2)];
      var $call=_str_new($4, 0, $7);
      $s2=$call;
      var $8=$mrb_addr;
      var $9=$s2;
      _str_with_class($8, $9, $str);
      var $value5=(($str)|0);
      var $p6=$value5;
      var $10=HEAP32[(($p6)>>2)];
      var $11=$10;
      var $ptr=(($11+20)|0);
      var $12=HEAP32[(($ptr)>>2)];
      $s=$12;
      var $value7=(($str)|0);
      var $p8=$value7;
      var $13=HEAP32[(($p8)>>2)];
      var $14=$13;
      var $ptr9=(($14+20)|0);
      var $15=HEAP32[(($ptr9)>>2)];
      var $value10=(($str)|0);
      var $p11=$value10;
      var $16=HEAP32[(($p11)>>2)];
      var $17=$16;
      var $len12=(($17+12)|0);
      var $18=HEAP32[(($len12)>>2)];
      var $add_ptr=(($15+$18)|0);
      var $add_ptr13=((($add_ptr)-(1))|0);
      $e=$add_ptr13;
      var $19=$s2;
      var $ptr14=(($19+20)|0);
      var $20=HEAP32[(($ptr14)>>2)];
      $p=$20;
      label = 5; break;
    case 5: 
      var $21=$e;
      var $22=$s;
      var $cmp15=(($21)>>>(0)) >= (($22)>>>(0));
      if ($cmp15) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $23=$e;
      var $incdec_ptr=((($23)-(1))|0);
      $e=$incdec_ptr;
      var $24=HEAP8[($23)];
      var $25=$p;
      var $incdec_ptr16=(($25+1)|0);
      $p=$incdec_ptr16;
      HEAP8[($25)]=$24;
      label = 5; break;
    case 7: 
      var $26=$s2;
      var $27=$26;
      _mrb_obj_value44($agg_result, $27);
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_reverse_bang($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $s;
      var $p1;
      var $e;
      var $c;
      $mrb_addr=$mrb;
      var $value=(($str)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $s=$1;
      var $2=$mrb_addr;
      var $3=$s;
      _mrb_str_modify($2, $3);
      var $4=$s;
      var $len=(($4+12)|0);
      var $5=HEAP32[(($len)>>2)];
      var $cmp=(($5)|(0)) > 1;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $6=$s;
      var $ptr=(($6+20)|0);
      var $7=HEAP32[(($ptr)>>2)];
      $p1=$7;
      var $8=$p1;
      var $9=$s;
      var $len2=(($9+12)|0);
      var $10=HEAP32[(($len2)>>2)];
      var $add_ptr=(($8+$10)|0);
      var $add_ptr3=((($add_ptr)-(1))|0);
      $e=$add_ptr3;
      label = 4; break;
    case 4: 
      var $11=$p1;
      var $12=$e;
      var $cmp4=(($11)>>>(0)) < (($12)>>>(0));
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $13=$p1;
      var $14=HEAP8[($13)];
      $c=$14;
      var $15=$e;
      var $16=HEAP8[($15)];
      var $17=$p1;
      var $incdec_ptr=(($17+1)|0);
      $p1=$incdec_ptr;
      HEAP8[($17)]=$16;
      var $18=$c;
      var $19=$e;
      var $incdec_ptr5=((($19)-(1))|0);
      $e=$incdec_ptr5;
      HEAP8[($19)]=$18;
      label = 4; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $20=$agg_result;
      var $21=$str;
      assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_rindex_m($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 68)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argv=__stackBase__;
      var $argc=(__stackBase__)+(4);
      var $sub=(__stackBase__)+(8);
      var $vpos=(__stackBase__)+(20);
      var $pos;
      var $len;
      var $tmp=(__stackBase__)+(32);
      var $c;
      var $len22;
      var $p27;
      var $tmp37=(__stackBase__)+(44);
      var $tmp38=(__stackBase__)+(56);
      $mrb_addr=$mrb;
      var $value=(($str)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $len1=(($1+12)|0);
      var $2=HEAP32[(($len1)>>2)];
      $len=$2;
      var $3=$mrb_addr;
      var $call=_mrb_get_args($3, ((108292)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      var $4=HEAP32[(($argc)>>2)];
      var $cmp=(($4)|(0))==2;
      if ($cmp) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $5=HEAP32[(($argv)>>2)];
      var $arrayidx=(($5)|0);
      var $6=$sub;
      var $7=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      var $8=HEAP32[(($argv)>>2)];
      var $arrayidx2=(($8+12)|0);
      var $9=$vpos;
      var $10=$arrayidx2;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      var $value3=(($vpos)|0);
      var $i=$value3;
      var $11=HEAP32[(($i)>>2)];
      $pos=$11;
      var $12=$pos;
      var $cmp4=(($12)|(0)) < 0;
      if ($cmp4) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $13=$len;
      var $14=$pos;
      var $add=((($14)+($13))|0);
      $pos=$add;
      var $15=$pos;
      var $cmp6=(($15)|(0)) < 0;
      if ($cmp6) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=$mrb_addr;
      _regexp_check($16, $sub);
      _mrb_nil_value48($agg_result);
      label = 30; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $17=$pos;
      var $18=$len;
      var $cmp9=(($17)|(0)) > (($18)|(0));
      if ($cmp9) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $19=$len;
      $pos=$19;
      label = 9; break;
    case 9: 
      label = 14; break;
    case 10: 
      var $20=$len;
      $pos=$20;
      var $21=HEAP32[(($argc)>>2)];
      var $cmp12=(($21)|(0)) > 0;
      if ($cmp12) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $22=HEAP32[(($argv)>>2)];
      var $arrayidx14=(($22)|0);
      var $23=$sub;
      var $24=$arrayidx14;
      assert(12 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
      label = 13; break;
    case 12: 
      _mrb_nil_value48($tmp);
      var $25=$sub;
      var $26=$tmp;
      assert(12 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $27=$mrb_addr;
      _regexp_check($27, $sub);
      var $tt=(($sub+8)|0);
      var $28=HEAP32[(($tt)>>2)];
      if ((($28)|(0))==3) {
        label = 15; break;
      }
      else if ((($28)|(0))==16) {
        label = 26; break;
      }
      else {
      label = 22; break;
      }
    case 15: 
      var $value19=(($sub)|0);
      var $i20=$value19;
      var $29=HEAP32[(($i20)>>2)];
      $c=$29;
      var $value23=(($str)|0);
      var $p24=$value23;
      var $30=HEAP32[(($p24)>>2)];
      var $31=$30;
      var $len25=(($31+12)|0);
      var $32=HEAP32[(($len25)>>2)];
      $len22=$32;
      var $value28=(($str)|0);
      var $p29=$value28;
      var $33=HEAP32[(($p29)>>2)];
      var $34=$33;
      var $ptr=(($34+20)|0);
      var $35=HEAP32[(($ptr)>>2)];
      $p27=$35;
      var $36=$len22;
      $pos=$36;
      label = 16; break;
    case 16: 
      var $37=$pos;
      var $cmp30=(($37)|(0)) >= 0;
      if ($cmp30) { label = 17; break; } else { label = 21; break; }
    case 17: 
      var $38=$pos;
      var $39=$p27;
      var $arrayidx31=(($39+$38)|0);
      var $40=HEAP8[($arrayidx31)];
      var $conv=(($40)&(255));
      var $41=$c;
      var $cmp32=(($conv)|(0))==(($41)|(0));
      if ($cmp32) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $42=$pos;
      _mrb_fixnum_value47($agg_result, $42);
      label = 30; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $43=$pos;
      var $dec=((($43)-(1))|0);
      $pos=$dec;
      label = 16; break;
    case 21: 
      _mrb_nil_value48($agg_result);
      label = 30; break;
    case 22: 
      var $44=$mrb_addr;
      _mrb_check_string_type($tmp38, $44, $sub);
      var $45=$tmp37;
      var $46=$tmp38;
      assert(12 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];HEAP32[((($45)+(8))>>2)]=HEAP32[((($46)+(8))>>2)];
      var $tt39=(($tmp37+8)|0);
      var $47=HEAP32[(($tt39)>>2)];
      var $cmp40=(($47)|(0))==0;
      if ($cmp40) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $value42=(($tmp37)|0);
      var $i43=$value42;
      var $48=HEAP32[(($i43)>>2)];
      var $tobool=(($48)|(0))!=0;
      if ($tobool) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $49=$mrb_addr;
      var $50=$mrb_addr;
      var $call45=_mrb_class_get($50, ((107196)|0));
      _mrb_raisef($49, $call45, ((97112)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($sub)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($sub)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($sub)+(8))>>2)],tempInt));
      label = 25; break;
    case 25: 
      var $51=$sub;
      var $52=$tmp37;
      assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($52)+(8))>>2)];
      label = 26; break;
    case 26: 
      var $53=$mrb_addr;
      var $54=$pos;
      var $call48=_mrb_str_rindex($53, $str, $sub, $54);
      $pos=$call48;
      var $55=$pos;
      var $cmp49=(($55)|(0)) >= 0;
      if ($cmp49) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $56=$pos;
      _mrb_fixnum_value47($agg_result, $56);
      label = 30; break;
    case 28: 
      label = 29; break;
    case 29: 
      _mrb_nil_value48($agg_result);
      label = 30; break;
    case 30: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_split_m($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 148)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argc;
      var $spat=__stackBase__;
      var $split_type;
      var $i;
      var $lim_p;
      var $beg;
      var $end;
      var $lim=(__stackBase__)+(12);
      var $result=(__stackBase__)+(16);
      var $tmp=(__stackBase__)+(28);
      var $tmp29=(__stackBase__)+(40);
      var $tmp32=(__stackBase__)+(52);
      var $ptr37;
      var $eptr;
      var $bptr;
      var $skip;
      var $c;
      var $ai;
      var $agg_tmp=(__stackBase__)+(64);
      var $ptr96;
      var $temp;
      var $eptr102;
      var $slen;
      var $ai118;
      var $agg_tmp124=(__stackBase__)+(76);
      var $sptr;
      var $ai143;
      var $agg_tmp158=(__stackBase__)+(88);
      var $tmp176=(__stackBase__)+(100);
      var $tmp202=(__stackBase__)+(112);
      var $tmp208=(__stackBase__)+(124);
      var $len217;
      var $tmp238=(__stackBase__)+(136);
      $mrb_addr=$mrb;
      _mrb_nil_value48($spat);
      $split_type=1;
      $i=0;
      HEAP32[(($lim)>>2)]=0;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((97244)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$spat,HEAP32[(((tempInt)+(4))>>2)]=$lim,tempInt));
      $argc=$call;
      var $1=HEAP32[(($lim)>>2)];
      var $cmp=(($1)|(0)) > 0;
      if ($cmp) { label = 3; break; } else { var $3 = 0;label = 4; break; }
    case 3: 
      var $2=$argc;
      var $cmp1=(($2)|(0))==2;
      var $3 = $cmp1;label = 4; break;
    case 4: 
      var $3;
      var $land_ext=(($3)&(1));
      $lim_p=$land_ext;
      var $4=$argc;
      var $cmp2=(($4)|(0))==2;
      if ($cmp2) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $5=HEAP32[(($lim)>>2)];
      var $cmp3=(($5)|(0))==1;
      if ($cmp3) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $value=(($str)|0);
      var $p=$value;
      var $6=HEAP32[(($p)>>2)];
      var $7=$6;
      var $len=(($7+12)|0);
      var $8=HEAP32[(($len)>>2)];
      var $cmp5=(($8)|(0))==0;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $9=$mrb_addr;
      _mrb_ary_new_capa($agg_result, $9, 0);
      label = 78; break;
    case 8: 
      var $10=$mrb_addr;
      _mrb_ary_new_from_values($agg_result, $10, 1, $str);
      label = 78; break;
    case 9: 
      $i=1;
      label = 10; break;
    case 10: 
      var $11=$argc;
      var $cmp9=(($11)|(0))==0;
      if ($cmp9) { label = 13; break; } else { label = 11; break; }
    case 11: 
      var $tt=(($spat+8)|0);
      var $12=HEAP32[(($tt)>>2)];
      var $cmp10=(($12)|(0))==0;
      if ($cmp10) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $value11=(($spat)|0);
      var $i12=$value11;
      var $13=HEAP32[(($i12)>>2)];
      var $tobool=(($13)|(0))!=0;
      if ($tobool) { label = 14; break; } else { label = 13; break; }
    case 13: 
      $split_type=0;
      label = 21; break;
    case 14: 
      var $tt14=(($spat+8)|0);
      var $14=HEAP32[(($tt14)>>2)];
      var $cmp15=(($14)|(0))==16;
      if ($cmp15) { label = 15; break; } else { label = 19; break; }
    case 15: 
      $split_type=1;
      var $value17=(($spat)|0);
      var $p18=$value17;
      var $15=HEAP32[(($p18)>>2)];
      var $16=$15;
      var $len19=(($16+12)|0);
      var $17=HEAP32[(($len19)>>2)];
      var $cmp20=(($17)|(0))==1;
      if ($cmp20) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $value22=(($spat)|0);
      var $p23=$value22;
      var $18=HEAP32[(($p23)>>2)];
      var $19=$18;
      var $ptr=(($19+20)|0);
      var $20=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($20)|0);
      var $21=HEAP8[($arrayidx)];
      var $conv=(($21 << 24) >> 24);
      var $cmp24=(($conv)|(0))==32;
      if ($cmp24) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $split_type=0;
      label = 18; break;
    case 18: 
      label = 20; break;
    case 19: 
      var $22=$mrb_addr;
      _noregexp($tmp29, $22, $str);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $23=$mrb_addr;
      _mrb_ary_new($tmp32, $23);
      var $24=$result;
      var $25=$tmp32;
      assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
      $beg=0;
      var $26=$split_type;
      var $cmp33=(($26)|(0))==0;
      if ($cmp33) { label = 22; break; } else { label = 40; break; }
    case 22: 
      var $value38=(($str)|0);
      var $p39=$value38;
      var $27=HEAP32[(($p39)>>2)];
      var $28=$27;
      var $ptr40=(($28+20)|0);
      var $29=HEAP32[(($ptr40)>>2)];
      $ptr37=$29;
      var $value42=(($str)|0);
      var $p43=$value42;
      var $30=HEAP32[(($p43)>>2)];
      var $31=$30;
      var $ptr44=(($31+20)|0);
      var $32=HEAP32[(($ptr44)>>2)];
      var $value45=(($str)|0);
      var $p46=$value45;
      var $33=HEAP32[(($p46)>>2)];
      var $34=$33;
      var $len47=(($34+12)|0);
      var $35=HEAP32[(($len47)>>2)];
      var $add_ptr=(($32+$35)|0);
      $eptr=$add_ptr;
      var $36=$ptr37;
      $bptr=$36;
      $skip=1;
      var $37=$beg;
      $end=$37;
      label = 23; break;
    case 23: 
      var $38=$ptr37;
      var $39=$eptr;
      var $cmp51=(($38)>>>(0)) < (($39)>>>(0));
      if ($cmp51) { label = 24; break; } else { label = 39; break; }
    case 24: 
      var $40=$mrb_addr;
      var $call54=_mrb_gc_arena_save($40);
      $ai=$call54;
      var $41=$ptr37;
      var $incdec_ptr=(($41+1)|0);
      $ptr37=$incdec_ptr;
      var $42=HEAP8[($41)];
      var $conv55=(($42)&(255));
      $c=$conv55;
      var $43=$skip;
      var $tobool56=(($43)|(0))!=0;
      if ($tobool56) { label = 25; break; } else { label = 32; break; }
    case 25: 
      var $44=$c;
      var $conv58=(($44) & 255);
      var $idxprom=(($conv58)&(255));
      var $arrayidx59=((80116+$idxprom)|0);
      var $45=HEAP8[($arrayidx59)];
      var $tobool60=(($45 << 24) >> 24)!=0;
      if ($tobool60) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $46=$ptr37;
      var $47=$bptr;
      var $sub_ptr_lhs_cast=$46;
      var $sub_ptr_rhs_cast=$47;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $beg=$sub_ptr_sub;
      label = 31; break;
    case 27: 
      var $48=$ptr37;
      var $49=$bptr;
      var $sub_ptr_lhs_cast63=$48;
      var $sub_ptr_rhs_cast64=$49;
      var $sub_ptr_sub65=((($sub_ptr_lhs_cast63)-($sub_ptr_rhs_cast64))|0);
      $end=$sub_ptr_sub65;
      $skip=0;
      var $50=$lim_p;
      var $tobool66=(($50)|(0))!=0;
      if ($tobool66) { label = 28; break; } else { label = 30; break; }
    case 28: 
      var $51=HEAP32[(($lim)>>2)];
      var $52=$i;
      var $cmp68=(($51)|(0)) <= (($52)|(0));
      if ($cmp68) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 39; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 38; break;
    case 32: 
      var $53=$c;
      var $conv74=(($53) & 255);
      var $idxprom75=(($conv74)&(255));
      var $arrayidx76=((80116+$idxprom75)|0);
      var $54=HEAP8[($arrayidx76)];
      var $tobool77=(($54 << 24) >> 24)!=0;
      if ($tobool77) { label = 33; break; } else { label = 36; break; }
    case 33: 
      var $55=$mrb_addr;
      var $56=$mrb_addr;
      var $57=$beg;
      var $58=$end;
      var $59=$beg;
      var $sub=((($58)-($59))|0);
      _mrb_str_subseq($agg_tmp, $56, $str, $57, $sub);
      _mrb_ary_push($55, $result, $agg_tmp);
      var $60=$mrb_addr;
      var $61=$ai;
      _mrb_gc_arena_restore($60, $61);
      $skip=1;
      var $62=$ptr37;
      var $63=$bptr;
      var $sub_ptr_lhs_cast79=$62;
      var $sub_ptr_rhs_cast80=$63;
      var $sub_ptr_sub81=((($sub_ptr_lhs_cast79)-($sub_ptr_rhs_cast80))|0);
      $beg=$sub_ptr_sub81;
      var $64=$lim_p;
      var $tobool82=(($64)|(0))!=0;
      if ($tobool82) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $65=$i;
      var $inc=((($65)+(1))|0);
      $i=$inc;
      label = 35; break;
    case 35: 
      label = 37; break;
    case 36: 
      var $66=$ptr37;
      var $67=$bptr;
      var $sub_ptr_lhs_cast86=$66;
      var $sub_ptr_rhs_cast87=$67;
      var $sub_ptr_sub88=((($sub_ptr_lhs_cast86)-($sub_ptr_rhs_cast87))|0);
      $end=$sub_ptr_sub88;
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 23; break;
    case 39: 
      label = 61; break;
    case 40: 
      var $68=$split_type;
      var $cmp92=(($68)|(0))==1;
      if ($cmp92) { label = 41; break; } else { label = 59; break; }
    case 41: 
      var $value97=(($str)|0);
      var $p98=$value97;
      var $69=HEAP32[(($p98)>>2)];
      var $70=$69;
      var $ptr99=(($70+20)|0);
      var $71=HEAP32[(($ptr99)>>2)];
      $ptr96=$71;
      var $72=$ptr96;
      $temp=$72;
      var $value103=(($str)|0);
      var $p104=$value103;
      var $73=HEAP32[(($p104)>>2)];
      var $74=$73;
      var $ptr105=(($74+20)|0);
      var $75=HEAP32[(($ptr105)>>2)];
      var $value106=(($str)|0);
      var $p107=$value106;
      var $76=HEAP32[(($p107)>>2)];
      var $77=$76;
      var $len108=(($77+12)|0);
      var $78=HEAP32[(($len108)>>2)];
      var $add_ptr109=(($75+$78)|0);
      $eptr102=$add_ptr109;
      var $value111=(($spat)|0);
      var $p112=$value111;
      var $79=HEAP32[(($p112)>>2)];
      var $80=$79;
      var $len113=(($80+12)|0);
      var $81=HEAP32[(($len113)>>2)];
      $slen=$81;
      var $82=$slen;
      var $cmp114=(($82)|(0))==0;
      if ($cmp114) { label = 42; break; } else { label = 49; break; }
    case 42: 
      var $83=$mrb_addr;
      var $call119=_mrb_gc_arena_save($83);
      $ai118=$call119;
      label = 43; break;
    case 43: 
      var $84=$ptr96;
      var $85=$eptr102;
      var $cmp121=(($84)>>>(0)) < (($85)>>>(0));
      if ($cmp121) { label = 44; break; } else { label = 48; break; }
    case 44: 
      var $86=$mrb_addr;
      var $87=$mrb_addr;
      var $88=$ptr96;
      var $89=$temp;
      var $sub_ptr_lhs_cast125=$88;
      var $sub_ptr_rhs_cast126=$89;
      var $sub_ptr_sub127=((($sub_ptr_lhs_cast125)-($sub_ptr_rhs_cast126))|0);
      _mrb_str_subseq($agg_tmp124, $87, $str, $sub_ptr_sub127, 1);
      _mrb_ary_push($86, $result, $agg_tmp124);
      var $90=$mrb_addr;
      var $91=$ai118;
      _mrb_gc_arena_restore($90, $91);
      var $92=$ptr96;
      var $incdec_ptr128=(($92+1)|0);
      $ptr96=$incdec_ptr128;
      var $93=$lim_p;
      var $tobool129=(($93)|(0))!=0;
      if ($tobool129) { label = 45; break; } else { label = 47; break; }
    case 45: 
      var $94=HEAP32[(($lim)>>2)];
      var $95=$i;
      var $inc131=((($95)+(1))|0);
      $i=$inc131;
      var $cmp132=(($94)|(0)) <= (($inc131)|(0));
      if ($cmp132) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 48; break;
    case 47: 
      label = 43; break;
    case 48: 
      label = 58; break;
    case 49: 
      var $value139=(($spat)|0);
      var $p140=$value139;
      var $96=HEAP32[(($p140)>>2)];
      var $97=$96;
      var $ptr141=(($97+20)|0);
      var $98=HEAP32[(($ptr141)>>2)];
      $sptr=$98;
      var $99=$mrb_addr;
      var $call144=_mrb_gc_arena_save($99);
      $ai143=$call144;
      label = 50; break;
    case 50: 
      var $100=$ptr96;
      var $101=$eptr102;
      var $cmp146=(($100)>>>(0)) < (($101)>>>(0));
      if ($cmp146) { label = 51; break; } else { var $107 = 0;label = 52; break; }
    case 51: 
      var $102=$sptr;
      var $103=$slen;
      var $104=$ptr96;
      var $105=$eptr102;
      var $106=$ptr96;
      var $sub_ptr_lhs_cast149=$105;
      var $sub_ptr_rhs_cast150=$106;
      var $sub_ptr_sub151=((($sub_ptr_lhs_cast149)-($sub_ptr_rhs_cast150))|0);
      var $call152=_mrb_memsearch($102, $103, $104, $sub_ptr_sub151);
      $end=$call152;
      var $cmp153=(($call152)|(0)) >= 0;
      var $107 = $cmp153;label = 52; break;
    case 52: 
      var $107;
      if ($107) { label = 53; break; } else { label = 57; break; }
    case 53: 
      var $108=$mrb_addr;
      var $109=$mrb_addr;
      var $110=$ptr96;
      var $111=$temp;
      var $sub_ptr_lhs_cast159=$110;
      var $sub_ptr_rhs_cast160=$111;
      var $sub_ptr_sub161=((($sub_ptr_lhs_cast159)-($sub_ptr_rhs_cast160))|0);
      var $112=$end;
      _mrb_str_subseq($agg_tmp158, $109, $str, $sub_ptr_sub161, $112);
      _mrb_ary_push($108, $result, $agg_tmp158);
      var $113=$mrb_addr;
      var $114=$ai143;
      _mrb_gc_arena_restore($113, $114);
      var $115=$end;
      var $116=$slen;
      var $add=((($115)+($116))|0);
      var $117=$ptr96;
      var $add_ptr162=(($117+$add)|0);
      $ptr96=$add_ptr162;
      var $118=$lim_p;
      var $tobool163=(($118)|(0))!=0;
      if ($tobool163) { label = 54; break; } else { label = 56; break; }
    case 54: 
      var $119=HEAP32[(($lim)>>2)];
      var $120=$i;
      var $inc165=((($120)+(1))|0);
      $i=$inc165;
      var $cmp166=(($119)|(0)) <= (($inc165)|(0));
      if ($cmp166) { label = 55; break; } else { label = 56; break; }
    case 55: 
      label = 57; break;
    case 56: 
      label = 50; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $121=$ptr96;
      var $122=$temp;
      var $sub_ptr_lhs_cast172=$121;
      var $sub_ptr_rhs_cast173=$122;
      var $sub_ptr_sub174=((($sub_ptr_lhs_cast172)-($sub_ptr_rhs_cast173))|0);
      $beg=$sub_ptr_sub174;
      label = 60; break;
    case 59: 
      var $123=$mrb_addr;
      _noregexp($tmp176, $123, $str);
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $value179=(($str)|0);
      var $p180=$value179;
      var $124=HEAP32[(($p180)>>2)];
      var $125=$124;
      var $len181=(($125+12)|0);
      var $126=HEAP32[(($len181)>>2)];
      var $cmp182=(($126)|(0)) > 0;
      if ($cmp182) { label = 62; break; } else { label = 69; break; }
    case 62: 
      var $127=$lim_p;
      var $tobool185=(($127)|(0))!=0;
      if ($tobool185) { label = 65; break; } else { label = 63; break; }
    case 63: 
      var $value187=(($str)|0);
      var $p188=$value187;
      var $128=HEAP32[(($p188)>>2)];
      var $129=$128;
      var $len189=(($129+12)|0);
      var $130=HEAP32[(($len189)>>2)];
      var $131=$beg;
      var $cmp190=(($130)|(0)) > (($131)|(0));
      if ($cmp190) { label = 65; break; } else { label = 64; break; }
    case 64: 
      var $132=HEAP32[(($lim)>>2)];
      var $cmp193=(($132)|(0)) < 0;
      if ($cmp193) { label = 65; break; } else { label = 69; break; }
    case 65: 
      var $value196=(($str)|0);
      var $p197=$value196;
      var $133=HEAP32[(($p197)>>2)];
      var $134=$133;
      var $len198=(($134+12)|0);
      var $135=HEAP32[(($len198)>>2)];
      var $136=$beg;
      var $cmp199=(($135)|(0))==(($136)|(0));
      if ($cmp199) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $137=$mrb_addr;
      _mrb_str_new_empty($tmp202, $137, $str);
      var $138=$tmp;
      var $139=$tmp202;
      assert(12 % 1 === 0);HEAP32[(($138)>>2)]=HEAP32[(($139)>>2)];HEAP32[((($138)+(4))>>2)]=HEAP32[((($139)+(4))>>2)];HEAP32[((($138)+(8))>>2)]=HEAP32[((($139)+(8))>>2)];
      label = 68; break;
    case 67: 
      var $140=$mrb_addr;
      var $141=$beg;
      var $value204=(($str)|0);
      var $p205=$value204;
      var $142=HEAP32[(($p205)>>2)];
      var $143=$142;
      var $len206=(($143+12)|0);
      var $144=HEAP32[(($len206)>>2)];
      var $145=$beg;
      var $sub207=((($144)-($145))|0);
      _mrb_str_subseq($tmp208, $140, $str, $141, $sub207);
      var $146=$tmp;
      var $147=$tmp208;
      assert(12 % 1 === 0);HEAP32[(($146)>>2)]=HEAP32[(($147)>>2)];HEAP32[((($146)+(4))>>2)]=HEAP32[((($147)+(4))>>2)];HEAP32[((($146)+(8))>>2)]=HEAP32[((($147)+(8))>>2)];
      label = 68; break;
    case 68: 
      var $148=$mrb_addr;
      _mrb_ary_push($148, $result, $tmp);
      label = 69; break;
    case 69: 
      var $149=$lim_p;
      var $tobool211=(($149)|(0))!=0;
      if ($tobool211) { label = 77; break; } else { label = 70; break; }
    case 70: 
      var $150=HEAP32[(($lim)>>2)];
      var $cmp213=(($150)|(0))==0;
      if ($cmp213) { label = 71; break; } else { label = 77; break; }
    case 71: 
      label = 72; break;
    case 72: 
      var $value219=(($result)|0);
      var $p220=$value219;
      var $151=HEAP32[(($p220)>>2)];
      var $152=$151;
      var $len221=(($152+12)|0);
      var $153=HEAP32[(($len221)>>2)];
      $len217=$153;
      var $cmp222=(($153)|(0)) > 0;
      if ($cmp222) { label = 73; break; } else { var $163 = 0;label = 74; break; }
    case 73: 
      var $154=$len217;
      var $sub225=((($154)-(1))|0);
      var $value226=(($result)|0);
      var $p227=$value226;
      var $155=HEAP32[(($p227)>>2)];
      var $156=$155;
      var $ptr228=(($156+20)|0);
      var $157=HEAP32[(($ptr228)>>2)];
      var $arrayidx229=(($157+((($sub225)*(12))&-1))|0);
      var $158=$tmp;
      var $159=$arrayidx229;
      assert(12 % 1 === 0);HEAP32[(($158)>>2)]=HEAP32[(($159)>>2)];HEAP32[((($158)+(4))>>2)]=HEAP32[((($159)+(4))>>2)];HEAP32[((($158)+(8))>>2)]=HEAP32[((($159)+(8))>>2)];
      var $value230=(($tmp)|0);
      var $p231=$value230;
      var $160=HEAP32[(($p231)>>2)];
      var $161=$160;
      var $len232=(($161+12)|0);
      var $162=HEAP32[(($len232)>>2)];
      var $cmp233=(($162)|(0))==0;
      var $163 = $cmp233;label = 74; break;
    case 74: 
      var $163;
      if ($163) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $164=$mrb_addr;
      _mrb_ary_pop($tmp238, $164, $result);
      label = 72; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $165=$agg_result;
      var $166=$result;
      assert(12 % 1 === 0);HEAP32[(($165)>>2)]=HEAP32[(($166)>>2)];HEAP32[((($165)+(4))>>2)]=HEAP32[((($166)+(4))>>2)];HEAP32[((($165)+(8))>>2)]=HEAP32[((($166)+(8))>>2)];
      label = 78; break;
    case 78: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_to_i($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argv=__stackBase__;
      var $argc=(__stackBase__)+(4);
      var $base;
      var $agg_tmp=(__stackBase__)+(8);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((108292)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      var $1=HEAP32[(($argc)>>2)];
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $base=10;
      label = 5; break;
    case 4: 
      var $2=HEAP32[(($argv)>>2)];
      var $arrayidx=(($2)|0);
      var $value=(($arrayidx)|0);
      var $i=$value;
      var $3=HEAP32[(($i)>>2)];
      $base=$3;
      label = 5; break;
    case 5: 
      var $4=$base;
      var $cmp1=(($4)|(0)) < 0;
      if ($cmp1) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $5=$mrb_addr;
      var $6=$mrb_addr;
      var $call3=_mrb_class_get($6, ((104876)|0));
      var $7=$base;
      _mrb_fixnum_value47($agg_tmp, $7);
      _mrb_raisef($5, $call3, ((94532)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 7; break;
    case 7: 
      var $8=$mrb_addr;
      var $9=$base;
      _mrb_str_to_inum($agg_result, $8, $self, $9, 0);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_to_f($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_str_to_dbl($0, $self, 0);
  _mrb_float_value53($agg_result, $call);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_to_s($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_obj_class($0, $self);
      var $1=$mrb_addr;
      var $string_class=(($1+60)|0);
      var $2=HEAP32[(($string_class)>>2)];
      var $cmp=(($call)|(0))!=(($2)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      _mrb_str_dup($agg_result, $3, $self);
      label = 5; break;
    case 4: 
      var $4=$agg_result;
      var $5=$self;
      assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_upcase($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $str=__stackBase__;
  var $tmp=(__stackBase__)+(12);
  var $tmp1=(__stackBase__)+(24);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_str_dup($tmp, $0, $self);
  var $1=$str;
  var $2=$tmp;
  assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
  var $3=$mrb_addr;
  _mrb_str_upcase_bang($tmp1, $3, $str);
  var $4=$agg_result;
  var $5=$str;
  assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_upcase_bang($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $s;
      var $p1;
      var $pend;
      var $modify;
      $mrb_addr=$mrb;
      var $value=(($str)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $s=$1;
      $modify=0;
      var $2=$mrb_addr;
      var $3=$s;
      _mrb_str_modify($2, $3);
      var $value2=(($str)|0);
      var $p3=$value2;
      var $4=HEAP32[(($p3)>>2)];
      var $5=$4;
      var $ptr=(($5+20)|0);
      var $6=HEAP32[(($ptr)>>2)];
      $p1=$6;
      var $value4=(($str)|0);
      var $p5=$value4;
      var $7=HEAP32[(($p5)>>2)];
      var $8=$7;
      var $ptr6=(($8+20)|0);
      var $9=HEAP32[(($ptr6)>>2)];
      var $value7=(($str)|0);
      var $p8=$value7;
      var $10=HEAP32[(($p8)>>2)];
      var $11=$10;
      var $len=(($11+12)|0);
      var $12=HEAP32[(($len)>>2)];
      var $add_ptr=(($9+$12)|0);
      $pend=$add_ptr;
      label = 3; break;
    case 3: 
      var $13=$p1;
      var $14=$pend;
      var $cmp=(($13)>>>(0)) < (($14)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $15=$p1;
      var $16=HEAP8[($15)];
      var $conv=(($16)&(255));
      var $call=_islower($conv);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=$p1;
      var $18=HEAP8[($17)];
      var $conv9=(($18)&(255));
      var $call10=_toupper($conv9);
      var $conv11=(($call10) & 255);
      var $19=$p1;
      HEAP8[($19)]=$conv11;
      $modify=1;
      label = 6; break;
    case 6: 
      var $20=$p1;
      var $incdec_ptr=(($20+1)|0);
      $p1=$incdec_ptr;
      label = 3; break;
    case 7: 
      var $21=$modify;
      var $tobool12=(($21)|(0))!=0;
      if ($tobool12) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $22=$agg_result;
      var $23=$str;
      assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
      label = 10; break;
    case 9: 
      _mrb_nil_value48($agg_result);
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_bytes($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $s;
      var $a=__stackBase__;
      var $p1;
      var $pend;
      var $agg_tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $value=(($str)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $s=$1;
      var $2=$mrb_addr;
      var $3=$s;
      var $len=(($3+12)|0);
      var $4=HEAP32[(($len)>>2)];
      _mrb_ary_new_capa($a, $2, $4);
      var $5=$s;
      var $ptr=(($5+20)|0);
      var $6=HEAP32[(($ptr)>>2)];
      $p1=$6;
      var $7=$p1;
      var $8=$s;
      var $len2=(($8+12)|0);
      var $9=HEAP32[(($len2)>>2)];
      var $add_ptr=(($7+$9)|0);
      $pend=$add_ptr;
      label = 3; break;
    case 3: 
      var $10=$p1;
      var $11=$pend;
      var $cmp=(($10)>>>(0)) < (($11)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $12=$mrb_addr;
      var $13=$p1;
      var $arrayidx=(($13)|0);
      var $14=HEAP8[($arrayidx)];
      var $conv=(($14)&(255));
      _mrb_fixnum_value47($agg_tmp, $conv);
      _mrb_ary_push($12, $a, $agg_tmp);
      var $15=$p1;
      var $incdec_ptr=(($15+1)|0);
      $p1=$incdec_ptr;
      label = 3; break;
    case 5: 
      var $16=$agg_result;
      var $17=$a;
      assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_float_value53($agg_result, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $f_addr;
      var $v=__stackBase__;
      $f_addr=$f;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=6;
      var $0=$f_addr;
      var $value=(($v)|0);
      var $f1=$value;
      (HEAPF64[(tempDoublePtr)>>3]=$0,HEAP32[(($f1)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_memsearch($x0, $m, $y0, $n) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $x0_addr;
      var $m_addr;
      var $y0_addr;
      var $n_addr;
      var $x;
      var $y;
      var $ys;
      var $ye;
      $x0_addr=$x0;
      $m_addr=$m;
      $y0_addr=$y0;
      $n_addr=$n;
      var $0=$x0_addr;
      $x=$0;
      var $1=$y0_addr;
      $y=$1;
      var $2=$m_addr;
      var $3=$n_addr;
      var $cmp=(($2)|(0)) > (($3)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=-1;
      label = 20; break;
    case 4: 
      var $4=$m_addr;
      var $5=$n_addr;
      var $cmp1=(($4)|(0))==(($5)|(0));
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$x0_addr;
      var $7=$y0_addr;
      var $8=$m_addr;
      var $call=_memcmp($6, $7, $8);
      var $cmp3=(($call)|(0))==0;
      var $cond=$cmp3 ? 0 : -1;
      $retval=$cond;
      label = 20; break;
    case 6: 
      var $9=$m_addr;
      var $cmp5=(($9)|(0)) < 1;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=0;
      label = 20; break;
    case 8: 
      var $10=$m_addr;
      var $cmp8=(($10)|(0))==1;
      if ($cmp8) { label = 9; break; } else { label = 16; break; }
    case 9: 
      var $11=$y;
      $ys=$11;
      var $12=$ys;
      var $13=$n_addr;
      var $add_ptr=(($12+$13)|0);
      $ye=$add_ptr;
      label = 10; break;
    case 10: 
      var $14=$y;
      var $15=$ye;
      var $cmp10=(($14)>>>(0)) < (($15)>>>(0));
      if ($cmp10) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $16=$x;
      var $17=HEAP8[($16)];
      var $conv=(($17)&(255));
      var $18=$y;
      var $19=HEAP8[($18)];
      var $conv11=(($19)&(255));
      var $cmp12=(($conv)|(0))==(($conv11)|(0));
      if ($cmp12) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $20=$y;
      var $21=$ys;
      var $sub_ptr_lhs_cast=$20;
      var $sub_ptr_rhs_cast=$21;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $retval=$sub_ptr_sub;
      label = 20; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $22=$y;
      var $incdec_ptr=(($22+1)|0);
      $y=$incdec_ptr;
      label = 10; break;
    case 15: 
      $retval=-1;
      label = 20; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $23=$x0_addr;
      var $24=$m_addr;
      var $25=$y0_addr;
      var $26=$n_addr;
      var $call19=_mrb_memsearch_qs($23, $24, $25, $26);
      $retval=$call19;
      label = 20; break;
    case 20: 
      var $27=$retval;
      return $27;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_new_empty($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $s;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_str_new($0, 0, 0);
  $s=$call;
  var $1=$mrb_addr;
  var $2=$s;
  _str_with_class($1, $2, $str);
  var $3=$s;
  var $4=$3;
  _mrb_obj_value44($agg_result, $4);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_memsearch_qs($xs, $m, $ys, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1024)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $xs_addr;
      var $m_addr;
      var $ys_addr;
      var $n_addr;
      var $x;
      var $xe;
      var $y;
      var $i;
      var $qstable=__stackBase__;
      $xs_addr=$xs;
      $m_addr=$m;
      $ys_addr=$ys;
      $n_addr=$n;
      var $0=$xs_addr;
      $x=$0;
      var $1=$xs_addr;
      var $2=$m_addr;
      var $add_ptr=(($1+$2)|0);
      $xe=$add_ptr;
      var $3=$ys_addr;
      $y=$3;
      $i=0;
      label = 3; break;
    case 3: 
      var $4=$i;
      var $cmp=(($4)|(0)) < 256;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $5=$m_addr;
      var $add=((($5)+(1))|0);
      var $6=$i;
      var $arrayidx=(($qstable+($6<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$add;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $inc=((($7)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $8=$x;
      var $9=$xe;
      var $cmp2=(($8)>>>(0)) < (($9)>>>(0));
      if ($cmp2) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $10=$xe;
      var $11=$x;
      var $sub_ptr_lhs_cast=$10;
      var $sub_ptr_rhs_cast=$11;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $12=$x;
      var $13=HEAP8[($12)];
      var $idxprom=(($13)&(255));
      var $arrayidx4=(($qstable+($idxprom<<2))|0);
      HEAP32[(($arrayidx4)>>2)]=$sub_ptr_sub;
      label = 9; break;
    case 9: 
      var $14=$x;
      var $incdec_ptr=(($14+1)|0);
      $x=$incdec_ptr;
      label = 7; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $15=$y;
      var $16=$m_addr;
      var $add_ptr8=(($15+$16)|0);
      var $17=$ys_addr;
      var $18=$n_addr;
      var $add_ptr9=(($17+$18)|0);
      var $cmp10=(($add_ptr8)>>>(0)) <= (($add_ptr9)>>>(0));
      if ($cmp10) { label = 12; break; } else { label = 17; break; }
    case 12: 
      var $19=$xs_addr;
      var $20=HEAP8[($19)];
      var $conv=(($20)&(255));
      var $21=$y;
      var $22=HEAP8[($21)];
      var $conv12=(($22)&(255));
      var $cmp13=(($conv)|(0))==(($conv12)|(0));
      if ($cmp13) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $23=$xs_addr;
      var $24=$y;
      var $25=$m_addr;
      var $call=_memcmp($23, $24, $25);
      var $cmp15=(($call)|(0))==0;
      if ($cmp15) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $26=$y;
      var $27=$ys_addr;
      var $sub_ptr_lhs_cast17=$26;
      var $sub_ptr_rhs_cast18=$27;
      var $sub_ptr_sub19=((($sub_ptr_lhs_cast17)-($sub_ptr_rhs_cast18))|0);
      $retval=$sub_ptr_sub19;
      label = 18; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $arraydecay=(($qstable)|0);
      var $28=$m_addr;
      var $29=$y;
      var $arrayidx21=(($29+$28)|0);
      var $30=HEAP8[($arrayidx21)];
      var $conv22=(($30)&(255));
      var $add_ptr23=(($arraydecay+($conv22<<2))|0);
      var $31=HEAP32[(($add_ptr23)>>2)];
      var $32=$y;
      var $add_ptr24=(($32+$31)|0);
      $y=$add_ptr24;
      label = 11; break;
    case 17: 
      $retval=-1;
      label = 18; break;
    case 18: 
      var $33=$retval;
      STACKTOP = __stackBase__;
      return $33;
    default: assert(0, "bad label: " + label);
  }
}
function _regexp_check($mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tmp=__stackBase__;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_obj_classname($0, $obj);
      var $call1=_memcmp($call, ((96784)|0), 6);
      var $tobool=(($call1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$mrb_addr;
      _noregexp($tmp, $1, $obj);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_rindex($mrb, $str, $sub, $pos) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $sub; $sub = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($sub)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sub)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sub)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $pos_addr;
      var $s;
      var $sbeg;
      var $t;
      var $ps;
      var $psub;
      var $len;
      $mrb_addr=$mrb;
      $pos_addr=$pos;
      var $value=(($str)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $ps=$1;
      var $value1=(($sub)|0);
      var $p2=$value1;
      var $2=HEAP32[(($p2)>>2)];
      var $3=$2;
      $psub=$3;
      var $4=$psub;
      var $len3=(($4+12)|0);
      var $5=HEAP32[(($len3)>>2)];
      $len=$5;
      var $6=$ps;
      var $len4=(($6+12)|0);
      var $7=HEAP32[(($len4)>>2)];
      var $8=$len;
      var $cmp=(($7)|(0)) < (($8)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=-1;
      label = 14; break;
    case 4: 
      var $9=$ps;
      var $len5=(($9+12)|0);
      var $10=HEAP32[(($len5)>>2)];
      var $11=$pos_addr;
      var $sub6=((($10)-($11))|0);
      var $12=$len;
      var $cmp7=(($sub6)|(0)) < (($12)|(0));
      if ($cmp7) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $13=$ps;
      var $len9=(($13+12)|0);
      var $14=HEAP32[(($len9)>>2)];
      var $15=$len;
      var $sub10=((($14)-($15))|0);
      $pos_addr=$sub10;
      label = 6; break;
    case 6: 
      var $16=$ps;
      var $ptr=(($16+20)|0);
      var $17=HEAP32[(($ptr)>>2)];
      $sbeg=$17;
      var $18=$ps;
      var $ptr12=(($18+20)|0);
      var $19=HEAP32[(($ptr12)>>2)];
      var $20=$pos_addr;
      var $add_ptr=(($19+$20)|0);
      $s=$add_ptr;
      var $21=$psub;
      var $ptr13=(($21+20)|0);
      var $22=HEAP32[(($ptr13)>>2)];
      $t=$22;
      var $23=$len;
      var $tobool=(($23)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 13; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $24=$sbeg;
      var $25=$s;
      var $cmp15=(($24)>>>(0)) <= (($25)>>>(0));
      if ($cmp15) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $26=$s;
      var $27=$t;
      var $28=$len;
      var $call=_memcmp($26, $27, $28);
      var $cmp16=(($call)|(0))==0;
      if ($cmp16) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $29=$s;
      var $30=$ps;
      var $ptr18=(($30+20)|0);
      var $31=HEAP32[(($ptr18)>>2)];
      var $sub_ptr_lhs_cast=$29;
      var $sub_ptr_rhs_cast=$31;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $retval=$sub_ptr_sub;
      label = 14; break;
    case 11: 
      var $32=$s;
      var $incdec_ptr=((($32)-(1))|0);
      $s=$incdec_ptr;
      label = 8; break;
    case 12: 
      $retval=-1;
      label = 14; break;
    case 13: 
      var $33=$pos_addr;
      $retval=$33;
      label = 14; break;
    case 14: 
      var $34=$retval;
      STACKTOP = __stackBase__;
      return $34;
    default: assert(0, "bad label: " + label);
  }
}
function _str_replace($agg_result, $mrb, $s1, $s2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $s1_addr;
      var $s2_addr;
      $mrb_addr=$mrb;
      $s1_addr=$s1;
      $s2_addr=$s2;
      var $0=$s2_addr;
      var $1=$0;
      var $2=HEAP32[(($1)>>2)];
      var $3=$2 >>> 11;
      var $bf_clear=$3 & 2097151;
      var $and=$bf_clear & 1;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 8; break; }
    case 3: 
      label = 4; break;
    case 4: 
      var $4=$s1_addr;
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6 >>> 11;
      var $bf_clear1=$7 & 2097151;
      var $and2=$bf_clear1 & 1;
      var $tobool3=(($and2)|(0))!=0;
      if ($tobool3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$mrb_addr;
      var $9=$s1_addr;
      var $aux=(($9+16)|0);
      var $shared=$aux;
      var $10=HEAP32[(($shared)>>2)];
      _str_decref($8, $10);
      label = 7; break;
    case 6: 
      var $11=$mrb_addr;
      var $12=$s1_addr;
      var $ptr=(($12+20)|0);
      var $13=HEAP32[(($ptr)>>2)];
      _mrb_free($11, $13);
      label = 7; break;
    case 7: 
      var $14=$s2_addr;
      var $ptr5=(($14+20)|0);
      var $15=HEAP32[(($ptr5)>>2)];
      var $16=$s1_addr;
      var $ptr6=(($16+20)|0);
      HEAP32[(($ptr6)>>2)]=$15;
      var $17=$s2_addr;
      var $len=(($17+12)|0);
      var $18=HEAP32[(($len)>>2)];
      var $19=$s1_addr;
      var $len7=(($19+12)|0);
      HEAP32[(($len7)>>2)]=$18;
      var $20=$s2_addr;
      var $aux8=(($20+16)|0);
      var $shared9=$aux8;
      var $21=HEAP32[(($shared9)>>2)];
      var $22=$s1_addr;
      var $aux10=(($22+16)|0);
      var $shared11=$aux10;
      HEAP32[(($shared11)>>2)]=$21;
      var $23=$s1_addr;
      var $24=$23;
      var $25=HEAP32[(($24)>>2)];
      var $26=$25 >>> 11;
      var $bf_clear12=$26 & 2097151;
      var $or=$bf_clear12 | 1;
      var $bf_value=$or & 2097151;
      var $27=$23;
      var $28=$bf_value & 2097151;
      var $29=$28 << 11;
      var $30=HEAP32[(($27)>>2)];
      var $31=$30 & 2047;
      var $32=$31 | $29;
      HEAP32[(($27)>>2)]=$32;
      var $33=$s1_addr;
      var $aux13=(($33+16)|0);
      var $shared14=$aux13;
      var $34=HEAP32[(($shared14)>>2)];
      var $refcnt=(($34+4)|0);
      var $35=HEAP32[(($refcnt)>>2)];
      var $inc=((($35)+(1))|0);
      HEAP32[(($refcnt)>>2)]=$inc;
      label = 15; break;
    case 8: 
      var $36=$s2_addr;
      var $len16=(($36+12)|0);
      var $37=HEAP32[(($len16)>>2)];
      var $cmp=(($37)|(0)) > 10;
      if ($cmp) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $38=$mrb_addr;
      var $39=$s2_addr;
      _str_make_shared($38, $39);
      label = 4; break;
    case 10: 
      var $40=$s1_addr;
      var $41=$40;
      var $42=HEAP32[(($41)>>2)];
      var $43=$42 >>> 11;
      var $bf_clear19=$43 & 2097151;
      var $and20=$bf_clear19 & 1;
      var $tobool21=(($and20)|(0))!=0;
      if ($tobool21) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $44=$mrb_addr;
      var $45=$s1_addr;
      var $aux23=(($45+16)|0);
      var $shared24=$aux23;
      var $46=HEAP32[(($shared24)>>2)];
      _str_decref($44, $46);
      var $47=$s1_addr;
      var $48=$47;
      var $49=HEAP32[(($48)>>2)];
      var $50=$49 >>> 11;
      var $bf_clear25=$50 & 2097151;
      var $and26=$bf_clear25 & -2;
      var $bf_value27=$and26 & 2097151;
      var $51=$47;
      var $52=$bf_value27 & 2097151;
      var $53=$52 << 11;
      var $54=HEAP32[(($51)>>2)];
      var $55=$54 & 2047;
      var $56=$55 | $53;
      HEAP32[(($51)>>2)]=$56;
      var $57=$mrb_addr;
      var $58=$s2_addr;
      var $len28=(($58+12)|0);
      var $59=HEAP32[(($len28)>>2)];
      var $add=((($59)+(1))|0);
      var $call=_mrb_malloc($57, $add);
      var $60=$s1_addr;
      var $ptr29=(($60+20)|0);
      HEAP32[(($ptr29)>>2)]=$call;
      label = 13; break;
    case 12: 
      var $61=$mrb_addr;
      var $62=$s1_addr;
      var $ptr31=(($62+20)|0);
      var $63=HEAP32[(($ptr31)>>2)];
      var $64=$s2_addr;
      var $len32=(($64+12)|0);
      var $65=HEAP32[(($len32)>>2)];
      var $add33=((($65)+(1))|0);
      var $call34=_mrb_realloc($61, $63, $add33);
      var $66=$s1_addr;
      var $ptr35=(($66+20)|0);
      HEAP32[(($ptr35)>>2)]=$call34;
      label = 13; break;
    case 13: 
      var $67=$s1_addr;
      var $ptr37=(($67+20)|0);
      var $68=HEAP32[(($ptr37)>>2)];
      var $69=$s2_addr;
      var $ptr38=(($69+20)|0);
      var $70=HEAP32[(($ptr38)>>2)];
      var $71=$s2_addr;
      var $len39=(($71+12)|0);
      var $72=HEAP32[(($len39)>>2)];
      assert($72 % 1 === 0);_memcpy($68, $70, $72);
      var $73=$s2_addr;
      var $len40=(($73+12)|0);
      var $74=HEAP32[(($len40)>>2)];
      var $75=$s1_addr;
      var $ptr41=(($75+20)|0);
      var $76=HEAP32[(($ptr41)>>2)];
      var $arrayidx=(($76+$74)|0);
      HEAP8[($arrayidx)]=0;
      var $77=$s2_addr;
      var $len42=(($77+12)|0);
      var $78=HEAP32[(($len42)>>2)];
      var $79=$s1_addr;
      var $len43=(($79+12)|0);
      HEAP32[(($len43)>>2)]=$78;
      var $80=$s2_addr;
      var $len44=(($80+12)|0);
      var $81=HEAP32[(($len44)>>2)];
      var $82=$s1_addr;
      var $aux45=(($82+16)|0);
      var $capa=$aux45;
      HEAP32[(($capa)>>2)]=$81;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $83=$s1_addr;
      var $84=$83;
      _mrb_obj_value44($agg_result, $84);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_index($mrb, $str, $sub, $offset) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $sub; $sub = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($sub)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sub)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sub)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $offset_addr;
      var $pos;
      var $s;
      var $sptr;
      var $len;
      var $slen;
      $mrb_addr=$mrb;
      $offset_addr=$offset;
      var $value=(($str)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $len1=(($1+12)|0);
      var $2=HEAP32[(($len1)>>2)];
      $len=$2;
      var $value2=(($sub)|0);
      var $p3=$value2;
      var $3=HEAP32[(($p3)>>2)];
      var $4=$3;
      var $len4=(($4+12)|0);
      var $5=HEAP32[(($len4)>>2)];
      $slen=$5;
      var $6=$offset_addr;
      var $cmp=(($6)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $7=$len;
      var $8=$offset_addr;
      var $add=((($8)+($7))|0);
      $offset_addr=$add;
      var $9=$offset_addr;
      var $cmp5=(($9)|(0)) < 0;
      if ($cmp5) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $retval=-1;
      label = 15; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $10=$len;
      var $11=$offset_addr;
      var $sub8=((($10)-($11))|0);
      var $12=$slen;
      var $cmp9=(($sub8)|(0)) < (($12)|(0));
      if ($cmp9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=-1;
      label = 15; break;
    case 8: 
      var $value12=(($str)|0);
      var $p13=$value12;
      var $13=HEAP32[(($p13)>>2)];
      var $14=$13;
      var $ptr=(($14+20)|0);
      var $15=HEAP32[(($ptr)>>2)];
      $s=$15;
      var $16=$offset_addr;
      var $tobool=(($16)|(0))!=0;
      if ($tobool) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $17=$offset_addr;
      var $18=$s;
      var $add_ptr=(($18+$17)|0);
      $s=$add_ptr;
      label = 10; break;
    case 10: 
      var $19=$slen;
      var $cmp16=(($19)|(0))==0;
      if ($cmp16) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $20=$offset_addr;
      $retval=$20;
      label = 15; break;
    case 12: 
      var $value19=(($sub)|0);
      var $p20=$value19;
      var $21=HEAP32[(($p20)>>2)];
      var $22=$21;
      var $ptr21=(($22+20)|0);
      var $23=HEAP32[(($ptr21)>>2)];
      $sptr=$23;
      var $value22=(($sub)|0);
      var $p23=$value22;
      var $24=HEAP32[(($p23)>>2)];
      var $25=$24;
      var $len24=(($25+12)|0);
      var $26=HEAP32[(($len24)>>2)];
      $slen=$26;
      var $value25=(($str)|0);
      var $p26=$value25;
      var $27=HEAP32[(($p26)>>2)];
      var $28=$27;
      var $len27=(($28+12)|0);
      var $29=HEAP32[(($len27)>>2)];
      var $30=$offset_addr;
      var $sub28=((($29)-($30))|0);
      $len=$sub28;
      var $31=$sptr;
      var $32=$slen;
      var $33=$s;
      var $34=$len;
      var $call=_mrb_memsearch($31, $32, $33, $34);
      $pos=$call;
      var $35=$pos;
      var $cmp29=(($35)|(0)) < 0;
      if ($cmp29) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $36=$pos;
      $retval=$36;
      label = 15; break;
    case 14: 
      var $37=$pos;
      var $38=$offset_addr;
      var $add32=((($37)+($38))|0);
      $retval=$add32;
      label = 15; break;
    case 15: 
      var $39=$retval;
      STACKTOP = __stackBase__;
      return $39;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $boolean_addr;
      var $v=__stackBase__;
      $boolean_addr=$boolean;
      label = 3; break;
    case 3: 
      var $0=$boolean_addr;
      var $conv=(($0)&(255));
      var $tobool=(($conv)|(0))!=0;
      var $cond=$tobool ? 2 : 0;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$cond;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_aref($agg_result, $mrb, $str, $indx) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 44)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $indx; $indx = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($indx)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($indx)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($indx)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $idx;
      var $tmp=__stackBase__;
      var $beg=(__stackBase__)+(12);
      var $len14=(__stackBase__)+(16);
      var $tmp16=(__stackBase__)+(20);
      var $tmp23=(__stackBase__)+(32);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      _regexp_check($0, $indx);
      var $tt=(($indx+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      if ((($1)|(0))==3) {
        label = 3; break;
      }
      else if ((($1)|(0))==16) {
        label = 9; break;
      }
      else if ((($1)|(0))==17) {
        label = 12; break;
      }
      else {
      label = 15; break;
      }
    case 3: 
      var $value=(($indx)|0);
      var $i=$value;
      var $2=HEAP32[(($i)>>2)];
      $idx=$2;
      label = 4; break;
    case 4: 
      var $3=$mrb_addr;
      var $4=$idx;
      _mrb_str_substr($tmp, $3, $str, $4, 1);
      var $5=$str;
      var $6=$tmp;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      var $tt1=(($str+8)|0);
      var $7=HEAP32[(($tt1)>>2)];
      var $cmp=(($7)|(0))==0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $value2=(($str)|0);
      var $i3=$value2;
      var $8=HEAP32[(($i3)>>2)];
      var $tobool=(($8)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $value5=(($str)|0);
      var $p=$value5;
      var $9=HEAP32[(($p)>>2)];
      var $10=$9;
      var $len=(($10+12)|0);
      var $11=HEAP32[(($len)>>2)];
      var $cmp6=(($11)|(0))==0;
      if ($cmp6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _mrb_nil_value48($agg_result);
      label = 16; break;
    case 8: 
      var $12=$agg_result;
      var $13=$str;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      label = 16; break;
    case 9: 
      var $14=$mrb_addr;
      var $call=_mrb_str_index($14, $str, $indx, 0);
      var $cmp8=(($call)|(0))!=-1;
      if ($cmp8) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $15=$mrb_addr;
      _mrb_str_dup($agg_result, $15, $indx);
      label = 16; break;
    case 11: 
      _mrb_nil_value48($agg_result);
      label = 16; break;
    case 12: 
      var $value17=(($str)|0);
      var $p18=$value17;
      var $16=HEAP32[(($p18)>>2)];
      var $17=$16;
      var $len19=(($17+12)|0);
      var $18=HEAP32[(($len19)>>2)];
      HEAP32[(($len14)>>2)]=$18;
      var $19=$mrb_addr;
      var $20=HEAP32[(($len14)>>2)];
      var $call20=_mrb_range_beg_len($19, $indx, $beg, $len14, $20);
      var $tobool21=(($call20)|(0))!=0;
      if ($tobool21) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $21=$mrb_addr;
      var $22=HEAP32[(($beg)>>2)];
      var $23=HEAP32[(($len14)>>2)];
      _mrb_str_subseq($tmp23, $21, $str, $22, $23);
      var $24=$tmp16;
      var $25=$tmp23;
      assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
      var $26=$agg_result;
      var $27=$tmp16;
      assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
      label = 16; break;
    case 14: 
      _mrb_nil_value48($agg_result);
      label = 16; break;
    case 15: 
      var $value24=(($indx)|0);
      var $i25=$value24;
      var $28=HEAP32[(($i25)>>2)];
      $idx=$28;
      label = 4; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_alloc_n2s($h) {
  var label = 0;
  var $h_addr;
  var $sz;
  $h_addr=$h;
  var $0=$h_addr;
  var $n_buckets=(($0)|0);
  var $1=HEAP32[(($n_buckets)>>2)];
  $sz=$1;
  var $2=$h_addr;
  var $n_occupied=(($2+8)|0);
  HEAP32[(($n_occupied)>>2)]=0;
  var $3=$h_addr;
  var $size=(($3+4)|0);
  HEAP32[(($size)>>2)]=0;
  var $4=$sz;
  var $shr=$4 >>> 2;
  var $5=$sz;
  var $shr1=$5 >>> 1;
  var $or=$shr | $shr1;
  var $6=$h_addr;
  var $upper_bound=(($6+12)|0);
  HEAP32[(($upper_bound)>>2)]=$or;
  var $7=$h_addr;
  var $mrb=(($7+40)|0);
  var $8=HEAP32[(($mrb)>>2)];
  var $9=$sz;
  var $mul=$9;
  var $div=Math.floor(((($mul)>>>(0)))/(4));
  var $call=_mrb_malloc($8, $div);
  var $10=$h_addr;
  var $e_flags=(($10+16)|0);
  HEAP32[(($e_flags)>>2)]=$call;
  var $11=$h_addr;
  var $e_flags2=(($11+16)|0);
  var $12=HEAP32[(($e_flags2)>>2)];
  var $13=$sz;
  var $div3=Math.floor(((($13)>>>(0)))/(8));
  var $add_ptr=(($12+$div3)|0);
  var $14=$h_addr;
  var $d_flags=(($14+20)|0);
  HEAP32[(($d_flags)>>2)]=$add_ptr;
  var $15=$h_addr;
  var $e_flags4=(($15+16)|0);
  var $16=HEAP32[(($e_flags4)>>2)];
  var $17=$sz;
  var $div5=Math.floor(((($17)>>>(0)))/(8));
  _kh_fill_flags($16, -1, $div5);
  var $18=$h_addr;
  var $d_flags6=(($18+20)|0);
  var $19=HEAP32[(($d_flags6)>>2)];
  var $20=$sz;
  var $div7=Math.floor(((($20)>>>(0)))/(8));
  _kh_fill_flags($19, 0, $div7);
  var $21=$h_addr;
  var $mrb8=(($21+40)|0);
  var $22=HEAP32[(($mrb8)>>2)];
  var $23=$sz;
  var $mul9=($23<<3);
  var $call10=_mrb_malloc($22, $mul9);
  var $24=$call10;
  var $25=$h_addr;
  var $keys=(($25+24)|0);
  HEAP32[(($keys)>>2)]=$24;
  var $26=$h_addr;
  var $mrb11=(($26+40)|0);
  var $27=HEAP32[(($mrb11)>>2)];
  var $28=$sz;
  var $mul12=($28<<1);
  var $call13=_mrb_malloc($27, $mul12);
  var $29=$call13;
  var $30=$h_addr;
  var $vals=(($30+28)|0);
  HEAP32[(($vals)>>2)]=$29;
  var $31=$sz;
  var $sub=((($31)-(1))|0);
  var $32=$h_addr;
  var $mask=(($32+32)|0);
  HEAP32[(($mask)>>2)]=$sub;
  var $33=$sz;
  var $div14=Math.floor(((($33)>>>(0)))/(2));
  var $sub15=((($div14)-(1))|0);
  var $34=$h_addr;
  var $inc=(($34+36)|0);
  HEAP32[(($inc)>>2)]=$sub15;
  return;
}
function _kh_fill_flags($p, $c, $len) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $c_addr;
      var $len_addr;
      $p_addr=$p;
      $c_addr=$c;
      $len_addr=$len;
      label = 3; break;
    case 3: 
      var $0=$len_addr;
      var $dec=((($0)-(1))|0);
      $len_addr=$dec;
      var $cmp=(($0)>>>(0)) > 0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $1=$c_addr;
      var $2=$p_addr;
      var $incdec_ptr=(($2+1)|0);
      $p_addr=$incdec_ptr;
      HEAP8[($2)]=$1;
      label = 3; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _sym_hash_func($mrb, $s_0, $s_1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $s=__stackBase__;
      var $h;
      var $i;
      var $p;
      $mrb_addr=$mrb;
      var $len=(($s)|0);
      HEAP32[(($len)>>2)]=$s_0;
      var $name=(($s+4)|0);
      HEAP32[(($name)>>2)]=$s_1;
      $h=0;
      var $name1=(($s+4)|0);
      var $0=HEAP32[(($name1)>>2)];
      $p=$0;
      $i=0;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $len2=(($s)|0);
      var $2=HEAP32[(($len2)>>2)];
      var $cmp=(($1)>>>(0)) < (($2)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $3=$h;
      var $shl=$3 << 5;
      var $4=$h;
      var $sub=((($shl)-($4))|0);
      var $5=$p;
      var $incdec_ptr=(($5+1)|0);
      $p=$incdec_ptr;
      var $6=HEAP8[($5)];
      var $conv=(($6 << 24) >> 24);
      var $add=((($sub)+($conv))|0);
      $h=$add;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $inc=((($7)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $8=$h;
      STACKTOP = __stackBase__;
      return $8;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_init_n2s_size($mrb, $size) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $size_addr;
      var $h;
      $mrb_addr=$mrb;
      $size_addr=$size;
      var $0=$mrb_addr;
      var $call=_mrb_calloc($0, 1, 44);
      var $1=$call;
      $h=$1;
      var $2=$size_addr;
      var $cmp=(($2)>>>(0)) < 8;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $size_addr=8;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $3=$size_addr;
      var $dec=((($3)-(1))|0);
      $size_addr=$dec;
      var $4=$size_addr;
      var $shr=$4 >>> 1;
      var $5=$size_addr;
      var $or=$5 | $shr;
      $size_addr=$or;
      var $6=$size_addr;
      var $shr1=$6 >>> 2;
      var $7=$size_addr;
      var $or2=$7 | $shr1;
      $size_addr=$or2;
      var $8=$size_addr;
      var $shr3=$8 >>> 4;
      var $9=$size_addr;
      var $or4=$9 | $shr3;
      $size_addr=$or4;
      var $10=$size_addr;
      var $shr5=$10 >>> 8;
      var $11=$size_addr;
      var $or6=$11 | $shr5;
      $size_addr=$or6;
      var $12=$size_addr;
      var $shr7=$12 >>> 16;
      var $13=$size_addr;
      var $or8=$13 | $shr7;
      $size_addr=$or8;
      var $14=$size_addr;
      var $inc=((($14)+(1))|0);
      $size_addr=$inc;
      label = 6; break;
    case 6: 
      var $15=$size_addr;
      var $16=$h;
      var $n_buckets=(($16)|0);
      HEAP32[(($n_buckets)>>2)]=$15;
      var $17=$mrb_addr;
      var $18=$h;
      var $mrb9=(($18+40)|0);
      HEAP32[(($mrb9)>>2)]=$17;
      var $19=$h;
      _kh_alloc_n2s($19);
      var $20=$h;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_init_n2s($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_kh_init_n2s_size($0, 32);
  return $call;
}
function _kh_destroy_n2s($h) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $h_addr;
      $h_addr=$h;
      var $0=$h_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$h_addr;
      var $mrb=(($1+40)|0);
      var $2=HEAP32[(($mrb)>>2)];
      var $3=$h_addr;
      var $keys=(($3+24)|0);
      var $4=HEAP32[(($keys)>>2)];
      var $5=$4;
      _mrb_free($2, $5);
      var $6=$h_addr;
      var $mrb1=(($6+40)|0);
      var $7=HEAP32[(($mrb1)>>2)];
      var $8=$h_addr;
      var $vals=(($8+28)|0);
      var $9=HEAP32[(($vals)>>2)];
      var $10=$9;
      _mrb_free($7, $10);
      var $11=$h_addr;
      var $mrb2=(($11+40)|0);
      var $12=HEAP32[(($mrb2)>>2)];
      var $13=$h_addr;
      var $e_flags=(($13+16)|0);
      var $14=HEAP32[(($e_flags)>>2)];
      _mrb_free($12, $14);
      var $15=$h_addr;
      var $mrb3=(($15+40)|0);
      var $16=HEAP32[(($mrb3)>>2)];
      var $17=$h_addr;
      var $18=$17;
      _mrb_free($16, $18);
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_get_n2s($h, $key_0, $key_1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $h_addr;
      var $key=__stackBase__;
      var $k;
      $h_addr=$h;
      var $len=(($key)|0);
      HEAP32[(($len)>>2)]=$key_0;
      var $name=(($key+4)|0);
      HEAP32[(($name)>>2)]=$key_1;
      var $0=$h_addr;
      var $mrb=(($0+40)|0);
      var $1=HEAP32[(($mrb)>>2)];
      var $len1=(($key)|0);
      var $2=HEAP32[(($len1)>>2)];
      var $name2=(($key+4)|0);
      var $3=HEAP32[(($name2)>>2)];
      var $call=_sym_hash_func($1, $2, $3);
      var $4=$h_addr;
      var $mask=(($4+32)|0);
      var $5=HEAP32[(($mask)>>2)];
      var $and=$call & $5;
      $k=$and;
      label = 3; break;
    case 3: 
      var $6=$k;
      var $div=Math.floor(((($6)>>>(0)))/(8));
      var $7=$h_addr;
      var $e_flags=(($7+16)|0);
      var $8=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($8+$div)|0);
      var $9=HEAP8[($arrayidx)];
      var $conv=(($9)&(255));
      var $10=$k;
      var $rem=((($10)>>>(0)))%(8);
      var $arrayidx3=((114504+$rem)|0);
      var $11=HEAP8[($arrayidx3)];
      var $conv4=(($11)&(255));
      var $and5=$conv & $conv4;
      var $tobool=(($and5)|(0))!=0;
      var $lnot=$tobool ^ 1;
      if ($lnot) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $12=$k;
      var $div6=Math.floor(((($12)>>>(0)))/(8));
      var $13=$h_addr;
      var $d_flags=(($13+20)|0);
      var $14=HEAP32[(($d_flags)>>2)];
      var $arrayidx7=(($14+$div6)|0);
      var $15=HEAP8[($arrayidx7)];
      var $conv8=(($15)&(255));
      var $16=$k;
      var $rem9=((($16)>>>(0)))%(8);
      var $arrayidx10=((114504+$rem9)|0);
      var $17=HEAP8[($arrayidx10)];
      var $conv11=(($17)&(255));
      var $and12=$conv8 & $conv11;
      var $tobool13=(($and12)|(0))!=0;
      if ($tobool13) { label = 9; break; } else { label = 5; break; }
    case 5: 
      var $18=$k;
      var $19=$h_addr;
      var $keys=(($19+24)|0);
      var $20=HEAP32[(($keys)>>2)];
      var $arrayidx14=(($20+($18<<3))|0);
      var $len15=(($arrayidx14)|0);
      var $21=HEAP32[(($len15)>>2)];
      var $len16=(($key)|0);
      var $22=HEAP32[(($len16)>>2)];
      var $cmp=(($21)|(0))==(($22)|(0));
      if ($cmp) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $23=$k;
      var $24=$h_addr;
      var $keys18=(($24+24)|0);
      var $25=HEAP32[(($keys18)>>2)];
      var $arrayidx19=(($25+($23<<3))|0);
      var $name20=(($arrayidx19+4)|0);
      var $26=HEAP32[(($name20)>>2)];
      var $name21=(($key+4)|0);
      var $27=HEAP32[(($name21)>>2)];
      var $28=$k;
      var $29=$h_addr;
      var $keys22=(($29+24)|0);
      var $30=HEAP32[(($keys22)>>2)];
      var $arrayidx23=(($30+($28<<3))|0);
      var $len24=(($arrayidx23)|0);
      var $31=HEAP32[(($len24)>>2)];
      var $call25=_memcmp($26, $27, $31);
      var $cmp26=(($call25)|(0))==0;
      if ($cmp26) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $32=$k;
      $retval=$32;
      label = 11; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $33=$k;
      var $34=$h_addr;
      var $inc=(($34+36)|0);
      var $35=HEAP32[(($inc)>>2)];
      var $add=((($33)+($35))|0);
      var $36=$h_addr;
      var $mask30=(($36+32)|0);
      var $37=HEAP32[(($mask30)>>2)];
      var $and31=$add & $37;
      $k=$and31;
      label = 3; break;
    case 10: 
      var $38=$h_addr;
      var $n_buckets=(($38)|0);
      var $39=HEAP32[(($n_buckets)>>2)];
      $retval=$39;
      label = 11; break;
    case 11: 
      var $40=$retval;
      STACKTOP = __stackBase__;
      return $40;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_resize_n2s($h, $new_n_buckets) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $h_addr;
      var $new_n_buckets_addr;
      var $old_e_flags;
      var $old_keys;
      var $old_vals;
      var $old_n_buckets;
      var $i;
      var $k;
      $h_addr=$h;
      $new_n_buckets_addr=$new_n_buckets;
      var $0=$new_n_buckets_addr;
      var $cmp=(($0)>>>(0)) < 8;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $new_n_buckets_addr=8;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $1=$new_n_buckets_addr;
      var $dec=((($1)-(1))|0);
      $new_n_buckets_addr=$dec;
      var $2=$new_n_buckets_addr;
      var $shr=$2 >>> 1;
      var $3=$new_n_buckets_addr;
      var $or=$3 | $shr;
      $new_n_buckets_addr=$or;
      var $4=$new_n_buckets_addr;
      var $shr1=$4 >>> 2;
      var $5=$new_n_buckets_addr;
      var $or2=$5 | $shr1;
      $new_n_buckets_addr=$or2;
      var $6=$new_n_buckets_addr;
      var $shr3=$6 >>> 4;
      var $7=$new_n_buckets_addr;
      var $or4=$7 | $shr3;
      $new_n_buckets_addr=$or4;
      var $8=$new_n_buckets_addr;
      var $shr5=$8 >>> 8;
      var $9=$new_n_buckets_addr;
      var $or6=$9 | $shr5;
      $new_n_buckets_addr=$or6;
      var $10=$new_n_buckets_addr;
      var $shr7=$10 >>> 16;
      var $11=$new_n_buckets_addr;
      var $or8=$11 | $shr7;
      $new_n_buckets_addr=$or8;
      var $12=$new_n_buckets_addr;
      var $inc=((($12)+(1))|0);
      $new_n_buckets_addr=$inc;
      label = 6; break;
    case 6: 
      var $13=$h_addr;
      var $e_flags=(($13+16)|0);
      var $14=HEAP32[(($e_flags)>>2)];
      $old_e_flags=$14;
      var $15=$h_addr;
      var $keys=(($15+24)|0);
      var $16=HEAP32[(($keys)>>2)];
      $old_keys=$16;
      var $17=$h_addr;
      var $vals=(($17+28)|0);
      var $18=HEAP32[(($vals)>>2)];
      $old_vals=$18;
      var $19=$h_addr;
      var $n_buckets=(($19)|0);
      var $20=HEAP32[(($n_buckets)>>2)];
      $old_n_buckets=$20;
      var $21=$new_n_buckets_addr;
      var $22=$h_addr;
      var $n_buckets9=(($22)|0);
      HEAP32[(($n_buckets9)>>2)]=$21;
      var $23=$h_addr;
      _kh_alloc_n2s($23);
      $i=0;
      label = 7; break;
    case 7: 
      var $24=$i;
      var $25=$old_n_buckets;
      var $cmp10=(($24)>>>(0)) < (($25)>>>(0));
      if ($cmp10) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $26=$i;
      var $div=Math.floor(((($26)>>>(0)))/(8));
      var $27=$old_e_flags;
      var $arrayidx=(($27+$div)|0);
      var $28=HEAP8[($arrayidx)];
      var $conv=(($28)&(255));
      var $29=$i;
      var $rem=((($29)>>>(0)))%(8);
      var $arrayidx11=((114504+$rem)|0);
      var $30=HEAP8[($arrayidx11)];
      var $conv12=(($30)&(255));
      var $and=$conv & $conv12;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $31=$h_addr;
      var $32=$i;
      var $33=$old_keys;
      var $arrayidx14=(($33+($32<<3))|0);
      var $len=(($arrayidx14)|0);
      var $34=HEAP32[(($len)>>2)];
      var $name=(($arrayidx14+4)|0);
      var $35=HEAP32[(($name)>>2)];
      var $call=_kh_put_n2s($31, $34, $35);
      $k=$call;
      var $36=$i;
      var $37=$old_vals;
      var $arrayidx15=(($37+($36<<1))|0);
      var $38=HEAP16[(($arrayidx15)>>1)];
      var $39=$k;
      var $40=$h_addr;
      var $vals16=(($40+28)|0);
      var $41=HEAP32[(($vals16)>>2)];
      var $arrayidx17=(($41+($39<<1))|0);
      HEAP16[(($arrayidx17)>>1)]=$38;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $42=$i;
      var $inc19=((($42)+(1))|0);
      $i=$inc19;
      label = 7; break;
    case 12: 
      var $43=$h_addr;
      var $mrb=(($43+40)|0);
      var $44=HEAP32[(($mrb)>>2)];
      var $45=$old_e_flags;
      _mrb_free($44, $45);
      var $46=$h_addr;
      var $mrb20=(($46+40)|0);
      var $47=HEAP32[(($mrb20)>>2)];
      var $48=$old_keys;
      var $49=$48;
      _mrb_free($47, $49);
      var $50=$h_addr;
      var $mrb21=(($50+40)|0);
      var $51=HEAP32[(($mrb21)>>2)];
      var $52=$old_vals;
      var $53=$52;
      _mrb_free($51, $53);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_put_n2s($h, $key_0, $key_1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $h_addr;
      var $key=__stackBase__;
      var $k;
      $h_addr=$h;
      var $len=(($key)|0);
      HEAP32[(($len)>>2)]=$key_0;
      var $name=(($key+4)|0);
      HEAP32[(($name)>>2)]=$key_1;
      var $0=$h_addr;
      var $n_occupied=(($0+8)|0);
      var $1=HEAP32[(($n_occupied)>>2)];
      var $2=$h_addr;
      var $upper_bound=(($2+12)|0);
      var $3=HEAP32[(($upper_bound)>>2)];
      var $cmp=(($1)>>>(0)) >= (($3)>>>(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$h_addr;
      var $5=$h_addr;
      var $n_buckets=(($5)|0);
      var $6=HEAP32[(($n_buckets)>>2)];
      var $mul=($6<<1);
      _kh_resize_n2s($4, $mul);
      label = 4; break;
    case 4: 
      var $7=$h_addr;
      var $mrb=(($7+40)|0);
      var $8=HEAP32[(($mrb)>>2)];
      var $len1=(($key)|0);
      var $9=HEAP32[(($len1)>>2)];
      var $name2=(($key+4)|0);
      var $10=HEAP32[(($name2)>>2)];
      var $call=_sym_hash_func($8, $9, $10);
      var $11=$h_addr;
      var $mask=(($11+32)|0);
      var $12=HEAP32[(($mask)>>2)];
      var $and=$call & $12;
      $k=$and;
      label = 5; break;
    case 5: 
      var $13=$k;
      var $div=Math.floor(((($13)>>>(0)))/(8));
      var $14=$h_addr;
      var $e_flags=(($14+16)|0);
      var $15=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($15+$div)|0);
      var $16=HEAP8[($arrayidx)];
      var $conv=(($16)&(255));
      var $17=$k;
      var $rem=((($17)>>>(0)))%(8);
      var $arrayidx3=((114504+$rem)|0);
      var $18=HEAP8[($arrayidx3)];
      var $conv4=(($18)&(255));
      var $and5=$conv & $conv4;
      var $tobool=(($and5)|(0))!=0;
      if ($tobool) { var $25 = 1;label = 7; break; } else { label = 6; break; }
    case 6: 
      var $19=$k;
      var $div6=Math.floor(((($19)>>>(0)))/(8));
      var $20=$h_addr;
      var $d_flags=(($20+20)|0);
      var $21=HEAP32[(($d_flags)>>2)];
      var $arrayidx7=(($21+$div6)|0);
      var $22=HEAP8[($arrayidx7)];
      var $conv8=(($22)&(255));
      var $23=$k;
      var $rem9=((($23)>>>(0)))%(8);
      var $arrayidx10=((114504+$rem9)|0);
      var $24=HEAP8[($arrayidx10)];
      var $conv11=(($24)&(255));
      var $and12=$conv8 & $conv11;
      var $tobool13=(($and12)|(0))!=0;
      var $25 = $tobool13;label = 7; break;
    case 7: 
      var $25;
      var $lnot=$25 ^ 1;
      if ($lnot) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $26=$k;
      var $27=$h_addr;
      var $keys=(($27+24)|0);
      var $28=HEAP32[(($keys)>>2)];
      var $arrayidx14=(($28+($26<<3))|0);
      var $len15=(($arrayidx14)|0);
      var $29=HEAP32[(($len15)>>2)];
      var $len16=(($key)|0);
      var $30=HEAP32[(($len16)>>2)];
      var $cmp17=(($29)|(0))==(($30)|(0));
      if ($cmp17) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $31=$k;
      var $32=$h_addr;
      var $keys19=(($32+24)|0);
      var $33=HEAP32[(($keys19)>>2)];
      var $arrayidx20=(($33+($31<<3))|0);
      var $name21=(($arrayidx20+4)|0);
      var $34=HEAP32[(($name21)>>2)];
      var $name22=(($key+4)|0);
      var $35=HEAP32[(($name22)>>2)];
      var $36=$k;
      var $37=$h_addr;
      var $keys23=(($37+24)|0);
      var $38=HEAP32[(($keys23)>>2)];
      var $arrayidx24=(($38+($36<<3))|0);
      var $len25=(($arrayidx24)|0);
      var $39=HEAP32[(($len25)>>2)];
      var $call26=_memcmp($34, $35, $39);
      var $cmp27=(($call26)|(0))==0;
      if ($cmp27) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $40=$k;
      var $41=$h_addr;
      var $inc=(($41+36)|0);
      var $42=HEAP32[(($inc)>>2)];
      var $add=((($40)+($42))|0);
      var $43=$h_addr;
      var $mask31=(($43+32)|0);
      var $44=HEAP32[(($mask31)>>2)];
      var $and32=$add & $44;
      $k=$and32;
      label = 5; break;
    case 12: 
      var $45=$k;
      var $div33=Math.floor(((($45)>>>(0)))/(8));
      var $46=$h_addr;
      var $e_flags34=(($46+16)|0);
      var $47=HEAP32[(($e_flags34)>>2)];
      var $arrayidx35=(($47+$div33)|0);
      var $48=HEAP8[($arrayidx35)];
      var $conv36=(($48)&(255));
      var $49=$k;
      var $rem37=((($49)>>>(0)))%(8);
      var $arrayidx38=((114504+$rem37)|0);
      var $50=HEAP8[($arrayidx38)];
      var $conv39=(($50)&(255));
      var $and40=$conv36 & $conv39;
      var $tobool41=(($and40)|(0))!=0;
      if ($tobool41) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $51=$k;
      var $52=$h_addr;
      var $keys43=(($52+24)|0);
      var $53=HEAP32[(($keys43)>>2)];
      var $arrayidx44=(($53+($51<<3))|0);
      var $54=$arrayidx44;
      var $55=$key;
      assert(8 % 1 === 0);HEAP32[(($54)>>2)]=HEAP32[(($55)>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[((($55)+(4))>>2)];
      var $56=$k;
      var $rem45=((($56)>>>(0)))%(8);
      var $arrayidx46=((114504+$rem45)|0);
      var $57=HEAP8[($arrayidx46)];
      var $conv47=(($57)&(255));
      var $neg=$conv47 ^ -1;
      var $58=$k;
      var $div48=Math.floor(((($58)>>>(0)))/(8));
      var $59=$h_addr;
      var $e_flags49=(($59+16)|0);
      var $60=HEAP32[(($e_flags49)>>2)];
      var $arrayidx50=(($60+$div48)|0);
      var $61=HEAP8[($arrayidx50)];
      var $conv51=(($61)&(255));
      var $and52=$conv51 & $neg;
      var $conv53=(($and52) & 255);
      HEAP8[($arrayidx50)]=$conv53;
      var $62=$h_addr;
      var $size=(($62+4)|0);
      var $63=HEAP32[(($size)>>2)];
      var $inc54=((($63)+(1))|0);
      HEAP32[(($size)>>2)]=$inc54;
      var $64=$h_addr;
      var $n_occupied55=(($64+8)|0);
      var $65=HEAP32[(($n_occupied55)>>2)];
      var $inc56=((($65)+(1))|0);
      HEAP32[(($n_occupied55)>>2)]=$inc56;
      label = 17; break;
    case 14: 
      var $66=$k;
      var $div57=Math.floor(((($66)>>>(0)))/(8));
      var $67=$h_addr;
      var $d_flags58=(($67+20)|0);
      var $68=HEAP32[(($d_flags58)>>2)];
      var $arrayidx59=(($68+$div57)|0);
      var $69=HEAP8[($arrayidx59)];
      var $conv60=(($69)&(255));
      var $70=$k;
      var $rem61=((($70)>>>(0)))%(8);
      var $arrayidx62=((114504+$rem61)|0);
      var $71=HEAP8[($arrayidx62)];
      var $conv63=(($71)&(255));
      var $and64=$conv60 & $conv63;
      var $tobool65=(($and64)|(0))!=0;
      if ($tobool65) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $72=$k;
      var $73=$h_addr;
      var $keys67=(($73+24)|0);
      var $74=HEAP32[(($keys67)>>2)];
      var $arrayidx68=(($74+($72<<3))|0);
      var $75=$arrayidx68;
      var $76=$key;
      assert(8 % 1 === 0);HEAP32[(($75)>>2)]=HEAP32[(($76)>>2)];HEAP32[((($75)+(4))>>2)]=HEAP32[((($76)+(4))>>2)];
      var $77=$k;
      var $rem69=((($77)>>>(0)))%(8);
      var $arrayidx70=((114504+$rem69)|0);
      var $78=HEAP8[($arrayidx70)];
      var $conv71=(($78)&(255));
      var $neg72=$conv71 ^ -1;
      var $79=$k;
      var $div73=Math.floor(((($79)>>>(0)))/(8));
      var $80=$h_addr;
      var $d_flags74=(($80+20)|0);
      var $81=HEAP32[(($d_flags74)>>2)];
      var $arrayidx75=(($81+$div73)|0);
      var $82=HEAP8[($arrayidx75)];
      var $conv76=(($82)&(255));
      var $and77=$conv76 & $neg72;
      var $conv78=(($and77) & 255);
      HEAP8[($arrayidx75)]=$conv78;
      var $83=$h_addr;
      var $size79=(($83+4)|0);
      var $84=HEAP32[(($size79)>>2)];
      var $inc80=((($84)+(1))|0);
      HEAP32[(($size79)>>2)]=$inc80;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $85=$k;
      STACKTOP = __stackBase__;
      return $85;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern2($mrb, $name, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $name_addr;
      var $len_addr;
      var $h;
      var $sname=__stackBase__;
      var $k;
      var $sym;
      var $p;
      $mrb_addr=$mrb;
      $name_addr=$name;
      $len_addr=$len;
      var $0=$mrb_addr;
      var $name2sym=(($0+568)|0);
      var $1=HEAP32[(($name2sym)>>2)];
      $h=$1;
      var $2=$len_addr;
      var $len1=(($sname)|0);
      HEAP32[(($len1)>>2)]=$2;
      var $3=$name_addr;
      var $name2=(($sname+4)|0);
      HEAP32[(($name2)>>2)]=$3;
      var $4=$h;
      var $len3=(($sname)|0);
      var $5=HEAP32[(($len3)>>2)];
      var $name4=(($sname+4)|0);
      var $6=HEAP32[(($name4)>>2)];
      var $call=_kh_get_n2s($4, $5, $6);
      $k=$call;
      var $7=$k;
      var $8=$h;
      var $n_buckets=(($8)|0);
      var $9=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($7)|(0))!=(($9)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$k;
      var $11=$h;
      var $vals=(($11+28)|0);
      var $12=HEAP32[(($vals)>>2)];
      var $arrayidx=(($12+($10<<1))|0);
      var $13=HEAP16[(($arrayidx)>>1)];
      $retval=$13;
      label = 5; break;
    case 4: 
      var $14=$mrb_addr;
      var $symidx=(($14+564)|0);
      var $15=HEAP16[(($symidx)>>1)];
      var $inc=((($15)+(1))&65535);
      HEAP16[(($symidx)>>1)]=$inc;
      $sym=$inc;
      var $16=$mrb_addr;
      var $17=$len_addr;
      var $add=((($17)+(1))|0);
      var $call5=_mrb_malloc($16, $add);
      $p=$call5;
      var $18=$p;
      var $19=$name_addr;
      var $20=$len_addr;
      assert($20 % 1 === 0);_memcpy($18, $19, $20);
      var $21=$len_addr;
      var $22=$p;
      var $arrayidx6=(($22+$21)|0);
      HEAP8[($arrayidx6)]=0;
      var $23=$p;
      var $name7=(($sname+4)|0);
      HEAP32[(($name7)>>2)]=$23;
      var $24=$h;
      var $len8=(($sname)|0);
      var $25=HEAP32[(($len8)>>2)];
      var $name9=(($sname+4)|0);
      var $26=HEAP32[(($name9)>>2)];
      var $call10=_kh_put_n2s($24, $25, $26);
      $k=$call10;
      var $27=$sym;
      var $28=$k;
      var $29=$h;
      var $vals11=(($29+28)|0);
      var $30=HEAP32[(($vals11)>>2)];
      var $arrayidx12=(($30+($28<<1))|0);
      HEAP16[(($arrayidx12)>>1)]=$27;
      var $31=$sym;
      $retval=$31;
      label = 5; break;
    case 5: 
      var $32=$retval;
      STACKTOP = __stackBase__;
      return $32;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern_cstr($mrb, $name) {
  var label = 0;
  var $mrb_addr;
  var $name_addr;
  $mrb_addr=$mrb;
  $name_addr=$name;
  var $0=$mrb_addr;
  var $1=$name_addr;
  var $2=$name_addr;
  var $call=_strlen($2);
  var $call1=_mrb_intern2($0, $1, $call);
  return $call1;
}
function _mrb_intern_str($mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $value=(($str)|0);
  var $p=$value;
  var $1=HEAP32[(($p)>>2)];
  var $2=$1;
  var $ptr=(($2+20)|0);
  var $3=HEAP32[(($ptr)>>2)];
  var $value1=(($str)|0);
  var $p2=$value1;
  var $4=HEAP32[(($p2)>>2)];
  var $5=$4;
  var $len=(($5+12)|0);
  var $6=HEAP32[(($len)>>2)];
  var $call=_mrb_intern2($0, $3, $6);
  STACKTOP = __stackBase__;
  return $call;
}
function _mrb_check_intern($agg_result, $mrb, $name, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $name_addr;
      var $len_addr;
      var $h;
      var $sname=__stackBase__;
      var $k;
      $mrb_addr=$mrb;
      $name_addr=$name;
      $len_addr=$len;
      var $0=$mrb_addr;
      var $name2sym=(($0+568)|0);
      var $1=HEAP32[(($name2sym)>>2)];
      $h=$1;
      var $2=$len_addr;
      var $len1=(($sname)|0);
      HEAP32[(($len1)>>2)]=$2;
      var $3=$name_addr;
      var $name2=(($sname+4)|0);
      HEAP32[(($name2)>>2)]=$3;
      var $4=$h;
      var $len3=(($sname)|0);
      var $5=HEAP32[(($len3)>>2)];
      var $name4=(($sname+4)|0);
      var $6=HEAP32[(($name4)>>2)];
      var $call=_kh_get_n2s($4, $5, $6);
      $k=$call;
      var $7=$k;
      var $8=$h;
      var $n_buckets=(($8)|0);
      var $9=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($7)|(0))!=(($9)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$k;
      var $11=$h;
      var $vals=(($11+28)|0);
      var $12=HEAP32[(($vals)>>2)];
      var $arrayidx=(($12+($10<<1))|0);
      var $13=HEAP16[(($arrayidx)>>1)];
      _mrb_symbol_value90($agg_result, $13);
      label = 5; break;
    case 4: 
      _mrb_nil_value91($agg_result);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_symbol_value90($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=4;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $sym=$value;
      HEAP16[(($sym)>>1)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value91($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_check_intern_str($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $value=(($str)|0);
  var $p=$value;
  var $1=HEAP32[(($p)>>2)];
  var $2=$1;
  var $ptr=(($2+20)|0);
  var $3=HEAP32[(($ptr)>>2)];
  var $value1=(($str)|0);
  var $p2=$value1;
  var $4=HEAP32[(($p2)>>2)];
  var $5=$4;
  var $len=(($5+12)|0);
  var $6=HEAP32[(($len)>>2)];
  _mrb_check_intern($agg_result, $0, $3, $6);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_sym2name_len($mrb, $sym, $lenp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $sym_addr;
      var $lenp_addr;
      var $h;
      var $k;
      var $sname=__stackBase__;
      $mrb_addr=$mrb;
      $sym_addr=$sym;
      $lenp_addr=$lenp;
      var $0=$mrb_addr;
      var $name2sym=(($0+568)|0);
      var $1=HEAP32[(($name2sym)>>2)];
      $h=$1;
      $k=0;
      label = 3; break;
    case 3: 
      var $2=$k;
      var $3=$h;
      var $n_buckets=(($3)|0);
      var $4=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($2)|(0))!=(($4)|(0));
      if ($cmp) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $5=$k;
      var $div=Math.floor(((($5)>>>(0)))/(8));
      var $6=$h;
      var $e_flags=(($6+16)|0);
      var $7=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($7+$div)|0);
      var $8=HEAP8[($arrayidx)];
      var $conv=(($8)&(255));
      var $9=$k;
      var $rem=((($9)>>>(0)))%(8);
      var $arrayidx1=((114504+$rem)|0);
      var $10=HEAP8[($arrayidx1)];
      var $conv2=(($10)&(255));
      var $and=$conv & $conv2;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 9; break; } else { label = 5; break; }
    case 5: 
      var $11=$k;
      var $div3=Math.floor(((($11)>>>(0)))/(8));
      var $12=$h;
      var $d_flags=(($12+20)|0);
      var $13=HEAP32[(($d_flags)>>2)];
      var $arrayidx4=(($13+$div3)|0);
      var $14=HEAP8[($arrayidx4)];
      var $conv5=(($14)&(255));
      var $15=$k;
      var $rem6=((($15)>>>(0)))%(8);
      var $arrayidx7=((114504+$rem6)|0);
      var $16=HEAP8[($arrayidx7)];
      var $conv8=(($16)&(255));
      var $and9=$conv5 & $conv8;
      var $tobool10=(($and9)|(0))!=0;
      if ($tobool10) { label = 9; break; } else { label = 6; break; }
    case 6: 
      var $17=$k;
      var $18=$h;
      var $vals=(($18+28)|0);
      var $19=HEAP32[(($vals)>>2)];
      var $arrayidx11=(($19+($17<<1))|0);
      var $20=HEAP16[(($arrayidx11)>>1)];
      var $conv12=(($20 << 16) >> 16);
      var $21=$sym_addr;
      var $conv13=(($21 << 16) >> 16);
      var $cmp14=(($conv12)|(0))==(($conv13)|(0));
      if ($cmp14) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $22=$k;
      var $23=$h;
      var $keys=(($23+24)|0);
      var $24=HEAP32[(($keys)>>2)];
      var $arrayidx17=(($24+($22<<3))|0);
      var $25=$sname;
      var $26=$arrayidx17;
      assert(8 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];
      var $len=(($sname)|0);
      var $27=HEAP32[(($len)>>2)];
      var $28=$lenp_addr;
      HEAP32[(($28)>>2)]=$27;
      var $name=(($sname+4)|0);
      var $29=HEAP32[(($name)>>2)];
      $retval=$29;
      label = 12; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $30=$k;
      var $inc=((($30)+(1))|0);
      $k=$inc;
      label = 3; break;
    case 11: 
      var $31=$lenp_addr;
      HEAP32[(($31)>>2)]=0;
      $retval=0;
      label = 12; break;
    case 12: 
      var $32=$retval;
      STACKTOP = __stackBase__;
      return $32;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_free_symtbl($mrb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $h;
      var $k;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $name2sym=(($0+568)|0);
      var $1=HEAP32[(($name2sym)>>2)];
      $h=$1;
      $k=0;
      label = 3; break;
    case 3: 
      var $2=$k;
      var $3=$h;
      var $n_buckets=(($3)|0);
      var $4=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($2)|(0))!=(($4)|(0));
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $5=$k;
      var $div=Math.floor(((($5)>>>(0)))/(8));
      var $6=$h;
      var $e_flags=(($6+16)|0);
      var $7=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($7+$div)|0);
      var $8=HEAP8[($arrayidx)];
      var $conv=(($8)&(255));
      var $9=$k;
      var $rem=((($9)>>>(0)))%(8);
      var $arrayidx1=((114504+$rem)|0);
      var $10=HEAP8[($arrayidx1)];
      var $conv2=(($10)&(255));
      var $and=$conv & $conv2;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 5; break; }
    case 5: 
      var $11=$k;
      var $div3=Math.floor(((($11)>>>(0)))/(8));
      var $12=$h;
      var $d_flags=(($12+20)|0);
      var $13=HEAP32[(($d_flags)>>2)];
      var $arrayidx4=(($13+$div3)|0);
      var $14=HEAP8[($arrayidx4)];
      var $conv5=(($14)&(255));
      var $15=$k;
      var $rem6=((($15)>>>(0)))%(8);
      var $arrayidx7=((114504+$rem6)|0);
      var $16=HEAP8[($arrayidx7)];
      var $conv8=(($16)&(255));
      var $and9=$conv5 & $conv8;
      var $tobool10=(($and9)|(0))!=0;
      if ($tobool10) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $17=$mrb_addr;
      var $18=$k;
      var $19=$h;
      var $keys=(($19+24)|0);
      var $20=HEAP32[(($keys)>>2)];
      var $arrayidx11=(($20+($18<<3))|0);
      var $name=(($arrayidx11+4)|0);
      var $21=HEAP32[(($name)>>2)];
      _mrb_free($17, $21);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $22=$k;
      var $inc=((($22)+(1))|0);
      $k=$inc;
      label = 3; break;
    case 9: 
      var $23=$mrb_addr;
      var $name2sym12=(($23+568)|0);
      var $24=HEAP32[(($name2sym12)>>2)];
      _kh_destroy_n2s($24);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_symtbl($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_kh_init_n2s($0);
  var $1=$mrb_addr;
  var $name2sym=(($1+568)|0);
  HEAP32[(($name2sym)>>2)]=$call;
  return;
}
function _mrb_sym_to_s($agg_result, $mrb, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $sym; $sym = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($sym)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sym)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sym)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $id;
  var $p;
  var $len=__stackBase__;
  $mrb_addr=$mrb;
  var $value=(($sym)|0);
  var $sym1=$value;
  var $0=HEAP16[(($sym1)>>1)];
  $id=$0;
  var $1=$mrb_addr;
  var $2=$id;
  var $call=_mrb_sym2name_len($1, $2, $len);
  $p=$call;
  var $3=$mrb_addr;
  var $4=$p;
  var $5=HEAP32[(($len)>>2)];
  _mrb_str_new_static($agg_result, $3, $4, $5);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_sym2str($agg_result, $mrb, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $sym_addr;
      var $len=__stackBase__;
      var $name;
      var $str=(__stackBase__)+(4);
      var $tmp=(__stackBase__)+(16);
      $mrb_addr=$mrb;
      $sym_addr=$sym;
      var $0=$mrb_addr;
      var $1=$sym_addr;
      var $call=_mrb_sym2name_len($0, $1, $len);
      $name=$call;
      var $2=$name;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_undef_value($agg_result);
      label = 8; break;
    case 4: 
      var $3=$mrb_addr;
      var $4=$name;
      var $5=HEAP32[(($len)>>2)];
      _mrb_str_new_static($tmp, $3, $4, $5);
      var $6=$str;
      var $7=$tmp;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      var $8=$name;
      var $call1=_symname_p($8);
      var $tobool2=(($call1)|(0))!=0;
      if ($tobool2) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $9=$name;
      var $call3=_strlen($9);
      var $10=HEAP32[(($len)>>2)];
      var $cmp=(($call3)|(0))==(($10)|(0));
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $11=$agg_result;
      var $12=$str;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      label = 8; break;
    case 7: 
      var $13=$mrb_addr;
      _mrb_str_dump($agg_result, $13, $str);
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_undef_value($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=5;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _symname_p($name) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $name_addr;
      var $m;
      var $localid;
      $name_addr=$name;
      var $0=$name_addr;
      $m=$0;
      $localid=0;
      var $1=$m;
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=0;
      label = 69; break;
    case 4: 
      var $2=$m;
      var $3=HEAP8[($2)];
      var $conv=(($3 << 24) >> 24);
      if ((($conv)|(0))==0) {
        label = 5; break;
      }
      else if ((($conv)|(0))==36) {
        label = 6; break;
      }
      else if ((($conv)|(0))==64) {
        label = 9; break;
      }
      else if ((($conv)|(0))==60) {
        label = 12; break;
      }
      else if ((($conv)|(0))==62) {
        label = 19; break;
      }
      else if ((($conv)|(0))==61) {
        label = 23; break;
      }
      else if ((($conv)|(0))==42) {
        label = 30; break;
      }
      else if ((($conv)|(0))==33) {
        label = 33; break;
      }
      else if ((($conv)|(0))==43 | (($conv)|(0))==45) {
        label = 36; break;
      }
      else if ((($conv)|(0))==124) {
        label = 39; break;
      }
      else if ((($conv)|(0))==38) {
        label = 42; break;
      }
      else if ((($conv)|(0))==94 | (($conv)|(0))==47 | (($conv)|(0))==37 | (($conv)|(0))==126 | (($conv)|(0))==96) {
        label = 45; break;
      }
      else if ((($conv)|(0))==91) {
        label = 46; break;
      }
      else {
      label = 51; break;
      }
    case 5: 
      $retval=0;
      label = 69; break;
    case 6: 
      var $4=$m;
      var $incdec_ptr=(($4+1)|0);
      $m=$incdec_ptr;
      var $call=_is_special_global_name($incdec_ptr);
      var $tobool2=(($call)|(0))!=0;
      if ($tobool2) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=1;
      label = 69; break;
    case 8: 
      label = 52; break;
    case 9: 
      var $5=$m;
      var $incdec_ptr6=(($5+1)|0);
      $m=$incdec_ptr6;
      var $6=HEAP8[($incdec_ptr6)];
      var $conv7=(($6 << 24) >> 24);
      var $cmp=(($conv7)|(0))==64;
      if ($cmp) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $7=$m;
      var $incdec_ptr10=(($7+1)|0);
      $m=$incdec_ptr10;
      label = 11; break;
    case 11: 
      label = 52; break;
    case 12: 
      var $8=$m;
      var $incdec_ptr13=(($8+1)|0);
      $m=$incdec_ptr13;
      var $9=HEAP8[($incdec_ptr13)];
      var $conv14=(($9 << 24) >> 24);
      if ((($conv14)|(0))==60) {
        label = 13; break;
      }
      else if ((($conv14)|(0))==61) {
        label = 14; break;
      }
      else {
      label = 17; break;
      }
    case 13: 
      var $10=$m;
      var $incdec_ptr16=(($10+1)|0);
      $m=$incdec_ptr16;
      label = 18; break;
    case 14: 
      var $11=$m;
      var $incdec_ptr18=(($11+1)|0);
      $m=$incdec_ptr18;
      var $12=HEAP8[($incdec_ptr18)];
      var $conv19=(($12 << 24) >> 24);
      var $cmp20=(($conv19)|(0))==62;
      if ($cmp20) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $13=$m;
      var $incdec_ptr23=(($13+1)|0);
      $m=$incdec_ptr23;
      label = 16; break;
    case 16: 
      label = 18; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 68; break;
    case 19: 
      var $14=$m;
      var $incdec_ptr26=(($14+1)|0);
      $m=$incdec_ptr26;
      var $15=HEAP8[($incdec_ptr26)];
      var $conv27=(($15 << 24) >> 24);
      if ((($conv27)|(0))==62 | (($conv27)|(0))==61) {
        label = 20; break;
      }
      else {
      label = 21; break;
      }
    case 20: 
      var $16=$m;
      var $incdec_ptr29=(($16+1)|0);
      $m=$incdec_ptr29;
      label = 22; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 68; break;
    case 23: 
      var $17=$m;
      var $incdec_ptr33=(($17+1)|0);
      $m=$incdec_ptr33;
      var $18=HEAP8[($incdec_ptr33)];
      var $conv34=(($18 << 24) >> 24);
      if ((($conv34)|(0))==126) {
        label = 24; break;
      }
      else if ((($conv34)|(0))==61) {
        label = 25; break;
      }
      else {
      label = 28; break;
      }
    case 24: 
      var $19=$m;
      var $incdec_ptr36=(($19+1)|0);
      $m=$incdec_ptr36;
      label = 29; break;
    case 25: 
      var $20=$m;
      var $incdec_ptr38=(($20+1)|0);
      $m=$incdec_ptr38;
      var $21=HEAP8[($incdec_ptr38)];
      var $conv39=(($21 << 24) >> 24);
      var $cmp40=(($conv39)|(0))==61;
      if ($cmp40) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $22=$m;
      var $incdec_ptr43=(($22+1)|0);
      $m=$incdec_ptr43;
      label = 27; break;
    case 27: 
      label = 29; break;
    case 28: 
      $retval=0;
      label = 69; break;
    case 29: 
      label = 68; break;
    case 30: 
      var $23=$m;
      var $incdec_ptr48=(($23+1)|0);
      $m=$incdec_ptr48;
      var $24=HEAP8[($incdec_ptr48)];
      var $conv49=(($24 << 24) >> 24);
      var $cmp50=(($conv49)|(0))==42;
      if ($cmp50) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $25=$m;
      var $incdec_ptr53=(($25+1)|0);
      $m=$incdec_ptr53;
      label = 32; break;
    case 32: 
      label = 68; break;
    case 33: 
      var $26=$m;
      var $incdec_ptr56=(($26+1)|0);
      $m=$incdec_ptr56;
      var $27=HEAP8[($incdec_ptr56)];
      var $conv57=(($27 << 24) >> 24);
      var $cmp58=(($conv57)|(0))==61;
      if ($cmp58) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $28=$m;
      var $incdec_ptr61=(($28+1)|0);
      $m=$incdec_ptr61;
      label = 35; break;
    case 35: 
      label = 68; break;
    case 36: 
      var $29=$m;
      var $incdec_ptr64=(($29+1)|0);
      $m=$incdec_ptr64;
      var $30=HEAP8[($incdec_ptr64)];
      var $conv65=(($30 << 24) >> 24);
      var $cmp66=(($conv65)|(0))==64;
      if ($cmp66) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $31=$m;
      var $incdec_ptr69=(($31+1)|0);
      $m=$incdec_ptr69;
      label = 38; break;
    case 38: 
      label = 68; break;
    case 39: 
      var $32=$m;
      var $incdec_ptr72=(($32+1)|0);
      $m=$incdec_ptr72;
      var $33=HEAP8[($incdec_ptr72)];
      var $conv73=(($33 << 24) >> 24);
      var $cmp74=(($conv73)|(0))==124;
      if ($cmp74) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $34=$m;
      var $incdec_ptr77=(($34+1)|0);
      $m=$incdec_ptr77;
      label = 41; break;
    case 41: 
      label = 68; break;
    case 42: 
      var $35=$m;
      var $incdec_ptr80=(($35+1)|0);
      $m=$incdec_ptr80;
      var $36=HEAP8[($incdec_ptr80)];
      var $conv81=(($36 << 24) >> 24);
      var $cmp82=(($conv81)|(0))==38;
      if ($cmp82) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $37=$m;
      var $incdec_ptr85=(($37+1)|0);
      $m=$incdec_ptr85;
      label = 44; break;
    case 44: 
      label = 68; break;
    case 45: 
      var $38=$m;
      var $incdec_ptr88=(($38+1)|0);
      $m=$incdec_ptr88;
      label = 68; break;
    case 46: 
      var $39=$m;
      var $incdec_ptr90=(($39+1)|0);
      $m=$incdec_ptr90;
      var $40=HEAP8[($incdec_ptr90)];
      var $conv91=(($40 << 24) >> 24);
      var $cmp92=(($conv91)|(0))!=93;
      if ($cmp92) { label = 47; break; } else { label = 48; break; }
    case 47: 
      $retval=0;
      label = 69; break;
    case 48: 
      var $41=$m;
      var $incdec_ptr96=(($41+1)|0);
      $m=$incdec_ptr96;
      var $42=HEAP8[($incdec_ptr96)];
      var $conv97=(($42 << 24) >> 24);
      var $cmp98=(($conv97)|(0))==61;
      if ($cmp98) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $43=$m;
      var $incdec_ptr101=(($43+1)|0);
      $m=$incdec_ptr101;
      label = 50; break;
    case 50: 
      label = 68; break;
    case 51: 
      var $44=$m;
      var $45=HEAP8[($44)];
      var $conv104=(($45)&(255));
      var $call105=_isupper($conv104);
      var $tobool106=(($call105)|(0))!=0;
      var $lnot=$tobool106 ^ 1;
      var $lnot_ext=(($lnot)&(1));
      $localid=$lnot_ext;
      label = 52; break;
    case 52: 
      var $46=$m;
      var $47=HEAP8[($46)];
      var $conv107=(($47 << 24) >> 24);
      var $cmp108=(($conv107)|(0))!=95;
      if ($cmp108) { label = 53; break; } else { label = 55; break; }
    case 53: 
      var $48=$m;
      var $49=HEAP8[($48)];
      var $conv110=(($49)&(255));
      var $call111=_isalpha($conv110);
      var $tobool112=(($call111)|(0))!=0;
      if ($tobool112) { label = 55; break; } else { label = 54; break; }
    case 54: 
      $retval=0;
      label = 69; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $50=$m;
      var $51=HEAP8[($50)];
      var $conv115=(($51 << 24) >> 24);
      var $cmp116=(($conv115)|(0))!=-1;
      if ($cmp116) { label = 57; break; } else { var $57 = 0;label = 60; break; }
    case 57: 
      var $52=$m;
      var $53=HEAP8[($52)];
      var $conv118=(($53)&(255));
      var $call119=_isalnum($conv118);
      var $tobool120=(($call119)|(0))!=0;
      if ($tobool120) { var $56 = 1;label = 59; break; } else { label = 58; break; }
    case 58: 
      var $54=$m;
      var $55=HEAP8[($54)];
      var $conv121=(($55 << 24) >> 24);
      var $cmp122=(($conv121)|(0))==95;
      var $56 = $cmp122;label = 59; break;
    case 59: 
      var $56;
      var $57 = $56;label = 60; break;
    case 60: 
      var $57;
      if ($57) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $58=$m;
      var $add_ptr=(($58+1)|0);
      $m=$add_ptr;
      label = 56; break;
    case 62: 
      var $59=$localid;
      var $tobool124=(($59)|(0))!=0;
      if ($tobool124) { label = 63; break; } else { label = 67; break; }
    case 63: 
      var $60=$m;
      var $61=HEAP8[($60)];
      var $conv126=(($61 << 24) >> 24);
      if ((($conv126)|(0))==33 | (($conv126)|(0))==63 | (($conv126)|(0))==61) {
        label = 64; break;
      }
      else {
      label = 65; break;
      }
    case 64: 
      var $62=$m;
      var $incdec_ptr128=(($62+1)|0);
      $m=$incdec_ptr128;
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $63=$m;
      var $64=HEAP8[($63)];
      var $conv133=(($64 << 24) >> 24);
      var $tobool134=(($conv133)|(0))!=0;
      var $cond=$tobool134 ? 0 : 1;
      $retval=$cond;
      label = 69; break;
    case 69: 
      var $65=$retval;
      return $65;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_sym2name($mrb, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $sym_addr;
      var $len=__stackBase__;
      var $name;
      var $str=(__stackBase__)+(4);
      var $agg_tmp=(__stackBase__)+(16);
      $mrb_addr=$mrb;
      $sym_addr=$sym;
      var $0=$mrb_addr;
      var $1=$sym_addr;
      var $call=_mrb_sym2name_len($0, $1, $len);
      $name=$call;
      var $2=$name;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=0;
      label = 8; break;
    case 4: 
      var $3=$name;
      var $call1=_symname_p($3);
      var $tobool2=(($call1)|(0))!=0;
      if ($tobool2) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $4=$name;
      var $call3=_strlen($4);
      var $5=HEAP32[(($len)>>2)];
      var $cmp=(($call3)|(0))==(($5)|(0));
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $6=$name;
      $retval=$6;
      label = 8; break;
    case 7: 
      var $7=$mrb_addr;
      var $8=$mrb_addr;
      var $9=$name;
      var $10=HEAP32[(($len)>>2)];
      _mrb_str_new_static($agg_tmp, $8, $9, $10);
      _mrb_str_dump($str, $7, $agg_tmp);
      var $value=(($str)|0);
      var $p=$value;
      var $11=HEAP32[(($p)>>2)];
      var $12=$11;
      var $ptr=(($12+20)|0);
      var $13=HEAP32[(($ptr)>>2)];
      $retval=$13;
      label = 8; break;
    case 8: 
      var $14=$retval;
      STACKTOP = __stackBase__;
      return $14;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_symbol($mrb) {
  var label = 0;
  var $mrb_addr;
  var $sym;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $object_class=(($1+44)|0);
  var $2=HEAP32[(($object_class)>>2)];
  var $call=_mrb_define_class($0, ((95392)|0), $2);
  var $3=$mrb_addr;
  var $symbol_class=(($3+92)|0);
  HEAP32[(($symbol_class)>>2)]=$call;
  $sym=$call;
  var $4=$mrb_addr;
  var $5=$sym;
  _mrb_define_method($4, $5, ((109740)|0), 432, 262144);
  var $6=$mrb_addr;
  var $7=$sym;
  _mrb_define_method($6, $7, ((105588)|0), 620, 0);
  var $8=$mrb_addr;
  var $9=$sym;
  _mrb_define_method($8, $9, ((102744)|0), 620, 0);
  var $10=$mrb_addr;
  var $11=$sym;
  _mrb_define_method($10, $11, ((100012)|0), 722, 0);
  var $12=$mrb_addr;
  var $13=$sym;
  _mrb_define_method($12, $13, ((97460)|0), 688, 0);
  var $14=$mrb_addr;
  var $15=$sym;
  _mrb_define_method($14, $15, ((96220)|0), 56, 262144);
  var $16=$mrb_addr;
  var $call1=_mrb_intern94($16, ((95088)|0));
  var $17=$mrb_addr;
  var $init_sym=(($17+36)|0);
  HEAP16[(($init_sym)>>1)]=$call1;
  return;
}
function _sym_equal($agg_result, $mrb, $sym1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $sym1; $sym1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($sym1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sym1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sym1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $sym2=__stackBase__;
  var $equal_p;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((94260)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$sym2,tempInt));
  var $1=$mrb_addr;
  var $call1=_mrb_obj_equal($1, $sym1, $sym2);
  var $conv=(($call1) & 255);
  $equal_p=$conv;
  var $2=$equal_p;
  _mrb_bool_value96($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _sym_to_sym($agg_result, $mrb, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $sym; $sym = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($sym)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sym)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sym)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$agg_result;
  var $1=$sym;
  assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _sym_inspect($agg_result, $mrb, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $sym; $sym = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($sym)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sym)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sym)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $str=__stackBase__;
      var $name;
      var $len=(__stackBase__)+(12);
      var $id;
      var $tmp=(__stackBase__)+(16);
      var $tmp8=(__stackBase__)+(28);
      $mrb_addr=$mrb;
      var $value=(($sym)|0);
      var $sym1=$value;
      var $0=HEAP16[(($sym1)>>1)];
      $id=$0;
      var $1=$mrb_addr;
      var $2=$id;
      var $call=_mrb_sym2name_len($1, $2, $len);
      $name=$call;
      var $3=$mrb_addr;
      var $4=HEAP32[(($len)>>2)];
      var $add=((($4)+(1))|0);
      _mrb_str_new($tmp, $3, 0, $add);
      var $5=$str;
      var $6=$tmp;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      var $value2=(($str)|0);
      var $p=$value2;
      var $7=HEAP32[(($p)>>2)];
      var $8=$7;
      var $ptr=(($8+20)|0);
      var $9=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($9)|0);
      HEAP8[($arrayidx)]=58;
      var $value3=(($str)|0);
      var $p4=$value3;
      var $10=HEAP32[(($p4)>>2)];
      var $11=$10;
      var $ptr5=(($11+20)|0);
      var $12=HEAP32[(($ptr5)>>2)];
      var $add_ptr=(($12+1)|0);
      var $13=$name;
      var $14=HEAP32[(($len)>>2)];
      assert($14 % 1 === 0);_memcpy($add_ptr, $13, $14);
      var $15=$name;
      var $call6=_symname_p($15);
      var $tobool=(($call6)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $16=$name;
      var $call7=_strlen($16);
      var $17=HEAP32[(($len)>>2)];
      var $cmp=(($call7)|(0))!=(($17)|(0));
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $18=$mrb_addr;
      _mrb_str_dump($tmp8, $18, $str);
      var $19=$str;
      var $20=$tmp8;
      assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
      var $value9=(($str)|0);
      var $p10=$value9;
      var $21=HEAP32[(($p10)>>2)];
      var $22=$21;
      var $ptr11=(($22+20)|0);
      var $23=HEAP32[(($ptr11)>>2)];
      assert(2 % 1 === 0);HEAP8[($23)]=HEAP8[((((93356)|0))|0)];HEAP8[((($23)+(1))|0)]=HEAP8[(((((93356)|0))+(1))|0)];
      label = 5; break;
    case 5: 
      var $24=$agg_result;
      var $25=$str;
      assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_fill_flags112($p, $c, $len) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $c_addr;
      var $len_addr;
      $p_addr=$p;
      $c_addr=$c;
      $len_addr=$len;
      label = 3; break;
    case 3: 
      var $0=$len_addr;
      var $dec=((($0)-(1))|0);
      $len_addr=$dec;
      var $cmp=(($0)>>>(0)) > 0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $1=$c_addr;
      var $2=$p_addr;
      var $incdec_ptr=(($2+1)|0);
      $p_addr=$incdec_ptr;
      HEAP8[($2)]=$1;
      label = 3; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_get_iv($h, $key) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $h_addr;
      var $key_addr;
      var $k;
      $h_addr=$h;
      $key_addr=$key;
      var $0=$key_addr;
      var $conv=(($0 << 16) >> 16);
      var $1=$key_addr;
      var $conv1=(($1 << 16) >> 16);
      var $shl=$conv1 << 2;
      var $xor=$conv ^ $shl;
      var $2=$key_addr;
      var $conv2=(($2 << 16) >> 16);
      var $shr=$conv2 >> 2;
      var $xor3=$xor ^ $shr;
      var $3=$h_addr;
      var $mask=(($3+32)|0);
      var $4=HEAP32[(($mask)>>2)];
      var $and=$xor3 & $4;
      $k=$and;
      label = 3; break;
    case 3: 
      var $5=$k;
      var $div=Math.floor(((($5)>>>(0)))/(8));
      var $6=$h_addr;
      var $e_flags=(($6+16)|0);
      var $7=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($7+$div)|0);
      var $8=HEAP8[($arrayidx)];
      var $conv4=(($8)&(255));
      var $9=$k;
      var $rem=((($9)>>>(0)))%(8);
      var $arrayidx5=((114464+$rem)|0);
      var $10=HEAP8[($arrayidx5)];
      var $conv6=(($10)&(255));
      var $and7=$conv4 & $conv6;
      var $tobool=(($and7)|(0))!=0;
      var $lnot=$tobool ^ 1;
      if ($lnot) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $11=$k;
      var $div8=Math.floor(((($11)>>>(0)))/(8));
      var $12=$h_addr;
      var $d_flags=(($12+20)|0);
      var $13=HEAP32[(($d_flags)>>2)];
      var $arrayidx9=(($13+$div8)|0);
      var $14=HEAP8[($arrayidx9)];
      var $conv10=(($14)&(255));
      var $15=$k;
      var $rem11=((($15)>>>(0)))%(8);
      var $arrayidx12=((114464+$rem11)|0);
      var $16=HEAP8[($arrayidx12)];
      var $conv13=(($16)&(255));
      var $and14=$conv10 & $conv13;
      var $tobool15=(($and14)|(0))!=0;
      if ($tobool15) { label = 8; break; } else { label = 5; break; }
    case 5: 
      var $17=$k;
      var $18=$h_addr;
      var $keys=(($18+24)|0);
      var $19=HEAP32[(($keys)>>2)];
      var $arrayidx16=(($19+($17<<1))|0);
      var $20=HEAP16[(($arrayidx16)>>1)];
      var $conv17=(($20 << 16) >> 16);
      var $21=$key_addr;
      var $conv18=(($21 << 16) >> 16);
      var $cmp=(($conv17)|(0))==(($conv18)|(0));
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $22=$k;
      $retval=$22;
      label = 10; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $23=$k;
      var $24=$h_addr;
      var $inc=(($24+36)|0);
      var $25=HEAP32[(($inc)>>2)];
      var $add=((($23)+($25))|0);
      var $26=$h_addr;
      var $mask22=(($26+32)|0);
      var $27=HEAP32[(($mask22)>>2)];
      var $and23=$add & $27;
      $k=$and23;
      label = 3; break;
    case 9: 
      var $28=$h_addr;
      var $n_buckets=(($28)|0);
      var $29=HEAP32[(($n_buckets)>>2)];
      $retval=$29;
      label = 10; break;
    case 10: 
      var $30=$retval;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
function _sym_cmp($agg_result, $mrb, $s1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s1; $s1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $s2=__stackBase__;
      var $sym1;
      var $sym2;
      var $p1;
      var $p2;
      var $retval;
      var $len;
      var $len1=(__stackBase__)+(12);
      var $len2=(__stackBase__)+(16);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((94260)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$s2,tempInt));
      var $tt=(($s2+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))!=4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      _mrb_nil_value91($agg_result);
      label = 18; break;
    case 4: 
      var $value=(($s1)|0);
      var $sym=$value;
      var $2=HEAP16[(($sym)>>1)];
      $sym1=$2;
      var $value1=(($s2)|0);
      var $sym3=$value1;
      var $3=HEAP16[(($sym3)>>1)];
      $sym2=$3;
      var $4=$sym1;
      var $conv=(($4 << 16) >> 16);
      var $5=$sym2;
      var $conv4=(($5 << 16) >> 16);
      var $cmp5=(($conv)|(0))==(($conv4)|(0));
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _mrb_fixnum_value95($agg_result, 0);
      label = 18; break;
    case 6: 
      var $6=$mrb_addr;
      var $7=$sym1;
      var $call8=_mrb_sym2name_len($6, $7, $len1);
      $p1=$call8;
      var $8=$mrb_addr;
      var $9=$sym2;
      var $call9=_mrb_sym2name_len($8, $9, $len2);
      $p2=$call9;
      var $10=HEAP32[(($len1)>>2)];
      var $11=HEAP32[(($len2)>>2)];
      var $cmp10=(($10)>>>(0)) > (($11)>>>(0));
      if ($cmp10) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $12=HEAP32[(($len2)>>2)];
      var $cond = $12;label = 9; break;
    case 8: 
      var $13=HEAP32[(($len1)>>2)];
      var $cond = $13;label = 9; break;
    case 9: 
      var $cond;
      $len=$cond;
      var $14=$p1;
      var $15=$p2;
      var $16=$len;
      var $call12=_memcmp($14, $15, $16);
      $retval=$call12;
      var $17=$retval;
      var $cmp13=(($17)|(0))==0;
      if ($cmp13) { label = 10; break; } else { label = 15; break; }
    case 10: 
      var $18=HEAP32[(($len1)>>2)];
      var $19=HEAP32[(($len2)>>2)];
      var $cmp16=(($18)|(0))==(($19)|(0));
      if ($cmp16) { label = 11; break; } else { label = 12; break; }
    case 11: 
      _mrb_fixnum_value95($agg_result, 0);
      label = 18; break;
    case 12: 
      var $20=HEAP32[(($len1)>>2)];
      var $21=HEAP32[(($len2)>>2)];
      var $cmp20=(($20)>>>(0)) > (($21)>>>(0));
      if ($cmp20) { label = 13; break; } else { label = 14; break; }
    case 13: 
      _mrb_fixnum_value95($agg_result, 1);
      label = 18; break;
    case 14: 
      _mrb_fixnum_value95($agg_result, -1);
      label = 18; break;
    case 15: 
      var $22=$retval;
      var $cmp25=(($22)|(0)) > 0;
      if ($cmp25) { label = 16; break; } else { label = 17; break; }
    case 16: 
      _mrb_fixnum_value95($agg_result, 1);
      label = 18; break;
    case 17: 
      _mrb_fixnum_value95($agg_result, -1);
      label = 18; break;
    case 18: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern94($mrb, $cstr) {
  var label = 0;
  var $mrb_addr;
  var $cstr_addr;
  $mrb_addr=$mrb;
  $cstr_addr=$cstr;
  var $0=$mrb_addr;
  var $1=$cstr_addr;
  var $call=_mrb_intern_cstr($0, $1);
  return $call;
}
function _mrb_fixnum_value95($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value96($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $boolean_addr;
      var $v=__stackBase__;
      $boolean_addr=$boolean;
      label = 3; break;
    case 3: 
      var $0=$boolean_addr;
      var $conv=(($0)&(255));
      var $tobool=(($conv)|(0))!=0;
      var $cond=$tobool ? 2 : 0;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$cond;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _is_special_global_name($m) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      $m_addr=$m;
      var $0=$m_addr;
      var $1=HEAP8[($0)];
      var $conv=(($1 << 24) >> 24);
      if ((($conv)|(0))==126 | (($conv)|(0))==42 | (($conv)|(0))==36 | (($conv)|(0))==63 | (($conv)|(0))==33 | (($conv)|(0))==64 | (($conv)|(0))==47 | (($conv)|(0))==92 | (($conv)|(0))==59 | (($conv)|(0))==44 | (($conv)|(0))==46 | (($conv)|(0))==61 | (($conv)|(0))==58 | (($conv)|(0))==60 | (($conv)|(0))==62 | (($conv)|(0))==34 | (($conv)|(0))==38 | (($conv)|(0))==96 | (($conv)|(0))==39 | (($conv)|(0))==43 | (($conv)|(0))==48) {
        label = 3; break;
      }
      else if ((($conv)|(0))==45) {
        label = 4; break;
      }
      else {
      label = 9; break;
      }
    case 3: 
      var $2=$m_addr;
      var $incdec_ptr=(($2+1)|0);
      $m_addr=$incdec_ptr;
      label = 15; break;
    case 4: 
      var $3=$m_addr;
      var $incdec_ptr2=(($3+1)|0);
      $m_addr=$incdec_ptr2;
      var $4=$m_addr;
      var $5=HEAP8[($4)];
      var $conv3=(($5 << 24) >> 24);
      var $cmp=(($conv3)|(0))!=-1;
      if ($cmp) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $6=$m_addr;
      var $7=HEAP8[($6)];
      var $conv5=(($7)&(255));
      var $call=_isalnum($conv5);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $8=$m_addr;
      var $9=HEAP8[($8)];
      var $conv6=(($9 << 24) >> 24);
      var $cmp7=(($conv6)|(0))==95;
      if ($cmp7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $10=$m_addr;
      var $add_ptr=(($10+1)|0);
      $m_addr=$add_ptr;
      label = 8; break;
    case 8: 
      label = 15; break;
    case 9: 
      var $11=$m_addr;
      var $12=HEAP8[($11)];
      var $conv9=(($12)&(255));
      var $call10=_isdigit($conv9);
      var $tobool11=(($call10)|(0))!=0;
      if ($tobool11) { label = 11; break; } else { label = 10; break; }
    case 10: 
      $retval=0;
      label = 16; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $13=$m_addr;
      var $incdec_ptr14=(($13+1)|0);
      $m_addr=$incdec_ptr14;
      label = 13; break;
    case 13: 
      var $14=$m_addr;
      var $15=HEAP8[($14)];
      var $conv15=(($15)&(255));
      var $call16=_isdigit($conv15);
      var $tobool17=(($call16)|(0))!=0;
      if ($tobool17) { label = 12; break; } else { label = 14; break; }
    case 14: 
      label = 15; break;
    case 15: 
      var $16=$m_addr;
      var $17=HEAP8[($16)];
      var $tobool18=(($17 << 24) >> 24)!=0;
      var $lnot=$tobool18 ^ 1;
      var $lnot_ext=(($lnot)&(1));
      $retval=$lnot_ext;
      label = 16; break;
    case 16: 
      var $18=$retval;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_alloc_iv($h) {
  var label = 0;
  var $h_addr;
  var $sz;
  $h_addr=$h;
  var $0=$h_addr;
  var $n_buckets=(($0)|0);
  var $1=HEAP32[(($n_buckets)>>2)];
  $sz=$1;
  var $2=$h_addr;
  var $n_occupied=(($2+8)|0);
  HEAP32[(($n_occupied)>>2)]=0;
  var $3=$h_addr;
  var $size=(($3+4)|0);
  HEAP32[(($size)>>2)]=0;
  var $4=$sz;
  var $shr=$4 >>> 2;
  var $5=$sz;
  var $shr1=$5 >>> 1;
  var $or=$shr | $shr1;
  var $6=$h_addr;
  var $upper_bound=(($6+12)|0);
  HEAP32[(($upper_bound)>>2)]=$or;
  var $7=$h_addr;
  var $mrb=(($7+40)|0);
  var $8=HEAP32[(($mrb)>>2)];
  var $9=$sz;
  var $mul=$9;
  var $div=Math.floor(((($mul)>>>(0)))/(4));
  var $call=_mrb_malloc($8, $div);
  var $10=$h_addr;
  var $e_flags=(($10+16)|0);
  HEAP32[(($e_flags)>>2)]=$call;
  var $11=$h_addr;
  var $e_flags2=(($11+16)|0);
  var $12=HEAP32[(($e_flags2)>>2)];
  var $13=$sz;
  var $div3=Math.floor(((($13)>>>(0)))/(8));
  var $add_ptr=(($12+$div3)|0);
  var $14=$h_addr;
  var $d_flags=(($14+20)|0);
  HEAP32[(($d_flags)>>2)]=$add_ptr;
  var $15=$h_addr;
  var $e_flags4=(($15+16)|0);
  var $16=HEAP32[(($e_flags4)>>2)];
  var $17=$sz;
  var $div5=Math.floor(((($17)>>>(0)))/(8));
  _kh_fill_flags112($16, -1, $div5);
  var $18=$h_addr;
  var $d_flags6=(($18+20)|0);
  var $19=HEAP32[(($d_flags6)>>2)];
  var $20=$sz;
  var $div7=Math.floor(((($20)>>>(0)))/(8));
  _kh_fill_flags112($19, 0, $div7);
  var $21=$h_addr;
  var $mrb8=(($21+40)|0);
  var $22=HEAP32[(($mrb8)>>2)];
  var $23=$sz;
  var $mul9=($23<<1);
  var $call10=_mrb_malloc($22, $mul9);
  var $24=$call10;
  var $25=$h_addr;
  var $keys=(($25+24)|0);
  HEAP32[(($keys)>>2)]=$24;
  var $26=$h_addr;
  var $mrb11=(($26+40)|0);
  var $27=HEAP32[(($mrb11)>>2)];
  var $28=$sz;
  var $mul12=((($28)*(12))&-1);
  var $call13=_mrb_malloc($27, $mul12);
  var $29=$call13;
  var $30=$h_addr;
  var $vals=(($30+28)|0);
  HEAP32[(($vals)>>2)]=$29;
  var $31=$sz;
  var $sub=((($31)-(1))|0);
  var $32=$h_addr;
  var $mask=(($32+32)|0);
  HEAP32[(($mask)>>2)]=$sub;
  var $33=$sz;
  var $div14=Math.floor(((($33)>>>(0)))/(2));
  var $sub15=((($div14)-(1))|0);
  var $34=$h_addr;
  var $inc=(($34+36)|0);
  HEAP32[(($inc)>>2)]=$sub15;
  return;
}
function _kh_init_iv_size($mrb, $size) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $size_addr;
      var $h;
      $mrb_addr=$mrb;
      $size_addr=$size;
      var $0=$mrb_addr;
      var $call=_mrb_calloc($0, 1, 44);
      var $1=$call;
      $h=$1;
      var $2=$size_addr;
      var $cmp=(($2)>>>(0)) < 8;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $size_addr=8;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $3=$size_addr;
      var $dec=((($3)-(1))|0);
      $size_addr=$dec;
      var $4=$size_addr;
      var $shr=$4 >>> 1;
      var $5=$size_addr;
      var $or=$5 | $shr;
      $size_addr=$or;
      var $6=$size_addr;
      var $shr1=$6 >>> 2;
      var $7=$size_addr;
      var $or2=$7 | $shr1;
      $size_addr=$or2;
      var $8=$size_addr;
      var $shr3=$8 >>> 4;
      var $9=$size_addr;
      var $or4=$9 | $shr3;
      $size_addr=$or4;
      var $10=$size_addr;
      var $shr5=$10 >>> 8;
      var $11=$size_addr;
      var $or6=$11 | $shr5;
      $size_addr=$or6;
      var $12=$size_addr;
      var $shr7=$12 >>> 16;
      var $13=$size_addr;
      var $or8=$13 | $shr7;
      $size_addr=$or8;
      var $14=$size_addr;
      var $inc=((($14)+(1))|0);
      $size_addr=$inc;
      label = 6; break;
    case 6: 
      var $15=$size_addr;
      var $16=$h;
      var $n_buckets=(($16)|0);
      HEAP32[(($n_buckets)>>2)]=$15;
      var $17=$mrb_addr;
      var $18=$h;
      var $mrb9=(($18+40)|0);
      HEAP32[(($mrb9)>>2)]=$17;
      var $19=$h;
      _kh_alloc_iv($19);
      var $20=$h;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_init_iv($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_kh_init_iv_size($0, 32);
  return $call;
}
function _kh_destroy_iv($h) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $h_addr;
      $h_addr=$h;
      var $0=$h_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$h_addr;
      var $mrb=(($1+40)|0);
      var $2=HEAP32[(($mrb)>>2)];
      var $3=$h_addr;
      var $keys=(($3+24)|0);
      var $4=HEAP32[(($keys)>>2)];
      var $5=$4;
      _mrb_free($2, $5);
      var $6=$h_addr;
      var $mrb1=(($6+40)|0);
      var $7=HEAP32[(($mrb1)>>2)];
      var $8=$h_addr;
      var $vals=(($8+28)|0);
      var $9=HEAP32[(($vals)>>2)];
      var $10=$9;
      _mrb_free($7, $10);
      var $11=$h_addr;
      var $mrb2=(($11+40)|0);
      var $12=HEAP32[(($mrb2)>>2)];
      var $13=$h_addr;
      var $e_flags=(($13+16)|0);
      var $14=HEAP32[(($e_flags)>>2)];
      _mrb_free($12, $14);
      var $15=$h_addr;
      var $mrb3=(($15+40)|0);
      var $16=HEAP32[(($mrb3)>>2)];
      var $17=$h_addr;
      var $18=$17;
      _mrb_free($16, $18);
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_resize_iv($h, $new_n_buckets) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $h_addr;
      var $new_n_buckets_addr;
      var $old_e_flags;
      var $old_keys;
      var $old_vals;
      var $old_n_buckets;
      var $i;
      var $k;
      $h_addr=$h;
      $new_n_buckets_addr=$new_n_buckets;
      var $0=$new_n_buckets_addr;
      var $cmp=(($0)>>>(0)) < 8;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $new_n_buckets_addr=8;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $1=$new_n_buckets_addr;
      var $dec=((($1)-(1))|0);
      $new_n_buckets_addr=$dec;
      var $2=$new_n_buckets_addr;
      var $shr=$2 >>> 1;
      var $3=$new_n_buckets_addr;
      var $or=$3 | $shr;
      $new_n_buckets_addr=$or;
      var $4=$new_n_buckets_addr;
      var $shr1=$4 >>> 2;
      var $5=$new_n_buckets_addr;
      var $or2=$5 | $shr1;
      $new_n_buckets_addr=$or2;
      var $6=$new_n_buckets_addr;
      var $shr3=$6 >>> 4;
      var $7=$new_n_buckets_addr;
      var $or4=$7 | $shr3;
      $new_n_buckets_addr=$or4;
      var $8=$new_n_buckets_addr;
      var $shr5=$8 >>> 8;
      var $9=$new_n_buckets_addr;
      var $or6=$9 | $shr5;
      $new_n_buckets_addr=$or6;
      var $10=$new_n_buckets_addr;
      var $shr7=$10 >>> 16;
      var $11=$new_n_buckets_addr;
      var $or8=$11 | $shr7;
      $new_n_buckets_addr=$or8;
      var $12=$new_n_buckets_addr;
      var $inc=((($12)+(1))|0);
      $new_n_buckets_addr=$inc;
      label = 6; break;
    case 6: 
      var $13=$h_addr;
      var $e_flags=(($13+16)|0);
      var $14=HEAP32[(($e_flags)>>2)];
      $old_e_flags=$14;
      var $15=$h_addr;
      var $keys=(($15+24)|0);
      var $16=HEAP32[(($keys)>>2)];
      $old_keys=$16;
      var $17=$h_addr;
      var $vals=(($17+28)|0);
      var $18=HEAP32[(($vals)>>2)];
      $old_vals=$18;
      var $19=$h_addr;
      var $n_buckets=(($19)|0);
      var $20=HEAP32[(($n_buckets)>>2)];
      $old_n_buckets=$20;
      var $21=$new_n_buckets_addr;
      var $22=$h_addr;
      var $n_buckets9=(($22)|0);
      HEAP32[(($n_buckets9)>>2)]=$21;
      var $23=$h_addr;
      _kh_alloc_iv($23);
      $i=0;
      label = 7; break;
    case 7: 
      var $24=$i;
      var $25=$old_n_buckets;
      var $cmp10=(($24)>>>(0)) < (($25)>>>(0));
      if ($cmp10) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $26=$i;
      var $div=Math.floor(((($26)>>>(0)))/(8));
      var $27=$old_e_flags;
      var $arrayidx=(($27+$div)|0);
      var $28=HEAP8[($arrayidx)];
      var $conv=(($28)&(255));
      var $29=$i;
      var $rem=((($29)>>>(0)))%(8);
      var $arrayidx11=((114464+$rem)|0);
      var $30=HEAP8[($arrayidx11)];
      var $conv12=(($30)&(255));
      var $and=$conv & $conv12;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $31=$h_addr;
      var $32=$i;
      var $33=$old_keys;
      var $arrayidx14=(($33+($32<<1))|0);
      var $34=HEAP16[(($arrayidx14)>>1)];
      var $call=_kh_put_iv($31, $34);
      $k=$call;
      var $35=$k;
      var $36=$h_addr;
      var $vals15=(($36+28)|0);
      var $37=HEAP32[(($vals15)>>2)];
      var $arrayidx16=(($37+((($35)*(12))&-1))|0);
      var $38=$i;
      var $39=$old_vals;
      var $arrayidx17=(($39+((($38)*(12))&-1))|0);
      var $40=$arrayidx16;
      var $41=$arrayidx17;
      assert(12 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];HEAP32[((($40)+(8))>>2)]=HEAP32[((($41)+(8))>>2)];
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $42=$i;
      var $inc19=((($42)+(1))|0);
      $i=$inc19;
      label = 7; break;
    case 12: 
      var $43=$h_addr;
      var $mrb=(($43+40)|0);
      var $44=HEAP32[(($mrb)>>2)];
      var $45=$old_e_flags;
      _mrb_free($44, $45);
      var $46=$h_addr;
      var $mrb20=(($46+40)|0);
      var $47=HEAP32[(($mrb20)>>2)];
      var $48=$old_keys;
      var $49=$48;
      _mrb_free($47, $49);
      var $50=$h_addr;
      var $mrb21=(($50+40)|0);
      var $51=HEAP32[(($mrb21)>>2)];
      var $52=$old_vals;
      var $53=$52;
      _mrb_free($51, $53);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_vm_special_set($mrb, $i, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $i_addr;
  $mrb_addr=$mrb;
  $i_addr=$i;
  STACKTOP = __stackBase__;
  return;
}
function _kh_del_iv($h, $x) {
  var label = 0;
  var $h_addr;
  var $x_addr;
  $h_addr=$h;
  $x_addr=$x;
  var $0=$x_addr;
  var $rem=((($0)>>>(0)))%(8);
  var $arrayidx=((114464+$rem)|0);
  var $1=HEAP8[($arrayidx)];
  var $conv=(($1)&(255));
  var $2=$x_addr;
  var $div=Math.floor(((($2)>>>(0)))/(8));
  var $3=$h_addr;
  var $d_flags=(($3+20)|0);
  var $4=HEAP32[(($d_flags)>>2)];
  var $arrayidx1=(($4+$div)|0);
  var $5=HEAP8[($arrayidx1)];
  var $conv2=(($5)&(255));
  var $or=$conv2 | $conv;
  var $conv3=(($or) & 255);
  HEAP8[($arrayidx1)]=$conv3;
  var $6=$h_addr;
  var $size=(($6+4)|0);
  var $7=HEAP32[(($size)>>2)];
  var $dec=((($7)-(1))|0);
  HEAP32[(($size)>>2)]=$dec;
  return;
}
function _iv_size($mrb, $t) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $t_addr;
      var $h;
      $mrb_addr=$mrb;
      $t_addr=$t;
      var $0=$t_addr;
      var $h1=(($0)|0);
      $h=$h1;
      var $1=$h;
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      var $2=$h;
      var $size=(($2+4)|0);
      var $3=HEAP32[(($size)>>2)];
      $retval=$3;
      label = 5; break;
    case 5: 
      var $4=$retval;
      return $4;
    default: assert(0, "bad label: " + label);
  }
}
function _obj_iv_p($obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $tt=(($obj+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      if ((($0)|(0))==8 | (($0)|(0))==9 | (($0)|(0))==10 | (($0)|(0))==12 | (($0)|(0))==15 | (($0)|(0))==21) {
        label = 3; break;
      }
      else {
      label = 4; break;
      }
    case 3: 
      $retval=1;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $1=$retval;
      STACKTOP = __stackBase__;
      return $1;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_put_iv($h, $key) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $h_addr;
      var $key_addr;
      var $k;
      $h_addr=$h;
      $key_addr=$key;
      var $0=$h_addr;
      var $n_occupied=(($0+8)|0);
      var $1=HEAP32[(($n_occupied)>>2)];
      var $2=$h_addr;
      var $upper_bound=(($2+12)|0);
      var $3=HEAP32[(($upper_bound)>>2)];
      var $cmp=(($1)>>>(0)) >= (($3)>>>(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$h_addr;
      var $5=$h_addr;
      var $n_buckets=(($5)|0);
      var $6=HEAP32[(($n_buckets)>>2)];
      var $mul=($6<<1);
      _kh_resize_iv($4, $mul);
      label = 4; break;
    case 4: 
      var $7=$key_addr;
      var $conv=(($7 << 16) >> 16);
      var $8=$key_addr;
      var $conv1=(($8 << 16) >> 16);
      var $shl=$conv1 << 2;
      var $xor=$conv ^ $shl;
      var $9=$key_addr;
      var $conv2=(($9 << 16) >> 16);
      var $shr=$conv2 >> 2;
      var $xor3=$xor ^ $shr;
      var $10=$h_addr;
      var $mask=(($10+32)|0);
      var $11=HEAP32[(($mask)>>2)];
      var $and=$xor3 & $11;
      $k=$and;
      label = 5; break;
    case 5: 
      var $12=$k;
      var $div=Math.floor(((($12)>>>(0)))/(8));
      var $13=$h_addr;
      var $e_flags=(($13+16)|0);
      var $14=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($14+$div)|0);
      var $15=HEAP8[($arrayidx)];
      var $conv4=(($15)&(255));
      var $16=$k;
      var $rem=((($16)>>>(0)))%(8);
      var $arrayidx5=((114464+$rem)|0);
      var $17=HEAP8[($arrayidx5)];
      var $conv6=(($17)&(255));
      var $and7=$conv4 & $conv6;
      var $tobool=(($and7)|(0))!=0;
      if ($tobool) { var $24 = 1;label = 7; break; } else { label = 6; break; }
    case 6: 
      var $18=$k;
      var $div8=Math.floor(((($18)>>>(0)))/(8));
      var $19=$h_addr;
      var $d_flags=(($19+20)|0);
      var $20=HEAP32[(($d_flags)>>2)];
      var $arrayidx9=(($20+$div8)|0);
      var $21=HEAP8[($arrayidx9)];
      var $conv10=(($21)&(255));
      var $22=$k;
      var $rem11=((($22)>>>(0)))%(8);
      var $arrayidx12=((114464+$rem11)|0);
      var $23=HEAP8[($arrayidx12)];
      var $conv13=(($23)&(255));
      var $and14=$conv10 & $conv13;
      var $tobool15=(($and14)|(0))!=0;
      var $24 = $tobool15;label = 7; break;
    case 7: 
      var $24;
      var $lnot=$24 ^ 1;
      if ($lnot) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $25=$k;
      var $26=$h_addr;
      var $keys=(($26+24)|0);
      var $27=HEAP32[(($keys)>>2)];
      var $arrayidx16=(($27+($25<<1))|0);
      var $28=HEAP16[(($arrayidx16)>>1)];
      var $conv17=(($28 << 16) >> 16);
      var $29=$key_addr;
      var $conv18=(($29 << 16) >> 16);
      var $cmp19=(($conv17)|(0))==(($conv18)|(0));
      if ($cmp19) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $30=$k;
      var $31=$h_addr;
      var $inc=(($31+36)|0);
      var $32=HEAP32[(($inc)>>2)];
      var $add=((($30)+($32))|0);
      var $33=$h_addr;
      var $mask23=(($33+32)|0);
      var $34=HEAP32[(($mask23)>>2)];
      var $and24=$add & $34;
      $k=$and24;
      label = 5; break;
    case 11: 
      var $35=$k;
      var $div25=Math.floor(((($35)>>>(0)))/(8));
      var $36=$h_addr;
      var $e_flags26=(($36+16)|0);
      var $37=HEAP32[(($e_flags26)>>2)];
      var $arrayidx27=(($37+$div25)|0);
      var $38=HEAP8[($arrayidx27)];
      var $conv28=(($38)&(255));
      var $39=$k;
      var $rem29=((($39)>>>(0)))%(8);
      var $arrayidx30=((114464+$rem29)|0);
      var $40=HEAP8[($arrayidx30)];
      var $conv31=(($40)&(255));
      var $and32=$conv28 & $conv31;
      var $tobool33=(($and32)|(0))!=0;
      if ($tobool33) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $41=$key_addr;
      var $42=$k;
      var $43=$h_addr;
      var $keys35=(($43+24)|0);
      var $44=HEAP32[(($keys35)>>2)];
      var $arrayidx36=(($44+($42<<1))|0);
      HEAP16[(($arrayidx36)>>1)]=$41;
      var $45=$k;
      var $rem37=((($45)>>>(0)))%(8);
      var $arrayidx38=((114464+$rem37)|0);
      var $46=HEAP8[($arrayidx38)];
      var $conv39=(($46)&(255));
      var $neg=$conv39 ^ -1;
      var $47=$k;
      var $div40=Math.floor(((($47)>>>(0)))/(8));
      var $48=$h_addr;
      var $e_flags41=(($48+16)|0);
      var $49=HEAP32[(($e_flags41)>>2)];
      var $arrayidx42=(($49+$div40)|0);
      var $50=HEAP8[($arrayidx42)];
      var $conv43=(($50)&(255));
      var $and44=$conv43 & $neg;
      var $conv45=(($and44) & 255);
      HEAP8[($arrayidx42)]=$conv45;
      var $51=$h_addr;
      var $size=(($51+4)|0);
      var $52=HEAP32[(($size)>>2)];
      var $inc46=((($52)+(1))|0);
      HEAP32[(($size)>>2)]=$inc46;
      var $53=$h_addr;
      var $n_occupied47=(($53+8)|0);
      var $54=HEAP32[(($n_occupied47)>>2)];
      var $inc48=((($54)+(1))|0);
      HEAP32[(($n_occupied47)>>2)]=$inc48;
      label = 16; break;
    case 13: 
      var $55=$k;
      var $div49=Math.floor(((($55)>>>(0)))/(8));
      var $56=$h_addr;
      var $d_flags50=(($56+20)|0);
      var $57=HEAP32[(($d_flags50)>>2)];
      var $arrayidx51=(($57+$div49)|0);
      var $58=HEAP8[($arrayidx51)];
      var $conv52=(($58)&(255));
      var $59=$k;
      var $rem53=((($59)>>>(0)))%(8);
      var $arrayidx54=((114464+$rem53)|0);
      var $60=HEAP8[($arrayidx54)];
      var $conv55=(($60)&(255));
      var $and56=$conv52 & $conv55;
      var $tobool57=(($and56)|(0))!=0;
      if ($tobool57) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $61=$key_addr;
      var $62=$k;
      var $63=$h_addr;
      var $keys59=(($63+24)|0);
      var $64=HEAP32[(($keys59)>>2)];
      var $arrayidx60=(($64+($62<<1))|0);
      HEAP16[(($arrayidx60)>>1)]=$61;
      var $65=$k;
      var $rem61=((($65)>>>(0)))%(8);
      var $arrayidx62=((114464+$rem61)|0);
      var $66=HEAP8[($arrayidx62)];
      var $conv63=(($66)&(255));
      var $neg64=$conv63 ^ -1;
      var $67=$k;
      var $div65=Math.floor(((($67)>>>(0)))/(8));
      var $68=$h_addr;
      var $d_flags66=(($68+20)|0);
      var $69=HEAP32[(($d_flags66)>>2)];
      var $arrayidx67=(($69+$div65)|0);
      var $70=HEAP8[($arrayidx67)];
      var $conv68=(($70)&(255));
      var $and69=$conv68 & $neg64;
      var $conv70=(($and69) & 255);
      HEAP8[($arrayidx67)]=$conv70;
      var $71=$h_addr;
      var $size71=(($71+4)|0);
      var $72=HEAP32[(($size71)>>2)];
      var $inc72=((($72)+(1))|0);
      HEAP32[(($size71)>>2)]=$inc72;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $73=$k;
      return $73;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_copy_iv($mrb, $h) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $h_addr;
      var $h2;
      var $k;
      var $k2;
      $mrb_addr=$mrb;
      $h_addr=$h;
      var $0=$mrb_addr;
      var $call=_kh_init_iv($0);
      $h2=$call;
      $k=0;
      label = 3; break;
    case 3: 
      var $1=$k;
      var $2=$h_addr;
      var $n_buckets=(($2)|0);
      var $3=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($1)|(0))!=(($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $4=$k;
      var $div=Math.floor(((($4)>>>(0)))/(8));
      var $5=$h_addr;
      var $e_flags=(($5+16)|0);
      var $6=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($6+$div)|0);
      var $7=HEAP8[($arrayidx)];
      var $conv=(($7)&(255));
      var $8=$k;
      var $rem=((($8)>>>(0)))%(8);
      var $arrayidx1=((114464+$rem)|0);
      var $9=HEAP8[($arrayidx1)];
      var $conv2=(($9)&(255));
      var $and=$conv & $conv2;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 5; break; }
    case 5: 
      var $10=$k;
      var $div3=Math.floor(((($10)>>>(0)))/(8));
      var $11=$h_addr;
      var $d_flags=(($11+20)|0);
      var $12=HEAP32[(($d_flags)>>2)];
      var $arrayidx4=(($12+$div3)|0);
      var $13=HEAP8[($arrayidx4)];
      var $conv5=(($13)&(255));
      var $14=$k;
      var $rem6=((($14)>>>(0)))%(8);
      var $arrayidx7=((114464+$rem6)|0);
      var $15=HEAP8[($arrayidx7)];
      var $conv8=(($15)&(255));
      var $and9=$conv5 & $conv8;
      var $tobool10=(($and9)|(0))!=0;
      if ($tobool10) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $16=$h2;
      var $17=$k;
      var $18=$h_addr;
      var $keys=(($18+24)|0);
      var $19=HEAP32[(($keys)>>2)];
      var $arrayidx11=(($19+($17<<1))|0);
      var $20=HEAP16[(($arrayidx11)>>1)];
      var $call12=_kh_put_iv($16, $20);
      $k2=$call12;
      var $21=$k2;
      var $22=$h2;
      var $vals=(($22+28)|0);
      var $23=HEAP32[(($vals)>>2)];
      var $arrayidx13=(($23+((($21)*(12))&-1))|0);
      var $24=$k;
      var $25=$h_addr;
      var $vals14=(($25+28)|0);
      var $26=HEAP32[(($vals14)>>2)];
      var $arrayidx15=(($26+((($24)*(12))&-1))|0);
      var $27=$arrayidx13;
      var $28=$arrayidx15;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $29=$k;
      var $inc=((($29)+(1))|0);
      $k=$inc;
      label = 3; break;
    case 9: 
      var $30=$h2;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_gc_mark_gv($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $globals=(($1+20)|0);
  var $2=HEAP32[(($globals)>>2)];
  _mark_tbl($0, $2);
  return;
}
function _mark_tbl($mrb, $t) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $t_addr;
      $mrb_addr=$mrb;
      $t_addr=$t;
      var $0=$t_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mrb_addr;
      var $2=$t_addr;
      var $call=_iv_foreach($1, $2, 216, 0);
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_gc_free_gv($mrb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $globals=(($0+20)|0);
      var $1=HEAP32[(($globals)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$mrb_addr;
      var $3=$mrb_addr;
      var $globals1=(($3+20)|0);
      var $4=HEAP32[(($globals1)>>2)];
      _iv_free($2, $4);
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _iv_free($mrb, $t) {
  var label = 0;
  var $mrb_addr;
  var $t_addr;
  $mrb_addr=$mrb;
  $t_addr=$t;
  var $0=$t_addr;
  var $h=(($0)|0);
  _kh_destroy_iv($h);
  return;
}
function _mrb_gc_mark_iv($mrb, $obj) {
  var label = 0;
  var $mrb_addr;
  var $obj_addr;
  $mrb_addr=$mrb;
  $obj_addr=$obj;
  var $0=$mrb_addr;
  var $1=$obj_addr;
  var $iv=(($1+12)|0);
  var $2=HEAP32[(($iv)>>2)];
  _mark_tbl($0, $2);
  return;
}
function _mrb_gc_mark_iv_size($mrb, $obj) {
  var label = 0;
  var $mrb_addr;
  var $obj_addr;
  $mrb_addr=$mrb;
  $obj_addr=$obj;
  var $0=$mrb_addr;
  var $1=$obj_addr;
  var $iv=(($1+12)|0);
  var $2=HEAP32[(($iv)>>2)];
  var $call=_iv_size($0, $2);
  return $call;
}
function _mrb_gc_free_iv($mrb, $obj) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $obj_addr;
      $mrb_addr=$mrb;
      $obj_addr=$obj;
      var $0=$obj_addr;
      var $iv=(($0+12)|0);
      var $1=HEAP32[(($iv)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$mrb_addr;
      var $3=$obj_addr;
      var $iv1=(($3+12)|0);
      var $4=HEAP32[(($iv1)>>2)];
      _iv_free($2, $4);
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_vm_special_get($agg_result, $mrb, $i) {
  var label = 0;
  var $mrb_addr;
  var $i_addr;
  $mrb_addr=$mrb;
  $i_addr=$i;
  _mrb_fixnum_value115($agg_result, 0);
  return;
}
function _mrb_fixnum_value115($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_iv_get($agg_result, $mrb, $obj, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $obj_addr;
      var $sym_addr;
      var $v=__stackBase__;
      $mrb_addr=$mrb;
      $obj_addr=$obj;
      $sym_addr=$sym;
      var $0=$obj_addr;
      var $iv=(($0+12)|0);
      var $1=HEAP32[(($iv)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $2=$mrb_addr;
      var $3=$obj_addr;
      var $iv1=(($3+12)|0);
      var $4=HEAP32[(($iv1)>>2)];
      var $5=$sym_addr;
      var $call=_iv_get($2, $4, $5, $v);
      var $conv=(($call)&(255));
      var $tobool2=(($conv)|(0))!=0;
      if ($tobool2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      label = 6; break;
    case 5: 
      _mrb_nil_value116($agg_result);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _iv_get($mrb, $t, $sym, $vp) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $t_addr;
      var $sym_addr;
      var $vp_addr;
      var $h;
      var $k;
      $mrb_addr=$mrb;
      $t_addr=$t;
      $sym_addr=$sym;
      $vp_addr=$vp;
      var $0=$t_addr;
      var $h1=(($0)|0);
      $h=$h1;
      var $1=$h;
      var $2=$sym_addr;
      var $call=_kh_get_iv($1, $2);
      $k=$call;
      var $3=$k;
      var $4=$h;
      var $n_buckets=(($4)|0);
      var $5=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($3)|(0))!=(($5)|(0));
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $6=$vp_addr;
      var $tobool=(($6)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $7=$vp_addr;
      var $8=$k;
      var $9=$h;
      var $vals=(($9+28)|0);
      var $10=HEAP32[(($vals)>>2)];
      var $arrayidx=(($10+((($8)*(12))&-1))|0);
      var $11=$7;
      var $12=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      label = 5; break;
    case 5: 
      $retval=1;
      label = 7; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $13=$retval;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value116($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_iv_get($agg_result, $mrb, $obj, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $sym_addr;
      $mrb_addr=$mrb;
      $sym_addr=$sym;
      var $call=_obj_iv_p($obj);
      var $tobool=(($call << 24) >> 24)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $0=$mrb_addr;
      var $value=(($obj)|0);
      var $p=$value;
      var $1=HEAP32[(($p)>>2)];
      var $2=$1;
      var $3=$sym_addr;
      _mrb_obj_iv_get($agg_result, $0, $2, $3);
      label = 5; break;
    case 4: 
      _mrb_nil_value116($agg_result);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_iv_set($mrb, $obj, $sym, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $obj_addr;
      var $sym_addr;
      var $t;
      $mrb_addr=$mrb;
      $obj_addr=$obj;
      $sym_addr=$sym;
      var $0=$obj_addr;
      var $iv=(($0+12)|0);
      var $1=HEAP32[(($iv)>>2)];
      $t=$1;
      var $2=$t;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=$mrb_addr;
      var $call=_iv_new($3);
      var $4=$obj_addr;
      var $iv1=(($4+12)|0);
      HEAP32[(($iv1)>>2)]=$call;
      $t=$call;
      label = 4; break;
    case 4: 
      var $5=$mrb_addr;
      var $6=$obj_addr;
      var $7=$6;
      _mrb_write_barrier($5, $7);
      var $8=$mrb_addr;
      var $9=$t;
      var $10=$sym_addr;
      _iv_put($8, $9, $10, $v);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _iv_new($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_kh_init_iv_size($0, 8);
  var $1=$call;
  return $1;
}
function _iv_put($mrb, $t, $sym, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $t_addr;
  var $sym_addr;
  var $h;
  var $k;
  $mrb_addr=$mrb;
  $t_addr=$t;
  $sym_addr=$sym;
  var $0=$t_addr;
  var $h1=(($0)|0);
  $h=$h1;
  var $1=$h;
  var $2=$sym_addr;
  var $call=_kh_put_iv($1, $2);
  $k=$call;
  var $3=$k;
  var $4=$h;
  var $vals=(($4+28)|0);
  var $5=HEAP32[(($vals)>>2)];
  var $arrayidx=(($5+((($3)*(12))&-1))|0);
  var $6=$arrayidx;
  var $7=$val;
  assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_iv_ifnone($mrb, $obj, $sym, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $obj_addr;
      var $sym_addr;
      var $t;
      $mrb_addr=$mrb;
      $obj_addr=$obj;
      $sym_addr=$sym;
      var $0=$obj_addr;
      var $iv=(($0+12)|0);
      var $1=HEAP32[(($iv)>>2)];
      $t=$1;
      var $2=$t;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=$mrb_addr;
      var $call=_iv_new($3);
      var $4=$obj_addr;
      var $iv1=(($4+12)|0);
      HEAP32[(($iv1)>>2)]=$call;
      $t=$call;
      label = 7; break;
    case 4: 
      var $5=$mrb_addr;
      var $6=$t;
      var $7=$sym_addr;
      var $call2=_iv_get($5, $6, $7, $v);
      var $tobool3=(($call2 << 24) >> 24)!=0;
      if ($tobool3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 8; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $8=$mrb_addr;
      var $9=$obj_addr;
      var $10=$9;
      _mrb_write_barrier($8, $10);
      var $11=$mrb_addr;
      var $12=$t;
      var $13=$sym_addr;
      _iv_put($11, $12, $13, $v);
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_iv_set($mrb, $obj, $sym, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $sym_addr;
      $mrb_addr=$mrb;
      $sym_addr=$sym;
      var $call=_obj_iv_p($obj);
      var $tobool=(($call << 24) >> 24)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $0=$mrb_addr;
      var $value=(($obj)|0);
      var $p=$value;
      var $1=HEAP32[(($p)>>2)];
      var $2=$1;
      var $3=$sym_addr;
      _mrb_obj_iv_set($0, $2, $3, $v);
      label = 5; break;
    case 4: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call1=_mrb_class_get($5, ((93368)|0));
      _mrb_raise($4, $call1, ((108500)|0));
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_iv_defined($mrb, $obj, $sym) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $obj_addr;
      var $sym_addr;
      var $t;
      $mrb_addr=$mrb;
      $obj_addr=$obj;
      $sym_addr=$sym;
      var $0=$obj_addr;
      var $iv=(($0+12)|0);
      var $1=HEAP32[(($iv)>>2)];
      $t=$1;
      var $2=$t;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      var $4=$t;
      var $5=$sym_addr;
      var $call=_iv_get($3, $4, $5, 0);
      $retval=$call;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $6=$retval;
      return $6;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_iv_copy($mrb, $dest, $src) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $dest; $dest = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($dest)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dest)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($dest)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $src; $src = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($src)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($src)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($src)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $d;
      var $s;
      $mrb_addr=$mrb;
      var $value=(($dest)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $d=$1;
      var $value1=(($src)|0);
      var $p2=$value1;
      var $2=HEAP32[(($p2)>>2)];
      var $3=$2;
      $s=$3;
      var $4=$d;
      var $iv=(($4+12)|0);
      var $5=HEAP32[(($iv)>>2)];
      var $tobool=(($5)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$mrb_addr;
      var $7=$d;
      var $iv3=(($7+12)|0);
      var $8=HEAP32[(($iv3)>>2)];
      _iv_free($6, $8);
      var $9=$d;
      var $iv4=(($9+12)|0);
      HEAP32[(($iv4)>>2)]=0;
      label = 4; break;
    case 4: 
      var $10=$s;
      var $iv5=(($10+12)|0);
      var $11=HEAP32[(($iv5)>>2)];
      var $tobool6=(($11)|(0))!=0;
      if ($tobool6) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $12=$mrb_addr;
      var $13=$s;
      var $iv8=(($13+12)|0);
      var $14=HEAP32[(($iv8)>>2)];
      var $call=_iv_copy($12, $14);
      var $15=$d;
      var $iv9=(($15+12)|0);
      HEAP32[(($iv9)>>2)]=$call;
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _iv_copy($mrb, $t) {
  var label = 0;
  var $mrb_addr;
  var $t_addr;
  $mrb_addr=$mrb;
  $t_addr=$t;
  var $0=$mrb_addr;
  var $1=$t_addr;
  var $h=(($1)|0);
  var $call=_kh_copy_iv($0, $h);
  var $2=$call;
  return $2;
}
function _mrb_obj_iv_inspect($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 96)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $obj_addr;
      var $t;
      var $len;
      var $cn;
      var $agg_tmp=__stackBase__;
      var $str=(__stackBase__)+(12);
      var $tmp=(__stackBase__)+(24);
      var $tmp2=(__stackBase__)+(36);
      var $tmp3=(__stackBase__)+(48);
      var $agg_tmp4=(__stackBase__)+(60);
      var $tmp6=(__stackBase__)+(72);
      var $agg_tmp7=(__stackBase__)+(84);
      $mrb_addr=$mrb;
      $obj_addr=$obj;
      var $0=$obj_addr;
      var $iv=(($0+12)|0);
      var $1=HEAP32[(($iv)>>2)];
      $t=$1;
      var $2=$mrb_addr;
      var $3=$t;
      var $call=_iv_size($2, $3);
      $len=$call;
      var $4=$len;
      var $cmp=(($4)>>>(0)) > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$mrb_addr;
      var $6=$obj_addr;
      var $7=$6;
      _mrb_obj_value117($agg_tmp, $7);
      var $call1=_mrb_obj_classname($5, $agg_tmp);
      $cn=$call1;
      var $8=$mrb_addr;
      _mrb_str_buf_new($str, $8, 30);
      var $9=$mrb_addr;
      _mrb_str_buf_cat($tmp, $9, $str, ((108164)|0), 2);
      var $10=$mrb_addr;
      var $11=$cn;
      _mrb_str_cat2($tmp2, $10, $str, $11);
      var $12=$mrb_addr;
      _mrb_str_cat($tmp3, $12, $str, ((104580)|0), 1);
      var $13=$mrb_addr;
      var $14=$mrb_addr;
      var $15=$obj_addr;
      var $16=$15;
      _mrb_ptr_to_str($agg_tmp4, $14, $16);
      _mrb_str_concat($13, $str, $agg_tmp4);
      var $17=$mrb_addr;
      var $18=$t;
      var $19=$str;
      var $call5=_iv_foreach($17, $18, 300, $19);
      var $20=$mrb_addr;
      _mrb_str_cat($tmp6, $20, $str, ((101828)|0), 1);
      var $21=$agg_result;
      var $22=$str;
      assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
      label = 5; break;
    case 4: 
      var $23=$mrb_addr;
      var $24=$obj_addr;
      var $25=$24;
      _mrb_obj_value117($agg_tmp7, $25);
      _mrb_any_to_s($agg_result, $23, $agg_tmp7);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value117($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_cat2($agg_result, $mrb, $str, $ptr) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $ptr_addr;
  $mrb_addr=$mrb;
  $ptr_addr=$ptr;
  var $0=$mrb_addr;
  var $1=$ptr_addr;
  _mrb_str_cat_cstr($agg_result, $0, $str, $1);
  STACKTOP = __stackBase__;
  return;
}
function _iv_foreach($mrb, $t, $func, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $t_addr;
      var $func_addr;
      var $p_addr;
      var $h;
      var $k;
      var $n;
      $mrb_addr=$mrb;
      $t_addr=$t;
      $func_addr=$func;
      $p_addr=$p;
      var $0=$t_addr;
      var $h1=(($0)|0);
      $h=$h1;
      var $1=$h;
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 15; break; }
    case 3: 
      $k=0;
      label = 4; break;
    case 4: 
      var $2=$k;
      var $3=$h;
      var $n_buckets=(($3)|0);
      var $4=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($2)|(0))!=(($4)|(0));
      if ($cmp) { label = 5; break; } else { label = 14; break; }
    case 5: 
      var $5=$k;
      var $div=Math.floor(((($5)>>>(0)))/(8));
      var $6=$h;
      var $e_flags=(($6+16)|0);
      var $7=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($7+$div)|0);
      var $8=HEAP8[($arrayidx)];
      var $conv=(($8)&(255));
      var $9=$k;
      var $rem=((($9)>>>(0)))%(8);
      var $arrayidx2=((114464+$rem)|0);
      var $10=HEAP8[($arrayidx2)];
      var $conv3=(($10)&(255));
      var $and=$conv & $conv3;
      var $tobool4=(($and)|(0))!=0;
      if ($tobool4) { label = 12; break; } else { label = 6; break; }
    case 6: 
      var $11=$k;
      var $div5=Math.floor(((($11)>>>(0)))/(8));
      var $12=$h;
      var $d_flags=(($12+20)|0);
      var $13=HEAP32[(($d_flags)>>2)];
      var $arrayidx6=(($13+$div5)|0);
      var $14=HEAP8[($arrayidx6)];
      var $conv7=(($14)&(255));
      var $15=$k;
      var $rem8=((($15)>>>(0)))%(8);
      var $arrayidx9=((114464+$rem8)|0);
      var $16=HEAP8[($arrayidx9)];
      var $conv10=(($16)&(255));
      var $and11=$conv7 & $conv10;
      var $tobool12=(($and11)|(0))!=0;
      if ($tobool12) { label = 12; break; } else { label = 7; break; }
    case 7: 
      var $17=$func_addr;
      var $18=$mrb_addr;
      var $19=$k;
      var $20=$h;
      var $keys=(($20+24)|0);
      var $21=HEAP32[(($keys)>>2)];
      var $arrayidx14=(($21+($19<<1))|0);
      var $22=HEAP16[(($arrayidx14)>>1)];
      var $23=$k;
      var $24=$h;
      var $vals=(($24+28)|0);
      var $25=HEAP32[(($vals)>>2)];
      var $arrayidx15=(($25+((($23)*(12))&-1))|0);
      var $26=$p_addr;
      var $call=FUNCTION_TABLE[$17]($18, $22, $arrayidx15, $26);
      $n=$call;
      var $27=$n;
      var $cmp16=(($27)|(0)) > 0;
      if ($cmp16) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $retval=0;
      label = 16; break;
    case 9: 
      var $28=$n;
      var $cmp19=(($28)|(0)) < 0;
      if ($cmp19) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $29=$h;
      var $30=$k;
      _kh_del_iv($29, $30);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $31=$k;
      var $inc=((($31)+(1))|0);
      $k=$inc;
      label = 4; break;
    case 14: 
      label = 15; break;
    case 15: 
      $retval=1;
      label = 16; break;
    case 16: 
      var $32=$retval;
      return $32;
    default: assert(0, "bad label: " + label);
  }
}
function _inspect_i($mrb, $sym, $v, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 88)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $sym_addr;
      var $p_addr;
      var $str=__stackBase__;
      var $s;
      var $len=(__stackBase__)+(12);
      var $tmp=(__stackBase__)+(16);
      var $tmp7=(__stackBase__)+(28);
      var $tmp8=(__stackBase__)+(40);
      var $tmp9=(__stackBase__)+(52);
      var $agg_tmp=(__stackBase__)+(64);
      var $tmp10=(__stackBase__)+(76);
      $mrb_addr=$mrb;
      $sym_addr=$sym;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      var $2=$str;
      var $3=$1;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      var $value=(($str)|0);
      var $p1=$value;
      var $4=HEAP32[(($p1)>>2)];
      var $5=$4;
      var $ptr=(($5+20)|0);
      var $6=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($6)|0);
      var $7=HEAP8[($arrayidx)];
      var $conv=(($7 << 24) >> 24);
      var $cmp=(($conv)|(0))==45;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $value3=(($str)|0);
      var $p4=$value3;
      var $8=HEAP32[(($p4)>>2)];
      var $9=$8;
      var $ptr5=(($9+20)|0);
      var $10=HEAP32[(($ptr5)>>2)];
      var $arrayidx6=(($10)|0);
      HEAP8[($arrayidx6)]=35;
      var $11=$mrb_addr;
      _mrb_str_cat($tmp, $11, $str, ((113204)|0), 1);
      label = 5; break;
    case 4: 
      var $12=$mrb_addr;
      _mrb_str_cat($tmp7, $12, $str, ((112368)|0), 2);
      label = 5; break;
    case 5: 
      var $13=$mrb_addr;
      var $14=$sym_addr;
      var $call=_mrb_sym2name_len($13, $14, $len);
      $s=$call;
      var $15=$mrb_addr;
      var $16=$s;
      var $17=HEAP32[(($len)>>2)];
      _mrb_str_cat($tmp8, $15, $str, $16, $17);
      var $18=$mrb_addr;
      _mrb_str_cat($tmp9, $18, $str, ((111804)|0), 1);
      var $19=$mrb_addr;
      var $20=$mrb_addr;
      _mrb_inspect($agg_tmp, $20, $v);
      _mrb_str_append($tmp10, $19, $str, $agg_tmp);
      STACKTOP = __stackBase__;
      return 0;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_iv_remove($agg_result, $mrb, $obj, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $sym_addr;
      var $t;
      var $val=__stackBase__;
      $mrb_addr=$mrb;
      $sym_addr=$sym;
      var $call=_obj_iv_p($obj);
      var $tobool=(($call << 24) >> 24)!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $value=(($obj)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $iv=(($1+12)|0);
      var $2=HEAP32[(($iv)>>2)];
      $t=$2;
      var $3=$t;
      var $tobool1=(($3)|(0))!=0;
      if ($tobool1) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $4=$mrb_addr;
      var $5=$t;
      var $6=$sym_addr;
      var $call2=_iv_del($4, $5, $6, $val);
      var $conv=(($call2)&(255));
      var $tobool3=(($conv)|(0))!=0;
      if ($tobool3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$agg_result;
      var $8=$val;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      label = 8; break;
    case 6: 
      label = 7; break;
    case 7: 
      _mrb_undef_value118($agg_result);
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _iv_del($mrb, $t, $sym, $vp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $t_addr;
      var $sym_addr;
      var $vp_addr;
      var $h;
      var $k;
      var $val=__stackBase__;
      $mrb_addr=$mrb;
      $t_addr=$t;
      $sym_addr=$sym;
      $vp_addr=$vp;
      var $0=$t_addr;
      var $h1=(($0)|0);
      $h=$h1;
      var $1=$h;
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $2=$h;
      var $3=$sym_addr;
      var $call=_kh_get_iv($2, $3);
      $k=$call;
      var $4=$k;
      var $5=$h;
      var $n_buckets=(($5)|0);
      var $6=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($4)|(0))!=(($6)|(0));
      if ($cmp) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $7=$k;
      var $8=$h;
      var $vals=(($8+28)|0);
      var $9=HEAP32[(($vals)>>2)];
      var $arrayidx=(($9+((($7)*(12))&-1))|0);
      var $10=$val;
      var $11=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      var $12=$h;
      var $13=$k;
      _kh_del_iv($12, $13);
      var $14=$vp_addr;
      var $tobool3=(($14)|(0))!=0;
      if ($tobool3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $15=$vp_addr;
      var $16=$15;
      var $17=$val;
      assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
      label = 6; break;
    case 6: 
      $retval=1;
      label = 9; break;
    case 7: 
      label = 8; break;
    case 8: 
      $retval=0;
      label = 9; break;
    case 9: 
      var $18=$retval;
      STACKTOP = __stackBase__;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_undef_value118($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=5;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_vm_iv_get($agg_result, $mrb, $sym) {
  var label = 0;
  var $mrb_addr;
  var $sym_addr;
  $mrb_addr=$mrb;
  $sym_addr=$sym;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $c=(($1+8)|0);
  var $2=HEAP32[(($c)>>2)];
  var $stack=(($2+4)|0);
  var $3=HEAP32[(($stack)>>2)];
  var $arrayidx=(($3)|0);
  var $4=$sym_addr;
  _mrb_iv_get($agg_result, $0, $arrayidx, $4);
  return;
}
function _mrb_vm_iv_set($mrb, $sym, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $sym_addr;
  $mrb_addr=$mrb;
  $sym_addr=$sym;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $c=(($1+8)|0);
  var $2=HEAP32[(($c)>>2)];
  var $stack=(($2+4)|0);
  var $3=HEAP32[(($stack)>>2)];
  var $arrayidx=(($3)|0);
  var $4=$sym_addr;
  _mrb_iv_set($0, $arrayidx, $4, $v);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_instance_variables($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ary=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      _mrb_ary_new($tmp, $0);
      var $1=$ary;
      var $2=$tmp;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      var $call=_obj_iv_p($self);
      var $conv=(($call)&(255));
      var $tobool=(($conv)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $value=(($self)|0);
      var $p=$value;
      var $3=HEAP32[(($p)>>2)];
      var $4=$3;
      var $iv=(($4+12)|0);
      var $5=HEAP32[(($iv)>>2)];
      var $tobool1=(($5)|(0))!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$mrb_addr;
      var $value2=(($self)|0);
      var $p3=$value2;
      var $7=HEAP32[(($p3)>>2)];
      var $8=$7;
      var $iv4=(($8+12)|0);
      var $9=HEAP32[(($iv4)>>2)];
      var $10=$ary;
      var $call5=_iv_foreach($6, $9, 114, $10);
      label = 5; break;
    case 5: 
      var $11=$agg_result;
      var $12=$ary;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _iv_i($mrb, $sym, $v, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $sym_addr;
      var $p_addr;
      var $ary=__stackBase__;
      var $s;
      var $len=(__stackBase__)+(12);
      var $agg_tmp=(__stackBase__)+(16);
      $mrb_addr=$mrb;
      $sym_addr=$sym;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      var $2=$ary;
      var $3=$1;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      var $4=$mrb_addr;
      var $5=$sym_addr;
      var $call=_mrb_sym2name_len($4, $5, $len);
      $s=$call;
      var $6=HEAP32[(($len)>>2)];
      var $cmp=(($6)>>>(0)) > 1;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $7=$s;
      var $arrayidx=(($7)|0);
      var $8=HEAP8[($arrayidx)];
      var $conv=(($8 << 24) >> 24);
      var $cmp1=(($conv)|(0))==64;
      if ($cmp1) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $9=$s;
      var $arrayidx4=(($9+1)|0);
      var $10=HEAP8[($arrayidx4)];
      var $conv5=(($10 << 24) >> 24);
      var $cmp6=(($conv5)|(0))!=64;
      if ($cmp6) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $11=$mrb_addr;
      var $12=$sym_addr;
      _mrb_symbol_value120($agg_tmp, $12);
      _mrb_ary_push($11, $ary, $agg_tmp);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return 0;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_class_variables($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ary=__stackBase__;
      var $c;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      _mrb_ary_new($tmp, $0);
      var $1=$ary;
      var $2=$tmp;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      var $value=(($mod)|0);
      var $p=$value;
      var $3=HEAP32[(($p)>>2)];
      var $4=$3;
      $c=$4;
      label = 3; break;
    case 3: 
      var $5=$c;
      var $tobool=(($5)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $6=$c;
      var $iv=(($6+12)|0);
      var $7=HEAP32[(($iv)>>2)];
      var $tobool1=(($7)|(0))!=0;
      if ($tobool1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$mrb_addr;
      var $9=$c;
      var $iv2=(($9+12)|0);
      var $10=HEAP32[(($iv2)>>2)];
      var $11=$ary;
      var $call=_iv_foreach($8, $10, 156, $11);
      label = 6; break;
    case 6: 
      var $12=$c;
      var $super=(($12+20)|0);
      var $13=HEAP32[(($super)>>2)];
      $c=$13;
      label = 3; break;
    case 7: 
      var $14=$agg_result;
      var $15=$ary;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _cv_i($mrb, $sym, $v, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $sym_addr;
      var $p_addr;
      var $ary=__stackBase__;
      var $s;
      var $len=(__stackBase__)+(12);
      var $agg_tmp=(__stackBase__)+(16);
      $mrb_addr=$mrb;
      $sym_addr=$sym;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      var $2=$ary;
      var $3=$1;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      var $4=$mrb_addr;
      var $5=$sym_addr;
      var $call=_mrb_sym2name_len($4, $5, $len);
      $s=$call;
      var $6=HEAP32[(($len)>>2)];
      var $cmp=(($6)>>>(0)) > 2;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $7=$s;
      var $arrayidx=(($7)|0);
      var $8=HEAP8[($arrayidx)];
      var $conv=(($8 << 24) >> 24);
      var $cmp1=(($conv)|(0))==64;
      if ($cmp1) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $9=$s;
      var $arrayidx4=(($9+1)|0);
      var $10=HEAP8[($arrayidx4)];
      var $conv5=(($10 << 24) >> 24);
      var $cmp6=(($conv5)|(0))==64;
      if ($cmp6) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $11=$mrb_addr;
      var $12=$sym_addr;
      _mrb_symbol_value120($agg_tmp, $12);
      _mrb_ary_push($11, $ary, $agg_tmp);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return 0;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_cv_get($agg_result, $mrb, $c, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $c_addr;
      var $sym_addr;
      var $cls;
      var $t;
      var $v=__stackBase__;
      var $agg_tmp=(__stackBase__)+(12);
      var $agg_tmp6=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      $c_addr=$c;
      $sym_addr=$sym;
      var $0=$c_addr;
      $cls=$0;
      label = 3; break;
    case 3: 
      var $1=$c_addr;
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $2=$c_addr;
      var $iv=(($2+12)|0);
      var $3=HEAP32[(($iv)>>2)];
      var $tobool1=(($3)|(0))!=0;
      if ($tobool1) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $4=$c_addr;
      var $iv2=(($4+12)|0);
      var $5=HEAP32[(($iv2)>>2)];
      $t=$5;
      var $6=$mrb_addr;
      var $7=$t;
      var $8=$sym_addr;
      var $call=_iv_get($6, $7, $8, $v);
      var $tobool3=(($call << 24) >> 24)!=0;
      if ($tobool3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $9=$agg_result;
      var $10=$v;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      label = 10; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $11=$c_addr;
      var $super=(($11+20)|0);
      var $12=HEAP32[(($super)>>2)];
      $c_addr=$12;
      label = 3; break;
    case 9: 
      var $13=$mrb_addr;
      var $14=$sym_addr;
      var $15=$mrb_addr;
      var $16=$sym_addr;
      _mrb_sym2str($agg_tmp, $15, $16);
      var $17=$cls;
      var $18=$17;
      _mrb_obj_value117($agg_tmp6, $18);
      _mrb_name_error($13, $14, ((99244)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp6)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp6)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp6)+(8))>>2)],tempInt));
      _mrb_nil_value116($agg_result);
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_cv_get($agg_result, $mrb, $mod, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $sym_addr;
  $mrb_addr=$mrb;
  $sym_addr=$sym;
  var $0=$mrb_addr;
  var $value=(($mod)|0);
  var $p=$value;
  var $1=HEAP32[(($p)>>2)];
  var $2=$1;
  var $3=$sym_addr;
  _mrb_mod_cv_get($agg_result, $0, $2, $3);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_cv_set($mrb, $c, $sym, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $c_addr;
      var $sym_addr;
      var $cls;
      var $t;
      $mrb_addr=$mrb;
      $c_addr=$c;
      $sym_addr=$sym;
      var $0=$c_addr;
      $cls=$0;
      label = 3; break;
    case 3: 
      var $1=$c_addr;
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $2=$c_addr;
      var $iv=(($2+12)|0);
      var $3=HEAP32[(($iv)>>2)];
      var $tobool1=(($3)|(0))!=0;
      if ($tobool1) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $4=$c_addr;
      var $iv2=(($4+12)|0);
      var $5=HEAP32[(($iv2)>>2)];
      $t=$5;
      var $6=$mrb_addr;
      var $7=$t;
      var $8=$sym_addr;
      var $call=_iv_get($6, $7, $8, 0);
      var $tobool3=(($call << 24) >> 24)!=0;
      if ($tobool3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $9=$mrb_addr;
      var $10=$c_addr;
      var $11=$10;
      _mrb_write_barrier($9, $11);
      var $12=$mrb_addr;
      var $13=$t;
      var $14=$sym_addr;
      _iv_put($12, $13, $14, $v);
      label = 12; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $15=$c_addr;
      var $super=(($15+20)|0);
      var $16=HEAP32[(($super)>>2)];
      $c_addr=$16;
      label = 3; break;
    case 9: 
      var $17=$cls;
      var $iv6=(($17+12)|0);
      var $18=HEAP32[(($iv6)>>2)];
      var $tobool7=(($18)|(0))!=0;
      if ($tobool7) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $19=$mrb_addr;
      var $call9=_iv_new($19);
      var $20=$cls;
      var $iv10=(($20+12)|0);
      HEAP32[(($iv10)>>2)]=$call9;
      label = 11; break;
    case 11: 
      var $21=$mrb_addr;
      var $22=$cls;
      var $23=$22;
      _mrb_write_barrier($21, $23);
      var $24=$mrb_addr;
      var $25=$cls;
      var $iv12=(($25+12)|0);
      var $26=HEAP32[(($iv12)>>2)];
      var $27=$sym_addr;
      _iv_put($24, $26, $27, $v);
      label = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_cv_set($mrb, $mod, $sym, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $sym_addr;
  $mrb_addr=$mrb;
  $sym_addr=$sym;
  var $0=$mrb_addr;
  var $value=(($mod)|0);
  var $p=$value;
  var $1=HEAP32[(($p)>>2)];
  var $2=$1;
  var $3=$sym_addr;
  _mrb_mod_cv_set($0, $2, $3, $v);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_cv_defined($mrb, $c, $sym) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $c_addr;
      var $sym_addr;
      var $t;
      $mrb_addr=$mrb;
      $c_addr=$c;
      $sym_addr=$sym;
      label = 3; break;
    case 3: 
      var $0=$c_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $1=$c_addr;
      var $iv=(($1+12)|0);
      var $2=HEAP32[(($iv)>>2)];
      var $tobool1=(($2)|(0))!=0;
      if ($tobool1) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $3=$c_addr;
      var $iv2=(($3+12)|0);
      var $4=HEAP32[(($iv2)>>2)];
      $t=$4;
      var $5=$mrb_addr;
      var $6=$t;
      var $7=$sym_addr;
      var $call=_iv_get($5, $6, $7, 0);
      var $tobool3=(($call << 24) >> 24)!=0;
      if ($tobool3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $retval=1;
      label = 10; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $8=$c_addr;
      var $super=(($8+20)|0);
      var $9=HEAP32[(($super)>>2)];
      $c_addr=$9;
      label = 3; break;
    case 9: 
      $retval=0;
      label = 10; break;
    case 10: 
      var $10=$retval;
      return $10;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_cv_defined($mrb, $mod, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $sym_addr;
  $mrb_addr=$mrb;
  $sym_addr=$sym;
  var $0=$mrb_addr;
  var $value=(($mod)|0);
  var $p=$value;
  var $1=HEAP32[(($p)>>2)];
  var $2=$1;
  var $3=$sym_addr;
  var $call=_mrb_mod_cv_defined($0, $2, $3);
  STACKTOP = __stackBase__;
  return $call;
}
function _mrb_vm_cv_get($agg_result, $mrb, $sym) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $sym_addr;
      var $c;
      $mrb_addr=$mrb;
      $sym_addr=$sym;
      var $0=$mrb_addr;
      var $c1=(($0+8)|0);
      var $1=HEAP32[(($c1)>>2)];
      var $ci=(($1+16)|0);
      var $2=HEAP32[(($ci)>>2)];
      var $proc=(($2+4)|0);
      var $3=HEAP32[(($proc)>>2)];
      var $target_class=(($3+16)|0);
      var $4=HEAP32[(($target_class)>>2)];
      $c=$4;
      var $5=$c;
      var $tobool=(($5)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $6=$mrb_addr;
      var $c2=(($6+8)|0);
      var $7=HEAP32[(($c2)>>2)];
      var $ci3=(($7+16)|0);
      var $8=HEAP32[(($ci3)>>2)];
      var $target_class4=(($8+28)|0);
      var $9=HEAP32[(($target_class4)>>2)];
      $c=$9;
      label = 4; break;
    case 4: 
      var $10=$mrb_addr;
      var $11=$c;
      var $12=$sym_addr;
      _mrb_mod_cv_get($agg_result, $10, $11, $12);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_vm_cv_set($mrb, $sym, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $sym_addr;
      var $c;
      var $t;
      $mrb_addr=$mrb;
      $sym_addr=$sym;
      var $0=$mrb_addr;
      var $c1=(($0+8)|0);
      var $1=HEAP32[(($c1)>>2)];
      var $ci=(($1+16)|0);
      var $2=HEAP32[(($ci)>>2)];
      var $proc=(($2+4)|0);
      var $3=HEAP32[(($proc)>>2)];
      var $target_class=(($3+16)|0);
      var $4=HEAP32[(($target_class)>>2)];
      $c=$4;
      var $5=$c;
      var $tobool=(($5)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $6=$mrb_addr;
      var $c2=(($6+8)|0);
      var $7=HEAP32[(($c2)>>2)];
      var $ci3=(($7+16)|0);
      var $8=HEAP32[(($ci3)>>2)];
      var $target_class4=(($8+28)|0);
      var $9=HEAP32[(($target_class4)>>2)];
      $c=$9;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $10=$c;
      var $tobool5=(($10)|(0))!=0;
      if ($tobool5) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $11=$c;
      var $iv=(($11+12)|0);
      var $12=HEAP32[(($iv)>>2)];
      var $tobool6=(($12)|(0))!=0;
      if ($tobool6) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $13=$c;
      var $iv8=(($13+12)|0);
      var $14=HEAP32[(($iv8)>>2)];
      $t=$14;
      var $15=$mrb_addr;
      var $16=$t;
      var $17=$sym_addr;
      var $call=_iv_get($15, $16, $17, 0);
      var $tobool9=(($call << 24) >> 24)!=0;
      if ($tobool9) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $18=$mrb_addr;
      var $19=$c;
      var $20=$19;
      _mrb_write_barrier($18, $20);
      var $21=$mrb_addr;
      var $22=$t;
      var $23=$sym_addr;
      _iv_put($21, $22, $23, $v);
      label = 14; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $24=$c;
      var $super=(($24+20)|0);
      var $25=HEAP32[(($super)>>2)];
      $c=$25;
      label = 5; break;
    case 11: 
      var $26=$mrb_addr;
      var $c13=(($26+8)|0);
      var $27=HEAP32[(($c13)>>2)];
      var $ci14=(($27+16)|0);
      var $28=HEAP32[(($ci14)>>2)];
      var $target_class15=(($28+28)|0);
      var $29=HEAP32[(($target_class15)>>2)];
      $c=$29;
      var $30=$c;
      var $iv16=(($30+12)|0);
      var $31=HEAP32[(($iv16)>>2)];
      var $tobool17=(($31)|(0))!=0;
      if ($tobool17) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $32=$mrb_addr;
      var $call19=_iv_new($32);
      var $33=$c;
      var $iv20=(($33+12)|0);
      HEAP32[(($iv20)>>2)]=$call19;
      label = 13; break;
    case 13: 
      var $34=$mrb_addr;
      var $35=$c;
      var $36=$35;
      _mrb_write_barrier($34, $36);
      var $37=$mrb_addr;
      var $38=$c;
      var $iv22=(($38+12)|0);
      var $39=HEAP32[(($iv22)>>2)];
      var $40=$sym_addr;
      _iv_put($37, $39, $40, $v);
      label = 14; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_const_defined($mrb, $mod, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $sym_addr;
      var $m;
      var $t;
      $mrb_addr=$mrb;
      $sym_addr=$sym;
      var $value=(($mod)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $m=$1;
      var $2=$m;
      var $iv=(($2+12)|0);
      var $3=HEAP32[(($iv)>>2)];
      $t=$3;
      var $4=$t;
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      var $5=$mrb_addr;
      var $6=$t;
      var $7=$sym_addr;
      var $call=_iv_get($5, $6, $7, 0);
      $retval=$call;
      label = 5; break;
    case 5: 
      var $8=$retval;
      STACKTOP = __stackBase__;
      return $8;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_const_get($agg_result, $mrb, $mod, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $sym_addr;
  $mrb_addr=$mrb;
  $sym_addr=$sym;
  var $0=$mrb_addr;
  _mod_const_check($0, $mod);
  var $1=$mrb_addr;
  var $value=(($mod)|0);
  var $p=$value;
  var $2=HEAP32[(($p)>>2)];
  var $3=$2;
  var $4=$sym_addr;
  _const_get($agg_result, $1, $3, $4);
  STACKTOP = __stackBase__;
  return;
}
function _mod_const_check($mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      $mrb_addr=$mrb;
      var $tt=(($mod+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      if ((($0)|(0))==9 | (($0)|(0))==10 | (($0)|(0))==12) {
        label = 3; break;
      }
      else {
      label = 4; break;
      }
    case 3: 
      label = 5; break;
    case 4: 
      var $1=$mrb_addr;
      var $2=$mrb_addr;
      var $call=_mrb_class_get($2, ((94056)|0));
      _mrb_raise($1, $call, ((113852)|0));
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _const_get($agg_result, $mrb, $base, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $base_addr;
      var $sym_addr;
      var $c;
      var $v=__stackBase__;
      var $t;
      var $retry;
      var $cm;
      var $agg_tmp=(__stackBase__)+(12);
      var $name=(__stackBase__)+(24);
      var $agg_tmp18=(__stackBase__)+(36);
      var $agg_tmp22=(__stackBase__)+(48);
      $mrb_addr=$mrb;
      $base_addr=$base;
      $sym_addr=$sym;
      var $0=$base_addr;
      $c=$0;
      $retry=0;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $1=$c;
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $2=$c;
      var $iv=(($2+12)|0);
      var $3=HEAP32[(($iv)>>2)];
      var $tobool1=(($3)|(0))!=0;
      if ($tobool1) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $4=$c;
      var $iv2=(($4+12)|0);
      var $5=HEAP32[(($iv2)>>2)];
      $t=$5;
      var $6=$mrb_addr;
      var $7=$t;
      var $8=$sym_addr;
      var $call=_iv_get($6, $7, $8, $v);
      var $tobool3=(($call << 24) >> 24)!=0;
      if ($tobool3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $9=$agg_result;
      var $10=$v;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      label = 20; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $11=$c;
      var $super=(($11+20)|0);
      var $12=HEAP32[(($super)>>2)];
      $c=$12;
      label = 4; break;
    case 10: 
      var $13=$retry;
      var $tobool6=(($13 << 24) >> 24)!=0;
      if ($tobool6) { label = 14; break; } else { label = 11; break; }
    case 11: 
      var $14=$base_addr;
      var $tobool7=(($14)|(0))!=0;
      if ($tobool7) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $15=$base_addr;
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $bf_clear=$17 & 255;
      var $cmp=(($bf_clear)|(0))==10;
      if ($cmp) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $18=$mrb_addr;
      var $object_class=(($18+44)|0);
      var $19=HEAP32[(($object_class)>>2)];
      $c=$19;
      $retry=1;
      label = 3; break;
    case 14: 
      var $20=$base_addr;
      $c=$20;
      var $21=$mrb_addr;
      var $call11=_mrb_intern2($21, ((95936)|0), 13);
      $cm=$call11;
      label = 15; break;
    case 15: 
      var $22=$c;
      var $tobool13=(($22)|(0))!=0;
      if ($tobool13) { label = 16; break; } else { label = 19; break; }
    case 16: 
      var $23=$mrb_addr;
      var $24=$c;
      var $25=$24;
      _mrb_obj_value117($agg_tmp, $25);
      var $26=$cm;
      var $call15=_mrb_respond_to($23, $agg_tmp, $26);
      var $tobool16=(($call15)|(0))!=0;
      if ($tobool16) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $27=$sym_addr;
      _mrb_symbol_value120($name, $27);
      var $28=$mrb_addr;
      var $29=$c;
      var $30=$29;
      _mrb_obj_value117($agg_tmp18, $30);
      var $31=$cm;
      _mrb_funcall_argv($agg_result, $28, $agg_tmp18, $31, 1, $name);
      label = 20; break;
    case 18: 
      var $32=$c;
      var $super20=(($32+20)|0);
      var $33=HEAP32[(($super20)>>2)];
      $c=$33;
      label = 15; break;
    case 19: 
      var $34=$mrb_addr;
      var $35=$sym_addr;
      var $36=$mrb_addr;
      var $37=$sym_addr;
      _mrb_sym2str($agg_tmp22, $36, $37);
      _mrb_name_error($34, $35, ((94852)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp22)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp22)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp22)+(8))>>2)],tempInt));
      _mrb_nil_value116($agg_result);
      label = 20; break;
    case 20: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_vm_const_get($agg_result, $mrb, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $sym_addr;
      var $c;
      var $c27;
      var $v=__stackBase__;
      $mrb_addr=$mrb;
      $sym_addr=$sym;
      var $0=$mrb_addr;
      var $c1=(($0+8)|0);
      var $1=HEAP32[(($c1)>>2)];
      var $ci=(($1+16)|0);
      var $2=HEAP32[(($ci)>>2)];
      var $proc=(($2+4)|0);
      var $3=HEAP32[(($proc)>>2)];
      var $target_class=(($3+16)|0);
      var $4=HEAP32[(($target_class)>>2)];
      $c=$4;
      var $5=$c;
      var $tobool=(($5)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $6=$mrb_addr;
      var $c2=(($6+8)|0);
      var $7=HEAP32[(($c2)>>2)];
      var $ci3=(($7+16)|0);
      var $8=HEAP32[(($ci3)>>2)];
      var $target_class4=(($8+28)|0);
      var $9=HEAP32[(($target_class4)>>2)];
      $c=$9;
      label = 4; break;
    case 4: 
      var $10=$c;
      var $tobool5=(($10)|(0))!=0;
      if ($tobool5) { label = 5; break; } else { label = 16; break; }
    case 5: 
      var $11=$c;
      var $iv=(($11+12)|0);
      var $12=HEAP32[(($iv)>>2)];
      var $tobool8=(($12)|(0))!=0;
      if ($tobool8) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $13=$mrb_addr;
      var $14=$c;
      var $iv9=(($14+12)|0);
      var $15=HEAP32[(($iv9)>>2)];
      var $16=$sym_addr;
      var $call=_iv_get($13, $15, $16, $v);
      var $conv=(($call)&(255));
      var $tobool10=(($conv)|(0))!=0;
      if ($tobool10) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $17=$agg_result;
      var $18=$v;
      assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
      label = 17; break;
    case 8: 
      var $19=$c;
      $c27=$19;
      label = 9; break;
    case 9: 
      var $20=$mrb_addr;
      var $21=$c27;
      var $call13=_mrb_class_outer_module($20, $21);
      $c27=$call13;
      var $22=$c27;
      var $tobool14=(($22)|(0))!=0;
      if ($tobool14) { label = 11; break; } else { label = 10; break; }
    case 10: 
      label = 15; break;
    case 11: 
      var $23=$c27;
      var $iv17=(($23+12)|0);
      var $24=HEAP32[(($iv17)>>2)];
      var $tobool18=(($24)|(0))!=0;
      if ($tobool18) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $25=$mrb_addr;
      var $26=$c27;
      var $iv20=(($26+12)|0);
      var $27=HEAP32[(($iv20)>>2)];
      var $28=$sym_addr;
      var $call21=_iv_get($25, $27, $28, $v);
      var $conv22=(($call21)&(255));
      var $tobool23=(($conv22)|(0))!=0;
      if ($tobool23) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $29=$agg_result;
      var $30=$v;
      assert(12 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($29)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];
      label = 17; break;
    case 14: 
      label = 9; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $31=$mrb_addr;
      var $32=$c;
      var $33=$sym_addr;
      _const_get($agg_result, $31, $32, $33);
      label = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_const_set($mrb, $mod, $sym, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $sym_addr;
  $mrb_addr=$mrb;
  $sym_addr=$sym;
  var $0=$mrb_addr;
  _mod_const_check($0, $mod);
  var $1=$mrb_addr;
  var $2=$sym_addr;
  _mrb_iv_set($1, $mod, $2, $v);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_vm_const_set($mrb, $sym, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $sym_addr;
      var $c;
      $mrb_addr=$mrb;
      $sym_addr=$sym;
      var $0=$mrb_addr;
      var $c1=(($0+8)|0);
      var $1=HEAP32[(($c1)>>2)];
      var $ci=(($1+16)|0);
      var $2=HEAP32[(($ci)>>2)];
      var $proc=(($2+4)|0);
      var $3=HEAP32[(($proc)>>2)];
      var $target_class=(($3+16)|0);
      var $4=HEAP32[(($target_class)>>2)];
      $c=$4;
      var $5=$c;
      var $tobool=(($5)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $6=$mrb_addr;
      var $c2=(($6+8)|0);
      var $7=HEAP32[(($c2)>>2)];
      var $ci3=(($7+16)|0);
      var $8=HEAP32[(($ci3)>>2)];
      var $target_class4=(($8+28)|0);
      var $9=HEAP32[(($target_class4)>>2)];
      $c=$9;
      label = 4; break;
    case 4: 
      var $10=$mrb_addr;
      var $11=$c;
      var $12=$11;
      var $13=$sym_addr;
      _mrb_obj_iv_set($10, $12, $13, $v);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_define_const($mrb, $mod, $name, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $mod_addr;
  var $name_addr;
  $mrb_addr=$mrb;
  $mod_addr=$mod;
  $name_addr=$name;
  var $0=$mrb_addr;
  var $1=$mod_addr;
  var $2=$1;
  var $3=$mrb_addr;
  var $4=$name_addr;
  var $call=_mrb_intern119($3, $4);
  _mrb_obj_iv_set($0, $2, $call, $v);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_intern119($mrb, $cstr) {
  var label = 0;
  var $mrb_addr;
  var $cstr_addr;
  $mrb_addr=$mrb;
  $cstr_addr=$cstr;
  var $0=$mrb_addr;
  var $1=$cstr_addr;
  var $call=_mrb_intern_cstr($0, $1);
  return $call;
}
function _mrb_mod_constants($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ary=__stackBase__;
      var $c;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $value=(($mod)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $c=$1;
      var $2=$mrb_addr;
      _mrb_ary_new($tmp, $2);
      var $3=$ary;
      var $4=$tmp;
      assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
      label = 3; break;
    case 3: 
      var $5=$c;
      var $tobool=(($5)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $6=$c;
      var $iv=(($6+12)|0);
      var $7=HEAP32[(($iv)>>2)];
      var $tobool1=(($7)|(0))!=0;
      if ($tobool1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$mrb_addr;
      var $9=$c;
      var $iv2=(($9+12)|0);
      var $10=HEAP32[(($iv2)>>2)];
      var $11=$ary;
      var $call=_iv_foreach($8, $10, 714, $11);
      label = 6; break;
    case 6: 
      var $12=$c;
      var $super=(($12+20)|0);
      var $13=HEAP32[(($super)>>2)];
      $c=$13;
      var $14=$c;
      var $15=$mrb_addr;
      var $object_class=(($15+44)|0);
      var $16=HEAP32[(($object_class)>>2)];
      var $cmp=(($14)|(0))==(($16)|(0));
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      label = 3; break;
    case 9: 
      var $17=$agg_result;
      var $18=$ary;
      assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _const_i($mrb, $sym, $v, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $sym_addr;
      var $p_addr;
      var $ary=__stackBase__;
      var $s;
      var $len=(__stackBase__)+(12);
      var $agg_tmp=(__stackBase__)+(16);
      $mrb_addr=$mrb;
      $sym_addr=$sym;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      var $2=$ary;
      var $3=$1;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      var $4=$mrb_addr;
      var $5=$sym_addr;
      var $call=_mrb_sym2name_len($4, $5, $len);
      $s=$call;
      var $6=HEAP32[(($len)>>2)];
      var $cmp=(($6)>>>(0)) > 1;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $7=$s;
      var $arrayidx=(($7)|0);
      var $8=HEAP8[($arrayidx)];
      var $conv=(($8)&(255));
      var $call1=_isupper($conv);
      var $tobool=(($call1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $9=$mrb_addr;
      var $10=$sym_addr;
      _mrb_symbol_value120($agg_tmp, $10);
      _mrb_ary_push($9, $ary, $agg_tmp);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return 0;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_gv_get($agg_result, $mrb, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $sym_addr;
      var $v=__stackBase__;
      $mrb_addr=$mrb;
      $sym_addr=$sym;
      var $0=$mrb_addr;
      var $globals=(($0+20)|0);
      var $1=HEAP32[(($globals)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value116($agg_result);
      label = 7; break;
    case 4: 
      var $2=$mrb_addr;
      var $3=$mrb_addr;
      var $globals1=(($3+20)|0);
      var $4=HEAP32[(($globals1)>>2)];
      var $5=$sym_addr;
      var $call=_iv_get($2, $4, $5, $v);
      var $tobool2=(($call << 24) >> 24)!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      label = 7; break;
    case 6: 
      _mrb_nil_value116($agg_result);
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_gv_set($mrb, $sym, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $sym_addr;
      var $t;
      $mrb_addr=$mrb;
      $sym_addr=$sym;
      var $0=$mrb_addr;
      var $globals=(($0+20)|0);
      var $1=HEAP32[(($globals)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$mrb_addr;
      var $call=_iv_new($2);
      var $3=$mrb_addr;
      var $globals1=(($3+20)|0);
      HEAP32[(($globals1)>>2)]=$call;
      $t=$call;
      label = 5; break;
    case 4: 
      var $4=$mrb_addr;
      var $globals2=(($4+20)|0);
      var $5=HEAP32[(($globals2)>>2)];
      $t=$5;
      label = 5; break;
    case 5: 
      var $6=$mrb_addr;
      var $7=$t;
      var $8=$sym_addr;
      _iv_put($6, $7, $8, $v);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_f_global_variables($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $t;
      var $ary=__stackBase__;
      var $i;
      var $buf=(__stackBase__)+(12);
      var $agg_tmp=(__stackBase__)+(16);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $globals=(($0+20)|0);
      var $1=HEAP32[(($globals)>>2)];
      $t=$1;
      var $2=$mrb_addr;
      _mrb_ary_new($ary, $2);
      var $3=$t;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$mrb_addr;
      var $5=$t;
      var $6=$ary;
      var $call=_iv_foreach($4, $5, 248, $6);
      label = 4; break;
    case 4: 
      var $arrayidx=(($buf)|0);
      HEAP8[($arrayidx)]=36;
      var $arrayidx1=(($buf+2)|0);
      HEAP8[($arrayidx1)]=0;
      $i=1;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $cmp=(($7)>>>(0)) <= 9;
      if ($cmp) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $8=$i;
      var $add=((($8)+(48))|0);
      var $conv=(($add) & 255);
      var $arrayidx2=(($buf+1)|0);
      HEAP8[($arrayidx2)]=$conv;
      var $9=$mrb_addr;
      var $10=$mrb_addr;
      var $arraydecay=(($buf)|0);
      var $call3=_mrb_intern2($10, $arraydecay, 2);
      _mrb_symbol_value120($agg_tmp, $call3);
      _mrb_ary_push($9, $ary, $agg_tmp);
      label = 7; break;
    case 7: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $12=$agg_result;
      var $13=$ary;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _gv_i($mrb, $sym, $v, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $sym_addr;
  var $p_addr;
  var $ary=__stackBase__;
  var $agg_tmp=(__stackBase__)+(12);
  $mrb_addr=$mrb;
  $sym_addr=$sym;
  $p_addr=$p;
  var $0=$p_addr;
  var $1=$0;
  var $2=$ary;
  var $3=$1;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  var $4=$mrb_addr;
  var $5=$sym_addr;
  _mrb_symbol_value120($agg_tmp, $5);
  _mrb_ary_push($4, $ary, $agg_tmp);
  STACKTOP = __stackBase__;
  return 0;
}
function _mrb_symbol_value120($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=4;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $sym=$value;
      HEAP16[(($sym)>>1)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_const_defined_at($mrb, $klass, $id) {
  var label = 0;
  var $mrb_addr;
  var $klass_addr;
  var $id_addr;
  $mrb_addr=$mrb;
  $klass_addr=$klass;
  $id_addr=$id;
  var $0=$mrb_addr;
  var $1=$klass_addr;
  var $2=$id_addr;
  var $call=_mrb_const_defined_0($0, $1, $2, 1, 0);
  var $conv=(($call)&(255));
  return $conv;
}
function _mrb_const_defined_0($mrb, $klass, $id, $exclude, $recurse) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $klass_addr;
      var $id_addr;
      var $exclude_addr;
      var $recurse_addr;
      var $tmp;
      var $mod_retry;
      $mrb_addr=$mrb;
      $klass_addr=$klass;
      $id_addr=$id;
      $exclude_addr=$exclude;
      $recurse_addr=$recurse;
      $mod_retry=0;
      var $0=$klass_addr;
      $tmp=$0;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $1=$tmp;
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 12; break; }
    case 5: 
      var $2=$tmp;
      var $iv=(($2+12)|0);
      var $3=HEAP32[(($iv)>>2)];
      var $tobool2=(($3)|(0))!=0;
      if ($tobool2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $4=$mrb_addr;
      var $5=$tmp;
      var $iv3=(($5+12)|0);
      var $6=HEAP32[(($iv3)>>2)];
      var $7=$id_addr;
      var $call=_iv_get($4, $6, $7, 0);
      var $conv=(($call)&(255));
      var $tobool4=(($conv)|(0))!=0;
      if ($tobool4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=1;
      label = 17; break;
    case 8: 
      var $8=$recurse_addr;
      var $tobool5=(($8 << 24) >> 24)!=0;
      if ($tobool5) { label = 11; break; } else { label = 9; break; }
    case 9: 
      var $9=$klass_addr;
      var $10=$mrb_addr;
      var $object_class=(($10+44)|0);
      var $11=HEAP32[(($object_class)>>2)];
      var $cmp=(($9)|(0))!=(($11)|(0));
      if ($cmp) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $12=$tmp;
      var $super=(($12+20)|0);
      var $13=HEAP32[(($super)>>2)];
      $tmp=$13;
      label = 4; break;
    case 12: 
      var $14=$exclude_addr;
      var $tobool10=(($14 << 24) >> 24)!=0;
      if ($tobool10) { label = 16; break; } else { label = 13; break; }
    case 13: 
      var $15=$mod_retry;
      var $tobool12=(($15 << 24) >> 24)!=0;
      if ($tobool12) { label = 16; break; } else { label = 14; break; }
    case 14: 
      var $16=$klass_addr;
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $bf_clear=$18 & 255;
      var $cmp14=(($bf_clear)|(0))==10;
      if ($cmp14) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $mod_retry=1;
      var $19=$mrb_addr;
      var $object_class17=(($19+44)|0);
      var $20=HEAP32[(($object_class17)>>2)];
      $tmp=$20;
      label = 3; break;
    case 16: 
      $retval=0;
      label = 17; break;
    case 17: 
      var $21=$retval;
      return $21;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_attr_get($agg_result, $mrb, $obj, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $id_addr;
  $mrb_addr=$mrb;
  $id_addr=$id;
  var $0=$mrb_addr;
  var $1=$id_addr;
  _mrb_iv_get($agg_result, $0, $obj, $1);
  STACKTOP = __stackBase__;
  return;
}
function _csym_i($mrb, $sym, $v, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $sym_addr;
      var $p_addr;
      var $a;
      var $c;
      $mrb_addr=$mrb;
      $sym_addr=$sym;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $a=$1;
      var $2=$a;
      var $c1=(($2)|0);
      var $3=HEAP32[(($c1)>>2)];
      $c=$3;
      var $tt=(($v+8)|0);
      var $4=HEAP32[(($tt)>>2)];
      var $5=$c;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $bf_clear=$7 & 255;
      var $cmp=(($4)|(0))==(($bf_clear)|(0));
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $value=(($v)|0);
      var $p2=$value;
      var $8=HEAP32[(($p2)>>2)];
      var $9=$8;
      var $10=$c;
      var $cmp3=(($9)|(0))==(($10)|(0));
      if ($cmp3) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $11=$sym_addr;
      var $12=$a;
      var $sym4=(($12+4)|0);
      HEAP16[(($sym4)>>1)]=$11;
      $retval=1;
      label = 6; break;
    case 5: 
      $retval=0;
      label = 6; break;
    case 6: 
      var $13=$retval;
      STACKTOP = __stackBase__;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_class($mrb, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      $mrb_addr=$mrb;
      var $tt=(($v+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      if ((($0)|(0))==0) {
        label = 3; break;
      }
      else if ((($0)|(0))==2) {
        label = 6; break;
      }
      else if ((($0)|(0))==4) {
        label = 7; break;
      }
      else if ((($0)|(0))==3) {
        label = 8; break;
      }
      else if ((($0)|(0))==6) {
        label = 9; break;
      }
      else {
      label = 10; break;
      }
    case 3: 
      var $value=(($v)|0);
      var $i=$value;
      var $1=HEAP32[(($i)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$mrb_addr;
      var $false_class=(($2+84)|0);
      var $3=HEAP32[(($false_class)>>2)];
      $retval=$3;
      label = 11; break;
    case 5: 
      var $4=$mrb_addr;
      var $nil_class=(($4+88)|0);
      var $5=HEAP32[(($nil_class)>>2)];
      $retval=$5;
      label = 11; break;
    case 6: 
      var $6=$mrb_addr;
      var $true_class=(($6+80)|0);
      var $7=HEAP32[(($true_class)>>2)];
      $retval=$7;
      label = 11; break;
    case 7: 
      var $8=$mrb_addr;
      var $symbol_class=(($8+92)|0);
      var $9=HEAP32[(($symbol_class)>>2)];
      $retval=$9;
      label = 11; break;
    case 8: 
      var $10=$mrb_addr;
      var $fixnum_class=(($10+76)|0);
      var $11=HEAP32[(($fixnum_class)>>2)];
      $retval=$11;
      label = 11; break;
    case 9: 
      var $12=$mrb_addr;
      var $float_class=(($12+72)|0);
      var $13=HEAP32[(($float_class)>>2)];
      $retval=$13;
      label = 11; break;
    case 10: 
      var $value5=(($v)|0);
      var $p=$value5;
      var $14=HEAP32[(($p)>>2)];
      var $15=$14;
      var $c=(($15+4)|0);
      var $16=HEAP32[(($c)>>2)];
      $retval=$16;
      label = 11; break;
    case 11: 
      var $17=$retval;
      STACKTOP = __stackBase__;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_class_sym($mrb, $c, $outer) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $c_addr;
      var $outer_addr;
      var $name=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      var $arg=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      $c_addr=$c;
      $outer_addr=$outer;
      var $0=$mrb_addr;
      var $1=$c_addr;
      var $2=$1;
      var $3=$mrb_addr;
      var $call=_mrb_intern2($3, ((97084)|0), 11);
      _mrb_obj_iv_get($tmp, $0, $2, $call);
      var $4=$name;
      var $5=$tmp;
      assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
      var $tt=(($name+8)|0);
      var $6=HEAP32[(($tt)>>2)];
      var $cmp=(($6)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $value=(($name)|0);
      var $i=$value;
      var $7=HEAP32[(($i)>>2)];
      var $tobool=(($7)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 4; break; }
    case 4: 
      var $8=$outer_addr;
      var $tobool1=(($8)|(0))!=0;
      if ($tobool1) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $retval=0;
      label = 8; break;
    case 6: 
      var $9=$c_addr;
      var $c4=(($arg)|0);
      HEAP32[(($c4)>>2)]=$9;
      var $sym=(($arg+4)|0);
      HEAP16[(($sym)>>1)]=0;
      var $10=$mrb_addr;
      var $11=$outer_addr;
      var $iv=(($11+12)|0);
      var $12=HEAP32[(($iv)>>2)];
      var $13=$arg;
      var $call5=_iv_foreach($10, $12, 322, $13);
      var $sym6=(($arg+4)|0);
      var $14=HEAP16[(($sym6)>>1)];
      $retval=$14;
      label = 8; break;
    case 7: 
      var $value7=(($name)|0);
      var $sym8=$value7;
      var $15=HEAP16[(($sym8)>>1)];
      $retval=$15;
      label = 8; break;
    case 8: 
      var $16=$retval;
      STACKTOP = __stackBase__;
      return $16;
    default: assert(0, "bad label: " + label);
  }
}
function _iv_mark_i($mrb, $sym, $v, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $sym_addr;
      var $p_addr;
      $mrb_addr=$mrb;
      $sym_addr=$sym;
      $p_addr=$p;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)>>>(0)) >= 8;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $1=$mrb_addr;
      var $value=(($v)|0);
      var $p1=$value;
      var $2=HEAP32[(($p1)>>2)];
      var $3=$2;
      _mrb_gc_mark($1, $3);
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return 0;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_funcall($agg_result, $mrb, $self, $name, $argc, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 212)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $name_addr;
      var $argc_addr;
      var $mid;
      var $v=__stackBase__;
      var $ap=(__stackBase__)+(12);
      var $argv=(__stackBase__)+(16);
      var $ap6=(__stackBase__)+(208);
      var $i;
      $mrb_addr=$mrb;
      $name_addr=$name;
      $argc_addr=$argc;
      var $0=$mrb_addr;
      var $1=$name_addr;
      var $call=_mrb_intern140($0, $1);
      $mid=$call;
      var $2=$argc_addr;
      var $cmp=(($2)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      var $4=$mid;
      _mrb_funcall_argv($agg_result, $3, $self, $4, 0, 0);
      label = 13; break;
    case 4: 
      var $5=$argc_addr;
      var $cmp1=(($5)|(0))==1;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $ap3=$ap;
      HEAP32[(($ap3)>>2)]=varrp;
      var $ap_cur=HEAP32[(($ap)>>2)];
      var $6=$ap_cur;
      var $ap_next=(($ap_cur+12)|0);
      HEAP32[(($ap)>>2)]=$ap_next;
      var $7=$v;
      var $8=$6;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      var $ap4=$ap;
      var $9=$mrb_addr;
      var $10=$mid;
      _mrb_funcall_argv($agg_result, $9, $self, $10, 1, $v);
      label = 13; break;
    case 6: 
      var $11=$argc_addr;
      var $cmp7=(($11)|(0)) > 16;
      if ($cmp7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $12=$mrb_addr;
      var $13=$mrb_addr;
      var $call9=_mrb_class_get($13, ((112048)|0));
      _mrb_raise($12, $call9, ((112944)|0));
      label = 8; break;
    case 8: 
      var $ap610=$ap6;
      HEAP32[(($ap610)>>2)]=varrp;
      $i=0;
      label = 9; break;
    case 9: 
      var $14=$i;
      var $15=$argc_addr;
      var $cmp11=(($14)|(0)) < (($15)|(0));
      if ($cmp11) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $16=$i;
      var $arrayidx=(($argv+((($16)*(12))&-1))|0);
      var $ap_cur12=HEAP32[(($ap6)>>2)];
      var $17=$ap_cur12;
      var $ap_next13=(($ap_cur12+12)|0);
      HEAP32[(($ap6)>>2)]=$ap_next13;
      var $18=$arrayidx;
      var $19=$17;
      assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
      label = 11; break;
    case 11: 
      var $20=$i;
      var $inc=((($20)+(1))|0);
      $i=$inc;
      label = 9; break;
    case 12: 
      var $ap614=$ap6;
      var $21=$mrb_addr;
      var $22=$mid;
      var $23=$argc_addr;
      var $arraydecay=(($argv)|0);
      _mrb_funcall_argv($agg_result, $21, $self, $22, $23, $arraydecay);
      label = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern140($mrb, $cstr) {
  var label = 0;
  var $mrb_addr;
  var $cstr_addr;
  $mrb_addr=$mrb;
  $cstr_addr=$cstr;
  var $0=$mrb_addr;
  var $1=$cstr_addr;
  var $call=_mrb_intern_cstr($0, $1);
  return $call;
}
function _mrb_funcall_argv($agg_result, $mrb, $self, $mid, $argc, $argv) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $mid_addr;
  var $argc_addr;
  var $argv_addr;
  var $agg_tmp=__stackBase__;
  $mrb_addr=$mrb;
  $mid_addr=$mid;
  $argc_addr=$argc;
  $argv_addr=$argv;
  var $0=$mrb_addr;
  var $1=$mid_addr;
  var $2=$argc_addr;
  var $3=$argv_addr;
  _mrb_nil_value148($agg_tmp);
  _mrb_funcall_with_block($agg_result, $0, $self, $1, $2, $3, $agg_tmp);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_funcall_with_block($agg_result, $mrb, $self, $mid, $argc, $argv, $blk) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $blk; $blk = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($blk)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($blk)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($blk)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  var mySetjmpIds = {};
  var setjmpTable = {"3": function(value) { label = 29; $call = value },dummy: 0};
  while(1) try { switch(label) {
    case 2: 
      var $mrb_addr;
      var $mid_addr;
      var $argc_addr;
      var $argv_addr;
      var $val=__stackBase__;
      var $c_jmp=(__stackBase__)+(12);
      var $old_ci;
      var $tmp=(__stackBase__)+(52);
      var $tmp11=(__stackBase__)+(64);
      var $p;
      var $c16=(__stackBase__)+(76);
      var $undef;
      var $ci19;
      var $n;
      var $agg_tmp=(__stackBase__)+(80);
      var $tmp70=(__stackBase__)+(92);
      var $ai;
      var $tmp95=(__stackBase__)+(104);
      var $tmp105=(__stackBase__)+(116);
      $mrb_addr=$mrb;
      $mid_addr=$mid;
      $argc_addr=$argc;
      $argv_addr=$argv;
      var $0=$mrb_addr;
      var $jmp=(($0)|0);
      var $1=HEAP32[(($jmp)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 10; break; } else { label = 3; break; }
    case 3: 
      var $2=$mrb_addr;
      var $c=(($2+8)|0);
      var $3=HEAP32[(($c)>>2)];
      var $ci=(($3+16)|0);
      var $4=HEAP32[(($ci)>>2)];
      $old_ci=$4;
      var $arraydecay=(($c_jmp)|0);
      var $call=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($arraydecay)>>2)]=tempInt, 0);
      label = 29; break;
    case 29: 
      var $cmp=(($call)|(0))!=0;
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $5=$old_ci;
      var $6=$mrb_addr;
      var $c2=(($6+8)|0);
      var $7=HEAP32[(($c2)>>2)];
      var $ci3=(($7+16)|0);
      var $8=HEAP32[(($ci3)>>2)];
      var $cmp4=(($5)|(0))!=(($8)|(0));
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $9=$mrb_addr;
      var $c5=(($9+8)|0);
      var $10=HEAP32[(($c5)>>2)];
      var $stbase=(($10+8)|0);
      var $11=HEAP32[(($stbase)>>2)];
      var $12=$mrb_addr;
      var $c6=(($12+8)|0);
      var $13=HEAP32[(($c6)>>2)];
      var $ci7=(($13+16)|0);
      var $14=HEAP32[(($ci7)>>2)];
      var $stackidx=(($14+8)|0);
      var $15=HEAP32[(($stackidx)>>2)];
      var $add_ptr=(($11+((($15)*(12))&-1))|0);
      var $16=$mrb_addr;
      var $c8=(($16+8)|0);
      var $17=HEAP32[(($c8)>>2)];
      var $stack=(($17+4)|0);
      HEAP32[(($stack)>>2)]=$add_ptr;
      var $18=$mrb_addr;
      _cipop($18);
      label = 5; break;
    case 7: 
      var $19=$mrb_addr;
      var $jmp9=(($19)|0);
      HEAP32[(($jmp9)>>2)]=0;
      var $20=$mrb_addr;
      var $exc=(($20+16)|0);
      var $21=HEAP32[(($exc)>>2)];
      var $22=$21;
      _mrb_obj_value143($tmp, $22);
      var $23=$val;
      var $24=$tmp;
      assert(12 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
      label = 9; break;
    case 8: 
      var $25=$c_jmp;
      var $26=$mrb_addr;
      var $jmp10=(($26)|0);
      HEAP32[(($jmp10)>>2)]=$25;
      var $27=$mrb_addr;
      var $28=$mid_addr;
      var $29=$argc_addr;
      var $30=$argv_addr;
      _mrb_funcall_with_block($tmp11, $27, $self, $28, $29, $30, $blk);
      var $31=$val;
      var $32=$tmp11;
      assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
      var $33=$mrb_addr;
      var $jmp12=(($33)|0);
      HEAP32[(($jmp12)>>2)]=0;
      label = 9; break;
    case 9: 
      label = 28; break;
    case 10: 
      $undef=0;
      var $34=$mrb_addr;
      var $c21=(($34+8)|0);
      var $35=HEAP32[(($c21)>>2)];
      var $stack22=(($35+4)|0);
      var $36=HEAP32[(($stack22)>>2)];
      var $tobool23=(($36)|(0))!=0;
      if ($tobool23) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $37=$mrb_addr;
      _stack_init($37);
      label = 12; break;
    case 12: 
      var $38=$mrb_addr;
      var $c26=(($38+8)|0);
      var $39=HEAP32[(($c26)>>2)];
      var $ci27=(($39+16)|0);
      var $40=HEAP32[(($ci27)>>2)];
      var $nregs=(($40+12)|0);
      var $41=HEAP32[(($nregs)>>2)];
      $n=$41;
      var $42=$argc_addr;
      var $cmp28=(($42)|(0)) < 0;
      if ($cmp28) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $43=$mrb_addr;
      var $44=$mrb_addr;
      var $call30=_mrb_class_get($44, ((112048)|0));
      var $45=$argc_addr;
      _mrb_fixnum_value144($agg_tmp, $45);
      _mrb_raisef($43, $call30, ((107920)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 14; break;
    case 14: 
      var $46=$mrb_addr;
      var $call32=_mrb_class($46, $self);
      HEAP32[(($c16)>>2)]=$call32;
      var $47=$mrb_addr;
      var $48=$mid_addr;
      var $call33=_mrb_method_search_vm($47, $c16, $48);
      $p=$call33;
      var $49=$p;
      var $tobool34=(($49)|(0))!=0;
      if ($tobool34) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $50=$mid_addr;
      $undef=$50;
      var $51=$mrb_addr;
      var $call36=_mrb_intern2($51, ((104432)|0), 14);
      $mid_addr=$call36;
      var $52=$mrb_addr;
      var $53=$mid_addr;
      var $call37=_mrb_method_search_vm($52, $c16, $53);
      $p=$call37;
      var $54=$n;
      var $inc=((($54)+(1))|0);
      $n=$inc;
      var $55=$argc_addr;
      var $inc38=((($55)+(1))|0);
      $argc_addr=$inc38;
      label = 16; break;
    case 16: 
      var $56=$mrb_addr;
      var $call40=_cipush($56);
      $ci19=$call40;
      var $57=$mid_addr;
      var $58=$ci19;
      var $mid41=(($58)|0);
      HEAP16[(($mid41)>>1)]=$57;
      var $59=$p;
      var $60=$ci19;
      var $proc=(($60+4)|0);
      HEAP32[(($proc)>>2)]=$59;
      var $61=$mrb_addr;
      var $c42=(($61+8)|0);
      var $62=HEAP32[(($c42)>>2)];
      var $stack43=(($62+4)|0);
      var $63=HEAP32[(($stack43)>>2)];
      var $64=$mrb_addr;
      var $c44=(($64+8)|0);
      var $65=HEAP32[(($c44)>>2)];
      var $stbase45=(($65+8)|0);
      var $66=HEAP32[(($stbase45)>>2)];
      var $sub_ptr_lhs_cast=$63;
      var $sub_ptr_rhs_cast=$66;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|(0)))/(12))&-1);
      var $67=$ci19;
      var $stackidx46=(($67+8)|0);
      HEAP32[(($stackidx46)>>2)]=$sub_ptr_div;
      var $68=$argc_addr;
      var $69=$ci19;
      var $argc47=(($69+16)|0);
      HEAP32[(($argc47)>>2)]=$68;
      var $70=$p;
      var $target_class=(($70+16)|0);
      var $71=HEAP32[(($target_class)>>2)];
      var $72=$ci19;
      var $target_class48=(($72+28)|0);
      HEAP32[(($target_class48)>>2)]=$71;
      var $73=$p;
      var $74=$73;
      var $75=HEAP32[(($74)>>2)];
      var $76=$75 >>> 11;
      var $bf_clear=$76 & 2097151;
      var $and=$bf_clear & 128;
      var $cmp49=(($and)|(0))!=0;
      if ($cmp49) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $77=$argc_addr;
      var $add=((($77)+(2))|0);
      var $78=$ci19;
      var $nregs51=(($78+12)|0);
      HEAP32[(($nregs51)>>2)]=$add;
      label = 19; break;
    case 18: 
      var $79=$p;
      var $body=(($79+12)|0);
      var $irep=$body;
      var $80=HEAP32[(($irep)>>2)];
      var $nregs53=(($80+6)|0);
      var $81=HEAP16[(($nregs53)>>1)];
      var $conv=(($81)&(65535));
      var $82=$n;
      var $add54=((($conv)+($82))|0);
      var $83=$ci19;
      var $nregs55=(($83+12)|0);
      HEAP32[(($nregs55)>>2)]=$add54;
      label = 19; break;
    case 19: 
      var $84=$ci19;
      var $acc=(($84+24)|0);
      HEAP32[(($acc)>>2)]=-1;
      var $85=$mrb_addr;
      var $c57=(($85+8)|0);
      var $86=HEAP32[(($c57)>>2)];
      var $stack58=(($86+4)|0);
      var $87=HEAP32[(($stack58)>>2)];
      var $88=$n;
      var $add_ptr59=(($87+((($88)*(12))&-1))|0);
      var $89=$mrb_addr;
      var $c60=(($89+8)|0);
      var $90=HEAP32[(($c60)>>2)];
      var $stack61=(($90+4)|0);
      HEAP32[(($stack61)>>2)]=$add_ptr59;
      var $91=$mrb_addr;
      var $92=$ci19;
      var $nregs62=(($92+12)|0);
      var $93=HEAP32[(($nregs62)>>2)];
      _stack_extend($91, $93, 0);
      var $94=$mrb_addr;
      var $c63=(($94+8)|0);
      var $95=HEAP32[(($c63)>>2)];
      var $stack64=(($95+4)|0);
      var $96=HEAP32[(($stack64)>>2)];
      var $arrayidx=(($96)|0);
      var $97=$arrayidx;
      var $98=$self;
      assert(12 % 1 === 0);HEAP32[(($97)>>2)]=HEAP32[(($98)>>2)];HEAP32[((($97)+(4))>>2)]=HEAP32[((($98)+(4))>>2)];HEAP32[((($97)+(8))>>2)]=HEAP32[((($98)+(8))>>2)];
      var $99=$undef;
      var $tobool65=(($99 << 16) >> 16)!=0;
      if ($tobool65) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $100=$mrb_addr;
      var $c67=(($100+8)|0);
      var $101=HEAP32[(($c67)>>2)];
      var $stack68=(($101+4)|0);
      var $102=HEAP32[(($stack68)>>2)];
      var $arrayidx69=(($102+12)|0);
      var $103=$undef;
      _mrb_symbol_value145($tmp70, $103);
      var $104=$arrayidx69;
      var $105=$tmp70;
      assert(12 % 1 === 0);HEAP32[(($104)>>2)]=HEAP32[(($105)>>2)];HEAP32[((($104)+(4))>>2)]=HEAP32[((($105)+(4))>>2)];HEAP32[((($104)+(8))>>2)]=HEAP32[((($105)+(8))>>2)];
      var $106=$mrb_addr;
      var $c71=(($106+8)|0);
      var $107=HEAP32[(($c71)>>2)];
      var $stack72=(($107+4)|0);
      var $108=HEAP32[(($stack72)>>2)];
      var $add_ptr73=(($108+24)|0);
      var $109=$argv_addr;
      var $110=$argc_addr;
      var $sub=((($110)-(1))|0);
      _stack_copy($add_ptr73, $109, $sub);
      label = 24; break;
    case 21: 
      var $111=$argc_addr;
      var $cmp75=(($111)|(0)) > 0;
      if ($cmp75) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $112=$mrb_addr;
      var $c78=(($112+8)|0);
      var $113=HEAP32[(($c78)>>2)];
      var $stack79=(($113+4)|0);
      var $114=HEAP32[(($stack79)>>2)];
      var $add_ptr80=(($114+12)|0);
      var $115=$argv_addr;
      var $116=$argc_addr;
      _stack_copy($add_ptr80, $115, $116);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $117=$argc_addr;
      var $add83=((($117)+(1))|0);
      var $118=$mrb_addr;
      var $c84=(($118+8)|0);
      var $119=HEAP32[(($c84)>>2)];
      var $stack85=(($119+4)|0);
      var $120=HEAP32[(($stack85)>>2)];
      var $arrayidx86=(($120+((($add83)*(12))&-1))|0);
      var $121=$arrayidx86;
      var $122=$blk;
      assert(12 % 1 === 0);HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($122)+(4))>>2)];HEAP32[((($121)+(8))>>2)]=HEAP32[((($122)+(8))>>2)];
      var $123=$p;
      var $124=$123;
      var $125=HEAP32[(($124)>>2)];
      var $126=$125 >>> 11;
      var $bf_clear87=$126 & 2097151;
      var $and88=$bf_clear87 & 128;
      var $cmp89=(($and88)|(0))!=0;
      if ($cmp89) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $127=$mrb_addr;
      var $call93=_mrb_gc_arena_save($127);
      $ai=$call93;
      var $128=$p;
      var $body94=(($128+12)|0);
      var $func=$body94;
      var $129=HEAP32[(($func)>>2)];
      var $130=$mrb_addr;
      FUNCTION_TABLE[$129]($tmp95, $130, $self);
      var $131=$val;
      var $132=$tmp95;
      assert(12 % 1 === 0);HEAP32[(($131)>>2)]=HEAP32[(($132)>>2)];HEAP32[((($131)+(4))>>2)]=HEAP32[((($132)+(4))>>2)];HEAP32[((($131)+(8))>>2)]=HEAP32[((($132)+(8))>>2)];
      var $133=$mrb_addr;
      var $134=$ai;
      _mrb_gc_arena_restore($133, $134);
      var $135=$mrb_addr;
      var $c96=(($135+8)|0);
      var $136=HEAP32[(($c96)>>2)];
      var $stbase97=(($136+8)|0);
      var $137=HEAP32[(($stbase97)>>2)];
      var $138=$mrb_addr;
      var $c98=(($138+8)|0);
      var $139=HEAP32[(($c98)>>2)];
      var $ci99=(($139+16)|0);
      var $140=HEAP32[(($ci99)>>2)];
      var $stackidx100=(($140+8)|0);
      var $141=HEAP32[(($stackidx100)>>2)];
      var $add_ptr101=(($137+((($141)*(12))&-1))|0);
      var $142=$mrb_addr;
      var $c102=(($142+8)|0);
      var $143=HEAP32[(($c102)>>2)];
      var $stack103=(($143+4)|0);
      HEAP32[(($stack103)>>2)]=$add_ptr101;
      var $144=$mrb_addr;
      _cipop($144);
      label = 27; break;
    case 26: 
      var $145=$mrb_addr;
      var $146=$p;
      _mrb_run($tmp105, $145, $146, $self);
      var $147=$val;
      var $148=$tmp105;
      assert(12 % 1 === 0);HEAP32[(($147)>>2)]=HEAP32[(($148)>>2)];HEAP32[((($147)+(4))>>2)]=HEAP32[((($148)+(4))>>2)];HEAP32[((($147)+(8))>>2)]=HEAP32[((($148)+(8))>>2)];
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $149=$mrb_addr;
      _mrb_gc_protect($149, $val);
      var $150=$agg_result;
      var $151=$val;
      assert(12 % 1 === 0);HEAP32[(($150)>>2)]=HEAP32[(($151)>>2)];HEAP32[((($150)+(4))>>2)]=HEAP32[((($151)+(4))>>2)];HEAP32[((($150)+(8))>>2)]=HEAP32[((($151)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function _cipop($mrb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $c;
      var $e;
      var $len;
      var $p;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $c1=(($0+8)|0);
      var $1=HEAP32[(($c1)>>2)];
      $c=$1;
      var $2=$c;
      var $ci=(($2+16)|0);
      var $3=HEAP32[(($ci)>>2)];
      var $env=(($3+40)|0);
      var $4=HEAP32[(($env)>>2)];
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$c;
      var $ci2=(($5+16)|0);
      var $6=HEAP32[(($ci2)>>2)];
      var $env3=(($6+40)|0);
      var $7=HEAP32[(($env3)>>2)];
      $e=$7;
      var $8=$e;
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 >>> 11;
      var $bf_clear=$11 & 2097151;
      $len=$bf_clear;
      var $12=$mrb_addr;
      var $13=$len;
      var $mul=((($13)*(12))&-1);
      var $call=_mrb_malloc($12, $mul);
      var $14=$call;
      $p=$14;
      var $15=$e;
      var $cioff=(($15+20)|0);
      HEAP32[(($cioff)>>2)]=-1;
      var $16=$p;
      var $17=$e;
      var $stack=(($17+12)|0);
      var $18=HEAP32[(($stack)>>2)];
      var $19=$len;
      _stack_copy($16, $18, $19);
      var $20=$p;
      var $21=$e;
      var $stack4=(($21+12)|0);
      HEAP32[(($stack4)>>2)]=$20;
      label = 4; break;
    case 4: 
      var $22=$c;
      var $ci5=(($22+16)|0);
      var $23=HEAP32[(($ci5)>>2)];
      var $incdec_ptr=((($23)-(44))|0);
      HEAP32[(($ci5)>>2)]=$incdec_ptr;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value143($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _stack_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $c;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $c1=(($0+8)|0);
  var $1=HEAP32[(($c1)>>2)];
  $c=$1;
  var $2=$mrb_addr;
  var $call=_mrb_calloc($2, 128, 12);
  var $3=$call;
  var $4=$c;
  var $stbase=(($4+8)|0);
  HEAP32[(($stbase)>>2)]=$3;
  var $5=$c;
  var $stbase2=(($5+8)|0);
  var $6=HEAP32[(($stbase2)>>2)];
  var $add_ptr=(($6+1536)|0);
  var $7=$c;
  var $stend=(($7+12)|0);
  HEAP32[(($stend)>>2)]=$add_ptr;
  var $8=$c;
  var $stbase3=(($8+8)|0);
  var $9=HEAP32[(($stbase3)>>2)];
  var $10=$c;
  var $stack=(($10+4)|0);
  HEAP32[(($stack)>>2)]=$9;
  var $11=$mrb_addr;
  var $call4=_mrb_calloc($11, 32, 44);
  var $12=$call4;
  var $13=$c;
  var $cibase=(($13+20)|0);
  HEAP32[(($cibase)>>2)]=$12;
  var $14=$c;
  var $cibase5=(($14+20)|0);
  var $15=HEAP32[(($cibase5)>>2)];
  var $add_ptr6=(($15+1408)|0);
  var $16=$c;
  var $ciend=(($16+24)|0);
  HEAP32[(($ciend)>>2)]=$add_ptr6;
  var $17=$c;
  var $cibase7=(($17+20)|0);
  var $18=HEAP32[(($cibase7)>>2)];
  var $19=$c;
  var $ci=(($19+16)|0);
  HEAP32[(($ci)>>2)]=$18;
  var $20=$mrb_addr;
  var $object_class=(($20+44)|0);
  var $21=HEAP32[(($object_class)>>2)];
  var $22=$c;
  var $ci8=(($22+16)|0);
  var $23=HEAP32[(($ci8)>>2)];
  var $target_class=(($23+28)|0);
  HEAP32[(($target_class)>>2)]=$21;
  return;
}
function _mrb_fixnum_value144($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _cipush($mrb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $c;
      var $ci;
      var $eidx;
      var $ridx;
      var $size;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $c1=(($0+8)|0);
      var $1=HEAP32[(($c1)>>2)];
      $c=$1;
      var $2=$c;
      var $ci2=(($2+16)|0);
      var $3=HEAP32[(($ci2)>>2)];
      $ci=$3;
      var $4=$ci;
      var $eidx3=(($4+36)|0);
      var $5=HEAP32[(($eidx3)>>2)];
      $eidx=$5;
      var $6=$ci;
      var $ridx4=(($6+32)|0);
      var $7=HEAP32[(($ridx4)>>2)];
      $ridx=$7;
      var $8=$ci;
      var $add_ptr=(($8+44)|0);
      var $9=$c;
      var $ciend=(($9+24)|0);
      var $10=HEAP32[(($ciend)>>2)];
      var $cmp=(($add_ptr)|(0))==(($10)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=$ci;
      var $12=$c;
      var $cibase=(($12+20)|0);
      var $13=HEAP32[(($cibase)>>2)];
      var $sub_ptr_lhs_cast=$11;
      var $sub_ptr_rhs_cast=$13;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|(0)))/(44))&-1);
      $size=$sub_ptr_div;
      var $14=$mrb_addr;
      var $15=$c;
      var $cibase5=(($15+20)|0);
      var $16=HEAP32[(($cibase5)>>2)];
      var $17=$16;
      var $18=$size;
      var $mul=((($18)*(44))&-1);
      var $mul6=($mul<<1);
      var $call=_mrb_realloc($14, $17, $mul6);
      var $19=$call;
      var $20=$c;
      var $cibase7=(($20+20)|0);
      HEAP32[(($cibase7)>>2)]=$19;
      var $21=$c;
      var $cibase8=(($21+20)|0);
      var $22=HEAP32[(($cibase8)>>2)];
      var $23=$size;
      var $add_ptr9=(($22+((($23)*(44))&-1))|0);
      var $24=$c;
      var $ci10=(($24+16)|0);
      HEAP32[(($ci10)>>2)]=$add_ptr9;
      var $25=$c;
      var $cibase11=(($25+20)|0);
      var $26=HEAP32[(($cibase11)>>2)];
      var $27=$size;
      var $mul12=($27<<1);
      var $add_ptr13=(($26+((($mul12)*(44))&-1))|0);
      var $28=$c;
      var $ciend14=(($28+24)|0);
      HEAP32[(($ciend14)>>2)]=$add_ptr13;
      label = 4; break;
    case 4: 
      var $29=$c;
      var $ci15=(($29+16)|0);
      var $30=HEAP32[(($ci15)>>2)];
      var $incdec_ptr=(($30+44)|0);
      HEAP32[(($ci15)>>2)]=$incdec_ptr;
      $ci=$incdec_ptr;
      var $31=$ci;
      var $nregs=(($31+12)|0);
      HEAP32[(($nregs)>>2)]=2;
      var $32=$eidx;
      var $33=$ci;
      var $eidx16=(($33+36)|0);
      HEAP32[(($eidx16)>>2)]=$32;
      var $34=$ridx;
      var $35=$ci;
      var $ridx17=(($35+32)|0);
      HEAP32[(($ridx17)>>2)]=$34;
      var $36=$ci;
      var $env=(($36+40)|0);
      HEAP32[(($env)>>2)]=0;
      var $37=$ci;
      return $37;
    default: assert(0, "bad label: " + label);
  }
}
function _stack_extend($mrb, $room, $keep) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $room_addr;
      var $keep_addr;
      var $size;
      var $off;
      var $oldbase;
      $mrb_addr=$mrb;
      $room_addr=$room;
      $keep_addr=$keep;
      var $0=$mrb_addr;
      var $c=(($0+8)|0);
      var $1=HEAP32[(($c)>>2)];
      var $stack=(($1+4)|0);
      var $2=HEAP32[(($stack)>>2)];
      var $3=$room_addr;
      var $add_ptr=(($2+((($3)*(12))&-1))|0);
      var $4=$mrb_addr;
      var $c1=(($4+8)|0);
      var $5=HEAP32[(($c1)>>2)];
      var $stend=(($5+12)|0);
      var $6=HEAP32[(($stend)>>2)];
      var $cmp=(($add_ptr)>>>(0)) >= (($6)>>>(0));
      if ($cmp) { label = 3; break; } else { label = 11; break; }
    case 3: 
      var $7=$mrb_addr;
      var $c2=(($7+8)|0);
      var $8=HEAP32[(($c2)>>2)];
      var $stbase=(($8+8)|0);
      var $9=HEAP32[(($stbase)>>2)];
      $oldbase=$9;
      var $10=$mrb_addr;
      var $c3=(($10+8)|0);
      var $11=HEAP32[(($c3)>>2)];
      var $stend4=(($11+12)|0);
      var $12=HEAP32[(($stend4)>>2)];
      var $13=$mrb_addr;
      var $c5=(($13+8)|0);
      var $14=HEAP32[(($c5)>>2)];
      var $stbase6=(($14+8)|0);
      var $15=HEAP32[(($stbase6)>>2)];
      var $sub_ptr_lhs_cast=$12;
      var $sub_ptr_rhs_cast=$15;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|(0)))/(12))&-1);
      $size=$sub_ptr_div;
      var $16=$mrb_addr;
      var $c7=(($16+8)|0);
      var $17=HEAP32[(($c7)>>2)];
      var $stack8=(($17+4)|0);
      var $18=HEAP32[(($stack8)>>2)];
      var $19=$mrb_addr;
      var $c9=(($19+8)|0);
      var $20=HEAP32[(($c9)>>2)];
      var $stbase10=(($20+8)|0);
      var $21=HEAP32[(($stbase10)>>2)];
      var $sub_ptr_lhs_cast11=$18;
      var $sub_ptr_rhs_cast12=$21;
      var $sub_ptr_sub13=((($sub_ptr_lhs_cast11)-($sub_ptr_rhs_cast12))|0);
      var $sub_ptr_div14=((((($sub_ptr_sub13)|(0)))/(12))&-1);
      $off=$sub_ptr_div14;
      var $22=$keep_addr;
      var $23=$size;
      var $cmp15=(($22)|(0)) > (($23)|(0));
      if ($cmp15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $24=$size;
      $keep_addr=$24;
      label = 5; break;
    case 5: 
      var $25=$room_addr;
      var $26=$size;
      var $cmp17=(($25)|(0)) <= (($26)|(0));
      if ($cmp17) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $27=$size;
      var $add=((($27)+(128))|0);
      $size=$add;
      label = 8; break;
    case 7: 
      var $28=$room_addr;
      var $29=$size;
      var $add19=((($29)+($28))|0);
      $size=$add19;
      label = 8; break;
    case 8: 
      var $30=$mrb_addr;
      var $31=$mrb_addr;
      var $c21=(($31+8)|0);
      var $32=HEAP32[(($c21)>>2)];
      var $stbase22=(($32+8)|0);
      var $33=HEAP32[(($stbase22)>>2)];
      var $34=$33;
      var $35=$size;
      var $mul=((($35)*(12))&-1);
      var $call=_mrb_realloc($30, $34, $mul);
      var $36=$call;
      var $37=$mrb_addr;
      var $c23=(($37+8)|0);
      var $38=HEAP32[(($c23)>>2)];
      var $stbase24=(($38+8)|0);
      HEAP32[(($stbase24)>>2)]=$36;
      var $39=$mrb_addr;
      var $c25=(($39+8)|0);
      var $40=HEAP32[(($c25)>>2)];
      var $stbase26=(($40+8)|0);
      var $41=HEAP32[(($stbase26)>>2)];
      var $42=$off;
      var $add_ptr27=(($41+((($42)*(12))&-1))|0);
      var $43=$mrb_addr;
      var $c28=(($43+8)|0);
      var $44=HEAP32[(($c28)>>2)];
      var $stack29=(($44+4)|0);
      HEAP32[(($stack29)>>2)]=$add_ptr27;
      var $45=$mrb_addr;
      var $c30=(($45+8)|0);
      var $46=HEAP32[(($c30)>>2)];
      var $stbase31=(($46+8)|0);
      var $47=HEAP32[(($stbase31)>>2)];
      var $48=$size;
      var $add_ptr32=(($47+((($48)*(12))&-1))|0);
      var $49=$mrb_addr;
      var $c33=(($49+8)|0);
      var $50=HEAP32[(($c33)>>2)];
      var $stend34=(($50+12)|0);
      HEAP32[(($stend34)>>2)]=$add_ptr32;
      var $51=$mrb_addr;
      var $52=$oldbase;
      var $53=$mrb_addr;
      var $c35=(($53+8)|0);
      var $54=HEAP32[(($c35)>>2)];
      var $stbase36=(($54+8)|0);
      var $55=HEAP32[(($stbase36)>>2)];
      _envadjust($51, $52, $55);
      var $56=$size;
      var $cmp37=(($56)|(0)) > 262016;
      if ($cmp37) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $57=$mrb_addr;
      var $58=$mrb_addr;
      var $call39=_mrb_class_get($58, ((94804)|0));
      _mrb_raise($57, $call39, ((110640)|0));
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $59=$room_addr;
      var $60=$keep_addr;
      var $cmp42=(($59)|(0)) > (($60)|(0));
      if ($cmp42) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $61=$keep_addr;
      var $62=$mrb_addr;
      var $c44=(($62+8)|0);
      var $63=HEAP32[(($c44)>>2)];
      var $stack45=(($63+4)|0);
      var $64=HEAP32[(($stack45)>>2)];
      var $arrayidx=(($64+((($61)*(12))&-1))|0);
      var $65=$room_addr;
      var $66=$keep_addr;
      var $sub=((($65)-($66))|0);
      _stack_clear($arrayidx, $sub);
      label = 13; break;
    case 13: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_symbol_value145($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=4;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $sym=$value;
      HEAP16[(($sym)>>1)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _stack_copy($dst, $src, $size) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dst_addr;
      var $src_addr;
      var $size_addr;
      $dst_addr=$dst;
      $src_addr=$src;
      $size_addr=$size;
      label = 3; break;
    case 3: 
      var $0=$size_addr;
      var $dec=((($0)-(1))|0);
      $size_addr=$dec;
      var $cmp=(($0)>>>(0)) > 0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $1=$dst_addr;
      var $incdec_ptr=(($1+12)|0);
      $dst_addr=$incdec_ptr;
      var $2=$src_addr;
      var $incdec_ptr1=(($2+12)|0);
      $src_addr=$incdec_ptr1;
      var $3=$1;
      var $4=$2;
      assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
      label = 3; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_run($agg_result, $mrb, $proc, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 820)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  var mySetjmpIds = {};
  var setjmpTable = {"2": function(value) { label = 710; $call4 = value },dummy: 0};
  while(1) try { switch(label) {
    case 2: 
      var $mrb_addr;
      var $proc_addr;
      var $irep;
      var $pc;
      var $pool;
      var $syms;
      var $regs;
      var $i;
      var $ai;
      var $prev_jmp;
      var $c_jmp=__stackBase__;
      var $tmp=(__stackBase__)+(40);
      var $tmp126=(__stackBase__)+(52);
      var $tmp145=(__stackBase__)+(64);
      var $tmp164=(__stackBase__)+(76);
      var $tmp183=(__stackBase__)+(88);
      var $a;
      var $tmp204=(__stackBase__)+(100);
      var $a209;
      var $regs_a;
      var $up;
      var $e;
      var $tmp231=(__stackBase__)+(112);
      var $idx;
      var $up243;
      var $e247;
      var $regs_a252;
      var $idx257;
      var $a360;
      var $p378;
      var $n;
      var $a424;
      var $a438;
      var $a452;
      var $n456;
      var $m;
      var $c461=(__stackBase__)+(124);
      var $ci463;
      var $recv=(__stackBase__)+(128);
      var $result=(__stackBase__)+(140);
      var $mid;
      var $sym506=(__stackBase__)+(152);
      var $tmp514=(__stackBase__)+(164);
      var $tmp564=(__stackBase__)+(176);
      var $ci637;
      var $recv639=(__stackBase__)+(188);
      var $m644;
      var $tmp679=(__stackBase__)+(200);
      var $tmp712=(__stackBase__)+(212);
      var $recv751=(__stackBase__)+(224);
      var $ci753;
      var $m757;
      var $c759=(__stackBase__)+(236);
      var $mid761;
      var $a764;
      var $n768;
      var $agg_tmp=(__stackBase__)+(240);
      var $tmp786=(__stackBase__)+(252);
      var $tmp844=(__stackBase__)+(264);
      var $a895;
      var $bx;
      var $m1;
      var $r;
      var $m2;
      var $lv;
      var $stack914;
      var $e921;
      var $exc927=(__stackBase__)+(276);
      var $tmp929=(__stackBase__)+(288);
      var $tmp942=(__stackBase__)+(300);
      var $pp;
      var $rest;
      var $len;
      var $ary;
      var $tmp961=(__stackBase__)+(312);
      var $ax;
      var $m1997;
      var $o;
      var $r1004;
      var $m21008;
      var $argc1012;
      var $argv;
      var $argv0;
      var $len1020;
      var $blk;
      var $ary1036;
      var $mlen;
      var $tmp1127=(__stackBase__)+(324);
      var $tmp1158=(__stackBase__)+(336);
      var $ci1198;
      var $eidx1200;
      var $agg_tmp1205=(__stackBase__)+(348);
      var $agg_tmp1208=(__stackBase__)+(360);
      var $ci1304;
      var $acc1308;
      var $eidx1310;
      var $v=(__stackBase__)+(372);
      var $e1329;
      var $exc1368=(__stackBase__)+(384);
      var $agg_tmp1370=(__stackBase__)+(396);
      var $a1432;
      var $n1436;
      var $m1440;
      var $c1442=(__stackBase__)+(408);
      var $ci1444;
      var $recv1446=(__stackBase__)+(412);
      var $mid1448;
      var $sym1458=(__stackBase__)+(424);
      var $tmp1466=(__stackBase__)+(436);
      var $tmp1504=(__stackBase__)+(448);
      var $a1537;
      var $bx1541;
      var $m11545;
      var $r1549;
      var $m21553;
      var $lv1557;
      var $stack1561;
      var $e1568;
      var $a1585;
      var $x;
      var $y;
      var $z;
      var $regs_a1605;
      var $x1644;
      var $y1649;
      var $tmp1697=(__stackBase__)+(460);
      var $a1704;
      var $x1721;
      var $y1723;
      var $z1725;
      var $x1769;
      var $y1774;
      var $a1823;
      var $x1840;
      var $y1842;
      var $z1844;
      var $x1880;
      var $y1885;
      var $a1934;
      var $x1951;
      var $y1956;
      var $x1973;
      var $y1978;
      var $a2027;
      var $x2034;
      var $y2039;
      var $z2043;
      var $a2108;
      var $regs_a2112;
      var $x2118;
      var $y2123;
      var $z2127;
      var $a2191;
      var $a2210;
      var $a2352;
      var $a2493;
      var $a2634;
      var $a2775;
      var $tmp2922=(__stackBase__)+(472);
      var $agg_tmp2929=(__stackBase__)+(484);
      var $a2946;
      var $c2950;
      var $v2954=(__stackBase__)+(496);
      var $tmp2981=(__stackBase__)+(508);
      var $a2998;
      var $v3002=(__stackBase__)+(520);
      var $pre;
      var $post;
      var $tmp3016=(__stackBase__)+(532);
      var $ary3032;
      var $len3036;
      var $i3039;
      var $tmp3050=(__stackBase__)+(544);
      var $tmp3065=(__stackBase__)+(556);
      var $tmp3105=(__stackBase__)+(568);
      var $b;
      var $c3122;
      var $lim;
      var $hash=(__stackBase__)+(580);
      var $p3145;
      var $c3147;
      var $tmp3178=(__stackBase__)+(592);
      var $tmp3185=(__stackBase__)+(604);
      var $c3190;
      var $a3192;
      var $base=(__stackBase__)+(616);
      var $super3197=(__stackBase__)+(628);
      var $id;
      var $tmp3216=(__stackBase__)+(640);
      var $tmp3220=(__stackBase__)+(652);
      var $c3225;
      var $a3227;
      var $base3231=(__stackBase__)+(664);
      var $id3233;
      var $tmp3249=(__stackBase__)+(676);
      var $tmp3253=(__stackBase__)+(688);
      var $a3258;
      var $ci3262;
      var $recv3264=(__stackBase__)+(700);
      var $p3267;
      var $tmp3309=(__stackBase__)+(712);
      var $a3341;
      var $c3345;
      var $tmp3363=(__stackBase__)+(724);
      var $exc3373=(__stackBase__)+(736);
      var $tmp3385=(__stackBase__)+(748);
      var $b3390;
      var $tmp3401=(__stackBase__)+(760);
      var $n3416;
      var $msg=(__stackBase__)+(772);
      var $exc3437=(__stackBase__)+(784);
      var $tmp3444=(__stackBase__)+(796);
      var $tmp3447=(__stackBase__)+(808);
      $mrb_addr=$mrb;
      $proc_addr=$proc;
      var $0=$proc_addr;
      var $body=(($0+12)|0);
      var $irep1=$body;
      var $1=HEAP32[(($irep1)>>2)];
      $irep=$1;
      var $2=$irep;
      var $iseq=(($2+12)|0);
      var $3=HEAP32[(($iseq)>>2)];
      $pc=$3;
      var $4=$irep;
      var $pool2=(($4+16)|0);
      var $5=HEAP32[(($pool2)>>2)];
      $pool=$5;
      var $6=$irep;
      var $syms3=(($6+20)|0);
      var $7=HEAP32[(($syms3)>>2)];
      $syms=$7;
      $regs=0;
      var $8=$mrb_addr;
      var $call=_mrb_gc_arena_save($8);
      $ai=$call;
      var $9=$mrb_addr;
      var $jmp=(($9)|0);
      var $10=HEAP32[(($jmp)>>2)];
      var $11=$10;
      $prev_jmp=$11;
      var $arraydecay=(($c_jmp)|0);
      var $call4=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($arraydecay)>>2)]=tempInt, 0);
      label = 710; break;
    case 710: 
      var $cmp=(($call4)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=$c_jmp;
      var $13=$mrb_addr;
      var $jmp5=(($13)|0);
      HEAP32[(($jmp5)>>2)]=$12;
      label = 5; break;
    case 4: 
      label = 223; break;
    case 5: 
      var $14=$mrb_addr;
      var $c=(($14+8)|0);
      var $15=HEAP32[(($c)>>2)];
      var $stack=(($15+4)|0);
      var $16=HEAP32[(($stack)>>2)];
      var $tobool=(($16)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $17=$mrb_addr;
      _stack_init($17);
      label = 7; break;
    case 7: 
      var $18=$mrb_addr;
      var $19=$irep;
      var $nregs=(($19+6)|0);
      var $20=HEAP16[(($nregs)>>1)];
      var $conv=(($20)&(65535));
      var $21=$irep;
      var $nregs8=(($21+6)|0);
      var $22=HEAP16[(($nregs8)>>1)];
      var $conv9=(($22)&(65535));
      _stack_extend($18, $conv, $conv9);
      var $23=$proc_addr;
      var $24=$mrb_addr;
      var $c10=(($24+8)|0);
      var $25=HEAP32[(($c10)>>2)];
      var $ci=(($25+16)|0);
      var $26=HEAP32[(($ci)>>2)];
      var $proc11=(($26+4)|0);
      HEAP32[(($proc11)>>2)]=$23;
      var $27=$irep;
      var $nregs12=(($27+6)|0);
      var $28=HEAP16[(($nregs12)>>1)];
      var $conv13=(($28)&(65535));
      var $add=((($conv13)+(1))|0);
      var $29=$mrb_addr;
      var $c14=(($29+8)|0);
      var $30=HEAP32[(($c14)>>2)];
      var $ci15=(($30+16)|0);
      var $31=HEAP32[(($ci15)>>2)];
      var $nregs16=(($31+12)|0);
      HEAP32[(($nregs16)>>2)]=$add;
      var $32=$mrb_addr;
      var $c17=(($32+8)|0);
      var $33=HEAP32[(($c17)>>2)];
      var $stack18=(($33+4)|0);
      var $34=HEAP32[(($stack18)>>2)];
      $regs=$34;
      var $35=$regs;
      var $arrayidx=(($35)|0);
      var $36=$arrayidx;
      var $37=$self;
      assert(12 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];HEAP32[((($36)+(8))>>2)]=HEAP32[((($37)+(8))>>2)];
      var $38=$pc;
      var $39=HEAP32[(($38)>>2)];
      $i=$39;
      var $40=$i;
      var $and=$40 & 127;
      var $arrayidx19=((77368+($and<<2))|0);
      var $41=HEAP32[(($arrayidx19)>>2)];
      var $indirect_goto_dest = $41;label = 709; break;
    case 8: 
      var $42=$pc;
      var $incdec_ptr=(($42+4)|0);
      $pc=$incdec_ptr;
      var $43=HEAP32[(($incdec_ptr)>>2)];
      $i=$43;
      var $44=$i;
      var $and20=$44 & 127;
      var $arrayidx21=((77368+($and20<<2))|0);
      var $45=HEAP32[(($arrayidx21)>>2)];
      var $indirect_goto_dest = $45;label = 709; break;
    case 9: 
      var $46=$i;
      var $shr=$46 >>> 23;
      var $and22=$shr & 511;
      var $47=$regs;
      var $arrayidx23=(($47+((($and22)*(12))&-1))|0);
      var $48=$i;
      var $shr24=$48 >>> 14;
      var $and25=$shr24 & 511;
      var $49=$regs;
      var $arrayidx26=(($49+((($and25)*(12))&-1))|0);
      var $50=$arrayidx23;
      var $51=$arrayidx26;
      assert(12 % 1 === 0);HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((($51)+(4))>>2)];HEAP32[((($50)+(8))>>2)]=HEAP32[((($51)+(8))>>2)];
      var $52=$pc;
      var $incdec_ptr27=(($52+4)|0);
      $pc=$incdec_ptr27;
      var $53=HEAP32[(($incdec_ptr27)>>2)];
      $i=$53;
      var $54=$i;
      var $and28=$54 & 127;
      var $arrayidx29=((77368+($and28<<2))|0);
      var $55=HEAP32[(($arrayidx29)>>2)];
      var $indirect_goto_dest = $55;label = 709; break;
    case 10: 
      var $56=$i;
      var $shr30=$56 >>> 23;
      var $and31=$shr30 & 511;
      var $57=$regs;
      var $arrayidx32=(($57+((($and31)*(12))&-1))|0);
      var $58=$i;
      var $shr33=$58 >>> 7;
      var $and34=$shr33 & 65535;
      var $59=$pool;
      var $arrayidx35=(($59+((($and34)*(12))&-1))|0);
      var $60=$arrayidx32;
      var $61=$arrayidx35;
      assert(12 % 1 === 0);HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($60)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];HEAP32[((($60)+(8))>>2)]=HEAP32[((($61)+(8))>>2)];
      var $62=$pc;
      var $incdec_ptr36=(($62+4)|0);
      $pc=$incdec_ptr36;
      var $63=HEAP32[(($incdec_ptr36)>>2)];
      $i=$63;
      var $64=$i;
      var $and37=$64 & 127;
      var $arrayidx38=((77368+($and37<<2))|0);
      var $65=HEAP32[(($arrayidx38)>>2)];
      var $indirect_goto_dest = $65;label = 709; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $66=$i;
      var $shr39=$66 >>> 23;
      var $and40=$shr39 & 511;
      var $67=$regs;
      var $arrayidx41=(($67+((($and40)*(12))&-1))|0);
      var $tt=(($arrayidx41+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $68=$i;
      var $shr42=$68 >>> 7;
      var $and43=$shr42 & 65535;
      var $sub=((($and43)-(32767))|0);
      var $69=$i;
      var $shr44=$69 >>> 23;
      var $and45=$shr44 & 511;
      var $70=$regs;
      var $arrayidx46=(($70+((($and45)*(12))&-1))|0);
      var $value=(($arrayidx46)|0);
      var $i47=$value;
      HEAP32[(($i47)>>2)]=$sub;
      label = 13; break;
    case 13: 
      var $71=$pc;
      var $incdec_ptr48=(($71+4)|0);
      $pc=$incdec_ptr48;
      var $72=HEAP32[(($incdec_ptr48)>>2)];
      $i=$72;
      var $73=$i;
      var $and49=$73 & 127;
      var $arrayidx50=((77368+($and49<<2))|0);
      var $74=HEAP32[(($arrayidx50)>>2)];
      var $indirect_goto_dest = $74;label = 709; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $75=$i;
      var $shr52=$75 >>> 23;
      var $and53=$shr52 & 511;
      var $76=$regs;
      var $arrayidx54=(($76+((($and53)*(12))&-1))|0);
      var $tt55=(($arrayidx54+8)|0);
      HEAP32[(($tt55)>>2)]=4;
      var $77=$i;
      var $shr56=$77 >>> 7;
      var $and57=$shr56 & 65535;
      var $78=$syms;
      var $arrayidx58=(($78+($and57<<1))|0);
      var $79=HEAP16[(($arrayidx58)>>1)];
      var $80=$i;
      var $shr59=$80 >>> 23;
      var $and60=$shr59 & 511;
      var $81=$regs;
      var $arrayidx61=(($81+((($and60)*(12))&-1))|0);
      var $value62=(($arrayidx61)|0);
      var $sym=$value62;
      HEAP16[(($sym)>>1)]=$79;
      label = 16; break;
    case 16: 
      var $82=$pc;
      var $incdec_ptr64=(($82+4)|0);
      $pc=$incdec_ptr64;
      var $83=HEAP32[(($incdec_ptr64)>>2)];
      $i=$83;
      var $84=$i;
      var $and65=$84 & 127;
      var $arrayidx66=((77368+($and65<<2))|0);
      var $85=HEAP32[(($arrayidx66)>>2)];
      var $indirect_goto_dest = $85;label = 709; break;
    case 17: 
      var $86=$i;
      var $shr67=$86 >>> 23;
      var $and68=$shr67 & 511;
      var $87=$regs;
      var $arrayidx69=(($87+((($and68)*(12))&-1))|0);
      var $88=$regs;
      var $arrayidx70=(($88)|0);
      var $89=$arrayidx69;
      var $90=$arrayidx70;
      assert(12 % 1 === 0);HEAP32[(($89)>>2)]=HEAP32[(($90)>>2)];HEAP32[((($89)+(4))>>2)]=HEAP32[((($90)+(4))>>2)];HEAP32[((($89)+(8))>>2)]=HEAP32[((($90)+(8))>>2)];
      var $91=$pc;
      var $incdec_ptr71=(($91+4)|0);
      $pc=$incdec_ptr71;
      var $92=HEAP32[(($incdec_ptr71)>>2)];
      $i=$92;
      var $93=$i;
      var $and72=$93 & 127;
      var $arrayidx73=((77368+($and72<<2))|0);
      var $94=HEAP32[(($arrayidx73)>>2)];
      var $indirect_goto_dest = $94;label = 709; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $95=$i;
      var $shr75=$95 >>> 23;
      var $and76=$shr75 & 511;
      var $96=$regs;
      var $arrayidx77=(($96+((($and76)*(12))&-1))|0);
      var $tt78=(($arrayidx77+8)|0);
      HEAP32[(($tt78)>>2)]=2;
      var $97=$i;
      var $shr79=$97 >>> 23;
      var $and80=$shr79 & 511;
      var $98=$regs;
      var $arrayidx81=(($98+((($and80)*(12))&-1))|0);
      var $value82=(($arrayidx81)|0);
      var $i83=$value82;
      HEAP32[(($i83)>>2)]=1;
      label = 20; break;
    case 20: 
      var $99=$pc;
      var $incdec_ptr85=(($99+4)|0);
      $pc=$incdec_ptr85;
      var $100=HEAP32[(($incdec_ptr85)>>2)];
      $i=$100;
      var $101=$i;
      var $and86=$101 & 127;
      var $arrayidx87=((77368+($and86<<2))|0);
      var $102=HEAP32[(($arrayidx87)>>2)];
      var $indirect_goto_dest = $102;label = 709; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $103=$i;
      var $shr89=$103 >>> 23;
      var $and90=$shr89 & 511;
      var $104=$regs;
      var $arrayidx91=(($104+((($and90)*(12))&-1))|0);
      var $tt92=(($arrayidx91+8)|0);
      HEAP32[(($tt92)>>2)]=0;
      var $105=$i;
      var $shr93=$105 >>> 23;
      var $and94=$shr93 & 511;
      var $106=$regs;
      var $arrayidx95=(($106+((($and94)*(12))&-1))|0);
      var $value96=(($arrayidx95)|0);
      var $i97=$value96;
      HEAP32[(($i97)>>2)]=1;
      label = 23; break;
    case 23: 
      var $107=$pc;
      var $incdec_ptr99=(($107+4)|0);
      $pc=$incdec_ptr99;
      var $108=HEAP32[(($incdec_ptr99)>>2)];
      $i=$108;
      var $109=$i;
      var $and100=$109 & 127;
      var $arrayidx101=((77368+($and100<<2))|0);
      var $110=HEAP32[(($arrayidx101)>>2)];
      var $indirect_goto_dest = $110;label = 709; break;
    case 24: 
      var $111=$i;
      var $shr102=$111 >>> 23;
      var $and103=$shr102 & 511;
      var $112=$regs;
      var $arrayidx104=(($112+((($and103)*(12))&-1))|0);
      var $113=$mrb_addr;
      var $114=$i;
      var $shr105=$114 >>> 7;
      var $and106=$shr105 & 65535;
      var $115=$syms;
      var $arrayidx107=(($115+($and106<<1))|0);
      var $116=HEAP16[(($arrayidx107)>>1)];
      _mrb_gv_get($tmp, $113, $116);
      var $117=$arrayidx104;
      var $118=$tmp;
      assert(12 % 1 === 0);HEAP32[(($117)>>2)]=HEAP32[(($118)>>2)];HEAP32[((($117)+(4))>>2)]=HEAP32[((($118)+(4))>>2)];HEAP32[((($117)+(8))>>2)]=HEAP32[((($118)+(8))>>2)];
      var $119=$pc;
      var $incdec_ptr108=(($119+4)|0);
      $pc=$incdec_ptr108;
      var $120=HEAP32[(($incdec_ptr108)>>2)];
      $i=$120;
      var $121=$i;
      var $and109=$121 & 127;
      var $arrayidx110=((77368+($and109<<2))|0);
      var $122=HEAP32[(($arrayidx110)>>2)];
      var $indirect_goto_dest = $122;label = 709; break;
    case 25: 
      var $123=$mrb_addr;
      var $124=$i;
      var $shr111=$124 >>> 7;
      var $and112=$shr111 & 65535;
      var $125=$syms;
      var $arrayidx113=(($125+($and112<<1))|0);
      var $126=HEAP16[(($arrayidx113)>>1)];
      var $127=$i;
      var $shr114=$127 >>> 23;
      var $and115=$shr114 & 511;
      var $128=$regs;
      var $arrayidx116=(($128+((($and115)*(12))&-1))|0);
      _mrb_gv_set($123, $126, $arrayidx116);
      var $129=$pc;
      var $incdec_ptr117=(($129+4)|0);
      $pc=$incdec_ptr117;
      var $130=HEAP32[(($incdec_ptr117)>>2)];
      $i=$130;
      var $131=$i;
      var $and118=$131 & 127;
      var $arrayidx119=((77368+($and118<<2))|0);
      var $132=HEAP32[(($arrayidx119)>>2)];
      var $indirect_goto_dest = $132;label = 709; break;
    case 26: 
      var $133=$i;
      var $shr120=$133 >>> 23;
      var $and121=$shr120 & 511;
      var $134=$regs;
      var $arrayidx122=(($134+((($and121)*(12))&-1))|0);
      var $135=$mrb_addr;
      var $136=$i;
      var $shr123=$136 >>> 7;
      var $and124=$shr123 & 65535;
      var $conv125=(($and124) & 65535);
      _mrb_vm_special_get($tmp126, $135, $conv125);
      var $137=$arrayidx122;
      var $138=$tmp126;
      assert(12 % 1 === 0);HEAP32[(($137)>>2)]=HEAP32[(($138)>>2)];HEAP32[((($137)+(4))>>2)]=HEAP32[((($138)+(4))>>2)];HEAP32[((($137)+(8))>>2)]=HEAP32[((($138)+(8))>>2)];
      var $139=$pc;
      var $incdec_ptr127=(($139+4)|0);
      $pc=$incdec_ptr127;
      var $140=HEAP32[(($incdec_ptr127)>>2)];
      $i=$140;
      var $141=$i;
      var $and128=$141 & 127;
      var $arrayidx129=((77368+($and128<<2))|0);
      var $142=HEAP32[(($arrayidx129)>>2)];
      var $indirect_goto_dest = $142;label = 709; break;
    case 27: 
      var $143=$mrb_addr;
      var $144=$i;
      var $shr130=$144 >>> 7;
      var $and131=$shr130 & 65535;
      var $conv132=(($and131) & 65535);
      var $145=$i;
      var $shr133=$145 >>> 23;
      var $and134=$shr133 & 511;
      var $146=$regs;
      var $arrayidx135=(($146+((($and134)*(12))&-1))|0);
      _mrb_vm_special_set($143, $conv132, $arrayidx135);
      var $147=$pc;
      var $incdec_ptr136=(($147+4)|0);
      $pc=$incdec_ptr136;
      var $148=HEAP32[(($incdec_ptr136)>>2)];
      $i=$148;
      var $149=$i;
      var $and137=$149 & 127;
      var $arrayidx138=((77368+($and137<<2))|0);
      var $150=HEAP32[(($arrayidx138)>>2)];
      var $indirect_goto_dest = $150;label = 709; break;
    case 28: 
      var $151=$i;
      var $shr139=$151 >>> 23;
      var $and140=$shr139 & 511;
      var $152=$regs;
      var $arrayidx141=(($152+((($and140)*(12))&-1))|0);
      var $153=$mrb_addr;
      var $154=$i;
      var $shr142=$154 >>> 7;
      var $and143=$shr142 & 65535;
      var $155=$syms;
      var $arrayidx144=(($155+($and143<<1))|0);
      var $156=HEAP16[(($arrayidx144)>>1)];
      _mrb_vm_iv_get($tmp145, $153, $156);
      var $157=$arrayidx141;
      var $158=$tmp145;
      assert(12 % 1 === 0);HEAP32[(($157)>>2)]=HEAP32[(($158)>>2)];HEAP32[((($157)+(4))>>2)]=HEAP32[((($158)+(4))>>2)];HEAP32[((($157)+(8))>>2)]=HEAP32[((($158)+(8))>>2)];
      var $159=$pc;
      var $incdec_ptr146=(($159+4)|0);
      $pc=$incdec_ptr146;
      var $160=HEAP32[(($incdec_ptr146)>>2)];
      $i=$160;
      var $161=$i;
      var $and147=$161 & 127;
      var $arrayidx148=((77368+($and147<<2))|0);
      var $162=HEAP32[(($arrayidx148)>>2)];
      var $indirect_goto_dest = $162;label = 709; break;
    case 29: 
      var $163=$mrb_addr;
      var $164=$i;
      var $shr149=$164 >>> 7;
      var $and150=$shr149 & 65535;
      var $165=$syms;
      var $arrayidx151=(($165+($and150<<1))|0);
      var $166=HEAP16[(($arrayidx151)>>1)];
      var $167=$i;
      var $shr152=$167 >>> 23;
      var $and153=$shr152 & 511;
      var $168=$regs;
      var $arrayidx154=(($168+((($and153)*(12))&-1))|0);
      _mrb_vm_iv_set($163, $166, $arrayidx154);
      var $169=$pc;
      var $incdec_ptr155=(($169+4)|0);
      $pc=$incdec_ptr155;
      var $170=HEAP32[(($incdec_ptr155)>>2)];
      $i=$170;
      var $171=$i;
      var $and156=$171 & 127;
      var $arrayidx157=((77368+($and156<<2))|0);
      var $172=HEAP32[(($arrayidx157)>>2)];
      var $indirect_goto_dest = $172;label = 709; break;
    case 30: 
      var $173=$i;
      var $shr158=$173 >>> 23;
      var $and159=$shr158 & 511;
      var $174=$regs;
      var $arrayidx160=(($174+((($and159)*(12))&-1))|0);
      var $175=$mrb_addr;
      var $176=$i;
      var $shr161=$176 >>> 7;
      var $and162=$shr161 & 65535;
      var $177=$syms;
      var $arrayidx163=(($177+($and162<<1))|0);
      var $178=HEAP16[(($arrayidx163)>>1)];
      _mrb_vm_cv_get($tmp164, $175, $178);
      var $179=$arrayidx160;
      var $180=$tmp164;
      assert(12 % 1 === 0);HEAP32[(($179)>>2)]=HEAP32[(($180)>>2)];HEAP32[((($179)+(4))>>2)]=HEAP32[((($180)+(4))>>2)];HEAP32[((($179)+(8))>>2)]=HEAP32[((($180)+(8))>>2)];
      var $181=$pc;
      var $incdec_ptr165=(($181+4)|0);
      $pc=$incdec_ptr165;
      var $182=HEAP32[(($incdec_ptr165)>>2)];
      $i=$182;
      var $183=$i;
      var $and166=$183 & 127;
      var $arrayidx167=((77368+($and166<<2))|0);
      var $184=HEAP32[(($arrayidx167)>>2)];
      var $indirect_goto_dest = $184;label = 709; break;
    case 31: 
      var $185=$mrb_addr;
      var $186=$i;
      var $shr168=$186 >>> 7;
      var $and169=$shr168 & 65535;
      var $187=$syms;
      var $arrayidx170=(($187+($and169<<1))|0);
      var $188=HEAP16[(($arrayidx170)>>1)];
      var $189=$i;
      var $shr171=$189 >>> 23;
      var $and172=$shr171 & 511;
      var $190=$regs;
      var $arrayidx173=(($190+((($and172)*(12))&-1))|0);
      _mrb_vm_cv_set($185, $188, $arrayidx173);
      var $191=$pc;
      var $incdec_ptr174=(($191+4)|0);
      $pc=$incdec_ptr174;
      var $192=HEAP32[(($incdec_ptr174)>>2)];
      $i=$192;
      var $193=$i;
      var $and175=$193 & 127;
      var $arrayidx176=((77368+($and175<<2))|0);
      var $194=HEAP32[(($arrayidx176)>>2)];
      var $indirect_goto_dest = $194;label = 709; break;
    case 32: 
      var $195=$i;
      var $shr177=$195 >>> 23;
      var $and178=$shr177 & 511;
      var $196=$regs;
      var $arrayidx179=(($196+((($and178)*(12))&-1))|0);
      var $197=$mrb_addr;
      var $198=$i;
      var $shr180=$198 >>> 7;
      var $and181=$shr180 & 65535;
      var $199=$syms;
      var $arrayidx182=(($199+($and181<<1))|0);
      var $200=HEAP16[(($arrayidx182)>>1)];
      _mrb_vm_const_get($tmp183, $197, $200);
      var $201=$arrayidx179;
      var $202=$tmp183;
      assert(12 % 1 === 0);HEAP32[(($201)>>2)]=HEAP32[(($202)>>2)];HEAP32[((($201)+(4))>>2)]=HEAP32[((($202)+(4))>>2)];HEAP32[((($201)+(8))>>2)]=HEAP32[((($202)+(8))>>2)];
      var $203=$pc;
      var $incdec_ptr184=(($203+4)|0);
      $pc=$incdec_ptr184;
      var $204=HEAP32[(($incdec_ptr184)>>2)];
      $i=$204;
      var $205=$i;
      var $and185=$205 & 127;
      var $arrayidx186=((77368+($and185<<2))|0);
      var $206=HEAP32[(($arrayidx186)>>2)];
      var $indirect_goto_dest = $206;label = 709; break;
    case 33: 
      var $207=$mrb_addr;
      var $208=$i;
      var $shr187=$208 >>> 7;
      var $and188=$shr187 & 65535;
      var $209=$syms;
      var $arrayidx189=(($209+($and188<<1))|0);
      var $210=HEAP16[(($arrayidx189)>>1)];
      var $211=$i;
      var $shr190=$211 >>> 23;
      var $and191=$shr190 & 511;
      var $212=$regs;
      var $arrayidx192=(($212+((($and191)*(12))&-1))|0);
      _mrb_vm_const_set($207, $210, $arrayidx192);
      var $213=$pc;
      var $incdec_ptr193=(($213+4)|0);
      $pc=$incdec_ptr193;
      var $214=HEAP32[(($incdec_ptr193)>>2)];
      $i=$214;
      var $215=$i;
      var $and194=$215 & 127;
      var $arrayidx195=((77368+($and194<<2))|0);
      var $216=HEAP32[(($arrayidx195)>>2)];
      var $indirect_goto_dest = $216;label = 709; break;
    case 34: 
      var $217=$i;
      var $shr197=$217 >>> 23;
      var $and198=$shr197 & 511;
      $a=$and198;
      var $218=$a;
      var $219=$regs;
      var $arrayidx199=(($219+((($218)*(12))&-1))|0);
      var $220=$mrb_addr;
      var $221=$a;
      var $222=$regs;
      var $arrayidx200=(($222+((($221)*(12))&-1))|0);
      var $223=$i;
      var $shr201=$223 >>> 7;
      var $and202=$shr201 & 65535;
      var $224=$syms;
      var $arrayidx203=(($224+($and202<<1))|0);
      var $225=HEAP16[(($arrayidx203)>>1)];
      _mrb_const_get($tmp204, $220, $arrayidx200, $225);
      var $226=$arrayidx199;
      var $227=$tmp204;
      assert(12 % 1 === 0);HEAP32[(($226)>>2)]=HEAP32[(($227)>>2)];HEAP32[((($226)+(4))>>2)]=HEAP32[((($227)+(4))>>2)];HEAP32[((($226)+(8))>>2)]=HEAP32[((($227)+(8))>>2)];
      var $228=$pc;
      var $incdec_ptr205=(($228+4)|0);
      $pc=$incdec_ptr205;
      var $229=HEAP32[(($incdec_ptr205)>>2)];
      $i=$229;
      var $230=$i;
      var $and206=$230 & 127;
      var $arrayidx207=((77368+($and206<<2))|0);
      var $231=HEAP32[(($arrayidx207)>>2)];
      var $indirect_goto_dest = $231;label = 709; break;
    case 35: 
      var $232=$i;
      var $shr210=$232 >>> 23;
      var $and211=$shr210 & 511;
      $a209=$and211;
      var $233=$mrb_addr;
      var $234=$a209;
      var $add212=((($234)+(1))|0);
      var $235=$regs;
      var $arrayidx213=(($235+((($add212)*(12))&-1))|0);
      var $236=$i;
      var $shr214=$236 >>> 7;
      var $and215=$shr214 & 65535;
      var $237=$syms;
      var $arrayidx216=(($237+($and215<<1))|0);
      var $238=HEAP16[(($arrayidx216)>>1)];
      var $239=$a209;
      var $240=$regs;
      var $arrayidx217=(($240+((($239)*(12))&-1))|0);
      _mrb_const_set($233, $arrayidx213, $238, $arrayidx217);
      var $241=$pc;
      var $incdec_ptr218=(($241+4)|0);
      $pc=$incdec_ptr218;
      var $242=HEAP32[(($incdec_ptr218)>>2)];
      $i=$242;
      var $243=$i;
      var $and219=$243 & 127;
      var $arrayidx220=((77368+($and219<<2))|0);
      var $244=HEAP32[(($arrayidx220)>>2)];
      var $indirect_goto_dest = $244;label = 709; break;
    case 36: 
      var $245=$regs;
      var $246=$i;
      var $shr222=$246 >>> 23;
      var $and223=$shr222 & 511;
      var $add_ptr=(($245+((($and223)*(12))&-1))|0);
      $regs_a=$add_ptr;
      var $247=$i;
      var $shr225=$247 >>> 7;
      var $and226=$shr225 & 127;
      $up=$and226;
      var $248=$mrb_addr;
      var $249=$up;
      var $call228=_uvenv($248, $249);
      $e=$call228;
      var $250=$e;
      var $tobool229=(($250)|(0))!=0;
      if ($tobool229) { label = 38; break; } else { label = 37; break; }
    case 37: 
      var $251=$regs_a;
      _mrb_nil_value148($tmp231);
      var $252=$251;
      var $253=$tmp231;
      assert(12 % 1 === 0);HEAP32[(($252)>>2)]=HEAP32[(($253)>>2)];HEAP32[((($252)+(4))>>2)]=HEAP32[((($253)+(4))>>2)];HEAP32[((($252)+(8))>>2)]=HEAP32[((($253)+(8))>>2)];
      label = 39; break;
    case 38: 
      var $254=$i;
      var $shr234=$254 >>> 14;
      var $and235=$shr234 & 511;
      $idx=$and235;
      var $255=$regs_a;
      var $256=$idx;
      var $257=$e;
      var $stack236=(($257+12)|0);
      var $258=HEAP32[(($stack236)>>2)];
      var $arrayidx237=(($258+((($256)*(12))&-1))|0);
      var $259=$255;
      var $260=$arrayidx237;
      assert(12 % 1 === 0);HEAP32[(($259)>>2)]=HEAP32[(($260)>>2)];HEAP32[((($259)+(4))>>2)]=HEAP32[((($260)+(4))>>2)];HEAP32[((($259)+(8))>>2)]=HEAP32[((($260)+(8))>>2)];
      label = 39; break;
    case 39: 
      var $261=$pc;
      var $incdec_ptr239=(($261+4)|0);
      $pc=$incdec_ptr239;
      var $262=HEAP32[(($incdec_ptr239)>>2)];
      $i=$262;
      var $263=$i;
      var $and240=$263 & 127;
      var $arrayidx241=((77368+($and240<<2))|0);
      var $264=HEAP32[(($arrayidx241)>>2)];
      var $indirect_goto_dest = $264;label = 709; break;
    case 40: 
      var $265=$i;
      var $shr244=$265 >>> 7;
      var $and245=$shr244 & 127;
      $up243=$and245;
      var $266=$mrb_addr;
      var $267=$up243;
      var $call248=_uvenv($266, $267);
      $e247=$call248;
      var $268=$e247;
      var $tobool249=(($268)|(0))!=0;
      if ($tobool249) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $269=$regs;
      var $270=$i;
      var $shr253=$270 >>> 23;
      var $and254=$shr253 & 511;
      var $add_ptr255=(($269+((($and254)*(12))&-1))|0);
      $regs_a252=$add_ptr255;
      var $271=$i;
      var $shr258=$271 >>> 14;
      var $and259=$shr258 & 511;
      $idx257=$and259;
      var $272=$idx257;
      var $273=$e247;
      var $stack260=(($273+12)|0);
      var $274=HEAP32[(($stack260)>>2)];
      var $arrayidx261=(($274+((($272)*(12))&-1))|0);
      var $275=$regs_a252;
      var $276=$arrayidx261;
      var $277=$275;
      assert(12 % 1 === 0);HEAP32[(($276)>>2)]=HEAP32[(($277)>>2)];HEAP32[((($276)+(4))>>2)]=HEAP32[((($277)+(4))>>2)];HEAP32[((($276)+(8))>>2)]=HEAP32[((($277)+(8))>>2)];
      var $278=$mrb_addr;
      var $279=$e247;
      var $280=$279;
      _mrb_write_barrier($278, $280);
      label = 42; break;
    case 42: 
      var $281=$pc;
      var $incdec_ptr263=(($281+4)|0);
      $pc=$incdec_ptr263;
      var $282=HEAP32[(($incdec_ptr263)>>2)];
      $i=$282;
      var $283=$i;
      var $and264=$283 & 127;
      var $arrayidx265=((77368+($and264<<2))|0);
      var $284=HEAP32[(($arrayidx265)>>2)];
      var $indirect_goto_dest = $284;label = 709; break;
    case 43: 
      var $285=$i;
      var $shr266=$285 >>> 7;
      var $and267=$shr266 & 65535;
      var $sub268=((($and267)-(32767))|0);
      var $286=$pc;
      var $add_ptr269=(($286+($sub268<<2))|0);
      $pc=$add_ptr269;
      var $287=$pc;
      var $288=HEAP32[(($287)>>2)];
      $i=$288;
      var $289=$i;
      var $and270=$289 & 127;
      var $arrayidx271=((77368+($and270<<2))|0);
      var $290=HEAP32[(($arrayidx271)>>2)];
      var $indirect_goto_dest = $290;label = 709; break;
    case 44: 
      var $291=$i;
      var $shr272=$291 >>> 23;
      var $and273=$shr272 & 511;
      var $292=$regs;
      var $arrayidx274=(($292+((($and273)*(12))&-1))|0);
      var $tt275=(($arrayidx274+8)|0);
      var $293=HEAP32[(($tt275)>>2)];
      var $cmp276=(($293)|(0))!=0;
      if ($cmp276) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $294=$i;
      var $shr279=$294 >>> 7;
      var $and280=$shr279 & 65535;
      var $sub281=((($and280)-(32767))|0);
      var $295=$pc;
      var $add_ptr282=(($295+($sub281<<2))|0);
      $pc=$add_ptr282;
      var $296=$pc;
      var $297=HEAP32[(($296)>>2)];
      $i=$297;
      var $298=$i;
      var $and283=$298 & 127;
      var $arrayidx284=((77368+($and283<<2))|0);
      var $299=HEAP32[(($arrayidx284)>>2)];
      var $indirect_goto_dest = $299;label = 709; break;
    case 46: 
      var $300=$pc;
      var $incdec_ptr286=(($300+4)|0);
      $pc=$incdec_ptr286;
      var $301=HEAP32[(($incdec_ptr286)>>2)];
      $i=$301;
      var $302=$i;
      var $and287=$302 & 127;
      var $arrayidx288=((77368+($and287<<2))|0);
      var $303=HEAP32[(($arrayidx288)>>2)];
      var $indirect_goto_dest = $303;label = 709; break;
    case 47: 
      var $304=$i;
      var $shr289=$304 >>> 23;
      var $and290=$shr289 & 511;
      var $305=$regs;
      var $arrayidx291=(($305+((($and290)*(12))&-1))|0);
      var $tt292=(($arrayidx291+8)|0);
      var $306=HEAP32[(($tt292)>>2)];
      var $cmp293=(($306)|(0))!=0;
      if ($cmp293) { label = 49; break; } else { label = 48; break; }
    case 48: 
      var $307=$i;
      var $shr296=$307 >>> 7;
      var $and297=$shr296 & 65535;
      var $sub298=((($and297)-(32767))|0);
      var $308=$pc;
      var $add_ptr299=(($308+($sub298<<2))|0);
      $pc=$add_ptr299;
      var $309=$pc;
      var $310=HEAP32[(($309)>>2)];
      $i=$310;
      var $311=$i;
      var $and300=$311 & 127;
      var $arrayidx301=((77368+($and300<<2))|0);
      var $312=HEAP32[(($arrayidx301)>>2)];
      var $indirect_goto_dest = $312;label = 709; break;
    case 49: 
      var $313=$pc;
      var $incdec_ptr303=(($313+4)|0);
      $pc=$incdec_ptr303;
      var $314=HEAP32[(($incdec_ptr303)>>2)];
      $i=$314;
      var $315=$i;
      var $and304=$315 & 127;
      var $arrayidx305=((77368+($and304<<2))|0);
      var $316=HEAP32[(($arrayidx305)>>2)];
      var $indirect_goto_dest = $316;label = 709; break;
    case 50: 
      var $317=$mrb_addr;
      var $c306=(($317+8)|0);
      var $318=HEAP32[(($c306)>>2)];
      var $rsize=(($318+32)|0);
      var $319=HEAP32[(($rsize)>>2)];
      var $320=$mrb_addr;
      var $c307=(($320+8)|0);
      var $321=HEAP32[(($c307)>>2)];
      var $ci308=(($321+16)|0);
      var $322=HEAP32[(($ci308)>>2)];
      var $ridx=(($322+32)|0);
      var $323=HEAP32[(($ridx)>>2)];
      var $cmp309=(($319)|(0)) <= (($323)|(0));
      if ($cmp309) { label = 51; break; } else { label = 55; break; }
    case 51: 
      var $324=$mrb_addr;
      var $c312=(($324+8)|0);
      var $325=HEAP32[(($c312)>>2)];
      var $rsize313=(($325+32)|0);
      var $326=HEAP32[(($rsize313)>>2)];
      var $cmp314=(($326)|(0))==0;
      if ($cmp314) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $327=$mrb_addr;
      var $c317=(($327+8)|0);
      var $328=HEAP32[(($c317)>>2)];
      var $rsize318=(($328+32)|0);
      HEAP32[(($rsize318)>>2)]=16;
      label = 54; break;
    case 53: 
      var $329=$mrb_addr;
      var $c320=(($329+8)|0);
      var $330=HEAP32[(($c320)>>2)];
      var $rsize321=(($330+32)|0);
      var $331=HEAP32[(($rsize321)>>2)];
      var $mul=($331<<1);
      HEAP32[(($rsize321)>>2)]=$mul;
      label = 54; break;
    case 54: 
      var $332=$mrb_addr;
      var $333=$mrb_addr;
      var $c323=(($333+8)|0);
      var $334=HEAP32[(($c323)>>2)];
      var $rescue=(($334+28)|0);
      var $335=HEAP32[(($rescue)>>2)];
      var $336=$335;
      var $337=$mrb_addr;
      var $c324=(($337+8)|0);
      var $338=HEAP32[(($c324)>>2)];
      var $rsize325=(($338+32)|0);
      var $339=HEAP32[(($rsize325)>>2)];
      var $mul326=($339<<2);
      var $call327=_mrb_realloc($332, $336, $mul326);
      var $340=$call327;
      var $341=$mrb_addr;
      var $c328=(($341+8)|0);
      var $342=HEAP32[(($c328)>>2)];
      var $rescue329=(($342+28)|0);
      HEAP32[(($rescue329)>>2)]=$340;
      label = 55; break;
    case 55: 
      var $343=$pc;
      var $344=$i;
      var $shr331=$344 >>> 7;
      var $and332=$shr331 & 65535;
      var $sub333=((($and332)-(32767))|0);
      var $add_ptr334=(($343+($sub333<<2))|0);
      var $345=$mrb_addr;
      var $c335=(($345+8)|0);
      var $346=HEAP32[(($c335)>>2)];
      var $ci336=(($346+16)|0);
      var $347=HEAP32[(($ci336)>>2)];
      var $ridx337=(($347+32)|0);
      var $348=HEAP32[(($ridx337)>>2)];
      var $inc=((($348)+(1))|0);
      HEAP32[(($ridx337)>>2)]=$inc;
      var $349=$mrb_addr;
      var $c338=(($349+8)|0);
      var $350=HEAP32[(($c338)>>2)];
      var $rescue339=(($350+28)|0);
      var $351=HEAP32[(($rescue339)>>2)];
      var $arrayidx340=(($351+($348<<2))|0);
      HEAP32[(($arrayidx340)>>2)]=$add_ptr334;
      var $352=$pc;
      var $incdec_ptr341=(($352+4)|0);
      $pc=$incdec_ptr341;
      var $353=HEAP32[(($incdec_ptr341)>>2)];
      $i=$353;
      var $354=$i;
      var $and342=$354 & 127;
      var $arrayidx343=((77368+($and342<<2))|0);
      var $355=HEAP32[(($arrayidx343)>>2)];
      var $indirect_goto_dest = $355;label = 709; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $356=$mrb_addr;
      var $exc=(($356+16)|0);
      var $357=HEAP32[(($exc)>>2)];
      var $358=$357;
      var $359=HEAP32[(($358)>>2)];
      var $bf_clear=$359 & 255;
      var $360=$i;
      var $shr345=$360 >>> 23;
      var $and346=$shr345 & 511;
      var $361=$regs;
      var $arrayidx347=(($361+((($and346)*(12))&-1))|0);
      var $tt348=(($arrayidx347+8)|0);
      HEAP32[(($tt348)>>2)]=$bf_clear;
      var $362=$mrb_addr;
      var $exc349=(($362+16)|0);
      var $363=HEAP32[(($exc349)>>2)];
      var $364=$363;
      var $365=$i;
      var $shr350=$365 >>> 23;
      var $and351=$shr350 & 511;
      var $366=$regs;
      var $arrayidx352=(($366+((($and351)*(12))&-1))|0);
      var $value353=(($arrayidx352)|0);
      var $p=$value353;
      HEAP32[(($p)>>2)]=$364;
      label = 58; break;
    case 58: 
      var $367=$mrb_addr;
      var $exc355=(($367+16)|0);
      HEAP32[(($exc355)>>2)]=0;
      var $368=$pc;
      var $incdec_ptr356=(($368+4)|0);
      $pc=$incdec_ptr356;
      var $369=HEAP32[(($incdec_ptr356)>>2)];
      $i=$369;
      var $370=$i;
      var $and357=$370 & 127;
      var $arrayidx358=((77368+($and357<<2))|0);
      var $371=HEAP32[(($arrayidx358)>>2)];
      var $indirect_goto_dest = $371;label = 709; break;
    case 59: 
      var $372=$i;
      var $shr361=$372 >>> 23;
      var $and362=$shr361 & 511;
      $a360=$and362;
      label = 60; break;
    case 60: 
      var $373=$a360;
      var $dec=((($373)-(1))|0);
      $a360=$dec;
      var $tobool363=(($373)|(0))!=0;
      if ($tobool363) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $374=$mrb_addr;
      var $c364=(($374+8)|0);
      var $375=HEAP32[(($c364)>>2)];
      var $ci365=(($375+16)|0);
      var $376=HEAP32[(($ci365)>>2)];
      var $ridx366=(($376+32)|0);
      var $377=HEAP32[(($ridx366)>>2)];
      var $dec367=((($377)-(1))|0);
      HEAP32[(($ridx366)>>2)]=$dec367;
      label = 60; break;
    case 62: 
      var $378=$pc;
      var $incdec_ptr368=(($378+4)|0);
      $pc=$incdec_ptr368;
      var $379=HEAP32[(($incdec_ptr368)>>2)];
      $i=$379;
      var $380=$i;
      var $and369=$380 & 127;
      var $arrayidx370=((77368+($and369<<2))|0);
      var $381=HEAP32[(($arrayidx370)>>2)];
      var $indirect_goto_dest = $381;label = 709; break;
    case 63: 
      var $382=$i;
      var $shr371=$382 >>> 23;
      var $and372=$shr371 & 511;
      var $383=$regs;
      var $arrayidx373=(($383+((($and372)*(12))&-1))|0);
      var $value374=(($arrayidx373)|0);
      var $p375=$value374;
      var $384=HEAP32[(($p375)>>2)];
      var $385=$384;
      var $386=$mrb_addr;
      var $exc376=(($386+16)|0);
      HEAP32[(($exc376)>>2)]=$385;
      label = 223; break;
    case 64: 
      var $387=$mrb_addr;
      var $388=$irep;
      var $idx379=(($388)|0);
      var $389=HEAP32[(($idx379)>>2)];
      var $390=$i;
      var $shr380=$390 >>> 7;
      var $and381=$shr380 & 65535;
      var $add382=((($389)+($and381))|0);
      var $391=$mrb_addr;
      var $irep383=(($391+24)|0);
      var $392=HEAP32[(($irep383)>>2)];
      var $arrayidx384=(($392+($add382<<2))|0);
      var $393=HEAP32[(($arrayidx384)>>2)];
      var $call385=_mrb_closure_new($387, $393);
      $p378=$call385;
      var $394=$mrb_addr;
      var $c386=(($394+8)|0);
      var $395=HEAP32[(($c386)>>2)];
      var $esize=(($395+40)|0);
      var $396=HEAP32[(($esize)>>2)];
      var $397=$mrb_addr;
      var $c387=(($397+8)|0);
      var $398=HEAP32[(($c387)>>2)];
      var $ci388=(($398+16)|0);
      var $399=HEAP32[(($ci388)>>2)];
      var $eidx=(($399+36)|0);
      var $400=HEAP32[(($eidx)>>2)];
      var $cmp389=(($396)|(0)) <= (($400)|(0));
      if ($cmp389) { label = 65; break; } else { label = 69; break; }
    case 65: 
      var $401=$mrb_addr;
      var $c392=(($401+8)|0);
      var $402=HEAP32[(($c392)>>2)];
      var $esize393=(($402+40)|0);
      var $403=HEAP32[(($esize393)>>2)];
      var $cmp394=(($403)|(0))==0;
      if ($cmp394) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $404=$mrb_addr;
      var $c397=(($404+8)|0);
      var $405=HEAP32[(($c397)>>2)];
      var $esize398=(($405+40)|0);
      HEAP32[(($esize398)>>2)]=16;
      label = 68; break;
    case 67: 
      var $406=$mrb_addr;
      var $c400=(($406+8)|0);
      var $407=HEAP32[(($c400)>>2)];
      var $esize401=(($407+40)|0);
      var $408=HEAP32[(($esize401)>>2)];
      var $mul402=($408<<1);
      HEAP32[(($esize401)>>2)]=$mul402;
      label = 68; break;
    case 68: 
      var $409=$mrb_addr;
      var $410=$mrb_addr;
      var $c404=(($410+8)|0);
      var $411=HEAP32[(($c404)>>2)];
      var $ensure=(($411+36)|0);
      var $412=HEAP32[(($ensure)>>2)];
      var $413=$412;
      var $414=$mrb_addr;
      var $c405=(($414+8)|0);
      var $415=HEAP32[(($c405)>>2)];
      var $esize406=(($415+40)|0);
      var $416=HEAP32[(($esize406)>>2)];
      var $mul407=($416<<2);
      var $call408=_mrb_realloc($409, $413, $mul407);
      var $417=$call408;
      var $418=$mrb_addr;
      var $c409=(($418+8)|0);
      var $419=HEAP32[(($c409)>>2)];
      var $ensure410=(($419+36)|0);
      HEAP32[(($ensure410)>>2)]=$417;
      label = 69; break;
    case 69: 
      var $420=$p378;
      var $421=$mrb_addr;
      var $c412=(($421+8)|0);
      var $422=HEAP32[(($c412)>>2)];
      var $ci413=(($422+16)|0);
      var $423=HEAP32[(($ci413)>>2)];
      var $eidx414=(($423+36)|0);
      var $424=HEAP32[(($eidx414)>>2)];
      var $inc415=((($424)+(1))|0);
      HEAP32[(($eidx414)>>2)]=$inc415;
      var $425=$mrb_addr;
      var $c416=(($425+8)|0);
      var $426=HEAP32[(($c416)>>2)];
      var $ensure417=(($426+36)|0);
      var $427=HEAP32[(($ensure417)>>2)];
      var $arrayidx418=(($427+($424<<2))|0);
      HEAP32[(($arrayidx418)>>2)]=$420;
      var $428=$mrb_addr;
      var $429=$ai;
      _mrb_gc_arena_restore($428, $429);
      var $430=$pc;
      var $incdec_ptr419=(($430+4)|0);
      $pc=$incdec_ptr419;
      var $431=HEAP32[(($incdec_ptr419)>>2)];
      $i=$431;
      var $432=$i;
      var $and420=$432 & 127;
      var $arrayidx421=((77368+($and420<<2))|0);
      var $433=HEAP32[(($arrayidx421)>>2)];
      var $indirect_goto_dest = $433;label = 709; break;
    case 70: 
      var $434=$i;
      var $shr425=$434 >>> 23;
      var $and426=$shr425 & 511;
      $a424=$and426;
      $n=0;
      label = 71; break;
    case 71: 
      var $435=$n;
      var $436=$a424;
      var $cmp427=(($435)|(0)) < (($436)|(0));
      if ($cmp427) { label = 72; break; } else { label = 74; break; }
    case 72: 
      var $437=$mrb_addr;
      var $438=$mrb_addr;
      var $c429=(($438+8)|0);
      var $439=HEAP32[(($c429)>>2)];
      var $ci430=(($439+16)|0);
      var $440=HEAP32[(($ci430)>>2)];
      var $eidx431=(($440+36)|0);
      var $441=HEAP32[(($eidx431)>>2)];
      var $dec432=((($441)-(1))|0);
      HEAP32[(($eidx431)>>2)]=$dec432;
      _ecall($437, $dec432);
      label = 73; break;
    case 73: 
      var $442=$n;
      var $inc433=((($442)+(1))|0);
      $n=$inc433;
      label = 71; break;
    case 74: 
      var $443=$mrb_addr;
      var $444=$ai;
      _mrb_gc_arena_restore($443, $444);
      var $445=$pc;
      var $incdec_ptr434=(($445+4)|0);
      $pc=$incdec_ptr434;
      var $446=HEAP32[(($incdec_ptr434)>>2)];
      $i=$446;
      var $447=$i;
      var $and435=$447 & 127;
      var $arrayidx436=((77368+($and435<<2))|0);
      var $448=HEAP32[(($arrayidx436)>>2)];
      var $indirect_goto_dest = $448;label = 709; break;
    case 75: 
      var $449=$i;
      var $shr439=$449 >>> 23;
      var $and440=$shr439 & 511;
      $a438=$and440;
      label = 76; break;
    case 76: 
      var $450=$a438;
      var $451=$regs;
      var $arrayidx442=(($451+((($450)*(12))&-1))|0);
      var $tt443=(($arrayidx442+8)|0);
      HEAP32[(($tt443)>>2)]=0;
      var $452=$a438;
      var $453=$regs;
      var $arrayidx444=(($453+((($452)*(12))&-1))|0);
      var $value445=(($arrayidx444)|0);
      var $i446=$value445;
      HEAP32[(($i446)>>2)]=0;
      label = 77; break;
    case 77: 
      var $454=$pc;
      var $incdec_ptr448=(($454+4)|0);
      $pc=$incdec_ptr448;
      var $455=HEAP32[(($incdec_ptr448)>>2)];
      $i=$455;
      var $456=$i;
      var $and449=$456 & 127;
      var $arrayidx450=((77368+($and449<<2))|0);
      var $457=HEAP32[(($arrayidx450)>>2)];
      var $indirect_goto_dest = $457;label = 709; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      var $458=$i;
      var $shr453=$458 >>> 23;
      var $and454=$shr453 & 511;
      $a452=$and454;
      var $459=$i;
      var $shr457=$459 >>> 7;
      var $and458=$shr457 & 127;
      $n456=$and458;
      var $460=$i;
      var $shr467=$460 >>> 14;
      var $and468=$shr467 & 511;
      var $461=$syms;
      var $arrayidx469=(($461+($and468<<1))|0);
      var $462=HEAP16[(($arrayidx469)>>1)];
      $mid=$462;
      var $463=$a452;
      var $464=$regs;
      var $arrayidx470=(($464+((($463)*(12))&-1))|0);
      var $465=$recv;
      var $466=$arrayidx470;
      assert(12 % 1 === 0);HEAP32[(($465)>>2)]=HEAP32[(($466)>>2)];HEAP32[((($465)+(4))>>2)]=HEAP32[((($466)+(4))>>2)];HEAP32[((($465)+(8))>>2)]=HEAP32[((($466)+(8))>>2)];
      var $467=$i;
      var $and471=$467 & 127;
      var $cmp472=(($and471)|(0))!=33;
      if ($cmp472) { label = 81; break; } else { label = 89; break; }
    case 81: 
      var $468=$n456;
      var $cmp475=(($468)|(0))==127;
      if ($cmp475) { label = 82; break; } else { label = 85; break; }
    case 82: 
      label = 83; break;
    case 83: 
      var $469=$a452;
      var $add479=((($469)+(2))|0);
      var $470=$regs;
      var $arrayidx480=(($470+((($add479)*(12))&-1))|0);
      var $tt481=(($arrayidx480+8)|0);
      HEAP32[(($tt481)>>2)]=0;
      var $471=$a452;
      var $add482=((($471)+(2))|0);
      var $472=$regs;
      var $arrayidx483=(($472+((($add482)*(12))&-1))|0);
      var $value484=(($arrayidx483)|0);
      var $i485=$value484;
      HEAP32[(($i485)>>2)]=0;
      label = 84; break;
    case 84: 
      label = 88; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $473=$a452;
      var $474=$n456;
      var $add489=((($473)+($474))|0);
      var $add490=((($add489)+(1))|0);
      var $475=$regs;
      var $arrayidx491=(($475+((($add490)*(12))&-1))|0);
      var $tt492=(($arrayidx491+8)|0);
      HEAP32[(($tt492)>>2)]=0;
      var $476=$a452;
      var $477=$n456;
      var $add493=((($476)+($477))|0);
      var $add494=((($add493)+(1))|0);
      var $478=$regs;
      var $arrayidx495=(($478+((($add494)*(12))&-1))|0);
      var $value496=(($arrayidx495)|0);
      var $i497=$value496;
      HEAP32[(($i497)>>2)]=0;
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $479=$mrb_addr;
      var $call501=_mrb_class($479, $recv);
      HEAP32[(($c461)>>2)]=$call501;
      var $480=$mrb_addr;
      var $481=$mid;
      var $call502=_mrb_method_search_vm($480, $c461, $481);
      $m=$call502;
      var $482=$m;
      var $tobool503=(($482)|(0))!=0;
      if ($tobool503) { label = 94; break; } else { label = 90; break; }
    case 90: 
      var $483=$mid;
      _mrb_symbol_value145($sym506, $483);
      var $484=$mrb_addr;
      var $call507=_mrb_intern2($484, ((104432)|0), 14);
      $mid=$call507;
      var $485=$mrb_addr;
      var $486=$mid;
      var $call508=_mrb_method_search_vm($485, $c461, $486);
      $m=$call508;
      var $487=$n456;
      var $cmp509=(($487)|(0))==127;
      if ($cmp509) { label = 91; break; } else { label = 92; break; }
    case 91: 
      var $488=$mrb_addr;
      var $489=$a452;
      var $add512=((($489)+(1))|0);
      var $490=$regs;
      var $arrayidx513=(($490+((($add512)*(12))&-1))|0);
      _mrb_ary_unshift($tmp514, $488, $arrayidx513, $sym506);
      label = 93; break;
    case 92: 
      var $491=$regs;
      var $492=$a452;
      var $add_ptr516=(($491+((($492)*(12))&-1))|0);
      var $add_ptr517=(($add_ptr516+24)|0);
      var $493=$regs;
      var $494=$a452;
      var $add_ptr518=(($493+((($494)*(12))&-1))|0);
      var $add_ptr519=(($add_ptr518+12)|0);
      var $495=$n456;
      var $inc520=((($495)+(1))|0);
      $n456=$inc520;
      _value_move($add_ptr517, $add_ptr519, $inc520);
      var $496=$a452;
      var $add521=((($496)+(1))|0);
      var $497=$regs;
      var $arrayidx522=(($497+((($add521)*(12))&-1))|0);
      var $498=$arrayidx522;
      var $499=$sym506;
      assert(12 % 1 === 0);HEAP32[(($498)>>2)]=HEAP32[(($499)>>2)];HEAP32[((($498)+(4))>>2)]=HEAP32[((($499)+(4))>>2)];HEAP32[((($498)+(8))>>2)]=HEAP32[((($499)+(8))>>2)];
      label = 93; break;
    case 93: 
      label = 94; break;
    case 94: 
      var $500=$mrb_addr;
      var $call525=_cipush($500);
      $ci463=$call525;
      var $501=$mid;
      var $502=$ci463;
      var $mid526=(($502)|0);
      HEAP16[(($mid526)>>1)]=$501;
      var $503=$m;
      var $504=$ci463;
      var $proc527=(($504+4)|0);
      HEAP32[(($proc527)>>2)]=$503;
      var $505=$mrb_addr;
      var $c528=(($505+8)|0);
      var $506=HEAP32[(($c528)>>2)];
      var $stack529=(($506+4)|0);
      var $507=HEAP32[(($stack529)>>2)];
      var $508=$mrb_addr;
      var $c530=(($508+8)|0);
      var $509=HEAP32[(($c530)>>2)];
      var $stbase=(($509+8)|0);
      var $510=HEAP32[(($stbase)>>2)];
      var $sub_ptr_lhs_cast=$507;
      var $sub_ptr_rhs_cast=$510;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|(0)))/(12))&-1);
      var $511=$ci463;
      var $stackidx=(($511+8)|0);
      HEAP32[(($stackidx)>>2)]=$sub_ptr_div;
      var $512=$n456;
      var $cmp531=(($512)|(0))==127;
      if ($cmp531) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $513=$ci463;
      var $argc=(($513+16)|0);
      HEAP32[(($argc)>>2)]=-1;
      label = 97; break;
    case 96: 
      var $514=$n456;
      var $515=$ci463;
      var $argc535=(($515+16)|0);
      HEAP32[(($argc535)>>2)]=$514;
      label = 97; break;
    case 97: 
      var $516=HEAP32[(($c461)>>2)];
      var $517=$516;
      var $518=HEAP32[(($517)>>2)];
      var $bf_clear537=$518 & 255;
      var $cmp538=(($bf_clear537)|(0))==11;
      if ($cmp538) { label = 98; break; } else { label = 99; break; }
    case 98: 
      var $519=HEAP32[(($c461)>>2)];
      var $c541=(($519+4)|0);
      var $520=HEAP32[(($c541)>>2)];
      var $521=$ci463;
      var $target_class=(($521+28)|0);
      HEAP32[(($target_class)>>2)]=$520;
      label = 100; break;
    case 99: 
      var $522=HEAP32[(($c461)>>2)];
      var $523=$ci463;
      var $target_class543=(($523+28)|0);
      HEAP32[(($target_class543)>>2)]=$522;
      label = 100; break;
    case 100: 
      var $524=$pc;
      var $add_ptr545=(($524+4)|0);
      var $525=$ci463;
      var $pc546=(($525+20)|0);
      HEAP32[(($pc546)>>2)]=$add_ptr545;
      var $526=$a452;
      var $527=$ci463;
      var $acc=(($527+24)|0);
      HEAP32[(($acc)>>2)]=$526;
      var $528=$a452;
      var $529=$mrb_addr;
      var $c547=(($529+8)|0);
      var $530=HEAP32[(($c547)>>2)];
      var $stack548=(($530+4)|0);
      var $531=HEAP32[(($stack548)>>2)];
      var $add_ptr549=(($531+((($528)*(12))&-1))|0);
      HEAP32[(($stack548)>>2)]=$add_ptr549;
      var $532=$m;
      var $533=$532;
      var $534=HEAP32[(($533)>>2)];
      var $535=$534 >>> 11;
      var $bf_clear550=$535 & 2097151;
      var $and551=$bf_clear550 & 128;
      var $cmp552=(($and551)|(0))!=0;
      if ($cmp552) { label = 101; break; } else { label = 111; break; }
    case 101: 
      var $536=$n456;
      var $cmp555=(($536)|(0))==127;
      if ($cmp555) { label = 102; break; } else { label = 103; break; }
    case 102: 
      var $537=$ci463;
      var $nregs558=(($537+12)|0);
      HEAP32[(($nregs558)>>2)]=3;
      label = 104; break;
    case 103: 
      var $538=$n456;
      var $add560=((($538)+(2))|0);
      var $539=$ci463;
      var $nregs561=(($539+12)|0);
      HEAP32[(($nregs561)>>2)]=$add560;
      label = 104; break;
    case 104: 
      var $540=$m;
      var $body563=(($540+12)|0);
      var $func=$body563;
      var $541=HEAP32[(($func)>>2)];
      var $542=$mrb_addr;
      FUNCTION_TABLE[$541]($tmp564, $542, $recv);
      var $543=$result;
      var $544=$tmp564;
      assert(12 % 1 === 0);HEAP32[(($543)>>2)]=HEAP32[(($544)>>2)];HEAP32[((($543)+(4))>>2)]=HEAP32[((($544)+(4))>>2)];HEAP32[((($543)+(8))>>2)]=HEAP32[((($544)+(8))>>2)];
      var $545=$mrb_addr;
      var $c565=(($545+8)|0);
      var $546=HEAP32[(($c565)>>2)];
      var $stack566=(($546+4)|0);
      var $547=HEAP32[(($stack566)>>2)];
      var $arrayidx567=(($547)|0);
      var $548=$arrayidx567;
      var $549=$result;
      assert(12 % 1 === 0);HEAP32[(($548)>>2)]=HEAP32[(($549)>>2)];HEAP32[((($548)+(4))>>2)]=HEAP32[((($549)+(4))>>2)];HEAP32[((($548)+(8))>>2)]=HEAP32[((($549)+(8))>>2)];
      var $550=$mrb_addr;
      var $551=$ai;
      _mrb_gc_arena_restore($550, $551);
      var $552=$mrb_addr;
      var $exc568=(($552+16)|0);
      var $553=HEAP32[(($exc568)>>2)];
      var $tobool569=(($553)|(0))!=0;
      if ($tobool569) { label = 105; break; } else { label = 106; break; }
    case 105: 
      label = 223; break;
    case 106: 
      var $554=$mrb_addr;
      var $c572=(($554+8)|0);
      var $555=HEAP32[(($c572)>>2)];
      var $ci573=(($555+16)|0);
      var $556=HEAP32[(($ci573)>>2)];
      $ci463=$556;
      var $557=$ci463;
      var $target_class574=(($557+28)|0);
      var $558=HEAP32[(($target_class574)>>2)];
      var $tobool575=(($558)|(0))!=0;
      if ($tobool575) { label = 110; break; } else { label = 107; break; }
    case 107: 
      var $559=$ci463;
      var $arrayidx577=((($559)-(44))|0);
      var $proc578=(($arrayidx577+4)|0);
      var $560=HEAP32[(($proc578)>>2)];
      var $561=$560;
      var $562=HEAP32[(($561)>>2)];
      var $563=$562 >>> 11;
      var $bf_clear579=$563 & 2097151;
      var $and580=$bf_clear579 & 128;
      var $cmp581=(($and580)|(0))!=0;
      if ($cmp581) { label = 109; break; } else { label = 108; break; }
    case 108: 
      var $564=$ci463;
      var $arrayidx584=((($564)-(44))|0);
      var $proc585=(($arrayidx584+4)|0);
      var $565=HEAP32[(($proc585)>>2)];
      var $body586=(($565+12)|0);
      var $irep587=$body586;
      var $566=HEAP32[(($irep587)>>2)];
      $irep=$566;
      var $567=$irep;
      var $pool588=(($567+16)|0);
      var $568=HEAP32[(($pool588)>>2)];
      $pool=$568;
      var $569=$irep;
      var $syms589=(($569+20)|0);
      var $570=HEAP32[(($syms589)>>2)];
      $syms=$570;
      label = 109; break;
    case 109: 
      label = 110; break;
    case 110: 
      var $571=$mrb_addr;
      var $c592=(($571+8)|0);
      var $572=HEAP32[(($c592)>>2)];
      var $stbase593=(($572+8)|0);
      var $573=HEAP32[(($stbase593)>>2)];
      var $574=$ci463;
      var $stackidx594=(($574+8)|0);
      var $575=HEAP32[(($stackidx594)>>2)];
      var $add_ptr595=(($573+((($575)*(12))&-1))|0);
      var $576=$mrb_addr;
      var $c596=(($576+8)|0);
      var $577=HEAP32[(($c596)>>2)];
      var $stack597=(($577+4)|0);
      HEAP32[(($stack597)>>2)]=$add_ptr595;
      $regs=$add_ptr595;
      var $578=$ci463;
      var $pc598=(($578+20)|0);
      var $579=HEAP32[(($pc598)>>2)];
      $pc=$579;
      var $580=$mrb_addr;
      _cipop($580);
      var $581=$pc;
      var $582=HEAP32[(($581)>>2)];
      $i=$582;
      var $583=$i;
      var $and599=$583 & 127;
      var $arrayidx600=((77368+($and599<<2))|0);
      var $584=HEAP32[(($arrayidx600)>>2)];
      var $indirect_goto_dest = $584;label = 709; break;
    case 111: 
      var $585=$m;
      var $586=$mrb_addr;
      var $c602=(($586+8)|0);
      var $587=HEAP32[(($c602)>>2)];
      var $ci603=(($587+16)|0);
      var $588=HEAP32[(($ci603)>>2)];
      var $proc604=(($588+4)|0);
      HEAP32[(($proc604)>>2)]=$585;
      $proc_addr=$585;
      var $589=$m;
      var $body605=(($589+12)|0);
      var $irep606=$body605;
      var $590=HEAP32[(($irep606)>>2)];
      $irep=$590;
      var $591=$irep;
      var $pool607=(($591+16)|0);
      var $592=HEAP32[(($pool607)>>2)];
      $pool=$592;
      var $593=$irep;
      var $syms608=(($593+20)|0);
      var $594=HEAP32[(($syms608)>>2)];
      $syms=$594;
      var $595=$irep;
      var $nregs609=(($595+6)|0);
      var $596=HEAP16[(($nregs609)>>1)];
      var $conv610=(($596)&(65535));
      var $597=$ci463;
      var $nregs611=(($597+12)|0);
      HEAP32[(($nregs611)>>2)]=$conv610;
      var $598=$ci463;
      var $argc612=(($598+16)|0);
      var $599=HEAP32[(($argc612)>>2)];
      var $cmp613=(($599)|(0)) < 0;
      if ($cmp613) { label = 112; break; } else { label = 116; break; }
    case 112: 
      var $600=$mrb_addr;
      var $601=$irep;
      var $nregs616=(($601+6)|0);
      var $602=HEAP16[(($nregs616)>>1)];
      var $conv617=(($602)&(65535));
      var $cmp618=(($conv617)|(0)) < 3;
      if ($cmp618) { label = 113; break; } else { label = 114; break; }
    case 113: 
      var $cond = 3;label = 115; break;
    case 114: 
      var $603=$irep;
      var $nregs620=(($603+6)|0);
      var $604=HEAP16[(($nregs620)>>1)];
      var $conv621=(($604)&(65535));
      var $cond = $conv621;label = 115; break;
    case 115: 
      var $cond;
      _stack_extend($600, $cond, 3);
      label = 117; break;
    case 116: 
      var $605=$mrb_addr;
      var $606=$irep;
      var $nregs623=(($606+6)|0);
      var $607=HEAP16[(($nregs623)>>1)];
      var $conv624=(($607)&(65535));
      var $608=$ci463;
      var $argc625=(($608+16)|0);
      var $609=HEAP32[(($argc625)>>2)];
      var $add626=((($609)+(2))|0);
      _stack_extend($605, $conv624, $add626);
      label = 117; break;
    case 117: 
      var $610=$mrb_addr;
      var $c628=(($610+8)|0);
      var $611=HEAP32[(($c628)>>2)];
      var $stack629=(($611+4)|0);
      var $612=HEAP32[(($stack629)>>2)];
      $regs=$612;
      var $613=$irep;
      var $iseq630=(($613+12)|0);
      var $614=HEAP32[(($iseq630)>>2)];
      $pc=$614;
      var $615=$pc;
      var $616=HEAP32[(($615)>>2)];
      $i=$616;
      var $617=$i;
      var $and631=$617 & 127;
      var $arrayidx632=((77368+($and631<<2))|0);
      var $618=HEAP32[(($arrayidx632)>>2)];
      var $indirect_goto_dest = $618;label = 709; break;
    case 118: 
      var $619=$pc;
      var $incdec_ptr633=(($619+4)|0);
      $pc=$incdec_ptr633;
      var $620=HEAP32[(($incdec_ptr633)>>2)];
      $i=$620;
      var $621=$i;
      var $and634=$621 & 127;
      var $arrayidx635=((77368+($and634<<2))|0);
      var $622=HEAP32[(($arrayidx635)>>2)];
      var $indirect_goto_dest = $622;label = 709; break;
    case 119: 
      var $623=$mrb_addr;
      var $c640=(($623+8)|0);
      var $624=HEAP32[(($c640)>>2)];
      var $stack641=(($624+4)|0);
      var $625=HEAP32[(($stack641)>>2)];
      var $arrayidx642=(($625)|0);
      var $626=$recv639;
      var $627=$arrayidx642;
      assert(12 % 1 === 0);HEAP32[(($626)>>2)]=HEAP32[(($627)>>2)];HEAP32[((($626)+(4))>>2)]=HEAP32[((($627)+(4))>>2)];HEAP32[((($626)+(8))>>2)]=HEAP32[((($627)+(8))>>2)];
      var $value645=(($recv639)|0);
      var $p646=$value645;
      var $628=HEAP32[(($p646)>>2)];
      var $629=$628;
      $m644=$629;
      var $630=$mrb_addr;
      var $c647=(($630+8)|0);
      var $631=HEAP32[(($c647)>>2)];
      var $ci648=(($631+16)|0);
      var $632=HEAP32[(($ci648)>>2)];
      $ci637=$632;
      var $633=$m644;
      var $target_class649=(($633+16)|0);
      var $634=HEAP32[(($target_class649)>>2)];
      var $635=$ci637;
      var $target_class650=(($635+28)|0);
      HEAP32[(($target_class650)>>2)]=$634;
      var $636=$m644;
      var $637=$ci637;
      var $proc651=(($637+4)|0);
      HEAP32[(($proc651)>>2)]=$636;
      var $638=$m644;
      var $env=(($638+20)|0);
      var $639=HEAP32[(($env)>>2)];
      var $tobool652=(($639)|(0))!=0;
      if ($tobool652) { label = 120; break; } else { label = 125; break; }
    case 120: 
      var $640=$m644;
      var $env654=(($640+20)|0);
      var $641=HEAP32[(($env654)>>2)];
      var $mid655=(($641+16)|0);
      var $642=HEAP16[(($mid655)>>1)];
      var $tobool656=(($642 << 16) >> 16)!=0;
      if ($tobool656) { label = 121; break; } else { label = 122; break; }
    case 121: 
      var $643=$m644;
      var $env658=(($643+20)|0);
      var $644=HEAP32[(($env658)>>2)];
      var $mid659=(($644+16)|0);
      var $645=HEAP16[(($mid659)>>1)];
      var $646=$ci637;
      var $mid660=(($646)|0);
      HEAP16[(($mid660)>>1)]=$645;
      label = 122; break;
    case 122: 
      var $647=$m644;
      var $env662=(($647+20)|0);
      var $648=HEAP32[(($env662)>>2)];
      var $stack663=(($648+12)|0);
      var $649=HEAP32[(($stack663)>>2)];
      var $tobool664=(($649)|(0))!=0;
      if ($tobool664) { label = 124; break; } else { label = 123; break; }
    case 123: 
      var $650=$mrb_addr;
      var $c666=(($650+8)|0);
      var $651=HEAP32[(($c666)>>2)];
      var $stack667=(($651+4)|0);
      var $652=HEAP32[(($stack667)>>2)];
      var $653=$m644;
      var $env668=(($653+20)|0);
      var $654=HEAP32[(($env668)>>2)];
      var $stack669=(($654+12)|0);
      HEAP32[(($stack669)>>2)]=$652;
      label = 124; break;
    case 124: 
      label = 125; break;
    case 125: 
      var $655=$m644;
      var $656=$655;
      var $657=HEAP32[(($656)>>2)];
      var $658=$657 >>> 11;
      var $bf_clear672=$658 & 2097151;
      var $and673=$bf_clear672 & 128;
      var $cmp674=(($and673)|(0))!=0;
      if ($cmp674) { label = 126; break; } else { label = 129; break; }
    case 126: 
      var $659=$m644;
      var $body677=(($659+12)|0);
      var $func678=$body677;
      var $660=HEAP32[(($func678)>>2)];
      var $661=$mrb_addr;
      FUNCTION_TABLE[$660]($tmp679, $661, $recv639);
      var $662=$recv639;
      var $663=$tmp679;
      assert(12 % 1 === 0);HEAP32[(($662)>>2)]=HEAP32[(($663)>>2)];HEAP32[((($662)+(4))>>2)]=HEAP32[((($663)+(4))>>2)];HEAP32[((($662)+(8))>>2)]=HEAP32[((($663)+(8))>>2)];
      var $664=$mrb_addr;
      var $665=$ai;
      _mrb_gc_arena_restore($664, $665);
      var $666=$mrb_addr;
      var $exc680=(($666+16)|0);
      var $667=HEAP32[(($exc680)>>2)];
      var $tobool681=(($667)|(0))!=0;
      if ($tobool681) { label = 127; break; } else { label = 128; break; }
    case 127: 
      label = 223; break;
    case 128: 
      var $668=$mrb_addr;
      var $c684=(($668+8)|0);
      var $669=HEAP32[(($c684)>>2)];
      var $ci685=(($669+16)|0);
      var $670=HEAP32[(($ci685)>>2)];
      $ci637=$670;
      var $671=$mrb_addr;
      var $c686=(($671+8)|0);
      var $672=HEAP32[(($c686)>>2)];
      var $stbase687=(($672+8)|0);
      var $673=HEAP32[(($stbase687)>>2)];
      var $674=$ci637;
      var $stackidx688=(($674+8)|0);
      var $675=HEAP32[(($stackidx688)>>2)];
      var $add_ptr689=(($673+((($675)*(12))&-1))|0);
      var $676=$mrb_addr;
      var $c690=(($676+8)|0);
      var $677=HEAP32[(($c690)>>2)];
      var $stack691=(($677+4)|0);
      HEAP32[(($stack691)>>2)]=$add_ptr689;
      $regs=$add_ptr689;
      var $678=$ci637;
      var $acc692=(($678+24)|0);
      var $679=HEAP32[(($acc692)>>2)];
      var $680=$regs;
      var $arrayidx693=(($680+((($679)*(12))&-1))|0);
      var $681=$arrayidx693;
      var $682=$recv639;
      assert(12 % 1 === 0);HEAP32[(($681)>>2)]=HEAP32[(($682)>>2)];HEAP32[((($681)+(4))>>2)]=HEAP32[((($682)+(4))>>2)];HEAP32[((($681)+(8))>>2)]=HEAP32[((($682)+(8))>>2)];
      var $683=$ci637;
      var $pc694=(($683+20)|0);
      var $684=HEAP32[(($pc694)>>2)];
      $pc=$684;
      var $685=$mrb_addr;
      _cipop($685);
      var $686=$mrb_addr;
      var $c695=(($686+8)|0);
      var $687=HEAP32[(($c695)>>2)];
      var $ci696=(($687+16)|0);
      var $688=HEAP32[(($ci696)>>2)];
      var $proc697=(($688+4)|0);
      var $689=HEAP32[(($proc697)>>2)];
      var $body698=(($689+12)|0);
      var $irep699=$body698;
      var $690=HEAP32[(($irep699)>>2)];
      $irep=$690;
      var $691=$irep;
      var $pool700=(($691+16)|0);
      var $692=HEAP32[(($pool700)>>2)];
      $pool=$692;
      var $693=$irep;
      var $syms701=(($693+20)|0);
      var $694=HEAP32[(($syms701)>>2)];
      $syms=$694;
      var $695=$pc;
      var $696=HEAP32[(($695)>>2)];
      $i=$696;
      var $697=$i;
      var $and702=$697 & 127;
      var $arrayidx703=((77368+($and702<<2))|0);
      var $698=HEAP32[(($arrayidx703)>>2)];
      var $indirect_goto_dest = $698;label = 709; break;
    case 129: 
      var $699=$m644;
      $proc_addr=$699;
      var $700=$m644;
      var $body705=(($700+12)|0);
      var $irep706=$body705;
      var $701=HEAP32[(($irep706)>>2)];
      $irep=$701;
      var $702=$irep;
      var $tobool707=(($702)|(0))!=0;
      if ($tobool707) { label = 131; break; } else { label = 130; break; }
    case 130: 
      var $703=$mrb_addr;
      var $c709=(($703+8)|0);
      var $704=HEAP32[(($c709)>>2)];
      var $stack710=(($704+4)|0);
      var $705=HEAP32[(($stack710)>>2)];
      var $arrayidx711=(($705)|0);
      _mrb_nil_value148($tmp712);
      var $706=$arrayidx711;
      var $707=$tmp712;
      assert(12 % 1 === 0);HEAP32[(($706)>>2)]=HEAP32[(($707)>>2)];HEAP32[((($706)+(4))>>2)]=HEAP32[((($707)+(4))>>2)];HEAP32[((($706)+(8))>>2)]=HEAP32[((($707)+(8))>>2)];
      label = 220; break;
    case 131: 
      var $708=$irep;
      var $pool714=(($708+16)|0);
      var $709=HEAP32[(($pool714)>>2)];
      $pool=$709;
      var $710=$irep;
      var $syms715=(($710+20)|0);
      var $711=HEAP32[(($syms715)>>2)];
      $syms=$711;
      var $712=$irep;
      var $nregs716=(($712+6)|0);
      var $713=HEAP16[(($nregs716)>>1)];
      var $conv717=(($713)&(65535));
      var $714=$ci637;
      var $nregs718=(($714+12)|0);
      HEAP32[(($nregs718)>>2)]=$conv717;
      var $715=$ci637;
      var $argc719=(($715+16)|0);
      var $716=HEAP32[(($argc719)>>2)];
      var $cmp720=(($716)|(0)) < 0;
      if ($cmp720) { label = 132; break; } else { label = 136; break; }
    case 132: 
      var $717=$mrb_addr;
      var $718=$irep;
      var $nregs723=(($718+6)|0);
      var $719=HEAP16[(($nregs723)>>1)];
      var $conv724=(($719)&(65535));
      var $cmp725=(($conv724)|(0)) < 3;
      if ($cmp725) { label = 133; break; } else { label = 134; break; }
    case 133: 
      var $cond732 = 3;label = 135; break;
    case 134: 
      var $720=$irep;
      var $nregs729=(($720+6)|0);
      var $721=HEAP16[(($nregs729)>>1)];
      var $conv730=(($721)&(65535));
      var $cond732 = $conv730;label = 135; break;
    case 135: 
      var $cond732;
      _stack_extend($717, $cond732, 3);
      label = 137; break;
    case 136: 
      var $722=$mrb_addr;
      var $723=$irep;
      var $nregs734=(($723+6)|0);
      var $724=HEAP16[(($nregs734)>>1)];
      var $conv735=(($724)&(65535));
      var $725=$ci637;
      var $argc736=(($725+16)|0);
      var $726=HEAP32[(($argc736)>>2)];
      var $add737=((($726)+(2))|0);
      _stack_extend($722, $conv735, $add737);
      label = 137; break;
    case 137: 
      var $727=$mrb_addr;
      var $c739=(($727+8)|0);
      var $728=HEAP32[(($c739)>>2)];
      var $stack740=(($728+4)|0);
      var $729=HEAP32[(($stack740)>>2)];
      $regs=$729;
      var $730=$regs;
      var $arrayidx741=(($730)|0);
      var $731=$m644;
      var $env742=(($731+20)|0);
      var $732=HEAP32[(($env742)>>2)];
      var $stack743=(($732+12)|0);
      var $733=HEAP32[(($stack743)>>2)];
      var $arrayidx744=(($733)|0);
      var $734=$arrayidx741;
      var $735=$arrayidx744;
      assert(12 % 1 === 0);HEAP32[(($734)>>2)]=HEAP32[(($735)>>2)];HEAP32[((($734)+(4))>>2)]=HEAP32[((($735)+(4))>>2)];HEAP32[((($734)+(8))>>2)]=HEAP32[((($735)+(8))>>2)];
      var $736=$m644;
      var $body745=(($736+12)|0);
      var $irep746=$body745;
      var $737=HEAP32[(($irep746)>>2)];
      var $iseq747=(($737+12)|0);
      var $738=HEAP32[(($iseq747)>>2)];
      $pc=$738;
      var $739=$pc;
      var $740=HEAP32[(($739)>>2)];
      $i=$740;
      var $741=$i;
      var $and748=$741 & 127;
      var $arrayidx749=((77368+($and748<<2))|0);
      var $742=HEAP32[(($arrayidx749)>>2)];
      var $indirect_goto_dest = $742;label = 709; break;
    case 138: 
      var $743=$mrb_addr;
      var $c754=(($743+8)|0);
      var $744=HEAP32[(($c754)>>2)];
      var $ci755=(($744+16)|0);
      var $745=HEAP32[(($ci755)>>2)];
      $ci753=$745;
      var $746=$ci753;
      var $mid762=(($746)|0);
      var $747=HEAP16[(($mid762)>>1)];
      $mid761=$747;
      var $748=$i;
      var $shr765=$748 >>> 23;
      var $and766=$shr765 & 511;
      $a764=$and766;
      var $749=$i;
      var $shr769=$749 >>> 7;
      var $and770=$shr769 & 127;
      $n768=$and770;
      var $750=$regs;
      var $arrayidx771=(($750)|0);
      var $751=$recv751;
      var $752=$arrayidx771;
      assert(12 % 1 === 0);HEAP32[(($751)>>2)]=HEAP32[(($752)>>2)];HEAP32[((($751)+(4))>>2)]=HEAP32[((($752)+(4))>>2)];HEAP32[((($751)+(8))>>2)]=HEAP32[((($752)+(8))>>2)];
      var $753=$mrb_addr;
      var $c772=(($753+8)|0);
      var $754=HEAP32[(($c772)>>2)];
      var $ci773=(($754+16)|0);
      var $755=HEAP32[(($ci773)>>2)];
      var $target_class774=(($755+28)|0);
      var $756=HEAP32[(($target_class774)>>2)];
      var $super=(($756+20)|0);
      var $757=HEAP32[(($super)>>2)];
      HEAP32[(($c759)>>2)]=$757;
      var $758=$mrb_addr;
      var $759=$mid761;
      var $call775=_mrb_method_search_vm($758, $c759, $759);
      $m757=$call775;
      var $760=$m757;
      var $tobool776=(($760)|(0))!=0;
      if ($tobool776) { label = 145; break; } else { label = 139; break; }
    case 139: 
      var $761=$mrb_addr;
      var $call778=_mrb_intern2($761, ((104432)|0), 14);
      $mid761=$call778;
      var $762=$mrb_addr;
      var $763=$mid761;
      var $call779=_mrb_method_search_vm($762, $c759, $763);
      $m757=$call779;
      var $764=$n768;
      var $cmp780=(($764)|(0))==127;
      if ($cmp780) { label = 140; break; } else { label = 141; break; }
    case 140: 
      var $765=$mrb_addr;
      var $766=$a764;
      var $add783=((($766)+(1))|0);
      var $767=$regs;
      var $arrayidx784=(($767+((($add783)*(12))&-1))|0);
      var $768=$ci753;
      var $mid785=(($768)|0);
      var $769=HEAP16[(($mid785)>>1)];
      _mrb_symbol_value145($agg_tmp, $769);
      _mrb_ary_unshift($tmp786, $765, $arrayidx784, $agg_tmp);
      label = 144; break;
    case 141: 
      var $770=$regs;
      var $771=$a764;
      var $add_ptr788=(($770+((($771)*(12))&-1))|0);
      var $add_ptr789=(($add_ptr788+24)|0);
      var $772=$regs;
      var $773=$a764;
      var $add_ptr790=(($772+((($773)*(12))&-1))|0);
      var $add_ptr791=(($add_ptr790+12)|0);
      var $774=$n768;
      var $inc792=((($774)+(1))|0);
      $n768=$inc792;
      _value_move($add_ptr789, $add_ptr791, $inc792);
      label = 142; break;
    case 142: 
      var $775=$a764;
      var $add794=((($775)+(1))|0);
      var $776=$regs;
      var $arrayidx795=(($776+((($add794)*(12))&-1))|0);
      var $tt796=(($arrayidx795+8)|0);
      HEAP32[(($tt796)>>2)]=4;
      var $777=$ci753;
      var $mid797=(($777)|0);
      var $778=HEAP16[(($mid797)>>1)];
      var $779=$a764;
      var $add798=((($779)+(1))|0);
      var $780=$regs;
      var $arrayidx799=(($780+((($add798)*(12))&-1))|0);
      var $value800=(($arrayidx799)|0);
      var $sym801=$value800;
      HEAP16[(($sym801)>>1)]=$778;
      label = 143; break;
    case 143: 
      label = 144; break;
    case 144: 
      label = 145; break;
    case 145: 
      var $781=$mrb_addr;
      var $call805=_cipush($781);
      $ci753=$call805;
      var $782=$mid761;
      var $783=$ci753;
      var $mid806=(($783)|0);
      HEAP16[(($mid806)>>1)]=$782;
      var $784=$m757;
      var $785=$ci753;
      var $proc807=(($785+4)|0);
      HEAP32[(($proc807)>>2)]=$784;
      var $786=$mrb_addr;
      var $c808=(($786+8)|0);
      var $787=HEAP32[(($c808)>>2)];
      var $stack809=(($787+4)|0);
      var $788=HEAP32[(($stack809)>>2)];
      var $789=$mrb_addr;
      var $c810=(($789+8)|0);
      var $790=HEAP32[(($c810)>>2)];
      var $stbase811=(($790+8)|0);
      var $791=HEAP32[(($stbase811)>>2)];
      var $sub_ptr_lhs_cast812=$788;
      var $sub_ptr_rhs_cast813=$791;
      var $sub_ptr_sub814=((($sub_ptr_lhs_cast812)-($sub_ptr_rhs_cast813))|0);
      var $sub_ptr_div815=((((($sub_ptr_sub814)|(0)))/(12))&-1);
      var $792=$ci753;
      var $stackidx816=(($792+8)|0);
      HEAP32[(($stackidx816)>>2)]=$sub_ptr_div815;
      var $793=$n768;
      var $cmp817=(($793)|(0))==127;
      if ($cmp817) { label = 146; break; } else { label = 147; break; }
    case 146: 
      var $794=$ci753;
      var $argc820=(($794+16)|0);
      HEAP32[(($argc820)>>2)]=-1;
      label = 148; break;
    case 147: 
      var $795=$n768;
      var $796=$ci753;
      var $argc822=(($796+16)|0);
      HEAP32[(($argc822)>>2)]=$795;
      label = 148; break;
    case 148: 
      var $797=$m757;
      var $target_class824=(($797+16)|0);
      var $798=HEAP32[(($target_class824)>>2)];
      var $799=$ci753;
      var $target_class825=(($799+28)|0);
      HEAP32[(($target_class825)>>2)]=$798;
      var $800=$pc;
      var $add_ptr826=(($800+4)|0);
      var $801=$ci753;
      var $pc827=(($801+20)|0);
      HEAP32[(($pc827)>>2)]=$add_ptr826;
      var $802=$a764;
      var $803=$mrb_addr;
      var $c828=(($803+8)|0);
      var $804=HEAP32[(($c828)>>2)];
      var $stack829=(($804+4)|0);
      var $805=HEAP32[(($stack829)>>2)];
      var $add_ptr830=(($805+((($802)*(12))&-1))|0);
      HEAP32[(($stack829)>>2)]=$add_ptr830;
      var $806=$mrb_addr;
      var $c831=(($806+8)|0);
      var $807=HEAP32[(($c831)>>2)];
      var $stack832=(($807+4)|0);
      var $808=HEAP32[(($stack832)>>2)];
      var $arrayidx833=(($808)|0);
      var $809=$arrayidx833;
      var $810=$recv751;
      assert(12 % 1 === 0);HEAP32[(($809)>>2)]=HEAP32[(($810)>>2)];HEAP32[((($809)+(4))>>2)]=HEAP32[((($810)+(4))>>2)];HEAP32[((($809)+(8))>>2)]=HEAP32[((($810)+(8))>>2)];
      var $811=$m757;
      var $812=$811;
      var $813=HEAP32[(($812)>>2)];
      var $814=$813 >>> 11;
      var $bf_clear834=$814 & 2097151;
      var $and835=$bf_clear834 & 128;
      var $cmp836=(($and835)|(0))!=0;
      if ($cmp836) { label = 149; break; } else { label = 152; break; }
    case 149: 
      var $815=$mrb_addr;
      var $c839=(($815+8)|0);
      var $816=HEAP32[(($c839)>>2)];
      var $stack840=(($816+4)|0);
      var $817=HEAP32[(($stack840)>>2)];
      var $arrayidx841=(($817)|0);
      var $818=$m757;
      var $body842=(($818+12)|0);
      var $func843=$body842;
      var $819=HEAP32[(($func843)>>2)];
      var $820=$mrb_addr;
      FUNCTION_TABLE[$819]($tmp844, $820, $recv751);
      var $821=$arrayidx841;
      var $822=$tmp844;
      assert(12 % 1 === 0);HEAP32[(($821)>>2)]=HEAP32[(($822)>>2)];HEAP32[((($821)+(4))>>2)]=HEAP32[((($822)+(4))>>2)];HEAP32[((($821)+(8))>>2)]=HEAP32[((($822)+(8))>>2)];
      var $823=$mrb_addr;
      var $824=$ai;
      _mrb_gc_arena_restore($823, $824);
      var $825=$mrb_addr;
      var $exc845=(($825+16)|0);
      var $826=HEAP32[(($exc845)>>2)];
      var $tobool846=(($826)|(0))!=0;
      if ($tobool846) { label = 150; break; } else { label = 151; break; }
    case 150: 
      label = 223; break;
    case 151: 
      var $827=$mrb_addr;
      var $c849=(($827+8)|0);
      var $828=HEAP32[(($c849)>>2)];
      var $stbase850=(($828+8)|0);
      var $829=HEAP32[(($stbase850)>>2)];
      var $830=$mrb_addr;
      var $c851=(($830+8)|0);
      var $831=HEAP32[(($c851)>>2)];
      var $ci852=(($831+16)|0);
      var $832=HEAP32[(($ci852)>>2)];
      var $stackidx853=(($832+8)|0);
      var $833=HEAP32[(($stackidx853)>>2)];
      var $add_ptr854=(($829+((($833)*(12))&-1))|0);
      var $834=$mrb_addr;
      var $c855=(($834+8)|0);
      var $835=HEAP32[(($c855)>>2)];
      var $stack856=(($835+4)|0);
      HEAP32[(($stack856)>>2)]=$add_ptr854;
      $regs=$add_ptr854;
      var $836=$mrb_addr;
      _cipop($836);
      var $837=$pc;
      var $incdec_ptr857=(($837+4)|0);
      $pc=$incdec_ptr857;
      var $838=HEAP32[(($incdec_ptr857)>>2)];
      $i=$838;
      var $839=$i;
      var $and858=$839 & 127;
      var $arrayidx859=((77368+($and858<<2))|0);
      var $840=HEAP32[(($arrayidx859)>>2)];
      var $indirect_goto_dest = $840;label = 709; break;
    case 152: 
      var $841=$a764;
      var $842=$ci753;
      var $acc861=(($842+24)|0);
      HEAP32[(($acc861)>>2)]=$841;
      var $843=$m757;
      var $844=$ci753;
      var $proc862=(($844+4)|0);
      HEAP32[(($proc862)>>2)]=$843;
      var $845=$m757;
      var $body863=(($845+12)|0);
      var $irep864=$body863;
      var $846=HEAP32[(($irep864)>>2)];
      $irep=$846;
      var $847=$irep;
      var $pool865=(($847+16)|0);
      var $848=HEAP32[(($pool865)>>2)];
      $pool=$848;
      var $849=$irep;
      var $syms866=(($849+20)|0);
      var $850=HEAP32[(($syms866)>>2)];
      $syms=$850;
      var $851=$irep;
      var $nregs867=(($851+6)|0);
      var $852=HEAP16[(($nregs867)>>1)];
      var $conv868=(($852)&(65535));
      var $853=$ci753;
      var $nregs869=(($853+12)|0);
      HEAP32[(($nregs869)>>2)]=$conv868;
      var $854=$n768;
      var $cmp870=(($854)|(0))==127;
      if ($cmp870) { label = 153; break; } else { label = 157; break; }
    case 153: 
      var $855=$mrb_addr;
      var $856=$irep;
      var $nregs873=(($856+6)|0);
      var $857=HEAP16[(($nregs873)>>1)];
      var $conv874=(($857)&(65535));
      var $cmp875=(($conv874)|(0)) < 3;
      if ($cmp875) { label = 154; break; } else { label = 155; break; }
    case 154: 
      var $cond882 = 3;label = 156; break;
    case 155: 
      var $858=$irep;
      var $nregs879=(($858+6)|0);
      var $859=HEAP16[(($nregs879)>>1)];
      var $conv880=(($859)&(65535));
      var $cond882 = $conv880;label = 156; break;
    case 156: 
      var $cond882;
      _stack_extend($855, $cond882, 3);
      label = 158; break;
    case 157: 
      var $860=$mrb_addr;
      var $861=$irep;
      var $nregs884=(($861+6)|0);
      var $862=HEAP16[(($nregs884)>>1)];
      var $conv885=(($862)&(65535));
      var $863=$ci753;
      var $argc886=(($863+16)|0);
      var $864=HEAP32[(($argc886)>>2)];
      var $add887=((($864)+(2))|0);
      _stack_extend($860, $conv885, $add887);
      label = 158; break;
    case 158: 
      var $865=$mrb_addr;
      var $c889=(($865+8)|0);
      var $866=HEAP32[(($c889)>>2)];
      var $stack890=(($866+4)|0);
      var $867=HEAP32[(($stack890)>>2)];
      $regs=$867;
      var $868=$irep;
      var $iseq891=(($868+12)|0);
      var $869=HEAP32[(($iseq891)>>2)];
      $pc=$869;
      var $870=$pc;
      var $871=HEAP32[(($870)>>2)];
      $i=$871;
      var $872=$i;
      var $and892=$872 & 127;
      var $arrayidx893=((77368+($and892<<2))|0);
      var $873=HEAP32[(($arrayidx893)>>2)];
      var $indirect_goto_dest = $873;label = 709; break;
    case 159: 
      var $874=$i;
      var $shr896=$874 >>> 23;
      var $and897=$shr896 & 511;
      $a895=$and897;
      var $875=$i;
      var $shr899=$875 >>> 7;
      var $and900=$shr899 & 65535;
      $bx=$and900;
      var $876=$bx;
      var $shr902=$876 >> 10;
      var $and903=$shr902 & 63;
      $m1=$and903;
      var $877=$bx;
      var $shr905=$877 >> 9;
      var $and906=$shr905 & 1;
      $r=$and906;
      var $878=$bx;
      var $shr908=$878 >> 4;
      var $and909=$shr908 & 31;
      $m2=$and909;
      var $879=$bx;
      var $shr911=$879 >> 0;
      var $and912=$shr911 & 15;
      $lv=$and912;
      var $880=$lv;
      var $cmp915=(($880)|(0))==0;
      if ($cmp915) { label = 160; break; } else { label = 161; break; }
    case 160: 
      var $881=$regs;
      var $add_ptr918=(($881+12)|0);
      $stack914=$add_ptr918;
      label = 164; break;
    case 161: 
      var $882=$mrb_addr;
      var $883=$lv;
      var $sub922=((($883)-(1))|0);
      var $call923=_uvenv($882, $sub922);
      $e921=$call923;
      var $884=$e921;
      var $tobool924=(($884)|(0))!=0;
      if ($tobool924) { label = 163; break; } else { label = 162; break; }
    case 162: 
      var $885=$mrb_addr;
      var $886=$mrb_addr;
      var $call928=_mrb_class_get($886, ((99112)|0));
      _mrb_exc_new($tmp929, $885, $call928, ((77700)|0), 30);
      var $887=$exc927;
      var $888=$tmp929;
      assert(12 % 1 === 0);HEAP32[(($887)>>2)]=HEAP32[(($888)>>2)];HEAP32[((($887)+(4))>>2)]=HEAP32[((($888)+(4))>>2)];HEAP32[((($887)+(8))>>2)]=HEAP32[((($888)+(8))>>2)];
      var $value930=(($exc927)|0);
      var $p931=$value930;
      var $889=HEAP32[(($p931)>>2)];
      var $890=$889;
      var $891=$mrb_addr;
      var $exc932=(($891+16)|0);
      HEAP32[(($exc932)>>2)]=$890;
      label = 223; break;
    case 163: 
      var $892=$e921;
      var $stack934=(($892+12)|0);
      var $893=HEAP32[(($stack934)>>2)];
      var $add_ptr935=(($893+12)|0);
      $stack914=$add_ptr935;
      label = 164; break;
    case 164: 
      var $894=$r;
      var $cmp937=(($894)|(0))==0;
      if ($cmp937) { label = 165; break; } else { label = 166; break; }
    case 165: 
      var $895=$a895;
      var $896=$regs;
      var $arrayidx940=(($896+((($895)*(12))&-1))|0);
      var $897=$mrb_addr;
      var $898=$m1;
      var $899=$m2;
      var $add941=((($898)+($899))|0);
      var $900=$stack914;
      _mrb_ary_new_from_values($tmp942, $897, $add941, $900);
      var $901=$arrayidx940;
      var $902=$tmp942;
      assert(12 % 1 === 0);HEAP32[(($901)>>2)]=HEAP32[(($902)>>2)];HEAP32[((($901)+(4))>>2)]=HEAP32[((($902)+(4))>>2)];HEAP32[((($901)+(8))>>2)]=HEAP32[((($902)+(8))>>2)];
      label = 173; break;
    case 166: 
      $pp=0;
      $len=0;
      var $903=$m1;
      var $904=$stack914;
      var $arrayidx947=(($904+((($903)*(12))&-1))|0);
      var $tt948=(($arrayidx947+8)|0);
      var $905=HEAP32[(($tt948)>>2)];
      var $cmp949=(($905)|(0))==14;
      if ($cmp949) { label = 167; break; } else { label = 168; break; }
    case 167: 
      var $906=$m1;
      var $907=$stack914;
      var $arrayidx953=(($907+((($906)*(12))&-1))|0);
      var $value954=(($arrayidx953)|0);
      var $p955=$value954;
      var $908=HEAP32[(($p955)>>2)];
      var $909=$908;
      $ary=$909;
      var $910=$ary;
      var $ptr=(($910+20)|0);
      var $911=HEAP32[(($ptr)>>2)];
      $pp=$911;
      var $912=$ary;
      var $len956=(($912+12)|0);
      var $913=HEAP32[(($len956)>>2)];
      $len=$913;
      label = 168; break;
    case 168: 
      var $914=$a895;
      var $915=$regs;
      var $arrayidx958=(($915+((($914)*(12))&-1))|0);
      var $916=$mrb_addr;
      var $917=$m1;
      var $918=$len;
      var $add959=((($917)+($918))|0);
      var $919=$m2;
      var $add960=((($add959)+($919))|0);
      _mrb_ary_new_capa($tmp961, $916, $add960);
      var $920=$arrayidx958;
      var $921=$tmp961;
      assert(12 % 1 === 0);HEAP32[(($920)>>2)]=HEAP32[(($921)>>2)];HEAP32[((($920)+(4))>>2)]=HEAP32[((($921)+(4))>>2)];HEAP32[((($920)+(8))>>2)]=HEAP32[((($921)+(8))>>2)];
      var $922=$a895;
      var $923=$regs;
      var $arrayidx962=(($923+((($922)*(12))&-1))|0);
      var $value963=(($arrayidx962)|0);
      var $p964=$value963;
      var $924=HEAP32[(($p964)>>2)];
      var $925=$924;
      $rest=$925;
      var $926=$rest;
      var $ptr965=(($926+20)|0);
      var $927=HEAP32[(($ptr965)>>2)];
      var $928=$stack914;
      var $929=$m1;
      _stack_copy($927, $928, $929);
      var $930=$len;
      var $cmp966=(($930)|(0)) > 0;
      if ($cmp966) { label = 169; break; } else { label = 170; break; }
    case 169: 
      var $931=$rest;
      var $ptr969=(($931+20)|0);
      var $932=HEAP32[(($ptr969)>>2)];
      var $933=$m1;
      var $add_ptr970=(($932+((($933)*(12))&-1))|0);
      var $934=$pp;
      var $935=$len;
      _stack_copy($add_ptr970, $934, $935);
      label = 170; break;
    case 170: 
      var $936=$m2;
      var $cmp972=(($936)|(0)) > 0;
      if ($cmp972) { label = 171; break; } else { label = 172; break; }
    case 171: 
      var $937=$rest;
      var $ptr975=(($937+20)|0);
      var $938=HEAP32[(($ptr975)>>2)];
      var $939=$m1;
      var $add_ptr976=(($938+((($939)*(12))&-1))|0);
      var $940=$len;
      var $add_ptr977=(($add_ptr976+((($940)*(12))&-1))|0);
      var $941=$stack914;
      var $942=$m1;
      var $add_ptr978=(($941+((($942)*(12))&-1))|0);
      var $add_ptr979=(($add_ptr978+12)|0);
      var $943=$m2;
      _stack_copy($add_ptr977, $add_ptr979, $943);
      label = 172; break;
    case 172: 
      var $944=$m1;
      var $945=$len;
      var $add981=((($944)+($945))|0);
      var $946=$m2;
      var $add982=((($add981)+($946))|0);
      var $947=$rest;
      var $len983=(($947+12)|0);
      HEAP32[(($len983)>>2)]=$add982;
      label = 173; break;
    case 173: 
      var $948=$a895;
      var $add985=((($948)+(1))|0);
      var $949=$regs;
      var $arrayidx986=(($949+((($add985)*(12))&-1))|0);
      var $950=$m1;
      var $951=$r;
      var $add987=((($950)+($951))|0);
      var $952=$m2;
      var $add988=((($add987)+($952))|0);
      var $953=$stack914;
      var $arrayidx989=(($953+((($add988)*(12))&-1))|0);
      var $954=$arrayidx986;
      var $955=$arrayidx989;
      assert(12 % 1 === 0);HEAP32[(($954)>>2)]=HEAP32[(($955)>>2)];HEAP32[((($954)+(4))>>2)]=HEAP32[((($955)+(4))>>2)];HEAP32[((($954)+(8))>>2)]=HEAP32[((($955)+(8))>>2)];
      var $956=$mrb_addr;
      var $957=$ai;
      _mrb_gc_arena_restore($956, $957);
      var $958=$pc;
      var $incdec_ptr990=(($958+4)|0);
      $pc=$incdec_ptr990;
      var $959=HEAP32[(($incdec_ptr990)>>2)];
      $i=$959;
      var $960=$i;
      var $and991=$960 & 127;
      var $arrayidx992=((77368+($and991<<2))|0);
      var $961=HEAP32[(($arrayidx992)>>2)];
      var $indirect_goto_dest = $961;label = 709; break;
    case 174: 
      var $962=$i;
      var $shr994=$962 >>> 7;
      var $and995=$shr994 & 33554431;
      $ax=$and995;
      var $963=$ax;
      var $shr998=$963 >>> 18;
      var $and999=$shr998 & 31;
      $m1997=$and999;
      var $964=$ax;
      var $shr1001=$964 >>> 13;
      var $and1002=$shr1001 & 31;
      $o=$and1002;
      var $965=$ax;
      var $shr1005=$965 >>> 12;
      var $and1006=$shr1005 & 1;
      $r1004=$and1006;
      var $966=$ax;
      var $shr1009=$966 >>> 7;
      var $and1010=$shr1009 & 31;
      $m21008=$and1010;
      var $967=$mrb_addr;
      var $c1013=(($967+8)|0);
      var $968=HEAP32[(($c1013)>>2)];
      var $ci1014=(($968+16)|0);
      var $969=HEAP32[(($ci1014)>>2)];
      var $argc1015=(($969+16)|0);
      var $970=HEAP32[(($argc1015)>>2)];
      $argc1012=$970;
      var $971=$regs;
      var $add_ptr1017=(($971+12)|0);
      $argv=$add_ptr1017;
      var $972=$argv;
      $argv0=$972;
      var $973=$m1997;
      var $974=$o;
      var $add1021=((($973)+($974))|0);
      var $975=$r1004;
      var $add1022=((($add1021)+($975))|0);
      var $976=$m21008;
      var $add1023=((($add1022)+($976))|0);
      $len1020=$add1023;
      var $977=$argc1012;
      var $cmp1025=(($977)|(0)) < 0;
      if ($cmp1025) { label = 175; break; } else { label = 176; break; }
    case 175: 
      var $cond1030 = 1;label = 177; break;
    case 176: 
      var $978=$argc1012;
      var $cond1030 = $978;label = 177; break;
    case 177: 
      var $cond1030;
      var $979=$argv;
      var $arrayidx1031=(($979+((($cond1030)*(12))&-1))|0);
      $blk=$arrayidx1031;
      var $980=$argc1012;
      var $cmp1032=(($980)|(0)) < 0;
      if ($cmp1032) { label = 178; break; } else { label = 179; break; }
    case 178: 
      var $981=$regs;
      var $arrayidx1037=(($981+12)|0);
      var $value1038=(($arrayidx1037)|0);
      var $p1039=$value1038;
      var $982=HEAP32[(($p1039)>>2)];
      var $983=$982;
      $ary1036=$983;
      var $984=$ary1036;
      var $ptr1040=(($984+20)|0);
      var $985=HEAP32[(($ptr1040)>>2)];
      $argv=$985;
      var $986=$ary1036;
      var $len1041=(($986+12)|0);
      var $987=HEAP32[(($len1041)>>2)];
      $argc1012=$987;
      var $988=$mrb_addr;
      var $989=$regs;
      var $arrayidx1042=(($989+12)|0);
      _mrb_gc_protect($988, $arrayidx1042);
      label = 179; break;
    case 179: 
      var $990=$mrb_addr;
      var $c1044=(($990+8)|0);
      var $991=HEAP32[(($c1044)>>2)];
      var $ci1045=(($991+16)|0);
      var $992=HEAP32[(($ci1045)>>2)];
      var $proc1046=(($992+4)|0);
      var $993=HEAP32[(($proc1046)>>2)];
      var $tobool1047=(($993)|(0))!=0;
      if ($tobool1047) { label = 180; break; } else { label = 188; break; }
    case 180: 
      var $994=$mrb_addr;
      var $c1048=(($994+8)|0);
      var $995=HEAP32[(($c1048)>>2)];
      var $ci1049=(($995+16)|0);
      var $996=HEAP32[(($ci1049)>>2)];
      var $proc1050=(($996+4)|0);
      var $997=HEAP32[(($proc1050)>>2)];
      var $998=$997;
      var $999=HEAP32[(($998)>>2)];
      var $1000=$999 >>> 11;
      var $bf_clear1051=$1000 & 2097151;
      var $and1052=$bf_clear1051 & 256;
      var $cmp1053=(($and1052)|(0))!=0;
      if ($cmp1053) { label = 181; break; } else { label = 188; break; }
    case 181: 
      var $1001=$argc1012;
      var $cmp1056=(($1001)|(0)) >= 0;
      if ($cmp1056) { label = 182; break; } else { label = 187; break; }
    case 182: 
      var $1002=$argc1012;
      var $1003=$m1997;
      var $1004=$m21008;
      var $add1059=((($1003)+($1004))|0);
      var $cmp1060=(($1002)|(0)) < (($add1059)|(0));
      if ($cmp1060) { label = 185; break; } else { label = 183; break; }
    case 183: 
      var $1005=$r1004;
      var $cmp1062=(($1005)|(0))==0;
      if ($cmp1062) { label = 184; break; } else { label = 186; break; }
    case 184: 
      var $1006=$argc1012;
      var $1007=$len1020;
      var $cmp1065=(($1006)|(0)) > (($1007)|(0));
      if ($cmp1065) { label = 185; break; } else { label = 186; break; }
    case 185: 
      var $1008=$mrb_addr;
      var $1009=$m1997;
      var $1010=$m21008;
      var $add1068=((($1009)+($1010))|0);
      _argnum_error($1008, $add1068);
      label = 223; break;
    case 186: 
      label = 187; break;
    case 187: 
      label = 193; break;
    case 188: 
      var $1011=$len1020;
      var $cmp1072=(($1011)|(0)) > 1;
      if ($cmp1072) { label = 189; break; } else { label = 192; break; }
    case 189: 
      var $1012=$argc1012;
      var $cmp1075=(($1012)|(0))==1;
      if ($cmp1075) { label = 190; break; } else { label = 192; break; }
    case 190: 
      var $1013=$argv;
      var $arrayidx1078=(($1013)|0);
      var $tt1079=(($arrayidx1078+8)|0);
      var $1014=HEAP32[(($tt1079)>>2)];
      var $cmp1080=(($1014)|(0))==14;
      if ($cmp1080) { label = 191; break; } else { label = 192; break; }
    case 191: 
      var $1015=$argv;
      var $arrayidx1083=(($1015)|0);
      var $value1084=(($arrayidx1083)|0);
      var $p1085=$value1084;
      var $1016=HEAP32[(($p1085)>>2)];
      var $1017=$1016;
      var $len1086=(($1017+12)|0);
      var $1018=HEAP32[(($len1086)>>2)];
      $argc1012=$1018;
      var $1019=$argv;
      var $arrayidx1087=(($1019)|0);
      var $value1088=(($arrayidx1087)|0);
      var $p1089=$value1088;
      var $1020=HEAP32[(($p1089)>>2)];
      var $1021=$1020;
      var $ptr1090=(($1021+20)|0);
      var $1022=HEAP32[(($ptr1090)>>2)];
      $argv=$1022;
      label = 192; break;
    case 192: 
      label = 193; break;
    case 193: 
      var $1023=$len1020;
      var $1024=$mrb_addr;
      var $c1093=(($1024+8)|0);
      var $1025=HEAP32[(($c1093)>>2)];
      var $ci1094=(($1025+16)|0);
      var $1026=HEAP32[(($ci1094)>>2)];
      var $argc1095=(($1026+16)|0);
      HEAP32[(($argc1095)>>2)]=$1023;
      var $1027=$argc1012;
      var $1028=$len1020;
      var $cmp1096=(($1027)|(0)) < (($1028)|(0));
      if ($cmp1096) { label = 194; break; } else { label = 206; break; }
    case 194: 
      var $1029=$len1020;
      var $add1099=((($1029)+(1))|0);
      var $1030=$regs;
      var $arrayidx1100=(($1030+((($add1099)*(12))&-1))|0);
      var $1031=$blk;
      var $1032=$arrayidx1100;
      var $1033=$1031;
      assert(12 % 1 === 0);HEAP32[(($1032)>>2)]=HEAP32[(($1033)>>2)];HEAP32[((($1032)+(4))>>2)]=HEAP32[((($1033)+(4))>>2)];HEAP32[((($1032)+(8))>>2)]=HEAP32[((($1033)+(8))>>2)];
      var $1034=$argv0;
      var $1035=$argv;
      var $cmp1101=(($1034)|(0))!=(($1035)|(0));
      if ($cmp1101) { label = 195; break; } else { label = 196; break; }
    case 195: 
      var $1036=$regs;
      var $arrayidx1104=(($1036+12)|0);
      var $1037=$argv;
      var $1038=$argc1012;
      var $1039=$m21008;
      var $sub1105=((($1038)-($1039))|0);
      _value_move($arrayidx1104, $1037, $sub1105);
      label = 196; break;
    case 196: 
      var $1040=$m21008;
      var $tobool1107=(($1040)|(0))!=0;
      if ($tobool1107) { label = 197; break; } else { label = 200; break; }
    case 197: 
      var $1041=$m21008;
      $mlen=$1041;
      var $1042=$argc1012;
      var $1043=$m21008;
      var $sub1110=((($1042)-($1043))|0);
      var $1044=$m1997;
      var $cmp1111=(($sub1110)|(0)) <= (($1044)|(0));
      if ($cmp1111) { label = 198; break; } else { label = 199; break; }
    case 198: 
      var $1045=$argc1012;
      var $1046=$m1997;
      var $sub1114=((($1045)-($1046))|0);
      $mlen=$sub1114;
      label = 199; break;
    case 199: 
      var $1047=$len1020;
      var $1048=$m21008;
      var $sub1116=((($1047)-($1048))|0);
      var $add1117=((($sub1116)+(1))|0);
      var $1049=$regs;
      var $arrayidx1118=(($1049+((($add1117)*(12))&-1))|0);
      var $1050=$argc1012;
      var $1051=$mlen;
      var $sub1119=((($1050)-($1051))|0);
      var $1052=$argv;
      var $arrayidx1120=(($1052+((($sub1119)*(12))&-1))|0);
      var $1053=$mlen;
      _value_move($arrayidx1118, $arrayidx1120, $1053);
      label = 200; break;
    case 200: 
      var $1054=$r1004;
      var $tobool1122=(($1054)|(0))!=0;
      if ($tobool1122) { label = 201; break; } else { label = 202; break; }
    case 201: 
      var $1055=$m1997;
      var $1056=$o;
      var $add1124=((($1055)+($1056))|0);
      var $add1125=((($add1124)+(1))|0);
      var $1057=$regs;
      var $arrayidx1126=(($1057+((($add1125)*(12))&-1))|0);
      var $1058=$mrb_addr;
      _mrb_ary_new_capa($tmp1127, $1058, 0);
      var $1059=$arrayidx1126;
      var $1060=$tmp1127;
      assert(12 % 1 === 0);HEAP32[(($1059)>>2)]=HEAP32[(($1060)>>2)];HEAP32[((($1059)+(4))>>2)]=HEAP32[((($1060)+(4))>>2)];HEAP32[((($1059)+(8))>>2)]=HEAP32[((($1060)+(8))>>2)];
      label = 202; break;
    case 202: 
      var $1061=$o;
      var $cmp1129=(($1061)|(0))==0;
      if ($cmp1129) { label = 203; break; } else { label = 204; break; }
    case 203: 
      var $1062=$pc;
      var $incdec_ptr1132=(($1062+4)|0);
      $pc=$incdec_ptr1132;
      label = 205; break;
    case 204: 
      var $1063=$argc1012;
      var $1064=$m1997;
      var $sub1134=((($1063)-($1064))|0);
      var $1065=$m21008;
      var $sub1135=((($sub1134)-($1065))|0);
      var $add1136=((($sub1135)+(1))|0);
      var $1066=$pc;
      var $add_ptr1137=(($1066+($add1136<<2))|0);
      $pc=$add_ptr1137;
      label = 205; break;
    case 205: 
      label = 217; break;
    case 206: 
      var $1067=$argv0;
      var $1068=$argv;
      var $cmp1140=(($1067)|(0))!=(($1068)|(0));
      if ($cmp1140) { label = 207; break; } else { label = 208; break; }
    case 207: 
      var $1069=$len1020;
      var $add1143=((($1069)+(1))|0);
      var $1070=$regs;
      var $arrayidx1144=(($1070+((($add1143)*(12))&-1))|0);
      var $1071=$blk;
      var $1072=$arrayidx1144;
      var $1073=$1071;
      assert(12 % 1 === 0);HEAP32[(($1072)>>2)]=HEAP32[(($1073)>>2)];HEAP32[((($1072)+(4))>>2)]=HEAP32[((($1073)+(4))>>2)];HEAP32[((($1072)+(8))>>2)]=HEAP32[((($1073)+(8))>>2)];
      var $1074=$regs;
      var $arrayidx1145=(($1074+12)|0);
      var $1075=$argv;
      var $1076=$m1997;
      var $1077=$o;
      var $add1146=((($1076)+($1077))|0);
      _value_move($arrayidx1145, $1075, $add1146);
      label = 208; break;
    case 208: 
      var $1078=$r1004;
      var $tobool1148=(($1078)|(0))!=0;
      if ($tobool1148) { label = 209; break; } else { label = 210; break; }
    case 209: 
      var $1079=$m1997;
      var $1080=$o;
      var $add1150=((($1079)+($1080))|0);
      var $add1151=((($add1150)+(1))|0);
      var $1081=$regs;
      var $arrayidx1152=(($1081+((($add1151)*(12))&-1))|0);
      var $1082=$mrb_addr;
      var $1083=$argc1012;
      var $1084=$m1997;
      var $sub1153=((($1083)-($1084))|0);
      var $1085=$o;
      var $sub1154=((($sub1153)-($1085))|0);
      var $1086=$m21008;
      var $sub1155=((($sub1154)-($1086))|0);
      var $1087=$argv;
      var $1088=$m1997;
      var $add_ptr1156=(($1087+((($1088)*(12))&-1))|0);
      var $1089=$o;
      var $add_ptr1157=(($add_ptr1156+((($1089)*(12))&-1))|0);
      _mrb_ary_new_from_values($tmp1158, $1082, $sub1155, $add_ptr1157);
      var $1090=$arrayidx1152;
      var $1091=$tmp1158;
      assert(12 % 1 === 0);HEAP32[(($1090)>>2)]=HEAP32[(($1091)>>2)];HEAP32[((($1090)+(4))>>2)]=HEAP32[((($1091)+(4))>>2)];HEAP32[((($1090)+(8))>>2)]=HEAP32[((($1091)+(8))>>2)];
      label = 210; break;
    case 210: 
      var $1092=$m21008;
      var $tobool1160=(($1092)|(0))!=0;
      if ($tobool1160) { label = 211; break; } else { label = 214; break; }
    case 211: 
      var $1093=$argc1012;
      var $1094=$m21008;
      var $sub1162=((($1093)-($1094))|0);
      var $1095=$m1997;
      var $cmp1163=(($sub1162)|(0)) > (($1095)|(0));
      if ($cmp1163) { label = 212; break; } else { label = 213; break; }
    case 212: 
      var $1096=$m1997;
      var $1097=$o;
      var $add1166=((($1096)+($1097))|0);
      var $1098=$r1004;
      var $add1167=((($add1166)+($1098))|0);
      var $add1168=((($add1167)+(1))|0);
      var $1099=$regs;
      var $arrayidx1169=(($1099+((($add1168)*(12))&-1))|0);
      var $1100=$argc1012;
      var $1101=$m21008;
      var $sub1170=((($1100)-($1101))|0);
      var $1102=$argv;
      var $arrayidx1171=(($1102+((($sub1170)*(12))&-1))|0);
      var $1103=$m21008;
      _value_move($arrayidx1169, $arrayidx1171, $1103);
      label = 213; break;
    case 213: 
      label = 214; break;
    case 214: 
      var $1104=$argv0;
      var $1105=$argv;
      var $cmp1174=(($1104)|(0))==(($1105)|(0));
      if ($cmp1174) { label = 215; break; } else { label = 216; break; }
    case 215: 
      var $1106=$len1020;
      var $add1177=((($1106)+(1))|0);
      var $1107=$regs;
      var $arrayidx1178=(($1107+((($add1177)*(12))&-1))|0);
      var $1108=$blk;
      var $1109=$arrayidx1178;
      var $1110=$1108;
      assert(12 % 1 === 0);HEAP32[(($1109)>>2)]=HEAP32[(($1110)>>2)];HEAP32[((($1109)+(4))>>2)]=HEAP32[((($1110)+(4))>>2)];HEAP32[((($1109)+(8))>>2)]=HEAP32[((($1110)+(8))>>2)];
      label = 216; break;
    case 216: 
      var $1111=$o;
      var $add1180=((($1111)+(1))|0);
      var $1112=$pc;
      var $add_ptr1181=(($1112+($add1180<<2))|0);
      $pc=$add_ptr1181;
      label = 217; break;
    case 217: 
      var $1113=$pc;
      var $1114=HEAP32[(($1113)>>2)];
      $i=$1114;
      var $1115=$i;
      var $and1183=$1115 & 127;
      var $arrayidx1184=((77368+($and1183<<2))|0);
      var $1116=HEAP32[(($arrayidx1184)>>2)];
      var $indirect_goto_dest = $1116;label = 709; break;
    case 218: 
      var $1117=$pc;
      var $incdec_ptr1185=(($1117+4)|0);
      $pc=$incdec_ptr1185;
      var $1118=HEAP32[(($incdec_ptr1185)>>2)];
      $i=$1118;
      var $1119=$i;
      var $and1186=$1119 & 127;
      var $arrayidx1187=((77368+($and1186<<2))|0);
      var $1120=HEAP32[(($arrayidx1187)>>2)];
      var $indirect_goto_dest = $1120;label = 709; break;
    case 219: 
      var $1121=$pc;
      var $incdec_ptr1188=(($1121+4)|0);
      $pc=$incdec_ptr1188;
      var $1122=HEAP32[(($incdec_ptr1188)>>2)];
      $i=$1122;
      var $1123=$i;
      var $and1189=$1123 & 127;
      var $arrayidx1190=((77368+($and1189<<2))|0);
      var $1124=HEAP32[(($arrayidx1190)>>2)];
      var $indirect_goto_dest = $1124;label = 709; break;
    case 220: 
      var $1125=$i;
      var $shr1191=$1125 >>> 23;
      var $and1192=$shr1191 & 511;
      var $and1193=$and1192 & 511;
      var $shl=$and1193 << 23;
      var $or=41 | $shl;
      $i=$or;
      label = 221; break;
    case 221: 
      var $1126=$mrb_addr;
      var $exc1194=(($1126+16)|0);
      var $1127=HEAP32[(($exc1194)>>2)];
      var $tobool1195=(($1127)|(0))!=0;
      if ($tobool1195) { label = 222; break; } else { label = 245; break; }
    case 222: 
      label = 223; break;
    case 223: 
      var $1128=$mrb_addr;
      var $c1201=(($1128+8)|0);
      var $1129=HEAP32[(($c1201)>>2)];
      var $ci1202=(($1129+16)|0);
      var $1130=HEAP32[(($ci1202)>>2)];
      $ci1198=$1130;
      var $1131=$mrb_addr;
      var $1132=$mrb_addr;
      var $exc1203=(($1132+16)|0);
      var $1133=HEAP32[(($exc1203)>>2)];
      var $1134=$mrb_addr;
      var $call1204=_mrb_intern2($1134, ((97020)|0), 6);
      var $1135=$pc;
      var $1136=$1135;
      _mrb_voidp_value($agg_tmp1205, $1136);
      _mrb_obj_iv_ifnone($1131, $1133, $call1204, $agg_tmp1205);
      var $1137=$mrb_addr;
      var $1138=$mrb_addr;
      var $exc1206=(($1138+16)|0);
      var $1139=HEAP32[(($exc1206)>>2)];
      var $1140=$mrb_addr;
      var $call1207=_mrb_intern2($1140, ((95828)|0), 5);
      var $1141=$ci1198;
      var $1142=$mrb_addr;
      var $c1209=(($1142+8)|0);
      var $1143=HEAP32[(($c1209)>>2)];
      var $cibase=(($1143+20)|0);
      var $1144=HEAP32[(($cibase)>>2)];
      var $sub_ptr_lhs_cast1210=$1141;
      var $sub_ptr_rhs_cast1211=$1144;
      var $sub_ptr_sub1212=((($sub_ptr_lhs_cast1210)-($sub_ptr_rhs_cast1211))|0);
      var $sub_ptr_div1213=((((($sub_ptr_sub1212)|(0)))/(44))&-1);
      _mrb_fixnum_value144($agg_tmp1208, $sub_ptr_div1213);
      _mrb_obj_iv_ifnone($1137, $1139, $call1207, $agg_tmp1208);
      var $1145=$ci1198;
      var $eidx1214=(($1145+36)|0);
      var $1146=HEAP32[(($eidx1214)>>2)];
      $eidx1200=$1146;
      var $1147=$ci1198;
      var $1148=$mrb_addr;
      var $c1215=(($1148+8)|0);
      var $1149=HEAP32[(($c1215)>>2)];
      var $cibase1216=(($1149+20)|0);
      var $1150=HEAP32[(($cibase1216)>>2)];
      var $cmp1217=(($1147)|(0))==(($1150)|(0));
      if ($cmp1217) { label = 224; break; } else { label = 227; break; }
    case 224: 
      var $1151=$ci1198;
      var $ridx1220=(($1151+32)|0);
      var $1152=HEAP32[(($ridx1220)>>2)];
      var $cmp1221=(($1152)|(0))==0;
      if ($cmp1221) { label = 225; break; } else { label = 226; break; }
    case 225: 
      label = 698; break;
    case 226: 
      label = 244; break;
    case 227: 
      label = 228; break;
    case 228: 
      var $1153=$eidx1200;
      var $1154=$ci1198;
      var $arrayidx1227=((($1154)-(44))|0);
      var $eidx1228=(($arrayidx1227+36)|0);
      var $1155=HEAP32[(($eidx1228)>>2)];
      var $cmp1229=(($1153)|(0)) > (($1155)|(0));
      if ($cmp1229) { label = 229; break; } else { label = 230; break; }
    case 229: 
      var $1156=$mrb_addr;
      var $1157=$eidx1200;
      var $dec1232=((($1157)-(1))|0);
      $eidx1200=$dec1232;
      _ecall($1156, $dec1232);
      label = 228; break;
    case 230: 
      label = 231; break;
    case 231: 
      var $1158=$ci1198;
      var $arrayidx1235=(($1158)|0);
      var $ridx1236=(($arrayidx1235+32)|0);
      var $1159=HEAP32[(($ridx1236)>>2)];
      var $1160=$ci1198;
      var $arrayidx1237=((($1160)-(44))|0);
      var $ridx1238=(($arrayidx1237+32)|0);
      var $1161=HEAP32[(($ridx1238)>>2)];
      var $cmp1239=(($1159)|(0))==(($1161)|(0));
      if ($cmp1239) { label = 232; break; } else { label = 243; break; }
    case 232: 
      var $1162=$mrb_addr;
      _cipop($1162);
      var $1163=$mrb_addr;
      var $c1242=(($1163+8)|0);
      var $1164=HEAP32[(($c1242)>>2)];
      var $ci1243=(($1164+16)|0);
      var $1165=HEAP32[(($ci1243)>>2)];
      $ci1198=$1165;
      var $1166=$mrb_addr;
      var $c1244=(($1166+8)|0);
      var $1167=HEAP32[(($c1244)>>2)];
      var $stbase1245=(($1167+8)|0);
      var $1168=HEAP32[(($stbase1245)>>2)];
      var $1169=$ci1198;
      var $arrayidx1246=(($1169+44)|0);
      var $stackidx1247=(($arrayidx1246+8)|0);
      var $1170=HEAP32[(($stackidx1247)>>2)];
      var $add_ptr1248=(($1168+((($1170)*(12))&-1))|0);
      var $1171=$mrb_addr;
      var $c1249=(($1171+8)|0);
      var $1172=HEAP32[(($c1249)>>2)];
      var $stack1250=(($1172+4)|0);
      HEAP32[(($stack1250)>>2)]=$add_ptr1248;
      var $1173=$ci1198;
      var $arrayidx1251=(($1173+44)|0);
      var $acc1252=(($arrayidx1251+24)|0);
      var $1174=HEAP32[(($acc1252)>>2)];
      var $cmp1253=(($1174)|(0)) < 0;
      if ($cmp1253) { label = 233; break; } else { label = 235; break; }
    case 233: 
      var $1175=$prev_jmp;
      var $tobool1256=(($1175)|(0))!=0;
      if ($tobool1256) { label = 234; break; } else { label = 235; break; }
    case 234: 
      var $1176=$prev_jmp;
      var $1177=$1176;
      var $1178=$mrb_addr;
      var $jmp1258=(($1178)|0);
      HEAP32[(($jmp1258)>>2)]=$1177;
      var $1179=$mrb_addr;
      var $jmp1259=(($1179)|0);
      var $1180=HEAP32[(($jmp1259)>>2)];
      var $1181=$1180;
      var $arraydecay1260=(($1181)|0);
      _longjmp($arraydecay1260, 1);
      throw "Reached an unreachable!";
    case 235: 
      label = 236; break;
    case 236: 
      var $1182=$eidx1200;
      var $1183=$ci1198;
      var $eidx1263=(($1183+36)|0);
      var $1184=HEAP32[(($eidx1263)>>2)];
      var $cmp1264=(($1182)|(0)) > (($1184)|(0));
      if ($cmp1264) { label = 237; break; } else { label = 238; break; }
    case 237: 
      var $1185=$mrb_addr;
      var $1186=$eidx1200;
      var $dec1267=((($1186)-(1))|0);
      $eidx1200=$dec1267;
      _ecall($1185, $dec1267);
      label = 236; break;
    case 238: 
      var $1187=$ci1198;
      var $1188=$mrb_addr;
      var $c1269=(($1188+8)|0);
      var $1189=HEAP32[(($c1269)>>2)];
      var $cibase1270=(($1189+20)|0);
      var $1190=HEAP32[(($cibase1270)>>2)];
      var $cmp1271=(($1187)|(0))==(($1190)|(0));
      if ($cmp1271) { label = 239; break; } else { label = 242; break; }
    case 239: 
      var $1191=$ci1198;
      var $ridx1274=(($1191+32)|0);
      var $1192=HEAP32[(($ridx1274)>>2)];
      var $cmp1275=(($1192)|(0))==0;
      if ($cmp1275) { label = 240; break; } else { label = 241; break; }
    case 240: 
      var $1193=$mrb_addr;
      var $c1278=(($1193+8)|0);
      var $1194=HEAP32[(($c1278)>>2)];
      var $stbase1279=(($1194+8)|0);
      var $1195=HEAP32[(($stbase1279)>>2)];
      var $1196=$mrb_addr;
      var $c1280=(($1196+8)|0);
      var $1197=HEAP32[(($c1280)>>2)];
      var $stack1281=(($1197+4)|0);
      HEAP32[(($stack1281)>>2)]=$1195;
      $regs=$1195;
      label = 698; break;
    case 241: 
      label = 243; break;
    case 242: 
      label = 231; break;
    case 243: 
      label = 244; break;
    case 244: 
      var $1198=$ci1198;
      var $proc1285=(($1198+4)|0);
      var $1199=HEAP32[(($proc1285)>>2)];
      var $body1286=(($1199+12)|0);
      var $irep1287=$body1286;
      var $1200=HEAP32[(($irep1287)>>2)];
      $irep=$1200;
      var $1201=$irep;
      var $pool1288=(($1201+16)|0);
      var $1202=HEAP32[(($pool1288)>>2)];
      $pool=$1202;
      var $1203=$irep;
      var $syms1289=(($1203+20)|0);
      var $1204=HEAP32[(($syms1289)>>2)];
      $syms=$1204;
      var $1205=$mrb_addr;
      var $c1290=(($1205+8)|0);
      var $1206=HEAP32[(($c1290)>>2)];
      var $stbase1291=(($1206+8)|0);
      var $1207=HEAP32[(($stbase1291)>>2)];
      var $1208=$ci1198;
      var $arrayidx1292=(($1208+44)|0);
      var $stackidx1293=(($arrayidx1292+8)|0);
      var $1209=HEAP32[(($stackidx1293)>>2)];
      var $add_ptr1294=(($1207+((($1209)*(12))&-1))|0);
      var $1210=$mrb_addr;
      var $c1295=(($1210+8)|0);
      var $1211=HEAP32[(($c1295)>>2)];
      var $stack1296=(($1211+4)|0);
      HEAP32[(($stack1296)>>2)]=$add_ptr1294;
      $regs=$add_ptr1294;
      var $1212=$ci1198;
      var $ridx1297=(($1212+32)|0);
      var $1213=HEAP32[(($ridx1297)>>2)];
      var $dec1298=((($1213)-(1))|0);
      HEAP32[(($ridx1297)>>2)]=$dec1298;
      var $1214=$mrb_addr;
      var $c1299=(($1214+8)|0);
      var $1215=HEAP32[(($c1299)>>2)];
      var $rescue1300=(($1215+28)|0);
      var $1216=HEAP32[(($rescue1300)>>2)];
      var $arrayidx1301=(($1216+($dec1298<<2))|0);
      var $1217=HEAP32[(($arrayidx1301)>>2)];
      $pc=$1217;
      label = 271; break;
    case 245: 
      var $1218=$mrb_addr;
      var $c1305=(($1218+8)|0);
      var $1219=HEAP32[(($c1305)>>2)];
      var $ci1306=(($1219+16)|0);
      var $1220=HEAP32[(($ci1306)>>2)];
      $ci1304=$1220;
      var $1221=$mrb_addr;
      var $c1311=(($1221+8)|0);
      var $1222=HEAP32[(($c1311)>>2)];
      var $ci1312=(($1222+16)|0);
      var $1223=HEAP32[(($ci1312)>>2)];
      var $eidx1313=(($1223+36)|0);
      var $1224=HEAP32[(($eidx1313)>>2)];
      $eidx1310=$1224;
      var $1225=$i;
      var $shr1315=$1225 >>> 23;
      var $and1316=$shr1315 & 511;
      var $1226=$regs;
      var $arrayidx1317=(($1226+((($and1316)*(12))&-1))|0);
      var $1227=$v;
      var $1228=$arrayidx1317;
      assert(12 % 1 === 0);HEAP32[(($1227)>>2)]=HEAP32[(($1228)>>2)];HEAP32[((($1227)+(4))>>2)]=HEAP32[((($1228)+(4))>>2)];HEAP32[((($1227)+(8))>>2)]=HEAP32[((($1228)+(8))>>2)];
      var $1229=$i;
      var $shr1318=$1229 >>> 14;
      var $and1319=$shr1318 & 511;
      if ((($and1319)|(0))==2) {
        label = 246; break;
      }
      else if ((($and1319)|(0))==0) {
        label = 254; break;
      }
      else if ((($and1319)|(0))==1) {
        label = 261; break;
      }
      else {
      label = 264; break;
      }
    case 246: 
      var $1230=$proc_addr;
      var $env1320=(($1230+20)|0);
      var $1231=HEAP32[(($env1320)>>2)];
      var $tobool1321=(($1231)|(0))!=0;
      if ($tobool1321) { label = 247; break; } else { label = 253; break; }
    case 247: 
      var $1232=$proc_addr;
      var $1233=$1232;
      var $1234=HEAP32[(($1233)>>2)];
      var $1235=$1234 >>> 11;
      var $bf_clear1323=$1235 & 2097151;
      var $and1324=$bf_clear1323 & 256;
      var $cmp1325=(($and1324)|(0))!=0;
      if ($cmp1325) { label = 253; break; } else { label = 248; break; }
    case 248: 
      var $1236=$mrb_addr;
      var $1237=$proc_addr;
      var $call1330=_top_env($1236, $1237);
      $e1329=$call1330;
      var $1238=$e1329;
      var $cioff=(($1238+20)|0);
      var $1239=HEAP32[(($cioff)>>2)];
      var $cmp1331=(($1239)|(0)) < 0;
      if ($cmp1331) { label = 249; break; } else { label = 250; break; }
    case 249: 
      var $1240=$mrb_addr;
      _localjump_error($1240, 0);
      label = 223; break;
    case 250: 
      var $1241=$mrb_addr;
      var $c1335=(($1241+8)|0);
      var $1242=HEAP32[(($c1335)>>2)];
      var $cibase1336=(($1242+20)|0);
      var $1243=HEAP32[(($cibase1336)>>2)];
      var $1244=$e1329;
      var $cioff1337=(($1244+20)|0);
      var $1245=HEAP32[(($cioff1337)>>2)];
      var $add_ptr1338=(($1243+((($1245)*(44))&-1))|0);
      $ci1304=$add_ptr1338;
      var $1246=$ci1304;
      var $1247=$mrb_addr;
      var $c1339=(($1247+8)|0);
      var $1248=HEAP32[(($c1339)>>2)];
      var $cibase1340=(($1248+20)|0);
      var $1249=HEAP32[(($cibase1340)>>2)];
      var $cmp1341=(($1246)|(0))==(($1249)|(0));
      if ($cmp1341) { label = 251; break; } else { label = 252; break; }
    case 251: 
      var $1250=$mrb_addr;
      _localjump_error($1250, 0);
      label = 223; break;
    case 252: 
      var $1251=$ci1304;
      var $1252=$mrb_addr;
      var $c1345=(($1252+8)|0);
      var $1253=HEAP32[(($c1345)>>2)];
      var $ci1346=(($1253+16)|0);
      HEAP32[(($ci1346)>>2)]=$1251;
      label = 265; break;
    case 253: 
      label = 254; break;
    case 254: 
      var $1254=$ci1304;
      var $1255=$mrb_addr;
      var $c1349=(($1255+8)|0);
      var $1256=HEAP32[(($c1349)>>2)];
      var $cibase1350=(($1256+20)|0);
      var $1257=HEAP32[(($cibase1350)>>2)];
      var $cmp1351=(($1254)|(0))==(($1257)|(0));
      if ($cmp1351) { label = 255; break; } else { label = 260; break; }
    case 255: 
      var $1258=$mrb_addr;
      var $c1354=(($1258+8)|0);
      var $1259=HEAP32[(($c1354)>>2)];
      var $prev=(($1259)|0);
      var $1260=HEAP32[(($prev)>>2)];
      var $tobool1355=(($1260)|(0))!=0;
      if ($tobool1355) { label = 257; break; } else { label = 256; break; }
    case 256: 
      var $1261=$mrb_addr;
      _localjump_error($1261, 0);
      label = 223; break;
    case 257: 
      var $1262=$mrb_addr;
      var $c1358=(($1262+8)|0);
      var $1263=HEAP32[(($c1358)>>2)];
      var $prev1359=(($1263)|0);
      var $1264=HEAP32[(($prev1359)>>2)];
      var $ci1360=(($1264+16)|0);
      var $1265=HEAP32[(($ci1360)>>2)];
      var $1266=$mrb_addr;
      var $c1361=(($1266+8)|0);
      var $1267=HEAP32[(($c1361)>>2)];
      var $prev1362=(($1267)|0);
      var $1268=HEAP32[(($prev1362)>>2)];
      var $cibase1363=(($1268+20)|0);
      var $1269=HEAP32[(($cibase1363)>>2)];
      var $cmp1364=(($1265)|(0))==(($1269)|(0));
      if ($cmp1364) { label = 258; break; } else { label = 259; break; }
    case 258: 
      var $1270=$mrb_addr;
      var $1271=$mrb_addr;
      var $call1369=_mrb_class_get($1271, ((94804)|0));
      var $1272=$mrb_addr;
      _mrb_str_new($agg_tmp1370, $1272, ((93996)|0), 13);
      _mrb_exc_new3($exc1368, $1270, $call1369, $agg_tmp1370);
      var $value1371=(($exc1368)|0);
      var $p1372=$value1371;
      var $1273=HEAP32[(($p1372)>>2)];
      var $1274=$1273;
      var $1275=$mrb_addr;
      var $exc1373=(($1275+16)|0);
      HEAP32[(($exc1373)>>2)]=$1274;
      label = 223; break;
    case 259: 
      var $1276=$mrb_addr;
      var $c1375=(($1276+8)|0);
      var $1277=HEAP32[(($c1375)>>2)];
      var $status=(($1277+44)|0);
      HEAP8[($status)]=3;
      var $1278=$mrb_addr;
      var $c1376=(($1278+8)|0);
      var $1279=HEAP32[(($c1376)>>2)];
      var $prev1377=(($1279)|0);
      var $1280=HEAP32[(($prev1377)>>2)];
      var $1281=$mrb_addr;
      var $c1378=(($1281+8)|0);
      HEAP32[(($c1378)>>2)]=$1280;
      label = 260; break;
    case 260: 
      var $1282=$mrb_addr;
      var $c1380=(($1282+8)|0);
      var $1283=HEAP32[(($c1380)>>2)];
      var $ci1381=(($1283+16)|0);
      var $1284=HEAP32[(($ci1381)>>2)];
      $ci1304=$1284;
      label = 265; break;
    case 261: 
      var $1285=$proc_addr;
      var $env1383=(($1285+20)|0);
      var $1286=HEAP32[(($env1383)>>2)];
      var $cioff1384=(($1286+20)|0);
      var $1287=HEAP32[(($cioff1384)>>2)];
      var $cmp1385=(($1287)|(0)) < 0;
      if ($cmp1385) { label = 262; break; } else { label = 263; break; }
    case 262: 
      var $1288=$mrb_addr;
      _localjump_error($1288, 1);
      label = 223; break;
    case 263: 
      var $1289=$mrb_addr;
      var $c1389=(($1289+8)|0);
      var $1290=HEAP32[(($c1389)>>2)];
      var $cibase1390=(($1290+20)|0);
      var $1291=HEAP32[(($cibase1390)>>2)];
      var $1292=$proc_addr;
      var $env1391=(($1292+20)|0);
      var $1293=HEAP32[(($env1391)>>2)];
      var $cioff1392=(($1293+20)|0);
      var $1294=HEAP32[(($cioff1392)>>2)];
      var $add_ptr1393=(($1291+((($1294)*(44))&-1))|0);
      var $add_ptr1394=(($add_ptr1393+44)|0);
      var $1295=$mrb_addr;
      var $c1395=(($1295+8)|0);
      var $1296=HEAP32[(($c1395)>>2)];
      var $ci1396=(($1296+16)|0);
      HEAP32[(($ci1396)>>2)]=$add_ptr1394;
      $ci1304=$add_ptr1394;
      label = 265; break;
    case 264: 
      label = 265; break;
    case 265: 
      label = 266; break;
    case 266: 
      var $1297=$eidx1310;
      var $1298=$mrb_addr;
      var $c1398=(($1298+8)|0);
      var $1299=HEAP32[(($c1398)>>2)];
      var $ci1399=(($1299+16)|0);
      var $1300=HEAP32[(($ci1399)>>2)];
      var $arrayidx1400=((($1300)-(44))|0);
      var $eidx1401=(($arrayidx1400+36)|0);
      var $1301=HEAP32[(($eidx1401)>>2)];
      var $cmp1402=(($1297)|(0)) > (($1301)|(0));
      if ($cmp1402) { label = 267; break; } else { label = 268; break; }
    case 267: 
      var $1302=$mrb_addr;
      var $1303=$eidx1310;
      var $dec1405=((($1303)-(1))|0);
      $eidx1310=$dec1405;
      _ecall($1302, $dec1405);
      label = 266; break;
    case 268: 
      var $1304=$mrb_addr;
      _cipop($1304);
      var $1305=$ci1304;
      var $acc1407=(($1305+24)|0);
      var $1306=HEAP32[(($acc1407)>>2)];
      $acc1308=$1306;
      var $1307=$ci1304;
      var $pc1408=(($1307+20)|0);
      var $1308=HEAP32[(($pc1408)>>2)];
      $pc=$1308;
      var $1309=$mrb_addr;
      var $c1409=(($1309+8)|0);
      var $1310=HEAP32[(($c1409)>>2)];
      var $stbase1410=(($1310+8)|0);
      var $1311=HEAP32[(($stbase1410)>>2)];
      var $1312=$ci1304;
      var $stackidx1411=(($1312+8)|0);
      var $1313=HEAP32[(($stackidx1411)>>2)];
      var $add_ptr1412=(($1311+((($1313)*(12))&-1))|0);
      var $1314=$mrb_addr;
      var $c1413=(($1314+8)|0);
      var $1315=HEAP32[(($c1413)>>2)];
      var $stack1414=(($1315+4)|0);
      HEAP32[(($stack1414)>>2)]=$add_ptr1412;
      $regs=$add_ptr1412;
      var $1316=$acc1308;
      var $cmp1415=(($1316)|(0)) < 0;
      if ($cmp1415) { label = 269; break; } else { label = 270; break; }
    case 269: 
      var $1317=$prev_jmp;
      var $1318=$1317;
      var $1319=$mrb_addr;
      var $jmp1418=(($1319)|0);
      HEAP32[(($jmp1418)>>2)]=$1318;
      var $1320=$agg_result;
      var $1321=$v;
      assert(12 % 1 === 0);HEAP32[(($1320)>>2)]=HEAP32[(($1321)>>2)];HEAP32[((($1320)+(4))>>2)]=HEAP32[((($1321)+(4))>>2)];HEAP32[((($1320)+(8))>>2)]=HEAP32[((($1321)+(8))>>2)];
      label = 708; break;
    case 270: 
      var $1322=$mrb_addr;
      var $c1420=(($1322+8)|0);
      var $1323=HEAP32[(($c1420)>>2)];
      var $ci1421=(($1323+16)|0);
      var $1324=HEAP32[(($ci1421)>>2)];
      var $proc1422=(($1324+4)|0);
      var $1325=HEAP32[(($proc1422)>>2)];
      $proc_addr=$1325;
      var $1326=$proc_addr;
      var $body1423=(($1326+12)|0);
      var $irep1424=$body1423;
      var $1327=HEAP32[(($irep1424)>>2)];
      $irep=$1327;
      var $1328=$irep;
      var $pool1425=(($1328+16)|0);
      var $1329=HEAP32[(($pool1425)>>2)];
      $pool=$1329;
      var $1330=$irep;
      var $syms1426=(($1330+20)|0);
      var $1331=HEAP32[(($syms1426)>>2)];
      $syms=$1331;
      var $1332=$acc1308;
      var $1333=$regs;
      var $arrayidx1427=(($1333+((($1332)*(12))&-1))|0);
      var $1334=$arrayidx1427;
      var $1335=$v;
      assert(12 % 1 === 0);HEAP32[(($1334)>>2)]=HEAP32[(($1335)>>2)];HEAP32[((($1334)+(4))>>2)]=HEAP32[((($1335)+(4))>>2)];HEAP32[((($1334)+(8))>>2)]=HEAP32[((($1335)+(8))>>2)];
      label = 271; break;
    case 271: 
      var $1336=$pc;
      var $1337=HEAP32[(($1336)>>2)];
      $i=$1337;
      var $1338=$i;
      var $and1429=$1338 & 127;
      var $arrayidx1430=((77368+($and1429<<2))|0);
      var $1339=HEAP32[(($arrayidx1430)>>2)];
      var $indirect_goto_dest = $1339;label = 709; break;
    case 272: 
      var $1340=$i;
      var $shr1433=$1340 >>> 23;
      var $and1434=$shr1433 & 511;
      $a1432=$and1434;
      var $1341=$i;
      var $shr1437=$1341 >>> 7;
      var $and1438=$shr1437 & 127;
      $n1436=$and1438;
      var $1342=$i;
      var $shr1449=$1342 >>> 14;
      var $and1450=$shr1449 & 511;
      var $1343=$syms;
      var $arrayidx1451=(($1343+($and1450<<1))|0);
      var $1344=HEAP16[(($arrayidx1451)>>1)];
      $mid1448=$1344;
      var $1345=$a1432;
      var $1346=$regs;
      var $arrayidx1452=(($1346+((($1345)*(12))&-1))|0);
      var $1347=$recv1446;
      var $1348=$arrayidx1452;
      assert(12 % 1 === 0);HEAP32[(($1347)>>2)]=HEAP32[(($1348)>>2)];HEAP32[((($1347)+(4))>>2)]=HEAP32[((($1348)+(4))>>2)];HEAP32[((($1347)+(8))>>2)]=HEAP32[((($1348)+(8))>>2)];
      var $1349=$mrb_addr;
      var $call1453=_mrb_class($1349, $recv1446);
      HEAP32[(($c1442)>>2)]=$call1453;
      var $1350=$mrb_addr;
      var $1351=$mid1448;
      var $call1454=_mrb_method_search_vm($1350, $c1442, $1351);
      $m1440=$call1454;
      var $1352=$m1440;
      var $tobool1455=(($1352)|(0))!=0;
      if ($tobool1455) { label = 277; break; } else { label = 273; break; }
    case 273: 
      var $1353=$mid1448;
      _mrb_symbol_value145($sym1458, $1353);
      var $1354=$mrb_addr;
      var $call1459=_mrb_intern2($1354, ((104432)|0), 14);
      $mid1448=$call1459;
      var $1355=$mrb_addr;
      var $1356=$mid1448;
      var $call1460=_mrb_method_search_vm($1355, $c1442, $1356);
      $m1440=$call1460;
      var $1357=$n1436;
      var $cmp1461=(($1357)|(0))==127;
      if ($cmp1461) { label = 274; break; } else { label = 275; break; }
    case 274: 
      var $1358=$mrb_addr;
      var $1359=$a1432;
      var $add1464=((($1359)+(1))|0);
      var $1360=$regs;
      var $arrayidx1465=(($1360+((($add1464)*(12))&-1))|0);
      _mrb_ary_unshift($tmp1466, $1358, $arrayidx1465, $sym1458);
      label = 276; break;
    case 275: 
      var $1361=$regs;
      var $1362=$a1432;
      var $add_ptr1468=(($1361+((($1362)*(12))&-1))|0);
      var $add_ptr1469=(($add_ptr1468+24)|0);
      var $1363=$regs;
      var $1364=$a1432;
      var $add_ptr1470=(($1363+((($1364)*(12))&-1))|0);
      var $add_ptr1471=(($add_ptr1470+12)|0);
      var $1365=$n1436;
      var $inc1472=((($1365)+(1))|0);
      $n1436=$inc1472;
      _value_move($add_ptr1469, $add_ptr1471, $inc1472);
      var $1366=$a1432;
      var $add1473=((($1366)+(1))|0);
      var $1367=$regs;
      var $arrayidx1474=(($1367+((($add1473)*(12))&-1))|0);
      var $1368=$arrayidx1474;
      var $1369=$sym1458;
      assert(12 % 1 === 0);HEAP32[(($1368)>>2)]=HEAP32[(($1369)>>2)];HEAP32[((($1368)+(4))>>2)]=HEAP32[((($1369)+(4))>>2)];HEAP32[((($1368)+(8))>>2)]=HEAP32[((($1369)+(8))>>2)];
      label = 276; break;
    case 276: 
      label = 277; break;
    case 277: 
      var $1370=$mrb_addr;
      var $c1477=(($1370+8)|0);
      var $1371=HEAP32[(($c1477)>>2)];
      var $ci1478=(($1371+16)|0);
      var $1372=HEAP32[(($ci1478)>>2)];
      $ci1444=$1372;
      var $1373=$mid1448;
      var $1374=$ci1444;
      var $mid1479=(($1374)|0);
      HEAP16[(($mid1479)>>1)]=$1373;
      var $1375=$m1440;
      var $target_class1480=(($1375+16)|0);
      var $1376=HEAP32[(($target_class1480)>>2)];
      var $1377=$ci1444;
      var $target_class1481=(($1377+28)|0);
      HEAP32[(($target_class1481)>>2)]=$1376;
      var $1378=$n1436;
      var $cmp1482=(($1378)|(0))==127;
      if ($cmp1482) { label = 278; break; } else { label = 279; break; }
    case 278: 
      var $1379=$ci1444;
      var $argc1485=(($1379+16)|0);
      HEAP32[(($argc1485)>>2)]=-1;
      label = 280; break;
    case 279: 
      var $1380=$n1436;
      var $1381=$ci1444;
      var $argc1487=(($1381+16)|0);
      HEAP32[(($argc1487)>>2)]=$1380;
      label = 280; break;
    case 280: 
      var $1382=$mrb_addr;
      var $c1489=(($1382+8)|0);
      var $1383=HEAP32[(($c1489)>>2)];
      var $stack1490=(($1383+4)|0);
      var $1384=HEAP32[(($stack1490)>>2)];
      var $1385=$a1432;
      var $1386=$regs;
      var $arrayidx1491=(($1386+((($1385)*(12))&-1))|0);
      var $1387=$ci1444;
      var $argc1492=(($1387+16)|0);
      var $1388=HEAP32[(($argc1492)>>2)];
      var $add1493=((($1388)+(1))|0);
      _value_move($1384, $arrayidx1491, $add1493);
      var $1389=$m1440;
      var $1390=$1389;
      var $1391=HEAP32[(($1390)>>2)];
      var $1392=$1391 >>> 11;
      var $bf_clear1494=$1392 & 2097151;
      var $and1495=$bf_clear1494 & 128;
      var $cmp1496=(($and1495)|(0))!=0;
      if ($cmp1496) { label = 281; break; } else { label = 282; break; }
    case 281: 
      var $1393=$mrb_addr;
      var $c1499=(($1393+8)|0);
      var $1394=HEAP32[(($c1499)>>2)];
      var $stack1500=(($1394+4)|0);
      var $1395=HEAP32[(($stack1500)>>2)];
      var $arrayidx1501=(($1395)|0);
      var $1396=$m1440;
      var $body1502=(($1396+12)|0);
      var $func1503=$body1502;
      var $1397=HEAP32[(($func1503)>>2)];
      var $1398=$mrb_addr;
      FUNCTION_TABLE[$1397]($tmp1504, $1398, $recv1446);
      var $1399=$arrayidx1501;
      var $1400=$tmp1504;
      assert(12 % 1 === 0);HEAP32[(($1399)>>2)]=HEAP32[(($1400)>>2)];HEAP32[((($1399)+(4))>>2)]=HEAP32[((($1400)+(4))>>2)];HEAP32[((($1399)+(8))>>2)]=HEAP32[((($1400)+(8))>>2)];
      var $1401=$mrb_addr;
      var $1402=$ai;
      _mrb_gc_arena_restore($1401, $1402);
      label = 220; break;
    case 282: 
      var $1403=$m1440;
      var $body1506=(($1403+12)|0);
      var $irep1507=$body1506;
      var $1404=HEAP32[(($irep1507)>>2)];
      $irep=$1404;
      var $1405=$irep;
      var $pool1508=(($1405+16)|0);
      var $1406=HEAP32[(($pool1508)>>2)];
      $pool=$1406;
      var $1407=$irep;
      var $syms1509=(($1407+20)|0);
      var $1408=HEAP32[(($syms1509)>>2)];
      $syms=$1408;
      var $1409=$ci1444;
      var $argc1510=(($1409+16)|0);
      var $1410=HEAP32[(($argc1510)>>2)];
      var $cmp1511=(($1410)|(0)) < 0;
      if ($cmp1511) { label = 283; break; } else { label = 287; break; }
    case 283: 
      var $1411=$mrb_addr;
      var $1412=$irep;
      var $nregs1514=(($1412+6)|0);
      var $1413=HEAP16[(($nregs1514)>>1)];
      var $conv1515=(($1413)&(65535));
      var $cmp1516=(($conv1515)|(0)) < 3;
      if ($cmp1516) { label = 284; break; } else { label = 285; break; }
    case 284: 
      var $cond1523 = 3;label = 286; break;
    case 285: 
      var $1414=$irep;
      var $nregs1520=(($1414+6)|0);
      var $1415=HEAP16[(($nregs1520)>>1)];
      var $conv1521=(($1415)&(65535));
      var $cond1523 = $conv1521;label = 286; break;
    case 286: 
      var $cond1523;
      _stack_extend($1411, $cond1523, 3);
      label = 288; break;
    case 287: 
      var $1416=$mrb_addr;
      var $1417=$irep;
      var $nregs1525=(($1417+6)|0);
      var $1418=HEAP16[(($nregs1525)>>1)];
      var $conv1526=(($1418)&(65535));
      var $1419=$ci1444;
      var $argc1527=(($1419+16)|0);
      var $1420=HEAP32[(($argc1527)>>2)];
      var $add1528=((($1420)+(2))|0);
      _stack_extend($1416, $conv1526, $add1528);
      label = 288; break;
    case 288: 
      var $1421=$mrb_addr;
      var $c1530=(($1421+8)|0);
      var $1422=HEAP32[(($c1530)>>2)];
      var $stack1531=(($1422+4)|0);
      var $1423=HEAP32[(($stack1531)>>2)];
      $regs=$1423;
      var $1424=$irep;
      var $iseq1532=(($1424+12)|0);
      var $1425=HEAP32[(($iseq1532)>>2)];
      $pc=$1425;
      label = 289; break;
    case 289: 
      var $1426=$pc;
      var $1427=HEAP32[(($1426)>>2)];
      $i=$1427;
      var $1428=$i;
      var $and1534=$1428 & 127;
      var $arrayidx1535=((77368+($and1534<<2))|0);
      var $1429=HEAP32[(($arrayidx1535)>>2)];
      var $indirect_goto_dest = $1429;label = 709; break;
    case 290: 
      var $1430=$i;
      var $shr1538=$1430 >>> 23;
      var $and1539=$shr1538 & 511;
      $a1537=$and1539;
      var $1431=$i;
      var $shr1542=$1431 >>> 7;
      var $and1543=$shr1542 & 65535;
      $bx1541=$and1543;
      var $1432=$bx1541;
      var $shr1546=$1432 >> 10;
      var $and1547=$shr1546 & 63;
      $m11545=$and1547;
      var $1433=$bx1541;
      var $shr1550=$1433 >> 9;
      var $and1551=$shr1550 & 1;
      $r1549=$and1551;
      var $1434=$bx1541;
      var $shr1554=$1434 >> 4;
      var $and1555=$shr1554 & 31;
      $m21553=$and1555;
      var $1435=$bx1541;
      var $shr1558=$1435 >> 0;
      var $and1559=$shr1558 & 15;
      $lv1557=$and1559;
      var $1436=$lv1557;
      var $cmp1562=(($1436)|(0))==0;
      if ($cmp1562) { label = 291; break; } else { label = 292; break; }
    case 291: 
      var $1437=$regs;
      var $add_ptr1565=(($1437+12)|0);
      $stack1561=$add_ptr1565;
      label = 295; break;
    case 292: 
      var $1438=$mrb_addr;
      var $1439=$lv1557;
      var $sub1569=((($1439)-(1))|0);
      var $call1570=_uvenv($1438, $sub1569);
      $e1568=$call1570;
      var $1440=$e1568;
      var $tobool1571=(($1440)|(0))!=0;
      if ($tobool1571) { label = 294; break; } else { label = 293; break; }
    case 293: 
      var $1441=$mrb_addr;
      _localjump_error($1441, 2);
      label = 223; break;
    case 294: 
      var $1442=$e1568;
      var $stack1574=(($1442+12)|0);
      var $1443=HEAP32[(($stack1574)>>2)];
      var $add_ptr1575=(($1443+12)|0);
      $stack1561=$add_ptr1575;
      label = 295; break;
    case 295: 
      var $1444=$a1537;
      var $1445=$regs;
      var $arrayidx1577=(($1445+((($1444)*(12))&-1))|0);
      var $1446=$m11545;
      var $1447=$r1549;
      var $add1578=((($1446)+($1447))|0);
      var $1448=$m21553;
      var $add1579=((($add1578)+($1448))|0);
      var $1449=$stack1561;
      var $arrayidx1580=(($1449+((($add1579)*(12))&-1))|0);
      var $1450=$arrayidx1577;
      var $1451=$arrayidx1580;
      assert(12 % 1 === 0);HEAP32[(($1450)>>2)]=HEAP32[(($1451)>>2)];HEAP32[((($1450)+(4))>>2)]=HEAP32[((($1451)+(4))>>2)];HEAP32[((($1450)+(8))>>2)]=HEAP32[((($1451)+(8))>>2)];
      var $1452=$pc;
      var $incdec_ptr1581=(($1452+4)|0);
      $pc=$incdec_ptr1581;
      var $1453=HEAP32[(($incdec_ptr1581)>>2)];
      $i=$1453;
      var $1454=$i;
      var $and1582=$1454 & 127;
      var $arrayidx1583=((77368+($and1582<<2))|0);
      var $1455=HEAP32[(($arrayidx1583)>>2)];
      var $indirect_goto_dest = $1455;label = 709; break;
    case 296: 
      var $1456=$i;
      var $shr1586=$1456 >>> 23;
      var $and1587=$shr1586 & 511;
      $a1585=$and1587;
      var $1457=$a1585;
      var $1458=$regs;
      var $arrayidx1588=(($1458+((($1457)*(12))&-1))|0);
      var $tt1589=(($arrayidx1588+8)|0);
      var $1459=HEAP32[(($tt1589)>>2)];
      var $conv1590=(($1459) & 65535);
      var $conv1591=(($conv1590)&(65535));
      var $shl1592=$conv1591 << 8;
      var $1460=$a1585;
      var $add1593=((($1460)+(1))|0);
      var $1461=$regs;
      var $arrayidx1594=(($1461+((($add1593)*(12))&-1))|0);
      var $tt1595=(($arrayidx1594+8)|0);
      var $1462=HEAP32[(($tt1595)>>2)];
      var $conv1596=(($1462) & 65535);
      var $conv1597=(($conv1596)&(65535));
      var $and1598=$conv1597 & 255;
      var $or1599=$shl1592 | $and1598;
      if ((($or1599)|(0))==771) {
        label = 297; break;
      }
      else if ((($or1599)|(0))==774) {
        label = 304; break;
      }
      else if ((($or1599)|(0))==1539) {
        label = 307; break;
      }
      else if ((($or1599)|(0))==1542) {
        label = 310; break;
      }
      else if ((($or1599)|(0))==4112) {
        label = 313; break;
      }
      else {
      label = 314; break;
      }
    case 297: 
      var $1463=$regs;
      var $1464=$a1585;
      var $add_ptr1606=(($1463+((($1464)*(12))&-1))|0);
      $regs_a1605=$add_ptr1606;
      var $1465=$regs_a1605;
      var $arrayidx1607=(($1465)|0);
      var $value1608=(($arrayidx1607)|0);
      var $i1609=$value1608;
      var $1466=HEAP32[(($i1609)>>2)];
      $x=$1466;
      var $1467=$regs_a1605;
      var $arrayidx1610=(($1467+12)|0);
      var $value1611=(($arrayidx1610)|0);
      var $i1612=$value1611;
      var $1468=HEAP32[(($i1612)>>2)];
      $y=$1468;
      var $1469=$x;
      var $1470=$y;
      var $add1613=((($1469)+($1470))|0);
      $z=$add1613;
      var $1471=$x;
      var $cmp1614=(($1471)|(0)) < 0;
      var $conv1615=(($cmp1614)&(1));
      var $1472=$z;
      var $cmp1616=(($1472)|(0)) < 0;
      var $conv1617=(($cmp1616)&(1));
      var $cmp1618=(($conv1615)|(0))!=(($conv1617)|(0));
      if ($cmp1618) { label = 298; break; } else { label = 302; break; }
    case 298: 
      var $1473=$x;
      var $cmp1621=(($1473)|(0)) < 0;
      var $conv1622=(($cmp1621)&(1));
      var $1474=$y;
      var $cmp1623=(($1474)|(0)) < 0;
      var $conv1624=(($cmp1623)&(1));
      var $xor=$conv1622 ^ $conv1624;
      var $cmp1625=(($xor)|(0))==0;
      if ($cmp1625) { label = 299; break; } else { label = 302; break; }
    case 299: 
      label = 300; break;
    case 300: 
      var $1475=$regs_a1605;
      var $arrayidx1629=(($1475)|0);
      var $tt1630=(($arrayidx1629+8)|0);
      HEAP32[(($tt1630)>>2)]=6;
      var $1476=$x;
      var $conv1631=(($1476)|(0));
      var $1477=$y;
      var $conv1632=(($1477)|(0));
      var $add1633=($conv1631)+($conv1632);
      var $1478=$regs_a1605;
      var $arrayidx1634=(($1478)|0);
      var $value1635=(($arrayidx1634)|0);
      var $f=$value1635;
      (HEAPF64[(tempDoublePtr)>>3]=$add1633,HEAP32[(($f)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 301; break;
    case 301: 
      label = 303; break;
    case 302: 
      var $1479=$z;
      var $1480=$regs_a1605;
      var $arrayidx1638=(($1480)|0);
      var $value1639=(($arrayidx1638)|0);
      var $i1640=$value1639;
      HEAP32[(($i1640)>>2)]=$1479;
      label = 303; break;
    case 303: 
      label = 315; break;
    case 304: 
      var $1481=$a1585;
      var $1482=$regs;
      var $arrayidx1645=(($1482+((($1481)*(12))&-1))|0);
      var $value1646=(($arrayidx1645)|0);
      var $i1647=$value1646;
      var $1483=HEAP32[(($i1647)>>2)];
      $x1644=$1483;
      var $1484=$a1585;
      var $add1650=((($1484)+(1))|0);
      var $1485=$regs;
      var $arrayidx1651=(($1485+((($add1650)*(12))&-1))|0);
      var $value1652=(($arrayidx1651)|0);
      var $f1653=$value1652;
      var $1486=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f1653)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f1653)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $y1649=$1486;
      label = 305; break;
    case 305: 
      var $1487=$a1585;
      var $1488=$regs;
      var $arrayidx1655=(($1488+((($1487)*(12))&-1))|0);
      var $tt1656=(($arrayidx1655+8)|0);
      HEAP32[(($tt1656)>>2)]=6;
      var $1489=$x1644;
      var $conv1657=(($1489)|(0));
      var $1490=$y1649;
      var $add1658=($conv1657)+($1490);
      var $1491=$a1585;
      var $1492=$regs;
      var $arrayidx1659=(($1492+((($1491)*(12))&-1))|0);
      var $value1660=(($arrayidx1659)|0);
      var $f1661=$value1660;
      (HEAPF64[(tempDoublePtr)>>3]=$add1658,HEAP32[(($f1661)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1661)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 306; break;
    case 306: 
      label = 315; break;
    case 307: 
      label = 308; break;
    case 308: 
      var $1493=$a1585;
      var $1494=$regs;
      var $arrayidx1665=(($1494+((($1493)*(12))&-1))|0);
      var $value1666=(($arrayidx1665)|0);
      var $f1667=$value1666;
      var $1495=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f1667)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f1667)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $1496=$a1585;
      var $add1668=((($1496)+(1))|0);
      var $1497=$regs;
      var $arrayidx1669=(($1497+((($add1668)*(12))&-1))|0);
      var $value1670=(($arrayidx1669)|0);
      var $i1671=$value1670;
      var $1498=HEAP32[(($i1671)>>2)];
      var $conv1672=(($1498)|(0));
      var $add1673=($1495)+($conv1672);
      var $1499=$a1585;
      var $1500=$regs;
      var $arrayidx1674=(($1500+((($1499)*(12))&-1))|0);
      var $value1675=(($arrayidx1674)|0);
      var $f1676=$value1675;
      (HEAPF64[(tempDoublePtr)>>3]=$add1673,HEAP32[(($f1676)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1676)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 309; break;
    case 309: 
      label = 315; break;
    case 310: 
      label = 311; break;
    case 311: 
      var $1501=$a1585;
      var $1502=$regs;
      var $arrayidx1680=(($1502+((($1501)*(12))&-1))|0);
      var $value1681=(($arrayidx1680)|0);
      var $f1682=$value1681;
      var $1503=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f1682)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f1682)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $1504=$a1585;
      var $add1683=((($1504)+(1))|0);
      var $1505=$regs;
      var $arrayidx1684=(($1505+((($add1683)*(12))&-1))|0);
      var $value1685=(($arrayidx1684)|0);
      var $f1686=$value1685;
      var $1506=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f1686)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f1686)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add1687=($1503)+($1506);
      var $1507=$a1585;
      var $1508=$regs;
      var $arrayidx1688=(($1508+((($1507)*(12))&-1))|0);
      var $value1689=(($arrayidx1688)|0);
      var $f1690=$value1689;
      (HEAPF64[(tempDoublePtr)>>3]=$add1687,HEAP32[(($f1690)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1690)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 312; break;
    case 312: 
      label = 315; break;
    case 313: 
      var $1509=$a1585;
      var $1510=$regs;
      var $arrayidx1693=(($1510+((($1509)*(12))&-1))|0);
      var $1511=$mrb_addr;
      var $1512=$a1585;
      var $1513=$regs;
      var $arrayidx1694=(($1513+((($1512)*(12))&-1))|0);
      var $1514=$a1585;
      var $add1695=((($1514)+(1))|0);
      var $1515=$regs;
      var $arrayidx1696=(($1515+((($add1695)*(12))&-1))|0);
      _mrb_str_plus($tmp1697, $1511, $arrayidx1694, $arrayidx1696);
      var $1516=$arrayidx1693;
      var $1517=$tmp1697;
      assert(12 % 1 === 0);HEAP32[(($1516)>>2)]=HEAP32[(($1517)>>2)];HEAP32[((($1516)+(4))>>2)]=HEAP32[((($1517)+(4))>>2)];HEAP32[((($1516)+(8))>>2)]=HEAP32[((($1517)+(8))>>2)];
      label = 315; break;
    case 314: 
      label = 79; break;
    case 315: 
      var $1518=$mrb_addr;
      var $1519=$ai;
      _mrb_gc_arena_restore($1518, $1519);
      var $1520=$pc;
      var $incdec_ptr1700=(($1520+4)|0);
      $pc=$incdec_ptr1700;
      var $1521=HEAP32[(($incdec_ptr1700)>>2)];
      $i=$1521;
      var $1522=$i;
      var $and1701=$1522 & 127;
      var $arrayidx1702=((77368+($and1701<<2))|0);
      var $1523=HEAP32[(($arrayidx1702)>>2)];
      var $indirect_goto_dest = $1523;label = 709; break;
    case 316: 
      var $1524=$i;
      var $shr1705=$1524 >>> 23;
      var $and1706=$shr1705 & 511;
      $a1704=$and1706;
      var $1525=$a1704;
      var $1526=$regs;
      var $arrayidx1707=(($1526+((($1525)*(12))&-1))|0);
      var $tt1708=(($arrayidx1707+8)|0);
      var $1527=HEAP32[(($tt1708)>>2)];
      var $conv1709=(($1527) & 65535);
      var $conv1710=(($conv1709)&(65535));
      var $shl1711=$conv1710 << 8;
      var $1528=$a1704;
      var $add1712=((($1528)+(1))|0);
      var $1529=$regs;
      var $arrayidx1713=(($1529+((($add1712)*(12))&-1))|0);
      var $tt1714=(($arrayidx1713+8)|0);
      var $1530=HEAP32[(($tt1714)>>2)];
      var $conv1715=(($1530) & 65535);
      var $conv1716=(($conv1715)&(65535));
      var $and1717=$conv1716 & 255;
      var $or1718=$shl1711 | $and1717;
      if ((($or1718)|(0))==771) {
        label = 317; break;
      }
      else if ((($or1718)|(0))==774) {
        label = 325; break;
      }
      else if ((($or1718)|(0))==1539) {
        label = 328; break;
      }
      else if ((($or1718)|(0))==1542) {
        label = 331; break;
      }
      else {
      label = 334; break;
      }
    case 317: 
      var $1531=$a1704;
      var $1532=$regs;
      var $arrayidx1726=(($1532+((($1531)*(12))&-1))|0);
      var $value1727=(($arrayidx1726)|0);
      var $i1728=$value1727;
      var $1533=HEAP32[(($i1728)>>2)];
      $x1721=$1533;
      var $1534=$a1704;
      var $add1729=((($1534)+(1))|0);
      var $1535=$regs;
      var $arrayidx1730=(($1535+((($add1729)*(12))&-1))|0);
      var $value1731=(($arrayidx1730)|0);
      var $i1732=$value1731;
      var $1536=HEAP32[(($i1732)>>2)];
      $y1723=$1536;
      var $1537=$x1721;
      var $1538=$y1723;
      var $sub1733=((($1537)-($1538))|0);
      $z1725=$sub1733;
      var $1539=$x1721;
      var $cmp1734=(($1539)|(0)) < 0;
      var $conv1735=(($cmp1734)&(1));
      var $1540=$y1723;
      var $cmp1736=(($1540)|(0)) < 0;
      var $conv1737=(($cmp1736)&(1));
      var $xor1738=$conv1735 ^ $conv1737;
      var $cmp1739=(($xor1738)|(0))!=0;
      if ($cmp1739) { label = 318; break; } else { label = 322; break; }
    case 318: 
      var $1541=$x1721;
      var $cmp1742=(($1541)|(0)) < 0;
      var $conv1743=(($cmp1742)&(1));
      var $1542=$z1725;
      var $cmp1744=(($1542)|(0)) < 0;
      var $conv1745=(($cmp1744)&(1));
      var $cmp1746=(($conv1743)|(0))!=(($conv1745)|(0));
      if ($cmp1746) { label = 319; break; } else { label = 322; break; }
    case 319: 
      label = 320; break;
    case 320: 
      var $1543=$a1704;
      var $1544=$regs;
      var $arrayidx1750=(($1544+((($1543)*(12))&-1))|0);
      var $tt1751=(($arrayidx1750+8)|0);
      HEAP32[(($tt1751)>>2)]=6;
      var $1545=$x1721;
      var $conv1752=(($1545)|(0));
      var $1546=$y1723;
      var $conv1753=(($1546)|(0));
      var $sub1754=($conv1752)-($conv1753);
      var $1547=$a1704;
      var $1548=$regs;
      var $arrayidx1755=(($1548+((($1547)*(12))&-1))|0);
      var $value1756=(($arrayidx1755)|0);
      var $f1757=$value1756;
      (HEAPF64[(tempDoublePtr)>>3]=$sub1754,HEAP32[(($f1757)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1757)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 321; break;
    case 321: 
      label = 335; break;
    case 322: 
      label = 323; break;
    case 323: 
      var $1549=$a1704;
      var $1550=$regs;
      var $arrayidx1761=(($1550+((($1549)*(12))&-1))|0);
      var $tt1762=(($arrayidx1761+8)|0);
      HEAP32[(($tt1762)>>2)]=3;
      var $1551=$z1725;
      var $1552=$a1704;
      var $1553=$regs;
      var $arrayidx1763=(($1553+((($1552)*(12))&-1))|0);
      var $value1764=(($arrayidx1763)|0);
      var $i1765=$value1764;
      HEAP32[(($i1765)>>2)]=$1551;
      label = 324; break;
    case 324: 
      label = 335; break;
    case 325: 
      var $1554=$a1704;
      var $1555=$regs;
      var $arrayidx1770=(($1555+((($1554)*(12))&-1))|0);
      var $value1771=(($arrayidx1770)|0);
      var $i1772=$value1771;
      var $1556=HEAP32[(($i1772)>>2)];
      $x1769=$1556;
      var $1557=$a1704;
      var $add1775=((($1557)+(1))|0);
      var $1558=$regs;
      var $arrayidx1776=(($1558+((($add1775)*(12))&-1))|0);
      var $value1777=(($arrayidx1776)|0);
      var $f1778=$value1777;
      var $1559=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f1778)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f1778)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $y1774=$1559;
      label = 326; break;
    case 326: 
      var $1560=$a1704;
      var $1561=$regs;
      var $arrayidx1780=(($1561+((($1560)*(12))&-1))|0);
      var $tt1781=(($arrayidx1780+8)|0);
      HEAP32[(($tt1781)>>2)]=6;
      var $1562=$x1769;
      var $conv1782=(($1562)|(0));
      var $1563=$y1774;
      var $sub1783=($conv1782)-($1563);
      var $1564=$a1704;
      var $1565=$regs;
      var $arrayidx1784=(($1565+((($1564)*(12))&-1))|0);
      var $value1785=(($arrayidx1784)|0);
      var $f1786=$value1785;
      (HEAPF64[(tempDoublePtr)>>3]=$sub1783,HEAP32[(($f1786)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1786)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 327; break;
    case 327: 
      label = 335; break;
    case 328: 
      label = 329; break;
    case 329: 
      var $1566=$a1704;
      var $1567=$regs;
      var $arrayidx1790=(($1567+((($1566)*(12))&-1))|0);
      var $value1791=(($arrayidx1790)|0);
      var $f1792=$value1791;
      var $1568=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f1792)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f1792)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $1569=$a1704;
      var $add1793=((($1569)+(1))|0);
      var $1570=$regs;
      var $arrayidx1794=(($1570+((($add1793)*(12))&-1))|0);
      var $value1795=(($arrayidx1794)|0);
      var $i1796=$value1795;
      var $1571=HEAP32[(($i1796)>>2)];
      var $conv1797=(($1571)|(0));
      var $sub1798=($1568)-($conv1797);
      var $1572=$a1704;
      var $1573=$regs;
      var $arrayidx1799=(($1573+((($1572)*(12))&-1))|0);
      var $value1800=(($arrayidx1799)|0);
      var $f1801=$value1800;
      (HEAPF64[(tempDoublePtr)>>3]=$sub1798,HEAP32[(($f1801)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1801)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 330; break;
    case 330: 
      label = 335; break;
    case 331: 
      label = 332; break;
    case 332: 
      var $1574=$a1704;
      var $1575=$regs;
      var $arrayidx1805=(($1575+((($1574)*(12))&-1))|0);
      var $value1806=(($arrayidx1805)|0);
      var $f1807=$value1806;
      var $1576=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f1807)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f1807)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $1577=$a1704;
      var $add1808=((($1577)+(1))|0);
      var $1578=$regs;
      var $arrayidx1809=(($1578+((($add1808)*(12))&-1))|0);
      var $value1810=(($arrayidx1809)|0);
      var $f1811=$value1810;
      var $1579=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f1811)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f1811)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub1812=($1576)-($1579);
      var $1580=$a1704;
      var $1581=$regs;
      var $arrayidx1813=(($1581+((($1580)*(12))&-1))|0);
      var $value1814=(($arrayidx1813)|0);
      var $f1815=$value1814;
      (HEAPF64[(tempDoublePtr)>>3]=$sub1812,HEAP32[(($f1815)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1815)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 333; break;
    case 333: 
      label = 335; break;
    case 334: 
      label = 79; break;
    case 335: 
      var $1582=$pc;
      var $incdec_ptr1819=(($1582+4)|0);
      $pc=$incdec_ptr1819;
      var $1583=HEAP32[(($incdec_ptr1819)>>2)];
      $i=$1583;
      var $1584=$i;
      var $and1820=$1584 & 127;
      var $arrayidx1821=((77368+($and1820<<2))|0);
      var $1585=HEAP32[(($arrayidx1821)>>2)];
      var $indirect_goto_dest = $1585;label = 709; break;
    case 336: 
      var $1586=$i;
      var $shr1824=$1586 >>> 23;
      var $and1825=$shr1824 & 511;
      $a1823=$and1825;
      var $1587=$a1823;
      var $1588=$regs;
      var $arrayidx1826=(($1588+((($1587)*(12))&-1))|0);
      var $tt1827=(($arrayidx1826+8)|0);
      var $1589=HEAP32[(($tt1827)>>2)];
      var $conv1828=(($1589) & 65535);
      var $conv1829=(($conv1828)&(65535));
      var $shl1830=$conv1829 << 8;
      var $1590=$a1823;
      var $add1831=((($1590)+(1))|0);
      var $1591=$regs;
      var $arrayidx1832=(($1591+((($add1831)*(12))&-1))|0);
      var $tt1833=(($arrayidx1832+8)|0);
      var $1592=HEAP32[(($tt1833)>>2)];
      var $conv1834=(($1592) & 65535);
      var $conv1835=(($conv1834)&(65535));
      var $and1836=$conv1835 & 255;
      var $or1837=$shl1830 | $and1836;
      if ((($or1837)|(0))==771) {
        label = 337; break;
      }
      else if ((($or1837)|(0))==774) {
        label = 346; break;
      }
      else if ((($or1837)|(0))==1539) {
        label = 349; break;
      }
      else if ((($or1837)|(0))==1542) {
        label = 352; break;
      }
      else {
      label = 355; break;
      }
    case 337: 
      var $1593=$a1823;
      var $1594=$regs;
      var $arrayidx1845=(($1594+((($1593)*(12))&-1))|0);
      var $value1846=(($arrayidx1845)|0);
      var $i1847=$value1846;
      var $1595=HEAP32[(($i1847)>>2)];
      $x1840=$1595;
      var $1596=$a1823;
      var $add1848=((($1596)+(1))|0);
      var $1597=$regs;
      var $arrayidx1849=(($1597+((($add1848)*(12))&-1))|0);
      var $value1850=(($arrayidx1849)|0);
      var $i1851=$value1850;
      var $1598=HEAP32[(($i1851)>>2)];
      $y1842=$1598;
      var $1599=$x1840;
      var $1600=$y1842;
      var $mul1852=Math.imul($1599,$1600);
      $z1844=$mul1852;
      var $1601=$x1840;
      var $cmp1853=(($1601)|(0))!=0;
      if ($cmp1853) { label = 338; break; } else { label = 342; break; }
    case 338: 
      var $1602=$z1844;
      var $1603=$x1840;
      var $div=((((($1602)|(0)))/((($1603)|(0))))&-1);
      var $1604=$y1842;
      var $cmp1856=(($div)|(0))!=(($1604)|(0));
      if ($cmp1856) { label = 339; break; } else { label = 342; break; }
    case 339: 
      label = 340; break;
    case 340: 
      var $1605=$a1823;
      var $1606=$regs;
      var $arrayidx1860=(($1606+((($1605)*(12))&-1))|0);
      var $tt1861=(($arrayidx1860+8)|0);
      HEAP32[(($tt1861)>>2)]=6;
      var $1607=$x1840;
      var $conv1862=(($1607)|(0));
      var $1608=$y1842;
      var $conv1863=(($1608)|(0));
      var $mul1864=($conv1862)*($conv1863);
      var $1609=$a1823;
      var $1610=$regs;
      var $arrayidx1865=(($1610+((($1609)*(12))&-1))|0);
      var $value1866=(($arrayidx1865)|0);
      var $f1867=$value1866;
      (HEAPF64[(tempDoublePtr)>>3]=$mul1864,HEAP32[(($f1867)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1867)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 341; break;
    case 341: 
      label = 345; break;
    case 342: 
      label = 343; break;
    case 343: 
      var $1611=$a1823;
      var $1612=$regs;
      var $arrayidx1871=(($1612+((($1611)*(12))&-1))|0);
      var $tt1872=(($arrayidx1871+8)|0);
      HEAP32[(($tt1872)>>2)]=3;
      var $1613=$z1844;
      var $1614=$a1823;
      var $1615=$regs;
      var $arrayidx1873=(($1615+((($1614)*(12))&-1))|0);
      var $value1874=(($arrayidx1873)|0);
      var $i1875=$value1874;
      HEAP32[(($i1875)>>2)]=$1613;
      label = 344; break;
    case 344: 
      label = 345; break;
    case 345: 
      label = 356; break;
    case 346: 
      var $1616=$a1823;
      var $1617=$regs;
      var $arrayidx1881=(($1617+((($1616)*(12))&-1))|0);
      var $value1882=(($arrayidx1881)|0);
      var $i1883=$value1882;
      var $1618=HEAP32[(($i1883)>>2)];
      $x1880=$1618;
      var $1619=$a1823;
      var $add1886=((($1619)+(1))|0);
      var $1620=$regs;
      var $arrayidx1887=(($1620+((($add1886)*(12))&-1))|0);
      var $value1888=(($arrayidx1887)|0);
      var $f1889=$value1888;
      var $1621=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f1889)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f1889)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $y1885=$1621;
      label = 347; break;
    case 347: 
      var $1622=$a1823;
      var $1623=$regs;
      var $arrayidx1891=(($1623+((($1622)*(12))&-1))|0);
      var $tt1892=(($arrayidx1891+8)|0);
      HEAP32[(($tt1892)>>2)]=6;
      var $1624=$x1880;
      var $conv1893=(($1624)|(0));
      var $1625=$y1885;
      var $mul1894=($conv1893)*($1625);
      var $1626=$a1823;
      var $1627=$regs;
      var $arrayidx1895=(($1627+((($1626)*(12))&-1))|0);
      var $value1896=(($arrayidx1895)|0);
      var $f1897=$value1896;
      (HEAPF64[(tempDoublePtr)>>3]=$mul1894,HEAP32[(($f1897)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1897)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 348; break;
    case 348: 
      label = 356; break;
    case 349: 
      label = 350; break;
    case 350: 
      var $1628=$a1823;
      var $1629=$regs;
      var $arrayidx1901=(($1629+((($1628)*(12))&-1))|0);
      var $value1902=(($arrayidx1901)|0);
      var $f1903=$value1902;
      var $1630=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f1903)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f1903)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $1631=$a1823;
      var $add1904=((($1631)+(1))|0);
      var $1632=$regs;
      var $arrayidx1905=(($1632+((($add1904)*(12))&-1))|0);
      var $value1906=(($arrayidx1905)|0);
      var $i1907=$value1906;
      var $1633=HEAP32[(($i1907)>>2)];
      var $conv1908=(($1633)|(0));
      var $mul1909=($1630)*($conv1908);
      var $1634=$a1823;
      var $1635=$regs;
      var $arrayidx1910=(($1635+((($1634)*(12))&-1))|0);
      var $value1911=(($arrayidx1910)|0);
      var $f1912=$value1911;
      (HEAPF64[(tempDoublePtr)>>3]=$mul1909,HEAP32[(($f1912)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1912)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 351; break;
    case 351: 
      label = 356; break;
    case 352: 
      label = 353; break;
    case 353: 
      var $1636=$a1823;
      var $1637=$regs;
      var $arrayidx1916=(($1637+((($1636)*(12))&-1))|0);
      var $value1917=(($arrayidx1916)|0);
      var $f1918=$value1917;
      var $1638=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f1918)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f1918)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $1639=$a1823;
      var $add1919=((($1639)+(1))|0);
      var $1640=$regs;
      var $arrayidx1920=(($1640+((($add1919)*(12))&-1))|0);
      var $value1921=(($arrayidx1920)|0);
      var $f1922=$value1921;
      var $1641=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f1922)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f1922)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $mul1923=($1638)*($1641);
      var $1642=$a1823;
      var $1643=$regs;
      var $arrayidx1924=(($1643+((($1642)*(12))&-1))|0);
      var $value1925=(($arrayidx1924)|0);
      var $f1926=$value1925;
      (HEAPF64[(tempDoublePtr)>>3]=$mul1923,HEAP32[(($f1926)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1926)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 354; break;
    case 354: 
      label = 356; break;
    case 355: 
      label = 79; break;
    case 356: 
      var $1644=$pc;
      var $incdec_ptr1930=(($1644+4)|0);
      $pc=$incdec_ptr1930;
      var $1645=HEAP32[(($incdec_ptr1930)>>2)];
      $i=$1645;
      var $1646=$i;
      var $and1931=$1646 & 127;
      var $arrayidx1932=((77368+($and1931<<2))|0);
      var $1647=HEAP32[(($arrayidx1932)>>2)];
      var $indirect_goto_dest = $1647;label = 709; break;
    case 357: 
      var $1648=$i;
      var $shr1935=$1648 >>> 23;
      var $and1936=$shr1935 & 511;
      $a1934=$and1936;
      var $1649=$a1934;
      var $1650=$regs;
      var $arrayidx1937=(($1650+((($1649)*(12))&-1))|0);
      var $tt1938=(($arrayidx1937+8)|0);
      var $1651=HEAP32[(($tt1938)>>2)];
      var $conv1939=(($1651) & 65535);
      var $conv1940=(($conv1939)&(65535));
      var $shl1941=$conv1940 << 8;
      var $1652=$a1934;
      var $add1942=((($1652)+(1))|0);
      var $1653=$regs;
      var $arrayidx1943=(($1653+((($add1942)*(12))&-1))|0);
      var $tt1944=(($arrayidx1943+8)|0);
      var $1654=HEAP32[(($tt1944)>>2)];
      var $conv1945=(($1654) & 65535);
      var $conv1946=(($conv1945)&(65535));
      var $and1947=$conv1946 & 255;
      var $or1948=$shl1941 | $and1947;
      if ((($or1948)|(0))==771) {
        label = 358; break;
      }
      else if ((($or1948)|(0))==774) {
        label = 361; break;
      }
      else if ((($or1948)|(0))==1539) {
        label = 364; break;
      }
      else if ((($or1948)|(0))==1542) {
        label = 367; break;
      }
      else {
      label = 370; break;
      }
    case 358: 
      var $1655=$a1934;
      var $1656=$regs;
      var $arrayidx1952=(($1656+((($1655)*(12))&-1))|0);
      var $value1953=(($arrayidx1952)|0);
      var $i1954=$value1953;
      var $1657=HEAP32[(($i1954)>>2)];
      $x1951=$1657;
      var $1658=$a1934;
      var $add1957=((($1658)+(1))|0);
      var $1659=$regs;
      var $arrayidx1958=(($1659+((($add1957)*(12))&-1))|0);
      var $value1959=(($arrayidx1958)|0);
      var $i1960=$value1959;
      var $1660=HEAP32[(($i1960)>>2)];
      $y1956=$1660;
      label = 359; break;
    case 359: 
      var $1661=$a1934;
      var $1662=$regs;
      var $arrayidx1962=(($1662+((($1661)*(12))&-1))|0);
      var $tt1963=(($arrayidx1962+8)|0);
      HEAP32[(($tt1963)>>2)]=6;
      var $1663=$x1951;
      var $conv1964=(($1663)|(0));
      var $1664=$y1956;
      var $conv1965=(($1664)|(0));
      var $div1966=($conv1964)/($conv1965);
      var $1665=$a1934;
      var $1666=$regs;
      var $arrayidx1967=(($1666+((($1665)*(12))&-1))|0);
      var $value1968=(($arrayidx1967)|0);
      var $f1969=$value1968;
      (HEAPF64[(tempDoublePtr)>>3]=$div1966,HEAP32[(($f1969)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1969)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 360; break;
    case 360: 
      label = 371; break;
    case 361: 
      var $1667=$a1934;
      var $1668=$regs;
      var $arrayidx1974=(($1668+((($1667)*(12))&-1))|0);
      var $value1975=(($arrayidx1974)|0);
      var $i1976=$value1975;
      var $1669=HEAP32[(($i1976)>>2)];
      $x1973=$1669;
      var $1670=$a1934;
      var $add1979=((($1670)+(1))|0);
      var $1671=$regs;
      var $arrayidx1980=(($1671+((($add1979)*(12))&-1))|0);
      var $value1981=(($arrayidx1980)|0);
      var $f1982=$value1981;
      var $1672=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f1982)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f1982)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $y1978=$1672;
      label = 362; break;
    case 362: 
      var $1673=$a1934;
      var $1674=$regs;
      var $arrayidx1984=(($1674+((($1673)*(12))&-1))|0);
      var $tt1985=(($arrayidx1984+8)|0);
      HEAP32[(($tt1985)>>2)]=6;
      var $1675=$x1973;
      var $conv1986=(($1675)|(0));
      var $1676=$y1978;
      var $div1987=($conv1986)/($1676);
      var $1677=$a1934;
      var $1678=$regs;
      var $arrayidx1988=(($1678+((($1677)*(12))&-1))|0);
      var $value1989=(($arrayidx1988)|0);
      var $f1990=$value1989;
      (HEAPF64[(tempDoublePtr)>>3]=$div1987,HEAP32[(($f1990)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1990)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 363; break;
    case 363: 
      label = 371; break;
    case 364: 
      label = 365; break;
    case 365: 
      var $1679=$a1934;
      var $1680=$regs;
      var $arrayidx1994=(($1680+((($1679)*(12))&-1))|0);
      var $value1995=(($arrayidx1994)|0);
      var $f1996=$value1995;
      var $1681=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f1996)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f1996)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $1682=$a1934;
      var $add1997=((($1682)+(1))|0);
      var $1683=$regs;
      var $arrayidx1998=(($1683+((($add1997)*(12))&-1))|0);
      var $value1999=(($arrayidx1998)|0);
      var $i2000=$value1999;
      var $1684=HEAP32[(($i2000)>>2)];
      var $conv2001=(($1684)|(0));
      var $div2002=($1681)/($conv2001);
      var $1685=$a1934;
      var $1686=$regs;
      var $arrayidx2003=(($1686+((($1685)*(12))&-1))|0);
      var $value2004=(($arrayidx2003)|0);
      var $f2005=$value2004;
      (HEAPF64[(tempDoublePtr)>>3]=$div2002,HEAP32[(($f2005)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f2005)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 366; break;
    case 366: 
      label = 371; break;
    case 367: 
      label = 368; break;
    case 368: 
      var $1687=$a1934;
      var $1688=$regs;
      var $arrayidx2009=(($1688+((($1687)*(12))&-1))|0);
      var $value2010=(($arrayidx2009)|0);
      var $f2011=$value2010;
      var $1689=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2011)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2011)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $1690=$a1934;
      var $add2012=((($1690)+(1))|0);
      var $1691=$regs;
      var $arrayidx2013=(($1691+((($add2012)*(12))&-1))|0);
      var $value2014=(($arrayidx2013)|0);
      var $f2015=$value2014;
      var $1692=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2015)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2015)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $div2016=($1689)/($1692);
      var $1693=$a1934;
      var $1694=$regs;
      var $arrayidx2017=(($1694+((($1693)*(12))&-1))|0);
      var $value2018=(($arrayidx2017)|0);
      var $f2019=$value2018;
      (HEAPF64[(tempDoublePtr)>>3]=$div2016,HEAP32[(($f2019)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f2019)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 369; break;
    case 369: 
      label = 371; break;
    case 370: 
      label = 79; break;
    case 371: 
      var $1695=$pc;
      var $incdec_ptr2023=(($1695+4)|0);
      $pc=$incdec_ptr2023;
      var $1696=HEAP32[(($incdec_ptr2023)>>2)];
      $i=$1696;
      var $1697=$i;
      var $and2024=$1697 & 127;
      var $arrayidx2025=((77368+($and2024<<2))|0);
      var $1698=HEAP32[(($arrayidx2025)>>2)];
      var $indirect_goto_dest = $1698;label = 709; break;
    case 372: 
      var $1699=$i;
      var $shr2028=$1699 >>> 23;
      var $and2029=$shr2028 & 511;
      $a2027=$and2029;
      var $1700=$a2027;
      var $1701=$regs;
      var $arrayidx2030=(($1701+((($1700)*(12))&-1))|0);
      var $tt2031=(($arrayidx2030+8)|0);
      var $1702=HEAP32[(($tt2031)>>2)];
      if ((($1702)|(0))==3) {
        label = 373; break;
      }
      else if ((($1702)|(0))==6) {
        label = 379; break;
      }
      else {
      label = 380; break;
      }
    case 373: 
      var $1703=$a2027;
      var $1704=$regs;
      var $arrayidx2035=(($1704+((($1703)*(12))&-1))|0);
      var $value2036=(($arrayidx2035)|0);
      var $i2037=$value2036;
      var $1705=HEAP32[(($i2037)>>2)];
      $x2034=$1705;
      var $1706=$i;
      var $shr2040=$1706 >>> 7;
      var $and2041=$shr2040 & 127;
      $y2039=$and2041;
      var $1707=$x2034;
      var $1708=$y2039;
      var $add2044=((($1707)+($1708))|0);
      $z2043=$add2044;
      var $1709=$x2034;
      var $cmp2045=(($1709)|(0)) < 0;
      var $conv2046=(($cmp2045)&(1));
      var $1710=$y2039;
      var $cmp2047=(($1710)|(0)) < 0;
      var $conv2048=(($cmp2047)&(1));
      var $xor2049=$conv2046 ^ $conv2048;
      var $cmp2050=(($xor2049)|(0))==0;
      if ($cmp2050) { label = 374; break; } else { label = 378; break; }
    case 374: 
      var $1711=$x2034;
      var $cmp2053=(($1711)|(0)) < 0;
      var $conv2054=(($cmp2053)&(1));
      var $1712=$z2043;
      var $cmp2055=(($1712)|(0)) < 0;
      var $conv2056=(($cmp2055)&(1));
      var $cmp2057=(($conv2054)|(0))!=(($conv2056)|(0));
      if ($cmp2057) { label = 375; break; } else { label = 378; break; }
    case 375: 
      label = 376; break;
    case 376: 
      var $1713=$a2027;
      var $1714=$regs;
      var $arrayidx2061=(($1714+((($1713)*(12))&-1))|0);
      var $tt2062=(($arrayidx2061+8)|0);
      HEAP32[(($tt2062)>>2)]=6;
      var $1715=$x2034;
      var $conv2063=(($1715)|(0));
      var $1716=$y2039;
      var $conv2064=(($1716)|(0));
      var $add2065=($conv2063)+($conv2064);
      var $1717=$a2027;
      var $1718=$regs;
      var $arrayidx2066=(($1718+((($1717)*(12))&-1))|0);
      var $value2067=(($arrayidx2066)|0);
      var $f2068=$value2067;
      (HEAPF64[(tempDoublePtr)>>3]=$add2065,HEAP32[(($f2068)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f2068)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 377; break;
    case 377: 
      label = 383; break;
    case 378: 
      var $1719=$z2043;
      var $1720=$a2027;
      var $1721=$regs;
      var $arrayidx2071=(($1721+((($1720)*(12))&-1))|0);
      var $value2072=(($arrayidx2071)|0);
      var $i2073=$value2072;
      HEAP32[(($i2073)>>2)]=$1719;
      label = 383; break;
    case 379: 
      var $1722=$i;
      var $shr2075=$1722 >>> 7;
      var $and2076=$shr2075 & 127;
      var $conv2077=(($and2076)|(0));
      var $1723=$a2027;
      var $1724=$regs;
      var $arrayidx2078=(($1724+((($1723)*(12))&-1))|0);
      var $value2079=(($arrayidx2078)|0);
      var $f2080=$value2079;
      var $1725=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2080)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2080)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add2081=($1725)+($conv2077);
      (HEAPF64[(tempDoublePtr)>>3]=$add2081,HEAP32[(($f2080)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f2080)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 383; break;
    case 380: 
      label = 381; break;
    case 381: 
      var $1726=$a2027;
      var $add2084=((($1726)+(1))|0);
      var $1727=$regs;
      var $arrayidx2085=(($1727+((($add2084)*(12))&-1))|0);
      var $tt2086=(($arrayidx2085+8)|0);
      HEAP32[(($tt2086)>>2)]=3;
      var $1728=$i;
      var $shr2087=$1728 >>> 7;
      var $and2088=$shr2087 & 127;
      var $1729=$a2027;
      var $add2089=((($1729)+(1))|0);
      var $1730=$regs;
      var $arrayidx2090=(($1730+((($add2089)*(12))&-1))|0);
      var $value2091=(($arrayidx2090)|0);
      var $i2092=$value2091;
      HEAP32[(($i2092)>>2)]=$and2088;
      label = 382; break;
    case 382: 
      var $1731=$a2027;
      var $and2094=$1731 & 511;
      var $shl2095=$and2094 << 23;
      var $or2096=32 | $shl2095;
      var $1732=$i;
      var $shr2097=$1732 >>> 14;
      var $and2098=$shr2097 & 511;
      var $and2099=$and2098 & 511;
      var $shl2100=$and2099 << 14;
      var $or2101=$or2096 | $shl2100;
      var $or2102=$or2101 | 128;
      $i=$or2102;
      label = 79; break;
    case 383: 
      var $1733=$pc;
      var $incdec_ptr2104=(($1733+4)|0);
      $pc=$incdec_ptr2104;
      var $1734=HEAP32[(($incdec_ptr2104)>>2)];
      $i=$1734;
      var $1735=$i;
      var $and2105=$1735 & 127;
      var $arrayidx2106=((77368+($and2105<<2))|0);
      var $1736=HEAP32[(($arrayidx2106)>>2)];
      var $indirect_goto_dest = $1736;label = 709; break;
    case 384: 
      var $1737=$i;
      var $shr2109=$1737 >>> 23;
      var $and2110=$shr2109 & 511;
      $a2108=$and2110;
      var $1738=$regs;
      var $1739=$a2108;
      var $add_ptr2113=(($1738+((($1739)*(12))&-1))|0);
      $regs_a2112=$add_ptr2113;
      var $1740=$regs_a2112;
      var $arrayidx2114=(($1740)|0);
      var $tt2115=(($arrayidx2114+8)|0);
      var $1741=HEAP32[(($tt2115)>>2)];
      if ((($1741)|(0))==3) {
        label = 385; break;
      }
      else if ((($1741)|(0))==6) {
        label = 392; break;
      }
      else {
      label = 393; break;
      }
    case 385: 
      var $1742=$regs_a2112;
      var $arrayidx2119=(($1742)|0);
      var $value2120=(($arrayidx2119)|0);
      var $i2121=$value2120;
      var $1743=HEAP32[(($i2121)>>2)];
      $x2118=$1743;
      var $1744=$i;
      var $shr2124=$1744 >>> 7;
      var $and2125=$shr2124 & 127;
      $y2123=$and2125;
      var $1745=$x2118;
      var $1746=$y2123;
      var $sub2128=((($1745)-($1746))|0);
      $z2127=$sub2128;
      var $1747=$x2118;
      var $cmp2129=(($1747)|(0)) < 0;
      var $conv2130=(($cmp2129)&(1));
      var $1748=$z2127;
      var $cmp2131=(($1748)|(0)) < 0;
      var $conv2132=(($cmp2131)&(1));
      var $cmp2133=(($conv2130)|(0))!=(($conv2132)|(0));
      if ($cmp2133) { label = 386; break; } else { label = 390; break; }
    case 386: 
      var $1749=$x2118;
      var $cmp2136=(($1749)|(0)) < 0;
      var $conv2137=(($cmp2136)&(1));
      var $1750=$y2123;
      var $cmp2138=(($1750)|(0)) < 0;
      var $conv2139=(($cmp2138)&(1));
      var $xor2140=$conv2137 ^ $conv2139;
      var $cmp2141=(($xor2140)|(0))!=0;
      if ($cmp2141) { label = 387; break; } else { label = 390; break; }
    case 387: 
      label = 388; break;
    case 388: 
      var $1751=$regs_a2112;
      var $arrayidx2145=(($1751)|0);
      var $tt2146=(($arrayidx2145+8)|0);
      HEAP32[(($tt2146)>>2)]=6;
      var $1752=$x2118;
      var $conv2147=(($1752)|(0));
      var $1753=$y2123;
      var $conv2148=(($1753)|(0));
      var $sub2149=($conv2147)-($conv2148);
      var $1754=$regs_a2112;
      var $arrayidx2150=(($1754)|0);
      var $value2151=(($arrayidx2150)|0);
      var $f2152=$value2151;
      (HEAPF64[(tempDoublePtr)>>3]=$sub2149,HEAP32[(($f2152)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f2152)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 389; break;
    case 389: 
      label = 391; break;
    case 390: 
      var $1755=$z2127;
      var $1756=$regs_a2112;
      var $arrayidx2155=(($1756)|0);
      var $value2156=(($arrayidx2155)|0);
      var $i2157=$value2156;
      HEAP32[(($i2157)>>2)]=$1755;
      label = 391; break;
    case 391: 
      label = 396; break;
    case 392: 
      var $1757=$i;
      var $shr2160=$1757 >>> 7;
      var $and2161=$shr2160 & 127;
      var $conv2162=(($and2161)|(0));
      var $1758=$regs_a2112;
      var $arrayidx2163=(($1758)|0);
      var $value2164=(($arrayidx2163)|0);
      var $f2165=$value2164;
      var $1759=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2165)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2165)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub2166=($1759)-($conv2162);
      (HEAPF64[(tempDoublePtr)>>3]=$sub2166,HEAP32[(($f2165)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f2165)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 396; break;
    case 393: 
      label = 394; break;
    case 394: 
      var $1760=$regs_a2112;
      var $arrayidx2169=(($1760+12)|0);
      var $tt2170=(($arrayidx2169+8)|0);
      HEAP32[(($tt2170)>>2)]=3;
      var $1761=$i;
      var $shr2171=$1761 >>> 7;
      var $and2172=$shr2171 & 127;
      var $1762=$regs_a2112;
      var $arrayidx2173=(($1762+12)|0);
      var $value2174=(($arrayidx2173)|0);
      var $i2175=$value2174;
      HEAP32[(($i2175)>>2)]=$and2172;
      label = 395; break;
    case 395: 
      var $1763=$a2108;
      var $and2177=$1763 & 511;
      var $shl2178=$and2177 << 23;
      var $or2179=32 | $shl2178;
      var $1764=$i;
      var $shr2180=$1764 >>> 14;
      var $and2181=$shr2180 & 511;
      var $and2182=$and2181 & 511;
      var $shl2183=$and2182 << 14;
      var $or2184=$or2179 | $shl2183;
      var $or2185=$or2184 | 128;
      $i=$or2185;
      label = 79; break;
    case 396: 
      var $1765=$pc;
      var $incdec_ptr2187=(($1765+4)|0);
      $pc=$incdec_ptr2187;
      var $1766=HEAP32[(($incdec_ptr2187)>>2)];
      $i=$1766;
      var $1767=$i;
      var $and2188=$1767 & 127;
      var $arrayidx2189=((77368+($and2188<<2))|0);
      var $1768=HEAP32[(($arrayidx2189)>>2)];
      var $indirect_goto_dest = $1768;label = 709; break;
    case 397: 
      var $1769=$i;
      var $shr2192=$1769 >>> 23;
      var $and2193=$shr2192 & 511;
      $a2191=$and2193;
      var $1770=$mrb_addr;
      var $1771=$a2191;
      var $1772=$regs;
      var $arrayidx2194=(($1772+((($1771)*(12))&-1))|0);
      var $1773=$a2191;
      var $add2195=((($1773)+(1))|0);
      var $1774=$regs;
      var $arrayidx2196=(($1774+((($add2195)*(12))&-1))|0);
      var $call2197=_mrb_obj_eq($1770, $arrayidx2194, $arrayidx2196);
      var $tobool2198=(($call2197)|(0))!=0;
      if ($tobool2198) { label = 398; break; } else { label = 401; break; }
    case 398: 
      label = 399; break;
    case 399: 
      var $1775=$a2191;
      var $1776=$regs;
      var $arrayidx2201=(($1776+((($1775)*(12))&-1))|0);
      var $tt2202=(($arrayidx2201+8)|0);
      HEAP32[(($tt2202)>>2)]=2;
      var $1777=$a2191;
      var $1778=$regs;
      var $arrayidx2203=(($1778+((($1777)*(12))&-1))|0);
      var $value2204=(($arrayidx2203)|0);
      var $i2205=$value2204;
      HEAP32[(($i2205)>>2)]=1;
      label = 400; break;
    case 400: 
      label = 446; break;
    case 401: 
      label = 402; break;
    case 402: 
      var $1779=$i;
      var $shr2211=$1779 >>> 23;
      var $and2212=$shr2211 & 511;
      $a2210=$and2212;
      var $1780=$a2210;
      var $1781=$regs;
      var $arrayidx2213=(($1781+((($1780)*(12))&-1))|0);
      var $tt2214=(($arrayidx2213+8)|0);
      var $1782=HEAP32[(($tt2214)>>2)];
      var $conv2215=(($1782) & 65535);
      var $conv2216=(($conv2215)&(65535));
      var $shl2217=$conv2216 << 8;
      var $1783=$a2210;
      var $add2218=((($1783)+(1))|0);
      var $1784=$regs;
      var $arrayidx2219=(($1784+((($add2218)*(12))&-1))|0);
      var $tt2220=(($arrayidx2219+8)|0);
      var $1785=HEAP32[(($tt2220)>>2)];
      var $conv2221=(($1785) & 65535);
      var $conv2222=(($conv2221)&(65535));
      var $and2223=$conv2222 & 255;
      var $or2224=$shl2217 | $and2223;
      if ((($or2224)|(0))==771) {
        label = 403; break;
      }
      else if ((($or2224)|(0))==774) {
        label = 413; break;
      }
      else if ((($or2224)|(0))==1539) {
        label = 423; break;
      }
      else if ((($or2224)|(0))==1542) {
        label = 433; break;
      }
      else {
      label = 443; break;
      }
    case 403: 
      label = 404; break;
    case 404: 
      var $1786=$a2210;
      var $1787=$regs;
      var $arrayidx2227=(($1787+((($1786)*(12))&-1))|0);
      var $value2228=(($arrayidx2227)|0);
      var $i2229=$value2228;
      var $1788=HEAP32[(($i2229)>>2)];
      var $1789=$a2210;
      var $add2230=((($1789)+(1))|0);
      var $1790=$regs;
      var $arrayidx2231=(($1790+((($add2230)*(12))&-1))|0);
      var $value2232=(($arrayidx2231)|0);
      var $i2233=$value2232;
      var $1791=HEAP32[(($i2233)>>2)];
      var $cmp2234=(($1788)|(0))==(($1791)|(0));
      if ($cmp2234) { label = 405; break; } else { label = 408; break; }
    case 405: 
      label = 406; break;
    case 406: 
      var $1792=$a2210;
      var $1793=$regs;
      var $arrayidx2238=(($1793+((($1792)*(12))&-1))|0);
      var $tt2239=(($arrayidx2238+8)|0);
      HEAP32[(($tt2239)>>2)]=2;
      var $1794=$a2210;
      var $1795=$regs;
      var $arrayidx2240=(($1795+((($1794)*(12))&-1))|0);
      var $value2241=(($arrayidx2240)|0);
      var $i2242=$value2241;
      HEAP32[(($i2242)>>2)]=1;
      label = 407; break;
    case 407: 
      label = 411; break;
    case 408: 
      label = 409; break;
    case 409: 
      var $1796=$a2210;
      var $1797=$regs;
      var $arrayidx2246=(($1797+((($1796)*(12))&-1))|0);
      var $tt2247=(($arrayidx2246+8)|0);
      HEAP32[(($tt2247)>>2)]=0;
      var $1798=$a2210;
      var $1799=$regs;
      var $arrayidx2248=(($1799+((($1798)*(12))&-1))|0);
      var $value2249=(($arrayidx2248)|0);
      var $i2250=$value2249;
      HEAP32[(($i2250)>>2)]=1;
      label = 410; break;
    case 410: 
      label = 411; break;
    case 411: 
      label = 412; break;
    case 412: 
      label = 444; break;
    case 413: 
      label = 414; break;
    case 414: 
      var $1800=$a2210;
      var $1801=$regs;
      var $arrayidx2256=(($1801+((($1800)*(12))&-1))|0);
      var $value2257=(($arrayidx2256)|0);
      var $i2258=$value2257;
      var $1802=HEAP32[(($i2258)>>2)];
      var $conv2259=(($1802)|(0));
      var $1803=$a2210;
      var $add2260=((($1803)+(1))|0);
      var $1804=$regs;
      var $arrayidx2261=(($1804+((($add2260)*(12))&-1))|0);
      var $value2262=(($arrayidx2261)|0);
      var $f2263=$value2262;
      var $1805=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2263)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2263)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp2264=$conv2259 == $1805;
      if ($cmp2264) { label = 415; break; } else { label = 418; break; }
    case 415: 
      label = 416; break;
    case 416: 
      var $1806=$a2210;
      var $1807=$regs;
      var $arrayidx2268=(($1807+((($1806)*(12))&-1))|0);
      var $tt2269=(($arrayidx2268+8)|0);
      HEAP32[(($tt2269)>>2)]=2;
      var $1808=$a2210;
      var $1809=$regs;
      var $arrayidx2270=(($1809+((($1808)*(12))&-1))|0);
      var $value2271=(($arrayidx2270)|0);
      var $i2272=$value2271;
      HEAP32[(($i2272)>>2)]=1;
      label = 417; break;
    case 417: 
      label = 421; break;
    case 418: 
      label = 419; break;
    case 419: 
      var $1810=$a2210;
      var $1811=$regs;
      var $arrayidx2276=(($1811+((($1810)*(12))&-1))|0);
      var $tt2277=(($arrayidx2276+8)|0);
      HEAP32[(($tt2277)>>2)]=0;
      var $1812=$a2210;
      var $1813=$regs;
      var $arrayidx2278=(($1813+((($1812)*(12))&-1))|0);
      var $value2279=(($arrayidx2278)|0);
      var $i2280=$value2279;
      HEAP32[(($i2280)>>2)]=1;
      label = 420; break;
    case 420: 
      label = 421; break;
    case 421: 
      label = 422; break;
    case 422: 
      label = 444; break;
    case 423: 
      label = 424; break;
    case 424: 
      var $1814=$a2210;
      var $1815=$regs;
      var $arrayidx2286=(($1815+((($1814)*(12))&-1))|0);
      var $value2287=(($arrayidx2286)|0);
      var $f2288=$value2287;
      var $1816=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2288)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2288)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $1817=$a2210;
      var $add2289=((($1817)+(1))|0);
      var $1818=$regs;
      var $arrayidx2290=(($1818+((($add2289)*(12))&-1))|0);
      var $value2291=(($arrayidx2290)|0);
      var $i2292=$value2291;
      var $1819=HEAP32[(($i2292)>>2)];
      var $conv2293=(($1819)|(0));
      var $cmp2294=$1816 == $conv2293;
      if ($cmp2294) { label = 425; break; } else { label = 428; break; }
    case 425: 
      label = 426; break;
    case 426: 
      var $1820=$a2210;
      var $1821=$regs;
      var $arrayidx2298=(($1821+((($1820)*(12))&-1))|0);
      var $tt2299=(($arrayidx2298+8)|0);
      HEAP32[(($tt2299)>>2)]=2;
      var $1822=$a2210;
      var $1823=$regs;
      var $arrayidx2300=(($1823+((($1822)*(12))&-1))|0);
      var $value2301=(($arrayidx2300)|0);
      var $i2302=$value2301;
      HEAP32[(($i2302)>>2)]=1;
      label = 427; break;
    case 427: 
      label = 431; break;
    case 428: 
      label = 429; break;
    case 429: 
      var $1824=$a2210;
      var $1825=$regs;
      var $arrayidx2306=(($1825+((($1824)*(12))&-1))|0);
      var $tt2307=(($arrayidx2306+8)|0);
      HEAP32[(($tt2307)>>2)]=0;
      var $1826=$a2210;
      var $1827=$regs;
      var $arrayidx2308=(($1827+((($1826)*(12))&-1))|0);
      var $value2309=(($arrayidx2308)|0);
      var $i2310=$value2309;
      HEAP32[(($i2310)>>2)]=1;
      label = 430; break;
    case 430: 
      label = 431; break;
    case 431: 
      label = 432; break;
    case 432: 
      label = 444; break;
    case 433: 
      label = 434; break;
    case 434: 
      var $1828=$a2210;
      var $1829=$regs;
      var $arrayidx2316=(($1829+((($1828)*(12))&-1))|0);
      var $value2317=(($arrayidx2316)|0);
      var $f2318=$value2317;
      var $1830=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2318)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2318)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $1831=$a2210;
      var $add2319=((($1831)+(1))|0);
      var $1832=$regs;
      var $arrayidx2320=(($1832+((($add2319)*(12))&-1))|0);
      var $value2321=(($arrayidx2320)|0);
      var $f2322=$value2321;
      var $1833=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2322)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2322)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp2323=$1830 == $1833;
      if ($cmp2323) { label = 435; break; } else { label = 438; break; }
    case 435: 
      label = 436; break;
    case 436: 
      var $1834=$a2210;
      var $1835=$regs;
      var $arrayidx2327=(($1835+((($1834)*(12))&-1))|0);
      var $tt2328=(($arrayidx2327+8)|0);
      HEAP32[(($tt2328)>>2)]=2;
      var $1836=$a2210;
      var $1837=$regs;
      var $arrayidx2329=(($1837+((($1836)*(12))&-1))|0);
      var $value2330=(($arrayidx2329)|0);
      var $i2331=$value2330;
      HEAP32[(($i2331)>>2)]=1;
      label = 437; break;
    case 437: 
      label = 441; break;
    case 438: 
      label = 439; break;
    case 439: 
      var $1838=$a2210;
      var $1839=$regs;
      var $arrayidx2335=(($1839+((($1838)*(12))&-1))|0);
      var $tt2336=(($arrayidx2335+8)|0);
      HEAP32[(($tt2336)>>2)]=0;
      var $1840=$a2210;
      var $1841=$regs;
      var $arrayidx2337=(($1841+((($1840)*(12))&-1))|0);
      var $value2338=(($arrayidx2337)|0);
      var $i2339=$value2338;
      HEAP32[(($i2339)>>2)]=1;
      label = 440; break;
    case 440: 
      label = 441; break;
    case 441: 
      label = 442; break;
    case 442: 
      label = 444; break;
    case 443: 
      label = 79; break;
    case 444: 
      label = 445; break;
    case 445: 
      label = 446; break;
    case 446: 
      var $1842=$pc;
      var $incdec_ptr2347=(($1842+4)|0);
      $pc=$incdec_ptr2347;
      var $1843=HEAP32[(($incdec_ptr2347)>>2)];
      $i=$1843;
      var $1844=$i;
      var $and2348=$1844 & 127;
      var $arrayidx2349=((77368+($and2348<<2))|0);
      var $1845=HEAP32[(($arrayidx2349)>>2)];
      var $indirect_goto_dest = $1845;label = 709; break;
    case 447: 
      label = 448; break;
    case 448: 
      var $1846=$i;
      var $shr2353=$1846 >>> 23;
      var $and2354=$shr2353 & 511;
      $a2352=$and2354;
      var $1847=$a2352;
      var $1848=$regs;
      var $arrayidx2355=(($1848+((($1847)*(12))&-1))|0);
      var $tt2356=(($arrayidx2355+8)|0);
      var $1849=HEAP32[(($tt2356)>>2)];
      var $conv2357=(($1849) & 65535);
      var $conv2358=(($conv2357)&(65535));
      var $shl2359=$conv2358 << 8;
      var $1850=$a2352;
      var $add2360=((($1850)+(1))|0);
      var $1851=$regs;
      var $arrayidx2361=(($1851+((($add2360)*(12))&-1))|0);
      var $tt2362=(($arrayidx2361+8)|0);
      var $1852=HEAP32[(($tt2362)>>2)];
      var $conv2363=(($1852) & 65535);
      var $conv2364=(($conv2363)&(65535));
      var $and2365=$conv2364 & 255;
      var $or2366=$shl2359 | $and2365;
      if ((($or2366)|(0))==771) {
        label = 449; break;
      }
      else if ((($or2366)|(0))==774) {
        label = 459; break;
      }
      else if ((($or2366)|(0))==1539) {
        label = 469; break;
      }
      else if ((($or2366)|(0))==1542) {
        label = 479; break;
      }
      else {
      label = 489; break;
      }
    case 449: 
      label = 450; break;
    case 450: 
      var $1853=$a2352;
      var $1854=$regs;
      var $arrayidx2369=(($1854+((($1853)*(12))&-1))|0);
      var $value2370=(($arrayidx2369)|0);
      var $i2371=$value2370;
      var $1855=HEAP32[(($i2371)>>2)];
      var $1856=$a2352;
      var $add2372=((($1856)+(1))|0);
      var $1857=$regs;
      var $arrayidx2373=(($1857+((($add2372)*(12))&-1))|0);
      var $value2374=(($arrayidx2373)|0);
      var $i2375=$value2374;
      var $1858=HEAP32[(($i2375)>>2)];
      var $cmp2376=(($1855)|(0)) < (($1858)|(0));
      if ($cmp2376) { label = 451; break; } else { label = 454; break; }
    case 451: 
      label = 452; break;
    case 452: 
      var $1859=$a2352;
      var $1860=$regs;
      var $arrayidx2380=(($1860+((($1859)*(12))&-1))|0);
      var $tt2381=(($arrayidx2380+8)|0);
      HEAP32[(($tt2381)>>2)]=2;
      var $1861=$a2352;
      var $1862=$regs;
      var $arrayidx2382=(($1862+((($1861)*(12))&-1))|0);
      var $value2383=(($arrayidx2382)|0);
      var $i2384=$value2383;
      HEAP32[(($i2384)>>2)]=1;
      label = 453; break;
    case 453: 
      label = 457; break;
    case 454: 
      label = 455; break;
    case 455: 
      var $1863=$a2352;
      var $1864=$regs;
      var $arrayidx2388=(($1864+((($1863)*(12))&-1))|0);
      var $tt2389=(($arrayidx2388+8)|0);
      HEAP32[(($tt2389)>>2)]=0;
      var $1865=$a2352;
      var $1866=$regs;
      var $arrayidx2390=(($1866+((($1865)*(12))&-1))|0);
      var $value2391=(($arrayidx2390)|0);
      var $i2392=$value2391;
      HEAP32[(($i2392)>>2)]=1;
      label = 456; break;
    case 456: 
      label = 457; break;
    case 457: 
      label = 458; break;
    case 458: 
      label = 490; break;
    case 459: 
      label = 460; break;
    case 460: 
      var $1867=$a2352;
      var $1868=$regs;
      var $arrayidx2398=(($1868+((($1867)*(12))&-1))|0);
      var $value2399=(($arrayidx2398)|0);
      var $i2400=$value2399;
      var $1869=HEAP32[(($i2400)>>2)];
      var $conv2401=(($1869)|(0));
      var $1870=$a2352;
      var $add2402=((($1870)+(1))|0);
      var $1871=$regs;
      var $arrayidx2403=(($1871+((($add2402)*(12))&-1))|0);
      var $value2404=(($arrayidx2403)|0);
      var $f2405=$value2404;
      var $1872=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2405)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2405)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp2406=$conv2401 < $1872;
      if ($cmp2406) { label = 461; break; } else { label = 464; break; }
    case 461: 
      label = 462; break;
    case 462: 
      var $1873=$a2352;
      var $1874=$regs;
      var $arrayidx2410=(($1874+((($1873)*(12))&-1))|0);
      var $tt2411=(($arrayidx2410+8)|0);
      HEAP32[(($tt2411)>>2)]=2;
      var $1875=$a2352;
      var $1876=$regs;
      var $arrayidx2412=(($1876+((($1875)*(12))&-1))|0);
      var $value2413=(($arrayidx2412)|0);
      var $i2414=$value2413;
      HEAP32[(($i2414)>>2)]=1;
      label = 463; break;
    case 463: 
      label = 467; break;
    case 464: 
      label = 465; break;
    case 465: 
      var $1877=$a2352;
      var $1878=$regs;
      var $arrayidx2418=(($1878+((($1877)*(12))&-1))|0);
      var $tt2419=(($arrayidx2418+8)|0);
      HEAP32[(($tt2419)>>2)]=0;
      var $1879=$a2352;
      var $1880=$regs;
      var $arrayidx2420=(($1880+((($1879)*(12))&-1))|0);
      var $value2421=(($arrayidx2420)|0);
      var $i2422=$value2421;
      HEAP32[(($i2422)>>2)]=1;
      label = 466; break;
    case 466: 
      label = 467; break;
    case 467: 
      label = 468; break;
    case 468: 
      label = 490; break;
    case 469: 
      label = 470; break;
    case 470: 
      var $1881=$a2352;
      var $1882=$regs;
      var $arrayidx2428=(($1882+((($1881)*(12))&-1))|0);
      var $value2429=(($arrayidx2428)|0);
      var $f2430=$value2429;
      var $1883=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2430)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2430)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $1884=$a2352;
      var $add2431=((($1884)+(1))|0);
      var $1885=$regs;
      var $arrayidx2432=(($1885+((($add2431)*(12))&-1))|0);
      var $value2433=(($arrayidx2432)|0);
      var $i2434=$value2433;
      var $1886=HEAP32[(($i2434)>>2)];
      var $conv2435=(($1886)|(0));
      var $cmp2436=$1883 < $conv2435;
      if ($cmp2436) { label = 471; break; } else { label = 474; break; }
    case 471: 
      label = 472; break;
    case 472: 
      var $1887=$a2352;
      var $1888=$regs;
      var $arrayidx2440=(($1888+((($1887)*(12))&-1))|0);
      var $tt2441=(($arrayidx2440+8)|0);
      HEAP32[(($tt2441)>>2)]=2;
      var $1889=$a2352;
      var $1890=$regs;
      var $arrayidx2442=(($1890+((($1889)*(12))&-1))|0);
      var $value2443=(($arrayidx2442)|0);
      var $i2444=$value2443;
      HEAP32[(($i2444)>>2)]=1;
      label = 473; break;
    case 473: 
      label = 477; break;
    case 474: 
      label = 475; break;
    case 475: 
      var $1891=$a2352;
      var $1892=$regs;
      var $arrayidx2448=(($1892+((($1891)*(12))&-1))|0);
      var $tt2449=(($arrayidx2448+8)|0);
      HEAP32[(($tt2449)>>2)]=0;
      var $1893=$a2352;
      var $1894=$regs;
      var $arrayidx2450=(($1894+((($1893)*(12))&-1))|0);
      var $value2451=(($arrayidx2450)|0);
      var $i2452=$value2451;
      HEAP32[(($i2452)>>2)]=1;
      label = 476; break;
    case 476: 
      label = 477; break;
    case 477: 
      label = 478; break;
    case 478: 
      label = 490; break;
    case 479: 
      label = 480; break;
    case 480: 
      var $1895=$a2352;
      var $1896=$regs;
      var $arrayidx2458=(($1896+((($1895)*(12))&-1))|0);
      var $value2459=(($arrayidx2458)|0);
      var $f2460=$value2459;
      var $1897=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2460)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2460)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $1898=$a2352;
      var $add2461=((($1898)+(1))|0);
      var $1899=$regs;
      var $arrayidx2462=(($1899+((($add2461)*(12))&-1))|0);
      var $value2463=(($arrayidx2462)|0);
      var $f2464=$value2463;
      var $1900=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2464)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2464)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp2465=$1897 < $1900;
      if ($cmp2465) { label = 481; break; } else { label = 484; break; }
    case 481: 
      label = 482; break;
    case 482: 
      var $1901=$a2352;
      var $1902=$regs;
      var $arrayidx2469=(($1902+((($1901)*(12))&-1))|0);
      var $tt2470=(($arrayidx2469+8)|0);
      HEAP32[(($tt2470)>>2)]=2;
      var $1903=$a2352;
      var $1904=$regs;
      var $arrayidx2471=(($1904+((($1903)*(12))&-1))|0);
      var $value2472=(($arrayidx2471)|0);
      var $i2473=$value2472;
      HEAP32[(($i2473)>>2)]=1;
      label = 483; break;
    case 483: 
      label = 487; break;
    case 484: 
      label = 485; break;
    case 485: 
      var $1905=$a2352;
      var $1906=$regs;
      var $arrayidx2477=(($1906+((($1905)*(12))&-1))|0);
      var $tt2478=(($arrayidx2477+8)|0);
      HEAP32[(($tt2478)>>2)]=0;
      var $1907=$a2352;
      var $1908=$regs;
      var $arrayidx2479=(($1908+((($1907)*(12))&-1))|0);
      var $value2480=(($arrayidx2479)|0);
      var $i2481=$value2480;
      HEAP32[(($i2481)>>2)]=1;
      label = 486; break;
    case 486: 
      label = 487; break;
    case 487: 
      label = 488; break;
    case 488: 
      label = 490; break;
    case 489: 
      label = 79; break;
    case 490: 
      label = 491; break;
    case 491: 
      var $1909=$pc;
      var $incdec_ptr2488=(($1909+4)|0);
      $pc=$incdec_ptr2488;
      var $1910=HEAP32[(($incdec_ptr2488)>>2)];
      $i=$1910;
      var $1911=$i;
      var $and2489=$1911 & 127;
      var $arrayidx2490=((77368+($and2489<<2))|0);
      var $1912=HEAP32[(($arrayidx2490)>>2)];
      var $indirect_goto_dest = $1912;label = 709; break;
    case 492: 
      label = 493; break;
    case 493: 
      var $1913=$i;
      var $shr2494=$1913 >>> 23;
      var $and2495=$shr2494 & 511;
      $a2493=$and2495;
      var $1914=$a2493;
      var $1915=$regs;
      var $arrayidx2496=(($1915+((($1914)*(12))&-1))|0);
      var $tt2497=(($arrayidx2496+8)|0);
      var $1916=HEAP32[(($tt2497)>>2)];
      var $conv2498=(($1916) & 65535);
      var $conv2499=(($conv2498)&(65535));
      var $shl2500=$conv2499 << 8;
      var $1917=$a2493;
      var $add2501=((($1917)+(1))|0);
      var $1918=$regs;
      var $arrayidx2502=(($1918+((($add2501)*(12))&-1))|0);
      var $tt2503=(($arrayidx2502+8)|0);
      var $1919=HEAP32[(($tt2503)>>2)];
      var $conv2504=(($1919) & 65535);
      var $conv2505=(($conv2504)&(65535));
      var $and2506=$conv2505 & 255;
      var $or2507=$shl2500 | $and2506;
      if ((($or2507)|(0))==771) {
        label = 494; break;
      }
      else if ((($or2507)|(0))==774) {
        label = 504; break;
      }
      else if ((($or2507)|(0))==1539) {
        label = 514; break;
      }
      else if ((($or2507)|(0))==1542) {
        label = 524; break;
      }
      else {
      label = 534; break;
      }
    case 494: 
      label = 495; break;
    case 495: 
      var $1920=$a2493;
      var $1921=$regs;
      var $arrayidx2510=(($1921+((($1920)*(12))&-1))|0);
      var $value2511=(($arrayidx2510)|0);
      var $i2512=$value2511;
      var $1922=HEAP32[(($i2512)>>2)];
      var $1923=$a2493;
      var $add2513=((($1923)+(1))|0);
      var $1924=$regs;
      var $arrayidx2514=(($1924+((($add2513)*(12))&-1))|0);
      var $value2515=(($arrayidx2514)|0);
      var $i2516=$value2515;
      var $1925=HEAP32[(($i2516)>>2)];
      var $cmp2517=(($1922)|(0)) <= (($1925)|(0));
      if ($cmp2517) { label = 496; break; } else { label = 499; break; }
    case 496: 
      label = 497; break;
    case 497: 
      var $1926=$a2493;
      var $1927=$regs;
      var $arrayidx2521=(($1927+((($1926)*(12))&-1))|0);
      var $tt2522=(($arrayidx2521+8)|0);
      HEAP32[(($tt2522)>>2)]=2;
      var $1928=$a2493;
      var $1929=$regs;
      var $arrayidx2523=(($1929+((($1928)*(12))&-1))|0);
      var $value2524=(($arrayidx2523)|0);
      var $i2525=$value2524;
      HEAP32[(($i2525)>>2)]=1;
      label = 498; break;
    case 498: 
      label = 502; break;
    case 499: 
      label = 500; break;
    case 500: 
      var $1930=$a2493;
      var $1931=$regs;
      var $arrayidx2529=(($1931+((($1930)*(12))&-1))|0);
      var $tt2530=(($arrayidx2529+8)|0);
      HEAP32[(($tt2530)>>2)]=0;
      var $1932=$a2493;
      var $1933=$regs;
      var $arrayidx2531=(($1933+((($1932)*(12))&-1))|0);
      var $value2532=(($arrayidx2531)|0);
      var $i2533=$value2532;
      HEAP32[(($i2533)>>2)]=1;
      label = 501; break;
    case 501: 
      label = 502; break;
    case 502: 
      label = 503; break;
    case 503: 
      label = 535; break;
    case 504: 
      label = 505; break;
    case 505: 
      var $1934=$a2493;
      var $1935=$regs;
      var $arrayidx2539=(($1935+((($1934)*(12))&-1))|0);
      var $value2540=(($arrayidx2539)|0);
      var $i2541=$value2540;
      var $1936=HEAP32[(($i2541)>>2)];
      var $conv2542=(($1936)|(0));
      var $1937=$a2493;
      var $add2543=((($1937)+(1))|0);
      var $1938=$regs;
      var $arrayidx2544=(($1938+((($add2543)*(12))&-1))|0);
      var $value2545=(($arrayidx2544)|0);
      var $f2546=$value2545;
      var $1939=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2546)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2546)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp2547=$conv2542 <= $1939;
      if ($cmp2547) { label = 506; break; } else { label = 509; break; }
    case 506: 
      label = 507; break;
    case 507: 
      var $1940=$a2493;
      var $1941=$regs;
      var $arrayidx2551=(($1941+((($1940)*(12))&-1))|0);
      var $tt2552=(($arrayidx2551+8)|0);
      HEAP32[(($tt2552)>>2)]=2;
      var $1942=$a2493;
      var $1943=$regs;
      var $arrayidx2553=(($1943+((($1942)*(12))&-1))|0);
      var $value2554=(($arrayidx2553)|0);
      var $i2555=$value2554;
      HEAP32[(($i2555)>>2)]=1;
      label = 508; break;
    case 508: 
      label = 512; break;
    case 509: 
      label = 510; break;
    case 510: 
      var $1944=$a2493;
      var $1945=$regs;
      var $arrayidx2559=(($1945+((($1944)*(12))&-1))|0);
      var $tt2560=(($arrayidx2559+8)|0);
      HEAP32[(($tt2560)>>2)]=0;
      var $1946=$a2493;
      var $1947=$regs;
      var $arrayidx2561=(($1947+((($1946)*(12))&-1))|0);
      var $value2562=(($arrayidx2561)|0);
      var $i2563=$value2562;
      HEAP32[(($i2563)>>2)]=1;
      label = 511; break;
    case 511: 
      label = 512; break;
    case 512: 
      label = 513; break;
    case 513: 
      label = 535; break;
    case 514: 
      label = 515; break;
    case 515: 
      var $1948=$a2493;
      var $1949=$regs;
      var $arrayidx2569=(($1949+((($1948)*(12))&-1))|0);
      var $value2570=(($arrayidx2569)|0);
      var $f2571=$value2570;
      var $1950=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2571)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2571)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $1951=$a2493;
      var $add2572=((($1951)+(1))|0);
      var $1952=$regs;
      var $arrayidx2573=(($1952+((($add2572)*(12))&-1))|0);
      var $value2574=(($arrayidx2573)|0);
      var $i2575=$value2574;
      var $1953=HEAP32[(($i2575)>>2)];
      var $conv2576=(($1953)|(0));
      var $cmp2577=$1950 <= $conv2576;
      if ($cmp2577) { label = 516; break; } else { label = 519; break; }
    case 516: 
      label = 517; break;
    case 517: 
      var $1954=$a2493;
      var $1955=$regs;
      var $arrayidx2581=(($1955+((($1954)*(12))&-1))|0);
      var $tt2582=(($arrayidx2581+8)|0);
      HEAP32[(($tt2582)>>2)]=2;
      var $1956=$a2493;
      var $1957=$regs;
      var $arrayidx2583=(($1957+((($1956)*(12))&-1))|0);
      var $value2584=(($arrayidx2583)|0);
      var $i2585=$value2584;
      HEAP32[(($i2585)>>2)]=1;
      label = 518; break;
    case 518: 
      label = 522; break;
    case 519: 
      label = 520; break;
    case 520: 
      var $1958=$a2493;
      var $1959=$regs;
      var $arrayidx2589=(($1959+((($1958)*(12))&-1))|0);
      var $tt2590=(($arrayidx2589+8)|0);
      HEAP32[(($tt2590)>>2)]=0;
      var $1960=$a2493;
      var $1961=$regs;
      var $arrayidx2591=(($1961+((($1960)*(12))&-1))|0);
      var $value2592=(($arrayidx2591)|0);
      var $i2593=$value2592;
      HEAP32[(($i2593)>>2)]=1;
      label = 521; break;
    case 521: 
      label = 522; break;
    case 522: 
      label = 523; break;
    case 523: 
      label = 535; break;
    case 524: 
      label = 525; break;
    case 525: 
      var $1962=$a2493;
      var $1963=$regs;
      var $arrayidx2599=(($1963+((($1962)*(12))&-1))|0);
      var $value2600=(($arrayidx2599)|0);
      var $f2601=$value2600;
      var $1964=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2601)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2601)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $1965=$a2493;
      var $add2602=((($1965)+(1))|0);
      var $1966=$regs;
      var $arrayidx2603=(($1966+((($add2602)*(12))&-1))|0);
      var $value2604=(($arrayidx2603)|0);
      var $f2605=$value2604;
      var $1967=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2605)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2605)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp2606=$1964 <= $1967;
      if ($cmp2606) { label = 526; break; } else { label = 529; break; }
    case 526: 
      label = 527; break;
    case 527: 
      var $1968=$a2493;
      var $1969=$regs;
      var $arrayidx2610=(($1969+((($1968)*(12))&-1))|0);
      var $tt2611=(($arrayidx2610+8)|0);
      HEAP32[(($tt2611)>>2)]=2;
      var $1970=$a2493;
      var $1971=$regs;
      var $arrayidx2612=(($1971+((($1970)*(12))&-1))|0);
      var $value2613=(($arrayidx2612)|0);
      var $i2614=$value2613;
      HEAP32[(($i2614)>>2)]=1;
      label = 528; break;
    case 528: 
      label = 532; break;
    case 529: 
      label = 530; break;
    case 530: 
      var $1972=$a2493;
      var $1973=$regs;
      var $arrayidx2618=(($1973+((($1972)*(12))&-1))|0);
      var $tt2619=(($arrayidx2618+8)|0);
      HEAP32[(($tt2619)>>2)]=0;
      var $1974=$a2493;
      var $1975=$regs;
      var $arrayidx2620=(($1975+((($1974)*(12))&-1))|0);
      var $value2621=(($arrayidx2620)|0);
      var $i2622=$value2621;
      HEAP32[(($i2622)>>2)]=1;
      label = 531; break;
    case 531: 
      label = 532; break;
    case 532: 
      label = 533; break;
    case 533: 
      label = 535; break;
    case 534: 
      label = 79; break;
    case 535: 
      label = 536; break;
    case 536: 
      var $1976=$pc;
      var $incdec_ptr2629=(($1976+4)|0);
      $pc=$incdec_ptr2629;
      var $1977=HEAP32[(($incdec_ptr2629)>>2)];
      $i=$1977;
      var $1978=$i;
      var $and2630=$1978 & 127;
      var $arrayidx2631=((77368+($and2630<<2))|0);
      var $1979=HEAP32[(($arrayidx2631)>>2)];
      var $indirect_goto_dest = $1979;label = 709; break;
    case 537: 
      label = 538; break;
    case 538: 
      var $1980=$i;
      var $shr2635=$1980 >>> 23;
      var $and2636=$shr2635 & 511;
      $a2634=$and2636;
      var $1981=$a2634;
      var $1982=$regs;
      var $arrayidx2637=(($1982+((($1981)*(12))&-1))|0);
      var $tt2638=(($arrayidx2637+8)|0);
      var $1983=HEAP32[(($tt2638)>>2)];
      var $conv2639=(($1983) & 65535);
      var $conv2640=(($conv2639)&(65535));
      var $shl2641=$conv2640 << 8;
      var $1984=$a2634;
      var $add2642=((($1984)+(1))|0);
      var $1985=$regs;
      var $arrayidx2643=(($1985+((($add2642)*(12))&-1))|0);
      var $tt2644=(($arrayidx2643+8)|0);
      var $1986=HEAP32[(($tt2644)>>2)];
      var $conv2645=(($1986) & 65535);
      var $conv2646=(($conv2645)&(65535));
      var $and2647=$conv2646 & 255;
      var $or2648=$shl2641 | $and2647;
      if ((($or2648)|(0))==771) {
        label = 539; break;
      }
      else if ((($or2648)|(0))==774) {
        label = 549; break;
      }
      else if ((($or2648)|(0))==1539) {
        label = 559; break;
      }
      else if ((($or2648)|(0))==1542) {
        label = 569; break;
      }
      else {
      label = 579; break;
      }
    case 539: 
      label = 540; break;
    case 540: 
      var $1987=$a2634;
      var $1988=$regs;
      var $arrayidx2651=(($1988+((($1987)*(12))&-1))|0);
      var $value2652=(($arrayidx2651)|0);
      var $i2653=$value2652;
      var $1989=HEAP32[(($i2653)>>2)];
      var $1990=$a2634;
      var $add2654=((($1990)+(1))|0);
      var $1991=$regs;
      var $arrayidx2655=(($1991+((($add2654)*(12))&-1))|0);
      var $value2656=(($arrayidx2655)|0);
      var $i2657=$value2656;
      var $1992=HEAP32[(($i2657)>>2)];
      var $cmp2658=(($1989)|(0)) > (($1992)|(0));
      if ($cmp2658) { label = 541; break; } else { label = 544; break; }
    case 541: 
      label = 542; break;
    case 542: 
      var $1993=$a2634;
      var $1994=$regs;
      var $arrayidx2662=(($1994+((($1993)*(12))&-1))|0);
      var $tt2663=(($arrayidx2662+8)|0);
      HEAP32[(($tt2663)>>2)]=2;
      var $1995=$a2634;
      var $1996=$regs;
      var $arrayidx2664=(($1996+((($1995)*(12))&-1))|0);
      var $value2665=(($arrayidx2664)|0);
      var $i2666=$value2665;
      HEAP32[(($i2666)>>2)]=1;
      label = 543; break;
    case 543: 
      label = 547; break;
    case 544: 
      label = 545; break;
    case 545: 
      var $1997=$a2634;
      var $1998=$regs;
      var $arrayidx2670=(($1998+((($1997)*(12))&-1))|0);
      var $tt2671=(($arrayidx2670+8)|0);
      HEAP32[(($tt2671)>>2)]=0;
      var $1999=$a2634;
      var $2000=$regs;
      var $arrayidx2672=(($2000+((($1999)*(12))&-1))|0);
      var $value2673=(($arrayidx2672)|0);
      var $i2674=$value2673;
      HEAP32[(($i2674)>>2)]=1;
      label = 546; break;
    case 546: 
      label = 547; break;
    case 547: 
      label = 548; break;
    case 548: 
      label = 580; break;
    case 549: 
      label = 550; break;
    case 550: 
      var $2001=$a2634;
      var $2002=$regs;
      var $arrayidx2680=(($2002+((($2001)*(12))&-1))|0);
      var $value2681=(($arrayidx2680)|0);
      var $i2682=$value2681;
      var $2003=HEAP32[(($i2682)>>2)];
      var $conv2683=(($2003)|(0));
      var $2004=$a2634;
      var $add2684=((($2004)+(1))|0);
      var $2005=$regs;
      var $arrayidx2685=(($2005+((($add2684)*(12))&-1))|0);
      var $value2686=(($arrayidx2685)|0);
      var $f2687=$value2686;
      var $2006=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2687)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2687)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp2688=$conv2683 > $2006;
      if ($cmp2688) { label = 551; break; } else { label = 554; break; }
    case 551: 
      label = 552; break;
    case 552: 
      var $2007=$a2634;
      var $2008=$regs;
      var $arrayidx2692=(($2008+((($2007)*(12))&-1))|0);
      var $tt2693=(($arrayidx2692+8)|0);
      HEAP32[(($tt2693)>>2)]=2;
      var $2009=$a2634;
      var $2010=$regs;
      var $arrayidx2694=(($2010+((($2009)*(12))&-1))|0);
      var $value2695=(($arrayidx2694)|0);
      var $i2696=$value2695;
      HEAP32[(($i2696)>>2)]=1;
      label = 553; break;
    case 553: 
      label = 557; break;
    case 554: 
      label = 555; break;
    case 555: 
      var $2011=$a2634;
      var $2012=$regs;
      var $arrayidx2700=(($2012+((($2011)*(12))&-1))|0);
      var $tt2701=(($arrayidx2700+8)|0);
      HEAP32[(($tt2701)>>2)]=0;
      var $2013=$a2634;
      var $2014=$regs;
      var $arrayidx2702=(($2014+((($2013)*(12))&-1))|0);
      var $value2703=(($arrayidx2702)|0);
      var $i2704=$value2703;
      HEAP32[(($i2704)>>2)]=1;
      label = 556; break;
    case 556: 
      label = 557; break;
    case 557: 
      label = 558; break;
    case 558: 
      label = 580; break;
    case 559: 
      label = 560; break;
    case 560: 
      var $2015=$a2634;
      var $2016=$regs;
      var $arrayidx2710=(($2016+((($2015)*(12))&-1))|0);
      var $value2711=(($arrayidx2710)|0);
      var $f2712=$value2711;
      var $2017=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2712)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2712)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $2018=$a2634;
      var $add2713=((($2018)+(1))|0);
      var $2019=$regs;
      var $arrayidx2714=(($2019+((($add2713)*(12))&-1))|0);
      var $value2715=(($arrayidx2714)|0);
      var $i2716=$value2715;
      var $2020=HEAP32[(($i2716)>>2)];
      var $conv2717=(($2020)|(0));
      var $cmp2718=$2017 > $conv2717;
      if ($cmp2718) { label = 561; break; } else { label = 564; break; }
    case 561: 
      label = 562; break;
    case 562: 
      var $2021=$a2634;
      var $2022=$regs;
      var $arrayidx2722=(($2022+((($2021)*(12))&-1))|0);
      var $tt2723=(($arrayidx2722+8)|0);
      HEAP32[(($tt2723)>>2)]=2;
      var $2023=$a2634;
      var $2024=$regs;
      var $arrayidx2724=(($2024+((($2023)*(12))&-1))|0);
      var $value2725=(($arrayidx2724)|0);
      var $i2726=$value2725;
      HEAP32[(($i2726)>>2)]=1;
      label = 563; break;
    case 563: 
      label = 567; break;
    case 564: 
      label = 565; break;
    case 565: 
      var $2025=$a2634;
      var $2026=$regs;
      var $arrayidx2730=(($2026+((($2025)*(12))&-1))|0);
      var $tt2731=(($arrayidx2730+8)|0);
      HEAP32[(($tt2731)>>2)]=0;
      var $2027=$a2634;
      var $2028=$regs;
      var $arrayidx2732=(($2028+((($2027)*(12))&-1))|0);
      var $value2733=(($arrayidx2732)|0);
      var $i2734=$value2733;
      HEAP32[(($i2734)>>2)]=1;
      label = 566; break;
    case 566: 
      label = 567; break;
    case 567: 
      label = 568; break;
    case 568: 
      label = 580; break;
    case 569: 
      label = 570; break;
    case 570: 
      var $2029=$a2634;
      var $2030=$regs;
      var $arrayidx2740=(($2030+((($2029)*(12))&-1))|0);
      var $value2741=(($arrayidx2740)|0);
      var $f2742=$value2741;
      var $2031=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2742)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2742)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $2032=$a2634;
      var $add2743=((($2032)+(1))|0);
      var $2033=$regs;
      var $arrayidx2744=(($2033+((($add2743)*(12))&-1))|0);
      var $value2745=(($arrayidx2744)|0);
      var $f2746=$value2745;
      var $2034=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2746)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2746)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp2747=$2031 > $2034;
      if ($cmp2747) { label = 571; break; } else { label = 574; break; }
    case 571: 
      label = 572; break;
    case 572: 
      var $2035=$a2634;
      var $2036=$regs;
      var $arrayidx2751=(($2036+((($2035)*(12))&-1))|0);
      var $tt2752=(($arrayidx2751+8)|0);
      HEAP32[(($tt2752)>>2)]=2;
      var $2037=$a2634;
      var $2038=$regs;
      var $arrayidx2753=(($2038+((($2037)*(12))&-1))|0);
      var $value2754=(($arrayidx2753)|0);
      var $i2755=$value2754;
      HEAP32[(($i2755)>>2)]=1;
      label = 573; break;
    case 573: 
      label = 577; break;
    case 574: 
      label = 575; break;
    case 575: 
      var $2039=$a2634;
      var $2040=$regs;
      var $arrayidx2759=(($2040+((($2039)*(12))&-1))|0);
      var $tt2760=(($arrayidx2759+8)|0);
      HEAP32[(($tt2760)>>2)]=0;
      var $2041=$a2634;
      var $2042=$regs;
      var $arrayidx2761=(($2042+((($2041)*(12))&-1))|0);
      var $value2762=(($arrayidx2761)|0);
      var $i2763=$value2762;
      HEAP32[(($i2763)>>2)]=1;
      label = 576; break;
    case 576: 
      label = 577; break;
    case 577: 
      label = 578; break;
    case 578: 
      label = 580; break;
    case 579: 
      label = 79; break;
    case 580: 
      label = 581; break;
    case 581: 
      var $2043=$pc;
      var $incdec_ptr2770=(($2043+4)|0);
      $pc=$incdec_ptr2770;
      var $2044=HEAP32[(($incdec_ptr2770)>>2)];
      $i=$2044;
      var $2045=$i;
      var $and2771=$2045 & 127;
      var $arrayidx2772=((77368+($and2771<<2))|0);
      var $2046=HEAP32[(($arrayidx2772)>>2)];
      var $indirect_goto_dest = $2046;label = 709; break;
    case 582: 
      label = 583; break;
    case 583: 
      var $2047=$i;
      var $shr2776=$2047 >>> 23;
      var $and2777=$shr2776 & 511;
      $a2775=$and2777;
      var $2048=$a2775;
      var $2049=$regs;
      var $arrayidx2778=(($2049+((($2048)*(12))&-1))|0);
      var $tt2779=(($arrayidx2778+8)|0);
      var $2050=HEAP32[(($tt2779)>>2)];
      var $conv2780=(($2050) & 65535);
      var $conv2781=(($conv2780)&(65535));
      var $shl2782=$conv2781 << 8;
      var $2051=$a2775;
      var $add2783=((($2051)+(1))|0);
      var $2052=$regs;
      var $arrayidx2784=(($2052+((($add2783)*(12))&-1))|0);
      var $tt2785=(($arrayidx2784+8)|0);
      var $2053=HEAP32[(($tt2785)>>2)];
      var $conv2786=(($2053) & 65535);
      var $conv2787=(($conv2786)&(65535));
      var $and2788=$conv2787 & 255;
      var $or2789=$shl2782 | $and2788;
      if ((($or2789)|(0))==771) {
        label = 584; break;
      }
      else if ((($or2789)|(0))==774) {
        label = 594; break;
      }
      else if ((($or2789)|(0))==1539) {
        label = 604; break;
      }
      else if ((($or2789)|(0))==1542) {
        label = 614; break;
      }
      else {
      label = 624; break;
      }
    case 584: 
      label = 585; break;
    case 585: 
      var $2054=$a2775;
      var $2055=$regs;
      var $arrayidx2792=(($2055+((($2054)*(12))&-1))|0);
      var $value2793=(($arrayidx2792)|0);
      var $i2794=$value2793;
      var $2056=HEAP32[(($i2794)>>2)];
      var $2057=$a2775;
      var $add2795=((($2057)+(1))|0);
      var $2058=$regs;
      var $arrayidx2796=(($2058+((($add2795)*(12))&-1))|0);
      var $value2797=(($arrayidx2796)|0);
      var $i2798=$value2797;
      var $2059=HEAP32[(($i2798)>>2)];
      var $cmp2799=(($2056)|(0)) >= (($2059)|(0));
      if ($cmp2799) { label = 586; break; } else { label = 589; break; }
    case 586: 
      label = 587; break;
    case 587: 
      var $2060=$a2775;
      var $2061=$regs;
      var $arrayidx2803=(($2061+((($2060)*(12))&-1))|0);
      var $tt2804=(($arrayidx2803+8)|0);
      HEAP32[(($tt2804)>>2)]=2;
      var $2062=$a2775;
      var $2063=$regs;
      var $arrayidx2805=(($2063+((($2062)*(12))&-1))|0);
      var $value2806=(($arrayidx2805)|0);
      var $i2807=$value2806;
      HEAP32[(($i2807)>>2)]=1;
      label = 588; break;
    case 588: 
      label = 592; break;
    case 589: 
      label = 590; break;
    case 590: 
      var $2064=$a2775;
      var $2065=$regs;
      var $arrayidx2811=(($2065+((($2064)*(12))&-1))|0);
      var $tt2812=(($arrayidx2811+8)|0);
      HEAP32[(($tt2812)>>2)]=0;
      var $2066=$a2775;
      var $2067=$regs;
      var $arrayidx2813=(($2067+((($2066)*(12))&-1))|0);
      var $value2814=(($arrayidx2813)|0);
      var $i2815=$value2814;
      HEAP32[(($i2815)>>2)]=1;
      label = 591; break;
    case 591: 
      label = 592; break;
    case 592: 
      label = 593; break;
    case 593: 
      label = 625; break;
    case 594: 
      label = 595; break;
    case 595: 
      var $2068=$a2775;
      var $2069=$regs;
      var $arrayidx2821=(($2069+((($2068)*(12))&-1))|0);
      var $value2822=(($arrayidx2821)|0);
      var $i2823=$value2822;
      var $2070=HEAP32[(($i2823)>>2)];
      var $conv2824=(($2070)|(0));
      var $2071=$a2775;
      var $add2825=((($2071)+(1))|0);
      var $2072=$regs;
      var $arrayidx2826=(($2072+((($add2825)*(12))&-1))|0);
      var $value2827=(($arrayidx2826)|0);
      var $f2828=$value2827;
      var $2073=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2828)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2828)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp2829=$conv2824 >= $2073;
      if ($cmp2829) { label = 596; break; } else { label = 599; break; }
    case 596: 
      label = 597; break;
    case 597: 
      var $2074=$a2775;
      var $2075=$regs;
      var $arrayidx2833=(($2075+((($2074)*(12))&-1))|0);
      var $tt2834=(($arrayidx2833+8)|0);
      HEAP32[(($tt2834)>>2)]=2;
      var $2076=$a2775;
      var $2077=$regs;
      var $arrayidx2835=(($2077+((($2076)*(12))&-1))|0);
      var $value2836=(($arrayidx2835)|0);
      var $i2837=$value2836;
      HEAP32[(($i2837)>>2)]=1;
      label = 598; break;
    case 598: 
      label = 602; break;
    case 599: 
      label = 600; break;
    case 600: 
      var $2078=$a2775;
      var $2079=$regs;
      var $arrayidx2841=(($2079+((($2078)*(12))&-1))|0);
      var $tt2842=(($arrayidx2841+8)|0);
      HEAP32[(($tt2842)>>2)]=0;
      var $2080=$a2775;
      var $2081=$regs;
      var $arrayidx2843=(($2081+((($2080)*(12))&-1))|0);
      var $value2844=(($arrayidx2843)|0);
      var $i2845=$value2844;
      HEAP32[(($i2845)>>2)]=1;
      label = 601; break;
    case 601: 
      label = 602; break;
    case 602: 
      label = 603; break;
    case 603: 
      label = 625; break;
    case 604: 
      label = 605; break;
    case 605: 
      var $2082=$a2775;
      var $2083=$regs;
      var $arrayidx2851=(($2083+((($2082)*(12))&-1))|0);
      var $value2852=(($arrayidx2851)|0);
      var $f2853=$value2852;
      var $2084=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2853)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2853)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $2085=$a2775;
      var $add2854=((($2085)+(1))|0);
      var $2086=$regs;
      var $arrayidx2855=(($2086+((($add2854)*(12))&-1))|0);
      var $value2856=(($arrayidx2855)|0);
      var $i2857=$value2856;
      var $2087=HEAP32[(($i2857)>>2)];
      var $conv2858=(($2087)|(0));
      var $cmp2859=$2084 >= $conv2858;
      if ($cmp2859) { label = 606; break; } else { label = 609; break; }
    case 606: 
      label = 607; break;
    case 607: 
      var $2088=$a2775;
      var $2089=$regs;
      var $arrayidx2863=(($2089+((($2088)*(12))&-1))|0);
      var $tt2864=(($arrayidx2863+8)|0);
      HEAP32[(($tt2864)>>2)]=2;
      var $2090=$a2775;
      var $2091=$regs;
      var $arrayidx2865=(($2091+((($2090)*(12))&-1))|0);
      var $value2866=(($arrayidx2865)|0);
      var $i2867=$value2866;
      HEAP32[(($i2867)>>2)]=1;
      label = 608; break;
    case 608: 
      label = 612; break;
    case 609: 
      label = 610; break;
    case 610: 
      var $2092=$a2775;
      var $2093=$regs;
      var $arrayidx2871=(($2093+((($2092)*(12))&-1))|0);
      var $tt2872=(($arrayidx2871+8)|0);
      HEAP32[(($tt2872)>>2)]=0;
      var $2094=$a2775;
      var $2095=$regs;
      var $arrayidx2873=(($2095+((($2094)*(12))&-1))|0);
      var $value2874=(($arrayidx2873)|0);
      var $i2875=$value2874;
      HEAP32[(($i2875)>>2)]=1;
      label = 611; break;
    case 611: 
      label = 612; break;
    case 612: 
      label = 613; break;
    case 613: 
      label = 625; break;
    case 614: 
      label = 615; break;
    case 615: 
      var $2096=$a2775;
      var $2097=$regs;
      var $arrayidx2881=(($2097+((($2096)*(12))&-1))|0);
      var $value2882=(($arrayidx2881)|0);
      var $f2883=$value2882;
      var $2098=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2883)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2883)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $2099=$a2775;
      var $add2884=((($2099)+(1))|0);
      var $2100=$regs;
      var $arrayidx2885=(($2100+((($add2884)*(12))&-1))|0);
      var $value2886=(($arrayidx2885)|0);
      var $f2887=$value2886;
      var $2101=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2887)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2887)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp2888=$2098 >= $2101;
      if ($cmp2888) { label = 616; break; } else { label = 619; break; }
    case 616: 
      label = 617; break;
    case 617: 
      var $2102=$a2775;
      var $2103=$regs;
      var $arrayidx2892=(($2103+((($2102)*(12))&-1))|0);
      var $tt2893=(($arrayidx2892+8)|0);
      HEAP32[(($tt2893)>>2)]=2;
      var $2104=$a2775;
      var $2105=$regs;
      var $arrayidx2894=(($2105+((($2104)*(12))&-1))|0);
      var $value2895=(($arrayidx2894)|0);
      var $i2896=$value2895;
      HEAP32[(($i2896)>>2)]=1;
      label = 618; break;
    case 618: 
      label = 622; break;
    case 619: 
      label = 620; break;
    case 620: 
      var $2106=$a2775;
      var $2107=$regs;
      var $arrayidx2900=(($2107+((($2106)*(12))&-1))|0);
      var $tt2901=(($arrayidx2900+8)|0);
      HEAP32[(($tt2901)>>2)]=0;
      var $2108=$a2775;
      var $2109=$regs;
      var $arrayidx2902=(($2109+((($2108)*(12))&-1))|0);
      var $value2903=(($arrayidx2902)|0);
      var $i2904=$value2903;
      HEAP32[(($i2904)>>2)]=1;
      label = 621; break;
    case 621: 
      label = 622; break;
    case 622: 
      label = 623; break;
    case 623: 
      label = 625; break;
    case 624: 
      label = 79; break;
    case 625: 
      label = 626; break;
    case 626: 
      var $2110=$pc;
      var $incdec_ptr2911=(($2110+4)|0);
      $pc=$incdec_ptr2911;
      var $2111=HEAP32[(($incdec_ptr2911)>>2)];
      $i=$2111;
      var $2112=$i;
      var $and2912=$2112 & 127;
      var $arrayidx2913=((77368+($and2912<<2))|0);
      var $2113=HEAP32[(($arrayidx2913)>>2)];
      var $indirect_goto_dest = $2113;label = 709; break;
    case 627: 
      var $2114=$i;
      var $shr2914=$2114 >>> 23;
      var $and2915=$shr2914 & 511;
      var $2115=$regs;
      var $arrayidx2916=(($2115+((($and2915)*(12))&-1))|0);
      var $2116=$mrb_addr;
      var $2117=$i;
      var $shr2917=$2117 >>> 7;
      var $and2918=$shr2917 & 127;
      var $2118=$i;
      var $shr2919=$2118 >>> 14;
      var $and2920=$shr2919 & 511;
      var $2119=$regs;
      var $arrayidx2921=(($2119+((($and2920)*(12))&-1))|0);
      _mrb_ary_new_from_values($tmp2922, $2116, $and2918, $arrayidx2921);
      var $2120=$arrayidx2916;
      var $2121=$tmp2922;
      assert(12 % 1 === 0);HEAP32[(($2120)>>2)]=HEAP32[(($2121)>>2)];HEAP32[((($2120)+(4))>>2)]=HEAP32[((($2121)+(4))>>2)];HEAP32[((($2120)+(8))>>2)]=HEAP32[((($2121)+(8))>>2)];
      var $2122=$mrb_addr;
      var $2123=$ai;
      _mrb_gc_arena_restore($2122, $2123);
      var $2124=$pc;
      var $incdec_ptr2923=(($2124+4)|0);
      $pc=$incdec_ptr2923;
      var $2125=HEAP32[(($incdec_ptr2923)>>2)];
      $i=$2125;
      var $2126=$i;
      var $and2924=$2126 & 127;
      var $arrayidx2925=((77368+($and2924<<2))|0);
      var $2127=HEAP32[(($arrayidx2925)>>2)];
      var $indirect_goto_dest = $2127;label = 709; break;
    case 628: 
      var $2128=$mrb_addr;
      var $2129=$i;
      var $shr2926=$2129 >>> 23;
      var $and2927=$shr2926 & 511;
      var $2130=$regs;
      var $arrayidx2928=(($2130+((($and2927)*(12))&-1))|0);
      var $2131=$mrb_addr;
      var $2132=$i;
      var $shr2930=$2132 >>> 14;
      var $and2931=$shr2930 & 511;
      var $2133=$regs;
      var $arrayidx2932=(($2133+((($and2931)*(12))&-1))|0);
      _mrb_ary_splat($agg_tmp2929, $2131, $arrayidx2932);
      _mrb_ary_concat($2128, $arrayidx2928, $agg_tmp2929);
      var $2134=$mrb_addr;
      var $2135=$ai;
      _mrb_gc_arena_restore($2134, $2135);
      var $2136=$pc;
      var $incdec_ptr2933=(($2136+4)|0);
      $pc=$incdec_ptr2933;
      var $2137=HEAP32[(($incdec_ptr2933)>>2)];
      $i=$2137;
      var $2138=$i;
      var $and2934=$2138 & 127;
      var $arrayidx2935=((77368+($and2934<<2))|0);
      var $2139=HEAP32[(($arrayidx2935)>>2)];
      var $indirect_goto_dest = $2139;label = 709; break;
    case 629: 
      var $2140=$mrb_addr;
      var $2141=$i;
      var $shr2936=$2141 >>> 23;
      var $and2937=$shr2936 & 511;
      var $2142=$regs;
      var $arrayidx2938=(($2142+((($and2937)*(12))&-1))|0);
      var $2143=$i;
      var $shr2939=$2143 >>> 14;
      var $and2940=$shr2939 & 511;
      var $2144=$regs;
      var $arrayidx2941=(($2144+((($and2940)*(12))&-1))|0);
      _mrb_ary_push($2140, $arrayidx2938, $arrayidx2941);
      var $2145=$pc;
      var $incdec_ptr2942=(($2145+4)|0);
      $pc=$incdec_ptr2942;
      var $2146=HEAP32[(($incdec_ptr2942)>>2)];
      $i=$2146;
      var $2147=$i;
      var $and2943=$2147 & 127;
      var $arrayidx2944=((77368+($and2943<<2))|0);
      var $2148=HEAP32[(($arrayidx2944)>>2)];
      var $indirect_goto_dest = $2148;label = 709; break;
    case 630: 
      var $2149=$i;
      var $shr2947=$2149 >>> 23;
      var $and2948=$shr2947 & 511;
      $a2946=$and2948;
      var $2150=$i;
      var $shr2951=$2150 >>> 7;
      var $and2952=$shr2951 & 127;
      $c2950=$and2952;
      var $2151=$i;
      var $shr2955=$2151 >>> 14;
      var $and2956=$shr2955 & 511;
      var $2152=$regs;
      var $arrayidx2957=(($2152+((($and2956)*(12))&-1))|0);
      var $2153=$v2954;
      var $2154=$arrayidx2957;
      assert(12 % 1 === 0);HEAP32[(($2153)>>2)]=HEAP32[(($2154)>>2)];HEAP32[((($2153)+(4))>>2)]=HEAP32[((($2154)+(4))>>2)];HEAP32[((($2153)+(8))>>2)]=HEAP32[((($2154)+(8))>>2)];
      var $tt2958=(($v2954+8)|0);
      var $2155=HEAP32[(($tt2958)>>2)];
      var $cmp2959=(($2155)|(0))==14;
      if ($cmp2959) { label = 637; break; } else { label = 631; break; }
    case 631: 
      var $2156=$c2950;
      var $cmp2962=(($2156)|(0))==0;
      if ($cmp2962) { label = 632; break; } else { label = 633; break; }
    case 632: 
      var $2157=$i;
      var $shr2965=$2157 >>> 23;
      var $and2966=$shr2965 & 511;
      var $2158=$regs;
      var $arrayidx2967=(($2158+((($and2966)*(12))&-1))|0);
      var $2159=$arrayidx2967;
      var $2160=$v2954;
      assert(12 % 1 === 0);HEAP32[(($2159)>>2)]=HEAP32[(($2160)>>2)];HEAP32[((($2159)+(4))>>2)]=HEAP32[((($2160)+(4))>>2)];HEAP32[((($2159)+(8))>>2)]=HEAP32[((($2160)+(8))>>2)];
      label = 636; break;
    case 633: 
      label = 634; break;
    case 634: 
      var $2161=$a2946;
      var $2162=$regs;
      var $arrayidx2970=(($2162+((($2161)*(12))&-1))|0);
      var $tt2971=(($arrayidx2970+8)|0);
      HEAP32[(($tt2971)>>2)]=0;
      var $2163=$a2946;
      var $2164=$regs;
      var $arrayidx2972=(($2164+((($2163)*(12))&-1))|0);
      var $value2973=(($arrayidx2972)|0);
      var $i2974=$value2973;
      HEAP32[(($i2974)>>2)]=0;
      label = 635; break;
    case 635: 
      label = 636; break;
    case 636: 
      label = 638; break;
    case 637: 
      var $2165=$i;
      var $shr2978=$2165 >>> 23;
      var $and2979=$shr2978 & 511;
      var $2166=$regs;
      var $arrayidx2980=(($2166+((($and2979)*(12))&-1))|0);
      var $2167=$mrb_addr;
      var $2168=$c2950;
      _mrb_ary_ref($tmp2981, $2167, $v2954, $2168);
      var $2169=$arrayidx2980;
      var $2170=$tmp2981;
      assert(12 % 1 === 0);HEAP32[(($2169)>>2)]=HEAP32[(($2170)>>2)];HEAP32[((($2169)+(4))>>2)]=HEAP32[((($2170)+(4))>>2)];HEAP32[((($2169)+(8))>>2)]=HEAP32[((($2170)+(8))>>2)];
      label = 638; break;
    case 638: 
      var $2171=$pc;
      var $incdec_ptr2983=(($2171+4)|0);
      $pc=$incdec_ptr2983;
      var $2172=HEAP32[(($incdec_ptr2983)>>2)];
      $i=$2172;
      var $2173=$i;
      var $and2984=$2173 & 127;
      var $arrayidx2985=((77368+($and2984<<2))|0);
      var $2174=HEAP32[(($arrayidx2985)>>2)];
      var $indirect_goto_dest = $2174;label = 709; break;
    case 639: 
      var $2175=$mrb_addr;
      var $2176=$i;
      var $shr2986=$2176 >>> 14;
      var $and2987=$shr2986 & 511;
      var $2177=$regs;
      var $arrayidx2988=(($2177+((($and2987)*(12))&-1))|0);
      var $2178=$i;
      var $shr2989=$2178 >>> 7;
      var $and2990=$shr2989 & 127;
      var $2179=$i;
      var $shr2991=$2179 >>> 23;
      var $and2992=$shr2991 & 511;
      var $2180=$regs;
      var $arrayidx2993=(($2180+((($and2992)*(12))&-1))|0);
      _mrb_ary_set($2175, $arrayidx2988, $and2990, $arrayidx2993);
      var $2181=$pc;
      var $incdec_ptr2994=(($2181+4)|0);
      $pc=$incdec_ptr2994;
      var $2182=HEAP32[(($incdec_ptr2994)>>2)];
      $i=$2182;
      var $2183=$i;
      var $and2995=$2183 & 127;
      var $arrayidx2996=((77368+($and2995<<2))|0);
      var $2184=HEAP32[(($arrayidx2996)>>2)];
      var $indirect_goto_dest = $2184;label = 709; break;
    case 640: 
      var $2185=$i;
      var $shr2999=$2185 >>> 23;
      var $and3000=$shr2999 & 511;
      $a2998=$and3000;
      var $2186=$a2998;
      var $2187=$regs;
      var $arrayidx3003=(($2187+((($2186)*(12))&-1))|0);
      var $2188=$v3002;
      var $2189=$arrayidx3003;
      assert(12 % 1 === 0);HEAP32[(($2188)>>2)]=HEAP32[(($2189)>>2)];HEAP32[((($2188)+(4))>>2)]=HEAP32[((($2189)+(4))>>2)];HEAP32[((($2188)+(8))>>2)]=HEAP32[((($2189)+(8))>>2)];
      var $2190=$i;
      var $shr3005=$2190 >>> 14;
      var $and3006=$shr3005 & 511;
      $pre=$and3006;
      var $2191=$i;
      var $shr3008=$2191 >>> 7;
      var $and3009=$shr3008 & 127;
      $post=$and3009;
      var $tt3010=(($v3002+8)|0);
      var $2192=HEAP32[(($tt3010)>>2)];
      var $cmp3011=(($2192)|(0))==14;
      if ($cmp3011) { label = 647; break; } else { label = 641; break; }
    case 641: 
      var $2193=$a2998;
      var $inc3014=((($2193)+(1))|0);
      $a2998=$inc3014;
      var $2194=$regs;
      var $arrayidx3015=(($2194+((($2193)*(12))&-1))|0);
      var $2195=$mrb_addr;
      _mrb_ary_new_capa($tmp3016, $2195, 0);
      var $2196=$arrayidx3015;
      var $2197=$tmp3016;
      assert(12 % 1 === 0);HEAP32[(($2196)>>2)]=HEAP32[(($2197)>>2)];HEAP32[((($2196)+(4))>>2)]=HEAP32[((($2197)+(4))>>2)];HEAP32[((($2196)+(8))>>2)]=HEAP32[((($2197)+(8))>>2)];
      label = 642; break;
    case 642: 
      var $2198=$post;
      var $dec3018=((($2198)-(1))|0);
      $post=$dec3018;
      var $tobool3019=(($2198)|(0))!=0;
      if ($tobool3019) { label = 643; break; } else { label = 646; break; }
    case 643: 
      label = 644; break;
    case 644: 
      var $2199=$a2998;
      var $2200=$regs;
      var $arrayidx3022=(($2200+((($2199)*(12))&-1))|0);
      var $tt3023=(($arrayidx3022+8)|0);
      HEAP32[(($tt3023)>>2)]=0;
      var $2201=$a2998;
      var $2202=$regs;
      var $arrayidx3024=(($2202+((($2201)*(12))&-1))|0);
      var $value3025=(($arrayidx3024)|0);
      var $i3026=$value3025;
      HEAP32[(($i3026)>>2)]=0;
      label = 645; break;
    case 645: 
      var $2203=$a2998;
      var $inc3028=((($2203)+(1))|0);
      $a2998=$inc3028;
      label = 642; break;
    case 646: 
      label = 663; break;
    case 647: 
      var $value3033=(($v3002)|0);
      var $p3034=$value3033;
      var $2204=HEAP32[(($p3034)>>2)];
      var $2205=$2204;
      $ary3032=$2205;
      var $2206=$ary3032;
      var $len3037=(($2206+12)|0);
      var $2207=HEAP32[(($len3037)>>2)];
      $len3036=$2207;
      var $2208=$len3036;
      var $2209=$pre;
      var $2210=$post;
      var $add3040=((($2209)+($2210))|0);
      var $cmp3041=(($2208)|(0)) > (($add3040)|(0));
      if ($cmp3041) { label = 648; break; } else { label = 652; break; }
    case 648: 
      var $2211=$a2998;
      var $inc3044=((($2211)+(1))|0);
      $a2998=$inc3044;
      var $2212=$regs;
      var $arrayidx3045=(($2212+((($2211)*(12))&-1))|0);
      var $2213=$mrb_addr;
      var $2214=$len3036;
      var $2215=$pre;
      var $sub3046=((($2214)-($2215))|0);
      var $2216=$post;
      var $sub3047=((($sub3046)-($2216))|0);
      var $2217=$ary3032;
      var $ptr3048=(($2217+20)|0);
      var $2218=HEAP32[(($ptr3048)>>2)];
      var $2219=$pre;
      var $add_ptr3049=(($2218+((($2219)*(12))&-1))|0);
      _mrb_ary_new_from_values($tmp3050, $2213, $sub3047, $add_ptr3049);
      var $2220=$arrayidx3045;
      var $2221=$tmp3050;
      assert(12 % 1 === 0);HEAP32[(($2220)>>2)]=HEAP32[(($2221)>>2)];HEAP32[((($2220)+(4))>>2)]=HEAP32[((($2221)+(4))>>2)];HEAP32[((($2220)+(8))>>2)]=HEAP32[((($2221)+(8))>>2)];
      label = 649; break;
    case 649: 
      var $2222=$post;
      var $dec3052=((($2222)-(1))|0);
      $post=$dec3052;
      var $tobool3053=(($2222)|(0))!=0;
      if ($tobool3053) { label = 650; break; } else { label = 651; break; }
    case 650: 
      var $2223=$a2998;
      var $inc3055=((($2223)+(1))|0);
      $a2998=$inc3055;
      var $2224=$regs;
      var $arrayidx3056=(($2224+((($2223)*(12))&-1))|0);
      var $2225=$len3036;
      var $2226=$post;
      var $sub3057=((($2225)-($2226))|0);
      var $sub3058=((($sub3057)-(1))|0);
      var $2227=$ary3032;
      var $ptr3059=(($2227+20)|0);
      var $2228=HEAP32[(($ptr3059)>>2)];
      var $arrayidx3060=(($2228+((($sub3058)*(12))&-1))|0);
      var $2229=$arrayidx3056;
      var $2230=$arrayidx3060;
      assert(12 % 1 === 0);HEAP32[(($2229)>>2)]=HEAP32[(($2230)>>2)];HEAP32[((($2229)+(4))>>2)]=HEAP32[((($2230)+(4))>>2)];HEAP32[((($2229)+(8))>>2)]=HEAP32[((($2230)+(8))>>2)];
      label = 649; break;
    case 651: 
      label = 662; break;
    case 652: 
      var $2231=$a2998;
      var $inc3063=((($2231)+(1))|0);
      $a2998=$inc3063;
      var $2232=$regs;
      var $arrayidx3064=(($2232+((($2231)*(12))&-1))|0);
      var $2233=$mrb_addr;
      _mrb_ary_new_capa($tmp3065, $2233, 0);
      var $2234=$arrayidx3064;
      var $2235=$tmp3065;
      assert(12 % 1 === 0);HEAP32[(($2234)>>2)]=HEAP32[(($2235)>>2)];HEAP32[((($2234)+(4))>>2)]=HEAP32[((($2235)+(4))>>2)];HEAP32[((($2234)+(8))>>2)]=HEAP32[((($2235)+(8))>>2)];
      $i3039=0;
      label = 653; break;
    case 653: 
      var $2236=$i3039;
      var $2237=$pre;
      var $add3067=((($2236)+($2237))|0);
      var $2238=$len3036;
      var $cmp3068=(($add3067)|(0)) < (($2238)|(0));
      if ($cmp3068) { label = 654; break; } else { label = 656; break; }
    case 654: 
      var $2239=$a2998;
      var $2240=$i3039;
      var $add3071=((($2239)+($2240))|0);
      var $2241=$regs;
      var $arrayidx3072=(($2241+((($add3071)*(12))&-1))|0);
      var $2242=$pre;
      var $2243=$i3039;
      var $add3073=((($2242)+($2243))|0);
      var $2244=$ary3032;
      var $ptr3074=(($2244+20)|0);
      var $2245=HEAP32[(($ptr3074)>>2)];
      var $arrayidx3075=(($2245+((($add3073)*(12))&-1))|0);
      var $2246=$arrayidx3072;
      var $2247=$arrayidx3075;
      assert(12 % 1 === 0);HEAP32[(($2246)>>2)]=HEAP32[(($2247)>>2)];HEAP32[((($2246)+(4))>>2)]=HEAP32[((($2247)+(4))>>2)];HEAP32[((($2246)+(8))>>2)]=HEAP32[((($2247)+(8))>>2)];
      label = 655; break;
    case 655: 
      var $2248=$i3039;
      var $inc3077=((($2248)+(1))|0);
      $i3039=$inc3077;
      label = 653; break;
    case 656: 
      label = 657; break;
    case 657: 
      var $2249=$i3039;
      var $2250=$post;
      var $cmp3080=(($2249)|(0)) < (($2250)|(0));
      if ($cmp3080) { label = 658; break; } else { label = 661; break; }
    case 658: 
      label = 659; break;
    case 659: 
      var $2251=$a2998;
      var $2252=$i3039;
      var $add3084=((($2251)+($2252))|0);
      var $2253=$regs;
      var $arrayidx3085=(($2253+((($add3084)*(12))&-1))|0);
      var $tt3086=(($arrayidx3085+8)|0);
      HEAP32[(($tt3086)>>2)]=0;
      var $2254=$a2998;
      var $2255=$i3039;
      var $add3087=((($2254)+($2255))|0);
      var $2256=$regs;
      var $arrayidx3088=(($2256+((($add3087)*(12))&-1))|0);
      var $value3089=(($arrayidx3088)|0);
      var $i3090=$value3089;
      HEAP32[(($i3090)>>2)]=0;
      label = 660; break;
    case 660: 
      var $2257=$i3039;
      var $inc3092=((($2257)+(1))|0);
      $i3039=$inc3092;
      label = 657; break;
    case 661: 
      label = 662; break;
    case 662: 
      label = 663; break;
    case 663: 
      var $2258=$mrb_addr;
      var $2259=$ai;
      _mrb_gc_arena_restore($2258, $2259);
      var $2260=$pc;
      var $incdec_ptr3096=(($2260+4)|0);
      $pc=$incdec_ptr3096;
      var $2261=HEAP32[(($incdec_ptr3096)>>2)];
      $i=$2261;
      var $2262=$i;
      var $and3097=$2262 & 127;
      var $arrayidx3098=((77368+($and3097<<2))|0);
      var $2263=HEAP32[(($arrayidx3098)>>2)];
      var $indirect_goto_dest = $2263;label = 709; break;
    case 664: 
      var $2264=$i;
      var $shr3099=$2264 >>> 23;
      var $and3100=$shr3099 & 511;
      var $2265=$regs;
      var $arrayidx3101=(($2265+((($and3100)*(12))&-1))|0);
      var $2266=$mrb_addr;
      var $2267=$i;
      var $shr3102=$2267 >>> 7;
      var $and3103=$shr3102 & 65535;
      var $2268=$pool;
      var $arrayidx3104=(($2268+((($and3103)*(12))&-1))|0);
      _mrb_str_literal($tmp3105, $2266, $arrayidx3104);
      var $2269=$arrayidx3101;
      var $2270=$tmp3105;
      assert(12 % 1 === 0);HEAP32[(($2269)>>2)]=HEAP32[(($2270)>>2)];HEAP32[((($2269)+(4))>>2)]=HEAP32[((($2270)+(4))>>2)];HEAP32[((($2269)+(8))>>2)]=HEAP32[((($2270)+(8))>>2)];
      var $2271=$mrb_addr;
      var $2272=$ai;
      _mrb_gc_arena_restore($2271, $2272);
      var $2273=$pc;
      var $incdec_ptr3106=(($2273+4)|0);
      $pc=$incdec_ptr3106;
      var $2274=HEAP32[(($incdec_ptr3106)>>2)];
      $i=$2274;
      var $2275=$i;
      var $and3107=$2275 & 127;
      var $arrayidx3108=((77368+($and3107<<2))|0);
      var $2276=HEAP32[(($arrayidx3108)>>2)];
      var $indirect_goto_dest = $2276;label = 709; break;
    case 665: 
      var $2277=$mrb_addr;
      var $2278=$i;
      var $shr3109=$2278 >>> 23;
      var $and3110=$shr3109 & 511;
      var $2279=$regs;
      var $arrayidx3111=(($2279+((($and3110)*(12))&-1))|0);
      var $2280=$i;
      var $shr3112=$2280 >>> 14;
      var $and3113=$shr3112 & 511;
      var $2281=$regs;
      var $arrayidx3114=(($2281+((($and3113)*(12))&-1))|0);
      _mrb_str_concat($2277, $arrayidx3111, $arrayidx3114);
      var $2282=$pc;
      var $incdec_ptr3115=(($2282+4)|0);
      $pc=$incdec_ptr3115;
      var $2283=HEAP32[(($incdec_ptr3115)>>2)];
      $i=$2283;
      var $2284=$i;
      var $and3116=$2284 & 127;
      var $arrayidx3117=((77368+($and3116<<2))|0);
      var $2285=HEAP32[(($arrayidx3117)>>2)];
      var $indirect_goto_dest = $2285;label = 709; break;
    case 666: 
      var $2286=$i;
      var $shr3119=$2286 >>> 14;
      var $and3120=$shr3119 & 511;
      $b=$and3120;
      var $2287=$i;
      var $shr3123=$2287 >>> 7;
      var $and3124=$shr3123 & 127;
      $c3122=$and3124;
      var $2288=$b;
      var $2289=$c3122;
      var $mul3126=($2289<<1);
      var $add3127=((($2288)+($mul3126))|0);
      $lim=$add3127;
      var $2290=$mrb_addr;
      var $2291=$c3122;
      _mrb_hash_new_capa($hash, $2290, $2291);
      label = 667; break;
    case 667: 
      var $2292=$b;
      var $2293=$lim;
      var $cmp3130=(($2292)|(0)) < (($2293)|(0));
      if ($cmp3130) { label = 668; break; } else { label = 669; break; }
    case 668: 
      var $2294=$mrb_addr;
      var $2295=$b;
      var $2296=$regs;
      var $arrayidx3133=(($2296+((($2295)*(12))&-1))|0);
      var $2297=$b;
      var $add3134=((($2297)+(1))|0);
      var $2298=$regs;
      var $arrayidx3135=(($2298+((($add3134)*(12))&-1))|0);
      _mrb_hash_set($2294, $hash, $arrayidx3133, $arrayidx3135);
      var $2299=$b;
      var $add3136=((($2299)+(2))|0);
      $b=$add3136;
      label = 667; break;
    case 669: 
      var $2300=$i;
      var $shr3138=$2300 >>> 23;
      var $and3139=$shr3138 & 511;
      var $2301=$regs;
      var $arrayidx3140=(($2301+((($and3139)*(12))&-1))|0);
      var $2302=$arrayidx3140;
      var $2303=$hash;
      assert(12 % 1 === 0);HEAP32[(($2302)>>2)]=HEAP32[(($2303)>>2)];HEAP32[((($2302)+(4))>>2)]=HEAP32[((($2303)+(4))>>2)];HEAP32[((($2302)+(8))>>2)]=HEAP32[((($2303)+(8))>>2)];
      var $2304=$mrb_addr;
      var $2305=$ai;
      _mrb_gc_arena_restore($2304, $2305);
      var $2306=$pc;
      var $incdec_ptr3141=(($2306+4)|0);
      $pc=$incdec_ptr3141;
      var $2307=HEAP32[(($incdec_ptr3141)>>2)];
      $i=$2307;
      var $2308=$i;
      var $and3142=$2308 & 127;
      var $arrayidx3143=((77368+($and3142<<2))|0);
      var $2309=HEAP32[(($arrayidx3143)>>2)];
      var $indirect_goto_dest = $2309;label = 709; break;
    case 670: 
      var $2310=$i;
      var $shr3148=$2310 >>> 7;
      var $and3149=$shr3148 & 3;
      $c3147=$and3149;
      var $2311=$c3147;
      var $and3150=$2311 & 2;
      var $tobool3151=(($and3150)|(0))!=0;
      if ($tobool3151) { label = 671; break; } else { label = 672; break; }
    case 671: 
      var $2312=$mrb_addr;
      var $2313=$irep;
      var $idx3153=(($2313)|0);
      var $2314=HEAP32[(($idx3153)>>2)];
      var $2315=$i;
      var $shr3154=$2315 >>> 9;
      var $and3155=$shr3154 & 16383;
      var $add3156=((($2314)+($and3155))|0);
      var $2316=$mrb_addr;
      var $irep3157=(($2316+24)|0);
      var $2317=HEAP32[(($irep3157)>>2)];
      var $arrayidx3158=(($2317+($add3156<<2))|0);
      var $2318=HEAP32[(($arrayidx3158)>>2)];
      var $call3159=_mrb_closure_new($2312, $2318);
      $p3145=$call3159;
      label = 673; break;
    case 672: 
      var $2319=$mrb_addr;
      var $2320=$irep;
      var $idx3161=(($2320)|0);
      var $2321=HEAP32[(($idx3161)>>2)];
      var $2322=$i;
      var $shr3162=$2322 >>> 9;
      var $and3163=$shr3162 & 16383;
      var $add3164=((($2321)+($and3163))|0);
      var $2323=$mrb_addr;
      var $irep3165=(($2323+24)|0);
      var $2324=HEAP32[(($irep3165)>>2)];
      var $arrayidx3166=(($2324+($add3164<<2))|0);
      var $2325=HEAP32[(($arrayidx3166)>>2)];
      var $call3167=_mrb_proc_new($2319, $2325);
      $p3145=$call3167;
      label = 673; break;
    case 673: 
      var $2326=$c3147;
      var $and3169=$2326 & 1;
      var $tobool3170=(($and3169)|(0))!=0;
      if ($tobool3170) { label = 674; break; } else { label = 675; break; }
    case 674: 
      var $2327=$p3145;
      var $2328=$2327;
      var $2329=HEAP32[(($2328)>>2)];
      var $2330=$2329 >>> 11;
      var $bf_clear3172=$2330 & 2097151;
      var $or3173=$bf_clear3172 | 256;
      var $bf_value=$or3173 & 2097151;
      var $2331=$2327;
      var $2332=$bf_value & 2097151;
      var $2333=$2332 << 11;
      var $2334=HEAP32[(($2331)>>2)];
      var $2335=$2334 & 2047;
      var $2336=$2335 | $2333;
      HEAP32[(($2331)>>2)]=$2336;
      label = 675; break;
    case 675: 
      var $2337=$i;
      var $shr3175=$2337 >>> 23;
      var $and3176=$shr3175 & 511;
      var $2338=$regs;
      var $arrayidx3177=(($2338+((($and3176)*(12))&-1))|0);
      var $2339=$p3145;
      var $2340=$2339;
      _mrb_obj_value143($tmp3178, $2340);
      var $2341=$arrayidx3177;
      var $2342=$tmp3178;
      assert(12 % 1 === 0);HEAP32[(($2341)>>2)]=HEAP32[(($2342)>>2)];HEAP32[((($2341)+(4))>>2)]=HEAP32[((($2342)+(4))>>2)];HEAP32[((($2341)+(8))>>2)]=HEAP32[((($2342)+(8))>>2)];
      var $2343=$mrb_addr;
      var $2344=$ai;
      _mrb_gc_arena_restore($2343, $2344);
      var $2345=$pc;
      var $incdec_ptr3179=(($2345+4)|0);
      $pc=$incdec_ptr3179;
      var $2346=HEAP32[(($incdec_ptr3179)>>2)];
      $i=$2346;
      var $2347=$i;
      var $and3180=$2347 & 127;
      var $arrayidx3181=((77368+($and3180<<2))|0);
      var $2348=HEAP32[(($arrayidx3181)>>2)];
      var $indirect_goto_dest = $2348;label = 709; break;
    case 676: 
      var $2349=$i;
      var $shr3182=$2349 >>> 23;
      var $and3183=$shr3182 & 511;
      var $2350=$regs;
      var $arrayidx3184=(($2350+((($and3183)*(12))&-1))|0);
      var $2351=$mrb_addr;
      var $object_class=(($2351+44)|0);
      var $2352=HEAP32[(($object_class)>>2)];
      var $2353=$2352;
      _mrb_obj_value143($tmp3185, $2353);
      var $2354=$arrayidx3184;
      var $2355=$tmp3185;
      assert(12 % 1 === 0);HEAP32[(($2354)>>2)]=HEAP32[(($2355)>>2)];HEAP32[((($2354)+(4))>>2)]=HEAP32[((($2355)+(4))>>2)];HEAP32[((($2354)+(8))>>2)]=HEAP32[((($2355)+(8))>>2)];
      var $2356=$pc;
      var $incdec_ptr3186=(($2356+4)|0);
      $pc=$incdec_ptr3186;
      var $2357=HEAP32[(($incdec_ptr3186)>>2)];
      $i=$2357;
      var $2358=$i;
      var $and3187=$2358 & 127;
      var $arrayidx3188=((77368+($and3187<<2))|0);
      var $2359=HEAP32[(($arrayidx3188)>>2)];
      var $indirect_goto_dest = $2359;label = 709; break;
    case 677: 
      $c3190=0;
      var $2360=$i;
      var $shr3193=$2360 >>> 23;
      var $and3194=$shr3193 & 511;
      $a3192=$and3194;
      var $2361=$i;
      var $shr3199=$2361 >>> 14;
      var $and3200=$shr3199 & 511;
      var $2362=$syms;
      var $arrayidx3201=(($2362+($and3200<<1))|0);
      var $2363=HEAP16[(($arrayidx3201)>>1)];
      $id=$2363;
      var $2364=$a3192;
      var $2365=$regs;
      var $arrayidx3202=(($2365+((($2364)*(12))&-1))|0);
      var $2366=$base;
      var $2367=$arrayidx3202;
      assert(12 % 1 === 0);HEAP32[(($2366)>>2)]=HEAP32[(($2367)>>2)];HEAP32[((($2366)+(4))>>2)]=HEAP32[((($2367)+(4))>>2)];HEAP32[((($2366)+(8))>>2)]=HEAP32[((($2367)+(8))>>2)];
      var $2368=$a3192;
      var $add3203=((($2368)+(1))|0);
      var $2369=$regs;
      var $arrayidx3204=(($2369+((($add3203)*(12))&-1))|0);
      var $2370=$super3197;
      var $2371=$arrayidx3204;
      assert(12 % 1 === 0);HEAP32[(($2370)>>2)]=HEAP32[(($2371)>>2)];HEAP32[((($2370)+(4))>>2)]=HEAP32[((($2371)+(4))>>2)];HEAP32[((($2370)+(8))>>2)]=HEAP32[((($2371)+(8))>>2)];
      var $tt3205=(($base+8)|0);
      var $2372=HEAP32[(($tt3205)>>2)];
      var $cmp3206=(($2372)|(0))==0;
      if ($cmp3206) { label = 678; break; } else { label = 680; break; }
    case 678: 
      var $value3209=(($base)|0);
      var $i3210=$value3209;
      var $2373=HEAP32[(($i3210)>>2)];
      var $tobool3211=(($2373)|(0))!=0;
      if ($tobool3211) { label = 680; break; } else { label = 679; break; }
    case 679: 
      var $2374=$mrb_addr;
      var $c3213=(($2374+8)|0);
      var $2375=HEAP32[(($c3213)>>2)];
      var $ci3214=(($2375+16)|0);
      var $2376=HEAP32[(($ci3214)>>2)];
      var $target_class3215=(($2376+28)|0);
      var $2377=HEAP32[(($target_class3215)>>2)];
      var $2378=$2377;
      _mrb_obj_value143($tmp3216, $2378);
      var $2379=$base;
      var $2380=$tmp3216;
      assert(12 % 1 === 0);HEAP32[(($2379)>>2)]=HEAP32[(($2380)>>2)];HEAP32[((($2379)+(4))>>2)]=HEAP32[((($2380)+(4))>>2)];HEAP32[((($2379)+(8))>>2)]=HEAP32[((($2380)+(8))>>2)];
      label = 680; break;
    case 680: 
      var $2381=$mrb_addr;
      var $2382=$id;
      var $call3218=_mrb_vm_define_class($2381, $base, $super3197, $2382);
      $c3190=$call3218;
      var $2383=$a3192;
      var $2384=$regs;
      var $arrayidx3219=(($2384+((($2383)*(12))&-1))|0);
      var $2385=$c3190;
      var $2386=$2385;
      _mrb_obj_value143($tmp3220, $2386);
      var $2387=$arrayidx3219;
      var $2388=$tmp3220;
      assert(12 % 1 === 0);HEAP32[(($2387)>>2)]=HEAP32[(($2388)>>2)];HEAP32[((($2387)+(4))>>2)]=HEAP32[((($2388)+(4))>>2)];HEAP32[((($2387)+(8))>>2)]=HEAP32[((($2388)+(8))>>2)];
      var $2389=$mrb_addr;
      var $2390=$ai;
      _mrb_gc_arena_restore($2389, $2390);
      var $2391=$pc;
      var $incdec_ptr3221=(($2391+4)|0);
      $pc=$incdec_ptr3221;
      var $2392=HEAP32[(($incdec_ptr3221)>>2)];
      $i=$2392;
      var $2393=$i;
      var $and3222=$2393 & 127;
      var $arrayidx3223=((77368+($and3222<<2))|0);
      var $2394=HEAP32[(($arrayidx3223)>>2)];
      var $indirect_goto_dest = $2394;label = 709; break;
    case 681: 
      $c3225=0;
      var $2395=$i;
      var $shr3228=$2395 >>> 23;
      var $and3229=$shr3228 & 511;
      $a3227=$and3229;
      var $2396=$i;
      var $shr3234=$2396 >>> 14;
      var $and3235=$shr3234 & 511;
      var $2397=$syms;
      var $arrayidx3236=(($2397+($and3235<<1))|0);
      var $2398=HEAP16[(($arrayidx3236)>>1)];
      $id3233=$2398;
      var $2399=$a3227;
      var $2400=$regs;
      var $arrayidx3237=(($2400+((($2399)*(12))&-1))|0);
      var $2401=$base3231;
      var $2402=$arrayidx3237;
      assert(12 % 1 === 0);HEAP32[(($2401)>>2)]=HEAP32[(($2402)>>2)];HEAP32[((($2401)+(4))>>2)]=HEAP32[((($2402)+(4))>>2)];HEAP32[((($2401)+(8))>>2)]=HEAP32[((($2402)+(8))>>2)];
      var $tt3238=(($base3231+8)|0);
      var $2403=HEAP32[(($tt3238)>>2)];
      var $cmp3239=(($2403)|(0))==0;
      if ($cmp3239) { label = 682; break; } else { label = 684; break; }
    case 682: 
      var $value3242=(($base3231)|0);
      var $i3243=$value3242;
      var $2404=HEAP32[(($i3243)>>2)];
      var $tobool3244=(($2404)|(0))!=0;
      if ($tobool3244) { label = 684; break; } else { label = 683; break; }
    case 683: 
      var $2405=$mrb_addr;
      var $c3246=(($2405+8)|0);
      var $2406=HEAP32[(($c3246)>>2)];
      var $ci3247=(($2406+16)|0);
      var $2407=HEAP32[(($ci3247)>>2)];
      var $target_class3248=(($2407+28)|0);
      var $2408=HEAP32[(($target_class3248)>>2)];
      var $2409=$2408;
      _mrb_obj_value143($tmp3249, $2409);
      var $2410=$base3231;
      var $2411=$tmp3249;
      assert(12 % 1 === 0);HEAP32[(($2410)>>2)]=HEAP32[(($2411)>>2)];HEAP32[((($2410)+(4))>>2)]=HEAP32[((($2411)+(4))>>2)];HEAP32[((($2410)+(8))>>2)]=HEAP32[((($2411)+(8))>>2)];
      label = 684; break;
    case 684: 
      var $2412=$mrb_addr;
      var $2413=$id3233;
      var $call3251=_mrb_vm_define_module($2412, $base3231, $2413);
      $c3225=$call3251;
      var $2414=$a3227;
      var $2415=$regs;
      var $arrayidx3252=(($2415+((($2414)*(12))&-1))|0);
      var $2416=$c3225;
      var $2417=$2416;
      _mrb_obj_value143($tmp3253, $2417);
      var $2418=$arrayidx3252;
      var $2419=$tmp3253;
      assert(12 % 1 === 0);HEAP32[(($2418)>>2)]=HEAP32[(($2419)>>2)];HEAP32[((($2418)+(4))>>2)]=HEAP32[((($2419)+(4))>>2)];HEAP32[((($2418)+(8))>>2)]=HEAP32[((($2419)+(8))>>2)];
      var $2420=$mrb_addr;
      var $2421=$ai;
      _mrb_gc_arena_restore($2420, $2421);
      var $2422=$pc;
      var $incdec_ptr3254=(($2422+4)|0);
      $pc=$incdec_ptr3254;
      var $2423=HEAP32[(($incdec_ptr3254)>>2)];
      $i=$2423;
      var $2424=$i;
      var $and3255=$2424 & 127;
      var $arrayidx3256=((77368+($and3255<<2))|0);
      var $2425=HEAP32[(($arrayidx3256)>>2)];
      var $indirect_goto_dest = $2425;label = 709; break;
    case 685: 
      var $2426=$i;
      var $shr3259=$2426 >>> 23;
      var $and3260=$shr3259 & 511;
      $a3258=$and3260;
      var $2427=$a3258;
      var $2428=$regs;
      var $arrayidx3265=(($2428+((($2427)*(12))&-1))|0);
      var $2429=$recv3264;
      var $2430=$arrayidx3265;
      assert(12 % 1 === 0);HEAP32[(($2429)>>2)]=HEAP32[(($2430)>>2)];HEAP32[((($2429)+(4))>>2)]=HEAP32[((($2430)+(4))>>2)];HEAP32[((($2429)+(8))>>2)]=HEAP32[((($2430)+(8))>>2)];
      var $2431=$mrb_addr;
      var $call3268=_cipush($2431);
      $ci3262=$call3268;
      var $2432=$pc;
      var $add_ptr3269=(($2432+4)|0);
      var $2433=$ci3262;
      var $pc3270=(($2433+20)|0);
      HEAP32[(($pc3270)>>2)]=$add_ptr3269;
      var $2434=$a3258;
      var $2435=$ci3262;
      var $acc3271=(($2435+24)|0);
      HEAP32[(($acc3271)>>2)]=$2434;
      var $2436=$ci3262;
      var $mid3272=(($2436)|0);
      HEAP16[(($mid3272)>>1)]=0;
      var $2437=$mrb_addr;
      var $c3273=(($2437+8)|0);
      var $2438=HEAP32[(($c3273)>>2)];
      var $stack3274=(($2438+4)|0);
      var $2439=HEAP32[(($stack3274)>>2)];
      var $2440=$mrb_addr;
      var $c3275=(($2440+8)|0);
      var $2441=HEAP32[(($c3275)>>2)];
      var $stbase3276=(($2441+8)|0);
      var $2442=HEAP32[(($stbase3276)>>2)];
      var $sub_ptr_lhs_cast3277=$2439;
      var $sub_ptr_rhs_cast3278=$2442;
      var $sub_ptr_sub3279=((($sub_ptr_lhs_cast3277)-($sub_ptr_rhs_cast3278))|0);
      var $sub_ptr_div3280=((((($sub_ptr_sub3279)|(0)))/(12))&-1);
      var $2443=$ci3262;
      var $stackidx3281=(($2443+8)|0);
      HEAP32[(($stackidx3281)>>2)]=$sub_ptr_div3280;
      var $2444=$ci3262;
      var $argc3282=(($2444+16)|0);
      HEAP32[(($argc3282)>>2)]=0;
      var $value3283=(($recv3264)|0);
      var $p3284=$value3283;
      var $2445=HEAP32[(($p3284)>>2)];
      var $2446=$2445;
      var $2447=$ci3262;
      var $target_class3285=(($2447+28)|0);
      HEAP32[(($target_class3285)>>2)]=$2446;
      var $2448=$a3258;
      var $2449=$mrb_addr;
      var $c3286=(($2449+8)|0);
      var $2450=HEAP32[(($c3286)>>2)];
      var $stack3287=(($2450+4)|0);
      var $2451=HEAP32[(($stack3287)>>2)];
      var $add_ptr3288=(($2451+((($2448)*(12))&-1))|0);
      HEAP32[(($stack3287)>>2)]=$add_ptr3288;
      var $2452=$mrb_addr;
      var $2453=$irep;
      var $idx3289=(($2453)|0);
      var $2454=HEAP32[(($idx3289)>>2)];
      var $2455=$i;
      var $shr3290=$2455 >>> 7;
      var $and3291=$shr3290 & 65535;
      var $add3292=((($2454)+($and3291))|0);
      var $2456=$mrb_addr;
      var $irep3293=(($2456+24)|0);
      var $2457=HEAP32[(($irep3293)>>2)];
      var $arrayidx3294=(($2457+($add3292<<2))|0);
      var $2458=HEAP32[(($arrayidx3294)>>2)];
      var $call3295=_mrb_proc_new($2452, $2458);
      $p3267=$call3295;
      var $2459=$ci3262;
      var $target_class3296=(($2459+28)|0);
      var $2460=HEAP32[(($target_class3296)>>2)];
      var $2461=$p3267;
      var $target_class3297=(($2461+16)|0);
      HEAP32[(($target_class3297)>>2)]=$2460;
      var $2462=$p3267;
      var $2463=$ci3262;
      var $proc3298=(($2463+4)|0);
      HEAP32[(($proc3298)>>2)]=$2462;
      var $2464=$p3267;
      var $2465=$2464;
      var $2466=HEAP32[(($2465)>>2)];
      var $2467=$2466 >>> 11;
      var $bf_clear3299=$2467 & 2097151;
      var $and3300=$bf_clear3299 & 128;
      var $cmp3301=(($and3300)|(0))!=0;
      if ($cmp3301) { label = 686; break; } else { label = 689; break; }
    case 686: 
      var $2468=$mrb_addr;
      var $c3304=(($2468+8)|0);
      var $2469=HEAP32[(($c3304)>>2)];
      var $stack3305=(($2469+4)|0);
      var $2470=HEAP32[(($stack3305)>>2)];
      var $arrayidx3306=(($2470)|0);
      var $2471=$p3267;
      var $body3307=(($2471+12)|0);
      var $func3308=$body3307;
      var $2472=HEAP32[(($func3308)>>2)];
      var $2473=$mrb_addr;
      FUNCTION_TABLE[$2472]($tmp3309, $2473, $recv3264);
      var $2474=$arrayidx3306;
      var $2475=$tmp3309;
      assert(12 % 1 === 0);HEAP32[(($2474)>>2)]=HEAP32[(($2475)>>2)];HEAP32[((($2474)+(4))>>2)]=HEAP32[((($2475)+(4))>>2)];HEAP32[((($2474)+(8))>>2)]=HEAP32[((($2475)+(8))>>2)];
      var $2476=$mrb_addr;
      var $2477=$ai;
      _mrb_gc_arena_restore($2476, $2477);
      var $2478=$mrb_addr;
      var $exc3310=(($2478+16)|0);
      var $2479=HEAP32[(($exc3310)>>2)];
      var $tobool3311=(($2479)|(0))!=0;
      if ($tobool3311) { label = 687; break; } else { label = 688; break; }
    case 687: 
      label = 223; break;
    case 688: 
      var $2480=$mrb_addr;
      var $c3314=(($2480+8)|0);
      var $2481=HEAP32[(($c3314)>>2)];
      var $stbase3315=(($2481+8)|0);
      var $2482=HEAP32[(($stbase3315)>>2)];
      var $2483=$mrb_addr;
      var $c3316=(($2483+8)|0);
      var $2484=HEAP32[(($c3316)>>2)];
      var $ci3317=(($2484+16)|0);
      var $2485=HEAP32[(($ci3317)>>2)];
      var $stackidx3318=(($2485+8)|0);
      var $2486=HEAP32[(($stackidx3318)>>2)];
      var $add_ptr3319=(($2482+((($2486)*(12))&-1))|0);
      var $2487=$mrb_addr;
      var $c3320=(($2487+8)|0);
      var $2488=HEAP32[(($c3320)>>2)];
      var $stack3321=(($2488+4)|0);
      HEAP32[(($stack3321)>>2)]=$add_ptr3319;
      $regs=$add_ptr3319;
      var $2489=$mrb_addr;
      _cipop($2489);
      var $2490=$pc;
      var $incdec_ptr3322=(($2490+4)|0);
      $pc=$incdec_ptr3322;
      var $2491=HEAP32[(($incdec_ptr3322)>>2)];
      $i=$2491;
      var $2492=$i;
      var $and3323=$2492 & 127;
      var $arrayidx3324=((77368+($and3323<<2))|0);
      var $2493=HEAP32[(($arrayidx3324)>>2)];
      var $indirect_goto_dest = $2493;label = 709; break;
    case 689: 
      var $2494=$p3267;
      var $body3326=(($2494+12)|0);
      var $irep3327=$body3326;
      var $2495=HEAP32[(($irep3327)>>2)];
      $irep=$2495;
      var $2496=$irep;
      var $pool3328=(($2496+16)|0);
      var $2497=HEAP32[(($pool3328)>>2)];
      $pool=$2497;
      var $2498=$irep;
      var $syms3329=(($2498+20)|0);
      var $2499=HEAP32[(($syms3329)>>2)];
      $syms=$2499;
      var $2500=$mrb_addr;
      var $2501=$irep;
      var $nregs3330=(($2501+6)|0);
      var $2502=HEAP16[(($nregs3330)>>1)];
      var $conv3331=(($2502)&(65535));
      _stack_extend($2500, $conv3331, 1);
      var $2503=$irep;
      var $nregs3332=(($2503+6)|0);
      var $2504=HEAP16[(($nregs3332)>>1)];
      var $conv3333=(($2504)&(65535));
      var $2505=$ci3262;
      var $nregs3334=(($2505+12)|0);
      HEAP32[(($nregs3334)>>2)]=$conv3333;
      var $2506=$mrb_addr;
      var $c3335=(($2506+8)|0);
      var $2507=HEAP32[(($c3335)>>2)];
      var $stack3336=(($2507+4)|0);
      var $2508=HEAP32[(($stack3336)>>2)];
      $regs=$2508;
      var $2509=$irep;
      var $iseq3337=(($2509+12)|0);
      var $2510=HEAP32[(($iseq3337)>>2)];
      $pc=$2510;
      var $2511=$pc;
      var $2512=HEAP32[(($2511)>>2)];
      $i=$2512;
      var $2513=$i;
      var $and3338=$2513 & 127;
      var $arrayidx3339=((77368+($and3338<<2))|0);
      var $2514=HEAP32[(($arrayidx3339)>>2)];
      var $indirect_goto_dest = $2514;label = 709; break;
    case 690: 
      var $2515=$i;
      var $shr3342=$2515 >>> 23;
      var $and3343=$shr3342 & 511;
      $a3341=$and3343;
      var $2516=$a3341;
      var $2517=$regs;
      var $arrayidx3346=(($2517+((($2516)*(12))&-1))|0);
      var $value3347=(($arrayidx3346)|0);
      var $p3348=$value3347;
      var $2518=HEAP32[(($p3348)>>2)];
      var $2519=$2518;
      $c3345=$2519;
      var $2520=$mrb_addr;
      var $2521=$c3345;
      var $2522=$i;
      var $shr3349=$2522 >>> 14;
      var $and3350=$shr3349 & 511;
      var $2523=$syms;
      var $arrayidx3351=(($2523+($and3350<<1))|0);
      var $2524=HEAP16[(($arrayidx3351)>>1)];
      var $2525=$a3341;
      var $add3352=((($2525)+(1))|0);
      var $2526=$regs;
      var $arrayidx3353=(($2526+((($add3352)*(12))&-1))|0);
      _mrb_define_method_vm($2520, $2521, $2524, $arrayidx3353);
      var $2527=$mrb_addr;
      var $2528=$ai;
      _mrb_gc_arena_restore($2527, $2528);
      var $2529=$pc;
      var $incdec_ptr3354=(($2529+4)|0);
      $pc=$incdec_ptr3354;
      var $2530=HEAP32[(($incdec_ptr3354)>>2)];
      $i=$2530;
      var $2531=$i;
      var $and3355=$2531 & 127;
      var $arrayidx3356=((77368+($and3355<<2))|0);
      var $2532=HEAP32[(($arrayidx3356)>>2)];
      var $indirect_goto_dest = $2532;label = 709; break;
    case 691: 
      var $2533=$i;
      var $shr3357=$2533 >>> 23;
      var $and3358=$shr3357 & 511;
      var $2534=$regs;
      var $arrayidx3359=(($2534+((($and3358)*(12))&-1))|0);
      var $2535=$mrb_addr;
      var $2536=$i;
      var $shr3360=$2536 >>> 14;
      var $and3361=$shr3360 & 511;
      var $2537=$regs;
      var $arrayidx3362=(($2537+((($and3361)*(12))&-1))|0);
      _mrb_singleton_class($tmp3363, $2535, $arrayidx3362);
      var $2538=$arrayidx3359;
      var $2539=$tmp3363;
      assert(12 % 1 === 0);HEAP32[(($2538)>>2)]=HEAP32[(($2539)>>2)];HEAP32[((($2538)+(4))>>2)]=HEAP32[((($2539)+(4))>>2)];HEAP32[((($2538)+(8))>>2)]=HEAP32[((($2539)+(8))>>2)];
      var $2540=$mrb_addr;
      var $2541=$ai;
      _mrb_gc_arena_restore($2540, $2541);
      var $2542=$pc;
      var $incdec_ptr3364=(($2542+4)|0);
      $pc=$incdec_ptr3364;
      var $2543=HEAP32[(($incdec_ptr3364)>>2)];
      $i=$2543;
      var $2544=$i;
      var $and3365=$2544 & 127;
      var $arrayidx3366=((77368+($and3365<<2))|0);
      var $2545=HEAP32[(($arrayidx3366)>>2)];
      var $indirect_goto_dest = $2545;label = 709; break;
    case 692: 
      var $2546=$mrb_addr;
      var $c3367=(($2546+8)|0);
      var $2547=HEAP32[(($c3367)>>2)];
      var $ci3368=(($2547+16)|0);
      var $2548=HEAP32[(($ci3368)>>2)];
      var $target_class3369=(($2548+28)|0);
      var $2549=HEAP32[(($target_class3369)>>2)];
      var $tobool3370=(($2549)|(0))!=0;
      if ($tobool3370) { label = 694; break; } else { label = 693; break; }
    case 693: 
      var $2550=$mrb_addr;
      var $2551=$mrb_addr;
      var $call3374=_mrb_class_get($2551, ((113772)|0));
      _mrb_exc_new($exc3373, $2550, $call3374, ((77672)|0), 25);
      var $value3375=(($exc3373)|0);
      var $p3376=$value3375;
      var $2552=HEAP32[(($p3376)>>2)];
      var $2553=$2552;
      var $2554=$mrb_addr;
      var $exc3377=(($2554+16)|0);
      HEAP32[(($exc3377)>>2)]=$2553;
      label = 223; break;
    case 694: 
      var $2555=$i;
      var $shr3379=$2555 >>> 23;
      var $and3380=$shr3379 & 511;
      var $2556=$regs;
      var $arrayidx3381=(($2556+((($and3380)*(12))&-1))|0);
      var $2557=$mrb_addr;
      var $c3382=(($2557+8)|0);
      var $2558=HEAP32[(($c3382)>>2)];
      var $ci3383=(($2558+16)|0);
      var $2559=HEAP32[(($ci3383)>>2)];
      var $target_class3384=(($2559+28)|0);
      var $2560=HEAP32[(($target_class3384)>>2)];
      var $2561=$2560;
      _mrb_obj_value143($tmp3385, $2561);
      var $2562=$arrayidx3381;
      var $2563=$tmp3385;
      assert(12 % 1 === 0);HEAP32[(($2562)>>2)]=HEAP32[(($2563)>>2)];HEAP32[((($2562)+(4))>>2)]=HEAP32[((($2563)+(4))>>2)];HEAP32[((($2562)+(8))>>2)]=HEAP32[((($2563)+(8))>>2)];
      var $2564=$pc;
      var $incdec_ptr3386=(($2564+4)|0);
      $pc=$incdec_ptr3386;
      var $2565=HEAP32[(($incdec_ptr3386)>>2)];
      $i=$2565;
      var $2566=$i;
      var $and3387=$2566 & 127;
      var $arrayidx3388=((77368+($and3387<<2))|0);
      var $2567=HEAP32[(($arrayidx3388)>>2)];
      var $indirect_goto_dest = $2567;label = 709; break;
    case 695: 
      var $2568=$i;
      var $shr3391=$2568 >>> 14;
      var $and3392=$shr3391 & 511;
      $b3390=$and3392;
      var $2569=$i;
      var $shr3393=$2569 >>> 23;
      var $and3394=$shr3393 & 511;
      var $2570=$regs;
      var $arrayidx3395=(($2570+((($and3394)*(12))&-1))|0);
      var $2571=$mrb_addr;
      var $2572=$b3390;
      var $2573=$regs;
      var $arrayidx3396=(($2573+((($2572)*(12))&-1))|0);
      var $2574=$b3390;
      var $add3397=((($2574)+(1))|0);
      var $2575=$regs;
      var $arrayidx3398=(($2575+((($add3397)*(12))&-1))|0);
      var $2576=$i;
      var $shr3399=$2576 >>> 7;
      var $and3400=$shr3399 & 127;
      _mrb_range_new($tmp3401, $2571, $arrayidx3396, $arrayidx3398, $and3400);
      var $2577=$arrayidx3395;
      var $2578=$tmp3401;
      assert(12 % 1 === 0);HEAP32[(($2577)>>2)]=HEAP32[(($2578)>>2)];HEAP32[((($2577)+(4))>>2)]=HEAP32[((($2578)+(4))>>2)];HEAP32[((($2577)+(8))>>2)]=HEAP32[((($2578)+(8))>>2)];
      var $2579=$mrb_addr;
      var $2580=$ai;
      _mrb_gc_arena_restore($2579, $2580);
      var $2581=$pc;
      var $incdec_ptr3402=(($2581+4)|0);
      $pc=$incdec_ptr3402;
      var $2582=HEAP32[(($incdec_ptr3402)>>2)];
      $i=$2582;
      var $2583=$i;
      var $and3403=$2583 & 127;
      var $arrayidx3404=((77368+($and3403<<2))|0);
      var $2584=HEAP32[(($arrayidx3404)>>2)];
      var $indirect_goto_dest = $2584;label = 709; break;
    case 696: 
      var $2585=$i;
      var $shr3405=$2585 >>> 23;
      var $and3406=$shr3405 & 511;
      var $2586=$i;
      var $shr3407=$2586 >>> 14;
      var $and3408=$shr3407 & 511;
      var $2587=$i;
      var $shr3409=$2587 >>> 7;
      var $and3410=$shr3409 & 127;
      var $call3411=_printf(((113152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and3406,HEAP32[(((tempInt)+(4))>>2)]=$and3408,HEAP32[(((tempInt)+(8))>>2)]=$and3410,tempInt));
      var $2588=$pc;
      var $incdec_ptr3412=(($2588+4)|0);
      $pc=$incdec_ptr3412;
      var $2589=HEAP32[(($incdec_ptr3412)>>2)];
      $i=$2589;
      var $2590=$i;
      var $and3413=$2590 & 127;
      var $arrayidx3414=((77368+($and3413<<2))|0);
      var $2591=HEAP32[(($arrayidx3414)>>2)];
      var $indirect_goto_dest = $2591;label = 709; break;
    case 697: 
      label = 698; break;
    case 698: 
      var $2592=$mrb_addr;
      var $c3417=(($2592+8)|0);
      var $2593=HEAP32[(($c3417)>>2)];
      var $ci3418=(($2593+16)|0);
      var $2594=HEAP32[(($ci3418)>>2)];
      var $eidx3419=(($2594+36)|0);
      var $2595=HEAP32[(($eidx3419)>>2)];
      $n3416=$2595;
      label = 699; break;
    case 699: 
      var $2596=$n3416;
      var $dec3421=((($2596)-(1))|0);
      $n3416=$dec3421;
      var $tobool3422=(($2596)|(0))!=0;
      if ($tobool3422) { label = 700; break; } else { label = 701; break; }
    case 700: 
      var $2597=$mrb_addr;
      var $2598=$n3416;
      _ecall($2597, $2598);
      label = 699; break;
    case 701: 
      var $2599=$prev_jmp;
      var $2600=$2599;
      var $2601=$mrb_addr;
      var $jmp3425=(($2601)|0);
      HEAP32[(($jmp3425)>>2)]=$2600;
      var $2602=$mrb_addr;
      var $exc3426=(($2602+16)|0);
      var $2603=HEAP32[(($exc3426)>>2)];
      var $tobool3427=(($2603)|(0))!=0;
      if ($tobool3427) { label = 702; break; } else { label = 703; break; }
    case 702: 
      var $2604=$mrb_addr;
      var $exc3429=(($2604+16)|0);
      var $2605=HEAP32[(($exc3429)>>2)];
      var $2606=$2605;
      _mrb_obj_value143($agg_result, $2606);
      label = 708; break;
    case 703: 
      var $2607=$irep;
      var $nlocals=(($2607+4)|0);
      var $2608=HEAP16[(($nlocals)>>1)];
      var $idxprom=(($2608)&(65535));
      var $2609=$regs;
      var $arrayidx3431=(($2609+((($idxprom)*(12))&-1))|0);
      var $2610=$agg_result;
      var $2611=$arrayidx3431;
      assert(12 % 1 === 0);HEAP32[(($2610)>>2)]=HEAP32[(($2611)>>2)];HEAP32[((($2610)+(4))>>2)]=HEAP32[((($2611)+(4))>>2)];HEAP32[((($2610)+(8))>>2)]=HEAP32[((($2611)+(8))>>2)];
      label = 708; break;
    case 704: 
      var $2612=$i;
      var $shr3433=$2612 >>> 7;
      var $and3434=$shr3433 & 65535;
      var $2613=$pool;
      var $arrayidx3435=(($2613+((($and3434)*(12))&-1))|0);
      var $2614=$msg;
      var $2615=$arrayidx3435;
      assert(12 % 1 === 0);HEAP32[(($2614)>>2)]=HEAP32[(($2615)>>2)];HEAP32[((($2614)+(4))>>2)]=HEAP32[((($2615)+(4))>>2)];HEAP32[((($2614)+(8))>>2)]=HEAP32[((($2615)+(8))>>2)];
      var $2616=$i;
      var $shr3438=$2616 >>> 23;
      var $and3439=$shr3438 & 511;
      var $cmp3440=(($and3439)|(0))==0;
      if ($cmp3440) { label = 705; break; } else { label = 706; break; }
    case 705: 
      var $2617=$mrb_addr;
      var $2618=$mrb_addr;
      var $call3443=_mrb_class_get($2618, ((94804)|0));
      _mrb_exc_new3($tmp3444, $2617, $call3443, $msg);
      var $2619=$exc3437;
      var $2620=$tmp3444;
      assert(12 % 1 === 0);HEAP32[(($2619)>>2)]=HEAP32[(($2620)>>2)];HEAP32[((($2619)+(4))>>2)]=HEAP32[((($2620)+(4))>>2)];HEAP32[((($2619)+(8))>>2)]=HEAP32[((($2620)+(8))>>2)];
      label = 707; break;
    case 706: 
      var $2621=$mrb_addr;
      var $2622=$mrb_addr;
      var $call3446=_mrb_class_get($2622, ((112288)|0));
      _mrb_exc_new3($tmp3447, $2621, $call3446, $msg);
      var $2623=$exc3437;
      var $2624=$tmp3447;
      assert(12 % 1 === 0);HEAP32[(($2623)>>2)]=HEAP32[(($2624)>>2)];HEAP32[((($2623)+(4))>>2)]=HEAP32[((($2624)+(4))>>2)];HEAP32[((($2623)+(8))>>2)]=HEAP32[((($2624)+(8))>>2)];
      label = 707; break;
    case 707: 
      var $value3449=(($exc3437)|0);
      var $p3450=$value3449;
      var $2625=HEAP32[(($p3450)>>2)];
      var $2626=$2625;
      var $2627=$mrb_addr;
      var $exc3451=(($2627+16)|0);
      HEAP32[(($exc3451)>>2)]=$2626;
      label = 223; break;
    case 708: 
      STACKTOP = __stackBase__;
      return;
    case 709: 
      var $indirect_goto_dest;
      var ibr = $indirect_goto_dest;
      label = ibr; break;
    default: assert(0, "bad label: " + label);
  }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function _uvenv($mrb, $up) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $up_addr;
      var $e;
      $mrb_addr=$mrb;
      $up_addr=$up;
      var $0=$mrb_addr;
      var $c=(($0+8)|0);
      var $1=HEAP32[(($c)>>2)];
      var $ci=(($1+16)|0);
      var $2=HEAP32[(($ci)>>2)];
      var $proc=(($2+4)|0);
      var $3=HEAP32[(($proc)>>2)];
      var $env=(($3+20)|0);
      var $4=HEAP32[(($env)>>2)];
      $e=$4;
      label = 3; break;
    case 3: 
      var $5=$up_addr;
      var $dec=((($5)-(1))|0);
      $up_addr=$dec;
      var $tobool=(($5)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $6=$e;
      var $tobool1=(($6)|(0))!=0;
      if ($tobool1) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $retval=0;
      label = 8; break;
    case 6: 
      var $7=$e;
      var $c2=(($7+4)|0);
      var $8=HEAP32[(($c2)>>2)];
      var $9=$8;
      $e=$9;
      label = 3; break;
    case 7: 
      var $10=$e;
      $retval=$10;
      label = 8; break;
    case 8: 
      var $11=$retval;
      return $11;
    default: assert(0, "bad label: " + label);
  }
}
function _is_strict($mrb, $e) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $e_addr;
      var $cioff;
      $mrb_addr=$mrb;
      $e_addr=$e;
      var $0=$e_addr;
      var $cioff1=(($0+20)|0);
      var $1=HEAP32[(($cioff1)>>2)];
      $cioff=$1;
      var $2=$cioff;
      var $cmp=(($2)|(0)) >= 0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $3=$cioff;
      var $4=$mrb_addr;
      var $c=(($4+8)|0);
      var $5=HEAP32[(($c)>>2)];
      var $cibase=(($5+20)|0);
      var $6=HEAP32[(($cibase)>>2)];
      var $arrayidx=(($6+((($3)*(44))&-1))|0);
      var $proc=(($arrayidx+4)|0);
      var $7=HEAP32[(($proc)>>2)];
      var $tobool=(($7)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $8=$cioff;
      var $9=$mrb_addr;
      var $c3=(($9+8)|0);
      var $10=HEAP32[(($c3)>>2)];
      var $cibase4=(($10+20)|0);
      var $11=HEAP32[(($cibase4)>>2)];
      var $arrayidx5=(($11+((($8)*(44))&-1))|0);
      var $proc6=(($arrayidx5+4)|0);
      var $12=HEAP32[(($proc6)>>2)];
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 >>> 11;
      var $bf_clear=$15 & 2097151;
      var $and=$bf_clear & 256;
      var $cmp7=(($and)|(0))!=0;
      if ($cmp7) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=1;
      label = 7; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $16=$retval;
      return $16;
    default: assert(0, "bad label: " + label);
  }
}
function _envadjust($mrb, $oldbase, $newbase) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $oldbase_addr;
      var $newbase_addr;
      var $ci;
      var $e;
      var $off;
      $mrb_addr=$mrb;
      $oldbase_addr=$oldbase;
      $newbase_addr=$newbase;
      var $0=$mrb_addr;
      var $c=(($0+8)|0);
      var $1=HEAP32[(($c)>>2)];
      var $cibase=(($1+20)|0);
      var $2=HEAP32[(($cibase)>>2)];
      $ci=$2;
      label = 3; break;
    case 3: 
      var $3=$ci;
      var $4=$mrb_addr;
      var $c1=(($4+8)|0);
      var $5=HEAP32[(($c1)>>2)];
      var $ci2=(($5+16)|0);
      var $6=HEAP32[(($ci2)>>2)];
      var $cmp=(($3)>>>(0)) <= (($6)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $7=$ci;
      var $env=(($7+40)|0);
      var $8=HEAP32[(($env)>>2)];
      $e=$8;
      var $9=$e;
      var $tobool=(($9)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $10=$e;
      var $cioff=(($10+20)|0);
      var $11=HEAP32[(($cioff)>>2)];
      var $cmp3=(($11)|(0)) >= 0;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $12=$e;
      var $stack=(($12+12)|0);
      var $13=HEAP32[(($stack)>>2)];
      var $14=$oldbase_addr;
      var $sub_ptr_lhs_cast=$13;
      var $sub_ptr_rhs_cast=$14;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|(0)))/(12))&-1);
      $off=$sub_ptr_div;
      var $15=$newbase_addr;
      var $16=$off;
      var $add_ptr=(($15+((($16)*(12))&-1))|0);
      var $17=$e;
      var $stack4=(($17+12)|0);
      HEAP32[(($stack4)>>2)]=$add_ptr;
      label = 7; break;
    case 7: 
      var $18=$ci;
      var $incdec_ptr=(($18+44)|0);
      $ci=$incdec_ptr;
      label = 3; break;
    case 8: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _parsing_heredoc_inf($p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $nd;
      $p_addr=$p;
      var $0=$p_addr;
      var $parsing_heredoc=(($0+1116)|0);
      var $1=HEAP32[(($parsing_heredoc)>>2)];
      $nd=$1;
      var $2=$nd;
      var $cmp=(($2)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      var $3=$nd;
      var $car=(($3)|0);
      var $4=HEAP32[(($car)>>2)];
      var $cdr=(($4+4)|0);
      var $5=HEAP32[(($cdr)>>2)];
      var $6=$5;
      $retval=$6;
      label = 5; break;
    case 5: 
      var $7=$retval;
      return $7;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value148($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_yield_internal($agg_result, $mrb, $b, $argc, $argv, $self, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argc_addr;
      var $argv_addr;
      var $c_addr;
      var $p;
      var $mid;
      var $ci3;
      var $n;
      var $val=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      var $tmp44=(__stackBase__)+(24);
      var $tmp54=(__stackBase__)+(36);
      $mrb_addr=$mrb;
      $argc_addr=$argc;
      $argv_addr=$argv;
      $c_addr=$c;
      var $0=$mrb_addr;
      var $c1=(($0+8)|0);
      var $1=HEAP32[(($c1)>>2)];
      var $ci=(($1+16)|0);
      var $2=HEAP32[(($ci)>>2)];
      var $mid2=(($2)|0);
      var $3=HEAP16[(($mid2)>>1)];
      $mid=$3;
      var $4=$mrb_addr;
      var $c4=(($4+8)|0);
      var $5=HEAP32[(($c4)>>2)];
      var $ci5=(($5+16)|0);
      var $6=HEAP32[(($ci5)>>2)];
      var $nregs=(($6+12)|0);
      var $7=HEAP32[(($nregs)>>2)];
      $n=$7;
      var $tt=(($b+8)|0);
      var $8=HEAP32[(($tt)>>2)];
      var $cmp=(($8)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $value=(($b)|0);
      var $i=$value;
      var $9=HEAP32[(($i)>>2)];
      var $tobool=(($9)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $10=$mrb_addr;
      var $11=$mrb_addr;
      var $call=_mrb_class_get($11, ((112048)|0));
      _mrb_raise($10, $call, ((101696)|0));
      label = 5; break;
    case 5: 
      var $value6=(($b)|0);
      var $p7=$value6;
      var $12=HEAP32[(($p7)>>2)];
      var $13=$12;
      $p=$13;
      var $14=$mrb_addr;
      var $call8=_cipush($14);
      $ci3=$call8;
      var $15=$mid;
      var $16=$ci3;
      var $mid9=(($16)|0);
      HEAP16[(($mid9)>>1)]=$15;
      var $17=$p;
      var $18=$ci3;
      var $proc=(($18+4)|0);
      HEAP32[(($proc)>>2)]=$17;
      var $19=$mrb_addr;
      var $c10=(($19+8)|0);
      var $20=HEAP32[(($c10)>>2)];
      var $stack=(($20+4)|0);
      var $21=HEAP32[(($stack)>>2)];
      var $22=$mrb_addr;
      var $c11=(($22+8)|0);
      var $23=HEAP32[(($c11)>>2)];
      var $stbase=(($23+8)|0);
      var $24=HEAP32[(($stbase)>>2)];
      var $sub_ptr_lhs_cast=$21;
      var $sub_ptr_rhs_cast=$24;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|(0)))/(12))&-1);
      var $25=$ci3;
      var $stackidx=(($25+8)|0);
      HEAP32[(($stackidx)>>2)]=$sub_ptr_div;
      var $26=$argc_addr;
      var $27=$ci3;
      var $argc12=(($27+16)|0);
      HEAP32[(($argc12)>>2)]=$26;
      var $28=$c_addr;
      var $29=$ci3;
      var $target_class=(($29+28)|0);
      HEAP32[(($target_class)>>2)]=$28;
      var $30=$p;
      var $31=$30;
      var $32=HEAP32[(($31)>>2)];
      var $33=$32 >>> 11;
      var $bf_clear=$33 & 2097151;
      var $and=$bf_clear & 128;
      var $cmp13=(($and)|(0))!=0;
      if ($cmp13) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $34=$argc_addr;
      var $add=((($34)+(2))|0);
      var $35=$ci3;
      var $nregs15=(($35+12)|0);
      HEAP32[(($nregs15)>>2)]=$add;
      label = 8; break;
    case 7: 
      var $36=$p;
      var $body=(($36+12)|0);
      var $irep=$body;
      var $37=HEAP32[(($irep)>>2)];
      var $nregs16=(($37+6)|0);
      var $38=HEAP16[(($nregs16)>>1)];
      var $conv=(($38)&(65535));
      var $add17=((($conv)+(1))|0);
      var $39=$ci3;
      var $nregs18=(($39+12)|0);
      HEAP32[(($nregs18)>>2)]=$add17;
      label = 8; break;
    case 8: 
      var $40=$ci3;
      var $acc=(($40+24)|0);
      HEAP32[(($acc)>>2)]=-1;
      var $41=$mrb_addr;
      var $c20=(($41+8)|0);
      var $42=HEAP32[(($c20)>>2)];
      var $stack21=(($42+4)|0);
      var $43=HEAP32[(($stack21)>>2)];
      var $44=$n;
      var $add_ptr=(($43+((($44)*(12))&-1))|0);
      var $45=$mrb_addr;
      var $c22=(($45+8)|0);
      var $46=HEAP32[(($c22)>>2)];
      var $stack23=(($46+4)|0);
      HEAP32[(($stack23)>>2)]=$add_ptr;
      var $47=$mrb_addr;
      var $48=$ci3;
      var $nregs24=(($48+12)|0);
      var $49=HEAP32[(($nregs24)>>2)];
      _stack_extend($47, $49, 0);
      var $50=$mrb_addr;
      var $c25=(($50+8)|0);
      var $51=HEAP32[(($c25)>>2)];
      var $stack26=(($51+4)|0);
      var $52=HEAP32[(($stack26)>>2)];
      var $arrayidx=(($52)|0);
      var $53=$arrayidx;
      var $54=$self;
      assert(12 % 1 === 0);HEAP32[(($53)>>2)]=HEAP32[(($54)>>2)];HEAP32[((($53)+(4))>>2)]=HEAP32[((($54)+(4))>>2)];HEAP32[((($53)+(8))>>2)]=HEAP32[((($54)+(8))>>2)];
      var $55=$argc_addr;
      var $cmp27=(($55)|(0)) > 0;
      if ($cmp27) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $56=$mrb_addr;
      var $c30=(($56+8)|0);
      var $57=HEAP32[(($c30)>>2)];
      var $stack31=(($57+4)|0);
      var $58=HEAP32[(($stack31)>>2)];
      var $add_ptr32=(($58+12)|0);
      var $59=$argv_addr;
      var $60=$argc_addr;
      _stack_copy($add_ptr32, $59, $60);
      label = 10; break;
    case 10: 
      var $61=$argc_addr;
      var $add34=((($61)+(1))|0);
      var $62=$mrb_addr;
      var $c35=(($62+8)|0);
      var $63=HEAP32[(($c35)>>2)];
      var $stack36=(($63+4)|0);
      var $64=HEAP32[(($stack36)>>2)];
      var $arrayidx37=(($64+((($add34)*(12))&-1))|0);
      _mrb_nil_value148($tmp);
      var $65=$arrayidx37;
      var $66=$tmp;
      assert(12 % 1 === 0);HEAP32[(($65)>>2)]=HEAP32[(($66)>>2)];HEAP32[((($65)+(4))>>2)]=HEAP32[((($66)+(4))>>2)];HEAP32[((($65)+(8))>>2)]=HEAP32[((($66)+(8))>>2)];
      var $67=$p;
      var $68=$67;
      var $69=HEAP32[(($68)>>2)];
      var $70=$69 >>> 11;
      var $bf_clear38=$70 & 2097151;
      var $and39=$bf_clear38 & 128;
      var $cmp40=(($and39)|(0))!=0;
      if ($cmp40) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $71=$p;
      var $body43=(($71+12)|0);
      var $func=$body43;
      var $72=HEAP32[(($func)>>2)];
      var $73=$mrb_addr;
      FUNCTION_TABLE[$72]($tmp44, $73, $self);
      var $74=$val;
      var $75=$tmp44;
      assert(12 % 1 === 0);HEAP32[(($74)>>2)]=HEAP32[(($75)>>2)];HEAP32[((($74)+(4))>>2)]=HEAP32[((($75)+(4))>>2)];HEAP32[((($74)+(8))>>2)]=HEAP32[((($75)+(8))>>2)];
      var $76=$mrb_addr;
      var $c45=(($76+8)|0);
      var $77=HEAP32[(($c45)>>2)];
      var $stbase46=(($77+8)|0);
      var $78=HEAP32[(($stbase46)>>2)];
      var $79=$mrb_addr;
      var $c47=(($79+8)|0);
      var $80=HEAP32[(($c47)>>2)];
      var $ci48=(($80+16)|0);
      var $81=HEAP32[(($ci48)>>2)];
      var $stackidx49=(($81+8)|0);
      var $82=HEAP32[(($stackidx49)>>2)];
      var $add_ptr50=(($78+((($82)*(12))&-1))|0);
      var $83=$mrb_addr;
      var $c51=(($83+8)|0);
      var $84=HEAP32[(($c51)>>2)];
      var $stack52=(($84+4)|0);
      HEAP32[(($stack52)>>2)]=$add_ptr50;
      var $85=$mrb_addr;
      _cipop($85);
      label = 13; break;
    case 12: 
      var $86=$mrb_addr;
      var $87=$p;
      _mrb_run($tmp54, $86, $87, $self);
      var $88=$val;
      var $89=$tmp54;
      assert(12 % 1 === 0);HEAP32[(($88)>>2)]=HEAP32[(($89)>>2)];HEAP32[((($88)+(4))>>2)]=HEAP32[((($89)+(4))>>2)];HEAP32[((($88)+(8))>>2)]=HEAP32[((($89)+(8))>>2)];
      label = 13; break;
    case 13: 
      var $90=$agg_result;
      var $91=$val;
      assert(12 % 1 === 0);HEAP32[(($90)>>2)]=HEAP32[(($91)>>2)];HEAP32[((($90)+(4))>>2)]=HEAP32[((($91)+(4))>>2)];HEAP32[((($90)+(8))>>2)]=HEAP32[((($91)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_yield_argv($agg_result, $mrb, $b, $argc, $argv) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $argc_addr;
  var $argv_addr;
  var $p;
  $mrb_addr=$mrb;
  $argc_addr=$argc;
  $argv_addr=$argv;
  var $value=(($b)|0);
  var $p1=$value;
  var $0=HEAP32[(($p1)>>2)];
  var $1=$0;
  $p=$1;
  var $2=$mrb_addr;
  var $3=$argc_addr;
  var $4=$argv_addr;
  var $5=$mrb_addr;
  var $c=(($5+8)|0);
  var $6=HEAP32[(($c)>>2)];
  var $stack=(($6+4)|0);
  var $7=HEAP32[(($stack)>>2)];
  var $arrayidx=(($7)|0);
  var $8=$p;
  var $target_class=(($8+16)|0);
  var $9=HEAP32[(($target_class)>>2)];
  _mrb_yield_internal($agg_result, $2, $b, $3, $4, $arrayidx, $9);
  STACKTOP = __stackBase__;
  return;
}
function _ecall($mrb, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $i_addr;
      var $p;
      var $ci;
      var $self;
      var $exc;
      var $tmp=__stackBase__;
      $mrb_addr=$mrb;
      $i_addr=$i;
      var $0=$mrb_addr;
      var $c=(($0+8)|0);
      var $1=HEAP32[(($c)>>2)];
      var $stack=(($1+4)|0);
      var $2=HEAP32[(($stack)>>2)];
      $self=$2;
      var $3=$i_addr;
      var $4=$mrb_addr;
      var $c1=(($4+8)|0);
      var $5=HEAP32[(($c1)>>2)];
      var $ensure=(($5+36)|0);
      var $6=HEAP32[(($ensure)>>2)];
      var $arrayidx=(($6+($3<<2))|0);
      var $7=HEAP32[(($arrayidx)>>2)];
      $p=$7;
      var $8=$p;
      var $tobool=(($8)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 6; break;
    case 4: 
      var $9=$mrb_addr;
      var $call=_cipush($9);
      $ci=$call;
      var $10=$mrb_addr;
      var $c2=(($10+8)|0);
      var $11=HEAP32[(($c2)>>2)];
      var $stack3=(($11+4)|0);
      var $12=HEAP32[(($stack3)>>2)];
      var $13=$mrb_addr;
      var $c4=(($13+8)|0);
      var $14=HEAP32[(($c4)>>2)];
      var $stbase=(($14+8)|0);
      var $15=HEAP32[(($stbase)>>2)];
      var $sub_ptr_lhs_cast=$12;
      var $sub_ptr_rhs_cast=$15;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|(0)))/(12))&-1);
      var $16=$ci;
      var $stackidx=(($16+8)|0);
      HEAP32[(($stackidx)>>2)]=$sub_ptr_div;
      var $17=$ci;
      var $arrayidx5=((($17)-(44))|0);
      var $mid=(($arrayidx5)|0);
      var $18=HEAP16[(($mid)>>1)];
      var $19=$ci;
      var $mid6=(($19)|0);
      HEAP16[(($mid6)>>1)]=$18;
      var $20=$ci;
      var $acc=(($20+24)|0);
      HEAP32[(($acc)>>2)]=-1;
      var $21=$ci;
      var $argc=(($21+16)|0);
      HEAP32[(($argc)>>2)]=0;
      var $22=$p;
      var $23=$ci;
      var $proc=(($23+4)|0);
      HEAP32[(($proc)>>2)]=$22;
      var $24=$p;
      var $body=(($24+12)|0);
      var $irep=$body;
      var $25=HEAP32[(($irep)>>2)];
      var $nregs=(($25+6)|0);
      var $26=HEAP16[(($nregs)>>1)];
      var $conv=(($26)&(65535));
      var $27=$ci;
      var $nregs7=(($27+12)|0);
      HEAP32[(($nregs7)>>2)]=$conv;
      var $28=$p;
      var $target_class=(($28+16)|0);
      var $29=HEAP32[(($target_class)>>2)];
      var $30=$ci;
      var $target_class8=(($30+28)|0);
      HEAP32[(($target_class8)>>2)]=$29;
      var $31=$mrb_addr;
      var $c9=(($31+8)|0);
      var $32=HEAP32[(($c9)>>2)];
      var $stack10=(($32+4)|0);
      var $33=HEAP32[(($stack10)>>2)];
      var $34=$ci;
      var $arrayidx11=((($34)-(44))|0);
      var $nregs12=(($arrayidx11+12)|0);
      var $35=HEAP32[(($nregs12)>>2)];
      var $add_ptr=(($33+((($35)*(12))&-1))|0);
      var $36=$mrb_addr;
      var $c13=(($36+8)|0);
      var $37=HEAP32[(($c13)>>2)];
      var $stack14=(($37+4)|0);
      HEAP32[(($stack14)>>2)]=$add_ptr;
      var $38=$mrb_addr;
      var $exc15=(($38+16)|0);
      var $39=HEAP32[(($exc15)>>2)];
      $exc=$39;
      var $40=$mrb_addr;
      var $exc16=(($40+16)|0);
      HEAP32[(($exc16)>>2)]=0;
      var $41=$mrb_addr;
      var $42=$p;
      var $43=$self;
      _mrb_run($tmp, $41, $42, $43);
      var $44=$i_addr;
      var $45=$mrb_addr;
      var $c17=(($45+8)|0);
      var $46=HEAP32[(($c17)>>2)];
      var $ensure18=(($46+36)|0);
      var $47=HEAP32[(($ensure18)>>2)];
      var $arrayidx19=(($47+($44<<2))|0);
      HEAP32[(($arrayidx19)>>2)]=0;
      var $48=$mrb_addr;
      var $exc20=(($48+16)|0);
      var $49=HEAP32[(($exc20)>>2)];
      var $tobool21=(($49)|(0))!=0;
      if ($tobool21) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $50=$exc;
      var $51=$mrb_addr;
      var $exc23=(($51+16)|0);
      HEAP32[(($exc23)>>2)]=$50;
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _value_move($s1, $s2, $n) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s1_addr;
      var $s2_addr;
      var $n_addr;
      $s1_addr=$s1;
      $s2_addr=$s2;
      $n_addr=$n;
      var $0=$s1_addr;
      var $1=$s2_addr;
      var $cmp=(($0)>>>(0)) > (($1)>>>(0));
      if ($cmp) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $2=$s1_addr;
      var $3=$s2_addr;
      var $4=$n_addr;
      var $add_ptr=(($3+((($4)*(12))&-1))|0);
      var $cmp1=(($2)>>>(0)) < (($add_ptr)>>>(0));
      if ($cmp1) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $5=$n_addr;
      var $6=$s1_addr;
      var $add_ptr2=(($6+((($5)*(12))&-1))|0);
      $s1_addr=$add_ptr2;
      var $7=$n_addr;
      var $8=$s2_addr;
      var $add_ptr3=(($8+((($7)*(12))&-1))|0);
      $s2_addr=$add_ptr3;
      label = 5; break;
    case 5: 
      var $9=$n_addr;
      var $dec=((($9)-(1))|0);
      $n_addr=$dec;
      var $cmp4=(($9)>>>(0)) > 0;
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $10=$s1_addr;
      var $incdec_ptr=((($10)-(12))|0);
      $s1_addr=$incdec_ptr;
      var $11=$s2_addr;
      var $incdec_ptr5=((($11)-(12))|0);
      $s2_addr=$incdec_ptr5;
      var $12=$incdec_ptr;
      var $13=$incdec_ptr5;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      label = 5; break;
    case 7: 
      label = 15; break;
    case 8: 
      var $14=$s1_addr;
      var $15=$s2_addr;
      var $cmp6=(($14)|(0))!=(($15)|(0));
      if ($cmp6) { label = 9; break; } else { label = 13; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $16=$n_addr;
      var $dec9=((($16)-(1))|0);
      $n_addr=$dec9;
      var $cmp10=(($16)>>>(0)) > 0;
      if ($cmp10) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $17=$s1_addr;
      var $incdec_ptr12=(($17+12)|0);
      $s1_addr=$incdec_ptr12;
      var $18=$s2_addr;
      var $incdec_ptr13=(($18+12)|0);
      $s2_addr=$incdec_ptr13;
      var $19=$17;
      var $20=$18;
      assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
      label = 10; break;
    case 12: 
      label = 14; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _argnum_error($mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $num_addr;
      var $exc=__stackBase__;
      var $str=(__stackBase__)+(12);
      var $agg_tmp=(__stackBase__)+(24);
      var $agg_tmp4=(__stackBase__)+(36);
      var $agg_tmp7=(__stackBase__)+(48);
      var $tmp=(__stackBase__)+(60);
      var $agg_tmp8=(__stackBase__)+(72);
      var $agg_tmp12=(__stackBase__)+(84);
      var $tmp13=(__stackBase__)+(96);
      var $tmp14=(__stackBase__)+(108);
      $mrb_addr=$mrb;
      $num_addr=$num;
      var $0=$mrb_addr;
      var $c=(($0+8)|0);
      var $1=HEAP32[(($c)>>2)];
      var $ci=(($1+16)|0);
      var $2=HEAP32[(($ci)>>2)];
      var $mid=(($2)|0);
      var $3=HEAP16[(($mid)>>1)];
      var $tobool=(($3 << 16) >> 16)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $6=$mrb_addr;
      var $c1=(($6+8)|0);
      var $7=HEAP32[(($c1)>>2)];
      var $ci2=(($7+16)|0);
      var $8=HEAP32[(($ci2)>>2)];
      var $mid3=(($8)|0);
      var $9=HEAP16[(($mid3)>>1)];
      _mrb_sym2str($agg_tmp, $5, $9);
      var $10=$mrb_addr;
      var $c5=(($10+8)|0);
      var $11=HEAP32[(($c5)>>2)];
      var $ci6=(($11+16)|0);
      var $12=HEAP32[(($ci6)>>2)];
      var $argc=(($12+16)|0);
      var $13=HEAP32[(($argc)>>2)];
      _mrb_fixnum_value144($agg_tmp4, $13);
      var $14=$num_addr;
      _mrb_fixnum_value144($agg_tmp7, $14);
      _mrb_format($tmp, $4, ((111684)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 36)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp4)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp4)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp4)+(8))>>2)],HEAP32[(((tempInt)+(24))>>2)]=HEAP32[(($agg_tmp7)>>2)],HEAP32[((((tempInt)+(24))+(4))>>2)]=HEAP32[((($agg_tmp7)+(4))>>2)],HEAP32[((((tempInt)+(24))+(8))>>2)]=HEAP32[((($agg_tmp7)+(8))>>2)],tempInt));
      var $15=$str;
      var $16=$tmp;
      assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
      label = 5; break;
    case 4: 
      var $17=$mrb_addr;
      var $18=$mrb_addr;
      var $c9=(($18+8)|0);
      var $19=HEAP32[(($c9)>>2)];
      var $ci10=(($19+16)|0);
      var $20=HEAP32[(($ci10)>>2)];
      var $argc11=(($20+16)|0);
      var $21=HEAP32[(($argc11)>>2)];
      _mrb_fixnum_value144($agg_tmp8, $21);
      var $22=$num_addr;
      _mrb_fixnum_value144($agg_tmp12, $22);
      _mrb_format($tmp13, $17, ((111156)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp8)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp8)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp8)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp12)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp12)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp12)+(8))>>2)],tempInt));
      var $23=$str;
      var $24=$tmp13;
      assert(12 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
      label = 5; break;
    case 5: 
      var $25=$mrb_addr;
      var $26=$mrb_addr;
      var $call=_mrb_class_get($26, ((112048)|0));
      _mrb_exc_new3($tmp14, $25, $call, $str);
      var $27=$exc;
      var $28=$tmp14;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      var $value=(($exc)|0);
      var $p=$value;
      var $29=HEAP32[(($p)>>2)];
      var $30=$29;
      var $31=$mrb_addr;
      var $exc15=(($31+16)|0);
      HEAP32[(($exc15)>>2)]=$30;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_voidp_value($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      $p_addr=$p;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=7;
      var $0=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _top_env($mrb, $proc) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $proc_addr;
      var $e;
      $mrb_addr=$mrb;
      $proc_addr=$proc;
      var $0=$proc_addr;
      var $env=(($0+20)|0);
      var $1=HEAP32[(($env)>>2)];
      $e=$1;
      var $2=$mrb_addr;
      var $3=$e;
      var $call=_is_strict($2, $3);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$e;
      $retval=$4;
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $5=$e;
      var $c=(($5+4)|0);
      var $6=HEAP32[(($c)>>2)];
      var $tobool1=(($6)|(0))!=0;
      if ($tobool1) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $7=$e;
      var $c2=(($7+4)|0);
      var $8=HEAP32[(($c2)>>2)];
      var $9=$8;
      $e=$9;
      var $10=$mrb_addr;
      var $11=$e;
      var $call3=_is_strict($10, $11);
      var $tobool4=(($call3)|(0))!=0;
      if ($tobool4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $12=$e;
      $retval=$12;
      label = 10; break;
    case 8: 
      label = 5; break;
    case 9: 
      var $13=$e;
      $retval=$13;
      label = 10; break;
    case 10: 
      var $14=$retval;
      return $14;
    default: assert(0, "bad label: " + label);
  }
}
function _localjump_error($mrb, $kind) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 100)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $kind_addr;
  var $kind_str=__stackBase__;
  var $kind_str_len=(__stackBase__)+(24);
  var $msg=(__stackBase__)+(28);
  var $exc=(__stackBase__)+(40);
  var $tmp=(__stackBase__)+(52);
  var $tmp1=(__stackBase__)+(64);
  var $tmp3=(__stackBase__)+(76);
  var $tmp4=(__stackBase__)+(88);
  $mrb_addr=$mrb;
  $kind_addr=$kind;
  var $0=$kind_str;
  assert(21 % 1 === 0);_memcpy($0, ((80048)|0), 21);
  var $1=$kind_str_len;
  assert(3 % 1 === 0);HEAP8[($1)]=HEAP8[((((80044)|0))|0)];HEAP8[((($1)+(1))|0)]=HEAP8[(((((80044)|0))+(1))|0)];HEAP8[((($1)+(2))|0)]=HEAP8[(((((80044)|0))+(2))|0)];
  var $2=$mrb_addr;
  _mrb_str_buf_new($tmp, $2, 19);
  var $3=$msg;
  var $4=$tmp;
  assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
  var $5=$mrb_addr;
  _mrb_str_buf_cat($tmp1, $5, $msg, ((80032)|0), 11);
  var $6=$mrb_addr;
  var $7=$kind_addr;
  var $arrayidx=(($kind_str+((($7)*(7))&-1))|0);
  var $arraydecay=(($arrayidx)|0);
  var $8=$kind_addr;
  var $arrayidx2=(($kind_str_len+$8)|0);
  var $9=HEAP8[($arrayidx2)];
  var $conv=(($9 << 24) >> 24);
  _mrb_str_buf_cat($tmp3, $6, $msg, $arraydecay, $conv);
  var $10=$mrb_addr;
  var $11=$mrb_addr;
  var $call=_mrb_class_get($11, ((112288)|0));
  _mrb_exc_new3($tmp4, $10, $call, $msg);
  var $12=$exc;
  var $13=$tmp4;
  assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
  var $value=(($exc)|0);
  var $p=$value;
  var $14=HEAP32[(($p)>>2)];
  var $15=$14;
  var $16=$mrb_addr;
  var $exc5=(($16+16)|0);
  HEAP32[(($exc5)>>2)]=$15;
  STACKTOP = __stackBase__;
  return;
}
function _stack_clear($from, $count) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $from_addr;
      var $count_addr;
      $from_addr=$from;
      $count_addr=$count;
      label = 3; break;
    case 3: 
      var $0=$count_addr;
      var $dec=((($0)-(1))|0);
      $count_addr=$dec;
      var $cmp=(($0)>>>(0)) > 0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $1=$from_addr;
      var $incdec_ptr=(($1+12)|0);
      $from_addr=$incdec_ptr;
      var $2=$1;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[((58876)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((58880)>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((58884)>>2)];
      label = 3; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _yyparse($p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1352)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $yychar;
      var $yylval=__stackBase__;
      var $yynerrs;
      var $yystate;
      var $yyn;
      var $yyresult;
      var $yyerrstatus;
      var $yytoken;
      var $yymsgbuf=(__stackBase__)+(4);
      var $yymsg;
      var $yymsg_alloc;
      var $yyssa=(__stackBase__)+(132);
      var $yyss;
      var $yyssp;
      var $yyvsa=(__stackBase__)+(532);
      var $yyvs;
      var $yyvsp;
      var $yystacksize;
      var $yyval=(__stackBase__)+(1332);
      var $yylen;
      var $yysize;
      var $yyss1;
      var $yyptr;
      var $yynewbytes;
      var $yynewbytes29;
      var $buf=(__stackBase__)+(1336);
      var $yysize2796;
      var $yyalloc;
      $p_addr=$p;
      $yytoken=0;
      var $arraydecay=(($yymsgbuf)|0);
      $yymsg=$arraydecay;
      $yymsg_alloc=128;
      var $arraydecay1=(($yyssa)|0);
      $yyss=$arraydecay1;
      var $arraydecay2=(($yyvsa)|0);
      $yyvs=$arraydecay2;
      $yystacksize=200;
      $yylen=0;
      label = 3; break;
    case 3: 
      var $0=HEAP32[((37036)>>2)];
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((110832)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      $yystate=0;
      $yyerrstatus=0;
      $yynerrs=0;
      $yychar=-2;
      var $2=$yyss;
      $yyssp=$2;
      var $3=$yyvs;
      $yyvsp=$3;
      label = 8; break;
    case 7: 
      var $4=$yyssp;
      var $incdec_ptr=(($4+2)|0);
      $yyssp=$incdec_ptr;
      label = 8; break;
    case 8: 
      var $5=$yystate;
      var $conv=(($5) & 65535);
      var $6=$yyssp;
      HEAP16[(($6)>>1)]=$conv;
      var $7=$yyss;
      var $8=$yystacksize;
      var $add_ptr=(($7+($8<<1))|0);
      var $add_ptr3=((($add_ptr)-(2))|0);
      var $9=$yyssp;
      var $cmp=(($add_ptr3)>>>(0)) <= (($9)>>>(0));
      if ($cmp) { label = 9; break; } else { label = 28; break; }
    case 9: 
      var $10=$yyssp;
      var $11=$yyss;
      var $sub_ptr_lhs_cast=$10;
      var $sub_ptr_rhs_cast=$11;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|(0)))/(2))&-1);
      var $add=((($sub_ptr_div)+(1))|0);
      $yysize=$add;
      var $12=$yystacksize;
      var $cmp6=10000 <= (($12)>>>(0));
      if ($cmp6) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 617; break;
    case 11: 
      var $13=$yystacksize;
      var $mul=($13<<1);
      $yystacksize=$mul;
      var $14=$yystacksize;
      var $cmp10=10000 < (($14)>>>(0));
      if ($cmp10) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $yystacksize=10000;
      label = 13; break;
    case 13: 
      var $15=$yyss;
      $yyss1=$15;
      var $16=$p_addr;
      var $mrb=(($16)|0);
      var $17=HEAP32[(($mrb)>>2)];
      var $18=$yystacksize;
      var $mul14=((($18)*(6))&-1);
      var $add15=((($mul14)+(3))|0);
      var $call16=_mrb_malloc($17, $add15);
      var $19=$call16;
      $yyptr=$19;
      var $20=$yyptr;
      var $tobool17=(($20)|(0))!=0;
      if ($tobool17) { label = 15; break; } else { label = 14; break; }
    case 14: 
      label = 617; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $21=$yyptr;
      var $yyss21=$21;
      var $22=$yyss21;
      var $23=$yyss;
      var $24=$23;
      var $25=$yysize;
      var $mul22=($25<<1);
      assert($mul22 % 1 === 0);_memcpy($22, $24, $mul22);
      var $26=$yyptr;
      var $yyss23=$26;
      $yyss=$yyss23;
      var $27=$yystacksize;
      var $mul24=($27<<1);
      var $add25=((($mul24)+(3))|0);
      $yynewbytes=$add25;
      var $28=$yynewbytes;
      var $div=Math.floor(((($28)>>>(0)))/(4));
      var $29=$yyptr;
      var $add_ptr26=(($29+($div<<2))|0);
      $yyptr=$add_ptr26;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $30=$yyptr;
      var $yyvs30=$30;
      var $31=$yyvs30;
      var $32=$yyvs;
      var $33=$32;
      var $34=$yysize;
      var $mul31=($34<<2);
      assert($mul31 % 1 === 0);_memcpy($31, $33, $mul31);
      var $35=$yyptr;
      var $yyvs32=$35;
      $yyvs=$yyvs32;
      var $36=$yystacksize;
      var $mul33=($36<<2);
      var $add34=((($mul33)+(3))|0);
      $yynewbytes29=$add34;
      var $37=$yynewbytes29;
      var $div35=Math.floor(((($37)>>>(0)))/(4));
      var $38=$yyptr;
      var $add_ptr36=(($38+($div35<<2))|0);
      $yyptr=$add_ptr36;
      label = 19; break;
    case 19: 
      var $39=$yyss1;
      var $arraydecay38=(($yyssa)|0);
      var $cmp39=(($39)|(0))!=(($arraydecay38)|(0));
      if ($cmp39) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $40=$p_addr;
      var $mrb42=(($40)|0);
      var $41=HEAP32[(($mrb42)>>2)];
      var $42=$yyss1;
      var $43=$42;
      _mrb_free($41, $43);
      label = 21; break;
    case 21: 
      var $44=$yyss;
      var $45=$yysize;
      var $add_ptr44=(($44+($45<<1))|0);
      var $add_ptr45=((($add_ptr44)-(2))|0);
      $yyssp=$add_ptr45;
      var $46=$yyvs;
      var $47=$yysize;
      var $add_ptr46=(($46+($47<<2))|0);
      var $add_ptr47=((($add_ptr46)-(4))|0);
      $yyvsp=$add_ptr47;
      label = 22; break;
    case 22: 
      var $48=HEAP32[((37036)>>2)];
      var $tobool49=(($48)|(0))!=0;
      if ($tobool49) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $49=HEAP32[((_stderr)>>2)];
      var $50=$yystacksize;
      var $call51=_fprintf($49, ((112756)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$50,tempInt));
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $51=$yyss;
      var $52=$yystacksize;
      var $add_ptr54=(($51+($52<<1))|0);
      var $add_ptr55=((($add_ptr54)-(2))|0);
      var $53=$yyssp;
      var $cmp56=(($add_ptr55)>>>(0)) <= (($53)>>>(0));
      if ($cmp56) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 616; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $54=HEAP32[((37036)>>2)];
      var $tobool62=(($54)|(0))!=0;
      if ($tobool62) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $55=HEAP32[((_stderr)>>2)];
      var $56=$yystate;
      var $call64=_fprintf($55, ((107832)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$56,tempInt));
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $57=$yystate;
      var $arrayidx=((32904+($57<<1))|0);
      var $58=HEAP16[(($arrayidx)>>1)];
      var $conv67=(($58 << 16) >> 16);
      $yyn=$conv67;
      var $59=$yyn;
      var $cmp68=(($59)|(0))==-745;
      if ($cmp68) { label = 34; break; } else { label = 35; break; }
    case 34: 
      label = 75; break;
    case 35: 
      var $60=$yychar;
      var $cmp72=(($60)|(0))==-2;
      if ($cmp72) { label = 36; break; } else { label = 41; break; }
    case 36: 
      label = 37; break;
    case 37: 
      var $61=HEAP32[((37036)>>2)];
      var $tobool76=(($61)|(0))!=0;
      if ($tobool76) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $62=HEAP32[((_stderr)>>2)];
      var $call78=_fprintf($62, ((104308)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $63=$yylval;
      var $64=$p_addr;
      var $call81=_yylex($63, $64);
      $yychar=$call81;
      label = 41; break;
    case 41: 
      var $65=$yychar;
      var $cmp83=(($65)|(0)) <= 0;
      if ($cmp83) { label = 42; break; } else { label = 47; break; }
    case 42: 
      $yytoken=0;
      $yychar=0;
      label = 43; break;
    case 43: 
      var $66=HEAP32[((37036)>>2)];
      var $tobool87=(($66)|(0))!=0;
      if ($tobool87) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $67=HEAP32[((_stderr)>>2)];
      var $call89=_fprintf($67, ((101564)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 55; break;
    case 47: 
      var $68=$yychar;
      var $cmp92=(($68)>>>(0)) <= 379;
      if ($cmp92) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $69=$yychar;
      var $arrayidx94=((4+$69)|0);
      var $70=HEAP8[($arrayidx94)];
      var $conv95=(($70)&(255));
      var $cond = $conv95;label = 50; break;
    case 49: 
      var $cond = 2;label = 50; break;
    case 50: 
      var $cond;
      $yytoken=$cond;
      label = 51; break;
    case 51: 
      var $71=HEAP32[((37036)>>2)];
      var $tobool97=(($71)|(0))!=0;
      if ($tobool97) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $72=HEAP32[((_stderr)>>2)];
      var $call99=_fprintf($72, ((98976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((96928)|0),tempInt));
      var $73=HEAP32[((_stderr)>>2)];
      var $74=$yytoken;
      var $75=$p_addr;
      _yy_symbol_print($73, $74, $yylval, $75);
      var $76=HEAP32[((_stderr)>>2)];
      var $call100=_fprintf($76, ((95764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $77=$yytoken;
      var $78=$yyn;
      var $add104=((($78)+($77))|0);
      $yyn=$add104;
      var $79=$yyn;
      var $cmp105=(($79)|(0)) < 0;
      if ($cmp105) { label = 58; break; } else { label = 56; break; }
    case 56: 
      var $80=$yyn;
      var $cmp107=10895 < (($80)|(0));
      if ($cmp107) { label = 58; break; } else { label = 57; break; }
    case 57: 
      var $81=$yyn;
      var $arrayidx110=((37040+($81<<1))|0);
      var $82=HEAP16[(($arrayidx110)>>1)];
      var $conv111=(($82 << 16) >> 16);
      var $83=$yytoken;
      var $cmp112=(($conv111)|(0))!=(($83)|(0));
      if ($cmp112) { label = 58; break; } else { label = 59; break; }
    case 58: 
      label = 75; break;
    case 59: 
      var $84=$yyn;
      var $arrayidx116=((1608+($84<<1))|0);
      var $85=HEAP16[(($arrayidx116)>>1)];
      var $conv117=(($85 << 16) >> 16);
      $yyn=$conv117;
      var $86=$yyn;
      var $cmp118=(($86)|(0)) <= 0;
      if ($cmp118) { label = 60; break; } else { label = 64; break; }
    case 60: 
      var $87=$yyn;
      var $cmp121=(($87)|(0))==0;
      if ($cmp121) { label = 62; break; } else { label = 61; break; }
    case 61: 
      var $88=$yyn;
      var $cmp124=(($88)|(0))==-545;
      if ($cmp124) { label = 62; break; } else { label = 63; break; }
    case 62: 
      label = 560; break;
    case 63: 
      var $89=$yyn;
      var $sub=(((-$89))|0);
      $yyn=$sub;
      label = 78; break;
    case 64: 
      var $90=$yyn;
      var $cmp129=(($90)|(0))==3;
      if ($cmp129) { label = 65; break; } else { label = 66; break; }
    case 65: 
      label = 615; break;
    case 66: 
      var $91=$yyerrstatus;
      var $tobool133=(($91)|(0))!=0;
      if ($tobool133) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $92=$yyerrstatus;
      var $dec=((($92)-(1))|0);
      $yyerrstatus=$dec;
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $93=HEAP32[((37036)>>2)];
      var $tobool137=(($93)|(0))!=0;
      if ($tobool137) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $94=HEAP32[((_stderr)>>2)];
      var $call139=_fprintf($94, ((98976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((94716)|0),tempInt));
      var $95=HEAP32[((_stderr)>>2)];
      var $96=$yytoken;
      var $97=$p_addr;
      _yy_symbol_print($95, $96, $yylval, $97);
      var $98=HEAP32[((_stderr)>>2)];
      var $call140=_fprintf($98, ((95764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $99=$yychar;
      var $cmp143=(($99)|(0))!=0;
      if ($cmp143) { label = 73; break; } else { label = 74; break; }
    case 73: 
      $yychar=-2;
      label = 74; break;
    case 74: 
      var $100=$yyn;
      $yystate=$100;
      var $101=$yyvsp;
      var $incdec_ptr147=(($101+4)|0);
      $yyvsp=$incdec_ptr147;
      var $102=$incdec_ptr147;
      var $103=$yylval;
      assert(4 % 1 === 0);HEAP32[(($102)>>2)]=HEAP32[(($103)>>2)];
      label = 7; break;
    case 75: 
      var $104=$yystate;
      var $arrayidx148=((35124+($104<<1))|0);
      var $105=HEAP16[(($arrayidx148)>>1)];
      var $conv149=(($105)&(65535));
      $yyn=$conv149;
      var $106=$yyn;
      var $cmp150=(($106)|(0))==0;
      if ($cmp150) { label = 76; break; } else { label = 77; break; }
    case 76: 
      label = 560; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $107=$yyn;
      var $arrayidx154=((29864+$107)|0);
      var $108=HEAP8[($arrayidx154)];
      var $conv155=(($108)&(255));
      $yylen=$conv155;
      var $109=$yylen;
      var $sub156=(((1)-($109))|0);
      var $110=$yyvsp;
      var $arrayidx157=(($110+($sub156<<2))|0);
      var $111=$yyval;
      var $112=$arrayidx157;
      assert(4 % 1 === 0);HEAP32[(($111)>>2)]=HEAP32[(($112)>>2)];
      label = 79; break;
    case 79: 
      var $113=HEAP32[((37036)>>2)];
      var $tobool159=(($113)|(0))!=0;
      if ($tobool159) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $114=$yyvsp;
      var $115=$yyn;
      var $116=$p_addr;
      _yy_reduce_print($114, $115, $116);
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $117=$yyn;
      if ((($117)|(0))==2) {
        label = 83; break;
      }
      else if ((($117)|(0))==3) {
        label = 86; break;
      }
      else if ((($117)|(0))==4) {
        label = 87; break;
      }
      else if ((($117)|(0))==5) {
        label = 88; break;
      }
      else if ((($117)|(0))==6) {
        label = 89; break;
      }
      else if ((($117)|(0))==7) {
        label = 90; break;
      }
      else if ((($117)|(0))==8) {
        label = 91; break;
      }
      else if ((($117)|(0))==10) {
        label = 92; break;
      }
      else if ((($117)|(0))==11) {
        label = 93; break;
      }
      else if ((($117)|(0))==12) {
        label = 94; break;
      }
      else if ((($117)|(0))==13) {
        label = 106; break;
      }
      else if ((($117)|(0))==14) {
        label = 107; break;
      }
      else if ((($117)|(0))==15) {
        label = 108; break;
      }
      else if ((($117)|(0))==16) {
        label = 109; break;
      }
      else if ((($117)|(0))==17) {
        label = 110; break;
      }
      else if ((($117)|(0))==18) {
        label = 111; break;
      }
      else if ((($117)|(0))==19) {
        label = 112; break;
      }
      else if ((($117)|(0))==20) {
        label = 113; break;
      }
      else if ((($117)|(0))==21) {
        label = 114; break;
      }
      else if ((($117)|(0))==22) {
        label = 115; break;
      }
      else if ((($117)|(0))==23) {
        label = 116; break;
      }
      else if ((($117)|(0))==24) {
        label = 117; break;
      }
      else if ((($117)|(0))==25) {
        label = 118; break;
      }
      else if ((($117)|(0))==26) {
        label = 119; break;
      }
      else if ((($117)|(0))==28) {
        label = 120; break;
      }
      else if ((($117)|(0))==29) {
        label = 121; break;
      }
      else if ((($117)|(0))==30) {
        label = 122; break;
      }
      else if ((($117)|(0))==31) {
        label = 123; break;
      }
      else if ((($117)|(0))==32) {
        label = 124; break;
      }
      else if ((($117)|(0))==33) {
        label = 125; break;
      }
      else if ((($117)|(0))==34) {
        label = 126; break;
      }
      else if ((($117)|(0))==35) {
        label = 127; break;
      }
      else if ((($117)|(0))==36) {
        label = 128; break;
      }
      else if ((($117)|(0))==37) {
        label = 129; break;
      }
      else if ((($117)|(0))==38) {
        label = 130; break;
      }
      else if ((($117)|(0))==40) {
        label = 131; break;
      }
      else if ((($117)|(0))==41) {
        label = 132; break;
      }
      else if ((($117)|(0))==43) {
        label = 133; break;
      }
      else if ((($117)|(0))==44) {
        label = 134; break;
      }
      else if ((($117)|(0))==45) {
        label = 135; break;
      }
      else if ((($117)|(0))==46) {
        label = 136; break;
      }
      else if ((($117)|(0))==48) {
        label = 137; break;
      }
      else if ((($117)|(0))==53) {
        label = 141; break;
      }
      else if ((($117)|(0))==54) {
        label = 142; break;
      }
      else if ((($117)|(0))==55) {
        label = 143; break;
      }
      else if ((($117)|(0))==56) {
        label = 144; break;
      }
      else if ((($117)|(0))==57) {
        label = 145; break;
      }
      else if ((($117)|(0))==58) {
        label = 146; break;
      }
      else if ((($117)|(0))==59) {
        label = 147; break;
      }
      else if ((($117)|(0))==60) {
        label = 148; break;
      }
      else if ((($117)|(0))==61) {
        label = 149; break;
      }
      else if ((($117)|(0))==62) {
        label = 150; break;
      }
      else if ((($117)|(0))==63) {
        label = 151; break;
      }
      else if ((($117)|(0))==64) {
        label = 152; break;
      }
      else if ((($117)|(0))==65) {
        label = 153; break;
      }
      else if ((($117)|(0))==66) {
        label = 154; break;
      }
      else if ((($117)|(0))==67) {
        label = 155; break;
      }
      else if ((($117)|(0))==69) {
        label = 156; break;
      }
      else if ((($117)|(0))==70) {
        label = 157; break;
      }
      else if ((($117)|(0))==71) {
        label = 158; break;
      }
      else if ((($117)|(0))==72) {
        label = 159; break;
      }
      else if ((($117)|(0))==73) {
        label = 160; break;
      }
      else if ((($117)|(0))==74) {
        label = 161; break;
      }
      else if ((($117)|(0))==75) {
        label = 162; break;
      }
      else if ((($117)|(0))==76) {
        label = 163; break;
      }
      else if ((($117)|(0))==77) {
        label = 164; break;
      }
      else if ((($117)|(0))==78) {
        label = 165; break;
      }
      else if ((($117)|(0))==79) {
        label = 166; break;
      }
      else if ((($117)|(0))==81) {
        label = 167; break;
      }
      else if ((($117)|(0))==82) {
        label = 168; break;
      }
      else if ((($117)|(0))==83) {
        label = 169; break;
      }
      else if ((($117)|(0))==84) {
        label = 170; break;
      }
      else if ((($117)|(0))==85) {
        label = 171; break;
      }
      else if ((($117)|(0))==86) {
        label = 172; break;
      }
      else if ((($117)|(0))==87) {
        label = 173; break;
      }
      else if ((($117)|(0))==88) {
        label = 174; break;
      }
      else if ((($117)|(0))==89) {
        label = 175; break;
      }
      else if ((($117)|(0))==90) {
        label = 176; break;
      }
      else if ((($117)|(0))==91) {
        label = 177; break;
      }
      else if ((($117)|(0))==92) {
        label = 181; break;
      }
      else if ((($117)|(0))==93) {
        label = 185; break;
      }
      else if ((($117)|(0))==94) {
        label = 186; break;
      }
      else if ((($117)|(0))==95) {
        label = 187; break;
      }
      else if ((($117)|(0))==96) {
        label = 188; break;
      }
      else if ((($117)|(0))==97) {
        label = 189; break;
      }
      else if ((($117)|(0))==98) {
        label = 190; break;
      }
      else if ((($117)|(0))==99) {
        label = 191; break;
      }
      else if ((($117)|(0))==100) {
        label = 195; break;
      }
      else if ((($117)|(0))==101) {
        label = 199; break;
      }
      else if ((($117)|(0))==102) {
        label = 200; break;
      }
      else if ((($117)|(0))==104) {
        label = 201; break;
      }
      else if ((($117)|(0))==105) {
        label = 202; break;
      }
      else if ((($117)|(0))==106) {
        label = 203; break;
      }
      else if ((($117)|(0))==110) {
        label = 204; break;
      }
      else if ((($117)|(0))==111) {
        label = 205; break;
      }
      else if ((($117)|(0))==114) {
        label = 206; break;
      }
      else if ((($117)|(0))==115) {
        label = 207; break;
      }
      else if ((($117)|(0))==116) {
        label = 208; break;
      }
      else if ((($117)|(0))==117) {
        label = 209; break;
      }
      else if ((($117)|(0))==118) {
        label = 210; break;
      }
      else if ((($117)|(0))==119) {
        label = 211; break;
      }
      else if ((($117)|(0))==120) {
        label = 212; break;
      }
      else if ((($117)|(0))==121) {
        label = 213; break;
      }
      else if ((($117)|(0))==122) {
        label = 214; break;
      }
      else if ((($117)|(0))==123) {
        label = 215; break;
      }
      else if ((($117)|(0))==124) {
        label = 216; break;
      }
      else if ((($117)|(0))==125) {
        label = 217; break;
      }
      else if ((($117)|(0))==126) {
        label = 218; break;
      }
      else if ((($117)|(0))==127) {
        label = 219; break;
      }
      else if ((($117)|(0))==128) {
        label = 220; break;
      }
      else if ((($117)|(0))==129) {
        label = 221; break;
      }
      else if ((($117)|(0))==130) {
        label = 222; break;
      }
      else if ((($117)|(0))==131) {
        label = 223; break;
      }
      else if ((($117)|(0))==132) {
        label = 224; break;
      }
      else if ((($117)|(0))==133) {
        label = 225; break;
      }
      else if ((($117)|(0))==134) {
        label = 226; break;
      }
      else if ((($117)|(0))==135) {
        label = 227; break;
      }
      else if ((($117)|(0))==136) {
        label = 228; break;
      }
      else if ((($117)|(0))==137) {
        label = 229; break;
      }
      else if ((($117)|(0))==138) {
        label = 230; break;
      }
      else if ((($117)|(0))==139) {
        label = 231; break;
      }
      else if ((($117)|(0))==140) {
        label = 232; break;
      }
      else if ((($117)|(0))==141) {
        label = 233; break;
      }
      else if ((($117)|(0))==142) {
        label = 234; break;
      }
      else if ((($117)|(0))==143) {
        label = 235; break;
      }
      else if ((($117)|(0))==144) {
        label = 236; break;
      }
      else if ((($117)|(0))==145) {
        label = 237; break;
      }
      else if ((($117)|(0))==186) {
        label = 238; break;
      }
      else if ((($117)|(0))==187) {
        label = 239; break;
      }
      else if ((($117)|(0))==188) {
        label = 240; break;
      }
      else if ((($117)|(0))==189) {
        label = 241; break;
      }
      else if ((($117)|(0))==190) {
        label = 242; break;
      }
      else if ((($117)|(0))==191) {
        label = 243; break;
      }
      else if ((($117)|(0))==192) {
        label = 244; break;
      }
      else if ((($117)|(0))==193) {
        label = 245; break;
      }
      else if ((($117)|(0))==194) {
        label = 246; break;
      }
      else if ((($117)|(0))==195) {
        label = 247; break;
      }
      else if ((($117)|(0))==196) {
        label = 248; break;
      }
      else if ((($117)|(0))==197) {
        label = 249; break;
      }
      else if ((($117)|(0))==198) {
        label = 250; break;
      }
      else if ((($117)|(0))==199) {
        label = 251; break;
      }
      else if ((($117)|(0))==200) {
        label = 252; break;
      }
      else if ((($117)|(0))==201) {
        label = 253; break;
      }
      else if ((($117)|(0))==202) {
        label = 254; break;
      }
      else if ((($117)|(0))==203) {
        label = 255; break;
      }
      else if ((($117)|(0))==204) {
        label = 256; break;
      }
      else if ((($117)|(0))==205) {
        label = 257; break;
      }
      else if ((($117)|(0))==206) {
        label = 258; break;
      }
      else if ((($117)|(0))==207) {
        label = 259; break;
      }
      else if ((($117)|(0))==208) {
        label = 260; break;
      }
      else if ((($117)|(0))==209) {
        label = 261; break;
      }
      else if ((($117)|(0))==210) {
        label = 262; break;
      }
      else if ((($117)|(0))==211) {
        label = 263; break;
      }
      else if ((($117)|(0))==212) {
        label = 264; break;
      }
      else if ((($117)|(0))==213) {
        label = 265; break;
      }
      else if ((($117)|(0))==214) {
        label = 266; break;
      }
      else if ((($117)|(0))==215) {
        label = 267; break;
      }
      else if ((($117)|(0))==216) {
        label = 268; break;
      }
      else if ((($117)|(0))==217) {
        label = 269; break;
      }
      else if ((($117)|(0))==218) {
        label = 270; break;
      }
      else if ((($117)|(0))==219) {
        label = 271; break;
      }
      else if ((($117)|(0))==220) {
        label = 272; break;
      }
      else if ((($117)|(0))==221) {
        label = 273; break;
      }
      else if ((($117)|(0))==222) {
        label = 274; break;
      }
      else if ((($117)|(0))==223) {
        label = 275; break;
      }
      else if ((($117)|(0))==224) {
        label = 276; break;
      }
      else if ((($117)|(0))==225) {
        label = 277; break;
      }
      else if ((($117)|(0))==226) {
        label = 278; break;
      }
      else if ((($117)|(0))==227) {
        label = 279; break;
      }
      else if ((($117)|(0))==228) {
        label = 280; break;
      }
      else if ((($117)|(0))==229) {
        label = 281; break;
      }
      else if ((($117)|(0))==230) {
        label = 282; break;
      }
      else if ((($117)|(0))==232) {
        label = 285; break;
      }
      else if ((($117)|(0))==233) {
        label = 286; break;
      }
      else if ((($117)|(0))==234) {
        label = 287; break;
      }
      else if ((($117)|(0))==235) {
        label = 288; break;
      }
      else if ((($117)|(0))==240) {
        label = 289; break;
      }
      else if ((($117)|(0))==241) {
        label = 290; break;
      }
      else if ((($117)|(0))==242) {
        label = 291; break;
      }
      else if ((($117)|(0))==243) {
        label = 292; break;
      }
      else if ((($117)|(0))==244) {
        label = 293; break;
      }
      else if ((($117)|(0))==245) {
        label = 294; break;
      }
      else if ((($117)|(0))==246) {
        label = 295; break;
      }
      else if ((($117)|(0))==247) {
        label = 296; break;
      }
      else if ((($117)|(0))==248) {
        label = 297; break;
      }
      else if ((($117)|(0))==249) {
        label = 298; break;
      }
      else if ((($117)|(0))==250) {
        label = 299; break;
      }
      else if ((($117)|(0))==251) {
        label = 300; break;
      }
      else if ((($117)|(0))==252) {
        label = 301; break;
      }
      else if ((($117)|(0))==253) {
        label = 302; break;
      }
      else if ((($117)|(0))==254) {
        label = 303; break;
      }
      else if ((($117)|(0))==255) {
        label = 304; break;
      }
      else if ((($117)|(0))==256) {
        label = 305; break;
      }
      else if ((($117)|(0))==257) {
        label = 306; break;
      }
      else if ((($117)|(0))==258) {
        label = 307; break;
      }
      else if ((($117)|(0))==259) {
        label = 308; break;
      }
      else if ((($117)|(0))==267) {
        label = 309; break;
      }
      else if ((($117)|(0))==268) {
        label = 310; break;
      }
      else if ((($117)|(0))==269) {
        label = 311; break;
      }
      else if ((($117)|(0))==270) {
        label = 312; break;
      }
      else if ((($117)|(0))==271) {
        label = 313; break;
      }
      else if ((($117)|(0))==272) {
        label = 314; break;
      }
      else if ((($117)|(0))==273) {
        label = 315; break;
      }
      else if ((($117)|(0))==274) {
        label = 316; break;
      }
      else if ((($117)|(0))==275) {
        label = 317; break;
      }
      else if ((($117)|(0))==276) {
        label = 318; break;
      }
      else if ((($117)|(0))==277) {
        label = 319; break;
      }
      else if ((($117)|(0))==278) {
        label = 320; break;
      }
      else if ((($117)|(0))==279) {
        label = 321; break;
      }
      else if ((($117)|(0))==280) {
        label = 322; break;
      }
      else if ((($117)|(0))==281) {
        label = 323; break;
      }
      else if ((($117)|(0))==282) {
        label = 324; break;
      }
      else if ((($117)|(0))==283) {
        label = 325; break;
      }
      else if ((($117)|(0))==284) {
        label = 326; break;
      }
      else if ((($117)|(0))==285) {
        label = 327; break;
      }
      else if ((($117)|(0))==287) {
        label = 328; break;
      }
      else if ((($117)|(0))==288) {
        label = 329; break;
      }
      else if ((($117)|(0))==289) {
        label = 330; break;
      }
      else if ((($117)|(0))==290) {
        label = 331; break;
      }
      else if ((($117)|(0))==291) {
        label = 332; break;
      }
      else if ((($117)|(0))==292) {
        label = 333; break;
      }
      else if ((($117)|(0))==293) {
        label = 334; break;
      }
      else if ((($117)|(0))==294) {
        label = 335; break;
      }
      else if ((($117)|(0))==295) {
        label = 336; break;
      }
      else if ((($117)|(0))==296) {
        label = 337; break;
      }
      else if ((($117)|(0))==297) {
        label = 338; break;
      }
      else if ((($117)|(0))==298) {
        label = 339; break;
      }
      else if ((($117)|(0))==299) {
        label = 340; break;
      }
      else if ((($117)|(0))==300) {
        label = 341; break;
      }
      else if ((($117)|(0))==301) {
        label = 342; break;
      }
      else if ((($117)|(0))==302) {
        label = 343; break;
      }
      else if ((($117)|(0))==303) {
        label = 344; break;
      }
      else if ((($117)|(0))==304) {
        label = 348; break;
      }
      else if ((($117)|(0))==305) {
        label = 349; break;
      }
      else if ((($117)|(0))==306) {
        label = 350; break;
      }
      else if ((($117)|(0))==307) {
        label = 351; break;
      }
      else if ((($117)|(0))==308) {
        label = 352; break;
      }
      else if ((($117)|(0))==309) {
        label = 356; break;
      }
      else if ((($117)|(0))==310) {
        label = 357; break;
      }
      else if ((($117)|(0))==311) {
        label = 358; break;
      }
      else if ((($117)|(0))==312) {
        label = 359; break;
      }
      else if ((($117)|(0))==313) {
        label = 360; break;
      }
      else if ((($117)|(0))==314) {
        label = 361; break;
      }
      else if ((($117)|(0))==315) {
        label = 362; break;
      }
      else if ((($117)|(0))==316) {
        label = 363; break;
      }
      else if ((($117)|(0))==317) {
        label = 364; break;
      }
      else if ((($117)|(0))==318) {
        label = 365; break;
      }
      else if ((($117)|(0))==319) {
        label = 366; break;
      }
      else if ((($117)|(0))==326) {
        label = 369; break;
      }
      else if ((($117)|(0))==328) {
        label = 370; break;
      }
      else if ((($117)|(0))==329) {
        label = 371; break;
      }
      else if ((($117)|(0))==331) {
        label = 372; break;
      }
      else if ((($117)|(0))==332) {
        label = 373; break;
      }
      else if ((($117)|(0))==333) {
        label = 374; break;
      }
      else if ((($117)|(0))==334) {
        label = 375; break;
      }
      else if ((($117)|(0))==335) {
        label = 376; break;
      }
      else if ((($117)|(0))==336) {
        label = 377; break;
      }
      else if ((($117)|(0))==337) {
        label = 378; break;
      }
      else if ((($117)|(0))==338) {
        label = 379; break;
      }
      else if ((($117)|(0))==339) {
        label = 380; break;
      }
      else if ((($117)|(0))==340) {
        label = 381; break;
      }
      else if ((($117)|(0))==341) {
        label = 382; break;
      }
      else if ((($117)|(0))==342) {
        label = 383; break;
      }
      else if ((($117)|(0))==343) {
        label = 384; break;
      }
      else if ((($117)|(0))==344) {
        label = 385; break;
      }
      else if ((($117)|(0))==345) {
        label = 386; break;
      }
      else if ((($117)|(0))==346) {
        label = 387; break;
      }
      else if ((($117)|(0))==347) {
        label = 388; break;
      }
      else if ((($117)|(0))==348) {
        label = 389; break;
      }
      else if ((($117)|(0))==349) {
        label = 390; break;
      }
      else if ((($117)|(0))==350) {
        label = 391; break;
      }
      else if ((($117)|(0))==351) {
        label = 392; break;
      }
      else if ((($117)|(0))==352) {
        label = 393; break;
      }
      else if ((($117)|(0))==353) {
        label = 394; break;
      }
      else if ((($117)|(0))==354) {
        label = 395; break;
      }
      else if ((($117)|(0))==355) {
        label = 396; break;
      }
      else if ((($117)|(0))==356) {
        label = 397; break;
      }
      else if ((($117)|(0))==357) {
        label = 398; break;
      }
      else if ((($117)|(0))==358) {
        label = 399; break;
      }
      else if ((($117)|(0))==360) {
        label = 400; break;
      }
      else if ((($117)|(0))==361) {
        label = 401; break;
      }
      else if ((($117)|(0))==362) {
        label = 402; break;
      }
      else if ((($117)|(0))==363) {
        label = 403; break;
      }
      else if ((($117)|(0))==364) {
        label = 404; break;
      }
      else if ((($117)|(0))==365) {
        label = 405; break;
      }
      else if ((($117)|(0))==368) {
        label = 406; break;
      }
      else if ((($117)|(0))==370) {
        label = 407; break;
      }
      else if ((($117)|(0))==371) {
        label = 408; break;
      }
      else if ((($117)|(0))==372) {
        label = 409; break;
      }
      else if ((($117)|(0))==373) {
        label = 410; break;
      }
      else if ((($117)|(0))==374) {
        label = 411; break;
      }
      else if ((($117)|(0))==375) {
        label = 412; break;
      }
      else if ((($117)|(0))==376) {
        label = 413; break;
      }
      else if ((($117)|(0))==377) {
        label = 417; break;
      }
      else if ((($117)|(0))==378) {
        label = 418; break;
      }
      else if ((($117)|(0))==379) {
        label = 419; break;
      }
      else if ((($117)|(0))==380) {
        label = 420; break;
      }
      else if ((($117)|(0))==381) {
        label = 421; break;
      }
      else if ((($117)|(0))==382) {
        label = 422; break;
      }
      else if ((($117)|(0))==383) {
        label = 423; break;
      }
      else if ((($117)|(0))==384) {
        label = 424; break;
      }
      else if ((($117)|(0))==385) {
        label = 425; break;
      }
      else if ((($117)|(0))==386) {
        label = 426; break;
      }
      else if ((($117)|(0))==387) {
        label = 427; break;
      }
      else if ((($117)|(0))==388) {
        label = 428; break;
      }
      else if ((($117)|(0))==389) {
        label = 429; break;
      }
      else if ((($117)|(0))==390) {
        label = 430; break;
      }
      else if ((($117)|(0))==391) {
        label = 431; break;
      }
      else if ((($117)|(0))==392) {
        label = 432; break;
      }
      else if ((($117)|(0))==393) {
        label = 433; break;
      }
      else if ((($117)|(0))==394) {
        label = 434; break;
      }
      else if ((($117)|(0))==396) {
        label = 438; break;
      }
      else if ((($117)|(0))==398) {
        label = 441; break;
      }
      else if ((($117)|(0))==401) {
        label = 442; break;
      }
      else if ((($117)|(0))==403) {
        label = 443; break;
      }
      else if ((($117)|(0))==411) {
        label = 444; break;
      }
      else if ((($117)|(0))==412) {
        label = 445; break;
      }
      else if ((($117)|(0))==414) {
        label = 446; break;
      }
      else if ((($117)|(0))==415) {
        label = 447; break;
      }
      else if ((($117)|(0))==416) {
        label = 448; break;
      }
      else if ((($117)|(0))==417) {
        label = 449; break;
      }
      else if ((($117)|(0))==418) {
        label = 450; break;
      }
      else if ((($117)|(0))==419) {
        label = 451; break;
      }
      else if ((($117)|(0))==420) {
        label = 452; break;
      }
      else if ((($117)|(0))==421) {
        label = 453; break;
      }
      else if ((($117)|(0))==422) {
        label = 454; break;
      }
      else if ((($117)|(0))==428) {
        label = 455; break;
      }
      else if ((($117)|(0))==429) {
        label = 456; break;
      }
      else if ((($117)|(0))==430) {
        label = 457; break;
      }
      else if ((($117)|(0))==431) {
        label = 458; break;
      }
      else if ((($117)|(0))==432) {
        label = 459; break;
      }
      else if ((($117)|(0))==433) {
        label = 460; break;
      }
      else if ((($117)|(0))==434) {
        label = 461; break;
      }
      else if ((($117)|(0))==439) {
        label = 462; break;
      }
      else if ((($117)|(0))==440) {
        label = 463; break;
      }
      else if ((($117)|(0))==441) {
        label = 464; break;
      }
      else if ((($117)|(0))==442) {
        label = 465; break;
      }
      else if ((($117)|(0))==445) {
        label = 466; break;
      }
      else if ((($117)|(0))==446) {
        label = 467; break;
      }
      else if ((($117)|(0))==447) {
        label = 468; break;
      }
      else if ((($117)|(0))==448) {
        label = 469; break;
      }
      else if ((($117)|(0))==449) {
        label = 470; break;
      }
      else if ((($117)|(0))==450) {
        label = 471; break;
      }
      else if ((($117)|(0))==451) {
        label = 472; break;
      }
      else if ((($117)|(0))==452) {
        label = 473; break;
      }
      else if ((($117)|(0))==453) {
        label = 474; break;
      }
      else if ((($117)|(0))==454) {
        label = 475; break;
      }
      else if ((($117)|(0))==455) {
        label = 476; break;
      }
      else if ((($117)|(0))==456) {
        label = 477; break;
      }
      else if ((($117)|(0))==457) {
        label = 478; break;
      }
      else if ((($117)|(0))==458) {
        label = 479; break;
      }
      else if ((($117)|(0))==459) {
        label = 482; break;
      }
      else if ((($117)|(0))==462) {
        label = 483; break;
      }
      else if ((($117)|(0))==463) {
        label = 484; break;
      }
      else if ((($117)|(0))==464) {
        label = 485; break;
      }
      else if ((($117)|(0))==465) {
        label = 486; break;
      }
      else if ((($117)|(0))==466) {
        label = 487; break;
      }
      else if ((($117)|(0))==467) {
        label = 488; break;
      }
      else if ((($117)|(0))==468) {
        label = 489; break;
      }
      else if ((($117)|(0))==469) {
        label = 490; break;
      }
      else if ((($117)|(0))==470) {
        label = 491; break;
      }
      else if ((($117)|(0))==471) {
        label = 492; break;
      }
      else if ((($117)|(0))==472) {
        label = 493; break;
      }
      else if ((($117)|(0))==473) {
        label = 494; break;
      }
      else if ((($117)|(0))==474) {
        label = 495; break;
      }
      else if ((($117)|(0))==475) {
        label = 496; break;
      }
      else if ((($117)|(0))==476) {
        label = 497; break;
      }
      else if ((($117)|(0))==477) {
        label = 498; break;
      }
      else if ((($117)|(0))==478) {
        label = 499; break;
      }
      else if ((($117)|(0))==479) {
        label = 500; break;
      }
      else if ((($117)|(0))==480) {
        label = 501; break;
      }
      else if ((($117)|(0))==481) {
        label = 502; break;
      }
      else if ((($117)|(0))==482) {
        label = 503; break;
      }
      else if ((($117)|(0))==483) {
        label = 504; break;
      }
      else if ((($117)|(0))==484) {
        label = 505; break;
      }
      else if ((($117)|(0))==485) {
        label = 506; break;
      }
      else if ((($117)|(0))==486) {
        label = 507; break;
      }
      else if ((($117)|(0))==487) {
        label = 508; break;
      }
      else if ((($117)|(0))==488) {
        label = 509; break;
      }
      else if ((($117)|(0))==489) {
        label = 510; break;
      }
      else if ((($117)|(0))==490) {
        label = 511; break;
      }
      else if ((($117)|(0))==491) {
        label = 512; break;
      }
      else if ((($117)|(0))==492) {
        label = 513; break;
      }
      else if ((($117)|(0))==493) {
        label = 514; break;
      }
      else if ((($117)|(0))==494) {
        label = 515; break;
      }
      else if ((($117)|(0))==495) {
        label = 516; break;
      }
      else if ((($117)|(0))==496) {
        label = 517; break;
      }
      else if ((($117)|(0))==497) {
        label = 518; break;
      }
      else if ((($117)|(0))==498) {
        label = 519; break;
      }
      else if ((($117)|(0))==501) {
        label = 520; break;
      }
      else if ((($117)|(0))==502) {
        label = 521; break;
      }
      else if ((($117)|(0))==505) {
        label = 522; break;
      }
      else if ((($117)|(0))==506) {
        label = 523; break;
      }
      else if ((($117)|(0))==507) {
        label = 524; break;
      }
      else if ((($117)|(0))==508) {
        label = 525; break;
      }
      else if ((($117)|(0))==509) {
        label = 528; break;
      }
      else if ((($117)|(0))==510) {
        label = 529; break;
      }
      else if ((($117)|(0))==512) {
        label = 536; break;
      }
      else if ((($117)|(0))==513) {
        label = 537; break;
      }
      else if ((($117)|(0))==514) {
        label = 538; break;
      }
      else if ((($117)|(0))==515) {
        label = 539; break;
      }
      else if ((($117)|(0))==516) {
        label = 540; break;
      }
      else if ((($117)|(0))==538) {
        label = 541; break;
      }
      else if ((($117)|(0))==540) {
        label = 542; break;
      }
      else if ((($117)|(0))==543) {
        label = 543; break;
      }
      else if ((($117)|(0))==544) {
        label = 544; break;
      }
      else {
      label = 545; break;
      }
    case 83: 
      var $118=$p_addr;
      var $lstate=(($118+40)|0);
      HEAP32[(($lstate)>>2)]=0;
      var $119=$p_addr;
      var $locals=(($119+76)|0);
      var $120=HEAP32[(($locals)>>2)];
      var $tobool163=(($120)|(0))!=0;
      if ($tobool163) { label = 85; break; } else { label = 84; break; }
    case 84: 
      var $121=$p_addr;
      var $call165=_cons_gen($121, 0, 0);
      var $122=$p_addr;
      var $locals166=(($122+76)|0);
      HEAP32[(($locals166)>>2)]=$call165;
      label = 85; break;
    case 85: 
      label = 546; break;
    case 86: 
      var $123=$p_addr;
      var $124=$yyvsp;
      var $arrayidx169=(($124)|0);
      var $nd=$arrayidx169;
      var $125=HEAP32[(($nd)>>2)];
      var $call170=_new_scope($123, $125);
      var $126=$p_addr;
      var $tree=(($126+1136)|0);
      HEAP32[(($tree)>>2)]=$call170;
      label = 546; break;
    case 87: 
      var $127=$yyvsp;
      var $arrayidx172=((($127)-(4))|0);
      var $nd173=$arrayidx172;
      var $128=HEAP32[(($nd173)>>2)];
      var $nd174=$yyval;
      HEAP32[(($nd174)>>2)]=$128;
      label = 546; break;
    case 88: 
      var $129=$p_addr;
      var $call176=_new_begin($129, 0);
      var $nd177=$yyval;
      HEAP32[(($nd177)>>2)]=$call176;
      label = 546; break;
    case 89: 
      var $130=$p_addr;
      var $131=$yyvsp;
      var $arrayidx179=(($131)|0);
      var $nd180=$arrayidx179;
      var $132=HEAP32[(($nd180)>>2)];
      var $call181=_new_begin($130, $132);
      var $nd182=$yyval;
      HEAP32[(($nd182)>>2)]=$call181;
      label = 546; break;
    case 90: 
      var $133=$p_addr;
      var $134=$yyvsp;
      var $arrayidx184=((($134)-(8))|0);
      var $nd185=$arrayidx184;
      var $135=HEAP32[(($nd185)>>2)];
      var $136=$p_addr;
      var $137=$yyvsp;
      var $arrayidx186=(($137)|0);
      var $nd187=$arrayidx186;
      var $138=HEAP32[(($nd187)>>2)];
      var $call188=_list1_gen($136, $138);
      var $call189=_append_gen($133, $135, $call188);
      var $nd190=$yyval;
      HEAP32[(($nd190)>>2)]=$call189;
      label = 546; break;
    case 91: 
      var $139=$p_addr;
      var $call192=_new_begin($139, 0);
      var $nd193=$yyval;
      HEAP32[(($nd193)>>2)]=$call192;
      label = 546; break;
    case 92: 
      var $140=$p_addr;
      var $call195=_local_switch($140);
      var $nd196=$yyval;
      HEAP32[(($nd196)>>2)]=$call195;
      label = 546; break;
    case 93: 
      var $141=$p_addr;
      _yyerror($141, ((93916)|0));
      var $142=$p_addr;
      var $143=$yyvsp;
      var $arrayidx198=((($143)-(12))|0);
      var $nd199=$arrayidx198;
      var $144=HEAP32[(($nd199)>>2)];
      _local_resume($142, $144);
      var $nd200=$yyval;
      HEAP32[(($nd200)>>2)]=0;
      label = 546; break;
    case 94: 
      var $145=$yyvsp;
      var $arrayidx202=((($145)-(8))|0);
      var $nd203=$arrayidx202;
      var $146=HEAP32[(($nd203)>>2)];
      var $tobool204=(($146)|(0))!=0;
      if ($tobool204) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $147=$p_addr;
      var $148=$yyvsp;
      var $arrayidx206=((($148)-(12))|0);
      var $nd207=$arrayidx206;
      var $149=HEAP32[(($nd207)>>2)];
      var $150=$yyvsp;
      var $arrayidx208=((($150)-(8))|0);
      var $nd209=$arrayidx208;
      var $151=HEAP32[(($nd209)>>2)];
      var $152=$yyvsp;
      var $arrayidx210=((($152)-(4))|0);
      var $nd211=$arrayidx210;
      var $153=HEAP32[(($nd211)>>2)];
      var $call212=_new_rescue($147, $149, $151, $153);
      var $nd213=$yyval;
      HEAP32[(($nd213)>>2)]=$call212;
      label = 100; break;
    case 96: 
      var $154=$yyvsp;
      var $arrayidx215=((($154)-(4))|0);
      var $nd216=$arrayidx215;
      var $155=HEAP32[(($nd216)>>2)];
      var $tobool217=(($155)|(0))!=0;
      if ($tobool217) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $156=$p_addr;
      _yywarn($156, ((113660)|0));
      var $157=$p_addr;
      var $158=$yyvsp;
      var $arrayidx219=((($158)-(12))|0);
      var $nd220=$arrayidx219;
      var $159=HEAP32[(($nd220)>>2)];
      var $160=$p_addr;
      var $161=$yyvsp;
      var $arrayidx221=((($161)-(4))|0);
      var $nd222=$arrayidx221;
      var $162=HEAP32[(($nd222)>>2)];
      var $call223=_list1_gen($160, $162);
      var $call224=_append_gen($157, $159, $call223);
      var $nd225=$yyval;
      HEAP32[(($nd225)>>2)]=$call224;
      label = 99; break;
    case 98: 
      var $163=$yyvsp;
      var $arrayidx227=((($163)-(12))|0);
      var $nd228=$arrayidx227;
      var $164=HEAP32[(($nd228)>>2)];
      var $nd229=$yyval;
      HEAP32[(($nd229)>>2)]=$164;
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      var $165=$yyvsp;
      var $arrayidx232=(($165)|0);
      var $nd233=$arrayidx232;
      var $166=HEAP32[(($nd233)>>2)];
      var $tobool234=(($166)|(0))!=0;
      if ($tobool234) { label = 101; break; } else { label = 105; break; }
    case 101: 
      var $nd236=$yyval;
      var $167=HEAP32[(($nd236)>>2)];
      var $tobool237=(($167)|(0))!=0;
      if ($tobool237) { label = 102; break; } else { label = 103; break; }
    case 102: 
      var $168=$p_addr;
      var $nd239=$yyval;
      var $169=HEAP32[(($nd239)>>2)];
      var $170=$yyvsp;
      var $arrayidx240=(($170)|0);
      var $nd241=$arrayidx240;
      var $171=HEAP32[(($nd241)>>2)];
      var $call242=_new_ensure($168, $169, $171);
      var $nd243=$yyval;
      HEAP32[(($nd243)>>2)]=$call242;
      label = 104; break;
    case 103: 
      var $172=$p_addr;
      var $173=$yyvsp;
      var $arrayidx245=(($173)|0);
      var $nd246=$arrayidx245;
      var $174=HEAP32[(($nd246)>>2)];
      var $175=$p_addr;
      var $176=$p_addr;
      var $call247=_new_nil($176);
      var $call248=_list1_gen($175, $call247);
      var $call249=_append_gen($172, $174, $call248);
      var $nd250=$yyval;
      HEAP32[(($nd250)>>2)]=$call249;
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      label = 546; break;
    case 106: 
      var $177=$yyvsp;
      var $arrayidx254=((($177)-(4))|0);
      var $nd255=$arrayidx254;
      var $178=HEAP32[(($nd255)>>2)];
      var $nd256=$yyval;
      HEAP32[(($nd256)>>2)]=$178;
      label = 546; break;
    case 107: 
      var $179=$p_addr;
      var $call258=_new_begin($179, 0);
      var $nd259=$yyval;
      HEAP32[(($nd259)>>2)]=$call258;
      label = 546; break;
    case 108: 
      var $180=$p_addr;
      var $181=$yyvsp;
      var $arrayidx261=(($181)|0);
      var $nd262=$arrayidx261;
      var $182=HEAP32[(($nd262)>>2)];
      var $call263=_new_begin($180, $182);
      var $nd264=$yyval;
      HEAP32[(($nd264)>>2)]=$call263;
      label = 546; break;
    case 109: 
      var $183=$p_addr;
      var $184=$yyvsp;
      var $arrayidx266=((($184)-(8))|0);
      var $nd267=$arrayidx266;
      var $185=HEAP32[(($nd267)>>2)];
      var $186=$p_addr;
      var $187=$yyvsp;
      var $arrayidx268=(($187)|0);
      var $nd269=$arrayidx268;
      var $188=HEAP32[(($nd269)>>2)];
      var $call270=_list1_gen($186, $188);
      var $call271=_append_gen($183, $185, $call270);
      var $nd272=$yyval;
      HEAP32[(($nd272)>>2)]=$call271;
      label = 546; break;
    case 110: 
      var $189=$p_addr;
      var $190=$yyvsp;
      var $arrayidx274=(($190)|0);
      var $nd275=$arrayidx274;
      var $191=HEAP32[(($nd275)>>2)];
      var $call276=_new_begin($189, $191);
      var $nd277=$yyval;
      HEAP32[(($nd277)>>2)]=$call276;
      label = 546; break;
    case 111: 
      var $192=$p_addr;
      var $lstate279=(($192+40)|0);
      HEAP32[(($lstate279)>>2)]=7;
      label = 546; break;
    case 112: 
      var $193=$p_addr;
      var $194=$yyvsp;
      var $arrayidx281=((($194)-(8))|0);
      var $id=$arrayidx281;
      var $195=HEAP16[(($id)>>1)];
      var $196=$yyvsp;
      var $arrayidx282=(($196)|0);
      var $id283=$arrayidx282;
      var $197=HEAP16[(($id283)>>1)];
      var $call284=_new_alias($193, $195, $197);
      var $nd285=$yyval;
      HEAP32[(($nd285)>>2)]=$call284;
      label = 546; break;
    case 113: 
      var $198=$yyvsp;
      var $arrayidx287=(($198)|0);
      var $nd288=$arrayidx287;
      var $199=HEAP32[(($nd288)>>2)];
      var $nd289=$yyval;
      HEAP32[(($nd289)>>2)]=$199;
      label = 546; break;
    case 114: 
      var $200=$p_addr;
      var $201=$yyvsp;
      var $arrayidx291=(($201)|0);
      var $nd292=$arrayidx291;
      var $202=HEAP32[(($nd292)>>2)];
      var $call293=_cond($202);
      var $203=$yyvsp;
      var $arrayidx294=((($203)-(8))|0);
      var $nd295=$arrayidx294;
      var $204=HEAP32[(($nd295)>>2)];
      var $call296=_new_if($200, $call293, $204, 0);
      var $nd297=$yyval;
      HEAP32[(($nd297)>>2)]=$call296;
      label = 546; break;
    case 115: 
      var $205=$p_addr;
      var $206=$yyvsp;
      var $arrayidx299=(($206)|0);
      var $nd300=$arrayidx299;
      var $207=HEAP32[(($nd300)>>2)];
      var $call301=_cond($207);
      var $208=$yyvsp;
      var $arrayidx302=((($208)-(8))|0);
      var $nd303=$arrayidx302;
      var $209=HEAP32[(($nd303)>>2)];
      var $call304=_new_unless($205, $call301, $209, 0);
      var $nd305=$yyval;
      HEAP32[(($nd305)>>2)]=$call304;
      label = 546; break;
    case 116: 
      var $210=$p_addr;
      var $211=$yyvsp;
      var $arrayidx307=(($211)|0);
      var $nd308=$arrayidx307;
      var $212=HEAP32[(($nd308)>>2)];
      var $call309=_cond($212);
      var $213=$yyvsp;
      var $arrayidx310=((($213)-(8))|0);
      var $nd311=$arrayidx310;
      var $214=HEAP32[(($nd311)>>2)];
      var $call312=_new_while($210, $call309, $214);
      var $nd313=$yyval;
      HEAP32[(($nd313)>>2)]=$call312;
      label = 546; break;
    case 117: 
      var $215=$p_addr;
      var $216=$yyvsp;
      var $arrayidx315=(($216)|0);
      var $nd316=$arrayidx315;
      var $217=HEAP32[(($nd316)>>2)];
      var $call317=_cond($217);
      var $218=$yyvsp;
      var $arrayidx318=((($218)-(8))|0);
      var $nd319=$arrayidx318;
      var $219=HEAP32[(($nd319)>>2)];
      var $call320=_new_until($215, $call317, $219);
      var $nd321=$yyval;
      HEAP32[(($nd321)>>2)]=$call320;
      label = 546; break;
    case 118: 
      var $220=$p_addr;
      var $221=$yyvsp;
      var $arrayidx323=((($221)-(8))|0);
      var $nd324=$arrayidx323;
      var $222=HEAP32[(($nd324)>>2)];
      var $223=$p_addr;
      var $224=$p_addr;
      var $225=$yyvsp;
      var $arrayidx325=(($225)|0);
      var $nd326=$arrayidx325;
      var $226=HEAP32[(($nd326)>>2)];
      var $call327=_list3_gen($224, 0, 0, $226);
      var $call328=_list1_gen($223, $call327);
      var $call329=_new_rescue($220, $222, $call328, 0);
      var $nd330=$yyval;
      HEAP32[(($nd330)>>2)]=$call329;
      label = 546; break;
    case 119: 
      var $227=$p_addr;
      _yyerror($227, ((113068)|0));
      var $228=$p_addr;
      var $229=$yyvsp;
      var $arrayidx332=((($229)-(4))|0);
      var $nd333=$arrayidx332;
      var $230=HEAP32[(($nd333)>>2)];
      var $call334=_new_postexe($228, $230);
      var $nd335=$yyval;
      HEAP32[(($nd335)>>2)]=$call334;
      label = 546; break;
    case 120: 
      var $231=$p_addr;
      var $232=$yyvsp;
      var $arrayidx337=((($232)-(8))|0);
      var $nd338=$arrayidx337;
      var $233=HEAP32[(($nd338)>>2)];
      var $234=$yyvsp;
      var $arrayidx339=(($234)|0);
      var $nd340=$arrayidx339;
      var $235=HEAP32[(($nd340)>>2)];
      var $call341=_new_masgn($231, $233, $235);
      var $nd342=$yyval;
      HEAP32[(($nd342)>>2)]=$call341;
      label = 546; break;
    case 121: 
      var $236=$p_addr;
      var $237=$yyvsp;
      var $arrayidx344=((($237)-(8))|0);
      var $nd345=$arrayidx344;
      var $238=HEAP32[(($nd345)>>2)];
      var $239=$yyvsp;
      var $arrayidx346=((($239)-(4))|0);
      var $id347=$arrayidx346;
      var $240=HEAP16[(($id347)>>1)];
      var $241=$yyvsp;
      var $arrayidx348=(($241)|0);
      var $nd349=$arrayidx348;
      var $242=HEAP32[(($nd349)>>2)];
      var $call350=_new_op_asgn($236, $238, $240, $242);
      var $nd351=$yyval;
      HEAP32[(($nd351)>>2)]=$call350;
      label = 546; break;
    case 122: 
      var $243=$p_addr;
      var $244=$p_addr;
      var $245=$yyvsp;
      var $arrayidx353=((($245)-(20))|0);
      var $nd354=$arrayidx353;
      var $246=HEAP32[(($nd354)>>2)];
      var $247=$p_addr;
      var $call355=_intern_gen2($247, ((112168)|0), 2);
      var $248=$yyvsp;
      var $arrayidx356=((($248)-(12))|0);
      var $nd357=$arrayidx356;
      var $249=HEAP32[(($nd357)>>2)];
      var $call358=_new_call($244, $246, $call355, $249);
      var $250=$yyvsp;
      var $arrayidx359=((($250)-(4))|0);
      var $id360=$arrayidx359;
      var $251=HEAP16[(($id360)>>1)];
      var $252=$yyvsp;
      var $arrayidx361=(($252)|0);
      var $nd362=$arrayidx361;
      var $253=HEAP32[(($nd362)>>2)];
      var $call363=_new_op_asgn($243, $call358, $251, $253);
      var $nd364=$yyval;
      HEAP32[(($nd364)>>2)]=$call363;
      label = 546; break;
    case 123: 
      var $254=$p_addr;
      var $255=$p_addr;
      var $256=$yyvsp;
      var $arrayidx366=((($256)-(16))|0);
      var $nd367=$arrayidx366;
      var $257=HEAP32[(($nd367)>>2)];
      var $258=$yyvsp;
      var $arrayidx368=((($258)-(8))|0);
      var $id369=$arrayidx368;
      var $259=HEAP16[(($id369)>>1)];
      var $call370=_new_call($255, $257, $259, 0);
      var $260=$yyvsp;
      var $arrayidx371=((($260)-(4))|0);
      var $id372=$arrayidx371;
      var $261=HEAP16[(($id372)>>1)];
      var $262=$yyvsp;
      var $arrayidx373=(($262)|0);
      var $nd374=$arrayidx373;
      var $263=HEAP32[(($nd374)>>2)];
      var $call375=_new_op_asgn($254, $call370, $261, $263);
      var $nd376=$yyval;
      HEAP32[(($nd376)>>2)]=$call375;
      label = 546; break;
    case 124: 
      var $264=$p_addr;
      var $265=$p_addr;
      var $266=$yyvsp;
      var $arrayidx378=((($266)-(16))|0);
      var $nd379=$arrayidx378;
      var $267=HEAP32[(($nd379)>>2)];
      var $268=$yyvsp;
      var $arrayidx380=((($268)-(8))|0);
      var $id381=$arrayidx380;
      var $269=HEAP16[(($id381)>>1)];
      var $call382=_new_call($265, $267, $269, 0);
      var $270=$yyvsp;
      var $arrayidx383=((($270)-(4))|0);
      var $id384=$arrayidx383;
      var $271=HEAP16[(($id384)>>1)];
      var $272=$yyvsp;
      var $arrayidx385=(($272)|0);
      var $nd386=$arrayidx385;
      var $273=HEAP32[(($nd386)>>2)];
      var $call387=_new_op_asgn($264, $call382, $271, $273);
      var $nd388=$yyval;
      HEAP32[(($nd388)>>2)]=$call387;
      label = 546; break;
    case 125: 
      var $274=$p_addr;
      _yyerror($274, ((111580)|0));
      var $nd390=$yyval;
      HEAP32[(($nd390)>>2)]=0;
      label = 546; break;
    case 126: 
      var $275=$p_addr;
      var $276=$p_addr;
      var $277=$yyvsp;
      var $arrayidx392=((($277)-(16))|0);
      var $nd393=$arrayidx392;
      var $278=HEAP32[(($nd393)>>2)];
      var $279=$yyvsp;
      var $arrayidx394=((($279)-(8))|0);
      var $id395=$arrayidx394;
      var $280=HEAP16[(($id395)>>1)];
      var $call396=_new_call($276, $278, $280, 0);
      var $281=$yyvsp;
      var $arrayidx397=((($281)-(4))|0);
      var $id398=$arrayidx397;
      var $282=HEAP16[(($id398)>>1)];
      var $283=$yyvsp;
      var $arrayidx399=(($283)|0);
      var $nd400=$arrayidx399;
      var $284=HEAP32[(($nd400)>>2)];
      var $call401=_new_op_asgn($275, $call396, $282, $284);
      var $nd402=$yyval;
      HEAP32[(($nd402)>>2)]=$call401;
      label = 546; break;
    case 127: 
      var $285=$p_addr;
      var $286=$yyvsp;
      var $arrayidx404=((($286)-(8))|0);
      var $nd405=$arrayidx404;
      var $287=HEAP32[(($nd405)>>2)];
      _backref_error($285, $287);
      var $288=$p_addr;
      var $call406=_new_begin($288, 0);
      var $nd407=$yyval;
      HEAP32[(($nd407)>>2)]=$call406;
      label = 546; break;
    case 128: 
      var $289=$p_addr;
      var $290=$yyvsp;
      var $arrayidx409=((($290)-(8))|0);
      var $nd410=$arrayidx409;
      var $291=HEAP32[(($nd410)>>2)];
      var $292=$p_addr;
      var $293=$yyvsp;
      var $arrayidx411=(($293)|0);
      var $nd412=$arrayidx411;
      var $294=HEAP32[(($nd412)>>2)];
      var $call413=_new_array($292, $294);
      var $call414=_new_asgn($289, $291, $call413);
      var $nd415=$yyval;
      HEAP32[(($nd415)>>2)]=$call414;
      label = 546; break;
    case 129: 
      var $295=$p_addr;
      var $296=$yyvsp;
      var $arrayidx417=((($296)-(8))|0);
      var $nd418=$arrayidx417;
      var $297=HEAP32[(($nd418)>>2)];
      var $298=$yyvsp;
      var $arrayidx419=(($298)|0);
      var $nd420=$arrayidx419;
      var $299=HEAP32[(($nd420)>>2)];
      var $call421=_new_masgn($295, $297, $299);
      var $nd422=$yyval;
      HEAP32[(($nd422)>>2)]=$call421;
      label = 546; break;
    case 130: 
      var $300=$p_addr;
      var $301=$yyvsp;
      var $arrayidx424=((($301)-(8))|0);
      var $nd425=$arrayidx424;
      var $302=HEAP32[(($nd425)>>2)];
      var $303=$p_addr;
      var $304=$yyvsp;
      var $arrayidx426=(($304)|0);
      var $nd427=$arrayidx426;
      var $305=HEAP32[(($nd427)>>2)];
      var $call428=_new_array($303, $305);
      var $call429=_new_masgn($300, $302, $call428);
      var $nd430=$yyval;
      HEAP32[(($nd430)>>2)]=$call429;
      label = 546; break;
    case 131: 
      var $306=$p_addr;
      var $307=$yyvsp;
      var $arrayidx432=((($307)-(8))|0);
      var $nd433=$arrayidx432;
      var $308=HEAP32[(($nd433)>>2)];
      var $309=$yyvsp;
      var $arrayidx434=(($309)|0);
      var $nd435=$arrayidx434;
      var $310=HEAP32[(($nd435)>>2)];
      var $call436=_new_asgn($306, $308, $310);
      var $nd437=$yyval;
      HEAP32[(($nd437)>>2)]=$call436;
      label = 546; break;
    case 132: 
      var $311=$p_addr;
      var $312=$yyvsp;
      var $arrayidx439=((($312)-(8))|0);
      var $nd440=$arrayidx439;
      var $313=HEAP32[(($nd440)>>2)];
      var $314=$yyvsp;
      var $arrayidx441=(($314)|0);
      var $nd442=$arrayidx441;
      var $315=HEAP32[(($nd442)>>2)];
      var $call443=_new_asgn($311, $313, $315);
      var $nd444=$yyval;
      HEAP32[(($nd444)>>2)]=$call443;
      label = 546; break;
    case 133: 
      var $316=$p_addr;
      var $317=$yyvsp;
      var $arrayidx446=((($317)-(8))|0);
      var $nd447=$arrayidx446;
      var $318=HEAP32[(($nd447)>>2)];
      var $319=$yyvsp;
      var $arrayidx448=(($319)|0);
      var $nd449=$arrayidx448;
      var $320=HEAP32[(($nd449)>>2)];
      var $call450=_new_and($316, $318, $320);
      var $nd451=$yyval;
      HEAP32[(($nd451)>>2)]=$call450;
      label = 546; break;
    case 134: 
      var $321=$p_addr;
      var $322=$yyvsp;
      var $arrayidx453=((($322)-(8))|0);
      var $nd454=$arrayidx453;
      var $323=HEAP32[(($nd454)>>2)];
      var $324=$yyvsp;
      var $arrayidx455=(($324)|0);
      var $nd456=$arrayidx455;
      var $325=HEAP32[(($nd456)>>2)];
      var $call457=_new_or($321, $323, $325);
      var $nd458=$yyval;
      HEAP32[(($nd458)>>2)]=$call457;
      label = 546; break;
    case 135: 
      var $326=$p_addr;
      var $327=$yyvsp;
      var $arrayidx460=(($327)|0);
      var $nd461=$arrayidx460;
      var $328=HEAP32[(($nd461)>>2)];
      var $call462=_cond($328);
      var $call463=_call_uni_op($326, $call462, ((111092)|0));
      var $nd464=$yyval;
      HEAP32[(($nd464)>>2)]=$call463;
      label = 546; break;
    case 136: 
      var $329=$p_addr;
      var $330=$yyvsp;
      var $arrayidx466=(($330)|0);
      var $nd467=$arrayidx466;
      var $331=HEAP32[(($nd467)>>2)];
      var $call468=_cond($331);
      var $call469=_call_uni_op($329, $call468, ((111092)|0));
      var $nd470=$yyval;
      HEAP32[(($nd470)>>2)]=$call469;
      label = 546; break;
    case 137: 
      var $332=$yyvsp;
      var $arrayidx472=(($332)|0);
      var $nd473=$arrayidx472;
      var $333=HEAP32[(($nd473)>>2)];
      var $tobool474=(($333)|(0))!=0;
      if ($tobool474) { label = 139; break; } else { label = 138; break; }
    case 138: 
      var $334=$p_addr;
      var $call476=_new_nil($334);
      var $nd477=$yyval;
      HEAP32[(($nd477)>>2)]=$call476;
      label = 140; break;
    case 139: 
      var $335=$yyvsp;
      var $arrayidx479=(($335)|0);
      var $nd480=$arrayidx479;
      var $336=HEAP32[(($nd480)>>2)];
      var $nd481=$yyval;
      HEAP32[(($nd481)>>2)]=$336;
      label = 140; break;
    case 140: 
      label = 546; break;
    case 141: 
      var $337=$p_addr;
      _local_nest($337);
      label = 546; break;
    case 142: 
      var $338=$p_addr;
      var $339=$yyvsp;
      var $arrayidx485=((($339)-(8))|0);
      var $nd486=$arrayidx485;
      var $340=HEAP32[(($nd486)>>2)];
      var $341=$yyvsp;
      var $arrayidx487=((($341)-(4))|0);
      var $nd488=$arrayidx487;
      var $342=HEAP32[(($nd488)>>2)];
      var $call489=_new_block($338, $340, $342);
      var $nd490=$yyval;
      HEAP32[(($nd490)>>2)]=$call489;
      var $343=$p_addr;
      _local_unnest($343);
      label = 546; break;
    case 143: 
      var $344=$p_addr;
      var $345=$yyvsp;
      var $arrayidx492=((($345)-(4))|0);
      var $id493=$arrayidx492;
      var $346=HEAP16[(($id493)>>1)];
      var $347=$yyvsp;
      var $arrayidx494=(($347)|0);
      var $nd495=$arrayidx494;
      var $348=HEAP32[(($nd495)>>2)];
      var $call496=_new_fcall($344, $346, $348);
      var $nd497=$yyval;
      HEAP32[(($nd497)>>2)]=$call496;
      label = 546; break;
    case 144: 
      var $349=$p_addr;
      var $350=$yyvsp;
      var $arrayidx499=((($350)-(4))|0);
      var $nd500=$arrayidx499;
      var $351=HEAP32[(($nd500)>>2)];
      var $352=$yyvsp;
      var $arrayidx501=(($352)|0);
      var $nd502=$arrayidx501;
      var $353=HEAP32[(($nd502)>>2)];
      _args_with_block($349, $351, $353);
      var $354=$p_addr;
      var $355=$yyvsp;
      var $arrayidx503=((($355)-(8))|0);
      var $id504=$arrayidx503;
      var $356=HEAP16[(($id504)>>1)];
      var $357=$yyvsp;
      var $arrayidx505=((($357)-(4))|0);
      var $nd506=$arrayidx505;
      var $358=HEAP32[(($nd506)>>2)];
      var $call507=_new_fcall($354, $356, $358);
      var $nd508=$yyval;
      HEAP32[(($nd508)>>2)]=$call507;
      label = 546; break;
    case 145: 
      var $359=$p_addr;
      var $360=$yyvsp;
      var $arrayidx510=((($360)-(12))|0);
      var $nd511=$arrayidx510;
      var $361=HEAP32[(($nd511)>>2)];
      var $362=$yyvsp;
      var $arrayidx512=((($362)-(4))|0);
      var $id513=$arrayidx512;
      var $363=HEAP16[(($id513)>>1)];
      var $364=$yyvsp;
      var $arrayidx514=(($364)|0);
      var $nd515=$arrayidx514;
      var $365=HEAP32[(($nd515)>>2)];
      var $call516=_new_call($359, $361, $363, $365);
      var $nd517=$yyval;
      HEAP32[(($nd517)>>2)]=$call516;
      label = 546; break;
    case 146: 
      var $366=$p_addr;
      var $367=$yyvsp;
      var $arrayidx519=((($367)-(4))|0);
      var $nd520=$arrayidx519;
      var $368=HEAP32[(($nd520)>>2)];
      var $369=$yyvsp;
      var $arrayidx521=(($369)|0);
      var $nd522=$arrayidx521;
      var $370=HEAP32[(($nd522)>>2)];
      _args_with_block($366, $368, $370);
      var $371=$p_addr;
      var $372=$yyvsp;
      var $arrayidx523=((($372)-(16))|0);
      var $nd524=$arrayidx523;
      var $373=HEAP32[(($nd524)>>2)];
      var $374=$yyvsp;
      var $arrayidx525=((($374)-(8))|0);
      var $id526=$arrayidx525;
      var $375=HEAP16[(($id526)>>1)];
      var $376=$yyvsp;
      var $arrayidx527=((($376)-(4))|0);
      var $nd528=$arrayidx527;
      var $377=HEAP32[(($nd528)>>2)];
      var $call529=_new_call($371, $373, $375, $377);
      var $nd530=$yyval;
      HEAP32[(($nd530)>>2)]=$call529;
      label = 546; break;
    case 147: 
      var $378=$p_addr;
      var $379=$yyvsp;
      var $arrayidx532=((($379)-(12))|0);
      var $nd533=$arrayidx532;
      var $380=HEAP32[(($nd533)>>2)];
      var $381=$yyvsp;
      var $arrayidx534=((($381)-(4))|0);
      var $id535=$arrayidx534;
      var $382=HEAP16[(($id535)>>1)];
      var $383=$yyvsp;
      var $arrayidx536=(($383)|0);
      var $nd537=$arrayidx536;
      var $384=HEAP32[(($nd537)>>2)];
      var $call538=_new_call($378, $380, $382, $384);
      var $nd539=$yyval;
      HEAP32[(($nd539)>>2)]=$call538;
      label = 546; break;
    case 148: 
      var $385=$p_addr;
      var $386=$yyvsp;
      var $arrayidx541=((($386)-(4))|0);
      var $nd542=$arrayidx541;
      var $387=HEAP32[(($nd542)>>2)];
      var $388=$yyvsp;
      var $arrayidx543=(($388)|0);
      var $nd544=$arrayidx543;
      var $389=HEAP32[(($nd544)>>2)];
      _args_with_block($385, $387, $389);
      var $390=$p_addr;
      var $391=$yyvsp;
      var $arrayidx545=((($391)-(16))|0);
      var $nd546=$arrayidx545;
      var $392=HEAP32[(($nd546)>>2)];
      var $393=$yyvsp;
      var $arrayidx547=((($393)-(8))|0);
      var $id548=$arrayidx547;
      var $394=HEAP16[(($id548)>>1)];
      var $395=$yyvsp;
      var $arrayidx549=((($395)-(4))|0);
      var $nd550=$arrayidx549;
      var $396=HEAP32[(($nd550)>>2)];
      var $call551=_new_call($390, $392, $394, $396);
      var $nd552=$yyval;
      HEAP32[(($nd552)>>2)]=$call551;
      label = 546; break;
    case 149: 
      var $397=$p_addr;
      var $398=$yyvsp;
      var $arrayidx554=(($398)|0);
      var $nd555=$arrayidx554;
      var $399=HEAP32[(($nd555)>>2)];
      var $call556=_new_super($397, $399);
      var $nd557=$yyval;
      HEAP32[(($nd557)>>2)]=$call556;
      label = 546; break;
    case 150: 
      var $400=$p_addr;
      var $401=$yyvsp;
      var $arrayidx559=(($401)|0);
      var $nd560=$arrayidx559;
      var $402=HEAP32[(($nd560)>>2)];
      var $call561=_new_yield($400, $402);
      var $nd562=$yyval;
      HEAP32[(($nd562)>>2)]=$call561;
      label = 546; break;
    case 151: 
      var $403=$p_addr;
      var $404=$p_addr;
      var $405=$yyvsp;
      var $arrayidx564=(($405)|0);
      var $nd565=$arrayidx564;
      var $406=HEAP32[(($nd565)>>2)];
      var $call566=_ret_args($404, $406);
      var $call567=_new_return($403, $call566);
      var $nd568=$yyval;
      HEAP32[(($nd568)>>2)]=$call567;
      label = 546; break;
    case 152: 
      var $407=$p_addr;
      var $408=$p_addr;
      var $409=$yyvsp;
      var $arrayidx570=(($409)|0);
      var $nd571=$arrayidx570;
      var $410=HEAP32[(($nd571)>>2)];
      var $call572=_ret_args($408, $410);
      var $call573=_new_break($407, $call572);
      var $nd574=$yyval;
      HEAP32[(($nd574)>>2)]=$call573;
      label = 546; break;
    case 153: 
      var $411=$p_addr;
      var $412=$p_addr;
      var $413=$yyvsp;
      var $arrayidx576=(($413)|0);
      var $nd577=$arrayidx576;
      var $414=HEAP32[(($nd577)>>2)];
      var $call578=_ret_args($412, $414);
      var $call579=_new_next($411, $call578);
      var $nd580=$yyval;
      HEAP32[(($nd580)>>2)]=$call579;
      label = 546; break;
    case 154: 
      var $415=$yyvsp;
      var $arrayidx582=(($415)|0);
      var $nd583=$arrayidx582;
      var $416=HEAP32[(($nd583)>>2)];
      var $nd584=$yyval;
      HEAP32[(($nd584)>>2)]=$416;
      label = 546; break;
    case 155: 
      var $417=$yyvsp;
      var $arrayidx586=((($417)-(4))|0);
      var $nd587=$arrayidx586;
      var $418=HEAP32[(($nd587)>>2)];
      var $nd588=$yyval;
      HEAP32[(($nd588)>>2)]=$418;
      label = 546; break;
    case 156: 
      var $419=$p_addr;
      var $420=$yyvsp;
      var $arrayidx590=((($420)-(4))|0);
      var $nd591=$arrayidx590;
      var $421=HEAP32[(($nd591)>>2)];
      var $call592=_list1_gen($419, $421);
      var $nd593=$yyval;
      HEAP32[(($nd593)>>2)]=$call592;
      label = 546; break;
    case 157: 
      var $422=$p_addr;
      var $423=$yyvsp;
      var $arrayidx595=(($423)|0);
      var $nd596=$arrayidx595;
      var $424=HEAP32[(($nd596)>>2)];
      var $call597=_list1_gen($422, $424);
      var $nd598=$yyval;
      HEAP32[(($nd598)>>2)]=$call597;
      label = 546; break;
    case 158: 
      var $425=$p_addr;
      var $426=$p_addr;
      var $427=$yyvsp;
      var $arrayidx600=((($427)-(4))|0);
      var $nd601=$arrayidx600;
      var $428=HEAP32[(($nd601)>>2)];
      var $429=$p_addr;
      var $430=$yyvsp;
      var $arrayidx602=(($430)|0);
      var $nd603=$arrayidx602;
      var $431=HEAP32[(($nd603)>>2)];
      var $call604=_list1_gen($429, $431);
      var $call605=_append_gen($426, $428, $call604);
      var $call606=_list1_gen($425, $call605);
      var $nd607=$yyval;
      HEAP32[(($nd607)>>2)]=$call606;
      label = 546; break;
    case 159: 
      var $432=$p_addr;
      var $433=$yyvsp;
      var $arrayidx609=((($433)-(8))|0);
      var $nd610=$arrayidx609;
      var $434=HEAP32[(($nd610)>>2)];
      var $435=$yyvsp;
      var $arrayidx611=(($435)|0);
      var $nd612=$arrayidx611;
      var $436=HEAP32[(($nd612)>>2)];
      var $call613=_list2_gen($432, $434, $436);
      var $nd614=$yyval;
      HEAP32[(($nd614)>>2)]=$call613;
      label = 546; break;
    case 160: 
      var $437=$p_addr;
      var $438=$yyvsp;
      var $arrayidx616=((($438)-(16))|0);
      var $nd617=$arrayidx616;
      var $439=HEAP32[(($nd617)>>2)];
      var $440=$yyvsp;
      var $arrayidx618=((($440)-(8))|0);
      var $nd619=$arrayidx618;
      var $441=HEAP32[(($nd619)>>2)];
      var $442=$yyvsp;
      var $arrayidx620=(($442)|0);
      var $nd621=$arrayidx620;
      var $443=HEAP32[(($nd621)>>2)];
      var $call622=_list3_gen($437, $439, $441, $443);
      var $nd623=$yyval;
      HEAP32[(($nd623)>>2)]=$call622;
      label = 546; break;
    case 161: 
      var $444=$p_addr;
      var $445=$yyvsp;
      var $arrayidx625=((($445)-(4))|0);
      var $nd626=$arrayidx625;
      var $446=HEAP32[(($nd626)>>2)];
      var $447=$p_addr;
      var $call627=_new_nil($447);
      var $call628=_list2_gen($444, $446, $call627);
      var $nd629=$yyval;
      HEAP32[(($nd629)>>2)]=$call628;
      label = 546; break;
    case 162: 
      var $448=$p_addr;
      var $449=$yyvsp;
      var $arrayidx631=((($449)-(12))|0);
      var $nd632=$arrayidx631;
      var $450=HEAP32[(($nd632)>>2)];
      var $451=$p_addr;
      var $call633=_new_nil($451);
      var $452=$yyvsp;
      var $arrayidx634=(($452)|0);
      var $nd635=$arrayidx634;
      var $453=HEAP32[(($nd635)>>2)];
      var $call636=_list3_gen($448, $450, $call633, $453);
      var $nd637=$yyval;
      HEAP32[(($nd637)>>2)]=$call636;
      label = 546; break;
    case 163: 
      var $454=$p_addr;
      var $455=$yyvsp;
      var $arrayidx639=(($455)|0);
      var $nd640=$arrayidx639;
      var $456=HEAP32[(($nd640)>>2)];
      var $call641=_list2_gen($454, 0, $456);
      var $nd642=$yyval;
      HEAP32[(($nd642)>>2)]=$call641;
      label = 546; break;
    case 164: 
      var $457=$p_addr;
      var $458=$yyvsp;
      var $arrayidx644=((($458)-(8))|0);
      var $nd645=$arrayidx644;
      var $459=HEAP32[(($nd645)>>2)];
      var $460=$yyvsp;
      var $arrayidx646=(($460)|0);
      var $nd647=$arrayidx646;
      var $461=HEAP32[(($nd647)>>2)];
      var $call648=_list3_gen($457, 0, $459, $461);
      var $nd649=$yyval;
      HEAP32[(($nd649)>>2)]=$call648;
      label = 546; break;
    case 165: 
      var $462=$p_addr;
      var $463=$p_addr;
      var $call651=_new_nil($463);
      var $call652=_list2_gen($462, 0, $call651);
      var $nd653=$yyval;
      HEAP32[(($nd653)>>2)]=$call652;
      label = 546; break;
    case 166: 
      var $464=$p_addr;
      var $465=$p_addr;
      var $call655=_new_nil($465);
      var $466=$yyvsp;
      var $arrayidx656=(($466)|0);
      var $nd657=$arrayidx656;
      var $467=HEAP32[(($nd657)>>2)];
      var $call658=_list3_gen($464, 0, $call655, $467);
      var $nd659=$yyval;
      HEAP32[(($nd659)>>2)]=$call658;
      label = 546; break;
    case 167: 
      var $468=$yyvsp;
      var $arrayidx661=((($468)-(4))|0);
      var $nd662=$arrayidx661;
      var $469=HEAP32[(($nd662)>>2)];
      var $nd663=$yyval;
      HEAP32[(($nd663)>>2)]=$469;
      label = 546; break;
    case 168: 
      var $470=$p_addr;
      var $471=$yyvsp;
      var $arrayidx665=((($471)-(4))|0);
      var $nd666=$arrayidx665;
      var $472=HEAP32[(($nd666)>>2)];
      var $call667=_list1_gen($470, $472);
      var $nd668=$yyval;
      HEAP32[(($nd668)>>2)]=$call667;
      label = 546; break;
    case 169: 
      var $473=$p_addr;
      var $474=$yyvsp;
      var $arrayidx670=((($474)-(8))|0);
      var $nd671=$arrayidx670;
      var $475=HEAP32[(($nd671)>>2)];
      var $476=$p_addr;
      var $477=$yyvsp;
      var $arrayidx672=((($477)-(4))|0);
      var $nd673=$arrayidx672;
      var $478=HEAP32[(($nd673)>>2)];
      var $call674=_list1_gen($476, $478);
      var $call675=_append_gen($473, $475, $call674);
      var $nd676=$yyval;
      HEAP32[(($nd676)>>2)]=$call675;
      label = 546; break;
    case 170: 
      var $479=$p_addr;
      var $480=$yyvsp;
      var $arrayidx678=(($480)|0);
      var $nd679=$arrayidx678;
      var $481=HEAP32[(($nd679)>>2)];
      var $call680=_list1_gen($479, $481);
      var $nd681=$yyval;
      HEAP32[(($nd681)>>2)]=$call680;
      label = 546; break;
    case 171: 
      var $482=$p_addr;
      var $483=$yyvsp;
      var $arrayidx683=((($483)-(4))|0);
      var $nd684=$arrayidx683;
      var $484=HEAP32[(($nd684)>>2)];
      var $485=$p_addr;
      var $486=$yyvsp;
      var $arrayidx685=(($486)|0);
      var $nd686=$arrayidx685;
      var $487=HEAP32[(($nd686)>>2)];
      var $call687=_list1_gen($485, $487);
      var $call688=_append_gen($482, $484, $call687);
      var $nd689=$yyval;
      HEAP32[(($nd689)>>2)]=$call688;
      label = 546; break;
    case 172: 
      var $488=$p_addr;
      var $489=$yyvsp;
      var $arrayidx691=(($489)|0);
      var $nd692=$arrayidx691;
      var $490=HEAP32[(($nd692)>>2)];
      _assignable($488, $490);
      label = 546; break;
    case 173: 
      var $491=$p_addr;
      var $492=$yyvsp;
      var $arrayidx694=((($492)-(12))|0);
      var $nd695=$arrayidx694;
      var $493=HEAP32[(($nd695)>>2)];
      var $494=$p_addr;
      var $call696=_intern_gen2($494, ((112168)|0), 2);
      var $495=$yyvsp;
      var $arrayidx697=((($495)-(4))|0);
      var $nd698=$arrayidx697;
      var $496=HEAP32[(($nd698)>>2)];
      var $call699=_new_call($491, $493, $call696, $496);
      var $nd700=$yyval;
      HEAP32[(($nd700)>>2)]=$call699;
      label = 546; break;
    case 174: 
      var $497=$p_addr;
      var $498=$yyvsp;
      var $arrayidx702=((($498)-(8))|0);
      var $nd703=$arrayidx702;
      var $499=HEAP32[(($nd703)>>2)];
      var $500=$yyvsp;
      var $arrayidx704=(($500)|0);
      var $id705=$arrayidx704;
      var $501=HEAP16[(($id705)>>1)];
      var $call706=_new_call($497, $499, $501, 0);
      var $nd707=$yyval;
      HEAP32[(($nd707)>>2)]=$call706;
      label = 546; break;
    case 175: 
      var $502=$p_addr;
      var $503=$yyvsp;
      var $arrayidx709=((($503)-(8))|0);
      var $nd710=$arrayidx709;
      var $504=HEAP32[(($nd710)>>2)];
      var $505=$yyvsp;
      var $arrayidx711=(($505)|0);
      var $id712=$arrayidx711;
      var $506=HEAP16[(($id712)>>1)];
      var $call713=_new_call($502, $504, $506, 0);
      var $nd714=$yyval;
      HEAP32[(($nd714)>>2)]=$call713;
      label = 546; break;
    case 176: 
      var $507=$p_addr;
      var $508=$yyvsp;
      var $arrayidx716=((($508)-(8))|0);
      var $nd717=$arrayidx716;
      var $509=HEAP32[(($nd717)>>2)];
      var $510=$yyvsp;
      var $arrayidx718=(($510)|0);
      var $id719=$arrayidx718;
      var $511=HEAP16[(($id719)>>1)];
      var $call720=_new_call($507, $509, $511, 0);
      var $nd721=$yyval;
      HEAP32[(($nd721)>>2)]=$call720;
      label = 546; break;
    case 177: 
      var $512=$p_addr;
      var $in_def=(($512+64)|0);
      var $513=HEAP32[(($in_def)>>2)];
      var $tobool723=(($513)|(0))!=0;
      if ($tobool723) { label = 179; break; } else { label = 178; break; }
    case 178: 
      var $514=$p_addr;
      var $in_single=(($514+68)|0);
      var $515=HEAP32[(($in_single)>>2)];
      var $tobool725=(($515)|(0))!=0;
      if ($tobool725) { label = 179; break; } else { label = 180; break; }
    case 179: 
      var $516=$p_addr;
      _yyerror($516, ((110576)|0));
      label = 180; break;
    case 180: 
      var $517=$p_addr;
      var $518=$yyvsp;
      var $arrayidx728=((($518)-(8))|0);
      var $nd729=$arrayidx728;
      var $519=HEAP32[(($nd729)>>2)];
      var $520=$yyvsp;
      var $arrayidx730=(($520)|0);
      var $id731=$arrayidx730;
      var $521=HEAP16[(($id731)>>1)];
      var $call732=_new_colon2($517, $519, $521);
      var $nd733=$yyval;
      HEAP32[(($nd733)>>2)]=$call732;
      label = 546; break;
    case 181: 
      var $522=$p_addr;
      var $in_def735=(($522+64)|0);
      var $523=HEAP32[(($in_def735)>>2)];
      var $tobool736=(($523)|(0))!=0;
      if ($tobool736) { label = 183; break; } else { label = 182; break; }
    case 182: 
      var $524=$p_addr;
      var $in_single738=(($524+68)|0);
      var $525=HEAP32[(($in_single738)>>2)];
      var $tobool739=(($525)|(0))!=0;
      if ($tobool739) { label = 183; break; } else { label = 184; break; }
    case 183: 
      var $526=$p_addr;
      _yyerror($526, ((110576)|0));
      label = 184; break;
    case 184: 
      var $527=$p_addr;
      var $528=$yyvsp;
      var $arrayidx742=(($528)|0);
      var $id743=$arrayidx742;
      var $529=HEAP16[(($id743)>>1)];
      var $call744=_new_colon3($527, $529);
      var $nd745=$yyval;
      HEAP32[(($nd745)>>2)]=$call744;
      label = 546; break;
    case 185: 
      var $530=$p_addr;
      var $531=$yyvsp;
      var $arrayidx747=(($531)|0);
      var $nd748=$arrayidx747;
      var $532=HEAP32[(($nd748)>>2)];
      _backref_error($530, $532);
      var $nd749=$yyval;
      HEAP32[(($nd749)>>2)]=0;
      label = 546; break;
    case 186: 
      var $533=$p_addr;
      var $534=$yyvsp;
      var $arrayidx751=(($534)|0);
      var $nd752=$arrayidx751;
      var $535=HEAP32[(($nd752)>>2)];
      _assignable($533, $535);
      label = 546; break;
    case 187: 
      var $536=$p_addr;
      var $537=$yyvsp;
      var $arrayidx754=((($537)-(12))|0);
      var $nd755=$arrayidx754;
      var $538=HEAP32[(($nd755)>>2)];
      var $539=$p_addr;
      var $call756=_intern_gen2($539, ((112168)|0), 2);
      var $540=$yyvsp;
      var $arrayidx757=((($540)-(4))|0);
      var $nd758=$arrayidx757;
      var $541=HEAP32[(($nd758)>>2)];
      var $call759=_new_call($536, $538, $call756, $541);
      var $nd760=$yyval;
      HEAP32[(($nd760)>>2)]=$call759;
      label = 546; break;
    case 188: 
      var $542=$p_addr;
      var $543=$yyvsp;
      var $arrayidx762=((($543)-(8))|0);
      var $nd763=$arrayidx762;
      var $544=HEAP32[(($nd763)>>2)];
      var $545=$yyvsp;
      var $arrayidx764=(($545)|0);
      var $id765=$arrayidx764;
      var $546=HEAP16[(($id765)>>1)];
      var $call766=_new_call($542, $544, $546, 0);
      var $nd767=$yyval;
      HEAP32[(($nd767)>>2)]=$call766;
      label = 546; break;
    case 189: 
      var $547=$p_addr;
      var $548=$yyvsp;
      var $arrayidx769=((($548)-(8))|0);
      var $nd770=$arrayidx769;
      var $549=HEAP32[(($nd770)>>2)];
      var $550=$yyvsp;
      var $arrayidx771=(($550)|0);
      var $id772=$arrayidx771;
      var $551=HEAP16[(($id772)>>1)];
      var $call773=_new_call($547, $549, $551, 0);
      var $nd774=$yyval;
      HEAP32[(($nd774)>>2)]=$call773;
      label = 546; break;
    case 190: 
      var $552=$p_addr;
      var $553=$yyvsp;
      var $arrayidx776=((($553)-(8))|0);
      var $nd777=$arrayidx776;
      var $554=HEAP32[(($nd777)>>2)];
      var $555=$yyvsp;
      var $arrayidx778=(($555)|0);
      var $id779=$arrayidx778;
      var $556=HEAP16[(($id779)>>1)];
      var $call780=_new_call($552, $554, $556, 0);
      var $nd781=$yyval;
      HEAP32[(($nd781)>>2)]=$call780;
      label = 546; break;
    case 191: 
      var $557=$p_addr;
      var $in_def783=(($557+64)|0);
      var $558=HEAP32[(($in_def783)>>2)];
      var $tobool784=(($558)|(0))!=0;
      if ($tobool784) { label = 193; break; } else { label = 192; break; }
    case 192: 
      var $559=$p_addr;
      var $in_single786=(($559+68)|0);
      var $560=HEAP32[(($in_single786)>>2)];
      var $tobool787=(($560)|(0))!=0;
      if ($tobool787) { label = 193; break; } else { label = 194; break; }
    case 193: 
      var $561=$p_addr;
      _yyerror($561, ((110576)|0));
      label = 194; break;
    case 194: 
      var $562=$p_addr;
      var $563=$yyvsp;
      var $arrayidx790=((($563)-(8))|0);
      var $nd791=$arrayidx790;
      var $564=HEAP32[(($nd791)>>2)];
      var $565=$yyvsp;
      var $arrayidx792=(($565)|0);
      var $id793=$arrayidx792;
      var $566=HEAP16[(($id793)>>1)];
      var $call794=_new_colon2($562, $564, $566);
      var $nd795=$yyval;
      HEAP32[(($nd795)>>2)]=$call794;
      label = 546; break;
    case 195: 
      var $567=$p_addr;
      var $in_def797=(($567+64)|0);
      var $568=HEAP32[(($in_def797)>>2)];
      var $tobool798=(($568)|(0))!=0;
      if ($tobool798) { label = 197; break; } else { label = 196; break; }
    case 196: 
      var $569=$p_addr;
      var $in_single800=(($569+68)|0);
      var $570=HEAP32[(($in_single800)>>2)];
      var $tobool801=(($570)|(0))!=0;
      if ($tobool801) { label = 197; break; } else { label = 198; break; }
    case 197: 
      var $571=$p_addr;
      _yyerror($571, ((110576)|0));
      label = 198; break;
    case 198: 
      var $572=$p_addr;
      var $573=$yyvsp;
      var $arrayidx804=(($573)|0);
      var $id805=$arrayidx804;
      var $574=HEAP16[(($id805)>>1)];
      var $call806=_new_colon3($572, $574);
      var $nd807=$yyval;
      HEAP32[(($nd807)>>2)]=$call806;
      label = 546; break;
    case 199: 
      var $575=$p_addr;
      var $576=$yyvsp;
      var $arrayidx809=(($576)|0);
      var $nd810=$arrayidx809;
      var $577=HEAP32[(($nd810)>>2)];
      _backref_error($575, $577);
      var $nd811=$yyval;
      HEAP32[(($nd811)>>2)]=0;
      label = 546; break;
    case 200: 
      var $578=$p_addr;
      _yyerror($578, ((110144)|0));
      label = 546; break;
    case 201: 
      var $579=$p_addr;
      var $580=$yyvsp;
      var $arrayidx814=(($580)|0);
      var $id815=$arrayidx814;
      var $581=HEAP16[(($id815)>>1)];
      var $conv816=(($581 << 16) >> 16);
      var $582=$conv816;
      var $call817=_cons_gen($579, 1, $582);
      var $nd818=$yyval;
      HEAP32[(($nd818)>>2)]=$call817;
      label = 546; break;
    case 202: 
      var $583=$p_addr;
      var $584=$yyvsp;
      var $arrayidx820=(($584)|0);
      var $id821=$arrayidx820;
      var $585=HEAP16[(($id821)>>1)];
      var $conv822=(($585 << 16) >> 16);
      var $586=$conv822;
      var $call823=_cons_gen($583, 0, $586);
      var $nd824=$yyval;
      HEAP32[(($nd824)>>2)]=$call823;
      label = 546; break;
    case 203: 
      var $587=$p_addr;
      var $588=$yyvsp;
      var $arrayidx826=((($588)-(8))|0);
      var $nd827=$arrayidx826;
      var $589=HEAP32[(($nd827)>>2)];
      var $590=$yyvsp;
      var $arrayidx828=(($590)|0);
      var $id829=$arrayidx828;
      var $591=HEAP16[(($id829)>>1)];
      var $conv830=(($591 << 16) >> 16);
      var $592=$conv830;
      var $call831=_cons_gen($587, $589, $592);
      var $nd832=$yyval;
      HEAP32[(($nd832)>>2)]=$call831;
      label = 546; break;
    case 204: 
      var $593=$p_addr;
      var $lstate834=(($593+40)|0);
      HEAP32[(($lstate834)>>2)]=3;
      var $594=$yyvsp;
      var $arrayidx835=(($594)|0);
      var $id836=$arrayidx835;
      var $595=HEAP16[(($id836)>>1)];
      var $id837=$yyval;
      HEAP16[(($id837)>>1)]=$595;
      label = 546; break;
    case 205: 
      var $596=$p_addr;
      var $lstate839=(($596+40)|0);
      HEAP32[(($lstate839)>>2)]=3;
      var $597=$yyvsp;
      var $arrayidx840=(($597)|0);
      var $id841=$arrayidx840;
      var $598=HEAP16[(($id841)>>1)];
      var $id842=$yyval;
      HEAP16[(($id842)>>1)]=$598;
      label = 546; break;
    case 206: 
      var $599=$p_addr;
      var $600=$yyvsp;
      var $arrayidx844=(($600)|0);
      var $id845=$arrayidx844;
      var $601=HEAP16[(($id845)>>1)];
      var $call846=_new_undef($599, $601);
      var $nd847=$yyval;
      HEAP32[(($nd847)>>2)]=$call846;
      label = 546; break;
    case 207: 
      var $602=$p_addr;
      var $lstate849=(($602+40)|0);
      HEAP32[(($lstate849)>>2)]=7;
      label = 546; break;
    case 208: 
      var $603=$p_addr;
      var $604=$yyvsp;
      var $arrayidx851=((($604)-(12))|0);
      var $nd852=$arrayidx851;
      var $605=HEAP32[(($nd852)>>2)];
      var $606=$p_addr;
      var $607=$yyvsp;
      var $arrayidx853=(($607)|0);
      var $id854=$arrayidx853;
      var $608=HEAP16[(($id854)>>1)];
      var $conv855=(($608 << 16) >> 16);
      var $609=$conv855;
      var $call856=_list1_gen($606, $609);
      var $call857=_append_gen($603, $605, $call856);
      var $nd858=$yyval;
      HEAP32[(($nd858)>>2)]=$call857;
      label = 546; break;
    case 209: 
      var $610=$p_addr;
      var $call860=_intern_gen_c($610, 124);
      var $id861=$yyval;
      HEAP16[(($id861)>>1)]=$call860;
      label = 546; break;
    case 210: 
      var $611=$p_addr;
      var $call863=_intern_gen_c($611, 94);
      var $id864=$yyval;
      HEAP16[(($id864)>>1)]=$call863;
      label = 546; break;
    case 211: 
      var $612=$p_addr;
      var $call866=_intern_gen_c($612, 38);
      var $id867=$yyval;
      HEAP16[(($id867)>>1)]=$call866;
      label = 546; break;
    case 212: 
      var $613=$p_addr;
      var $call869=_intern_gen2($613, ((109800)|0), 3);
      var $id870=$yyval;
      HEAP16[(($id870)>>1)]=$call869;
      label = 546; break;
    case 213: 
      var $614=$p_addr;
      var $call872=_intern_gen2($614, ((109360)|0), 2);
      var $id873=$yyval;
      HEAP16[(($id873)>>1)]=$call872;
      label = 546; break;
    case 214: 
      var $615=$p_addr;
      var $call875=_intern_gen2($615, ((108892)|0), 3);
      var $id876=$yyval;
      HEAP16[(($id876)>>1)]=$call875;
      label = 546; break;
    case 215: 
      var $616=$p_addr;
      var $call878=_intern_gen2($616, ((108336)|0), 2);
      var $id879=$yyval;
      HEAP16[(($id879)>>1)]=$call878;
      label = 546; break;
    case 216: 
      var $617=$p_addr;
      var $call881=_intern_gen2($617, ((107988)|0), 2);
      var $id882=$yyval;
      HEAP16[(($id882)>>1)]=$call881;
      label = 546; break;
    case 217: 
      var $618=$p_addr;
      var $call884=_intern_gen_c($618, 62);
      var $id885=$yyval;
      HEAP16[(($id885)>>1)]=$call884;
      label = 546; break;
    case 218: 
      var $619=$p_addr;
      var $call887=_intern_gen2($619, ((107480)|0), 2);
      var $id888=$yyval;
      HEAP16[(($id888)>>1)]=$call887;
      label = 546; break;
    case 219: 
      var $620=$p_addr;
      var $call890=_intern_gen_c($620, 60);
      var $id891=$yyval;
      HEAP16[(($id891)>>1)]=$call890;
      label = 546; break;
    case 220: 
      var $621=$p_addr;
      var $call893=_intern_gen2($621, ((107224)|0), 2);
      var $id894=$yyval;
      HEAP16[(($id894)>>1)]=$call893;
      label = 546; break;
    case 221: 
      var $622=$p_addr;
      var $call896=_intern_gen2($622, ((106808)|0), 2);
      var $id897=$yyval;
      HEAP16[(($id897)>>1)]=$call896;
      label = 546; break;
    case 222: 
      var $623=$p_addr;
      var $call899=_intern_gen2($623, ((106384)|0), 2);
      var $id900=$yyval;
      HEAP16[(($id900)>>1)]=$call899;
      label = 546; break;
    case 223: 
      var $624=$p_addr;
      var $call902=_intern_gen2($624, ((105992)|0), 2);
      var $id903=$yyval;
      HEAP16[(($id903)>>1)]=$call902;
      label = 546; break;
    case 224: 
      var $625=$p_addr;
      var $call905=_intern_gen_c($625, 43);
      var $id906=$yyval;
      HEAP16[(($id906)>>1)]=$call905;
      label = 546; break;
    case 225: 
      var $626=$p_addr;
      var $call908=_intern_gen_c($626, 45);
      var $id909=$yyval;
      HEAP16[(($id909)>>1)]=$call908;
      label = 546; break;
    case 226: 
      var $627=$p_addr;
      var $call911=_intern_gen_c($627, 42);
      var $id912=$yyval;
      HEAP16[(($id912)>>1)]=$call911;
      label = 546; break;
    case 227: 
      var $628=$p_addr;
      var $call914=_intern_gen_c($628, 42);
      var $id915=$yyval;
      HEAP16[(($id915)>>1)]=$call914;
      label = 546; break;
    case 228: 
      var $629=$p_addr;
      var $call917=_intern_gen_c($629, 47);
      var $id918=$yyval;
      HEAP16[(($id918)>>1)]=$call917;
      label = 546; break;
    case 229: 
      var $630=$p_addr;
      var $call920=_intern_gen_c($630, 37);
      var $id921=$yyval;
      HEAP16[(($id921)>>1)]=$call920;
      label = 546; break;
    case 230: 
      var $631=$p_addr;
      var $call923=_intern_gen2($631, ((105684)|0), 2);
      var $id924=$yyval;
      HEAP16[(($id924)>>1)]=$call923;
      label = 546; break;
    case 231: 
      var $632=$p_addr;
      var $call926=_intern_gen_c($632, 33);
      var $id927=$yyval;
      HEAP16[(($id927)>>1)]=$call926;
      label = 546; break;
    case 232: 
      var $633=$p_addr;
      var $call929=_intern_gen_c($633, 126);
      var $id930=$yyval;
      HEAP16[(($id930)>>1)]=$call929;
      label = 546; break;
    case 233: 
      var $634=$p_addr;
      var $call932=_intern_gen2($634, ((105364)|0), 2);
      var $id933=$yyval;
      HEAP16[(($id933)>>1)]=$call932;
      label = 546; break;
    case 234: 
      var $635=$p_addr;
      var $call935=_intern_gen2($635, ((105072)|0), 2);
      var $id936=$yyval;
      HEAP16[(($id936)>>1)]=$call935;
      label = 546; break;
    case 235: 
      var $636=$p_addr;
      var $call938=_intern_gen2($636, ((112168)|0), 2);
      var $id939=$yyval;
      HEAP16[(($id939)>>1)]=$call938;
      label = 546; break;
    case 236: 
      var $637=$p_addr;
      var $call941=_intern_gen2($637, ((104764)|0), 3);
      var $id942=$yyval;
      HEAP16[(($id942)>>1)]=$call941;
      label = 546; break;
    case 237: 
      var $638=$p_addr;
      var $call944=_intern_gen_c($638, 96);
      var $id945=$yyval;
      HEAP16[(($id945)>>1)]=$call944;
      label = 546; break;
    case 238: 
      var $639=$p_addr;
      var $640=$yyvsp;
      var $arrayidx947=((($640)-(8))|0);
      var $nd948=$arrayidx947;
      var $641=HEAP32[(($nd948)>>2)];
      var $642=$yyvsp;
      var $arrayidx949=(($642)|0);
      var $nd950=$arrayidx949;
      var $643=HEAP32[(($nd950)>>2)];
      var $call951=_new_asgn($639, $641, $643);
      var $nd952=$yyval;
      HEAP32[(($nd952)>>2)]=$call951;
      label = 546; break;
    case 239: 
      var $644=$p_addr;
      var $645=$yyvsp;
      var $arrayidx954=((($645)-(16))|0);
      var $nd955=$arrayidx954;
      var $646=HEAP32[(($nd955)>>2)];
      var $647=$p_addr;
      var $648=$yyvsp;
      var $arrayidx956=((($648)-(8))|0);
      var $nd957=$arrayidx956;
      var $649=HEAP32[(($nd957)>>2)];
      var $650=$p_addr;
      var $651=$p_addr;
      var $652=$yyvsp;
      var $arrayidx958=(($652)|0);
      var $nd959=$arrayidx958;
      var $653=HEAP32[(($nd959)>>2)];
      var $call960=_list3_gen($651, 0, 0, $653);
      var $call961=_list1_gen($650, $call960);
      var $call962=_new_rescue($647, $649, $call961, 0);
      var $call963=_new_asgn($644, $646, $call962);
      var $nd964=$yyval;
      HEAP32[(($nd964)>>2)]=$call963;
      label = 546; break;
    case 240: 
      var $654=$p_addr;
      var $655=$yyvsp;
      var $arrayidx966=((($655)-(8))|0);
      var $nd967=$arrayidx966;
      var $656=HEAP32[(($nd967)>>2)];
      var $657=$yyvsp;
      var $arrayidx968=((($657)-(4))|0);
      var $id969=$arrayidx968;
      var $658=HEAP16[(($id969)>>1)];
      var $659=$yyvsp;
      var $arrayidx970=(($659)|0);
      var $nd971=$arrayidx970;
      var $660=HEAP32[(($nd971)>>2)];
      var $call972=_new_op_asgn($654, $656, $658, $660);
      var $nd973=$yyval;
      HEAP32[(($nd973)>>2)]=$call972;
      label = 546; break;
    case 241: 
      var $661=$p_addr;
      var $662=$yyvsp;
      var $arrayidx975=((($662)-(16))|0);
      var $nd976=$arrayidx975;
      var $663=HEAP32[(($nd976)>>2)];
      var $664=$yyvsp;
      var $arrayidx977=((($664)-(12))|0);
      var $id978=$arrayidx977;
      var $665=HEAP16[(($id978)>>1)];
      var $666=$p_addr;
      var $667=$yyvsp;
      var $arrayidx979=((($667)-(8))|0);
      var $nd980=$arrayidx979;
      var $668=HEAP32[(($nd980)>>2)];
      var $669=$p_addr;
      var $670=$p_addr;
      var $671=$yyvsp;
      var $arrayidx981=(($671)|0);
      var $nd982=$arrayidx981;
      var $672=HEAP32[(($nd982)>>2)];
      var $call983=_list3_gen($670, 0, 0, $672);
      var $call984=_list1_gen($669, $call983);
      var $call985=_new_rescue($666, $668, $call984, 0);
      var $call986=_new_op_asgn($661, $663, $665, $call985);
      var $nd987=$yyval;
      HEAP32[(($nd987)>>2)]=$call986;
      label = 546; break;
    case 242: 
      var $673=$p_addr;
      var $674=$p_addr;
      var $675=$yyvsp;
      var $arrayidx989=((($675)-(20))|0);
      var $nd990=$arrayidx989;
      var $676=HEAP32[(($nd990)>>2)];
      var $677=$p_addr;
      var $call991=_intern_gen2($677, ((112168)|0), 2);
      var $678=$yyvsp;
      var $arrayidx992=((($678)-(12))|0);
      var $nd993=$arrayidx992;
      var $679=HEAP32[(($nd993)>>2)];
      var $call994=_new_call($674, $676, $call991, $679);
      var $680=$yyvsp;
      var $arrayidx995=((($680)-(4))|0);
      var $id996=$arrayidx995;
      var $681=HEAP16[(($id996)>>1)];
      var $682=$yyvsp;
      var $arrayidx997=(($682)|0);
      var $nd998=$arrayidx997;
      var $683=HEAP32[(($nd998)>>2)];
      var $call999=_new_op_asgn($673, $call994, $681, $683);
      var $nd1000=$yyval;
      HEAP32[(($nd1000)>>2)]=$call999;
      label = 546; break;
    case 243: 
      var $684=$p_addr;
      var $685=$p_addr;
      var $686=$yyvsp;
      var $arrayidx1002=((($686)-(16))|0);
      var $nd1003=$arrayidx1002;
      var $687=HEAP32[(($nd1003)>>2)];
      var $688=$yyvsp;
      var $arrayidx1004=((($688)-(8))|0);
      var $id1005=$arrayidx1004;
      var $689=HEAP16[(($id1005)>>1)];
      var $call1006=_new_call($685, $687, $689, 0);
      var $690=$yyvsp;
      var $arrayidx1007=((($690)-(4))|0);
      var $id1008=$arrayidx1007;
      var $691=HEAP16[(($id1008)>>1)];
      var $692=$yyvsp;
      var $arrayidx1009=(($692)|0);
      var $nd1010=$arrayidx1009;
      var $693=HEAP32[(($nd1010)>>2)];
      var $call1011=_new_op_asgn($684, $call1006, $691, $693);
      var $nd1012=$yyval;
      HEAP32[(($nd1012)>>2)]=$call1011;
      label = 546; break;
    case 244: 
      var $694=$p_addr;
      var $695=$p_addr;
      var $696=$yyvsp;
      var $arrayidx1014=((($696)-(16))|0);
      var $nd1015=$arrayidx1014;
      var $697=HEAP32[(($nd1015)>>2)];
      var $698=$yyvsp;
      var $arrayidx1016=((($698)-(8))|0);
      var $id1017=$arrayidx1016;
      var $699=HEAP16[(($id1017)>>1)];
      var $call1018=_new_call($695, $697, $699, 0);
      var $700=$yyvsp;
      var $arrayidx1019=((($700)-(4))|0);
      var $id1020=$arrayidx1019;
      var $701=HEAP16[(($id1020)>>1)];
      var $702=$yyvsp;
      var $arrayidx1021=(($702)|0);
      var $nd1022=$arrayidx1021;
      var $703=HEAP32[(($nd1022)>>2)];
      var $call1023=_new_op_asgn($694, $call1018, $701, $703);
      var $nd1024=$yyval;
      HEAP32[(($nd1024)>>2)]=$call1023;
      label = 546; break;
    case 245: 
      var $704=$p_addr;
      var $705=$p_addr;
      var $706=$yyvsp;
      var $arrayidx1026=((($706)-(16))|0);
      var $nd1027=$arrayidx1026;
      var $707=HEAP32[(($nd1027)>>2)];
      var $708=$yyvsp;
      var $arrayidx1028=((($708)-(8))|0);
      var $id1029=$arrayidx1028;
      var $709=HEAP16[(($id1029)>>1)];
      var $call1030=_new_call($705, $707, $709, 0);
      var $710=$yyvsp;
      var $arrayidx1031=((($710)-(4))|0);
      var $id1032=$arrayidx1031;
      var $711=HEAP16[(($id1032)>>1)];
      var $712=$yyvsp;
      var $arrayidx1033=(($712)|0);
      var $nd1034=$arrayidx1033;
      var $713=HEAP32[(($nd1034)>>2)];
      var $call1035=_new_op_asgn($704, $call1030, $711, $713);
      var $nd1036=$yyval;
      HEAP32[(($nd1036)>>2)]=$call1035;
      label = 546; break;
    case 246: 
      var $714=$p_addr;
      _yyerror($714, ((111580)|0));
      var $715=$p_addr;
      var $call1038=_new_begin($715, 0);
      var $nd1039=$yyval;
      HEAP32[(($nd1039)>>2)]=$call1038;
      label = 546; break;
    case 247: 
      var $716=$p_addr;
      _yyerror($716, ((111580)|0));
      var $717=$p_addr;
      var $call1041=_new_begin($717, 0);
      var $nd1042=$yyval;
      HEAP32[(($nd1042)>>2)]=$call1041;
      label = 546; break;
    case 248: 
      var $718=$p_addr;
      var $719=$yyvsp;
      var $arrayidx1044=((($719)-(8))|0);
      var $nd1045=$arrayidx1044;
      var $720=HEAP32[(($nd1045)>>2)];
      _backref_error($718, $720);
      var $721=$p_addr;
      var $call1046=_new_begin($721, 0);
      var $nd1047=$yyval;
      HEAP32[(($nd1047)>>2)]=$call1046;
      label = 546; break;
    case 249: 
      var $722=$p_addr;
      var $723=$yyvsp;
      var $arrayidx1049=((($723)-(8))|0);
      var $nd1050=$arrayidx1049;
      var $724=HEAP32[(($nd1050)>>2)];
      var $725=$yyvsp;
      var $arrayidx1051=(($725)|0);
      var $nd1052=$arrayidx1051;
      var $726=HEAP32[(($nd1052)>>2)];
      var $call1053=_new_dot2($722, $724, $726);
      var $nd1054=$yyval;
      HEAP32[(($nd1054)>>2)]=$call1053;
      label = 546; break;
    case 250: 
      var $727=$p_addr;
      var $728=$yyvsp;
      var $arrayidx1056=((($728)-(8))|0);
      var $nd1057=$arrayidx1056;
      var $729=HEAP32[(($nd1057)>>2)];
      var $730=$yyvsp;
      var $arrayidx1058=(($730)|0);
      var $nd1059=$arrayidx1058;
      var $731=HEAP32[(($nd1059)>>2)];
      var $call1060=_new_dot3($727, $729, $731);
      var $nd1061=$yyval;
      HEAP32[(($nd1061)>>2)]=$call1060;
      label = 546; break;
    case 251: 
      var $732=$p_addr;
      var $733=$yyvsp;
      var $arrayidx1063=((($733)-(8))|0);
      var $nd1064=$arrayidx1063;
      var $734=HEAP32[(($nd1064)>>2)];
      var $735=$yyvsp;
      var $arrayidx1065=(($735)|0);
      var $nd1066=$arrayidx1065;
      var $736=HEAP32[(($nd1066)>>2)];
      var $call1067=_call_bin_op($732, $734, ((104476)|0), $736);
      var $nd1068=$yyval;
      HEAP32[(($nd1068)>>2)]=$call1067;
      label = 546; break;
    case 252: 
      var $737=$p_addr;
      var $738=$yyvsp;
      var $arrayidx1070=((($738)-(8))|0);
      var $nd1071=$arrayidx1070;
      var $739=HEAP32[(($nd1071)>>2)];
      var $740=$yyvsp;
      var $arrayidx1072=(($740)|0);
      var $nd1073=$arrayidx1072;
      var $741=HEAP32[(($nd1073)>>2)];
      var $call1074=_call_bin_op($737, $739, ((103920)|0), $741);
      var $nd1075=$yyval;
      HEAP32[(($nd1075)>>2)]=$call1074;
      label = 546; break;
    case 253: 
      var $742=$p_addr;
      var $743=$yyvsp;
      var $arrayidx1077=((($743)-(8))|0);
      var $nd1078=$arrayidx1077;
      var $744=HEAP32[(($nd1078)>>2)];
      var $745=$yyvsp;
      var $arrayidx1079=(($745)|0);
      var $nd1080=$arrayidx1079;
      var $746=HEAP32[(($nd1080)>>2)];
      var $call1081=_call_bin_op($742, $744, ((103728)|0), $746);
      var $nd1082=$yyval;
      HEAP32[(($nd1082)>>2)]=$call1081;
      label = 546; break;
    case 254: 
      var $747=$p_addr;
      var $748=$yyvsp;
      var $arrayidx1084=((($748)-(8))|0);
      var $nd1085=$arrayidx1084;
      var $749=HEAP32[(($nd1085)>>2)];
      var $750=$yyvsp;
      var $arrayidx1086=(($750)|0);
      var $nd1087=$arrayidx1086;
      var $751=HEAP32[(($nd1087)>>2)];
      var $call1088=_call_bin_op($747, $749, ((103508)|0), $751);
      var $nd1089=$yyval;
      HEAP32[(($nd1089)>>2)]=$call1088;
      label = 546; break;
    case 255: 
      var $752=$p_addr;
      var $753=$yyvsp;
      var $arrayidx1091=((($753)-(8))|0);
      var $nd1092=$arrayidx1091;
      var $754=HEAP32[(($nd1092)>>2)];
      var $755=$yyvsp;
      var $arrayidx1093=(($755)|0);
      var $nd1094=$arrayidx1093;
      var $756=HEAP32[(($nd1094)>>2)];
      var $call1095=_call_bin_op($752, $754, ((103292)|0), $756);
      var $nd1096=$yyval;
      HEAP32[(($nd1096)>>2)]=$call1095;
      label = 546; break;
    case 256: 
      var $757=$p_addr;
      var $758=$yyvsp;
      var $arrayidx1098=((($758)-(8))|0);
      var $nd1099=$arrayidx1098;
      var $759=HEAP32[(($nd1099)>>2)];
      var $760=$yyvsp;
      var $arrayidx1100=(($760)|0);
      var $nd1101=$arrayidx1100;
      var $761=HEAP32[(($nd1101)>>2)];
      var $call1102=_call_bin_op($757, $759, ((105684)|0), $761);
      var $nd1103=$yyval;
      HEAP32[(($nd1103)>>2)]=$call1102;
      label = 546; break;
    case 257: 
      var $762=$p_addr;
      var $763=$p_addr;
      var $764=$yyvsp;
      var $arrayidx1105=((($764)-(8))|0);
      var $nd1106=$arrayidx1105;
      var $765=HEAP32[(($nd1106)>>2)];
      var $766=$yyvsp;
      var $arrayidx1107=(($766)|0);
      var $nd1108=$arrayidx1107;
      var $767=HEAP32[(($nd1108)>>2)];
      var $call1109=_call_bin_op($763, $765, ((105684)|0), $767);
      var $call1110=_call_uni_op($762, $call1109, ((105072)|0));
      var $nd1111=$yyval;
      HEAP32[(($nd1111)>>2)]=$call1110;
      label = 546; break;
    case 258: 
      var $768=$p_addr;
      var $769=$p_addr;
      var $770=$yyvsp;
      var $arrayidx1113=((($770)-(8))|0);
      var $nd1114=$arrayidx1113;
      var $771=HEAP32[(($nd1114)>>2)];
      var $772=$yyvsp;
      var $arrayidx1115=(($772)|0);
      var $nd1116=$arrayidx1115;
      var $773=HEAP32[(($nd1116)>>2)];
      var $call1117=_call_bin_op($769, $771, ((105684)|0), $773);
      var $call1118=_call_uni_op($768, $call1117, ((105072)|0));
      var $nd1119=$yyval;
      HEAP32[(($nd1119)>>2)]=$call1118;
      label = 546; break;
    case 259: 
      var $774=$p_addr;
      var $775=$yyvsp;
      var $arrayidx1121=(($775)|0);
      var $nd1122=$arrayidx1121;
      var $776=HEAP32[(($nd1122)>>2)];
      var $call1123=_call_uni_op($774, $776, ((105364)|0));
      var $nd1124=$yyval;
      HEAP32[(($nd1124)>>2)]=$call1123;
      label = 546; break;
    case 260: 
      var $777=$p_addr;
      var $778=$yyvsp;
      var $arrayidx1126=(($778)|0);
      var $nd1127=$arrayidx1126;
      var $779=HEAP32[(($nd1127)>>2)];
      var $call1128=_call_uni_op($777, $779, ((105072)|0));
      var $nd1129=$yyval;
      HEAP32[(($nd1129)>>2)]=$call1128;
      label = 546; break;
    case 261: 
      var $780=$p_addr;
      var $781=$yyvsp;
      var $arrayidx1131=((($781)-(8))|0);
      var $nd1132=$arrayidx1131;
      var $782=HEAP32[(($nd1132)>>2)];
      var $783=$yyvsp;
      var $arrayidx1133=(($783)|0);
      var $nd1134=$arrayidx1133;
      var $784=HEAP32[(($nd1134)>>2)];
      var $call1135=_call_bin_op($780, $782, ((103056)|0), $784);
      var $nd1136=$yyval;
      HEAP32[(($nd1136)>>2)]=$call1135;
      label = 546; break;
    case 262: 
      var $785=$p_addr;
      var $786=$yyvsp;
      var $arrayidx1138=((($786)-(8))|0);
      var $nd1139=$arrayidx1138;
      var $787=HEAP32[(($nd1139)>>2)];
      var $788=$yyvsp;
      var $arrayidx1140=(($788)|0);
      var $nd1141=$arrayidx1140;
      var $789=HEAP32[(($nd1141)>>2)];
      var $call1142=_call_bin_op($785, $787, ((102784)|0), $789);
      var $nd1143=$yyval;
      HEAP32[(($nd1143)>>2)]=$call1142;
      label = 546; break;
    case 263: 
      var $790=$p_addr;
      var $791=$yyvsp;
      var $arrayidx1145=((($791)-(8))|0);
      var $nd1146=$arrayidx1145;
      var $792=HEAP32[(($nd1146)>>2)];
      var $793=$yyvsp;
      var $arrayidx1147=(($793)|0);
      var $nd1148=$arrayidx1147;
      var $794=HEAP32[(($nd1148)>>2)];
      var $call1149=_call_bin_op($790, $792, ((102572)|0), $794);
      var $nd1150=$yyval;
      HEAP32[(($nd1150)>>2)]=$call1149;
      label = 546; break;
    case 264: 
      var $795=$p_addr;
      var $796=$yyvsp;
      var $arrayidx1152=((($796)-(8))|0);
      var $nd1153=$arrayidx1152;
      var $797=HEAP32[(($nd1153)>>2)];
      var $798=$yyvsp;
      var $arrayidx1154=(($798)|0);
      var $nd1155=$arrayidx1154;
      var $799=HEAP32[(($nd1155)>>2)];
      var $call1156=_call_bin_op($795, $797, ((109800)|0), $799);
      var $nd1157=$yyval;
      HEAP32[(($nd1157)>>2)]=$call1156;
      label = 546; break;
    case 265: 
      var $800=$p_addr;
      var $801=$yyvsp;
      var $arrayidx1159=((($801)-(8))|0);
      var $nd1160=$arrayidx1159;
      var $802=HEAP32[(($nd1160)>>2)];
      var $803=$yyvsp;
      var $arrayidx1161=(($803)|0);
      var $nd1162=$arrayidx1161;
      var $804=HEAP32[(($nd1162)>>2)];
      var $call1163=_call_bin_op($800, $802, ((102260)|0), $804);
      var $nd1164=$yyval;
      HEAP32[(($nd1164)>>2)]=$call1163;
      label = 546; break;
    case 266: 
      var $805=$p_addr;
      var $806=$yyvsp;
      var $arrayidx1166=((($806)-(8))|0);
      var $nd1167=$arrayidx1166;
      var $807=HEAP32[(($nd1167)>>2)];
      var $808=$yyvsp;
      var $arrayidx1168=(($808)|0);
      var $nd1169=$arrayidx1168;
      var $809=HEAP32[(($nd1169)>>2)];
      var $call1170=_call_bin_op($805, $807, ((107480)|0), $809);
      var $nd1171=$yyval;
      HEAP32[(($nd1171)>>2)]=$call1170;
      label = 546; break;
    case 267: 
      var $810=$p_addr;
      var $811=$yyvsp;
      var $arrayidx1173=((($811)-(8))|0);
      var $nd1174=$arrayidx1173;
      var $812=HEAP32[(($nd1174)>>2)];
      var $813=$yyvsp;
      var $arrayidx1175=(($813)|0);
      var $nd1176=$arrayidx1175;
      var $814=HEAP32[(($nd1176)>>2)];
      var $call1177=_call_bin_op($810, $812, ((101952)|0), $814);
      var $nd1178=$yyval;
      HEAP32[(($nd1178)>>2)]=$call1177;
      label = 546; break;
    case 268: 
      var $815=$p_addr;
      var $816=$yyvsp;
      var $arrayidx1180=((($816)-(8))|0);
      var $nd1181=$arrayidx1180;
      var $817=HEAP32[(($nd1181)>>2)];
      var $818=$yyvsp;
      var $arrayidx1182=(($818)|0);
      var $nd1183=$arrayidx1182;
      var $819=HEAP32[(($nd1183)>>2)];
      var $call1184=_call_bin_op($815, $817, ((107224)|0), $819);
      var $nd1185=$yyval;
      HEAP32[(($nd1185)>>2)]=$call1184;
      label = 546; break;
    case 269: 
      var $820=$p_addr;
      var $821=$yyvsp;
      var $arrayidx1187=((($821)-(8))|0);
      var $nd1188=$arrayidx1187;
      var $822=HEAP32[(($nd1188)>>2)];
      var $823=$yyvsp;
      var $arrayidx1189=(($823)|0);
      var $nd1190=$arrayidx1189;
      var $824=HEAP32[(($nd1190)>>2)];
      var $call1191=_call_bin_op($820, $822, ((109360)|0), $824);
      var $nd1192=$yyval;
      HEAP32[(($nd1192)>>2)]=$call1191;
      label = 546; break;
    case 270: 
      var $825=$p_addr;
      var $826=$yyvsp;
      var $arrayidx1194=((($826)-(8))|0);
      var $nd1195=$arrayidx1194;
      var $827=HEAP32[(($nd1195)>>2)];
      var $828=$yyvsp;
      var $arrayidx1196=(($828)|0);
      var $nd1197=$arrayidx1196;
      var $829=HEAP32[(($nd1197)>>2)];
      var $call1198=_call_bin_op($825, $827, ((108892)|0), $829);
      var $nd1199=$yyval;
      HEAP32[(($nd1199)>>2)]=$call1198;
      label = 546; break;
    case 271: 
      var $830=$p_addr;
      var $831=$yyvsp;
      var $arrayidx1201=((($831)-(8))|0);
      var $nd1202=$arrayidx1201;
      var $832=HEAP32[(($nd1202)>>2)];
      var $833=$yyvsp;
      var $arrayidx1203=(($833)|0);
      var $nd1204=$arrayidx1203;
      var $834=HEAP32[(($nd1204)>>2)];
      var $call1205=_call_bin_op($830, $832, ((106808)|0), $834);
      var $nd1206=$yyval;
      HEAP32[(($nd1206)>>2)]=$call1205;
      label = 546; break;
    case 272: 
      var $835=$p_addr;
      var $836=$yyvsp;
      var $arrayidx1208=((($836)-(8))|0);
      var $nd1209=$arrayidx1208;
      var $837=HEAP32[(($nd1209)>>2)];
      var $838=$yyvsp;
      var $arrayidx1210=(($838)|0);
      var $nd1211=$arrayidx1210;
      var $839=HEAP32[(($nd1211)>>2)];
      var $call1212=_call_bin_op($835, $837, ((108336)|0), $839);
      var $nd1213=$yyval;
      HEAP32[(($nd1213)>>2)]=$call1212;
      label = 546; break;
    case 273: 
      var $840=$p_addr;
      var $841=$yyvsp;
      var $arrayidx1215=((($841)-(8))|0);
      var $nd1216=$arrayidx1215;
      var $842=HEAP32[(($nd1216)>>2)];
      var $843=$yyvsp;
      var $arrayidx1217=(($843)|0);
      var $nd1218=$arrayidx1217;
      var $844=HEAP32[(($nd1218)>>2)];
      var $call1219=_call_bin_op($840, $842, ((107988)|0), $844);
      var $nd1220=$yyval;
      HEAP32[(($nd1220)>>2)]=$call1219;
      label = 546; break;
    case 274: 
      var $845=$p_addr;
      var $846=$yyvsp;
      var $arrayidx1222=(($846)|0);
      var $nd1223=$arrayidx1222;
      var $847=HEAP32[(($nd1223)>>2)];
      var $call1224=_cond($847);
      var $call1225=_call_uni_op($845, $call1224, ((111092)|0));
      var $nd1226=$yyval;
      HEAP32[(($nd1226)>>2)]=$call1225;
      label = 546; break;
    case 275: 
      var $848=$p_addr;
      var $849=$yyvsp;
      var $arrayidx1228=(($849)|0);
      var $nd1229=$arrayidx1228;
      var $850=HEAP32[(($nd1229)>>2)];
      var $call1230=_cond($850);
      var $call1231=_call_uni_op($848, $call1230, ((101728)|0));
      var $nd1232=$yyval;
      HEAP32[(($nd1232)>>2)]=$call1231;
      label = 546; break;
    case 276: 
      var $851=$p_addr;
      var $852=$yyvsp;
      var $arrayidx1234=((($852)-(8))|0);
      var $nd1235=$arrayidx1234;
      var $853=HEAP32[(($nd1235)>>2)];
      var $854=$yyvsp;
      var $arrayidx1236=(($854)|0);
      var $nd1237=$arrayidx1236;
      var $855=HEAP32[(($nd1237)>>2)];
      var $call1238=_call_bin_op($851, $853, ((106384)|0), $855);
      var $nd1239=$yyval;
      HEAP32[(($nd1239)>>2)]=$call1238;
      label = 546; break;
    case 277: 
      var $856=$p_addr;
      var $857=$yyvsp;
      var $arrayidx1241=((($857)-(8))|0);
      var $nd1242=$arrayidx1241;
      var $858=HEAP32[(($nd1242)>>2)];
      var $859=$yyvsp;
      var $arrayidx1243=(($859)|0);
      var $nd1244=$arrayidx1243;
      var $860=HEAP32[(($nd1244)>>2)];
      var $call1245=_call_bin_op($856, $858, ((105992)|0), $860);
      var $nd1246=$yyval;
      HEAP32[(($nd1246)>>2)]=$call1245;
      label = 546; break;
    case 278: 
      var $861=$p_addr;
      var $862=$yyvsp;
      var $arrayidx1248=((($862)-(8))|0);
      var $nd1249=$arrayidx1248;
      var $863=HEAP32[(($nd1249)>>2)];
      var $864=$yyvsp;
      var $arrayidx1250=(($864)|0);
      var $nd1251=$arrayidx1250;
      var $865=HEAP32[(($nd1251)>>2)];
      var $call1252=_new_and($861, $863, $865);
      var $nd1253=$yyval;
      HEAP32[(($nd1253)>>2)]=$call1252;
      label = 546; break;
    case 279: 
      var $866=$p_addr;
      var $867=$yyvsp;
      var $arrayidx1255=((($867)-(8))|0);
      var $nd1256=$arrayidx1255;
      var $868=HEAP32[(($nd1256)>>2)];
      var $869=$yyvsp;
      var $arrayidx1257=(($869)|0);
      var $nd1258=$arrayidx1257;
      var $870=HEAP32[(($nd1258)>>2)];
      var $call1259=_new_or($866, $868, $870);
      var $nd1260=$yyval;
      HEAP32[(($nd1260)>>2)]=$call1259;
      label = 546; break;
    case 280: 
      var $871=$p_addr;
      var $872=$yyvsp;
      var $arrayidx1262=((($872)-(20))|0);
      var $nd1263=$arrayidx1262;
      var $873=HEAP32[(($nd1263)>>2)];
      var $call1264=_cond($873);
      var $874=$yyvsp;
      var $arrayidx1265=((($874)-(12))|0);
      var $nd1266=$arrayidx1265;
      var $875=HEAP32[(($nd1266)>>2)];
      var $876=$yyvsp;
      var $arrayidx1267=(($876)|0);
      var $nd1268=$arrayidx1267;
      var $877=HEAP32[(($nd1268)>>2)];
      var $call1269=_new_if($871, $call1264, $875, $877);
      var $nd1270=$yyval;
      HEAP32[(($nd1270)>>2)]=$call1269;
      label = 546; break;
    case 281: 
      var $878=$yyvsp;
      var $arrayidx1272=(($878)|0);
      var $nd1273=$arrayidx1272;
      var $879=HEAP32[(($nd1273)>>2)];
      var $nd1274=$yyval;
      HEAP32[(($nd1274)>>2)]=$879;
      label = 546; break;
    case 282: 
      var $880=$yyvsp;
      var $arrayidx1276=(($880)|0);
      var $nd1277=$arrayidx1276;
      var $881=HEAP32[(($nd1277)>>2)];
      var $nd1278=$yyval;
      HEAP32[(($nd1278)>>2)]=$881;
      var $nd1279=$yyval;
      var $882=HEAP32[(($nd1279)>>2)];
      var $tobool1280=(($882)|(0))!=0;
      if ($tobool1280) { label = 284; break; } else { label = 283; break; }
    case 283: 
      var $883=$p_addr;
      var $call1282=_new_nil($883);
      var $nd1283=$yyval;
      HEAP32[(($nd1283)>>2)]=$call1282;
      label = 284; break;
    case 284: 
      label = 546; break;
    case 285: 
      var $884=$yyvsp;
      var $arrayidx1286=((($884)-(4))|0);
      var $nd1287=$arrayidx1286;
      var $885=HEAP32[(($nd1287)>>2)];
      var $nd1288=$yyval;
      HEAP32[(($nd1288)>>2)]=$885;
      label = 546; break;
    case 286: 
      var $886=$p_addr;
      var $887=$yyvsp;
      var $arrayidx1290=((($887)-(12))|0);
      var $nd1291=$arrayidx1290;
      var $888=HEAP32[(($nd1291)>>2)];
      var $889=$p_addr;
      var $890=$p_addr;
      var $891=$yyvsp;
      var $arrayidx1292=((($891)-(4))|0);
      var $nd1293=$arrayidx1292;
      var $892=HEAP32[(($nd1293)>>2)];
      var $call1294=_new_hash($890, $892);
      var $call1295=_list1_gen($889, $call1294);
      var $call1296=_append_gen($886, $888, $call1295);
      var $nd1297=$yyval;
      HEAP32[(($nd1297)>>2)]=$call1296;
      label = 546; break;
    case 287: 
      var $893=$p_addr;
      var $894=$p_addr;
      var $895=$yyvsp;
      var $arrayidx1299=((($895)-(4))|0);
      var $nd1300=$arrayidx1299;
      var $896=HEAP32[(($nd1300)>>2)];
      var $call1301=_new_hash($894, $896);
      var $call1302=_cons_gen($893, $call1301, 0);
      var $nd1303=$yyval;
      HEAP32[(($nd1303)>>2)]=$call1302;
      label = 546; break;
    case 288: 
      var $897=$yyvsp;
      var $arrayidx1305=((($897)-(4))|0);
      var $nd1306=$arrayidx1305;
      var $898=HEAP32[(($nd1306)>>2)];
      var $nd1307=$yyval;
      HEAP32[(($nd1307)>>2)]=$898;
      label = 546; break;
    case 289: 
      var $899=$p_addr;
      var $900=$yyvsp;
      var $arrayidx1309=((($900)-(4))|0);
      var $nd1310=$arrayidx1309;
      var $901=HEAP32[(($nd1310)>>2)];
      var $call1311=_cons_gen($899, $901, 0);
      var $nd1312=$yyval;
      HEAP32[(($nd1312)>>2)]=$call1311;
      label = 546; break;
    case 290: 
      var $902=$p_addr;
      var $903=$p_addr;
      var $904=$yyvsp;
      var $arrayidx1314=((($904)-(12))|0);
      var $nd1315=$arrayidx1314;
      var $905=HEAP32[(($nd1315)>>2)];
      var $906=$p_addr;
      var $907=$p_addr;
      var $908=$yyvsp;
      var $arrayidx1316=((($908)-(4))|0);
      var $nd1317=$arrayidx1316;
      var $909=HEAP32[(($nd1317)>>2)];
      var $call1318=_new_hash($907, $909);
      var $call1319=_list1_gen($906, $call1318);
      var $call1320=_append_gen($903, $905, $call1319);
      var $call1321=_cons_gen($902, $call1320, 0);
      var $nd1322=$yyval;
      HEAP32[(($nd1322)>>2)]=$call1321;
      label = 546; break;
    case 291: 
      var $910=$p_addr;
      var $911=$p_addr;
      var $912=$p_addr;
      var $913=$yyvsp;
      var $arrayidx1324=((($913)-(4))|0);
      var $nd1325=$arrayidx1324;
      var $914=HEAP32[(($nd1325)>>2)];
      var $call1326=_new_hash($912, $914);
      var $call1327=_list1_gen($911, $call1326);
      var $call1328=_cons_gen($910, $call1327, 0);
      var $nd1329=$yyval;
      HEAP32[(($nd1329)>>2)]=$call1328;
      label = 546; break;
    case 292: 
      var $915=$p_addr;
      var $916=$p_addr;
      var $917=$yyvsp;
      var $arrayidx1331=(($917)|0);
      var $nd1332=$arrayidx1331;
      var $918=HEAP32[(($nd1332)>>2)];
      var $call1333=_list1_gen($916, $918);
      var $call1334=_cons_gen($915, $call1333, 0);
      var $nd1335=$yyval;
      HEAP32[(($nd1335)>>2)]=$call1334;
      label = 546; break;
    case 293: 
      var $919=$p_addr;
      var $920=$yyvsp;
      var $arrayidx1337=((($920)-(4))|0);
      var $nd1338=$arrayidx1337;
      var $921=HEAP32[(($nd1338)>>2)];
      var $922=$yyvsp;
      var $arrayidx1339=(($922)|0);
      var $nd1340=$arrayidx1339;
      var $923=HEAP32[(($nd1340)>>2)];
      var $call1341=_cons_gen($919, $921, $923);
      var $nd1342=$yyval;
      HEAP32[(($nd1342)>>2)]=$call1341;
      label = 546; break;
    case 294: 
      var $924=$p_addr;
      var $925=$p_addr;
      var $926=$p_addr;
      var $927=$yyvsp;
      var $arrayidx1344=((($927)-(4))|0);
      var $nd1345=$arrayidx1344;
      var $928=HEAP32[(($nd1345)>>2)];
      var $call1346=_new_hash($926, $928);
      var $call1347=_list1_gen($925, $call1346);
      var $929=$yyvsp;
      var $arrayidx1348=(($929)|0);
      var $nd1349=$arrayidx1348;
      var $930=HEAP32[(($nd1349)>>2)];
      var $call1350=_cons_gen($924, $call1347, $930);
      var $nd1351=$yyval;
      HEAP32[(($nd1351)>>2)]=$call1350;
      label = 546; break;
    case 295: 
      var $931=$p_addr;
      var $932=$p_addr;
      var $933=$yyvsp;
      var $arrayidx1353=((($933)-(12))|0);
      var $nd1354=$arrayidx1353;
      var $934=HEAP32[(($nd1354)>>2)];
      var $935=$p_addr;
      var $936=$p_addr;
      var $937=$yyvsp;
      var $arrayidx1355=((($937)-(4))|0);
      var $nd1356=$arrayidx1355;
      var $938=HEAP32[(($nd1356)>>2)];
      var $call1357=_new_hash($936, $938);
      var $call1358=_list1_gen($935, $call1357);
      var $call1359=_append_gen($932, $934, $call1358);
      var $939=$yyvsp;
      var $arrayidx1360=(($939)|0);
      var $nd1361=$arrayidx1360;
      var $940=HEAP32[(($nd1361)>>2)];
      var $call1362=_cons_gen($931, $call1359, $940);
      var $nd1363=$yyval;
      HEAP32[(($nd1363)>>2)]=$call1362;
      label = 546; break;
    case 296: 
      var $941=$p_addr;
      var $942=$yyvsp;
      var $arrayidx1365=(($942)|0);
      var $nd1366=$arrayidx1365;
      var $943=HEAP32[(($nd1366)>>2)];
      var $call1367=_cons_gen($941, 0, $943);
      var $nd1368=$yyval;
      HEAP32[(($nd1368)>>2)]=$call1367;
      label = 546; break;
    case 297: 
      var $944=$p_addr;
      var $cmdarg_stack=(($944+52)|0);
      var $945=HEAP32[(($cmdarg_stack)>>2)];
      var $stack=$yyval;
      HEAP32[(($stack)>>2)]=$945;
      var $946=$p_addr;
      var $cmdarg_stack1370=(($946+52)|0);
      var $947=HEAP32[(($cmdarg_stack1370)>>2)];
      var $shl=$947 << 1;
      var $or=$shl | 1;
      var $948=$p_addr;
      var $cmdarg_stack1371=(($948+52)|0);
      HEAP32[(($cmdarg_stack1371)>>2)]=$or;
      label = 546; break;
    case 298: 
      var $949=$yyvsp;
      var $arrayidx1373=((($949)-(4))|0);
      var $stack1374=$arrayidx1373;
      var $950=HEAP32[(($stack1374)>>2)];
      var $951=$p_addr;
      var $cmdarg_stack1375=(($951+52)|0);
      HEAP32[(($cmdarg_stack1375)>>2)]=$950;
      var $952=$yyvsp;
      var $arrayidx1376=(($952)|0);
      var $nd1377=$arrayidx1376;
      var $953=HEAP32[(($nd1377)>>2)];
      var $nd1378=$yyval;
      HEAP32[(($nd1378)>>2)]=$953;
      label = 546; break;
    case 299: 
      var $954=$p_addr;
      var $955=$yyvsp;
      var $arrayidx1380=(($955)|0);
      var $nd1381=$arrayidx1380;
      var $956=HEAP32[(($nd1381)>>2)];
      var $call1382=_new_block_arg($954, $956);
      var $nd1383=$yyval;
      HEAP32[(($nd1383)>>2)]=$call1382;
      label = 546; break;
    case 300: 
      var $957=$yyvsp;
      var $arrayidx1385=(($957)|0);
      var $nd1386=$arrayidx1385;
      var $958=HEAP32[(($nd1386)>>2)];
      var $nd1387=$yyval;
      HEAP32[(($nd1387)>>2)]=$958;
      label = 546; break;
    case 301: 
      var $nd1389=$yyval;
      HEAP32[(($nd1389)>>2)]=0;
      label = 546; break;
    case 302: 
      var $959=$p_addr;
      var $960=$yyvsp;
      var $arrayidx1391=(($960)|0);
      var $nd1392=$arrayidx1391;
      var $961=HEAP32[(($nd1392)>>2)];
      var $call1393=_cons_gen($959, $961, 0);
      var $nd1394=$yyval;
      HEAP32[(($nd1394)>>2)]=$call1393;
      label = 546; break;
    case 303: 
      var $962=$p_addr;
      var $963=$p_addr;
      var $964=$yyvsp;
      var $arrayidx1396=(($964)|0);
      var $nd1397=$arrayidx1396;
      var $965=HEAP32[(($nd1397)>>2)];
      var $call1398=_new_splat($963, $965);
      var $call1399=_cons_gen($962, $call1398, 0);
      var $nd1400=$yyval;
      HEAP32[(($nd1400)>>2)]=$call1399;
      label = 546; break;
    case 304: 
      var $966=$p_addr;
      var $967=$yyvsp;
      var $arrayidx1402=((($967)-(8))|0);
      var $nd1403=$arrayidx1402;
      var $968=HEAP32[(($nd1403)>>2)];
      var $969=$p_addr;
      var $970=$yyvsp;
      var $arrayidx1404=(($970)|0);
      var $nd1405=$arrayidx1404;
      var $971=HEAP32[(($nd1405)>>2)];
      var $call1406=_list1_gen($969, $971);
      var $call1407=_append_gen($966, $968, $call1406);
      var $nd1408=$yyval;
      HEAP32[(($nd1408)>>2)]=$call1407;
      label = 546; break;
    case 305: 
      var $972=$p_addr;
      var $973=$yyvsp;
      var $arrayidx1410=((($973)-(12))|0);
      var $nd1411=$arrayidx1410;
      var $974=HEAP32[(($nd1411)>>2)];
      var $975=$p_addr;
      var $976=$p_addr;
      var $977=$yyvsp;
      var $arrayidx1412=(($977)|0);
      var $nd1413=$arrayidx1412;
      var $978=HEAP32[(($nd1413)>>2)];
      var $call1414=_new_splat($976, $978);
      var $call1415=_list1_gen($975, $call1414);
      var $call1416=_append_gen($972, $974, $call1415);
      var $nd1417=$yyval;
      HEAP32[(($nd1417)>>2)]=$call1416;
      label = 546; break;
    case 306: 
      var $979=$p_addr;
      var $980=$yyvsp;
      var $arrayidx1419=((($980)-(8))|0);
      var $nd1420=$arrayidx1419;
      var $981=HEAP32[(($nd1420)>>2)];
      var $982=$p_addr;
      var $983=$yyvsp;
      var $arrayidx1421=(($983)|0);
      var $nd1422=$arrayidx1421;
      var $984=HEAP32[(($nd1422)>>2)];
      var $call1423=_list1_gen($982, $984);
      var $call1424=_append_gen($979, $981, $call1423);
      var $nd1425=$yyval;
      HEAP32[(($nd1425)>>2)]=$call1424;
      label = 546; break;
    case 307: 
      var $985=$p_addr;
      var $986=$yyvsp;
      var $arrayidx1427=((($986)-(12))|0);
      var $nd1428=$arrayidx1427;
      var $987=HEAP32[(($nd1428)>>2)];
      var $988=$p_addr;
      var $989=$p_addr;
      var $990=$yyvsp;
      var $arrayidx1429=(($990)|0);
      var $nd1430=$arrayidx1429;
      var $991=HEAP32[(($nd1430)>>2)];
      var $call1431=_new_splat($989, $991);
      var $call1432=_list1_gen($988, $call1431);
      var $call1433=_append_gen($985, $987, $call1432);
      var $nd1434=$yyval;
      HEAP32[(($nd1434)>>2)]=$call1433;
      label = 546; break;
    case 308: 
      var $992=$p_addr;
      var $993=$p_addr;
      var $994=$yyvsp;
      var $arrayidx1436=(($994)|0);
      var $nd1437=$arrayidx1436;
      var $995=HEAP32[(($nd1437)>>2)];
      var $call1438=_new_splat($993, $995);
      var $call1439=_list1_gen($992, $call1438);
      var $nd1440=$yyval;
      HEAP32[(($nd1440)>>2)]=$call1439;
      label = 546; break;
    case 309: 
      var $996=$p_addr;
      var $997=$yyvsp;
      var $arrayidx1442=(($997)|0);
      var $id1443=$arrayidx1442;
      var $998=HEAP16[(($id1443)>>1)];
      var $call1444=_new_fcall($996, $998, 0);
      var $nd1445=$yyval;
      HEAP32[(($nd1445)>>2)]=$call1444;
      label = 546; break;
    case 310: 
      var $999=$p_addr;
      var $cmdarg_stack1447=(($999+52)|0);
      var $1000=HEAP32[(($cmdarg_stack1447)>>2)];
      var $1001=$yyvsp;
      var $arrayidx1448=(($1001)|0);
      var $stack1449=$arrayidx1448;
      HEAP32[(($stack1449)>>2)]=$1000;
      var $1002=$p_addr;
      var $cmdarg_stack1450=(($1002+52)|0);
      HEAP32[(($cmdarg_stack1450)>>2)]=0;
      label = 546; break;
    case 311: 
      var $1003=$yyvsp;
      var $arrayidx1452=((($1003)-(12))|0);
      var $stack1453=$arrayidx1452;
      var $1004=HEAP32[(($stack1453)>>2)];
      var $1005=$p_addr;
      var $cmdarg_stack1454=(($1005+52)|0);
      HEAP32[(($cmdarg_stack1454)>>2)]=$1004;
      var $1006=$yyvsp;
      var $arrayidx1455=((($1006)-(4))|0);
      var $nd1456=$arrayidx1455;
      var $1007=HEAP32[(($nd1456)>>2)];
      var $nd1457=$yyval;
      HEAP32[(($nd1457)>>2)]=$1007;
      label = 546; break;
    case 312: 
      var $1008=$p_addr;
      var $lstate1459=(($1008+40)|0);
      HEAP32[(($lstate1459)>>2)]=2;
      label = 546; break;
    case 313: 
      var $1009=$yyvsp;
      var $arrayidx1461=((($1009)-(8))|0);
      var $nd1462=$arrayidx1461;
      var $1010=HEAP32[(($nd1462)>>2)];
      var $nd1463=$yyval;
      HEAP32[(($nd1463)>>2)]=$1010;
      label = 546; break;
    case 314: 
      var $1011=$p_addr;
      var $lstate1465=(($1011+40)|0);
      HEAP32[(($lstate1465)>>2)]=2;
      label = 546; break;
    case 315: 
      var $nd1467=$yyval;
      HEAP32[(($nd1467)>>2)]=0;
      label = 546; break;
    case 316: 
      var $1012=$yyvsp;
      var $arrayidx1469=((($1012)-(4))|0);
      var $nd1470=$arrayidx1469;
      var $1013=HEAP32[(($nd1470)>>2)];
      var $nd1471=$yyval;
      HEAP32[(($nd1471)>>2)]=$1013;
      label = 546; break;
    case 317: 
      var $1014=$p_addr;
      var $1015=$yyvsp;
      var $arrayidx1473=((($1015)-(8))|0);
      var $nd1474=$arrayidx1473;
      var $1016=HEAP32[(($nd1474)>>2)];
      var $1017=$yyvsp;
      var $arrayidx1475=(($1017)|0);
      var $id1476=$arrayidx1475;
      var $1018=HEAP16[(($id1476)>>1)];
      var $call1477=_new_colon2($1014, $1016, $1018);
      var $nd1478=$yyval;
      HEAP32[(($nd1478)>>2)]=$call1477;
      label = 546; break;
    case 318: 
      var $1019=$p_addr;
      var $1020=$yyvsp;
      var $arrayidx1480=(($1020)|0);
      var $id1481=$arrayidx1480;
      var $1021=HEAP16[(($id1481)>>1)];
      var $call1482=_new_colon3($1019, $1021);
      var $nd1483=$yyval;
      HEAP32[(($nd1483)>>2)]=$call1482;
      label = 546; break;
    case 319: 
      var $1022=$p_addr;
      var $1023=$yyvsp;
      var $arrayidx1485=((($1023)-(4))|0);
      var $nd1486=$arrayidx1485;
      var $1024=HEAP32[(($nd1486)>>2)];
      var $call1487=_new_array($1022, $1024);
      var $nd1488=$yyval;
      HEAP32[(($nd1488)>>2)]=$call1487;
      label = 546; break;
    case 320: 
      var $1025=$p_addr;
      var $1026=$yyvsp;
      var $arrayidx1490=((($1026)-(4))|0);
      var $nd1491=$arrayidx1490;
      var $1027=HEAP32[(($nd1491)>>2)];
      var $call1492=_new_hash($1025, $1027);
      var $nd1493=$yyval;
      HEAP32[(($nd1493)>>2)]=$call1492;
      label = 546; break;
    case 321: 
      var $1028=$p_addr;
      var $call1495=_new_return($1028, 0);
      var $nd1496=$yyval;
      HEAP32[(($nd1496)>>2)]=$call1495;
      label = 546; break;
    case 322: 
      var $1029=$p_addr;
      var $1030=$yyvsp;
      var $arrayidx1498=((($1030)-(4))|0);
      var $nd1499=$arrayidx1498;
      var $1031=HEAP32[(($nd1499)>>2)];
      var $call1500=_new_yield($1029, $1031);
      var $nd1501=$yyval;
      HEAP32[(($nd1501)>>2)]=$call1500;
      label = 546; break;
    case 323: 
      var $1032=$p_addr;
      var $call1503=_new_yield($1032, 0);
      var $nd1504=$yyval;
      HEAP32[(($nd1504)>>2)]=$call1503;
      label = 546; break;
    case 324: 
      var $1033=$p_addr;
      var $call1506=_new_yield($1033, 0);
      var $nd1507=$yyval;
      HEAP32[(($nd1507)>>2)]=$call1506;
      label = 546; break;
    case 325: 
      var $1034=$p_addr;
      var $1035=$yyvsp;
      var $arrayidx1509=((($1035)-(4))|0);
      var $nd1510=$arrayidx1509;
      var $1036=HEAP32[(($nd1510)>>2)];
      var $call1511=_cond($1036);
      var $call1512=_call_uni_op($1034, $call1511, ((111092)|0));
      var $nd1513=$yyval;
      HEAP32[(($nd1513)>>2)]=$call1512;
      label = 546; break;
    case 326: 
      var $1037=$p_addr;
      var $1038=$p_addr;
      var $call1515=_new_nil($1038);
      var $call1516=_call_uni_op($1037, $call1515, ((111092)|0));
      var $nd1517=$yyval;
      HEAP32[(($nd1517)>>2)]=$call1516;
      label = 546; break;
    case 327: 
      var $1039=$p_addr;
      var $1040=$yyvsp;
      var $arrayidx1519=((($1040)-(4))|0);
      var $id1520=$arrayidx1519;
      var $1041=HEAP16[(($id1520)>>1)];
      var $1042=$p_addr;
      var $1043=$yyvsp;
      var $arrayidx1521=(($1043)|0);
      var $nd1522=$arrayidx1521;
      var $1044=HEAP32[(($nd1522)>>2)];
      var $call1523=_cons_gen($1042, 0, $1044);
      var $call1524=_new_fcall($1039, $1041, $call1523);
      var $nd1525=$yyval;
      HEAP32[(($nd1525)>>2)]=$call1524;
      label = 546; break;
    case 328: 
      var $1045=$p_addr;
      var $1046=$yyvsp;
      var $arrayidx1527=((($1046)-(4))|0);
      var $nd1528=$arrayidx1527;
      var $1047=HEAP32[(($nd1528)>>2)];
      var $1048=$yyvsp;
      var $arrayidx1529=(($1048)|0);
      var $nd1530=$arrayidx1529;
      var $1049=HEAP32[(($nd1530)>>2)];
      _call_with_block($1045, $1047, $1049);
      var $1050=$yyvsp;
      var $arrayidx1531=((($1050)-(4))|0);
      var $nd1532=$arrayidx1531;
      var $1051=HEAP32[(($nd1532)>>2)];
      var $nd1533=$yyval;
      HEAP32[(($nd1533)>>2)]=$1051;
      label = 546; break;
    case 329: 
      var $1052=$p_addr;
      _local_nest($1052);
      var $1053=$p_addr;
      var $lpar_beg=(($1053+60)|0);
      var $1054=HEAP32[(($lpar_beg)>>2)];
      var $num=$yyval;
      HEAP32[(($num)>>2)]=$1054;
      var $1055=$p_addr;
      var $paren_nest=(($1055+56)|0);
      var $1056=HEAP32[(($paren_nest)>>2)];
      var $inc=((($1056)+(1))|0);
      HEAP32[(($paren_nest)>>2)]=$inc;
      var $1057=$p_addr;
      var $lpar_beg1535=(($1057+60)|0);
      HEAP32[(($lpar_beg1535)>>2)]=$inc;
      label = 546; break;
    case 330: 
      var $1058=$yyvsp;
      var $arrayidx1537=((($1058)-(8))|0);
      var $num1538=$arrayidx1537;
      var $1059=HEAP32[(($num1538)>>2)];
      var $1060=$p_addr;
      var $lpar_beg1539=(($1060+60)|0);
      HEAP32[(($lpar_beg1539)>>2)]=$1059;
      var $1061=$p_addr;
      var $1062=$yyvsp;
      var $arrayidx1540=((($1062)-(4))|0);
      var $nd1541=$arrayidx1540;
      var $1063=HEAP32[(($nd1541)>>2)];
      var $1064=$yyvsp;
      var $arrayidx1542=(($1064)|0);
      var $nd1543=$arrayidx1542;
      var $1065=HEAP32[(($nd1543)>>2)];
      var $call1544=_new_lambda($1061, $1063, $1065);
      var $nd1545=$yyval;
      HEAP32[(($nd1545)>>2)]=$call1544;
      var $1066=$p_addr;
      _local_unnest($1066);
      label = 546; break;
    case 331: 
      var $1067=$p_addr;
      var $1068=$yyvsp;
      var $arrayidx1547=((($1068)-(16))|0);
      var $nd1548=$arrayidx1547;
      var $1069=HEAP32[(($nd1548)>>2)];
      var $call1549=_cond($1069);
      var $1070=$yyvsp;
      var $arrayidx1550=((($1070)-(8))|0);
      var $nd1551=$arrayidx1550;
      var $1071=HEAP32[(($nd1551)>>2)];
      var $1072=$yyvsp;
      var $arrayidx1552=((($1072)-(4))|0);
      var $nd1553=$arrayidx1552;
      var $1073=HEAP32[(($nd1553)>>2)];
      var $call1554=_new_if($1067, $call1549, $1071, $1073);
      var $nd1555=$yyval;
      HEAP32[(($nd1555)>>2)]=$call1554;
      label = 546; break;
    case 332: 
      var $1074=$p_addr;
      var $1075=$yyvsp;
      var $arrayidx1557=((($1075)-(16))|0);
      var $nd1558=$arrayidx1557;
      var $1076=HEAP32[(($nd1558)>>2)];
      var $call1559=_cond($1076);
      var $1077=$yyvsp;
      var $arrayidx1560=((($1077)-(8))|0);
      var $nd1561=$arrayidx1560;
      var $1078=HEAP32[(($nd1561)>>2)];
      var $1079=$yyvsp;
      var $arrayidx1562=((($1079)-(4))|0);
      var $nd1563=$arrayidx1562;
      var $1080=HEAP32[(($nd1563)>>2)];
      var $call1564=_new_unless($1074, $call1559, $1078, $1080);
      var $nd1565=$yyval;
      HEAP32[(($nd1565)>>2)]=$call1564;
      label = 546; break;
    case 333: 
      var $1081=$p_addr;
      var $cond_stack=(($1081+48)|0);
      var $1082=HEAP32[(($cond_stack)>>2)];
      var $shl1567=$1082 << 1;
      var $or1568=$shl1567 | 1;
      var $1083=$p_addr;
      var $cond_stack1569=(($1083+48)|0);
      HEAP32[(($cond_stack1569)>>2)]=$or1568;
      label = 546; break;
    case 334: 
      var $1084=$p_addr;
      var $cond_stack1571=(($1084+48)|0);
      var $1085=HEAP32[(($cond_stack1571)>>2)];
      var $shr=$1085 >>> 1;
      var $1086=$p_addr;
      var $cond_stack1572=(($1086+48)|0);
      HEAP32[(($cond_stack1572)>>2)]=$shr;
      label = 546; break;
    case 335: 
      var $1087=$p_addr;
      var $1088=$yyvsp;
      var $arrayidx1574=((($1088)-(16))|0);
      var $nd1575=$arrayidx1574;
      var $1089=HEAP32[(($nd1575)>>2)];
      var $call1576=_cond($1089);
      var $1090=$yyvsp;
      var $arrayidx1577=((($1090)-(4))|0);
      var $nd1578=$arrayidx1577;
      var $1091=HEAP32[(($nd1578)>>2)];
      var $call1579=_new_while($1087, $call1576, $1091);
      var $nd1580=$yyval;
      HEAP32[(($nd1580)>>2)]=$call1579;
      label = 546; break;
    case 336: 
      var $1092=$p_addr;
      var $cond_stack1582=(($1092+48)|0);
      var $1093=HEAP32[(($cond_stack1582)>>2)];
      var $shl1583=$1093 << 1;
      var $or1584=$shl1583 | 1;
      var $1094=$p_addr;
      var $cond_stack1585=(($1094+48)|0);
      HEAP32[(($cond_stack1585)>>2)]=$or1584;
      label = 546; break;
    case 337: 
      var $1095=$p_addr;
      var $cond_stack1587=(($1095+48)|0);
      var $1096=HEAP32[(($cond_stack1587)>>2)];
      var $shr1588=$1096 >>> 1;
      var $1097=$p_addr;
      var $cond_stack1589=(($1097+48)|0);
      HEAP32[(($cond_stack1589)>>2)]=$shr1588;
      label = 546; break;
    case 338: 
      var $1098=$p_addr;
      var $1099=$yyvsp;
      var $arrayidx1591=((($1099)-(16))|0);
      var $nd1592=$arrayidx1591;
      var $1100=HEAP32[(($nd1592)>>2)];
      var $call1593=_cond($1100);
      var $1101=$yyvsp;
      var $arrayidx1594=((($1101)-(4))|0);
      var $nd1595=$arrayidx1594;
      var $1102=HEAP32[(($nd1595)>>2)];
      var $call1596=_new_until($1098, $call1593, $1102);
      var $nd1597=$yyval;
      HEAP32[(($nd1597)>>2)]=$call1596;
      label = 546; break;
    case 339: 
      var $1103=$p_addr;
      var $1104=$yyvsp;
      var $arrayidx1599=((($1104)-(12))|0);
      var $nd1600=$arrayidx1599;
      var $1105=HEAP32[(($nd1600)>>2)];
      var $1106=$yyvsp;
      var $arrayidx1601=((($1106)-(4))|0);
      var $nd1602=$arrayidx1601;
      var $1107=HEAP32[(($nd1602)>>2)];
      var $call1603=_new_case($1103, $1105, $1107);
      var $nd1604=$yyval;
      HEAP32[(($nd1604)>>2)]=$call1603;
      label = 546; break;
    case 340: 
      var $1108=$p_addr;
      var $1109=$yyvsp;
      var $arrayidx1606=((($1109)-(4))|0);
      var $nd1607=$arrayidx1606;
      var $1110=HEAP32[(($nd1607)>>2)];
      var $call1608=_new_case($1108, 0, $1110);
      var $nd1609=$yyval;
      HEAP32[(($nd1609)>>2)]=$call1608;
      label = 546; break;
    case 341: 
      var $1111=$p_addr;
      var $cond_stack1611=(($1111+48)|0);
      var $1112=HEAP32[(($cond_stack1611)>>2)];
      var $shl1612=$1112 << 1;
      var $or1613=$shl1612 | 1;
      var $1113=$p_addr;
      var $cond_stack1614=(($1113+48)|0);
      HEAP32[(($cond_stack1614)>>2)]=$or1613;
      label = 546; break;
    case 342: 
      var $1114=$p_addr;
      var $cond_stack1616=(($1114+48)|0);
      var $1115=HEAP32[(($cond_stack1616)>>2)];
      var $shr1617=$1115 >>> 1;
      var $1116=$p_addr;
      var $cond_stack1618=(($1116+48)|0);
      HEAP32[(($cond_stack1618)>>2)]=$shr1617;
      label = 546; break;
    case 343: 
      var $1117=$p_addr;
      var $1118=$yyvsp;
      var $arrayidx1620=((($1118)-(28))|0);
      var $nd1621=$arrayidx1620;
      var $1119=HEAP32[(($nd1621)>>2)];
      var $1120=$yyvsp;
      var $arrayidx1622=((($1120)-(16))|0);
      var $nd1623=$arrayidx1622;
      var $1121=HEAP32[(($nd1623)>>2)];
      var $1122=$yyvsp;
      var $arrayidx1624=((($1122)-(4))|0);
      var $nd1625=$arrayidx1624;
      var $1123=HEAP32[(($nd1625)>>2)];
      var $call1626=_new_for($1117, $1119, $1121, $1123);
      var $nd1627=$yyval;
      HEAP32[(($nd1627)>>2)]=$call1626;
      label = 546; break;
    case 344: 
      var $1124=$p_addr;
      var $in_def1629=(($1124+64)|0);
      var $1125=HEAP32[(($in_def1629)>>2)];
      var $tobool1630=(($1125)|(0))!=0;
      if ($tobool1630) { label = 346; break; } else { label = 345; break; }
    case 345: 
      var $1126=$p_addr;
      var $in_single1632=(($1126+68)|0);
      var $1127=HEAP32[(($in_single1632)>>2)];
      var $tobool1633=(($1127)|(0))!=0;
      if ($tobool1633) { label = 346; break; } else { label = 347; break; }
    case 346: 
      var $1128=$p_addr;
      _yyerror($1128, ((101208)|0));
      label = 347; break;
    case 347: 
      var $1129=$p_addr;
      var $call1636=_local_switch($1129);
      var $nd1637=$yyval;
      HEAP32[(($nd1637)>>2)]=$call1636;
      label = 546; break;
    case 348: 
      var $1130=$p_addr;
      var $1131=$yyvsp;
      var $arrayidx1639=((($1131)-(16))|0);
      var $nd1640=$arrayidx1639;
      var $1132=HEAP32[(($nd1640)>>2)];
      var $1133=$yyvsp;
      var $arrayidx1641=((($1133)-(12))|0);
      var $nd1642=$arrayidx1641;
      var $1134=HEAP32[(($nd1642)>>2)];
      var $1135=$yyvsp;
      var $arrayidx1643=((($1135)-(4))|0);
      var $nd1644=$arrayidx1643;
      var $1136=HEAP32[(($nd1644)>>2)];
      var $call1645=_new_class($1130, $1132, $1134, $1136);
      var $nd1646=$yyval;
      HEAP32[(($nd1646)>>2)]=$call1645;
      var $1137=$p_addr;
      var $1138=$yyvsp;
      var $arrayidx1647=((($1138)-(8))|0);
      var $nd1648=$arrayidx1647;
      var $1139=HEAP32[(($nd1648)>>2)];
      _local_resume($1137, $1139);
      label = 546; break;
    case 349: 
      var $1140=$p_addr;
      var $in_def1650=(($1140+64)|0);
      var $1141=HEAP32[(($in_def1650)>>2)];
      var $num1651=$yyval;
      HEAP32[(($num1651)>>2)]=$1141;
      var $1142=$p_addr;
      var $in_def1652=(($1142+64)|0);
      HEAP32[(($in_def1652)>>2)]=0;
      label = 546; break;
    case 350: 
      var $1143=$p_addr;
      var $1144=$p_addr;
      var $call1654=_local_switch($1144);
      var $1145=$p_addr;
      var $in_single1655=(($1145+68)|0);
      var $1146=HEAP32[(($in_single1655)>>2)];
      var $1147=$1146;
      var $call1656=_cons_gen($1143, $call1654, $1147);
      var $nd1657=$yyval;
      HEAP32[(($nd1657)>>2)]=$call1656;
      var $1148=$p_addr;
      var $in_single1658=(($1148+68)|0);
      HEAP32[(($in_single1658)>>2)]=0;
      label = 546; break;
    case 351: 
      var $1149=$p_addr;
      var $1150=$yyvsp;
      var $arrayidx1660=((($1150)-(20))|0);
      var $nd1661=$arrayidx1660;
      var $1151=HEAP32[(($nd1661)>>2)];
      var $1152=$yyvsp;
      var $arrayidx1662=((($1152)-(4))|0);
      var $nd1663=$arrayidx1662;
      var $1153=HEAP32[(($nd1663)>>2)];
      var $call1664=_new_sclass($1149, $1151, $1153);
      var $nd1665=$yyval;
      HEAP32[(($nd1665)>>2)]=$call1664;
      var $1154=$p_addr;
      var $1155=$yyvsp;
      var $arrayidx1666=((($1155)-(8))|0);
      var $nd1667=$arrayidx1666;
      var $1156=HEAP32[(($nd1667)>>2)];
      var $car=(($1156)|0);
      var $1157=HEAP32[(($car)>>2)];
      _local_resume($1154, $1157);
      var $1158=$yyvsp;
      var $arrayidx1668=((($1158)-(16))|0);
      var $num1669=$arrayidx1668;
      var $1159=HEAP32[(($num1669)>>2)];
      var $1160=$p_addr;
      var $in_def1670=(($1160+64)|0);
      HEAP32[(($in_def1670)>>2)]=$1159;
      var $1161=$yyvsp;
      var $arrayidx1671=((($1161)-(8))|0);
      var $nd1672=$arrayidx1671;
      var $1162=HEAP32[(($nd1672)>>2)];
      var $cdr=(($1162+4)|0);
      var $1163=HEAP32[(($cdr)>>2)];
      var $1164=$1163;
      var $1165=$p_addr;
      var $in_single1673=(($1165+68)|0);
      HEAP32[(($in_single1673)>>2)]=$1164;
      label = 546; break;
    case 352: 
      var $1166=$p_addr;
      var $in_def1675=(($1166+64)|0);
      var $1167=HEAP32[(($in_def1675)>>2)];
      var $tobool1676=(($1167)|(0))!=0;
      if ($tobool1676) { label = 354; break; } else { label = 353; break; }
    case 353: 
      var $1168=$p_addr;
      var $in_single1678=(($1168+68)|0);
      var $1169=HEAP32[(($in_single1678)>>2)];
      var $tobool1679=(($1169)|(0))!=0;
      if ($tobool1679) { label = 354; break; } else { label = 355; break; }
    case 354: 
      var $1170=$p_addr;
      _yyerror($1170, ((100928)|0));
      label = 355; break;
    case 355: 
      var $1171=$p_addr;
      var $call1682=_local_switch($1171);
      var $nd1683=$yyval;
      HEAP32[(($nd1683)>>2)]=$call1682;
      label = 546; break;
    case 356: 
      var $1172=$p_addr;
      var $1173=$yyvsp;
      var $arrayidx1685=((($1173)-(12))|0);
      var $nd1686=$arrayidx1685;
      var $1174=HEAP32[(($nd1686)>>2)];
      var $1175=$yyvsp;
      var $arrayidx1687=((($1175)-(4))|0);
      var $nd1688=$arrayidx1687;
      var $1176=HEAP32[(($nd1688)>>2)];
      var $call1689=_new_module($1172, $1174, $1176);
      var $nd1690=$yyval;
      HEAP32[(($nd1690)>>2)]=$call1689;
      var $1177=$p_addr;
      var $1178=$yyvsp;
      var $arrayidx1691=((($1178)-(8))|0);
      var $nd1692=$arrayidx1691;
      var $1179=HEAP32[(($nd1692)>>2)];
      _local_resume($1177, $1179);
      label = 546; break;
    case 357: 
      var $1180=$p_addr;
      var $in_def1694=(($1180+64)|0);
      var $1181=HEAP32[(($in_def1694)>>2)];
      var $inc1695=((($1181)+(1))|0);
      HEAP32[(($in_def1694)>>2)]=$inc1695;
      var $1182=$p_addr;
      var $call1696=_local_switch($1182);
      var $nd1697=$yyval;
      HEAP32[(($nd1697)>>2)]=$call1696;
      label = 546; break;
    case 358: 
      var $1183=$p_addr;
      var $1184=$yyvsp;
      var $arrayidx1699=((($1184)-(16))|0);
      var $id1700=$arrayidx1699;
      var $1185=HEAP16[(($id1700)>>1)];
      var $1186=$yyvsp;
      var $arrayidx1701=((($1186)-(8))|0);
      var $nd1702=$arrayidx1701;
      var $1187=HEAP32[(($nd1702)>>2)];
      var $1188=$yyvsp;
      var $arrayidx1703=((($1188)-(4))|0);
      var $nd1704=$arrayidx1703;
      var $1189=HEAP32[(($nd1704)>>2)];
      var $call1705=_new_def($1183, $1185, $1187, $1189);
      var $nd1706=$yyval;
      HEAP32[(($nd1706)>>2)]=$call1705;
      var $1190=$p_addr;
      var $1191=$yyvsp;
      var $arrayidx1707=((($1191)-(12))|0);
      var $nd1708=$arrayidx1707;
      var $1192=HEAP32[(($nd1708)>>2)];
      _local_resume($1190, $1192);
      var $1193=$p_addr;
      var $in_def1709=(($1193+64)|0);
      var $1194=HEAP32[(($in_def1709)>>2)];
      var $dec1710=((($1194)-(1))|0);
      HEAP32[(($in_def1709)>>2)]=$dec1710;
      label = 546; break;
    case 359: 
      var $1195=$p_addr;
      var $lstate1712=(($1195+40)|0);
      HEAP32[(($lstate1712)>>2)]=7;
      label = 546; break;
    case 360: 
      var $1196=$p_addr;
      var $in_single1714=(($1196+68)|0);
      var $1197=HEAP32[(($in_single1714)>>2)];
      var $inc1715=((($1197)+(1))|0);
      HEAP32[(($in_single1714)>>2)]=$inc1715;
      var $1198=$p_addr;
      var $lstate1716=(($1198+40)|0);
      HEAP32[(($lstate1716)>>2)]=3;
      var $1199=$p_addr;
      var $call1717=_local_switch($1199);
      var $nd1718=$yyval;
      HEAP32[(($nd1718)>>2)]=$call1717;
      label = 546; break;
    case 361: 
      var $1200=$p_addr;
      var $1201=$yyvsp;
      var $arrayidx1720=((($1201)-(28))|0);
      var $nd1721=$arrayidx1720;
      var $1202=HEAP32[(($nd1721)>>2)];
      var $1203=$yyvsp;
      var $arrayidx1722=((($1203)-(16))|0);
      var $id1723=$arrayidx1722;
      var $1204=HEAP16[(($id1723)>>1)];
      var $1205=$yyvsp;
      var $arrayidx1724=((($1205)-(8))|0);
      var $nd1725=$arrayidx1724;
      var $1206=HEAP32[(($nd1725)>>2)];
      var $1207=$yyvsp;
      var $arrayidx1726=((($1207)-(4))|0);
      var $nd1727=$arrayidx1726;
      var $1208=HEAP32[(($nd1727)>>2)];
      var $call1728=_new_sdef($1200, $1202, $1204, $1206, $1208);
      var $nd1729=$yyval;
      HEAP32[(($nd1729)>>2)]=$call1728;
      var $1209=$p_addr;
      var $1210=$yyvsp;
      var $arrayidx1730=((($1210)-(12))|0);
      var $nd1731=$arrayidx1730;
      var $1211=HEAP32[(($nd1731)>>2)];
      _local_resume($1209, $1211);
      var $1212=$p_addr;
      var $in_single1732=(($1212+68)|0);
      var $1213=HEAP32[(($in_single1732)>>2)];
      var $dec1733=((($1213)-(1))|0);
      HEAP32[(($in_single1732)>>2)]=$dec1733;
      label = 546; break;
    case 362: 
      var $1214=$p_addr;
      var $call1735=_new_break($1214, 0);
      var $nd1736=$yyval;
      HEAP32[(($nd1736)>>2)]=$call1735;
      label = 546; break;
    case 363: 
      var $1215=$p_addr;
      var $call1738=_new_next($1215, 0);
      var $nd1739=$yyval;
      HEAP32[(($nd1739)>>2)]=$call1738;
      label = 546; break;
    case 364: 
      var $1216=$p_addr;
      var $call1741=_new_redo($1216);
      var $nd1742=$yyval;
      HEAP32[(($nd1742)>>2)]=$call1741;
      label = 546; break;
    case 365: 
      var $1217=$p_addr;
      var $call1744=_new_retry($1217);
      var $nd1745=$yyval;
      HEAP32[(($nd1745)>>2)]=$call1744;
      label = 546; break;
    case 366: 
      var $1218=$yyvsp;
      var $arrayidx1747=(($1218)|0);
      var $nd1748=$arrayidx1747;
      var $1219=HEAP32[(($nd1748)>>2)];
      var $nd1749=$yyval;
      HEAP32[(($nd1749)>>2)]=$1219;
      var $nd1750=$yyval;
      var $1220=HEAP32[(($nd1750)>>2)];
      var $tobool1751=(($1220)|(0))!=0;
      if ($tobool1751) { label = 368; break; } else { label = 367; break; }
    case 367: 
      var $1221=$p_addr;
      var $call1753=_new_nil($1221);
      var $nd1754=$yyval;
      HEAP32[(($nd1754)>>2)]=$call1753;
      label = 368; break;
    case 368: 
      label = 546; break;
    case 369: 
      var $1222=$p_addr;
      var $1223=$yyvsp;
      var $arrayidx1757=((($1223)-(12))|0);
      var $nd1758=$arrayidx1757;
      var $1224=HEAP32[(($nd1758)>>2)];
      var $call1759=_cond($1224);
      var $1225=$yyvsp;
      var $arrayidx1760=((($1225)-(4))|0);
      var $nd1761=$arrayidx1760;
      var $1226=HEAP32[(($nd1761)>>2)];
      var $1227=$yyvsp;
      var $arrayidx1762=(($1227)|0);
      var $nd1763=$arrayidx1762;
      var $1228=HEAP32[(($nd1763)>>2)];
      var $call1764=_new_if($1222, $call1759, $1226, $1228);
      var $nd1765=$yyval;
      HEAP32[(($nd1765)>>2)]=$call1764;
      label = 546; break;
    case 370: 
      var $1229=$yyvsp;
      var $arrayidx1767=(($1229)|0);
      var $nd1768=$arrayidx1767;
      var $1230=HEAP32[(($nd1768)>>2)];
      var $nd1769=$yyval;
      HEAP32[(($nd1769)>>2)]=$1230;
      label = 546; break;
    case 371: 
      var $1231=$p_addr;
      var $1232=$p_addr;
      var $1233=$yyvsp;
      var $arrayidx1771=(($1233)|0);
      var $nd1772=$arrayidx1771;
      var $1234=HEAP32[(($nd1772)>>2)];
      var $call1773=_list1_gen($1232, $1234);
      var $call1774=_list1_gen($1231, $call1773);
      var $nd1775=$yyval;
      HEAP32[(($nd1775)>>2)]=$call1774;
      label = 546; break;
    case 372: 
      var $1235=$p_addr;
      var $1236=$yyvsp;
      var $arrayidx1777=(($1236)|0);
      var $id1778=$arrayidx1777;
      var $1237=HEAP16[(($id1778)>>1)];
      var $call1779=_new_arg($1235, $1237);
      var $nd1780=$yyval;
      HEAP32[(($nd1780)>>2)]=$call1779;
      label = 546; break;
    case 373: 
      var $1238=$p_addr;
      var $1239=$yyvsp;
      var $arrayidx1782=((($1239)-(4))|0);
      var $nd1783=$arrayidx1782;
      var $1240=HEAP32[(($nd1783)>>2)];
      var $call1784=_new_masgn($1238, $1240, 0);
      var $nd1785=$yyval;
      HEAP32[(($nd1785)>>2)]=$call1784;
      label = 546; break;
    case 374: 
      var $1241=$p_addr;
      var $1242=$yyvsp;
      var $arrayidx1787=(($1242)|0);
      var $nd1788=$arrayidx1787;
      var $1243=HEAP32[(($nd1788)>>2)];
      var $call1789=_list1_gen($1241, $1243);
      var $nd1790=$yyval;
      HEAP32[(($nd1790)>>2)]=$call1789;
      label = 546; break;
    case 375: 
      var $1244=$p_addr;
      var $1245=$yyvsp;
      var $arrayidx1792=((($1245)-(8))|0);
      var $nd1793=$arrayidx1792;
      var $1246=HEAP32[(($nd1793)>>2)];
      var $1247=$p_addr;
      var $1248=$yyvsp;
      var $arrayidx1794=(($1248)|0);
      var $nd1795=$arrayidx1794;
      var $1249=HEAP32[(($nd1795)>>2)];
      var $call1796=_list1_gen($1247, $1249);
      var $call1797=_append_gen($1244, $1246, $call1796);
      var $nd1798=$yyval;
      HEAP32[(($nd1798)>>2)]=$call1797;
      label = 546; break;
    case 376: 
      var $1250=$p_addr;
      var $1251=$yyvsp;
      var $arrayidx1800=(($1251)|0);
      var $nd1801=$arrayidx1800;
      var $1252=HEAP32[(($nd1801)>>2)];
      var $call1802=_list3_gen($1250, $1252, 0, 0);
      var $nd1803=$yyval;
      HEAP32[(($nd1803)>>2)]=$call1802;
      label = 546; break;
    case 377: 
      var $1253=$p_addr;
      var $1254=$yyvsp;
      var $arrayidx1805=((($1254)-(12))|0);
      var $nd1806=$arrayidx1805;
      var $1255=HEAP32[(($nd1806)>>2)];
      var $1256=$p_addr;
      var $1257=$yyvsp;
      var $arrayidx1807=(($1257)|0);
      var $id1808=$arrayidx1807;
      var $1258=HEAP16[(($id1808)>>1)];
      var $call1809=_new_arg($1256, $1258);
      var $call1810=_list3_gen($1253, $1255, $call1809, 0);
      var $nd1811=$yyval;
      HEAP32[(($nd1811)>>2)]=$call1810;
      label = 546; break;
    case 378: 
      var $1259=$p_addr;
      var $1260=$yyvsp;
      var $arrayidx1813=((($1260)-(20))|0);
      var $nd1814=$arrayidx1813;
      var $1261=HEAP32[(($nd1814)>>2)];
      var $1262=$p_addr;
      var $1263=$yyvsp;
      var $arrayidx1815=((($1263)-(8))|0);
      var $id1816=$arrayidx1815;
      var $1264=HEAP16[(($id1816)>>1)];
      var $call1817=_new_arg($1262, $1264);
      var $1265=$yyvsp;
      var $arrayidx1818=(($1265)|0);
      var $nd1819=$arrayidx1818;
      var $1266=HEAP32[(($nd1819)>>2)];
      var $call1820=_list3_gen($1259, $1261, $call1817, $1266);
      var $nd1821=$yyval;
      HEAP32[(($nd1821)>>2)]=$call1820;
      label = 546; break;
    case 379: 
      var $1267=$p_addr;
      var $1268=$yyvsp;
      var $arrayidx1823=((($1268)-(8))|0);
      var $nd1824=$arrayidx1823;
      var $1269=HEAP32[(($nd1824)>>2)];
      var $call1825=_list3_gen($1267, $1269, -1, 0);
      var $nd1826=$yyval;
      HEAP32[(($nd1826)>>2)]=$call1825;
      label = 546; break;
    case 380: 
      var $1270=$p_addr;
      var $1271=$yyvsp;
      var $arrayidx1828=((($1271)-(16))|0);
      var $nd1829=$arrayidx1828;
      var $1272=HEAP32[(($nd1829)>>2)];
      var $1273=$yyvsp;
      var $arrayidx1830=(($1273)|0);
      var $nd1831=$arrayidx1830;
      var $1274=HEAP32[(($nd1831)>>2)];
      var $call1832=_list3_gen($1270, $1272, -1, $1274);
      var $nd1833=$yyval;
      HEAP32[(($nd1833)>>2)]=$call1832;
      label = 546; break;
    case 381: 
      var $1275=$p_addr;
      var $1276=$p_addr;
      var $1277=$yyvsp;
      var $arrayidx1835=(($1277)|0);
      var $id1836=$arrayidx1835;
      var $1278=HEAP16[(($id1836)>>1)];
      var $call1837=_new_arg($1276, $1278);
      var $call1838=_list3_gen($1275, 0, $call1837, 0);
      var $nd1839=$yyval;
      HEAP32[(($nd1839)>>2)]=$call1838;
      label = 546; break;
    case 382: 
      var $1279=$p_addr;
      var $1280=$p_addr;
      var $1281=$yyvsp;
      var $arrayidx1841=((($1281)-(8))|0);
      var $id1842=$arrayidx1841;
      var $1282=HEAP16[(($id1842)>>1)];
      var $call1843=_new_arg($1280, $1282);
      var $1283=$yyvsp;
      var $arrayidx1844=(($1283)|0);
      var $nd1845=$arrayidx1844;
      var $1284=HEAP32[(($nd1845)>>2)];
      var $call1846=_list3_gen($1279, 0, $call1843, $1284);
      var $nd1847=$yyval;
      HEAP32[(($nd1847)>>2)]=$call1846;
      label = 546; break;
    case 383: 
      var $1285=$p_addr;
      var $call1849=_list3_gen($1285, 0, -1, 0);
      var $nd1850=$yyval;
      HEAP32[(($nd1850)>>2)]=$call1849;
      label = 546; break;
    case 384: 
      var $1286=$p_addr;
      var $1287=$yyvsp;
      var $arrayidx1852=(($1287)|0);
      var $nd1853=$arrayidx1852;
      var $1288=HEAP32[(($nd1853)>>2)];
      var $call1854=_list3_gen($1286, 0, -1, $1288);
      var $nd1855=$yyval;
      HEAP32[(($nd1855)>>2)]=$call1854;
      label = 546; break;
    case 385: 
      var $1289=$p_addr;
      var $1290=$yyvsp;
      var $arrayidx1857=((($1290)-(20))|0);
      var $nd1858=$arrayidx1857;
      var $1291=HEAP32[(($nd1858)>>2)];
      var $1292=$yyvsp;
      var $arrayidx1859=((($1292)-(12))|0);
      var $nd1860=$arrayidx1859;
      var $1293=HEAP32[(($nd1860)>>2)];
      var $1294=$yyvsp;
      var $arrayidx1861=((($1294)-(4))|0);
      var $id1862=$arrayidx1861;
      var $1295=HEAP16[(($id1862)>>1)];
      var $1296=$yyvsp;
      var $arrayidx1863=(($1296)|0);
      var $id1864=$arrayidx1863;
      var $1297=HEAP16[(($id1864)>>1)];
      var $call1865=_new_args($1289, $1291, $1293, $1295, 0, $1297);
      var $nd1866=$yyval;
      HEAP32[(($nd1866)>>2)]=$call1865;
      label = 546; break;
    case 386: 
      var $1298=$p_addr;
      var $1299=$yyvsp;
      var $arrayidx1868=((($1299)-(28))|0);
      var $nd1869=$arrayidx1868;
      var $1300=HEAP32[(($nd1869)>>2)];
      var $1301=$yyvsp;
      var $arrayidx1870=((($1301)-(20))|0);
      var $nd1871=$arrayidx1870;
      var $1302=HEAP32[(($nd1871)>>2)];
      var $1303=$yyvsp;
      var $arrayidx1872=((($1303)-(12))|0);
      var $id1873=$arrayidx1872;
      var $1304=HEAP16[(($id1873)>>1)];
      var $1305=$yyvsp;
      var $arrayidx1874=((($1305)-(4))|0);
      var $nd1875=$arrayidx1874;
      var $1306=HEAP32[(($nd1875)>>2)];
      var $1307=$yyvsp;
      var $arrayidx1876=(($1307)|0);
      var $id1877=$arrayidx1876;
      var $1308=HEAP16[(($id1877)>>1)];
      var $call1878=_new_args($1298, $1300, $1302, $1304, $1306, $1308);
      var $nd1879=$yyval;
      HEAP32[(($nd1879)>>2)]=$call1878;
      label = 546; break;
    case 387: 
      var $1309=$p_addr;
      var $1310=$yyvsp;
      var $arrayidx1881=((($1310)-(12))|0);
      var $nd1882=$arrayidx1881;
      var $1311=HEAP32[(($nd1882)>>2)];
      var $1312=$yyvsp;
      var $arrayidx1883=((($1312)-(4))|0);
      var $nd1884=$arrayidx1883;
      var $1313=HEAP32[(($nd1884)>>2)];
      var $1314=$yyvsp;
      var $arrayidx1885=(($1314)|0);
      var $id1886=$arrayidx1885;
      var $1315=HEAP16[(($id1886)>>1)];
      var $call1887=_new_args($1309, $1311, $1313, 0, 0, $1315);
      var $nd1888=$yyval;
      HEAP32[(($nd1888)>>2)]=$call1887;
      label = 546; break;
    case 388: 
      var $1316=$p_addr;
      var $1317=$yyvsp;
      var $arrayidx1890=((($1317)-(20))|0);
      var $nd1891=$arrayidx1890;
      var $1318=HEAP32[(($nd1891)>>2)];
      var $1319=$yyvsp;
      var $arrayidx1892=((($1319)-(12))|0);
      var $nd1893=$arrayidx1892;
      var $1320=HEAP32[(($nd1893)>>2)];
      var $1321=$yyvsp;
      var $arrayidx1894=((($1321)-(4))|0);
      var $nd1895=$arrayidx1894;
      var $1322=HEAP32[(($nd1895)>>2)];
      var $1323=$yyvsp;
      var $arrayidx1896=(($1323)|0);
      var $id1897=$arrayidx1896;
      var $1324=HEAP16[(($id1897)>>1)];
      var $call1898=_new_args($1316, $1318, $1320, 0, $1322, $1324);
      var $nd1899=$yyval;
      HEAP32[(($nd1899)>>2)]=$call1898;
      label = 546; break;
    case 389: 
      var $1325=$p_addr;
      var $1326=$yyvsp;
      var $arrayidx1901=((($1326)-(12))|0);
      var $nd1902=$arrayidx1901;
      var $1327=HEAP32[(($nd1902)>>2)];
      var $1328=$yyvsp;
      var $arrayidx1903=((($1328)-(4))|0);
      var $id1904=$arrayidx1903;
      var $1329=HEAP16[(($id1904)>>1)];
      var $1330=$yyvsp;
      var $arrayidx1905=(($1330)|0);
      var $id1906=$arrayidx1905;
      var $1331=HEAP16[(($id1906)>>1)];
      var $call1907=_new_args($1325, $1327, 0, $1329, 0, $1331);
      var $nd1908=$yyval;
      HEAP32[(($nd1908)>>2)]=$call1907;
      label = 546; break;
    case 390: 
      var $1332=$p_addr;
      var $1333=$yyvsp;
      var $arrayidx1910=((($1333)-(4))|0);
      var $nd1911=$arrayidx1910;
      var $1334=HEAP32[(($nd1911)>>2)];
      var $call1912=_new_args($1332, $1334, 0, 1, 0, 0);
      var $nd1913=$yyval;
      HEAP32[(($nd1913)>>2)]=$call1912;
      label = 546; break;
    case 391: 
      var $1335=$p_addr;
      var $1336=$yyvsp;
      var $arrayidx1915=((($1336)-(20))|0);
      var $nd1916=$arrayidx1915;
      var $1337=HEAP32[(($nd1916)>>2)];
      var $1338=$yyvsp;
      var $arrayidx1917=((($1338)-(12))|0);
      var $id1918=$arrayidx1917;
      var $1339=HEAP16[(($id1918)>>1)];
      var $1340=$yyvsp;
      var $arrayidx1919=((($1340)-(4))|0);
      var $nd1920=$arrayidx1919;
      var $1341=HEAP32[(($nd1920)>>2)];
      var $1342=$yyvsp;
      var $arrayidx1921=(($1342)|0);
      var $id1922=$arrayidx1921;
      var $1343=HEAP16[(($id1922)>>1)];
      var $call1923=_new_args($1335, $1337, 0, $1339, $1341, $1343);
      var $nd1924=$yyval;
      HEAP32[(($nd1924)>>2)]=$call1923;
      label = 546; break;
    case 392: 
      var $1344=$p_addr;
      var $1345=$yyvsp;
      var $arrayidx1926=((($1345)-(4))|0);
      var $nd1927=$arrayidx1926;
      var $1346=HEAP32[(($nd1927)>>2)];
      var $1347=$yyvsp;
      var $arrayidx1928=(($1347)|0);
      var $id1929=$arrayidx1928;
      var $1348=HEAP16[(($id1929)>>1)];
      var $call1930=_new_args($1344, $1346, 0, 0, 0, $1348);
      var $nd1931=$yyval;
      HEAP32[(($nd1931)>>2)]=$call1930;
      label = 546; break;
    case 393: 
      var $1349=$p_addr;
      var $1350=$yyvsp;
      var $arrayidx1933=((($1350)-(12))|0);
      var $nd1934=$arrayidx1933;
      var $1351=HEAP32[(($nd1934)>>2)];
      var $1352=$yyvsp;
      var $arrayidx1935=((($1352)-(4))|0);
      var $id1936=$arrayidx1935;
      var $1353=HEAP16[(($id1936)>>1)];
      var $1354=$yyvsp;
      var $arrayidx1937=(($1354)|0);
      var $id1938=$arrayidx1937;
      var $1355=HEAP16[(($id1938)>>1)];
      var $call1939=_new_args($1349, 0, $1351, $1353, 0, $1355);
      var $nd1940=$yyval;
      HEAP32[(($nd1940)>>2)]=$call1939;
      label = 546; break;
    case 394: 
      var $1356=$p_addr;
      var $1357=$yyvsp;
      var $arrayidx1942=((($1357)-(20))|0);
      var $nd1943=$arrayidx1942;
      var $1358=HEAP32[(($nd1943)>>2)];
      var $1359=$yyvsp;
      var $arrayidx1944=((($1359)-(12))|0);
      var $id1945=$arrayidx1944;
      var $1360=HEAP16[(($id1945)>>1)];
      var $1361=$yyvsp;
      var $arrayidx1946=((($1361)-(4))|0);
      var $nd1947=$arrayidx1946;
      var $1362=HEAP32[(($nd1947)>>2)];
      var $1363=$yyvsp;
      var $arrayidx1948=(($1363)|0);
      var $id1949=$arrayidx1948;
      var $1364=HEAP16[(($id1949)>>1)];
      var $call1950=_new_args($1356, 0, $1358, $1360, $1362, $1364);
      var $nd1951=$yyval;
      HEAP32[(($nd1951)>>2)]=$call1950;
      label = 546; break;
    case 395: 
      var $1365=$p_addr;
      var $1366=$yyvsp;
      var $arrayidx1953=((($1366)-(4))|0);
      var $nd1954=$arrayidx1953;
      var $1367=HEAP32[(($nd1954)>>2)];
      var $1368=$yyvsp;
      var $arrayidx1955=(($1368)|0);
      var $id1956=$arrayidx1955;
      var $1369=HEAP16[(($id1956)>>1)];
      var $call1957=_new_args($1365, 0, $1367, 0, 0, $1369);
      var $nd1958=$yyval;
      HEAP32[(($nd1958)>>2)]=$call1957;
      label = 546; break;
    case 396: 
      var $1370=$p_addr;
      var $1371=$yyvsp;
      var $arrayidx1960=((($1371)-(12))|0);
      var $nd1961=$arrayidx1960;
      var $1372=HEAP32[(($nd1961)>>2)];
      var $1373=$yyvsp;
      var $arrayidx1962=((($1373)-(4))|0);
      var $nd1963=$arrayidx1962;
      var $1374=HEAP32[(($nd1963)>>2)];
      var $1375=$yyvsp;
      var $arrayidx1964=(($1375)|0);
      var $id1965=$arrayidx1964;
      var $1376=HEAP16[(($id1965)>>1)];
      var $call1966=_new_args($1370, 0, $1372, 0, $1374, $1376);
      var $nd1967=$yyval;
      HEAP32[(($nd1967)>>2)]=$call1966;
      label = 546; break;
    case 397: 
      var $1377=$p_addr;
      var $1378=$yyvsp;
      var $arrayidx1969=((($1378)-(4))|0);
      var $id1970=$arrayidx1969;
      var $1379=HEAP16[(($id1970)>>1)];
      var $1380=$yyvsp;
      var $arrayidx1971=(($1380)|0);
      var $id1972=$arrayidx1971;
      var $1381=HEAP16[(($id1972)>>1)];
      var $call1973=_new_args($1377, 0, 0, $1379, 0, $1381);
      var $nd1974=$yyval;
      HEAP32[(($nd1974)>>2)]=$call1973;
      label = 546; break;
    case 398: 
      var $1382=$p_addr;
      var $1383=$yyvsp;
      var $arrayidx1976=((($1383)-(12))|0);
      var $id1977=$arrayidx1976;
      var $1384=HEAP16[(($id1977)>>1)];
      var $1385=$yyvsp;
      var $arrayidx1978=((($1385)-(4))|0);
      var $nd1979=$arrayidx1978;
      var $1386=HEAP32[(($nd1979)>>2)];
      var $1387=$yyvsp;
      var $arrayidx1980=(($1387)|0);
      var $id1981=$arrayidx1980;
      var $1388=HEAP16[(($id1981)>>1)];
      var $call1982=_new_args($1382, 0, 0, $1384, $1386, $1388);
      var $nd1983=$yyval;
      HEAP32[(($nd1983)>>2)]=$call1982;
      label = 546; break;
    case 399: 
      var $1389=$p_addr;
      var $1390=$yyvsp;
      var $arrayidx1985=(($1390)|0);
      var $id1986=$arrayidx1985;
      var $1391=HEAP16[(($id1986)>>1)];
      var $call1987=_new_args($1389, 0, 0, 0, 0, $1391);
      var $nd1988=$yyval;
      HEAP32[(($nd1988)>>2)]=$call1987;
      label = 546; break;
    case 400: 
      var $1392=$p_addr;
      var $cmd_start=(($1392+72)|0);
      HEAP32[(($cmd_start)>>2)]=1;
      var $1393=$yyvsp;
      var $arrayidx1990=(($1393)|0);
      var $nd1991=$arrayidx1990;
      var $1394=HEAP32[(($nd1991)>>2)];
      var $nd1992=$yyval;
      HEAP32[(($nd1992)>>2)]=$1394;
      label = 546; break;
    case 401: 
      var $1395=$p_addr;
      _local_add_f($1395, 0);
      var $nd1994=$yyval;
      HEAP32[(($nd1994)>>2)]=0;
      label = 546; break;
    case 402: 
      var $1396=$p_addr;
      _local_add_f($1396, 0);
      var $nd1996=$yyval;
      HEAP32[(($nd1996)>>2)]=0;
      label = 546; break;
    case 403: 
      var $1397=$yyvsp;
      var $arrayidx1998=((($1397)-(8))|0);
      var $nd1999=$arrayidx1998;
      var $1398=HEAP32[(($nd1999)>>2)];
      var $nd2000=$yyval;
      HEAP32[(($nd2000)>>2)]=$1398;
      label = 546; break;
    case 404: 
      var $nd2002=$yyval;
      HEAP32[(($nd2002)>>2)]=0;
      label = 546; break;
    case 405: 
      var $nd2004=$yyval;
      HEAP32[(($nd2004)>>2)]=0;
      label = 546; break;
    case 406: 
      var $1399=$p_addr;
      var $1400=$yyvsp;
      var $arrayidx2006=(($1400)|0);
      var $id2007=$arrayidx2006;
      var $1401=HEAP16[(($id2007)>>1)];
      _local_add_f($1399, $1401);
      var $1402=$p_addr;
      var $1403=$yyvsp;
      var $arrayidx2008=(($1403)|0);
      var $id2009=$arrayidx2008;
      var $1404=HEAP16[(($id2009)>>1)];
      _new_bv($1402, $1404);
      label = 546; break;
    case 407: 
      var $1405=$yyvsp;
      var $arrayidx2011=((($1405)-(8))|0);
      var $nd2012=$arrayidx2011;
      var $1406=HEAP32[(($nd2012)>>2)];
      var $nd2013=$yyval;
      HEAP32[(($nd2013)>>2)]=$1406;
      label = 546; break;
    case 408: 
      var $1407=$yyvsp;
      var $arrayidx2015=(($1407)|0);
      var $nd2016=$arrayidx2015;
      var $1408=HEAP32[(($nd2016)>>2)];
      var $nd2017=$yyval;
      HEAP32[(($nd2017)>>2)]=$1408;
      label = 546; break;
    case 409: 
      var $1409=$yyvsp;
      var $arrayidx2019=((($1409)-(4))|0);
      var $nd2020=$arrayidx2019;
      var $1410=HEAP32[(($nd2020)>>2)];
      var $nd2021=$yyval;
      HEAP32[(($nd2021)>>2)]=$1410;
      label = 546; break;
    case 410: 
      var $1411=$yyvsp;
      var $arrayidx2023=((($1411)-(4))|0);
      var $nd2024=$arrayidx2023;
      var $1412=HEAP32[(($nd2024)>>2)];
      var $nd2025=$yyval;
      HEAP32[(($nd2025)>>2)]=$1412;
      label = 546; break;
    case 411: 
      var $1413=$p_addr;
      _local_nest($1413);
      label = 546; break;
    case 412: 
      var $1414=$p_addr;
      var $1415=$yyvsp;
      var $arrayidx2028=((($1415)-(8))|0);
      var $nd2029=$arrayidx2028;
      var $1416=HEAP32[(($nd2029)>>2)];
      var $1417=$yyvsp;
      var $arrayidx2030=((($1417)-(4))|0);
      var $nd2031=$arrayidx2030;
      var $1418=HEAP32[(($nd2031)>>2)];
      var $call2032=_new_block($1414, $1416, $1418);
      var $nd2033=$yyval;
      HEAP32[(($nd2033)>>2)]=$call2032;
      var $1419=$p_addr;
      _local_unnest($1419);
      label = 546; break;
    case 413: 
      var $1420=$yyvsp;
      var $arrayidx2035=((($1420)-(4))|0);
      var $nd2036=$arrayidx2035;
      var $1421=HEAP32[(($nd2036)>>2)];
      var $car2037=(($1421)|0);
      var $1422=HEAP32[(($car2037)>>2)];
      var $cmp2038=(($1422)|(0))==38;
      if ($cmp2038) { label = 414; break; } else { label = 415; break; }
    case 414: 
      var $1423=$p_addr;
      _yyerror($1423, ((100684)|0));
      label = 416; break;
    case 415: 
      var $1424=$p_addr;
      var $1425=$yyvsp;
      var $arrayidx2042=((($1425)-(4))|0);
      var $nd2043=$arrayidx2042;
      var $1426=HEAP32[(($nd2043)>>2)];
      var $1427=$yyvsp;
      var $arrayidx2044=(($1427)|0);
      var $nd2045=$arrayidx2044;
      var $1428=HEAP32[(($nd2045)>>2)];
      _call_with_block($1424, $1426, $1428);
      label = 416; break;
    case 416: 
      var $1429=$yyvsp;
      var $arrayidx2047=((($1429)-(4))|0);
      var $nd2048=$arrayidx2047;
      var $1430=HEAP32[(($nd2048)>>2)];
      var $nd2049=$yyval;
      HEAP32[(($nd2049)>>2)]=$1430;
      label = 546; break;
    case 417: 
      var $1431=$p_addr;
      var $1432=$yyvsp;
      var $arrayidx2051=((($1432)-(12))|0);
      var $nd2052=$arrayidx2051;
      var $1433=HEAP32[(($nd2052)>>2)];
      var $1434=$yyvsp;
      var $arrayidx2053=((($1434)-(4))|0);
      var $id2054=$arrayidx2053;
      var $1435=HEAP16[(($id2054)>>1)];
      var $1436=$yyvsp;
      var $arrayidx2055=(($1436)|0);
      var $nd2056=$arrayidx2055;
      var $1437=HEAP32[(($nd2056)>>2)];
      var $call2057=_new_call($1431, $1433, $1435, $1437);
      var $nd2058=$yyval;
      HEAP32[(($nd2058)>>2)]=$call2057;
      label = 546; break;
    case 418: 
      var $1438=$p_addr;
      var $1439=$yyvsp;
      var $arrayidx2060=((($1439)-(16))|0);
      var $nd2061=$arrayidx2060;
      var $1440=HEAP32[(($nd2061)>>2)];
      var $1441=$yyvsp;
      var $arrayidx2062=((($1441)-(8))|0);
      var $id2063=$arrayidx2062;
      var $1442=HEAP16[(($id2063)>>1)];
      var $1443=$yyvsp;
      var $arrayidx2064=((($1443)-(4))|0);
      var $nd2065=$arrayidx2064;
      var $1444=HEAP32[(($nd2065)>>2)];
      var $call2066=_new_call($1438, $1440, $1442, $1444);
      var $nd2067=$yyval;
      HEAP32[(($nd2067)>>2)]=$call2066;
      var $1445=$p_addr;
      var $nd2068=$yyval;
      var $1446=HEAP32[(($nd2068)>>2)];
      var $1447=$yyvsp;
      var $arrayidx2069=(($1447)|0);
      var $nd2070=$arrayidx2069;
      var $1448=HEAP32[(($nd2070)>>2)];
      _call_with_block($1445, $1446, $1448);
      label = 546; break;
    case 419: 
      var $1449=$p_addr;
      var $1450=$yyvsp;
      var $arrayidx2072=((($1450)-(16))|0);
      var $nd2073=$arrayidx2072;
      var $1451=HEAP32[(($nd2073)>>2)];
      var $1452=$yyvsp;
      var $arrayidx2074=((($1452)-(8))|0);
      var $id2075=$arrayidx2074;
      var $1453=HEAP16[(($id2075)>>1)];
      var $1454=$yyvsp;
      var $arrayidx2076=((($1454)-(4))|0);
      var $nd2077=$arrayidx2076;
      var $1455=HEAP32[(($nd2077)>>2)];
      var $call2078=_new_call($1449, $1451, $1453, $1455);
      var $nd2079=$yyval;
      HEAP32[(($nd2079)>>2)]=$call2078;
      var $1456=$p_addr;
      var $nd2080=$yyval;
      var $1457=HEAP32[(($nd2080)>>2)];
      var $1458=$yyvsp;
      var $arrayidx2081=(($1458)|0);
      var $nd2082=$arrayidx2081;
      var $1459=HEAP32[(($nd2082)>>2)];
      _call_with_block($1456, $1457, $1459);
      label = 546; break;
    case 420: 
      var $1460=$p_addr;
      var $1461=$yyvsp;
      var $arrayidx2084=((($1461)-(4))|0);
      var $id2085=$arrayidx2084;
      var $1462=HEAP16[(($id2085)>>1)];
      var $1463=$yyvsp;
      var $arrayidx2086=(($1463)|0);
      var $nd2087=$arrayidx2086;
      var $1464=HEAP32[(($nd2087)>>2)];
      var $call2088=_new_fcall($1460, $1462, $1464);
      var $nd2089=$yyval;
      HEAP32[(($nd2089)>>2)]=$call2088;
      label = 546; break;
    case 421: 
      var $1465=$p_addr;
      var $1466=$yyvsp;
      var $arrayidx2091=((($1466)-(12))|0);
      var $nd2092=$arrayidx2091;
      var $1467=HEAP32[(($nd2092)>>2)];
      var $1468=$yyvsp;
      var $arrayidx2093=((($1468)-(4))|0);
      var $id2094=$arrayidx2093;
      var $1469=HEAP16[(($id2094)>>1)];
      var $1470=$yyvsp;
      var $arrayidx2095=(($1470)|0);
      var $nd2096=$arrayidx2095;
      var $1471=HEAP32[(($nd2096)>>2)];
      var $call2097=_new_call($1465, $1467, $1469, $1471);
      var $nd2098=$yyval;
      HEAP32[(($nd2098)>>2)]=$call2097;
      label = 546; break;
    case 422: 
      var $1472=$p_addr;
      var $1473=$yyvsp;
      var $arrayidx2100=((($1473)-(12))|0);
      var $nd2101=$arrayidx2100;
      var $1474=HEAP32[(($nd2101)>>2)];
      var $1475=$yyvsp;
      var $arrayidx2102=((($1475)-(4))|0);
      var $id2103=$arrayidx2102;
      var $1476=HEAP16[(($id2103)>>1)];
      var $1477=$yyvsp;
      var $arrayidx2104=(($1477)|0);
      var $nd2105=$arrayidx2104;
      var $1478=HEAP32[(($nd2105)>>2)];
      var $call2106=_new_call($1472, $1474, $1476, $1478);
      var $nd2107=$yyval;
      HEAP32[(($nd2107)>>2)]=$call2106;
      label = 546; break;
    case 423: 
      var $1479=$p_addr;
      var $1480=$yyvsp;
      var $arrayidx2109=((($1480)-(8))|0);
      var $nd2110=$arrayidx2109;
      var $1481=HEAP32[(($nd2110)>>2)];
      var $1482=$yyvsp;
      var $arrayidx2111=(($1482)|0);
      var $id2112=$arrayidx2111;
      var $1483=HEAP16[(($id2112)>>1)];
      var $call2113=_new_call($1479, $1481, $1483, 0);
      var $nd2114=$yyval;
      HEAP32[(($nd2114)>>2)]=$call2113;
      label = 546; break;
    case 424: 
      var $1484=$p_addr;
      var $1485=$yyvsp;
      var $arrayidx2116=((($1485)-(8))|0);
      var $nd2117=$arrayidx2116;
      var $1486=HEAP32[(($nd2117)>>2)];
      var $1487=$p_addr;
      var $call2118=_intern_gen2($1487, ((100436)|0), 4);
      var $1488=$yyvsp;
      var $arrayidx2119=(($1488)|0);
      var $nd2120=$arrayidx2119;
      var $1489=HEAP32[(($nd2120)>>2)];
      var $call2121=_new_call($1484, $1486, $call2118, $1489);
      var $nd2122=$yyval;
      HEAP32[(($nd2122)>>2)]=$call2121;
      label = 546; break;
    case 425: 
      var $1490=$p_addr;
      var $1491=$yyvsp;
      var $arrayidx2124=((($1491)-(8))|0);
      var $nd2125=$arrayidx2124;
      var $1492=HEAP32[(($nd2125)>>2)];
      var $1493=$p_addr;
      var $call2126=_intern_gen2($1493, ((100436)|0), 4);
      var $1494=$yyvsp;
      var $arrayidx2127=(($1494)|0);
      var $nd2128=$arrayidx2127;
      var $1495=HEAP32[(($nd2128)>>2)];
      var $call2129=_new_call($1490, $1492, $call2126, $1495);
      var $nd2130=$yyval;
      HEAP32[(($nd2130)>>2)]=$call2129;
      label = 546; break;
    case 426: 
      var $1496=$p_addr;
      var $1497=$yyvsp;
      var $arrayidx2132=(($1497)|0);
      var $nd2133=$arrayidx2132;
      var $1498=HEAP32[(($nd2133)>>2)];
      var $call2134=_new_super($1496, $1498);
      var $nd2135=$yyval;
      HEAP32[(($nd2135)>>2)]=$call2134;
      label = 546; break;
    case 427: 
      var $1499=$p_addr;
      var $call2137=_new_zsuper($1499);
      var $nd2138=$yyval;
      HEAP32[(($nd2138)>>2)]=$call2137;
      label = 546; break;
    case 428: 
      var $1500=$p_addr;
      var $1501=$yyvsp;
      var $arrayidx2140=((($1501)-(12))|0);
      var $nd2141=$arrayidx2140;
      var $1502=HEAP32[(($nd2141)>>2)];
      var $1503=$p_addr;
      var $call2142=_intern_gen2($1503, ((112168)|0), 2);
      var $1504=$yyvsp;
      var $arrayidx2143=((($1504)-(4))|0);
      var $nd2144=$arrayidx2143;
      var $1505=HEAP32[(($nd2144)>>2)];
      var $call2145=_new_call($1500, $1502, $call2142, $1505);
      var $nd2146=$yyval;
      HEAP32[(($nd2146)>>2)]=$call2145;
      label = 546; break;
    case 429: 
      var $1506=$p_addr;
      _local_nest($1506);
      label = 546; break;
    case 430: 
      var $1507=$p_addr;
      var $1508=$yyvsp;
      var $arrayidx2149=((($1508)-(8))|0);
      var $nd2150=$arrayidx2149;
      var $1509=HEAP32[(($nd2150)>>2)];
      var $1510=$yyvsp;
      var $arrayidx2151=((($1510)-(4))|0);
      var $nd2152=$arrayidx2151;
      var $1511=HEAP32[(($nd2152)>>2)];
      var $call2153=_new_block($1507, $1509, $1511);
      var $nd2154=$yyval;
      HEAP32[(($nd2154)>>2)]=$call2153;
      var $1512=$p_addr;
      _local_unnest($1512);
      label = 546; break;
    case 431: 
      var $1513=$p_addr;
      _local_nest($1513);
      label = 546; break;
    case 432: 
      var $1514=$p_addr;
      var $1515=$yyvsp;
      var $arrayidx2157=((($1515)-(8))|0);
      var $nd2158=$arrayidx2157;
      var $1516=HEAP32[(($nd2158)>>2)];
      var $1517=$yyvsp;
      var $arrayidx2159=((($1517)-(4))|0);
      var $nd2160=$arrayidx2159;
      var $1518=HEAP32[(($nd2160)>>2)];
      var $call2161=_new_block($1514, $1516, $1518);
      var $nd2162=$yyval;
      HEAP32[(($nd2162)>>2)]=$call2161;
      var $1519=$p_addr;
      _local_unnest($1519);
      label = 546; break;
    case 433: 
      var $1520=$p_addr;
      var $1521=$p_addr;
      var $1522=$yyvsp;
      var $arrayidx2164=((($1522)-(12))|0);
      var $nd2165=$arrayidx2164;
      var $1523=HEAP32[(($nd2165)>>2)];
      var $1524=$yyvsp;
      var $arrayidx2166=((($1524)-(4))|0);
      var $nd2167=$arrayidx2166;
      var $1525=HEAP32[(($nd2167)>>2)];
      var $call2168=_cons_gen($1521, $1523, $1525);
      var $1526=$yyvsp;
      var $arrayidx2169=(($1526)|0);
      var $nd2170=$arrayidx2169;
      var $1527=HEAP32[(($nd2170)>>2)];
      var $call2171=_cons_gen($1520, $call2168, $1527);
      var $nd2172=$yyval;
      HEAP32[(($nd2172)>>2)]=$call2171;
      label = 546; break;
    case 434: 
      var $1528=$yyvsp;
      var $arrayidx2174=(($1528)|0);
      var $nd2175=$arrayidx2174;
      var $1529=HEAP32[(($nd2175)>>2)];
      var $tobool2176=(($1529)|(0))!=0;
      if ($tobool2176) { label = 435; break; } else { label = 436; break; }
    case 435: 
      var $1530=$p_addr;
      var $1531=$p_addr;
      var $1532=$yyvsp;
      var $arrayidx2178=(($1532)|0);
      var $nd2179=$arrayidx2178;
      var $1533=HEAP32[(($nd2179)>>2)];
      var $call2180=_cons_gen($1531, 0, $1533);
      var $call2181=_cons_gen($1530, $call2180, 0);
      var $nd2182=$yyval;
      HEAP32[(($nd2182)>>2)]=$call2181;
      label = 437; break;
    case 436: 
      var $nd2184=$yyval;
      HEAP32[(($nd2184)>>2)]=0;
      label = 437; break;
    case 437: 
      label = 546; break;
    case 438: 
      var $1534=$p_addr;
      var $1535=$p_addr;
      var $1536=$yyvsp;
      var $arrayidx2187=((($1536)-(16))|0);
      var $nd2188=$arrayidx2187;
      var $1537=HEAP32[(($nd2188)>>2)];
      var $1538=$yyvsp;
      var $arrayidx2189=((($1538)-(12))|0);
      var $nd2190=$arrayidx2189;
      var $1539=HEAP32[(($nd2190)>>2)];
      var $1540=$yyvsp;
      var $arrayidx2191=((($1540)-(4))|0);
      var $nd2192=$arrayidx2191;
      var $1541=HEAP32[(($nd2192)>>2)];
      var $call2193=_list3_gen($1535, $1537, $1539, $1541);
      var $call2194=_list1_gen($1534, $call2193);
      var $nd2195=$yyval;
      HEAP32[(($nd2195)>>2)]=$call2194;
      var $1542=$yyvsp;
      var $arrayidx2196=(($1542)|0);
      var $nd2197=$arrayidx2196;
      var $1543=HEAP32[(($nd2197)>>2)];
      var $tobool2198=(($1543)|(0))!=0;
      if ($tobool2198) { label = 439; break; } else { label = 440; break; }
    case 439: 
      var $1544=$p_addr;
      var $nd2200=$yyval;
      var $1545=HEAP32[(($nd2200)>>2)];
      var $1546=$yyvsp;
      var $arrayidx2201=(($1546)|0);
      var $nd2202=$arrayidx2201;
      var $1547=HEAP32[(($nd2202)>>2)];
      var $call2203=_append_gen($1544, $1545, $1547);
      var $nd2204=$yyval;
      HEAP32[(($nd2204)>>2)]=$call2203;
      label = 440; break;
    case 440: 
      label = 546; break;
    case 441: 
      var $1548=$p_addr;
      var $1549=$yyvsp;
      var $arrayidx2207=(($1549)|0);
      var $nd2208=$arrayidx2207;
      var $1550=HEAP32[(($nd2208)>>2)];
      var $call2209=_list1_gen($1548, $1550);
      var $nd2210=$yyval;
      HEAP32[(($nd2210)>>2)]=$call2209;
      label = 546; break;
    case 442: 
      var $1551=$yyvsp;
      var $arrayidx2212=(($1551)|0);
      var $nd2213=$arrayidx2212;
      var $1552=HEAP32[(($nd2213)>>2)];
      var $nd2214=$yyval;
      HEAP32[(($nd2214)>>2)]=$1552;
      label = 546; break;
    case 443: 
      var $1553=$yyvsp;
      var $arrayidx2216=(($1553)|0);
      var $nd2217=$arrayidx2216;
      var $1554=HEAP32[(($nd2217)>>2)];
      var $nd2218=$yyval;
      HEAP32[(($nd2218)>>2)]=$1554;
      label = 546; break;
    case 444: 
      var $1555=$yyvsp;
      var $arrayidx2220=(($1555)|0);
      var $nd2221=$arrayidx2220;
      var $1556=HEAP32[(($nd2221)>>2)];
      var $nd2222=$yyval;
      HEAP32[(($nd2222)>>2)]=$1556;
      label = 546; break;
    case 445: 
      var $1557=$p_addr;
      var $1558=$p_addr;
      var $1559=$yyvsp;
      var $arrayidx2224=((($1559)-(4))|0);
      var $nd2225=$arrayidx2224;
      var $1560=HEAP32[(($nd2225)>>2)];
      var $1561=$p_addr;
      var $1562=$yyvsp;
      var $arrayidx2226=(($1562)|0);
      var $nd2227=$arrayidx2226;
      var $1563=HEAP32[(($nd2227)>>2)];
      var $call2228=_list1_gen($1561, $1563);
      var $call2229=_append_gen($1558, $1560, $call2228);
      var $call2230=_new_dstr($1557, $call2229);
      var $nd2231=$yyval;
      HEAP32[(($nd2231)>>2)]=$call2230;
      label = 546; break;
    case 446: 
      var $1564=$p_addr;
      var $1565=$yyvsp;
      var $arrayidx2233=((($1565)-(4))|0);
      var $nd2234=$arrayidx2233;
      var $1566=HEAP32[(($nd2234)>>2)];
      var $1567=$yyvsp;
      var $arrayidx2235=(($1567)|0);
      var $nd2236=$arrayidx2235;
      var $1568=HEAP32[(($nd2236)>>2)];
      var $call2237=_append_gen($1564, $1566, $1568);
      var $nd2238=$yyval;
      HEAP32[(($nd2238)>>2)]=$call2237;
      label = 546; break;
    case 447: 
      var $1569=$p_addr;
      var $1570=$yyvsp;
      var $arrayidx2240=(($1570)|0);
      var $nd2241=$arrayidx2240;
      var $1571=HEAP32[(($nd2241)>>2)];
      var $call2242=_list1_gen($1569, $1571);
      var $nd2243=$yyval;
      HEAP32[(($nd2243)>>2)]=$call2242;
      label = 546; break;
    case 448: 
      var $1572=$p_addr;
      var $lex_strterm=(($1572+44)|0);
      var $1573=HEAP32[(($lex_strterm)>>2)];
      var $nd2245=$yyval;
      HEAP32[(($nd2245)>>2)]=$1573;
      var $1574=$p_addr;
      var $lex_strterm2246=(($1574+44)|0);
      HEAP32[(($lex_strterm2246)>>2)]=0;
      label = 546; break;
    case 449: 
      var $1575=$yyvsp;
      var $arrayidx2248=((($1575)-(8))|0);
      var $nd2249=$arrayidx2248;
      var $1576=HEAP32[(($nd2249)>>2)];
      var $1577=$p_addr;
      var $lex_strterm2250=(($1577+44)|0);
      HEAP32[(($lex_strterm2250)>>2)]=$1576;
      var $1578=$p_addr;
      var $1579=$yyvsp;
      var $arrayidx2251=((($1579)-(12))|0);
      var $nd2252=$arrayidx2251;
      var $1580=HEAP32[(($nd2252)>>2)];
      var $1581=$yyvsp;
      var $arrayidx2253=((($1581)-(4))|0);
      var $nd2254=$arrayidx2253;
      var $1582=HEAP32[(($nd2254)>>2)];
      var $call2255=_list2_gen($1578, $1580, $1582);
      var $nd2256=$yyval;
      HEAP32[(($nd2256)>>2)]=$call2255;
      label = 546; break;
    case 450: 
      var $1583=$p_addr;
      var $1584=$p_addr;
      var $call2258=_new_literal_delim($1584);
      var $call2259=_list1_gen($1583, $call2258);
      var $nd2260=$yyval;
      HEAP32[(($nd2260)>>2)]=$call2259;
      label = 546; break;
    case 451: 
      var $1585=$yyvsp;
      var $arrayidx2262=(($1585)|0);
      var $nd2263=$arrayidx2262;
      var $1586=HEAP32[(($nd2263)>>2)];
      var $nd2264=$yyval;
      HEAP32[(($nd2264)>>2)]=$1586;
      label = 546; break;
    case 452: 
      var $1587=$p_addr;
      var $1588=$p_addr;
      var $1589=$yyvsp;
      var $arrayidx2266=((($1589)-(4))|0);
      var $nd2267=$arrayidx2266;
      var $1590=HEAP32[(($nd2267)>>2)];
      var $1591=$p_addr;
      var $1592=$yyvsp;
      var $arrayidx2268=(($1592)|0);
      var $nd2269=$arrayidx2268;
      var $1593=HEAP32[(($nd2269)>>2)];
      var $call2270=_list1_gen($1591, $1593);
      var $call2271=_append_gen($1588, $1590, $call2270);
      var $call2272=_new_dxstr($1587, $call2271);
      var $nd2273=$yyval;
      HEAP32[(($nd2273)>>2)]=$call2272;
      label = 546; break;
    case 453: 
      var $1594=$yyvsp;
      var $arrayidx2275=(($1594)|0);
      var $nd2276=$arrayidx2275;
      var $1595=HEAP32[(($nd2276)>>2)];
      var $nd2277=$yyval;
      HEAP32[(($nd2277)>>2)]=$1595;
      label = 546; break;
    case 454: 
      var $1596=$p_addr;
      var $1597=$yyvsp;
      var $arrayidx2279=((($1597)-(4))|0);
      var $nd2280=$arrayidx2279;
      var $1598=HEAP32[(($nd2280)>>2)];
      var $1599=$yyvsp;
      var $arrayidx2281=(($1599)|0);
      var $nd2282=$arrayidx2281;
      var $1600=HEAP32[(($nd2282)>>2)];
      var $call2283=_new_dregx($1596, $1598, $1600);
      var $nd2284=$yyval;
      HEAP32[(($nd2284)>>2)]=$call2283;
      label = 546; break;
    case 455: 
      var $1601=$p_addr;
      var $1602=$p_addr;
      var $call2286=_new_str($1602, ((100260)|0), 0);
      var $call2287=_list1_gen($1601, $call2286);
      var $1603=$p_addr;
      var $call2288=_parsing_heredoc_inf($1603);
      var $doc=(($call2288+16)|0);
      HEAP32[(($doc)>>2)]=$call2287;
      var $1604=$p_addr;
      _heredoc_end($1604);
      label = 546; break;
    case 456: 
      var $1605=$yyvsp;
      var $arrayidx2290=((($1605)-(4))|0);
      var $nd2291=$arrayidx2290;
      var $1606=HEAP32[(($nd2291)>>2)];
      var $1607=$p_addr;
      var $call2292=_parsing_heredoc_inf($1607);
      var $doc2293=(($call2292+16)|0);
      HEAP32[(($doc2293)>>2)]=$1606;
      var $1608=$p_addr;
      _heredoc_end($1608);
      label = 546; break;
    case 457: 
      var $1609=$p_addr;
      var $1610=$p_addr;
      var $1611=$yyvsp;
      var $arrayidx2295=(($1611)|0);
      var $nd2296=$arrayidx2295;
      var $1612=HEAP32[(($nd2296)>>2)];
      var $call2297=_list1_gen($1610, $1612);
      var $call2298=_new_words($1609, $call2297);
      var $nd2299=$yyval;
      HEAP32[(($nd2299)>>2)]=$call2298;
      label = 546; break;
    case 458: 
      var $1613=$p_addr;
      var $1614=$p_addr;
      var $1615=$yyvsp;
      var $arrayidx2301=((($1615)-(4))|0);
      var $nd2302=$arrayidx2301;
      var $1616=HEAP32[(($nd2302)>>2)];
      var $1617=$p_addr;
      var $1618=$yyvsp;
      var $arrayidx2303=(($1618)|0);
      var $nd2304=$arrayidx2303;
      var $1619=HEAP32[(($nd2304)>>2)];
      var $call2305=_list1_gen($1617, $1619);
      var $call2306=_append_gen($1614, $1616, $call2305);
      var $call2307=_new_words($1613, $call2306);
      var $nd2308=$yyval;
      HEAP32[(($nd2308)>>2)]=$call2307;
      label = 546; break;
    case 459: 
      var $1620=$p_addr;
      var $1621=$yyvsp;
      var $arrayidx2310=(($1621)|0);
      var $id2311=$arrayidx2310;
      var $1622=HEAP16[(($id2311)>>1)];
      var $call2312=_new_sym($1620, $1622);
      var $nd2313=$yyval;
      HEAP32[(($nd2313)>>2)]=$call2312;
      label = 546; break;
    case 460: 
      var $1623=$p_addr;
      var $lstate2315=(($1623+40)|0);
      HEAP32[(($lstate2315)>>2)]=1;
      var $1624=$p_addr;
      var $1625=$p_addr;
      var $1626=$yyvsp;
      var $arrayidx2316=((($1626)-(4))|0);
      var $nd2317=$arrayidx2316;
      var $1627=HEAP32[(($nd2317)>>2)];
      var $1628=$p_addr;
      var $1629=$yyvsp;
      var $arrayidx2318=(($1629)|0);
      var $nd2319=$arrayidx2318;
      var $1630=HEAP32[(($nd2319)>>2)];
      var $call2320=_list1_gen($1628, $1630);
      var $call2321=_append_gen($1625, $1627, $call2320);
      var $call2322=_new_dsym($1624, $call2321);
      var $nd2323=$yyval;
      HEAP32[(($nd2323)>>2)]=$call2322;
      label = 546; break;
    case 461: 
      var $1631=$p_addr;
      var $lstate2325=(($1631+40)|0);
      HEAP32[(($lstate2325)>>2)]=1;
      var $1632=$yyvsp;
      var $arrayidx2326=(($1632)|0);
      var $id2327=$arrayidx2326;
      var $1633=HEAP16[(($id2327)>>1)];
      var $id2328=$yyval;
      HEAP16[(($id2328)>>1)]=$1633;
      label = 546; break;
    case 462: 
      var $1634=$p_addr;
      var $1635=$yyvsp;
      var $arrayidx2330=(($1635)|0);
      var $nd2331=$arrayidx2330;
      var $1636=HEAP32[(($nd2331)>>2)];
      var $call2332=_new_strsym($1634, $1636);
      var $id2333=$yyval;
      HEAP16[(($id2333)>>1)]=$call2332;
      label = 546; break;
    case 463: 
      var $1637=$p_addr;
      var $1638=$yyvsp;
      var $arrayidx2335=(($1638)|0);
      var $nd2336=$arrayidx2335;
      var $1639=HEAP32[(($nd2336)>>2)];
      var $call2337=_new_strsym($1637, $1639);
      var $id2338=$yyval;
      HEAP16[(($id2338)>>1)]=$call2337;
      label = 546; break;
    case 464: 
      var $1640=$p_addr;
      var $1641=$p_addr;
      var $1642=$yyvsp;
      var $arrayidx2340=(($1642)|0);
      var $nd2341=$arrayidx2340;
      var $1643=HEAP32[(($nd2341)>>2)];
      var $call2342=_list1_gen($1641, $1643);
      var $call2343=_new_symbols($1640, $call2342);
      var $nd2344=$yyval;
      HEAP32[(($nd2344)>>2)]=$call2343;
      label = 546; break;
    case 465: 
      var $1644=$p_addr;
      var $1645=$p_addr;
      var $1646=$yyvsp;
      var $arrayidx2346=((($1646)-(4))|0);
      var $nd2347=$arrayidx2346;
      var $1647=HEAP32[(($nd2347)>>2)];
      var $1648=$p_addr;
      var $1649=$yyvsp;
      var $arrayidx2348=(($1649)|0);
      var $nd2349=$arrayidx2348;
      var $1650=HEAP32[(($nd2349)>>2)];
      var $call2350=_list1_gen($1648, $1650);
      var $call2351=_append_gen($1645, $1647, $call2350);
      var $call2352=_new_symbols($1644, $call2351);
      var $nd2353=$yyval;
      HEAP32[(($nd2353)>>2)]=$call2352;
      label = 546; break;
    case 466: 
      var $1651=$p_addr;
      var $1652=$yyvsp;
      var $arrayidx2355=(($1652)|0);
      var $nd2356=$arrayidx2355;
      var $1653=HEAP32[(($nd2356)>>2)];
      var $call2357=_negate_lit($1651, $1653);
      var $nd2358=$yyval;
      HEAP32[(($nd2358)>>2)]=$call2357;
      label = 546; break;
    case 467: 
      var $1654=$p_addr;
      var $1655=$yyvsp;
      var $arrayidx2360=(($1655)|0);
      var $nd2361=$arrayidx2360;
      var $1656=HEAP32[(($nd2361)>>2)];
      var $call2362=_negate_lit($1654, $1656);
      var $nd2363=$yyval;
      HEAP32[(($nd2363)>>2)]=$call2362;
      label = 546; break;
    case 468: 
      var $1657=$p_addr;
      var $1658=$yyvsp;
      var $arrayidx2365=(($1658)|0);
      var $id2366=$arrayidx2365;
      var $1659=HEAP16[(($id2366)>>1)];
      var $call2367=_new_lvar($1657, $1659);
      var $nd2368=$yyval;
      HEAP32[(($nd2368)>>2)]=$call2367;
      label = 546; break;
    case 469: 
      var $1660=$p_addr;
      var $1661=$yyvsp;
      var $arrayidx2370=(($1661)|0);
      var $id2371=$arrayidx2370;
      var $1662=HEAP16[(($id2371)>>1)];
      var $call2372=_new_ivar($1660, $1662);
      var $nd2373=$yyval;
      HEAP32[(($nd2373)>>2)]=$call2372;
      label = 546; break;
    case 470: 
      var $1663=$p_addr;
      var $1664=$yyvsp;
      var $arrayidx2375=(($1664)|0);
      var $id2376=$arrayidx2375;
      var $1665=HEAP16[(($id2376)>>1)];
      var $call2377=_new_gvar($1663, $1665);
      var $nd2378=$yyval;
      HEAP32[(($nd2378)>>2)]=$call2377;
      label = 546; break;
    case 471: 
      var $1666=$p_addr;
      var $1667=$yyvsp;
      var $arrayidx2380=(($1667)|0);
      var $id2381=$arrayidx2380;
      var $1668=HEAP16[(($id2381)>>1)];
      var $call2382=_new_cvar($1666, $1668);
      var $nd2383=$yyval;
      HEAP32[(($nd2383)>>2)]=$call2382;
      label = 546; break;
    case 472: 
      var $1669=$p_addr;
      var $1670=$yyvsp;
      var $arrayidx2385=(($1670)|0);
      var $id2386=$arrayidx2385;
      var $1671=HEAP16[(($id2386)>>1)];
      var $call2387=_new_const($1669, $1671);
      var $nd2388=$yyval;
      HEAP32[(($nd2388)>>2)]=$call2387;
      label = 546; break;
    case 473: 
      var $1672=$p_addr;
      var $1673=$yyvsp;
      var $arrayidx2390=(($1673)|0);
      var $nd2391=$arrayidx2390;
      var $1674=HEAP32[(($nd2391)>>2)];
      _assignable($1672, $1674);
      label = 546; break;
    case 474: 
      var $1675=$p_addr;
      var $1676=$yyvsp;
      var $arrayidx2393=(($1676)|0);
      var $nd2394=$arrayidx2393;
      var $1677=HEAP32[(($nd2394)>>2)];
      var $call2395=_var_reference($1675, $1677);
      var $nd2396=$yyval;
      HEAP32[(($nd2396)>>2)]=$call2395;
      label = 546; break;
    case 475: 
      var $1678=$p_addr;
      var $call2398=_new_nil($1678);
      var $nd2399=$yyval;
      HEAP32[(($nd2399)>>2)]=$call2398;
      label = 546; break;
    case 476: 
      var $1679=$p_addr;
      var $call2401=_new_self($1679);
      var $nd2402=$yyval;
      HEAP32[(($nd2402)>>2)]=$call2401;
      label = 546; break;
    case 477: 
      var $1680=$p_addr;
      var $call2404=_new_true($1680);
      var $nd2405=$yyval;
      HEAP32[(($nd2405)>>2)]=$call2404;
      label = 546; break;
    case 478: 
      var $1681=$p_addr;
      var $call2407=_new_false($1681);
      var $nd2408=$yyval;
      HEAP32[(($nd2408)>>2)]=$call2407;
      label = 546; break;
    case 479: 
      var $1682=$p_addr;
      var $filename=(($1682+28)|0);
      var $1683=HEAP32[(($filename)>>2)];
      var $tobool2410=(($1683)|(0))!=0;
      if ($tobool2410) { label = 481; break; } else { label = 480; break; }
    case 480: 
      var $1684=$p_addr;
      var $filename2412=(($1684+28)|0);
      HEAP32[(($filename2412)>>2)]=((100088)|0);
      label = 481; break;
    case 481: 
      var $1685=$p_addr;
      var $1686=$p_addr;
      var $filename2414=(($1686+28)|0);
      var $1687=HEAP32[(($filename2414)>>2)];
      var $1688=$p_addr;
      var $filename2415=(($1688+28)|0);
      var $1689=HEAP32[(($filename2415)>>2)];
      var $call2416=_strlen($1689);
      var $call2417=_new_str($1685, $1687, $call2416);
      var $nd2418=$yyval;
      HEAP32[(($nd2418)>>2)]=$call2417;
      label = 546; break;
    case 482: 
      var $arraydecay2420=(($buf)|0);
      var $1690=$p_addr;
      var $lineno=(($1690+32)|0);
      var $1691=HEAP32[(($lineno)>>2)];
      var $call2421=_snprintf($arraydecay2420, 16, ((99900)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1691,tempInt));
      var $1692=$p_addr;
      var $arraydecay2422=(($buf)|0);
      var $call2423=_new_int($1692, $arraydecay2422, 10);
      var $nd2424=$yyval;
      HEAP32[(($nd2424)>>2)]=$call2423;
      label = 546; break;
    case 483: 
      var $nd2426=$yyval;
      HEAP32[(($nd2426)>>2)]=0;
      label = 546; break;
    case 484: 
      var $1693=$p_addr;
      var $lstate2428=(($1693+40)|0);
      HEAP32[(($lstate2428)>>2)]=0;
      var $1694=$p_addr;
      var $cmd_start2429=(($1694+72)|0);
      HEAP32[(($cmd_start2429)>>2)]=1;
      label = 546; break;
    case 485: 
      var $1695=$yyvsp;
      var $arrayidx2431=((($1695)-(4))|0);
      var $nd2432=$arrayidx2431;
      var $1696=HEAP32[(($nd2432)>>2)];
      var $nd2433=$yyval;
      HEAP32[(($nd2433)>>2)]=$1696;
      label = 546; break;
    case 486: 
      $yyerrstatus=0;
      var $nd2435=$yyval;
      HEAP32[(($nd2435)>>2)]=0;
      label = 546; break;
    case 487: 
      var $1697=$yyvsp;
      var $arrayidx2437=((($1697)-(4))|0);
      var $nd2438=$arrayidx2437;
      var $1698=HEAP32[(($nd2438)>>2)];
      var $nd2439=$yyval;
      HEAP32[(($nd2439)>>2)]=$1698;
      var $1699=$p_addr;
      var $lstate2440=(($1699+40)|0);
      HEAP32[(($lstate2440)>>2)]=0;
      var $1700=$p_addr;
      var $cmd_start2441=(($1700+72)|0);
      HEAP32[(($cmd_start2441)>>2)]=1;
      label = 546; break;
    case 488: 
      var $1701=$yyvsp;
      var $arrayidx2443=((($1701)-(4))|0);
      var $nd2444=$arrayidx2443;
      var $1702=HEAP32[(($nd2444)>>2)];
      var $nd2445=$yyval;
      HEAP32[(($nd2445)>>2)]=$1702;
      label = 546; break;
    case 489: 
      var $1703=$p_addr;
      var $1704=$yyvsp;
      var $arrayidx2447=((($1704)-(20))|0);
      var $nd2448=$arrayidx2447;
      var $1705=HEAP32[(($nd2448)>>2)];
      var $1706=$yyvsp;
      var $arrayidx2449=((($1706)-(12))|0);
      var $nd2450=$arrayidx2449;
      var $1707=HEAP32[(($nd2450)>>2)];
      var $1708=$yyvsp;
      var $arrayidx2451=((($1708)-(4))|0);
      var $id2452=$arrayidx2451;
      var $1709=HEAP16[(($id2452)>>1)];
      var $1710=$yyvsp;
      var $arrayidx2453=(($1710)|0);
      var $id2454=$arrayidx2453;
      var $1711=HEAP16[(($id2454)>>1)];
      var $call2455=_new_args($1703, $1705, $1707, $1709, 0, $1711);
      var $nd2456=$yyval;
      HEAP32[(($nd2456)>>2)]=$call2455;
      label = 546; break;
    case 490: 
      var $1712=$p_addr;
      var $1713=$yyvsp;
      var $arrayidx2458=((($1713)-(28))|0);
      var $nd2459=$arrayidx2458;
      var $1714=HEAP32[(($nd2459)>>2)];
      var $1715=$yyvsp;
      var $arrayidx2460=((($1715)-(20))|0);
      var $nd2461=$arrayidx2460;
      var $1716=HEAP32[(($nd2461)>>2)];
      var $1717=$yyvsp;
      var $arrayidx2462=((($1717)-(12))|0);
      var $id2463=$arrayidx2462;
      var $1718=HEAP16[(($id2463)>>1)];
      var $1719=$yyvsp;
      var $arrayidx2464=((($1719)-(4))|0);
      var $nd2465=$arrayidx2464;
      var $1720=HEAP32[(($nd2465)>>2)];
      var $1721=$yyvsp;
      var $arrayidx2466=(($1721)|0);
      var $id2467=$arrayidx2466;
      var $1722=HEAP16[(($id2467)>>1)];
      var $call2468=_new_args($1712, $1714, $1716, $1718, $1720, $1722);
      var $nd2469=$yyval;
      HEAP32[(($nd2469)>>2)]=$call2468;
      label = 546; break;
    case 491: 
      var $1723=$p_addr;
      var $1724=$yyvsp;
      var $arrayidx2471=((($1724)-(12))|0);
      var $nd2472=$arrayidx2471;
      var $1725=HEAP32[(($nd2472)>>2)];
      var $1726=$yyvsp;
      var $arrayidx2473=((($1726)-(4))|0);
      var $nd2474=$arrayidx2473;
      var $1727=HEAP32[(($nd2474)>>2)];
      var $1728=$yyvsp;
      var $arrayidx2475=(($1728)|0);
      var $id2476=$arrayidx2475;
      var $1729=HEAP16[(($id2476)>>1)];
      var $call2477=_new_args($1723, $1725, $1727, 0, 0, $1729);
      var $nd2478=$yyval;
      HEAP32[(($nd2478)>>2)]=$call2477;
      label = 546; break;
    case 492: 
      var $1730=$p_addr;
      var $1731=$yyvsp;
      var $arrayidx2480=((($1731)-(20))|0);
      var $nd2481=$arrayidx2480;
      var $1732=HEAP32[(($nd2481)>>2)];
      var $1733=$yyvsp;
      var $arrayidx2482=((($1733)-(12))|0);
      var $nd2483=$arrayidx2482;
      var $1734=HEAP32[(($nd2483)>>2)];
      var $1735=$yyvsp;
      var $arrayidx2484=((($1735)-(4))|0);
      var $nd2485=$arrayidx2484;
      var $1736=HEAP32[(($nd2485)>>2)];
      var $1737=$yyvsp;
      var $arrayidx2486=(($1737)|0);
      var $id2487=$arrayidx2486;
      var $1738=HEAP16[(($id2487)>>1)];
      var $call2488=_new_args($1730, $1732, $1734, 0, $1736, $1738);
      var $nd2489=$yyval;
      HEAP32[(($nd2489)>>2)]=$call2488;
      label = 546; break;
    case 493: 
      var $1739=$p_addr;
      var $1740=$yyvsp;
      var $arrayidx2491=((($1740)-(12))|0);
      var $nd2492=$arrayidx2491;
      var $1741=HEAP32[(($nd2492)>>2)];
      var $1742=$yyvsp;
      var $arrayidx2493=((($1742)-(4))|0);
      var $id2494=$arrayidx2493;
      var $1743=HEAP16[(($id2494)>>1)];
      var $1744=$yyvsp;
      var $arrayidx2495=(($1744)|0);
      var $id2496=$arrayidx2495;
      var $1745=HEAP16[(($id2496)>>1)];
      var $call2497=_new_args($1739, $1741, 0, $1743, 0, $1745);
      var $nd2498=$yyval;
      HEAP32[(($nd2498)>>2)]=$call2497;
      label = 546; break;
    case 494: 
      var $1746=$p_addr;
      var $1747=$yyvsp;
      var $arrayidx2500=((($1747)-(20))|0);
      var $nd2501=$arrayidx2500;
      var $1748=HEAP32[(($nd2501)>>2)];
      var $1749=$yyvsp;
      var $arrayidx2502=((($1749)-(12))|0);
      var $id2503=$arrayidx2502;
      var $1750=HEAP16[(($id2503)>>1)];
      var $1751=$yyvsp;
      var $arrayidx2504=((($1751)-(4))|0);
      var $nd2505=$arrayidx2504;
      var $1752=HEAP32[(($nd2505)>>2)];
      var $1753=$yyvsp;
      var $arrayidx2506=(($1753)|0);
      var $id2507=$arrayidx2506;
      var $1754=HEAP16[(($id2507)>>1)];
      var $call2508=_new_args($1746, $1748, 0, $1750, $1752, $1754);
      var $nd2509=$yyval;
      HEAP32[(($nd2509)>>2)]=$call2508;
      label = 546; break;
    case 495: 
      var $1755=$p_addr;
      var $1756=$yyvsp;
      var $arrayidx2511=((($1756)-(4))|0);
      var $nd2512=$arrayidx2511;
      var $1757=HEAP32[(($nd2512)>>2)];
      var $1758=$yyvsp;
      var $arrayidx2513=(($1758)|0);
      var $id2514=$arrayidx2513;
      var $1759=HEAP16[(($id2514)>>1)];
      var $call2515=_new_args($1755, $1757, 0, 0, 0, $1759);
      var $nd2516=$yyval;
      HEAP32[(($nd2516)>>2)]=$call2515;
      label = 546; break;
    case 496: 
      var $1760=$p_addr;
      var $1761=$yyvsp;
      var $arrayidx2518=((($1761)-(12))|0);
      var $nd2519=$arrayidx2518;
      var $1762=HEAP32[(($nd2519)>>2)];
      var $1763=$yyvsp;
      var $arrayidx2520=((($1763)-(4))|0);
      var $id2521=$arrayidx2520;
      var $1764=HEAP16[(($id2521)>>1)];
      var $1765=$yyvsp;
      var $arrayidx2522=(($1765)|0);
      var $id2523=$arrayidx2522;
      var $1766=HEAP16[(($id2523)>>1)];
      var $call2524=_new_args($1760, 0, $1762, $1764, 0, $1766);
      var $nd2525=$yyval;
      HEAP32[(($nd2525)>>2)]=$call2524;
      label = 546; break;
    case 497: 
      var $1767=$p_addr;
      var $1768=$yyvsp;
      var $arrayidx2527=((($1768)-(20))|0);
      var $nd2528=$arrayidx2527;
      var $1769=HEAP32[(($nd2528)>>2)];
      var $1770=$yyvsp;
      var $arrayidx2529=((($1770)-(12))|0);
      var $id2530=$arrayidx2529;
      var $1771=HEAP16[(($id2530)>>1)];
      var $1772=$yyvsp;
      var $arrayidx2531=((($1772)-(4))|0);
      var $nd2532=$arrayidx2531;
      var $1773=HEAP32[(($nd2532)>>2)];
      var $1774=$yyvsp;
      var $arrayidx2533=(($1774)|0);
      var $id2534=$arrayidx2533;
      var $1775=HEAP16[(($id2534)>>1)];
      var $call2535=_new_args($1767, 0, $1769, $1771, $1773, $1775);
      var $nd2536=$yyval;
      HEAP32[(($nd2536)>>2)]=$call2535;
      label = 546; break;
    case 498: 
      var $1776=$p_addr;
      var $1777=$yyvsp;
      var $arrayidx2538=((($1777)-(4))|0);
      var $nd2539=$arrayidx2538;
      var $1778=HEAP32[(($nd2539)>>2)];
      var $1779=$yyvsp;
      var $arrayidx2540=(($1779)|0);
      var $id2541=$arrayidx2540;
      var $1780=HEAP16[(($id2541)>>1)];
      var $call2542=_new_args($1776, 0, $1778, 0, 0, $1780);
      var $nd2543=$yyval;
      HEAP32[(($nd2543)>>2)]=$call2542;
      label = 546; break;
    case 499: 
      var $1781=$p_addr;
      var $1782=$yyvsp;
      var $arrayidx2545=((($1782)-(12))|0);
      var $nd2546=$arrayidx2545;
      var $1783=HEAP32[(($nd2546)>>2)];
      var $1784=$yyvsp;
      var $arrayidx2547=((($1784)-(4))|0);
      var $nd2548=$arrayidx2547;
      var $1785=HEAP32[(($nd2548)>>2)];
      var $1786=$yyvsp;
      var $arrayidx2549=(($1786)|0);
      var $id2550=$arrayidx2549;
      var $1787=HEAP16[(($id2550)>>1)];
      var $call2551=_new_args($1781, 0, $1783, 0, $1785, $1787);
      var $nd2552=$yyval;
      HEAP32[(($nd2552)>>2)]=$call2551;
      label = 546; break;
    case 500: 
      var $1788=$p_addr;
      var $1789=$yyvsp;
      var $arrayidx2554=((($1789)-(4))|0);
      var $id2555=$arrayidx2554;
      var $1790=HEAP16[(($id2555)>>1)];
      var $1791=$yyvsp;
      var $arrayidx2556=(($1791)|0);
      var $id2557=$arrayidx2556;
      var $1792=HEAP16[(($id2557)>>1)];
      var $call2558=_new_args($1788, 0, 0, $1790, 0, $1792);
      var $nd2559=$yyval;
      HEAP32[(($nd2559)>>2)]=$call2558;
      label = 546; break;
    case 501: 
      var $1793=$p_addr;
      var $1794=$yyvsp;
      var $arrayidx2561=((($1794)-(12))|0);
      var $id2562=$arrayidx2561;
      var $1795=HEAP16[(($id2562)>>1)];
      var $1796=$yyvsp;
      var $arrayidx2563=((($1796)-(4))|0);
      var $nd2564=$arrayidx2563;
      var $1797=HEAP32[(($nd2564)>>2)];
      var $1798=$yyvsp;
      var $arrayidx2565=(($1798)|0);
      var $id2566=$arrayidx2565;
      var $1799=HEAP16[(($id2566)>>1)];
      var $call2567=_new_args($1793, 0, 0, $1795, $1797, $1799);
      var $nd2568=$yyval;
      HEAP32[(($nd2568)>>2)]=$call2567;
      label = 546; break;
    case 502: 
      var $1800=$p_addr;
      var $1801=$yyvsp;
      var $arrayidx2570=(($1801)|0);
      var $id2571=$arrayidx2570;
      var $1802=HEAP16[(($id2571)>>1)];
      var $call2572=_new_args($1800, 0, 0, 0, 0, $1802);
      var $nd2573=$yyval;
      HEAP32[(($nd2573)>>2)]=$call2572;
      label = 546; break;
    case 503: 
      var $1803=$p_addr;
      _local_add_f($1803, 0);
      var $1804=$p_addr;
      var $call2575=_new_args($1804, 0, 0, 0, 0, 0);
      var $nd2576=$yyval;
      HEAP32[(($nd2576)>>2)]=$call2575;
      label = 546; break;
    case 504: 
      var $1805=$p_addr;
      _yyerror($1805, ((99660)|0));
      var $nd2578=$yyval;
      HEAP32[(($nd2578)>>2)]=0;
      label = 546; break;
    case 505: 
      var $1806=$p_addr;
      _yyerror($1806, ((99420)|0));
      var $nd2580=$yyval;
      HEAP32[(($nd2580)>>2)]=0;
      label = 546; break;
    case 506: 
      var $1807=$p_addr;
      _yyerror($1807, ((99132)|0));
      var $nd2582=$yyval;
      HEAP32[(($nd2582)>>2)]=0;
      label = 546; break;
    case 507: 
      var $1808=$p_addr;
      _yyerror($1808, ((98656)|0));
      var $nd2584=$yyval;
      HEAP32[(($nd2584)>>2)]=0;
      label = 546; break;
    case 508: 
      var $id2586=$yyval;
      HEAP16[(($id2586)>>1)]=0;
      label = 546; break;
    case 509: 
      var $1809=$p_addr;
      var $1810=$yyvsp;
      var $arrayidx2588=(($1810)|0);
      var $id2589=$arrayidx2588;
      var $1811=HEAP16[(($id2589)>>1)];
      _local_add_f($1809, $1811);
      var $1812=$yyvsp;
      var $arrayidx2590=(($1812)|0);
      var $id2591=$arrayidx2590;
      var $1813=HEAP16[(($id2591)>>1)];
      var $id2592=$yyval;
      HEAP16[(($id2592)>>1)]=$1813;
      label = 546; break;
    case 510: 
      var $1814=$p_addr;
      var $1815=$yyvsp;
      var $arrayidx2594=(($1815)|0);
      var $id2595=$arrayidx2594;
      var $1816=HEAP16[(($id2595)>>1)];
      var $call2596=_new_arg($1814, $1816);
      var $nd2597=$yyval;
      HEAP32[(($nd2597)>>2)]=$call2596;
      label = 546; break;
    case 511: 
      var $1817=$p_addr;
      var $1818=$yyvsp;
      var $arrayidx2599=((($1818)-(4))|0);
      var $nd2600=$arrayidx2599;
      var $1819=HEAP32[(($nd2600)>>2)];
      var $call2601=_new_masgn($1817, $1819, 0);
      var $nd2602=$yyval;
      HEAP32[(($nd2602)>>2)]=$call2601;
      label = 546; break;
    case 512: 
      var $1820=$p_addr;
      var $1821=$yyvsp;
      var $arrayidx2604=(($1821)|0);
      var $nd2605=$arrayidx2604;
      var $1822=HEAP32[(($nd2605)>>2)];
      var $call2606=_list1_gen($1820, $1822);
      var $nd2607=$yyval;
      HEAP32[(($nd2607)>>2)]=$call2606;
      label = 546; break;
    case 513: 
      var $1823=$p_addr;
      var $1824=$yyvsp;
      var $arrayidx2609=((($1824)-(8))|0);
      var $nd2610=$arrayidx2609;
      var $1825=HEAP32[(($nd2610)>>2)];
      var $1826=$p_addr;
      var $1827=$yyvsp;
      var $arrayidx2611=(($1827)|0);
      var $nd2612=$arrayidx2611;
      var $1828=HEAP32[(($nd2612)>>2)];
      var $call2613=_list1_gen($1826, $1828);
      var $call2614=_append_gen($1823, $1825, $call2613);
      var $nd2615=$yyval;
      HEAP32[(($nd2615)>>2)]=$call2614;
      label = 546; break;
    case 514: 
      var $1829=$p_addr;
      var $1830=$yyvsp;
      var $arrayidx2617=((($1830)-(8))|0);
      var $id2618=$arrayidx2617;
      var $1831=HEAP16[(($id2618)>>1)];
      _local_add_f($1829, $1831);
      var $1832=$p_addr;
      var $1833=$yyvsp;
      var $arrayidx2619=((($1833)-(8))|0);
      var $id2620=$arrayidx2619;
      var $1834=HEAP16[(($id2620)>>1)];
      var $conv2621=(($1834 << 16) >> 16);
      var $1835=$conv2621;
      var $1836=$yyvsp;
      var $arrayidx2622=(($1836)|0);
      var $nd2623=$arrayidx2622;
      var $1837=HEAP32[(($nd2623)>>2)];
      var $call2624=_cons_gen($1832, $1835, $1837);
      var $nd2625=$yyval;
      HEAP32[(($nd2625)>>2)]=$call2624;
      label = 546; break;
    case 515: 
      var $1838=$p_addr;
      var $1839=$yyvsp;
      var $arrayidx2627=((($1839)-(8))|0);
      var $id2628=$arrayidx2627;
      var $1840=HEAP16[(($id2628)>>1)];
      _local_add_f($1838, $1840);
      var $1841=$p_addr;
      var $1842=$yyvsp;
      var $arrayidx2629=((($1842)-(8))|0);
      var $id2630=$arrayidx2629;
      var $1843=HEAP16[(($id2630)>>1)];
      var $conv2631=(($1843 << 16) >> 16);
      var $1844=$conv2631;
      var $1845=$yyvsp;
      var $arrayidx2632=(($1845)|0);
      var $nd2633=$arrayidx2632;
      var $1846=HEAP32[(($nd2633)>>2)];
      var $call2634=_cons_gen($1841, $1844, $1846);
      var $nd2635=$yyval;
      HEAP32[(($nd2635)>>2)]=$call2634;
      label = 546; break;
    case 516: 
      var $1847=$p_addr;
      var $1848=$yyvsp;
      var $arrayidx2637=(($1848)|0);
      var $nd2638=$arrayidx2637;
      var $1849=HEAP32[(($nd2638)>>2)];
      var $call2639=_list1_gen($1847, $1849);
      var $nd2640=$yyval;
      HEAP32[(($nd2640)>>2)]=$call2639;
      label = 546; break;
    case 517: 
      var $1850=$p_addr;
      var $1851=$yyvsp;
      var $arrayidx2642=((($1851)-(8))|0);
      var $nd2643=$arrayidx2642;
      var $1852=HEAP32[(($nd2643)>>2)];
      var $1853=$p_addr;
      var $1854=$yyvsp;
      var $arrayidx2644=(($1854)|0);
      var $nd2645=$arrayidx2644;
      var $1855=HEAP32[(($nd2645)>>2)];
      var $call2646=_list1_gen($1853, $1855);
      var $call2647=_append_gen($1850, $1852, $call2646);
      var $nd2648=$yyval;
      HEAP32[(($nd2648)>>2)]=$call2647;
      label = 546; break;
    case 518: 
      var $1856=$p_addr;
      var $1857=$yyvsp;
      var $arrayidx2650=(($1857)|0);
      var $nd2651=$arrayidx2650;
      var $1858=HEAP32[(($nd2651)>>2)];
      var $call2652=_list1_gen($1856, $1858);
      var $nd2653=$yyval;
      HEAP32[(($nd2653)>>2)]=$call2652;
      label = 546; break;
    case 519: 
      var $1859=$p_addr;
      var $1860=$yyvsp;
      var $arrayidx2655=((($1860)-(8))|0);
      var $nd2656=$arrayidx2655;
      var $1861=HEAP32[(($nd2656)>>2)];
      var $1862=$p_addr;
      var $1863=$yyvsp;
      var $arrayidx2657=(($1863)|0);
      var $nd2658=$arrayidx2657;
      var $1864=HEAP32[(($nd2658)>>2)];
      var $call2659=_list1_gen($1862, $1864);
      var $call2660=_append_gen($1859, $1861, $call2659);
      var $nd2661=$yyval;
      HEAP32[(($nd2661)>>2)]=$call2660;
      label = 546; break;
    case 520: 
      var $1865=$p_addr;
      var $1866=$yyvsp;
      var $arrayidx2663=(($1866)|0);
      var $id2664=$arrayidx2663;
      var $1867=HEAP16[(($id2664)>>1)];
      _local_add_f($1865, $1867);
      var $1868=$yyvsp;
      var $arrayidx2665=(($1868)|0);
      var $id2666=$arrayidx2665;
      var $1869=HEAP16[(($id2666)>>1)];
      var $id2667=$yyval;
      HEAP16[(($id2667)>>1)]=$1869;
      label = 546; break;
    case 521: 
      var $1870=$p_addr;
      _local_add_f($1870, 0);
      var $id2669=$yyval;
      HEAP16[(($id2669)>>1)]=-1;
      label = 546; break;
    case 522: 
      var $1871=$p_addr;
      var $1872=$yyvsp;
      var $arrayidx2671=(($1872)|0);
      var $id2672=$arrayidx2671;
      var $1873=HEAP16[(($id2672)>>1)];
      _local_add_f($1871, $1873);
      var $1874=$yyvsp;
      var $arrayidx2673=(($1874)|0);
      var $id2674=$arrayidx2673;
      var $1875=HEAP16[(($id2674)>>1)];
      var $id2675=$yyval;
      HEAP16[(($id2675)>>1)]=$1875;
      label = 546; break;
    case 523: 
      var $1876=$yyvsp;
      var $arrayidx2677=(($1876)|0);
      var $id2678=$arrayidx2677;
      var $1877=HEAP16[(($id2678)>>1)];
      var $id2679=$yyval;
      HEAP16[(($id2679)>>1)]=$1877;
      label = 546; break;
    case 524: 
      var $1878=$p_addr;
      _local_add_f($1878, 0);
      var $id2681=$yyval;
      HEAP16[(($id2681)>>1)]=0;
      label = 546; break;
    case 525: 
      var $1879=$yyvsp;
      var $arrayidx2683=(($1879)|0);
      var $nd2684=$arrayidx2683;
      var $1880=HEAP32[(($nd2684)>>2)];
      var $nd2685=$yyval;
      HEAP32[(($nd2685)>>2)]=$1880;
      var $nd2686=$yyval;
      var $1881=HEAP32[(($nd2686)>>2)];
      var $tobool2687=(($1881)|(0))!=0;
      if ($tobool2687) { label = 527; break; } else { label = 526; break; }
    case 526: 
      var $1882=$p_addr;
      var $call2689=_new_nil($1882);
      var $nd2690=$yyval;
      HEAP32[(($nd2690)>>2)]=$call2689;
      label = 527; break;
    case 527: 
      label = 546; break;
    case 528: 
      var $1883=$p_addr;
      var $lstate2693=(($1883+40)|0);
      HEAP32[(($lstate2693)>>2)]=0;
      label = 546; break;
    case 529: 
      var $1884=$yyvsp;
      var $arrayidx2695=((($1884)-(4))|0);
      var $nd2696=$arrayidx2695;
      var $1885=HEAP32[(($nd2696)>>2)];
      var $cmp2697=(($1885)|(0))==0;
      if ($cmp2697) { label = 530; break; } else { label = 531; break; }
    case 530: 
      var $1886=$p_addr;
      _yyerror($1886, ((98416)|0));
      label = 535; break;
    case 531: 
      var $1887=$yyvsp;
      var $arrayidx2701=((($1887)-(4))|0);
      var $nd2702=$arrayidx2701;
      var $1888=HEAP32[(($nd2702)>>2)];
      var $car2703=(($1888)|0);
      var $1889=HEAP32[(($car2703)>>2)];
      var $1890=$1889;
      if ((($1890)|(0))==55 | (($1890)|(0))==56 | (($1890)|(0))==57 | (($1890)|(0))==58 | (($1890)|(0))==60 | (($1890)|(0))==47 | (($1890)|(0))==51 | (($1890)|(0))==34 | (($1890)|(0))==99) {
        label = 532; break;
      }
      else {
      label = 533; break;
      }
    case 532: 
      var $1891=$p_addr;
      _yyerror($1891, ((98148)|0));
      label = 533; break;
    case 533: 
      label = 534; break;
    case 534: 
      label = 535; break;
    case 535: 
      var $1892=$yyvsp;
      var $arrayidx2706=((($1892)-(4))|0);
      var $nd2707=$arrayidx2706;
      var $1893=HEAP32[(($nd2707)>>2)];
      var $nd2708=$yyval;
      HEAP32[(($nd2708)>>2)]=$1893;
      label = 546; break;
    case 536: 
      var $1894=$yyvsp;
      var $arrayidx2710=((($1894)-(4))|0);
      var $nd2711=$arrayidx2710;
      var $1895=HEAP32[(($nd2711)>>2)];
      var $nd2712=$yyval;
      HEAP32[(($nd2712)>>2)]=$1895;
      label = 546; break;
    case 537: 
      var $1896=$p_addr;
      var $1897=$yyvsp;
      var $arrayidx2714=(($1897)|0);
      var $nd2715=$arrayidx2714;
      var $1898=HEAP32[(($nd2715)>>2)];
      var $call2716=_list1_gen($1896, $1898);
      var $nd2717=$yyval;
      HEAP32[(($nd2717)>>2)]=$call2716;
      label = 546; break;
    case 538: 
      var $1899=$p_addr;
      var $1900=$yyvsp;
      var $arrayidx2719=((($1900)-(8))|0);
      var $nd2720=$arrayidx2719;
      var $1901=HEAP32[(($nd2720)>>2)];
      var $1902=$p_addr;
      var $1903=$yyvsp;
      var $arrayidx2721=(($1903)|0);
      var $nd2722=$arrayidx2721;
      var $1904=HEAP32[(($nd2722)>>2)];
      var $call2723=_list1_gen($1902, $1904);
      var $call2724=_append_gen($1899, $1901, $call2723);
      var $nd2725=$yyval;
      HEAP32[(($nd2725)>>2)]=$call2724;
      label = 546; break;
    case 539: 
      var $1905=$p_addr;
      var $1906=$yyvsp;
      var $arrayidx2727=((($1906)-(8))|0);
      var $nd2728=$arrayidx2727;
      var $1907=HEAP32[(($nd2728)>>2)];
      var $1908=$yyvsp;
      var $arrayidx2729=(($1908)|0);
      var $nd2730=$arrayidx2729;
      var $1909=HEAP32[(($nd2730)>>2)];
      var $call2731=_cons_gen($1905, $1907, $1909);
      var $nd2732=$yyval;
      HEAP32[(($nd2732)>>2)]=$call2731;
      label = 546; break;
    case 540: 
      var $1910=$p_addr;
      var $1911=$p_addr;
      var $1912=$yyvsp;
      var $arrayidx2734=((($1912)-(4))|0);
      var $id2735=$arrayidx2734;
      var $1913=HEAP16[(($id2735)>>1)];
      var $call2736=_new_sym($1911, $1913);
      var $1914=$yyvsp;
      var $arrayidx2737=(($1914)|0);
      var $nd2738=$arrayidx2737;
      var $1915=HEAP32[(($nd2738)>>2)];
      var $call2739=_cons_gen($1910, $call2736, $1915);
      var $nd2740=$yyval;
      HEAP32[(($nd2740)>>2)]=$call2739;
      label = 546; break;
    case 541: 
      $yyerrstatus=0;
      label = 546; break;
    case 542: 
      var $1916=$p_addr;
      var $lineno2743=(($1916+32)|0);
      var $1917=HEAP32[(($lineno2743)>>2)];
      var $inc2744=((($1917)+(1))|0);
      HEAP32[(($lineno2743)>>2)]=$inc2744;
      var $1918=$p_addr;
      var $column=(($1918+36)|0);
      HEAP32[(($column)>>2)]=0;
      label = 546; break;
    case 543: 
      $yyerrstatus=0;
      label = 546; break;
    case 544: 
      var $nd2747=$yyval;
      HEAP32[(($nd2747)>>2)]=0;
      label = 546; break;
    case 545: 
      label = 546; break;
    case 546: 
      label = 547; break;
    case 547: 
      var $1919=HEAP32[((37036)>>2)];
      var $tobool2751=(($1919)|(0))!=0;
      if ($tobool2751) { label = 548; break; } else { label = 549; break; }
    case 548: 
      var $1920=HEAP32[((_stderr)>>2)];
      var $call2753=_fprintf($1920, ((98976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((97936)|0),tempInt));
      var $1921=HEAP32[((_stderr)>>2)];
      var $1922=$yyn;
      var $arrayidx2754=((30412+($1922<<1))|0);
      var $1923=HEAP16[(($arrayidx2754)>>1)];
      var $conv2755=(($1923)&(65535));
      var $1924=$p_addr;
      _yy_symbol_print($1921, $conv2755, $yyval, $1924);
      var $1925=HEAP32[((_stderr)>>2)];
      var $call2756=_fprintf($1925, ((95764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 549; break;
    case 549: 
      label = 550; break;
    case 550: 
      var $1926=$yylen;
      var $1927=$yyvsp;
      var $idx_neg=(((-$1926))|0);
      var $add_ptr2759=(($1927+($idx_neg<<2))|0);
      $yyvsp=$add_ptr2759;
      var $1928=$yylen;
      var $1929=$yyssp;
      var $idx_neg2760=(((-$1928))|0);
      var $add_ptr2761=(($1929+($idx_neg2760<<1))|0);
      $yyssp=$add_ptr2761;
      $yylen=0;
      label = 551; break;
    case 551: 
      var $1930=HEAP32[((37036)>>2)];
      var $tobool2763=(($1930)|(0))!=0;
      if ($tobool2763) { label = 552; break; } else { label = 553; break; }
    case 552: 
      var $1931=$yyss;
      var $1932=$yyssp;
      _yy_stack_print($1931, $1932);
      label = 553; break;
    case 553: 
      label = 554; break;
    case 554: 
      var $1933=$yyvsp;
      var $incdec_ptr2767=(($1933+4)|0);
      $yyvsp=$incdec_ptr2767;
      var $1934=$incdec_ptr2767;
      var $1935=$yyval;
      assert(4 % 1 === 0);HEAP32[(($1934)>>2)]=HEAP32[(($1935)>>2)];
      var $1936=$yyn;
      var $arrayidx2768=((30412+($1936<<1))|0);
      var $1937=HEAP16[(($arrayidx2768)>>1)];
      var $conv2769=(($1937)&(65535));
      $yyn=$conv2769;
      var $1938=$yyn;
      var $sub2770=((($1938)-(151))|0);
      var $arrayidx2771=((32596+($sub2770<<1))|0);
      var $1939=HEAP16[(($arrayidx2771)>>1)];
      var $conv2772=(($1939 << 16) >> 16);
      var $1940=$yyssp;
      var $1941=HEAP16[(($1940)>>1)];
      var $conv2773=(($1941 << 16) >> 16);
      var $add2774=((($conv2772)+($conv2773))|0);
      $yystate=$add2774;
      var $1942=$yystate;
      var $cmp2775=0 <= (($1942)|(0));
      if ($cmp2775) { label = 555; break; } else { label = 558; break; }
    case 555: 
      var $1943=$yystate;
      var $cmp2777=(($1943)|(0)) <= 10895;
      if ($cmp2777) { label = 556; break; } else { label = 558; break; }
    case 556: 
      var $1944=$yystate;
      var $arrayidx2780=((37040+($1944<<1))|0);
      var $1945=HEAP16[(($arrayidx2780)>>1)];
      var $conv2781=(($1945 << 16) >> 16);
      var $1946=$yyssp;
      var $1947=HEAP16[(($1946)>>1)];
      var $conv2782=(($1947 << 16) >> 16);
      var $cmp2783=(($conv2781)|(0))==(($conv2782)|(0));
      if ($cmp2783) { label = 557; break; } else { label = 558; break; }
    case 557: 
      var $1948=$yystate;
      var $arrayidx2786=((1608+($1948<<1))|0);
      var $1949=HEAP16[(($arrayidx2786)>>1)];
      var $conv2787=(($1949 << 16) >> 16);
      $yystate=$conv2787;
      label = 559; break;
    case 558: 
      var $1950=$yyn;
      var $sub2789=((($1950)-(151))|0);
      var $arrayidx2790=((34816+($sub2789<<1))|0);
      var $1951=HEAP16[(($arrayidx2790)>>1)];
      var $conv2791=(($1951 << 16) >> 16);
      $yystate=$conv2791;
      label = 559; break;
    case 559: 
      label = 7; break;
    case 560: 
      var $1952=$yyerrstatus;
      var $tobool2793=(($1952)|(0))!=0;
      if ($tobool2793) { label = 579; break; } else { label = 561; break; }
    case 561: 
      var $1953=$yynerrs;
      var $inc2795=((($1953)+(1))|0);
      $yynerrs=$inc2795;
      var $1954=$yystate;
      var $1955=$yychar;
      var $call2797=_yysyntax_error(0, $1954, $1955);
      $yysize2796=$call2797;
      var $1956=$yymsg_alloc;
      var $1957=$yysize2796;
      var $cmp2798=(($1956)>>>(0)) < (($1957)>>>(0));
      if ($cmp2798) { label = 562; break; } else { label = 572; break; }
    case 562: 
      var $1958=$yymsg_alloc;
      var $cmp2801=(($1958)>>>(0)) < 4294967295;
      if ($cmp2801) { label = 563; break; } else { label = 572; break; }
    case 563: 
      var $1959=$yysize2796;
      var $mul2804=($1959<<1);
      $yyalloc=$mul2804;
      var $1960=$yysize2796;
      var $1961=$yyalloc;
      var $cmp2805=(($1960)>>>(0)) <= (($1961)>>>(0));
      if ($cmp2805) { label = 564; break; } else { label = 565; break; }
    case 564: 
      var $1962=$yyalloc;
      var $cmp2808=(($1962)>>>(0)) <= 4294967295;
      if ($cmp2808) { label = 566; break; } else { label = 565; break; }
    case 565: 
      $yyalloc=-1;
      label = 566; break;
    case 566: 
      var $1963=$yymsg;
      var $arraydecay2812=(($yymsgbuf)|0);
      var $cmp2813=(($1963)|(0))!=(($arraydecay2812)|(0));
      if ($cmp2813) { label = 567; break; } else { label = 568; break; }
    case 567: 
      var $1964=$p_addr;
      var $mrb2816=(($1964)|0);
      var $1965=HEAP32[(($mrb2816)>>2)];
      var $1966=$yymsg;
      _mrb_free($1965, $1966);
      label = 568; break;
    case 568: 
      var $1967=$p_addr;
      var $mrb2818=(($1967)|0);
      var $1968=HEAP32[(($mrb2818)>>2)];
      var $1969=$yyalloc;
      var $call2819=_mrb_malloc($1968, $1969);
      $yymsg=$call2819;
      var $1970=$yymsg;
      var $tobool2820=(($1970)|(0))!=0;
      if ($tobool2820) { label = 569; break; } else { label = 570; break; }
    case 569: 
      var $1971=$yyalloc;
      $yymsg_alloc=$1971;
      label = 571; break;
    case 570: 
      var $arraydecay2823=(($yymsgbuf)|0);
      $yymsg=$arraydecay2823;
      $yymsg_alloc=128;
      label = 571; break;
    case 571: 
      label = 572; break;
    case 572: 
      var $1972=$yysize2796;
      var $cmp2826=0 < (($1972)>>>(0));
      if ($cmp2826) { label = 573; break; } else { label = 575; break; }
    case 573: 
      var $1973=$yysize2796;
      var $1974=$yymsg_alloc;
      var $cmp2829=(($1973)>>>(0)) <= (($1974)>>>(0));
      if ($cmp2829) { label = 574; break; } else { label = 575; break; }
    case 574: 
      var $1975=$yymsg;
      var $1976=$yystate;
      var $1977=$yychar;
      var $call2832=_yysyntax_error($1975, $1976, $1977);
      var $1978=$p_addr;
      var $1979=$yymsg;
      _yyerror($1978, $1979);
      label = 578; break;
    case 575: 
      var $1980=$p_addr;
      _yyerror($1980, ((97716)|0));
      var $1981=$yysize2796;
      var $cmp2834=(($1981)|(0))!=0;
      if ($cmp2834) { label = 576; break; } else { label = 577; break; }
    case 576: 
      label = 617; break;
    case 577: 
      label = 578; break;
    case 578: 
      label = 579; break;
    case 579: 
      var $1982=$yyerrstatus;
      var $cmp2840=(($1982)|(0))==3;
      if ($cmp2840) { label = 580; break; } else { label = 586; break; }
    case 580: 
      var $1983=$yychar;
      var $cmp2843=(($1983)|(0)) <= 0;
      if ($cmp2843) { label = 581; break; } else { label = 584; break; }
    case 581: 
      var $1984=$yychar;
      var $cmp2846=(($1984)|(0))==0;
      if ($cmp2846) { label = 582; break; } else { label = 583; break; }
    case 582: 
      label = 616; break;
    case 583: 
      label = 585; break;
    case 584: 
      var $1985=$yytoken;
      var $1986=$p_addr;
      _yydestruct(((97496)|0), $1985, $yylval, $1986);
      $yychar=-2;
      label = 585; break;
    case 585: 
      label = 586; break;
    case 586: 
      label = 592; break;
    case 587: 
      var $1987=$yylen;
      var $1988=$yyvsp;
      var $idx_neg2853=(((-$1987))|0);
      var $add_ptr2854=(($1988+($idx_neg2853<<2))|0);
      $yyvsp=$add_ptr2854;
      var $1989=$yylen;
      var $1990=$yyssp;
      var $idx_neg2855=(((-$1989))|0);
      var $add_ptr2856=(($1990+($idx_neg2855<<1))|0);
      $yyssp=$add_ptr2856;
      $yylen=0;
      label = 588; break;
    case 588: 
      var $1991=HEAP32[((37036)>>2)];
      var $tobool2858=(($1991)|(0))!=0;
      if ($tobool2858) { label = 589; break; } else { label = 590; break; }
    case 589: 
      var $1992=$yyss;
      var $1993=$yyssp;
      _yy_stack_print($1992, $1993);
      label = 590; break;
    case 590: 
      label = 591; break;
    case 591: 
      var $1994=$yyssp;
      var $1995=HEAP16[(($1994)>>1)];
      var $conv2862=(($1995 << 16) >> 16);
      $yystate=$conv2862;
      label = 592; break;
    case 592: 
      $yyerrstatus=3;
      label = 593; break;
    case 593: 
      var $1996=$yystate;
      var $arrayidx2863=((32904+($1996<<1))|0);
      var $1997=HEAP16[(($arrayidx2863)>>1)];
      var $conv2864=(($1997 << 16) >> 16);
      $yyn=$conv2864;
      var $1998=$yyn;
      var $cmp2865=(($1998)|(0))!=-745;
      if ($cmp2865) { label = 594; break; } else { label = 601; break; }
    case 594: 
      var $1999=$yyn;
      var $add2868=((($1999)+(1))|0);
      $yyn=$add2868;
      var $2000=$yyn;
      var $cmp2869=0 <= (($2000)|(0));
      if ($cmp2869) { label = 595; break; } else { label = 600; break; }
    case 595: 
      var $2001=$yyn;
      var $cmp2872=(($2001)|(0)) <= 10895;
      if ($cmp2872) { label = 596; break; } else { label = 600; break; }
    case 596: 
      var $2002=$yyn;
      var $arrayidx2875=((37040+($2002<<1))|0);
      var $2003=HEAP16[(($arrayidx2875)>>1)];
      var $conv2876=(($2003 << 16) >> 16);
      var $cmp2877=(($conv2876)|(0))==1;
      if ($cmp2877) { label = 597; break; } else { label = 600; break; }
    case 597: 
      var $2004=$yyn;
      var $arrayidx2880=((1608+($2004<<1))|0);
      var $2005=HEAP16[(($arrayidx2880)>>1)];
      var $conv2881=(($2005 << 16) >> 16);
      $yyn=$conv2881;
      var $2006=$yyn;
      var $cmp2882=0 < (($2006)|(0));
      if ($cmp2882) { label = 598; break; } else { label = 599; break; }
    case 598: 
      label = 608; break;
    case 599: 
      label = 600; break;
    case 600: 
      label = 601; break;
    case 601: 
      var $2007=$yyssp;
      var $2008=$yyss;
      var $cmp2888=(($2007)|(0))==(($2008)|(0));
      if ($cmp2888) { label = 602; break; } else { label = 603; break; }
    case 602: 
      label = 616; break;
    case 603: 
      var $2009=$yystate;
      var $arrayidx2892=((23452+($2009<<1))|0);
      var $2010=HEAP16[(($arrayidx2892)>>1)];
      var $conv2893=(($2010)&(65535));
      var $2011=$yyvsp;
      var $2012=$p_addr;
      _yydestruct(((97360)|0), $conv2893, $2011, $2012);
      var $2013=$yyvsp;
      var $add_ptr2894=((($2013)-(4))|0);
      $yyvsp=$add_ptr2894;
      var $2014=$yyssp;
      var $add_ptr2895=((($2014)-(2))|0);
      $yyssp=$add_ptr2895;
      var $2015=$yyssp;
      var $2016=HEAP16[(($2015)>>1)];
      var $conv2896=(($2016 << 16) >> 16);
      $yystate=$conv2896;
      label = 604; break;
    case 604: 
      var $2017=HEAP32[((37036)>>2)];
      var $tobool2898=(($2017)|(0))!=0;
      if ($tobool2898) { label = 605; break; } else { label = 606; break; }
    case 605: 
      var $2018=$yyss;
      var $2019=$yyssp;
      _yy_stack_print($2018, $2019);
      label = 606; break;
    case 606: 
      label = 607; break;
    case 607: 
      label = 593; break;
    case 608: 
      var $2020=$yyn;
      var $cmp2902=(($2020)|(0))==3;
      if ($cmp2902) { label = 609; break; } else { label = 610; break; }
    case 609: 
      label = 615; break;
    case 610: 
      var $2021=$yyvsp;
      var $incdec_ptr2906=(($2021+4)|0);
      $yyvsp=$incdec_ptr2906;
      var $2022=$incdec_ptr2906;
      var $2023=$yylval;
      assert(4 % 1 === 0);HEAP32[(($2022)>>2)]=HEAP32[(($2023)>>2)];
      label = 611; break;
    case 611: 
      var $2024=HEAP32[((37036)>>2)];
      var $tobool2908=(($2024)|(0))!=0;
      if ($tobool2908) { label = 612; break; } else { label = 613; break; }
    case 612: 
      var $2025=HEAP32[((_stderr)>>2)];
      var $call2910=_fprintf($2025, ((98976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((94716)|0),tempInt));
      var $2026=HEAP32[((_stderr)>>2)];
      var $2027=$yyn;
      var $arrayidx2911=((23452+($2027<<1))|0);
      var $2028=HEAP16[(($arrayidx2911)>>1)];
      var $conv2912=(($2028)&(65535));
      var $2029=$yyvsp;
      var $2030=$p_addr;
      _yy_symbol_print($2026, $conv2912, $2029, $2030);
      var $2031=HEAP32[((_stderr)>>2)];
      var $call2913=_fprintf($2031, ((95764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 613; break;
    case 613: 
      label = 614; break;
    case 614: 
      var $2032=$yyn;
      $yystate=$2032;
      label = 7; break;
    case 615: 
      $yyresult=0;
      label = 618; break;
    case 616: 
      $yyresult=1;
      label = 618; break;
    case 617: 
      var $2033=$p_addr;
      _yyerror($2033, ((97288)|0));
      $yyresult=2;
      label = 618; break;
    case 618: 
      var $2034=$yychar;
      var $cmp2916=(($2034)|(0))!=0;
      if ($cmp2916) { label = 619; break; } else { label = 621; break; }
    case 619: 
      var $2035=$yychar;
      var $cmp2919=(($2035)|(0))!=-2;
      if ($cmp2919) { label = 620; break; } else { label = 621; break; }
    case 620: 
      var $2036=$yytoken;
      var $2037=$p_addr;
      _yydestruct(((97156)|0), $2036, $yylval, $2037);
      label = 621; break;
    case 621: 
      var $2038=$yylen;
      var $2039=$yyvsp;
      var $idx_neg2923=(((-$2038))|0);
      var $add_ptr2924=(($2039+($idx_neg2923<<2))|0);
      $yyvsp=$add_ptr2924;
      var $2040=$yylen;
      var $2041=$yyssp;
      var $idx_neg2925=(((-$2040))|0);
      var $add_ptr2926=(($2041+($idx_neg2925<<1))|0);
      $yyssp=$add_ptr2926;
      label = 622; break;
    case 622: 
      var $2042=HEAP32[((37036)>>2)];
      var $tobool2928=(($2042)|(0))!=0;
      if ($tobool2928) { label = 623; break; } else { label = 624; break; }
    case 623: 
      var $2043=$yyss;
      var $2044=$yyssp;
      _yy_stack_print($2043, $2044);
      label = 624; break;
    case 624: 
      label = 625; break;
    case 625: 
      label = 626; break;
    case 626: 
      var $2045=$yyssp;
      var $2046=$yyss;
      var $cmp2932=(($2045)|(0))!=(($2046)|(0));
      if ($cmp2932) { label = 627; break; } else { label = 628; break; }
    case 627: 
      var $2047=$yyssp;
      var $2048=HEAP16[(($2047)>>1)];
      var $idxprom=(($2048 << 16) >> 16);
      var $arrayidx2934=((23452+($idxprom<<1))|0);
      var $2049=HEAP16[(($arrayidx2934)>>1)];
      var $conv2935=(($2049)&(65535));
      var $2050=$yyvsp;
      var $2051=$p_addr;
      _yydestruct(((97036)|0), $conv2935, $2050, $2051);
      var $2052=$yyvsp;
      var $add_ptr2936=((($2052)-(4))|0);
      $yyvsp=$add_ptr2936;
      var $2053=$yyssp;
      var $add_ptr2937=((($2053)-(2))|0);
      $yyssp=$add_ptr2937;
      label = 626; break;
    case 628: 
      var $2054=$yyss;
      var $arraydecay2938=(($yyssa)|0);
      var $cmp2939=(($2054)|(0))!=(($arraydecay2938)|(0));
      if ($cmp2939) { label = 629; break; } else { label = 630; break; }
    case 629: 
      var $2055=$p_addr;
      var $mrb2942=(($2055)|0);
      var $2056=HEAP32[(($mrb2942)>>2)];
      var $2057=$yyss;
      var $2058=$2057;
      _mrb_free($2056, $2058);
      label = 630; break;
    case 630: 
      var $2059=$yymsg;
      var $arraydecay2944=(($yymsgbuf)|0);
      var $cmp2945=(($2059)|(0))!=(($arraydecay2944)|(0));
      if ($cmp2945) { label = 631; break; } else { label = 632; break; }
    case 631: 
      var $2060=$p_addr;
      var $mrb2948=(($2060)|0);
      var $2061=HEAP32[(($mrb2948)>>2)];
      var $2062=$yymsg;
      _mrb_free($2061, $2062);
      label = 632; break;
    case 632: 
      var $2063=$yyresult;
      STACKTOP = __stackBase__;
      return $2063;
    default: assert(0, "bad label: " + label);
  }
}
function _cond($n) {
  var label = 0;
  var $n_addr;
  $n_addr=$n;
  var $0=$n_addr;
  return $0;
}
function _append_gen($p, $a, $b) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $a_addr;
      var $b_addr;
      var $c;
      $p_addr=$p;
      $a_addr=$a;
      $b_addr=$b;
      var $0=$a_addr;
      $c=$0;
      var $1=$a_addr;
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$b_addr;
      $retval=$2;
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $3=$c;
      var $cdr=(($3+4)|0);
      var $4=HEAP32[(($cdr)>>2)];
      var $tobool1=(($4)|(0))!=0;
      if ($tobool1) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $5=$c;
      var $cdr2=(($5+4)|0);
      var $6=HEAP32[(($cdr2)>>2)];
      $c=$6;
      label = 5; break;
    case 7: 
      var $7=$b_addr;
      var $tobool3=(($7)|(0))!=0;
      if ($tobool3) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $8=$b_addr;
      var $9=$c;
      var $cdr5=(($9+4)|0);
      HEAP32[(($cdr5)>>2)]=$8;
      label = 9; break;
    case 9: 
      var $10=$a_addr;
      $retval=$10;
      label = 10; break;
    case 10: 
      var $11=$retval;
      return $11;
    default: assert(0, "bad label: " + label);
  }
}
function _local_resume($p, $prev) {
  var label = 0;
  var $p_addr;
  var $prev_addr;
  $p_addr=$p;
  $prev_addr=$prev;
  var $0=$prev_addr;
  var $1=$p_addr;
  var $locals=(($1+76)|0);
  HEAP32[(($locals)>>2)]=$0;
  return;
}
function _local_unnest($p) {
  var label = 0;
  var $p_addr;
  $p_addr=$p;
  var $0=$p_addr;
  var $locals=(($0+76)|0);
  var $1=HEAP32[(($locals)>>2)];
  var $cdr=(($1+4)|0);
  var $2=HEAP32[(($cdr)>>2)];
  var $3=$p_addr;
  var $locals1=(($3+76)|0);
  HEAP32[(($locals1)>>2)]=$2;
  return;
}
function _yylex($lval, $p) {
  var label = 0;
  var $lval_addr;
  var $p_addr;
  var $t;
  $lval_addr=$lval;
  $p_addr=$p;
  var $0=$lval_addr;
  var $1=$p_addr;
  var $ylval=(($1+1124)|0);
  HEAP32[(($ylval)>>2)]=$0;
  var $2=$p_addr;
  var $call=_parser_yylex($2);
  $t=$call;
  var $3=$t;
  return $3;
}
function _yy_symbol_print($yyoutput, $yytype, $yyvaluep, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $yyoutput_addr;
      var $yytype_addr;
      var $yyvaluep_addr;
      var $p_addr;
      $yyoutput_addr=$yyoutput;
      $yytype_addr=$yytype;
      $yyvaluep_addr=$yyvaluep;
      $p_addr=$p;
      var $0=$yytype_addr;
      var $cmp=(($0)|(0)) < 151;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$yyoutput_addr;
      var $2=$yytype_addr;
      var $arrayidx=((384+($2<<2))|0);
      var $3=HEAP32[(($arrayidx)>>2)];
      var $call=_fprintf($1, ((97652)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$3,tempInt));
      label = 5; break;
    case 4: 
      var $4=$yyoutput_addr;
      var $5=$yytype_addr;
      var $arrayidx1=((384+($5<<2))|0);
      var $6=HEAP32[(($arrayidx1)>>2)];
      var $call2=_fprintf($4, ((97628)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$6,tempInt));
      label = 5; break;
    case 5: 
      var $7=$yyoutput_addr;
      var $8=$yytype_addr;
      var $9=$yyvaluep_addr;
      var $10=$p_addr;
      _yy_symbol_value_print($7, $8, $9, $10);
      var $11=$yyoutput_addr;
      var $call3=_fprintf($11, ((97624)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _yy_reduce_print($yyvsp, $yyrule, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $yyvsp_addr;
      var $yyrule_addr;
      var $p_addr;
      var $yynrhs;
      var $yyi;
      var $yylno;
      $yyvsp_addr=$yyvsp;
      $yyrule_addr=$yyrule;
      $p_addr=$p;
      var $0=$yyrule_addr;
      var $arrayidx=((29864+$0)|0);
      var $1=HEAP8[($arrayidx)];
      var $conv=(($1)&(255));
      $yynrhs=$conv;
      var $2=$yyrule_addr;
      var $arrayidx1=((25364+($2<<1))|0);
      var $3=HEAP16[(($arrayidx1)>>1)];
      var $conv2=(($3)&(65535));
      $yylno=$conv2;
      var $4=HEAP32[((_stderr)>>2)];
      var $5=$yyrule_addr;
      var $sub=((($5)-(1))|0);
      var $6=$yylno;
      var $call=_fprintf($4, ((97676)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$sub,HEAP32[(((tempInt)+(4))>>2)]=$6,tempInt));
      $yyi=0;
      label = 3; break;
    case 3: 
      var $7=$yyi;
      var $8=$yynrhs;
      var $cmp=(($7)|(0)) < (($8)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $9=HEAP32[((_stderr)>>2)];
      var $10=$yyi;
      var $add=((($10)+(1))|0);
      var $call4=_fprintf($9, ((97664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$add,tempInt));
      var $11=HEAP32[((_stderr)>>2)];
      var $12=$yyrule_addr;
      var $arrayidx5=((31504+($12<<1))|0);
      var $13=HEAP16[(($arrayidx5)>>1)];
      var $conv6=(($13)&(65535));
      var $14=$yyi;
      var $add7=((($conv6)+($14))|0);
      var $arrayidx8=((26456+($add7<<1))|0);
      var $15=HEAP16[(($arrayidx8)>>1)];
      var $conv9=(($15 << 16) >> 16);
      var $16=$yyi;
      var $add10=((($16)+(1))|0);
      var $17=$yynrhs;
      var $sub11=((($add10)-($17))|0);
      var $18=$yyvsp_addr;
      var $arrayidx12=(($18+($sub11<<2))|0);
      var $19=$p_addr;
      _yy_symbol_print($11, $conv9, $arrayidx12, $19);
      var $20=HEAP32[((_stderr)>>2)];
      var $call13=_fprintf($20, ((95764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 5; break;
    case 5: 
      var $21=$yyi;
      var $inc=((($21)+(1))|0);
      $yyi=$inc;
      label = 3; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _cons_gen($p, $car, $cdr) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $car_addr;
      var $cdr_addr;
      var $c;
      $p_addr=$p;
      $car_addr=$car;
      $cdr_addr=$cdr;
      var $0=$p_addr;
      var $cells=(($0+8)|0);
      var $1=HEAP32[(($cells)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$p_addr;
      var $cells1=(($2+8)|0);
      var $3=HEAP32[(($cells1)>>2)];
      $c=$3;
      var $4=$p_addr;
      var $cells2=(($4+8)|0);
      var $5=HEAP32[(($cells2)>>2)];
      var $cdr3=(($5+4)|0);
      var $6=HEAP32[(($cdr3)>>2)];
      var $7=$p_addr;
      var $cells4=(($7+8)|0);
      HEAP32[(($cells4)>>2)]=$6;
      label = 5; break;
    case 4: 
      var $8=$p_addr;
      var $call=_parser_palloc($8, 12);
      var $9=$call;
      $c=$9;
      label = 5; break;
    case 5: 
      var $10=$car_addr;
      var $11=$c;
      var $car5=(($11)|0);
      HEAP32[(($car5)>>2)]=$10;
      var $12=$cdr_addr;
      var $13=$c;
      var $cdr6=(($13+4)|0);
      HEAP32[(($cdr6)>>2)]=$12;
      var $14=$p_addr;
      var $lineno=(($14+32)|0);
      var $15=HEAP32[(($lineno)>>2)];
      var $conv=(($15) & 65535);
      var $16=$c;
      var $lineno7=(($16+8)|0);
      HEAP16[(($lineno7)>>1)]=$conv;
      var $17=$c;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
function _new_scope($p, $body) {
  var label = 0;
  var $p_addr;
  var $body_addr;
  $p_addr=$p;
  $body_addr=$body;
  var $0=$p_addr;
  var $1=$p_addr;
  var $2=$p_addr;
  var $locals=(($2+76)|0);
  var $3=HEAP32[(($locals)>>2)];
  var $car=(($3)|0);
  var $4=HEAP32[(($car)>>2)];
  var $5=$body_addr;
  var $call=_cons_gen($1, $4, $5);
  var $call1=_cons_gen($0, 3, $call);
  return $call1;
}
function _new_begin($p, $body) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $body_addr;
      $p_addr=$p;
      $body_addr=$body;
      var $0=$body_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$p_addr;
      var $2=$body_addr;
      var $call=_list2_gen($1, 17, $2);
      $retval=$call;
      label = 5; break;
    case 4: 
      var $3=$p_addr;
      var $call1=_cons_gen($3, 17, 0);
      $retval=$call1;
      label = 5; break;
    case 5: 
      var $4=$retval;
      return $4;
    default: assert(0, "bad label: " + label);
  }
}
function _list1_gen($p, $a) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  $p_addr=$p;
  $a_addr=$a;
  var $0=$p_addr;
  var $1=$a_addr;
  var $call=_cons_gen($0, $1, 0);
  return $call;
}
function _local_switch($p) {
  var label = 0;
  var $p_addr;
  var $prev;
  $p_addr=$p;
  var $0=$p_addr;
  var $locals=(($0+76)|0);
  var $1=HEAP32[(($locals)>>2)];
  $prev=$1;
  var $2=$p_addr;
  var $call=_cons_gen($2, 0, 0);
  var $3=$p_addr;
  var $locals1=(($3+76)|0);
  HEAP32[(($locals1)>>2)]=$call;
  var $4=$prev;
  return $4;
}
function _yyerror($p, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $s_addr;
      var $c;
      var $n;
      $p_addr=$p;
      $s_addr=$s;
      var $0=$p_addr;
      var $capture_errors=(($0+1140)|0);
      var $1=HEAP32[(($capture_errors)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 3; break; }
    case 3: 
      var $2=$p_addr;
      var $filename=(($2+28)|0);
      var $3=HEAP32[(($filename)>>2)];
      var $tobool1=(($3)|(0))!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=HEAP32[((_stderr)>>2)];
      var $5=$p_addr;
      var $filename3=(($5+28)|0);
      var $6=HEAP32[(($filename3)>>2)];
      var $7=$p_addr;
      var $lineno=(($7+32)|0);
      var $8=HEAP32[(($lineno)>>2)];
      var $9=$p_addr;
      var $column=(($9+36)|0);
      var $10=HEAP32[(($column)>>2)];
      var $11=$s_addr;
      var $call=_fprintf($4, ((106288)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$6,HEAP32[(((tempInt)+(4))>>2)]=$8,HEAP32[(((tempInt)+(8))>>2)]=$10,HEAP32[(((tempInt)+(12))>>2)]=$11,tempInt));
      label = 6; break;
    case 5: 
      var $12=HEAP32[((_stderr)>>2)];
      var $13=$p_addr;
      var $lineno4=(($13+32)|0);
      var $14=HEAP32[(($lineno4)>>2)];
      var $15=$p_addr;
      var $column5=(($15+36)|0);
      var $16=HEAP32[(($column5)>>2)];
      var $17=$s_addr;
      var $call6=_fprintf($12, ((106272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$14,HEAP32[(((tempInt)+(4))>>2)]=$16,HEAP32[(((tempInt)+(8))>>2)]=$17,tempInt));
      label = 6; break;
    case 6: 
      label = 10; break;
    case 7: 
      var $18=$p_addr;
      var $nerr=(($18+1128)|0);
      var $19=HEAP32[(($nerr)>>2)];
      var $cmp=(($19)>>>(0)) < 10;
      if ($cmp) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $20=$s_addr;
      var $call9=_strlen($20);
      $n=$call9;
      var $21=$p_addr;
      var $22=$n;
      var $add=((($22)+(1))|0);
      var $call10=_parser_palloc($21, $add);
      $c=$call10;
      var $23=$c;
      var $24=$s_addr;
      var $25=$n;
      var $add11=((($25)+(1))|0);
      assert($add11 % 1 === 0);_memcpy($23, $24, $add11);
      var $26=$c;
      var $27=$p_addr;
      var $nerr12=(($27+1128)|0);
      var $28=HEAP32[(($nerr12)>>2)];
      var $29=$p_addr;
      var $error_buffer=(($29+1144)|0);
      var $arrayidx=(($error_buffer+((($28)*(12))&-1))|0);
      var $message=(($arrayidx+8)|0);
      HEAP32[(($message)>>2)]=$26;
      var $30=$p_addr;
      var $lineno13=(($30+32)|0);
      var $31=HEAP32[(($lineno13)>>2)];
      var $32=$p_addr;
      var $nerr14=(($32+1128)|0);
      var $33=HEAP32[(($nerr14)>>2)];
      var $34=$p_addr;
      var $error_buffer15=(($34+1144)|0);
      var $arrayidx16=(($error_buffer15+((($33)*(12))&-1))|0);
      var $lineno17=(($arrayidx16)|0);
      HEAP32[(($lineno17)>>2)]=$31;
      var $35=$p_addr;
      var $column18=(($35+36)|0);
      var $36=HEAP32[(($column18)>>2)];
      var $37=$p_addr;
      var $nerr19=(($37+1128)|0);
      var $38=HEAP32[(($nerr19)>>2)];
      var $39=$p_addr;
      var $error_buffer20=(($39+1144)|0);
      var $arrayidx21=(($error_buffer20+((($38)*(12))&-1))|0);
      var $column22=(($arrayidx21+4)|0);
      HEAP32[(($column22)>>2)]=$36;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $40=$p_addr;
      var $nerr25=(($40+1128)|0);
      var $41=HEAP32[(($nerr25)>>2)];
      var $inc=((($41)+(1))|0);
      HEAP32[(($nerr25)>>2)]=$inc;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_rescue($p, $body, $resq, $els) {
  var label = 0;
  var $p_addr;
  var $body_addr;
  var $resq_addr;
  var $els_addr;
  $p_addr=$p;
  $body_addr=$body;
  $resq_addr=$resq;
  $els_addr=$els;
  var $0=$p_addr;
  var $1=$body_addr;
  var $2=$resq_addr;
  var $3=$els_addr;
  var $call=_list4_gen($0, 18, $1, $2, $3);
  return $call;
}
function _yywarn($p, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $s_addr;
      var $c;
      var $n;
      $p_addr=$p;
      $s_addr=$s;
      var $0=$p_addr;
      var $capture_errors=(($0+1140)|0);
      var $1=HEAP32[(($capture_errors)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 3; break; }
    case 3: 
      var $2=$p_addr;
      var $filename=(($2+28)|0);
      var $3=HEAP32[(($filename)>>2)];
      var $tobool1=(($3)|(0))!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=HEAP32[((_stderr)>>2)];
      var $5=$p_addr;
      var $filename3=(($5+28)|0);
      var $6=HEAP32[(($filename3)>>2)];
      var $7=$p_addr;
      var $lineno=(($7+32)|0);
      var $8=HEAP32[(($lineno)>>2)];
      var $9=$p_addr;
      var $column=(($9+36)|0);
      var $10=HEAP32[(($column)>>2)];
      var $11=$s_addr;
      var $call=_fprintf($4, ((106288)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$6,HEAP32[(((tempInt)+(4))>>2)]=$8,HEAP32[(((tempInt)+(8))>>2)]=$10,HEAP32[(((tempInt)+(12))>>2)]=$11,tempInt));
      label = 6; break;
    case 5: 
      var $12=HEAP32[((_stderr)>>2)];
      var $13=$p_addr;
      var $lineno4=(($13+32)|0);
      var $14=HEAP32[(($lineno4)>>2)];
      var $15=$p_addr;
      var $column5=(($15+36)|0);
      var $16=HEAP32[(($column5)>>2)];
      var $17=$s_addr;
      var $call6=_fprintf($12, ((106272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$14,HEAP32[(((tempInt)+(4))>>2)]=$16,HEAP32[(((tempInt)+(8))>>2)]=$17,tempInt));
      label = 6; break;
    case 6: 
      label = 10; break;
    case 7: 
      var $18=$p_addr;
      var $nwarn=(($18+1132)|0);
      var $19=HEAP32[(($nwarn)>>2)];
      var $cmp=(($19)>>>(0)) < 10;
      if ($cmp) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $20=$s_addr;
      var $call9=_strlen($20);
      $n=$call9;
      var $21=$p_addr;
      var $22=$n;
      var $add=((($22)+(1))|0);
      var $call10=_parser_palloc($21, $add);
      $c=$call10;
      var $23=$c;
      var $24=$s_addr;
      var $25=$n;
      var $add11=((($25)+(1))|0);
      assert($add11 % 1 === 0);_memcpy($23, $24, $add11);
      var $26=$c;
      var $27=$p_addr;
      var $nwarn12=(($27+1132)|0);
      var $28=HEAP32[(($nwarn12)>>2)];
      var $29=$p_addr;
      var $warn_buffer=(($29+1264)|0);
      var $arrayidx=(($warn_buffer+((($28)*(12))&-1))|0);
      var $message=(($arrayidx+8)|0);
      HEAP32[(($message)>>2)]=$26;
      var $30=$p_addr;
      var $lineno13=(($30+32)|0);
      var $31=HEAP32[(($lineno13)>>2)];
      var $32=$p_addr;
      var $nwarn14=(($32+1132)|0);
      var $33=HEAP32[(($nwarn14)>>2)];
      var $34=$p_addr;
      var $warn_buffer15=(($34+1264)|0);
      var $arrayidx16=(($warn_buffer15+((($33)*(12))&-1))|0);
      var $lineno17=(($arrayidx16)|0);
      HEAP32[(($lineno17)>>2)]=$31;
      var $35=$p_addr;
      var $column18=(($35+36)|0);
      var $36=HEAP32[(($column18)>>2)];
      var $37=$p_addr;
      var $nwarn19=(($37+1132)|0);
      var $38=HEAP32[(($nwarn19)>>2)];
      var $39=$p_addr;
      var $warn_buffer20=(($39+1264)|0);
      var $arrayidx21=(($warn_buffer20+((($38)*(12))&-1))|0);
      var $column22=(($arrayidx21+4)|0);
      HEAP32[(($column22)>>2)]=$36;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $40=$p_addr;
      var $nwarn25=(($40+1132)|0);
      var $41=HEAP32[(($nwarn25)>>2)];
      var $inc=((($41)+(1))|0);
      HEAP32[(($nwarn25)>>2)]=$inc;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_ensure($p, $a, $b) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$p_addr;
  var $2=$a_addr;
  var $3=$p_addr;
  var $4=$b_addr;
  var $call=_cons_gen($3, 0, $4);
  var $call1=_cons_gen($1, $2, $call);
  var $call2=_cons_gen($0, 19, $call1);
  return $call2;
}
function _new_nil($p) {
  var label = 0;
  var $p_addr;
  $p_addr=$p;
  var $0=$p_addr;
  var $call=_list1_gen($0, 86);
  return $call;
}
function _new_alias($p, $a, $b) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$p_addr;
  var $2=$a_addr;
  var $conv=(($2 << 16) >> 16);
  var $3=$conv;
  var $4=$b_addr;
  var $conv1=(($4 << 16) >> 16);
  var $5=$conv1;
  var $call=_cons_gen($1, $3, $5);
  var $call2=_cons_gen($0, 72, $call);
  return $call2;
}
function _new_if($p, $a, $b, $c) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  var $0=$p_addr;
  var $1=$a_addr;
  var $2=$b_addr;
  var $3=$c_addr;
  var $call=_list4_gen($0, 5, $1, $2, $3);
  return $call;
}
function _new_unless($p, $a, $b, $c) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  var $0=$p_addr;
  var $1=$a_addr;
  var $2=$c_addr;
  var $3=$b_addr;
  var $call=_list4_gen($0, 5, $1, $2, $3);
  return $call;
}
function _new_while($p, $a, $b) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$p_addr;
  var $2=$a_addr;
  var $3=$b_addr;
  var $call=_cons_gen($1, $2, $3);
  var $call1=_cons_gen($0, 9, $call);
  return $call1;
}
function _new_until($p, $a, $b) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$p_addr;
  var $2=$a_addr;
  var $3=$b_addr;
  var $call=_cons_gen($1, $2, $3);
  var $call1=_cons_gen($0, 10, $call);
  return $call1;
}
function _list3_gen($p, $a, $b, $c) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  var $0=$p_addr;
  var $1=$a_addr;
  var $2=$p_addr;
  var $3=$b_addr;
  var $4=$p_addr;
  var $5=$c_addr;
  var $call=_cons_gen($4, $5, 0);
  var $call1=_cons_gen($2, $3, $call);
  var $call2=_cons_gen($0, $1, $call1);
  return $call2;
}
function _new_postexe($p, $a) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  $p_addr=$p;
  $a_addr=$a;
  var $0=$p_addr;
  var $1=$a_addr;
  var $call=_cons_gen($0, 91, $1);
  return $call;
}
function _new_masgn($p, $a, $b) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$p_addr;
  var $2=$a_addr;
  var $3=$b_addr;
  var $call=_cons_gen($1, $2, $3);
  var $call1=_cons_gen($0, 23, $call);
  return $call1;
}
function _new_op_asgn($p, $a, $op, $b) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $op_addr;
  var $b_addr;
  $p_addr=$p;
  $a_addr=$a;
  $op_addr=$op;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$a_addr;
  var $2=$op_addr;
  var $conv=(($2 << 16) >> 16);
  var $3=$conv;
  var $4=$b_addr;
  var $call=_list4_gen($0, 28, $1, $3, $4);
  return $call;
}
function _new_call($p, $a, $b, $c) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  var $0=$p_addr;
  var $1=$a_addr;
  var $2=$b_addr;
  var $conv=(($2 << 16) >> 16);
  var $3=$conv;
  var $4=$c_addr;
  var $call=_list4_gen($0, 29, $1, $3, $4);
  return $call;
}
function _intern_gen2($p, $s, $len) {
  var label = 0;
  var $p_addr;
  var $s_addr;
  var $len_addr;
  $p_addr=$p;
  $s_addr=$s;
  $len_addr=$len;
  var $0=$p_addr;
  var $mrb=(($0)|0);
  var $1=HEAP32[(($mrb)>>2)];
  var $2=$s_addr;
  var $3=$len_addr;
  var $call=_mrb_intern2($1, $2, $3);
  return $call;
}
function _backref_error($p, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $n_addr;
      var $c;
      $p_addr=$p;
      $n_addr=$n;
      var $0=$n_addr;
      var $car=(($0)|0);
      var $1=HEAP32[(($car)>>2)];
      var $2=$1;
      $c=$2;
      var $3=$c;
      var $cmp=(($3)|(0))==45;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$p_addr;
      var $5=$n_addr;
      var $cdr=(($5+4)|0);
      var $6=HEAP32[(($cdr)>>2)];
      var $7=$6;
      _yyerror_i($4, ((106492)|0), $7);
      label = 8; break;
    case 4: 
      var $8=$c;
      var $cmp1=(($8)|(0))==46;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=$p_addr;
      var $10=$n_addr;
      var $cdr3=(($10+4)|0);
      var $11=HEAP32[(($cdr3)>>2)];
      var $12=$11;
      _yyerror_i($9, ((106468)|0), $12);
      label = 7; break;
    case 6: 
      var $13=$p_addr;
      var $mrb=(($13)|0);
      var $14=HEAP32[(($mrb)>>2)];
      var $15=$c;
      _mrb_bug($14, ((106304)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$15,tempInt));
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_asgn($p, $a, $b) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$p_addr;
  var $2=$a_addr;
  var $3=$b_addr;
  var $call=_cons_gen($1, $2, $3);
  var $call1=_cons_gen($0, 24, $call);
  return $call1;
}
function _new_array($p, $a) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  $p_addr=$p;
  $a_addr=$a;
  var $0=$p_addr;
  var $1=$a_addr;
  var $call=_cons_gen($0, 34, $1);
  return $call;
}
function _new_and($p, $a, $b) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$p_addr;
  var $2=$a_addr;
  var $3=$b_addr;
  var $call=_cons_gen($1, $2, $3);
  var $call1=_cons_gen($0, 20, $call);
  return $call1;
}
function _new_or($p, $a, $b) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$p_addr;
  var $2=$a_addr;
  var $3=$b_addr;
  var $call=_cons_gen($1, $2, $3);
  var $call1=_cons_gen($0, 21, $call);
  return $call1;
}
function _call_uni_op($p, $recv, $m) {
  var label = 0;
  var $p_addr;
  var $recv_addr;
  var $m_addr;
  $p_addr=$p;
  $recv_addr=$recv;
  $m_addr=$m;
  var $0=$p_addr;
  var $1=$recv_addr;
  var $2=$p_addr;
  var $3=$m_addr;
  var $call=_intern_gen($2, $3);
  var $call1=_new_call($0, $1, $call, 0);
  return $call1;
}
function _local_nest($p) {
  var label = 0;
  var $p_addr;
  $p_addr=$p;
  var $0=$p_addr;
  var $1=$p_addr;
  var $locals=(($1+76)|0);
  var $2=HEAP32[(($locals)>>2)];
  var $call=_cons_gen($0, 0, $2);
  var $3=$p_addr;
  var $locals1=(($3+76)|0);
  HEAP32[(($locals1)>>2)]=$call;
  return;
}
function _new_block($p, $a, $b) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$p_addr;
  var $locals=(($1+76)|0);
  var $2=HEAP32[(($locals)>>2)];
  var $car=(($2)|0);
  var $3=HEAP32[(($car)>>2)];
  var $4=$a_addr;
  var $5=$b_addr;
  var $call=_list4_gen($0, 4, $3, $4, $5);
  return $call;
}
function _new_fcall($p, $b, $c) {
  var label = 0;
  var $p_addr;
  var $b_addr;
  var $c_addr;
  $p_addr=$p;
  $b_addr=$b;
  $c_addr=$c;
  var $0=$p_addr;
  var $1=$p_addr;
  var $call=_new_self($1);
  var $2=$b_addr;
  var $conv=(($2 << 16) >> 16);
  var $3=$conv;
  var $4=$c_addr;
  var $call1=_list4_gen($0, 30, $call, $3, $4);
  return $call1;
}
function _new_bv($p, $id) {
  var label = 0;
  var $p_addr;
  var $id_addr;
  $p_addr=$p;
  $id_addr=$id;
  return;
}
function _args_with_block($p, $a, $b) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $a_addr;
      var $b_addr;
      $p_addr=$p;
      $a_addr=$a;
      $b_addr=$b;
      var $0=$b_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$a_addr;
      var $cdr=(($1+4)|0);
      var $2=HEAP32[(($cdr)>>2)];
      var $tobool1=(($2)|(0))!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$p_addr;
      _yyerror($3, ((97732)|0));
      label = 5; break;
    case 5: 
      var $4=$b_addr;
      var $5=$a_addr;
      var $cdr3=(($5+4)|0);
      HEAP32[(($cdr3)>>2)]=$4;
      label = 6; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_super($p, $c) {
  var label = 0;
  var $p_addr;
  var $c_addr;
  $p_addr=$p;
  $c_addr=$c;
  var $0=$p_addr;
  var $1=$c_addr;
  var $call=_cons_gen($0, 32, $1);
  return $call;
}
function _new_yield($p, $c) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $c_addr;
      $p_addr=$p;
      $c_addr=$c;
      var $0=$c_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$c_addr;
      var $cdr=(($1+4)|0);
      var $2=HEAP32[(($cdr)>>2)];
      var $tobool1=(($2)|(0))!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$p_addr;
      _yyerror($3, ((97732)|0));
      label = 5; break;
    case 5: 
      var $4=$p_addr;
      var $5=$c_addr;
      var $car=(($5)|0);
      var $6=HEAP32[(($car)>>2)];
      var $call=_cons_gen($4, 38, $6);
      $retval=$call;
      label = 7; break;
    case 6: 
      var $7=$p_addr;
      var $call4=_cons_gen($7, 38, 0);
      $retval=$call4;
      label = 7; break;
    case 7: 
      var $8=$retval;
      return $8;
    default: assert(0, "bad label: " + label);
  }
}
function _new_return($p, $c) {
  var label = 0;
  var $p_addr;
  var $c_addr;
  $p_addr=$p;
  $c_addr=$c;
  var $0=$p_addr;
  var $1=$c_addr;
  var $call=_cons_gen($0, 37, $1);
  return $call;
}
function _ret_args($p, $n) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $n_addr;
      $p_addr=$p;
      $n_addr=$n;
      var $0=$n_addr;
      var $cdr=(($0+4)|0);
      var $1=HEAP32[(($cdr)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$p_addr;
      _yyerror($2, ((97792)|0));
      label = 4; break;
    case 4: 
      var $3=$n_addr;
      var $car=(($3)|0);
      var $4=HEAP32[(($car)>>2)];
      var $cdr1=(($4+4)|0);
      var $5=HEAP32[(($cdr1)>>2)];
      var $tobool2=(($5)|(0))!=0;
      if ($tobool2) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $6=$n_addr;
      var $car4=(($6)|0);
      var $7=HEAP32[(($car4)>>2)];
      var $car5=(($7)|0);
      var $8=HEAP32[(($car5)>>2)];
      $retval=$8;
      label = 7; break;
    case 6: 
      var $9=$p_addr;
      var $10=$n_addr;
      var $car7=(($10)|0);
      var $11=HEAP32[(($car7)>>2)];
      var $call=_new_array($9, $11);
      $retval=$call;
      label = 7; break;
    case 7: 
      var $12=$retval;
      return $12;
    default: assert(0, "bad label: " + label);
  }
}
function _new_break($p, $c) {
  var label = 0;
  var $p_addr;
  var $c_addr;
  $p_addr=$p;
  $c_addr=$c;
  var $0=$p_addr;
  var $1=$c_addr;
  var $call=_cons_gen($0, 13, $1);
  return $call;
}
function _new_next($p, $c) {
  var label = 0;
  var $p_addr;
  var $c_addr;
  $p_addr=$p;
  $c_addr=$c;
  var $0=$p_addr;
  var $1=$c_addr;
  var $call=_cons_gen($0, 14, $1);
  return $call;
}
function _list2_gen($p, $a, $b) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$a_addr;
  var $2=$p_addr;
  var $3=$b_addr;
  var $call=_cons_gen($2, $3, 0);
  var $call1=_cons_gen($0, $1, $call);
  return $call1;
}
function _assignable($p, $lhs) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $lhs_addr;
      $p_addr=$p;
      $lhs_addr=$lhs;
      var $0=$lhs_addr;
      var $car=(($0)|0);
      var $1=HEAP32[(($car)>>2)];
      var $2=$1;
      var $cmp=(($2)|(0))==39;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$p_addr;
      var $4=$lhs_addr;
      var $cdr=(($4+4)|0);
      var $5=HEAP32[(($cdr)>>2)];
      var $6=$5;
      var $conv=(($6) & 65535);
      _local_add($3, $conv);
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_colon2($p, $b, $c) {
  var label = 0;
  var $p_addr;
  var $b_addr;
  var $c_addr;
  $p_addr=$p;
  $b_addr=$b;
  $c_addr=$c;
  var $0=$p_addr;
  var $1=$p_addr;
  var $2=$b_addr;
  var $3=$c_addr;
  var $conv=(($3 << 16) >> 16);
  var $4=$conv;
  var $call=_cons_gen($1, $2, $4);
  var $call1=_cons_gen($0, 77, $call);
  return $call1;
}
function _new_colon3($p, $c) {
  var label = 0;
  var $p_addr;
  var $c_addr;
  $p_addr=$p;
  $c_addr=$c;
  var $0=$p_addr;
  var $1=$c_addr;
  var $conv=(($1 << 16) >> 16);
  var $2=$conv;
  var $call=_cons_gen($0, 78, $2);
  return $call;
}
function _new_undef($p, $sym) {
  var label = 0;
  var $p_addr;
  var $sym_addr;
  $p_addr=$p;
  $sym_addr=$sym;
  var $0=$p_addr;
  var $1=$sym_addr;
  var $conv=(($1 << 16) >> 16);
  var $2=$conv;
  var $call=_list2_gen($0, 73, $2);
  return $call;
}
function _intern_gen_c($p, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $p_addr;
  var $c_addr=__stackBase__;
  $p_addr=$p;
  HEAP8[($c_addr)]=$c;
  var $0=$p_addr;
  var $mrb=(($0)|0);
  var $1=HEAP32[(($mrb)>>2)];
  var $call=_mrb_intern2($1, $c_addr, 1);
  STACKTOP = __stackBase__;
  return $call;
}
function _new_dot2($p, $a, $b) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$p_addr;
  var $2=$a_addr;
  var $3=$b_addr;
  var $call=_cons_gen($1, $2, $3);
  var $call1=_cons_gen($0, 80, $call);
  return $call1;
}
function _new_dot3($p, $a, $b) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$p_addr;
  var $2=$a_addr;
  var $3=$b_addr;
  var $call=_cons_gen($1, $2, $3);
  var $call1=_cons_gen($0, 81, $call);
  return $call1;
}
function _call_bin_op($p, $recv, $m, $arg1) {
  var label = 0;
  var $p_addr;
  var $recv_addr;
  var $m_addr;
  var $arg1_addr;
  $p_addr=$p;
  $recv_addr=$recv;
  $m_addr=$m;
  $arg1_addr=$arg1;
  var $0=$p_addr;
  var $1=$recv_addr;
  var $2=$p_addr;
  var $3=$m_addr;
  var $call=_intern_gen($2, $3);
  var $4=$p_addr;
  var $5=$p_addr;
  var $6=$arg1_addr;
  var $call1=_list1_gen($5, $6);
  var $call2=_list1_gen($4, $call1);
  var $call3=_new_call($0, $1, $call, $call2);
  return $call3;
}
function _new_hash($p, $a) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  $p_addr=$p;
  $a_addr=$a;
  var $0=$p_addr;
  var $1=$a_addr;
  var $call=_cons_gen($0, 36, $1);
  return $call;
}
function _new_block_arg($p, $a) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  $p_addr=$p;
  $a_addr=$a;
  var $0=$p_addr;
  var $1=$a_addr;
  var $call=_cons_gen($0, 69, $1);
  return $call;
}
function _new_splat($p, $a) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  $p_addr=$p;
  $a_addr=$a;
  var $0=$p_addr;
  var $1=$a_addr;
  var $call=_cons_gen($0, 66, $1);
  return $call;
}
function _call_with_block($p, $a, $b) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $a_addr;
      var $b_addr;
      var $n;
      $p_addr=$p;
      $a_addr=$a;
      $b_addr=$b;
      var $0=$a_addr;
      var $car=(($0)|0);
      var $1=HEAP32[(($car)>>2)];
      var $cmp=(($1)|(0))==32;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$a_addr;
      var $car1=(($2)|0);
      var $3=HEAP32[(($car1)>>2)];
      var $cmp2=(($3)|(0))==33;
      if ($cmp2) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $4=$a_addr;
      var $cdr=(($4+4)|0);
      var $5=HEAP32[(($cdr)>>2)];
      var $tobool=(($5)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $6=$p_addr;
      var $7=$b_addr;
      var $call=_cons_gen($6, 0, $7);
      var $8=$a_addr;
      var $cdr4=(($8+4)|0);
      HEAP32[(($cdr4)>>2)]=$call;
      label = 7; break;
    case 6: 
      var $9=$p_addr;
      var $10=$a_addr;
      var $cdr5=(($10+4)|0);
      var $11=HEAP32[(($cdr5)>>2)];
      var $12=$b_addr;
      _args_with_block($9, $11, $12);
      label = 7; break;
    case 7: 
      label = 12; break;
    case 8: 
      var $13=$a_addr;
      var $cdr7=(($13+4)|0);
      var $14=HEAP32[(($cdr7)>>2)];
      var $cdr8=(($14+4)|0);
      var $15=HEAP32[(($cdr8)>>2)];
      var $cdr9=(($15+4)|0);
      var $16=HEAP32[(($cdr9)>>2)];
      $n=$16;
      var $17=$n;
      var $car10=(($17)|0);
      var $18=HEAP32[(($car10)>>2)];
      var $tobool11=(($18)|(0))!=0;
      if ($tobool11) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $19=$p_addr;
      var $20=$b_addr;
      var $call13=_cons_gen($19, 0, $20);
      var $21=$n;
      var $car14=(($21)|0);
      HEAP32[(($car14)>>2)]=$call13;
      label = 11; break;
    case 10: 
      var $22=$p_addr;
      var $23=$n;
      var $car16=(($23)|0);
      var $24=HEAP32[(($car16)>>2)];
      var $25=$b_addr;
      _args_with_block($22, $24, $25);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_lambda($p, $a, $b) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$p_addr;
  var $locals=(($1+76)|0);
  var $2=HEAP32[(($locals)>>2)];
  var $car=(($2)|0);
  var $3=HEAP32[(($car)>>2)];
  var $4=$a_addr;
  var $5=$b_addr;
  var $call=_list4_gen($0, 53, $3, $4, $5);
  return $call;
}
function _new_case($p, $a, $b) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $a_addr;
      var $b_addr;
      var $n;
      var $n2;
      $p_addr=$p;
      $a_addr=$a;
      $b_addr=$b;
      var $0=$p_addr;
      var $1=$a_addr;
      var $call=_list2_gen($0, 6, $1);
      $n=$call;
      var $2=$n;
      $n2=$2;
      label = 3; break;
    case 3: 
      var $3=$n2;
      var $cdr=(($3+4)|0);
      var $4=HEAP32[(($cdr)>>2)];
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$n2;
      var $cdr1=(($5+4)|0);
      var $6=HEAP32[(($cdr1)>>2)];
      $n2=$6;
      label = 3; break;
    case 5: 
      var $7=$b_addr;
      var $8=$n2;
      var $cdr2=(($8+4)|0);
      HEAP32[(($cdr2)>>2)]=$7;
      var $9=$n;
      return $9;
    default: assert(0, "bad label: " + label);
  }
}
function _new_for($p, $v, $o, $b) {
  var label = 0;
  var $p_addr;
  var $v_addr;
  var $o_addr;
  var $b_addr;
  $p_addr=$p;
  $v_addr=$v;
  $o_addr=$o;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$v_addr;
  var $2=$o_addr;
  var $3=$b_addr;
  var $call=_list4_gen($0, 12, $1, $2, $3);
  return $call;
}
function _new_class($p, $c, $s, $b) {
  var label = 0;
  var $p_addr;
  var $c_addr;
  var $s_addr;
  var $b_addr;
  $p_addr=$p;
  $c_addr=$c;
  $s_addr=$s;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$c_addr;
  var $2=$s_addr;
  var $3=$p_addr;
  var $4=$p_addr;
  var $locals=(($4+76)|0);
  var $5=HEAP32[(($locals)>>2)];
  var $car=(($5)|0);
  var $6=HEAP32[(($car)>>2)];
  var $7=$b_addr;
  var $call=_cons_gen($3, $6, $7);
  var $call1=_list4_gen($0, 74, $1, $2, $call);
  return $call1;
}
function _new_sclass($p, $o, $b) {
  var label = 0;
  var $p_addr;
  var $o_addr;
  var $b_addr;
  $p_addr=$p;
  $o_addr=$o;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$o_addr;
  var $2=$p_addr;
  var $3=$p_addr;
  var $locals=(($3+76)|0);
  var $4=HEAP32[(($locals)>>2)];
  var $car=(($4)|0);
  var $5=HEAP32[(($car)>>2)];
  var $6=$b_addr;
  var $call=_cons_gen($2, $5, $6);
  var $call1=_list3_gen($0, 76, $1, $call);
  return $call1;
}
function _new_module($p, $m, $b) {
  var label = 0;
  var $p_addr;
  var $m_addr;
  var $b_addr;
  $p_addr=$p;
  $m_addr=$m;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$m_addr;
  var $2=$p_addr;
  var $3=$p_addr;
  var $locals=(($3+76)|0);
  var $4=HEAP32[(($locals)>>2)];
  var $car=(($4)|0);
  var $5=HEAP32[(($car)>>2)];
  var $6=$b_addr;
  var $call=_cons_gen($2, $5, $6);
  var $call1=_list3_gen($0, 75, $1, $call);
  return $call1;
}
function _new_def($p, $m, $a, $b) {
  var label = 0;
  var $p_addr;
  var $m_addr;
  var $a_addr;
  var $b_addr;
  $p_addr=$p;
  $m_addr=$m;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$m_addr;
  var $conv=(($1 << 16) >> 16);
  var $2=$conv;
  var $3=$p_addr;
  var $locals=(($3+76)|0);
  var $4=HEAP32[(($locals)>>2)];
  var $car=(($4)|0);
  var $5=HEAP32[(($car)>>2)];
  var $6=$a_addr;
  var $7=$b_addr;
  var $call=_list5_gen($0, 70, $2, $5, $6, $7);
  return $call;
}
function _new_sdef($p, $o, $m, $a, $b) {
  var label = 0;
  var $p_addr;
  var $o_addr;
  var $m_addr;
  var $a_addr;
  var $b_addr;
  $p_addr=$p;
  $o_addr=$o;
  $m_addr=$m;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$o_addr;
  var $2=$m_addr;
  var $conv=(($2 << 16) >> 16);
  var $3=$conv;
  var $4=$p_addr;
  var $locals=(($4+76)|0);
  var $5=HEAP32[(($locals)>>2)];
  var $car=(($5)|0);
  var $6=HEAP32[(($car)>>2)];
  var $7=$a_addr;
  var $8=$b_addr;
  var $call=_list6_gen($0, 71, $1, $3, $6, $7, $8);
  return $call;
}
function _new_redo($p) {
  var label = 0;
  var $p_addr;
  $p_addr=$p;
  var $0=$p_addr;
  var $call=_list1_gen($0, 15);
  return $call;
}
function _new_retry($p) {
  var label = 0;
  var $p_addr;
  $p_addr=$p;
  var $0=$p_addr;
  var $call=_list1_gen($0, 16);
  return $call;
}
function _new_arg($p, $sym) {
  var label = 0;
  var $p_addr;
  var $sym_addr;
  $p_addr=$p;
  $sym_addr=$sym;
  var $0=$p_addr;
  var $1=$sym_addr;
  var $conv=(($1 << 16) >> 16);
  var $2=$conv;
  var $call=_cons_gen($0, 63, $2);
  return $call;
}
function _new_args($p, $m, $opt, $rest, $m2, $blk) {
  var label = 0;
  var $p_addr;
  var $m_addr;
  var $opt_addr;
  var $rest_addr;
  var $m2_addr;
  var $blk_addr;
  var $n;
  $p_addr=$p;
  $m_addr=$m;
  $opt_addr=$opt;
  $rest_addr=$rest;
  $m2_addr=$m2;
  $blk_addr=$blk;
  var $0=$p_addr;
  var $1=$m2_addr;
  var $2=$blk_addr;
  var $conv=(($2 << 16) >> 16);
  var $3=$conv;
  var $call=_cons_gen($0, $1, $3);
  $n=$call;
  var $4=$p_addr;
  var $5=$rest_addr;
  var $conv1=(($5 << 16) >> 16);
  var $6=$conv1;
  var $7=$n;
  var $call2=_cons_gen($4, $6, $7);
  $n=$call2;
  var $8=$p_addr;
  var $9=$opt_addr;
  var $10=$n;
  var $call3=_cons_gen($8, $9, $10);
  $n=$call3;
  var $11=$p_addr;
  var $12=$m_addr;
  var $13=$n;
  var $call4=_cons_gen($11, $12, $13);
  return $call4;
}
function _local_add_f($p, $sym) {
  var label = 0;
  var $p_addr;
  var $sym_addr;
  $p_addr=$p;
  $sym_addr=$sym;
  var $0=$p_addr;
  var $1=$p_addr;
  var $locals=(($1+76)|0);
  var $2=HEAP32[(($locals)>>2)];
  var $car=(($2)|0);
  var $3=HEAP32[(($car)>>2)];
  var $4=$p_addr;
  var $5=$sym_addr;
  var $conv=(($5 << 16) >> 16);
  var $6=$conv;
  var $call=_list1_gen($4, $6);
  var $call1=_append_gen($0, $3, $call);
  var $7=$p_addr;
  var $locals2=(($7+76)|0);
  var $8=HEAP32[(($locals2)>>2)];
  var $car3=(($8)|0);
  HEAP32[(($car3)>>2)]=$call1;
  return;
}
function _new_zsuper($p) {
  var label = 0;
  var $p_addr;
  $p_addr=$p;
  var $0=$p_addr;
  var $call=_list1_gen($0, 33);
  return $call;
}
function _new_dstr($p, $a) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  $p_addr=$p;
  $a_addr=$a;
  var $0=$p_addr;
  var $1=$a_addr;
  var $call=_cons_gen($0, 56, $1);
  return $call;
}
function _new_literal_delim($p) {
  var label = 0;
  var $p_addr;
  $p_addr=$p;
  var $0=$p_addr;
  var $call=_cons_gen($0, 100, 0);
  return $call;
}
function _new_dxstr($p, $a) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  $p_addr=$p;
  $a_addr=$a;
  var $0=$p_addr;
  var $1=$a_addr;
  var $call=_cons_gen($0, 58, $1);
  return $call;
}
function _new_dregx($p, $a, $b) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$p_addr;
  var $1=$p_addr;
  var $2=$a_addr;
  var $3=$b_addr;
  var $call=_cons_gen($1, $2, $3);
  var $call1=_cons_gen($0, 60, $call);
  return $call1;
}
function _new_str($p, $s, $len) {
  var label = 0;
  var $p_addr;
  var $s_addr;
  var $len_addr;
  $p_addr=$p;
  $s_addr=$s;
  $len_addr=$len;
  var $0=$p_addr;
  var $1=$p_addr;
  var $2=$p_addr;
  var $3=$s_addr;
  var $4=$len_addr;
  var $call=_parser_strndup($2, $3, $4);
  var $5=$call;
  var $6=$len_addr;
  var $7=$6;
  var $call1=_cons_gen($1, $5, $7);
  var $call2=_cons_gen($0, 55, $call1);
  return $call2;
}
function _heredoc_end($p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      $p_addr=$p;
      var $0=$p_addr;
      var $parsing_heredoc=(($0+1116)|0);
      var $1=HEAP32[(($parsing_heredoc)>>2)];
      var $cdr=(($1+4)|0);
      var $2=HEAP32[(($cdr)>>2)];
      var $3=$p_addr;
      var $parsing_heredoc1=(($3+1116)|0);
      HEAP32[(($parsing_heredoc1)>>2)]=$2;
      var $4=$p_addr;
      var $parsing_heredoc2=(($4+1116)|0);
      var $5=HEAP32[(($parsing_heredoc2)>>2)];
      var $cmp=(($5)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$p_addr;
      var $lstate=(($6+40)|0);
      HEAP32[(($lstate)>>2)]=0;
      var $7=$p_addr;
      var $cmd_start=(($7+72)|0);
      HEAP32[(($cmd_start)>>2)]=1;
      var $8=$p_addr;
      _end_strterm($8);
      var $9=$p_addr;
      var $10=$9;
      var $bf_field_offs=(($10+1120)|0);
      var $11=HEAP8[($bf_field_offs)];
      var $12=$11 & -3;
      var $13=$12 | 2;
      HEAP8[($bf_field_offs)]=$13;
      label = 5; break;
    case 4: 
      var $14=$p_addr;
      var $call=_parsing_heredoc_inf($14);
      var $type=(($call+4)|0);
      var $15=HEAP32[(($type)>>2)];
      var $16=$15;
      var $17=$p_addr;
      var $lex_strterm=(($17+44)|0);
      var $18=HEAP32[(($lex_strterm)>>2)];
      var $car=(($18)|0);
      HEAP32[(($car)>>2)]=$16;
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_words($p, $a) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  $p_addr=$p;
  $a_addr=$a;
  var $0=$p_addr;
  var $1=$a_addr;
  var $call=_cons_gen($0, 101, $1);
  return $call;
}
function _new_sym($p, $sym) {
  var label = 0;
  var $p_addr;
  var $sym_addr;
  $p_addr=$p;
  $sym_addr=$sym;
  var $0=$p_addr;
  var $1=$sym_addr;
  var $conv=(($1 << 16) >> 16);
  var $2=$conv;
  var $call=_cons_gen($0, 54, $2);
  return $call;
}
function _new_dsym($p, $a) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  $p_addr=$p;
  $a_addr=$a;
  var $0=$p_addr;
  var $1=$p_addr;
  var $2=$a_addr;
  var $call=_new_dstr($1, $2);
  var $call1=_cons_gen($0, 97, $call);
  return $call1;
}
function _new_strsym($p, $str) {
  var label = 0;
  var $p_addr;
  var $str_addr;
  var $s;
  var $len;
  $p_addr=$p;
  $str_addr=$str;
  var $0=$str_addr;
  var $cdr=(($0+4)|0);
  var $1=HEAP32[(($cdr)>>2)];
  var $car=(($1)|0);
  var $2=HEAP32[(($car)>>2)];
  var $3=$2;
  $s=$3;
  var $4=$str_addr;
  var $cdr1=(($4+4)|0);
  var $5=HEAP32[(($cdr1)>>2)];
  var $cdr2=(($5+4)|0);
  var $6=HEAP32[(($cdr2)>>2)];
  var $7=$6;
  $len=$7;
  var $8=$p_addr;
  var $mrb=(($8)|0);
  var $9=HEAP32[(($mrb)>>2)];
  var $10=$s;
  var $11=$len;
  var $call=_mrb_intern2($9, $10, $11);
  return $call;
}
function _new_symbols($p, $a) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  $p_addr=$p;
  $a_addr=$a;
  var $0=$p_addr;
  var $1=$a_addr;
  var $call=_cons_gen($0, 102, $1);
  return $call;
}
function _negate_lit($p, $n) {
  var label = 0;
  var $p_addr;
  var $n_addr;
  $p_addr=$p;
  $n_addr=$n;
  var $0=$p_addr;
  var $1=$n_addr;
  var $call=_cons_gen($0, 52, $1);
  return $call;
}
function _new_lvar($p, $sym) {
  var label = 0;
  var $p_addr;
  var $sym_addr;
  $p_addr=$p;
  $sym_addr=$sym;
  var $0=$p_addr;
  var $1=$sym_addr;
  var $conv=(($1 << 16) >> 16);
  var $2=$conv;
  var $call=_cons_gen($0, 39, $2);
  return $call;
}
function _new_ivar($p, $sym) {
  var label = 0;
  var $p_addr;
  var $sym_addr;
  $p_addr=$p;
  $sym_addr=$sym;
  var $0=$p_addr;
  var $1=$sym_addr;
  var $conv=(($1 << 16) >> 16);
  var $2=$conv;
  var $call=_cons_gen($0, 42, $2);
  return $call;
}
function _new_gvar($p, $sym) {
  var label = 0;
  var $p_addr;
  var $sym_addr;
  $p_addr=$p;
  $sym_addr=$sym;
  var $0=$p_addr;
  var $1=$sym_addr;
  var $conv=(($1 << 16) >> 16);
  var $2=$conv;
  var $call=_cons_gen($0, 41, $2);
  return $call;
}
function _new_cvar($p, $sym) {
  var label = 0;
  var $p_addr;
  var $sym_addr;
  $p_addr=$p;
  $sym_addr=$sym;
  var $0=$p_addr;
  var $1=$sym_addr;
  var $conv=(($1 << 16) >> 16);
  var $2=$conv;
  var $call=_cons_gen($0, 44, $2);
  return $call;
}
function _new_const($p, $sym) {
  var label = 0;
  var $p_addr;
  var $sym_addr;
  $p_addr=$p;
  $sym_addr=$sym;
  var $0=$p_addr;
  var $1=$sym_addr;
  var $conv=(($1 << 16) >> 16);
  var $2=$conv;
  var $call=_cons_gen($0, 43, $2);
  return $call;
}
function _var_reference($p, $lhs) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $lhs_addr;
      var $n;
      $p_addr=$p;
      $lhs_addr=$lhs;
      var $0=$lhs_addr;
      var $car=(($0)|0);
      var $1=HEAP32[(($car)>>2)];
      var $2=$1;
      var $cmp=(($2)|(0))==39;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $3=$p_addr;
      var $4=$lhs_addr;
      var $cdr=(($4+4)|0);
      var $5=HEAP32[(($cdr)>>2)];
      var $6=$5;
      var $conv=(($6) & 65535);
      var $call=_local_var_p($3, $conv);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $7=$p_addr;
      var $8=$lhs_addr;
      var $cdr2=(($8+4)|0);
      var $9=HEAP32[(($cdr2)>>2)];
      var $10=$9;
      var $conv3=(($10) & 65535);
      var $call4=_new_fcall($7, $conv3, 0);
      $n=$call4;
      var $11=$p_addr;
      var $12=$lhs_addr;
      _cons_free_gen($11, $12);
      var $13=$n;
      $retval=$13;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $14=$lhs_addr;
      $retval=$14;
      label = 7; break;
    case 7: 
      var $15=$retval;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function _new_self($p) {
  var label = 0;
  var $p_addr;
  $p_addr=$p;
  var $0=$p_addr;
  var $call=_list1_gen($0, 85);
  return $call;
}
function _new_true($p) {
  var label = 0;
  var $p_addr;
  $p_addr=$p;
  var $0=$p_addr;
  var $call=_list1_gen($0, 87);
  return $call;
}
function _new_false($p) {
  var label = 0;
  var $p_addr;
  $p_addr=$p;
  var $0=$p_addr;
  var $call=_list1_gen($0, 88);
  return $call;
}
function _new_int($p, $s, $base) {
  var label = 0;
  var $p_addr;
  var $s_addr;
  var $base_addr;
  $p_addr=$p;
  $s_addr=$s;
  $base_addr=$base;
  var $0=$p_addr;
  var $1=$p_addr;
  var $2=$s_addr;
  var $call=_parser_strdup($1, $2);
  var $3=$call;
  var $4=$base_addr;
  var $5=$4;
  var $call1=_list3_gen($0, 50, $3, $5);
  return $call1;
}
function _yy_stack_print($bottom, $top) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $bottom_addr;
      var $top_addr;
      $bottom_addr=$bottom;
      $top_addr=$top;
      var $0=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($0, ((97840)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 3; break;
    case 3: 
      var $1=$bottom_addr;
      var $2=$top_addr;
      var $cmp=(($1)>>>(0)) <= (($2)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $3=HEAP32[((_stderr)>>2)];
      var $4=$bottom_addr;
      var $5=HEAP16[(($4)>>1)];
      var $conv=(($5 << 16) >> 16);
      var $call1=_fprintf($3, ((97828)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$conv,tempInt));
      label = 5; break;
    case 5: 
      var $6=$bottom_addr;
      var $incdec_ptr=(($6+2)|0);
      $bottom_addr=$incdec_ptr;
      label = 3; break;
    case 6: 
      var $7=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($7, ((95764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _yysyntax_error($yyresult, $yystate, $yychar) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $yyresult_addr;
      var $yystate_addr;
      var $yychar_addr;
      var $yyn;
      var $yytype;
      var $yysize0;
      var $yysize;
      var $yysize1;
      var $yysize_overflow;
      var $yyarg=__stackBase__;
      var $yyx;
      var $yyfmt;
      var $yyf;
      var $yyformat=(__stackBase__)+(20);
      var $yyprefix;
      var $yyxbegin;
      var $yychecklim;
      var $yyxend;
      var $yycount;
      var $yyp;
      var $yyi;
      $yyresult_addr=$yyresult;
      $yystate_addr=$yystate;
      $yychar_addr=$yychar;
      var $0=$yystate_addr;
      var $arrayidx=((32904+($0<<1))|0);
      var $1=HEAP16[(($arrayidx)>>1)];
      var $conv=(($1 << 16) >> 16);
      $yyn=$conv;
      var $2=$yyn;
      var $cmp=-745 < (($2)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$yyn;
      var $cmp2=(($3)|(0)) <= 10895;
      if ($cmp2) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $retval=0;
      label = 36; break;
    case 5: 
      var $4=$yychar_addr;
      var $cmp4=(($4)>>>(0)) <= 379;
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $5=$yychar_addr;
      var $arrayidx6=((4+$5)|0);
      var $6=HEAP8[($arrayidx6)];
      var $conv7=(($6)&(255));
      var $cond = $conv7;label = 8; break;
    case 7: 
      var $cond = 2;label = 8; break;
    case 8: 
      var $cond;
      $yytype=$cond;
      var $7=$yytype;
      var $arrayidx8=((384+($7<<2))|0);
      var $8=HEAP32[(($arrayidx8)>>2)];
      var $call=_yytnamerr(0, $8);
      $yysize0=$call;
      var $9=$yysize0;
      $yysize=$9;
      $yysize_overflow=0;
      $yyprefix=((23436)|0);
      var $10=$yyn;
      var $cmp9=(($10)|(0)) < 0;
      if ($cmp9) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $11=$yyn;
      var $sub=(((-$11))|0);
      var $cond14 = $sub;label = 11; break;
    case 10: 
      var $cond14 = 0;label = 11; break;
    case 11: 
      var $cond14;
      $yyxbegin=$cond14;
      var $12=$yyn;
      var $sub15=(((10895)-($12))|0);
      var $add=((($sub15)+(1))|0);
      $yychecklim=$add;
      var $13=$yychecklim;
      var $cmp16=(($13)|(0)) < 151;
      if ($cmp16) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $14=$yychecklim;
      var $cond21 = $14;label = 14; break;
    case 13: 
      var $cond21 = 151;label = 14; break;
    case 14: 
      var $cond21;
      $yyxend=$cond21;
      $yycount=1;
      var $15=$yytype;
      var $arrayidx22=((384+($15<<2))|0);
      var $16=HEAP32[(($arrayidx22)>>2)];
      var $arrayidx23=(($yyarg)|0);
      HEAP32[(($arrayidx23)>>2)]=$16;
      var $arraydecay=(($yyformat)|0);
      var $call24=_yystpcpy($arraydecay, ((23400)|0));
      $yyfmt=$call24;
      var $17=$yyxbegin;
      $yyx=$17;
      label = 15; break;
    case 15: 
      var $18=$yyx;
      var $19=$yyxend;
      var $cmp25=(($18)|(0)) < (($19)|(0));
      if ($cmp25) { label = 16; break; } else { label = 23; break; }
    case 16: 
      var $20=$yyx;
      var $21=$yyn;
      var $add27=((($20)+($21))|0);
      var $arrayidx28=((37040+($add27<<1))|0);
      var $22=HEAP16[(($arrayidx28)>>1)];
      var $conv29=(($22 << 16) >> 16);
      var $23=$yyx;
      var $cmp30=(($conv29)|(0))==(($23)|(0));
      if ($cmp30) { label = 17; break; } else { label = 21; break; }
    case 17: 
      var $24=$yyx;
      var $cmp33=(($24)|(0))!=1;
      if ($cmp33) { label = 18; break; } else { label = 21; break; }
    case 18: 
      var $25=$yycount;
      var $cmp36=(($25)|(0))==5;
      if ($cmp36) { label = 19; break; } else { label = 20; break; }
    case 19: 
      $yycount=1;
      var $26=$yysize0;
      $yysize=$26;
      var $arrayidx39=(($yyformat+27)|0);
      HEAP8[($arrayidx39)]=0;
      label = 23; break;
    case 20: 
      var $27=$yyx;
      var $arrayidx40=((384+($27<<2))|0);
      var $28=HEAP32[(($arrayidx40)>>2)];
      var $29=$yycount;
      var $inc=((($29)+(1))|0);
      $yycount=$inc;
      var $arrayidx41=(($yyarg+($29<<2))|0);
      HEAP32[(($arrayidx41)>>2)]=$28;
      var $30=$yysize;
      var $31=$yyx;
      var $arrayidx42=((384+($31<<2))|0);
      var $32=HEAP32[(($arrayidx42)>>2)];
      var $call43=_yytnamerr(0, $32);
      var $add44=((($30)+($call43))|0);
      $yysize1=$add44;
      var $33=$yysize1;
      var $34=$yysize;
      var $cmp45=(($33)>>>(0)) < (($34)>>>(0));
      var $conv46=(($cmp45)&(1));
      var $35=$yysize_overflow;
      var $or=$35 | $conv46;
      $yysize_overflow=$or;
      var $36=$yysize1;
      $yysize=$36;
      var $37=$yyfmt;
      var $38=$yyprefix;
      var $call47=_yystpcpy($37, $38);
      $yyfmt=$call47;
      $yyprefix=((23428)|0);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $39=$yyx;
      var $inc49=((($39)+(1))|0);
      $yyx=$inc49;
      label = 15; break;
    case 23: 
      var $arraydecay50=(($yyformat)|0);
      $yyf=$arraydecay50;
      var $40=$yysize;
      var $41=$yyf;
      var $call51=_yystrlen($41);
      var $add52=((($40)+($call51))|0);
      $yysize1=$add52;
      var $42=$yysize1;
      var $43=$yysize;
      var $cmp53=(($42)>>>(0)) < (($43)>>>(0));
      var $conv54=(($cmp53)&(1));
      var $44=$yysize_overflow;
      var $or55=$44 | $conv54;
      $yysize_overflow=$or55;
      var $45=$yysize1;
      $yysize=$45;
      var $46=$yysize_overflow;
      var $tobool=(($46)|(0))!=0;
      if ($tobool) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $retval=-1;
      label = 36; break;
    case 25: 
      var $47=$yyresult_addr;
      var $tobool58=(($47)|(0))!=0;
      if ($tobool58) { label = 26; break; } else { label = 35; break; }
    case 26: 
      var $48=$yyresult_addr;
      $yyp=$48;
      $yyi=0;
      label = 27; break;
    case 27: 
      var $49=$yyf;
      var $50=HEAP8[($49)];
      var $51=$yyp;
      HEAP8[($51)]=$50;
      var $conv60=(($50 << 24) >> 24);
      var $cmp61=(($conv60)|(0))!=0;
      if ($cmp61) { label = 28; break; } else { label = 34; break; }
    case 28: 
      var $52=$yyp;
      var $53=HEAP8[($52)];
      var $conv63=(($53 << 24) >> 24);
      var $cmp64=(($conv63)|(0))==37;
      if ($cmp64) { label = 29; break; } else { label = 32; break; }
    case 29: 
      var $54=$yyf;
      var $arrayidx67=(($54+1)|0);
      var $55=HEAP8[($arrayidx67)];
      var $conv68=(($55 << 24) >> 24);
      var $cmp69=(($conv68)|(0))==115;
      if ($cmp69) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $56=$yyi;
      var $57=$yycount;
      var $cmp72=(($56)|(0)) < (($57)|(0));
      if ($cmp72) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $58=$yyp;
      var $59=$yyi;
      var $inc75=((($59)+(1))|0);
      $yyi=$inc75;
      var $arrayidx76=(($yyarg+($59<<2))|0);
      var $60=HEAP32[(($arrayidx76)>>2)];
      var $call77=_yytnamerr($58, $60);
      var $61=$yyp;
      var $add_ptr=(($61+$call77)|0);
      $yyp=$add_ptr;
      var $62=$yyf;
      var $add_ptr78=(($62+2)|0);
      $yyf=$add_ptr78;
      label = 33; break;
    case 32: 
      var $63=$yyp;
      var $incdec_ptr=(($63+1)|0);
      $yyp=$incdec_ptr;
      var $64=$yyf;
      var $incdec_ptr80=(($64+1)|0);
      $yyf=$incdec_ptr80;
      label = 33; break;
    case 33: 
      label = 27; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $65=$yysize;
      $retval=$65;
      label = 36; break;
    case 36: 
      var $66=$retval;
      STACKTOP = __stackBase__;
      return $66;
    default: assert(0, "bad label: " + label);
  }
}
function _yydestruct($yymsg, $yytype, $yyvaluep, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $yymsg_addr;
      var $yytype_addr;
      var $yyvaluep_addr;
      var $p_addr;
      $yymsg_addr=$yymsg;
      $yytype_addr=$yytype;
      $yyvaluep_addr=$yyvaluep;
      $p_addr=$p;
      var $0=$yyvaluep_addr;
      var $1=$p_addr;
      var $2=$yymsg_addr;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $yymsg_addr=((106260)|0);
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $3=HEAP32[((37036)>>2)];
      var $tobool1=(($3)|(0))!=0;
      if ($tobool1) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $4=HEAP32[((_stderr)>>2)];
      var $5=$yymsg_addr;
      var $call=_fprintf($4, ((98976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$5,tempInt));
      var $6=HEAP32[((_stderr)>>2)];
      var $7=$yytype_addr;
      var $8=$yyvaluep_addr;
      var $9=$p_addr;
      _yy_symbol_print($6, $7, $8, $9);
      var $10=HEAP32[((_stderr)>>2)];
      var $call3=_fprintf($10, ((95764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $11=$yytype_addr;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_parser_parse($p, $c) {
  var label = 0;
  label = 2; 
  var mySetjmpIds = {};
  var setjmpTable = {"2": function(value) { label = 10; $call = value },dummy: 0};
  while(1) try { switch(label) {
    case 2: 
      var $p_addr;
      var $c_addr;
      $p_addr=$p;
      $c_addr=$c;
      var $0=$p_addr;
      var $jmp=(($0+1384)|0);
      var $arraydecay=(($jmp)|0);
      var $call=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($arraydecay)>>2)]=tempInt, 0);
      label = 10; break;
    case 10: 
      var $cmp=(($call)|(0))!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$p_addr;
      _yyerror($1, ((96716)|0));
      var $2=$p_addr;
      var $nerr=(($2+1128)|0);
      var $3=HEAP32[(($nerr)>>2)];
      var $inc=((($3)+(1))|0);
      HEAP32[(($nerr)>>2)]=$inc;
      var $4=$p_addr;
      var $tree=(($4+1136)|0);
      HEAP32[(($tree)>>2)]=0;
      label = 9; break;
    case 4: 
      var $5=$p_addr;
      var $cmd_start=(($5+72)|0);
      HEAP32[(($cmd_start)>>2)]=1;
      var $6=$p_addr;
      var $in_single=(($6+68)|0);
      HEAP32[(($in_single)>>2)]=0;
      var $7=$p_addr;
      var $in_def=(($7+64)|0);
      HEAP32[(($in_def)>>2)]=0;
      var $8=$p_addr;
      var $nwarn=(($8+1132)|0);
      HEAP32[(($nwarn)>>2)]=0;
      var $9=$p_addr;
      var $nerr1=(($9+1128)|0);
      HEAP32[(($nerr1)>>2)]=0;
      var $10=$p_addr;
      var $lex_strterm=(($10+44)|0);
      HEAP32[(($lex_strterm)>>2)]=0;
      var $11=$p_addr;
      var $12=$c_addr;
      _parser_init_cxt($11, $12);
      var $13=$p_addr;
      var $call2=_yyparse($13);
      var $14=$p_addr;
      var $tree3=(($14+1136)|0);
      var $15=HEAP32[(($tree3)>>2)];
      var $tobool=(($15)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $16=$p_addr;
      var $call5=_new_nil($16);
      var $17=$p_addr;
      var $tree6=(($17+1136)|0);
      HEAP32[(($tree6)>>2)]=$call5;
      label = 6; break;
    case 6: 
      var $18=$p_addr;
      var $19=$c_addr;
      _parser_update_cxt($18, $19);
      var $20=$c_addr;
      var $tobool8=(($20)|(0))!=0;
      if ($tobool8) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $21=$c_addr;
      var $22=$21;
      var $bf_field_offs=(($22+24)|0);
      var $23=HEAP8[($bf_field_offs)];
      var $24=(($23)&(255)) >>> 1;
      var $bf_clear=$24 & 1;
      var $conv=(($bf_clear)&(255));
      var $tobool9=(($conv)|(0))!=0;
      if ($tobool9) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $25=$p_addr;
      var $mrb=(($25)|0);
      var $26=HEAP32[(($mrb)>>2)];
      var $27=$p_addr;
      var $tree11=(($27+1136)|0);
      var $28=HEAP32[(($tree11)>>2)];
      _parser_dump($26, $28, 0);
      label = 9; break;
    case 9: 
      return;
    default: assert(0, "bad label: " + label);
  }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function _parser_init_cxt($p, $cxt) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $cxt_addr;
      var $i;
      $p_addr=$p;
      $cxt_addr=$cxt;
      var $0=$cxt_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 16; break;
    case 4: 
      var $1=$cxt_addr;
      var $lineno=(($1+12)|0);
      var $2=HEAP16[(($lineno)>>1)];
      var $tobool1=(($2 << 16) >> 16)!=0;
      if ($tobool1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$cxt_addr;
      var $lineno3=(($3+12)|0);
      var $4=HEAP16[(($lineno3)>>1)];
      var $conv=(($4 << 16) >> 16);
      var $5=$p_addr;
      var $lineno4=(($5+32)|0);
      HEAP32[(($lineno4)>>2)]=$conv;
      label = 6; break;
    case 6: 
      var $6=$cxt_addr;
      var $filename=(($6+8)|0);
      var $7=HEAP32[(($filename)>>2)];
      var $tobool6=(($7)|(0))!=0;
      if ($tobool6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $8=$cxt_addr;
      var $filename8=(($8+8)|0);
      var $9=HEAP32[(($filename8)>>2)];
      var $10=$p_addr;
      var $filename9=(($10+28)|0);
      HEAP32[(($filename9)>>2)]=$9;
      label = 8; break;
    case 8: 
      var $11=$cxt_addr;
      var $syms=(($11)|0);
      var $12=HEAP32[(($syms)>>2)];
      var $tobool11=(($12)|(0))!=0;
      if ($tobool11) { label = 9; break; } else { label = 14; break; }
    case 9: 
      var $13=$p_addr;
      var $call=_cons_gen($13, 0, 0);
      var $14=$p_addr;
      var $locals=(($14+76)|0);
      HEAP32[(($locals)>>2)]=$call;
      $i=0;
      label = 10; break;
    case 10: 
      var $15=$i;
      var $16=$cxt_addr;
      var $slen=(($16+4)|0);
      var $17=HEAP32[(($slen)>>2)];
      var $cmp=(($15)|(0)) < (($17)|(0));
      if ($cmp) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $18=$p_addr;
      var $19=$i;
      var $20=$cxt_addr;
      var $syms14=(($20)|0);
      var $21=HEAP32[(($syms14)>>2)];
      var $arrayidx=(($21+($19<<1))|0);
      var $22=HEAP16[(($arrayidx)>>1)];
      _local_add_f($18, $22);
      label = 12; break;
    case 12: 
      var $23=$i;
      var $inc=((($23)+(1))|0);
      $i=$inc;
      label = 10; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $24=$cxt_addr;
      var $25=$24;
      var $bf_field_offs=(($25+24)|0);
      var $26=HEAP8[($bf_field_offs)];
      var $bf_clear=$26 & 1;
      var $conv16=(($bf_clear)&(255));
      var $27=$p_addr;
      var $capture_errors=(($27+1140)|0);
      HEAP32[(($capture_errors)>>2)]=$conv16;
      var $28=$cxt_addr;
      var $partial_hook=(($28+16)|0);
      var $29=HEAP32[(($partial_hook)>>2)];
      var $tobool17=(($29)|(0))!=0;
      if ($tobool17) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $30=$cxt_addr;
      var $31=$p_addr;
      var $cxt19=(($31+24)|0);
      HEAP32[(($cxt19)>>2)]=$30;
      label = 16; break;
    case 16: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _parser_update_cxt($p, $cxt) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $cxt_addr;
      var $n;
      var $n0;
      var $i;
      $p_addr=$p;
      $cxt_addr=$cxt;
      $i=0;
      var $0=$cxt_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 13; break;
    case 4: 
      var $1=$p_addr;
      var $tree=(($1+1136)|0);
      var $2=HEAP32[(($tree)>>2)];
      var $car=(($2)|0);
      var $3=HEAP32[(($car)>>2)];
      var $4=$3;
      var $cmp=(($4)|(0))!=3;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 13; break;
    case 6: 
      var $5=$p_addr;
      var $tree3=(($5+1136)|0);
      var $6=HEAP32[(($tree3)>>2)];
      var $cdr=(($6+4)|0);
      var $7=HEAP32[(($cdr)>>2)];
      var $car4=(($7)|0);
      var $8=HEAP32[(($car4)>>2)];
      $n=$8;
      $n0=$8;
      label = 7; break;
    case 7: 
      var $9=$n;
      var $tobool5=(($9)|(0))!=0;
      if ($tobool5) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      var $11=$n;
      var $cdr6=(($11+4)|0);
      var $12=HEAP32[(($cdr6)>>2)];
      $n=$12;
      label = 7; break;
    case 9: 
      var $13=$p_addr;
      var $mrb=(($13)|0);
      var $14=HEAP32[(($mrb)>>2)];
      var $15=$cxt_addr;
      var $syms=(($15)|0);
      var $16=HEAP32[(($syms)>>2)];
      var $17=$16;
      var $18=$i;
      var $mul=($18<<1);
      var $call=_mrb_realloc($14, $17, $mul);
      var $19=$call;
      var $20=$cxt_addr;
      var $syms7=(($20)|0);
      HEAP32[(($syms7)>>2)]=$19;
      var $21=$i;
      var $22=$cxt_addr;
      var $slen=(($22+4)|0);
      HEAP32[(($slen)>>2)]=$21;
      $i=0;
      var $23=$n0;
      $n=$23;
      label = 10; break;
    case 10: 
      var $24=$n;
      var $tobool8=(($24)|(0))!=0;
      if ($tobool8) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $25=$n;
      var $car9=(($25)|0);
      var $26=HEAP32[(($car9)>>2)];
      var $27=$26;
      var $conv=(($27) & 65535);
      var $28=$i;
      var $29=$cxt_addr;
      var $syms10=(($29)|0);
      var $30=HEAP32[(($syms10)>>2)];
      var $arrayidx=(($30+($28<<1))|0);
      HEAP16[(($arrayidx)>>1)]=$conv;
      label = 12; break;
    case 12: 
      var $31=$i;
      var $inc11=((($31)+(1))|0);
      $i=$inc11;
      var $32=$n;
      var $cdr12=(($32+4)|0);
      var $33=HEAP32[(($cdr12)>>2)];
      $n=$33;
      label = 10; break;
    case 13: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _parser_dump($mrb, $tree, $offset) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tree_addr;
      var $offset_addr;
      var $n;
      var $n2;
      var $n3;
      var $n80;
      var $n296;
      var $n2227;
      var $n2273;
      var $n2399;
      var $t;
      var $n2723;
      var $n761;
      var $n2777;
      var $n839;
      var $n2855;
      $mrb_addr=$mrb;
      $tree_addr=$tree;
      $offset_addr=$offset;
      var $0=$tree_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 213; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $1=$offset_addr;
      _dump_prefix($1);
      var $2=$tree_addr;
      var $car=(($2)|0);
      var $3=HEAP32[(($car)>>2)];
      var $4=$3;
      $n=$4;
      var $5=$tree_addr;
      var $cdr=(($5+4)|0);
      var $6=HEAP32[(($cdr)>>2)];
      $tree_addr=$6;
      var $7=$n;
      if ((($7)|(0))==17) {
        label = 6; break;
      }
      else if ((($7)|(0))==18) {
        label = 7; break;
      }
      else if ((($7)|(0))==19) {
        label = 23; break;
      }
      else if ((($7)|(0))==53) {
        label = 24; break;
      }
      else if ((($7)|(0))==4) {
        label = 25; break;
      }
      else if ((($7)|(0))==5) {
        label = 42; break;
      }
      else if ((($7)|(0))==20) {
        label = 45; break;
      }
      else if ((($7)|(0))==21) {
        label = 46; break;
      }
      else if ((($7)|(0))==6) {
        label = 47; break;
      }
      else if ((($7)|(0))==9) {
        label = 53; break;
      }
      else if ((($7)|(0))==10) {
        label = 54; break;
      }
      else if ((($7)|(0))==12) {
        label = 55; break;
      }
      else if ((($7)|(0))==3) {
        label = 66; break;
      }
      else if ((($7)|(0))==30 | (($7)|(0))==29) {
        label = 78; break;
      }
      else if ((($7)|(0))==80) {
        label = 83; break;
      }
      else if ((($7)|(0))==81) {
        label = 84; break;
      }
      else if ((($7)|(0))==77) {
        label = 85; break;
      }
      else if ((($7)|(0))==78) {
        label = 86; break;
      }
      else if ((($7)|(0))==34) {
        label = 87; break;
      }
      else if ((($7)|(0))==36) {
        label = 88; break;
      }
      else if ((($7)|(0))==66) {
        label = 92; break;
      }
      else if ((($7)|(0))==24) {
        label = 93; break;
      }
      else if ((($7)|(0))==23) {
        label = 94; break;
      }
      else if ((($7)|(0))==28) {
        label = 108; break;
      }
      else if ((($7)|(0))==32) {
        label = 109; break;
      }
      else if ((($7)|(0))==33) {
        label = 114; break;
      }
      else if ((($7)|(0))==37) {
        label = 115; break;
      }
      else if ((($7)|(0))==38) {
        label = 116; break;
      }
      else if ((($7)|(0))==13) {
        label = 117; break;
      }
      else if ((($7)|(0))==14) {
        label = 118; break;
      }
      else if ((($7)|(0))==15) {
        label = 119; break;
      }
      else if ((($7)|(0))==16) {
        label = 120; break;
      }
      else if ((($7)|(0))==39) {
        label = 121; break;
      }
      else if ((($7)|(0))==41) {
        label = 122; break;
      }
      else if ((($7)|(0))==42) {
        label = 123; break;
      }
      else if ((($7)|(0))==44) {
        label = 124; break;
      }
      else if ((($7)|(0))==43) {
        label = 125; break;
      }
      else if ((($7)|(0))==47) {
        label = 126; break;
      }
      else if ((($7)|(0))==46) {
        label = 127; break;
      }
      else if ((($7)|(0))==45) {
        label = 128; break;
      }
      else if ((($7)|(0))==63) {
        label = 129; break;
      }
      else if ((($7)|(0))==69) {
        label = 130; break;
      }
      else if ((($7)|(0))==50) {
        label = 131; break;
      }
      else if ((($7)|(0))==51) {
        label = 132; break;
      }
      else if ((($7)|(0))==52) {
        label = 133; break;
      }
      else if ((($7)|(0))==55) {
        label = 134; break;
      }
      else if ((($7)|(0))==56) {
        label = 135; break;
      }
      else if ((($7)|(0))==57) {
        label = 136; break;
      }
      else if ((($7)|(0))==58) {
        label = 137; break;
      }
      else if ((($7)|(0))==59) {
        label = 138; break;
      }
      else if ((($7)|(0))==60) {
        label = 139; break;
      }
      else if ((($7)|(0))==54) {
        label = 140; break;
      }
      else if ((($7)|(0))==85) {
        label = 141; break;
      }
      else if ((($7)|(0))==86) {
        label = 142; break;
      }
      else if ((($7)|(0))==87) {
        label = 143; break;
      }
      else if ((($7)|(0))==88) {
        label = 144; break;
      }
      else if ((($7)|(0))==72) {
        label = 145; break;
      }
      else if ((($7)|(0))==73) {
        label = 146; break;
      }
      else if ((($7)|(0))==74) {
        label = 150; break;
      }
      else if ((($7)|(0))==75) {
        label = 159; break;
      }
      else if ((($7)|(0))==76) {
        label = 166; break;
      }
      else if ((($7)|(0))==70) {
        label = 167; break;
      }
      else if ((($7)|(0))==71) {
        label = 194; break;
      }
      else if ((($7)|(0))==91) {
        label = 210; break;
      }
      else if ((($7)|(0))==99) {
        label = 211; break;
      }
      else {
      label = 212; break;
      }
    case 6: 
      var $call=_printf(((96628)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $8=$mrb_addr;
      var $9=$tree_addr;
      var $10=$offset_addr;
      var $add=((($10)+(1))|0);
      _dump_recur($8, $9, $add);
      label = 213; break;
    case 7: 
      var $call2=_printf(((96540)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $11=$tree_addr;
      var $car3=(($11)|0);
      var $12=HEAP32[(($car3)>>2)];
      var $tobool4=(($12)|(0))!=0;
      if ($tobool4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $13=$offset_addr;
      var $add6=((($13)+(1))|0);
      _dump_prefix($add6);
      var $call7=_printf(((96476)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $14=$mrb_addr;
      var $15=$tree_addr;
      var $car8=(($15)|0);
      var $16=HEAP32[(($car8)>>2)];
      var $17=$offset_addr;
      var $add9=((($17)+(2))|0);
      _parser_dump($14, $16, $add9);
      label = 9; break;
    case 9: 
      var $18=$tree_addr;
      var $cdr11=(($18+4)|0);
      var $19=HEAP32[(($cdr11)>>2)];
      $tree_addr=$19;
      var $20=$tree_addr;
      var $car12=(($20)|0);
      var $21=HEAP32[(($car12)>>2)];
      var $tobool13=(($21)|(0))!=0;
      if ($tobool13) { label = 10; break; } else { label = 20; break; }
    case 10: 
      var $22=$tree_addr;
      var $car15=(($22)|0);
      var $23=HEAP32[(($car15)>>2)];
      $n2=$23;
      var $24=$offset_addr;
      var $add16=((($24)+(1))|0);
      _dump_prefix($add16);
      var $call17=_printf(((96396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 11; break;
    case 11: 
      var $25=$n2;
      var $tobool18=(($25)|(0))!=0;
      if ($tobool18) { label = 12; break; } else { label = 19; break; }
    case 12: 
      var $26=$n2;
      var $car19=(($26)|0);
      var $27=HEAP32[(($car19)>>2)];
      $n3=$27;
      var $28=$n3;
      var $car20=(($28)|0);
      var $29=HEAP32[(($car20)>>2)];
      var $tobool21=(($29)|(0))!=0;
      if ($tobool21) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $30=$offset_addr;
      var $add23=((($30)+(2))|0);
      _dump_prefix($add23);
      var $call24=_printf(((96272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $31=$mrb_addr;
      var $32=$n3;
      var $car25=(($32)|0);
      var $33=HEAP32[(($car25)>>2)];
      var $34=$offset_addr;
      var $add26=((($34)+(3))|0);
      _dump_recur($31, $33, $add26);
      label = 14; break;
    case 14: 
      var $35=$n3;
      var $cdr28=(($35+4)|0);
      var $36=HEAP32[(($cdr28)>>2)];
      var $car29=(($36)|0);
      var $37=HEAP32[(($car29)>>2)];
      var $tobool30=(($37)|(0))!=0;
      if ($tobool30) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $38=$offset_addr;
      var $add32=((($38)+(2))|0);
      _dump_prefix($add32);
      var $call33=_printf(((96188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $39=$mrb_addr;
      var $40=$n3;
      var $cdr34=(($40+4)|0);
      var $41=HEAP32[(($cdr34)>>2)];
      var $car35=(($41)|0);
      var $42=HEAP32[(($car35)>>2)];
      var $43=$offset_addr;
      var $add36=((($43)+(3))|0);
      _parser_dump($39, $42, $add36);
      label = 16; break;
    case 16: 
      var $44=$n3;
      var $cdr38=(($44+4)|0);
      var $45=HEAP32[(($cdr38)>>2)];
      var $cdr39=(($45+4)|0);
      var $46=HEAP32[(($cdr39)>>2)];
      var $car40=(($46)|0);
      var $47=HEAP32[(($car40)>>2)];
      var $tobool41=(($47)|(0))!=0;
      if ($tobool41) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $48=$offset_addr;
      var $add43=((($48)+(2))|0);
      _dump_prefix($add43);
      var $call44=_printf(((96088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $49=$mrb_addr;
      var $50=$n3;
      var $cdr45=(($50+4)|0);
      var $51=HEAP32[(($cdr45)>>2)];
      var $cdr46=(($51+4)|0);
      var $52=HEAP32[(($cdr46)>>2)];
      var $car47=(($52)|0);
      var $53=HEAP32[(($car47)>>2)];
      var $54=$offset_addr;
      var $add48=((($54)+(3))|0);
      _parser_dump($49, $53, $add48);
      label = 18; break;
    case 18: 
      var $55=$n2;
      var $cdr50=(($55+4)|0);
      var $56=HEAP32[(($cdr50)>>2)];
      $n2=$56;
      label = 11; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $57=$tree_addr;
      var $cdr52=(($57+4)|0);
      var $58=HEAP32[(($cdr52)>>2)];
      $tree_addr=$58;
      var $59=$tree_addr;
      var $car53=(($59)|0);
      var $60=HEAP32[(($car53)>>2)];
      var $tobool54=(($60)|(0))!=0;
      if ($tobool54) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $61=$offset_addr;
      var $add56=((($61)+(1))|0);
      _dump_prefix($add56);
      var $call57=_printf(((96020)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $62=$mrb_addr;
      var $63=$tree_addr;
      var $car58=(($63)|0);
      var $64=HEAP32[(($car58)>>2)];
      var $65=$offset_addr;
      var $add59=((($65)+(2))|0);
      _parser_dump($62, $64, $add59);
      label = 22; break;
    case 22: 
      label = 213; break;
    case 23: 
      var $call62=_printf(((95844)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $66=$offset_addr;
      var $add63=((($66)+(1))|0);
      _dump_prefix($add63);
      var $call64=_printf(((96476)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $67=$mrb_addr;
      var $68=$tree_addr;
      var $car65=(($68)|0);
      var $69=HEAP32[(($car65)>>2)];
      var $70=$offset_addr;
      var $add66=((($70)+(2))|0);
      _parser_dump($67, $69, $add66);
      var $71=$offset_addr;
      var $add67=((($71)+(1))|0);
      _dump_prefix($add67);
      var $call68=_printf(((95516)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $72=$mrb_addr;
      var $73=$tree_addr;
      var $cdr69=(($73+4)|0);
      var $74=HEAP32[(($cdr69)>>2)];
      var $cdr70=(($74+4)|0);
      var $75=HEAP32[(($cdr70)>>2)];
      var $76=$offset_addr;
      var $add71=((($76)+(2))|0);
      _parser_dump($72, $75, $add71);
      label = 213; break;
    case 24: 
      var $call73=_printf(((95440)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 26; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $call75=_printf(((95440)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $77=$tree_addr;
      var $cdr76=(($77+4)|0);
      var $78=HEAP32[(($cdr76)>>2)];
      $tree_addr=$78;
      var $79=$tree_addr;
      var $car77=(($79)|0);
      var $80=HEAP32[(($car77)>>2)];
      var $tobool78=(($80)|(0))!=0;
      if ($tobool78) { label = 27; break; } else { label = 41; break; }
    case 27: 
      var $81=$tree_addr;
      var $car81=(($81)|0);
      var $82=HEAP32[(($car81)>>2)];
      $n80=$82;
      var $83=$n80;
      var $car82=(($83)|0);
      var $84=HEAP32[(($car82)>>2)];
      var $tobool83=(($84)|(0))!=0;
      if ($tobool83) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $85=$offset_addr;
      var $add85=((($85)+(1))|0);
      _dump_prefix($add85);
      var $call86=_printf(((95372)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $86=$mrb_addr;
      var $87=$n80;
      var $car87=(($87)|0);
      var $88=HEAP32[(($car87)>>2)];
      var $89=$offset_addr;
      var $add88=((($89)+(2))|0);
      _dump_recur($86, $88, $add88);
      label = 29; break;
    case 29: 
      var $90=$n80;
      var $cdr90=(($90+4)|0);
      var $91=HEAP32[(($cdr90)>>2)];
      $n80=$91;
      var $92=$n80;
      var $car91=(($92)|0);
      var $93=HEAP32[(($car91)>>2)];
      var $tobool92=(($93)|(0))!=0;
      if ($tobool92) { label = 30; break; } else { label = 34; break; }
    case 30: 
      var $94=$offset_addr;
      var $add94=((($94)+(1))|0);
      _dump_prefix($add94);
      var $call95=_printf(((95324)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $95=$n80;
      var $car97=(($95)|0);
      var $96=HEAP32[(($car97)>>2)];
      $n296=$96;
      label = 31; break;
    case 31: 
      var $97=$n296;
      var $tobool99=(($97)|(0))!=0;
      if ($tobool99) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $98=$offset_addr;
      var $add101=((($98)+(2))|0);
      _dump_prefix($add101);
      var $99=$mrb_addr;
      var $100=$n296;
      var $car102=(($100)|0);
      var $101=HEAP32[(($car102)>>2)];
      var $car103=(($101)|0);
      var $102=HEAP32[(($car103)>>2)];
      var $103=$102;
      var $conv=(($103) & 65535);
      var $call104=_mrb_sym2name($99, $conv);
      var $call105=_printf(((95264)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call104,tempInt));
      var $104=$mrb_addr;
      var $105=$n296;
      var $car106=(($105)|0);
      var $106=HEAP32[(($car106)>>2)];
      var $cdr107=(($106+4)|0);
      var $107=HEAP32[(($cdr107)>>2)];
      _parser_dump($104, $107, 0);
      var $108=$n296;
      var $cdr108=(($108+4)|0);
      var $109=HEAP32[(($cdr108)>>2)];
      $n296=$109;
      label = 31; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $110=$n80;
      var $cdr111=(($110+4)|0);
      var $111=HEAP32[(($cdr111)>>2)];
      $n80=$111;
      var $112=$n80;
      var $car112=(($112)|0);
      var $113=HEAP32[(($car112)>>2)];
      var $tobool113=(($113)|(0))!=0;
      if ($tobool113) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $114=$offset_addr;
      var $add115=((($114)+(1))|0);
      _dump_prefix($add115);
      var $115=$mrb_addr;
      var $116=$n80;
      var $car116=(($116)|0);
      var $117=HEAP32[(($car116)>>2)];
      var $118=$117;
      var $conv117=(($118) & 65535);
      var $call118=_mrb_sym2name($115, $conv117);
      var $call119=_printf(((95172)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call118,tempInt));
      label = 36; break;
    case 36: 
      var $119=$n80;
      var $cdr121=(($119+4)|0);
      var $120=HEAP32[(($cdr121)>>2)];
      $n80=$120;
      var $121=$n80;
      var $car122=(($121)|0);
      var $122=HEAP32[(($car122)>>2)];
      var $tobool123=(($122)|(0))!=0;
      if ($tobool123) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $123=$offset_addr;
      var $add125=((($123)+(1))|0);
      _dump_prefix($add125);
      var $call126=_printf(((95120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $124=$mrb_addr;
      var $125=$n80;
      var $car127=(($125)|0);
      var $126=HEAP32[(($car127)>>2)];
      var $127=$offset_addr;
      var $add128=((($127)+(2))|0);
      _dump_recur($124, $126, $add128);
      label = 38; break;
    case 38: 
      var $128=$n80;
      var $cdr130=(($128+4)|0);
      var $129=HEAP32[(($cdr130)>>2)];
      $n80=$129;
      var $130=$n80;
      var $tobool131=(($130)|(0))!=0;
      if ($tobool131) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $131=$offset_addr;
      var $add133=((($131)+(1))|0);
      _dump_prefix($add133);
      var $132=$mrb_addr;
      var $133=$n80;
      var $134=$133;
      var $conv134=(($134) & 65535);
      var $call135=_mrb_sym2name($132, $conv134);
      var $call136=_printf(((95048)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call135,tempInt));
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $135=$offset_addr;
      var $add139=((($135)+(1))|0);
      _dump_prefix($add139);
      var $call140=_printf(((96476)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $136=$mrb_addr;
      var $137=$tree_addr;
      var $cdr141=(($137+4)|0);
      var $138=HEAP32[(($cdr141)>>2)];
      var $car142=(($138)|0);
      var $139=HEAP32[(($car142)>>2)];
      var $140=$offset_addr;
      var $add143=((($140)+(2))|0);
      _parser_dump($136, $139, $add143);
      label = 213; break;
    case 42: 
      var $call145=_printf(((94924)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $141=$offset_addr;
      var $add146=((($141)+(1))|0);
      _dump_prefix($add146);
      var $call147=_printf(((94892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $142=$mrb_addr;
      var $143=$tree_addr;
      var $car148=(($143)|0);
      var $144=HEAP32[(($car148)>>2)];
      var $145=$offset_addr;
      var $add149=((($145)+(2))|0);
      _parser_dump($142, $144, $add149);
      var $146=$offset_addr;
      var $add150=((($146)+(1))|0);
      _dump_prefix($add150);
      var $call151=_printf(((94616)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $147=$mrb_addr;
      var $148=$tree_addr;
      var $cdr152=(($148+4)|0);
      var $149=HEAP32[(($cdr152)>>2)];
      var $car153=(($149)|0);
      var $150=HEAP32[(($car153)>>2)];
      var $151=$offset_addr;
      var $add154=((($151)+(2))|0);
      _parser_dump($147, $150, $add154);
      var $152=$tree_addr;
      var $cdr155=(($152+4)|0);
      var $153=HEAP32[(($cdr155)>>2)];
      var $cdr156=(($153+4)|0);
      var $154=HEAP32[(($cdr156)>>2)];
      var $car157=(($154)|0);
      var $155=HEAP32[(($car157)>>2)];
      var $tobool158=(($155)|(0))!=0;
      if ($tobool158) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $156=$offset_addr;
      var $add160=((($156)+(1))|0);
      _dump_prefix($add160);
      var $call161=_printf(((96020)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $157=$mrb_addr;
      var $158=$tree_addr;
      var $cdr162=(($158+4)|0);
      var $159=HEAP32[(($cdr162)>>2)];
      var $cdr163=(($159+4)|0);
      var $160=HEAP32[(($cdr163)>>2)];
      var $car164=(($160)|0);
      var $161=HEAP32[(($car164)>>2)];
      var $162=$offset_addr;
      var $add165=((($162)+(2))|0);
      _parser_dump($157, $161, $add165);
      label = 44; break;
    case 44: 
      label = 213; break;
    case 45: 
      var $call168=_printf(((94568)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $163=$mrb_addr;
      var $164=$tree_addr;
      var $car169=(($164)|0);
      var $165=HEAP32[(($car169)>>2)];
      var $166=$offset_addr;
      var $add170=((($166)+(1))|0);
      _parser_dump($163, $165, $add170);
      var $167=$mrb_addr;
      var $168=$tree_addr;
      var $cdr171=(($168+4)|0);
      var $169=HEAP32[(($cdr171)>>2)];
      var $170=$offset_addr;
      var $add172=((($170)+(1))|0);
      _parser_dump($167, $169, $add172);
      label = 213; break;
    case 46: 
      var $call174=_printf(((94500)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $171=$mrb_addr;
      var $172=$tree_addr;
      var $car175=(($172)|0);
      var $173=HEAP32[(($car175)>>2)];
      var $174=$offset_addr;
      var $add176=((($174)+(1))|0);
      _parser_dump($171, $173, $add176);
      var $175=$mrb_addr;
      var $176=$tree_addr;
      var $cdr177=(($176+4)|0);
      var $177=HEAP32[(($cdr177)>>2)];
      var $178=$offset_addr;
      var $add178=((($178)+(1))|0);
      _parser_dump($175, $177, $add178);
      label = 213; break;
    case 47: 
      var $call180=_printf(((94456)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $179=$tree_addr;
      var $car181=(($179)|0);
      var $180=HEAP32[(($car181)>>2)];
      var $tobool182=(($180)|(0))!=0;
      if ($tobool182) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $181=$mrb_addr;
      var $182=$tree_addr;
      var $car184=(($182)|0);
      var $183=HEAP32[(($car184)>>2)];
      var $184=$offset_addr;
      var $add185=((($184)+(1))|0);
      _parser_dump($181, $183, $add185);
      label = 49; break;
    case 49: 
      var $185=$tree_addr;
      var $cdr187=(($185+4)|0);
      var $186=HEAP32[(($cdr187)>>2)];
      $tree_addr=$186;
      label = 50; break;
    case 50: 
      var $187=$tree_addr;
      var $tobool189=(($187)|(0))!=0;
      if ($tobool189) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $188=$offset_addr;
      var $add191=((($188)+(1))|0);
      _dump_prefix($add191);
      var $call192=_printf(((94404)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $189=$mrb_addr;
      var $190=$tree_addr;
      var $car193=(($190)|0);
      var $191=HEAP32[(($car193)>>2)];
      var $car194=(($191)|0);
      var $192=HEAP32[(($car194)>>2)];
      var $193=$offset_addr;
      var $add195=((($193)+(2))|0);
      _dump_recur($189, $192, $add195);
      var $194=$offset_addr;
      var $add196=((($194)+(1))|0);
      _dump_prefix($add196);
      var $call197=_printf(((96476)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $195=$mrb_addr;
      var $196=$tree_addr;
      var $car198=(($196)|0);
      var $197=HEAP32[(($car198)>>2)];
      var $cdr199=(($197+4)|0);
      var $198=HEAP32[(($cdr199)>>2)];
      var $199=$offset_addr;
      var $add200=((($199)+(2))|0);
      _parser_dump($195, $198, $add200);
      var $200=$tree_addr;
      var $cdr201=(($200+4)|0);
      var $201=HEAP32[(($cdr201)>>2)];
      $tree_addr=$201;
      label = 50; break;
    case 52: 
      label = 213; break;
    case 53: 
      var $call204=_printf(((94352)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $202=$offset_addr;
      var $add205=((($202)+(1))|0);
      _dump_prefix($add205);
      var $call206=_printf(((94892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $203=$mrb_addr;
      var $204=$tree_addr;
      var $car207=(($204)|0);
      var $205=HEAP32[(($car207)>>2)];
      var $206=$offset_addr;
      var $add208=((($206)+(2))|0);
      _parser_dump($203, $205, $add208);
      var $207=$offset_addr;
      var $add209=((($207)+(1))|0);
      _dump_prefix($add209);
      var $call210=_printf(((96476)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $208=$mrb_addr;
      var $209=$tree_addr;
      var $cdr211=(($209+4)|0);
      var $210=HEAP32[(($cdr211)>>2)];
      var $211=$offset_addr;
      var $add212=((($211)+(2))|0);
      _parser_dump($208, $210, $add212);
      label = 213; break;
    case 54: 
      var $call214=_printf(((94268)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $212=$offset_addr;
      var $add215=((($212)+(1))|0);
      _dump_prefix($add215);
      var $call216=_printf(((94892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $213=$mrb_addr;
      var $214=$tree_addr;
      var $car217=(($214)|0);
      var $215=HEAP32[(($car217)>>2)];
      var $216=$offset_addr;
      var $add218=((($216)+(2))|0);
      _parser_dump($213, $215, $add218);
      var $217=$offset_addr;
      var $add219=((($217)+(1))|0);
      _dump_prefix($add219);
      var $call220=_printf(((96476)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $218=$mrb_addr;
      var $219=$tree_addr;
      var $cdr221=(($219+4)|0);
      var $220=HEAP32[(($cdr221)>>2)];
      var $221=$offset_addr;
      var $add222=((($221)+(2))|0);
      _parser_dump($218, $220, $add222);
      label = 213; break;
    case 55: 
      var $call224=_printf(((94224)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $222=$offset_addr;
      var $add225=((($222)+(1))|0);
      _dump_prefix($add225);
      var $call226=_printf(((94120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $223=$tree_addr;
      var $car228=(($223)|0);
      var $224=HEAP32[(($car228)>>2)];
      $n2227=$224;
      var $225=$n2227;
      var $car229=(($225)|0);
      var $226=HEAP32[(($car229)>>2)];
      var $tobool230=(($226)|(0))!=0;
      if ($tobool230) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $227=$offset_addr;
      var $add232=((($227)+(2))|0);
      _dump_prefix($add232);
      var $call233=_printf(((94072)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $228=$mrb_addr;
      var $229=$n2227;
      var $car234=(($229)|0);
      var $230=HEAP32[(($car234)>>2)];
      var $231=$offset_addr;
      var $add235=((($231)+(3))|0);
      _dump_recur($228, $230, $add235);
      label = 57; break;
    case 57: 
      var $232=$n2227;
      var $cdr237=(($232+4)|0);
      var $233=HEAP32[(($cdr237)>>2)];
      $n2227=$233;
      var $234=$n2227;
      var $tobool238=(($234)|(0))!=0;
      if ($tobool238) { label = 58; break; } else { label = 65; break; }
    case 58: 
      var $235=$n2227;
      var $car240=(($235)|0);
      var $236=HEAP32[(($car240)>>2)];
      var $tobool241=(($236)|(0))!=0;
      if ($tobool241) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $237=$offset_addr;
      var $add243=((($237)+(2))|0);
      _dump_prefix($add243);
      var $call244=_printf(((93736)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $238=$mrb_addr;
      var $239=$n2227;
      var $car245=(($239)|0);
      var $240=HEAP32[(($car245)>>2)];
      var $241=$offset_addr;
      var $add246=((($241)+(3))|0);
      _parser_dump($238, $240, $add246);
      label = 60; break;
    case 60: 
      var $242=$n2227;
      var $cdr248=(($242+4)|0);
      var $243=HEAP32[(($cdr248)>>2)];
      $n2227=$243;
      var $244=$n2227;
      var $tobool249=(($244)|(0))!=0;
      if ($tobool249) { label = 61; break; } else { label = 64; break; }
    case 61: 
      var $245=$n2227;
      var $car251=(($245)|0);
      var $246=HEAP32[(($car251)>>2)];
      var $tobool252=(($246)|(0))!=0;
      if ($tobool252) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $247=$offset_addr;
      var $add254=((($247)+(2))|0);
      _dump_prefix($add254);
      var $call255=_printf(((93688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $248=$mrb_addr;
      var $249=$n2227;
      var $car256=(($249)|0);
      var $250=HEAP32[(($car256)>>2)];
      var $251=$offset_addr;
      var $add257=((($251)+(3))|0);
      _dump_recur($248, $250, $add257);
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $252=$tree_addr;
      var $cdr261=(($252+4)|0);
      var $253=HEAP32[(($cdr261)>>2)];
      $tree_addr=$253;
      var $254=$offset_addr;
      var $add262=((($254)+(1))|0);
      _dump_prefix($add262);
      var $call263=_printf(((93596)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $255=$mrb_addr;
      var $256=$tree_addr;
      var $car264=(($256)|0);
      var $257=HEAP32[(($car264)>>2)];
      var $258=$offset_addr;
      var $add265=((($258)+(2))|0);
      _parser_dump($255, $257, $add265);
      var $259=$tree_addr;
      var $cdr266=(($259+4)|0);
      var $260=HEAP32[(($cdr266)>>2)];
      $tree_addr=$260;
      var $261=$offset_addr;
      var $add267=((($261)+(1))|0);
      _dump_prefix($add267);
      var $call268=_printf(((93564)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $262=$mrb_addr;
      var $263=$tree_addr;
      var $car269=(($263)|0);
      var $264=HEAP32[(($car269)>>2)];
      var $265=$offset_addr;
      var $add270=((($265)+(2))|0);
      _parser_dump($262, $264, $add270);
      label = 213; break;
    case 66: 
      var $call272=_printf(((93500)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $266=$tree_addr;
      var $car274=(($266)|0);
      var $267=HEAP32[(($car274)>>2)];
      $n2273=$267;
      var $268=$n2273;
      var $tobool275=(($268)|(0))!=0;
      if ($tobool275) { label = 67; break; } else { label = 77; break; }
    case 67: 
      var $269=$n2273;
      var $car276=(($269)|0);
      var $270=HEAP32[(($car276)>>2)];
      var $tobool277=(($270)|(0))!=0;
      if ($tobool277) { label = 69; break; } else { label = 68; break; }
    case 68: 
      var $271=$n2273;
      var $cdr278=(($271+4)|0);
      var $272=HEAP32[(($cdr278)>>2)];
      var $tobool279=(($272)|(0))!=0;
      if ($tobool279) { label = 69; break; } else { label = 77; break; }
    case 69: 
      var $273=$offset_addr;
      var $add281=((($273)+(1))|0);
      _dump_prefix($add281);
      var $call282=_printf(((93408)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $274=$offset_addr;
      var $add283=((($274)+(2))|0);
      _dump_prefix($add283);
      label = 70; break;
    case 70: 
      var $275=$n2273;
      var $tobool285=(($275)|(0))!=0;
      if ($tobool285) { label = 71; break; } else { label = 76; break; }
    case 71: 
      var $276=$n2273;
      var $car287=(($276)|0);
      var $277=HEAP32[(($car287)>>2)];
      var $tobool288=(($277)|(0))!=0;
      if ($tobool288) { label = 72; break; } else { label = 75; break; }
    case 72: 
      var $278=$n2273;
      var $279=$tree_addr;
      var $car290=(($279)|0);
      var $280=HEAP32[(($car290)>>2)];
      var $cmp=(($278)|(0))!=(($280)|(0));
      if ($cmp) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $call293=_printf(((93360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 74; break;
    case 74: 
      var $281=$mrb_addr;
      var $282=$n2273;
      var $car295=(($282)|0);
      var $283=HEAP32[(($car295)>>2)];
      var $284=$283;
      var $conv296=(($284) & 65535);
      var $call297=_mrb_sym2name($281, $conv296);
      var $call298=_printf(((93332)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call297,tempInt));
      label = 75; break;
    case 75: 
      var $285=$n2273;
      var $cdr300=(($285+4)|0);
      var $286=HEAP32[(($cdr300)>>2)];
      $n2273=$286;
      label = 70; break;
    case 76: 
      var $call302=_printf(((95764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 77; break;
    case 77: 
      var $287=$tree_addr;
      var $cdr304=(($287+4)|0);
      var $288=HEAP32[(($cdr304)>>2)];
      $tree_addr=$288;
      var $289=$offset_addr;
      var $inc=((($289)+(1))|0);
      $offset_addr=$inc;
      label = 5; break;
    case 78: 
      var $call306=_printf(((113960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $290=$mrb_addr;
      var $291=$tree_addr;
      var $car307=(($291)|0);
      var $292=HEAP32[(($car307)>>2)];
      var $293=$offset_addr;
      var $add308=((($293)+(1))|0);
      _parser_dump($290, $292, $add308);
      var $294=$offset_addr;
      var $add309=((($294)+(1))|0);
      _dump_prefix($add309);
      var $295=$mrb_addr;
      var $296=$tree_addr;
      var $cdr310=(($296+4)|0);
      var $297=HEAP32[(($cdr310)>>2)];
      var $car311=(($297)|0);
      var $298=HEAP32[(($car311)>>2)];
      var $299=$298;
      var $conv312=(($299) & 65535);
      var $call313=_mrb_sym2name($295, $conv312);
      var $300=$tree_addr;
      var $cdr314=(($300+4)|0);
      var $301=HEAP32[(($cdr314)>>2)];
      var $car315=(($301)|0);
      var $302=HEAP32[(($car315)>>2)];
      var $303=$302;
      var $call316=_printf(((113896)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call313,HEAP32[(((tempInt)+(4))>>2)]=$303,tempInt));
      var $304=$tree_addr;
      var $cdr317=(($304+4)|0);
      var $305=HEAP32[(($cdr317)>>2)];
      var $cdr318=(($305+4)|0);
      var $306=HEAP32[(($cdr318)>>2)];
      var $car319=(($306)|0);
      var $307=HEAP32[(($car319)>>2)];
      $tree_addr=$307;
      var $308=$tree_addr;
      var $tobool320=(($308)|(0))!=0;
      if ($tobool320) { label = 79; break; } else { label = 82; break; }
    case 79: 
      var $309=$offset_addr;
      var $add322=((($309)+(1))|0);
      _dump_prefix($add322);
      var $call323=_printf(((113524)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $310=$mrb_addr;
      var $311=$tree_addr;
      var $car324=(($311)|0);
      var $312=HEAP32[(($car324)>>2)];
      var $313=$offset_addr;
      var $add325=((($313)+(2))|0);
      _dump_recur($310, $312, $add325);
      var $314=$tree_addr;
      var $cdr326=(($314+4)|0);
      var $315=HEAP32[(($cdr326)>>2)];
      var $tobool327=(($315)|(0))!=0;
      if ($tobool327) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $316=$offset_addr;
      var $add329=((($316)+(1))|0);
      _dump_prefix($add329);
      var $call330=_printf(((113516)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $317=$mrb_addr;
      var $318=$tree_addr;
      var $cdr331=(($318+4)|0);
      var $319=HEAP32[(($cdr331)>>2)];
      var $320=$offset_addr;
      var $add332=((($320)+(2))|0);
      _parser_dump($317, $319, $add332);
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      label = 213; break;
    case 83: 
      var $call336=_printf(((113504)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $321=$mrb_addr;
      var $322=$tree_addr;
      var $car337=(($322)|0);
      var $323=HEAP32[(($car337)>>2)];
      var $324=$offset_addr;
      var $add338=((($324)+(1))|0);
      _parser_dump($321, $323, $add338);
      var $325=$mrb_addr;
      var $326=$tree_addr;
      var $cdr339=(($326+4)|0);
      var $327=HEAP32[(($cdr339)>>2)];
      var $328=$offset_addr;
      var $add340=((($328)+(1))|0);
      _parser_dump($325, $327, $add340);
      label = 213; break;
    case 84: 
      var $call342=_printf(((113460)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $329=$mrb_addr;
      var $330=$tree_addr;
      var $car343=(($330)|0);
      var $331=HEAP32[(($car343)>>2)];
      var $332=$offset_addr;
      var $add344=((($332)+(1))|0);
      _parser_dump($329, $331, $add344);
      var $333=$mrb_addr;
      var $334=$tree_addr;
      var $cdr345=(($334+4)|0);
      var $335=HEAP32[(($cdr345)>>2)];
      var $336=$offset_addr;
      var $add346=((($336)+(1))|0);
      _parser_dump($333, $335, $add346);
      label = 213; break;
    case 85: 
      var $call348=_printf(((113420)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $337=$mrb_addr;
      var $338=$tree_addr;
      var $car349=(($338)|0);
      var $339=HEAP32[(($car349)>>2)];
      var $340=$offset_addr;
      var $add350=((($340)+(1))|0);
      _parser_dump($337, $339, $add350);
      var $341=$offset_addr;
      var $add351=((($341)+(1))|0);
      _dump_prefix($add351);
      var $342=$mrb_addr;
      var $343=$tree_addr;
      var $cdr352=(($343+4)|0);
      var $344=HEAP32[(($cdr352)>>2)];
      var $345=$344;
      var $conv353=(($345) & 65535);
      var $call354=_mrb_sym2name($342, $conv353);
      var $call355=_printf(((113392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call354,tempInt));
      label = 213; break;
    case 86: 
      var $call357=_printf(((113368)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $346=$offset_addr;
      var $add358=((($346)+(1))|0);
      _dump_prefix($add358);
      var $347=$mrb_addr;
      var $348=$tree_addr;
      var $349=$348;
      var $conv359=(($349) & 65535);
      var $call360=_mrb_sym2name($347, $conv359);
      var $call361=_printf(((113392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call360,tempInt));
      label = 213; break;
    case 87: 
      var $call363=_printf(((113344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $350=$mrb_addr;
      var $351=$tree_addr;
      var $352=$offset_addr;
      var $add364=((($352)+(1))|0);
      _dump_recur($350, $351, $add364);
      label = 213; break;
    case 88: 
      var $call366=_printf(((113240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 89; break;
    case 89: 
      var $353=$tree_addr;
      var $tobool368=(($353)|(0))!=0;
      if ($tobool368) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $354=$offset_addr;
      var $add370=((($354)+(1))|0);
      _dump_prefix($add370);
      var $call371=_printf(((113216)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $355=$mrb_addr;
      var $356=$tree_addr;
      var $car372=(($356)|0);
      var $357=HEAP32[(($car372)>>2)];
      var $car373=(($357)|0);
      var $358=HEAP32[(($car373)>>2)];
      var $359=$offset_addr;
      var $add374=((($359)+(2))|0);
      _parser_dump($355, $358, $add374);
      var $360=$offset_addr;
      var $add375=((($360)+(1))|0);
      _dump_prefix($add375);
      var $call376=_printf(((112988)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $361=$mrb_addr;
      var $362=$tree_addr;
      var $car377=(($362)|0);
      var $363=HEAP32[(($car377)>>2)];
      var $cdr378=(($363+4)|0);
      var $364=HEAP32[(($cdr378)>>2)];
      var $365=$offset_addr;
      var $add379=((($365)+(2))|0);
      _parser_dump($361, $364, $add379);
      var $366=$tree_addr;
      var $cdr380=(($366+4)|0);
      var $367=HEAP32[(($cdr380)>>2)];
      $tree_addr=$367;
      label = 89; break;
    case 91: 
      label = 213; break;
    case 92: 
      var $call383=_printf(((112928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $368=$mrb_addr;
      var $369=$tree_addr;
      var $370=$offset_addr;
      var $add384=((($370)+(1))|0);
      _parser_dump($368, $369, $add384);
      label = 213; break;
    case 93: 
      var $call386=_printf(((112884)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $371=$offset_addr;
      var $add387=((($371)+(1))|0);
      _dump_prefix($add387);
      var $call388=_printf(((112788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $372=$mrb_addr;
      var $373=$tree_addr;
      var $car389=(($373)|0);
      var $374=HEAP32[(($car389)>>2)];
      var $375=$offset_addr;
      var $add390=((($375)+(2))|0);
      _parser_dump($372, $374, $add390);
      var $376=$offset_addr;
      var $add391=((($376)+(1))|0);
      _dump_prefix($add391);
      var $call392=_printf(((112688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $377=$mrb_addr;
      var $378=$tree_addr;
      var $cdr393=(($378+4)|0);
      var $379=HEAP32[(($cdr393)>>2)];
      var $380=$offset_addr;
      var $add394=((($380)+(2))|0);
      _parser_dump($377, $379, $add394);
      label = 213; break;
    case 94: 
      var $call396=_printf(((112596)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $381=$offset_addr;
      var $add397=((($381)+(1))|0);
      _dump_prefix($add397);
      var $call398=_printf(((112568)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $382=$tree_addr;
      var $car400=(($382)|0);
      var $383=HEAP32[(($car400)>>2)];
      $n2399=$383;
      var $384=$n2399;
      var $car401=(($384)|0);
      var $385=HEAP32[(($car401)>>2)];
      var $tobool402=(($385)|(0))!=0;
      if ($tobool402) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $386=$offset_addr;
      var $add404=((($386)+(2))|0);
      _dump_prefix($add404);
      var $call405=_printf(((94072)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $387=$mrb_addr;
      var $388=$n2399;
      var $car406=(($388)|0);
      var $389=HEAP32[(($car406)>>2)];
      var $390=$offset_addr;
      var $add407=((($390)+(3))|0);
      _dump_recur($387, $389, $add407);
      label = 96; break;
    case 96: 
      var $391=$n2399;
      var $cdr409=(($391+4)|0);
      var $392=HEAP32[(($cdr409)>>2)];
      $n2399=$392;
      var $393=$n2399;
      var $tobool410=(($393)|(0))!=0;
      if ($tobool410) { label = 97; break; } else { label = 107; break; }
    case 97: 
      var $394=$n2399;
      var $car412=(($394)|0);
      var $395=HEAP32[(($car412)>>2)];
      var $tobool413=(($395)|(0))!=0;
      if ($tobool413) { label = 98; break; } else { label = 102; break; }
    case 98: 
      var $396=$offset_addr;
      var $add415=((($396)+(2))|0);
      _dump_prefix($add415);
      var $call416=_printf(((93736)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $397=$n2399;
      var $car417=(($397)|0);
      var $398=HEAP32[(($car417)>>2)];
      var $cmp418=(($398)|(0))==-1;
      if ($cmp418) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $399=$offset_addr;
      var $add421=((($399)+(2))|0);
      _dump_prefix($add421);
      var $call422=_printf(((112540)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 101; break;
    case 100: 
      var $400=$mrb_addr;
      var $401=$n2399;
      var $car423=(($401)|0);
      var $402=HEAP32[(($car423)>>2)];
      var $403=$offset_addr;
      var $add424=((($403)+(3))|0);
      _parser_dump($400, $402, $add424);
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $404=$n2399;
      var $cdr427=(($404+4)|0);
      var $405=HEAP32[(($cdr427)>>2)];
      $n2399=$405;
      var $406=$n2399;
      var $tobool428=(($406)|(0))!=0;
      if ($tobool428) { label = 103; break; } else { label = 106; break; }
    case 103: 
      var $407=$n2399;
      var $car430=(($407)|0);
      var $408=HEAP32[(($car430)>>2)];
      var $tobool431=(($408)|(0))!=0;
      if ($tobool431) { label = 104; break; } else { label = 105; break; }
    case 104: 
      var $409=$offset_addr;
      var $add433=((($409)+(2))|0);
      _dump_prefix($add433);
      var $call434=_printf(((93688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $410=$mrb_addr;
      var $411=$n2399;
      var $car435=(($411)|0);
      var $412=HEAP32[(($car435)>>2)];
      var $413=$offset_addr;
      var $add436=((($413)+(3))|0);
      _dump_recur($410, $412, $add436);
      label = 105; break;
    case 105: 
      label = 106; break;
    case 106: 
      label = 107; break;
    case 107: 
      var $414=$offset_addr;
      var $add440=((($414)+(1))|0);
      _dump_prefix($add440);
      var $call441=_printf(((112688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $415=$mrb_addr;
      var $416=$tree_addr;
      var $cdr442=(($416+4)|0);
      var $417=HEAP32[(($cdr442)>>2)];
      var $418=$offset_addr;
      var $add443=((($418)+(2))|0);
      _parser_dump($415, $417, $add443);
      label = 213; break;
    case 108: 
      var $call445=_printf(((112392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $419=$offset_addr;
      var $add446=((($419)+(1))|0);
      _dump_prefix($add446);
      var $call447=_printf(((112788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $420=$mrb_addr;
      var $421=$tree_addr;
      var $car448=(($421)|0);
      var $422=HEAP32[(($car448)>>2)];
      var $423=$offset_addr;
      var $add449=((($423)+(2))|0);
      _parser_dump($420, $422, $add449);
      var $424=$tree_addr;
      var $cdr450=(($424+4)|0);
      var $425=HEAP32[(($cdr450)>>2)];
      $tree_addr=$425;
      var $426=$offset_addr;
      var $add451=((($426)+(1))|0);
      _dump_prefix($add451);
      var $427=$mrb_addr;
      var $428=$tree_addr;
      var $car452=(($428)|0);
      var $429=HEAP32[(($car452)>>2)];
      var $430=$429;
      var $conv453=(($430) & 65535);
      var $call454=_mrb_sym2name($427, $conv453);
      var $431=$tree_addr;
      var $car455=(($431)|0);
      var $432=HEAP32[(($car455)>>2)];
      var $433=$432;
      var $call456=_printf(((112332)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call454,HEAP32[(((tempInt)+(4))>>2)]=$433,tempInt));
      var $434=$tree_addr;
      var $cdr457=(($434+4)|0);
      var $435=HEAP32[(($cdr457)>>2)];
      $tree_addr=$435;
      var $436=$mrb_addr;
      var $437=$tree_addr;
      var $car458=(($437)|0);
      var $438=HEAP32[(($car458)>>2)];
      var $439=$offset_addr;
      var $add459=((($439)+(1))|0);
      _parser_dump($436, $438, $add459);
      label = 213; break;
    case 109: 
      var $call461=_printf(((112032)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $440=$tree_addr;
      var $tobool462=(($440)|(0))!=0;
      if ($tobool462) { label = 110; break; } else { label = 113; break; }
    case 110: 
      var $441=$offset_addr;
      var $add464=((($441)+(1))|0);
      _dump_prefix($add464);
      var $call465=_printf(((113524)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $442=$mrb_addr;
      var $443=$tree_addr;
      var $car466=(($443)|0);
      var $444=HEAP32[(($car466)>>2)];
      var $445=$offset_addr;
      var $add467=((($445)+(2))|0);
      _dump_recur($442, $444, $add467);
      var $446=$tree_addr;
      var $cdr468=(($446+4)|0);
      var $447=HEAP32[(($cdr468)>>2)];
      var $tobool469=(($447)|(0))!=0;
      if ($tobool469) { label = 111; break; } else { label = 112; break; }
    case 111: 
      var $448=$offset_addr;
      var $add471=((($448)+(1))|0);
      _dump_prefix($add471);
      var $call472=_printf(((113516)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $449=$mrb_addr;
      var $450=$tree_addr;
      var $cdr473=(($450+4)|0);
      var $451=HEAP32[(($cdr473)>>2)];
      var $452=$offset_addr;
      var $add474=((($452)+(2))|0);
      _parser_dump($449, $451, $add474);
      label = 112; break;
    case 112: 
      label = 113; break;
    case 113: 
      label = 213; break;
    case 114: 
      var $call478=_printf(((112012)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 213; break;
    case 115: 
      var $call480=_printf(((111996)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $453=$mrb_addr;
      var $454=$tree_addr;
      var $455=$offset_addr;
      var $add481=((($455)+(1))|0);
      _parser_dump($453, $454, $add481);
      label = 213; break;
    case 116: 
      var $call483=_printf(((111980)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $456=$mrb_addr;
      var $457=$tree_addr;
      var $458=$offset_addr;
      var $add484=((($458)+(1))|0);
      _dump_recur($456, $457, $add484);
      label = 213; break;
    case 117: 
      var $call486=_printf(((111952)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $459=$mrb_addr;
      var $460=$tree_addr;
      var $461=$offset_addr;
      var $add487=((($461)+(1))|0);
      _parser_dump($459, $460, $add487);
      label = 213; break;
    case 118: 
      var $call489=_printf(((111932)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $462=$mrb_addr;
      var $463=$tree_addr;
      var $464=$offset_addr;
      var $add490=((($464)+(1))|0);
      _parser_dump($462, $463, $add490);
      label = 213; break;
    case 119: 
      var $call492=_printf(((111920)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 213; break;
    case 120: 
      var $call494=_printf(((111900)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 213; break;
    case 121: 
      var $465=$mrb_addr;
      var $466=$tree_addr;
      var $467=$466;
      var $conv496=(($467) & 65535);
      var $call497=_mrb_sym2name($465, $conv496);
      var $call498=_printf(((111840)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call497,tempInt));
      label = 213; break;
    case 122: 
      var $468=$mrb_addr;
      var $469=$tree_addr;
      var $470=$469;
      var $conv500=(($470) & 65535);
      var $call501=_mrb_sym2name($468, $conv500);
      var $call502=_printf(((111772)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call501,tempInt));
      label = 213; break;
    case 123: 
      var $471=$mrb_addr;
      var $472=$tree_addr;
      var $473=$472;
      var $conv504=(($473) & 65535);
      var $call505=_mrb_sym2name($471, $conv504);
      var $call506=_printf(((111472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call505,tempInt));
      label = 213; break;
    case 124: 
      var $474=$mrb_addr;
      var $475=$tree_addr;
      var $476=$475;
      var $conv508=(($476) & 65535);
      var $call509=_mrb_sym2name($474, $conv508);
      var $call510=_printf(((111456)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call509,tempInt));
      label = 213; break;
    case 125: 
      var $477=$mrb_addr;
      var $478=$tree_addr;
      var $479=$478;
      var $conv512=(($479) & 65535);
      var $call513=_mrb_sym2name($477, $conv512);
      var $call514=_printf(((111440)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call513,tempInt));
      label = 213; break;
    case 126: 
      var $call516=_printf(((111424)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $480=$offset_addr;
      var $add517=((($480)+(1))|0);
      _dump_prefix($add517);
      var $call518=_printf(((112788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $481=$mrb_addr;
      var $482=$tree_addr;
      var $car519=(($482)|0);
      var $483=HEAP32[(($car519)>>2)];
      var $484=$offset_addr;
      var $add520=((($484)+(2))|0);
      _parser_dump($481, $483, $add520);
      var $485=$offset_addr;
      var $add521=((($485)+(1))|0);
      _dump_prefix($add521);
      var $call522=_printf(((112688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $486=$mrb_addr;
      var $487=$tree_addr;
      var $cdr523=(($487+4)|0);
      var $488=HEAP32[(($cdr523)>>2)];
      var $489=$offset_addr;
      var $add524=((($489)+(2))|0);
      _parser_dump($486, $488, $add524);
      label = 213; break;
    case 127: 
      var $490=$tree_addr;
      var $491=$490;
      var $call526=_printf(((111376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$491,tempInt));
      label = 213; break;
    case 128: 
      var $492=$tree_addr;
      var $493=$492;
      var $call528=_printf(((111348)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$493,tempInt));
      label = 213; break;
    case 129: 
      var $494=$mrb_addr;
      var $495=$tree_addr;
      var $496=$495;
      var $conv530=(($496) & 65535);
      var $call531=_mrb_sym2name($494, $conv530);
      var $call532=_printf(((111332)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call531,tempInt));
      label = 213; break;
    case 130: 
      var $call534=_printf(((111296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $497=$mrb_addr;
      var $498=$tree_addr;
      var $499=$offset_addr;
      var $add535=((($499)+(1))|0);
      _parser_dump($497, $498, $add535);
      label = 213; break;
    case 131: 
      var $500=$tree_addr;
      var $car537=(($500)|0);
      var $501=HEAP32[(($car537)>>2)];
      var $502=$501;
      var $503=$tree_addr;
      var $cdr538=(($503+4)|0);
      var $504=HEAP32[(($cdr538)>>2)];
      var $car539=(($504)|0);
      var $505=HEAP32[(($car539)>>2)];
      var $506=$505;
      var $call540=_printf(((111256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$502,HEAP32[(((tempInt)+(4))>>2)]=$506,tempInt));
      label = 213; break;
    case 132: 
      var $507=$tree_addr;
      var $508=$507;
      var $call542=_printf(((111240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$508,tempInt));
      label = 213; break;
    case 133: 
      var $call544=_printf(((111032)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $509=$mrb_addr;
      var $510=$tree_addr;
      var $511=$offset_addr;
      var $add545=((($511)+(1))|0);
      _parser_dump($509, $510, $add545);
      label = 213; break;
    case 134: 
      var $512=$tree_addr;
      var $car547=(($512)|0);
      var $513=HEAP32[(($car547)>>2)];
      var $514=$513;
      var $515=$tree_addr;
      var $cdr548=(($515+4)|0);
      var $516=HEAP32[(($cdr548)>>2)];
      var $517=$516;
      var $call549=_printf(((110992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$514,HEAP32[(((tempInt)+(4))>>2)]=$517,tempInt));
      label = 213; break;
    case 135: 
      var $call551=_printf(((110980)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $518=$mrb_addr;
      var $519=$tree_addr;
      var $520=$offset_addr;
      var $add552=((($520)+(1))|0);
      _dump_recur($518, $519, $add552);
      label = 213; break;
    case 136: 
      var $521=$tree_addr;
      var $car554=(($521)|0);
      var $522=HEAP32[(($car554)>>2)];
      var $523=$522;
      var $524=$tree_addr;
      var $cdr555=(($524+4)|0);
      var $525=HEAP32[(($cdr555)>>2)];
      var $526=$525;
      var $call556=_printf(((110956)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$523,HEAP32[(((tempInt)+(4))>>2)]=$526,tempInt));
      label = 213; break;
    case 137: 
      var $call558=_printf(((110916)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $527=$mrb_addr;
      var $528=$tree_addr;
      var $529=$offset_addr;
      var $add559=((($529)+(1))|0);
      _dump_recur($527, $528, $add559);
      label = 213; break;
    case 138: 
      var $530=$tree_addr;
      var $car561=(($530)|0);
      var $531=HEAP32[(($car561)>>2)];
      var $532=$531;
      var $533=$tree_addr;
      var $cdr562=(($533+4)|0);
      var $534=HEAP32[(($cdr562)>>2)];
      var $535=$534;
      var $call563=_printf(((110884)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$532,HEAP32[(((tempInt)+(4))>>2)]=$535,tempInt));
      label = 213; break;
    case 139: 
      var $call565=_printf(((110872)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $536=$mrb_addr;
      var $537=$tree_addr;
      var $car566=(($537)|0);
      var $538=HEAP32[(($car566)>>2)];
      var $539=$offset_addr;
      var $add567=((($539)+(1))|0);
      _dump_recur($536, $538, $add567);
      var $540=$offset_addr;
      _dump_prefix($540);
      var $541=$tree_addr;
      var $cdr568=(($541+4)|0);
      var $542=HEAP32[(($cdr568)>>2)];
      var $cdr569=(($542+4)|0);
      var $543=HEAP32[(($cdr569)>>2)];
      var $car570=(($543)|0);
      var $544=HEAP32[(($car570)>>2)];
      var $545=$544;
      var $call571=_printf(((110808)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$545,tempInt));
      var $546=$offset_addr;
      _dump_prefix($546);
      var $547=$tree_addr;
      var $cdr572=(($547+4)|0);
      var $548=HEAP32[(($cdr572)>>2)];
      var $cdr573=(($548+4)|0);
      var $549=HEAP32[(($cdr573)>>2)];
      var $cdr574=(($549+4)|0);
      var $550=HEAP32[(($cdr574)>>2)];
      var $551=$550;
      var $call575=_printf(((110760)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$551,tempInt));
      label = 213; break;
    case 140: 
      var $552=$mrb_addr;
      var $553=$tree_addr;
      var $554=$553;
      var $conv577=(($554) & 65535);
      var $call578=_mrb_sym2name($552, $conv577);
      var $call579=_printf(((110744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call578,tempInt));
      label = 213; break;
    case 141: 
      var $call581=_printf(((110520)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 213; break;
    case 142: 
      var $call583=_printf(((110500)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 213; break;
    case 143: 
      var $call585=_printf(((110488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 213; break;
    case 144: 
      var $call587=_printf(((110472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 213; break;
    case 145: 
      var $555=$mrb_addr;
      var $556=$tree_addr;
      var $car589=(($556)|0);
      var $557=HEAP32[(($car589)>>2)];
      var $558=$557;
      var $conv590=(($558) & 65535);
      var $call591=_mrb_sym2name($555, $conv590);
      var $559=$mrb_addr;
      var $560=$tree_addr;
      var $cdr592=(($560+4)|0);
      var $561=HEAP32[(($cdr592)>>2)];
      var $562=$561;
      var $conv593=(($562) & 65535);
      var $call594=_mrb_sym2name($559, $conv593);
      var $call595=_printf(((110416)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call591,HEAP32[(((tempInt)+(4))>>2)]=$call594,tempInt));
      label = 213; break;
    case 146: 
      var $call597=_printf(((110376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $563=$tree_addr;
      $t=$563;
      label = 147; break;
    case 147: 
      var $564=$t;
      var $tobool599=(($564)|(0))!=0;
      if ($tobool599) { label = 148; break; } else { label = 149; break; }
    case 148: 
      var $565=$mrb_addr;
      var $566=$t;
      var $car601=(($566)|0);
      var $567=HEAP32[(($car601)>>2)];
      var $568=$567;
      var $conv602=(($568) & 65535);
      var $call603=_mrb_sym2name($565, $conv602);
      var $call604=_printf(((110368)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call603,tempInt));
      var $569=$t;
      var $cdr605=(($569+4)|0);
      var $570=HEAP32[(($cdr605)>>2)];
      $t=$570;
      label = 147; break;
    case 149: 
      var $call607=_printf(((110348)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 213; break;
    case 150: 
      var $call609=_printf(((110308)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $571=$tree_addr;
      var $car610=(($571)|0);
      var $572=HEAP32[(($car610)>>2)];
      var $car611=(($572)|0);
      var $573=HEAP32[(($car611)>>2)];
      var $cmp612=(($573)|(0))==0;
      if ($cmp612) { label = 151; break; } else { label = 152; break; }
    case 151: 
      var $574=$offset_addr;
      var $add615=((($574)+(1))|0);
      _dump_prefix($add615);
      var $575=$mrb_addr;
      var $576=$tree_addr;
      var $car616=(($576)|0);
      var $577=HEAP32[(($car616)>>2)];
      var $cdr617=(($577+4)|0);
      var $578=HEAP32[(($cdr617)>>2)];
      var $579=$578;
      var $conv618=(($579) & 65535);
      var $call619=_mrb_sym2name($575, $conv618);
      var $call620=_printf(((110300)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call619,tempInt));
      label = 156; break;
    case 152: 
      var $580=$tree_addr;
      var $car622=(($580)|0);
      var $581=HEAP32[(($car622)>>2)];
      var $car623=(($581)|0);
      var $582=HEAP32[(($car623)>>2)];
      var $cmp624=(($582)|(0))==1;
      if ($cmp624) { label = 153; break; } else { label = 154; break; }
    case 153: 
      var $583=$offset_addr;
      var $add627=((($583)+(1))|0);
      _dump_prefix($add627);
      var $584=$mrb_addr;
      var $585=$tree_addr;
      var $car628=(($585)|0);
      var $586=HEAP32[(($car628)>>2)];
      var $cdr629=(($586+4)|0);
      var $587=HEAP32[(($cdr629)>>2)];
      var $588=$587;
      var $conv630=(($588) & 65535);
      var $call631=_mrb_sym2name($584, $conv630);
      var $call632=_printf(((113392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call631,tempInt));
      label = 155; break;
    case 154: 
      var $589=$mrb_addr;
      var $590=$tree_addr;
      var $car634=(($590)|0);
      var $591=HEAP32[(($car634)>>2)];
      var $car635=(($591)|0);
      var $592=HEAP32[(($car635)>>2)];
      var $593=$offset_addr;
      var $add636=((($593)+(1))|0);
      _parser_dump($589, $592, $add636);
      var $594=$offset_addr;
      var $add637=((($594)+(1))|0);
      _dump_prefix($add637);
      var $595=$mrb_addr;
      var $596=$tree_addr;
      var $car638=(($596)|0);
      var $597=HEAP32[(($car638)>>2)];
      var $cdr639=(($597+4)|0);
      var $598=HEAP32[(($cdr639)>>2)];
      var $599=$598;
      var $conv640=(($599) & 65535);
      var $call641=_mrb_sym2name($595, $conv640);
      var $call642=_printf(((113392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call641,tempInt));
      label = 155; break;
    case 155: 
      label = 156; break;
    case 156: 
      var $600=$tree_addr;
      var $cdr645=(($600+4)|0);
      var $601=HEAP32[(($cdr645)>>2)];
      var $car646=(($601)|0);
      var $602=HEAP32[(($car646)>>2)];
      var $tobool647=(($602)|(0))!=0;
      if ($tobool647) { label = 157; break; } else { label = 158; break; }
    case 157: 
      var $603=$offset_addr;
      var $add649=((($603)+(1))|0);
      _dump_prefix($add649);
      var $call650=_printf(((110104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $604=$mrb_addr;
      var $605=$tree_addr;
      var $cdr651=(($605+4)|0);
      var $606=HEAP32[(($cdr651)>>2)];
      var $car652=(($606)|0);
      var $607=HEAP32[(($car652)>>2)];
      var $608=$offset_addr;
      var $add653=((($608)+(2))|0);
      _parser_dump($604, $607, $add653);
      label = 158; break;
    case 158: 
      var $609=$offset_addr;
      var $add655=((($609)+(1))|0);
      _dump_prefix($add655);
      var $call656=_printf(((96476)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $610=$mrb_addr;
      var $611=$tree_addr;
      var $cdr657=(($611+4)|0);
      var $612=HEAP32[(($cdr657)>>2)];
      var $cdr658=(($612+4)|0);
      var $613=HEAP32[(($cdr658)>>2)];
      var $car659=(($613)|0);
      var $614=HEAP32[(($car659)>>2)];
      var $cdr660=(($614+4)|0);
      var $615=HEAP32[(($cdr660)>>2)];
      var $616=$offset_addr;
      var $add661=((($616)+(2))|0);
      _parser_dump($610, $615, $add661);
      label = 213; break;
    case 159: 
      var $call663=_printf(((110088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $617=$tree_addr;
      var $car664=(($617)|0);
      var $618=HEAP32[(($car664)>>2)];
      var $car665=(($618)|0);
      var $619=HEAP32[(($car665)>>2)];
      var $cmp666=(($619)|(0))==0;
      if ($cmp666) { label = 160; break; } else { label = 161; break; }
    case 160: 
      var $620=$offset_addr;
      var $add669=((($620)+(1))|0);
      _dump_prefix($add669);
      var $621=$mrb_addr;
      var $622=$tree_addr;
      var $car670=(($622)|0);
      var $623=HEAP32[(($car670)>>2)];
      var $cdr671=(($623+4)|0);
      var $624=HEAP32[(($cdr671)>>2)];
      var $625=$624;
      var $conv672=(($625) & 65535);
      var $call673=_mrb_sym2name($621, $conv672);
      var $call674=_printf(((110300)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call673,tempInt));
      label = 165; break;
    case 161: 
      var $626=$tree_addr;
      var $car676=(($626)|0);
      var $627=HEAP32[(($car676)>>2)];
      var $car677=(($627)|0);
      var $628=HEAP32[(($car677)>>2)];
      var $cmp678=(($628)|(0))==1;
      if ($cmp678) { label = 162; break; } else { label = 163; break; }
    case 162: 
      var $629=$offset_addr;
      var $add681=((($629)+(1))|0);
      _dump_prefix($add681);
      var $630=$mrb_addr;
      var $631=$tree_addr;
      var $car682=(($631)|0);
      var $632=HEAP32[(($car682)>>2)];
      var $cdr683=(($632+4)|0);
      var $633=HEAP32[(($cdr683)>>2)];
      var $634=$633;
      var $conv684=(($634) & 65535);
      var $call685=_mrb_sym2name($630, $conv684);
      var $call686=_printf(((113392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call685,tempInt));
      label = 164; break;
    case 163: 
      var $635=$mrb_addr;
      var $636=$tree_addr;
      var $car688=(($636)|0);
      var $637=HEAP32[(($car688)>>2)];
      var $car689=(($637)|0);
      var $638=HEAP32[(($car689)>>2)];
      var $639=$offset_addr;
      var $add690=((($639)+(1))|0);
      _parser_dump($635, $638, $add690);
      var $640=$offset_addr;
      var $add691=((($640)+(1))|0);
      _dump_prefix($add691);
      var $641=$mrb_addr;
      var $642=$tree_addr;
      var $car692=(($642)|0);
      var $643=HEAP32[(($car692)>>2)];
      var $cdr693=(($643+4)|0);
      var $644=HEAP32[(($cdr693)>>2)];
      var $645=$644;
      var $conv694=(($645) & 65535);
      var $call695=_mrb_sym2name($641, $conv694);
      var $call696=_printf(((113392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call695,tempInt));
      label = 164; break;
    case 164: 
      label = 165; break;
    case 165: 
      var $646=$offset_addr;
      var $add699=((($646)+(1))|0);
      _dump_prefix($add699);
      var $call700=_printf(((96476)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $647=$mrb_addr;
      var $648=$tree_addr;
      var $cdr701=(($648+4)|0);
      var $649=HEAP32[(($cdr701)>>2)];
      var $car702=(($649)|0);
      var $650=HEAP32[(($car702)>>2)];
      var $cdr703=(($650+4)|0);
      var $651=HEAP32[(($cdr703)>>2)];
      var $652=$offset_addr;
      var $add704=((($652)+(2))|0);
      _parser_dump($647, $651, $add704);
      label = 213; break;
    case 166: 
      var $call706=_printf(((110072)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $653=$mrb_addr;
      var $654=$tree_addr;
      var $car707=(($654)|0);
      var $655=HEAP32[(($car707)>>2)];
      var $656=$offset_addr;
      var $add708=((($656)+(1))|0);
      _parser_dump($653, $655, $add708);
      var $657=$offset_addr;
      var $add709=((($657)+(1))|0);
      _dump_prefix($add709);
      var $call710=_printf(((96476)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $658=$mrb_addr;
      var $659=$tree_addr;
      var $cdr711=(($659+4)|0);
      var $660=HEAP32[(($cdr711)>>2)];
      var $car712=(($660)|0);
      var $661=HEAP32[(($car712)>>2)];
      var $cdr713=(($661+4)|0);
      var $662=HEAP32[(($cdr713)>>2)];
      var $663=$offset_addr;
      var $add714=((($663)+(2))|0);
      _parser_dump($658, $662, $add714);
      label = 213; break;
    case 167: 
      var $call716=_printf(((110052)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $664=$offset_addr;
      var $add717=((($664)+(1))|0);
      _dump_prefix($add717);
      var $665=$mrb_addr;
      var $666=$tree_addr;
      var $car718=(($666)|0);
      var $667=HEAP32[(($car718)>>2)];
      var $668=$667;
      var $conv719=(($668) & 65535);
      var $call720=_mrb_sym2name($665, $conv719);
      var $call721=_printf(((110032)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call720,tempInt));
      var $669=$tree_addr;
      var $cdr722=(($669+4)|0);
      var $670=HEAP32[(($cdr722)>>2)];
      $tree_addr=$670;
      var $671=$tree_addr;
      var $car724=(($671)|0);
      var $672=HEAP32[(($car724)>>2)];
      $n2723=$672;
      var $673=$n2723;
      var $tobool725=(($673)|(0))!=0;
      if ($tobool725) { label = 168; break; } else { label = 178; break; }
    case 168: 
      var $674=$n2723;
      var $car727=(($674)|0);
      var $675=HEAP32[(($car727)>>2)];
      var $tobool728=(($675)|(0))!=0;
      if ($tobool728) { label = 170; break; } else { label = 169; break; }
    case 169: 
      var $676=$n2723;
      var $cdr730=(($676+4)|0);
      var $677=HEAP32[(($cdr730)>>2)];
      var $tobool731=(($677)|(0))!=0;
      if ($tobool731) { label = 170; break; } else { label = 178; break; }
    case 170: 
      var $678=$offset_addr;
      var $add733=((($678)+(1))|0);
      _dump_prefix($add733);
      var $call734=_printf(((93408)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $679=$offset_addr;
      var $add735=((($679)+(2))|0);
      _dump_prefix($add735);
      label = 171; break;
    case 171: 
      var $680=$n2723;
      var $tobool737=(($680)|(0))!=0;
      if ($tobool737) { label = 172; break; } else { label = 177; break; }
    case 172: 
      var $681=$n2723;
      var $car739=(($681)|0);
      var $682=HEAP32[(($car739)>>2)];
      var $tobool740=(($682)|(0))!=0;
      if ($tobool740) { label = 173; break; } else { label = 176; break; }
    case 173: 
      var $683=$n2723;
      var $684=$tree_addr;
      var $car742=(($684)|0);
      var $685=HEAP32[(($car742)>>2)];
      var $cmp743=(($683)|(0))!=(($685)|(0));
      if ($cmp743) { label = 174; break; } else { label = 175; break; }
    case 174: 
      var $call746=_printf(((93360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 175; break;
    case 175: 
      var $686=$mrb_addr;
      var $687=$n2723;
      var $car748=(($687)|0);
      var $688=HEAP32[(($car748)>>2)];
      var $689=$688;
      var $conv749=(($689) & 65535);
      var $call750=_mrb_sym2name($686, $conv749);
      var $call751=_printf(((93332)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call750,tempInt));
      label = 176; break;
    case 176: 
      var $690=$n2723;
      var $cdr753=(($690+4)|0);
      var $691=HEAP32[(($cdr753)>>2)];
      $n2723=$691;
      label = 171; break;
    case 177: 
      var $call755=_printf(((95764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 178; break;
    case 178: 
      var $692=$tree_addr;
      var $cdr757=(($692+4)|0);
      var $693=HEAP32[(($cdr757)>>2)];
      $tree_addr=$693;
      var $694=$tree_addr;
      var $car758=(($694)|0);
      var $695=HEAP32[(($car758)>>2)];
      var $tobool759=(($695)|(0))!=0;
      if ($tobool759) { label = 179; break; } else { label = 193; break; }
    case 179: 
      var $696=$tree_addr;
      var $car762=(($696)|0);
      var $697=HEAP32[(($car762)>>2)];
      $n761=$697;
      var $698=$n761;
      var $car763=(($698)|0);
      var $699=HEAP32[(($car763)>>2)];
      var $tobool764=(($699)|(0))!=0;
      if ($tobool764) { label = 180; break; } else { label = 181; break; }
    case 180: 
      var $700=$offset_addr;
      var $add766=((($700)+(1))|0);
      _dump_prefix($add766);
      var $call767=_printf(((95372)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $701=$mrb_addr;
      var $702=$n761;
      var $car768=(($702)|0);
      var $703=HEAP32[(($car768)>>2)];
      var $704=$offset_addr;
      var $add769=((($704)+(2))|0);
      _dump_recur($701, $703, $add769);
      label = 181; break;
    case 181: 
      var $705=$n761;
      var $cdr771=(($705+4)|0);
      var $706=HEAP32[(($cdr771)>>2)];
      $n761=$706;
      var $707=$n761;
      var $car772=(($707)|0);
      var $708=HEAP32[(($car772)>>2)];
      var $tobool773=(($708)|(0))!=0;
      if ($tobool773) { label = 182; break; } else { label = 186; break; }
    case 182: 
      var $709=$offset_addr;
      var $add775=((($709)+(1))|0);
      _dump_prefix($add775);
      var $call776=_printf(((95324)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $710=$n761;
      var $car778=(($710)|0);
      var $711=HEAP32[(($car778)>>2)];
      $n2777=$711;
      label = 183; break;
    case 183: 
      var $712=$n2777;
      var $tobool780=(($712)|(0))!=0;
      if ($tobool780) { label = 184; break; } else { label = 185; break; }
    case 184: 
      var $713=$offset_addr;
      var $add782=((($713)+(2))|0);
      _dump_prefix($add782);
      var $714=$mrb_addr;
      var $715=$n2777;
      var $car783=(($715)|0);
      var $716=HEAP32[(($car783)>>2)];
      var $car784=(($716)|0);
      var $717=HEAP32[(($car784)>>2)];
      var $718=$717;
      var $conv785=(($718) & 65535);
      var $call786=_mrb_sym2name($714, $conv785);
      var $call787=_printf(((95264)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call786,tempInt));
      var $719=$mrb_addr;
      var $720=$n2777;
      var $car788=(($720)|0);
      var $721=HEAP32[(($car788)>>2)];
      var $cdr789=(($721+4)|0);
      var $722=HEAP32[(($cdr789)>>2)];
      _parser_dump($719, $722, 0);
      var $723=$n2777;
      var $cdr790=(($723+4)|0);
      var $724=HEAP32[(($cdr790)>>2)];
      $n2777=$724;
      label = 183; break;
    case 185: 
      label = 186; break;
    case 186: 
      var $725=$n761;
      var $cdr793=(($725+4)|0);
      var $726=HEAP32[(($cdr793)>>2)];
      $n761=$726;
      var $727=$n761;
      var $car794=(($727)|0);
      var $728=HEAP32[(($car794)>>2)];
      var $tobool795=(($728)|(0))!=0;
      if ($tobool795) { label = 187; break; } else { label = 188; break; }
    case 187: 
      var $729=$offset_addr;
      var $add797=((($729)+(1))|0);
      _dump_prefix($add797);
      var $730=$mrb_addr;
      var $731=$n761;
      var $car798=(($731)|0);
      var $732=HEAP32[(($car798)>>2)];
      var $733=$732;
      var $conv799=(($733) & 65535);
      var $call800=_mrb_sym2name($730, $conv799);
      var $call801=_printf(((95172)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call800,tempInt));
      label = 188; break;
    case 188: 
      var $734=$n761;
      var $cdr803=(($734+4)|0);
      var $735=HEAP32[(($cdr803)>>2)];
      $n761=$735;
      var $736=$n761;
      var $car804=(($736)|0);
      var $737=HEAP32[(($car804)>>2)];
      var $tobool805=(($737)|(0))!=0;
      if ($tobool805) { label = 189; break; } else { label = 190; break; }
    case 189: 
      var $738=$offset_addr;
      var $add807=((($738)+(1))|0);
      _dump_prefix($add807);
      var $call808=_printf(((95120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $739=$mrb_addr;
      var $740=$n761;
      var $car809=(($740)|0);
      var $741=HEAP32[(($car809)>>2)];
      var $742=$offset_addr;
      var $add810=((($742)+(2))|0);
      _dump_recur($739, $741, $add810);
      label = 190; break;
    case 190: 
      var $743=$n761;
      var $cdr812=(($743+4)|0);
      var $744=HEAP32[(($cdr812)>>2)];
      $n761=$744;
      var $745=$n761;
      var $tobool813=(($745)|(0))!=0;
      if ($tobool813) { label = 191; break; } else { label = 192; break; }
    case 191: 
      var $746=$offset_addr;
      var $add815=((($746)+(1))|0);
      _dump_prefix($add815);
      var $747=$mrb_addr;
      var $748=$n761;
      var $749=$748;
      var $conv816=(($749) & 65535);
      var $call817=_mrb_sym2name($747, $conv816);
      var $call818=_printf(((95048)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call817,tempInt));
      label = 192; break;
    case 192: 
      label = 193; break;
    case 193: 
      var $750=$mrb_addr;
      var $751=$tree_addr;
      var $cdr821=(($751+4)|0);
      var $752=HEAP32[(($cdr821)>>2)];
      var $car822=(($752)|0);
      var $753=HEAP32[(($car822)>>2)];
      var $754=$offset_addr;
      var $add823=((($754)+(1))|0);
      _parser_dump($750, $753, $add823);
      label = 213; break;
    case 194: 
      var $call825=_printf(((110000)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $755=$mrb_addr;
      var $756=$tree_addr;
      var $car826=(($756)|0);
      var $757=HEAP32[(($car826)>>2)];
      var $758=$offset_addr;
      var $add827=((($758)+(1))|0);
      _parser_dump($755, $757, $add827);
      var $759=$tree_addr;
      var $cdr828=(($759+4)|0);
      var $760=HEAP32[(($cdr828)>>2)];
      $tree_addr=$760;
      var $761=$offset_addr;
      var $add829=((($761)+(1))|0);
      _dump_prefix($add829);
      var $762=$mrb_addr;
      var $763=$tree_addr;
      var $car830=(($763)|0);
      var $764=HEAP32[(($car830)>>2)];
      var $765=$764;
      var $conv831=(($765) & 65535);
      var $call832=_mrb_sym2name($762, $conv831);
      var $call833=_printf(((110300)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call832,tempInt));
      var $766=$tree_addr;
      var $cdr834=(($766+4)|0);
      var $767=HEAP32[(($cdr834)>>2)];
      var $cdr835=(($767+4)|0);
      var $768=HEAP32[(($cdr835)>>2)];
      $tree_addr=$768;
      var $769=$tree_addr;
      var $car836=(($769)|0);
      var $770=HEAP32[(($car836)>>2)];
      var $tobool837=(($770)|(0))!=0;
      if ($tobool837) { label = 195; break; } else { label = 209; break; }
    case 195: 
      var $771=$tree_addr;
      var $car840=(($771)|0);
      var $772=HEAP32[(($car840)>>2)];
      $n839=$772;
      var $773=$n839;
      var $car841=(($773)|0);
      var $774=HEAP32[(($car841)>>2)];
      var $tobool842=(($774)|(0))!=0;
      if ($tobool842) { label = 196; break; } else { label = 197; break; }
    case 196: 
      var $775=$offset_addr;
      var $add844=((($775)+(1))|0);
      _dump_prefix($add844);
      var $call845=_printf(((95372)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $776=$mrb_addr;
      var $777=$n839;
      var $car846=(($777)|0);
      var $778=HEAP32[(($car846)>>2)];
      var $779=$offset_addr;
      var $add847=((($779)+(2))|0);
      _dump_recur($776, $778, $add847);
      label = 197; break;
    case 197: 
      var $780=$n839;
      var $cdr849=(($780+4)|0);
      var $781=HEAP32[(($cdr849)>>2)];
      $n839=$781;
      var $782=$n839;
      var $car850=(($782)|0);
      var $783=HEAP32[(($car850)>>2)];
      var $tobool851=(($783)|(0))!=0;
      if ($tobool851) { label = 198; break; } else { label = 202; break; }
    case 198: 
      var $784=$offset_addr;
      var $add853=((($784)+(1))|0);
      _dump_prefix($add853);
      var $call854=_printf(((95324)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $785=$n839;
      var $car856=(($785)|0);
      var $786=HEAP32[(($car856)>>2)];
      $n2855=$786;
      label = 199; break;
    case 199: 
      var $787=$n2855;
      var $tobool858=(($787)|(0))!=0;
      if ($tobool858) { label = 200; break; } else { label = 201; break; }
    case 200: 
      var $788=$offset_addr;
      var $add860=((($788)+(2))|0);
      _dump_prefix($add860);
      var $789=$mrb_addr;
      var $790=$n2855;
      var $car861=(($790)|0);
      var $791=HEAP32[(($car861)>>2)];
      var $car862=(($791)|0);
      var $792=HEAP32[(($car862)>>2)];
      var $793=$792;
      var $conv863=(($793) & 65535);
      var $call864=_mrb_sym2name($789, $conv863);
      var $call865=_printf(((95264)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call864,tempInt));
      var $794=$mrb_addr;
      var $795=$n2855;
      var $car866=(($795)|0);
      var $796=HEAP32[(($car866)>>2)];
      var $cdr867=(($796+4)|0);
      var $797=HEAP32[(($cdr867)>>2)];
      _parser_dump($794, $797, 0);
      var $798=$n2855;
      var $cdr868=(($798+4)|0);
      var $799=HEAP32[(($cdr868)>>2)];
      $n2855=$799;
      label = 199; break;
    case 201: 
      label = 202; break;
    case 202: 
      var $800=$n839;
      var $cdr871=(($800+4)|0);
      var $801=HEAP32[(($cdr871)>>2)];
      $n839=$801;
      var $802=$n839;
      var $car872=(($802)|0);
      var $803=HEAP32[(($car872)>>2)];
      var $tobool873=(($803)|(0))!=0;
      if ($tobool873) { label = 203; break; } else { label = 204; break; }
    case 203: 
      var $804=$offset_addr;
      var $add875=((($804)+(1))|0);
      _dump_prefix($add875);
      var $805=$mrb_addr;
      var $806=$n839;
      var $car876=(($806)|0);
      var $807=HEAP32[(($car876)>>2)];
      var $808=$807;
      var $conv877=(($808) & 65535);
      var $call878=_mrb_sym2name($805, $conv877);
      var $call879=_printf(((95172)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call878,tempInt));
      label = 204; break;
    case 204: 
      var $809=$n839;
      var $cdr881=(($809+4)|0);
      var $810=HEAP32[(($cdr881)>>2)];
      $n839=$810;
      var $811=$n839;
      var $car882=(($811)|0);
      var $812=HEAP32[(($car882)>>2)];
      var $tobool883=(($812)|(0))!=0;
      if ($tobool883) { label = 205; break; } else { label = 206; break; }
    case 205: 
      var $813=$offset_addr;
      var $add885=((($813)+(1))|0);
      _dump_prefix($add885);
      var $call886=_printf(((95120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $814=$mrb_addr;
      var $815=$n839;
      var $car887=(($815)|0);
      var $816=HEAP32[(($car887)>>2)];
      var $817=$offset_addr;
      var $add888=((($817)+(2))|0);
      _dump_recur($814, $816, $add888);
      label = 206; break;
    case 206: 
      var $818=$n839;
      var $cdr890=(($818+4)|0);
      var $819=HEAP32[(($cdr890)>>2)];
      $n839=$819;
      var $820=$n839;
      var $tobool891=(($820)|(0))!=0;
      if ($tobool891) { label = 207; break; } else { label = 208; break; }
    case 207: 
      var $821=$offset_addr;
      var $add893=((($821)+(1))|0);
      _dump_prefix($add893);
      var $822=$mrb_addr;
      var $823=$n839;
      var $824=$823;
      var $conv894=(($824) & 65535);
      var $call895=_mrb_sym2name($822, $conv894);
      var $call896=_printf(((95048)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call895,tempInt));
      label = 208; break;
    case 208: 
      label = 209; break;
    case 209: 
      var $825=$tree_addr;
      var $cdr899=(($825+4)|0);
      var $826=HEAP32[(($cdr899)>>2)];
      $tree_addr=$826;
      var $827=$mrb_addr;
      var $828=$tree_addr;
      var $car900=(($828)|0);
      var $829=HEAP32[(($car900)>>2)];
      var $830=$offset_addr;
      var $add901=((($830)+(1))|0);
      _parser_dump($827, $829, $add901);
      label = 213; break;
    case 210: 
      var $call903=_printf(((109984)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $831=$mrb_addr;
      var $832=$tree_addr;
      var $833=$offset_addr;
      var $add904=((($833)+(1))|0);
      _parser_dump($831, $832, $add904);
      label = 213; break;
    case 211: 
      var $call906=_printf(((109960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $834=$mrb_addr;
      var $835=$tree_addr;
      var $836=$835;
      var $doc=(($836+16)|0);
      var $837=HEAP32[(($doc)>>2)];
      var $838=$offset_addr;
      var $add907=((($838)+(1))|0);
      _parser_dump($834, $837, $add907);
      label = 213; break;
    case 212: 
      var $839=$n;
      var $840=$n;
      var $call908=_printf(((109920)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$839,HEAP32[(((tempInt)+(4))>>2)]=$840,tempInt));
      label = 213; break;
    case 213: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_parser_new($mrb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $pool;
      var $p;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_pool_open($0);
      $pool=$call;
      var $1=$pool;
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=0;
      label = 7; break;
    case 4: 
      var $2=$pool;
      var $call1=_mrb_pool_alloc($2, 1424);
      var $3=$call1;
      $p=$3;
      var $4=$p;
      var $tobool2=(($4)|(0))!=0;
      if ($tobool2) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $retval=0;
      label = 7; break;
    case 6: 
      var $5=$p;
      var $6=$5;
      assert(1424 % 1 === 0);_memcpy($6, 77740, 1424);
      var $7=$mrb_addr;
      var $8=$p;
      var $mrb5=(($8)|0);
      HEAP32[(($mrb5)>>2)]=$7;
      var $9=$pool;
      var $10=$p;
      var $pool6=(($10+4)|0);
      HEAP32[(($pool6)>>2)]=$9;
      var $11=$p;
      var $in_single=(($11+68)|0);
      HEAP32[(($in_single)>>2)]=0;
      var $12=$p;
      var $in_def=(($12+64)|0);
      HEAP32[(($in_def)>>2)]=0;
      var $13=$p;
      var $send=(($13+16)|0);
      HEAP32[(($send)>>2)]=0;
      var $14=$p;
      var $s=(($14+12)|0);
      HEAP32[(($s)>>2)]=0;
      var $15=$p;
      var $f=(($15+20)|0);
      HEAP32[(($f)>>2)]=0;
      var $16=$p;
      var $cmd_start=(($16+72)|0);
      HEAP32[(($cmd_start)>>2)]=1;
      var $17=$p;
      var $in_single7=(($17+68)|0);
      HEAP32[(($in_single7)>>2)]=0;
      var $18=$p;
      var $in_def8=(($18+64)|0);
      HEAP32[(($in_def8)>>2)]=0;
      var $19=$p;
      var $capture_errors=(($19+1140)|0);
      HEAP32[(($capture_errors)>>2)]=0;
      var $20=$p;
      var $lineno=(($20+32)|0);
      HEAP32[(($lineno)>>2)]=1;
      var $21=$p;
      var $column=(($21+36)|0);
      HEAP32[(($column)>>2)]=0;
      var $22=$p;
      var $lex_strterm=(($22+44)|0);
      HEAP32[(($lex_strterm)>>2)]=0;
      var $23=$p;
      var $parsing_heredoc=(($23+1116)|0);
      HEAP32[(($parsing_heredoc)>>2)]=0;
      var $24=$p;
      var $heredocs=(($24+1112)|0);
      HEAP32[(($heredocs)>>2)]=0;
      var $25=$p;
      $retval=$25;
      label = 7; break;
    case 7: 
      var $26=$retval;
      return $26;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_parser_free($p) {
  var label = 0;
  var $p_addr;
  $p_addr=$p;
  var $0=$p_addr;
  var $pool=(($0+4)|0);
  var $1=HEAP32[(($pool)>>2)];
  _mrb_pool_close($1);
  return;
}
function _mrb_parse_nstring($mrb, $s, $len, $c) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $s_addr;
      var $len_addr;
      var $c_addr;
      var $p;
      $mrb_addr=$mrb;
      $s_addr=$s;
      $len_addr=$len;
      $c_addr=$c;
      var $0=$mrb_addr;
      var $call=_mrb_parser_new($0);
      $p=$call;
      var $1=$p;
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      var $2=$s_addr;
      var $3=$p;
      var $s1=(($3+12)|0);
      HEAP32[(($s1)>>2)]=$2;
      var $4=$s_addr;
      var $5=$len_addr;
      var $add_ptr=(($4+$5)|0);
      var $6=$p;
      var $send=(($6+16)|0);
      HEAP32[(($send)>>2)]=$add_ptr;
      var $7=$p;
      var $8=$c_addr;
      _mrb_parser_parse($7, $8);
      var $9=$p;
      $retval=$9;
      label = 5; break;
    case 5: 
      var $10=$retval;
      return $10;
    default: assert(0, "bad label: " + label);
  }
}
function _load_exec($agg_result, $mrb, $p, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 328)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $p_addr;
      var $c_addr;
      var $n;
      var $v=__stackBase__;
      var $buf=(__stackBase__)+(12);
      var $tmp=(__stackBase__)+(268);
      var $tmp12=(__stackBase__)+(280);
      var $tmp20=(__stackBase__)+(292);
      var $agg_tmp=(__stackBase__)+(304);
      var $tmp38=(__stackBase__)+(316);
      $mrb_addr=$mrb;
      $p_addr=$p;
      $c_addr=$c;
      var $0=$p_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_undef_value246($agg_result);
      label = 20; break;
    case 4: 
      var $1=$p_addr;
      var $tree=(($1+1136)|0);
      var $2=HEAP32[(($tree)>>2)];
      var $tobool1=(($2)|(0))!=0;
      if ($tobool1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$p_addr;
      var $nerr=(($3+1128)|0);
      var $4=HEAP32[(($nerr)>>2)];
      var $tobool2=(($4)|(0))!=0;
      if ($tobool2) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $5=$p_addr;
      var $capture_errors=(($5+1140)|0);
      var $6=HEAP32[(($capture_errors)>>2)];
      var $tobool4=(($6)|(0))!=0;
      if ($tobool4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $arraydecay=(($buf)|0);
      var $7=$p_addr;
      var $error_buffer=(($7+1144)|0);
      var $arrayidx=(($error_buffer)|0);
      var $lineno=(($arrayidx)|0);
      var $8=HEAP32[(($lineno)>>2)];
      var $9=$p_addr;
      var $error_buffer6=(($9+1144)|0);
      var $arrayidx7=(($error_buffer6)|0);
      var $message=(($arrayidx7+8)|0);
      var $10=HEAP32[(($message)>>2)];
      var $call=_snprintf($arraydecay, 256, ((109904)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$8,HEAP32[(((tempInt)+(4))>>2)]=$10,tempInt));
      $n=$call;
      var $11=$mrb_addr;
      var $12=$mrb_addr;
      var $call8=_mrb_class_get($12, ((109764)|0));
      var $arraydecay9=(($buf)|0);
      var $13=$n;
      _mrb_exc_new($tmp, $11, $call8, $arraydecay9, $13);
      var $value=(($tmp)|0);
      var $p10=$value;
      var $14=HEAP32[(($p10)>>2)];
      var $15=$14;
      var $16=$mrb_addr;
      var $exc=(($16+16)|0);
      HEAP32[(($exc)>>2)]=$15;
      var $17=$p_addr;
      _mrb_parser_free($17);
      _mrb_undef_value246($agg_result);
      label = 20; break;
    case 8: 
      var $18=$mrb_addr;
      var $19=$mrb_addr;
      var $call11=_mrb_class_get($19, ((109764)|0));
      _mrb_exc_new($tmp12, $18, $call11, ((80088)|0), 12);
      var $value13=(($tmp12)|0);
      var $p14=$value13;
      var $20=HEAP32[(($p14)>>2)];
      var $21=$20;
      var $22=$mrb_addr;
      var $exc15=(($22+16)|0);
      HEAP32[(($exc15)>>2)]=$21;
      var $23=$p_addr;
      _mrb_parser_free($23);
      _mrb_undef_value246($agg_result);
      label = 20; break;
    case 9: 
      var $24=$mrb_addr;
      var $25=$p_addr;
      var $call17=_mrb_generate_code($24, $25);
      $n=$call17;
      var $26=$p_addr;
      _mrb_parser_free($26);
      var $27=$n;
      var $cmp=(($27)|(0)) < 0;
      if ($cmp) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $28=$mrb_addr;
      var $29=$mrb_addr;
      var $call19=_mrb_class_get($29, ((109744)|0));
      _mrb_exc_new($tmp20, $28, $call19, ((80072)|0), 13);
      var $value21=(($tmp20)|0);
      var $p22=$value21;
      var $30=HEAP32[(($p22)>>2)];
      var $31=$30;
      var $32=$mrb_addr;
      var $exc23=(($32+16)|0);
      HEAP32[(($exc23)>>2)]=$31;
      _mrb_nil_value247($agg_result);
      label = 20; break;
    case 11: 
      var $33=$c_addr;
      var $tobool25=(($33)|(0))!=0;
      if ($tobool25) { label = 12; break; } else { label = 17; break; }
    case 12: 
      var $34=$c_addr;
      var $35=$34;
      var $bf_field_offs=(($35+24)|0);
      var $36=HEAP8[($bf_field_offs)];
      var $37=(($36)&(255)) >>> 1;
      var $bf_clear=$37 & 1;
      var $tobool27=(($bf_clear << 24) >> 24)!=0;
      if ($tobool27) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $38=$mrb_addr;
      var $39=$n;
      _codedump_all($38, $39);
      label = 14; break;
    case 14: 
      var $40=$c_addr;
      var $41=$40;
      var $bf_field_offs30=(($41+24)|0);
      var $42=HEAP8[($bf_field_offs30)];
      var $43=(($42)&(255)) >>> 2;
      var $bf_clear31=$43 & 1;
      var $tobool32=(($bf_clear31 << 24) >> 24)!=0;
      if ($tobool32) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $44=$n;
      _mrb_fixnum_value248($agg_result, $44);
      label = 20; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $45=$mrb_addr;
      var $46=$mrb_addr;
      var $47=$n;
      var $48=$mrb_addr;
      var $irep=(($48+24)|0);
      var $49=HEAP32[(($irep)>>2)];
      var $arrayidx36=(($49+($47<<2))|0);
      var $50=HEAP32[(($arrayidx36)>>2)];
      var $call37=_mrb_proc_new($46, $50);
      var $51=$mrb_addr;
      _mrb_top_self($agg_tmp, $51);
      _mrb_run($tmp38, $45, $call37, $agg_tmp);
      var $52=$v;
      var $53=$tmp38;
      assert(12 % 1 === 0);HEAP32[(($52)>>2)]=HEAP32[(($53)>>2)];HEAP32[((($52)+(4))>>2)]=HEAP32[((($53)+(4))>>2)];HEAP32[((($52)+(8))>>2)]=HEAP32[((($53)+(8))>>2)];
      var $54=$mrb_addr;
      var $exc39=(($54+16)|0);
      var $55=HEAP32[(($exc39)>>2)];
      var $tobool40=(($55)|(0))!=0;
      if ($tobool40) { label = 18; break; } else { label = 19; break; }
    case 18: 
      _mrb_nil_value247($agg_result);
      label = 20; break;
    case 19: 
      var $56=$agg_result;
      var $57=$v;
      assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($57)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($57)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($57)+(8))>>2)];
      label = 20; break;
    case 20: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_load_nstring_cxt($agg_result, $mrb, $s, $len, $c) {
  var label = 0;
  var $mrb_addr;
  var $s_addr;
  var $len_addr;
  var $c_addr;
  $mrb_addr=$mrb;
  $s_addr=$s;
  $len_addr=$len;
  $c_addr=$c;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $2=$s_addr;
  var $3=$len_addr;
  var $4=$c_addr;
  var $call=_mrb_parse_nstring($1, $2, $3, $4);
  var $5=$c_addr;
  _load_exec($agg_result, $0, $call, $5);
  return;
}
function _mrb_load_nstring($agg_result, $mrb, $s, $len) {
  var label = 0;
  var $mrb_addr;
  var $s_addr;
  var $len_addr;
  $mrb_addr=$mrb;
  $s_addr=$s;
  $len_addr=$len;
  var $0=$mrb_addr;
  var $1=$s_addr;
  var $2=$len_addr;
  _mrb_load_nstring_cxt($agg_result, $0, $1, $2, 0);
  return;
}
function _mrb_load_string_cxt($agg_result, $mrb, $s, $c) {
  var label = 0;
  var $mrb_addr;
  var $s_addr;
  var $c_addr;
  $mrb_addr=$mrb;
  $s_addr=$s;
  $c_addr=$c;
  var $0=$mrb_addr;
  var $1=$s_addr;
  var $2=$s_addr;
  var $call=_strlen($2);
  var $3=$c_addr;
  _mrb_load_nstring_cxt($agg_result, $0, $1, $call, $3);
  return;
}
function _mrb_load_string($agg_result, $mrb, $s) {
  var label = 0;
  var $mrb_addr;
  var $s_addr;
  $mrb_addr=$mrb;
  $s_addr=$s;
  var $0=$mrb_addr;
  var $1=$s_addr;
  _mrb_load_string_cxt($agg_result, $0, $1, 0);
  return;
}
function _dump_prefix($offset) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $offset_addr;
      $offset_addr=$offset;
      label = 3; break;
    case 3: 
      var $0=$offset_addr;
      var $dec=((($0)-(1))|0);
      $offset_addr=$dec;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $1=HEAP32[((_stdout)>>2)];
      var $call=_fputc(32, $1);
      var $2=HEAP32[((_stdout)>>2)];
      var $call1=_fputc(32, $2);
      label = 3; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _dump_recur($mrb, $tree, $offset) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tree_addr;
      var $offset_addr;
      $mrb_addr=$mrb;
      $tree_addr=$tree;
      $offset_addr=$offset;
      label = 3; break;
    case 3: 
      var $0=$tree_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $1=$mrb_addr;
      var $2=$tree_addr;
      var $car=(($2)|0);
      var $3=HEAP32[(($car)>>2)];
      var $4=$offset_addr;
      _parser_dump($1, $3, $4);
      var $5=$tree_addr;
      var $cdr=(($5+4)|0);
      var $6=HEAP32[(($cdr)>>2)];
      $tree_addr=$6;
      label = 3; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_undef_value246($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=5;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value247($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value248($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _parser_yylex($p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 260)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $c;
      var $space_seen;
      var $cmd_state;
      var $last_state;
      var $token_column;
      var $token;
      var $c2;
      var $buf=__stackBase__;
      var $c2360;
      var $is_float;
      var $seen_point;
      var $seen_e;
      var $nondigit;
      var $start;
      var $c0;
      var $d;
      var $endp=(__stackBase__)+(256);
      var $term;
      var $paren;
      var $result;
      var $kw;
      var $state;
      var $ident;
      $p_addr=$p;
      $space_seen=0;
      var $0=$p_addr;
      var $lex_strterm=(($0+44)|0);
      var $1=HEAP32[(($lex_strterm)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $2=$p_addr;
      var $lex_strterm1=(($2+44)|0);
      var $3=HEAP32[(($lex_strterm1)>>2)];
      var $car=(($3)|0);
      var $4=HEAP32[(($car)>>2)];
      var $5=$4;
      var $and=$5 & 64;
      var $tobool2=(($and)|(0))!=0;
      if ($tobool2) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $6=$p_addr;
      var $parsing_heredoc=(($6+1116)|0);
      var $7=HEAP32[(($parsing_heredoc)>>2)];
      var $cmp=(($7)|(0))!=0;
      if ($cmp) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $8=$p_addr;
      var $9=$8;
      var $bf_field_offs=(($9+1120)|0);
      var $10=HEAP8[($bf_field_offs)];
      var $bf_clear=$10 & 1;
      var $tobool4=(($bf_clear << 24) >> 24)!=0;
      if ($tobool4) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $11=$p_addr;
      var $call=_parse_string($11);
      $retval=$call;
      label = 711; break;
    case 7: 
      label = 9; break;
    case 8: 
      var $12=$p_addr;
      var $call6=_parse_string($12);
      $retval=$call6;
      label = 711; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $13=$p_addr;
      var $cmd_start=(($13+72)|0);
      var $14=HEAP32[(($cmd_start)>>2)];
      $cmd_state=$14;
      var $15=$p_addr;
      var $cmd_start9=(($15+72)|0);
      HEAP32[(($cmd_start9)>>2)]=0;
      label = 11; break;
    case 11: 
      var $16=$p_addr;
      var $lstate=(($16+40)|0);
      var $17=HEAP32[(($lstate)>>2)];
      $last_state=$17;
      var $18=$p_addr;
      var $call10=_nextc($18);
      $c=$call10;
      if ((($call10)|(0))==0 | (($call10)|(0))==4 | (($call10)|(0))==26 | (($call10)|(0))==-1) {
        label = 12; break;
      }
      else if ((($call10)|(0))==32 | (($call10)|(0))==9 | (($call10)|(0))==12 | (($call10)|(0))==13 | (($call10)|(0))==11) {
        label = 13; break;
      }
      else if ((($call10)|(0))==35) {
        label = 14; break;
      }
      else if ((($call10)|(0))==10) {
        label = 15; break;
      }
      else if ((($call10)|(0))==42) {
        label = 32; break;
      }
      else if ((($call10)|(0))==33) {
        label = 56; break;
      }
      else if ((($call10)|(0))==61) {
        label = 67; break;
      }
      else if ((($call10)|(0))==60) {
        label = 85; break;
      }
      else if ((($call10)|(0))==62) {
        label = 112; break;
      }
      else if ((($call10)|(0))==34) {
        label = 123; break;
      }
      else if ((($call10)|(0))==39) {
        label = 124; break;
      }
      else if ((($call10)|(0))==96) {
        label = 125; break;
      }
      else if ((($call10)|(0))==63) {
        label = 133; break;
      }
      else if ((($call10)|(0))==38) {
        label = 168; break;
      }
      else if ((($call10)|(0))==124) {
        label = 192; break;
      }
      else if ((($call10)|(0))==43) {
        label = 203; break;
      }
      else if ((($call10)|(0))==45) {
        label = 224; break;
      }
      else if ((($call10)|(0))==46) {
        label = 247; break;
      }
      else if ((($call10)|(0))==48 | (($call10)|(0))==49 | (($call10)|(0))==50 | (($call10)|(0))==51 | (($call10)|(0))==52 | (($call10)|(0))==53 | (($call10)|(0))==54 | (($call10)|(0))==55 | (($call10)|(0))==56 | (($call10)|(0))==57) {
        label = 256; break;
      }
      else if ((($call10)|(0))==41 | (($call10)|(0))==93) {
        label = 409; break;
      }
      else if ((($call10)|(0))==125) {
        label = 410; break;
      }
      else if ((($call10)|(0))==58) {
        label = 414; break;
      }
      else if ((($call10)|(0))==47) {
        label = 432; break;
      }
      else if ((($call10)|(0))==94) {
        label = 449; break;
      }
      else if ((($call10)|(0))==59) {
        label = 456; break;
      }
      else if ((($call10)|(0))==44) {
        label = 457; break;
      }
      else if ((($call10)|(0))==126) {
        label = 458; break;
      }
      else if ((($call10)|(0))==40) {
        label = 465; break;
      }
      else if ((($call10)|(0))==91) {
        label = 477; break;
      }
      else if ((($call10)|(0))==123) {
        label = 496; break;
      }
      else if ((($call10)|(0))==92) {
        label = 509; break;
      }
      else if ((($call10)|(0))==37) {
        label = 512; break;
      }
      else if ((($call10)|(0))==36) {
        label = 561; break;
      }
      else if ((($call10)|(0))==64) {
        label = 591; break;
      }
      else if ((($call10)|(0))==95) {
        label = 609; break;
      }
      else {
      label = 610; break;
      }
    case 12: 
      $retval=0;
      label = 711; break;
    case 13: 
      $space_seen=1;
      label = 11; break;
    case 14: 
      var $19=$p_addr;
      _skip($19, 10);
      label = 15; break;
    case 15: 
      var $20=$p_addr;
      var $21=$20;
      var $bf_field_offs14=(($21+1120)|0);
      var $22=HEAP8[($bf_field_offs14)];
      var $23=$22 & -2;
      HEAP8[($bf_field_offs14)]=$23;
      var $24=$p_addr;
      var $parsing_heredoc15=(($24+1116)|0);
      var $25=HEAP32[(($parsing_heredoc15)>>2)];
      var $cmp16=(($25)|(0))!=0;
      if ($cmp16) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $26=$p_addr;
      var $27=$p_addr;
      var $call18=_parsing_heredoc_inf($27);
      var $type=(($call18+4)|0);
      var $28=HEAP32[(($type)>>2)];
      var $call19=_new_strterm($26, $28, 0, 0);
      var $29=$p_addr;
      var $lex_strterm20=(($29+44)|0);
      HEAP32[(($lex_strterm20)>>2)]=$call19;
      label = 31; break;
    case 17: 
      var $30=$p_addr;
      var $lstate22=(($30+40)|0);
      var $31=HEAP32[(($lstate22)>>2)];
      if ((($31)|(0))==0 | (($31)|(0))==7 | (($31)|(0))==8 | (($31)|(0))==9 | (($31)|(0))==10) {
        label = 18; break;
      }
      else {
      label = 19; break;
      }
    case 18: 
      var $32=$p_addr;
      var $lineno=(($32+32)|0);
      var $33=HEAP32[(($lineno)>>2)];
      var $inc=((($33)+(1))|0);
      HEAP32[(($lineno)>>2)]=$inc;
      var $34=$p_addr;
      var $column=(($34+36)|0);
      HEAP32[(($column)>>2)]=0;
      label = 11; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $35=$p_addr;
      var $call24=_nextc($35);
      $c=$call24;
      var $tobool25=(($call24)|(0))!=0;
      if ($tobool25) { label = 22; break; } else { label = 30; break; }
    case 22: 
      var $36=$c;
      if ((($36)|(0))==32 | (($36)|(0))==9 | (($36)|(0))==12 | (($36)|(0))==13 | (($36)|(0))==11) {
        label = 23; break;
      }
      else if ((($36)|(0))==46) {
        label = 24; break;
      }
      else if ((($36)|(0))==-1) {
        label = 27; break;
      }
      else {
      label = 28; break;
      }
    case 23: 
      $space_seen=1;
      label = 29; break;
    case 24: 
      var $37=$p_addr;
      var $call28=_nextc($37);
      $c=$call28;
      var $cmp29=(($call28)|(0))!=46;
      if ($cmp29) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $38=$p_addr;
      var $39=$c;
      _pushback($38, $39);
      var $40=$p_addr;
      _pushback($40, 46);
      label = 11; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 31; break;
    case 28: 
      var $41=$p_addr;
      var $42=$c;
      _pushback($41, $42);
      label = 31; break;
    case 29: 
      label = 21; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $43=$p_addr;
      var $cmd_start35=(($43+72)|0);
      HEAP32[(($cmd_start35)>>2)]=1;
      var $44=$p_addr;
      var $lstate36=(($44+40)|0);
      HEAP32[(($lstate36)>>2)]=0;
      $retval=10;
      label = 711; break;
    case 32: 
      var $45=$p_addr;
      var $call38=_nextc($45);
      $c=$call38;
      var $cmp39=(($call38)|(0))==42;
      if ($cmp39) { label = 33; break; } else { label = 36; break; }
    case 33: 
      var $46=$p_addr;
      var $call41=_nextc($46);
      $c=$call41;
      var $cmp42=(($call41)|(0))==61;
      if ($cmp42) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $47=$p_addr;
      var $call44=_intern_gen2($47, ((105684)|0), 2);
      var $48=$p_addr;
      var $ylval=(($48+1124)|0);
      var $49=HEAP32[(($ylval)>>2)];
      var $50=$49;
      var $id=$50;
      HEAP16[(($id)>>1)]=$call44;
      var $51=$p_addr;
      var $lstate45=(($51+40)|0);
      HEAP32[(($lstate45)>>2)]=0;
      $retval=345;
      label = 711; break;
    case 35: 
      var $52=$p_addr;
      var $53=$c;
      _pushback($52, $53);
      $c=326;
      label = 51; break;
    case 36: 
      var $54=$c;
      var $cmp48=(($54)|(0))==61;
      if ($cmp48) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $55=$p_addr;
      var $call50=_intern_gen_c($55, 42);
      var $56=$p_addr;
      var $ylval51=(($56+1124)|0);
      var $57=HEAP32[(($ylval51)>>2)];
      var $58=$57;
      var $id52=$58;
      HEAP16[(($id52)>>1)]=$call50;
      var $59=$p_addr;
      var $lstate53=(($59+40)|0);
      HEAP32[(($lstate53)>>2)]=0;
      $retval=345;
      label = 711; break;
    case 38: 
      var $60=$p_addr;
      var $61=$c;
      _pushback($60, $61);
      var $62=$p_addr;
      var $lstate55=(($62+40)|0);
      var $63=HEAP32[(($lstate55)>>2)];
      var $cmp56=(($63)|(0))==4;
      if ($cmp56) { label = 40; break; } else { label = 39; break; }
    case 39: 
      var $64=$p_addr;
      var $lstate57=(($64+40)|0);
      var $65=HEAP32[(($lstate57)>>2)];
      var $cmp58=(($65)|(0))==5;
      if ($cmp58) { label = 40; break; } else { label = 43; break; }
    case 40: 
      var $66=$space_seen;
      var $tobool60=(($66)|(0))!=0;
      if ($tobool60) { label = 41; break; } else { label = 43; break; }
    case 41: 
      var $67=$c;
      var $conv=(($67) & 255);
      var $conv62=(($conv)&(255));
      var $call63=_isspace($conv62);
      var $tobool64=(($call63)|(0))!=0;
      if ($tobool64) { label = 43; break; } else { label = 42; break; }
    case 42: 
      var $68=$p_addr;
      _yywarning($68, ((109692)|0));
      $c=353;
      label = 50; break;
    case 43: 
      var $69=$p_addr;
      var $lstate67=(($69+40)|0);
      var $70=HEAP32[(($lstate67)>>2)];
      var $cmp68=(($70)|(0))==0;
      if ($cmp68) { label = 47; break; } else { label = 44; break; }
    case 44: 
      var $71=$p_addr;
      var $lstate71=(($71+40)|0);
      var $72=HEAP32[(($lstate71)>>2)];
      var $cmp72=(($72)|(0))==6;
      if ($cmp72) { label = 47; break; } else { label = 45; break; }
    case 45: 
      var $73=$p_addr;
      var $lstate75=(($73+40)|0);
      var $74=HEAP32[(($lstate75)>>2)];
      var $cmp76=(($74)|(0))==10;
      if ($cmp76) { label = 47; break; } else { label = 46; break; }
    case 46: 
      var $75=$p_addr;
      var $lstate79=(($75+40)|0);
      var $76=HEAP32[(($lstate79)>>2)];
      var $cmp80=(($76)|(0))==9;
      if ($cmp80) { label = 47; break; } else { label = 48; break; }
    case 47: 
      $c=353;
      label = 49; break;
    case 48: 
      $c=42;
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $77=$p_addr;
      var $lstate87=(($77+40)|0);
      var $78=HEAP32[(($lstate87)>>2)];
      var $cmp88=(($78)|(0))==7;
      if ($cmp88) { label = 53; break; } else { label = 52; break; }
    case 52: 
      var $79=$p_addr;
      var $lstate91=(($79+40)|0);
      var $80=HEAP32[(($lstate91)>>2)];
      var $cmp92=(($80)|(0))==8;
      if ($cmp92) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $81=$p_addr;
      var $lstate95=(($81+40)|0);
      HEAP32[(($lstate95)>>2)]=4;
      label = 55; break;
    case 54: 
      var $82=$p_addr;
      var $lstate97=(($82+40)|0);
      HEAP32[(($lstate97)>>2)]=0;
      label = 55; break;
    case 55: 
      var $83=$c;
      $retval=$83;
      label = 711; break;
    case 56: 
      var $84=$p_addr;
      var $call100=_nextc($84);
      $c=$call100;
      var $85=$p_addr;
      var $lstate101=(($85+40)|0);
      var $86=HEAP32[(($lstate101)>>2)];
      var $cmp102=(($86)|(0))==7;
      if ($cmp102) { label = 58; break; } else { label = 57; break; }
    case 57: 
      var $87=$p_addr;
      var $lstate105=(($87+40)|0);
      var $88=HEAP32[(($lstate105)>>2)];
      var $cmp106=(($88)|(0))==8;
      if ($cmp106) { label = 58; break; } else { label = 61; break; }
    case 58: 
      var $89=$p_addr;
      var $lstate109=(($89+40)|0);
      HEAP32[(($lstate109)>>2)]=4;
      var $90=$c;
      var $cmp110=(($90)|(0))==64;
      if ($cmp110) { label = 59; break; } else { label = 60; break; }
    case 59: 
      $retval=33;
      label = 711; break;
    case 60: 
      label = 62; break;
    case 61: 
      var $91=$p_addr;
      var $lstate115=(($91+40)|0);
      HEAP32[(($lstate115)>>2)]=0;
      label = 62; break;
    case 62: 
      var $92=$c;
      var $cmp117=(($92)|(0))==61;
      if ($cmp117) { label = 63; break; } else { label = 64; break; }
    case 63: 
      $retval=330;
      label = 711; break;
    case 64: 
      var $93=$c;
      var $cmp121=(($93)|(0))==126;
      if ($cmp121) { label = 65; break; } else { label = 66; break; }
    case 65: 
      $retval=336;
      label = 711; break;
    case 66: 
      var $94=$p_addr;
      var $95=$c;
      _pushback($94, $95);
      $retval=33;
      label = 711; break;
    case 67: 
      var $96=$p_addr;
      var $column126=(($96+36)|0);
      var $97=HEAP32[(($column126)>>2)];
      var $cmp127=(($97)|(0))==1;
      if ($cmp127) { label = 68; break; } else { label = 71; break; }
    case 68: 
      var $98=$p_addr;
      var $call130=_peeks($98, ((109664)|0));
      var $tobool131=(($call130)|(0))!=0;
      if ($tobool131) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $99=$p_addr;
      var $call133=_skips($99, ((109648)|0));
      label = 11; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $100=$p_addr;
      var $lstate136=(($100+40)|0);
      var $101=HEAP32[(($lstate136)>>2)];
      var $cmp137=(($101)|(0))==7;
      if ($cmp137) { label = 73; break; } else { label = 72; break; }
    case 72: 
      var $102=$p_addr;
      var $lstate140=(($102+40)|0);
      var $103=HEAP32[(($lstate140)>>2)];
      var $cmp141=(($103)|(0))==8;
      if ($cmp141) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $104=$p_addr;
      var $lstate144=(($104+40)|0);
      HEAP32[(($lstate144)>>2)]=4;
      label = 75; break;
    case 74: 
      var $105=$p_addr;
      var $lstate146=(($105+40)|0);
      HEAP32[(($lstate146)>>2)]=0;
      label = 75; break;
    case 75: 
      var $106=$p_addr;
      var $call148=_nextc($106);
      $c=$call148;
      var $cmp149=(($call148)|(0))==61;
      if ($cmp149) { label = 76; break; } else { label = 79; break; }
    case 76: 
      var $107=$p_addr;
      var $call152=_nextc($107);
      $c=$call152;
      var $cmp153=(($call152)|(0))==61;
      if ($cmp153) { label = 77; break; } else { label = 78; break; }
    case 77: 
      $retval=329;
      label = 711; break;
    case 78: 
      var $108=$p_addr;
      var $109=$c;
      _pushback($108, $109);
      $retval=328;
      label = 711; break;
    case 79: 
      var $110=$c;
      var $cmp158=(($110)|(0))==126;
      if ($cmp158) { label = 80; break; } else { label = 81; break; }
    case 80: 
      $retval=335;
      label = 711; break;
    case 81: 
      var $111=$c;
      var $cmp162=(($111)|(0))==62;
      if ($cmp162) { label = 82; break; } else { label = 83; break; }
    case 82: 
      $retval=346;
      label = 711; break;
    case 83: 
      label = 84; break;
    case 84: 
      var $112=$p_addr;
      var $113=$c;
      _pushback($112, $113);
      $retval=61;
      label = 711; break;
    case 85: 
      var $114=$p_addr;
      var $lstate168=(($114+40)|0);
      var $115=HEAP32[(($lstate168)>>2)];
      $last_state=$115;
      var $116=$p_addr;
      var $call169=_nextc($116);
      $c=$call169;
      var $117=$c;
      var $cmp170=(($117)|(0))==60;
      if ($cmp170) { label = 86; break; } else { label = 97; break; }
    case 86: 
      var $118=$p_addr;
      var $lstate173=(($118+40)|0);
      var $119=HEAP32[(($lstate173)>>2)];
      var $cmp174=(($119)|(0))!=8;
      if ($cmp174) { label = 87; break; } else { label = 97; break; }
    case 87: 
      var $120=$p_addr;
      var $lstate177=(($120+40)|0);
      var $121=HEAP32[(($lstate177)>>2)];
      var $cmp178=(($121)|(0))!=9;
      if ($cmp178) { label = 88; break; } else { label = 97; break; }
    case 88: 
      var $122=$p_addr;
      var $lstate181=(($122+40)|0);
      var $123=HEAP32[(($lstate181)>>2)];
      var $cmp182=(($123)|(0))==1;
      if ($cmp182) { label = 97; break; } else { label = 89; break; }
    case 89: 
      var $124=$p_addr;
      var $lstate185=(($124+40)|0);
      var $125=HEAP32[(($lstate185)>>2)];
      var $cmp186=(($125)|(0))==2;
      if ($cmp186) { label = 97; break; } else { label = 90; break; }
    case 90: 
      var $126=$p_addr;
      var $lstate189=(($126+40)|0);
      var $127=HEAP32[(($lstate189)>>2)];
      var $cmp190=(($127)|(0))==3;
      if ($cmp190) { label = 97; break; } else { label = 91; break; }
    case 91: 
      var $128=$p_addr;
      var $lstate193=(($128+40)|0);
      var $129=HEAP32[(($lstate193)>>2)];
      var $cmp194=(($129)|(0))==4;
      if ($cmp194) { label = 93; break; } else { label = 92; break; }
    case 92: 
      var $130=$p_addr;
      var $lstate197=(($130+40)|0);
      var $131=HEAP32[(($lstate197)>>2)];
      var $cmp198=(($131)|(0))==5;
      if ($cmp198) { label = 93; break; } else { label = 94; break; }
    case 93: 
      var $132=$space_seen;
      var $tobool201=(($132)|(0))!=0;
      if ($tobool201) { label = 94; break; } else { label = 97; break; }
    case 94: 
      var $133=$p_addr;
      var $call203=_heredoc_identifier($133);
      $token=$call203;
      var $134=$token;
      var $tobool204=(($134)|(0))!=0;
      if ($tobool204) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $135=$token;
      $retval=$135;
      label = 711; break;
    case 96: 
      label = 97; break;
    case 97: 
      var $136=$p_addr;
      var $lstate208=(($136+40)|0);
      var $137=HEAP32[(($lstate208)>>2)];
      var $cmp209=(($137)|(0))==7;
      if ($cmp209) { label = 99; break; } else { label = 98; break; }
    case 98: 
      var $138=$p_addr;
      var $lstate212=(($138+40)|0);
      var $139=HEAP32[(($lstate212)>>2)];
      var $cmp213=(($139)|(0))==8;
      if ($cmp213) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $140=$p_addr;
      var $lstate216=(($140+40)|0);
      HEAP32[(($lstate216)>>2)]=4;
      label = 103; break;
    case 100: 
      var $141=$p_addr;
      var $lstate218=(($141+40)|0);
      HEAP32[(($lstate218)>>2)]=0;
      var $142=$p_addr;
      var $lstate219=(($142+40)|0);
      var $143=HEAP32[(($lstate219)>>2)];
      var $cmp220=(($143)|(0))==9;
      if ($cmp220) { label = 101; break; } else { label = 102; break; }
    case 101: 
      var $144=$p_addr;
      var $cmd_start223=(($144+72)|0);
      HEAP32[(($cmd_start223)>>2)]=1;
      label = 102; break;
    case 102: 
      label = 103; break;
    case 103: 
      var $145=$c;
      var $cmp226=(($145)|(0))==61;
      if ($cmp226) { label = 104; break; } else { label = 107; break; }
    case 104: 
      var $146=$p_addr;
      var $call229=_nextc($146);
      $c=$call229;
      var $cmp230=(($call229)|(0))==62;
      if ($cmp230) { label = 105; break; } else { label = 106; break; }
    case 105: 
      $retval=327;
      label = 711; break;
    case 106: 
      var $147=$p_addr;
      var $148=$c;
      _pushback($147, $148);
      $retval=332;
      label = 711; break;
    case 107: 
      var $149=$c;
      var $cmp235=(($149)|(0))==60;
      if ($cmp235) { label = 108; break; } else { label = 111; break; }
    case 108: 
      var $150=$p_addr;
      var $call238=_nextc($150);
      $c=$call238;
      var $cmp239=(($call238)|(0))==61;
      if ($cmp239) { label = 109; break; } else { label = 110; break; }
    case 109: 
      var $151=$p_addr;
      var $call242=_intern_gen2($151, ((106384)|0), 2);
      var $152=$p_addr;
      var $ylval243=(($152+1124)|0);
      var $153=HEAP32[(($ylval243)>>2)];
      var $154=$153;
      var $id244=$154;
      HEAP16[(($id244)>>1)]=$call242;
      var $155=$p_addr;
      var $lstate245=(($155+40)|0);
      HEAP32[(($lstate245)>>2)]=0;
      $retval=345;
      label = 711; break;
    case 110: 
      var $156=$p_addr;
      var $157=$c;
      _pushback($156, $157);
      $retval=341;
      label = 711; break;
    case 111: 
      var $158=$p_addr;
      var $159=$c;
      _pushback($158, $159);
      $retval=60;
      label = 711; break;
    case 112: 
      var $160=$p_addr;
      var $lstate249=(($160+40)|0);
      var $161=HEAP32[(($lstate249)>>2)];
      var $cmp250=(($161)|(0))==7;
      if ($cmp250) { label = 114; break; } else { label = 113; break; }
    case 113: 
      var $162=$p_addr;
      var $lstate253=(($162+40)|0);
      var $163=HEAP32[(($lstate253)>>2)];
      var $cmp254=(($163)|(0))==8;
      if ($cmp254) { label = 114; break; } else { label = 115; break; }
    case 114: 
      var $164=$p_addr;
      var $lstate257=(($164+40)|0);
      HEAP32[(($lstate257)>>2)]=4;
      label = 116; break;
    case 115: 
      var $165=$p_addr;
      var $lstate259=(($165+40)|0);
      HEAP32[(($lstate259)>>2)]=0;
      label = 116; break;
    case 116: 
      var $166=$p_addr;
      var $call261=_nextc($166);
      $c=$call261;
      var $cmp262=(($call261)|(0))==61;
      if ($cmp262) { label = 117; break; } else { label = 118; break; }
    case 117: 
      $retval=331;
      label = 711; break;
    case 118: 
      var $167=$c;
      var $cmp266=(($167)|(0))==62;
      if ($cmp266) { label = 119; break; } else { label = 122; break; }
    case 119: 
      var $168=$p_addr;
      var $call269=_nextc($168);
      $c=$call269;
      var $cmp270=(($call269)|(0))==61;
      if ($cmp270) { label = 120; break; } else { label = 121; break; }
    case 120: 
      var $169=$p_addr;
      var $call273=_intern_gen2($169, ((105992)|0), 2);
      var $170=$p_addr;
      var $ylval274=(($170+1124)|0);
      var $171=HEAP32[(($ylval274)>>2)];
      var $172=$171;
      var $id275=$172;
      HEAP16[(($id275)>>1)]=$call273;
      var $173=$p_addr;
      var $lstate276=(($173+40)|0);
      HEAP32[(($lstate276)>>2)]=0;
      $retval=345;
      label = 711; break;
    case 121: 
      var $174=$p_addr;
      var $175=$c;
      _pushback($174, $175);
      $retval=342;
      label = 711; break;
    case 122: 
      var $176=$p_addr;
      var $177=$c;
      _pushback($176, $177);
      $retval=62;
      label = 711; break;
    case 123: 
      var $178=$p_addr;
      var $call280=_new_strterm($178, 3, 34, 0);
      var $179=$p_addr;
      var $lex_strterm281=(($179+44)|0);
      HEAP32[(($lex_strterm281)>>2)]=$call280;
      $retval=360;
      label = 711; break;
    case 124: 
      var $180=$p_addr;
      var $call283=_new_strterm($180, 1, 39, 0);
      var $181=$p_addr;
      var $lex_strterm284=(($181+44)|0);
      HEAP32[(($lex_strterm284)>>2)]=$call283;
      var $182=$p_addr;
      var $call285=_parse_string($182);
      $retval=$call285;
      label = 711; break;
    case 125: 
      var $183=$p_addr;
      var $lstate287=(($183+40)|0);
      var $184=HEAP32[(($lstate287)>>2)];
      var $cmp288=(($184)|(0))==7;
      if ($cmp288) { label = 126; break; } else { label = 127; break; }
    case 126: 
      var $185=$p_addr;
      var $lstate291=(($185+40)|0);
      HEAP32[(($lstate291)>>2)]=3;
      $retval=96;
      label = 711; break;
    case 127: 
      var $186=$p_addr;
      var $lstate293=(($186+40)|0);
      var $187=HEAP32[(($lstate293)>>2)];
      var $cmp294=(($187)|(0))==8;
      if ($cmp294) { label = 128; break; } else { label = 132; break; }
    case 128: 
      var $188=$cmd_state;
      var $tobool297=(($188)|(0))!=0;
      if ($tobool297) { label = 129; break; } else { label = 130; break; }
    case 129: 
      var $189=$p_addr;
      var $lstate299=(($189+40)|0);
      HEAP32[(($lstate299)>>2)]=5;
      label = 131; break;
    case 130: 
      var $190=$p_addr;
      var $lstate301=(($190+40)|0);
      HEAP32[(($lstate301)>>2)]=4;
      label = 131; break;
    case 131: 
      $retval=96;
      label = 711; break;
    case 132: 
      var $191=$p_addr;
      var $call304=_new_strterm($191, 131, 96, 0);
      var $192=$p_addr;
      var $lex_strterm305=(($192+44)|0);
      HEAP32[(($lex_strterm305)>>2)]=$call304;
      $retval=361;
      label = 711; break;
    case 133: 
      var $193=$p_addr;
      var $lstate307=(($193+40)|0);
      var $194=HEAP32[(($lstate307)>>2)];
      var $cmp308=(($194)|(0))==1;
      if ($cmp308) { label = 136; break; } else { label = 134; break; }
    case 134: 
      var $195=$p_addr;
      var $lstate311=(($195+40)|0);
      var $196=HEAP32[(($lstate311)>>2)];
      var $cmp312=(($196)|(0))==2;
      if ($cmp312) { label = 136; break; } else { label = 135; break; }
    case 135: 
      var $197=$p_addr;
      var $lstate315=(($197+40)|0);
      var $198=HEAP32[(($lstate315)>>2)];
      var $cmp316=(($198)|(0))==3;
      if ($cmp316) { label = 136; break; } else { label = 137; break; }
    case 136: 
      var $199=$p_addr;
      var $lstate319=(($199+40)|0);
      HEAP32[(($lstate319)>>2)]=10;
      $retval=63;
      label = 711; break;
    case 137: 
      var $200=$p_addr;
      var $call321=_nextc($200);
      $c=$call321;
      var $201=$c;
      var $cmp322=(($201)|(0))==-1;
      if ($cmp322) { label = 138; break; } else { label = 139; break; }
    case 138: 
      var $202=$p_addr;
      _yyerror($202, ((109620)|0));
      $retval=0;
      label = 711; break;
    case 139: 
      var $203=$c;
      var $call326=_isspace($203);
      var $tobool327=(($call326)|(0))!=0;
      if ($tobool327) { label = 140; break; } else { label = 155; break; }
    case 140: 
      var $204=$p_addr;
      var $lstate329=(($204+40)|0);
      var $205=HEAP32[(($lstate329)>>2)];
      var $cmp330=(($205)|(0))==4;
      if ($cmp330) { label = 153; break; } else { label = 141; break; }
    case 141: 
      var $206=$p_addr;
      var $lstate333=(($206+40)|0);
      var $207=HEAP32[(($lstate333)>>2)];
      var $cmp334=(($207)|(0))==5;
      if ($cmp334) { label = 153; break; } else { label = 142; break; }
    case 142: 
      var $208=$c;
      if ((($208)|(0))==32) {
        label = 143; break;
      }
      else if ((($208)|(0))==10) {
        label = 144; break;
      }
      else if ((($208)|(0))==9) {
        label = 145; break;
      }
      else if ((($208)|(0))==11) {
        label = 146; break;
      }
      else if ((($208)|(0))==13) {
        label = 147; break;
      }
      else if ((($208)|(0))==12) {
        label = 148; break;
      }
      else {
      label = 149; break;
      }
    case 143: 
      $c2=115;
      label = 150; break;
    case 144: 
      $c2=110;
      label = 150; break;
    case 145: 
      $c2=116;
      label = 150; break;
    case 146: 
      $c2=118;
      label = 150; break;
    case 147: 
      $c2=114;
      label = 150; break;
    case 148: 
      $c2=102;
      label = 150; break;
    case 149: 
      $c2=0;
      label = 150; break;
    case 150: 
      var $209=$c2;
      var $tobool345=(($209)|(0))!=0;
      if ($tobool345) { label = 151; break; } else { label = 152; break; }
    case 151: 
      var $arraydecay=(($buf)|0);
      var $210=$c2;
      var $call347=_snprintf($arraydecay, 256, ((109560)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$210,tempInt));
      var $211=$p_addr;
      var $arraydecay348=(($buf)|0);
      _yyerror($211, $arraydecay348);
      label = 152; break;
    case 152: 
      label = 153; break;
    case 153: 
      label = 154; break;
    case 154: 
      var $212=$p_addr;
      var $213=$c;
      _pushback($212, $213);
      var $214=$p_addr;
      var $lstate351=(($214+40)|0);
      HEAP32[(($lstate351)>>2)]=10;
      $retval=63;
      label = 711; break;
    case 155: 
      var $215=$p_addr;
      var $call353=_newtok($215);
      $token_column=$call353;
      var $216=$c;
      var $call354=_isalnum($216);
      var $tobool355=(($call354)|(0))!=0;
      if ($tobool355) { label = 157; break; } else { label = 156; break; }
    case 156: 
      var $217=$c;
      var $cmp357=(($217)|(0))==95;
      if ($cmp357) { label = 157; break; } else { label = 161; break; }
    case 157: 
      var $218=$p_addr;
      var $call361=_nextc($218);
      $c2360=$call361;
      var $219=$p_addr;
      var $220=$c2360;
      _pushback($219, $220);
      var $221=$c2360;
      var $call362=_isalnum($221);
      var $tobool363=(($call362)|(0))!=0;
      if ($tobool363) { label = 159; break; } else { label = 158; break; }
    case 158: 
      var $222=$c2360;
      var $cmp365=(($222)|(0))==95;
      if ($cmp365) { label = 159; break; } else { label = 160; break; }
    case 159: 
      label = 154; break;
    case 160: 
      label = 161; break;
    case 161: 
      var $223=$c;
      var $cmp370=(($223)|(0))==92;
      if ($cmp370) { label = 162; break; } else { label = 166; break; }
    case 162: 
      var $224=$p_addr;
      var $call373=_nextc($224);
      $c=$call373;
      var $225=$c;
      var $cmp374=(($225)|(0))==117;
      if ($cmp374) { label = 163; break; } else { label = 164; break; }
    case 163: 
      label = 165; break;
    case 164: 
      var $226=$p_addr;
      var $227=$c;
      _pushback($226, $227);
      var $228=$p_addr;
      var $call378=_read_escape($228);
      $c=$call378;
      var $229=$p_addr;
      var $230=$c;
      _tokadd($229, $230);
      label = 165; break;
    case 165: 
      label = 167; break;
    case 166: 
      var $231=$p_addr;
      var $232=$c;
      _tokadd($231, $232);
      label = 167; break;
    case 167: 
      var $233=$p_addr;
      _tokfix($233);
      var $234=$p_addr;
      var $235=$p_addr;
      var $call382=_tok($235);
      var $236=$p_addr;
      var $call383=_toklen($236);
      var $call384=_new_str($234, $call382, $call383);
      var $237=$p_addr;
      var $ylval385=(($237+1124)|0);
      var $238=HEAP32[(($ylval385)>>2)];
      var $239=$238;
      var $nd=$239;
      HEAP32[(($nd)>>2)]=$call384;
      var $240=$p_addr;
      var $lstate386=(($240+40)|0);
      HEAP32[(($lstate386)>>2)]=1;
      $retval=315;
      label = 711; break;
    case 168: 
      var $241=$p_addr;
      var $call388=_nextc($241);
      $c=$call388;
      var $cmp389=(($call388)|(0))==38;
      if ($cmp389) { label = 169; break; } else { label = 172; break; }
    case 169: 
      var $242=$p_addr;
      var $lstate392=(($242+40)|0);
      HEAP32[(($lstate392)>>2)]=0;
      var $243=$p_addr;
      var $call393=_nextc($243);
      $c=$call393;
      var $cmp394=(($call393)|(0))==61;
      if ($cmp394) { label = 170; break; } else { label = 171; break; }
    case 170: 
      var $244=$p_addr;
      var $call397=_intern_gen2($244, ((109528)|0), 2);
      var $245=$p_addr;
      var $ylval398=(($245+1124)|0);
      var $246=HEAP32[(($ylval398)>>2)];
      var $247=$246;
      var $id399=$247;
      HEAP16[(($id399)>>1)]=$call397;
      var $248=$p_addr;
      var $lstate400=(($248+40)|0);
      HEAP32[(($lstate400)>>2)]=0;
      $retval=345;
      label = 711; break;
    case 171: 
      var $249=$p_addr;
      var $250=$c;
      _pushback($249, $250);
      $retval=333;
      label = 711; break;
    case 172: 
      var $251=$c;
      var $cmp403=(($251)|(0))==61;
      if ($cmp403) { label = 173; break; } else { label = 174; break; }
    case 173: 
      var $252=$p_addr;
      var $call406=_intern_gen_c($252, 38);
      var $253=$p_addr;
      var $ylval407=(($253+1124)|0);
      var $254=HEAP32[(($ylval407)>>2)];
      var $255=$254;
      var $id408=$255;
      HEAP16[(($id408)>>1)]=$call406;
      var $256=$p_addr;
      var $lstate409=(($256+40)|0);
      HEAP32[(($lstate409)>>2)]=0;
      $retval=345;
      label = 711; break;
    case 174: 
      label = 175; break;
    case 175: 
      var $257=$p_addr;
      var $258=$c;
      _pushback($257, $258);
      var $259=$p_addr;
      var $lstate412=(($259+40)|0);
      var $260=HEAP32[(($lstate412)>>2)];
      var $cmp413=(($260)|(0))==4;
      if ($cmp413) { label = 177; break; } else { label = 176; break; }
    case 176: 
      var $261=$p_addr;
      var $lstate416=(($261+40)|0);
      var $262=HEAP32[(($lstate416)>>2)];
      var $cmp417=(($262)|(0))==5;
      if ($cmp417) { label = 177; break; } else { label = 180; break; }
    case 177: 
      var $263=$space_seen;
      var $tobool420=(($263)|(0))!=0;
      if ($tobool420) { label = 178; break; } else { label = 180; break; }
    case 178: 
      var $264=$c;
      var $conv422=(($264) & 255);
      var $conv423=(($conv422)&(255));
      var $call424=_isspace($conv423);
      var $tobool425=(($call424)|(0))!=0;
      if ($tobool425) { label = 180; break; } else { label = 179; break; }
    case 179: 
      var $265=$p_addr;
      _yywarning($265, ((109480)|0));
      $c=354;
      label = 187; break;
    case 180: 
      var $266=$p_addr;
      var $lstate428=(($266+40)|0);
      var $267=HEAP32[(($lstate428)>>2)];
      var $cmp429=(($267)|(0))==0;
      if ($cmp429) { label = 184; break; } else { label = 181; break; }
    case 181: 
      var $268=$p_addr;
      var $lstate432=(($268+40)|0);
      var $269=HEAP32[(($lstate432)>>2)];
      var $cmp433=(($269)|(0))==6;
      if ($cmp433) { label = 184; break; } else { label = 182; break; }
    case 182: 
      var $270=$p_addr;
      var $lstate436=(($270+40)|0);
      var $271=HEAP32[(($lstate436)>>2)];
      var $cmp437=(($271)|(0))==10;
      if ($cmp437) { label = 184; break; } else { label = 183; break; }
    case 183: 
      var $272=$p_addr;
      var $lstate440=(($272+40)|0);
      var $273=HEAP32[(($lstate440)>>2)];
      var $cmp441=(($273)|(0))==9;
      if ($cmp441) { label = 184; break; } else { label = 185; break; }
    case 184: 
      $c=354;
      label = 186; break;
    case 185: 
      $c=38;
      label = 186; break;
    case 186: 
      label = 187; break;
    case 187: 
      var $274=$p_addr;
      var $lstate447=(($274+40)|0);
      var $275=HEAP32[(($lstate447)>>2)];
      var $cmp448=(($275)|(0))==7;
      if ($cmp448) { label = 189; break; } else { label = 188; break; }
    case 188: 
      var $276=$p_addr;
      var $lstate451=(($276+40)|0);
      var $277=HEAP32[(($lstate451)>>2)];
      var $cmp452=(($277)|(0))==8;
      if ($cmp452) { label = 189; break; } else { label = 190; break; }
    case 189: 
      var $278=$p_addr;
      var $lstate455=(($278+40)|0);
      HEAP32[(($lstate455)>>2)]=4;
      label = 191; break;
    case 190: 
      var $279=$p_addr;
      var $lstate457=(($279+40)|0);
      HEAP32[(($lstate457)>>2)]=0;
      label = 191; break;
    case 191: 
      var $280=$c;
      $retval=$280;
      label = 711; break;
    case 192: 
      var $281=$p_addr;
      var $call460=_nextc($281);
      $c=$call460;
      var $cmp461=(($call460)|(0))==124;
      if ($cmp461) { label = 193; break; } else { label = 196; break; }
    case 193: 
      var $282=$p_addr;
      var $lstate464=(($282+40)|0);
      HEAP32[(($lstate464)>>2)]=0;
      var $283=$p_addr;
      var $call465=_nextc($283);
      $c=$call465;
      var $cmp466=(($call465)|(0))==61;
      if ($cmp466) { label = 194; break; } else { label = 195; break; }
    case 194: 
      var $284=$p_addr;
      var $call469=_intern_gen2($284, ((109320)|0), 2);
      var $285=$p_addr;
      var $ylval470=(($285+1124)|0);
      var $286=HEAP32[(($ylval470)>>2)];
      var $287=$286;
      var $id471=$287;
      HEAP16[(($id471)>>1)]=$call469;
      var $288=$p_addr;
      var $lstate472=(($288+40)|0);
      HEAP32[(($lstate472)>>2)]=0;
      $retval=345;
      label = 711; break;
    case 195: 
      var $289=$p_addr;
      var $290=$c;
      _pushback($289, $290);
      $retval=334;
      label = 711; break;
    case 196: 
      var $291=$c;
      var $cmp475=(($291)|(0))==61;
      if ($cmp475) { label = 197; break; } else { label = 198; break; }
    case 197: 
      var $292=$p_addr;
      var $call478=_intern_gen_c($292, 124);
      var $293=$p_addr;
      var $ylval479=(($293+1124)|0);
      var $294=HEAP32[(($ylval479)>>2)];
      var $295=$294;
      var $id480=$295;
      HEAP16[(($id480)>>1)]=$call478;
      var $296=$p_addr;
      var $lstate481=(($296+40)|0);
      HEAP32[(($lstate481)>>2)]=0;
      $retval=345;
      label = 711; break;
    case 198: 
      var $297=$p_addr;
      var $lstate483=(($297+40)|0);
      var $298=HEAP32[(($lstate483)>>2)];
      var $cmp484=(($298)|(0))==7;
      if ($cmp484) { label = 200; break; } else { label = 199; break; }
    case 199: 
      var $299=$p_addr;
      var $lstate487=(($299+40)|0);
      var $300=HEAP32[(($lstate487)>>2)];
      var $cmp488=(($300)|(0))==8;
      if ($cmp488) { label = 200; break; } else { label = 201; break; }
    case 200: 
      var $301=$p_addr;
      var $lstate491=(($301+40)|0);
      HEAP32[(($lstate491)>>2)]=4;
      label = 202; break;
    case 201: 
      var $302=$p_addr;
      var $lstate493=(($302+40)|0);
      HEAP32[(($lstate493)>>2)]=0;
      label = 202; break;
    case 202: 
      var $303=$p_addr;
      var $304=$c;
      _pushback($303, $304);
      $retval=124;
      label = 711; break;
    case 203: 
      var $305=$p_addr;
      var $call496=_nextc($305);
      $c=$call496;
      var $306=$p_addr;
      var $lstate497=(($306+40)|0);
      var $307=HEAP32[(($lstate497)>>2)];
      var $cmp498=(($307)|(0))==7;
      if ($cmp498) { label = 205; break; } else { label = 204; break; }
    case 204: 
      var $308=$p_addr;
      var $lstate501=(($308+40)|0);
      var $309=HEAP32[(($lstate501)>>2)];
      var $cmp502=(($309)|(0))==8;
      if ($cmp502) { label = 205; break; } else { label = 208; break; }
    case 205: 
      var $310=$p_addr;
      var $lstate505=(($310+40)|0);
      HEAP32[(($lstate505)>>2)]=4;
      var $311=$c;
      var $cmp506=(($311)|(0))==64;
      if ($cmp506) { label = 206; break; } else { label = 207; break; }
    case 206: 
      $retval=324;
      label = 711; break;
    case 207: 
      var $312=$p_addr;
      var $313=$c;
      _pushback($312, $313);
      $retval=43;
      label = 711; break;
    case 208: 
      var $314=$c;
      var $cmp511=(($314)|(0))==61;
      if ($cmp511) { label = 209; break; } else { label = 210; break; }
    case 209: 
      var $315=$p_addr;
      var $call514=_intern_gen_c($315, 43);
      var $316=$p_addr;
      var $ylval515=(($316+1124)|0);
      var $317=HEAP32[(($ylval515)>>2)];
      var $318=$317;
      var $id516=$318;
      HEAP16[(($id516)>>1)]=$call514;
      var $319=$p_addr;
      var $lstate517=(($319+40)|0);
      HEAP32[(($lstate517)>>2)]=0;
      $retval=345;
      label = 711; break;
    case 210: 
      var $320=$p_addr;
      var $lstate519=(($320+40)|0);
      var $321=HEAP32[(($lstate519)>>2)];
      var $cmp520=(($321)|(0))==0;
      if ($cmp520) { label = 219; break; } else { label = 211; break; }
    case 211: 
      var $322=$p_addr;
      var $lstate523=(($322+40)|0);
      var $323=HEAP32[(($lstate523)>>2)];
      var $cmp524=(($323)|(0))==6;
      if ($cmp524) { label = 219; break; } else { label = 212; break; }
    case 212: 
      var $324=$p_addr;
      var $lstate527=(($324+40)|0);
      var $325=HEAP32[(($lstate527)>>2)];
      var $cmp528=(($325)|(0))==10;
      if ($cmp528) { label = 219; break; } else { label = 213; break; }
    case 213: 
      var $326=$p_addr;
      var $lstate531=(($326+40)|0);
      var $327=HEAP32[(($lstate531)>>2)];
      var $cmp532=(($327)|(0))==9;
      if ($cmp532) { label = 219; break; } else { label = 214; break; }
    case 214: 
      var $328=$p_addr;
      var $lstate535=(($328+40)|0);
      var $329=HEAP32[(($lstate535)>>2)];
      var $cmp536=(($329)|(0))==4;
      if ($cmp536) { label = 216; break; } else { label = 215; break; }
    case 215: 
      var $330=$p_addr;
      var $lstate539=(($330+40)|0);
      var $331=HEAP32[(($lstate539)>>2)];
      var $cmp540=(($331)|(0))==5;
      if ($cmp540) { label = 216; break; } else { label = 223; break; }
    case 216: 
      var $332=$space_seen;
      var $tobool543=(($332)|(0))!=0;
      if ($tobool543) { label = 217; break; } else { label = 223; break; }
    case 217: 
      var $333=$c;
      var $conv545=(($333) & 255);
      var $conv546=(($conv545)&(255));
      var $call547=_isspace($conv546);
      var $tobool548=(($call547)|(0))!=0;
      if ($tobool548) { label = 223; break; } else { label = 218; break; }
    case 218: 
      var $334=$p_addr;
      var $call550=_arg_ambiguous($334);
      var $tobool551=(($call550)|(0))!=0;
      if ($tobool551) { label = 219; break; } else { label = 223; break; }
    case 219: 
      var $335=$p_addr;
      var $lstate553=(($335+40)|0);
      HEAP32[(($lstate553)>>2)]=0;
      var $336=$p_addr;
      var $337=$c;
      _pushback($336, $337);
      var $338=$c;
      var $cmp554=(($338)|(0))!=-1;
      if ($cmp554) { label = 220; break; } else { label = 222; break; }
    case 220: 
      var $339=$c;
      var $conv557=(($339) & 255);
      var $conv558=(($conv557)&(255));
      var $call559=_isdigit($conv558);
      var $tobool560=(($call559)|(0))!=0;
      if ($tobool560) { label = 221; break; } else { label = 222; break; }
    case 221: 
      $c=43;
      label = 255; break;
    case 222: 
      $retval=324;
      label = 711; break;
    case 223: 
      var $340=$p_addr;
      var $lstate564=(($340+40)|0);
      HEAP32[(($lstate564)>>2)]=0;
      var $341=$p_addr;
      var $342=$c;
      _pushback($341, $342);
      $retval=43;
      label = 711; break;
    case 224: 
      var $343=$p_addr;
      var $call566=_nextc($343);
      $c=$call566;
      var $344=$p_addr;
      var $lstate567=(($344+40)|0);
      var $345=HEAP32[(($lstate567)>>2)];
      var $cmp568=(($345)|(0))==7;
      if ($cmp568) { label = 226; break; } else { label = 225; break; }
    case 225: 
      var $346=$p_addr;
      var $lstate571=(($346+40)|0);
      var $347=HEAP32[(($lstate571)>>2)];
      var $cmp572=(($347)|(0))==8;
      if ($cmp572) { label = 226; break; } else { label = 229; break; }
    case 226: 
      var $348=$p_addr;
      var $lstate575=(($348+40)|0);
      HEAP32[(($lstate575)>>2)]=4;
      var $349=$c;
      var $cmp576=(($349)|(0))==64;
      if ($cmp576) { label = 227; break; } else { label = 228; break; }
    case 227: 
      $retval=325;
      label = 711; break;
    case 228: 
      var $350=$p_addr;
      var $351=$c;
      _pushback($350, $351);
      $retval=45;
      label = 711; break;
    case 229: 
      var $352=$c;
      var $cmp581=(($352)|(0))==61;
      if ($cmp581) { label = 230; break; } else { label = 231; break; }
    case 230: 
      var $353=$p_addr;
      var $call584=_intern_gen_c($353, 45);
      var $354=$p_addr;
      var $ylval585=(($354+1124)|0);
      var $355=HEAP32[(($ylval585)>>2)];
      var $356=$355;
      var $id586=$356;
      HEAP16[(($id586)>>1)]=$call584;
      var $357=$p_addr;
      var $lstate587=(($357+40)|0);
      HEAP32[(($lstate587)>>2)]=0;
      $retval=345;
      label = 711; break;
    case 231: 
      var $358=$c;
      var $cmp589=(($358)|(0))==62;
      if ($cmp589) { label = 232; break; } else { label = 233; break; }
    case 232: 
      var $359=$p_addr;
      var $lstate592=(($359+40)|0);
      HEAP32[(($lstate592)>>2)]=3;
      $retval=355;
      label = 711; break;
    case 233: 
      var $360=$p_addr;
      var $lstate594=(($360+40)|0);
      var $361=HEAP32[(($lstate594)>>2)];
      var $cmp595=(($361)|(0))==0;
      if ($cmp595) { label = 242; break; } else { label = 234; break; }
    case 234: 
      var $362=$p_addr;
      var $lstate598=(($362+40)|0);
      var $363=HEAP32[(($lstate598)>>2)];
      var $cmp599=(($363)|(0))==6;
      if ($cmp599) { label = 242; break; } else { label = 235; break; }
    case 235: 
      var $364=$p_addr;
      var $lstate602=(($364+40)|0);
      var $365=HEAP32[(($lstate602)>>2)];
      var $cmp603=(($365)|(0))==10;
      if ($cmp603) { label = 242; break; } else { label = 236; break; }
    case 236: 
      var $366=$p_addr;
      var $lstate606=(($366+40)|0);
      var $367=HEAP32[(($lstate606)>>2)];
      var $cmp607=(($367)|(0))==9;
      if ($cmp607) { label = 242; break; } else { label = 237; break; }
    case 237: 
      var $368=$p_addr;
      var $lstate610=(($368+40)|0);
      var $369=HEAP32[(($lstate610)>>2)];
      var $cmp611=(($369)|(0))==4;
      if ($cmp611) { label = 239; break; } else { label = 238; break; }
    case 238: 
      var $370=$p_addr;
      var $lstate614=(($370+40)|0);
      var $371=HEAP32[(($lstate614)>>2)];
      var $cmp615=(($371)|(0))==5;
      if ($cmp615) { label = 239; break; } else { label = 246; break; }
    case 239: 
      var $372=$space_seen;
      var $tobool618=(($372)|(0))!=0;
      if ($tobool618) { label = 240; break; } else { label = 246; break; }
    case 240: 
      var $373=$c;
      var $conv620=(($373) & 255);
      var $conv621=(($conv620)&(255));
      var $call622=_isspace($conv621);
      var $tobool623=(($call622)|(0))!=0;
      if ($tobool623) { label = 246; break; } else { label = 241; break; }
    case 241: 
      var $374=$p_addr;
      var $call625=_arg_ambiguous($374);
      var $tobool626=(($call625)|(0))!=0;
      if ($tobool626) { label = 242; break; } else { label = 246; break; }
    case 242: 
      var $375=$p_addr;
      var $lstate628=(($375+40)|0);
      HEAP32[(($lstate628)>>2)]=0;
      var $376=$p_addr;
      var $377=$c;
      _pushback($376, $377);
      var $378=$c;
      var $cmp629=(($378)|(0))!=-1;
      if ($cmp629) { label = 243; break; } else { label = 245; break; }
    case 243: 
      var $379=$c;
      var $conv632=(($379) & 255);
      var $conv633=(($conv632)&(255));
      var $call634=_isdigit($conv633);
      var $tobool635=(($call634)|(0))!=0;
      if ($tobool635) { label = 244; break; } else { label = 245; break; }
    case 244: 
      $retval=368;
      label = 711; break;
    case 245: 
      $retval=325;
      label = 711; break;
    case 246: 
      var $380=$p_addr;
      var $lstate639=(($380+40)|0);
      HEAP32[(($lstate639)>>2)]=0;
      var $381=$p_addr;
      var $382=$c;
      _pushback($381, $382);
      $retval=45;
      label = 711; break;
    case 247: 
      var $383=$p_addr;
      var $lstate641=(($383+40)|0);
      HEAP32[(($lstate641)>>2)]=0;
      var $384=$p_addr;
      var $call642=_nextc($384);
      $c=$call642;
      var $cmp643=(($call642)|(0))==46;
      if ($cmp643) { label = 248; break; } else { label = 251; break; }
    case 248: 
      var $385=$p_addr;
      var $call646=_nextc($385);
      $c=$call646;
      var $cmp647=(($call646)|(0))==46;
      if ($cmp647) { label = 249; break; } else { label = 250; break; }
    case 249: 
      $retval=338;
      label = 711; break;
    case 250: 
      var $386=$p_addr;
      var $387=$c;
      _pushback($386, $387);
      $retval=337;
      label = 711; break;
    case 251: 
      var $388=$p_addr;
      var $389=$c;
      _pushback($388, $389);
      var $390=$c;
      var $cmp652=(($390)|(0))!=-1;
      if ($cmp652) { label = 252; break; } else { label = 254; break; }
    case 252: 
      var $391=$c;
      var $conv655=(($391) & 255);
      var $conv656=(($conv655)&(255));
      var $call657=_isdigit($conv656);
      var $tobool658=(($call657)|(0))!=0;
      if ($tobool658) { label = 253; break; } else { label = 254; break; }
    case 253: 
      var $392=$p_addr;
      _yyerror($392, ((109264)|0));
      label = 254; break;
    case 254: 
      var $393=$p_addr;
      var $lstate661=(($393+40)|0);
      HEAP32[(($lstate661)>>2)]=8;
      $retval=46;
      label = 711; break;
    case 255: 
      label = 256; break;
    case 256: 
      $nondigit=0;
      $seen_e=0;
      $seen_point=0;
      $is_float=0;
      var $394=$p_addr;
      var $lstate663=(($394+40)|0);
      HEAP32[(($lstate663)>>2)]=1;
      var $395=$p_addr;
      var $call664=_newtok($395);
      $token_column=$call664;
      var $396=$c;
      var $cmp665=(($396)|(0))==45;
      if ($cmp665) { label = 258; break; } else { label = 257; break; }
    case 257: 
      var $397=$c;
      var $cmp668=(($397)|(0))==43;
      if ($cmp668) { label = 258; break; } else { label = 259; break; }
    case 258: 
      var $398=$p_addr;
      var $399=$c;
      _tokadd($398, $399);
      var $400=$p_addr;
      var $call671=_nextc($400);
      $c=$call671;
      label = 259; break;
    case 259: 
      var $401=$c;
      var $cmp673=(($401)|(0))==48;
      if ($cmp673) { label = 260; break; } else { label = 371; break; }
    case 260: 
      var $402=$p_addr;
      var $call676=_toklen($402);
      $start=$call676;
      var $403=$p_addr;
      var $call677=_nextc($403);
      $c=$call677;
      var $404=$c;
      var $cmp678=(($404)|(0))==120;
      if ($cmp678) { label = 262; break; } else { label = 261; break; }
    case 261: 
      var $405=$c;
      var $cmp681=(($405)|(0))==88;
      if ($cmp681) { label = 262; break; } else { label = 282; break; }
    case 262: 
      var $406=$p_addr;
      var $call684=_nextc($406);
      $c=$call684;
      var $407=$c;
      var $cmp685=(($407)|(0))!=-1;
      if ($cmp685) { label = 263; break; } else { label = 274; break; }
    case 263: 
      var $408=$c;
      var $conv688=(($408) & 255);
      var $conv689=(($conv688)&(255));
      var $call690=_isxdigit($conv689);
      var $tobool691=(($call690)|(0))!=0;
      if ($tobool691) { label = 264; break; } else { label = 274; break; }
    case 264: 
      label = 265; break;
    case 265: 
      var $409=$c;
      var $cmp693=(($409)|(0))==95;
      if ($cmp693) { label = 266; break; } else { label = 269; break; }
    case 266: 
      var $410=$nondigit;
      var $tobool696=(($410)|(0))!=0;
      if ($tobool696) { label = 267; break; } else { label = 268; break; }
    case 267: 
      label = 273; break;
    case 268: 
      var $411=$c;
      $nondigit=$411;
      label = 272; break;
    case 269: 
      var $412=$c;
      var $conv700=(($412) & 255);
      var $conv701=(($conv700)&(255));
      var $call702=_isxdigit($conv701);
      var $tobool703=(($call702)|(0))!=0;
      if ($tobool703) { label = 271; break; } else { label = 270; break; }
    case 270: 
      label = 273; break;
    case 271: 
      $nondigit=0;
      var $413=$p_addr;
      var $414=$c;
      var $call706=_tolower($414);
      _tokadd($413, $call706);
      label = 272; break;
    case 272: 
      var $415=$p_addr;
      var $call707=_nextc($415);
      $c=$call707;
      var $cmp708=(($call707)|(0))!=-1;
      if ($cmp708) { label = 265; break; } else { label = 273; break; }
    case 273: 
      label = 274; break;
    case 274: 
      var $416=$p_addr;
      var $417=$c;
      _pushback($416, $417);
      var $418=$p_addr;
      _tokfix($418);
      var $419=$p_addr;
      var $call711=_toklen($419);
      var $420=$start;
      var $cmp712=(($call711)|(0))==(($420)|(0));
      if ($cmp712) { label = 275; break; } else { label = 278; break; }
    case 275: 
      label = 276; break;
    case 276: 
      var $421=$p_addr;
      _yyerror($421, ((109232)|0));
      $retval=0;
      label = 711; break;
    case 277: 
      label = 281; break;
    case 278: 
      var $422=$nondigit;
      var $tobool719=(($422)|(0))!=0;
      if ($tobool719) { label = 279; break; } else { label = 280; break; }
    case 279: 
      label = 399; break;
    case 280: 
      label = 281; break;
    case 281: 
      var $423=$p_addr;
      var $424=$p_addr;
      var $call723=_tok($424);
      var $call724=_new_int($423, $call723, 16);
      var $425=$p_addr;
      var $ylval725=(($425+1124)|0);
      var $426=HEAP32[(($ylval725)>>2)];
      var $427=$426;
      var $nd726=$427;
      HEAP32[(($nd726)>>2)]=$call724;
      $retval=313;
      label = 711; break;
    case 282: 
      var $428=$c;
      var $cmp728=(($428)|(0))==98;
      if ($cmp728) { label = 284; break; } else { label = 283; break; }
    case 283: 
      var $429=$c;
      var $cmp731=(($429)|(0))==66;
      if ($cmp731) { label = 284; break; } else { label = 305; break; }
    case 284: 
      var $430=$p_addr;
      var $call734=_nextc($430);
      $c=$call734;
      var $431=$c;
      var $cmp735=(($431)|(0))==48;
      if ($cmp735) { label = 286; break; } else { label = 285; break; }
    case 285: 
      var $432=$c;
      var $cmp738=(($432)|(0))==49;
      if ($cmp738) { label = 286; break; } else { label = 297; break; }
    case 286: 
      label = 287; break;
    case 287: 
      var $433=$c;
      var $cmp742=(($433)|(0))==95;
      if ($cmp742) { label = 288; break; } else { label = 291; break; }
    case 288: 
      var $434=$nondigit;
      var $tobool745=(($434)|(0))!=0;
      if ($tobool745) { label = 289; break; } else { label = 290; break; }
    case 289: 
      label = 296; break;
    case 290: 
      var $435=$c;
      $nondigit=$435;
      label = 295; break;
    case 291: 
      var $436=$c;
      var $cmp749=(($436)|(0))!=48;
      if ($cmp749) { label = 292; break; } else { label = 294; break; }
    case 292: 
      var $437=$c;
      var $cmp752=(($437)|(0))!=49;
      if ($cmp752) { label = 293; break; } else { label = 294; break; }
    case 293: 
      label = 296; break;
    case 294: 
      $nondigit=0;
      var $438=$p_addr;
      var $439=$c;
      _tokadd($438, $439);
      label = 295; break;
    case 295: 
      var $440=$p_addr;
      var $call757=_nextc($440);
      $c=$call757;
      var $cmp758=(($call757)|(0))!=-1;
      if ($cmp758) { label = 287; break; } else { label = 296; break; }
    case 296: 
      label = 297; break;
    case 297: 
      var $441=$p_addr;
      var $442=$c;
      _pushback($441, $442);
      var $443=$p_addr;
      _tokfix($443);
      var $444=$p_addr;
      var $call762=_toklen($444);
      var $445=$start;
      var $cmp763=(($call762)|(0))==(($445)|(0));
      if ($cmp763) { label = 298; break; } else { label = 301; break; }
    case 298: 
      label = 299; break;
    case 299: 
      var $446=$p_addr;
      _yyerror($446, ((109232)|0));
      $retval=0;
      label = 711; break;
    case 300: 
      label = 304; break;
    case 301: 
      var $447=$nondigit;
      var $tobool770=(($447)|(0))!=0;
      if ($tobool770) { label = 302; break; } else { label = 303; break; }
    case 302: 
      label = 399; break;
    case 303: 
      label = 304; break;
    case 304: 
      var $448=$p_addr;
      var $449=$p_addr;
      var $call774=_tok($449);
      var $call775=_new_int($448, $call774, 2);
      var $450=$p_addr;
      var $ylval776=(($450+1124)|0);
      var $451=HEAP32[(($ylval776)>>2)];
      var $452=$451;
      var $nd777=$452;
      HEAP32[(($nd777)>>2)]=$call775;
      $retval=313;
      label = 711; break;
    case 305: 
      var $453=$c;
      var $cmp779=(($453)|(0))==100;
      if ($cmp779) { label = 307; break; } else { label = 306; break; }
    case 306: 
      var $454=$c;
      var $cmp782=(($454)|(0))==68;
      if ($cmp782) { label = 307; break; } else { label = 327; break; }
    case 307: 
      var $455=$p_addr;
      var $call785=_nextc($455);
      $c=$call785;
      var $456=$c;
      var $cmp786=(($456)|(0))!=-1;
      if ($cmp786) { label = 308; break; } else { label = 319; break; }
    case 308: 
      var $457=$c;
      var $conv789=(($457) & 255);
      var $conv790=(($conv789)&(255));
      var $call791=_isdigit($conv790);
      var $tobool792=(($call791)|(0))!=0;
      if ($tobool792) { label = 309; break; } else { label = 319; break; }
    case 309: 
      label = 310; break;
    case 310: 
      var $458=$c;
      var $cmp795=(($458)|(0))==95;
      if ($cmp795) { label = 311; break; } else { label = 314; break; }
    case 311: 
      var $459=$nondigit;
      var $tobool798=(($459)|(0))!=0;
      if ($tobool798) { label = 312; break; } else { label = 313; break; }
    case 312: 
      label = 318; break;
    case 313: 
      var $460=$c;
      $nondigit=$460;
      label = 317; break;
    case 314: 
      var $461=$c;
      var $conv802=(($461) & 255);
      var $conv803=(($conv802)&(255));
      var $call804=_isdigit($conv803);
      var $tobool805=(($call804)|(0))!=0;
      if ($tobool805) { label = 316; break; } else { label = 315; break; }
    case 315: 
      label = 318; break;
    case 316: 
      $nondigit=0;
      var $462=$p_addr;
      var $463=$c;
      _tokadd($462, $463);
      label = 317; break;
    case 317: 
      var $464=$p_addr;
      var $call809=_nextc($464);
      $c=$call809;
      var $cmp810=(($call809)|(0))!=-1;
      if ($cmp810) { label = 310; break; } else { label = 318; break; }
    case 318: 
      label = 319; break;
    case 319: 
      var $465=$p_addr;
      var $466=$c;
      _pushback($465, $466);
      var $467=$p_addr;
      _tokfix($467);
      var $468=$p_addr;
      var $call814=_toklen($468);
      var $469=$start;
      var $cmp815=(($call814)|(0))==(($469)|(0));
      if ($cmp815) { label = 320; break; } else { label = 323; break; }
    case 320: 
      label = 321; break;
    case 321: 
      var $470=$p_addr;
      _yyerror($470, ((109232)|0));
      $retval=0;
      label = 711; break;
    case 322: 
      label = 326; break;
    case 323: 
      var $471=$nondigit;
      var $tobool822=(($471)|(0))!=0;
      if ($tobool822) { label = 324; break; } else { label = 325; break; }
    case 324: 
      label = 399; break;
    case 325: 
      label = 326; break;
    case 326: 
      var $472=$p_addr;
      var $473=$p_addr;
      var $call826=_tok($473);
      var $call827=_new_int($472, $call826, 10);
      var $474=$p_addr;
      var $ylval828=(($474+1124)|0);
      var $475=HEAP32[(($ylval828)>>2)];
      var $476=$475;
      var $nd829=$476;
      HEAP32[(($nd829)>>2)]=$call827;
      $retval=313;
      label = 711; break;
    case 327: 
      var $477=$c;
      var $cmp831=(($477)|(0))==95;
      if ($cmp831) { label = 328; break; } else { label = 329; break; }
    case 328: 
      label = 341; break;
    case 329: 
      var $478=$c;
      var $cmp835=(($478)|(0))==111;
      if ($cmp835) { label = 331; break; } else { label = 330; break; }
    case 330: 
      var $479=$c;
      var $cmp838=(($479)|(0))==79;
      if ($cmp838) { label = 331; break; } else { label = 338; break; }
    case 331: 
      var $480=$p_addr;
      var $call841=_nextc($480);
      $c=$call841;
      var $481=$c;
      var $cmp842=(($481)|(0))==-1;
      if ($cmp842) { label = 334; break; } else { label = 332; break; }
    case 332: 
      var $482=$c;
      var $cmp845=(($482)|(0))==95;
      if ($cmp845) { label = 334; break; } else { label = 333; break; }
    case 333: 
      var $483=$c;
      var $conv848=(($483) & 255);
      var $conv849=(($conv848)&(255));
      var $call850=_isdigit($conv849);
      var $tobool851=(($call850)|(0))!=0;
      if ($tobool851) { label = 337; break; } else { label = 334; break; }
    case 334: 
      label = 335; break;
    case 335: 
      var $484=$p_addr;
      _yyerror($484, ((109232)|0));
      $retval=0;
      label = 711; break;
    case 336: 
      label = 337; break;
    case 337: 
      label = 338; break;
    case 338: 
      var $485=$c;
      var $cmp858=(($485)|(0)) >= 48;
      if ($cmp858) { label = 339; break; } else { label = 360; break; }
    case 339: 
      var $486=$c;
      var $cmp861=(($486)|(0)) <= 55;
      if ($cmp861) { label = 340; break; } else { label = 360; break; }
    case 340: 
      label = 341; break;
    case 341: 
      label = 342; break;
    case 342: 
      var $487=$c;
      var $cmp865=(($487)|(0))==95;
      if ($cmp865) { label = 343; break; } else { label = 346; break; }
    case 343: 
      var $488=$nondigit;
      var $tobool868=(($488)|(0))!=0;
      if ($tobool868) { label = 344; break; } else { label = 345; break; }
    case 344: 
      label = 353; break;
    case 345: 
      var $489=$c;
      $nondigit=$489;
      label = 352; break;
    case 346: 
      var $490=$c;
      var $cmp872=(($490)|(0)) < 48;
      if ($cmp872) { label = 348; break; } else { label = 347; break; }
    case 347: 
      var $491=$c;
      var $cmp875=(($491)|(0)) > 57;
      if ($cmp875) { label = 348; break; } else { label = 349; break; }
    case 348: 
      label = 353; break;
    case 349: 
      var $492=$c;
      var $cmp879=(($492)|(0)) > 55;
      if ($cmp879) { label = 350; break; } else { label = 351; break; }
    case 350: 
      label = 363; break;
    case 351: 
      $nondigit=0;
      var $493=$p_addr;
      var $494=$c;
      _tokadd($493, $494);
      label = 352; break;
    case 352: 
      var $495=$p_addr;
      var $call884=_nextc($495);
      $c=$call884;
      var $cmp885=(($call884)|(0))!=-1;
      if ($cmp885) { label = 342; break; } else { label = 353; break; }
    case 353: 
      var $496=$p_addr;
      var $call888=_toklen($496);
      var $497=$start;
      var $cmp889=(($call888)|(0)) > (($497)|(0));
      if ($cmp889) { label = 354; break; } else { label = 357; break; }
    case 354: 
      var $498=$p_addr;
      var $499=$c;
      _pushback($498, $499);
      var $500=$p_addr;
      _tokfix($500);
      var $501=$nondigit;
      var $tobool892=(($501)|(0))!=0;
      if ($tobool892) { label = 355; break; } else { label = 356; break; }
    case 355: 
      label = 399; break;
    case 356: 
      var $502=$p_addr;
      var $503=$p_addr;
      var $call895=_tok($503);
      var $call896=_new_int($502, $call895, 8);
      var $504=$p_addr;
      var $ylval897=(($504+1124)|0);
      var $505=HEAP32[(($ylval897)>>2)];
      var $506=$505;
      var $nd898=$506;
      HEAP32[(($nd898)>>2)]=$call896;
      $retval=313;
      label = 711; break;
    case 357: 
      var $507=$nondigit;
      var $tobool900=(($507)|(0))!=0;
      if ($tobool900) { label = 358; break; } else { label = 359; break; }
    case 358: 
      var $508=$p_addr;
      var $509=$c;
      _pushback($508, $509);
      label = 399; break;
    case 359: 
      label = 360; break;
    case 360: 
      var $510=$c;
      var $cmp904=(($510)|(0)) > 55;
      if ($cmp904) { label = 361; break; } else { label = 364; break; }
    case 361: 
      var $511=$c;
      var $cmp907=(($511)|(0)) <= 57;
      if ($cmp907) { label = 362; break; } else { label = 364; break; }
    case 362: 
      label = 363; break;
    case 363: 
      var $512=$p_addr;
      _yyerror($512, ((109212)|0));
      label = 370; break;
    case 364: 
      var $513=$c;
      var $cmp911=(($513)|(0))==46;
      if ($cmp911) { label = 367; break; } else { label = 365; break; }
    case 365: 
      var $514=$c;
      var $cmp914=(($514)|(0))==101;
      if ($cmp914) { label = 367; break; } else { label = 366; break; }
    case 366: 
      var $515=$c;
      var $cmp917=(($515)|(0))==69;
      if ($cmp917) { label = 367; break; } else { label = 368; break; }
    case 367: 
      var $516=$p_addr;
      _tokadd($516, 48);
      label = 369; break;
    case 368: 
      var $517=$p_addr;
      var $518=$c;
      _pushback($517, $518);
      var $519=$p_addr;
      var $call921=_new_int($519, ((109200)|0), 10);
      var $520=$p_addr;
      var $ylval922=(($520+1124)|0);
      var $521=HEAP32[(($ylval922)>>2)];
      var $522=$521;
      var $nd923=$522;
      HEAP32[(($nd923)>>2)]=$call921;
      $retval=313;
      label = 711; break;
    case 369: 
      label = 370; break;
    case 370: 
      label = 371; break;
    case 371: 
      label = 372; break;
    case 372: 
      var $523=$c;
      if ((($523)|(0))==48 | (($523)|(0))==49 | (($523)|(0))==50 | (($523)|(0))==51 | (($523)|(0))==52 | (($523)|(0))==53 | (($523)|(0))==54 | (($523)|(0))==55 | (($523)|(0))==56 | (($523)|(0))==57) {
        label = 373; break;
      }
      else if ((($523)|(0))==46) {
        label = 374; break;
      }
      else if ((($523)|(0))==101 | (($523)|(0))==69) {
        label = 384; break;
      }
      else if ((($523)|(0))==95) {
        label = 392; break;
      }
      else {
      label = 395; break;
      }
    case 373: 
      $nondigit=0;
      var $524=$p_addr;
      var $525=$c;
      _tokadd($524, $525);
      label = 396; break;
    case 374: 
      var $526=$nondigit;
      var $tobool929=(($526)|(0))!=0;
      if ($tobool929) { label = 375; break; } else { label = 376; break; }
    case 375: 
      label = 399; break;
    case 376: 
      var $527=$seen_point;
      var $tobool932=(($527)|(0))!=0;
      if ($tobool932) { label = 378; break; } else { label = 377; break; }
    case 377: 
      var $528=$seen_e;
      var $tobool934=(($528)|(0))!=0;
      if ($tobool934) { label = 378; break; } else { label = 379; break; }
    case 378: 
      label = 397; break;
    case 379: 
      var $529=$p_addr;
      var $call937=_nextc($529);
      $c0=$call937;
      var $530=$c0;
      var $cmp938=(($530)|(0))==-1;
      if ($cmp938) { label = 381; break; } else { label = 380; break; }
    case 380: 
      var $531=$c0;
      var $conv941=(($531) & 255);
      var $conv942=(($conv941)&(255));
      var $call943=_isdigit($conv942);
      var $tobool944=(($call943)|(0))!=0;
      if ($tobool944) { label = 382; break; } else { label = 381; break; }
    case 381: 
      var $532=$p_addr;
      var $533=$c0;
      _pushback($532, $533);
      label = 397; break;
    case 382: 
      var $534=$c0;
      $c=$534;
      label = 383; break;
    case 383: 
      var $535=$p_addr;
      _tokadd($535, 46);
      var $536=$p_addr;
      var $537=$c;
      _tokadd($536, $537);
      var $538=$is_float;
      var $inc948=((($538)+(1))|0);
      $is_float=$inc948;
      var $539=$seen_point;
      var $inc949=((($539)+(1))|0);
      $seen_point=$inc949;
      $nondigit=0;
      label = 396; break;
    case 384: 
      var $540=$nondigit;
      var $tobool951=(($540)|(0))!=0;
      if ($tobool951) { label = 385; break; } else { label = 386; break; }
    case 385: 
      var $541=$p_addr;
      var $542=$c;
      _pushback($541, $542);
      var $543=$nondigit;
      $c=$543;
      label = 397; break;
    case 386: 
      var $544=$seen_e;
      var $tobool954=(($544)|(0))!=0;
      if ($tobool954) { label = 387; break; } else { label = 388; break; }
    case 387: 
      label = 397; break;
    case 388: 
      var $545=$p_addr;
      var $546=$c;
      _tokadd($545, $546);
      var $547=$seen_e;
      var $inc957=((($547)+(1))|0);
      $seen_e=$inc957;
      var $548=$is_float;
      var $inc958=((($548)+(1))|0);
      $is_float=$inc958;
      var $549=$c;
      $nondigit=$549;
      var $550=$p_addr;
      var $call959=_nextc($550);
      $c=$call959;
      var $551=$c;
      var $cmp960=(($551)|(0))!=45;
      if ($cmp960) { label = 389; break; } else { label = 391; break; }
    case 389: 
      var $552=$c;
      var $cmp963=(($552)|(0))!=43;
      if ($cmp963) { label = 390; break; } else { label = 391; break; }
    case 390: 
      label = 372; break;
    case 391: 
      var $553=$p_addr;
      var $554=$c;
      _tokadd($553, $554);
      var $555=$c;
      $nondigit=$555;
      label = 396; break;
    case 392: 
      var $556=$nondigit;
      var $tobool968=(($556)|(0))!=0;
      if ($tobool968) { label = 393; break; } else { label = 394; break; }
    case 393: 
      label = 397; break;
    case 394: 
      var $557=$c;
      $nondigit=$557;
      label = 396; break;
    case 395: 
      label = 397; break;
    case 396: 
      var $558=$p_addr;
      var $call973=_nextc($558);
      $c=$call973;
      label = 372; break;
    case 397: 
      var $559=$p_addr;
      var $560=$c;
      _pushback($559, $560);
      var $561=$nondigit;
      var $tobool974=(($561)|(0))!=0;
      if ($tobool974) { label = 398; break; } else { label = 400; break; }
    case 398: 
      label = 399; break;
    case 399: 
      var $562=$p_addr;
      var $563=$nondigit;
      _yyerror_i($562, ((109168)|0), $563);
      label = 400; break;
    case 400: 
      var $564=$p_addr;
      _tokfix($564);
      var $565=$is_float;
      var $tobool977=(($565)|(0))!=0;
      if ($tobool977) { label = 401; break; } else { label = 408; break; }
    case 401: 
      var $call979=___errno_location();
      HEAP32[(($call979)>>2)]=0;
      var $566=$p_addr;
      var $call980=_tok($566);
      var $call981=_strtod($call980, $endp);
      $d=$call981;
      var $567=$d;
      var $cmp982=$567 == 0;
      if ($cmp982) { label = 402; break; } else { label = 404; break; }
    case 402: 
      var $568=HEAP32[(($endp)>>2)];
      var $569=$p_addr;
      var $call985=_tok($569);
      var $cmp986=(($568)|(0))==(($call985)|(0));
      if ($cmp986) { label = 403; break; } else { label = 404; break; }
    case 403: 
      var $570=$p_addr;
      var $571=$p_addr;
      var $call989=_tok($571);
      _yywarning_s($570, ((109140)|0), $call989);
      label = 407; break;
    case 404: 
      var $call991=___errno_location();
      var $572=HEAP32[(($call991)>>2)];
      var $cmp992=(($572)|(0))==34;
      if ($cmp992) { label = 405; break; } else { label = 406; break; }
    case 405: 
      var $573=$p_addr;
      var $574=$p_addr;
      var $call995=_tok($574);
      _yywarning_s($573, ((109096)|0), $call995);
      var $call996=___errno_location();
      HEAP32[(($call996)>>2)]=0;
      label = 406; break;
    case 406: 
      label = 407; break;
    case 407: 
      var $575=$p_addr;
      var $576=$p_addr;
      var $call999=_tok($576);
      var $call1000=_new_float($575, $call999);
      var $577=$p_addr;
      var $ylval1001=(($577+1124)|0);
      var $578=HEAP32[(($ylval1001)>>2)];
      var $579=$578;
      var $nd1002=$579;
      HEAP32[(($nd1002)>>2)]=$call1000;
      $retval=314;
      label = 711; break;
    case 408: 
      var $580=$p_addr;
      var $581=$p_addr;
      var $call1004=_tok($581);
      var $call1005=_new_int($580, $call1004, 10);
      var $582=$p_addr;
      var $ylval1006=(($582+1124)|0);
      var $583=HEAP32[(($ylval1006)>>2)];
      var $584=$583;
      var $nd1007=$584;
      HEAP32[(($nd1007)>>2)]=$call1005;
      $retval=313;
      label = 711; break;
    case 409: 
      var $585=$p_addr;
      var $paren_nest=(($585+56)|0);
      var $586=HEAP32[(($paren_nest)>>2)];
      var $dec=((($586)-(1))|0);
      HEAP32[(($paren_nest)>>2)]=$dec;
      label = 410; break;
    case 410: 
      var $587=$p_addr;
      var $cond_stack=(($587+48)|0);
      var $588=HEAP32[(($cond_stack)>>2)];
      var $shr=$588 >>> 1;
      var $589=$p_addr;
      var $cond_stack1010=(($589+48)|0);
      var $590=HEAP32[(($cond_stack1010)>>2)];
      var $and1011=$590 & 1;
      var $or=$shr | $and1011;
      var $591=$p_addr;
      var $cond_stack1012=(($591+48)|0);
      HEAP32[(($cond_stack1012)>>2)]=$or;
      var $592=$p_addr;
      var $cmdarg_stack=(($592+52)|0);
      var $593=HEAP32[(($cmdarg_stack)>>2)];
      var $shr1013=$593 >>> 1;
      var $594=$p_addr;
      var $cmdarg_stack1014=(($594+52)|0);
      var $595=HEAP32[(($cmdarg_stack1014)>>2)];
      var $and1015=$595 & 1;
      var $or1016=$shr1013 | $and1015;
      var $596=$p_addr;
      var $cmdarg_stack1017=(($596+52)|0);
      HEAP32[(($cmdarg_stack1017)>>2)]=$or1016;
      var $597=$c;
      var $cmp1018=(($597)|(0))==41;
      if ($cmp1018) { label = 411; break; } else { label = 412; break; }
    case 411: 
      var $598=$p_addr;
      var $lstate1021=(($598+40)|0);
      HEAP32[(($lstate1021)>>2)]=3;
      label = 413; break;
    case 412: 
      var $599=$p_addr;
      var $lstate1023=(($599+40)|0);
      HEAP32[(($lstate1023)>>2)]=2;
      label = 413; break;
    case 413: 
      var $600=$c;
      $retval=$600;
      label = 711; break;
    case 414: 
      var $601=$p_addr;
      var $call1026=_nextc($601);
      $c=$call1026;
      var $602=$c;
      var $cmp1027=(($602)|(0))==58;
      if ($cmp1027) { label = 415; break; } else { label = 426; break; }
    case 415: 
      var $603=$p_addr;
      var $lstate1030=(($603+40)|0);
      var $604=HEAP32[(($lstate1030)>>2)];
      var $cmp1031=(($604)|(0))==0;
      if ($cmp1031) { label = 424; break; } else { label = 416; break; }
    case 416: 
      var $605=$p_addr;
      var $lstate1034=(($605+40)|0);
      var $606=HEAP32[(($lstate1034)>>2)];
      var $cmp1035=(($606)|(0))==6;
      if ($cmp1035) { label = 424; break; } else { label = 417; break; }
    case 417: 
      var $607=$p_addr;
      var $lstate1038=(($607+40)|0);
      var $608=HEAP32[(($lstate1038)>>2)];
      var $cmp1039=(($608)|(0))==10;
      if ($cmp1039) { label = 424; break; } else { label = 418; break; }
    case 418: 
      var $609=$p_addr;
      var $lstate1042=(($609+40)|0);
      var $610=HEAP32[(($lstate1042)>>2)];
      var $cmp1043=(($610)|(0))==9;
      if ($cmp1043) { label = 424; break; } else { label = 419; break; }
    case 419: 
      var $611=$p_addr;
      var $lstate1046=(($611+40)|0);
      var $612=HEAP32[(($lstate1046)>>2)];
      var $cmp1047=(($612)|(0))==9;
      if ($cmp1047) { label = 424; break; } else { label = 420; break; }
    case 420: 
      var $613=$p_addr;
      var $lstate1050=(($613+40)|0);
      var $614=HEAP32[(($lstate1050)>>2)];
      var $cmp1051=(($614)|(0))==4;
      if ($cmp1051) { label = 422; break; } else { label = 421; break; }
    case 421: 
      var $615=$p_addr;
      var $lstate1054=(($615+40)|0);
      var $616=HEAP32[(($lstate1054)>>2)];
      var $cmp1055=(($616)|(0))==5;
      if ($cmp1055) { label = 422; break; } else { label = 425; break; }
    case 422: 
      var $617=$space_seen;
      var $tobool1058=(($617)|(0))!=0;
      if ($tobool1058) { label = 423; break; } else { label = 425; break; }
    case 423: 
      var $call1060=_isspace(255);
      var $tobool1061=(($call1060)|(0))!=0;
      if ($tobool1061) { label = 425; break; } else { label = 424; break; }
    case 424: 
      var $618=$p_addr;
      var $lstate1063=(($618+40)|0);
      HEAP32[(($lstate1063)>>2)]=0;
      $retval=344;
      label = 711; break;
    case 425: 
      var $619=$p_addr;
      var $lstate1065=(($619+40)|0);
      HEAP32[(($lstate1065)>>2)]=8;
      $retval=343;
      label = 711; break;
    case 426: 
      var $620=$p_addr;
      var $lstate1067=(($620+40)|0);
      var $621=HEAP32[(($lstate1067)>>2)];
      var $cmp1068=(($621)|(0))==1;
      if ($cmp1068) { label = 430; break; } else { label = 427; break; }
    case 427: 
      var $622=$p_addr;
      var $lstate1071=(($622+40)|0);
      var $623=HEAP32[(($lstate1071)>>2)];
      var $cmp1072=(($623)|(0))==2;
      if ($cmp1072) { label = 430; break; } else { label = 428; break; }
    case 428: 
      var $624=$p_addr;
      var $lstate1075=(($624+40)|0);
      var $625=HEAP32[(($lstate1075)>>2)];
      var $cmp1076=(($625)|(0))==3;
      if ($cmp1076) { label = 430; break; } else { label = 429; break; }
    case 429: 
      var $626=$c;
      var $conv1079=(($626) & 255);
      var $conv1080=(($conv1079)&(255));
      var $call1081=_isspace($conv1080);
      var $tobool1082=(($call1081)|(0))!=0;
      if ($tobool1082) { label = 430; break; } else { label = 431; break; }
    case 430: 
      var $627=$p_addr;
      var $628=$c;
      _pushback($627, $628);
      var $629=$p_addr;
      var $lstate1084=(($629+40)|0);
      HEAP32[(($lstate1084)>>2)]=0;
      $retval=58;
      label = 711; break;
    case 431: 
      var $630=$p_addr;
      var $631=$c;
      _pushback($630, $631);
      var $632=$p_addr;
      var $lstate1086=(($632+40)|0);
      HEAP32[(($lstate1086)>>2)]=7;
      $retval=356;
      label = 711; break;
    case 432: 
      var $633=$p_addr;
      var $lstate1088=(($633+40)|0);
      var $634=HEAP32[(($lstate1088)>>2)];
      var $cmp1089=(($634)|(0))==0;
      if ($cmp1089) { label = 436; break; } else { label = 433; break; }
    case 433: 
      var $635=$p_addr;
      var $lstate1092=(($635+40)|0);
      var $636=HEAP32[(($lstate1092)>>2)];
      var $cmp1093=(($636)|(0))==6;
      if ($cmp1093) { label = 436; break; } else { label = 434; break; }
    case 434: 
      var $637=$p_addr;
      var $lstate1096=(($637+40)|0);
      var $638=HEAP32[(($lstate1096)>>2)];
      var $cmp1097=(($638)|(0))==10;
      if ($cmp1097) { label = 436; break; } else { label = 435; break; }
    case 435: 
      var $639=$p_addr;
      var $lstate1100=(($639+40)|0);
      var $640=HEAP32[(($lstate1100)>>2)];
      var $cmp1101=(($640)|(0))==9;
      if ($cmp1101) { label = 436; break; } else { label = 437; break; }
    case 436: 
      var $641=$p_addr;
      var $call1104=_new_strterm($641, 7, 47, 0);
      var $642=$p_addr;
      var $lex_strterm1105=(($642+44)|0);
      HEAP32[(($lex_strterm1105)>>2)]=$call1104;
      $retval=357;
      label = 711; break;
    case 437: 
      var $643=$p_addr;
      var $call1107=_nextc($643);
      $c=$call1107;
      var $cmp1108=(($call1107)|(0))==61;
      if ($cmp1108) { label = 438; break; } else { label = 439; break; }
    case 438: 
      var $644=$p_addr;
      var $call1111=_intern_gen_c($644, 47);
      var $645=$p_addr;
      var $ylval1112=(($645+1124)|0);
      var $646=HEAP32[(($ylval1112)>>2)];
      var $647=$646;
      var $id1113=$647;
      HEAP16[(($id1113)>>1)]=$call1111;
      var $648=$p_addr;
      var $lstate1114=(($648+40)|0);
      HEAP32[(($lstate1114)>>2)]=0;
      $retval=345;
      label = 711; break;
    case 439: 
      var $649=$p_addr;
      var $650=$c;
      _pushback($649, $650);
      var $651=$p_addr;
      var $lstate1116=(($651+40)|0);
      var $652=HEAP32[(($lstate1116)>>2)];
      var $cmp1117=(($652)|(0))==4;
      if ($cmp1117) { label = 441; break; } else { label = 440; break; }
    case 440: 
      var $653=$p_addr;
      var $lstate1120=(($653+40)|0);
      var $654=HEAP32[(($lstate1120)>>2)];
      var $cmp1121=(($654)|(0))==5;
      if ($cmp1121) { label = 441; break; } else { label = 444; break; }
    case 441: 
      var $655=$space_seen;
      var $tobool1124=(($655)|(0))!=0;
      if ($tobool1124) { label = 442; break; } else { label = 444; break; }
    case 442: 
      var $656=$c;
      var $conv1126=(($656) & 255);
      var $conv1127=(($conv1126)&(255));
      var $call1128=_isspace($conv1127);
      var $tobool1129=(($call1128)|(0))!=0;
      if ($tobool1129) { label = 444; break; } else { label = 443; break; }
    case 443: 
      var $657=$p_addr;
      var $call1131=_new_strterm($657, 7, 47, 0);
      var $658=$p_addr;
      var $lex_strterm1132=(($658+44)|0);
      HEAP32[(($lex_strterm1132)>>2)]=$call1131;
      $retval=357;
      label = 711; break;
    case 444: 
      var $659=$p_addr;
      var $lstate1134=(($659+40)|0);
      var $660=HEAP32[(($lstate1134)>>2)];
      var $cmp1135=(($660)|(0))==7;
      if ($cmp1135) { label = 446; break; } else { label = 445; break; }
    case 445: 
      var $661=$p_addr;
      var $lstate1138=(($661+40)|0);
      var $662=HEAP32[(($lstate1138)>>2)];
      var $cmp1139=(($662)|(0))==8;
      if ($cmp1139) { label = 446; break; } else { label = 447; break; }
    case 446: 
      var $663=$p_addr;
      var $lstate1142=(($663+40)|0);
      HEAP32[(($lstate1142)>>2)]=4;
      label = 448; break;
    case 447: 
      var $664=$p_addr;
      var $lstate1144=(($664+40)|0);
      HEAP32[(($lstate1144)>>2)]=0;
      label = 448; break;
    case 448: 
      $retval=47;
      label = 711; break;
    case 449: 
      var $665=$p_addr;
      var $call1147=_nextc($665);
      $c=$call1147;
      var $cmp1148=(($call1147)|(0))==61;
      if ($cmp1148) { label = 450; break; } else { label = 451; break; }
    case 450: 
      var $666=$p_addr;
      var $call1151=_intern_gen_c($666, 94);
      var $667=$p_addr;
      var $ylval1152=(($667+1124)|0);
      var $668=HEAP32[(($ylval1152)>>2)];
      var $669=$668;
      var $id1153=$669;
      HEAP16[(($id1153)>>1)]=$call1151;
      var $670=$p_addr;
      var $lstate1154=(($670+40)|0);
      HEAP32[(($lstate1154)>>2)]=0;
      $retval=345;
      label = 711; break;
    case 451: 
      var $671=$p_addr;
      var $lstate1156=(($671+40)|0);
      var $672=HEAP32[(($lstate1156)>>2)];
      var $cmp1157=(($672)|(0))==7;
      if ($cmp1157) { label = 453; break; } else { label = 452; break; }
    case 452: 
      var $673=$p_addr;
      var $lstate1160=(($673+40)|0);
      var $674=HEAP32[(($lstate1160)>>2)];
      var $cmp1161=(($674)|(0))==8;
      if ($cmp1161) { label = 453; break; } else { label = 454; break; }
    case 453: 
      var $675=$p_addr;
      var $lstate1164=(($675+40)|0);
      HEAP32[(($lstate1164)>>2)]=4;
      label = 455; break;
    case 454: 
      var $676=$p_addr;
      var $lstate1166=(($676+40)|0);
      HEAP32[(($lstate1166)>>2)]=0;
      label = 455; break;
    case 455: 
      var $677=$p_addr;
      var $678=$c;
      _pushback($677, $678);
      $retval=94;
      label = 711; break;
    case 456: 
      var $679=$p_addr;
      var $lstate1169=(($679+40)|0);
      HEAP32[(($lstate1169)>>2)]=0;
      $retval=59;
      label = 711; break;
    case 457: 
      var $680=$p_addr;
      var $lstate1171=(($680+40)|0);
      HEAP32[(($lstate1171)>>2)]=0;
      $retval=44;
      label = 711; break;
    case 458: 
      var $681=$p_addr;
      var $lstate1173=(($681+40)|0);
      var $682=HEAP32[(($lstate1173)>>2)];
      var $cmp1174=(($682)|(0))==7;
      if ($cmp1174) { label = 460; break; } else { label = 459; break; }
    case 459: 
      var $683=$p_addr;
      var $lstate1177=(($683+40)|0);
      var $684=HEAP32[(($lstate1177)>>2)];
      var $cmp1178=(($684)|(0))==8;
      if ($cmp1178) { label = 460; break; } else { label = 463; break; }
    case 460: 
      var $685=$p_addr;
      var $call1181=_nextc($685);
      $c=$call1181;
      var $cmp1182=(($call1181)|(0))!=64;
      if ($cmp1182) { label = 461; break; } else { label = 462; break; }
    case 461: 
      var $686=$p_addr;
      var $687=$c;
      _pushback($686, $687);
      label = 462; break;
    case 462: 
      var $688=$p_addr;
      var $lstate1186=(($688+40)|0);
      HEAP32[(($lstate1186)>>2)]=4;
      label = 464; break;
    case 463: 
      var $689=$p_addr;
      var $lstate1188=(($689+40)|0);
      HEAP32[(($lstate1188)>>2)]=0;
      label = 464; break;
    case 464: 
      $retval=126;
      label = 711; break;
    case 465: 
      var $690=$p_addr;
      var $lstate1191=(($690+40)|0);
      var $691=HEAP32[(($lstate1191)>>2)];
      var $cmp1192=(($691)|(0))==0;
      if ($cmp1192) { label = 469; break; } else { label = 466; break; }
    case 466: 
      var $692=$p_addr;
      var $lstate1195=(($692+40)|0);
      var $693=HEAP32[(($lstate1195)>>2)];
      var $cmp1196=(($693)|(0))==6;
      if ($cmp1196) { label = 469; break; } else { label = 467; break; }
    case 467: 
      var $694=$p_addr;
      var $lstate1199=(($694+40)|0);
      var $695=HEAP32[(($lstate1199)>>2)];
      var $cmp1200=(($695)|(0))==10;
      if ($cmp1200) { label = 469; break; } else { label = 468; break; }
    case 468: 
      var $696=$p_addr;
      var $lstate1203=(($696+40)|0);
      var $697=HEAP32[(($lstate1203)>>2)];
      var $cmp1204=(($697)|(0))==9;
      if ($cmp1204) { label = 469; break; } else { label = 470; break; }
    case 469: 
      $c=347;
      label = 476; break;
    case 470: 
      var $698=$p_addr;
      var $lstate1208=(($698+40)|0);
      var $699=HEAP32[(($lstate1208)>>2)];
      var $cmp1209=(($699)|(0))==4;
      if ($cmp1209) { label = 472; break; } else { label = 471; break; }
    case 471: 
      var $700=$p_addr;
      var $lstate1212=(($700+40)|0);
      var $701=HEAP32[(($lstate1212)>>2)];
      var $cmp1213=(($701)|(0))==5;
      if ($cmp1213) { label = 472; break; } else { label = 475; break; }
    case 472: 
      var $702=$space_seen;
      var $tobool1216=(($702)|(0))!=0;
      if ($tobool1216) { label = 473; break; } else { label = 475; break; }
    case 473: 
      var $call1218=_isspace(255);
      var $tobool1219=(($call1218)|(0))!=0;
      if ($tobool1219) { label = 475; break; } else { label = 474; break; }
    case 474: 
      $c=348;
      label = 475; break;
    case 475: 
      label = 476; break;
    case 476: 
      var $703=$p_addr;
      var $paren_nest1223=(($703+56)|0);
      var $704=HEAP32[(($paren_nest1223)>>2)];
      var $inc1224=((($704)+(1))|0);
      HEAP32[(($paren_nest1223)>>2)]=$inc1224;
      var $705=$p_addr;
      var $cond_stack1225=(($705+48)|0);
      var $706=HEAP32[(($cond_stack1225)>>2)];
      var $shl=$706 << 1;
      var $707=$p_addr;
      var $cond_stack1226=(($707+48)|0);
      HEAP32[(($cond_stack1226)>>2)]=$shl;
      var $708=$p_addr;
      var $cmdarg_stack1227=(($708+52)|0);
      var $709=HEAP32[(($cmdarg_stack1227)>>2)];
      var $shl1228=$709 << 1;
      var $710=$p_addr;
      var $cmdarg_stack1229=(($710+52)|0);
      HEAP32[(($cmdarg_stack1229)>>2)]=$shl1228;
      var $711=$p_addr;
      var $lstate1230=(($711+40)|0);
      HEAP32[(($lstate1230)>>2)]=0;
      var $712=$c;
      $retval=$712;
      label = 711; break;
    case 477: 
      var $713=$p_addr;
      var $paren_nest1232=(($713+56)|0);
      var $714=HEAP32[(($paren_nest1232)>>2)];
      var $inc1233=((($714)+(1))|0);
      HEAP32[(($paren_nest1232)>>2)]=$inc1233;
      var $715=$p_addr;
      var $lstate1234=(($715+40)|0);
      var $716=HEAP32[(($lstate1234)>>2)];
      var $cmp1235=(($716)|(0))==7;
      if ($cmp1235) { label = 479; break; } else { label = 478; break; }
    case 478: 
      var $717=$p_addr;
      var $lstate1238=(($717+40)|0);
      var $718=HEAP32[(($lstate1238)>>2)];
      var $cmp1239=(($718)|(0))==8;
      if ($cmp1239) { label = 479; break; } else { label = 484; break; }
    case 479: 
      var $719=$p_addr;
      var $lstate1242=(($719+40)|0);
      HEAP32[(($lstate1242)>>2)]=4;
      var $720=$p_addr;
      var $call1243=_nextc($720);
      $c=$call1243;
      var $cmp1244=(($call1243)|(0))==93;
      if ($cmp1244) { label = 480; break; } else { label = 483; break; }
    case 480: 
      var $721=$p_addr;
      var $call1247=_nextc($721);
      $c=$call1247;
      var $cmp1248=(($call1247)|(0))==61;
      if ($cmp1248) { label = 481; break; } else { label = 482; break; }
    case 481: 
      $retval=340;
      label = 711; break;
    case 482: 
      var $722=$p_addr;
      var $723=$c;
      _pushback($722, $723);
      $retval=339;
      label = 711; break;
    case 483: 
      var $724=$p_addr;
      var $725=$c;
      _pushback($724, $725);
      $retval=91;
      label = 711; break;
    case 484: 
      var $726=$p_addr;
      var $lstate1254=(($726+40)|0);
      var $727=HEAP32[(($lstate1254)>>2)];
      var $cmp1255=(($727)|(0))==0;
      if ($cmp1255) { label = 488; break; } else { label = 485; break; }
    case 485: 
      var $728=$p_addr;
      var $lstate1258=(($728+40)|0);
      var $729=HEAP32[(($lstate1258)>>2)];
      var $cmp1259=(($729)|(0))==6;
      if ($cmp1259) { label = 488; break; } else { label = 486; break; }
    case 486: 
      var $730=$p_addr;
      var $lstate1262=(($730+40)|0);
      var $731=HEAP32[(($lstate1262)>>2)];
      var $cmp1263=(($731)|(0))==10;
      if ($cmp1263) { label = 488; break; } else { label = 487; break; }
    case 487: 
      var $732=$p_addr;
      var $lstate1266=(($732+40)|0);
      var $733=HEAP32[(($lstate1266)>>2)];
      var $cmp1267=(($733)|(0))==9;
      if ($cmp1267) { label = 488; break; } else { label = 489; break; }
    case 488: 
      $c=350;
      label = 494; break;
    case 489: 
      var $734=$p_addr;
      var $lstate1271=(($734+40)|0);
      var $735=HEAP32[(($lstate1271)>>2)];
      var $cmp1272=(($735)|(0))==4;
      if ($cmp1272) { label = 491; break; } else { label = 490; break; }
    case 490: 
      var $736=$p_addr;
      var $lstate1275=(($736+40)|0);
      var $737=HEAP32[(($lstate1275)>>2)];
      var $cmp1276=(($737)|(0))==5;
      if ($cmp1276) { label = 491; break; } else { label = 493; break; }
    case 491: 
      var $738=$space_seen;
      var $tobool1279=(($738)|(0))!=0;
      if ($tobool1279) { label = 492; break; } else { label = 493; break; }
    case 492: 
      $c=350;
      label = 493; break;
    case 493: 
      label = 494; break;
    case 494: 
      label = 495; break;
    case 495: 
      var $739=$p_addr;
      var $lstate1284=(($739+40)|0);
      HEAP32[(($lstate1284)>>2)]=0;
      var $740=$p_addr;
      var $cond_stack1285=(($740+48)|0);
      var $741=HEAP32[(($cond_stack1285)>>2)];
      var $shl1286=$741 << 1;
      var $742=$p_addr;
      var $cond_stack1287=(($742+48)|0);
      HEAP32[(($cond_stack1287)>>2)]=$shl1286;
      var $743=$p_addr;
      var $cmdarg_stack1288=(($743+52)|0);
      var $744=HEAP32[(($cmdarg_stack1288)>>2)];
      var $shl1289=$744 << 1;
      var $745=$p_addr;
      var $cmdarg_stack1290=(($745+52)|0);
      HEAP32[(($cmdarg_stack1290)>>2)]=$shl1289;
      var $746=$c;
      $retval=$746;
      label = 711; break;
    case 496: 
      var $747=$p_addr;
      var $lpar_beg=(($747+60)|0);
      var $748=HEAP32[(($lpar_beg)>>2)];
      var $tobool1292=(($748)|(0))!=0;
      if ($tobool1292) { label = 497; break; } else { label = 499; break; }
    case 497: 
      var $749=$p_addr;
      var $lpar_beg1294=(($749+60)|0);
      var $750=HEAP32[(($lpar_beg1294)>>2)];
      var $751=$p_addr;
      var $paren_nest1295=(($751+56)|0);
      var $752=HEAP32[(($paren_nest1295)>>2)];
      var $cmp1296=(($750)|(0))==(($752)|(0));
      if ($cmp1296) { label = 498; break; } else { label = 499; break; }
    case 498: 
      var $753=$p_addr;
      var $lstate1299=(($753+40)|0);
      HEAP32[(($lstate1299)>>2)]=0;
      var $754=$p_addr;
      var $lpar_beg1300=(($754+60)|0);
      HEAP32[(($lpar_beg1300)>>2)]=0;
      var $755=$p_addr;
      var $paren_nest1301=(($755+56)|0);
      var $756=HEAP32[(($paren_nest1301)>>2)];
      var $dec1302=((($756)-(1))|0);
      HEAP32[(($paren_nest1301)>>2)]=$dec1302;
      var $757=$p_addr;
      var $cond_stack1303=(($757+48)|0);
      var $758=HEAP32[(($cond_stack1303)>>2)];
      var $shl1304=$758 << 1;
      var $759=$p_addr;
      var $cond_stack1305=(($759+48)|0);
      HEAP32[(($cond_stack1305)>>2)]=$shl1304;
      var $760=$p_addr;
      var $cmdarg_stack1306=(($760+52)|0);
      var $761=HEAP32[(($cmdarg_stack1306)>>2)];
      var $shl1307=$761 << 1;
      var $762=$p_addr;
      var $cmdarg_stack1308=(($762+52)|0);
      HEAP32[(($cmdarg_stack1308)>>2)]=$shl1307;
      $retval=363;
      label = 711; break;
    case 499: 
      var $763=$p_addr;
      var $lstate1310=(($763+40)|0);
      var $764=HEAP32[(($lstate1310)>>2)];
      var $cmp1311=(($764)|(0))==4;
      if ($cmp1311) { label = 503; break; } else { label = 500; break; }
    case 500: 
      var $765=$p_addr;
      var $lstate1314=(($765+40)|0);
      var $766=HEAP32[(($lstate1314)>>2)];
      var $cmp1315=(($766)|(0))==5;
      if ($cmp1315) { label = 503; break; } else { label = 501; break; }
    case 501: 
      var $767=$p_addr;
      var $lstate1318=(($767+40)|0);
      var $768=HEAP32[(($lstate1318)>>2)];
      var $cmp1319=(($768)|(0))==1;
      if ($cmp1319) { label = 503; break; } else { label = 502; break; }
    case 502: 
      var $769=$p_addr;
      var $lstate1322=(($769+40)|0);
      var $770=HEAP32[(($lstate1322)>>2)];
      var $cmp1323=(($770)|(0))==3;
      if ($cmp1323) { label = 503; break; } else { label = 504; break; }
    case 503: 
      $c=123;
      label = 508; break;
    case 504: 
      var $771=$p_addr;
      var $lstate1327=(($771+40)|0);
      var $772=HEAP32[(($lstate1327)>>2)];
      var $cmp1328=(($772)|(0))==2;
      if ($cmp1328) { label = 505; break; } else { label = 506; break; }
    case 505: 
      $c=352;
      label = 507; break;
    case 506: 
      $c=351;
      label = 507; break;
    case 507: 
      label = 508; break;
    case 508: 
      var $773=$p_addr;
      var $cond_stack1334=(($773+48)|0);
      var $774=HEAP32[(($cond_stack1334)>>2)];
      var $shl1335=$774 << 1;
      var $775=$p_addr;
      var $cond_stack1336=(($775+48)|0);
      HEAP32[(($cond_stack1336)>>2)]=$shl1335;
      var $776=$p_addr;
      var $cmdarg_stack1337=(($776+52)|0);
      var $777=HEAP32[(($cmdarg_stack1337)>>2)];
      var $shl1338=$777 << 1;
      var $778=$p_addr;
      var $cmdarg_stack1339=(($778+52)|0);
      HEAP32[(($cmdarg_stack1339)>>2)]=$shl1338;
      var $779=$p_addr;
      var $lstate1340=(($779+40)|0);
      HEAP32[(($lstate1340)>>2)]=0;
      var $780=$c;
      $retval=$780;
      label = 711; break;
    case 509: 
      var $781=$p_addr;
      var $call1342=_nextc($781);
      $c=$call1342;
      var $782=$c;
      var $cmp1343=(($782)|(0))==10;
      if ($cmp1343) { label = 510; break; } else { label = 511; break; }
    case 510: 
      var $783=$p_addr;
      var $lineno1346=(($783+32)|0);
      var $784=HEAP32[(($lineno1346)>>2)];
      var $inc1347=((($784)+(1))|0);
      HEAP32[(($lineno1346)>>2)]=$inc1347;
      var $785=$p_addr;
      var $column1348=(($785+36)|0);
      HEAP32[(($column1348)>>2)]=0;
      $space_seen=1;
      label = 11; break;
    case 511: 
      var $786=$p_addr;
      var $787=$c;
      _pushback($786, $787);
      $retval=92;
      label = 711; break;
    case 512: 
      var $788=$p_addr;
      var $lstate1351=(($788+40)|0);
      var $789=HEAP32[(($lstate1351)>>2)];
      var $cmp1352=(($789)|(0))==0;
      if ($cmp1352) { label = 516; break; } else { label = 513; break; }
    case 513: 
      var $790=$p_addr;
      var $lstate1355=(($790+40)|0);
      var $791=HEAP32[(($lstate1355)>>2)];
      var $cmp1356=(($791)|(0))==6;
      if ($cmp1356) { label = 516; break; } else { label = 514; break; }
    case 514: 
      var $792=$p_addr;
      var $lstate1359=(($792+40)|0);
      var $793=HEAP32[(($lstate1359)>>2)];
      var $cmp1360=(($793)|(0))==10;
      if ($cmp1360) { label = 516; break; } else { label = 515; break; }
    case 515: 
      var $794=$p_addr;
      var $lstate1363=(($794+40)|0);
      var $795=HEAP32[(($lstate1363)>>2)];
      var $cmp1364=(($795)|(0))==9;
      if ($cmp1364) { label = 516; break; } else { label = 549; break; }
    case 516: 
      var $796=$p_addr;
      var $call1367=_nextc($796);
      $c=$call1367;
      label = 517; break;
    case 517: 
      var $797=$c;
      var $cmp1368=(($797)|(0))==-1;
      if ($cmp1368) { label = 519; break; } else { label = 518; break; }
    case 518: 
      var $798=$c;
      var $conv1371=(($798) & 255);
      var $conv1372=(($conv1371)&(255));
      var $call1373=_isalnum($conv1372);
      var $tobool1374=(($call1373)|(0))!=0;
      if ($tobool1374) { label = 520; break; } else { label = 519; break; }
    case 519: 
      var $799=$c;
      $term=$799;
      $c=81;
      label = 523; break;
    case 520: 
      var $800=$p_addr;
      var $call1377=_nextc($800);
      $term=$call1377;
      var $801=$term;
      var $call1378=_isalnum($801);
      var $tobool1379=(($call1378)|(0))!=0;
      if ($tobool1379) { label = 521; break; } else { label = 522; break; }
    case 521: 
      var $802=$p_addr;
      _yyerror($802, ((109056)|0));
      $retval=0;
      label = 711; break;
    case 522: 
      label = 523; break;
    case 523: 
      var $803=$c;
      var $cmp1383=(($803)|(0))==-1;
      if ($cmp1383) { label = 525; break; } else { label = 524; break; }
    case 524: 
      var $804=$term;
      var $cmp1386=(($804)|(0))==-1;
      if ($cmp1386) { label = 525; break; } else { label = 526; break; }
    case 525: 
      var $805=$p_addr;
      _yyerror($805, ((108988)|0));
      $retval=0;
      label = 711; break;
    case 526: 
      var $806=$term;
      $paren=$806;
      var $807=$term;
      var $cmp1390=(($807)|(0))==40;
      if ($cmp1390) { label = 527; break; } else { label = 528; break; }
    case 527: 
      $term=41;
      label = 538; break;
    case 528: 
      var $808=$term;
      var $cmp1394=(($808)|(0))==91;
      if ($cmp1394) { label = 529; break; } else { label = 530; break; }
    case 529: 
      $term=93;
      label = 537; break;
    case 530: 
      var $809=$term;
      var $cmp1398=(($809)|(0))==123;
      if ($cmp1398) { label = 531; break; } else { label = 532; break; }
    case 531: 
      $term=125;
      label = 536; break;
    case 532: 
      var $810=$term;
      var $cmp1402=(($810)|(0))==60;
      if ($cmp1402) { label = 533; break; } else { label = 534; break; }
    case 533: 
      $term=62;
      label = 535; break;
    case 534: 
      $paren=0;
      label = 535; break;
    case 535: 
      label = 536; break;
    case 536: 
      label = 537; break;
    case 537: 
      label = 538; break;
    case 538: 
      var $811=$c;
      if ((($811)|(0))==81) {
        label = 539; break;
      }
      else if ((($811)|(0))==113) {
        label = 540; break;
      }
      else if ((($811)|(0))==87) {
        label = 541; break;
      }
      else if ((($811)|(0))==119) {
        label = 542; break;
      }
      else if ((($811)|(0))==120) {
        label = 543; break;
      }
      else if ((($811)|(0))==114) {
        label = 544; break;
      }
      else if ((($811)|(0))==115) {
        label = 545; break;
      }
      else if ((($811)|(0))==73) {
        label = 546; break;
      }
      else if ((($811)|(0))==105) {
        label = 547; break;
      }
      else {
      label = 548; break;
      }
    case 539: 
      var $812=$p_addr;
      var $813=$term;
      var $814=$paren;
      var $call1411=_new_strterm($812, 3, $813, $814);
      var $815=$p_addr;
      var $lex_strterm1412=(($815+44)|0);
      HEAP32[(($lex_strterm1412)>>2)]=$call1411;
      $retval=360;
      label = 711; break;
    case 540: 
      var $816=$p_addr;
      var $817=$term;
      var $818=$paren;
      var $call1414=_new_strterm($816, 1, $817, $818);
      var $819=$p_addr;
      var $lex_strterm1415=(($819+44)|0);
      HEAP32[(($lex_strterm1415)>>2)]=$call1414;
      var $820=$p_addr;
      var $call1416=_parse_string($820);
      $retval=$call1416;
      label = 711; break;
    case 541: 
      var $821=$p_addr;
      var $822=$term;
      var $823=$paren;
      var $call1418=_new_strterm($821, 43, $822, $823);
      var $824=$p_addr;
      var $lex_strterm1419=(($824+44)|0);
      HEAP32[(($lex_strterm1419)>>2)]=$call1418;
      $retval=358;
      label = 711; break;
    case 542: 
      var $825=$p_addr;
      var $826=$term;
      var $827=$paren;
      var $call1421=_new_strterm($825, 41, $826, $827);
      var $828=$p_addr;
      var $lex_strterm1422=(($828+44)|0);
      HEAP32[(($lex_strterm1422)>>2)]=$call1421;
      $retval=358;
      label = 711; break;
    case 543: 
      var $829=$p_addr;
      var $830=$term;
      var $831=$paren;
      var $call1424=_new_strterm($829, 131, $830, $831);
      var $832=$p_addr;
      var $lex_strterm1425=(($832+44)|0);
      HEAP32[(($lex_strterm1425)>>2)]=$call1424;
      $retval=361;
      label = 711; break;
    case 544: 
      var $833=$p_addr;
      var $834=$term;
      var $835=$paren;
      var $call1427=_new_strterm($833, 7, $834, $835);
      var $836=$p_addr;
      var $lex_strterm1428=(($836+44)|0);
      HEAP32[(($lex_strterm1428)>>2)]=$call1427;
      $retval=357;
      label = 711; break;
    case 545: 
      var $837=$p_addr;
      var $838=$term;
      var $839=$paren;
      var $call1430=_new_strterm($837, 17, $838, $839);
      var $840=$p_addr;
      var $lex_strterm1431=(($840+44)|0);
      HEAP32[(($lex_strterm1431)>>2)]=$call1430;
      $retval=356;
      label = 711; break;
    case 546: 
      var $841=$p_addr;
      var $842=$term;
      var $843=$paren;
      var $call1433=_new_strterm($841, 51, $842, $843);
      var $844=$p_addr;
      var $lex_strterm1434=(($844+44)|0);
      HEAP32[(($lex_strterm1434)>>2)]=$call1433;
      $retval=359;
      label = 711; break;
    case 547: 
      var $845=$p_addr;
      var $846=$term;
      var $847=$paren;
      var $call1436=_new_strterm($845, 49, $846, $847);
      var $848=$p_addr;
      var $lex_strterm1437=(($848+44)|0);
      HEAP32[(($lex_strterm1437)>>2)]=$call1436;
      $retval=359;
      label = 711; break;
    case 548: 
      var $849=$p_addr;
      _yyerror($849, ((109056)|0));
      $retval=0;
      label = 711; break;
    case 549: 
      var $850=$p_addr;
      var $call1440=_nextc($850);
      $c=$call1440;
      var $cmp1441=(($call1440)|(0))==61;
      if ($cmp1441) { label = 550; break; } else { label = 551; break; }
    case 550: 
      var $851=$p_addr;
      var $call1444=_intern_gen_c($851, 37);
      var $852=$p_addr;
      var $ylval1445=(($852+1124)|0);
      var $853=HEAP32[(($ylval1445)>>2)];
      var $854=$853;
      var $id1446=$854;
      HEAP16[(($id1446)>>1)]=$call1444;
      var $855=$p_addr;
      var $lstate1447=(($855+40)|0);
      HEAP32[(($lstate1447)>>2)]=0;
      $retval=345;
      label = 711; break;
    case 551: 
      var $856=$p_addr;
      var $lstate1449=(($856+40)|0);
      var $857=HEAP32[(($lstate1449)>>2)];
      var $cmp1450=(($857)|(0))==4;
      if ($cmp1450) { label = 553; break; } else { label = 552; break; }
    case 552: 
      var $858=$p_addr;
      var $lstate1453=(($858+40)|0);
      var $859=HEAP32[(($lstate1453)>>2)];
      var $cmp1454=(($859)|(0))==5;
      if ($cmp1454) { label = 553; break; } else { label = 556; break; }
    case 553: 
      var $860=$space_seen;
      var $tobool1457=(($860)|(0))!=0;
      if ($tobool1457) { label = 554; break; } else { label = 556; break; }
    case 554: 
      var $861=$c;
      var $conv1459=(($861) & 255);
      var $conv1460=(($conv1459)&(255));
      var $call1461=_isspace($conv1460);
      var $tobool1462=(($call1461)|(0))!=0;
      if ($tobool1462) { label = 556; break; } else { label = 555; break; }
    case 555: 
      label = 517; break;
    case 556: 
      var $862=$p_addr;
      var $lstate1465=(($862+40)|0);
      var $863=HEAP32[(($lstate1465)>>2)];
      var $cmp1466=(($863)|(0))==7;
      if ($cmp1466) { label = 558; break; } else { label = 557; break; }
    case 557: 
      var $864=$p_addr;
      var $lstate1469=(($864+40)|0);
      var $865=HEAP32[(($lstate1469)>>2)];
      var $cmp1470=(($865)|(0))==8;
      if ($cmp1470) { label = 558; break; } else { label = 559; break; }
    case 558: 
      var $866=$p_addr;
      var $lstate1473=(($866+40)|0);
      HEAP32[(($lstate1473)>>2)]=4;
      label = 560; break;
    case 559: 
      var $867=$p_addr;
      var $lstate1475=(($867+40)|0);
      HEAP32[(($lstate1475)>>2)]=0;
      label = 560; break;
    case 560: 
      var $868=$p_addr;
      var $869=$c;
      _pushback($868, $869);
      $retval=37;
      label = 711; break;
    case 561: 
      var $870=$p_addr;
      var $lstate1478=(($870+40)|0);
      HEAP32[(($lstate1478)>>2)]=1;
      var $871=$p_addr;
      var $call1479=_newtok($871);
      $token_column=$call1479;
      var $872=$p_addr;
      var $call1480=_nextc($872);
      $c=$call1480;
      var $873=$c;
      var $cmp1481=(($873)|(0))==-1;
      if ($cmp1481) { label = 562; break; } else { label = 563; break; }
    case 562: 
      var $874=$p_addr;
      _yyerror($874, ((108812)|0));
      $retval=0;
      label = 711; break;
    case 563: 
      var $875=$c;
      if ((($875)|(0))==95) {
        label = 564; break;
      }
      else if ((($875)|(0))==126 | (($875)|(0))==42 | (($875)|(0))==36 | (($875)|(0))==63 | (($875)|(0))==33 | (($875)|(0))==64 | (($875)|(0))==47 | (($875)|(0))==92 | (($875)|(0))==59 | (($875)|(0))==44 | (($875)|(0))==46 | (($875)|(0))==61 | (($875)|(0))==58 | (($875)|(0))==60 | (($875)|(0))==62 | (($875)|(0))==34) {
        label = 570; break;
      }
      else if ((($875)|(0))==45) {
        label = 571; break;
      }
      else if ((($875)|(0))==38 | (($875)|(0))==96 | (($875)|(0))==39 | (($875)|(0))==43) {
        label = 573; break;
      }
      else if ((($875)|(0))==49 | (($875)|(0))==50 | (($875)|(0))==51 | (($875)|(0))==52 | (($875)|(0))==53 | (($875)|(0))==54 | (($875)|(0))==55 | (($875)|(0))==56 | (($875)|(0))==57) {
        label = 576; break;
      }
      else if ((($875)|(0))==48) {
        label = 589; break;
      }
      else {
      label = 584; break;
      }
    case 564: 
      var $876=$p_addr;
      var $call1486=_nextc($876);
      $c=$call1486;
      var $877=$c;
      var $cmp1487=(($877)|(0))!=-1;
      if ($cmp1487) { label = 565; break; } else { label = 569; break; }
    case 565: 
      var $878=$c;
      var $call1490=_isalnum($878);
      var $tobool1491=(($call1490)|(0))!=0;
      if ($tobool1491) { label = 568; break; } else { label = 566; break; }
    case 566: 
      var $879=$c;
      var $cmp1493=(($879)|(0))==95;
      if ($cmp1493) { label = 568; break; } else { label = 567; break; }
    case 567: 
      var $880=$c;
      var $cmp1496=(($880)>>>(0)) <= 127;
      if ($cmp1496) { label = 569; break; } else { label = 568; break; }
    case 568: 
      var $881=$p_addr;
      _tokadd($881, 36);
      var $882=$p_addr;
      var $883=$c;
      _tokadd($882, $883);
      label = 590; break;
    case 569: 
      var $884=$p_addr;
      var $885=$c;
      _pushback($884, $885);
      $c=95;
      label = 570; break;
    case 570: 
      var $886=$p_addr;
      _tokadd($886, 36);
      var $887=$p_addr;
      var $888=$c;
      _tokadd($887, $888);
      var $889=$p_addr;
      _tokfix($889);
      var $890=$p_addr;
      var $891=$p_addr;
      var $call1501=_tok($891);
      var $call1502=_intern_gen($890, $call1501);
      var $892=$p_addr;
      var $ylval1503=(($892+1124)|0);
      var $893=HEAP32[(($ylval1503)>>2)];
      var $894=$893;
      var $id1504=$894;
      HEAP16[(($id1504)>>1)]=$call1502;
      $retval=308;
      label = 711; break;
    case 571: 
      var $895=$p_addr;
      _tokadd($895, 36);
      var $896=$p_addr;
      var $897=$c;
      _tokadd($896, $897);
      var $898=$p_addr;
      var $call1506=_nextc($898);
      $c=$call1506;
      var $899=$p_addr;
      var $900=$c;
      _pushback($899, $900);
      label = 572; break;
    case 572: 
      var $901=$p_addr;
      _tokfix($901);
      var $902=$p_addr;
      var $903=$p_addr;
      var $call1507=_tok($903);
      var $call1508=_intern_gen($902, $call1507);
      var $904=$p_addr;
      var $ylval1509=(($904+1124)|0);
      var $905=HEAP32[(($ylval1509)>>2)];
      var $906=$905;
      var $id1510=$906;
      HEAP16[(($id1510)>>1)]=$call1508;
      $retval=308;
      label = 711; break;
    case 573: 
      var $907=$last_state;
      var $cmp1512=(($907)|(0))==7;
      if ($cmp1512) { label = 574; break; } else { label = 575; break; }
    case 574: 
      var $908=$p_addr;
      _tokadd($908, 36);
      var $909=$p_addr;
      var $910=$c;
      _tokadd($909, $910);
      label = 572; break;
    case 575: 
      var $911=$p_addr;
      var $912=$c;
      var $call1516=_new_back_ref($911, $912);
      var $913=$p_addr;
      var $ylval1517=(($913+1124)|0);
      var $914=HEAP32[(($ylval1517)>>2)];
      var $915=$914;
      var $nd1518=$915;
      HEAP32[(($nd1518)>>2)]=$call1516;
      $retval=322;
      label = 711; break;
    case 576: 
      label = 577; break;
    case 577: 
      var $916=$p_addr;
      var $917=$c;
      _tokadd($916, $917);
      var $918=$p_addr;
      var $call1521=_nextc($918);
      $c=$call1521;
      label = 578; break;
    case 578: 
      var $919=$c;
      var $cmp1523=(($919)|(0))!=-1;
      if ($cmp1523) { label = 579; break; } else { var $921 = 0;label = 580; break; }
    case 579: 
      var $920=$c;
      var $call1525=_isdigit($920);
      var $tobool1526=(($call1525)|(0))!=0;
      var $921 = $tobool1526;label = 580; break;
    case 580: 
      var $921;
      if ($921) { label = 577; break; } else { label = 581; break; }
    case 581: 
      var $922=$p_addr;
      var $923=$c;
      _pushback($922, $923);
      var $924=$last_state;
      var $cmp1528=(($924)|(0))==7;
      if ($cmp1528) { label = 582; break; } else { label = 583; break; }
    case 582: 
      label = 572; break;
    case 583: 
      var $925=$p_addr;
      _tokfix($925);
      var $926=$p_addr;
      var $927=$p_addr;
      var $call1532=_tok($927);
      var $call1533=_atoi($call1532);
      var $call1534=_new_nth_ref($926, $call1533);
      var $928=$p_addr;
      var $ylval1535=(($928+1124)|0);
      var $929=HEAP32[(($ylval1535)>>2)];
      var $930=$929;
      var $nd1536=$930;
      HEAP32[(($nd1536)>>2)]=$call1534;
      $retval=321;
      label = 711; break;
    case 584: 
      var $931=$c;
      var $call1538=_isalnum($931);
      var $tobool1539=(($call1538)|(0))!=0;
      if ($tobool1539) { label = 588; break; } else { label = 585; break; }
    case 585: 
      var $932=$c;
      var $cmp1541=(($932)|(0))==95;
      if ($cmp1541) { label = 588; break; } else { label = 586; break; }
    case 586: 
      var $933=$c;
      var $cmp1544=(($933)>>>(0)) <= 127;
      if ($cmp1544) { label = 587; break; } else { label = 588; break; }
    case 587: 
      var $934=$p_addr;
      var $935=$c;
      _pushback($934, $935);
      $retval=36;
      label = 711; break;
    case 588: 
      label = 589; break;
    case 589: 
      var $936=$p_addr;
      _tokadd($936, 36);
      label = 590; break;
    case 590: 
      label = 615; break;
    case 591: 
      var $937=$p_addr;
      var $call1551=_nextc($937);
      $c=$call1551;
      var $938=$p_addr;
      var $call1552=_newtok($938);
      $token_column=$call1552;
      var $939=$p_addr;
      _tokadd($939, 64);
      var $940=$c;
      var $cmp1553=(($940)|(0))==64;
      if ($cmp1553) { label = 592; break; } else { label = 593; break; }
    case 592: 
      var $941=$p_addr;
      _tokadd($941, 64);
      var $942=$p_addr;
      var $call1556=_nextc($942);
      $c=$call1556;
      label = 593; break;
    case 593: 
      var $943=$c;
      var $cmp1558=(($943)|(0))==-1;
      if ($cmp1558) { label = 594; break; } else { label = 598; break; }
    case 594: 
      var $944=$p_addr;
      var $bidx=(($944+1108)|0);
      var $945=HEAP32[(($bidx)>>2)];
      var $cmp1561=(($945)|(0))==1;
      if ($cmp1561) { label = 595; break; } else { label = 596; break; }
    case 595: 
      var $946=$p_addr;
      _yyerror($946, ((108764)|0));
      label = 597; break;
    case 596: 
      var $947=$p_addr;
      _yyerror($947, ((108728)|0));
      label = 597; break;
    case 597: 
      $retval=0;
      label = 711; break;
    case 598: 
      var $948=$c;
      var $call1567=_isdigit($948);
      var $tobool1568=(($call1567)|(0))!=0;
      if ($tobool1568) { label = 599; break; } else { label = 603; break; }
    case 599: 
      var $949=$p_addr;
      var $bidx1570=(($949+1108)|0);
      var $950=HEAP32[(($bidx1570)>>2)];
      var $cmp1571=(($950)|(0))==1;
      if ($cmp1571) { label = 600; break; } else { label = 601; break; }
    case 600: 
      var $951=$p_addr;
      var $952=$c;
      _yyerror_i($951, ((108676)|0), $952);
      label = 602; break;
    case 601: 
      var $953=$p_addr;
      var $954=$c;
      _yyerror_i($953, ((108620)|0), $954);
      label = 602; break;
    case 602: 
      $retval=0;
      label = 711; break;
    case 603: 
      label = 604; break;
    case 604: 
      var $955=$c;
      var $call1578=_isalnum($955);
      var $tobool1579=(($call1578)|(0))!=0;
      if ($tobool1579) { label = 608; break; } else { label = 605; break; }
    case 605: 
      var $956=$c;
      var $cmp1581=(($956)|(0))==95;
      if ($cmp1581) { label = 608; break; } else { label = 606; break; }
    case 606: 
      var $957=$c;
      var $cmp1584=(($957)>>>(0)) <= 127;
      if ($cmp1584) { label = 607; break; } else { label = 608; break; }
    case 607: 
      var $958=$p_addr;
      var $959=$c;
      _pushback($958, $959);
      $retval=64;
      label = 711; break;
    case 608: 
      label = 615; break;
    case 609: 
      var $960=$p_addr;
      var $call1589=_newtok($960);
      $token_column=$call1589;
      label = 615; break;
    case 610: 
      var $961=$c;
      var $call1591=_isalnum($961);
      var $tobool1592=(($call1591)|(0))!=0;
      if ($tobool1592) { label = 614; break; } else { label = 611; break; }
    case 611: 
      var $962=$c;
      var $cmp1594=(($962)|(0))==95;
      if ($cmp1594) { label = 614; break; } else { label = 612; break; }
    case 612: 
      var $963=$c;
      var $cmp1597=(($963)>>>(0)) <= 127;
      if ($cmp1597) { label = 613; break; } else { label = 614; break; }
    case 613: 
      var $964=$p_addr;
      var $965=$c;
      _yyerror_i($964, ((108548)|0), $965);
      label = 11; break;
    case 614: 
      var $966=$p_addr;
      var $call1601=_newtok($966);
      $token_column=$call1601;
      label = 615; break;
    case 615: 
      label = 616; break;
    case 616: 
      var $967=$p_addr;
      var $968=$c;
      _tokadd($967, $968);
      var $969=$p_addr;
      var $call1604=_nextc($969);
      $c=$call1604;
      var $970=$c;
      var $cmp1605=(($970)|(0)) < 0;
      if ($cmp1605) { label = 617; break; } else { label = 618; break; }
    case 617: 
      label = 623; break;
    case 618: 
      label = 619; break;
    case 619: 
      var $971=$c;
      var $call1610=_isalnum($971);
      var $tobool1611=(($call1610)|(0))!=0;
      if ($tobool1611) { var $974 = 1;label = 622; break; } else { label = 620; break; }
    case 620: 
      var $972=$c;
      var $cmp1613=(($972)|(0))==95;
      if ($cmp1613) { var $974 = 1;label = 622; break; } else { label = 621; break; }
    case 621: 
      var $973=$c;
      var $cmp1615=(($973)>>>(0)) <= 127;
      var $lnot=$cmp1615 ^ 1;
      var $974 = $lnot;label = 622; break;
    case 622: 
      var $974;
      if ($974) { label = 616; break; } else { label = 623; break; }
    case 623: 
      var $975=$token_column;
      var $cmp1618=(($975)|(0))==0;
      if ($cmp1618) { label = 624; break; } else { label = 629; break; }
    case 624: 
      var $976=$p_addr;
      var $call1621=_toklen($976);
      var $cmp1622=(($call1621)|(0))==7;
      if ($cmp1622) { label = 625; break; } else { label = 629; break; }
    case 625: 
      var $977=$c;
      var $cmp1625=(($977)|(0)) < 0;
      if ($cmp1625) { label = 627; break; } else { label = 626; break; }
    case 626: 
      var $978=$c;
      var $cmp1628=(($978)|(0))==10;
      if ($cmp1628) { label = 627; break; } else { label = 629; break; }
    case 627: 
      var $979=$p_addr;
      var $call1631=_tok($979);
      var $980=$p_addr;
      var $call1632=_toklen($980);
      var $call1633=_strncmp($call1631, ((108540)|0), $call1632);
      var $cmp1634=(($call1633)|(0))==0;
      if ($cmp1634) { label = 628; break; } else { label = 629; break; }
    case 628: 
      $retval=-1;
      label = 711; break;
    case 629: 
      var $981=$p_addr;
      var $call1638=_tok($981);
      var $arrayidx=(($call1638)|0);
      var $982=HEAP8[($arrayidx)];
      var $conv1639=(($982 << 24) >> 24);
      if ((($conv1639)|(0))==64 | (($conv1639)|(0))==36) {
        label = 630; break;
      }
      else {
      label = 631; break;
      }
    case 630: 
      var $983=$p_addr;
      var $984=$c;
      _pushback($983, $984);
      label = 637; break;
    case 631: 
      var $985=$c;
      var $cmp1642=(($985)|(0))==33;
      if ($cmp1642) { label = 633; break; } else { label = 632; break; }
    case 632: 
      var $986=$c;
      var $cmp1645=(($986)|(0))==63;
      if ($cmp1645) { label = 633; break; } else { label = 635; break; }
    case 633: 
      var $987=$p_addr;
      var $call1648=_peek_n($987, 61, 0);
      var $tobool1649=(($call1648)|(0))!=0;
      if ($tobool1649) { label = 635; break; } else { label = 634; break; }
    case 634: 
      var $988=$p_addr;
      var $989=$c;
      _tokadd($988, $989);
      label = 636; break;
    case 635: 
      var $990=$p_addr;
      var $991=$c;
      _pushback($990, $991);
      label = 636; break;
    case 636: 
      label = 637; break;
    case 637: 
      var $992=$p_addr;
      _tokfix($992);
      $result=0;
      var $993=$p_addr;
      var $lstate1654=(($993+40)|0);
      var $994=HEAP32[(($lstate1654)>>2)];
      $last_state=$994;
      var $995=$p_addr;
      var $call1655=_tok($995);
      var $arrayidx1656=(($call1655)|0);
      var $996=HEAP8[($arrayidx1656)];
      var $conv1657=(($996 << 24) >> 24);
      if ((($conv1657)|(0))==36) {
        label = 638; break;
      }
      else if ((($conv1657)|(0))==64) {
        label = 639; break;
      }
      else {
      label = 643; break;
      }
    case 638: 
      var $997=$p_addr;
      var $lstate1659=(($997+40)|0);
      HEAP32[(($lstate1659)>>2)]=1;
      $result=308;
      label = 710; break;
    case 639: 
      var $998=$p_addr;
      var $lstate1661=(($998+40)|0);
      HEAP32[(($lstate1661)>>2)]=1;
      var $999=$p_addr;
      var $call1662=_tok($999);
      var $arrayidx1663=(($call1662+1)|0);
      var $1000=HEAP8[($arrayidx1663)];
      var $conv1664=(($1000 << 24) >> 24);
      var $cmp1665=(($conv1664)|(0))==64;
      if ($cmp1665) { label = 640; break; } else { label = 641; break; }
    case 640: 
      $result=311;
      label = 642; break;
    case 641: 
      $result=309;
      label = 642; break;
    case 642: 
      label = 710; break;
    case 643: 
      var $1001=$p_addr;
      var $call1671=_toklast($1001);
      var $cmp1672=(($call1671)|(0))==33;
      if ($cmp1672) { label = 645; break; } else { label = 644; break; }
    case 644: 
      var $1002=$p_addr;
      var $call1675=_toklast($1002);
      var $cmp1676=(($call1675)|(0))==63;
      if ($cmp1676) { label = 645; break; } else { label = 646; break; }
    case 645: 
      $result=307;
      label = 660; break;
    case 646: 
      var $1003=$p_addr;
      var $lstate1680=(($1003+40)|0);
      var $1004=HEAP32[(($lstate1680)>>2)];
      var $cmp1681=(($1004)|(0))==7;
      if ($cmp1681) { label = 647; break; } else { label = 655; break; }
    case 647: 
      var $1005=$p_addr;
      var $call1684=_nextc($1005);
      $c=$call1684;
      var $cmp1685=(($call1684)|(0))==61;
      if ($cmp1685) { label = 648; break; } else { label = 653; break; }
    case 648: 
      var $1006=$p_addr;
      var $call1688=_peek_n($1006, 126, 0);
      var $tobool1689=(($call1688)|(0))!=0;
      if ($tobool1689) { label = 653; break; } else { label = 649; break; }
    case 649: 
      var $1007=$p_addr;
      var $call1691=_peek_n($1007, 62, 0);
      var $tobool1692=(($call1691)|(0))!=0;
      if ($tobool1692) { label = 653; break; } else { label = 650; break; }
    case 650: 
      var $1008=$p_addr;
      var $call1694=_peek_n($1008, 61, 0);
      var $tobool1695=(($call1694)|(0))!=0;
      if ($tobool1695) { label = 651; break; } else { label = 652; break; }
    case 651: 
      var $1009=$p_addr;
      var $call1697=_peek_n($1009, 62, 1);
      var $tobool1698=(($call1697)|(0))!=0;
      if ($tobool1698) { label = 652; break; } else { label = 653; break; }
    case 652: 
      $result=306;
      var $1010=$p_addr;
      var $1011=$c;
      _tokadd($1010, $1011);
      var $1012=$p_addr;
      _tokfix($1012);
      label = 654; break;
    case 653: 
      var $1013=$p_addr;
      var $1014=$c;
      _pushback($1013, $1014);
      label = 654; break;
    case 654: 
      label = 655; break;
    case 655: 
      var $1015=$result;
      var $cmp1703=(($1015)|(0))==0;
      if ($cmp1703) { label = 656; break; } else { label = 658; break; }
    case 656: 
      var $1016=$p_addr;
      var $call1706=_tok($1016);
      var $arrayidx1707=(($call1706)|0);
      var $1017=HEAP8[($arrayidx1707)];
      var $conv1708=(($1017 << 24) >> 24);
      var $call1709=_isupper($conv1708);
      var $tobool1710=(($call1709)|(0))!=0;
      if ($tobool1710) { label = 657; break; } else { label = 658; break; }
    case 657: 
      $result=310;
      label = 659; break;
    case 658: 
      $result=306;
      label = 659; break;
    case 659: 
      label = 660; break;
    case 660: 
      var $1018=$p_addr;
      var $lstate1715=(($1018+40)|0);
      var $1019=HEAP32[(($lstate1715)>>2)];
      var $cmp1716=(($1019)|(0))==0;
      if ($cmp1716) { label = 661; break; } else { label = 662; break; }
    case 661: 
      var $1020=$cmd_state;
      var $tobool1719=(($1020)|(0))!=0;
      if ($tobool1719) { label = 662; break; } else { label = 664; break; }
    case 662: 
      var $1021=$p_addr;
      var $lstate1721=(($1021+40)|0);
      var $1022=HEAP32[(($lstate1721)>>2)];
      var $cmp1722=(($1022)|(0))==4;
      if ($cmp1722) { label = 664; break; } else { label = 663; break; }
    case 663: 
      var $1023=$p_addr;
      var $lstate1725=(($1023+40)|0);
      var $1024=HEAP32[(($lstate1725)>>2)];
      var $cmp1726=(($1024)|(0))==5;
      if ($cmp1726) { label = 664; break; } else { label = 668; break; }
    case 664: 
      var $1025=$p_addr;
      var $call1729=_peek_n($1025, 58, 0);
      var $tobool1730=(($call1729)|(0))!=0;
      if ($tobool1730) { label = 665; break; } else { label = 667; break; }
    case 665: 
      var $1026=$p_addr;
      var $call1732=_peek_n($1026, 58, 1);
      var $tobool1733=(($call1732)|(0))!=0;
      if ($tobool1733) { label = 667; break; } else { label = 666; break; }
    case 666: 
      var $1027=$p_addr;
      var $lstate1735=(($1027+40)|0);
      HEAP32[(($lstate1735)>>2)]=0;
      var $1028=$p_addr;
      var $call1736=_nextc($1028);
      var $1029=$p_addr;
      _tokfix($1029);
      var $1030=$p_addr;
      var $1031=$p_addr;
      var $call1737=_tok($1031);
      var $call1738=_intern_gen($1030, $call1737);
      var $1032=$p_addr;
      var $ylval1739=(($1032+1124)|0);
      var $1033=HEAP32[(($ylval1739)>>2)];
      var $1034=$1033;
      var $id1740=$1034;
      HEAP16[(($id1740)>>1)]=$call1738;
      $retval=312;
      label = 711; break;
    case 667: 
      label = 668; break;
    case 668: 
      var $1035=$p_addr;
      var $lstate1743=(($1035+40)|0);
      var $1036=HEAP32[(($lstate1743)>>2)];
      var $cmp1744=(($1036)|(0))!=8;
      if ($cmp1744) { label = 669; break; } else { label = 694; break; }
    case 669: 
      var $1037=$p_addr;
      var $call1747=_tok($1037);
      var $1038=$p_addr;
      var $call1748=_toklen($1038);
      var $call1749=_reserved_word($call1747, $call1748);
      $kw=$call1749;
      var $1039=$kw;
      var $tobool1750=(($1039)|(0))!=0;
      if ($tobool1750) { label = 670; break; } else { label = 693; break; }
    case 670: 
      var $1040=$p_addr;
      var $lstate1752=(($1040+40)|0);
      var $1041=HEAP32[(($lstate1752)>>2)];
      $state=$1041;
      var $1042=$kw;
      var $state1753=(($1042+12)|0);
      var $1043=HEAP32[(($state1753)>>2)];
      var $1044=$p_addr;
      var $lstate1754=(($1044+40)|0);
      HEAP32[(($lstate1754)>>2)]=$1043;
      var $1045=$state;
      var $cmp1755=(($1045)|(0))==7;
      if ($cmp1755) { label = 671; break; } else { label = 672; break; }
    case 671: 
      var $1046=$p_addr;
      var $1047=$kw;
      var $name=(($1047)|0);
      var $1048=HEAP32[(($name)>>2)];
      var $call1758=_intern_gen($1046, $1048);
      var $1049=$p_addr;
      var $ylval1759=(($1049+1124)|0);
      var $1050=HEAP32[(($ylval1759)>>2)];
      var $1051=$1050;
      var $id1760=$1051;
      HEAP16[(($id1760)>>1)]=$call1758;
      var $1052=$kw;
      var $id1761=(($1052+4)|0);
      var $arrayidx1762=(($id1761)|0);
      var $1053=HEAP32[(($arrayidx1762)>>2)];
      $retval=$1053;
      label = 711; break;
    case 672: 
      var $1054=$p_addr;
      var $lstate1764=(($1054+40)|0);
      var $1055=HEAP32[(($lstate1764)>>2)];
      var $cmp1765=(($1055)|(0))==0;
      if ($cmp1765) { label = 673; break; } else { label = 674; break; }
    case 673: 
      var $1056=$p_addr;
      var $cmd_start1768=(($1056+72)|0);
      HEAP32[(($cmd_start1768)>>2)]=1;
      label = 674; break;
    case 674: 
      var $1057=$kw;
      var $id1770=(($1057+4)|0);
      var $arrayidx1771=(($id1770)|0);
      var $1058=HEAP32[(($arrayidx1771)>>2)];
      var $cmp1772=(($1058)|(0))==281;
      if ($cmp1772) { label = 675; break; } else { label = 687; break; }
    case 675: 
      var $1059=$p_addr;
      var $lpar_beg1775=(($1059+60)|0);
      var $1060=HEAP32[(($lpar_beg1775)>>2)];
      var $tobool1776=(($1060)|(0))!=0;
      if ($tobool1776) { label = 676; break; } else { label = 678; break; }
    case 676: 
      var $1061=$p_addr;
      var $lpar_beg1778=(($1061+60)|0);
      var $1062=HEAP32[(($lpar_beg1778)>>2)];
      var $1063=$p_addr;
      var $paren_nest1779=(($1063+56)|0);
      var $1064=HEAP32[(($paren_nest1779)>>2)];
      var $cmp1780=(($1062)|(0))==(($1064)|(0));
      if ($cmp1780) { label = 677; break; } else { label = 678; break; }
    case 677: 
      var $1065=$p_addr;
      var $lpar_beg1783=(($1065+60)|0);
      HEAP32[(($lpar_beg1783)>>2)]=0;
      var $1066=$p_addr;
      var $paren_nest1784=(($1066+56)|0);
      var $1067=HEAP32[(($paren_nest1784)>>2)];
      var $dec1785=((($1067)-(1))|0);
      HEAP32[(($paren_nest1784)>>2)]=$dec1785;
      $retval=284;
      label = 711; break;
    case 678: 
      var $1068=$p_addr;
      var $cond_stack1787=(($1068+48)|0);
      var $1069=HEAP32[(($cond_stack1787)>>2)];
      var $and1788=$1069 & 1;
      var $tobool1789=(($and1788)|(0))!=0;
      if ($tobool1789) { label = 679; break; } else { label = 680; break; }
    case 679: 
      $retval=282;
      label = 711; break;
    case 680: 
      var $1070=$p_addr;
      var $cmdarg_stack1792=(($1070+52)|0);
      var $1071=HEAP32[(($cmdarg_stack1792)>>2)];
      var $and1793=$1071 & 1;
      var $tobool1794=(($and1793)|(0))!=0;
      if ($tobool1794) { label = 681; break; } else { label = 683; break; }
    case 681: 
      var $1072=$state;
      var $cmp1796=(($1072)|(0))!=5;
      if ($cmp1796) { label = 682; break; } else { label = 683; break; }
    case 682: 
      $retval=283;
      label = 711; break;
    case 683: 
      var $1073=$state;
      var $cmp1800=(($1073)|(0))==2;
      if ($cmp1800) { label = 685; break; } else { label = 684; break; }
    case 684: 
      var $1074=$state;
      var $cmp1803=(($1074)|(0))==0;
      if ($cmp1803) { label = 685; break; } else { label = 686; break; }
    case 685: 
      $retval=283;
      label = 711; break;
    case 686: 
      $retval=281;
      label = 711; break;
    case 687: 
      var $1075=$state;
      var $cmp1808=(($1075)|(0))==0;
      if ($cmp1808) { label = 689; break; } else { label = 688; break; }
    case 688: 
      var $1076=$state;
      var $cmp1811=(($1076)|(0))==10;
      if ($cmp1811) { label = 689; break; } else { label = 690; break; }
    case 689: 
      var $1077=$kw;
      var $id1814=(($1077+4)|0);
      var $arrayidx1815=(($id1814)|0);
      var $1078=HEAP32[(($arrayidx1815)>>2)];
      $retval=$1078;
      label = 711; break;
    case 690: 
      var $1079=$kw;
      var $id1817=(($1079+4)|0);
      var $arrayidx1818=(($id1817)|0);
      var $1080=HEAP32[(($arrayidx1818)>>2)];
      var $1081=$kw;
      var $id1819=(($1081+4)|0);
      var $arrayidx1820=(($id1819+4)|0);
      var $1082=HEAP32[(($arrayidx1820)>>2)];
      var $cmp1821=(($1080)|(0))!=(($1082)|(0));
      if ($cmp1821) { label = 691; break; } else { label = 692; break; }
    case 691: 
      var $1083=$p_addr;
      var $lstate1824=(($1083+40)|0);
      HEAP32[(($lstate1824)>>2)]=0;
      label = 692; break;
    case 692: 
      var $1084=$kw;
      var $id1826=(($1084+4)|0);
      var $arrayidx1827=(($id1826+4)|0);
      var $1085=HEAP32[(($arrayidx1827)>>2)];
      $retval=$1085;
      label = 711; break;
    case 693: 
      label = 694; break;
    case 694: 
      var $1086=$p_addr;
      var $lstate1830=(($1086+40)|0);
      var $1087=HEAP32[(($lstate1830)>>2)];
      var $cmp1831=(($1087)|(0))==0;
      if ($cmp1831) { label = 701; break; } else { label = 695; break; }
    case 695: 
      var $1088=$p_addr;
      var $lstate1834=(($1088+40)|0);
      var $1089=HEAP32[(($lstate1834)>>2)];
      var $cmp1835=(($1089)|(0))==6;
      if ($cmp1835) { label = 701; break; } else { label = 696; break; }
    case 696: 
      var $1090=$p_addr;
      var $lstate1838=(($1090+40)|0);
      var $1091=HEAP32[(($lstate1838)>>2)];
      var $cmp1839=(($1091)|(0))==10;
      if ($cmp1839) { label = 701; break; } else { label = 697; break; }
    case 697: 
      var $1092=$p_addr;
      var $lstate1842=(($1092+40)|0);
      var $1093=HEAP32[(($lstate1842)>>2)];
      var $cmp1843=(($1093)|(0))==9;
      if ($cmp1843) { label = 701; break; } else { label = 698; break; }
    case 698: 
      var $1094=$p_addr;
      var $lstate1846=(($1094+40)|0);
      var $1095=HEAP32[(($lstate1846)>>2)];
      var $cmp1847=(($1095)|(0))==8;
      if ($cmp1847) { label = 701; break; } else { label = 699; break; }
    case 699: 
      var $1096=$p_addr;
      var $lstate1850=(($1096+40)|0);
      var $1097=HEAP32[(($lstate1850)>>2)];
      var $cmp1851=(($1097)|(0))==4;
      if ($cmp1851) { label = 701; break; } else { label = 700; break; }
    case 700: 
      var $1098=$p_addr;
      var $lstate1854=(($1098+40)|0);
      var $1099=HEAP32[(($lstate1854)>>2)];
      var $cmp1855=(($1099)|(0))==5;
      if ($cmp1855) { label = 701; break; } else { label = 705; break; }
    case 701: 
      var $1100=$cmd_state;
      var $tobool1858=(($1100)|(0))!=0;
      if ($tobool1858) { label = 702; break; } else { label = 703; break; }
    case 702: 
      var $1101=$p_addr;
      var $lstate1860=(($1101+40)|0);
      HEAP32[(($lstate1860)>>2)]=5;
      label = 704; break;
    case 703: 
      var $1102=$p_addr;
      var $lstate1862=(($1102+40)|0);
      HEAP32[(($lstate1862)>>2)]=4;
      label = 704; break;
    case 704: 
      label = 709; break;
    case 705: 
      var $1103=$p_addr;
      var $lstate1865=(($1103+40)|0);
      var $1104=HEAP32[(($lstate1865)>>2)];
      var $cmp1866=(($1104)|(0))==7;
      if ($cmp1866) { label = 706; break; } else { label = 707; break; }
    case 706: 
      var $1105=$p_addr;
      var $lstate1869=(($1105+40)|0);
      HEAP32[(($lstate1869)>>2)]=3;
      label = 708; break;
    case 707: 
      var $1106=$p_addr;
      var $lstate1871=(($1106+40)|0);
      HEAP32[(($lstate1871)>>2)]=1;
      label = 708; break;
    case 708: 
      label = 709; break;
    case 709: 
      label = 710; break;
    case 710: 
      var $1107=$p_addr;
      var $1108=$p_addr;
      var $call1875=_tok($1108);
      var $call1876=_intern_gen($1107, $call1875);
      $ident=$call1876;
      var $1109=$ident;
      var $1110=$p_addr;
      var $ylval1877=(($1110+1124)|0);
      var $1111=HEAP32[(($ylval1877)>>2)];
      var $1112=$1111;
      var $id1878=$1112;
      HEAP16[(($id1878)>>1)]=$1109;
      var $1113=$result;
      $retval=$1113;
      label = 711; break;
    case 711: 
      var $1114=$retval;
      STACKTOP = __stackBase__;
      return $1114;
    default: assert(0, "bad label: " + label);
  }
}
function _parse_string($p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 388)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $c;
      var $type;
      var $nest_level;
      var $beg;
      var $end;
      var $hinf;
      var $line_head;
      var $s;
      var $len;
      var $buf=__stackBase__;
      var $f;
      var $c194;
      var $s195;
      var $flag=(__stackBase__)+(256);
      var $msg=(__stackBase__)+(260);
      $p_addr=$p;
      var $0=$p_addr;
      var $lex_strterm=(($0+44)|0);
      var $1=HEAP32[(($lex_strterm)>>2)];
      var $car=(($1)|0);
      var $2=HEAP32[(($car)>>2)];
      var $3=$2;
      $type=$3;
      var $4=$p_addr;
      var $lex_strterm1=(($4+44)|0);
      var $5=HEAP32[(($lex_strterm1)>>2)];
      var $cdr=(($5+4)|0);
      var $6=HEAP32[(($cdr)>>2)];
      var $car2=(($6)|0);
      var $7=HEAP32[(($car2)>>2)];
      var $8=$7;
      $nest_level=$8;
      var $9=$p_addr;
      var $lex_strterm3=(($9+44)|0);
      var $10=HEAP32[(($lex_strterm3)>>2)];
      var $cdr4=(($10+4)|0);
      var $11=HEAP32[(($cdr4)>>2)];
      var $cdr5=(($11+4)|0);
      var $12=HEAP32[(($cdr5)>>2)];
      var $car6=(($12)|0);
      var $13=HEAP32[(($car6)>>2)];
      var $14=$13;
      $beg=$14;
      var $15=$p_addr;
      var $lex_strterm7=(($15+44)|0);
      var $16=HEAP32[(($lex_strterm7)>>2)];
      var $cdr8=(($16+4)|0);
      var $17=HEAP32[(($cdr8)>>2)];
      var $cdr9=(($17+4)|0);
      var $18=HEAP32[(($cdr9)>>2)];
      var $cdr10=(($18+4)|0);
      var $19=HEAP32[(($cdr10)>>2)];
      var $20=$19;
      $end=$20;
      var $21=$type;
      var $and=$21 & 64;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $22=$p_addr;
      var $call=_parsing_heredoc_inf($22);
      var $cond = $call;label = 5; break;
    case 4: 
      var $cond = 0;label = 5; break;
    case 5: 
      var $cond;
      $hinf=$cond;
      var $23=$p_addr;
      var $call11=_newtok($23);
      label = 6; break;
    case 6: 
      var $24=$p_addr;
      var $call12=_nextc($24);
      $c=$call12;
      var $25=$end;
      var $cmp=(($call12)|(0))!=(($25)|(0));
      if ($cmp) { var $27 = 1;label = 8; break; } else { label = 7; break; }
    case 7: 
      var $26=$nest_level;
      var $cmp13=(($26)|(0))!=0;
      var $27 = $cmp13;label = 8; break;
    case 8: 
      var $27;
      if ($27) { label = 9; break; } else { label = 81; break; }
    case 9: 
      var $28=$hinf;
      var $tobool14=(($28)|(0))!=0;
      if ($tobool14) { label = 10; break; } else { label = 27; break; }
    case 10: 
      var $29=$c;
      var $cmp15=(($29)|(0))==10;
      if ($cmp15) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $30=$c;
      var $cmp16=(($30)|(0))==-1;
      if ($cmp16) { label = 12; break; } else { label = 27; break; }
    case 12: 
      var $31=$p_addr;
      _tokadd($31, 10);
      var $32=$p_addr;
      _tokfix($32);
      var $33=$p_addr;
      var $lineno=(($33+32)|0);
      var $34=HEAP32[(($lineno)>>2)];
      var $inc=((($34)+(1))|0);
      HEAP32[(($lineno)>>2)]=$inc;
      var $35=$p_addr;
      var $column=(($35+36)|0);
      HEAP32[(($column)>>2)]=0;
      var $36=$hinf;
      var $37=$36;
      var $38=HEAP8[($37)];
      var $39=(($38)&(255)) >>> 1;
      var $bf_clear=$39 & 1;
      var $conv=(($bf_clear)&(255));
      $line_head=$conv;
      var $40=$hinf;
      var $41=$40;
      var $42=HEAP8[($41)];
      var $43=$42 & -3;
      var $44=$43 | 2;
      HEAP8[($41)]=$44;
      var $45=$line_head;
      var $tobool17=(($45)|(0))!=0;
      if ($tobool17) { label = 13; break; } else { label = 24; break; }
    case 13: 
      var $46=$p_addr;
      var $call19=_tok($46);
      $s=$call19;
      var $47=$p_addr;
      var $call20=_toklen($47);
      $len=$call20;
      var $48=$hinf;
      var $49=$48;
      var $50=HEAP8[($49)];
      var $bf_clear21=$50 & 1;
      var $tobool22=(($bf_clear21 << 24) >> 24)!=0;
      if ($tobool22) { label = 14; break; } else { label = 20; break; }
    case 14: 
      label = 15; break;
    case 15: 
      var $51=$s;
      var $52=HEAP8[($51)];
      var $conv25=(($52)&(255));
      var $call26=_isspace($conv25);
      var $tobool27=(($call26)|(0))!=0;
      if ($tobool27) { label = 16; break; } else { var $54 = 0;label = 17; break; }
    case 16: 
      var $53=$len;
      var $cmp28=(($53)|(0)) > 0;
      var $54 = $cmp28;label = 17; break;
    case 17: 
      var $54;
      if ($54) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $55=$s;
      var $incdec_ptr=(($55+1)|0);
      $s=$incdec_ptr;
      var $56=$len;
      var $dec=((($56)-(1))|0);
      $len=$dec;
      label = 15; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $57=$len;
      var $sub=((($57)-(1))|0);
      var $58=$hinf;
      var $term_len=(($58+12)|0);
      var $59=HEAP32[(($term_len)>>2)];
      var $cmp31=(($sub)|(0))==(($59)|(0));
      if ($cmp31) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $60=$s;
      var $61=$hinf;
      var $term=(($61+8)|0);
      var $62=HEAP32[(($term)>>2)];
      var $63=$len;
      var $sub34=((($63)-(1))|0);
      var $call35=_strncmp($60, $62, $sub34);
      var $cmp36=(($call35)|(0))==0;
      if ($cmp36) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $retval=365;
      label = 102; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $64=$c;
      var $cmp41=(($64)|(0))==-1;
      if ($cmp41) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $arraydecay=(($buf)|0);
      var $65=$hinf;
      var $term44=(($65+8)|0);
      var $66=HEAP32[(($term44)>>2)];
      var $call45=_snprintf($arraydecay, 256, ((106704)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$66,tempInt));
      var $67=$p_addr;
      var $arraydecay46=(($buf)|0);
      _yyerror($67, $arraydecay46);
      $retval=0;
      label = 102; break;
    case 26: 
      var $68=$p_addr;
      var $69=$p_addr;
      var $call48=_tok($69);
      var $70=$p_addr;
      var $call49=_toklen($70);
      var $call50=_new_str($68, $call48, $call49);
      var $71=$p_addr;
      var $ylval=(($71+1124)|0);
      var $72=HEAP32[(($ylval)>>2)];
      var $73=$72;
      var $nd=$73;
      HEAP32[(($nd)>>2)]=$call50;
      $retval=320;
      label = 102; break;
    case 27: 
      var $74=$c;
      var $cmp52=(($74)|(0))==-1;
      if ($cmp52) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $75=$p_addr;
      _yyerror($75, ((106664)|0));
      $retval=0;
      label = 102; break;
    case 29: 
      var $76=$c;
      var $77=$beg;
      var $cmp55=(($76)|(0))==(($77)|(0));
      if ($cmp55) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $78=$nest_level;
      var $inc58=((($78)+(1))|0);
      $nest_level=$inc58;
      var $79=$nest_level;
      var $80=$79;
      var $81=$p_addr;
      var $lex_strterm59=(($81+44)|0);
      var $82=HEAP32[(($lex_strterm59)>>2)];
      var $cdr60=(($82+4)|0);
      var $83=HEAP32[(($cdr60)>>2)];
      var $car61=(($83)|0);
      HEAP32[(($car61)>>2)]=$80;
      label = 69; break;
    case 31: 
      var $84=$c;
      var $85=$end;
      var $cmp63=(($84)|(0))==(($85)|(0));
      if ($cmp63) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $86=$nest_level;
      var $dec66=((($86)-(1))|0);
      $nest_level=$dec66;
      var $87=$nest_level;
      var $88=$87;
      var $89=$p_addr;
      var $lex_strterm67=(($89+44)|0);
      var $90=HEAP32[(($lex_strterm67)>>2)];
      var $cdr68=(($90+4)|0);
      var $91=HEAP32[(($cdr68)>>2)];
      var $car69=(($91)|0);
      HEAP32[(($car69)>>2)]=$88;
      label = 68; break;
    case 33: 
      var $92=$c;
      var $cmp71=(($92)|(0))==92;
      if ($cmp71) { label = 34; break; } else { label = 59; break; }
    case 34: 
      var $93=$p_addr;
      var $call74=_nextc($93);
      $c=$call74;
      var $94=$type;
      var $and75=$94 & 2;
      var $tobool76=(($and75)|(0))!=0;
      if ($tobool76) { label = 35; break; } else { label = 48; break; }
    case 35: 
      var $95=$c;
      var $96=$end;
      var $cmp78=(($95)|(0))==(($96)|(0));
      if ($cmp78) { label = 37; break; } else { label = 36; break; }
    case 36: 
      var $97=$c;
      var $98=$beg;
      var $cmp81=(($97)|(0))==(($98)|(0));
      if ($cmp81) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $99=$p_addr;
      var $100=$c;
      _tokadd($99, $100);
      label = 47; break;
    case 38: 
      var $101=$c;
      var $cmp85=(($101)|(0))==10;
      if ($cmp85) { label = 39; break; } else { label = 41; break; }
    case 39: 
      var $102=$type;
      var $and88=$102 & 32;
      var $tobool89=(($and88)|(0))!=0;
      if ($tobool89) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $103=$p_addr;
      var $lineno91=(($103+32)|0);
      var $104=HEAP32[(($lineno91)>>2)];
      var $inc92=((($104)+(1))|0);
      HEAP32[(($lineno91)>>2)]=$inc92;
      var $105=$p_addr;
      var $column93=(($105+36)|0);
      HEAP32[(($column93)>>2)]=0;
      var $106=$p_addr;
      _tokadd($106, 10);
      label = 46; break;
    case 41: 
      var $107=$p_addr;
      var $108=$c;
      _pushback($107, $108);
      var $109=$type;
      var $and95=$109 & 4;
      var $tobool96=(($and95)|(0))!=0;
      if ($tobool96) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $110=$p_addr;
      _tokadd($110, 92);
      label = 43; break;
    case 43: 
      var $111=$p_addr;
      var $112=$p_addr;
      var $call99=_read_escape($112);
      _tokadd($111, $call99);
      var $113=$hinf;
      var $tobool100=(($113)|(0))!=0;
      if ($tobool100) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $114=$hinf;
      var $115=$114;
      var $116=HEAP8[($115)];
      var $117=$116 & -3;
      HEAP8[($115)]=$117;
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 58; break;
    case 48: 
      var $118=$c;
      var $119=$beg;
      var $cmp106=(($118)|(0))!=(($119)|(0));
      if ($cmp106) { label = 49; break; } else { label = 57; break; }
    case 49: 
      var $120=$c;
      var $121=$end;
      var $cmp109=(($120)|(0))!=(($121)|(0));
      if ($cmp109) { label = 50; break; } else { label = 57; break; }
    case 50: 
      var $122=$c;
      if ((($122)|(0))==10) {
        label = 51; break;
      }
      else if ((($122)|(0))==92) {
        label = 52; break;
      }
      else {
      label = 53; break;
      }
    case 51: 
      var $123=$p_addr;
      var $lineno112=(($123+32)|0);
      var $124=HEAP32[(($lineno112)>>2)];
      var $inc113=((($124)+(1))|0);
      HEAP32[(($lineno112)>>2)]=$inc113;
      var $125=$p_addr;
      var $column114=(($125+36)|0);
      HEAP32[(($column114)>>2)]=0;
      label = 56; break;
    case 52: 
      label = 56; break;
    case 53: 
      var $126=$c;
      var $conv116=(($126) & 255);
      var $conv117=(($conv116)&(255));
      var $call118=_isspace($conv117);
      var $tobool119=(($call118)|(0))!=0;
      if ($tobool119) { label = 55; break; } else { label = 54; break; }
    case 54: 
      var $127=$p_addr;
      _tokadd($127, 92);
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $128=$p_addr;
      var $129=$c;
      _tokadd($128, $129);
      label = 58; break;
    case 58: 
      label = 6; break;
    case 59: 
      var $130=$c;
      var $cmp125=(($130)|(0))==35;
      if ($cmp125) { label = 60; break; } else { label = 66; break; }
    case 60: 
      var $131=$type;
      var $and128=$131 & 2;
      var $tobool129=(($and128)|(0))!=0;
      if ($tobool129) { label = 61; break; } else { label = 66; break; }
    case 61: 
      var $132=$p_addr;
      var $call131=_nextc($132);
      $c=$call131;
      var $133=$c;
      var $cmp132=(($133)|(0))==123;
      if ($cmp132) { label = 62; break; } else { label = 65; break; }
    case 62: 
      var $134=$p_addr;
      _tokfix($134);
      var $135=$p_addr;
      var $lstate=(($135+40)|0);
      HEAP32[(($lstate)>>2)]=0;
      var $136=$p_addr;
      var $cmd_start=(($136+72)|0);
      HEAP32[(($cmd_start)>>2)]=1;
      var $137=$p_addr;
      var $138=$p_addr;
      var $call135=_tok($138);
      var $139=$p_addr;
      var $call136=_toklen($139);
      var $call137=_new_str($137, $call135, $call136);
      var $140=$p_addr;
      var $ylval138=(($140+1124)|0);
      var $141=HEAP32[(($ylval138)>>2)];
      var $142=$141;
      var $nd139=$142;
      HEAP32[(($nd139)>>2)]=$call137;
      var $143=$hinf;
      var $tobool140=(($143)|(0))!=0;
      if ($tobool140) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $144=$hinf;
      var $145=$144;
      var $146=HEAP8[($145)];
      var $147=$146 & -3;
      HEAP8[($145)]=$147;
      label = 64; break;
    case 64: 
      $retval=319;
      label = 102; break;
    case 65: 
      var $148=$p_addr;
      _tokadd($148, 35);
      var $149=$p_addr;
      var $150=$c;
      _pushback($149, $150);
      label = 6; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $151=$type;
      var $and149=$151 & 32;
      var $tobool150=(($and149)|(0))!=0;
      if ($tobool150) { label = 71; break; } else { label = 80; break; }
    case 71: 
      var $152=$c;
      var $conv152=(($152) & 255);
      var $conv153=(($conv152)&(255));
      var $call154=_isspace($conv153);
      var $tobool155=(($call154)|(0))!=0;
      if ($tobool155) { label = 72; break; } else { label = 80; break; }
    case 72: 
      var $153=$p_addr;
      var $call157=_toklen($153);
      var $cmp158=(($call157)|(0))==0;
      if ($cmp158) { label = 73; break; } else { label = 79; break; }
    case 73: 
      label = 74; break;
    case 74: 
      var $154=$c;
      var $cmp161=(($154)|(0))==10;
      if ($cmp161) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $155=$p_addr;
      var $lineno164=(($155+32)|0);
      var $156=HEAP32[(($lineno164)>>2)];
      var $inc165=((($156)+(1))|0);
      HEAP32[(($lineno164)>>2)]=$inc165;
      var $157=$p_addr;
      var $column166=(($157+36)|0);
      HEAP32[(($column166)>>2)]=0;
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $158=$p_addr;
      var $call168=_nextc($158);
      $c=$call168;
      var $conv169=(($call168) & 255);
      var $conv170=(($conv169)&(255));
      var $call171=_isspace($conv170);
      var $tobool172=(($call171)|(0))!=0;
      if ($tobool172) { label = 74; break; } else { label = 78; break; }
    case 78: 
      var $159=$p_addr;
      var $160=$c;
      _pushback($159, $160);
      $retval=366;
      label = 102; break;
    case 79: 
      var $161=$p_addr;
      var $162=$c;
      _pushback($161, $162);
      var $163=$p_addr;
      _tokfix($163);
      var $164=$p_addr;
      var $165=$p_addr;
      var $call174=_tok($165);
      var $166=$p_addr;
      var $call175=_toklen($166);
      var $call176=_new_str($164, $call174, $call175);
      var $167=$p_addr;
      var $ylval177=(($167+1124)|0);
      var $168=HEAP32[(($ylval177)>>2)];
      var $169=$168;
      var $nd178=$169;
      HEAP32[(($nd178)>>2)]=$call176;
      $retval=320;
      label = 102; break;
    case 80: 
      var $170=$p_addr;
      var $171=$c;
      _tokadd($170, $171);
      label = 6; break;
    case 81: 
      var $172=$p_addr;
      _tokfix($172);
      var $173=$p_addr;
      var $lstate181=(($173+40)|0);
      HEAP32[(($lstate181)>>2)]=1;
      var $174=$p_addr;
      _end_strterm($174);
      var $175=$type;
      var $and182=$175 & 128;
      var $tobool183=(($and182)|(0))!=0;
      if ($tobool183) { label = 82; break; } else { label = 83; break; }
    case 82: 
      var $176=$p_addr;
      var $177=$p_addr;
      var $call185=_tok($177);
      var $178=$p_addr;
      var $call186=_toklen($178);
      var $call187=_new_xstr($176, $call185, $call186);
      var $179=$p_addr;
      var $ylval188=(($179+1124)|0);
      var $180=HEAP32[(($ylval188)>>2)];
      var $181=$180;
      var $nd189=$181;
      HEAP32[(($nd189)>>2)]=$call187;
      $retval=316;
      label = 102; break;
    case 83: 
      var $182=$type;
      var $and191=$182 & 4;
      var $tobool192=(($and191)|(0))!=0;
      if ($tobool192) { label = 84; break; } else { label = 101; break; }
    case 84: 
      $f=0;
      var $183=$p_addr;
      var $184=$p_addr;
      var $call196=_tok($184);
      var $185=$p_addr;
      var $call197=_toklen($185);
      var $call198=_parser_strndup($183, $call196, $call197);
      $s195=$call198;
      var $186=$flag;
      HEAP8[($186)]=0; HEAP8[((($186)+(1))|0)]=0; HEAP8[((($186)+(2))|0)]=0; HEAP8[((($186)+(3))|0)]=0;
      var $187=$p_addr;
      var $call199=_newtok($187);
      label = 85; break;
    case 85: 
      var $188=$p_addr;
      var $call201=_nextc($188);
      $c194=$call201;
      var $189=$c194;
      var $conv202=(($189) & 255);
      var $conv203=(($conv202)&(255));
      var $call204=_isalpha($conv203);
      var $tobool205=(($call204)|(0))!=0;
      if ($tobool205) { label = 86; break; } else { label = 92; break; }
    case 86: 
      var $190=$c194;
      if ((($190)|(0))==105) {
        label = 87; break;
      }
      else if ((($190)|(0))==120) {
        label = 88; break;
      }
      else if ((($190)|(0))==109) {
        label = 89; break;
      }
      else {
      label = 90; break;
      }
    case 87: 
      var $191=$f;
      var $or=$191 | 1;
      $f=$or;
      label = 91; break;
    case 88: 
      var $192=$f;
      var $or209=$192 | 2;
      $f=$or209;
      label = 91; break;
    case 89: 
      var $193=$f;
      var $or211=$193 | 4;
      $f=$or211;
      label = 91; break;
    case 90: 
      var $194=$p_addr;
      var $195=$c194;
      _tokadd($194, $195);
      label = 91; break;
    case 91: 
      label = 85; break;
    case 92: 
      var $196=$p_addr;
      var $197=$c194;
      _pushback($196, $197);
      var $198=$p_addr;
      var $call215=_toklen($198);
      var $tobool216=(($call215)|(0))!=0;
      if ($tobool216) { label = 93; break; } else { label = 94; break; }
    case 93: 
      var $199=$p_addr;
      _tokfix($199);
      var $arraydecay218=(($msg)|0);
      var $200=$p_addr;
      var $call219=_toklen($200);
      var $cmp220=(($call219)|(0)) > 1;
      var $cond222=$cmp220 ? (((106624)|0)) : (((100260)|0));
      var $201=$p_addr;
      var $call223=_tok($201);
      var $call224=_snprintf($arraydecay218, 128, ((106632)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$cond222,HEAP32[(((tempInt)+(4))>>2)]=$call223,tempInt));
      var $202=$p_addr;
      var $arraydecay225=(($msg)|0);
      _yyerror($202, $arraydecay225);
      label = 94; break;
    case 94: 
      var $203=$f;
      var $and227=$203 & 1;
      var $tobool228=(($and227)|(0))!=0;
      if ($tobool228) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $arraydecay230=(($flag)|0);
      var $call231=_strcat($arraydecay230, ((106568)|0));
      label = 96; break;
    case 96: 
      var $204=$f;
      var $and233=$204 & 2;
      var $tobool234=(($and233)|(0))!=0;
      if ($tobool234) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $arraydecay236=(($flag)|0);
      var $call237=_strcat($arraydecay236, ((106564)|0));
      label = 98; break;
    case 98: 
      var $205=$f;
      var $and239=$205 & 4;
      var $tobool240=(($and239)|(0))!=0;
      if ($tobool240) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $arraydecay242=(($flag)|0);
      var $call243=_strcat($arraydecay242, ((106536)|0));
      label = 100; break;
    case 100: 
      var $206=$p_addr;
      var $207=$s195;
      var $208=$p_addr;
      var $arraydecay245=(($flag)|0);
      var $call246=_parser_strdup($208, $arraydecay245);
      var $call247=_new_regx($206, $207, $call246);
      var $209=$p_addr;
      var $ylval248=(($209+1124)|0);
      var $210=HEAP32[(($ylval248)>>2)];
      var $211=$210;
      var $nd249=$211;
      HEAP32[(($nd249)>>2)]=$call247;
      $retval=317;
      label = 102; break;
    case 101: 
      var $212=$p_addr;
      var $213=$p_addr;
      var $call251=_tok($213);
      var $214=$p_addr;
      var $call252=_toklen($214);
      var $call253=_new_str($212, $call251, $call252);
      var $215=$p_addr;
      var $ylval254=(($215+1124)|0);
      var $216=HEAP32[(($ylval254)>>2)];
      var $217=$216;
      var $nd255=$217;
      HEAP32[(($nd255)>>2)]=$call253;
      $retval=318;
      label = 102; break;
    case 102: 
      var $218=$retval;
      STACKTOP = __stackBase__;
      return $218;
    default: assert(0, "bad label: " + label);
  }
}
function _nextc($p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $c;
      var $tmp;
      var $cxt28;
      $p_addr=$p;
      var $0=$p_addr;
      var $pb=(($0+80)|0);
      var $1=HEAP32[(($pb)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$p_addr;
      var $pb1=(($2+80)|0);
      var $3=HEAP32[(($pb1)>>2)];
      var $car=(($3)|0);
      var $4=HEAP32[(($car)>>2)];
      var $5=$4;
      $c=$5;
      var $6=$p_addr;
      var $pb2=(($6+80)|0);
      var $7=HEAP32[(($pb2)>>2)];
      $tmp=$7;
      var $8=$p_addr;
      var $pb3=(($8+80)|0);
      var $9=HEAP32[(($pb3)>>2)];
      var $cdr=(($9+4)|0);
      var $10=HEAP32[(($cdr)>>2)];
      var $11=$p_addr;
      var $pb4=(($11+80)|0);
      HEAP32[(($pb4)>>2)]=$10;
      var $12=$p_addr;
      var $13=$tmp;
      _cons_free_gen($12, $13);
      label = 16; break;
    case 4: 
      var $14=$p_addr;
      var $f=(($14+20)|0);
      var $15=HEAP32[(($f)>>2)];
      var $tobool5=(($15)|(0))!=0;
      if ($tobool5) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $16=$p_addr;
      var $f7=(($16+20)|0);
      var $17=HEAP32[(($f7)>>2)];
      var $call=_feof($17);
      var $tobool8=(($call)|(0))!=0;
      if ($tobool8) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 17; break;
    case 7: 
      var $18=$p_addr;
      var $f10=(($18+20)|0);
      var $19=HEAP32[(($f10)>>2)];
      var $call11=_fgetc($19);
      $c=$call11;
      var $20=$c;
      var $cmp=(($20)|(0))==-1;
      if ($cmp) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 17; break;
    case 9: 
      label = 15; break;
    case 10: 
      var $21=$p_addr;
      var $s=(($21+12)|0);
      var $22=HEAP32[(($s)>>2)];
      var $tobool15=(($22)|(0))!=0;
      if ($tobool15) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $23=$p_addr;
      var $s16=(($23+12)|0);
      var $24=HEAP32[(($s16)>>2)];
      var $25=$p_addr;
      var $send=(($25+16)|0);
      var $26=HEAP32[(($send)>>2)];
      var $cmp17=(($24)>>>(0)) >= (($26)>>>(0));
      if ($cmp17) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 17; break;
    case 13: 
      var $27=$p_addr;
      var $s20=(($27+12)|0);
      var $28=HEAP32[(($s20)>>2)];
      var $incdec_ptr=(($28+1)|0);
      HEAP32[(($s20)>>2)]=$incdec_ptr;
      var $29=HEAP8[($28)];
      var $conv=(($29)&(255));
      $c=$conv;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $30=$p_addr;
      var $column=(($30+36)|0);
      var $31=HEAP32[(($column)>>2)];
      var $inc=((($31)+(1))|0);
      HEAP32[(($column)>>2)]=$inc;
      var $32=$c;
      $retval=$32;
      label = 22; break;
    case 17: 
      var $33=$p_addr;
      var $cxt=(($33+24)|0);
      var $34=HEAP32[(($cxt)>>2)];
      var $tobool24=(($34)|(0))!=0;
      if ($tobool24) { label = 19; break; } else { label = 18; break; }
    case 18: 
      $retval=-1;
      label = 22; break;
    case 19: 
      var $35=$p_addr;
      var $cxt29=(($35+24)|0);
      var $36=HEAP32[(($cxt29)>>2)];
      $cxt28=$36;
      var $37=$cxt28;
      var $partial_hook=(($37+16)|0);
      var $38=HEAP32[(($partial_hook)>>2)];
      var $39=$p_addr;
      var $call30=FUNCTION_TABLE[$38]($39);
      var $cmp31=(($call30)|(0)) < 0;
      if ($cmp31) { label = 20; break; } else { label = 21; break; }
    case 20: 
      $retval=-1;
      label = 22; break;
    case 21: 
      var $40=$p_addr;
      var $cxt35=(($40+24)|0);
      HEAP32[(($cxt35)>>2)]=0;
      var $41=$p_addr;
      var $call36=_nextc($41);
      $c=$call36;
      var $42=$cxt28;
      var $43=$p_addr;
      var $cxt37=(($43+24)|0);
      HEAP32[(($cxt37)>>2)]=$42;
      var $44=$c;
      $retval=$44;
      label = 22; break;
    case 22: 
      var $45=$retval;
      return $45;
    default: assert(0, "bad label: " + label);
  }
}
function _newtok($p) {
  var label = 0;
  var $p_addr;
  $p_addr=$p;
  var $0=$p_addr;
  var $bidx=(($0+1108)|0);
  HEAP32[(($bidx)>>2)]=0;
  var $1=$p_addr;
  var $column=(($1+36)|0);
  var $2=HEAP32[(($column)>>2)];
  var $sub=((($2)-(1))|0);
  return $sub;
}
function _skip($p, $term) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $term_addr;
      var $c;
      $p_addr=$p;
      $term_addr=$term;
      label = 3; break;
    case 3: 
      var $0=$p_addr;
      var $call=_nextc($0);
      $c=$call;
      var $1=$c;
      var $cmp=(($1)|(0)) < 0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 8; break;
    case 5: 
      var $2=$c;
      var $3=$term_addr;
      var $conv=(($3 << 24) >> 24);
      var $cmp1=(($2)|(0))==(($conv)|(0));
      if ($cmp1) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      label = 3; break;
    case 8: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_strterm($p, $type, $term, $paren) {
  var label = 0;
  var $p_addr;
  var $type_addr;
  var $term_addr;
  var $paren_addr;
  $p_addr=$p;
  $type_addr=$type;
  $term_addr=$term;
  $paren_addr=$paren;
  var $0=$p_addr;
  var $1=$type_addr;
  var $2=$1;
  var $3=$p_addr;
  var $4=$p_addr;
  var $5=$paren_addr;
  var $6=$5;
  var $7=$term_addr;
  var $8=$7;
  var $call=_cons_gen($4, $6, $8);
  var $call1=_cons_gen($3, 0, $call);
  var $call2=_cons_gen($0, $2, $call1);
  return $call2;
}
function _pushback($p, $c) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $c_addr;
      $p_addr=$p;
      $c_addr=$c;
      var $0=$c_addr;
      var $cmp=(($0)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      var $1=$p_addr;
      var $column=(($1+36)|0);
      var $2=HEAP32[(($column)>>2)];
      var $dec=((($2)-(1))|0);
      HEAP32[(($column)>>2)]=$dec;
      var $3=$p_addr;
      var $4=$c_addr;
      var $5=$4;
      var $6=$p_addr;
      var $pb=(($6+80)|0);
      var $7=HEAP32[(($pb)>>2)];
      var $call=_cons_gen($3, $5, $7);
      var $8=$p_addr;
      var $pb1=(($8+80)|0);
      HEAP32[(($pb1)>>2)]=$call;
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _yywarning($p, $s) {
  var label = 0;
  var $p_addr;
  var $s_addr;
  $p_addr=$p;
  $s_addr=$s;
  var $0=$p_addr;
  var $1=$s_addr;
  _yywarn($0, $1);
  return;
}
function _peeks($p, $s) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $s_addr;
      var $len;
      var $n;
      $p_addr=$p;
      $s_addr=$s;
      var $0=$s_addr;
      var $call=_strlen($0);
      $len=$call;
      var $1=$p_addr;
      var $f=(($1+20)|0);
      var $2=HEAP32[(($f)>>2)];
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 9; break; }
    case 3: 
      $n=0;
      label = 4; break;
    case 4: 
      var $3=$s_addr;
      var $4=HEAP8[($3)];
      var $tobool1=(($4 << 24) >> 24)!=0;
      if ($tobool1) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $5=$p_addr;
      var $6=$s_addr;
      var $incdec_ptr=(($6+1)|0);
      $s_addr=$incdec_ptr;
      var $7=HEAP8[($6)];
      var $conv=(($7 << 24) >> 24);
      var $8=$n;
      var $inc=((($8)+(1))|0);
      $n=$inc;
      var $call2=_peek_n($5, $conv, $8);
      var $tobool3=(($call2)|(0))!=0;
      if ($tobool3) { label = 7; break; } else { label = 6; break; }
    case 6: 
      $retval=0;
      label = 16; break;
    case 7: 
      label = 4; break;
    case 8: 
      $retval=1;
      label = 16; break;
    case 9: 
      var $9=$p_addr;
      var $s5=(($9+12)|0);
      var $10=HEAP32[(($s5)>>2)];
      var $tobool6=(($10)|(0))!=0;
      if ($tobool6) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $11=$p_addr;
      var $s7=(($11+12)|0);
      var $12=HEAP32[(($s7)>>2)];
      var $13=$len;
      var $add_ptr=(($12+$13)|0);
      var $14=$p_addr;
      var $send=(($14+16)|0);
      var $15=HEAP32[(($send)>>2)];
      var $cmp=(($add_ptr)>>>(0)) >= (($15)>>>(0));
      if ($cmp) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $16=$p_addr;
      var $s10=(($16+12)|0);
      var $17=HEAP32[(($s10)>>2)];
      var $18=$s_addr;
      var $19=$len;
      var $call11=_memcmp($17, $18, $19);
      var $cmp12=(($call11)|(0))==0;
      if ($cmp12) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $retval=1;
      label = 16; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      $retval=0;
      label = 16; break;
    case 16: 
      var $20=$retval;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
function _skips($p, $s) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $s_addr;
      var $c;
      var $len;
      $p_addr=$p;
      $s_addr=$s;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $0=$p_addr;
      var $call=_nextc($0);
      $c=$call;
      var $1=$c;
      var $cmp=(($1)|(0)) < 0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $2=$c;
      $retval=$2;
      label = 16; break;
    case 6: 
      var $3=$c;
      var $4=$s_addr;
      var $5=HEAP8[($4)];
      var $conv=(($5 << 24) >> 24);
      var $cmp2=(($3)|(0))==(($conv)|(0));
      if ($cmp2) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      label = 4; break;
    case 9: 
      var $6=$s_addr;
      var $incdec_ptr=(($6+1)|0);
      $s_addr=$incdec_ptr;
      var $7=$p_addr;
      var $8=$s_addr;
      var $call6=_peeks($7, $8);
      var $tobool=(($call6)|(0))!=0;
      if ($tobool) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $9=$s_addr;
      var $call8=_strlen($9);
      $len=$call8;
      label = 11; break;
    case 11: 
      var $10=$len;
      var $dec=((($10)-(1))|0);
      $len=$dec;
      var $tobool9=(($10)|(0))!=0;
      if ($tobool9) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $11=$p_addr;
      var $call10=_nextc($11);
      label = 11; break;
    case 13: 
      $retval=1;
      label = 16; break;
    case 14: 
      var $12=$s_addr;
      var $incdec_ptr11=((($12)-(1))|0);
      $s_addr=$incdec_ptr11;
      label = 15; break;
    case 15: 
      label = 3; break;
    case 16: 
      var $13=$retval;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
function _heredoc_identifier($p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $c;
      var $type;
      var $indent;
      var $quote;
      var $newnode;
      var $info;
      var $term;
      var $n;
      $p_addr=$p;
      $type=65;
      $indent=0;
      $quote=0;
      var $0=$p_addr;
      var $call=_nextc($0);
      $c=$call;
      var $1=$c;
      var $conv=(($1) & 255);
      var $conv1=(($conv)&(255));
      var $call2=_isspace($conv1);
      var $tobool=(($call2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$c;
      var $cmp=(($2)|(0))==61;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$p_addr;
      var $4=$c;
      _pushback($3, $4);
      $retval=0;
      label = 44; break;
    case 5: 
      var $5=$c;
      var $cmp4=(($5)|(0))==45;
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $indent=1;
      var $6=$p_addr;
      var $call7=_nextc($6);
      $c=$call7;
      label = 7; break;
    case 7: 
      var $7=$c;
      var $cmp9=(($7)|(0))==39;
      if ($cmp9) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $8=$c;
      var $cmp12=(($8)|(0))==34;
      if ($cmp12) { label = 9; break; } else { label = 21; break; }
    case 9: 
      var $9=$c;
      $term=$9;
      var $10=$c;
      var $cmp15=(($10)|(0))==39;
      if ($cmp15) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $quote=1;
      label = 11; break;
    case 11: 
      var $11=$p_addr;
      var $call19=_newtok($11);
      label = 12; break;
    case 12: 
      var $12=$p_addr;
      var $call20=_nextc($12);
      $c=$call20;
      var $cmp21=(($call20)|(0))!=-1;
      if ($cmp21) { label = 13; break; } else { var $15 = 0;label = 14; break; }
    case 13: 
      var $13=$c;
      var $14=$term;
      var $cmp23=(($13)|(0))!=(($14)|(0));
      var $15 = $cmp23;label = 14; break;
    case 14: 
      var $15;
      if ($15) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $16=$c;
      var $cmp25=(($16)|(0))==10;
      if ($cmp25) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $c=-1;
      label = 18; break;
    case 17: 
      var $17=$p_addr;
      var $18=$c;
      _tokadd($17, $18);
      label = 12; break;
    case 18: 
      var $19=$c;
      var $cmp29=(($19)|(0))==-1;
      if ($cmp29) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $20=$p_addr;
      _yyerror($20, ((106748)|0));
      $retval=0;
      label = 44; break;
    case 20: 
      label = 36; break;
    case 21: 
      var $21=$c;
      var $call33=_isalnum($21);
      var $tobool34=(($call33)|(0))!=0;
      if ($tobool34) { label = 27; break; } else { label = 22; break; }
    case 22: 
      var $22=$c;
      var $cmp36=(($22)|(0))==95;
      if ($cmp36) { label = 27; break; } else { label = 23; break; }
    case 23: 
      var $23=$c;
      var $cmp39=(($23)>>>(0)) <= 127;
      if ($cmp39) { label = 24; break; } else { label = 27; break; }
    case 24: 
      var $24=$p_addr;
      var $25=$c;
      _pushback($24, $25);
      var $26=$indent;
      var $tobool42=(($26)|(0))!=0;
      if ($tobool42) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $27=$p_addr;
      _pushback($27, 45);
      label = 26; break;
    case 26: 
      $retval=0;
      label = 44; break;
    case 27: 
      var $28=$p_addr;
      var $call46=_newtok($28);
      label = 28; break;
    case 28: 
      var $29=$p_addr;
      var $30=$c;
      _tokadd($29, $30);
      label = 29; break;
    case 29: 
      var $31=$p_addr;
      var $call47=_nextc($31);
      $c=$call47;
      var $cmp48=(($call47)|(0))!=-1;
      if ($cmp48) { label = 30; break; } else { var $36 = 0;label = 34; break; }
    case 30: 
      var $32=$c;
      var $call51=_isalnum($32);
      var $tobool52=(($call51)|(0))!=0;
      if ($tobool52) { var $35 = 1;label = 33; break; } else { label = 31; break; }
    case 31: 
      var $33=$c;
      var $cmp54=(($33)|(0))==95;
      if ($cmp54) { var $35 = 1;label = 33; break; } else { label = 32; break; }
    case 32: 
      var $34=$c;
      var $cmp56=(($34)>>>(0)) <= 127;
      var $lnot=$cmp56 ^ 1;
      var $35 = $lnot;label = 33; break;
    case 33: 
      var $35;
      var $36 = $35;label = 34; break;
    case 34: 
      var $36;
      if ($36) { label = 28; break; } else { label = 35; break; }
    case 35: 
      var $37=$p_addr;
      var $38=$c;
      _pushback($37, $38);
      label = 36; break;
    case 36: 
      var $39=$p_addr;
      _tokfix($39);
      var $40=$p_addr;
      var $call60=_new_heredoc($40);
      $newnode=$call60;
      var $41=$newnode;
      var $cdr=(($41+4)|0);
      var $42=HEAP32[(($cdr)>>2)];
      var $43=$42;
      $info=$43;
      var $44=$p_addr;
      var $45=$p_addr;
      var $call61=_tok($45);
      var $46=$p_addr;
      var $call62=_toklen($46);
      var $call63=_parser_strndup($44, $call61, $call62);
      var $47=$info;
      var $term64=(($47+8)|0);
      HEAP32[(($term64)>>2)]=$call63;
      var $48=$p_addr;
      var $call65=_toklen($48);
      var $49=$info;
      var $term_len=(($49+12)|0);
      HEAP32[(($term_len)>>2)]=$call65;
      var $50=$quote;
      var $tobool66=(($50)|(0))!=0;
      if ($tobool66) { label = 38; break; } else { label = 37; break; }
    case 37: 
      var $51=$type;
      var $or=$51 | 2;
      $type=$or;
      label = 38; break;
    case 38: 
      var $52=$type;
      var $53=$info;
      var $type69=(($53+4)|0);
      HEAP32[(($type69)>>2)]=$52;
      var $54=$indent;
      var $conv70=(($54) & 255);
      var $55=$info;
      var $bf_value=$conv70 & 1;
      var $56=$55;
      var $57=$bf_value & 1;
      var $58=HEAP8[($56)];
      var $59=$58 & -2;
      var $60=$59 | $57;
      HEAP8[($56)]=$60;
      var $61=$info;
      var $62=$61;
      var $63=HEAP8[($62)];
      var $64=$63 & -3;
      var $65=$64 | 2;
      HEAP8[($62)]=$65;
      var $66=$info;
      var $doc=(($66+16)|0);
      HEAP32[(($doc)>>2)]=0;
      var $67=$p_addr;
      var $68=$p_addr;
      var $heredocs=(($68+1112)|0);
      var $69=HEAP32[(($heredocs)>>2)];
      var $70=$p_addr;
      var $71=$newnode;
      var $call71=_list1_gen($70, $71);
      var $call72=_append_gen($67, $69, $call71);
      var $72=$p_addr;
      var $heredocs73=(($72+1112)|0);
      HEAP32[(($heredocs73)>>2)]=$call72;
      var $73=$p_addr;
      var $parsing_heredoc=(($73+1116)|0);
      var $74=HEAP32[(($parsing_heredoc)>>2)];
      var $cmp74=(($74)|(0))==0;
      if ($cmp74) { label = 39; break; } else { label = 43; break; }
    case 39: 
      var $75=$p_addr;
      var $heredocs77=(($75+1112)|0);
      var $76=HEAP32[(($heredocs77)>>2)];
      $n=$76;
      label = 40; break;
    case 40: 
      var $77=$n;
      var $cdr79=(($77+4)|0);
      var $78=HEAP32[(($cdr79)>>2)];
      var $tobool80=(($78)|(0))!=0;
      if ($tobool80) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $79=$n;
      var $cdr82=(($79+4)|0);
      var $80=HEAP32[(($cdr82)>>2)];
      $n=$80;
      label = 40; break;
    case 42: 
      var $81=$n;
      var $82=$p_addr;
      var $parsing_heredoc84=(($82+1116)|0);
      HEAP32[(($parsing_heredoc84)>>2)]=$81;
      label = 43; break;
    case 43: 
      var $83=$p_addr;
      var $84=$83;
      var $bf_field_offs=(($84+1120)|0);
      var $85=HEAP8[($bf_field_offs)];
      var $86=$85 & -2;
      var $87=$86 | 1;
      HEAP8[($bf_field_offs)]=$87;
      var $88=$p_addr;
      var $lstate=(($88+40)|0);
      HEAP32[(($lstate)>>2)]=1;
      var $89=$newnode;
      var $90=$p_addr;
      var $ylval=(($90+1124)|0);
      var $91=HEAP32[(($ylval)>>2)];
      var $92=$91;
      var $nd=$92;
      HEAP32[(($nd)>>2)]=$89;
      $retval=364;
      label = 44; break;
    case 44: 
      var $93=$retval;
      return $93;
    default: assert(0, "bad label: " + label);
  }
}
function _read_escape($p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $c;
      var $buf=__stackBase__;
      var $i=(__stackBase__)+(12);
      var $buf22=(__stackBase__)+(16);
      var $i23=(__stackBase__)+(24);
      $p_addr=$p;
      var $0=$p_addr;
      var $call=_nextc($0);
      $c=$call;
      if ((($call)|(0))==92) {
        label = 3; break;
      }
      else if ((($call)|(0))==110) {
        label = 4; break;
      }
      else if ((($call)|(0))==116) {
        label = 5; break;
      }
      else if ((($call)|(0))==114) {
        label = 6; break;
      }
      else if ((($call)|(0))==102) {
        label = 7; break;
      }
      else if ((($call)|(0))==118) {
        label = 8; break;
      }
      else if ((($call)|(0))==97) {
        label = 9; break;
      }
      else if ((($call)|(0))==101) {
        label = 10; break;
      }
      else if ((($call)|(0))==48 | (($call)|(0))==49 | (($call)|(0))==50 | (($call)|(0))==51 | (($call)|(0))==52 | (($call)|(0))==53 | (($call)|(0))==54 | (($call)|(0))==55) {
        label = 11; break;
      }
      else if ((($call)|(0))==120) {
        label = 21; break;
      }
      else if ((($call)|(0))==98) {
        label = 32; break;
      }
      else if ((($call)|(0))==115) {
        label = 33; break;
      }
      else if ((($call)|(0))==77) {
        label = 34; break;
      }
      else if ((($call)|(0))==67) {
        label = 41; break;
      }
      else if ((($call)|(0))==99) {
        label = 44; break;
      }
      else if ((($call)|(0))==-1) {
        label = 54; break;
      }
      else {
      label = 55; break;
      }
    case 3: 
      var $1=$c;
      $retval=$1;
      label = 56; break;
    case 4: 
      $retval=10;
      label = 56; break;
    case 5: 
      $retval=9;
      label = 56; break;
    case 6: 
      $retval=13;
      label = 56; break;
    case 7: 
      $retval=12;
      label = 56; break;
    case 8: 
      $retval=11;
      label = 56; break;
    case 9: 
      $retval=7;
      label = 56; break;
    case 10: 
      $retval=27;
      label = 56; break;
    case 11: 
      var $2=$c;
      var $arrayidx=(($buf)|0);
      HEAP32[(($arrayidx)>>2)]=$2;
      HEAP32[(($i)>>2)]=1;
      label = 12; break;
    case 12: 
      var $3=HEAP32[(($i)>>2)];
      var $cmp=(($3)|(0)) < 3;
      if ($cmp) { label = 13; break; } else { label = 20; break; }
    case 13: 
      var $4=$p_addr;
      var $call9=_nextc($4);
      var $5=HEAP32[(($i)>>2)];
      var $arrayidx10=(($buf+($5<<2))|0);
      HEAP32[(($arrayidx10)>>2)]=$call9;
      var $6=HEAP32[(($i)>>2)];
      var $arrayidx11=(($buf+($6<<2))|0);
      var $7=HEAP32[(($arrayidx11)>>2)];
      var $cmp12=(($7)|(0))==-1;
      if ($cmp12) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 53; break;
    case 15: 
      var $8=HEAP32[(($i)>>2)];
      var $arrayidx13=(($buf+($8<<2))|0);
      var $9=HEAP32[(($arrayidx13)>>2)];
      var $cmp14=(($9)|(0)) < 48;
      if ($cmp14) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $10=HEAP32[(($i)>>2)];
      var $arrayidx15=(($buf+($10<<2))|0);
      var $11=HEAP32[(($arrayidx15)>>2)];
      var $cmp16=55 < (($11)|(0));
      if ($cmp16) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $12=$p_addr;
      var $13=HEAP32[(($i)>>2)];
      var $arrayidx18=(($buf+($13<<2))|0);
      var $14=HEAP32[(($arrayidx18)>>2)];
      _pushback($12, $14);
      label = 20; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $15=HEAP32[(($i)>>2)];
      var $inc=((($15)+(1))|0);
      HEAP32[(($i)>>2)]=$inc;
      label = 12; break;
    case 20: 
      var $arraydecay=(($buf)|0);
      var $16=HEAP32[(($i)>>2)];
      var $call20=_scan_oct($arraydecay, $16, $i);
      $c=$call20;
      var $17=$c;
      $retval=$17;
      label = 56; break;
    case 21: 
      HEAP32[(($i23)>>2)]=0;
      label = 22; break;
    case 22: 
      var $18=HEAP32[(($i23)>>2)];
      var $cmp25=(($18)|(0)) < 2;
      if ($cmp25) { label = 23; break; } else { label = 29; break; }
    case 23: 
      var $19=$p_addr;
      var $call27=_nextc($19);
      var $20=HEAP32[(($i23)>>2)];
      var $arrayidx28=(($buf22+($20<<2))|0);
      HEAP32[(($arrayidx28)>>2)]=$call27;
      var $21=HEAP32[(($i23)>>2)];
      var $arrayidx29=(($buf22+($21<<2))|0);
      var $22=HEAP32[(($arrayidx29)>>2)];
      var $cmp30=(($22)|(0))==-1;
      if ($cmp30) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 53; break;
    case 25: 
      var $23=HEAP32[(($i23)>>2)];
      var $arrayidx33=(($buf22+($23<<2))|0);
      var $24=HEAP32[(($arrayidx33)>>2)];
      var $conv=(($24) & 255);
      var $conv34=(($conv)&(255));
      var $call35=_isxdigit($conv34);
      var $tobool=(($call35)|(0))!=0;
      if ($tobool) { label = 27; break; } else { label = 26; break; }
    case 26: 
      var $25=$p_addr;
      var $26=HEAP32[(($i23)>>2)];
      var $arrayidx37=(($buf22+($26<<2))|0);
      var $27=HEAP32[(($arrayidx37)>>2)];
      _pushback($25, $27);
      label = 29; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $28=HEAP32[(($i23)>>2)];
      var $inc40=((($28)+(1))|0);
      HEAP32[(($i23)>>2)]=$inc40;
      label = 22; break;
    case 29: 
      var $arraydecay42=(($buf22)|0);
      var $29=HEAP32[(($i23)>>2)];
      var $call43=_scan_hex($arraydecay42, $29, $i23);
      $c=$call43;
      var $30=HEAP32[(($i23)>>2)];
      var $cmp44=(($30)|(0))==0;
      if ($cmp44) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $31=$p_addr;
      _yyerror($31, ((106944)|0));
      $retval=0;
      label = 56; break;
    case 31: 
      var $32=$c;
      $retval=$32;
      label = 56; break;
    case 32: 
      $retval=8;
      label = 56; break;
    case 33: 
      $retval=32;
      label = 56; break;
    case 34: 
      var $33=$p_addr;
      var $call51=_nextc($33);
      $c=$call51;
      var $cmp52=(($call51)|(0))!=45;
      if ($cmp52) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $34=$p_addr;
      _yyerror($34, ((106944)|0));
      var $35=$p_addr;
      var $36=$c;
      _pushback($35, $36);
      $retval=0;
      label = 56; break;
    case 36: 
      var $37=$p_addr;
      var $call56=_nextc($37);
      $c=$call56;
      var $cmp57=(($call56)|(0))==92;
      if ($cmp57) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $38=$p_addr;
      var $call60=_read_escape($38);
      var $or=$call60 | 128;
      $retval=$or;
      label = 56; break;
    case 38: 
      var $39=$c;
      var $cmp61=(($39)|(0))==-1;
      if ($cmp61) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 53; break;
    case 40: 
      var $40=$c;
      var $and=$40 & 255;
      var $or65=$and | 128;
      $retval=$or65;
      label = 56; break;
    case 41: 
      var $41=$p_addr;
      var $call67=_nextc($41);
      $c=$call67;
      var $cmp68=(($call67)|(0))!=45;
      if ($cmp68) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $42=$p_addr;
      _yyerror($42, ((106944)|0));
      var $43=$p_addr;
      var $44=$c;
      _pushback($43, $44);
      $retval=0;
      label = 56; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $45=$p_addr;
      var $call73=_nextc($45);
      $c=$call73;
      var $cmp74=(($call73)|(0))==92;
      if ($cmp74) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $46=$p_addr;
      var $call77=_read_escape($46);
      $c=$call77;
      label = 52; break;
    case 46: 
      var $47=$c;
      var $cmp79=(($47)|(0))==63;
      if ($cmp79) { label = 47; break; } else { label = 48; break; }
    case 47: 
      $retval=127;
      label = 56; break;
    case 48: 
      var $48=$c;
      var $cmp83=(($48)|(0))==-1;
      if ($cmp83) { label = 49; break; } else { label = 50; break; }
    case 49: 
      label = 53; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $49=$c;
      var $and89=$49 & 159;
      $retval=$and89;
      label = 56; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $50=$p_addr;
      _yyerror($50, ((106944)|0));
      $retval=0;
      label = 56; break;
    case 55: 
      var $51=$c;
      $retval=$51;
      label = 56; break;
    case 56: 
      var $52=$retval;
      STACKTOP = __stackBase__;
      return $52;
    default: assert(0, "bad label: " + label);
  }
}
function _tokadd($p, $c) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $c_addr;
      $p_addr=$p;
      $c_addr=$c;
      var $0=$p_addr;
      var $bidx=(($0+1108)|0);
      var $1=HEAP32[(($bidx)>>2)];
      var $cmp=(($1)|(0)) < 1024;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$c_addr;
      var $conv=(($2) & 255);
      var $3=$p_addr;
      var $bidx1=(($3+1108)|0);
      var $4=HEAP32[(($bidx1)>>2)];
      var $inc=((($4)+(1))|0);
      HEAP32[(($bidx1)>>2)]=$inc;
      var $5=$p_addr;
      var $buf=(($5+84)|0);
      var $arrayidx=(($buf+$4)|0);
      HEAP8[($arrayidx)]=$conv;
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _tok($p) {
  var label = 0;
  var $p_addr;
  $p_addr=$p;
  var $0=$p_addr;
  var $buf=(($0+84)|0);
  var $arraydecay=(($buf)|0);
  return $arraydecay;
}
function _toklen($p) {
  var label = 0;
  var $p_addr;
  $p_addr=$p;
  var $0=$p_addr;
  var $bidx=(($0+1108)|0);
  var $1=HEAP32[(($bidx)>>2)];
  return $1;
}
function _toklast($p) {
  var label = 0;
  var $p_addr;
  $p_addr=$p;
  var $0=$p_addr;
  var $bidx=(($0+1108)|0);
  var $1=HEAP32[(($bidx)>>2)];
  var $sub=((($1)-(1))|0);
  var $2=$p_addr;
  var $buf=(($2+84)|0);
  var $arrayidx=(($buf+$sub)|0);
  var $3=HEAP8[($arrayidx)];
  var $conv=(($3 << 24) >> 24);
  return $conv;
}
function _hash($str, $len) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $str_addr;
      var $len_addr;
      var $hval;
      $str_addr=$str;
      $len_addr=$len;
      var $0=$len_addr;
      $hval=$0;
      var $1=$hval;
      if ((($1)|(0))==2 | (($1)|(0))==1) {
        label = 4; break;
      }
      else {
      label = 3; break;
      }
    case 3: 
      var $2=$str_addr;
      var $arrayidx=(($2+2)|0);
      var $3=HEAP8[($arrayidx)];
      var $idxprom=(($3)&(255));
      var $arrayidx1=((80436+$idxprom)|0);
      var $4=HEAP8[($arrayidx1)];
      var $conv=(($4)&(255));
      var $5=$hval;
      var $add=((($5)+($conv))|0);
      $hval=$add;
      label = 4; break;
    case 4: 
      var $6=$str_addr;
      var $arrayidx2=(($6)|0);
      var $7=HEAP8[($arrayidx2)];
      var $idxprom3=(($7)&(255));
      var $arrayidx4=((80436+$idxprom3)|0);
      var $8=HEAP8[($arrayidx4)];
      var $conv5=(($8)&(255));
      var $9=$hval;
      var $add6=((($9)+($conv5))|0);
      $hval=$add6;
      label = 5; break;
    case 5: 
      var $10=$hval;
      var $11=$len_addr;
      var $sub=((($11)-(1))|0);
      var $12=$str_addr;
      var $arrayidx7=(($12+$sub)|0);
      var $13=HEAP8[($arrayidx7)];
      var $idxprom8=(($13)&(255));
      var $arrayidx9=((80436+$idxprom8)|0);
      var $14=HEAP8[($arrayidx9)];
      var $conv10=(($14)&(255));
      var $add11=((($10)+($conv10))|0);
      return $add11;
    default: assert(0, "bad label: " + label);
  }
}
function _scan_oct($start, $len, $retlen) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $start_addr;
      var $len_addr;
      var $retlen_addr;
      var $s;
      var $retval1;
      $start_addr=$start;
      $len_addr=$len;
      $retlen_addr=$retlen;
      var $0=$start_addr;
      $s=$0;
      $retval1=0;
      label = 3; break;
    case 3: 
      var $1=$len_addr;
      var $dec=((($1)-(1))|0);
      $len_addr=$dec;
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { var $6 = 0;label = 6; break; }
    case 4: 
      var $2=$s;
      var $3=HEAP32[(($2)>>2)];
      var $cmp=(($3)|(0)) >= 48;
      if ($cmp) { label = 5; break; } else { var $6 = 0;label = 6; break; }
    case 5: 
      var $4=$s;
      var $5=HEAP32[(($4)>>2)];
      var $cmp2=(($5)|(0)) <= 55;
      var $6 = $cmp2;label = 6; break;
    case 6: 
      var $6;
      if ($6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $7=$retval1;
      var $shl=$7 << 3;
      $retval1=$shl;
      var $8=$s;
      var $incdec_ptr=(($8+4)|0);
      $s=$incdec_ptr;
      var $9=HEAP32[(($8)>>2)];
      var $sub=((($9)-(48))|0);
      var $10=$retval1;
      var $or=$10 | $sub;
      $retval1=$or;
      label = 3; break;
    case 8: 
      var $11=$s;
      var $12=$start_addr;
      var $sub_ptr_lhs_cast=$11;
      var $sub_ptr_rhs_cast=$12;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|(0)))/(4))&-1);
      var $13=$retlen_addr;
      HEAP32[(($13)>>2)]=$sub_ptr_div;
      var $14=$retval1;
      return $14;
    default: assert(0, "bad label: " + label);
  }
}
function _cons_free_gen($p, $cons) {
  var label = 0;
  var $p_addr;
  var $cons_addr;
  $p_addr=$p;
  $cons_addr=$cons;
  var $0=$p_addr;
  var $cells=(($0+8)|0);
  var $1=HEAP32[(($cells)>>2)];
  var $2=$cons_addr;
  var $cdr=(($2+4)|0);
  HEAP32[(($cdr)>>2)]=$1;
  var $3=$cons_addr;
  var $4=$p_addr;
  var $cells1=(($4+8)|0);
  HEAP32[(($cells1)>>2)]=$3;
  return;
}
function _yystpcpy($yydest, $yysrc) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $yydest_addr;
      var $yysrc_addr;
      var $yyd;
      var $yys;
      $yydest_addr=$yydest;
      $yysrc_addr=$yysrc;
      var $0=$yydest_addr;
      $yyd=$0;
      var $1=$yysrc_addr;
      $yys=$1;
      label = 3; break;
    case 3: 
      var $2=$yys;
      var $incdec_ptr=(($2+1)|0);
      $yys=$incdec_ptr;
      var $3=HEAP8[($2)];
      var $4=$yyd;
      var $incdec_ptr1=(($4+1)|0);
      $yyd=$incdec_ptr1;
      HEAP8[($4)]=$3;
      var $conv=(($3 << 24) >> 24);
      var $cmp=(($conv)|(0))!=0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 3; break;
    case 5: 
      var $5=$yyd;
      var $add_ptr=((($5)-(1))|0);
      return $add_ptr;
    default: assert(0, "bad label: " + label);
  }
}
function _yystrlen($yystr) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $yystr_addr;
      var $yylen;
      $yystr_addr=$yystr;
      $yylen=0;
      label = 3; break;
    case 3: 
      var $0=$yylen;
      var $1=$yystr_addr;
      var $arrayidx=(($1+$0)|0);
      var $2=HEAP8[($arrayidx)];
      var $tobool=(($2 << 24) >> 24)!=0;
      if ($tobool) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $3=$yylen;
      var $inc=((($3)+(1))|0);
      $yylen=$inc;
      label = 3; break;
    case 6: 
      var $4=$yylen;
      return $4;
    default: assert(0, "bad label: " + label);
  }
}
function _local_var_p($p, $sym) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $sym_addr;
      var $l;
      var $n;
      $p_addr=$p;
      $sym_addr=$sym;
      var $0=$p_addr;
      var $locals=(($0+76)|0);
      var $1=HEAP32[(($locals)>>2)];
      $l=$1;
      label = 3; break;
    case 3: 
      var $2=$l;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $3=$l;
      var $car=(($3)|0);
      var $4=HEAP32[(($car)>>2)];
      $n=$4;
      label = 5; break;
    case 5: 
      var $5=$n;
      var $tobool2=(($5)|(0))!=0;
      if ($tobool2) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $6=$n;
      var $car4=(($6)|0);
      var $7=HEAP32[(($car4)>>2)];
      var $8=$7;
      var $conv=(($8) & 65535);
      var $conv5=(($conv << 16) >> 16);
      var $9=$sym_addr;
      var $conv6=(($9 << 16) >> 16);
      var $cmp=(($conv5)|(0))==(($conv6)|(0));
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=1;
      label = 11; break;
    case 8: 
      var $10=$n;
      var $cdr=(($10+4)|0);
      var $11=HEAP32[(($cdr)>>2)];
      $n=$11;
      label = 5; break;
    case 9: 
      var $12=$l;
      var $cdr8=(($12+4)|0);
      var $13=HEAP32[(($cdr8)>>2)];
      $l=$13;
      label = 3; break;
    case 10: 
      $retval=0;
      label = 11; break;
    case 11: 
      var $14=$retval;
      return $14;
    default: assert(0, "bad label: " + label);
  }
}
function _tokfix($p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      $p_addr=$p;
      var $0=$p_addr;
      var $bidx=(($0+1108)|0);
      var $1=HEAP32[(($bidx)>>2)];
      var $cmp=(($1)|(0)) >= 1024;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$p_addr;
      _yyerror($2, ((106976)|0));
      label = 4; break;
    case 4: 
      var $3=$p_addr;
      var $bidx1=(($3+1108)|0);
      var $4=HEAP32[(($bidx1)>>2)];
      var $5=$p_addr;
      var $buf=(($5+84)|0);
      var $arrayidx=(($buf+$4)|0);
      HEAP8[($arrayidx)]=0;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _arg_ambiguous($p) {
  var label = 0;
  var $p_addr;
  $p_addr=$p;
  var $0=$p_addr;
  _yywarning($0, ((107016)|0));
  return 1;
}
function _yyerror_i($p, $fmt, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 256)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $p_addr;
  var $fmt_addr;
  var $i_addr;
  var $buf=__stackBase__;
  $p_addr=$p;
  $fmt_addr=$fmt;
  $i_addr=$i;
  var $arraydecay=(($buf)|0);
  var $0=$fmt_addr;
  var $1=$i_addr;
  var $call=_snprintf($arraydecay, 256, $0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1,tempInt));
  var $2=$p_addr;
  var $arraydecay1=(($buf)|0);
  _yyerror($2, $arraydecay1);
  STACKTOP = __stackBase__;
  return;
}
function _yywarning_s($p, $fmt, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 256)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $p_addr;
  var $fmt_addr;
  var $s_addr;
  var $buf=__stackBase__;
  $p_addr=$p;
  $fmt_addr=$fmt;
  $s_addr=$s;
  var $arraydecay=(($buf)|0);
  var $0=$fmt_addr;
  var $1=$s_addr;
  var $call=_snprintf($arraydecay, 256, $0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1,tempInt));
  var $2=$p_addr;
  var $arraydecay1=(($buf)|0);
  _yywarning($2, $arraydecay1);
  STACKTOP = __stackBase__;
  return;
}
function _new_float($p, $s) {
  var label = 0;
  var $p_addr;
  var $s_addr;
  $p_addr=$p;
  $s_addr=$s;
  var $0=$p_addr;
  var $1=$p_addr;
  var $2=$s_addr;
  var $call=_parser_strdup($1, $2);
  var $3=$call;
  var $call1=_cons_gen($0, 51, $3);
  return $call1;
}
function _intern_gen($p, $s) {
  var label = 0;
  var $p_addr;
  var $s_addr;
  $p_addr=$p;
  $s_addr=$s;
  var $0=$p_addr;
  var $mrb=(($0)|0);
  var $1=HEAP32[(($mrb)>>2)];
  var $2=$s_addr;
  var $call=_mrb_intern249($1, $2);
  return $call;
}
function _new_back_ref($p, $n) {
  var label = 0;
  var $p_addr;
  var $n_addr;
  $p_addr=$p;
  $n_addr=$n;
  var $0=$p_addr;
  var $1=$n_addr;
  var $2=$1;
  var $call=_cons_gen($0, 46, $2);
  return $call;
}
function _new_nth_ref($p, $n) {
  var label = 0;
  var $p_addr;
  var $n_addr;
  $p_addr=$p;
  $n_addr=$n;
  var $0=$p_addr;
  var $1=$n_addr;
  var $2=$1;
  var $call=_cons_gen($0, 45, $2);
  return $call;
}
function _peek_n($p, $c, $n) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      var $c_addr;
      var $n_addr;
      var $list;
      var $c0;
      $p_addr=$p;
      $c_addr=$c;
      $n_addr=$n;
      $list=0;
      label = 3; break;
    case 3: 
      var $0=$p_addr;
      var $call=_nextc($0);
      $c0=$call;
      var $1=$c0;
      var $cmp=(($1)|(0)) < 0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $retval=0;
      label = 13; break;
    case 5: 
      var $2=$p_addr;
      var $3=$list;
      var $4=$p_addr;
      var $5=$c0;
      var $6=$5;
      var $call1=_list1_gen($4, $6);
      var $call2=_append_gen($2, $3, $call1);
      $list=$call2;
      label = 6; break;
    case 6: 
      var $7=$n_addr;
      var $dec=((($7)-(1))|0);
      $n_addr=$dec;
      var $tobool=(($7)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 7: 
      var $8=$p_addr;
      var $pb=(($8+80)|0);
      var $9=HEAP32[(($pb)>>2)];
      var $tobool3=(($9)|(0))!=0;
      if ($tobool3) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $10=$p_addr;
      var $11=$p_addr;
      var $pb5=(($11+80)|0);
      var $12=HEAP32[(($pb5)>>2)];
      var $13=$p_addr;
      var $14=$list;
      var $call6=_list1_gen($13, $14);
      var $call7=_append_gen($10, $12, $call6);
      var $15=$p_addr;
      var $pb8=(($15+80)|0);
      HEAP32[(($pb8)>>2)]=$call7;
      label = 10; break;
    case 9: 
      var $16=$list;
      var $17=$p_addr;
      var $pb9=(($17+80)|0);
      HEAP32[(($pb9)>>2)]=$16;
      label = 10; break;
    case 10: 
      var $18=$c0;
      var $19=$c_addr;
      var $cmp11=(($18)|(0))==(($19)|(0));
      if ($cmp11) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $retval=1;
      label = 13; break;
    case 12: 
      $retval=0;
      label = 13; break;
    case 13: 
      var $20=$retval;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
function _reserved_word($str, $len) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $str_addr;
      var $len_addr;
      var $key;
      var $s;
      $str_addr=$str;
      $len_addr=$len;
      var $0=$len_addr;
      var $cmp=(($0)>>>(0)) <= 12;
      if ($cmp) { label = 3; break; } else { label = 11; break; }
    case 3: 
      var $1=$len_addr;
      var $cmp1=(($1)>>>(0)) >= 2;
      if ($cmp1) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $2=$str_addr;
      var $3=$len_addr;
      var $call=_hash($2, $3);
      $key=$call;
      var $4=$key;
      var $cmp2=(($4)|(0)) <= 50;
      if ($cmp2) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $5=$key;
      var $cmp4=(($5)|(0)) >= 0;
      if ($cmp4) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $6=$key;
      var $arrayidx=((59052+($6<<4))|0);
      var $name=(($arrayidx)|0);
      var $7=HEAP32[(($name)>>2)];
      $s=$7;
      var $8=$str_addr;
      var $9=HEAP8[($8)];
      var $conv=(($9 << 24) >> 24);
      var $10=$s;
      var $11=HEAP8[($10)];
      var $conv6=(($11 << 24) >> 24);
      var $cmp7=(($conv)|(0))==(($conv6)|(0));
      if ($cmp7) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $12=$str_addr;
      var $add_ptr=(($12+1)|0);
      var $13=$s;
      var $add_ptr10=(($13+1)|0);
      var $call11=_strcmp($add_ptr, $add_ptr10);
      var $tobool=(($call11)|(0))!=0;
      if ($tobool) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $14=$key;
      var $arrayidx13=((59052+($14<<4))|0);
      $retval=$arrayidx13;
      label = 12; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      $retval=0;
      label = 12; break;
    case 12: 
      var $15=$retval;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern249($mrb, $cstr) {
  var label = 0;
  var $mrb_addr;
  var $cstr_addr;
  $mrb_addr=$mrb;
  $cstr_addr=$cstr;
  var $0=$mrb_addr;
  var $1=$cstr_addr;
  var $call=_mrb_intern_cstr($0, $1);
  return $call;
}
function _parser_strdup($p, $s) {
  var label = 0;
  var $p_addr;
  var $s_addr;
  $p_addr=$p;
  $s_addr=$s;
  var $0=$p_addr;
  var $1=$s_addr;
  var $2=$s_addr;
  var $call=_strlen($2);
  var $call1=_parser_strndup($0, $1, $call);
  return $call1;
}
function _parser_strndup($p, $s, $len) {
  var label = 0;
  var $p_addr;
  var $s_addr;
  var $len_addr;
  var $b;
  $p_addr=$p;
  $s_addr=$s;
  $len_addr=$len;
  var $0=$p_addr;
  var $1=$len_addr;
  var $add=((($1)+(1))|0);
  var $call=_parser_palloc($0, $add);
  $b=$call;
  var $2=$b;
  var $3=$s_addr;
  var $4=$len_addr;
  assert($4 % 1 === 0);_memcpy($2, $3, $4);
  var $5=$len_addr;
  var $6=$b;
  var $arrayidx=(($6+$5)|0);
  HEAP8[($arrayidx)]=0;
  var $7=$b;
  return $7;
}
function _scan_hex($start, $len, $retlen) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $start_addr;
      var $len_addr;
      var $retlen_addr;
      var $s;
      var $retval1;
      var $tmp;
      $start_addr=$start;
      $len_addr=$len;
      $retlen_addr=$retlen;
      var $0=$start_addr;
      $s=$0;
      $retval1=0;
      label = 3; break;
    case 3: 
      var $1=$len_addr;
      var $dec=((($1)-(1))|0);
      $len_addr=$dec;
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { var $6 = 0;label = 6; break; }
    case 4: 
      var $2=$s;
      var $3=HEAP32[(($2)>>2)];
      var $tobool2=(($3)|(0))!=0;
      if ($tobool2) { label = 5; break; } else { var $6 = 0;label = 6; break; }
    case 5: 
      var $4=$s;
      var $5=HEAP32[(($4)>>2)];
      var $call=_strchr(((59016)|0), $5);
      $tmp=$call;
      var $tobool3=(($call)|(0))!=0;
      var $6 = $tobool3;label = 6; break;
    case 6: 
      var $6;
      if ($6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $7=$retval1;
      var $shl=$7 << 4;
      $retval1=$shl;
      var $8=$tmp;
      var $sub_ptr_lhs_cast=$8;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-(59016))|0);
      var $and=$sub_ptr_sub & 15;
      var $9=$retval1;
      var $or=$9 | $and;
      $retval1=$or;
      var $10=$s;
      var $incdec_ptr=(($10+4)|0);
      $s=$incdec_ptr;
      label = 3; break;
    case 8: 
      var $11=$s;
      var $12=$start_addr;
      var $sub_ptr_lhs_cast4=$11;
      var $sub_ptr_rhs_cast=$12;
      var $sub_ptr_sub5=((($sub_ptr_lhs_cast4)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub5)|(0)))/(4))&-1);
      var $13=$retlen_addr;
      HEAP32[(($13)>>2)]=$sub_ptr_div;
      var $14=$retval1;
      return $14;
    default: assert(0, "bad label: " + label);
  }
}
function _new_heredoc($p) {
  var label = 0;
  var $p_addr;
  var $inf;
  $p_addr=$p;
  var $0=$p_addr;
  var $call=_parser_palloc($0, 20);
  var $1=$call;
  $inf=$1;
  var $2=$p_addr;
  var $3=$inf;
  var $4=$3;
  var $call1=_cons_gen($2, 99, $4);
  return $call1;
}
function _end_strterm($p) {
  var label = 0;
  var $p_addr;
  $p_addr=$p;
  var $0=$p_addr;
  var $1=$p_addr;
  var $lex_strterm=(($1+44)|0);
  var $2=HEAP32[(($lex_strterm)>>2)];
  var $cdr=(($2+4)|0);
  var $3=HEAP32[(($cdr)>>2)];
  var $cdr1=(($3+4)|0);
  var $4=HEAP32[(($cdr1)>>2)];
  _cons_free_gen($0, $4);
  var $5=$p_addr;
  var $6=$p_addr;
  var $lex_strterm2=(($6+44)|0);
  var $7=HEAP32[(($lex_strterm2)>>2)];
  var $cdr3=(($7+4)|0);
  var $8=HEAP32[(($cdr3)>>2)];
  _cons_free_gen($5, $8);
  var $9=$p_addr;
  var $10=$p_addr;
  var $lex_strterm4=(($10+44)|0);
  var $11=HEAP32[(($lex_strterm4)>>2)];
  _cons_free_gen($9, $11);
  var $12=$p_addr;
  var $lex_strterm5=(($12+44)|0);
  HEAP32[(($lex_strterm5)>>2)]=0;
  return;
}
function _new_xstr($p, $s, $len) {
  var label = 0;
  var $p_addr;
  var $s_addr;
  var $len_addr;
  $p_addr=$p;
  $s_addr=$s;
  $len_addr=$len;
  var $0=$p_addr;
  var $1=$p_addr;
  var $2=$p_addr;
  var $3=$s_addr;
  var $4=$len_addr;
  var $call=_parser_strndup($2, $3, $4);
  var $5=$call;
  var $6=$len_addr;
  var $7=$6;
  var $call1=_cons_gen($1, $5, $7);
  var $call2=_cons_gen($0, 57, $call1);
  return $call2;
}
function _new_regx($p, $p1, $p2) {
  var label = 0;
  var $p_addr;
  var $p1_addr;
  var $p2_addr;
  $p_addr=$p;
  $p1_addr=$p1;
  $p2_addr=$p2;
  var $0=$p_addr;
  var $1=$p_addr;
  var $2=$p1_addr;
  var $3=$2;
  var $4=$p2_addr;
  var $5=$4;
  var $call=_cons_gen($1, $3, $5);
  var $call1=_cons_gen($0, 59, $call);
  return $call1;
}
function _yytnamerr($yyres, $yystr) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $yyres_addr;
      var $yystr_addr;
      var $yyn;
      var $yyp;
      $yyres_addr=$yyres;
      $yystr_addr=$yystr;
      var $0=$yystr_addr;
      var $1=HEAP8[($0)];
      var $conv=(($1 << 24) >> 24);
      var $cmp=(($conv)|(0))==34;
      if ($cmp) { label = 3; break; } else { label = 17; break; }
    case 3: 
      $yyn=0;
      var $2=$yystr_addr;
      $yyp=$2;
      label = 4; break;
    case 4: 
      var $3=$yyp;
      var $incdec_ptr=(($3+1)|0);
      $yyp=$incdec_ptr;
      var $4=HEAP8[($incdec_ptr)];
      var $conv2=(($4 << 24) >> 24);
      if ((($conv2)|(0))==39 | (($conv2)|(0))==44) {
        label = 5; break;
      }
      else if ((($conv2)|(0))==92) {
        label = 6; break;
      }
      else if ((($conv2)|(0))==34) {
        label = 12; break;
      }
      else {
      label = 9; break;
      }
    case 5: 
      label = 16; break;
    case 6: 
      var $5=$yyp;
      var $incdec_ptr4=(($5+1)|0);
      $yyp=$incdec_ptr4;
      var $6=HEAP8[($incdec_ptr4)];
      var $conv5=(($6 << 24) >> 24);
      var $cmp6=(($conv5)|(0))!=92;
      if ($cmp6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 16; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $7=$yyres_addr;
      var $tobool=(($7)|(0))!=0;
      if ($tobool) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $8=$yyp;
      var $9=HEAP8[($8)];
      var $10=$yyn;
      var $11=$yyres_addr;
      var $arrayidx=(($11+$10)|0);
      HEAP8[($arrayidx)]=$9;
      label = 11; break;
    case 11: 
      var $12=$yyn;
      var $inc=((($12)+(1))|0);
      $yyn=$inc;
      label = 15; break;
    case 12: 
      var $13=$yyres_addr;
      var $tobool12=(($13)|(0))!=0;
      if ($tobool12) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $14=$yyn;
      var $15=$yyres_addr;
      var $arrayidx14=(($15+$14)|0);
      HEAP8[($arrayidx14)]=0;
      label = 14; break;
    case 14: 
      var $16=$yyn;
      $retval=$16;
      label = 20; break;
    case 15: 
      label = 4; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $17=$yyres_addr;
      var $tobool17=(($17)|(0))!=0;
      if ($tobool17) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $18=$yystr_addr;
      var $call=_yystrlen($18);
      $retval=$call;
      label = 20; break;
    case 19: 
      var $19=$yyres_addr;
      var $20=$yystr_addr;
      var $call20=_yystpcpy($19, $20);
      var $21=$yyres_addr;
      var $sub_ptr_lhs_cast=$call20;
      var $sub_ptr_rhs_cast=$21;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $retval=$sub_ptr_sub;
      label = 20; break;
    case 20: 
      var $22=$retval;
      return $22;
    default: assert(0, "bad label: " + label);
  }
}
function _parser_palloc($p, $size) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $size_addr;
      var $m;
      $p_addr=$p;
      $size_addr=$size;
      var $0=$p_addr;
      var $pool=(($0+4)|0);
      var $1=HEAP32[(($pool)>>2)];
      var $2=$size_addr;
      var $call=_mrb_pool_alloc($1, $2);
      $m=$call;
      var $3=$m;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$p_addr;
      var $jmp=(($4+1384)|0);
      var $arraydecay=(($jmp)|0);
      _longjmp($arraydecay, 1);
      throw "Reached an unreachable!";
    case 4: 
      var $5=$m;
      return $5;
    default: assert(0, "bad label: " + label);
  }
}
function _yy_symbol_value_print($yyoutput, $yytype, $yyvaluep, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $yyoutput_addr;
      var $yytype_addr;
      var $yyvaluep_addr;
      var $p_addr;
      $yyoutput_addr=$yyoutput;
      $yytype_addr=$yytype;
      $yyvaluep_addr=$yyvaluep;
      $p_addr=$p;
      var $0=$yyvaluep_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 6; break;
    case 4: 
      var $1=$p_addr;
      var $2=$yyoutput_addr;
      var $3=$yytype_addr;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _list6_gen($p, $a, $b, $c, $d, $e, $f) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  var $d_addr;
  var $e_addr;
  var $f_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  $d_addr=$d;
  $e_addr=$e;
  $f_addr=$f;
  var $0=$p_addr;
  var $1=$a_addr;
  var $2=$p_addr;
  var $3=$b_addr;
  var $4=$p_addr;
  var $5=$c_addr;
  var $6=$p_addr;
  var $7=$d_addr;
  var $8=$p_addr;
  var $9=$e_addr;
  var $10=$p_addr;
  var $11=$f_addr;
  var $call=_cons_gen($10, $11, 0);
  var $call1=_cons_gen($8, $9, $call);
  var $call2=_cons_gen($6, $7, $call1);
  var $call3=_cons_gen($4, $5, $call2);
  var $call4=_cons_gen($2, $3, $call3);
  var $call5=_cons_gen($0, $1, $call4);
  return $call5;
}
function _list5_gen($p, $a, $b, $c, $d, $e) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  var $d_addr;
  var $e_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  $d_addr=$d;
  $e_addr=$e;
  var $0=$p_addr;
  var $1=$a_addr;
  var $2=$p_addr;
  var $3=$b_addr;
  var $4=$p_addr;
  var $5=$c_addr;
  var $6=$p_addr;
  var $7=$d_addr;
  var $8=$p_addr;
  var $9=$e_addr;
  var $call=_cons_gen($8, $9, 0);
  var $call1=_cons_gen($6, $7, $call);
  var $call2=_cons_gen($4, $5, $call1);
  var $call3=_cons_gen($2, $3, $call2);
  var $call4=_cons_gen($0, $1, $call3);
  return $call4;
}
function _list4_gen($p, $a, $b, $c, $d) {
  var label = 0;
  var $p_addr;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  var $d_addr;
  $p_addr=$p;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  $d_addr=$d;
  var $0=$p_addr;
  var $1=$a_addr;
  var $2=$p_addr;
  var $3=$b_addr;
  var $4=$p_addr;
  var $5=$c_addr;
  var $6=$p_addr;
  var $7=$d_addr;
  var $call=_cons_gen($6, $7, 0);
  var $call1=_cons_gen($4, $5, $call);
  var $call2=_cons_gen($2, $3, $call1);
  var $call3=_cons_gen($0, $1, $call2);
  return $call3;
}
function _local_add($p, $sym) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $sym_addr;
      $p_addr=$p;
      $sym_addr=$sym;
      var $0=$p_addr;
      var $1=$sym_addr;
      var $call=_local_var_p($0, $1);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$p_addr;
      var $3=$sym_addr;
      _local_add_f($2, $3);
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_new_capa($agg_result, $mrb, $capa) {
  var label = 0;
  var $mrb_addr;
  var $capa_addr;
  var $a;
  $mrb_addr=$mrb;
  $capa_addr=$capa;
  var $0=$mrb_addr;
  var $1=$capa_addr;
  var $call=_ary_new_capa($0, $1);
  $a=$call;
  var $2=$a;
  var $3=$2;
  _mrb_obj_value625($agg_result, $3);
  return;
}
function _ary_new_capa($mrb, $capa) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $capa_addr;
      var $a;
      var $blen;
      $mrb_addr=$mrb;
      $capa_addr=$capa;
      var $0=$capa_addr;
      var $cmp=(($0)|(0)) > 357913941;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mrb_addr;
      var $2=$mrb_addr;
      var $call=_mrb_class_get($2, ((96436)|0));
      _mrb_raise($1, $call, ((98600)|0));
      label = 4; break;
    case 4: 
      var $3=$capa_addr;
      var $mul=((($3)*(12))&-1);
      $blen=$mul;
      var $4=$blen;
      var $5=$capa_addr;
      var $cmp1=(($4)|(0)) < (($5)|(0));
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$mrb_addr;
      var $7=$mrb_addr;
      var $call3=_mrb_class_get($7, ((96436)|0));
      _mrb_raise($6, $call3, ((98600)|0));
      label = 6; break;
    case 6: 
      var $8=$mrb_addr;
      var $9=$mrb_addr;
      var $array_class=(($9+64)|0);
      var $10=HEAP32[(($array_class)>>2)];
      var $call5=_mrb_obj_alloc($8, 14, $10);
      var $11=$call5;
      $a=$11;
      var $12=$mrb_addr;
      var $13=$blen;
      var $call6=_mrb_malloc($12, $13);
      var $14=$call6;
      var $15=$a;
      var $ptr=(($15+20)|0);
      HEAP32[(($ptr)>>2)]=$14;
      var $16=$capa_addr;
      var $17=$a;
      var $aux=(($17+16)|0);
      var $capa7=$aux;
      HEAP32[(($capa7)>>2)]=$16;
      var $18=$a;
      var $len=(($18+12)|0);
      HEAP32[(($len)>>2)]=0;
      var $19=$a;
      return $19;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value625($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_new($agg_result, $mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_ary_new_capa($agg_result, $0, 0);
  return;
}
function _mrb_assoc_new($agg_result, $mrb, $car, $cdr) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $car; $car = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($car)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($car)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($car)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $cdr; $cdr = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($cdr)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($cdr)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($cdr)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $arv=__stackBase__;
  $mrb_addr=$mrb;
  var $arrayidx=(($arv)|0);
  var $0=$arrayidx;
  var $1=$car;
  assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
  var $arrayidx1=(($arv+12)|0);
  var $2=$arrayidx1;
  var $3=$cdr;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  var $4=$mrb_addr;
  var $arraydecay=(($arv)|0);
  _mrb_ary_new_from_values($agg_result, $4, 2, $arraydecay);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_new_from_values($agg_result, $mrb, $size, $vals) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $size_addr;
  var $vals_addr;
  var $ary=__stackBase__;
  var $a;
  var $tmp=(__stackBase__)+(12);
  $mrb_addr=$mrb;
  $size_addr=$size;
  $vals_addr=$vals;
  var $0=$mrb_addr;
  var $1=$size_addr;
  _mrb_ary_new_capa($tmp, $0, $1);
  var $2=$ary;
  var $3=$tmp;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  var $value=(($ary)|0);
  var $p=$value;
  var $4=HEAP32[(($p)>>2)];
  var $5=$4;
  $a=$5;
  var $6=$a;
  var $ptr=(($6+20)|0);
  var $7=HEAP32[(($ptr)>>2)];
  var $8=$vals_addr;
  var $9=$size_addr;
  _array_copy($7, $8, $9);
  var $10=$size_addr;
  var $11=$a;
  var $len=(($11+12)|0);
  HEAP32[(($len)>>2)]=$10;
  var $12=$agg_result;
  var $13=$ary;
  assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_s_create($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $vals=__stackBase__;
  var $len=(__stackBase__)+(4);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((97612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$vals,HEAP32[(((tempInt)+(4))>>2)]=$len,tempInt));
  var $1=$mrb_addr;
  var $2=HEAP32[(($len)>>2)];
  var $3=HEAP32[(($vals)>>2)];
  _mrb_ary_new_from_values($agg_result, $1, $2, $3);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_concat($mrb, $self, $other) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $other; $other = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($other)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($other)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($other)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $a2;
  $mrb_addr=$mrb;
  var $value=(($other)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  $a2=$1;
  var $2=$mrb_addr;
  var $value1=(($self)|0);
  var $p2=$value1;
  var $3=HEAP32[(($p2)>>2)];
  var $4=$3;
  var $5=$a2;
  var $ptr=(($5+20)|0);
  var $6=HEAP32[(($ptr)>>2)];
  var $7=$a2;
  var $len=(($7+12)|0);
  var $8=HEAP32[(($len)>>2)];
  _ary_concat($2, $4, $6, $8);
  STACKTOP = __stackBase__;
  return;
}
function _ary_concat($mrb, $a, $ptr, $blen) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a_addr;
      var $ptr_addr;
      var $blen_addr;
      var $len;
      $mrb_addr=$mrb;
      $a_addr=$a;
      $ptr_addr=$ptr;
      $blen_addr=$blen;
      var $0=$a_addr;
      var $len1=(($0+12)|0);
      var $1=HEAP32[(($len1)>>2)];
      var $2=$blen_addr;
      var $add=((($1)+($2))|0);
      $len=$add;
      var $3=$mrb_addr;
      var $4=$a_addr;
      _ary_modify($3, $4);
      var $5=$a_addr;
      var $aux=(($5+16)|0);
      var $capa=$aux;
      var $6=HEAP32[(($capa)>>2)];
      var $7=$len;
      var $cmp=(($6)|(0)) < (($7)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$mrb_addr;
      var $9=$a_addr;
      var $10=$len;
      _ary_expand_capa($8, $9, $10);
      label = 4; break;
    case 4: 
      var $11=$a_addr;
      var $ptr2=(($11+20)|0);
      var $12=HEAP32[(($ptr2)>>2)];
      var $13=$a_addr;
      var $len3=(($13+12)|0);
      var $14=HEAP32[(($len3)>>2)];
      var $add_ptr=(($12+((($14)*(12))&-1))|0);
      var $15=$ptr_addr;
      var $16=$blen_addr;
      _array_copy($add_ptr, $15, $16);
      var $17=$mrb_addr;
      var $18=$a_addr;
      var $19=$18;
      _mrb_write_barrier($17, $19);
      var $20=$len;
      var $21=$a_addr;
      var $len4=(($21+12)|0);
      HEAP32[(($len4)>>2)]=$20;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_concat_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $ptr=__stackBase__;
  var $blen=(__stackBase__)+(4);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((110388)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ptr,HEAP32[(((tempInt)+(4))>>2)]=$blen,tempInt));
  var $1=$mrb_addr;
  var $value=(($self)|0);
  var $p=$value;
  var $2=HEAP32[(($p)>>2)];
  var $3=$2;
  var $4=HEAP32[(($ptr)>>2)];
  var $5=HEAP32[(($blen)>>2)];
  _ary_concat($1, $3, $4, $5);
  var $6=$agg_result;
  var $7=$self;
  assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_plus($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $a1;
  var $a2;
  var $ary=__stackBase__;
  var $ptr=(__stackBase__)+(12);
  var $blen=(__stackBase__)+(16);
  var $tmp=(__stackBase__)+(20);
  $mrb_addr=$mrb;
  var $value=(($self)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  $a1=$1;
  var $2=$mrb_addr;
  var $call=_mrb_get_args($2, ((110388)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ptr,HEAP32[(((tempInt)+(4))>>2)]=$blen,tempInt));
  var $3=$mrb_addr;
  var $4=$a1;
  var $len=(($4+12)|0);
  var $5=HEAP32[(($len)>>2)];
  var $6=HEAP32[(($blen)>>2)];
  var $add=((($5)+($6))|0);
  _mrb_ary_new_capa($tmp, $3, $add);
  var $7=$ary;
  var $8=$tmp;
  assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
  var $value1=(($ary)|0);
  var $p2=$value1;
  var $9=HEAP32[(($p2)>>2)];
  var $10=$9;
  $a2=$10;
  var $11=$a2;
  var $ptr3=(($11+20)|0);
  var $12=HEAP32[(($ptr3)>>2)];
  var $13=$a1;
  var $ptr4=(($13+20)|0);
  var $14=HEAP32[(($ptr4)>>2)];
  var $15=$a1;
  var $len5=(($15+12)|0);
  var $16=HEAP32[(($len5)>>2)];
  _array_copy($12, $14, $16);
  var $17=$a2;
  var $ptr6=(($17+20)|0);
  var $18=HEAP32[(($ptr6)>>2)];
  var $19=$a1;
  var $len7=(($19+12)|0);
  var $20=HEAP32[(($len7)>>2)];
  var $add_ptr=(($18+((($20)*(12))&-1))|0);
  var $21=HEAP32[(($ptr)>>2)];
  var $22=HEAP32[(($blen)>>2)];
  _array_copy($add_ptr, $21, $22);
  var $23=$a1;
  var $len8=(($23+12)|0);
  var $24=HEAP32[(($len8)>>2)];
  var $25=HEAP32[(($blen)>>2)];
  var $add9=((($24)+($25))|0);
  var $26=$a2;
  var $len10=(($26+12)|0);
  HEAP32[(($len10)>>2)]=$add9;
  var $27=$agg_result;
  var $28=$ary;
  assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _array_copy($dst, $src, $size) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dst_addr;
      var $src_addr;
      var $size_addr;
      var $i;
      $dst_addr=$dst;
      $src_addr=$src;
      $size_addr=$size;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$size_addr;
      var $cmp=(($0)>>>(0)) < (($1)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$i;
      var $3=$dst_addr;
      var $arrayidx=(($3+((($2)*(12))&-1))|0);
      var $4=$i;
      var $5=$src_addr;
      var $arrayidx1=(($5+((($4)*(12))&-1))|0);
      var $6=$arrayidx;
      var $7=$arrayidx1;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_cmp($agg_result, $mrb, $ary1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary1; $ary1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ary2=__stackBase__;
      var $a1;
      var $a2;
      var $r=(__stackBase__)+(12);
      var $i;
      var $len;
      var $cmp9;
      var $v=(__stackBase__)+(24);
      var $agg_tmp=(__stackBase__)+(36);
      var $tmp=(__stackBase__)+(48);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((106208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ary2,tempInt));
      var $tt=(($ary2+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==14;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value632($agg_result);
      label = 21; break;
    case 4: 
      var $value=(($ary1)|0);
      var $p=$value;
      var $2=HEAP32[(($p)>>2)];
      var $3=$2;
      $a1=$3;
      var $value1=(($ary2)|0);
      var $p2=$value1;
      var $4=HEAP32[(($p2)>>2)];
      var $5=$4;
      $a2=$5;
      var $6=$a1;
      var $len3=(($6+12)|0);
      var $7=HEAP32[(($len3)>>2)];
      var $8=$a2;
      var $len4=(($8+12)|0);
      var $9=HEAP32[(($len4)>>2)];
      var $cmp5=(($7)|(0))==(($9)|(0));
      if ($cmp5) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $10=$a1;
      var $ptr=(($10+20)|0);
      var $11=HEAP32[(($ptr)>>2)];
      var $12=$a2;
      var $ptr6=(($12+20)|0);
      var $13=HEAP32[(($ptr6)>>2)];
      var $cmp7=(($11)|(0))==(($13)|(0));
      if ($cmp7) { label = 6; break; } else { label = 7; break; }
    case 6: 
      _mrb_fixnum_value633($agg_result, 0);
      label = 21; break;
    case 7: 
      var $14=$mrb_addr;
      var $call10=_mrb_intern2($14, ((103220)|0), 3);
      $cmp9=$call10;
      var $value11=(($ary1)|0);
      var $p12=$value11;
      var $15=HEAP32[(($p12)>>2)];
      var $16=$15;
      var $len13=(($16+12)|0);
      var $17=HEAP32[(($len13)>>2)];
      $len=$17;
      var $18=$len;
      var $value14=(($ary2)|0);
      var $p15=$value14;
      var $19=HEAP32[(($p15)>>2)];
      var $20=$19;
      var $len16=(($20+12)|0);
      var $21=HEAP32[(($len16)>>2)];
      var $cmp17=(($18)|(0)) > (($21)|(0));
      if ($cmp17) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $value19=(($ary2)|0);
      var $p20=$value19;
      var $22=HEAP32[(($p20)>>2)];
      var $23=$22;
      var $len21=(($23+12)|0);
      var $24=HEAP32[(($len21)>>2)];
      $len=$24;
      label = 9; break;
    case 9: 
      $i=0;
      label = 10; break;
    case 10: 
      var $25=$i;
      var $26=$len;
      var $cmp23=(($25)|(0)) < (($26)|(0));
      if ($cmp23) { label = 11; break; } else { label = 16; break; }
    case 11: 
      var $27=$i;
      _ary_elt($v, $ary2, $27);
      var $28=$mrb_addr;
      var $29=$i;
      _ary_elt($agg_tmp, $ary1, $29);
      var $30=$cmp9;
      _mrb_funcall_argv($tmp, $28, $agg_tmp, $30, 1, $v);
      var $31=$r;
      var $32=$tmp;
      assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
      var $tt24=(($r+8)|0);
      var $33=HEAP32[(($tt24)>>2)];
      var $cmp25=(($33)|(0))!=3;
      if ($cmp25) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $value26=(($r)|0);
      var $i27=$value26;
      var $34=HEAP32[(($i27)>>2)];
      var $cmp28=(($34)|(0))!=0;
      if ($cmp28) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $35=$agg_result;
      var $36=$r;
      assert(12 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];HEAP32[((($35)+(8))>>2)]=HEAP32[((($36)+(8))>>2)];
      label = 21; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $37=$i;
      var $inc=((($37)+(1))|0);
      $i=$inc;
      label = 10; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $38=$a1;
      var $len32=(($38+12)|0);
      var $39=HEAP32[(($len32)>>2)];
      var $40=$a2;
      var $len33=(($40+12)|0);
      var $41=HEAP32[(($len33)>>2)];
      var $sub=((($39)-($41))|0);
      $len=$sub;
      var $42=$len;
      var $cmp34=(($42)|(0))==0;
      if ($cmp34) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $cond36 = 0;label = 20; break;
    case 19: 
      var $43=$len;
      var $cmp35=(($43)|(0)) > 0;
      var $cond=$cmp35 ? 1 : -1;
      var $cond36 = $cond;label = 20; break;
    case 20: 
      var $cond36;
      _mrb_fixnum_value633($agg_result, $cond36);
      label = 21; break;
    case 21: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value632($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value633($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _ary_elt($agg_result, $ary, $offset) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $offset_addr;
      $offset_addr=$offset;
      var $value=(($ary)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $len=(($1+12)|0);
      var $2=HEAP32[(($len)>>2)];
      var $cmp=(($2)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      _mrb_nil_value632($agg_result);
      label = 8; break;
    case 4: 
      var $3=$offset_addr;
      var $cmp1=(($3)|(0)) < 0;
      if ($cmp1) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $value2=(($ary)|0);
      var $p3=$value2;
      var $4=HEAP32[(($p3)>>2)];
      var $5=$4;
      var $len4=(($5+12)|0);
      var $6=HEAP32[(($len4)>>2)];
      var $7=$offset_addr;
      var $cmp5=(($6)|(0)) <= (($7)|(0));
      if ($cmp5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      _mrb_nil_value632($agg_result);
      label = 8; break;
    case 7: 
      var $8=$offset_addr;
      var $value8=(($ary)|0);
      var $p9=$value8;
      var $9=HEAP32[(($p9)>>2)];
      var $10=$9;
      var $ptr=(($10+20)|0);
      var $11=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($11+((($8)*(12))&-1))|0);
      var $12=$agg_result;
      var $13=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_replace($mrb, $self, $other) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $other; $other = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($other)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($other)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($other)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $a2;
  $mrb_addr=$mrb;
  var $value=(($other)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  $a2=$1;
  var $2=$mrb_addr;
  var $value1=(($self)|0);
  var $p2=$value1;
  var $3=HEAP32[(($p2)>>2)];
  var $4=$3;
  var $5=$a2;
  var $ptr=(($5+20)|0);
  var $6=HEAP32[(($ptr)>>2)];
  var $7=$a2;
  var $len=(($7+12)|0);
  var $8=HEAP32[(($len)>>2)];
  _ary_replace($2, $4, $6, $8);
  STACKTOP = __stackBase__;
  return;
}
function _ary_replace($mrb, $a, $argv, $len) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a_addr;
      var $argv_addr;
      var $len_addr;
      $mrb_addr=$mrb;
      $a_addr=$a;
      $argv_addr=$argv;
      $len_addr=$len;
      var $0=$mrb_addr;
      var $1=$a_addr;
      _ary_modify($0, $1);
      var $2=$a_addr;
      var $aux=(($2+16)|0);
      var $capa=$aux;
      var $3=HEAP32[(($capa)>>2)];
      var $4=$len_addr;
      var $cmp=(($3)|(0)) < (($4)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$mrb_addr;
      var $6=$a_addr;
      var $7=$len_addr;
      _ary_expand_capa($5, $6, $7);
      label = 4; break;
    case 4: 
      var $8=$a_addr;
      var $ptr=(($8+20)|0);
      var $9=HEAP32[(($ptr)>>2)];
      var $10=$argv_addr;
      var $11=$len_addr;
      _array_copy($9, $10, $11);
      var $12=$mrb_addr;
      var $13=$a_addr;
      var $14=$13;
      _mrb_write_barrier($12, $14);
      var $15=$len_addr;
      var $16=$a_addr;
      var $len1=(($16+12)|0);
      HEAP32[(($len1)>>2)]=$15;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_replace_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $other=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((100360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$other,tempInt));
  var $1=$mrb_addr;
  _mrb_ary_replace($1, $self, $other);
  var $2=$agg_result;
  var $3=$self;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_times($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a1;
      var $a2;
      var $ary=__stackBase__;
      var $ptr;
      var $times=(__stackBase__)+(12);
      var $tmp=(__stackBase__)+(16);
      $mrb_addr=$mrb;
      var $value=(($self)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $a1=$1;
      var $2=$mrb_addr;
      var $call=_mrb_get_args($2, ((97888)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$times,tempInt));
      var $3=HEAP32[(($times)>>2)];
      var $cmp=(($3)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call1=_mrb_class_get($5, ((96436)|0));
      _mrb_raise($4, $call1, ((95288)|0));
      label = 4; break;
    case 4: 
      var $6=HEAP32[(($times)>>2)];
      var $cmp2=(($6)|(0))==0;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$mrb_addr;
      _mrb_ary_new($agg_result, $7);
      label = 10; break;
    case 6: 
      var $8=$mrb_addr;
      var $9=$a1;
      var $len=(($9+12)|0);
      var $10=HEAP32[(($len)>>2)];
      var $11=HEAP32[(($times)>>2)];
      var $mul=Math.imul($10,$11);
      _mrb_ary_new_capa($tmp, $8, $mul);
      var $12=$ary;
      var $13=$tmp;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      var $value5=(($ary)|0);
      var $p6=$value5;
      var $14=HEAP32[(($p6)>>2)];
      var $15=$14;
      $a2=$15;
      var $16=$a2;
      var $ptr7=(($16+20)|0);
      var $17=HEAP32[(($ptr7)>>2)];
      $ptr=$17;
      label = 7; break;
    case 7: 
      var $18=HEAP32[(($times)>>2)];
      var $dec=((($18)-(1))|0);
      HEAP32[(($times)>>2)]=$dec;
      var $tobool=(($18)|(0))!=0;
      if ($tobool) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $19=$ptr;
      var $20=$a1;
      var $ptr8=(($20+20)|0);
      var $21=HEAP32[(($ptr8)>>2)];
      var $22=$a1;
      var $len9=(($22+12)|0);
      var $23=HEAP32[(($len9)>>2)];
      _array_copy($19, $21, $23);
      var $24=$a1;
      var $len10=(($24+12)|0);
      var $25=HEAP32[(($len10)>>2)];
      var $26=$ptr;
      var $add_ptr=(($26+((($25)*(12))&-1))|0);
      $ptr=$add_ptr;
      var $27=$a1;
      var $len11=(($27+12)|0);
      var $28=HEAP32[(($len11)>>2)];
      var $29=$a2;
      var $len12=(($29+12)|0);
      var $30=HEAP32[(($len12)>>2)];
      var $add=((($30)+($28))|0);
      HEAP32[(($len12)>>2)]=$add;
      label = 7; break;
    case 9: 
      var $31=$agg_result;
      var $32=$ary;
      assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_reverse_bang($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a;
      var $p1;
      var $p2;
      var $tmp=__stackBase__;
      $mrb_addr=$mrb;
      var $value=(($self)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $a=$1;
      var $2=$a;
      var $len=(($2+12)|0);
      var $3=HEAP32[(($len)>>2)];
      var $cmp=(($3)|(0)) > 1;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $4=$mrb_addr;
      var $5=$a;
      _ary_modify($4, $5);
      var $6=$a;
      var $ptr=(($6+20)|0);
      var $7=HEAP32[(($ptr)>>2)];
      $p1=$7;
      var $8=$a;
      var $ptr1=(($8+20)|0);
      var $9=HEAP32[(($ptr1)>>2)];
      var $10=$a;
      var $len2=(($10+12)|0);
      var $11=HEAP32[(($len2)>>2)];
      var $add_ptr=(($9+((($11)*(12))&-1))|0);
      var $add_ptr3=((($add_ptr)-(12))|0);
      $p2=$add_ptr3;
      label = 4; break;
    case 4: 
      var $12=$p1;
      var $13=$p2;
      var $cmp4=(($12)>>>(0)) < (($13)>>>(0));
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $14=$p1;
      var $15=$tmp;
      var $16=$14;
      assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
      var $17=$p1;
      var $incdec_ptr=(($17+12)|0);
      $p1=$incdec_ptr;
      var $18=$p2;
      var $19=$17;
      var $20=$18;
      assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
      var $21=$p2;
      var $incdec_ptr5=((($21)-(12))|0);
      $p2=$incdec_ptr5;
      var $22=$21;
      var $23=$tmp;
      assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
      label = 4; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $24=$agg_result;
      var $25=$self;
      assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _ary_modify($mrb, $a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a_addr;
      var $shared;
      var $ptr8;
      var $p;
      var $len9;
      $mrb_addr=$mrb;
      $a_addr=$a;
      var $0=$a_addr;
      var $1=$0;
      var $2=HEAP32[(($1)>>2)];
      var $3=$2 >>> 11;
      var $bf_clear=$3 & 2097151;
      var $and=$bf_clear & 256;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $4=$a_addr;
      var $aux=(($4+16)|0);
      var $shared1=$aux;
      var $5=HEAP32[(($shared1)>>2)];
      $shared=$5;
      var $6=$shared;
      var $refcnt=(($6)|0);
      var $7=HEAP32[(($refcnt)>>2)];
      var $cmp=(($7)|(0))==1;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $8=$a_addr;
      var $ptr=(($8+20)|0);
      var $9=HEAP32[(($ptr)>>2)];
      var $10=$shared;
      var $ptr2=(($10+4)|0);
      var $11=HEAP32[(($ptr2)>>2)];
      var $cmp3=(($9)|(0))==(($11)|(0));
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $12=$shared;
      var $ptr5=(($12+4)|0);
      var $13=HEAP32[(($ptr5)>>2)];
      var $14=$a_addr;
      var $ptr6=(($14+20)|0);
      HEAP32[(($ptr6)>>2)]=$13;
      var $15=$a_addr;
      var $len=(($15+12)|0);
      var $16=HEAP32[(($len)>>2)];
      var $17=$a_addr;
      var $aux7=(($17+16)|0);
      var $capa=$aux7;
      HEAP32[(($capa)>>2)]=$16;
      var $18=$mrb_addr;
      var $19=$shared;
      var $20=$19;
      _mrb_free($18, $20);
      label = 9; break;
    case 6: 
      var $21=$a_addr;
      var $ptr10=(($21+20)|0);
      var $22=HEAP32[(($ptr10)>>2)];
      $p=$22;
      var $23=$a_addr;
      var $len11=(($23+12)|0);
      var $24=HEAP32[(($len11)>>2)];
      var $mul=((($24)*(12))&-1);
      $len9=$mul;
      var $25=$mrb_addr;
      var $26=$len9;
      var $call=_mrb_malloc($25, $26);
      var $27=$call;
      $ptr8=$27;
      var $28=$p;
      var $tobool12=(($28)|(0))!=0;
      if ($tobool12) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $29=$ptr8;
      var $30=$p;
      var $31=$a_addr;
      var $len14=(($31+12)|0);
      var $32=HEAP32[(($len14)>>2)];
      _array_copy($29, $30, $32);
      label = 8; break;
    case 8: 
      var $33=$ptr8;
      var $34=$a_addr;
      var $ptr15=(($34+20)|0);
      HEAP32[(($ptr15)>>2)]=$33;
      var $35=$a_addr;
      var $len16=(($35+12)|0);
      var $36=HEAP32[(($len16)>>2)];
      var $37=$a_addr;
      var $aux17=(($37+16)|0);
      var $capa18=$aux17;
      HEAP32[(($capa18)>>2)]=$36;
      var $38=$mrb_addr;
      var $39=$shared;
      _mrb_ary_decref($38, $39);
      label = 9; break;
    case 9: 
      var $40=$a_addr;
      var $41=$40;
      var $42=HEAP32[(($41)>>2)];
      var $43=$42 >>> 11;
      var $bf_clear20=$43 & 2097151;
      var $and21=$bf_clear20 & -257;
      var $bf_value=$and21 & 2097151;
      var $44=$40;
      var $45=$bf_value & 2097151;
      var $46=$45 << 11;
      var $47=HEAP32[(($44)>>2)];
      var $48=$47 & 2047;
      var $49=$48 | $46;
      HEAP32[(($44)>>2)]=$49;
      label = 10; break;
    case 10: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_reverse($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a;
      var $b;
      var $ary=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      var $p1;
      var $p26;
      var $e;
      $mrb_addr=$mrb;
      var $value=(($self)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $a=$1;
      var $2=$mrb_addr;
      var $3=$a;
      var $len=(($3+12)|0);
      var $4=HEAP32[(($len)>>2)];
      _mrb_ary_new_capa($tmp, $2, $4);
      var $5=$ary;
      var $6=$tmp;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      var $value1=(($ary)|0);
      var $p2=$value1;
      var $7=HEAP32[(($p2)>>2)];
      var $8=$7;
      $b=$8;
      var $9=$a;
      var $len3=(($9+12)|0);
      var $10=HEAP32[(($len3)>>2)];
      var $cmp=(($10)|(0)) > 0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $11=$a;
      var $ptr=(($11+20)|0);
      var $12=HEAP32[(($ptr)>>2)];
      $p1=$12;
      var $13=$p1;
      var $14=$a;
      var $len8=(($14+12)|0);
      var $15=HEAP32[(($len8)>>2)];
      var $add_ptr=(($13+((($15)*(12))&-1))|0);
      $e=$add_ptr;
      var $16=$b;
      var $ptr9=(($16+20)|0);
      var $17=HEAP32[(($ptr9)>>2)];
      var $18=$a;
      var $len10=(($18+12)|0);
      var $19=HEAP32[(($len10)>>2)];
      var $add_ptr11=(($17+((($19)*(12))&-1))|0);
      var $add_ptr12=((($add_ptr11)-(12))|0);
      $p26=$add_ptr12;
      label = 4; break;
    case 4: 
      var $20=$p1;
      var $21=$e;
      var $cmp13=(($20)>>>(0)) < (($21)>>>(0));
      if ($cmp13) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $22=$p26;
      var $incdec_ptr=((($22)-(12))|0);
      $p26=$incdec_ptr;
      var $23=$p1;
      var $incdec_ptr14=(($23+12)|0);
      $p1=$incdec_ptr14;
      var $24=$22;
      var $25=$23;
      assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
      label = 4; break;
    case 6: 
      var $26=$a;
      var $len15=(($26+12)|0);
      var $27=HEAP32[(($len15)>>2)];
      var $28=$b;
      var $len16=(($28+12)|0);
      HEAP32[(($len16)>>2)]=$27;
      label = 7; break;
    case 7: 
      var $29=$agg_result;
      var $30=$ary;
      assert(12 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($29)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_push($mrb, $ary, $elem) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $elem; $elem = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($elem)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($elem)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($elem)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a;
      $mrb_addr=$mrb;
      var $value=(($ary)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $a=$1;
      var $2=$mrb_addr;
      var $3=$a;
      _ary_modify($2, $3);
      var $4=$a;
      var $len=(($4+12)|0);
      var $5=HEAP32[(($len)>>2)];
      var $6=$a;
      var $aux=(($6+16)|0);
      var $capa=$aux;
      var $7=HEAP32[(($capa)>>2)];
      var $cmp=(($5)|(0))==(($7)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$mrb_addr;
      var $9=$a;
      var $10=$a;
      var $len1=(($10+12)|0);
      var $11=HEAP32[(($len1)>>2)];
      var $add=((($11)+(1))|0);
      _ary_expand_capa($8, $9, $add);
      label = 4; break;
    case 4: 
      var $12=$a;
      var $len2=(($12+12)|0);
      var $13=HEAP32[(($len2)>>2)];
      var $inc=((($13)+(1))|0);
      HEAP32[(($len2)>>2)]=$inc;
      var $14=$a;
      var $ptr=(($14+20)|0);
      var $15=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($15+((($13)*(12))&-1))|0);
      var $16=$arrayidx;
      var $17=$elem;
      assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
      var $18=$mrb_addr;
      var $19=$a;
      var $20=$19;
      _mrb_write_barrier($18, $20);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _ary_expand_capa($mrb, $a, $len) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a_addr;
      var $len_addr;
      var $capa;
      var $expanded_ptr;
      $mrb_addr=$mrb;
      $a_addr=$a;
      $len_addr=$len;
      var $0=$a_addr;
      var $aux=(($0+16)|0);
      var $capa1=$aux;
      var $1=HEAP32[(($capa1)>>2)];
      $capa=$1;
      var $2=$len_addr;
      var $cmp=(($2)|(0)) > 357913941;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call=_mrb_class_get($4, ((96436)|0));
      _mrb_raise($3, $call, ((98600)|0));
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $5=$capa;
      var $6=$len_addr;
      var $cmp2=(($5)|(0)) < (($6)|(0));
      if ($cmp2) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $7=$capa;
      var $cmp3=(($7)|(0))==0;
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $capa=4;
      label = 9; break;
    case 8: 
      var $8=$capa;
      var $mul=($8<<1);
      $capa=$mul;
      label = 9; break;
    case 9: 
      label = 5; break;
    case 10: 
      var $9=$capa;
      var $cmp6=(($9)|(0)) > 357913941;
      if ($cmp6) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $capa=357913941;
      label = 12; break;
    case 12: 
      var $10=$capa;
      var $11=$a_addr;
      var $aux9=(($11+16)|0);
      var $capa10=$aux9;
      var $12=HEAP32[(($capa10)>>2)];
      var $cmp11=(($10)|(0)) > (($12)|(0));
      if ($cmp11) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $13=$mrb_addr;
      var $14=$a_addr;
      var $ptr=(($14+20)|0);
      var $15=HEAP32[(($ptr)>>2)];
      var $16=$15;
      var $17=$capa;
      var $mul13=((($17)*(12))&-1);
      var $call14=_mrb_realloc($13, $16, $mul13);
      var $18=$call14;
      $expanded_ptr=$18;
      var $19=$expanded_ptr;
      var $tobool=(($19)|(0))!=0;
      if ($tobool) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $20=$mrb_addr;
      var $21=$mrb_addr;
      var $call16=_mrb_class_get($21, ((98336)|0));
      _mrb_raise($20, $call16, ((98092)|0));
      label = 15; break;
    case 15: 
      var $22=$capa;
      var $23=$a_addr;
      var $aux18=(($23+16)|0);
      var $capa19=$aux18;
      HEAP32[(($capa19)>>2)]=$22;
      var $24=$expanded_ptr;
      var $25=$a_addr;
      var $ptr20=(($25+20)|0);
      HEAP32[(($ptr20)>>2)]=$24;
      label = 16; break;
    case 16: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_push_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argv=__stackBase__;
      var $len=(__stackBase__)+(4);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((97612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$len,tempInt));
      label = 3; break;
    case 3: 
      var $1=HEAP32[(($len)>>2)];
      var $dec=((($1)-(1))|0);
      HEAP32[(($len)>>2)]=$dec;
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$mrb_addr;
      var $3=HEAP32[(($argv)>>2)];
      var $incdec_ptr=(($3+12)|0);
      HEAP32[(($argv)>>2)]=$incdec_ptr;
      _mrb_ary_push($2, $self, $3);
      label = 3; break;
    case 5: 
      var $4=$agg_result;
      var $5=$self;
      assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_pop($agg_result, $mrb, $ary) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a;
      $mrb_addr=$mrb;
      var $value=(($ary)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $a=$1;
      var $2=$a;
      var $len=(($2+12)|0);
      var $3=HEAP32[(($len)>>2)];
      var $cmp=(($3)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      _mrb_nil_value632($agg_result);
      label = 5; break;
    case 4: 
      var $4=$a;
      var $len1=(($4+12)|0);
      var $5=HEAP32[(($len1)>>2)];
      var $dec=((($5)-(1))|0);
      HEAP32[(($len1)>>2)]=$dec;
      var $6=$a;
      var $ptr=(($6+20)|0);
      var $7=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($7+((($dec)*(12))&-1))|0);
      var $8=$agg_result;
      var $9=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_shift($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a;
      var $val=__stackBase__;
      var $ptr8;
      var $size;
      $mrb_addr=$mrb;
      var $value=(($self)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $a=$1;
      var $2=$a;
      var $len=(($2+12)|0);
      var $3=HEAP32[(($len)>>2)];
      var $cmp=(($3)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      _mrb_nil_value632($agg_result);
      label = 14; break;
    case 4: 
      var $4=$a;
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6 >>> 11;
      var $bf_clear=$7 & 2097151;
      var $and=$bf_clear & 256;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 7; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $8=$a;
      var $ptr=(($8+20)|0);
      var $9=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($9)|0);
      var $10=$val;
      var $11=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      var $12=$a;
      var $ptr2=(($12+20)|0);
      var $13=HEAP32[(($ptr2)>>2)];
      var $incdec_ptr=(($13+12)|0);
      HEAP32[(($ptr2)>>2)]=$incdec_ptr;
      var $14=$a;
      var $len3=(($14+12)|0);
      var $15=HEAP32[(($len3)>>2)];
      var $dec=((($15)-(1))|0);
      HEAP32[(($len3)>>2)]=$dec;
      var $16=$agg_result;
      var $17=$val;
      assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
      label = 14; break;
    case 7: 
      var $18=$a;
      var $len5=(($18+12)|0);
      var $19=HEAP32[(($len5)>>2)];
      var $cmp6=(($19)|(0)) > 10;
      if ($cmp6) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $20=$mrb_addr;
      var $21=$a;
      _ary_make_shared($20, $21);
      label = 6; break;
    case 9: 
      var $22=$a;
      var $ptr9=(($22+20)|0);
      var $23=HEAP32[(($ptr9)>>2)];
      $ptr8=$23;
      var $24=$a;
      var $len10=(($24+12)|0);
      var $25=HEAP32[(($len10)>>2)];
      $size=$25;
      var $26=$ptr8;
      var $27=$val;
      var $28=$26;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      label = 10; break;
    case 10: 
      var $29=$size;
      var $dec11=((($29)-(1))|0);
      $size=$dec11;
      var $tobool12=(($dec11)|(0))!=0;
      if ($tobool12) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $30=$ptr8;
      var $31=$ptr8;
      var $add_ptr=(($31+12)|0);
      var $32=$30;
      var $33=$add_ptr;
      assert(12 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];
      var $34=$ptr8;
      var $incdec_ptr13=(($34+12)|0);
      $ptr8=$incdec_ptr13;
      label = 10; break;
    case 12: 
      var $35=$a;
      var $len14=(($35+12)|0);
      var $36=HEAP32[(($len14)>>2)];
      var $dec15=((($36)-(1))|0);
      HEAP32[(($len14)>>2)]=$dec15;
      label = 13; break;
    case 13: 
      var $37=$agg_result;
      var $38=$val;
      assert(12 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];HEAP32[((($37)+(8))>>2)]=HEAP32[((($38)+(8))>>2)];
      label = 14; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _ary_make_shared($mrb, $a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a_addr;
      var $shared;
      $mrb_addr=$mrb;
      $a_addr=$a;
      var $0=$a_addr;
      var $1=$0;
      var $2=HEAP32[(($1)>>2)];
      var $3=$2 >>> 11;
      var $bf_clear=$3 & 2097151;
      var $and=$bf_clear & 256;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 3; break; }
    case 3: 
      var $4=$mrb_addr;
      var $call=_mrb_malloc($4, 12);
      var $5=$call;
      $shared=$5;
      var $6=$shared;
      var $refcnt=(($6)|0);
      HEAP32[(($refcnt)>>2)]=1;
      var $7=$a_addr;
      var $aux=(($7+16)|0);
      var $capa=$aux;
      var $8=HEAP32[(($capa)>>2)];
      var $9=$a_addr;
      var $len=(($9+12)|0);
      var $10=HEAP32[(($len)>>2)];
      var $cmp=(($8)|(0)) > (($10)|(0));
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $11=$mrb_addr;
      var $12=$a_addr;
      var $ptr=(($12+20)|0);
      var $13=HEAP32[(($ptr)>>2)];
      var $14=$13;
      var $15=$a_addr;
      var $len2=(($15+12)|0);
      var $16=HEAP32[(($len2)>>2)];
      var $mul=((($16)*(12))&-1);
      var $add=((($mul)+(1))|0);
      var $call3=_mrb_realloc($11, $14, $add);
      var $17=$call3;
      var $18=$shared;
      var $ptr4=(($18+4)|0);
      HEAP32[(($ptr4)>>2)]=$17;
      var $19=$a_addr;
      var $ptr5=(($19+20)|0);
      HEAP32[(($ptr5)>>2)]=$17;
      label = 6; break;
    case 5: 
      var $20=$a_addr;
      var $ptr6=(($20+20)|0);
      var $21=HEAP32[(($ptr6)>>2)];
      var $22=$shared;
      var $ptr7=(($22+4)|0);
      HEAP32[(($ptr7)>>2)]=$21;
      label = 6; break;
    case 6: 
      var $23=$a_addr;
      var $len8=(($23+12)|0);
      var $24=HEAP32[(($len8)>>2)];
      var $25=$shared;
      var $len9=(($25+8)|0);
      HEAP32[(($len9)>>2)]=$24;
      var $26=$shared;
      var $27=$a_addr;
      var $aux10=(($27+16)|0);
      var $shared11=$aux10;
      HEAP32[(($shared11)>>2)]=$26;
      var $28=$a_addr;
      var $29=$28;
      var $30=HEAP32[(($29)>>2)];
      var $31=$30 >>> 11;
      var $bf_clear12=$31 & 2097151;
      var $or=$bf_clear12 | 256;
      var $bf_value=$or & 2097151;
      var $32=$28;
      var $33=$bf_value & 2097151;
      var $34=$33 << 11;
      var $35=HEAP32[(($32)>>2)];
      var $36=$35 & 2047;
      var $37=$36 | $34;
      HEAP32[(($32)>>2)]=$37;
      label = 7; break;
    case 7: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_unshift($agg_result, $mrb, $self, $item) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $item; $item = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($item)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($item)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($item)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a;
      $mrb_addr=$mrb;
      var $value=(($self)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $a=$1;
      var $2=$a;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4 >>> 11;
      var $bf_clear=$5 & 2097151;
      var $and=$bf_clear & 256;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $6=$a;
      var $aux=(($6+16)|0);
      var $shared=$aux;
      var $7=HEAP32[(($shared)>>2)];
      var $refcnt=(($7)|0);
      var $8=HEAP32[(($refcnt)>>2)];
      var $cmp=(($8)|(0))==1;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $9=$a;
      var $ptr=(($9+20)|0);
      var $10=HEAP32[(($ptr)>>2)];
      var $11=$a;
      var $aux2=(($11+16)|0);
      var $shared3=$aux2;
      var $12=HEAP32[(($shared3)>>2)];
      var $ptr4=(($12+4)|0);
      var $13=HEAP32[(($ptr4)>>2)];
      var $sub_ptr_lhs_cast=$10;
      var $sub_ptr_rhs_cast=$13;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|(0)))/(12))&-1);
      var $cmp5=(($sub_ptr_div)|(0)) >= 1;
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $14=$a;
      var $ptr6=(($14+20)|0);
      var $15=HEAP32[(($ptr6)>>2)];
      var $incdec_ptr=((($15)-(12))|0);
      HEAP32[(($ptr6)>>2)]=$incdec_ptr;
      var $16=$a;
      var $ptr7=(($16+20)|0);
      var $17=HEAP32[(($ptr7)>>2)];
      var $arrayidx=(($17)|0);
      var $18=$arrayidx;
      var $19=$item;
      assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
      label = 9; break;
    case 6: 
      var $20=$mrb_addr;
      var $21=$a;
      _ary_modify($20, $21);
      var $22=$a;
      var $aux8=(($22+16)|0);
      var $capa=$aux8;
      var $23=HEAP32[(($capa)>>2)];
      var $24=$a;
      var $len=(($24+12)|0);
      var $25=HEAP32[(($len)>>2)];
      var $add=((($25)+(1))|0);
      var $cmp9=(($23)|(0)) < (($add)|(0));
      if ($cmp9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $26=$mrb_addr;
      var $27=$a;
      var $28=$a;
      var $len11=(($28+12)|0);
      var $29=HEAP32[(($len11)>>2)];
      var $add12=((($29)+(1))|0);
      _ary_expand_capa($26, $27, $add12);
      label = 8; break;
    case 8: 
      var $30=$a;
      var $ptr13=(($30+20)|0);
      var $31=HEAP32[(($ptr13)>>2)];
      var $add_ptr=(($31+12)|0);
      var $32=$a;
      var $ptr14=(($32+20)|0);
      var $33=HEAP32[(($ptr14)>>2)];
      var $34=$a;
      var $len15=(($34+12)|0);
      var $35=HEAP32[(($len15)>>2)];
      _value_move640($add_ptr, $33, $35);
      var $36=$a;
      var $ptr16=(($36+20)|0);
      var $37=HEAP32[(($ptr16)>>2)];
      var $arrayidx17=(($37)|0);
      var $38=$arrayidx17;
      var $39=$item;
      assert(12 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];HEAP32[((($38)+(8))>>2)]=HEAP32[((($39)+(8))>>2)];
      label = 9; break;
    case 9: 
      var $40=$a;
      var $len19=(($40+12)|0);
      var $41=HEAP32[(($len19)>>2)];
      var $inc=((($41)+(1))|0);
      HEAP32[(($len19)>>2)]=$inc;
      var $42=$mrb_addr;
      var $43=$a;
      var $44=$43;
      _mrb_write_barrier($42, $44);
      var $45=$agg_result;
      var $46=$self;
      assert(12 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];HEAP32[((($45)+(8))>>2)]=HEAP32[((($46)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _value_move640($s1, $s2, $n) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s1_addr;
      var $s2_addr;
      var $n_addr;
      $s1_addr=$s1;
      $s2_addr=$s2;
      $n_addr=$n;
      var $0=$s1_addr;
      var $1=$s2_addr;
      var $cmp=(($0)>>>(0)) > (($1)>>>(0));
      if ($cmp) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $2=$s1_addr;
      var $3=$s2_addr;
      var $4=$n_addr;
      var $add_ptr=(($3+((($4)*(12))&-1))|0);
      var $cmp1=(($2)>>>(0)) < (($add_ptr)>>>(0));
      if ($cmp1) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $5=$n_addr;
      var $6=$s1_addr;
      var $add_ptr2=(($6+((($5)*(12))&-1))|0);
      $s1_addr=$add_ptr2;
      var $7=$n_addr;
      var $8=$s2_addr;
      var $add_ptr3=(($8+((($7)*(12))&-1))|0);
      $s2_addr=$add_ptr3;
      label = 5; break;
    case 5: 
      var $9=$n_addr;
      var $dec=((($9)-(1))|0);
      $n_addr=$dec;
      var $cmp4=(($9)>>>(0)) > 0;
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $10=$s1_addr;
      var $incdec_ptr=((($10)-(12))|0);
      $s1_addr=$incdec_ptr;
      var $11=$s2_addr;
      var $incdec_ptr5=((($11)-(12))|0);
      $s2_addr=$incdec_ptr5;
      var $12=$incdec_ptr;
      var $13=$incdec_ptr5;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      label = 5; break;
    case 7: 
      label = 15; break;
    case 8: 
      var $14=$s1_addr;
      var $15=$s2_addr;
      var $cmp6=(($14)|(0))!=(($15)|(0));
      if ($cmp6) { label = 9; break; } else { label = 13; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $16=$n_addr;
      var $dec9=((($16)-(1))|0);
      $n_addr=$dec9;
      var $cmp10=(($16)>>>(0)) > 0;
      if ($cmp10) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $17=$s1_addr;
      var $incdec_ptr12=(($17+12)|0);
      $s1_addr=$incdec_ptr12;
      var $18=$s2_addr;
      var $incdec_ptr13=(($18+12)|0);
      $s2_addr=$incdec_ptr13;
      var $19=$17;
      var $20=$18;
      assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
      label = 10; break;
    case 12: 
      label = 14; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_unshift_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a;
      var $vals=__stackBase__;
      var $len=(__stackBase__)+(4);
      $mrb_addr=$mrb;
      var $value=(($self)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $a=$1;
      var $2=$mrb_addr;
      var $call=_mrb_get_args($2, ((97612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$vals,HEAP32[(((tempInt)+(4))>>2)]=$len,tempInt));
      var $3=$a;
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5 >>> 11;
      var $bf_clear=$6 & 2097151;
      var $and=$bf_clear & 256;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $7=$a;
      var $aux=(($7+16)|0);
      var $shared=$aux;
      var $8=HEAP32[(($shared)>>2)];
      var $refcnt=(($8)|0);
      var $9=HEAP32[(($refcnt)>>2)];
      var $cmp=(($9)|(0))==1;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $10=$a;
      var $ptr=(($10+20)|0);
      var $11=HEAP32[(($ptr)>>2)];
      var $12=$a;
      var $aux2=(($12+16)|0);
      var $shared3=$aux2;
      var $13=HEAP32[(($shared3)>>2)];
      var $ptr4=(($13+4)|0);
      var $14=HEAP32[(($ptr4)>>2)];
      var $sub_ptr_lhs_cast=$11;
      var $sub_ptr_rhs_cast=$14;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|(0)))/(12))&-1);
      var $15=HEAP32[(($len)>>2)];
      var $cmp5=(($sub_ptr_div)|(0)) >= (($15)|(0));
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=HEAP32[(($len)>>2)];
      var $17=$a;
      var $ptr6=(($17+20)|0);
      var $18=HEAP32[(($ptr6)>>2)];
      var $idx_neg=(((-$16))|0);
      var $add_ptr=(($18+((($idx_neg)*(12))&-1))|0);
      HEAP32[(($ptr6)>>2)]=$add_ptr;
      label = 11; break;
    case 6: 
      var $19=$mrb_addr;
      var $20=$a;
      _ary_modify($19, $20);
      var $21=HEAP32[(($len)>>2)];
      var $cmp7=(($21)|(0))==0;
      if ($cmp7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $22=$agg_result;
      var $23=$self;
      assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
      label = 12; break;
    case 8: 
      var $24=$a;
      var $aux9=(($24+16)|0);
      var $capa=$aux9;
      var $25=HEAP32[(($capa)>>2)];
      var $26=$a;
      var $len10=(($26+12)|0);
      var $27=HEAP32[(($len10)>>2)];
      var $28=HEAP32[(($len)>>2)];
      var $add=((($27)+($28))|0);
      var $cmp11=(($25)|(0)) < (($add)|(0));
      if ($cmp11) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $29=$mrb_addr;
      var $30=$a;
      var $31=$a;
      var $len13=(($31+12)|0);
      var $32=HEAP32[(($len13)>>2)];
      var $33=HEAP32[(($len)>>2)];
      var $add14=((($32)+($33))|0);
      _ary_expand_capa($29, $30, $add14);
      label = 10; break;
    case 10: 
      var $34=$a;
      var $ptr16=(($34+20)|0);
      var $35=HEAP32[(($ptr16)>>2)];
      var $36=HEAP32[(($len)>>2)];
      var $add_ptr17=(($35+((($36)*(12))&-1))|0);
      var $37=$a;
      var $ptr18=(($37+20)|0);
      var $38=HEAP32[(($ptr18)>>2)];
      var $39=$a;
      var $len19=(($39+12)|0);
      var $40=HEAP32[(($len19)>>2)];
      _value_move640($add_ptr17, $38, $40);
      label = 11; break;
    case 11: 
      var $41=$a;
      var $ptr21=(($41+20)|0);
      var $42=HEAP32[(($ptr21)>>2)];
      var $43=HEAP32[(($vals)>>2)];
      var $44=HEAP32[(($len)>>2)];
      _array_copy($42, $43, $44);
      var $45=HEAP32[(($len)>>2)];
      var $46=$a;
      var $len22=(($46+12)|0);
      var $47=HEAP32[(($len22)>>2)];
      var $add23=((($47)+($45))|0);
      HEAP32[(($len22)>>2)]=$add23;
      var $48=$mrb_addr;
      var $49=$a;
      var $50=$49;
      _mrb_write_barrier($48, $50);
      var $51=$agg_result;
      var $52=$self;
      assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($52)+(8))>>2)];
      label = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_ref($agg_result, $mrb, $ary, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $n_addr;
      var $a;
      $mrb_addr=$mrb;
      $n_addr=$n;
      var $value=(($ary)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $a=$1;
      var $2=$n_addr;
      var $cmp=(($2)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$a;
      var $len=(($3+12)|0);
      var $4=HEAP32[(($len)>>2)];
      var $5=$n_addr;
      var $add=((($5)+($4))|0);
      $n_addr=$add;
      label = 4; break;
    case 4: 
      var $6=$n_addr;
      var $cmp1=(($6)|(0)) < 0;
      if ($cmp1) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $7=$a;
      var $len2=(($7+12)|0);
      var $8=HEAP32[(($len2)>>2)];
      var $9=$n_addr;
      var $cmp3=(($8)|(0)) <= (($9)|(0));
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      _mrb_nil_value632($agg_result);
      label = 8; break;
    case 7: 
      var $10=$n_addr;
      var $11=$a;
      var $ptr=(($11+20)|0);
      var $12=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($12+((($10)*(12))&-1))|0);
      var $13=$agg_result;
      var $14=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_set($mrb, $ary, $n, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $n_addr;
      var $a;
      var $agg_tmp=__stackBase__;
      $mrb_addr=$mrb;
      $n_addr=$n;
      var $value=(($ary)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $a=$1;
      var $2=$mrb_addr;
      var $3=$a;
      _ary_modify($2, $3);
      var $4=$n_addr;
      var $cmp=(($4)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $5=$a;
      var $len=(($5+12)|0);
      var $6=HEAP32[(($len)>>2)];
      var $7=$n_addr;
      var $add=((($7)+($6))|0);
      $n_addr=$add;
      var $8=$n_addr;
      var $cmp1=(($8)|(0)) < 0;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $9=$mrb_addr;
      var $10=$mrb_addr;
      var $call=_mrb_class_get($10, ((94432)|0));
      var $11=$n_addr;
      var $12=$a;
      var $len3=(($12+12)|0);
      var $13=HEAP32[(($len3)>>2)];
      var $sub=((($11)-($13))|0);
      _mrb_fixnum_value633($agg_tmp, $sub);
      _mrb_raisef($9, $call, ((93532)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $14=$a;
      var $len5=(($14+12)|0);
      var $15=HEAP32[(($len5)>>2)];
      var $16=$n_addr;
      var $cmp6=(($15)|(0)) <= (($16)|(0));
      if ($cmp6) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $17=$a;
      var $aux=(($17+16)|0);
      var $capa=$aux;
      var $18=HEAP32[(($capa)>>2)];
      var $19=$n_addr;
      var $cmp8=(($18)|(0)) <= (($19)|(0));
      if ($cmp8) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $20=$mrb_addr;
      var $21=$a;
      var $22=$n_addr;
      var $add10=((($22)+(1))|0);
      _ary_expand_capa($20, $21, $add10);
      label = 9; break;
    case 9: 
      var $23=$a;
      var $ptr=(($23+20)|0);
      var $24=HEAP32[(($ptr)>>2)];
      var $25=$a;
      var $len12=(($25+12)|0);
      var $26=HEAP32[(($len12)>>2)];
      var $add_ptr=(($24+((($26)*(12))&-1))|0);
      var $27=$n_addr;
      var $add13=((($27)+(1))|0);
      var $28=$a;
      var $len14=(($28+12)|0);
      var $29=HEAP32[(($len14)>>2)];
      var $sub15=((($add13)-($29))|0);
      _ary_fill_with_nil($add_ptr, $sub15);
      var $30=$n_addr;
      var $add16=((($30)+(1))|0);
      var $31=$a;
      var $len17=(($31+12)|0);
      HEAP32[(($len17)>>2)]=$add16;
      label = 10; break;
    case 10: 
      var $32=$n_addr;
      var $33=$a;
      var $ptr19=(($33+20)|0);
      var $34=HEAP32[(($ptr19)>>2)];
      var $arrayidx=(($34+((($32)*(12))&-1))|0);
      var $35=$arrayidx;
      var $36=$val;
      assert(12 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];HEAP32[((($35)+(8))>>2)]=HEAP32[((($36)+(8))>>2)];
      var $37=$mrb_addr;
      var $38=$a;
      var $39=$38;
      _mrb_write_barrier($37, $39);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _ary_fill_with_nil($ptr, $size) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ptr_addr;
      var $size_addr;
      var $nil=__stackBase__;
      $ptr_addr=$ptr;
      $size_addr=$size;
      _mrb_nil_value632($nil);
      label = 3; break;
    case 3: 
      var $0=$size_addr;
      var $dec=((($0)-(1))|0);
      $size_addr=$dec;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $1=$ptr_addr;
      var $incdec_ptr=(($1+12)|0);
      $ptr_addr=$incdec_ptr;
      var $2=$1;
      var $3=$nil;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      label = 3; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_splice($agg_result, $mrb, $ary, $head, $len, $rpl) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $rpl; $rpl = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($rpl)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($rpl)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($rpl)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $head_addr;
      var $len_addr;
      var $a;
      var $tail;
      var $size;
      var $argv;
      var $i;
      var $argc;
      $mrb_addr=$mrb;
      $head_addr=$head;
      $len_addr=$len;
      var $value=(($ary)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $a=$1;
      var $2=$mrb_addr;
      var $3=$a;
      _ary_modify($2, $3);
      var $4=$head_addr;
      var $cmp=(($4)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $5=$a;
      var $len1=(($5+12)|0);
      var $6=HEAP32[(($len1)>>2)];
      var $7=$head_addr;
      var $add=((($7)+($6))|0);
      $head_addr=$add;
      var $8=$head_addr;
      var $cmp2=(($8)|(0)) < 0;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $9=$mrb_addr;
      var $10=$mrb_addr;
      var $call=_mrb_class_get($10, ((94432)|0));
      _mrb_raise($9, $call, ((113436)|0));
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $11=$a;
      var $len5=(($11+12)|0);
      var $12=HEAP32[(($len5)>>2)];
      var $13=$len_addr;
      var $cmp6=(($12)|(0)) < (($13)|(0));
      if ($cmp6) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $14=$a;
      var $len7=(($14+12)|0);
      var $15=HEAP32[(($len7)>>2)];
      var $16=$head_addr;
      var $17=$len_addr;
      var $add8=((($16)+($17))|0);
      var $cmp9=(($15)|(0)) < (($add8)|(0));
      if ($cmp9) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $18=$a;
      var $len11=(($18+12)|0);
      var $19=HEAP32[(($len11)>>2)];
      var $20=$head_addr;
      var $sub=((($19)-($20))|0);
      $len_addr=$sub;
      label = 9; break;
    case 9: 
      var $21=$head_addr;
      var $22=$len_addr;
      var $add13=((($21)+($22))|0);
      $tail=$add13;
      var $tt=(($rpl+8)|0);
      var $23=HEAP32[(($tt)>>2)];
      var $cmp14=(($23)|(0))==14;
      if ($cmp14) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $value16=(($rpl)|0);
      var $p17=$value16;
      var $24=HEAP32[(($p17)>>2)];
      var $25=$24;
      var $len18=(($25+12)|0);
      var $26=HEAP32[(($len18)>>2)];
      $argc=$26;
      var $value19=(($rpl)|0);
      var $p20=$value19;
      var $27=HEAP32[(($p20)>>2)];
      var $28=$27;
      var $ptr=(($28+20)|0);
      var $29=HEAP32[(($ptr)>>2)];
      $argv=$29;
      label = 12; break;
    case 11: 
      $argc=1;
      $argv=$rpl;
      label = 12; break;
    case 12: 
      var $30=$head_addr;
      var $31=$argc;
      var $add22=((($30)+($31))|0);
      $size=$add22;
      var $32=$tail;
      var $33=$a;
      var $len23=(($33+12)|0);
      var $34=HEAP32[(($len23)>>2)];
      var $cmp24=(($32)|(0)) < (($34)|(0));
      if ($cmp24) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $35=$a;
      var $len26=(($35+12)|0);
      var $36=HEAP32[(($len26)>>2)];
      var $37=$tail;
      var $sub27=((($36)-($37))|0);
      var $38=$size;
      var $add28=((($38)+($sub27))|0);
      $size=$add28;
      label = 14; break;
    case 14: 
      var $39=$size;
      var $40=$a;
      var $aux=(($40+16)|0);
      var $capa=$aux;
      var $41=HEAP32[(($capa)>>2)];
      var $cmp30=(($39)|(0)) > (($41)|(0));
      if ($cmp30) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $42=$mrb_addr;
      var $43=$a;
      var $44=$size;
      _ary_expand_capa($42, $43, $44);
      label = 16; break;
    case 16: 
      var $45=$head_addr;
      var $46=$a;
      var $len33=(($46+12)|0);
      var $47=HEAP32[(($len33)>>2)];
      var $cmp34=(($45)|(0)) > (($47)|(0));
      if ($cmp34) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $48=$a;
      var $ptr36=(($48+20)|0);
      var $49=HEAP32[(($ptr36)>>2)];
      var $50=$a;
      var $len37=(($50+12)|0);
      var $51=HEAP32[(($len37)>>2)];
      var $add_ptr=(($49+((($51)*(12))&-1))|0);
      var $52=$head_addr;
      var $53=$a;
      var $len38=(($53+12)|0);
      var $54=HEAP32[(($len38)>>2)];
      var $sub39=((($52)-($54))|0);
      _ary_fill_with_nil($add_ptr, $sub39);
      label = 21; break;
    case 18: 
      var $55=$head_addr;
      var $56=$a;
      var $len41=(($56+12)|0);
      var $57=HEAP32[(($len41)>>2)];
      var $cmp42=(($55)|(0)) < (($57)|(0));
      if ($cmp42) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $58=$a;
      var $ptr44=(($58+20)|0);
      var $59=HEAP32[(($ptr44)>>2)];
      var $60=$head_addr;
      var $add_ptr45=(($59+((($60)*(12))&-1))|0);
      var $61=$argc;
      var $add_ptr46=(($add_ptr45+((($61)*(12))&-1))|0);
      var $62=$a;
      var $ptr47=(($62+20)|0);
      var $63=HEAP32[(($ptr47)>>2)];
      var $64=$tail;
      var $add_ptr48=(($63+((($64)*(12))&-1))|0);
      var $65=$a;
      var $len49=(($65+12)|0);
      var $66=HEAP32[(($len49)>>2)];
      var $67=$tail;
      var $sub50=((($66)-($67))|0);
      _value_move640($add_ptr46, $add_ptr48, $sub50);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      $i=0;
      label = 22; break;
    case 22: 
      var $68=$i;
      var $69=$argc;
      var $cmp53=(($68)|(0)) < (($69)|(0));
      if ($cmp53) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $70=$a;
      var $ptr54=(($70+20)|0);
      var $71=HEAP32[(($ptr54)>>2)];
      var $72=$head_addr;
      var $add_ptr55=(($71+((($72)*(12))&-1))|0);
      var $73=$i;
      var $add_ptr56=(($add_ptr55+((($73)*(12))&-1))|0);
      var $74=$argv;
      var $75=$i;
      var $add_ptr57=(($74+((($75)*(12))&-1))|0);
      var $76=$add_ptr56;
      var $77=$add_ptr57;
      assert(12 % 1 === 0);HEAP32[(($76)>>2)]=HEAP32[(($77)>>2)];HEAP32[((($76)+(4))>>2)]=HEAP32[((($77)+(4))>>2)];HEAP32[((($76)+(8))>>2)]=HEAP32[((($77)+(8))>>2)];
      label = 24; break;
    case 24: 
      var $78=$i;
      var $inc=((($78)+(1))|0);
      $i=$inc;
      label = 22; break;
    case 25: 
      var $79=$size;
      var $80=$a;
      var $len58=(($80+12)|0);
      HEAP32[(($len58)>>2)]=$79;
      var $81=$agg_result;
      var $82=$ary;
      assert(12 % 1 === 0);HEAP32[(($81)>>2)]=HEAP32[(($82)>>2)];HEAP32[((($81)+(4))>>2)]=HEAP32[((($82)+(4))>>2)];HEAP32[((($81)+(8))>>2)]=HEAP32[((($82)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_decref($mrb, $shared) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $shared_addr;
      $mrb_addr=$mrb;
      $shared_addr=$shared;
      var $0=$shared_addr;
      var $refcnt=(($0)|0);
      var $1=HEAP32[(($refcnt)>>2)];
      var $dec=((($1)-(1))|0);
      HEAP32[(($refcnt)>>2)]=$dec;
      var $2=$shared_addr;
      var $refcnt1=(($2)|0);
      var $3=HEAP32[(($refcnt1)>>2)];
      var $cmp=(($3)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$mrb_addr;
      var $5=$shared_addr;
      var $ptr=(($5+4)|0);
      var $6=HEAP32[(($ptr)>>2)];
      var $7=$6;
      _mrb_free($4, $7);
      var $8=$mrb_addr;
      var $9=$shared_addr;
      var $10=$9;
      _mrb_free($8, $10);
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_aget($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a;
      var $index=__stackBase__;
      var $len;
      var $argv=(__stackBase__)+(4);
      var $size=(__stackBase__)+(8);
      $mrb_addr=$mrb;
      var $value=(($self)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $a=$1;
      var $2=$mrb_addr;
      var $call=_mrb_get_args($2, ((112728)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$index,HEAP32[(((tempInt)+(4))>>2)]=$argv,HEAP32[(((tempInt)+(8))>>2)]=$size,tempInt));
      var $3=HEAP32[(($size)>>2)];
      if ((($3)|(0))==0) {
        label = 3; break;
      }
      else if ((($3)|(0))==1) {
        label = 4; break;
      }
      else {
      label = 18; break;
      }
    case 3: 
      var $4=$mrb_addr;
      var $5=HEAP32[(($index)>>2)];
      _mrb_ary_ref($agg_result, $4, $self, $5);
      label = 20; break;
    case 4: 
      var $6=HEAP32[(($argv)>>2)];
      var $arrayidx=(($6)|0);
      var $tt=(($arrayidx+8)|0);
      var $7=HEAP32[(($tt)>>2)];
      var $cmp=(($7)|(0))!=3;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$mrb_addr;
      var $9=$mrb_addr;
      var $call2=_mrb_class_get($9, ((111968)|0));
      _mrb_raise($8, $call2, ((111396)|0));
      label = 6; break;
    case 6: 
      var $10=HEAP32[(($index)>>2)];
      var $cmp3=(($10)|(0)) < 0;
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $11=$a;
      var $len5=(($11+12)|0);
      var $12=HEAP32[(($len5)>>2)];
      var $13=HEAP32[(($index)>>2)];
      var $add=((($13)+($12))|0);
      HEAP32[(($index)>>2)]=$add;
      label = 8; break;
    case 8: 
      var $14=HEAP32[(($index)>>2)];
      var $cmp7=(($14)|(0)) < 0;
      if ($cmp7) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $15=$a;
      var $len8=(($15+12)|0);
      var $16=HEAP32[(($len8)>>2)];
      var $17=HEAP32[(($index)>>2)];
      var $cmp9=(($16)|(0)) < (($17)|(0));
      if ($cmp9) { label = 10; break; } else { label = 11; break; }
    case 10: 
      _mrb_nil_value632($agg_result);
      label = 20; break;
    case 11: 
      var $18=HEAP32[(($argv)>>2)];
      var $arrayidx12=(($18)|0);
      var $value13=(($arrayidx12)|0);
      var $i=$value13;
      var $19=HEAP32[(($i)>>2)];
      $len=$19;
      var $20=$len;
      var $cmp14=(($20)|(0)) < 0;
      if ($cmp14) { label = 12; break; } else { label = 13; break; }
    case 12: 
      _mrb_nil_value632($agg_result);
      label = 20; break;
    case 13: 
      var $21=$a;
      var $len17=(($21+12)|0);
      var $22=HEAP32[(($len17)>>2)];
      var $23=HEAP32[(($index)>>2)];
      var $cmp18=(($22)|(0))==(($23)|(0));
      if ($cmp18) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $24=$mrb_addr;
      _mrb_ary_new($agg_result, $24);
      label = 20; break;
    case 15: 
      var $25=$len;
      var $26=$a;
      var $len21=(($26+12)|0);
      var $27=HEAP32[(($len21)>>2)];
      var $28=HEAP32[(($index)>>2)];
      var $sub=((($27)-($28))|0);
      var $cmp22=(($25)|(0)) > (($sub)|(0));
      if ($cmp22) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $29=$a;
      var $len24=(($29+12)|0);
      var $30=HEAP32[(($len24)>>2)];
      var $31=HEAP32[(($index)>>2)];
      var $sub25=((($30)-($31))|0);
      $len=$sub25;
      label = 17; break;
    case 17: 
      var $32=$mrb_addr;
      var $33=$a;
      var $34=HEAP32[(($index)>>2)];
      var $35=$len;
      _ary_subseq($agg_result, $32, $33, $34, $35);
      label = 20; break;
    case 18: 
      var $36=$mrb_addr;
      var $37=$mrb_addr;
      var $call27=_mrb_class_get($37, ((96436)|0));
      _mrb_raise($36, $call27, ((110928)|0));
      label = 19; break;
    case 19: 
      _mrb_nil_value632($agg_result);
      label = 20; break;
    case 20: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _ary_subseq($agg_result, $mrb, $a, $beg, $len) {
  var label = 0;
  var $mrb_addr;
  var $a_addr;
  var $beg_addr;
  var $len_addr;
  var $b;
  $mrb_addr=$mrb;
  $a_addr=$a;
  $beg_addr=$beg;
  $len_addr=$len;
  var $0=$mrb_addr;
  var $1=$a_addr;
  _ary_make_shared($0, $1);
  var $2=$mrb_addr;
  var $3=$mrb_addr;
  var $array_class=(($3+64)|0);
  var $4=HEAP32[(($array_class)>>2)];
  var $call=_mrb_obj_alloc($2, 14, $4);
  var $5=$call;
  $b=$5;
  var $6=$a_addr;
  var $ptr=(($6+20)|0);
  var $7=HEAP32[(($ptr)>>2)];
  var $8=$beg_addr;
  var $add_ptr=(($7+((($8)*(12))&-1))|0);
  var $9=$b;
  var $ptr1=(($9+20)|0);
  HEAP32[(($ptr1)>>2)]=$add_ptr;
  var $10=$len_addr;
  var $11=$b;
  var $len2=(($11+12)|0);
  HEAP32[(($len2)>>2)]=$10;
  var $12=$a_addr;
  var $aux=(($12+16)|0);
  var $shared=$aux;
  var $13=HEAP32[(($shared)>>2)];
  var $14=$b;
  var $aux3=(($14+16)|0);
  var $shared4=$aux3;
  HEAP32[(($shared4)>>2)]=$13;
  var $15=$b;
  var $aux5=(($15+16)|0);
  var $shared6=$aux5;
  var $16=HEAP32[(($shared6)>>2)];
  var $refcnt=(($16)|0);
  var $17=HEAP32[(($refcnt)>>2)];
  var $inc=((($17)+(1))|0);
  HEAP32[(($refcnt)>>2)]=$inc;
  var $18=$b;
  var $19=$18;
  var $20=HEAP32[(($19)>>2)];
  var $21=$20 >>> 11;
  var $bf_clear=$21 & 2097151;
  var $or=$bf_clear | 256;
  var $bf_value=$or & 2097151;
  var $22=$18;
  var $23=$bf_value & 2097151;
  var $24=$23 << 11;
  var $25=HEAP32[(($22)>>2)];
  var $26=$25 & 2047;
  var $27=$26 | $24;
  HEAP32[(($22)>>2)]=$27;
  var $28=$b;
  var $29=$28;
  _mrb_obj_value625($agg_result, $29);
  return;
}
function _mrb_ary_aset($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argv=__stackBase__;
      var $argc=(__stackBase__)+(4);
      var $tmp=(__stackBase__)+(8);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((97612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      var $1=HEAP32[(($argc)>>2)];
      if ((($1)|(0))==2) {
        label = 3; break;
      }
      else if ((($1)|(0))==3) {
        label = 6; break;
      }
      else {
      label = 7; break;
      }
    case 3: 
      var $2=HEAP32[(($argv)>>2)];
      var $arrayidx=(($2)|0);
      var $tt=(($arrayidx+8)|0);
      var $3=HEAP32[(($tt)>>2)];
      var $cmp=(($3)|(0))==3;
      if ($cmp) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call1=_mrb_class_get($5, ((111968)|0));
      _mrb_raise($4, $call1, ((110436)|0));
      label = 5; break;
    case 5: 
      var $6=$mrb_addr;
      var $7=HEAP32[(($argv)>>2)];
      var $arrayidx2=(($7)|0);
      var $value=(($arrayidx2)|0);
      var $i=$value;
      var $8=HEAP32[(($i)>>2)];
      var $9=HEAP32[(($argv)>>2)];
      var $arrayidx3=(($9+12)|0);
      _mrb_ary_set($6, $self, $8, $arrayidx3);
      var $10=HEAP32[(($argv)>>2)];
      var $arrayidx4=(($10+12)|0);
      var $11=$agg_result;
      var $12=$arrayidx4;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      label = 8; break;
    case 6: 
      var $13=$mrb_addr;
      var $14=HEAP32[(($argv)>>2)];
      var $arrayidx6=(($14)|0);
      var $value7=(($arrayidx6)|0);
      var $i8=$value7;
      var $15=HEAP32[(($i8)>>2)];
      var $16=HEAP32[(($argv)>>2)];
      var $arrayidx9=(($16+12)|0);
      var $value10=(($arrayidx9)|0);
      var $i11=$value10;
      var $17=HEAP32[(($i11)>>2)];
      var $18=HEAP32[(($argv)>>2)];
      var $arrayidx12=(($18+24)|0);
      _mrb_ary_splice($tmp, $13, $self, $15, $17, $arrayidx12);
      var $19=HEAP32[(($argv)>>2)];
      var $arrayidx13=(($19+24)|0);
      var $20=$agg_result;
      var $21=$arrayidx13;
      assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
      label = 8; break;
    case 7: 
      var $22=$mrb_addr;
      var $23=$mrb_addr;
      var $call14=_mrb_class_get($23, ((96436)|0));
      _mrb_raise($22, $call14, ((110928)|0));
      _mrb_nil_value632($agg_result);
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_delete_at($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a;
      var $index=__stackBase__;
      var $val=(__stackBase__)+(4);
      var $ptr;
      var $len;
      $mrb_addr=$mrb;
      var $value=(($self)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $a=$1;
      var $2=$mrb_addr;
      var $call=_mrb_get_args($2, ((97888)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$index,tempInt));
      var $3=HEAP32[(($index)>>2)];
      var $cmp=(($3)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$a;
      var $len1=(($4+12)|0);
      var $5=HEAP32[(($len1)>>2)];
      var $6=HEAP32[(($index)>>2)];
      var $add=((($6)+($5))|0);
      HEAP32[(($index)>>2)]=$add;
      label = 4; break;
    case 4: 
      var $7=HEAP32[(($index)>>2)];
      var $cmp2=(($7)|(0)) < 0;
      if ($cmp2) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $8=$a;
      var $len3=(($8+12)|0);
      var $9=HEAP32[(($len3)>>2)];
      var $10=HEAP32[(($index)>>2)];
      var $cmp4=(($9)|(0)) <= (($10)|(0));
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      _mrb_nil_value632($agg_result);
      label = 11; break;
    case 7: 
      var $11=$mrb_addr;
      var $12=$a;
      _ary_modify($11, $12);
      var $13=HEAP32[(($index)>>2)];
      var $14=$a;
      var $ptr7=(($14+20)|0);
      var $15=HEAP32[(($ptr7)>>2)];
      var $arrayidx=(($15+((($13)*(12))&-1))|0);
      var $16=$val;
      var $17=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
      var $18=$a;
      var $ptr8=(($18+20)|0);
      var $19=HEAP32[(($ptr8)>>2)];
      var $20=HEAP32[(($index)>>2)];
      var $add_ptr=(($19+((($20)*(12))&-1))|0);
      $ptr=$add_ptr;
      var $21=$a;
      var $len9=(($21+12)|0);
      var $22=HEAP32[(($len9)>>2)];
      var $23=HEAP32[(($index)>>2)];
      var $sub=((($22)-($23))|0);
      $len=$sub;
      label = 8; break;
    case 8: 
      var $24=$len;
      var $dec=((($24)-(1))|0);
      $len=$dec;
      var $tobool=(($dec)|(0))!=0;
      if ($tobool) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $25=$ptr;
      var $26=$ptr;
      var $add_ptr10=(($26+12)|0);
      var $27=$25;
      var $28=$add_ptr10;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      var $29=$ptr;
      var $incdec_ptr=(($29+12)|0);
      $ptr=$incdec_ptr;
      label = 8; break;
    case 10: 
      var $30=$a;
      var $len11=(($30+12)|0);
      var $31=HEAP32[(($len11)>>2)];
      var $dec12=((($31)-(1))|0);
      HEAP32[(($len11)>>2)]=$dec12;
      var $32=$mrb_addr;
      var $33=$a;
      _ary_shrink_capa($32, $33);
      var $34=$agg_result;
      var $35=$val;
      assert(12 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];
      label = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _ary_shrink_capa($mrb, $a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a_addr;
      var $capa;
      $mrb_addr=$mrb;
      $a_addr=$a;
      var $0=$a_addr;
      var $aux=(($0+16)|0);
      var $capa1=$aux;
      var $1=HEAP32[(($capa1)>>2)];
      $capa=$1;
      var $2=$capa;
      var $cmp=(($2)|(0)) < 8;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 14; break;
    case 4: 
      var $3=$capa;
      var $4=$a_addr;
      var $len=(($4+12)|0);
      var $5=HEAP32[(($len)>>2)];
      var $mul=((($5)*(5))&-1);
      var $cmp2=(($3)|(0)) <= (($mul)|(0));
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 14; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $6=$capa;
      var $div=((((($6)|(0)))/(2))&-1);
      $capa=$div;
      var $7=$capa;
      var $cmp5=(($7)|(0)) < 4;
      if ($cmp5) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $capa=4;
      label = 11; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $8=$capa;
      var $9=$a_addr;
      var $len8=(($9+12)|0);
      var $10=HEAP32[(($len8)>>2)];
      var $mul9=((($10)*(5))&-1);
      var $cmp10=(($8)|(0)) > (($mul9)|(0));
      if ($cmp10) { label = 7; break; } else { label = 11; break; }
    case 11: 
      var $11=$capa;
      var $12=$a_addr;
      var $len11=(($12+12)|0);
      var $13=HEAP32[(($len11)>>2)];
      var $cmp12=(($11)|(0)) > (($13)|(0));
      if ($cmp12) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $14=$capa;
      var $15=$a_addr;
      var $aux13=(($15+16)|0);
      var $capa14=$aux13;
      var $16=HEAP32[(($capa14)>>2)];
      var $cmp15=(($14)|(0)) < (($16)|(0));
      if ($cmp15) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $17=$capa;
      var $18=$a_addr;
      var $aux17=(($18+16)|0);
      var $capa18=$aux17;
      HEAP32[(($capa18)>>2)]=$17;
      var $19=$mrb_addr;
      var $20=$a_addr;
      var $ptr=(($20+20)|0);
      var $21=HEAP32[(($ptr)>>2)];
      var $22=$21;
      var $23=$capa;
      var $mul19=((($23)*(12))&-1);
      var $call=_mrb_realloc($19, $22, $mul19);
      var $24=$call;
      var $25=$a_addr;
      var $ptr20=(($25+20)|0);
      HEAP32[(($ptr20)>>2)]=$24;
      label = 14; break;
    case 14: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_first($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a;
      var $size=__stackBase__;
      $mrb_addr=$mrb;
      var $value=(($self)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $a=$1;
      var $2=$mrb_addr;
      var $call=_mrb_get_args($2, ((110036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$size,tempInt));
      var $cmp=(($call)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $3=$a;
      var $len=(($3+12)|0);
      var $4=HEAP32[(($len)>>2)];
      var $cmp1=(($4)|(0)) > 0;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$a;
      var $ptr=(($5+20)|0);
      var $6=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($6)|0);
      var $7=$agg_result;
      var $8=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      label = 6; break;
    case 5: 
      _mrb_nil_value632($agg_result);
      label = 6; break;
    case 6: 
      label = 14; break;
    case 7: 
      var $9=HEAP32[(($size)>>2)];
      var $cmp2=(($9)|(0)) < 0;
      if ($cmp2) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $10=$mrb_addr;
      var $11=$mrb_addr;
      var $call4=_mrb_class_get($11, ((96436)|0));
      _mrb_raise($10, $call4, ((109672)|0));
      label = 9; break;
    case 9: 
      var $12=HEAP32[(($size)>>2)];
      var $13=$a;
      var $len6=(($13+12)|0);
      var $14=HEAP32[(($len6)>>2)];
      var $cmp7=(($12)|(0)) > (($14)|(0));
      if ($cmp7) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $15=$a;
      var $len9=(($15+12)|0);
      var $16=HEAP32[(($len9)>>2)];
      HEAP32[(($size)>>2)]=$16;
      label = 11; break;
    case 11: 
      var $17=$a;
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19 >>> 11;
      var $bf_clear=$20 & 2097151;
      var $and=$bf_clear & 256;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $21=$mrb_addr;
      var $22=$a;
      var $23=HEAP32[(($size)>>2)];
      _ary_subseq($agg_result, $21, $22, 0, $23);
      label = 14; break;
    case 13: 
      var $24=$mrb_addr;
      var $25=HEAP32[(($size)>>2)];
      var $26=$a;
      var $ptr13=(($26+20)|0);
      var $27=HEAP32[(($ptr13)>>2)];
      _mrb_ary_new_from_values($agg_result, $24, $25, $27);
      label = 14; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_last($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a;
      var $size;
      var $vals=__stackBase__;
      var $len=(__stackBase__)+(4);
      $mrb_addr=$mrb;
      var $value=(($self)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $a=$1;
      var $2=$mrb_addr;
      var $call=_mrb_get_args($2, ((97612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$vals,HEAP32[(((tempInt)+(4))>>2)]=$len,tempInt));
      var $3=HEAP32[(($len)>>2)];
      var $cmp=(($3)|(0)) > 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call1=_mrb_class_get($5, ((96436)|0));
      _mrb_raise($4, $call1, ((110928)|0));
      label = 4; break;
    case 4: 
      var $6=HEAP32[(($len)>>2)];
      var $cmp2=(($6)|(0))==0;
      if ($cmp2) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $7=$a;
      var $len4=(($7+12)|0);
      var $8=HEAP32[(($len4)>>2)];
      var $cmp5=(($8)|(0)) > 0;
      if ($cmp5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $9=$a;
      var $len6=(($9+12)|0);
      var $10=HEAP32[(($len6)>>2)];
      var $sub=((($10)-(1))|0);
      var $11=$a;
      var $ptr=(($11+20)|0);
      var $12=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($12+((($sub)*(12))&-1))|0);
      var $13=$agg_result;
      var $14=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
      label = 8; break;
    case 7: 
      _mrb_nil_value632($agg_result);
      label = 8; break;
    case 8: 
      label = 17; break;
    case 9: 
      var $15=HEAP32[(($vals)>>2)];
      var $value8=(($15)|0);
      var $i=$value8;
      var $16=HEAP32[(($i)>>2)];
      $size=$16;
      var $17=$size;
      var $cmp9=(($17)|(0)) < 0;
      if ($cmp9) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $18=$mrb_addr;
      var $19=$mrb_addr;
      var $call11=_mrb_class_get($19, ((96436)|0));
      _mrb_raise($18, $call11, ((109672)|0));
      label = 11; break;
    case 11: 
      var $20=$size;
      var $21=$a;
      var $len13=(($21+12)|0);
      var $22=HEAP32[(($len13)>>2)];
      var $cmp14=(($20)|(0)) > (($22)|(0));
      if ($cmp14) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $23=$a;
      var $len16=(($23+12)|0);
      var $24=HEAP32[(($len16)>>2)];
      $size=$24;
      label = 13; break;
    case 13: 
      var $25=$a;
      var $26=$25;
      var $27=HEAP32[(($26)>>2)];
      var $28=$27 >>> 11;
      var $bf_clear=$28 & 2097151;
      var $and=$bf_clear & 256;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $29=$size;
      var $cmp18=(($29)|(0)) > 4;
      if ($cmp18) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $30=$mrb_addr;
      var $31=$a;
      var $32=$a;
      var $len20=(($32+12)|0);
      var $33=HEAP32[(($len20)>>2)];
      var $34=$size;
      var $sub21=((($33)-($34))|0);
      var $35=$size;
      _ary_subseq($agg_result, $30, $31, $sub21, $35);
      label = 17; break;
    case 16: 
      var $36=$mrb_addr;
      var $37=$size;
      var $38=$a;
      var $ptr23=(($38+20)|0);
      var $39=HEAP32[(($ptr23)>>2)];
      var $40=$a;
      var $len24=(($40+12)|0);
      var $41=HEAP32[(($len24)>>2)];
      var $add_ptr=(($39+((($41)*(12))&-1))|0);
      var $42=$size;
      var $idx_neg=(((-$42))|0);
      var $add_ptr25=(($add_ptr+((($idx_neg)*(12))&-1))|0);
      _mrb_ary_new_from_values($agg_result, $36, $37, $add_ptr25);
      label = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_index_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $obj=__stackBase__;
      var $i;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((106208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj,tempInt));
      $i=0;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $value=(($self)|0);
      var $p=$value;
      var $2=HEAP32[(($p)>>2)];
      var $3=$2;
      var $len=(($3+12)|0);
      var $4=HEAP32[(($len)>>2)];
      var $cmp=(($1)|(0)) < (($4)|(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $5=$mrb_addr;
      var $6=$i;
      var $value1=(($self)|0);
      var $p2=$value1;
      var $7=HEAP32[(($p2)>>2)];
      var $8=$7;
      var $ptr=(($8+20)|0);
      var $9=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($9+((($6)*(12))&-1))|0);
      var $call3=_mrb_equal($5, $arrayidx, $obj);
      var $tobool=(($call3)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $10=$i;
      _mrb_fixnum_value633($agg_result, $10);
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      _mrb_nil_value632($agg_result);
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_rindex_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $obj=__stackBase__;
      var $i;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((106208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj,tempInt));
      var $value=(($self)|0);
      var $p=$value;
      var $1=HEAP32[(($p)>>2)];
      var $2=$1;
      var $len=(($2+12)|0);
      var $3=HEAP32[(($len)>>2)];
      var $sub=((($3)-(1))|0);
      $i=$sub;
      label = 3; break;
    case 3: 
      var $4=$i;
      var $cmp=(($4)|(0)) >= 0;
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $5=$mrb_addr;
      var $6=$i;
      var $value1=(($self)|0);
      var $p2=$value1;
      var $7=HEAP32[(($p2)>>2)];
      var $8=$7;
      var $ptr=(($8+20)|0);
      var $9=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($9+((($6)*(12))&-1))|0);
      var $call3=_mrb_equal($5, $arrayidx, $obj);
      var $tobool=(($call3)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $10=$i;
      _mrb_fixnum_value633($agg_result, $10);
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $11=$i;
      var $dec=((($11)-(1))|0);
      $i=$dec;
      label = 3; break;
    case 8: 
      _mrb_nil_value632($agg_result);
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_splat($agg_result, $mrb, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      $mrb_addr=$mrb;
      var $tt=(($v+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)|(0))==14;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      label = 5; break;
    case 4: 
      var $3=$mrb_addr;
      _mrb_ary_new_from_values($agg_result, $3, 1, $v);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_clear($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $a;
  $mrb_addr=$mrb;
  var $value=(($self)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  $a=$1;
  var $2=$mrb_addr;
  var $3=$a;
  _ary_modify($2, $3);
  var $4=$a;
  var $len=(($4+12)|0);
  HEAP32[(($len)>>2)]=0;
  var $5=$a;
  var $aux=(($5+16)|0);
  var $capa=$aux;
  HEAP32[(($capa)>>2)]=0;
  var $6=$mrb_addr;
  var $7=$a;
  var $ptr=(($7+20)|0);
  var $8=HEAP32[(($ptr)>>2)];
  var $9=$8;
  _mrb_free($6, $9);
  var $10=$a;
  var $ptr1=(($10+20)|0);
  HEAP32[(($ptr1)>>2)]=0;
  var $11=$agg_result;
  var $12=$self;
  assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_empty_p($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $a;
  $mrb_addr=$mrb;
  var $value=(($self)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  $a=$1;
  var $2=$a;
  var $len=(($2+12)|0);
  var $3=HEAP32[(($len)>>2)];
  var $cmp=(($3)|(0))==0;
  var $conv=(($cmp)&(1));
  var $conv1=(($conv) & 255);
  _mrb_bool_value647($agg_result, $conv1);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_bool_value647($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $boolean_addr;
      var $v=__stackBase__;
      $boolean_addr=$boolean;
      label = 3; break;
    case 3: 
      var $0=$boolean_addr;
      var $conv=(($0)&(255));
      var $tobool=(($conv)|(0))!=0;
      var $cond=$tobool ? 2 : 0;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$cond;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_check_array_type($agg_result, $mrb, $ary) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_check_convert_type($agg_result, $0, $ary, 14, ((109204)|0), ((108668)|0));
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_entry($agg_result, $ary, $offset) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $offset_addr;
      $offset_addr=$offset;
      var $0=$offset_addr;
      var $cmp=(($0)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $value=(($ary)|0);
      var $p=$value;
      var $1=HEAP32[(($p)>>2)];
      var $2=$1;
      var $len=(($2+12)|0);
      var $3=HEAP32[(($len)>>2)];
      var $4=$offset_addr;
      var $add=((($4)+($3))|0);
      $offset_addr=$add;
      label = 4; break;
    case 4: 
      var $5=$offset_addr;
      _ary_elt($agg_result, $ary, $5);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_join($agg_result, $mrb, $ary, $sep) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $sep; $sep = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($sep)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sep)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sep)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $tmp=__stackBase__;
  var $agg_tmp=(__stackBase__)+(12);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_obj_as_string($tmp, $0, $sep);
  var $1=$sep;
  var $2=$tmp;
  assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
  var $3=$mrb_addr;
  var $4=$mrb_addr;
  _mrb_ary_new($agg_tmp, $4);
  _join_ary($agg_result, $3, $ary, $sep, $agg_tmp);
  STACKTOP = __stackBase__;
  return;
}
function _join_ary($agg_result, $mrb, $ary, $sep, $list) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 132)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $sep; $sep = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($sep)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sep)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sep)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $list; $list = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($list)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($list)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($list)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $i;
      var $result=__stackBase__;
      var $val=(__stackBase__)+(12);
      var $tmp=(__stackBase__)+(24);
      var $tmp4=(__stackBase__)+(36);
      var $tmp24=(__stackBase__)+(48);
      var $tmp31=(__stackBase__)+(60);
      var $tmp39=(__stackBase__)+(72);
      var $tmp40=(__stackBase__)+(84);
      var $tmp49=(__stackBase__)+(96);
      var $tmp58=(__stackBase__)+(108);
      var $tmp62=(__stackBase__)+(120);
      $mrb_addr=$mrb;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $value=(($list)|0);
      var $p=$value;
      var $1=HEAP32[(($p)>>2)];
      var $2=$1;
      var $len=(($2+12)|0);
      var $3=HEAP32[(($len)>>2)];
      var $cmp=(($0)|(0)) < (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $4=$mrb_addr;
      var $5=$i;
      var $value1=(($list)|0);
      var $p2=$value1;
      var $6=HEAP32[(($p2)>>2)];
      var $7=$6;
      var $ptr=(($7+20)|0);
      var $8=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($8+((($5)*(12))&-1))|0);
      var $call=_mrb_obj_equal($4, $ary, $arrayidx);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=$mrb_addr;
      var $10=$mrb_addr;
      var $call3=_mrb_class_get($10, ((96436)|0));
      _mrb_raise($9, $call3, ((98932)|0));
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      var $12=$mrb_addr;
      _mrb_ary_push($12, $list, $ary);
      var $13=$mrb_addr;
      _mrb_str_buf_new($tmp4, $13, 64);
      var $14=$result;
      var $15=$tmp4;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      $i=0;
      label = 9; break;
    case 9: 
      var $16=$i;
      var $value6=(($ary)|0);
      var $p7=$value6;
      var $17=HEAP32[(($p7)>>2)];
      var $18=$17;
      var $len8=(($18+12)|0);
      var $19=HEAP32[(($len8)>>2)];
      var $cmp9=(($16)|(0)) < (($19)|(0));
      if ($cmp9) { label = 10; break; } else { label = 28; break; }
    case 10: 
      var $20=$i;
      var $cmp11=(($20)|(0)) > 0;
      if ($cmp11) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $tt=(($sep+8)|0);
      var $21=HEAP32[(($tt)>>2)];
      var $cmp12=(($21)|(0))==0;
      if ($cmp12) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $value14=(($sep)|0);
      var $i15=$value14;
      var $22=HEAP32[(($i15)>>2)];
      var $tobool16=(($22)|(0))!=0;
      if ($tobool16) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $23=$mrb_addr;
      var $value18=(($sep)|0);
      var $p19=$value18;
      var $24=HEAP32[(($p19)>>2)];
      var $25=$24;
      var $ptr20=(($25+20)|0);
      var $26=HEAP32[(($ptr20)>>2)];
      var $value21=(($sep)|0);
      var $p22=$value21;
      var $27=HEAP32[(($p22)>>2)];
      var $28=$27;
      var $len23=(($28+12)|0);
      var $29=HEAP32[(($len23)>>2)];
      _mrb_str_buf_cat($tmp24, $23, $result, $26, $29);
      label = 14; break;
    case 14: 
      var $30=$i;
      var $value26=(($ary)|0);
      var $p27=$value26;
      var $31=HEAP32[(($p27)>>2)];
      var $32=$31;
      var $ptr28=(($32+20)|0);
      var $33=HEAP32[(($ptr28)>>2)];
      var $arrayidx29=(($33+((($30)*(12))&-1))|0);
      var $34=$val;
      var $35=$arrayidx29;
      assert(12 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];
      var $tt30=(($val+8)|0);
      var $36=HEAP32[(($tt30)>>2)];
      if ((($36)|(0))==14) {
        label = 15; break;
      }
      else if ((($36)|(0))==16) {
        label = 17; break;
      }
      else {
      label = 19; break;
      }
    case 15: 
      label = 16; break;
    case 16: 
      var $37=$mrb_addr;
      _join_ary($tmp31, $37, $val, $sep, $list);
      var $38=$val;
      var $39=$tmp31;
      assert(12 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];HEAP32[((($38)+(8))>>2)]=HEAP32[((($39)+(8))>>2)];
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $40=$mrb_addr;
      var $value33=(($val)|0);
      var $p34=$value33;
      var $41=HEAP32[(($p34)>>2)];
      var $42=$41;
      var $ptr35=(($42+20)|0);
      var $43=HEAP32[(($ptr35)>>2)];
      var $value36=(($val)|0);
      var $p37=$value36;
      var $44=HEAP32[(($p37)>>2)];
      var $45=$44;
      var $len38=(($45+12)|0);
      var $46=HEAP32[(($len38)>>2)];
      _mrb_str_buf_cat($tmp39, $40, $result, $43, $46);
      label = 26; break;
    case 19: 
      var $47=$mrb_addr;
      _mrb_check_string_type($tmp40, $47, $val);
      var $48=$tmp;
      var $49=$tmp40;
      assert(12 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($49)+(4))>>2)];HEAP32[((($48)+(8))>>2)]=HEAP32[((($49)+(8))>>2)];
      var $tt41=(($tmp+8)|0);
      var $50=HEAP32[(($tt41)>>2)];
      var $cmp42=(($50)|(0))==0;
      if ($cmp42) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $value44=(($tmp)|0);
      var $i45=$value44;
      var $51=HEAP32[(($i45)>>2)];
      var $tobool46=(($51)|(0))!=0;
      if ($tobool46) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $52=$val;
      var $53=$tmp;
      assert(12 % 1 === 0);HEAP32[(($52)>>2)]=HEAP32[(($53)>>2)];HEAP32[((($52)+(4))>>2)]=HEAP32[((($53)+(4))>>2)];HEAP32[((($52)+(8))>>2)]=HEAP32[((($53)+(8))>>2)];
      label = 18; break;
    case 22: 
      var $54=$mrb_addr;
      _mrb_check_convert_type($tmp49, $54, $val, 14, ((109204)|0), ((108668)|0));
      var $55=$tmp;
      var $56=$tmp49;
      assert(12 % 1 === 0);HEAP32[(($55)>>2)]=HEAP32[(($56)>>2)];HEAP32[((($55)+(4))>>2)]=HEAP32[((($56)+(4))>>2)];HEAP32[((($55)+(8))>>2)]=HEAP32[((($56)+(8))>>2)];
      var $tt50=(($tmp+8)|0);
      var $57=HEAP32[(($tt50)>>2)];
      var $cmp51=(($57)|(0))==0;
      if ($cmp51) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $value53=(($tmp)|0);
      var $i54=$value53;
      var $58=HEAP32[(($i54)>>2)];
      var $tobool55=(($58)|(0))!=0;
      if ($tobool55) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $59=$val;
      var $60=$tmp;
      assert(12 % 1 === 0);HEAP32[(($59)>>2)]=HEAP32[(($60)>>2)];HEAP32[((($59)+(4))>>2)]=HEAP32[((($60)+(4))>>2)];HEAP32[((($59)+(8))>>2)]=HEAP32[((($60)+(8))>>2)];
      label = 16; break;
    case 25: 
      var $61=$mrb_addr;
      _mrb_obj_as_string($tmp58, $61, $val);
      var $62=$val;
      var $63=$tmp58;
      assert(12 % 1 === 0);HEAP32[(($62)>>2)]=HEAP32[(($63)>>2)];HEAP32[((($62)+(4))>>2)]=HEAP32[((($63)+(4))>>2)];HEAP32[((($62)+(8))>>2)]=HEAP32[((($63)+(8))>>2)];
      label = 18; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $64=$i;
      var $inc60=((($64)+(1))|0);
      $i=$inc60;
      label = 9; break;
    case 28: 
      var $65=$mrb_addr;
      _mrb_ary_pop($tmp62, $65, $list);
      var $66=$agg_result;
      var $67=$result;
      assert(12 % 1 === 0);HEAP32[(($66)>>2)]=HEAP32[(($67)>>2)];HEAP32[((($66)+(4))>>2)]=HEAP32[((($67)+(4))>>2)];HEAP32[((($66)+(8))>>2)]=HEAP32[((($67)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_fill_flags751($p, $c, $len) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $c_addr;
      var $len_addr;
      $p_addr=$p;
      $c_addr=$c;
      $len_addr=$len;
      label = 3; break;
    case 3: 
      var $0=$len_addr;
      var $dec=((($0)-(1))|0);
      $len_addr=$dec;
      var $cmp=(($0)>>>(0)) > 0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $1=$c_addr;
      var $2=$p_addr;
      var $incdec_ptr=(($2+1)|0);
      $p_addr=$incdec_ptr;
      HEAP8[($2)]=$1;
      label = 3; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_array($mrb) {
  var label = 0;
  var $mrb_addr;
  var $a;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $object_class=(($1+44)|0);
  var $2=HEAP32[(($object_class)>>2)];
  var $call=_mrb_define_class($0, ((109204)|0), $2);
  var $3=$mrb_addr;
  var $array_class=(($3+64)|0);
  HEAP32[(($array_class)>>2)]=$call;
  $a=$call;
  var $4=$a;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=$6 >>> 11;
  var $bf_clear=$7 & 2097151;
  var $and=$bf_clear & -256;
  var $or=$and | 14;
  var $8=$a;
  var $bf_value=$or & 2097151;
  var $9=$8;
  var $10=$bf_value & 2097151;
  var $11=$10 << 11;
  var $12=HEAP32[(($9)>>2)];
  var $13=$12 & 2047;
  var $14=$13 | $11;
  HEAP32[(($9)>>2)]=$14;
  var $15=$mrb_addr;
  var $16=$a;
  var $17=$mrb_addr;
  var $call1=_mrb_class_get($17, ((108276)|0));
  _mrb_include_module($15, $16, $call1);
  var $18=$mrb_addr;
  var $19=$a;
  _mrb_define_class_method($18, $19, ((107808)|0), 534, 4096);
  var $20=$mrb_addr;
  var $21=$a;
  _mrb_define_method($20, $21, ((97612)|0), 70, 262144);
  var $22=$mrb_addr;
  var $23=$a;
  _mrb_define_method($22, $23, ((107424)|0), 360, 262144);
  var $24=$mrb_addr;
  var $25=$a;
  _mrb_define_method($24, $25, ((107152)|0), 352, 262144);
  var $26=$mrb_addr;
  var $27=$a;
  _mrb_define_method($26, $27, ((107808)|0), 528, 4096);
  var $28=$mrb_addr;
  var $29=$a;
  _mrb_define_method($28, $29, ((106628)|0), 686, 4096);
  var $30=$mrb_addr;
  var $31=$a;
  _mrb_define_method($30, $31, ((106252)|0), 600, 0);
  var $32=$mrb_addr;
  var $33=$a;
  _mrb_define_method($32, $33, ((105892)|0), 450, 262144);
  var $34=$mrb_addr;
  var $35=$a;
  _mrb_define_method($34, $35, ((105596)|0), 100, 262144);
  var $36=$mrb_addr;
  var $37=$a;
  _mrb_define_method($36, $37, ((105276)|0), 80, 0);
  var $38=$mrb_addr;
  var $39=$a;
  _mrb_define_method($38, $39, ((105008)|0), 716, 8192);
  var $40=$mrb_addr;
  var $41=$a;
  _mrb_define_method($40, $41, ((104680)|0), 506, 262144);
  var $42=$mrb_addr;
  var $43=$a;
  _mrb_define_method($42, $43, ((104244)|0), 516, 262144);
  var $44=$mrb_addr;
  var $45=$a;
  _mrb_define_method($44, $45, ((103852)|0), 274, 4096);
  var $46=$mrb_addr;
  var $47=$a;
  _mrb_define_method($46, $47, ((103672)|0), 668, 4096);
  var $48=$mrb_addr;
  var $49=$a;
  _mrb_define_method($48, $49, ((103448)|0), 278, 0);
  var $50=$mrb_addr;
  var $51=$a;
  _mrb_define_method($50, $51, ((103236)|0), 482, 0);
  var $52=$mrb_addr;
  var $53=$a;
  _mrb_define_method($52, $53, ((102928)|0), 352, 4096);
  var $54=$mrb_addr;
  var $55=$a;
  _mrb_define_method($54, $55, ((102756)|0), 516, 262144);
  var $56=$mrb_addr;
  var $57=$a;
  _mrb_define_method($56, $57, ((102520)|0), 452, 0);
  var $58=$mrb_addr;
  var $59=$a;
  _mrb_define_method($58, $59, ((102156)|0), 52, 0);
  var $60=$mrb_addr;
  var $61=$a;
  _mrb_define_method($60, $61, ((101920)|0), 162, 262144);
  var $62=$mrb_addr;
  var $63=$a;
  _mrb_define_method($62, $63, ((101528)|0), 440, 0);
  var $64=$mrb_addr;
  var $65=$a;
  _mrb_define_method($64, $65, ((101140)|0), 278, 0);
  var $66=$mrb_addr;
  var $67=$a;
  _mrb_define_method($66, $67, ((100848)|0), 528, 4096);
  var $68=$mrb_addr;
  var $69=$a;
  _mrb_define_method($68, $69, ((100624)|0), 546, 4096);
  var $70=$mrb_addr;
  var $71=$a;
  _mrb_define_method($70, $71, ((100376)|0), 40, 0);
  var $72=$mrb_addr;
  var $73=$a;
  _mrb_define_alias($72, $73, ((100196)|0), ((100376)|0));
  var $74=$mrb_addr;
  var $75=$a;
  _mrb_define_method($74, $75, ((100040)|0), 30, 262144);
  var $76=$mrb_addr;
  var $77=$a;
  _mrb_define_method($76, $77, ((99828)|0), 102, 262144);
  var $78=$mrb_addr;
  var $79=$a;
  _mrb_define_method($78, $79, ((103220)|0), 4, 262144);
  return;
}
function _mrb_ary_join_m($agg_result, $mrb, $ary) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $sep=__stackBase__;
  $mrb_addr=$mrb;
  _mrb_nil_value632($sep);
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((99368)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$sep,tempInt));
  var $1=$mrb_addr;
  _mrb_ary_join($agg_result, $1, $ary, $sep);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_size($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $a;
  $mrb_addr=$mrb;
  var $value=(($self)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  $a=$1;
  var $2=$a;
  var $len=(($2+12)|0);
  var $3=HEAP32[(($len)>>2)];
  _mrb_fixnum_value633($agg_result, $3);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_inspect($agg_result, $mrb, $ary) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $agg_tmp=__stackBase__;
      $mrb_addr=$mrb;
      var $value=(($ary)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $len=(($1+12)|0);
      var $2=HEAP32[(($len)>>2)];
      var $cmp=(($2)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      _mrb_str_new($agg_result, $3, ((107808)|0), 2);
      label = 5; break;
    case 4: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      _mrb_ary_new($agg_tmp, $5);
      _inspect_ary($agg_result, $4, $ary, $agg_tmp);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_equal($agg_result, $mrb, $ary1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary1; $ary1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ary2=__stackBase__;
      var $equal_p;
      var $i;
      var $agg_tmp=(__stackBase__)+(12);
      var $agg_tmp26=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((106208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ary2,tempInt));
      var $1=$mrb_addr;
      var $call1=_mrb_obj_equal($1, $ary1, $ary2);
      var $tobool=(($call1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $equal_p=1;
      label = 23; break;
    case 4: 
      var $tt=(($ary2+8)|0);
      var $2=HEAP32[(($tt)>>2)];
      var $cmp=(($2)>>>(0)) <= 7;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $equal_p=0;
      label = 22; break;
    case 6: 
      var $tt4=(($ary2+8)|0);
      var $3=HEAP32[(($tt4)>>2)];
      var $cmp5=(($3)|(0))==14;
      if ($cmp5) { label = 11; break; } else { label = 7; break; }
    case 7: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call7=_mrb_intern2($5, ((108668)|0), 6);
      var $call8=_mrb_respond_to($4, $ary2, $call7);
      var $tobool9=(($call8)|(0))!=0;
      if ($tobool9) { label = 9; break; } else { label = 8; break; }
    case 8: 
      $equal_p=0;
      label = 10; break;
    case 9: 
      var $6=$mrb_addr;
      var $call12=_mrb_equal($6, $ary2, $ary1);
      var $conv=(($call12) & 255);
      $equal_p=$conv;
      label = 10; break;
    case 10: 
      label = 21; break;
    case 11: 
      var $value=(($ary1)|0);
      var $p=$value;
      var $7=HEAP32[(($p)>>2)];
      var $8=$7;
      var $len=(($8+12)|0);
      var $9=HEAP32[(($len)>>2)];
      var $value14=(($ary2)|0);
      var $p15=$value14;
      var $10=HEAP32[(($p15)>>2)];
      var $11=$10;
      var $len16=(($11+12)|0);
      var $12=HEAP32[(($len16)>>2)];
      var $cmp17=(($9)|(0))!=(($12)|(0));
      if ($cmp17) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $equal_p=0;
      label = 20; break;
    case 13: 
      $equal_p=1;
      $i=0;
      label = 14; break;
    case 14: 
      var $13=$i;
      var $value21=(($ary1)|0);
      var $p22=$value21;
      var $14=HEAP32[(($p22)>>2)];
      var $15=$14;
      var $len23=(($15+12)|0);
      var $16=HEAP32[(($len23)>>2)];
      var $cmp24=(($13)|(0)) < (($16)|(0));
      if ($cmp24) { label = 15; break; } else { label = 19; break; }
    case 15: 
      var $17=$mrb_addr;
      var $18=$i;
      _ary_elt($agg_tmp, $ary1, $18);
      var $19=$i;
      _ary_elt($agg_tmp26, $ary2, $19);
      var $call27=_mrb_equal($17, $agg_tmp, $agg_tmp26);
      var $tobool28=(($call27)|(0))!=0;
      if ($tobool28) { label = 17; break; } else { label = 16; break; }
    case 16: 
      $equal_p=0;
      label = 19; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $20=$i;
      var $inc=((($20)+(1))|0);
      $i=$inc;
      label = 14; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $21=$equal_p;
      _mrb_bool_value647($agg_result, $21);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_eql($agg_result, $mrb, $ary1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary1; $ary1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ary2=__stackBase__;
      var $eql_p;
      var $i;
      var $agg_tmp=(__stackBase__)+(12);
      var $agg_tmp14=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((106208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ary2,tempInt));
      var $1=$mrb_addr;
      var $call1=_mrb_obj_equal($1, $ary1, $ary2);
      var $tobool=(($call1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $eql_p=1;
      label = 17; break;
    case 4: 
      var $tt=(($ary2+8)|0);
      var $2=HEAP32[(($tt)>>2)];
      var $cmp=(($2)|(0))==14;
      if ($cmp) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $eql_p=0;
      label = 16; break;
    case 6: 
      var $value=(($ary1)|0);
      var $p=$value;
      var $3=HEAP32[(($p)>>2)];
      var $4=$3;
      var $len=(($4+12)|0);
      var $5=HEAP32[(($len)>>2)];
      var $value4=(($ary2)|0);
      var $p5=$value4;
      var $6=HEAP32[(($p5)>>2)];
      var $7=$6;
      var $len6=(($7+12)|0);
      var $8=HEAP32[(($len6)>>2)];
      var $cmp7=(($5)|(0))!=(($8)|(0));
      if ($cmp7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $eql_p=0;
      label = 15; break;
    case 8: 
      $eql_p=1;
      $i=0;
      label = 9; break;
    case 9: 
      var $9=$i;
      var $value10=(($ary1)|0);
      var $p11=$value10;
      var $10=HEAP32[(($p11)>>2)];
      var $11=$10;
      var $len12=(($11+12)|0);
      var $12=HEAP32[(($len12)>>2)];
      var $cmp13=(($9)|(0)) < (($12)|(0));
      if ($cmp13) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $13=$mrb_addr;
      var $14=$i;
      _ary_elt($agg_tmp, $ary1, $14);
      var $15=$i;
      _ary_elt($agg_tmp14, $ary2, $15);
      var $call15=_mrb_eql($13, $agg_tmp, $agg_tmp14);
      var $tobool16=(($call15)|(0))!=0;
      if ($tobool16) { label = 12; break; } else { label = 11; break; }
    case 11: 
      $eql_p=0;
      label = 14; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $16=$i;
      var $inc=((($16)+(1))|0);
      $i=$inc;
      label = 9; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $17=$eql_p;
      _mrb_bool_value647($agg_result, $17);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _inspect_ary($agg_result, $mrb, $ary, $list) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 132)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $list; $list = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($list)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($list)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($list)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $i;
      var $s=__stackBase__;
      var $arystr=(__stackBase__)+(12);
      var $head=(__stackBase__)+(24);
      var $sep=(__stackBase__)+(28);
      var $tail=(__stackBase__)+(32);
      var $tmp=(__stackBase__)+(36);
      var $tmp3=(__stackBase__)+(48);
      var $ai;
      var $tmp15=(__stackBase__)+(60);
      var $tmp27=(__stackBase__)+(72);
      var $tmp32=(__stackBase__)+(84);
      var $tmp40=(__stackBase__)+(96);
      var $tmp45=(__stackBase__)+(108);
      var $tmp46=(__stackBase__)+(120);
      $mrb_addr=$mrb;
      var $0=$head;
      assert(1 % 1 === 0);HEAP8[($0)]=HEAP8[((((80432)|0))|0)];
      var $1=$sep;
      assert(2 % 1 === 0);HEAP8[($1)]=HEAP8[((((80428)|0))|0)];HEAP8[((($1)+(1))|0)]=HEAP8[(((((80428)|0))+(1))|0)];
      var $2=$tail;
      assert(1 % 1 === 0);HEAP8[($2)]=HEAP8[((((80424)|0))|0)];
      $i=0;
      label = 3; break;
    case 3: 
      var $3=$i;
      var $value=(($list)|0);
      var $p=$value;
      var $4=HEAP32[(($p)>>2)];
      var $5=$4;
      var $len=(($5+12)|0);
      var $6=HEAP32[(($len)>>2)];
      var $cmp=(($3)|(0)) < (($6)|(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $7=$mrb_addr;
      var $8=$i;
      var $value1=(($list)|0);
      var $p2=$value1;
      var $9=HEAP32[(($p2)>>2)];
      var $10=$9;
      var $ptr=(($10+20)|0);
      var $11=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($11+((($8)*(12))&-1))|0);
      var $call=_mrb_obj_equal($7, $ary, $arrayidx);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $12=$mrb_addr;
      _mrb_str_new($agg_result, $12, ((99608)|0), 5);
      label = 18; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $13=$i;
      var $inc=((($13)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      var $14=$mrb_addr;
      _mrb_ary_push($14, $list, $ary);
      var $15=$mrb_addr;
      _mrb_str_buf_new($tmp, $15, 64);
      var $16=$arystr;
      var $17=$tmp;
      assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
      var $18=$mrb_addr;
      var $arraydecay=(($head)|0);
      _mrb_str_buf_cat($tmp3, $18, $arystr, $arraydecay, 1);
      $i=0;
      label = 9; break;
    case 9: 
      var $19=$i;
      var $value5=(($ary)|0);
      var $p6=$value5;
      var $20=HEAP32[(($p6)>>2)];
      var $21=$20;
      var $len7=(($21+12)|0);
      var $22=HEAP32[(($len7)>>2)];
      var $cmp8=(($19)|(0)) < (($22)|(0));
      if ($cmp8) { label = 10; break; } else { label = 17; break; }
    case 10: 
      var $23=$mrb_addr;
      var $call11=_mrb_gc_arena_save($23);
      $ai=$call11;
      var $24=$i;
      var $cmp12=(($24)|(0)) > 0;
      if ($cmp12) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $25=$mrb_addr;
      var $arraydecay14=(($sep)|0);
      _mrb_str_buf_cat($tmp15, $25, $arystr, $arraydecay14, 2);
      label = 12; break;
    case 12: 
      var $26=$i;
      var $value17=(($ary)|0);
      var $p18=$value17;
      var $27=HEAP32[(($p18)>>2)];
      var $28=$27;
      var $ptr19=(($28+20)|0);
      var $29=HEAP32[(($ptr19)>>2)];
      var $arrayidx20=(($29+((($26)*(12))&-1))|0);
      var $tt=(($arrayidx20+8)|0);
      var $30=HEAP32[(($tt)>>2)];
      var $cmp21=(($30)|(0))==14;
      if ($cmp21) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $31=$mrb_addr;
      var $32=$i;
      var $value23=(($ary)|0);
      var $p24=$value23;
      var $33=HEAP32[(($p24)>>2)];
      var $34=$33;
      var $ptr25=(($34+20)|0);
      var $35=HEAP32[(($ptr25)>>2)];
      var $arrayidx26=(($35+((($32)*(12))&-1))|0);
      _inspect_ary($tmp27, $31, $arrayidx26, $list);
      var $36=$s;
      var $37=$tmp27;
      assert(12 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];HEAP32[((($36)+(8))>>2)]=HEAP32[((($37)+(8))>>2)];
      label = 15; break;
    case 14: 
      var $38=$mrb_addr;
      var $39=$i;
      var $value28=(($ary)|0);
      var $p29=$value28;
      var $40=HEAP32[(($p29)>>2)];
      var $41=$40;
      var $ptr30=(($41+20)|0);
      var $42=HEAP32[(($ptr30)>>2)];
      var $arrayidx31=(($42+((($39)*(12))&-1))|0);
      _mrb_inspect($tmp32, $38, $arrayidx31);
      var $43=$s;
      var $44=$tmp32;
      assert(12 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];
      label = 15; break;
    case 15: 
      var $45=$mrb_addr;
      var $value34=(($s)|0);
      var $p35=$value34;
      var $46=HEAP32[(($p35)>>2)];
      var $47=$46;
      var $ptr36=(($47+20)|0);
      var $48=HEAP32[(($ptr36)>>2)];
      var $value37=(($s)|0);
      var $p38=$value37;
      var $49=HEAP32[(($p38)>>2)];
      var $50=$49;
      var $len39=(($50+12)|0);
      var $51=HEAP32[(($len39)>>2)];
      _mrb_str_buf_cat($tmp40, $45, $arystr, $48, $51);
      var $52=$mrb_addr;
      var $53=$ai;
      _mrb_gc_arena_restore($52, $53);
      label = 16; break;
    case 16: 
      var $54=$i;
      var $inc42=((($54)+(1))|0);
      $i=$inc42;
      label = 9; break;
    case 17: 
      var $55=$mrb_addr;
      var $arraydecay44=(($tail)|0);
      _mrb_str_buf_cat($tmp45, $55, $arystr, $arraydecay44, 1);
      var $56=$mrb_addr;
      _mrb_ary_pop($tmp46, $56, $list);
      var $57=$agg_result;
      var $58=$arystr;
      assert(12 % 1 === 0);HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];HEAP32[((($57)+(4))>>2)]=HEAP32[((($58)+(4))>>2)];HEAP32[((($57)+(8))>>2)]=HEAP32[((($58)+(8))>>2)];
      label = 18; break;
    case 18: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_alloc_mt($h) {
  var label = 0;
  var $h_addr;
  var $sz;
  $h_addr=$h;
  var $0=$h_addr;
  var $n_buckets=(($0)|0);
  var $1=HEAP32[(($n_buckets)>>2)];
  $sz=$1;
  var $2=$h_addr;
  var $n_occupied=(($2+8)|0);
  HEAP32[(($n_occupied)>>2)]=0;
  var $3=$h_addr;
  var $size=(($3+4)|0);
  HEAP32[(($size)>>2)]=0;
  var $4=$sz;
  var $shr=$4 >>> 2;
  var $5=$sz;
  var $shr1=$5 >>> 1;
  var $or=$shr | $shr1;
  var $6=$h_addr;
  var $upper_bound=(($6+12)|0);
  HEAP32[(($upper_bound)>>2)]=$or;
  var $7=$h_addr;
  var $mrb=(($7+40)|0);
  var $8=HEAP32[(($mrb)>>2)];
  var $9=$sz;
  var $mul=$9;
  var $div=Math.floor(((($mul)>>>(0)))/(4));
  var $call=_mrb_malloc($8, $div);
  var $10=$h_addr;
  var $e_flags=(($10+16)|0);
  HEAP32[(($e_flags)>>2)]=$call;
  var $11=$h_addr;
  var $e_flags2=(($11+16)|0);
  var $12=HEAP32[(($e_flags2)>>2)];
  var $13=$sz;
  var $div3=Math.floor(((($13)>>>(0)))/(8));
  var $add_ptr=(($12+$div3)|0);
  var $14=$h_addr;
  var $d_flags=(($14+20)|0);
  HEAP32[(($d_flags)>>2)]=$add_ptr;
  var $15=$h_addr;
  var $e_flags4=(($15+16)|0);
  var $16=HEAP32[(($e_flags4)>>2)];
  var $17=$sz;
  var $div5=Math.floor(((($17)>>>(0)))/(8));
  _kh_fill_flags751($16, -1, $div5);
  var $18=$h_addr;
  var $d_flags6=(($18+20)|0);
  var $19=HEAP32[(($d_flags6)>>2)];
  var $20=$sz;
  var $div7=Math.floor(((($20)>>>(0)))/(8));
  _kh_fill_flags751($19, 0, $div7);
  var $21=$h_addr;
  var $mrb8=(($21+40)|0);
  var $22=HEAP32[(($mrb8)>>2)];
  var $23=$sz;
  var $mul9=($23<<1);
  var $call10=_mrb_malloc($22, $mul9);
  var $24=$call10;
  var $25=$h_addr;
  var $keys=(($25+24)|0);
  HEAP32[(($keys)>>2)]=$24;
  var $26=$h_addr;
  var $mrb11=(($26+40)|0);
  var $27=HEAP32[(($mrb11)>>2)];
  var $28=$sz;
  var $mul12=($28<<2);
  var $call13=_mrb_malloc($27, $mul12);
  var $29=$call13;
  var $30=$h_addr;
  var $vals=(($30+28)|0);
  HEAP32[(($vals)>>2)]=$29;
  var $31=$sz;
  var $sub=((($31)-(1))|0);
  var $32=$h_addr;
  var $mask=(($32+32)|0);
  HEAP32[(($mask)>>2)]=$sub;
  var $33=$sz;
  var $div14=Math.floor(((($33)>>>(0)))/(2));
  var $sub15=((($div14)-(1))|0);
  var $34=$h_addr;
  var $inc=(($34+36)|0);
  HEAP32[(($inc)>>2)]=$sub15;
  return;
}
function _kh_get_mt($h, $key) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $h_addr;
      var $key_addr;
      var $k;
      $h_addr=$h;
      $key_addr=$key;
      var $0=$key_addr;
      var $conv=(($0 << 16) >> 16);
      var $1=$key_addr;
      var $conv1=(($1 << 16) >> 16);
      var $shl=$conv1 << 2;
      var $xor=$conv ^ $shl;
      var $2=$key_addr;
      var $conv2=(($2 << 16) >> 16);
      var $shr=$conv2 >> 2;
      var $xor3=$xor ^ $shr;
      var $3=$h_addr;
      var $mask=(($3+32)|0);
      var $4=HEAP32[(($mask)>>2)];
      var $and=$xor3 & $4;
      $k=$and;
      label = 3; break;
    case 3: 
      var $5=$k;
      var $div=Math.floor(((($5)>>>(0)))/(8));
      var $6=$h_addr;
      var $e_flags=(($6+16)|0);
      var $7=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($7+$div)|0);
      var $8=HEAP8[($arrayidx)];
      var $conv4=(($8)&(255));
      var $9=$k;
      var $rem=((($9)>>>(0)))%(8);
      var $arrayidx5=((114472+$rem)|0);
      var $10=HEAP8[($arrayidx5)];
      var $conv6=(($10)&(255));
      var $and7=$conv4 & $conv6;
      var $tobool=(($and7)|(0))!=0;
      var $lnot=$tobool ^ 1;
      if ($lnot) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $11=$k;
      var $div8=Math.floor(((($11)>>>(0)))/(8));
      var $12=$h_addr;
      var $d_flags=(($12+20)|0);
      var $13=HEAP32[(($d_flags)>>2)];
      var $arrayidx9=(($13+$div8)|0);
      var $14=HEAP8[($arrayidx9)];
      var $conv10=(($14)&(255));
      var $15=$k;
      var $rem11=((($15)>>>(0)))%(8);
      var $arrayidx12=((114472+$rem11)|0);
      var $16=HEAP8[($arrayidx12)];
      var $conv13=(($16)&(255));
      var $and14=$conv10 & $conv13;
      var $tobool15=(($and14)|(0))!=0;
      if ($tobool15) { label = 8; break; } else { label = 5; break; }
    case 5: 
      var $17=$k;
      var $18=$h_addr;
      var $keys=(($18+24)|0);
      var $19=HEAP32[(($keys)>>2)];
      var $arrayidx16=(($19+($17<<1))|0);
      var $20=HEAP16[(($arrayidx16)>>1)];
      var $conv17=(($20 << 16) >> 16);
      var $21=$key_addr;
      var $conv18=(($21 << 16) >> 16);
      var $cmp=(($conv17)|(0))==(($conv18)|(0));
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $22=$k;
      $retval=$22;
      label = 10; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $23=$k;
      var $24=$h_addr;
      var $inc=(($24+36)|0);
      var $25=HEAP32[(($inc)>>2)];
      var $add=((($23)+($25))|0);
      var $26=$h_addr;
      var $mask22=(($26+32)|0);
      var $27=HEAP32[(($mask22)>>2)];
      var $and23=$add & $27;
      $k=$and23;
      label = 3; break;
    case 9: 
      var $28=$h_addr;
      var $n_buckets=(($28)|0);
      var $29=HEAP32[(($n_buckets)>>2)];
      $retval=$29;
      label = 10; break;
    case 10: 
      var $30=$retval;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_del_mt($h, $x) {
  var label = 0;
  var $h_addr;
  var $x_addr;
  $h_addr=$h;
  $x_addr=$x;
  var $0=$x_addr;
  var $rem=((($0)>>>(0)))%(8);
  var $arrayidx=((114472+$rem)|0);
  var $1=HEAP8[($arrayidx)];
  var $conv=(($1)&(255));
  var $2=$x_addr;
  var $div=Math.floor(((($2)>>>(0)))/(8));
  var $3=$h_addr;
  var $d_flags=(($3+20)|0);
  var $4=HEAP32[(($d_flags)>>2)];
  var $arrayidx1=(($4+$div)|0);
  var $5=HEAP8[($arrayidx1)];
  var $conv2=(($5)&(255));
  var $or=$conv2 | $conv;
  var $conv3=(($or) & 255);
  HEAP8[($arrayidx1)]=$conv3;
  var $6=$h_addr;
  var $size=(($6+4)|0);
  var $7=HEAP32[(($size)>>2)];
  var $dec=((($7)-(1))|0);
  HEAP32[(($size)>>2)]=$dec;
  return;
}
function _mrb_gc_mark_mt_size($mrb, $c) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $c_addr;
      var $h;
      $mrb_addr=$mrb;
      $c_addr=$c;
      var $0=$c_addr;
      var $mt=(($0+16)|0);
      var $1=HEAP32[(($mt)>>2)];
      $h=$1;
      var $2=$h;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      var $3=$h;
      var $size=(($3+4)|0);
      var $4=HEAP32[(($size)>>2)];
      $retval=$4;
      label = 5; break;
    case 5: 
      var $5=$retval;
      return $5;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_init_mt_size($mrb, $size) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $size_addr;
      var $h;
      $mrb_addr=$mrb;
      $size_addr=$size;
      var $0=$mrb_addr;
      var $call=_mrb_calloc($0, 1, 44);
      var $1=$call;
      $h=$1;
      var $2=$size_addr;
      var $cmp=(($2)>>>(0)) < 8;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $size_addr=8;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $3=$size_addr;
      var $dec=((($3)-(1))|0);
      $size_addr=$dec;
      var $4=$size_addr;
      var $shr=$4 >>> 1;
      var $5=$size_addr;
      var $or=$5 | $shr;
      $size_addr=$or;
      var $6=$size_addr;
      var $shr1=$6 >>> 2;
      var $7=$size_addr;
      var $or2=$7 | $shr1;
      $size_addr=$or2;
      var $8=$size_addr;
      var $shr3=$8 >>> 4;
      var $9=$size_addr;
      var $or4=$9 | $shr3;
      $size_addr=$or4;
      var $10=$size_addr;
      var $shr5=$10 >>> 8;
      var $11=$size_addr;
      var $or6=$11 | $shr5;
      $size_addr=$or6;
      var $12=$size_addr;
      var $shr7=$12 >>> 16;
      var $13=$size_addr;
      var $or8=$13 | $shr7;
      $size_addr=$or8;
      var $14=$size_addr;
      var $inc=((($14)+(1))|0);
      $size_addr=$inc;
      label = 6; break;
    case 6: 
      var $15=$size_addr;
      var $16=$h;
      var $n_buckets=(($16)|0);
      HEAP32[(($n_buckets)>>2)]=$15;
      var $17=$mrb_addr;
      var $18=$h;
      var $mrb9=(($18+40)|0);
      HEAP32[(($mrb9)>>2)]=$17;
      var $19=$h;
      _kh_alloc_mt($19);
      var $20=$h;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_init_mt($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_kh_init_mt_size($0, 32);
  return $call;
}
function _kh_destroy_mt($h) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $h_addr;
      $h_addr=$h;
      var $0=$h_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$h_addr;
      var $mrb=(($1+40)|0);
      var $2=HEAP32[(($mrb)>>2)];
      var $3=$h_addr;
      var $keys=(($3+24)|0);
      var $4=HEAP32[(($keys)>>2)];
      var $5=$4;
      _mrb_free($2, $5);
      var $6=$h_addr;
      var $mrb1=(($6+40)|0);
      var $7=HEAP32[(($mrb1)>>2)];
      var $8=$h_addr;
      var $vals=(($8+28)|0);
      var $9=HEAP32[(($vals)>>2)];
      var $10=$9;
      _mrb_free($7, $10);
      var $11=$h_addr;
      var $mrb2=(($11+40)|0);
      var $12=HEAP32[(($mrb2)>>2)];
      var $13=$h_addr;
      var $e_flags=(($13+16)|0);
      var $14=HEAP32[(($e_flags)>>2)];
      _mrb_free($12, $14);
      var $15=$h_addr;
      var $mrb3=(($15+40)|0);
      var $16=HEAP32[(($mrb3)>>2)];
      var $17=$h_addr;
      var $18=$17;
      _mrb_free($16, $18);
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_resize_mt($h, $new_n_buckets) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $h_addr;
      var $new_n_buckets_addr;
      var $old_e_flags;
      var $old_keys;
      var $old_vals;
      var $old_n_buckets;
      var $i;
      var $k;
      $h_addr=$h;
      $new_n_buckets_addr=$new_n_buckets;
      var $0=$new_n_buckets_addr;
      var $cmp=(($0)>>>(0)) < 8;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $new_n_buckets_addr=8;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $1=$new_n_buckets_addr;
      var $dec=((($1)-(1))|0);
      $new_n_buckets_addr=$dec;
      var $2=$new_n_buckets_addr;
      var $shr=$2 >>> 1;
      var $3=$new_n_buckets_addr;
      var $or=$3 | $shr;
      $new_n_buckets_addr=$or;
      var $4=$new_n_buckets_addr;
      var $shr1=$4 >>> 2;
      var $5=$new_n_buckets_addr;
      var $or2=$5 | $shr1;
      $new_n_buckets_addr=$or2;
      var $6=$new_n_buckets_addr;
      var $shr3=$6 >>> 4;
      var $7=$new_n_buckets_addr;
      var $or4=$7 | $shr3;
      $new_n_buckets_addr=$or4;
      var $8=$new_n_buckets_addr;
      var $shr5=$8 >>> 8;
      var $9=$new_n_buckets_addr;
      var $or6=$9 | $shr5;
      $new_n_buckets_addr=$or6;
      var $10=$new_n_buckets_addr;
      var $shr7=$10 >>> 16;
      var $11=$new_n_buckets_addr;
      var $or8=$11 | $shr7;
      $new_n_buckets_addr=$or8;
      var $12=$new_n_buckets_addr;
      var $inc=((($12)+(1))|0);
      $new_n_buckets_addr=$inc;
      label = 6; break;
    case 6: 
      var $13=$h_addr;
      var $e_flags=(($13+16)|0);
      var $14=HEAP32[(($e_flags)>>2)];
      $old_e_flags=$14;
      var $15=$h_addr;
      var $keys=(($15+24)|0);
      var $16=HEAP32[(($keys)>>2)];
      $old_keys=$16;
      var $17=$h_addr;
      var $vals=(($17+28)|0);
      var $18=HEAP32[(($vals)>>2)];
      $old_vals=$18;
      var $19=$h_addr;
      var $n_buckets=(($19)|0);
      var $20=HEAP32[(($n_buckets)>>2)];
      $old_n_buckets=$20;
      var $21=$new_n_buckets_addr;
      var $22=$h_addr;
      var $n_buckets9=(($22)|0);
      HEAP32[(($n_buckets9)>>2)]=$21;
      var $23=$h_addr;
      _kh_alloc_mt($23);
      $i=0;
      label = 7; break;
    case 7: 
      var $24=$i;
      var $25=$old_n_buckets;
      var $cmp10=(($24)>>>(0)) < (($25)>>>(0));
      if ($cmp10) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $26=$i;
      var $div=Math.floor(((($26)>>>(0)))/(8));
      var $27=$old_e_flags;
      var $arrayidx=(($27+$div)|0);
      var $28=HEAP8[($arrayidx)];
      var $conv=(($28)&(255));
      var $29=$i;
      var $rem=((($29)>>>(0)))%(8);
      var $arrayidx11=((114472+$rem)|0);
      var $30=HEAP8[($arrayidx11)];
      var $conv12=(($30)&(255));
      var $and=$conv & $conv12;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $31=$h_addr;
      var $32=$i;
      var $33=$old_keys;
      var $arrayidx14=(($33+($32<<1))|0);
      var $34=HEAP16[(($arrayidx14)>>1)];
      var $call=_kh_put_mt($31, $34);
      $k=$call;
      var $35=$i;
      var $36=$old_vals;
      var $arrayidx15=(($36+($35<<2))|0);
      var $37=HEAP32[(($arrayidx15)>>2)];
      var $38=$k;
      var $39=$h_addr;
      var $vals16=(($39+28)|0);
      var $40=HEAP32[(($vals16)>>2)];
      var $arrayidx17=(($40+($38<<2))|0);
      HEAP32[(($arrayidx17)>>2)]=$37;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $41=$i;
      var $inc19=((($41)+(1))|0);
      $i=$inc19;
      label = 7; break;
    case 12: 
      var $42=$h_addr;
      var $mrb=(($42+40)|0);
      var $43=HEAP32[(($mrb)>>2)];
      var $44=$old_e_flags;
      _mrb_free($43, $44);
      var $45=$h_addr;
      var $mrb20=(($45+40)|0);
      var $46=HEAP32[(($mrb20)>>2)];
      var $47=$old_keys;
      var $48=$47;
      _mrb_free($46, $48);
      var $49=$h_addr;
      var $mrb21=(($49+40)|0);
      var $50=HEAP32[(($mrb21)>>2)];
      var $51=$old_vals;
      var $52=$51;
      _mrb_free($50, $52);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_put_mt($h, $key) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $h_addr;
      var $key_addr;
      var $k;
      $h_addr=$h;
      $key_addr=$key;
      var $0=$h_addr;
      var $n_occupied=(($0+8)|0);
      var $1=HEAP32[(($n_occupied)>>2)];
      var $2=$h_addr;
      var $upper_bound=(($2+12)|0);
      var $3=HEAP32[(($upper_bound)>>2)];
      var $cmp=(($1)>>>(0)) >= (($3)>>>(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$h_addr;
      var $5=$h_addr;
      var $n_buckets=(($5)|0);
      var $6=HEAP32[(($n_buckets)>>2)];
      var $mul=($6<<1);
      _kh_resize_mt($4, $mul);
      label = 4; break;
    case 4: 
      var $7=$key_addr;
      var $conv=(($7 << 16) >> 16);
      var $8=$key_addr;
      var $conv1=(($8 << 16) >> 16);
      var $shl=$conv1 << 2;
      var $xor=$conv ^ $shl;
      var $9=$key_addr;
      var $conv2=(($9 << 16) >> 16);
      var $shr=$conv2 >> 2;
      var $xor3=$xor ^ $shr;
      var $10=$h_addr;
      var $mask=(($10+32)|0);
      var $11=HEAP32[(($mask)>>2)];
      var $and=$xor3 & $11;
      $k=$and;
      label = 5; break;
    case 5: 
      var $12=$k;
      var $div=Math.floor(((($12)>>>(0)))/(8));
      var $13=$h_addr;
      var $e_flags=(($13+16)|0);
      var $14=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($14+$div)|0);
      var $15=HEAP8[($arrayidx)];
      var $conv4=(($15)&(255));
      var $16=$k;
      var $rem=((($16)>>>(0)))%(8);
      var $arrayidx5=((114472+$rem)|0);
      var $17=HEAP8[($arrayidx5)];
      var $conv6=(($17)&(255));
      var $and7=$conv4 & $conv6;
      var $tobool=(($and7)|(0))!=0;
      if ($tobool) { var $24 = 1;label = 7; break; } else { label = 6; break; }
    case 6: 
      var $18=$k;
      var $div8=Math.floor(((($18)>>>(0)))/(8));
      var $19=$h_addr;
      var $d_flags=(($19+20)|0);
      var $20=HEAP32[(($d_flags)>>2)];
      var $arrayidx9=(($20+$div8)|0);
      var $21=HEAP8[($arrayidx9)];
      var $conv10=(($21)&(255));
      var $22=$k;
      var $rem11=((($22)>>>(0)))%(8);
      var $arrayidx12=((114472+$rem11)|0);
      var $23=HEAP8[($arrayidx12)];
      var $conv13=(($23)&(255));
      var $and14=$conv10 & $conv13;
      var $tobool15=(($and14)|(0))!=0;
      var $24 = $tobool15;label = 7; break;
    case 7: 
      var $24;
      var $lnot=$24 ^ 1;
      if ($lnot) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $25=$k;
      var $26=$h_addr;
      var $keys=(($26+24)|0);
      var $27=HEAP32[(($keys)>>2)];
      var $arrayidx16=(($27+($25<<1))|0);
      var $28=HEAP16[(($arrayidx16)>>1)];
      var $conv17=(($28 << 16) >> 16);
      var $29=$key_addr;
      var $conv18=(($29 << 16) >> 16);
      var $cmp19=(($conv17)|(0))==(($conv18)|(0));
      if ($cmp19) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $30=$k;
      var $31=$h_addr;
      var $inc=(($31+36)|0);
      var $32=HEAP32[(($inc)>>2)];
      var $add=((($30)+($32))|0);
      var $33=$h_addr;
      var $mask23=(($33+32)|0);
      var $34=HEAP32[(($mask23)>>2)];
      var $and24=$add & $34;
      $k=$and24;
      label = 5; break;
    case 11: 
      var $35=$k;
      var $div25=Math.floor(((($35)>>>(0)))/(8));
      var $36=$h_addr;
      var $e_flags26=(($36+16)|0);
      var $37=HEAP32[(($e_flags26)>>2)];
      var $arrayidx27=(($37+$div25)|0);
      var $38=HEAP8[($arrayidx27)];
      var $conv28=(($38)&(255));
      var $39=$k;
      var $rem29=((($39)>>>(0)))%(8);
      var $arrayidx30=((114472+$rem29)|0);
      var $40=HEAP8[($arrayidx30)];
      var $conv31=(($40)&(255));
      var $and32=$conv28 & $conv31;
      var $tobool33=(($and32)|(0))!=0;
      if ($tobool33) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $41=$key_addr;
      var $42=$k;
      var $43=$h_addr;
      var $keys35=(($43+24)|0);
      var $44=HEAP32[(($keys35)>>2)];
      var $arrayidx36=(($44+($42<<1))|0);
      HEAP16[(($arrayidx36)>>1)]=$41;
      var $45=$k;
      var $rem37=((($45)>>>(0)))%(8);
      var $arrayidx38=((114472+$rem37)|0);
      var $46=HEAP8[($arrayidx38)];
      var $conv39=(($46)&(255));
      var $neg=$conv39 ^ -1;
      var $47=$k;
      var $div40=Math.floor(((($47)>>>(0)))/(8));
      var $48=$h_addr;
      var $e_flags41=(($48+16)|0);
      var $49=HEAP32[(($e_flags41)>>2)];
      var $arrayidx42=(($49+$div40)|0);
      var $50=HEAP8[($arrayidx42)];
      var $conv43=(($50)&(255));
      var $and44=$conv43 & $neg;
      var $conv45=(($and44) & 255);
      HEAP8[($arrayidx42)]=$conv45;
      var $51=$h_addr;
      var $size=(($51+4)|0);
      var $52=HEAP32[(($size)>>2)];
      var $inc46=((($52)+(1))|0);
      HEAP32[(($size)>>2)]=$inc46;
      var $53=$h_addr;
      var $n_occupied47=(($53+8)|0);
      var $54=HEAP32[(($n_occupied47)>>2)];
      var $inc48=((($54)+(1))|0);
      HEAP32[(($n_occupied47)>>2)]=$inc48;
      label = 16; break;
    case 13: 
      var $55=$k;
      var $div49=Math.floor(((($55)>>>(0)))/(8));
      var $56=$h_addr;
      var $d_flags50=(($56+20)|0);
      var $57=HEAP32[(($d_flags50)>>2)];
      var $arrayidx51=(($57+$div49)|0);
      var $58=HEAP8[($arrayidx51)];
      var $conv52=(($58)&(255));
      var $59=$k;
      var $rem53=((($59)>>>(0)))%(8);
      var $arrayidx54=((114472+$rem53)|0);
      var $60=HEAP8[($arrayidx54)];
      var $conv55=(($60)&(255));
      var $and56=$conv52 & $conv55;
      var $tobool57=(($and56)|(0))!=0;
      if ($tobool57) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $61=$key_addr;
      var $62=$k;
      var $63=$h_addr;
      var $keys59=(($63+24)|0);
      var $64=HEAP32[(($keys59)>>2)];
      var $arrayidx60=(($64+($62<<1))|0);
      HEAP16[(($arrayidx60)>>1)]=$61;
      var $65=$k;
      var $rem61=((($65)>>>(0)))%(8);
      var $arrayidx62=((114472+$rem61)|0);
      var $66=HEAP8[($arrayidx62)];
      var $conv63=(($66)&(255));
      var $neg64=$conv63 ^ -1;
      var $67=$k;
      var $div65=Math.floor(((($67)>>>(0)))/(8));
      var $68=$h_addr;
      var $d_flags66=(($68+20)|0);
      var $69=HEAP32[(($d_flags66)>>2)];
      var $arrayidx67=(($69+$div65)|0);
      var $70=HEAP8[($arrayidx67)];
      var $conv68=(($70)&(255));
      var $and69=$conv68 & $neg64;
      var $conv70=(($and69) & 255);
      HEAP8[($arrayidx67)]=$conv70;
      var $71=$h_addr;
      var $size71=(($71+4)|0);
      var $72=HEAP32[(($size71)>>2)];
      var $inc72=((($72)+(1))|0);
      HEAP32[(($size71)>>2)]=$inc72;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $73=$k;
      return $73;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_copy_mt($mrb, $h) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $h_addr;
      var $h2;
      var $k;
      var $k2;
      $mrb_addr=$mrb;
      $h_addr=$h;
      var $0=$mrb_addr;
      var $call=_kh_init_mt($0);
      $h2=$call;
      $k=0;
      label = 3; break;
    case 3: 
      var $1=$k;
      var $2=$h_addr;
      var $n_buckets=(($2)|0);
      var $3=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($1)|(0))!=(($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $4=$k;
      var $div=Math.floor(((($4)>>>(0)))/(8));
      var $5=$h_addr;
      var $e_flags=(($5+16)|0);
      var $6=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($6+$div)|0);
      var $7=HEAP8[($arrayidx)];
      var $conv=(($7)&(255));
      var $8=$k;
      var $rem=((($8)>>>(0)))%(8);
      var $arrayidx1=((114472+$rem)|0);
      var $9=HEAP8[($arrayidx1)];
      var $conv2=(($9)&(255));
      var $and=$conv & $conv2;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 5; break; }
    case 5: 
      var $10=$k;
      var $div3=Math.floor(((($10)>>>(0)))/(8));
      var $11=$h_addr;
      var $d_flags=(($11+20)|0);
      var $12=HEAP32[(($d_flags)>>2)];
      var $arrayidx4=(($12+$div3)|0);
      var $13=HEAP8[($arrayidx4)];
      var $conv5=(($13)&(255));
      var $14=$k;
      var $rem6=((($14)>>>(0)))%(8);
      var $arrayidx7=((114472+$rem6)|0);
      var $15=HEAP8[($arrayidx7)];
      var $conv8=(($15)&(255));
      var $and9=$conv5 & $conv8;
      var $tobool10=(($and9)|(0))!=0;
      if ($tobool10) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $16=$h2;
      var $17=$k;
      var $18=$h_addr;
      var $keys=(($18+24)|0);
      var $19=HEAP32[(($keys)>>2)];
      var $arrayidx11=(($19+($17<<1))|0);
      var $20=HEAP16[(($arrayidx11)>>1)];
      var $call12=_kh_put_mt($16, $20);
      $k2=$call12;
      var $21=$k;
      var $22=$h_addr;
      var $vals=(($22+28)|0);
      var $23=HEAP32[(($vals)>>2)];
      var $arrayidx13=(($23+($21<<2))|0);
      var $24=HEAP32[(($arrayidx13)>>2)];
      var $25=$k2;
      var $26=$h2;
      var $vals14=(($26+28)|0);
      var $27=HEAP32[(($vals14)>>2)];
      var $arrayidx15=(($27+($25<<2))|0);
      HEAP32[(($arrayidx15)>>2)]=$24;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $28=$k;
      var $inc=((($28)+(1))|0);
      $k=$inc;
      label = 3; break;
    case 9: 
      var $29=$h2;
      return $29;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_gc_mark_mt($mrb, $c) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $c_addr;
      var $k;
      var $h;
      var $m;
      $mrb_addr=$mrb;
      $c_addr=$c;
      var $0=$c_addr;
      var $mt=(($0+16)|0);
      var $1=HEAP32[(($mt)>>2)];
      $h=$1;
      var $2=$h;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 13; break;
    case 4: 
      $k=0;
      label = 5; break;
    case 5: 
      var $3=$k;
      var $4=$h;
      var $n_buckets=(($4)|0);
      var $5=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($3)|(0))!=(($5)|(0));
      if ($cmp) { label = 6; break; } else { label = 13; break; }
    case 6: 
      var $6=$k;
      var $div=Math.floor(((($6)>>>(0)))/(8));
      var $7=$h;
      var $e_flags=(($7+16)|0);
      var $8=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($8+$div)|0);
      var $9=HEAP8[($arrayidx)];
      var $conv=(($9)&(255));
      var $10=$k;
      var $rem=((($10)>>>(0)))%(8);
      var $arrayidx1=((114472+$rem)|0);
      var $11=HEAP8[($arrayidx1)];
      var $conv2=(($11)&(255));
      var $and=$conv & $conv2;
      var $tobool3=(($and)|(0))!=0;
      if ($tobool3) { label = 11; break; } else { label = 7; break; }
    case 7: 
      var $12=$k;
      var $div4=Math.floor(((($12)>>>(0)))/(8));
      var $13=$h;
      var $d_flags=(($13+20)|0);
      var $14=HEAP32[(($d_flags)>>2)];
      var $arrayidx5=(($14+$div4)|0);
      var $15=HEAP8[($arrayidx5)];
      var $conv6=(($15)&(255));
      var $16=$k;
      var $rem7=((($16)>>>(0)))%(8);
      var $arrayidx8=((114472+$rem7)|0);
      var $17=HEAP8[($arrayidx8)];
      var $conv9=(($17)&(255));
      var $and10=$conv6 & $conv9;
      var $tobool11=(($and10)|(0))!=0;
      if ($tobool11) { label = 11; break; } else { label = 8; break; }
    case 8: 
      var $18=$k;
      var $19=$h;
      var $vals=(($19+28)|0);
      var $20=HEAP32[(($vals)>>2)];
      var $arrayidx13=(($20+($18<<2))|0);
      var $21=HEAP32[(($arrayidx13)>>2)];
      $m=$21;
      var $22=$m;
      var $tobool14=(($22)|(0))!=0;
      if ($tobool14) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $23=$mrb_addr;
      var $24=$m;
      var $25=$24;
      _mrb_gc_mark($23, $25);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $26=$k;
      var $inc=((($26)+(1))|0);
      $k=$inc;
      label = 5; break;
    case 13: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_gc_free_mt($mrb, $c) {
  var label = 0;
  var $mrb_addr;
  var $c_addr;
  $mrb_addr=$mrb;
  $c_addr=$c;
  var $0=$c_addr;
  var $mt=(($0+16)|0);
  var $1=HEAP32[(($mt)>>2)];
  _kh_destroy_mt($1);
  return;
}
function _mrb_name_class($mrb, $c, $name) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $c_addr;
  var $name_addr;
  var $agg_tmp=__stackBase__;
  $mrb_addr=$mrb;
  $c_addr=$c;
  $name_addr=$name;
  var $0=$mrb_addr;
  var $1=$c_addr;
  var $2=$1;
  var $3=$mrb_addr;
  var $call=_mrb_intern2($3, ((96492)|0), 11);
  var $4=$name_addr;
  _mrb_symbol_value752($agg_tmp, $4);
  _mrb_obj_iv_set($0, $2, $call, $agg_tmp);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_symbol_value752($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=4;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $sym=$value;
      HEAP16[(($sym)>>1)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_define_module_id($mrb, $name) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $name_addr;
  var $m;
  var $agg_tmp=__stackBase__;
  $mrb_addr=$mrb;
  $name_addr=$name;
  var $0=$mrb_addr;
  var $call=_mrb_module_new($0);
  $m=$call;
  var $1=$mrb_addr;
  var $2=$mrb_addr;
  var $object_class=(($2+44)|0);
  var $3=HEAP32[(($object_class)>>2)];
  var $4=$3;
  var $5=$name_addr;
  var $6=$m;
  var $7=$6;
  _mrb_obj_value753($agg_tmp, $7);
  _mrb_obj_iv_set($1, $4, $5, $agg_tmp);
  var $8=$mrb_addr;
  var $9=$m;
  var $10=$name_addr;
  _mrb_name_class($8, $9, $10);
  var $11=$m;
  STACKTOP = __stackBase__;
  return $11;
}
function _mrb_module_new($mrb) {
  var label = 0;
  var $mrb_addr;
  var $m;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $module_class=(($1+52)|0);
  var $2=HEAP32[(($module_class)>>2)];
  var $call=_mrb_obj_alloc($0, 10, $2);
  var $3=$call;
  $m=$3;
  var $4=$mrb_addr;
  var $call1=_kh_init_mt($4);
  var $5=$m;
  var $mt=(($5+16)|0);
  HEAP32[(($mt)>>2)]=$call1;
  var $6=$m;
  return $6;
}
function _mrb_obj_value753($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_class_real($cl) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $cl_addr;
      $cl_addr=$cl;
      label = 3; break;
    case 3: 
      var $0=$cl_addr;
      var $1=$0;
      var $2=HEAP32[(($1)>>2)];
      var $bf_clear=$2 & 255;
      var $cmp=(($bf_clear)|(0))==12;
      if ($cmp) { var $6 = 1;label = 5; break; } else { label = 4; break; }
    case 4: 
      var $3=$cl_addr;
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $bf_clear1=$5 & 255;
      var $cmp2=(($bf_clear1)|(0))==11;
      var $6 = $cmp2;label = 5; break;
    case 5: 
      var $6;
      if ($6) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $7=$cl_addr;
      var $super=(($7+20)|0);
      var $8=HEAP32[(($super)>>2)];
      $cl_addr=$8;
      label = 3; break;
    case 7: 
      var $9=$cl_addr;
      return $9;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_define_module($mrb, $name) {
  var label = 0;
  var $mrb_addr;
  var $name_addr;
  $mrb_addr=$mrb;
  $name_addr=$name;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $2=$name_addr;
  var $call=_mrb_intern754($1, $2);
  var $call1=_mrb_define_module_id($0, $call);
  return $call1;
}
function _mrb_intern754($mrb, $cstr) {
  var label = 0;
  var $mrb_addr;
  var $cstr_addr;
  $mrb_addr=$mrb;
  $cstr_addr=$cstr;
  var $0=$mrb_addr;
  var $1=$cstr_addr;
  var $call=_mrb_intern_cstr($0, $1);
  return $call;
}
function _mrb_class_outer_module($mrb, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $c_addr;
      var $outer=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      $c_addr=$c;
      var $0=$mrb_addr;
      var $1=$c_addr;
      var $2=$1;
      var $3=$mrb_addr;
      var $call=_mrb_intern2($3, ((110040)|0), 9);
      _mrb_obj_iv_get($tmp, $0, $2, $call);
      var $4=$outer;
      var $5=$tmp;
      assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
      var $tt=(($outer+8)|0);
      var $6=HEAP32[(($tt)>>2)];
      var $cmp=(($6)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $value=(($outer)|0);
      var $i=$value;
      var $7=HEAP32[(($i)>>2)];
      var $tobool=(($7)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $retval=0;
      label = 6; break;
    case 5: 
      var $value1=(($outer)|0);
      var $p=$value1;
      var $8=HEAP32[(($p)>>2)];
      var $9=$8;
      $retval=$9;
      label = 6; break;
    case 6: 
      var $10=$retval;
      STACKTOP = __stackBase__;
      return $10;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_vm_define_module($mrb, $outer, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $outer; $outer = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($outer)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($outer)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($outer)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $id_addr;
      var $c;
      var $v=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      $id_addr=$id;
      var $0=$mrb_addr;
      var $1=$id_addr;
      var $call=_mrb_const_defined($0, $outer, $1);
      var $tobool=(($call << 24) >> 24)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$mrb_addr;
      var $3=$id_addr;
      _mrb_const_get($tmp, $2, $outer, $3);
      var $4=$v;
      var $5=$tmp;
      assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
      var $value=(($v)|0);
      var $p=$value;
      var $6=HEAP32[(($p)>>2)];
      var $7=$6;
      $c=$7;
      label = 5; break;
    case 4: 
      var $8=$mrb_addr;
      var $call1=_mrb_module_new($8);
      $c=$call1;
      var $9=$mrb_addr;
      var $10=$c;
      var $11=$id_addr;
      _setup_class($9, $outer, $10, $11);
      label = 5; break;
    case 5: 
      var $12=$c;
      STACKTOP = __stackBase__;
      return $12;
    default: assert(0, "bad label: " + label);
  }
}
function _setup_class($mrb, $outer, $c, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $outer; $outer = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($outer)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($outer)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($outer)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $c_addr;
  var $id_addr;
  var $agg_tmp=__stackBase__;
  $mrb_addr=$mrb;
  $c_addr=$c;
  $id_addr=$id;
  var $0=$mrb_addr;
  var $1=$c_addr;
  var $2=$id_addr;
  _mrb_name_class($0, $1, $2);
  var $3=$mrb_addr;
  var $4=$id_addr;
  var $5=$c_addr;
  var $6=$5;
  _mrb_obj_value753($agg_tmp, $6);
  _mrb_const_set($3, $outer, $4, $agg_tmp);
  var $7=$mrb_addr;
  var $8=$c_addr;
  var $9=$8;
  var $10=$mrb_addr;
  var $call=_mrb_intern2($10, ((110040)|0), 9);
  _mrb_obj_iv_set($7, $9, $call, $outer);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_define_class_id($mrb, $name, $super) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $name_addr;
  var $super_addr;
  var $c;
  var $agg_tmp=__stackBase__;
  $mrb_addr=$mrb;
  $name_addr=$name;
  $super_addr=$super;
  var $0=$mrb_addr;
  var $1=$super_addr;
  var $call=_mrb_class_new($0, $1);
  $c=$call;
  var $2=$mrb_addr;
  var $3=$mrb_addr;
  var $object_class=(($3+44)|0);
  var $4=HEAP32[(($object_class)>>2)];
  var $5=$4;
  var $6=$name_addr;
  var $7=$c;
  var $8=$7;
  _mrb_obj_value753($agg_tmp, $8);
  _mrb_obj_iv_set($2, $5, $6, $agg_tmp);
  var $9=$mrb_addr;
  var $10=$c;
  var $11=$name_addr;
  _mrb_name_class($9, $10, $11);
  var $12=$c;
  STACKTOP = __stackBase__;
  return $12;
}
function _mrb_class_new($mrb, $super) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $super_addr;
      var $c;
      $mrb_addr=$mrb;
      $super_addr=$super;
      var $0=$super_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mrb_addr;
      var $2=$super_addr;
      _mrb_check_inheritable($1, $2);
      label = 4; break;
    case 4: 
      var $3=$mrb_addr;
      var $4=$super_addr;
      var $call=_boot_defclass($3, $4);
      $c=$call;
      var $5=$super_addr;
      var $tobool1=(($5)|(0))!=0;
      if ($tobool1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$c;
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 >>> 11;
      var $bf_clear=$9 & 2097151;
      var $and=$bf_clear & -256;
      var $10=$super_addr;
      var $11=$10;
      var $12=HEAP32[(($11)>>2)];
      var $13=$12 >>> 11;
      var $bf_clear3=$13 & 2097151;
      var $and4=$bf_clear3 & 255;
      var $conv=(($and4) & 255);
      var $conv5=(($conv << 24) >> 24);
      var $or=$and | $conv5;
      var $14=$c;
      var $bf_value=$or & 2097151;
      var $15=$14;
      var $16=$bf_value & 2097151;
      var $17=$16 << 11;
      var $18=HEAP32[(($15)>>2)];
      var $19=$18 & 2047;
      var $20=$19 | $17;
      HEAP32[(($15)>>2)]=$20;
      label = 6; break;
    case 6: 
      var $21=$mrb_addr;
      var $22=$c;
      var $23=$22;
      _prepare_singleton_class($21, $23);
      var $24=$c;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_define_class($mrb, $name, $super) {
  var label = 0;
  var $mrb_addr;
  var $name_addr;
  var $super_addr;
  var $c;
  $mrb_addr=$mrb;
  $name_addr=$name;
  $super_addr=$super;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $2=$name_addr;
  var $call=_mrb_intern754($1, $2);
  var $3=$super_addr;
  var $call1=_mrb_define_class_id($0, $call, $3);
  $c=$call1;
  var $4=$c;
  return $4;
}
function _mrb_vm_define_class($mrb, $outer, $super, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $outer; $outer = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($outer)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($outer)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($outer)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $super; $super = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($super)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($super)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($super)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $id_addr;
      var $c;
      var $s;
      var $v=__stackBase__;
      var $agg_tmp=(__stackBase__)+(12);
      var $agg_tmp36=(__stackBase__)+(24);
      var $agg_tmp37=(__stackBase__)+(36);
      var $tmp=(__stackBase__)+(48);
      $mrb_addr=$mrb;
      $id_addr=$id;
      var $0=$mrb_addr;
      var $1=$id_addr;
      var $call=_mrb_const_defined($0, $outer, $1);
      var $tobool=(($call << 24) >> 24)!=0;
      if ($tobool) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $2=$mrb_addr;
      var $3=$id_addr;
      _mrb_const_get($v, $2, $outer, $3);
      var $4=$mrb_addr;
      _mrb_check_type($4, $v, 9);
      var $value=(($v)|0);
      var $p=$value;
      var $5=HEAP32[(($p)>>2)];
      var $6=$5;
      $c=$6;
      var $tt=(($super+8)|0);
      var $7=HEAP32[(($tt)>>2)];
      var $cmp=(($7)|(0))==0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $value1=(($super)|0);
      var $i=$value1;
      var $8=HEAP32[(($i)>>2)];
      var $tobool2=(($8)|(0))!=0;
      if ($tobool2) { label = 5; break; } else { label = 11; break; }
    case 5: 
      var $tt4=(($super+8)|0);
      var $9=HEAP32[(($tt4)>>2)];
      var $cmp5=(($9)|(0))!=9;
      if ($cmp5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $10=$mrb_addr;
      var $11=$mrb_addr;
      var $call7=_mrb_class_get($11, ((105900)|0));
      _mrb_raisef($10, $call7, ((102952)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($super)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($super)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($super)+(8))>>2)],tempInt));
      label = 7; break;
    case 7: 
      var $12=$c;
      var $super8=(($12+20)|0);
      var $13=HEAP32[(($super8)>>2)];
      var $tobool9=(($13)|(0))!=0;
      if ($tobool9) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $value10=(($super)|0);
      var $p11=$value10;
      var $14=HEAP32[(($p11)>>2)];
      var $15=$14;
      var $16=$c;
      var $super12=(($16+20)|0);
      var $17=HEAP32[(($super12)>>2)];
      var $call13=_mrb_class_real($17);
      var $cmp14=(($15)|(0))!=(($call13)|(0));
      if ($cmp14) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $18=$mrb_addr;
      var $19=$mrb_addr;
      var $call16=_mrb_class_get($19, ((105900)|0));
      var $20=$mrb_addr;
      var $21=$id_addr;
      _mrb_sym2str($agg_tmp, $20, $21);
      _mrb_raisef($18, $call16, ((100208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $22=$c;
      $retval=$22;
      label = 19; break;
    case 12: 
      var $tt20=(($super+8)|0);
      var $23=HEAP32[(($tt20)>>2)];
      var $cmp21=(($23)|(0))==0;
      if ($cmp21) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $value23=(($super)|0);
      var $i24=$value23;
      var $24=HEAP32[(($i24)>>2)];
      var $tobool25=(($24)|(0))!=0;
      if ($tobool25) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $tt27=(($super+8)|0);
      var $25=HEAP32[(($tt27)>>2)];
      var $cmp28=(($25)|(0))!=9;
      if ($cmp28) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $26=$mrb_addr;
      var $27=$mrb_addr;
      var $call30=_mrb_class_get($27, ((105900)|0));
      _mrb_raisef($26, $call30, ((102952)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($super)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($super)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($super)+(8))>>2)],tempInt));
      label = 16; break;
    case 16: 
      var $value32=(($super)|0);
      var $p33=$value32;
      var $28=HEAP32[(($p33)>>2)];
      var $29=$28;
      $s=$29;
      label = 18; break;
    case 17: 
      var $30=$mrb_addr;
      var $object_class=(($30+44)|0);
      var $31=HEAP32[(($object_class)>>2)];
      $s=$31;
      label = 18; break;
    case 18: 
      var $32=$mrb_addr;
      var $33=$s;
      var $call35=_mrb_class_new($32, $33);
      $c=$call35;
      var $34=$mrb_addr;
      var $35=$c;
      var $36=$id_addr;
      _setup_class($34, $outer, $35, $36);
      var $37=$mrb_addr;
      var $38=$s;
      var $39=$38;
      _mrb_obj_value753($agg_tmp36, $39);
      var $40=$c;
      var $41=$40;
      _mrb_obj_value753($agg_tmp37, $41);
      _mrb_funcall($tmp, $37, $agg_tmp36, ((97640)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp37)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp37)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp37)+(8))>>2)],tempInt));
      var $42=$c;
      $retval=$42;
      label = 19; break;
    case 19: 
      var $43=$retval;
      STACKTOP = __stackBase__;
      return $43;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_class_get($mrb, $name) {
  var label = 0;
  var $mrb_addr;
  var $name_addr;
  $mrb_addr=$mrb;
  $name_addr=$name;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $object_class=(($1+44)|0);
  var $2=HEAP32[(($object_class)>>2)];
  var $3=$mrb_addr;
  var $4=$name_addr;
  var $call=_mrb_intern754($3, $4);
  var $call1=_class_from_sym($0, $2, $call);
  return $call1;
}
function _class_from_sym($mrb, $klass, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $klass_addr;
      var $id_addr;
      var $c=__stackBase__;
      var $agg_tmp=(__stackBase__)+(12);
      var $agg_tmp3=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      $klass_addr=$klass;
      $id_addr=$id;
      var $0=$mrb_addr;
      var $1=$klass_addr;
      var $2=$1;
      _mrb_obj_value753($agg_tmp, $2);
      var $3=$id_addr;
      _mrb_const_get($c, $0, $agg_tmp, $3);
      var $tt=(($c+8)|0);
      var $4=HEAP32[(($tt)>>2)];
      var $cmp=(($4)|(0))!=10;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $tt1=(($c+8)|0);
      var $5=HEAP32[(($tt1)>>2)];
      var $cmp2=(($5)|(0))!=9;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$mrb_addr;
      var $7=$mrb_addr;
      var $call=_mrb_class_get($7, ((105900)|0));
      var $8=$mrb_addr;
      var $9=$id_addr;
      _mrb_sym2str($agg_tmp3, $8, $9);
      _mrb_raisef($6, $call, ((113580)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp3)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      var $value=(($c)|0);
      var $p=$value;
      var $10=HEAP32[(($p)>>2)];
      var $11=$10;
      STACKTOP = __stackBase__;
      return $11;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_define_class_under($mrb, $outer, $name, $super) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $outer_addr;
      var $name_addr;
      var $super_addr;
      var $c;
      var $id;
      var $agg_tmp=__stackBase__;
      $mrb_addr=$mrb;
      $outer_addr=$outer;
      $name_addr=$name;
      $super_addr=$super;
      var $0=$mrb_addr;
      var $1=$name_addr;
      var $call=_mrb_intern754($0, $1);
      $id=$call;
      var $2=$mrb_addr;
      var $3=$outer_addr;
      var $4=$id;
      var $call1=_mrb_const_defined_at($2, $3, $4);
      var $tobool=(($call1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $5=$mrb_addr;
      var $6=$outer_addr;
      var $7=$id;
      var $call2=_class_from_sym($5, $6, $7);
      $c=$call2;
      var $8=$c;
      var $super3=(($8+20)|0);
      var $9=HEAP32[(($super3)>>2)];
      var $call4=_mrb_class_real($9);
      var $10=$super_addr;
      var $cmp=(($call4)|(0))!=(($10)|(0));
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $11=$mrb_addr;
      var $12=$id;
      var $13=$name_addr;
      _mrb_name_error($11, $12, ((96372)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$13,tempInt));
      label = 5; break;
    case 5: 
      var $14=$c;
      $retval=$14;
      label = 9; break;
    case 6: 
      var $15=$super_addr;
      var $tobool7=(($15)|(0))!=0;
      if ($tobool7) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $16=$mrb_addr;
      var $17=$outer_addr;
      var $18=$name_addr;
      _mrb_warn($16, ((95220)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$17,HEAP32[(((tempInt)+(4))>>2)]=$18,tempInt));
      label = 8; break;
    case 8: 
      var $19=$mrb_addr;
      var $20=$super_addr;
      var $call10=_mrb_class_new($19, $20);
      $c=$call10;
      var $21=$mrb_addr;
      var $22=$outer_addr;
      var $23=$22;
      _mrb_obj_value753($agg_tmp, $23);
      var $24=$c;
      var $25=$id;
      _setup_class($21, $agg_tmp, $24, $25);
      var $26=$c;
      $retval=$26;
      label = 9; break;
    case 9: 
      var $27=$retval;
      STACKTOP = __stackBase__;
      return $27;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_define_method_raw($mrb, $c, $mid, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $c_addr;
      var $mid_addr;
      var $p_addr;
      var $h;
      var $k;
      $mrb_addr=$mrb;
      $c_addr=$c;
      $mid_addr=$mid;
      $p_addr=$p;
      var $0=$c_addr;
      var $mt=(($0+16)|0);
      var $1=HEAP32[(($mt)>>2)];
      $h=$1;
      var $2=$h;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=$mrb_addr;
      var $call=_kh_init_mt($3);
      var $4=$c_addr;
      var $mt1=(($4+16)|0);
      HEAP32[(($mt1)>>2)]=$call;
      $h=$call;
      label = 4; break;
    case 4: 
      var $5=$h;
      var $6=$mid_addr;
      var $call2=_kh_put_mt($5, $6);
      $k=$call2;
      var $7=$p_addr;
      var $8=$k;
      var $9=$h;
      var $vals=(($9+28)|0);
      var $10=HEAP32[(($vals)>>2)];
      var $arrayidx=(($10+($8<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$7;
      var $11=$p_addr;
      var $tobool3=(($11)|(0))!=0;
      if ($tobool3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $12=$mrb_addr;
      var $13=$c_addr;
      var $14=$13;
      var $15=$p_addr;
      var $16=$15;
      _mrb_field_write_barrier($12, $14, $16);
      label = 6; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_define_method_id($mrb, $c, $mid, $func, $aspec) {
  var label = 0;
  var $mrb_addr;
  var $c_addr;
  var $mid_addr;
  var $func_addr;
  var $aspec_addr;
  var $p;
  var $ai;
  $mrb_addr=$mrb;
  $c_addr=$c;
  $mid_addr=$mid;
  $func_addr=$func;
  $aspec_addr=$aspec;
  var $0=$mrb_addr;
  var $call=_mrb_gc_arena_save($0);
  $ai=$call;
  var $1=$mrb_addr;
  var $2=$func_addr;
  var $call1=_mrb_proc_new_cfunc($1, $2);
  $p=$call1;
  var $3=$c_addr;
  var $4=$p;
  var $target_class=(($4+16)|0);
  HEAP32[(($target_class)>>2)]=$3;
  var $5=$mrb_addr;
  var $6=$c_addr;
  var $7=$mid_addr;
  var $8=$p;
  _mrb_define_method_raw($5, $6, $7, $8);
  var $9=$mrb_addr;
  var $10=$ai;
  _mrb_gc_arena_restore($9, $10);
  return;
}
function _mrb_define_method($mrb, $c, $name, $func, $aspec) {
  var label = 0;
  var $mrb_addr;
  var $c_addr;
  var $name_addr;
  var $func_addr;
  var $aspec_addr;
  $mrb_addr=$mrb;
  $c_addr=$c;
  $name_addr=$name;
  $func_addr=$func;
  $aspec_addr=$aspec;
  var $0=$mrb_addr;
  var $1=$c_addr;
  var $2=$mrb_addr;
  var $3=$name_addr;
  var $call=_mrb_intern754($2, $3);
  var $4=$func_addr;
  var $5=$aspec_addr;
  _mrb_define_method_id($0, $1, $call, $4, $5);
  return;
}
function _mrb_define_method_vm($mrb, $c, $name, $body) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $body; $body = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($body)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($body)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($body)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $c_addr;
      var $name_addr;
      var $h;
      var $k;
      var $p;
      $mrb_addr=$mrb;
      $c_addr=$c;
      $name_addr=$name;
      var $0=$c_addr;
      var $mt=(($0+16)|0);
      var $1=HEAP32[(($mt)>>2)];
      $h=$1;
      var $2=$h;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=$mrb_addr;
      var $call=_kh_init_mt($3);
      var $4=$c_addr;
      var $mt1=(($4+16)|0);
      HEAP32[(($mt1)>>2)]=$call;
      $h=$call;
      label = 4; break;
    case 4: 
      var $5=$h;
      var $6=$name_addr;
      var $call2=_kh_put_mt($5, $6);
      $k=$call2;
      var $value=(($body)|0);
      var $p3=$value;
      var $7=HEAP32[(($p3)>>2)];
      var $8=$7;
      $p=$8;
      var $9=$p;
      var $10=$k;
      var $11=$h;
      var $vals=(($11+28)|0);
      var $12=HEAP32[(($vals)>>2)];
      var $arrayidx=(($12+($10<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$9;
      var $13=$p;
      var $tobool4=(($13)|(0))!=0;
      if ($tobool4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $14=$mrb_addr;
      var $15=$c_addr;
      var $16=$15;
      var $17=$p;
      var $18=$17;
      _mrb_field_write_barrier($14, $16, $18);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_get_args($mrb, $format, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 224)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $format_addr;
      var $c=__stackBase__;
      var $i;
      var $sp;
      var $ap=(__stackBase__)+(4);
      var $argc;
      var $opt;
      var $a;
      var $p14;
      var $p21;
      var $tmp=(__stackBase__)+(8);
      var $p32;
      var $tmp39=(__stackBase__)+(20);
      var $p44;
      var $tmp51=(__stackBase__)+(32);
      var $ss=(__stackBase__)+(44);
      var $s;
      var $ps;
      var $pl;
      var $tmp67=(__stackBase__)+(56);
      var $ss76=(__stackBase__)+(68);
      var $s78;
      var $ps80;
      var $tmp87=(__stackBase__)+(80);
      var $aa=(__stackBase__)+(92);
      var $a104;
      var $pb;
      var $pl107;
      var $tmp116=(__stackBase__)+(104);
      var $p125;
      var $tmp141=(__stackBase__)+(116);
      var $tmp142=(__stackBase__)+(128);
      var $p151;
      var $f163;
      var $tmp178=(__stackBase__)+(140);
      var $tmp179=(__stackBase__)+(152);
      var $boolp;
      var $b=(__stackBase__)+(164);
      var $symp;
      var $ss209=(__stackBase__)+(176);
      var $agg_tmp=(__stackBase__)+(188);
      var $obj=(__stackBase__)+(200);
      var $p230;
      var $bp;
      var $var;
      var $pl256;
      var $agg_tmp273=(__stackBase__)+(212);
      $mrb_addr=$mrb;
      $format_addr=$format;
      $i=0;
      var $0=$mrb_addr;
      var $c1=(($0+8)|0);
      var $1=HEAP32[(($c1)>>2)];
      var $stack=(($1+4)|0);
      var $2=HEAP32[(($stack)>>2)];
      var $add_ptr=(($2+12)|0);
      $sp=$add_ptr;
      var $3=$mrb_addr;
      var $c2=(($3+8)|0);
      var $4=HEAP32[(($c2)>>2)];
      var $ci=(($4+16)|0);
      var $5=HEAP32[(($ci)>>2)];
      var $argc3=(($5+16)|0);
      var $6=HEAP32[(($argc3)>>2)];
      $argc=$6;
      $opt=0;
      var $ap4=$ap;
      HEAP32[(($ap4)>>2)]=varrp;
      var $7=$argc;
      var $cmp=(($7)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$mrb_addr;
      var $c5=(($8+8)|0);
      var $9=HEAP32[(($c5)>>2)];
      var $stack6=(($9+4)|0);
      var $10=HEAP32[(($stack6)>>2)];
      var $arrayidx=(($10+12)|0);
      var $value=(($arrayidx)|0);
      var $p=$value;
      var $11=HEAP32[(($p)>>2)];
      var $12=$11;
      $a=$12;
      var $13=$a;
      var $len=(($13+12)|0);
      var $14=HEAP32[(($len)>>2)];
      $argc=$14;
      var $15=$a;
      var $ptr=(($15+20)|0);
      var $16=HEAP32[(($ptr)>>2)];
      $sp=$16;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $17=$format_addr;
      var $incdec_ptr=(($17+1)|0);
      $format_addr=$incdec_ptr;
      var $18=HEAP8[($17)];
      HEAP8[($c)]=$18;
      var $tobool=(($18 << 24) >> 24)!=0;
      if ($tobool) { label = 6; break; } else { label = 80; break; }
    case 6: 
      var $19=HEAP8[($c)];
      var $conv=(($19 << 24) >> 24);
      if ((($conv)|(0))==124 | (($conv)|(0))==42 | (($conv)|(0))==38) {
        label = 7; break;
      }
      else {
      label = 8; break;
      }
    case 7: 
      label = 12; break;
    case 8: 
      var $20=$argc;
      var $21=$i;
      var $cmp7=(($20)|(0)) <= (($21)|(0));
      if ($cmp7) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $22=$opt;
      var $tobool9=(($22)|(0))!=0;
      if ($tobool9) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $23=$mrb_addr;
      var $24=$mrb_addr;
      var $call=_mrb_class_get($24, ((94388)|0));
      _mrb_raise($23, $call, ((93456)|0));
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $25=HEAP8[($c)];
      var $conv12=(($25 << 24) >> 24);
      if ((($conv12)|(0))==111) {
        label = 13; break;
      }
      else if ((($conv12)|(0))==83) {
        label = 16; break;
      }
      else if ((($conv12)|(0))==65) {
        label = 19; break;
      }
      else if ((($conv12)|(0))==72) {
        label = 22; break;
      }
      else if ((($conv12)|(0))==115) {
        label = 25; break;
      }
      else if ((($conv12)|(0))==122) {
        label = 28; break;
      }
      else if ((($conv12)|(0))==97) {
        label = 33; break;
      }
      else if ((($conv12)|(0))==102) {
        label = 36; break;
      }
      else if ((($conv12)|(0))==105) {
        label = 44; break;
      }
      else if ((($conv12)|(0))==98) {
        label = 55; break;
      }
      else if ((($conv12)|(0))==110) {
        label = 58; break;
      }
      else if ((($conv12)|(0))==38) {
        label = 67; break;
      }
      else if ((($conv12)|(0))==124) {
        label = 71; break;
      }
      else if ((($conv12)|(0))==42) {
        label = 72; break;
      }
      else {
      label = 78; break;
      }
    case 13: 
      var $ap_cur=HEAP32[(($ap)>>2)];
      var $26=$ap_cur;
      var $ap_next=(($ap_cur+4)|0);
      HEAP32[(($ap)>>2)]=$ap_next;
      var $27=HEAP32[(($26)>>2)];
      $p14=$27;
      var $28=$i;
      var $29=$argc;
      var $cmp15=(($28)|(0)) < (($29)|(0));
      if ($cmp15) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $30=$p14;
      var $31=$sp;
      var $incdec_ptr18=(($31+12)|0);
      $sp=$incdec_ptr18;
      var $32=$30;
      var $33=$31;
      assert(12 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];
      var $34=$i;
      var $inc=((($34)+(1))|0);
      $i=$inc;
      label = 15; break;
    case 15: 
      label = 79; break;
    case 16: 
      var $ap_cur22=HEAP32[(($ap)>>2)];
      var $35=$ap_cur22;
      var $ap_next23=(($ap_cur22+4)|0);
      HEAP32[(($ap)>>2)]=$ap_next23;
      var $36=HEAP32[(($35)>>2)];
      $p21=$36;
      var $37=$i;
      var $38=$argc;
      var $cmp24=(($37)|(0)) < (($38)|(0));
      if ($cmp24) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $39=$p21;
      var $40=$mrb_addr;
      var $41=$sp;
      var $incdec_ptr27=(($41+12)|0);
      $sp=$incdec_ptr27;
      _to_str($tmp, $40, $41);
      var $42=$39;
      var $43=$tmp;
      assert(12 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];HEAP32[((($42)+(8))>>2)]=HEAP32[((($43)+(8))>>2)];
      var $44=$i;
      var $inc28=((($44)+(1))|0);
      $i=$inc28;
      label = 18; break;
    case 18: 
      label = 79; break;
    case 19: 
      var $ap_cur33=HEAP32[(($ap)>>2)];
      var $45=$ap_cur33;
      var $ap_next34=(($ap_cur33+4)|0);
      HEAP32[(($ap)>>2)]=$ap_next34;
      var $46=HEAP32[(($45)>>2)];
      $p32=$46;
      var $47=$i;
      var $48=$argc;
      var $cmp35=(($47)|(0)) < (($48)|(0));
      if ($cmp35) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $49=$p32;
      var $50=$mrb_addr;
      var $51=$sp;
      var $incdec_ptr38=(($51+12)|0);
      $sp=$incdec_ptr38;
      _to_ary($tmp39, $50, $51);
      var $52=$49;
      var $53=$tmp39;
      assert(12 % 1 === 0);HEAP32[(($52)>>2)]=HEAP32[(($53)>>2)];HEAP32[((($52)+(4))>>2)]=HEAP32[((($53)+(4))>>2)];HEAP32[((($52)+(8))>>2)]=HEAP32[((($53)+(8))>>2)];
      var $54=$i;
      var $inc40=((($54)+(1))|0);
      $i=$inc40;
      label = 21; break;
    case 21: 
      label = 79; break;
    case 22: 
      var $ap_cur45=HEAP32[(($ap)>>2)];
      var $55=$ap_cur45;
      var $ap_next46=(($ap_cur45+4)|0);
      HEAP32[(($ap)>>2)]=$ap_next46;
      var $56=HEAP32[(($55)>>2)];
      $p44=$56;
      var $57=$i;
      var $58=$argc;
      var $cmp47=(($57)|(0)) < (($58)|(0));
      if ($cmp47) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $59=$p44;
      var $60=$mrb_addr;
      var $61=$sp;
      var $incdec_ptr50=(($61+12)|0);
      $sp=$incdec_ptr50;
      _to_hash($tmp51, $60, $61);
      var $62=$59;
      var $63=$tmp51;
      assert(12 % 1 === 0);HEAP32[(($62)>>2)]=HEAP32[(($63)>>2)];HEAP32[((($62)+(4))>>2)]=HEAP32[((($63)+(4))>>2)];HEAP32[((($62)+(8))>>2)]=HEAP32[((($63)+(8))>>2)];
      var $64=$i;
      var $inc52=((($64)+(1))|0);
      $i=$inc52;
      label = 24; break;
    case 24: 
      label = 79; break;
    case 25: 
      $ps=0;
      $pl=0;
      var $ap_cur59=HEAP32[(($ap)>>2)];
      var $65=$ap_cur59;
      var $ap_next60=(($ap_cur59+4)|0);
      HEAP32[(($ap)>>2)]=$ap_next60;
      var $66=HEAP32[(($65)>>2)];
      $ps=$66;
      var $ap_cur61=HEAP32[(($ap)>>2)];
      var $67=$ap_cur61;
      var $ap_next62=(($ap_cur61+4)|0);
      HEAP32[(($ap)>>2)]=$ap_next62;
      var $68=HEAP32[(($67)>>2)];
      $pl=$68;
      var $69=$i;
      var $70=$argc;
      var $cmp63=(($69)|(0)) < (($70)|(0));
      if ($cmp63) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $71=$mrb_addr;
      var $72=$sp;
      var $incdec_ptr66=(($72+12)|0);
      $sp=$incdec_ptr66;
      _to_str($tmp67, $71, $72);
      var $73=$ss;
      var $74=$tmp67;
      assert(12 % 1 === 0);HEAP32[(($73)>>2)]=HEAP32[(($74)>>2)];HEAP32[((($73)+(4))>>2)]=HEAP32[((($74)+(4))>>2)];HEAP32[((($73)+(8))>>2)]=HEAP32[((($74)+(8))>>2)];
      var $value68=(($ss)|0);
      var $p69=$value68;
      var $75=HEAP32[(($p69)>>2)];
      var $76=$75;
      $s=$76;
      var $77=$s;
      var $ptr70=(($77+20)|0);
      var $78=HEAP32[(($ptr70)>>2)];
      var $79=$ps;
      HEAP32[(($79)>>2)]=$78;
      var $80=$s;
      var $len71=(($80+12)|0);
      var $81=HEAP32[(($len71)>>2)];
      var $82=$pl;
      HEAP32[(($82)>>2)]=$81;
      var $83=$i;
      var $inc72=((($83)+(1))|0);
      $i=$inc72;
      label = 27; break;
    case 27: 
      label = 79; break;
    case 28: 
      var $ap_cur81=HEAP32[(($ap)>>2)];
      var $84=$ap_cur81;
      var $ap_next82=(($ap_cur81+4)|0);
      HEAP32[(($ap)>>2)]=$ap_next82;
      var $85=HEAP32[(($84)>>2)];
      $ps80=$85;
      var $86=$i;
      var $87=$argc;
      var $cmp83=(($86)|(0)) < (($87)|(0));
      if ($cmp83) { label = 29; break; } else { label = 32; break; }
    case 29: 
      var $88=$mrb_addr;
      var $89=$sp;
      var $incdec_ptr86=(($89+12)|0);
      $sp=$incdec_ptr86;
      _to_str($tmp87, $88, $89);
      var $90=$ss76;
      var $91=$tmp87;
      assert(12 % 1 === 0);HEAP32[(($90)>>2)]=HEAP32[(($91)>>2)];HEAP32[((($90)+(4))>>2)]=HEAP32[((($91)+(4))>>2)];HEAP32[((($90)+(8))>>2)]=HEAP32[((($91)+(8))>>2)];
      var $value88=(($ss76)|0);
      var $p89=$value88;
      var $92=HEAP32[(($p89)>>2)];
      var $93=$92;
      $s78=$93;
      var $94=$s78;
      var $ptr90=(($94+20)|0);
      var $95=HEAP32[(($ptr90)>>2)];
      var $call91=_strlen($95);
      var $96=$s78;
      var $len92=(($96+12)|0);
      var $97=HEAP32[(($len92)>>2)];
      var $cmp93=(($call91)|(0))!=(($97)|(0));
      if ($cmp93) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $98=$mrb_addr;
      var $99=$mrb_addr;
      var $call96=_mrb_class_get($99, ((94388)|0));
      _mrb_raise($98, $call96, ((113400)|0));
      label = 31; break;
    case 31: 
      var $100=$s78;
      var $ptr98=(($100+20)|0);
      var $101=HEAP32[(($ptr98)>>2)];
      var $102=$ps80;
      HEAP32[(($102)>>2)]=$101;
      var $103=$i;
      var $inc99=((($103)+(1))|0);
      $i=$inc99;
      label = 32; break;
    case 32: 
      label = 79; break;
    case 33: 
      var $ap_cur108=HEAP32[(($ap)>>2)];
      var $104=$ap_cur108;
      var $ap_next109=(($ap_cur108+4)|0);
      HEAP32[(($ap)>>2)]=$ap_next109;
      var $105=HEAP32[(($104)>>2)];
      $pb=$105;
      var $ap_cur110=HEAP32[(($ap)>>2)];
      var $106=$ap_cur110;
      var $ap_next111=(($ap_cur110+4)|0);
      HEAP32[(($ap)>>2)]=$ap_next111;
      var $107=HEAP32[(($106)>>2)];
      $pl107=$107;
      var $108=$i;
      var $109=$argc;
      var $cmp112=(($108)|(0)) < (($109)|(0));
      if ($cmp112) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $110=$mrb_addr;
      var $111=$sp;
      var $incdec_ptr115=(($111+12)|0);
      $sp=$incdec_ptr115;
      _to_ary($tmp116, $110, $111);
      var $112=$aa;
      var $113=$tmp116;
      assert(12 % 1 === 0);HEAP32[(($112)>>2)]=HEAP32[(($113)>>2)];HEAP32[((($112)+(4))>>2)]=HEAP32[((($113)+(4))>>2)];HEAP32[((($112)+(8))>>2)]=HEAP32[((($113)+(8))>>2)];
      var $value117=(($aa)|0);
      var $p118=$value117;
      var $114=HEAP32[(($p118)>>2)];
      var $115=$114;
      $a104=$115;
      var $116=$a104;
      var $ptr119=(($116+20)|0);
      var $117=HEAP32[(($ptr119)>>2)];
      var $118=$pb;
      HEAP32[(($118)>>2)]=$117;
      var $119=$a104;
      var $len120=(($119+12)|0);
      var $120=HEAP32[(($len120)>>2)];
      var $121=$pl107;
      HEAP32[(($121)>>2)]=$120;
      var $122=$i;
      var $inc121=((($122)+(1))|0);
      $i=$inc121;
      label = 35; break;
    case 35: 
      label = 79; break;
    case 36: 
      var $ap_cur126=HEAP32[(($ap)>>2)];
      var $123=$ap_cur126;
      var $ap_next127=(($ap_cur126+4)|0);
      HEAP32[(($ap)>>2)]=$ap_next127;
      var $124=HEAP32[(($123)>>2)];
      $p125=$124;
      var $125=$i;
      var $126=$argc;
      var $cmp128=(($125)|(0)) < (($126)|(0));
      if ($cmp128) { label = 37; break; } else { label = 43; break; }
    case 37: 
      var $127=$sp;
      var $tt=(($127+8)|0);
      var $128=HEAP32[(($tt)>>2)];
      if ((($128)|(0))==6) {
        label = 38; break;
      }
      else if ((($128)|(0))==3) {
        label = 39; break;
      }
      else if ((($128)|(0))==16) {
        label = 40; break;
      }
      else {
      label = 41; break;
      }
    case 38: 
      var $129=$sp;
      var $value132=(($129)|0);
      var $f=$value132;
      var $130=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $131=$p125;
      (HEAPF64[(tempDoublePtr)>>3]=$130,HEAP32[(($131)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($131)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 42; break;
    case 39: 
      var $132=$sp;
      var $value134=(($132)|0);
      var $i135=$value134;
      var $133=HEAP32[(($i135)>>2)];
      var $conv136=(($133)|(0));
      var $134=$p125;
      (HEAPF64[(tempDoublePtr)>>3]=$conv136,HEAP32[(($134)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($134)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 42; break;
    case 40: 
      var $135=$mrb_addr;
      var $136=$mrb_addr;
      var $call138=_mrb_class_get($136, ((105900)|0));
      _mrb_raise($135, $call138, ((112636)|0));
      label = 42; break;
    case 41: 
      var $137=$mrb_addr;
      var $138=$sp;
      _mrb_convert_type($tmp142, $137, $138, 6, ((111944)|0), ((111368)|0));
      var $139=$tmp141;
      var $140=$tmp142;
      assert(12 % 1 === 0);HEAP32[(($139)>>2)]=HEAP32[(($140)>>2)];HEAP32[((($139)+(4))>>2)]=HEAP32[((($140)+(4))>>2)];HEAP32[((($139)+(8))>>2)]=HEAP32[((($140)+(8))>>2)];
      var $value143=(($tmp141)|0);
      var $f144=$value143;
      var $141=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f144)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f144)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $142=$p125;
      (HEAPF64[(tempDoublePtr)>>3]=$141,HEAP32[(($142)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($142)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 42; break;
    case 42: 
      var $143=$sp;
      var $incdec_ptr146=(($143+12)|0);
      $sp=$incdec_ptr146;
      var $144=$i;
      var $inc147=((($144)+(1))|0);
      $i=$inc147;
      label = 43; break;
    case 43: 
      label = 79; break;
    case 44: 
      var $ap_cur152=HEAP32[(($ap)>>2)];
      var $145=$ap_cur152;
      var $ap_next153=(($ap_cur152+4)|0);
      HEAP32[(($ap)>>2)]=$ap_next153;
      var $146=HEAP32[(($145)>>2)];
      $p151=$146;
      var $147=$i;
      var $148=$argc;
      var $cmp154=(($147)|(0)) < (($148)|(0));
      if ($cmp154) { label = 45; break; } else { label = 54; break; }
    case 45: 
      var $149=$sp;
      var $tt157=(($149+8)|0);
      var $150=HEAP32[(($tt157)>>2)];
      if ((($150)|(0))==3) {
        label = 46; break;
      }
      else if ((($150)|(0))==6) {
        label = 47; break;
      }
      else if ((($150)|(0))==0) {
        label = 51; break;
      }
      else {
      label = 52; break;
      }
    case 46: 
      var $151=$sp;
      var $value159=(($151)|0);
      var $i160=$value159;
      var $152=HEAP32[(($i160)>>2)];
      var $153=$p151;
      HEAP32[(($153)>>2)]=$152;
      label = 53; break;
    case 47: 
      var $154=$sp;
      var $value164=(($154)|0);
      var $f165=$value164;
      var $155=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f165)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f165)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $f163=$155;
      var $156=$f163;
      var $cmp166=$156 <= 2147483647;
      if ($cmp166) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $157=$f163;
      var $cmp169=$157 >= -2147483648;
      if ($cmp169) { label = 50; break; } else { label = 49; break; }
    case 49: 
      var $158=$mrb_addr;
      var $159=$mrb_addr;
      var $call172=_mrb_class_get($159, ((110904)|0));
      _mrb_raise($158, $call172, ((110392)|0));
      label = 50; break;
    case 50: 
      var $160=$f163;
      var $conv174=(($160)&-1);
      var $161=$p151;
      HEAP32[(($161)>>2)]=$conv174;
      label = 53; break;
    case 51: 
      var $162=$p151;
      HEAP32[(($162)>>2)]=0;
      label = 53; break;
    case 52: 
      var $163=$mrb_addr;
      var $164=$sp;
      _mrb_convert_type($tmp179, $163, $164, 3, ((110016)|0), ((109656)|0));
      var $165=$tmp178;
      var $166=$tmp179;
      assert(12 % 1 === 0);HEAP32[(($165)>>2)]=HEAP32[(($166)>>2)];HEAP32[((($165)+(4))>>2)]=HEAP32[((($166)+(4))>>2)];HEAP32[((($165)+(8))>>2)]=HEAP32[((($166)+(8))>>2)];
      var $value180=(($tmp178)|0);
      var $i181=$value180;
      var $167=HEAP32[(($i181)>>2)];
      var $168=$p151;
      HEAP32[(($168)>>2)]=$167;
      label = 53; break;
    case 53: 
      var $169=$sp;
      var $incdec_ptr183=(($169+12)|0);
      $sp=$incdec_ptr183;
      var $170=$i;
      var $inc184=((($170)+(1))|0);
      $i=$inc184;
      label = 54; break;
    case 54: 
      label = 79; break;
    case 55: 
      var $ap_cur188=HEAP32[(($ap)>>2)];
      var $171=$ap_cur188;
      var $ap_next189=(($ap_cur188+4)|0);
      HEAP32[(($ap)>>2)]=$ap_next189;
      var $172=HEAP32[(($171)>>2)];
      $boolp=$172;
      var $173=$i;
      var $174=$argc;
      var $cmp190=(($173)|(0)) < (($174)|(0));
      if ($cmp190) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $175=$sp;
      var $incdec_ptr194=(($175+12)|0);
      $sp=$incdec_ptr194;
      var $176=$b;
      var $177=$175;
      assert(12 % 1 === 0);HEAP32[(($176)>>2)]=HEAP32[(($177)>>2)];HEAP32[((($176)+(4))>>2)]=HEAP32[((($177)+(4))>>2)];HEAP32[((($176)+(8))>>2)]=HEAP32[((($177)+(8))>>2)];
      var $tt195=(($b+8)|0);
      var $178=HEAP32[(($tt195)>>2)];
      var $cmp196=(($178)|(0))!=0;
      var $conv197=(($cmp196)&(1));
      var $conv198=(($conv197) & 255);
      var $179=$boolp;
      HEAP8[($179)]=$conv198;
      var $180=$i;
      var $inc199=((($180)+(1))|0);
      $i=$inc199;
      label = 57; break;
    case 57: 
      label = 79; break;
    case 58: 
      var $ap_cur203=HEAP32[(($ap)>>2)];
      var $181=$ap_cur203;
      var $ap_next204=(($ap_cur203+4)|0);
      HEAP32[(($ap)>>2)]=$ap_next204;
      var $182=HEAP32[(($181)>>2)];
      $symp=$182;
      var $183=$i;
      var $184=$argc;
      var $cmp205=(($183)|(0)) < (($184)|(0));
      if ($cmp205) { label = 59; break; } else { label = 66; break; }
    case 59: 
      var $185=$sp;
      var $incdec_ptr210=(($185+12)|0);
      $sp=$incdec_ptr210;
      var $186=$ss209;
      var $187=$185;
      assert(12 % 1 === 0);HEAP32[(($186)>>2)]=HEAP32[(($187)>>2)];HEAP32[((($186)+(4))>>2)]=HEAP32[((($187)+(4))>>2)];HEAP32[((($186)+(8))>>2)]=HEAP32[((($187)+(8))>>2)];
      var $tt211=(($ss209+8)|0);
      var $188=HEAP32[(($tt211)>>2)];
      var $cmp212=(($188)|(0))==4;
      if ($cmp212) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $value215=(($ss209)|0);
      var $sym=$value215;
      var $189=HEAP16[(($sym)>>1)];
      var $190=$symp;
      HEAP16[(($190)>>1)]=$189;
      label = 65; break;
    case 61: 
      var $tt216=(($ss209+8)|0);
      var $191=HEAP32[(($tt216)>>2)];
      var $cmp217=(($191)|(0))==16;
      if ($cmp217) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $192=$mrb_addr;
      var $193=$mrb_addr;
      _to_str($agg_tmp, $193, $ss209);
      var $call220=_mrb_intern_str($192, $agg_tmp);
      var $194=$symp;
      HEAP16[(($194)>>1)]=$call220;
      label = 64; break;
    case 63: 
      var $195=$mrb_addr;
      _mrb_funcall($obj, $195, $ss209, ((109192)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $196=$mrb_addr;
      var $197=$mrb_addr;
      var $call223=_mrb_class_get($197, ((105900)|0));
      _mrb_raisef($196, $call223, ((108584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($obj)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj)+(8))>>2)],tempInt));
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $198=$i;
      var $inc226=((($198)+(1))|0);
      $i=$inc226;
      label = 66; break;
    case 66: 
      label = 79; break;
    case 67: 
      var $ap_cur232=HEAP32[(($ap)>>2)];
      var $199=$ap_cur232;
      var $ap_next233=(($ap_cur232+4)|0);
      HEAP32[(($ap)>>2)]=$ap_next233;
      var $200=HEAP32[(($199)>>2)];
      $p230=$200;
      var $201=$mrb_addr;
      var $c234=(($201+8)|0);
      var $202=HEAP32[(($c234)>>2)];
      var $ci235=(($202+16)|0);
      var $203=HEAP32[(($ci235)>>2)];
      var $argc236=(($203+16)|0);
      var $204=HEAP32[(($argc236)>>2)];
      var $cmp237=(($204)|(0)) < 0;
      if ($cmp237) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $205=$mrb_addr;
      var $c240=(($205+8)|0);
      var $206=HEAP32[(($c240)>>2)];
      var $stack241=(($206+4)|0);
      var $207=HEAP32[(($stack241)>>2)];
      var $add_ptr242=(($207+24)|0);
      $bp=$add_ptr242;
      label = 70; break;
    case 69: 
      var $208=$mrb_addr;
      var $c244=(($208+8)|0);
      var $209=HEAP32[(($c244)>>2)];
      var $stack245=(($209+4)|0);
      var $210=HEAP32[(($stack245)>>2)];
      var $211=$mrb_addr;
      var $c246=(($211+8)|0);
      var $212=HEAP32[(($c246)>>2)];
      var $ci247=(($212+16)|0);
      var $213=HEAP32[(($ci247)>>2)];
      var $argc248=(($213+16)|0);
      var $214=HEAP32[(($argc248)>>2)];
      var $add_ptr249=(($210+((($214)*(12))&-1))|0);
      var $add_ptr250=(($add_ptr249+12)|0);
      $bp=$add_ptr250;
      label = 70; break;
    case 70: 
      var $215=$p230;
      var $216=$bp;
      var $217=$215;
      var $218=$216;
      assert(12 % 1 === 0);HEAP32[(($217)>>2)]=HEAP32[(($218)>>2)];HEAP32[((($217)+(4))>>2)]=HEAP32[((($218)+(4))>>2)];HEAP32[((($217)+(8))>>2)]=HEAP32[((($218)+(8))>>2)];
      label = 79; break;
    case 71: 
      $opt=1;
      label = 79; break;
    case 72: 
      var $ap_cur257=HEAP32[(($ap)>>2)];
      var $219=$ap_cur257;
      var $ap_next258=(($ap_cur257+4)|0);
      HEAP32[(($ap)>>2)]=$ap_next258;
      var $220=HEAP32[(($219)>>2)];
      $var=$220;
      var $ap_cur259=HEAP32[(($ap)>>2)];
      var $221=$ap_cur259;
      var $ap_next260=(($ap_cur259+4)|0);
      HEAP32[(($ap)>>2)]=$ap_next260;
      var $222=HEAP32[(($221)>>2)];
      $pl256=$222;
      var $223=$argc;
      var $224=$i;
      var $cmp261=(($223)|(0)) > (($224)|(0));
      if ($cmp261) { label = 73; break; } else { label = 76; break; }
    case 73: 
      var $225=$argc;
      var $226=$i;
      var $sub=((($225)-($226))|0);
      var $227=$pl256;
      HEAP32[(($227)>>2)]=$sub;
      var $228=$pl256;
      var $229=HEAP32[(($228)>>2)];
      var $cmp264=(($229)|(0)) > 0;
      if ($cmp264) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $230=$sp;
      var $231=$var;
      HEAP32[(($231)>>2)]=$230;
      label = 75; break;
    case 75: 
      var $232=$argc;
      $i=$232;
      var $233=$pl256;
      var $234=HEAP32[(($233)>>2)];
      var $235=$sp;
      var $add_ptr268=(($235+((($234)*(12))&-1))|0);
      $sp=$add_ptr268;
      label = 77; break;
    case 76: 
      var $236=$pl256;
      HEAP32[(($236)>>2)]=0;
      var $237=$var;
      HEAP32[(($237)>>2)]=0;
      label = 77; break;
    case 77: 
      label = 79; break;
    case 78: 
      var $238=$mrb_addr;
      var $239=$mrb_addr;
      var $call272=_mrb_class_get($239, ((94388)|0));
      var $240=$mrb_addr;
      _mrb_str_new($agg_tmp273, $240, $c, 1);
      _mrb_raisef($238, $call272, ((108236)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp273)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp273)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp273)+(8))>>2)],tempInt));
      label = 79; break;
    case 79: 
      label = 5; break;
    case 80: 
      var $241=HEAP8[($c)];
      var $tobool275=(($241 << 24) >> 24)!=0;
      if ($tobool275) { label = 83; break; } else { label = 81; break; }
    case 81: 
      var $242=$argc;
      var $243=$i;
      var $cmp277=(($242)|(0)) > (($243)|(0));
      if ($cmp277) { label = 82; break; } else { label = 83; break; }
    case 82: 
      var $244=$mrb_addr;
      var $245=$mrb_addr;
      var $call280=_mrb_class_get($245, ((94388)|0));
      _mrb_raise($244, $call280, ((93456)|0));
      label = 83; break;
    case 83: 
      var $ap282=$ap;
      var $246=$i;
      STACKTOP = __stackBase__;
      return $246;
    default: assert(0, "bad label: " + label);
  }
}
function _to_str($agg_result, $mrb, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _check_type($agg_result, $0, $val, 16, ((93296)|0), ((113944)|0));
  STACKTOP = __stackBase__;
  return;
}
function _to_ary($agg_result, $mrb, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _check_type($agg_result, $0, $val, 14, ((93400)|0), ((93348)|0));
  STACKTOP = __stackBase__;
  return;
}
function _to_hash($agg_result, $mrb, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _check_type($agg_result, $0, $val, 15, ((93588)|0), ((93556)|0));
  STACKTOP = __stackBase__;
  return;
}
function _mrb_include_module($mrb, $c, $m) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $c_addr;
      var $m_addr;
      var $ins_pos;
      var $p;
      var $ic;
      var $superclass_seen;
      $mrb_addr=$mrb;
      $c_addr=$c;
      $m_addr=$m;
      var $0=$c_addr;
      $ins_pos=$0;
      label = 3; break;
    case 3: 
      var $1=$m_addr;
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 23; break; }
    case 4: 
      var $2=$c_addr;
      $p=$2;
      $superclass_seen=0;
      var $3=$c_addr;
      var $mt=(($3+16)|0);
      var $4=HEAP32[(($mt)>>2)];
      var $5=$m_addr;
      var $mt1=(($5+16)|0);
      var $6=HEAP32[(($mt1)>>2)];
      var $cmp=(($4)|(0))==(($6)|(0));
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$mrb_addr;
      var $8=$mrb_addr;
      var $call=_mrb_class_get($8, ((94388)|0));
      _mrb_raise($7, $call, ((107748)|0));
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $9=$p;
      var $tobool3=(($9)|(0))!=0;
      if ($tobool3) { label = 8; break; } else { label = 18; break; }
    case 8: 
      var $10=$c_addr;
      var $11=$p;
      var $cmp5=(($10)|(0))!=(($11)|(0));
      if ($cmp5) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $12=$p;
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $bf_clear=$14 & 255;
      var $cmp6=(($bf_clear)|(0))==9;
      if ($cmp6) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $superclass_seen=1;
      label = 17; break;
    case 11: 
      var $15=$p;
      var $mt8=(($15+16)|0);
      var $16=HEAP32[(($mt8)>>2)];
      var $17=$m_addr;
      var $mt9=(($17+16)|0);
      var $18=HEAP32[(($mt9)>>2)];
      var $cmp10=(($16)|(0))==(($18)|(0));
      if ($cmp10) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $19=$p;
      var $20=$19;
      var $21=HEAP32[(($20)>>2)];
      var $bf_clear12=$21 & 255;
      var $cmp13=(($bf_clear12)|(0))==11;
      if ($cmp13) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $22=$superclass_seen;
      var $tobool15=(($22)|(0))!=0;
      if ($tobool15) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $23=$p;
      $ins_pos=$23;
      label = 15; break;
    case 15: 
      label = 22; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $24=$p;
      var $super=(($24+20)|0);
      var $25=HEAP32[(($super)>>2)];
      $p=$25;
      label = 7; break;
    case 18: 
      var $26=$mrb_addr;
      var $27=$mrb_addr;
      var $class_class=(($27+48)|0);
      var $28=HEAP32[(($class_class)>>2)];
      var $call20=_mrb_obj_alloc($26, 11, $28);
      var $29=$call20;
      $ic=$29;
      var $30=$m_addr;
      var $31=$30;
      var $32=HEAP32[(($31)>>2)];
      var $bf_clear21=$32 & 255;
      var $cmp22=(($bf_clear21)|(0))==11;
      if ($cmp22) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $33=$m_addr;
      var $c24=(($33+4)|0);
      var $34=HEAP32[(($c24)>>2)];
      var $35=$ic;
      var $c25=(($35+4)|0);
      HEAP32[(($c25)>>2)]=$34;
      label = 21; break;
    case 20: 
      var $36=$m_addr;
      var $37=$ic;
      var $c27=(($37+4)|0);
      HEAP32[(($c27)>>2)]=$36;
      label = 21; break;
    case 21: 
      var $38=$m_addr;
      var $mt29=(($38+16)|0);
      var $39=HEAP32[(($mt29)>>2)];
      var $40=$ic;
      var $mt30=(($40+16)|0);
      HEAP32[(($mt30)>>2)]=$39;
      var $41=$m_addr;
      var $iv=(($41+12)|0);
      var $42=HEAP32[(($iv)>>2)];
      var $43=$ic;
      var $iv31=(($43+12)|0);
      HEAP32[(($iv31)>>2)]=$42;
      var $44=$ins_pos;
      var $super32=(($44+20)|0);
      var $45=HEAP32[(($super32)>>2)];
      var $46=$ic;
      var $super33=(($46+20)|0);
      HEAP32[(($super33)>>2)]=$45;
      var $47=$ic;
      var $48=$ins_pos;
      var $super34=(($48+20)|0);
      HEAP32[(($super34)>>2)]=$47;
      var $49=$mrb_addr;
      var $50=$ins_pos;
      var $51=$50;
      var $52=$ic;
      var $53=$52;
      _mrb_field_write_barrier($49, $51, $53);
      var $54=$ic;
      $ins_pos=$54;
      label = 22; break;
    case 22: 
      var $55=$m_addr;
      var $super35=(($55+20)|0);
      var $56=HEAP32[(($super35)>>2)];
      $m_addr=$56;
      label = 3; break;
    case 23: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_module_eval($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a=__stackBase__;
      var $b=(__stackBase__)+(12);
      var $c;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((107412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$a,HEAP32[(((tempInt)+(4))>>2)]=$b,tempInt));
      var $cmp=(($call)|(0))==1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mrb_addr;
      var $2=$mrb_addr;
      var $call1=_mrb_class_get($2, ((107124)|0));
      _mrb_raise($1, $call1, ((106572)|0));
      label = 4; break;
    case 4: 
      var $value=(($mod)|0);
      var $p=$value;
      var $3=HEAP32[(($p)>>2)];
      var $4=$3;
      $c=$4;
      var $5=$mrb_addr;
      var $6=$c;
      _mrb_yield_internal($agg_result, $5, $b, 0, 0, $mod, $6);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_singleton_class($agg_result, $mrb, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $obj;
      $mrb_addr=$mrb;
      var $tt=(($v+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      if ((($0)|(0))==0) {
        label = 3; break;
      }
      else if ((($0)|(0))==2) {
        label = 7; break;
      }
      else if ((($0)|(0))==7) {
        label = 8; break;
      }
      else if ((($0)|(0))==4 | (($0)|(0))==3 | (($0)|(0))==6) {
        label = 9; break;
      }
      else {
      label = 10; break;
      }
    case 3: 
      var $tt1=(($v+8)|0);
      var $1=HEAP32[(($tt1)>>2)];
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $value=(($v)|0);
      var $i=$value;
      var $2=HEAP32[(($i)>>2)];
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $3=$mrb_addr;
      var $nil_class=(($3+88)|0);
      var $4=HEAP32[(($nil_class)>>2)];
      var $5=$4;
      _mrb_obj_value753($agg_result, $5);
      label = 12; break;
    case 6: 
      var $6=$mrb_addr;
      var $false_class=(($6+84)|0);
      var $7=HEAP32[(($false_class)>>2)];
      var $8=$7;
      _mrb_obj_value753($agg_result, $8);
      label = 12; break;
    case 7: 
      var $9=$mrb_addr;
      var $true_class=(($9+80)|0);
      var $10=HEAP32[(($true_class)>>2)];
      var $11=$10;
      _mrb_obj_value753($agg_result, $11);
      label = 12; break;
    case 8: 
      var $12=$mrb_addr;
      var $object_class=(($12+44)|0);
      var $13=HEAP32[(($object_class)>>2)];
      var $14=$13;
      _mrb_obj_value753($agg_result, $14);
      label = 12; break;
    case 9: 
      var $15=$mrb_addr;
      var $16=$mrb_addr;
      var $call=_mrb_class_get($16, ((105900)|0));
      _mrb_raise($15, $call, ((106220)|0));
      _mrb_nil_value777($agg_result);
      label = 12; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $value5=(($v)|0);
      var $p=$value5;
      var $17=HEAP32[(($p)>>2)];
      var $18=$17;
      $obj=$18;
      var $19=$mrb_addr;
      var $20=$obj;
      _prepare_singleton_class($19, $20);
      var $21=$obj;
      var $c=(($21+4)|0);
      var $22=HEAP32[(($c)>>2)];
      var $23=$22;
      _mrb_obj_value753($agg_result, $23);
      label = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value777($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _prepare_singleton_class($mrb, $o) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $o_addr;
      var $sc;
      var $c;
      var $agg_tmp=__stackBase__;
      $mrb_addr=$mrb;
      $o_addr=$o;
      var $0=$o_addr;
      var $c1=(($0+4)|0);
      var $1=HEAP32[(($c1)>>2)];
      var $2=$1;
      var $3=HEAP32[(($2)>>2)];
      var $bf_clear=$3 & 255;
      var $cmp=(($bf_clear)|(0))==12;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 14; break;
    case 4: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $class_class=(($5+48)|0);
      var $6=HEAP32[(($class_class)>>2)];
      var $call=_mrb_obj_alloc($4, 12, $6);
      var $7=$call;
      $sc=$7;
      var $8=$sc;
      var $mt=(($8+16)|0);
      HEAP32[(($mt)>>2)]=0;
      var $9=$sc;
      var $iv=(($9+12)|0);
      HEAP32[(($iv)>>2)]=0;
      var $10=$o_addr;
      var $11=$10;
      var $12=HEAP32[(($11)>>2)];
      var $bf_clear2=$12 & 255;
      var $cmp3=(($bf_clear2)|(0))==9;
      if ($cmp3) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $13=$o_addr;
      var $14=$13;
      $c=$14;
      var $15=$c;
      var $super=(($15+20)|0);
      var $16=HEAP32[(($super)>>2)];
      var $tobool=(($16)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $17=$mrb_addr;
      var $class_class6=(($17+48)|0);
      var $18=HEAP32[(($class_class6)>>2)];
      var $19=$sc;
      var $super7=(($19+20)|0);
      HEAP32[(($super7)>>2)]=$18;
      label = 8; break;
    case 7: 
      var $20=$c;
      var $super8=(($20+20)|0);
      var $21=HEAP32[(($super8)>>2)];
      var $c9=(($21+4)|0);
      var $22=HEAP32[(($c9)>>2)];
      var $23=$sc;
      var $super10=(($23+20)|0);
      HEAP32[(($super10)>>2)]=$22;
      label = 8; break;
    case 8: 
      label = 13; break;
    case 9: 
      var $24=$o_addr;
      var $25=$24;
      var $26=HEAP32[(($25)>>2)];
      var $bf_clear13=$26 & 255;
      var $cmp14=(($bf_clear13)|(0))==12;
      if ($cmp14) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $27=$o_addr;
      var $28=$27;
      $c=$28;
      var $29=$mrb_addr;
      var $30=$c;
      var $super16=(($30+20)|0);
      var $31=HEAP32[(($super16)>>2)];
      var $32=$31;
      _prepare_singleton_class($29, $32);
      var $33=$c;
      var $super17=(($33+20)|0);
      var $34=HEAP32[(($super17)>>2)];
      var $c18=(($34+4)|0);
      var $35=HEAP32[(($c18)>>2)];
      var $36=$sc;
      var $super19=(($36+20)|0);
      HEAP32[(($super19)>>2)]=$35;
      label = 12; break;
    case 11: 
      var $37=$o_addr;
      var $c21=(($37+4)|0);
      var $38=HEAP32[(($c21)>>2)];
      var $39=$sc;
      var $super22=(($39+20)|0);
      HEAP32[(($super22)>>2)]=$38;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $40=$sc;
      var $41=$o_addr;
      var $c25=(($41+4)|0);
      HEAP32[(($c25)>>2)]=$40;
      var $42=$mrb_addr;
      var $43=$o_addr;
      var $44=$sc;
      var $45=$44;
      _mrb_field_write_barrier($42, $43, $45);
      var $46=$mrb_addr;
      var $47=$sc;
      var $48=$47;
      var $49=$o_addr;
      _mrb_field_write_barrier($46, $48, $49);
      var $50=$mrb_addr;
      var $51=$sc;
      var $52=$51;
      var $53=$mrb_addr;
      var $call26=_mrb_intern2($53, ((94552)|0), 12);
      var $54=$o_addr;
      var $55=$54;
      _mrb_obj_value753($agg_tmp, $55);
      _mrb_obj_iv_set($50, $52, $call26, $agg_tmp);
      label = 14; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_define_singleton_method($mrb, $o, $name, $func, $aspec) {
  var label = 0;
  var $mrb_addr;
  var $o_addr;
  var $name_addr;
  var $func_addr;
  var $aspec_addr;
  $mrb_addr=$mrb;
  $o_addr=$o;
  $name_addr=$name;
  $func_addr=$func;
  $aspec_addr=$aspec;
  var $0=$mrb_addr;
  var $1=$o_addr;
  var $2=$1;
  _prepare_singleton_class($0, $2);
  var $3=$mrb_addr;
  var $4=$o_addr;
  var $c=(($4+4)|0);
  var $5=HEAP32[(($c)>>2)];
  var $6=$mrb_addr;
  var $7=$name_addr;
  var $call=_mrb_intern754($6, $7);
  var $8=$func_addr;
  var $9=$aspec_addr;
  _mrb_define_method_id($3, $5, $call, $8, $9);
  return;
}
function _mrb_define_class_method($mrb, $c, $name, $func, $aspec) {
  var label = 0;
  var $mrb_addr;
  var $c_addr;
  var $name_addr;
  var $func_addr;
  var $aspec_addr;
  $mrb_addr=$mrb;
  $c_addr=$c;
  $name_addr=$name;
  $func_addr=$func;
  $aspec_addr=$aspec;
  var $0=$mrb_addr;
  var $1=$c_addr;
  var $2=$1;
  var $3=$name_addr;
  var $4=$func_addr;
  var $5=$aspec_addr;
  _mrb_define_singleton_method($0, $2, $3, $4, $5);
  return;
}
function _mrb_define_module_function($mrb, $c, $name, $func, $aspec) {
  var label = 0;
  var $mrb_addr;
  var $c_addr;
  var $name_addr;
  var $func_addr;
  var $aspec_addr;
  $mrb_addr=$mrb;
  $c_addr=$c;
  $name_addr=$name;
  $func_addr=$func;
  $aspec_addr=$aspec;
  var $0=$mrb_addr;
  var $1=$c_addr;
  var $2=$name_addr;
  var $3=$func_addr;
  var $4=$aspec_addr;
  _mrb_define_class_method($0, $1, $2, $3, $4);
  var $5=$mrb_addr;
  var $6=$c_addr;
  var $7=$name_addr;
  var $8=$func_addr;
  var $9=$aspec_addr;
  _mrb_define_method($5, $6, $7, $8, $9);
  return;
}
function _mrb_method_search_vm($mrb, $cp, $mid) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $cp_addr;
      var $mid_addr;
      var $k;
      var $m;
      var $c;
      var $h;
      $mrb_addr=$mrb;
      $cp_addr=$cp;
      $mid_addr=$mid;
      var $0=$cp_addr;
      var $1=HEAP32[(($0)>>2)];
      $c=$1;
      label = 3; break;
    case 3: 
      var $2=$c;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $3=$c;
      var $mt=(($3+16)|0);
      var $4=HEAP32[(($mt)>>2)];
      $h=$4;
      var $5=$h;
      var $tobool1=(($5)|(0))!=0;
      if ($tobool1) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $6=$h;
      var $7=$mid_addr;
      var $call=_kh_get_mt($6, $7);
      $k=$call;
      var $8=$k;
      var $9=$h;
      var $n_buckets=(($9)|0);
      var $10=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($8)|(0))!=(($10)|(0));
      if ($cmp) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $11=$k;
      var $12=$h;
      var $vals=(($12+28)|0);
      var $13=HEAP32[(($vals)>>2)];
      var $arrayidx=(($13+($11<<2))|0);
      var $14=HEAP32[(($arrayidx)>>2)];
      $m=$14;
      var $15=$m;
      var $tobool3=(($15)|(0))!=0;
      if ($tobool3) { label = 8; break; } else { label = 7; break; }
    case 7: 
      label = 11; break;
    case 8: 
      var $16=$c;
      var $17=$cp_addr;
      HEAP32[(($17)>>2)]=$16;
      var $18=$m;
      $retval=$18;
      label = 12; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $19=$c;
      var $super=(($19+20)|0);
      var $20=HEAP32[(($super)>>2)];
      $c=$20;
      label = 3; break;
    case 11: 
      $retval=0;
      label = 12; break;
    case 12: 
      var $21=$retval;
      return $21;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_method_search($mrb, $c, $mid) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $c_addr=__stackBase__;
      var $mid_addr;
      var $m;
      var $inspect=(__stackBase__)+(4);
      var $agg_tmp=(__stackBase__)+(16);
      var $agg_tmp2=(__stackBase__)+(28);
      var $tmp=(__stackBase__)+(40);
      var $agg_tmp3=(__stackBase__)+(52);
      $mrb_addr=$mrb;
      HEAP32[(($c_addr)>>2)]=$c;
      $mid_addr=$mid;
      var $0=$mrb_addr;
      var $1=$mid_addr;
      var $call=_mrb_method_search_vm($0, $c_addr, $1);
      $m=$call;
      var $2=$m;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 3; break; }
    case 3: 
      var $3=$mrb_addr;
      var $4=HEAP32[(($c_addr)>>2)];
      var $5=$4;
      _mrb_obj_value753($agg_tmp, $5);
      _mrb_funcall($inspect, $3, $agg_tmp, ((109192)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $value=(($inspect)|0);
      var $p=$value;
      var $6=HEAP32[(($p)>>2)];
      var $7=$6;
      var $len=(($7+12)|0);
      var $8=HEAP32[(($len)>>2)];
      var $cmp=(($8)|(0)) > 64;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $9=$mrb_addr;
      var $10=HEAP32[(($c_addr)>>2)];
      var $11=$10;
      _mrb_obj_value753($agg_tmp2, $11);
      _mrb_any_to_s($tmp, $9, $agg_tmp2);
      var $12=$inspect;
      var $13=$tmp;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      label = 5; break;
    case 5: 
      var $14=$mrb_addr;
      var $15=$mid_addr;
      var $16=$mrb_addr;
      var $17=$mid_addr;
      _mrb_sym2str($agg_tmp3, $16, $17);
      _mrb_name_error($14, $15, ((105844)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp3)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($inspect)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($inspect)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($inspect)+(8))>>2)],tempInt));
      label = 6; break;
    case 6: 
      var $18=$m;
      STACKTOP = __stackBase__;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_call_init($mrb, $obj, $argc, $argv) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $argc_addr;
  var $argv_addr;
  var $tmp=__stackBase__;
  $mrb_addr=$mrb;
  $argc_addr=$argc;
  $argv_addr=$argv;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $init_sym=(($1+36)|0);
  var $2=HEAP16[(($init_sym)>>1)];
  var $3=$argc_addr;
  var $4=$argv_addr;
  _mrb_funcall_argv($tmp, $0, $obj, $2, $3, $4);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_class_new_instance($agg_result, $mrb, $argc, $argv, $klass) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $argc_addr;
  var $argv_addr;
  var $klass_addr;
  var $obj=__stackBase__;
  var $c;
  var $tmp=(__stackBase__)+(12);
  $mrb_addr=$mrb;
  $argc_addr=$argc;
  $argv_addr=$argv;
  $klass_addr=$klass;
  var $0=$mrb_addr;
  var $1=$klass_addr;
  var $2=$1;
  var $3=HEAP32[(($2)>>2)];
  var $bf_clear=$3 & 255;
  var $4=$klass_addr;
  var $call=_mrb_obj_alloc($0, $bf_clear, $4);
  var $5=$call;
  $c=$5;
  var $6=$klass_addr;
  var $7=$c;
  var $super=(($7+20)|0);
  HEAP32[(($super)>>2)]=$6;
  var $8=$c;
  var $9=$8;
  _mrb_obj_value753($tmp, $9);
  var $10=$obj;
  var $11=$tmp;
  assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
  var $12=$mrb_addr;
  var $13=$argc_addr;
  var $14=$argv_addr;
  _mrb_obj_call_init($12, $obj, $13, $14);
  var $15=$agg_result;
  var $16=$obj;
  assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_instance_new($agg_result, $mrb, $cv) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $cv; $cv = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($cv)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($cv)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($cv)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $c;
      var $o;
      var $ttype;
      var $obj=__stackBase__;
      var $blk=(__stackBase__)+(12);
      var $argv=(__stackBase__)+(24);
      var $argc=(__stackBase__)+(28);
      var $tmp=(__stackBase__)+(32);
      var $tmp2=(__stackBase__)+(44);
      $mrb_addr=$mrb;
      var $value=(($cv)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $c=$1;
      var $2=$c;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4 >>> 11;
      var $bf_clear=$5 & 2097151;
      var $and=$bf_clear & 255;
      $ttype=$and;
      var $6=$ttype;
      var $cmp=(($6)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $ttype=8;
      label = 4; break;
    case 4: 
      var $7=$mrb_addr;
      var $8=$ttype;
      var $9=$c;
      var $call=_mrb_obj_alloc($7, $8, $9);
      var $10=$call;
      $o=$10;
      var $11=$o;
      var $12=$11;
      _mrb_obj_value753($tmp, $12);
      var $13=$obj;
      var $14=$tmp;
      assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
      var $15=$mrb_addr;
      var $call1=_mrb_get_args($15, ((105572)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,HEAP32[(((tempInt)+(8))>>2)]=$blk,tempInt));
      var $16=$mrb_addr;
      var $17=$mrb_addr;
      var $init_sym=(($17+36)|0);
      var $18=HEAP16[(($init_sym)>>1)];
      var $19=HEAP32[(($argc)>>2)];
      var $20=HEAP32[(($argv)>>2)];
      _mrb_funcall_with_block($tmp2, $16, $obj, $18, $19, $20, $blk);
      var $21=$agg_result;
      var $22=$obj;
      assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_class_new_class($agg_result, $mrb, $cv) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $cv; $cv = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($cv)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($cv)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($cv)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $super=__stackBase__;
      var $new_class;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((105256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$super,tempInt));
      var $cmp=(($call)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mrb_addr;
      var $object_class=(($1+44)|0);
      var $2=HEAP32[(($object_class)>>2)];
      var $3=$2;
      _mrb_obj_value753($tmp, $3);
      var $4=$super;
      var $5=$tmp;
      assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
      label = 4; break;
    case 4: 
      var $6=$mrb_addr;
      var $value=(($super)|0);
      var $p=$value;
      var $7=HEAP32[(($p)>>2)];
      var $8=$7;
      var $call1=_mrb_class_new($6, $8);
      $new_class=$call1;
      var $9=$new_class;
      var $10=$9;
      _mrb_obj_value753($agg_result, $10);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_class_superclass($agg_result, $mrb, $klass) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $klass; $klass = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($klass)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($klass)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($klass)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $c;
      $mrb_addr=$mrb;
      var $value=(($klass)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $c=$1;
      var $2=$c;
      var $super=(($2+20)|0);
      var $3=HEAP32[(($super)>>2)];
      $c=$3;
      label = 3; break;
    case 3: 
      var $4=$c;
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 4; break; } else { var $8 = 0;label = 5; break; }
    case 4: 
      var $5=$c;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $bf_clear=$7 & 255;
      var $cmp=(($bf_clear)|(0))==11;
      var $8 = $cmp;label = 5; break;
    case 5: 
      var $8;
      if ($8) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $9=$c;
      var $super1=(($9+20)|0);
      var $10=HEAP32[(($super1)>>2)];
      $c=$10;
      label = 3; break;
    case 7: 
      var $11=$c;
      var $tobool2=(($11)|(0))!=0;
      if ($tobool2) { label = 9; break; } else { label = 8; break; }
    case 8: 
      _mrb_nil_value777($agg_result);
      label = 10; break;
    case 9: 
      var $12=$c;
      var $13=$12;
      _mrb_obj_value753($agg_result, $13);
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_respond_to($c, $mid) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $c_addr;
      var $mid_addr;
      var $k;
      var $h;
      $c_addr=$c;
      $mid_addr=$mid;
      label = 3; break;
    case 3: 
      var $0=$c_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $1=$c_addr;
      var $mt=(($1+16)|0);
      var $2=HEAP32[(($mt)>>2)];
      $h=$2;
      var $3=$h;
      var $tobool1=(($3)|(0))!=0;
      if ($tobool1) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $4=$h;
      var $5=$mid_addr;
      var $call=_kh_get_mt($4, $5);
      $k=$call;
      var $6=$k;
      var $7=$h;
      var $n_buckets=(($7)|0);
      var $8=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($6)|(0))!=(($8)|(0));
      if ($cmp) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $9=$k;
      var $10=$h;
      var $vals=(($10+28)|0);
      var $11=HEAP32[(($vals)>>2)];
      var $arrayidx=(($11+($9<<2))|0);
      var $12=HEAP32[(($arrayidx)>>2)];
      var $tobool3=(($12)|(0))!=0;
      if ($tobool3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=1;
      label = 12; break;
    case 8: 
      $retval=0;
      label = 12; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $13=$c_addr;
      var $super=(($13+20)|0);
      var $14=HEAP32[(($super)>>2)];
      $c_addr=$14;
      label = 3; break;
    case 11: 
      $retval=0;
      label = 12; break;
    case 12: 
      var $15=$retval;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_respond_to($mrb, $obj, $mid) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $mid_addr;
  $mrb_addr=$mrb;
  $mid_addr=$mid;
  var $0=$mrb_addr;
  var $call=_mrb_class786($0, $obj);
  var $1=$mid_addr;
  var $call1=_mrb_obj_respond_to($call, $1);
  STACKTOP = __stackBase__;
  return $call1;
}
function _mrb_class786($mrb, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      $mrb_addr=$mrb;
      var $tt=(($v+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      if ((($0)|(0))==0) {
        label = 3; break;
      }
      else if ((($0)|(0))==2) {
        label = 6; break;
      }
      else if ((($0)|(0))==4) {
        label = 7; break;
      }
      else if ((($0)|(0))==3) {
        label = 8; break;
      }
      else if ((($0)|(0))==6) {
        label = 9; break;
      }
      else {
      label = 10; break;
      }
    case 3: 
      var $value=(($v)|0);
      var $i=$value;
      var $1=HEAP32[(($i)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$mrb_addr;
      var $false_class=(($2+84)|0);
      var $3=HEAP32[(($false_class)>>2)];
      $retval=$3;
      label = 11; break;
    case 5: 
      var $4=$mrb_addr;
      var $nil_class=(($4+88)|0);
      var $5=HEAP32[(($nil_class)>>2)];
      $retval=$5;
      label = 11; break;
    case 6: 
      var $6=$mrb_addr;
      var $true_class=(($6+80)|0);
      var $7=HEAP32[(($true_class)>>2)];
      $retval=$7;
      label = 11; break;
    case 7: 
      var $8=$mrb_addr;
      var $symbol_class=(($8+92)|0);
      var $9=HEAP32[(($symbol_class)>>2)];
      $retval=$9;
      label = 11; break;
    case 8: 
      var $10=$mrb_addr;
      var $fixnum_class=(($10+76)|0);
      var $11=HEAP32[(($fixnum_class)>>2)];
      $retval=$11;
      label = 11; break;
    case 9: 
      var $12=$mrb_addr;
      var $float_class=(($12+72)|0);
      var $13=HEAP32[(($float_class)>>2)];
      $retval=$13;
      label = 11; break;
    case 10: 
      var $value5=(($v)|0);
      var $p=$value5;
      var $14=HEAP32[(($p)>>2)];
      var $15=$14;
      var $c=(($15+4)|0);
      var $16=HEAP32[(($c)>>2)];
      $retval=$16;
      label = 11; break;
    case 11: 
      var $17=$retval;
      STACKTOP = __stackBase__;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_class_path($agg_result, $mrb, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 88)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $c_addr;
      var $path=__stackBase__;
      var $name;
      var $len=(__stackBase__)+(12);
      var $classpath;
      var $tmp=(__stackBase__)+(16);
      var $outer;
      var $sym;
      var $base=(__stackBase__)+(28);
      var $agg_tmp=(__stackBase__)+(40);
      var $tmp14=(__stackBase__)+(52);
      var $agg_tmp16=(__stackBase__)+(64);
      var $tmp19=(__stackBase__)+(76);
      $mrb_addr=$mrb;
      $c_addr=$c;
      var $0=$mrb_addr;
      var $call=_mrb_intern2($0, ((104976)|0), 13);
      $classpath=$call;
      var $1=$mrb_addr;
      var $2=$c_addr;
      var $3=$2;
      var $4=$classpath;
      _mrb_obj_iv_get($tmp, $1, $3, $4);
      var $5=$path;
      var $6=$tmp;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      var $tt=(($path+8)|0);
      var $7=HEAP32[(($tt)>>2)];
      var $cmp=(($7)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $value=(($path)|0);
      var $i=$value;
      var $8=HEAP32[(($i)>>2)];
      var $tobool=(($8)|(0))!=0;
      if ($tobool) { label = 12; break; } else { label = 4; break; }
    case 4: 
      var $9=$mrb_addr;
      var $10=$c_addr;
      var $call2=_mrb_class_outer_module($9, $10);
      $outer=$call2;
      var $11=$mrb_addr;
      var $12=$c_addr;
      var $13=$outer;
      var $call4=_mrb_class_sym($11, $12, $13);
      $sym=$call4;
      var $14=$sym;
      var $conv=(($14 << 16) >> 16);
      var $cmp5=(($conv)|(0))==0;
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _mrb_nil_value777($agg_result);
      label = 13; break;
    case 6: 
      var $15=$outer;
      var $tobool8=(($15)|(0))!=0;
      if ($tobool8) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $16=$outer;
      var $17=$mrb_addr;
      var $object_class=(($17+44)|0);
      var $18=HEAP32[(($object_class)>>2)];
      var $cmp10=(($16)|(0))!=(($18)|(0));
      if ($cmp10) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $19=$mrb_addr;
      var $20=$outer;
      _mrb_class_path($base, $19, $20);
      var $21=$mrb_addr;
      var $22=$mrb_addr;
      _mrb_str_new($agg_tmp, $22, ((104656)|0), 2);
      _mrb_str_plus($tmp14, $21, $base, $agg_tmp);
      var $23=$path;
      var $24=$tmp14;
      assert(12 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
      var $25=$mrb_addr;
      var $26=$sym;
      var $call15=_mrb_sym2name_len($25, $26, $len);
      $name=$call15;
      var $27=$mrb_addr;
      var $28=$mrb_addr;
      var $29=$name;
      var $30=HEAP32[(($len)>>2)];
      _mrb_str_new($agg_tmp16, $28, $29, $30);
      _mrb_str_concat($27, $path, $agg_tmp16);
      label = 10; break;
    case 9: 
      var $31=$mrb_addr;
      var $32=$sym;
      var $call18=_mrb_sym2name_len($31, $32, $len);
      $name=$call18;
      var $33=$mrb_addr;
      var $34=$name;
      var $35=HEAP32[(($len)>>2)];
      _mrb_str_new($tmp19, $33, $34, $35);
      var $36=$path;
      var $37=$tmp19;
      assert(12 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];HEAP32[((($36)+(8))>>2)]=HEAP32[((($37)+(8))>>2)];
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $38=$mrb_addr;
      var $39=$c_addr;
      var $40=$39;
      var $41=$classpath;
      _mrb_obj_iv_set($38, $40, $41, $path);
      label = 12; break;
    case 12: 
      var $42=$agg_result;
      var $43=$path;
      assert(12 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];HEAP32[((($42)+(8))>>2)]=HEAP32[((($43)+(8))>>2)];
      label = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_class_name($mrb, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $c_addr;
      var $path=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      var $agg_tmp=(__stackBase__)+(24);
      var $tmp1=(__stackBase__)+(36);
      $mrb_addr=$mrb;
      $c_addr=$c;
      var $0=$mrb_addr;
      var $1=$c_addr;
      _mrb_class_path($path, $0, $1);
      var $tt=(($path+8)|0);
      var $2=HEAP32[(($tt)>>2)];
      var $cmp=(($2)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $value=(($path)|0);
      var $i=$value;
      var $3=HEAP32[(($i)>>2)];
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$mrb_addr;
      _mrb_str_new($tmp, $4, ((104172)|0), 8);
      var $5=$path;
      var $6=$tmp;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      var $7=$mrb_addr;
      var $8=$mrb_addr;
      var $9=$c_addr;
      var $10=$9;
      _mrb_ptr_to_str($agg_tmp, $8, $10);
      _mrb_str_concat($7, $path, $agg_tmp);
      var $11=$mrb_addr;
      _mrb_str_cat($tmp1, $11, $path, ((103848)|0), 1);
      label = 5; break;
    case 5: 
      var $value2=(($path)|0);
      var $p=$value2;
      var $12=HEAP32[(($p)>>2)];
      var $13=$12;
      var $ptr=(($13+20)|0);
      var $14=HEAP32[(($ptr)>>2)];
      STACKTOP = __stackBase__;
      return $14;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_classname($mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $call=_mrb_obj_class($1, $obj);
  var $call1=_mrb_class_name($0, $call);
  STACKTOP = __stackBase__;
  return $call1;
}
function _mrb_obj_class($mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_class786($0, $obj);
  var $call1=_mrb_class_real($call);
  STACKTOP = __stackBase__;
  return $call1;
}
function _mrb_check_inheritable($mrb, $super) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $super_addr;
      var $agg_tmp=__stackBase__;
      $mrb_addr=$mrb;
      $super_addr=$super;
      var $0=$super_addr;
      var $1=$0;
      var $2=HEAP32[(($1)>>2)];
      var $bf_clear=$2 & 255;
      var $cmp=(($bf_clear)|(0))!=9;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call=_mrb_class_get($4, ((105900)|0));
      var $5=$super_addr;
      var $6=$5;
      _mrb_obj_value753($agg_tmp, $6);
      _mrb_raisef($3, $call, ((102952)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 4; break;
    case 4: 
      var $7=$super_addr;
      var $8=$7;
      var $9=HEAP32[(($8)>>2)];
      var $bf_clear1=$9 & 255;
      var $cmp2=(($bf_clear1)|(0))==12;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $10=$mrb_addr;
      var $11=$mrb_addr;
      var $call4=_mrb_class_get($11, ((105900)|0));
      _mrb_raise($10, $call4, ((103632)|0));
      label = 6; break;
    case 6: 
      var $12=$super_addr;
      var $13=$mrb_addr;
      var $class_class=(($13+48)|0);
      var $14=HEAP32[(($class_class)>>2)];
      var $cmp6=(($12)|(0))==(($14)|(0));
      if ($cmp6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $15=$mrb_addr;
      var $16=$mrb_addr;
      var $call8=_mrb_class_get($16, ((105900)|0));
      _mrb_raise($15, $call8, ((103416)|0));
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _boot_defclass($mrb, $super) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $super_addr;
      var $c;
      $mrb_addr=$mrb;
      $super_addr=$super;
      var $0=$mrb_addr;
      var $1=$mrb_addr;
      var $class_class=(($1+48)|0);
      var $2=HEAP32[(($class_class)>>2)];
      var $call=_mrb_obj_alloc($0, 9, $2);
      var $3=$call;
      $c=$3;
      var $4=$super_addr;
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$super_addr;
      var $cond = $5;label = 5; break;
    case 4: 
      var $6=$mrb_addr;
      var $object_class=(($6+44)|0);
      var $7=HEAP32[(($object_class)>>2)];
      var $cond = $7;label = 5; break;
    case 5: 
      var $cond;
      var $8=$c;
      var $super1=(($8+20)|0);
      HEAP32[(($super1)>>2)]=$cond;
      var $9=$mrb_addr;
      var $10=$c;
      var $11=$10;
      var $12=$super_addr;
      var $13=$12;
      _mrb_field_write_barrier($9, $11, $13);
      var $14=$mrb_addr;
      var $call2=_kh_init_mt($14);
      var $15=$c;
      var $mt=(($15+16)|0);
      HEAP32[(($mt)>>2)]=$call2;
      var $16=$c;
      return $16;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_alias_method($mrb, $c, $a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $c_addr;
  var $a_addr;
  var $b_addr;
  var $m;
  var $agg_tmp=__stackBase__;
  $mrb_addr=$mrb;
  $c_addr=$c;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$mrb_addr;
  var $1=$c_addr;
  var $2=$b_addr;
  var $call=_mrb_method_search($0, $1, $2);
  $m=$call;
  var $3=$mrb_addr;
  var $4=$c_addr;
  var $5=$a_addr;
  var $6=$m;
  var $7=$6;
  _mrb_obj_value753($agg_tmp, $7);
  _mrb_define_method_vm($3, $4, $5, $agg_tmp);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_define_alias($mrb, $klass, $name1, $name2) {
  var label = 0;
  var $mrb_addr;
  var $klass_addr;
  var $name1_addr;
  var $name2_addr;
  $mrb_addr=$mrb;
  $klass_addr=$klass;
  $name1_addr=$name1;
  $name2_addr=$name2;
  var $0=$mrb_addr;
  var $1=$klass_addr;
  var $2=$mrb_addr;
  var $3=$name1_addr;
  var $call=_mrb_intern754($2, $3);
  var $4=$mrb_addr;
  var $5=$name2_addr;
  var $call1=_mrb_intern754($4, $5);
  _mrb_alias_method($0, $1, $call, $call1);
  return;
}
function _mrb_mod_alias($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $c;
  var $new_value=__stackBase__;
  var $old_value=(__stackBase__)+(12);
  $mrb_addr=$mrb;
  var $value=(($mod)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  $c=$1;
  var $2=$mrb_addr;
  var $call=_mrb_get_args($2, ((103232)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$new_value,HEAP32[(((tempInt)+(4))>>2)]=$old_value,tempInt));
  var $3=$mrb_addr;
  var $4=$c;
  var $value1=(($new_value)|0);
  var $sym=$value1;
  var $5=HEAP16[(($sym)>>1)];
  var $value2=(($old_value)|0);
  var $sym3=$value2;
  var $6=HEAP16[(($sym3)>>1)];
  _mrb_alias_method($3, $4, $5, $6);
  _mrb_nil_value777($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_undef_method($mrb, $c, $name) {
  var label = 0;
  var $mrb_addr;
  var $c_addr;
  var $name_addr;
  $mrb_addr=$mrb;
  $c_addr=$c;
  $name_addr=$name;
  var $0=$mrb_addr;
  var $1=$c_addr;
  var $2=$mrb_addr;
  var $3=$name_addr;
  var $call=_mrb_intern754($2, $3);
  _undef_method($0, $1, $call);
  return;
}
function _undef_method($mrb, $c, $a) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $c_addr;
      var $a_addr;
      var $m=__stackBase__;
      $mrb_addr=$mrb;
      $c_addr=$c;
      $a_addr=$a;
      label = 3; break;
    case 3: 
      var $tt=(($m+8)|0);
      HEAP32[(($tt)>>2)]=13;
      var $value=(($m)|0);
      var $p=$value;
      HEAP32[(($p)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$mrb_addr;
      var $1=$c_addr;
      var $2=$a_addr;
      _mrb_define_method_vm($0, $1, $2, $m);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_undef_class_method($mrb, $c, $name) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $c_addr;
  var $name_addr;
  var $agg_tmp=__stackBase__;
  var $tmp=(__stackBase__)+(12);
  $mrb_addr=$mrb;
  $c_addr=$c;
  $name_addr=$name;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $2=$c_addr;
  var $3=$2;
  _mrb_obj_value753($agg_tmp, $3);
  _mrb_singleton_class($tmp, $1, $agg_tmp);
  var $value=(($tmp)|0);
  var $p=$value;
  var $4=HEAP32[(($p)>>2)];
  var $5=$4;
  var $6=$name_addr;
  _mrb_undef_method($0, $5, $6);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_undef($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $c;
      var $argc=__stackBase__;
      var $argv=(__stackBase__)+(4);
      $mrb_addr=$mrb;
      var $value=(($mod)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $c=$1;
      var $2=$mrb_addr;
      var $call=_mrb_get_args($2, ((102924)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      label = 3; break;
    case 3: 
      var $3=HEAP32[(($argc)>>2)];
      var $dec=((($3)-(1))|0);
      HEAP32[(($argc)>>2)]=$dec;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$mrb_addr;
      var $5=$c;
      var $6=HEAP32[(($argv)>>2)];
      var $value1=(($6)|0);
      var $sym=$value1;
      var $7=HEAP16[(($sym)>>1)];
      _undef_method($4, $5, $7);
      var $8=HEAP32[(($argv)>>2)];
      var $incdec_ptr=(($8+12)|0);
      HEAP32[(($argv)>>2)]=$incdec_ptr;
      label = 3; break;
    case 5: 
      _mrb_nil_value777($agg_result);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_remove_cvar($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $val=__stackBase__;
      var $id=(__stackBase__)+(12);
      var $tmp=(__stackBase__)+(16);
      var $agg_tmp=(__stackBase__)+(28);
      var $agg_tmp4=(__stackBase__)+(40);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((102752)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$id,tempInt));
      var $1=$mrb_addr;
      var $2=HEAP16[(($id)>>1)];
      _check_cv_name_sym($1, $2);
      var $3=$mrb_addr;
      var $4=HEAP16[(($id)>>1)];
      _mrb_iv_remove($tmp, $3, $mod, $4);
      var $5=$val;
      var $6=$tmp;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      var $tt=(($val+8)|0);
      var $7=HEAP32[(($tt)>>2)];
      var $cmp=(($7)|(0))==5;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $8=$agg_result;
      var $9=$val;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 7; break;
    case 4: 
      var $10=$mrb_addr;
      var $11=HEAP16[(($id)>>1)];
      var $call1=_mrb_cv_defined($10, $mod, $11);
      var $tobool=(($call1 << 24) >> 24)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $12=$mrb_addr;
      var $13=HEAP16[(($id)>>1)];
      var $14=$mrb_addr;
      var $15=HEAP16[(($id)>>1)];
      _mrb_sym2str($agg_tmp, $14, $15);
      _mrb_name_error($12, $13, ((102496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($mod)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($mod)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($mod)+(8))>>2)],tempInt));
      label = 6; break;
    case 6: 
      var $16=$mrb_addr;
      var $17=HEAP16[(($id)>>1)];
      var $18=$mrb_addr;
      var $19=HEAP16[(($id)>>1)];
      _mrb_sym2str($agg_tmp4, $18, $19);
      _mrb_name_error($16, $17, ((102108)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp4)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp4)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp4)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($mod)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($mod)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($mod)+(8))>>2)],tempInt));
      _mrb_nil_value777($agg_result);
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _check_cv_name_sym($mrb, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $id_addr;
      var $s;
      var $len=__stackBase__;
      var $agg_tmp=(__stackBase__)+(4);
      $mrb_addr=$mrb;
      $id_addr=$id;
      var $0=$mrb_addr;
      var $1=$id_addr;
      var $call=_mrb_sym2name_len($0, $1, $len);
      $s=$call;
      var $2=HEAP32[(($len)>>2)];
      var $cmp=(($2)>>>(0)) < 3;
      if ($cmp) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $3=$s;
      var $arrayidx=(($3)|0);
      var $4=HEAP8[($arrayidx)];
      var $conv=(($4 << 24) >> 24);
      var $cmp1=(($conv)|(0))==64;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$s;
      var $arrayidx3=(($5+1)|0);
      var $6=HEAP8[($arrayidx3)];
      var $conv4=(($6 << 24) >> 24);
      var $cmp5=(($conv4)|(0))==64;
      if ($cmp5) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $7=$mrb_addr;
      var $8=$id_addr;
      var $9=$mrb_addr;
      var $10=$id_addr;
      _mrb_sym2str($agg_tmp, $9, $10);
      _mrb_name_error($7, $8, ((94304)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_remove_method($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argc=__stackBase__;
      var $argv=(__stackBase__)+(4);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((102924)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      label = 3; break;
    case 3: 
      var $1=HEAP32[(($argc)>>2)];
      var $dec=((($1)-(1))|0);
      HEAP32[(($argc)>>2)]=$dec;
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$mrb_addr;
      var $3=HEAP32[(($argv)>>2)];
      var $value=(($3)|0);
      var $sym=$value;
      var $4=HEAP16[(($sym)>>1)];
      _remove_method($2, $mod, $4);
      var $5=HEAP32[(($argv)>>2)];
      var $incdec_ptr=(($5+12)|0);
      HEAP32[(($argv)>>2)]=$incdec_ptr;
      label = 3; break;
    case 5: 
      var $6=$agg_result;
      var $7=$mod;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _remove_method($mrb, $mod, $mid) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $mid_addr;
      var $c;
      var $h;
      var $k;
      var $agg_tmp=__stackBase__;
      $mrb_addr=$mrb;
      $mid_addr=$mid;
      var $value=(($mod)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $c=$1;
      var $2=$c;
      var $mt=(($2+16)|0);
      var $3=HEAP32[(($mt)>>2)];
      $h=$3;
      var $4=$h;
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $5=$h;
      var $6=$mid_addr;
      var $call=_kh_get_mt($5, $6);
      $k=$call;
      var $7=$k;
      var $8=$h;
      var $n_buckets=(($8)|0);
      var $9=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($7)|(0))!=(($9)|(0));
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $10=$h;
      var $11=$k;
      _kh_del_mt($10, $11);
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $12=$mrb_addr;
      var $13=$mid_addr;
      var $14=$mrb_addr;
      var $15=$mid_addr;
      _mrb_sym2str($agg_tmp, $14, $15);
      _mrb_name_error($12, $13, ((93656)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($mod)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($mod)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($mod)+(8))>>2)],tempInt));
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_const_defined($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $id=__stackBase__;
      var $const_defined_p;
      var $tmp=(__stackBase__)+(12);
      var $sym4=(__stackBase__)+(24);
      var $tmp5=(__stackBase__)+(36);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      _get_sym_or_str_arg($tmp, $0);
      var $1=$id;
      var $2=$tmp;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      var $tt=(($id+8)|0);
      var $3=HEAP32[(($tt)>>2)];
      var $cmp=(($3)|(0))==4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$mrb_addr;
      var $value=(($id)|0);
      var $sym=$value;
      var $5=HEAP16[(($sym)>>1)];
      _check_const_name_sym($4, $5);
      var $6=$mrb_addr;
      var $value1=(($id)|0);
      var $sym2=$value1;
      var $7=HEAP16[(($sym2)>>1)];
      var $call=_mrb_const_defined($6, $mod, $7);
      $const_defined_p=$call;
      label = 9; break;
    case 4: 
      var $8=$mrb_addr;
      _check_const_name_str($8, $id);
      var $9=$mrb_addr;
      _mrb_check_intern_str($tmp5, $9, $id);
      var $10=$sym4;
      var $11=$tmp5;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      var $tt6=(($sym4+8)|0);
      var $12=HEAP32[(($tt6)>>2)];
      var $cmp7=(($12)|(0))==0;
      if ($cmp7) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $value8=(($sym4)|0);
      var $i=$value8;
      var $13=HEAP32[(($i)>>2)];
      var $tobool=(($13)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 6; break; }
    case 6: 
      $const_defined_p=0;
      label = 8; break;
    case 7: 
      var $14=$mrb_addr;
      var $value11=(($sym4)|0);
      var $sym12=$value11;
      var $15=HEAP16[(($sym12)>>1)];
      var $call13=_mrb_const_defined($14, $mod, $15);
      $const_defined_p=$call13;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $16=$const_defined_p;
      _mrb_bool_value793($agg_result, $16);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _get_sym_or_str_arg($agg_result, $mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $sym_or_str=__stackBase__;
      var $obj=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((94920)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$sym_or_str,tempInt));
      var $tt=(($sym_or_str+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==4;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $tt1=(($sym_or_str+8)|0);
      var $2=HEAP32[(($tt1)>>2)];
      var $cmp2=(($2)|(0))==16;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$agg_result;
      var $4=$sym_or_str;
      assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
      label = 6; break;
    case 5: 
      var $5=$mrb_addr;
      _mrb_funcall($obj, $5, $sym_or_str, ((109192)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $6=$mrb_addr;
      var $7=$mrb_addr;
      var $call3=_mrb_class_get($7, ((105900)|0));
      _mrb_raisef($6, $call3, ((108584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($obj)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj)+(8))>>2)],tempInt));
      _mrb_nil_value777($agg_result);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _check_const_name_sym($mrb, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $id_addr;
      var $s;
      var $len=__stackBase__;
      var $agg_tmp=(__stackBase__)+(4);
      $mrb_addr=$mrb;
      $id_addr=$id;
      var $0=$mrb_addr;
      var $1=$id_addr;
      var $call=_mrb_sym2name_len($0, $1, $len);
      $s=$call;
      var $2=HEAP32[(($len)>>2)];
      var $cmp=(($2)>>>(0)) < 1;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=$s;
      var $4=HEAP8[($3)];
      var $conv=(($4)&(255));
      var $call1=_isupper($conv);
      var $tobool=(($call1)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $5=$mrb_addr;
      var $6=$id_addr;
      var $7=$mrb_addr;
      var $8=$id_addr;
      _mrb_sym2str($agg_tmp, $7, $8);
      _mrb_name_error($5, $6, ((93712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _check_const_name_str($mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      $mrb_addr=$mrb;
      var $value=(($str)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $len=(($1+12)|0);
      var $2=HEAP32[(($len)>>2)];
      var $cmp=(($2)|(0)) < 1;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $value1=(($str)|0);
      var $p2=$value1;
      var $3=HEAP32[(($p2)>>2)];
      var $4=$3;
      var $ptr=(($4+20)|0);
      var $5=HEAP32[(($ptr)>>2)];
      var $6=HEAP8[($5)];
      var $conv=(($6)&(255));
      var $call=_isupper($conv);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $7=$mrb_addr;
      var $8=$mrb_addr;
      var $call3=_mrb_intern_str($8, $str);
      _mrb_name_error($7, $call3, ((93712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($str)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($str)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($str)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value793($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $boolean_addr;
      var $v=__stackBase__;
      $boolean_addr=$boolean;
      label = 3; break;
    case 3: 
      var $0=$boolean_addr;
      var $conv=(($0)&(255));
      var $tobool=(($conv)|(0))!=0;
      var $cond=$tobool ? 2 : 0;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$cond;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_const_get($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $id=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((102752)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$id,tempInt));
  var $1=$mrb_addr;
  var $2=HEAP16[(($id)>>1)];
  _check_const_name_sym($1, $2);
  var $3=$mrb_addr;
  var $4=HEAP16[(($id)>>1)];
  _mrb_const_get($agg_result, $3, $mod, $4);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_const_set($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $id=__stackBase__;
  var $value=(__stackBase__)+(4);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((101916)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$id,HEAP32[(((tempInt)+(4))>>2)]=$value,tempInt));
  var $1=$mrb_addr;
  var $2=HEAP16[(($id)>>1)];
  _check_const_name_sym($1, $2);
  var $3=$mrb_addr;
  var $4=HEAP16[(($id)>>1)];
  _mrb_const_set($3, $mod, $4, $value);
  var $5=$agg_result;
  var $6=$value;
  assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_remove_const($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $id=__stackBase__;
      var $val=(__stackBase__)+(4);
      var $tmp=(__stackBase__)+(16);
      var $agg_tmp=(__stackBase__)+(28);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((102752)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$id,tempInt));
      var $1=$mrb_addr;
      var $2=HEAP16[(($id)>>1)];
      _check_const_name_sym($1, $2);
      var $3=$mrb_addr;
      var $4=HEAP16[(($id)>>1)];
      _mrb_iv_remove($tmp, $3, $mod, $4);
      var $5=$val;
      var $6=$tmp;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      var $tt=(($val+8)|0);
      var $7=HEAP32[(($tt)>>2)];
      var $cmp=(($7)|(0))==5;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$mrb_addr;
      var $9=HEAP16[(($id)>>1)];
      var $10=$mrb_addr;
      var $11=HEAP16[(($id)>>1)];
      _mrb_sym2str($agg_tmp, $10, $11);
      _mrb_name_error($8, $9, ((101460)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 4; break;
    case 4: 
      var $12=$agg_result;
      var $13=$val;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_class($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $bob;
  var $obj;
  var $mod;
  var $cls;
  var $agg_tmp=__stackBase__;
  var $agg_tmp7=(__stackBase__)+(12);
  var $agg_tmp8=(__stackBase__)+(24);
  var $agg_tmp9=(__stackBase__)+(36);
  var $agg_tmp10=(__stackBase__)+(48);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_boot_defclass($0, 0);
  $bob=$call;
  var $1=$mrb_addr;
  var $2=$bob;
  var $call1=_boot_defclass($1, $2);
  $obj=$call1;
  var $3=$obj;
  var $4=$mrb_addr;
  var $object_class=(($4+44)|0);
  HEAP32[(($object_class)>>2)]=$3;
  var $5=$mrb_addr;
  var $6=$obj;
  var $call2=_boot_defclass($5, $6);
  $mod=$call2;
  var $7=$mod;
  var $8=$mrb_addr;
  var $module_class=(($8+52)|0);
  HEAP32[(($module_class)>>2)]=$7;
  var $9=$mrb_addr;
  var $10=$mod;
  var $call3=_boot_defclass($9, $10);
  $cls=$call3;
  var $11=$cls;
  var $12=$mrb_addr;
  var $class_class=(($12+48)|0);
  HEAP32[(($class_class)>>2)]=$11;
  var $13=$cls;
  var $14=$cls;
  var $c=(($14+4)|0);
  HEAP32[(($c)>>2)]=$13;
  var $15=$mod;
  var $c4=(($15+4)|0);
  HEAP32[(($c4)>>2)]=$13;
  var $16=$obj;
  var $c5=(($16+4)|0);
  HEAP32[(($c5)>>2)]=$13;
  var $17=$bob;
  var $c6=(($17+4)|0);
  HEAP32[(($c6)>>2)]=$13;
  var $18=$mrb_addr;
  var $19=$bob;
  var $20=$19;
  _prepare_singleton_class($18, $20);
  var $21=$mrb_addr;
  var $22=$obj;
  var $23=$22;
  _prepare_singleton_class($21, $23);
  var $24=$mrb_addr;
  var $25=$mod;
  var $26=$25;
  _prepare_singleton_class($24, $26);
  var $27=$mrb_addr;
  var $28=$cls;
  var $29=$28;
  _prepare_singleton_class($27, $29);
  var $30=$mrb_addr;
  var $31=$bob;
  var $32=$bob;
  var $33=$32;
  _mrb_obj_value753($agg_tmp, $33);
  _mrb_define_const($30, $31, ((101128)|0), $agg_tmp);
  var $34=$mrb_addr;
  var $35=$obj;
  var $36=$bob;
  var $37=$36;
  _mrb_obj_value753($agg_tmp7, $37);
  _mrb_define_const($34, $35, ((101128)|0), $agg_tmp7);
  var $38=$mrb_addr;
  var $39=$obj;
  var $40=$obj;
  var $41=$40;
  _mrb_obj_value753($agg_tmp8, $41);
  _mrb_define_const($38, $39, ((100840)|0), $agg_tmp8);
  var $42=$mrb_addr;
  var $43=$obj;
  var $44=$mod;
  var $45=$44;
  _mrb_obj_value753($agg_tmp9, $45);
  _mrb_define_const($42, $43, ((100616)|0), $agg_tmp9);
  var $46=$mrb_addr;
  var $47=$obj;
  var $48=$cls;
  var $49=$48;
  _mrb_obj_value753($agg_tmp10, $49);
  _mrb_define_const($46, $47, ((100368)|0), $agg_tmp10);
  var $50=$mrb_addr;
  var $51=$bob;
  var $52=$mrb_addr;
  var $call11=_mrb_intern754($52, ((101128)|0));
  _mrb_name_class($50, $51, $call11);
  var $53=$mrb_addr;
  var $54=$obj;
  var $55=$mrb_addr;
  var $call12=_mrb_intern754($55, ((100840)|0));
  _mrb_name_class($53, $54, $call12);
  var $56=$mrb_addr;
  var $57=$mod;
  var $58=$mrb_addr;
  var $call13=_mrb_intern754($58, ((100616)|0));
  _mrb_name_class($56, $57, $call13);
  var $59=$mrb_addr;
  var $60=$cls;
  var $61=$mrb_addr;
  var $call14=_mrb_intern754($61, ((100368)|0));
  _mrb_name_class($59, $60, $call14);
  var $62=$mrb_addr;
  var $63=$mod;
  _mrb_undef_method($62, $63, ((100192)|0));
  var $64=$cls;
  var $65=$64;
  var $66=HEAP32[(($65)>>2)];
  var $67=$66 >>> 11;
  var $bf_clear=$67 & 2097151;
  var $and=$bf_clear & -256;
  var $or=$and | 9;
  var $68=$cls;
  var $bf_value=$or & 2097151;
  var $69=$68;
  var $70=$bf_value & 2097151;
  var $71=$70 << 11;
  var $72=HEAP32[(($69)>>2)];
  var $73=$72 & 2047;
  var $74=$73 | $71;
  HEAP32[(($69)>>2)]=$74;
  var $75=$mrb_addr;
  var $76=$bob;
  _mrb_define_method($75, $76, ((100028)|0), 418, 0);
  var $77=$mrb_addr;
  var $78=$bob;
  _mrb_define_method($77, $78, ((99824)|0), 394, 0);
  var $79=$mrb_addr;
  var $80=$bob;
  _mrb_define_method($79, $80, ((99584)|0), 8, 4096);
  var $81=$mrb_addr;
  var $82=$cls;
  _mrb_define_class_method($81, $82, ((100192)|0), 538, 4096);
  var $83=$mrb_addr;
  var $84=$cls;
  _mrb_define_method($83, $84, ((99356)|0), 498, 0);
  var $85=$mrb_addr;
  var $86=$cls;
  _mrb_define_method($85, $86, ((100192)|0), 606, 4096);
  var $87=$mrb_addr;
  var $88=$cls;
  _mrb_define_method($87, $88, ((97640)|0), 418, 262144);
  var $89=$mod;
  var $90=$89;
  var $91=HEAP32[(($90)>>2)];
  var $92=$91 >>> 11;
  var $bf_clear15=$92 & 2097151;
  var $and16=$bf_clear15 & -256;
  var $or17=$and16 | 10;
  var $93=$mod;
  var $bf_value18=$or17 & 2097151;
  var $94=$93;
  var $95=$bf_value18 & 2097151;
  var $96=$95 << 11;
  var $97=HEAP32[(($94)>>2)];
  var $98=$97 & 2047;
  var $99=$98 | $96;
  HEAP32[(($94)>>2)]=$99;
  var $100=$mrb_addr;
  var $101=$mod;
  _mrb_define_method($100, $101, ((98864)|0), 486, 262144);
  var $102=$mrb_addr;
  var $103=$mod;
  _mrb_define_method($102, $103, ((98568)|0), 446, 262144);
  var $104=$mrb_addr;
  var $105=$mod;
  _mrb_define_method($104, $105, ((98304)|0), 504, 524288);
  var $106=$mrb_addr;
  var $107=$mod;
  _mrb_define_method($106, $107, ((98064)|0), 644, 262144);
  var $108=$mrb_addr;
  var $109=$mod;
  _mrb_define_method($108, $109, ((97892)|0), 418, 262144);
  var $110=$mrb_addr;
  var $111=$mod;
  _mrb_define_method($110, $111, ((97616)|0), 586, 4096);
  var $112=$mrb_addr;
  var $113=$mod;
  _mrb_define_method($112, $113, ((97484)|0), 50, 262144);
  var $114=$mrb_addr;
  var $115=$mod;
  _mrb_define_method($114, $115, ((97344)|0), 242, 262144);
  var $116=$mrb_addr;
  var $117=$mod;
  _mrb_define_method($116, $117, ((97268)|0), 226, 4096);
  var $118=$mrb_addr;
  var $119=$mod;
  _mrb_define_method($118, $119, ((97144)|0), 418, 262144);
  var $120=$mrb_addr;
  var $121=$mod;
  _mrb_define_method($120, $121, ((96856)|0), 90, 0);
  var $122=$mrb_addr;
  var $123=$mod;
  _mrb_define_method($122, $123, ((96696)|0), 172, 4096);
  var $124=$mrb_addr;
  var $125=$mod;
  _mrb_define_method($124, $125, ((96604)|0), 292, 262144);
  var $126=$mrb_addr;
  var $127=$mod;
  _mrb_define_method($126, $127, ((96528)|0), 226, 4096);
  var $128=$mrb_addr;
  var $129=$mod;
  _mrb_define_method($128, $129, ((96452)|0), 12, 262144);
  var $130=$mrb_addr;
  var $131=$mod;
  _mrb_define_method($130, $131, ((96356)|0), 262, 4096);
  var $132=$mrb_addr;
  var $133=$mod;
  _mrb_define_method($132, $133, ((96264)|0), 552, 0);
  var $134=$mrb_addr;
  var $135=$mod;
  _mrb_define_method($134, $135, ((109192)|0), 552, 0);
  var $136=$mrb_addr;
  var $137=$mod;
  _mrb_define_method($136, $137, ((96172)|0), 594, 4096);
  var $138=$mrb_addr;
  var $139=$mod;
  _mrb_define_method($138, $139, ((96060)|0), 374, 0);
  var $140=$mrb_addr;
  var $141=$mod;
  _mrb_define_method($140, $141, ((96004)|0), 2, 4096);
  var $142=$mrb_addr;
  var $143=$mod;
  _mrb_define_method($142, $143, ((95640)|0), 626, 262144);
  var $144=$mrb_addr;
  var $145=$mod;
  _mrb_define_method($144, $145, ((95504)|0), 674, 262144);
  var $146=$mrb_addr;
  var $147=$mod;
  _mrb_define_method($146, $147, ((95420)|0), 404, 524288);
  var $148=$mrb_addr;
  var $149=$mod;
  _mrb_define_method($148, $149, ((95360)|0), 112, 0);
  var $150=$mrb_addr;
  var $151=$mod;
  _mrb_define_method($150, $151, ((95308)|0), 186, 262144);
  var $152=$mrb_addr;
  var $153=$mod;
  _mrb_define_method($152, $153, ((95204)|0), 202, 262144);
  var $154=$mrb_addr;
  var $155=$mod;
  _mrb_define_method($154, $155, ((95156)|0), 712, 0);
  var $156=$mrb_addr;
  var $157=$mod;
  _mrb_define_method($156, $157, ((95084)|0), 392, 262144);
  var $158=$mrb_addr;
  var $159=$mod;
  _mrb_define_class_method($158, $159, ((95360)|0), 634, 4096);
  var $160=$mrb_addr;
  var $161=$cls;
  _mrb_undef_method($160, $161, ((97344)|0));
  var $162=$mrb_addr;
  var $163=$cls;
  _mrb_undef_method($162, $163, ((98064)|0));
  STACKTOP = __stackBase__;
  return;
}
function _mrb_bob_init($agg_result, $mrb, $cv) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $cv; $cv = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($cv)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($cv)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($cv)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  _mrb_nil_value777($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_bob_not($agg_result, $mrb, $cv) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $cv; $cv = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($cv)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($cv)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($cv)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $tt=(($cv+8)|0);
  var $0=HEAP32[(($tt)>>2)];
  var $cmp=(($0)|(0))!=0;
  var $lnot=$cmp ^ 1;
  var $lnot_ext=(($lnot)&(1));
  var $conv=(($lnot_ext) & 255);
  _mrb_bool_value793($agg_result, $conv);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_bob_missing($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $name=__stackBase__;
      var $a=(__stackBase__)+(12);
      var $alen=(__stackBase__)+(16);
      var $inspect=(__stackBase__)+(20);
      var $tmp=(__stackBase__)+(32);
      var $tmp7=(__stackBase__)+(44);
      var $tmp9=(__stackBase__)+(56);
      var $agg_tmp=(__stackBase__)+(68);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((94256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$name,HEAP32[(((tempInt)+(4))>>2)]=$a,HEAP32[(((tempInt)+(8))>>2)]=$alen,tempInt));
      var $tt=(($name+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==4;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$mrb_addr;
      var $3=$mrb_addr;
      var $call1=_mrb_class_get($3, ((105900)|0));
      _mrb_raise($2, $call1, ((94156)|0));
      label = 4; break;
    case 4: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call2=_mrb_intern2($5, ((109192)|0), 7);
      var $call3=_mrb_respond_to($4, $mod, $call2);
      var $tobool=(($call3)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $6=$mrb_addr;
      _mrb_funcall($tmp, $6, $mod, ((109192)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $7=$inspect;
      var $8=$tmp;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      var $value=(($inspect)|0);
      var $p=$value;
      var $9=HEAP32[(($p)>>2)];
      var $10=$9;
      var $len=(($10+12)|0);
      var $11=HEAP32[(($len)>>2)];
      var $cmp5=(($11)|(0)) > 64;
      if ($cmp5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $12=$mrb_addr;
      _mrb_any_to_s($tmp7, $12, $mod);
      var $13=$inspect;
      var $14=$tmp7;
      assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
      label = 7; break;
    case 7: 
      label = 9; break;
    case 8: 
      var $15=$mrb_addr;
      _mrb_any_to_s($tmp9, $15, $mod);
      var $16=$inspect;
      var $17=$tmp9;
      assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
      label = 9; break;
    case 9: 
      var $18=$mrb_addr;
      var $19=$mrb_addr;
      var $call11=_mrb_class_get($19, ((94100)|0));
      var $20=$mrb_addr;
      var $value12=(($name)|0);
      var $sym=$value12;
      var $21=HEAP16[(($sym)>>1)];
      _mrb_sym2str($agg_tmp, $20, $21);
      _mrb_raisef($18, $call11, ((93788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($inspect)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($inspect)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($inspect)+(8))>>2)],tempInt));
      _mrb_nil_value777($agg_result);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_cvar_defined($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $id=__stackBase__;
      var $defined_p;
      var $tmp=(__stackBase__)+(12);
      var $sym4=(__stackBase__)+(24);
      var $tmp5=(__stackBase__)+(36);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      _get_sym_or_str_arg($tmp, $0);
      var $1=$id;
      var $2=$tmp;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      var $tt=(($id+8)|0);
      var $3=HEAP32[(($tt)>>2)];
      var $cmp=(($3)|(0))==4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$mrb_addr;
      var $value=(($id)|0);
      var $sym=$value;
      var $5=HEAP16[(($sym)>>1)];
      _check_cv_name_sym($4, $5);
      var $6=$mrb_addr;
      var $value1=(($id)|0);
      var $sym2=$value1;
      var $7=HEAP16[(($sym2)>>1)];
      var $call=_mrb_cv_defined($6, $mod, $7);
      $defined_p=$call;
      label = 9; break;
    case 4: 
      var $8=$mrb_addr;
      _check_cv_name_str($8, $id);
      var $9=$mrb_addr;
      _mrb_check_intern_str($tmp5, $9, $id);
      var $10=$sym4;
      var $11=$tmp5;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      var $tt6=(($sym4+8)|0);
      var $12=HEAP32[(($tt6)>>2)];
      var $cmp7=(($12)|(0))==0;
      if ($cmp7) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $value8=(($sym4)|0);
      var $i=$value8;
      var $13=HEAP32[(($i)>>2)];
      var $tobool=(($13)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 6; break; }
    case 6: 
      $defined_p=0;
      label = 8; break;
    case 7: 
      var $14=$mrb_addr;
      var $value11=(($sym4)|0);
      var $sym12=$value11;
      var $15=HEAP16[(($sym12)>>1)];
      var $call13=_mrb_cv_defined($14, $mod, $15);
      $defined_p=$call13;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $16=$defined_p;
      _mrb_bool_value793($agg_result, $16);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_cvar_get($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $id=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((102752)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$id,tempInt));
  var $1=$mrb_addr;
  var $2=HEAP16[(($id)>>1)];
  _check_cv_name_sym($1, $2);
  var $3=$mrb_addr;
  var $4=HEAP16[(($id)>>1)];
  _mrb_cv_get($agg_result, $3, $mod, $4);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_cvar_set($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $value=__stackBase__;
  var $id=(__stackBase__)+(12);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((101916)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$id,HEAP32[(((tempInt)+(4))>>2)]=$value,tempInt));
  var $1=$mrb_addr;
  var $2=HEAP16[(($id)>>1)];
  _check_cv_name_sym($1, $2);
  var $3=$mrb_addr;
  var $4=HEAP16[(($id)>>1)];
  _mrb_cv_set($3, $mod, $4, $value);
  var $5=$agg_result;
  var $6=$value;
  assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_extend_object($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $obj=__stackBase__;
  var $tmp=(__stackBase__)+(12);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_check_type($0, $mod, 10);
  var $1=$mrb_addr;
  var $call=_mrb_get_args($1, ((94920)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj,tempInt));
  var $2=$mrb_addr;
  var $3=$mrb_addr;
  _mrb_singleton_class($tmp, $3, $obj);
  var $value=(($tmp)|0);
  var $p=$value;
  var $4=HEAP32[(($p)>>2)];
  var $5=$4;
  var $value1=(($mod)|0);
  var $p2=$value1;
  var $6=HEAP32[(($p2)>>2)];
  var $7=$6;
  _mrb_include_module($2, $5, $7);
  var $8=$agg_result;
  var $9=$mod;
  assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_include($agg_result, $mrb, $klass) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $klass; $klass = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($klass)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($klass)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($klass)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argv=__stackBase__;
      var $argc=(__stackBase__)+(4);
      var $i;
      var $tmp=(__stackBase__)+(8);
      var $tmp3=(__stackBase__)+(20);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((102924)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      $i=0;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $2=HEAP32[(($argc)>>2)];
      var $cmp=(($1)|(0)) < (($2)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $3=$mrb_addr;
      var $4=$i;
      var $5=HEAP32[(($argv)>>2)];
      var $arrayidx=(($5+((($4)*(12))&-1))|0);
      _mrb_check_type($3, $arrayidx, 10);
      label = 5; break;
    case 5: 
      var $6=$i;
      var $inc=((($6)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $7=HEAP32[(($argc)>>2)];
      var $dec=((($7)-(1))|0);
      HEAP32[(($argc)>>2)]=$dec;
      var $tobool=(($7)|(0))!=0;
      if ($tobool) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $8=$mrb_addr;
      var $9=HEAP32[(($argc)>>2)];
      var $10=HEAP32[(($argv)>>2)];
      var $arrayidx1=(($10+((($9)*(12))&-1))|0);
      _mrb_funcall($tmp, $8, $arrayidx1, ((97344)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($klass)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($klass)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($klass)+(8))>>2)],tempInt));
      var $11=$mrb_addr;
      var $12=HEAP32[(($argc)>>2)];
      var $13=HEAP32[(($argv)>>2)];
      var $arrayidx2=(($13+((($12)*(12))&-1))|0);
      _mrb_funcall($tmp3, $11, $arrayidx2, ((97144)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($klass)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($klass)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($klass)+(8))>>2)],tempInt));
      label = 7; break;
    case 9: 
      var $14=$agg_result;
      var $15=$klass;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_include_p($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $mod2=__stackBase__;
      var $c;
      $mrb_addr=$mrb;
      var $value=(($mod)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $c=$1;
      var $2=$mrb_addr;
      var $call=_mrb_get_args($2, ((94920)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$mod2,tempInt));
      var $3=$mrb_addr;
      _mrb_check_type($3, $mod2, 10);
      label = 3; break;
    case 3: 
      var $4=$c;
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $5=$c;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $bf_clear=$7 & 255;
      var $cmp=(($bf_clear)|(0))==11;
      if ($cmp) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $8=$c;
      var $c1=(($8+4)|0);
      var $9=HEAP32[(($c1)>>2)];
      var $value2=(($mod2)|0);
      var $p3=$value2;
      var $10=HEAP32[(($p3)>>2)];
      var $11=$10;
      var $cmp4=(($9)|(0))==(($11)|(0));
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      _mrb_true_value($agg_result);
      label = 10; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $12=$c;
      var $super=(($12+20)|0);
      var $13=HEAP32[(($super)>>2)];
      $c=$13;
      label = 3; break;
    case 9: 
      _mrb_false_value($agg_result);
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_append_features($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $klass=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_check_type($0, $mod, 10);
  var $1=$mrb_addr;
  var $call=_mrb_get_args($1, ((94920)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$klass,tempInt));
  var $2=$mrb_addr;
  var $value=(($klass)|0);
  var $p=$value;
  var $3=HEAP32[(($p)>>2)];
  var $4=$3;
  var $value1=(($mod)|0);
  var $p2=$value1;
  var $5=HEAP32[(($p2)>>2)];
  var $6=$5;
  _mrb_include_module($2, $4, $6);
  var $7=$agg_result;
  var $8=$mod;
  assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_included_modules($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $result=__stackBase__;
      var $c;
      var $tmp=(__stackBase__)+(12);
      var $agg_tmp=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      var $value=(($self)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $c=$1;
      var $2=$mrb_addr;
      _mrb_ary_new($tmp, $2);
      var $3=$result;
      var $4=$tmp;
      assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
      label = 3; break;
    case 3: 
      var $5=$c;
      var $tobool=(($5)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $6=$c;
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $bf_clear=$8 & 255;
      var $cmp=(($bf_clear)|(0))==11;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=$mrb_addr;
      var $10=$c;
      var $c1=(($10+4)|0);
      var $11=HEAP32[(($c1)>>2)];
      var $12=$11;
      _mrb_obj_value753($agg_tmp, $12);
      _mrb_ary_push($9, $result, $agg_tmp);
      label = 6; break;
    case 6: 
      var $13=$c;
      var $super=(($13+20)|0);
      var $14=HEAP32[(($super)>>2)];
      $c=$14;
      label = 3; break;
    case 7: 
      var $15=$agg_result;
      var $16=$result;
      assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_instance_methods($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $c;
  var $recur=__stackBase__;
  $mrb_addr=$mrb;
  var $value=(($mod)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  $c=$1;
  HEAP8[($recur)]=1;
  var $2=$mrb_addr;
  var $call=_mrb_get_args($2, ((94384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$recur,tempInt));
  var $3=$mrb_addr;
  var $4=HEAP8[($recur)];
  var $5=$c;
  _class_instance_method_list($agg_result, $3, $4, $5, 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_method_defined($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $id=__stackBase__;
      var $method_defined_p;
      var $tmp=(__stackBase__)+(12);
      var $sym3=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      _get_sym_or_str_arg($tmp, $0);
      var $1=$id;
      var $2=$tmp;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      var $tt=(($id+8)|0);
      var $3=HEAP32[(($tt)>>2)];
      var $cmp=(($3)|(0))==4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $value=(($mod)|0);
      var $p=$value;
      var $4=HEAP32[(($p)>>2)];
      var $5=$4;
      var $value1=(($id)|0);
      var $sym=$value1;
      var $6=HEAP16[(($sym)>>1)];
      var $call=_mrb_obj_respond_to($5, $6);
      var $conv=(($call) & 255);
      $method_defined_p=$conv;
      label = 9; break;
    case 4: 
      var $7=$mrb_addr;
      _mrb_check_intern_str($sym3, $7, $id);
      var $tt4=(($sym3+8)|0);
      var $8=HEAP32[(($tt4)>>2)];
      var $cmp5=(($8)|(0))==0;
      if ($cmp5) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $value7=(($sym3)|0);
      var $i=$value7;
      var $9=HEAP32[(($i)>>2)];
      var $tobool=(($9)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 6; break; }
    case 6: 
      $method_defined_p=0;
      label = 8; break;
    case 7: 
      var $value10=(($mod)|0);
      var $p11=$value10;
      var $10=HEAP32[(($p11)>>2)];
      var $11=$10;
      var $value12=(($sym3)|0);
      var $sym13=$value12;
      var $12=HEAP16[(($sym13)>>1)];
      var $call14=_mrb_obj_respond_to($11, $12);
      var $conv15=(($call14) & 255);
      $method_defined_p=$conv15;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $13=$method_defined_p;
      _mrb_bool_value793($agg_result, $13);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_to_s($agg_result, $mrb, $klass) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 192)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $klass; $klass = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($klass)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($klass)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($klass)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $str=__stackBase__;
      var $v=(__stackBase__)+(12);
      var $tmp=(__stackBase__)+(24);
      var $agg_tmp=(__stackBase__)+(36);
      var $tmp2=(__stackBase__)+(48);
      var $agg_tmp3=(__stackBase__)+(60);
      var $tmp4=(__stackBase__)+(72);
      var $tmp5=(__stackBase__)+(84);
      var $c;
      var $path=(__stackBase__)+(96);
      var $tmp8=(__stackBase__)+(108);
      var $tmp9=(__stackBase__)+(120);
      var $tmp16=(__stackBase__)+(132);
      var $tmp18=(__stackBase__)+(144);
      var $tmp20=(__stackBase__)+(156);
      var $agg_tmp22=(__stackBase__)+(168);
      var $tmp23=(__stackBase__)+(180);
      $mrb_addr=$mrb;
      var $tt=(($klass+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)|(0))==12;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$mrb_addr;
      var $2=$mrb_addr;
      var $call=_mrb_intern2($2, ((94552)|0), 12);
      _mrb_iv_get($v, $1, $klass, $call);
      var $3=$mrb_addr;
      _mrb_str_new($tmp, $3, ((104172)|0), 8);
      var $4=$str;
      var $5=$tmp;
      assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
      var $tt1=(($v+8)|0);
      var $6=HEAP32[(($tt1)>>2)];
      if ((($6)|(0))==9 | (($6)|(0))==10 | (($6)|(0))==12) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
    case 4: 
      var $7=$mrb_addr;
      var $8=$mrb_addr;
      _mrb_inspect($agg_tmp, $8, $v);
      _mrb_str_append($tmp2, $7, $str, $agg_tmp);
      label = 6; break;
    case 5: 
      var $9=$mrb_addr;
      var $10=$mrb_addr;
      _mrb_any_to_s($agg_tmp3, $10, $v);
      _mrb_str_append($tmp4, $9, $str, $agg_tmp3);
      label = 6; break;
    case 6: 
      var $11=$mrb_addr;
      _mrb_str_cat($tmp5, $11, $str, ((103848)|0), 1);
      label = 16; break;
    case 7: 
      var $12=$mrb_addr;
      _mrb_str_buf_new($tmp8, $12, 32);
      var $13=$str;
      var $14=$tmp8;
      assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
      var $value=(($klass)|0);
      var $p=$value;
      var $15=HEAP32[(($p)>>2)];
      var $16=$15;
      $c=$16;
      var $17=$mrb_addr;
      var $18=$c;
      _mrb_class_path($tmp9, $17, $18);
      var $19=$path;
      var $20=$tmp9;
      assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
      var $tt10=(($path+8)|0);
      var $21=HEAP32[(($tt10)>>2)];
      var $cmp11=(($21)|(0))==0;
      if ($cmp11) { label = 8; break; } else { label = 14; break; }
    case 8: 
      var $value12=(($path)|0);
      var $i=$value12;
      var $22=HEAP32[(($i)>>2)];
      var $tobool=(($22)|(0))!=0;
      if ($tobool) { label = 14; break; } else { label = 9; break; }
    case 9: 
      var $tt14=(($klass+8)|0);
      var $23=HEAP32[(($tt14)>>2)];
      if ((($23)|(0))==9) {
        label = 10; break;
      }
      else if ((($23)|(0))==10) {
        label = 11; break;
      }
      else {
      label = 12; break;
      }
    case 10: 
      var $24=$mrb_addr;
      _mrb_str_cat($tmp16, $24, $str, ((104172)|0), 8);
      label = 13; break;
    case 11: 
      var $25=$mrb_addr;
      _mrb_str_cat($tmp18, $25, $str, ((94488)|0), 9);
      label = 13; break;
    case 12: 
      var $26=$mrb_addr;
      _mrb_str_cat($tmp20, $26, $str, ((94444)|0), 9);
      label = 13; break;
    case 13: 
      var $27=$mrb_addr;
      var $28=$mrb_addr;
      var $29=$c;
      var $30=$29;
      _mrb_ptr_to_str($agg_tmp22, $28, $30);
      _mrb_str_concat($27, $str, $agg_tmp22);
      var $31=$mrb_addr;
      _mrb_str_cat($tmp23, $31, $str, ((103848)|0), 1);
      label = 15; break;
    case 14: 
      var $32=$str;
      var $33=$path;
      assert(12 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $34=$agg_result;
      var $35=$str;
      assert(12 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_ancestors($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $result=__stackBase__;
      var $c;
      var $tmp=(__stackBase__)+(12);
      var $agg_tmp=(__stackBase__)+(24);
      var $agg_tmp1=(__stackBase__)+(36);
      var $agg_tmp6=(__stackBase__)+(48);
      $mrb_addr=$mrb;
      var $value=(($self)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $c=$1;
      var $2=$mrb_addr;
      _mrb_ary_new($tmp, $2);
      var $3=$result;
      var $4=$tmp;
      assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
      var $5=$mrb_addr;
      var $6=$c;
      var $7=$6;
      _mrb_obj_value753($agg_tmp, $7);
      _mrb_ary_push($5, $result, $agg_tmp);
      var $8=$c;
      var $super=(($8+20)|0);
      var $9=HEAP32[(($super)>>2)];
      $c=$9;
      label = 3; break;
    case 3: 
      var $10=$c;
      var $tobool=(($10)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $11=$c;
      var $12=$11;
      var $13=HEAP32[(($12)>>2)];
      var $bf_clear=$13 & 255;
      var $cmp=(($bf_clear)|(0))==11;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $14=$mrb_addr;
      var $15=$c;
      var $c2=(($15+4)|0);
      var $16=HEAP32[(($c2)>>2)];
      var $17=$16;
      _mrb_obj_value753($agg_tmp1, $17);
      _mrb_ary_push($14, $result, $agg_tmp1);
      label = 9; break;
    case 6: 
      var $18=$c;
      var $19=$18;
      var $20=HEAP32[(($19)>>2)];
      var $bf_clear3=$20 & 255;
      var $cmp4=(($bf_clear3)|(0))!=12;
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $21=$mrb_addr;
      var $22=$c;
      var $23=$22;
      _mrb_obj_value753($agg_tmp6, $23);
      _mrb_ary_push($21, $result, $agg_tmp6);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $24=$c;
      var $super8=(($24+20)|0);
      var $25=HEAP32[(($super8)>>2)];
      $c=$25;
      label = 3; break;
    case 10: 
      var $26=$agg_result;
      var $27=$result;
      assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mod_define_method($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $c;
      var $p1;
      var $mid=__stackBase__;
      var $blk=(__stackBase__)+(4);
      $mrb_addr=$mrb;
      var $value=(($self)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $c=$1;
      var $2=$mrb_addr;
      var $call=_mrb_get_args($2, ((94672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$mid,HEAP32[(((tempInt)+(4))>>2)]=$blk,tempInt));
      var $tt=(($blk+8)|0);
      var $3=HEAP32[(($tt)>>2)];
      var $cmp=(($3)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $value2=(($blk)|0);
      var $i=$value2;
      var $4=HEAP32[(($i)>>2)];
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $5=$mrb_addr;
      var $6=$mrb_addr;
      var $call3=_mrb_class_get($6, ((94388)|0));
      _mrb_raise($5, $call3, ((94600)|0));
      label = 5; break;
    case 5: 
      var $7=$mrb_addr;
      var $8=$mrb_addr;
      var $proc_class=(($8+56)|0);
      var $9=HEAP32[(($proc_class)>>2)];
      var $call4=_mrb_obj_alloc($7, 13, $9);
      var $10=$call4;
      $p1=$10;
      var $11=$p1;
      var $value5=(($blk)|0);
      var $p6=$value5;
      var $12=HEAP32[(($p6)>>2)];
      var $13=$12;
      _mrb_proc_copy($11, $13);
      var $14=$mrb_addr;
      var $15=$c;
      var $16=HEAP16[(($mid)>>1)];
      var $17=$p1;
      _mrb_define_method_raw($14, $15, $16, $17);
      var $18=$agg_result;
      var $19=$blk;
      assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_eqq($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $obj=__stackBase__;
  var $eqq;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((94920)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj,tempInt));
  var $1=$mrb_addr;
  var $value=(($mod)|0);
  var $p=$value;
  var $2=HEAP32[(($p)>>2)];
  var $3=$2;
  var $call1=_mrb_obj_is_kind_of($1, $obj, $3);
  var $conv=(($call1) & 255);
  $eqq=$conv;
  var $4=$eqq;
  _mrb_bool_value793($agg_result, $4);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_s_constants($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $call=_mrb_class_get($1, ((107124)|0));
  _mrb_raise($0, $call, ((94972)|0));
  _mrb_nil_value777($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_true_value($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=2;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_false_value($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _check_cv_name_str($mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $s;
      var $len;
      $mrb_addr=$mrb;
      var $value=(($str)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $ptr=(($1+20)|0);
      var $2=HEAP32[(($ptr)>>2)];
      $s=$2;
      var $value1=(($str)|0);
      var $p2=$value1;
      var $3=HEAP32[(($p2)>>2)];
      var $4=$3;
      var $len3=(($4+12)|0);
      var $5=HEAP32[(($len3)>>2)];
      $len=$5;
      var $6=$len;
      var $cmp=(($6)>>>(0)) < 3;
      if ($cmp) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $7=$s;
      var $arrayidx=(($7)|0);
      var $8=HEAP8[($arrayidx)];
      var $conv=(($8 << 24) >> 24);
      var $cmp4=(($conv)|(0))==64;
      if ($cmp4) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $9=$s;
      var $arrayidx6=(($9+1)|0);
      var $10=HEAP8[($arrayidx6)];
      var $conv7=(($10 << 24) >> 24);
      var $cmp8=(($conv7)|(0))==64;
      if ($cmp8) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $11=$mrb_addr;
      var $12=$mrb_addr;
      var $call=_mrb_intern_str($12, $str);
      _mrb_name_error($11, $call, ((94304)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($str)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($str)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($str)+(8))>>2)],tempInt));
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _check_type($agg_result, $mrb, $val, $t, $c, $m) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $t_addr;
      var $c_addr;
      var $m_addr;
      var $tmp=__stackBase__;
      var $tmp1=(__stackBase__)+(12);
      var $agg_tmp=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      $t_addr=$t;
      $c_addr=$c;
      $m_addr=$m;
      var $0=$mrb_addr;
      var $1=$t_addr;
      var $2=$c_addr;
      var $3=$m_addr;
      _mrb_check_convert_type($tmp1, $0, $val, $1, $2, $3);
      var $4=$tmp;
      var $5=$tmp1;
      assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
      var $tt=(($tmp+8)|0);
      var $6=HEAP32[(($tt)>>2)];
      var $cmp=(($6)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $value=(($tmp)|0);
      var $i=$value;
      var $7=HEAP32[(($i)>>2)];
      var $tobool=(($7)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $8=$mrb_addr;
      var $9=$mrb_addr;
      var $call=_mrb_class_get($9, ((105900)|0));
      var $10=$mrb_addr;
      var $11=$c_addr;
      _mrb_str_new_cstr($agg_tmp, $10, $11);
      _mrb_raisef($8, $call, ((93444)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      var $12=$agg_result;
      var $13=$tmp;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _codegen_malloc($s, $len) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $len_addr;
      var $p;
      $s_addr=$s;
      $len_addr=$len;
      var $0=$s_addr;
      var $mrb=(($0)|0);
      var $1=HEAP32[(($mrb)>>2)];
      var $2=$len_addr;
      var $call=_mrb_malloc($1, $2);
      $p=$call;
      var $3=$p;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$s_addr;
      _codegen_error($4, ((95024)|0));
      label = 4; break;
    case 4: 
      var $5=$p;
      return $5;
    default: assert(0, "bad label: " + label);
  }
}
function _codegen_realloc($s, $p, $len) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $p_addr;
      var $len_addr;
      $s_addr=$s;
      $p_addr=$p;
      $len_addr=$len;
      var $0=$s_addr;
      var $mrb=(($0)|0);
      var $1=HEAP32[(($mrb)>>2)];
      var $2=$p_addr;
      var $3=$len_addr;
      var $call=_mrb_realloc($1, $2, $3);
      $p_addr=$call;
      var $4=$p_addr;
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $5=$len_addr;
      var $cmp=(($5)>>>(0)) > 0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$s_addr;
      _codegen_error($6, ((109540)|0));
      label = 5; break;
    case 5: 
      var $7=$p_addr;
      return $7;
    default: assert(0, "bad label: " + label);
  }
}
function _codedump_all($mrb, $start) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $start_addr;
      var $i;
      $mrb_addr=$mrb;
      $start_addr=$start;
      var $0=$start_addr;
      $i=$0;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $2=$mrb_addr;
      var $irep_len=(($2+28)|0);
      var $3=HEAP32[(($irep_len)>>2)];
      var $cmp=(($1)>>>(0)) < (($3)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $4=$mrb_addr;
      var $5=$i;
      _codedump($4, $5);
      label = 5; break;
    case 5: 
      var $6=$i;
      var $inc=((($6)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _codegen_error($s, $message) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $message_addr;
      $s_addr=$s;
      $message_addr=$message;
      var $0=$s_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      STACKTOP = __stackBase__;
      return;
    case 4: 
      label = 5; break;
    case 5: 
      var $1=$s_addr;
      var $prev=(($1+48)|0);
      var $2=HEAP32[(($prev)>>2)];
      var $tobool1=(($2)|(0))!=0;
      if ($tobool1) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $3=$s_addr;
      var $mpool=(($3+4)|0);
      var $4=HEAP32[(($mpool)>>2)];
      _mrb_pool_close($4);
      var $5=$s_addr;
      var $prev2=(($5+48)|0);
      var $6=HEAP32[(($prev2)>>2)];
      $s_addr=$6;
      label = 5; break;
    case 7: 
      var $7=$s_addr;
      var $mpool3=(($7+4)|0);
      var $8=HEAP32[(($mpool3)>>2)];
      _mrb_pool_close($8);
      var $9=$s_addr;
      var $filename=(($9+80)|0);
      var $10=HEAP32[(($filename)>>2)];
      var $tobool4=(($10)|(0))!=0;
      if ($tobool4) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $11=$s_addr;
      var $lineno=(($11+84)|0);
      var $12=HEAP16[(($lineno)>>1)];
      var $conv=(($12 << 16) >> 16);
      var $tobool5=(($conv)|(0))!=0;
      if ($tobool5) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $13=HEAP32[((_stderr)>>2)];
      var $14=$s_addr;
      var $filename7=(($14+80)|0);
      var $15=HEAP32[(($filename7)>>2)];
      var $16=$s_addr;
      var $lineno8=(($16+84)|0);
      var $17=HEAP16[(($lineno8)>>1)];
      var $conv9=(($17 << 16) >> 16);
      var $18=$message_addr;
      var $call=_fprintf($13, ((113916)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$15,HEAP32[(((tempInt)+(4))>>2)]=$conv9,HEAP32[(((tempInt)+(8))>>2)]=$18,tempInt));
      label = 11; break;
    case 10: 
      var $19=HEAP32[((_stderr)>>2)];
      var $20=$message_addr;
      var $call10=_fprintf($19, ((113532)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$20,tempInt));
      label = 11; break;
    case 11: 
      var $21=$s_addr;
      var $jmp=(($21+8)|0);
      var $arraydecay=(($jmp)|0);
      _longjmp($arraydecay, 1);
      throw "Reached an unreachable!";
    default: assert(0, "bad label: " + label);
  }
}
function _codedump($mrb, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $n_addr;
      var $irep;
      var $i;
      var $ai;
      var $c;
      var $s=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      $n_addr=$n;
      var $0=$n_addr;
      var $1=$mrb_addr;
      var $irep1=(($1+24)|0);
      var $2=HEAP32[(($irep1)>>2)];
      var $arrayidx=(($2+($0<<2))|0);
      var $3=HEAP32[(($arrayidx)>>2)];
      $irep=$3;
      var $4=$irep;
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 84; break;
    case 4: 
      var $5=$n_addr;
      var $6=$irep;
      var $nregs=(($6+6)|0);
      var $7=HEAP16[(($nregs)>>1)];
      var $conv=(($7)&(65535));
      var $8=$irep;
      var $nlocals=(($8+4)|0);
      var $9=HEAP16[(($nlocals)>>1)];
      var $conv2=(($9)&(65535));
      var $10=$irep;
      var $plen=(($10+36)|0);
      var $11=HEAP32[(($plen)>>2)];
      var $12=$irep;
      var $slen=(($12+40)|0);
      var $13=HEAP32[(($slen)>>2)];
      var $call=_printf(((106148)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$5,HEAP32[(((tempInt)+(4))>>2)]=$conv,HEAP32[(((tempInt)+(8))>>2)]=$conv2,HEAP32[(((tempInt)+(12))>>2)]=$11,HEAP32[(((tempInt)+(16))>>2)]=$13,tempInt));
      $i=0;
      label = 5; break;
    case 5: 
      var $14=$i;
      var $15=$irep;
      var $ilen=(($15+32)|0);
      var $16=HEAP32[(($ilen)>>2)];
      var $cmp=(($14)>>>(0)) < (($16)>>>(0));
      if ($cmp) { label = 6; break; } else { label = 83; break; }
    case 6: 
      var $17=$mrb_addr;
      var $call4=_mrb_gc_arena_save($17);
      $ai=$call4;
      var $18=$i;
      var $call5=_printf(((105808)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$18,tempInt));
      var $19=$i;
      var $20=$irep;
      var $iseq=(($20+12)|0);
      var $21=HEAP32[(($iseq)>>2)];
      var $arrayidx6=(($21+($19<<2))|0);
      var $22=HEAP32[(($arrayidx6)>>2)];
      $c=$22;
      var $23=$c;
      var $and=$23 & 127;
      if ((($and)|(0))==0) {
        label = 7; break;
      }
      else if ((($and)|(0))==1) {
        label = 8; break;
      }
      else if ((($and)|(0))==2) {
        label = 9; break;
      }
      else if ((($and)|(0))==3) {
        label = 10; break;
      }
      else if ((($and)|(0))==4) {
        label = 11; break;
      }
      else if ((($and)|(0))==5) {
        label = 12; break;
      }
      else if ((($and)|(0))==6) {
        label = 13; break;
      }
      else if ((($and)|(0))==7) {
        label = 14; break;
      }
      else if ((($and)|(0))==8) {
        label = 15; break;
      }
      else if ((($and)|(0))==9) {
        label = 16; break;
      }
      else if ((($and)|(0))==10) {
        label = 17; break;
      }
      else if ((($and)|(0))==17) {
        label = 18; break;
      }
      else if ((($and)|(0))==18) {
        label = 19; break;
      }
      else if ((($and)|(0))==19) {
        label = 20; break;
      }
      else if ((($and)|(0))==20) {
        label = 21; break;
      }
      else if ((($and)|(0))==13) {
        label = 22; break;
      }
      else if ((($and)|(0))==14) {
        label = 23; break;
      }
      else if ((($and)|(0))==21) {
        label = 24; break;
      }
      else if ((($and)|(0))==22) {
        label = 25; break;
      }
      else if ((($and)|(0))==15) {
        label = 26; break;
      }
      else if ((($and)|(0))==16) {
        label = 27; break;
      }
      else if ((($and)|(0))==23) {
        label = 28; break;
      }
      else if ((($and)|(0))==24) {
        label = 29; break;
      }
      else if ((($and)|(0))==25) {
        label = 30; break;
      }
      else if ((($and)|(0))==32) {
        label = 31; break;
      }
      else if ((($and)|(0))==33) {
        label = 32; break;
      }
      else if ((($and)|(0))==42) {
        label = 33; break;
      }
      else if ((($and)|(0))==36) {
        label = 34; break;
      }
      else if ((($and)|(0))==37) {
        label = 35; break;
      }
      else if ((($and)|(0))==38) {
        label = 36; break;
      }
      else if ((($and)|(0))==41) {
        label = 37; break;
      }
      else if ((($and)|(0))==43) {
        label = 43; break;
      }
      else if ((($and)|(0))==64) {
        label = 44; break;
      }
      else if ((($and)|(0))==65) {
        label = 45; break;
      }
      else if ((($and)|(0))==70) {
        label = 46; break;
      }
      else if ((($and)|(0))==44) {
        label = 47; break;
      }
      else if ((($and)|(0))==45) {
        label = 48; break;
      }
      else if ((($and)|(0))==46) {
        label = 49; break;
      }
      else if ((($and)|(0))==47) {
        label = 50; break;
      }
      else if ((($and)|(0))==48) {
        label = 51; break;
      }
      else if ((($and)|(0))==49) {
        label = 52; break;
      }
      else if ((($and)|(0))==51) {
        label = 53; break;
      }
      else if ((($and)|(0))==52) {
        label = 54; break;
      }
      else if ((($and)|(0))==53) {
        label = 55; break;
      }
      else if ((($and)|(0))==54) {
        label = 56; break;
      }
      else if ((($and)|(0))==50) {
        label = 57; break;
      }
      else if ((($and)|(0))==74) {
        label = 58; break;
      }
      else if ((($and)|(0))==55) {
        label = 59; break;
      }
      else if ((($and)|(0))==56) {
        label = 60; break;
      }
      else if ((($and)|(0))==57) {
        label = 61; break;
      }
      else if ((($and)|(0))==58) {
        label = 62; break;
      }
      else if ((($and)|(0))==60) {
        label = 63; break;
      }
      else if ((($and)|(0))==61) {
        label = 64; break;
      }
      else if ((($and)|(0))==62) {
        label = 65; break;
      }
      else if ((($and)|(0))==63) {
        label = 66; break;
      }
      else if ((($and)|(0))==66) {
        label = 67; break;
      }
      else if ((($and)|(0))==67) {
        label = 68; break;
      }
      else if ((($and)|(0))==68) {
        label = 69; break;
      }
      else if ((($and)|(0))==69) {
        label = 70; break;
      }
      else if ((($and)|(0))==71) {
        label = 71; break;
      }
      else if ((($and)|(0))==72) {
        label = 72; break;
      }
      else if ((($and)|(0))==75) {
        label = 73; break;
      }
      else if ((($and)|(0))==30) {
        label = 74; break;
      }
      else if ((($and)|(0))==26) {
        label = 75; break;
      }
      else if ((($and)|(0))==27) {
        label = 76; break;
      }
      else if ((($and)|(0))==29) {
        label = 77; break;
      }
      else if ((($and)|(0))==28) {
        label = 78; break;
      }
      else if ((($and)|(0))==31) {
        label = 79; break;
      }
      else {
      label = 80; break;
      }
    case 7: 
      var $call7=_printf(((105532)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 81; break;
    case 8: 
      var $24=$c;
      var $shr=$24 >>> 23;
      var $and9=$shr & 511;
      var $25=$c;
      var $shr10=$25 >>> 14;
      var $and11=$shr10 & 511;
      var $call12=_printf(((105204)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and9,HEAP32[(((tempInt)+(4))>>2)]=$and11,tempInt));
      label = 81; break;
    case 9: 
      var $26=$c;
      var $shr14=$26 >>> 23;
      var $and15=$shr14 & 511;
      var $27=$c;
      var $shr16=$27 >>> 7;
      var $and17=$shr16 & 65535;
      var $call18=_printf(((104924)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and15,HEAP32[(((tempInt)+(4))>>2)]=$and17,tempInt));
      label = 81; break;
    case 10: 
      var $28=$c;
      var $shr20=$28 >>> 23;
      var $and21=$shr20 & 511;
      var $29=$c;
      var $shr22=$29 >>> 7;
      var $and23=$shr22 & 65535;
      var $sub=((($and23)-(32767))|0);
      var $call24=_printf(((104616)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and21,HEAP32[(((tempInt)+(4))>>2)]=$sub,tempInt));
      label = 81; break;
    case 11: 
      var $30=$c;
      var $shr26=$30 >>> 23;
      var $and27=$shr26 & 511;
      var $31=$mrb_addr;
      var $32=$c;
      var $shr28=$32 >>> 7;
      var $and29=$shr28 & 65535;
      var $33=$irep;
      var $syms=(($33+20)|0);
      var $34=HEAP32[(($syms)>>2)];
      var $arrayidx30=(($34+($and29<<1))|0);
      var $35=HEAP16[(($arrayidx30)>>1)];
      var $call31=_mrb_sym2name($31, $35);
      var $call32=_printf(((104096)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and27,HEAP32[(((tempInt)+(4))>>2)]=$call31,tempInt));
      label = 81; break;
    case 12: 
      var $36=$c;
      var $shr34=$36 >>> 23;
      var $and35=$shr34 & 511;
      var $call36=_printf(((103816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and35,tempInt));
      label = 81; break;
    case 13: 
      var $37=$c;
      var $shr38=$37 >>> 23;
      var $and39=$shr38 & 511;
      var $call40=_printf(((103596)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and39,tempInt));
      label = 81; break;
    case 14: 
      var $38=$c;
      var $shr42=$38 >>> 23;
      var $and43=$shr42 & 511;
      var $call44=_printf(((103384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and43,tempInt));
      label = 81; break;
    case 15: 
      var $39=$c;
      var $shr46=$39 >>> 23;
      var $and47=$shr46 & 511;
      var $call48=_printf(((103192)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and47,tempInt));
      label = 81; break;
    case 16: 
      var $40=$c;
      var $shr50=$40 >>> 23;
      var $and51=$shr50 & 511;
      var $41=$mrb_addr;
      var $42=$c;
      var $shr52=$42 >>> 7;
      var $and53=$shr52 & 65535;
      var $43=$irep;
      var $syms54=(($43+20)|0);
      var $44=HEAP32[(($syms54)>>2)];
      var $arrayidx55=(($44+($and53<<1))|0);
      var $45=HEAP16[(($arrayidx55)>>1)];
      var $call56=_mrb_sym2name($41, $45);
      var $call57=_printf(((102876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and51,HEAP32[(((tempInt)+(4))>>2)]=$call56,tempInt));
      label = 81; break;
    case 17: 
      var $46=$mrb_addr;
      var $47=$c;
      var $shr59=$47 >>> 7;
      var $and60=$shr59 & 65535;
      var $48=$irep;
      var $syms61=(($48+20)|0);
      var $49=HEAP32[(($syms61)>>2)];
      var $arrayidx62=(($49+($and60<<1))|0);
      var $50=HEAP16[(($arrayidx62)>>1)];
      var $call63=_mrb_sym2name($46, $50);
      var $51=$c;
      var $shr64=$51 >>> 23;
      var $and65=$shr64 & 511;
      var $call66=_printf(((102712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call63,HEAP32[(((tempInt)+(4))>>2)]=$and65,tempInt));
      label = 81; break;
    case 18: 
      var $52=$c;
      var $shr68=$52 >>> 23;
      var $and69=$shr68 & 511;
      var $53=$mrb_addr;
      var $54=$c;
      var $shr70=$54 >>> 7;
      var $and71=$shr70 & 65535;
      var $55=$irep;
      var $syms72=(($55+20)|0);
      var $56=HEAP32[(($syms72)>>2)];
      var $arrayidx73=(($56+($and71<<1))|0);
      var $57=HEAP16[(($arrayidx73)>>1)];
      var $call74=_mrb_sym2name($53, $57);
      var $call75=_printf(((102456)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and69,HEAP32[(((tempInt)+(4))>>2)]=$call74,tempInt));
      label = 81; break;
    case 19: 
      var $58=$mrb_addr;
      var $59=$c;
      var $shr77=$59 >>> 7;
      var $and78=$shr77 & 65535;
      var $60=$irep;
      var $syms79=(($60+20)|0);
      var $61=HEAP32[(($syms79)>>2)];
      var $arrayidx80=(($61+($and78<<1))|0);
      var $62=HEAP16[(($arrayidx80)>>1)];
      var $call81=_mrb_sym2name($58, $62);
      var $63=$c;
      var $shr82=$63 >>> 23;
      var $and83=$shr82 & 511;
      var $call84=_printf(((102076)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call81,HEAP32[(((tempInt)+(4))>>2)]=$and83,tempInt));
      label = 81; break;
    case 20: 
      var $64=$c;
      var $shr86=$64 >>> 23;
      var $and87=$shr86 & 511;
      var $65=$c;
      var $shr88=$65 >>> 23;
      var $and89=$shr88 & 511;
      var $66=$mrb_addr;
      var $67=$c;
      var $shr90=$67 >>> 7;
      var $and91=$shr90 & 65535;
      var $68=$irep;
      var $syms92=(($68+20)|0);
      var $69=HEAP32[(($syms92)>>2)];
      var $arrayidx93=(($69+($and91<<1))|0);
      var $70=HEAP16[(($arrayidx93)>>1)];
      var $call94=_mrb_sym2name($66, $70);
      var $call95=_printf(((101872)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and87,HEAP32[(((tempInt)+(4))>>2)]=$and89,HEAP32[(((tempInt)+(8))>>2)]=$call94,tempInt));
      label = 81; break;
    case 21: 
      var $71=$c;
      var $shr97=$71 >>> 23;
      var $and98=$shr97 & 511;
      var $add=((($and98)+(1))|0);
      var $72=$mrb_addr;
      var $73=$c;
      var $shr99=$73 >>> 7;
      var $and100=$shr99 & 65535;
      var $74=$irep;
      var $syms101=(($74+20)|0);
      var $75=HEAP32[(($syms101)>>2)];
      var $arrayidx102=(($75+($and100<<1))|0);
      var $76=HEAP16[(($arrayidx102)>>1)];
      var $call103=_mrb_sym2name($72, $76);
      var $77=$c;
      var $shr104=$77 >>> 23;
      var $and105=$shr104 & 511;
      var $call106=_printf(((101396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$add,HEAP32[(((tempInt)+(4))>>2)]=$call103,HEAP32[(((tempInt)+(8))>>2)]=$and105,tempInt));
      label = 81; break;
    case 22: 
      var $78=$c;
      var $shr108=$78 >>> 23;
      var $and109=$shr108 & 511;
      var $79=$mrb_addr;
      var $80=$c;
      var $shr110=$80 >>> 7;
      var $and111=$shr110 & 65535;
      var $81=$irep;
      var $syms112=(($81+20)|0);
      var $82=HEAP32[(($syms112)>>2)];
      var $arrayidx113=(($82+($and111<<1))|0);
      var $83=HEAP16[(($arrayidx113)>>1)];
      var $call114=_mrb_sym2name($79, $83);
      var $call115=_printf(((101088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and109,HEAP32[(((tempInt)+(4))>>2)]=$call114,tempInt));
      label = 81; break;
    case 23: 
      var $84=$mrb_addr;
      var $85=$c;
      var $shr117=$85 >>> 7;
      var $and118=$shr117 & 65535;
      var $86=$irep;
      var $syms119=(($86+20)|0);
      var $87=HEAP32[(($syms119)>>2)];
      var $arrayidx120=(($87+($and118<<1))|0);
      var $88=HEAP16[(($arrayidx120)>>1)];
      var $call121=_mrb_sym2name($84, $88);
      var $89=$c;
      var $shr122=$89 >>> 23;
      var $and123=$shr122 & 511;
      var $call124=_printf(((100804)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call121,HEAP32[(((tempInt)+(4))>>2)]=$and123,tempInt));
      label = 81; break;
    case 24: 
      var $90=$c;
      var $shr126=$90 >>> 23;
      var $and127=$shr126 & 511;
      var $91=$c;
      var $shr128=$91 >>> 14;
      var $and129=$shr128 & 511;
      var $92=$c;
      var $shr130=$92 >>> 7;
      var $and131=$shr130 & 127;
      var $call132=_printf(((100560)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and127,HEAP32[(((tempInt)+(4))>>2)]=$and129,HEAP32[(((tempInt)+(8))>>2)]=$and131,tempInt));
      label = 81; break;
    case 25: 
      var $93=$c;
      var $shr134=$93 >>> 23;
      var $and135=$shr134 & 511;
      var $94=$c;
      var $shr136=$94 >>> 14;
      var $and137=$shr136 & 511;
      var $95=$c;
      var $shr138=$95 >>> 7;
      var $and139=$shr138 & 127;
      var $call140=_printf(((100332)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and135,HEAP32[(((tempInt)+(4))>>2)]=$and137,HEAP32[(((tempInt)+(8))>>2)]=$and139,tempInt));
      label = 81; break;
    case 26: 
      var $96=$c;
      var $shr142=$96 >>> 23;
      var $and143=$shr142 & 511;
      var $97=$mrb_addr;
      var $98=$c;
      var $shr144=$98 >>> 7;
      var $and145=$shr144 & 65535;
      var $99=$irep;
      var $syms146=(($99+20)|0);
      var $100=HEAP32[(($syms146)>>2)];
      var $arrayidx147=(($100+($and145<<1))|0);
      var $101=HEAP16[(($arrayidx147)>>1)];
      var $call148=_mrb_sym2name($97, $101);
      var $call149=_printf(((100164)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and143,HEAP32[(((tempInt)+(4))>>2)]=$call148,tempInt));
      label = 81; break;
    case 27: 
      var $102=$mrb_addr;
      var $103=$c;
      var $shr151=$103 >>> 7;
      var $and152=$shr151 & 65535;
      var $104=$irep;
      var $syms153=(($104+20)|0);
      var $105=HEAP32[(($syms153)>>2)];
      var $arrayidx154=(($105+($and152<<1))|0);
      var $106=HEAP16[(($arrayidx154)>>1)];
      var $call155=_mrb_sym2name($102, $106);
      var $107=$c;
      var $shr156=$107 >>> 23;
      var $and157=$shr156 & 511;
      var $call158=_printf(((99984)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$call155,HEAP32[(((tempInt)+(4))>>2)]=$and157,tempInt));
      label = 81; break;
    case 28: 
      var $108=$i;
      var $109=$c;
      var $shr160=$109 >>> 7;
      var $and161=$shr160 & 65535;
      var $sub162=((($and161)-(32767))|0);
      var $add163=((($108)+($sub162))|0);
      var $call164=_printf(((99784)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$add163,tempInt));
      label = 81; break;
    case 29: 
      var $110=$c;
      var $shr166=$110 >>> 23;
      var $and167=$shr166 & 511;
      var $111=$i;
      var $112=$c;
      var $shr168=$112 >>> 7;
      var $and169=$shr168 & 65535;
      var $sub170=((($and169)-(32767))|0);
      var $add171=((($111)+($sub170))|0);
      var $call172=_printf(((99544)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and167,HEAP32[(((tempInt)+(4))>>2)]=$add171,tempInt));
      label = 81; break;
    case 30: 
      var $113=$c;
      var $shr174=$113 >>> 23;
      var $and175=$shr174 & 511;
      var $114=$i;
      var $115=$c;
      var $shr176=$115 >>> 7;
      var $and177=$shr176 & 65535;
      var $sub178=((($and177)-(32767))|0);
      var $add179=((($114)+($sub178))|0);
      var $call180=_printf(((99320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and175,HEAP32[(((tempInt)+(4))>>2)]=$add179,tempInt));
      label = 81; break;
    case 31: 
      var $116=$c;
      var $shr182=$116 >>> 23;
      var $and183=$shr182 & 511;
      var $117=$mrb_addr;
      var $118=$c;
      var $shr184=$118 >>> 14;
      var $and185=$shr184 & 511;
      var $119=$irep;
      var $syms186=(($119+20)|0);
      var $120=HEAP32[(($syms186)>>2)];
      var $arrayidx187=(($120+($and185<<1))|0);
      var $121=HEAP16[(($arrayidx187)>>1)];
      var $call188=_mrb_sym2name($117, $121);
      var $122=$c;
      var $shr189=$122 >>> 7;
      var $and190=$shr189 & 127;
      var $call191=_printf(((98780)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and183,HEAP32[(((tempInt)+(4))>>2)]=$call188,HEAP32[(((tempInt)+(8))>>2)]=$and190,tempInt));
      label = 81; break;
    case 32: 
      var $123=$c;
      var $shr193=$123 >>> 23;
      var $and194=$shr193 & 511;
      var $124=$mrb_addr;
      var $125=$c;
      var $shr195=$125 >>> 14;
      var $and196=$shr195 & 511;
      var $126=$irep;
      var $syms197=(($126+20)|0);
      var $127=HEAP32[(($syms197)>>2)];
      var $arrayidx198=(($127+($and196<<1))|0);
      var $128=HEAP16[(($arrayidx198)>>1)];
      var $call199=_mrb_sym2name($124, $128);
      var $129=$c;
      var $shr200=$129 >>> 7;
      var $and201=$shr200 & 127;
      var $call202=_printf(((98532)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and194,HEAP32[(((tempInt)+(4))>>2)]=$call199,HEAP32[(((tempInt)+(8))>>2)]=$and201,tempInt));
      label = 81; break;
    case 33: 
      var $130=$c;
      var $shr204=$130 >>> 23;
      var $and205=$shr204 & 511;
      var $131=$mrb_addr;
      var $132=$c;
      var $shr206=$132 >>> 14;
      var $and207=$shr206 & 511;
      var $133=$irep;
      var $syms208=(($133+20)|0);
      var $134=HEAP32[(($syms208)>>2)];
      var $arrayidx209=(($134+($and207<<1))|0);
      var $135=HEAP16[(($arrayidx209)>>1)];
      var $call210=_mrb_sym2name($131, $135);
      var $136=$c;
      var $shr211=$136 >>> 7;
      var $and212=$shr211 & 127;
      var $call213=_printf(((98268)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and205,HEAP32[(((tempInt)+(4))>>2)]=$call210,HEAP32[(((tempInt)+(8))>>2)]=$and212,tempInt));
      label = 81; break;
    case 34: 
      var $137=$c;
      var $shr215=$137 >>> 23;
      var $and216=$shr215 & 511;
      var $138=$c;
      var $shr217=$138 >>> 7;
      var $and218=$shr217 & 127;
      var $call219=_printf(((98028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and216,HEAP32[(((tempInt)+(4))>>2)]=$and218,tempInt));
      label = 81; break;
    case 35: 
      var $139=$c;
      var $shr221=$139 >>> 23;
      var $and222=$shr221 & 511;
      var $140=$c;
      var $shr223=$140 >>> 7;
      var $and224=$shr223 & 65535;
      var $shr225=$and224 >> 10;
      var $and226=$shr225 & 63;
      var $141=$c;
      var $shr227=$141 >>> 7;
      var $and228=$shr227 & 65535;
      var $shr229=$and228 >> 9;
      var $and230=$shr229 & 1;
      var $142=$c;
      var $shr231=$142 >>> 7;
      var $and232=$shr231 & 65535;
      var $shr233=$and232 >> 4;
      var $and234=$shr233 & 31;
      var $143=$c;
      var $shr235=$143 >>> 7;
      var $and236=$shr235 & 65535;
      var $shr237=$and236 >> 0;
      var $and238=$shr237 & 15;
      var $call239=_printf(((97852)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and222,HEAP32[(((tempInt)+(4))>>2)]=$and226,HEAP32[(((tempInt)+(8))>>2)]=$and230,HEAP32[(((tempInt)+(12))>>2)]=$and234,HEAP32[(((tempInt)+(16))>>2)]=$and238,tempInt));
      label = 81; break;
    case 36: 
      var $144=$c;
      var $shr241=$144 >>> 7;
      var $and242=$shr241 & 33554431;
      var $shr243=$and242 >> 18;
      var $and244=$shr243 & 31;
      var $145=$c;
      var $shr245=$145 >>> 7;
      var $and246=$shr245 & 33554431;
      var $shr247=$and246 >> 13;
      var $and248=$shr247 & 31;
      var $146=$c;
      var $shr249=$146 >>> 7;
      var $and250=$shr249 & 33554431;
      var $shr251=$and250 >> 12;
      var $and252=$shr251 & 1;
      var $147=$c;
      var $shr253=$147 >>> 7;
      var $and254=$shr253 & 33554431;
      var $shr255=$and254 >> 7;
      var $and256=$shr255 & 31;
      var $148=$c;
      var $shr257=$148 >>> 7;
      var $and258=$shr257 & 33554431;
      var $shr259=$and258 >> 2;
      var $and260=$shr259 & 31;
      var $149=$c;
      var $shr261=$149 >>> 7;
      var $and262=$shr261 & 33554431;
      var $shr263=$and262 >> 1;
      var $and264=$shr263 & 1;
      var $150=$c;
      var $shr265=$150 >>> 7;
      var $and266=$shr265 & 33554431;
      var $and267=$and266 & 1;
      var $call268=_printf(((97580)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and244,HEAP32[(((tempInt)+(4))>>2)]=$and248,HEAP32[(((tempInt)+(8))>>2)]=$and252,HEAP32[(((tempInt)+(12))>>2)]=$and256,HEAP32[(((tempInt)+(16))>>2)]=$and260,HEAP32[(((tempInt)+(20))>>2)]=$and264,HEAP32[(((tempInt)+(24))>>2)]=$and267,tempInt));
      label = 81; break;
    case 37: 
      var $151=$c;
      var $shr270=$151 >>> 23;
      var $and271=$shr270 & 511;
      var $call272=_printf(((97468)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and271,tempInt));
      var $152=$c;
      var $shr273=$152 >>> 14;
      var $and274=$shr273 & 511;
      if ((($and274)|(0))==0) {
        label = 38; break;
      }
      else if ((($and274)|(0))==2) {
        label = 39; break;
      }
      else if ((($and274)|(0))==1) {
        label = 40; break;
      }
      else {
      label = 41; break;
      }
    case 38: 
      var $call276=_printf(((97340)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 42; break;
    case 39: 
      var $call278=_printf(((97256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 42; break;
    case 40: 
      var $call280=_printf(((97136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 42; break;
    case 41: 
      var $call281=_printf(((96816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 42; break;
    case 42: 
      label = 81; break;
    case 43: 
      var $153=$c;
      var $shr283=$153 >>> 23;
      var $and284=$shr283 & 511;
      var $154=$c;
      var $shr285=$154 >>> 7;
      var $and286=$shr285 & 65535;
      var $shr287=$and286 >> 10;
      var $and288=$shr287 & 63;
      var $155=$c;
      var $shr289=$155 >>> 7;
      var $and290=$shr289 & 65535;
      var $shr291=$and290 >> 9;
      var $and292=$shr291 & 1;
      var $156=$c;
      var $shr293=$156 >>> 7;
      var $and294=$shr293 & 65535;
      var $shr295=$and294 >> 4;
      var $and296=$shr295 & 31;
      var $157=$c;
      var $shr297=$157 >>> 7;
      var $and298=$shr297 & 65535;
      var $shr299=$and298 >> 0;
      var $and300=$shr299 & 15;
      var $call301=_printf(((96668)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and284,HEAP32[(((tempInt)+(4))>>2)]=$and288,HEAP32[(((tempInt)+(8))>>2)]=$and292,HEAP32[(((tempInt)+(12))>>2)]=$and296,HEAP32[(((tempInt)+(16))>>2)]=$and300,tempInt));
      label = 81; break;
    case 44: 
      var $158=$c;
      var $shr303=$158 >>> 23;
      var $and304=$shr303 & 511;
      var $159=$c;
      var $shr305=$159 >>> 9;
      var $and306=$shr305 & 16383;
      var $160=$c;
      var $shr307=$160 >>> 7;
      var $and308=$shr307 & 3;
      var $call309=_printf(((96576)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and304,HEAP32[(((tempInt)+(4))>>2)]=$and306,HEAP32[(((tempInt)+(8))>>2)]=$and308,tempInt));
      label = 81; break;
    case 45: 
      var $161=$c;
      var $shr311=$161 >>> 23;
      var $and312=$shr311 & 511;
      var $162=$c;
      var $shr313=$162 >>> 14;
      var $and314=$shr313 & 511;
      var $163=$c;
      var $shr315=$163 >>> 7;
      var $and316=$shr315 & 127;
      var $call317=_printf(((96504)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and312,HEAP32[(((tempInt)+(4))>>2)]=$and314,HEAP32[(((tempInt)+(8))>>2)]=$and316,tempInt));
      label = 81; break;
    case 46: 
      var $164=$c;
      var $shr319=$164 >>> 23;
      var $and320=$shr319 & 511;
      var $165=$mrb_addr;
      var $166=$c;
      var $shr321=$166 >>> 14;
      var $and322=$shr321 & 511;
      var $167=$irep;
      var $syms323=(($167+20)|0);
      var $168=HEAP32[(($syms323)>>2)];
      var $arrayidx324=(($168+($and322<<1))|0);
      var $169=HEAP16[(($arrayidx324)>>1)];
      var $call325=_mrb_sym2name($165, $169);
      var $call326=_printf(((96416)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and320,HEAP32[(((tempInt)+(4))>>2)]=$call325,tempInt));
      label = 81; break;
    case 47: 
      var $170=$c;
      var $shr328=$170 >>> 23;
      var $and329=$shr328 & 511;
      var $171=$mrb_addr;
      var $172=$c;
      var $shr330=$172 >>> 14;
      var $and331=$shr330 & 511;
      var $173=$irep;
      var $syms332=(($173+20)|0);
      var $174=HEAP32[(($syms332)>>2)];
      var $arrayidx333=(($174+($and331<<1))|0);
      var $175=HEAP16[(($arrayidx333)>>1)];
      var $call334=_mrb_sym2name($171, $175);
      var $176=$c;
      var $shr335=$176 >>> 7;
      var $and336=$shr335 & 127;
      var $call337=_printf(((96336)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and329,HEAP32[(((tempInt)+(4))>>2)]=$call334,HEAP32[(((tempInt)+(8))>>2)]=$and336,tempInt));
      label = 81; break;
    case 48: 
      var $177=$c;
      var $shr339=$177 >>> 23;
      var $and340=$shr339 & 511;
      var $178=$mrb_addr;
      var $179=$c;
      var $shr341=$179 >>> 14;
      var $and342=$shr341 & 511;
      var $180=$irep;
      var $syms343=(($180+20)|0);
      var $181=HEAP32[(($syms343)>>2)];
      var $arrayidx344=(($181+($and342<<1))|0);
      var $182=HEAP16[(($arrayidx344)>>1)];
      var $call345=_mrb_sym2name($178, $182);
      var $183=$c;
      var $shr346=$183 >>> 7;
      var $and347=$shr346 & 127;
      var $call348=_printf(((96244)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and340,HEAP32[(((tempInt)+(4))>>2)]=$call345,HEAP32[(((tempInt)+(8))>>2)]=$and347,tempInt));
      label = 81; break;
    case 49: 
      var $184=$c;
      var $shr350=$184 >>> 23;
      var $and351=$shr350 & 511;
      var $185=$mrb_addr;
      var $186=$c;
      var $shr352=$186 >>> 14;
      var $and353=$shr352 & 511;
      var $187=$irep;
      var $syms354=(($187+20)|0);
      var $188=HEAP32[(($syms354)>>2)];
      var $arrayidx355=(($188+($and353<<1))|0);
      var $189=HEAP16[(($arrayidx355)>>1)];
      var $call356=_mrb_sym2name($185, $189);
      var $190=$c;
      var $shr357=$190 >>> 7;
      var $and358=$shr357 & 127;
      var $call359=_printf(((96152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and351,HEAP32[(((tempInt)+(4))>>2)]=$call356,HEAP32[(((tempInt)+(8))>>2)]=$and358,tempInt));
      label = 81; break;
    case 50: 
      var $191=$c;
      var $shr361=$191 >>> 23;
      var $and362=$shr361 & 511;
      var $192=$mrb_addr;
      var $193=$c;
      var $shr363=$193 >>> 14;
      var $and364=$shr363 & 511;
      var $194=$irep;
      var $syms365=(($194+20)|0);
      var $195=HEAP32[(($syms365)>>2)];
      var $arrayidx366=(($195+($and364<<1))|0);
      var $196=HEAP16[(($arrayidx366)>>1)];
      var $call367=_mrb_sym2name($192, $196);
      var $197=$c;
      var $shr368=$197 >>> 7;
      var $and369=$shr368 & 127;
      var $call370=_printf(((96040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and362,HEAP32[(((tempInt)+(4))>>2)]=$call367,HEAP32[(((tempInt)+(8))>>2)]=$and369,tempInt));
      label = 81; break;
    case 51: 
      var $198=$c;
      var $shr372=$198 >>> 23;
      var $and373=$shr372 & 511;
      var $199=$mrb_addr;
      var $200=$c;
      var $shr374=$200 >>> 14;
      var $and375=$shr374 & 511;
      var $201=$irep;
      var $syms376=(($201+20)|0);
      var $202=HEAP32[(($syms376)>>2)];
      var $arrayidx377=(($202+($and375<<1))|0);
      var $203=HEAP16[(($arrayidx377)>>1)];
      var $call378=_mrb_sym2name($199, $203);
      var $204=$c;
      var $shr379=$204 >>> 7;
      var $and380=$shr379 & 127;
      var $call381=_printf(((95984)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and373,HEAP32[(((tempInt)+(4))>>2)]=$call378,HEAP32[(((tempInt)+(8))>>2)]=$and380,tempInt));
      label = 81; break;
    case 52: 
      var $205=$c;
      var $shr383=$205 >>> 23;
      var $and384=$shr383 & 511;
      var $206=$mrb_addr;
      var $207=$c;
      var $shr385=$207 >>> 14;
      var $and386=$shr385 & 511;
      var $208=$irep;
      var $syms387=(($208+20)|0);
      var $209=HEAP32[(($syms387)>>2)];
      var $arrayidx388=(($209+($and386<<1))|0);
      var $210=HEAP16[(($arrayidx388)>>1)];
      var $call389=_mrb_sym2name($206, $210);
      var $211=$c;
      var $shr390=$211 >>> 7;
      var $and391=$shr390 & 127;
      var $call392=_printf(((95580)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and384,HEAP32[(((tempInt)+(4))>>2)]=$call389,HEAP32[(((tempInt)+(8))>>2)]=$and391,tempInt));
      label = 81; break;
    case 53: 
      var $212=$c;
      var $shr394=$212 >>> 23;
      var $and395=$shr394 & 511;
      var $213=$mrb_addr;
      var $214=$c;
      var $shr396=$214 >>> 14;
      var $and397=$shr396 & 511;
      var $215=$irep;
      var $syms398=(($215+20)|0);
      var $216=HEAP32[(($syms398)>>2)];
      var $arrayidx399=(($216+($and397<<1))|0);
      var $217=HEAP16[(($arrayidx399)>>1)];
      var $call400=_mrb_sym2name($213, $217);
      var $218=$c;
      var $shr401=$218 >>> 7;
      var $and402=$shr401 & 127;
      var $call403=_printf(((95484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and395,HEAP32[(((tempInt)+(4))>>2)]=$call400,HEAP32[(((tempInt)+(8))>>2)]=$and402,tempInt));
      label = 81; break;
    case 54: 
      var $219=$c;
      var $shr405=$219 >>> 23;
      var $and406=$shr405 & 511;
      var $220=$mrb_addr;
      var $221=$c;
      var $shr407=$221 >>> 14;
      var $and408=$shr407 & 511;
      var $222=$irep;
      var $syms409=(($222+20)|0);
      var $223=HEAP32[(($syms409)>>2)];
      var $arrayidx410=(($223+($and408<<1))|0);
      var $224=HEAP16[(($arrayidx410)>>1)];
      var $call411=_mrb_sym2name($220, $224);
      var $225=$c;
      var $shr412=$225 >>> 7;
      var $and413=$shr412 & 127;
      var $call414=_printf(((95400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and406,HEAP32[(((tempInt)+(4))>>2)]=$call411,HEAP32[(((tempInt)+(8))>>2)]=$and413,tempInt));
      label = 81; break;
    case 55: 
      var $226=$c;
      var $shr416=$226 >>> 23;
      var $and417=$shr416 & 511;
      var $227=$mrb_addr;
      var $228=$c;
      var $shr418=$228 >>> 14;
      var $and419=$shr418 & 511;
      var $229=$irep;
      var $syms420=(($229+20)|0);
      var $230=HEAP32[(($syms420)>>2)];
      var $arrayidx421=(($230+($and419<<1))|0);
      var $231=HEAP16[(($arrayidx421)>>1)];
      var $call422=_mrb_sym2name($227, $231);
      var $232=$c;
      var $shr423=$232 >>> 7;
      var $and424=$shr423 & 127;
      var $call425=_printf(((95340)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and417,HEAP32[(((tempInt)+(4))>>2)]=$call422,HEAP32[(((tempInt)+(8))>>2)]=$and424,tempInt));
      label = 81; break;
    case 56: 
      var $233=$c;
      var $shr427=$233 >>> 23;
      var $and428=$shr427 & 511;
      var $234=$mrb_addr;
      var $235=$c;
      var $shr429=$235 >>> 14;
      var $and430=$shr429 & 511;
      var $236=$irep;
      var $syms431=(($236+20)|0);
      var $237=HEAP32[(($syms431)>>2)];
      var $arrayidx432=(($237+($and430<<1))|0);
      var $238=HEAP16[(($arrayidx432)>>1)];
      var $call433=_mrb_sym2name($234, $238);
      var $239=$c;
      var $shr434=$239 >>> 7;
      var $and435=$shr434 & 127;
      var $call436=_printf(((95268)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and428,HEAP32[(((tempInt)+(4))>>2)]=$call433,HEAP32[(((tempInt)+(8))>>2)]=$and435,tempInt));
      label = 81; break;
    case 57: 
      var $240=$c;
      var $shr438=$240 >>> 23;
      var $and439=$shr438 & 511;
      var $241=$mrb_addr;
      var $242=$c;
      var $shr440=$242 >>> 14;
      var $and441=$shr440 & 511;
      var $243=$irep;
      var $syms442=(($243+20)|0);
      var $244=HEAP32[(($syms442)>>2)];
      var $arrayidx443=(($244+($and441<<1))|0);
      var $245=HEAP16[(($arrayidx443)>>1)];
      var $call444=_mrb_sym2name($241, $245);
      var $246=$c;
      var $shr445=$246 >>> 7;
      var $and446=$shr445 & 127;
      var $call447=_printf(((95184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and439,HEAP32[(((tempInt)+(4))>>2)]=$call444,HEAP32[(((tempInt)+(8))>>2)]=$and446,tempInt));
      label = 81; break;
    case 58: 
      var $call449=_printf(((95144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 81; break;
    case 59: 
      var $247=$c;
      var $shr451=$247 >>> 23;
      var $and452=$shr451 & 511;
      var $248=$c;
      var $shr453=$248 >>> 14;
      var $and454=$shr453 & 511;
      var $249=$c;
      var $shr455=$249 >>> 7;
      var $and456=$shr455 & 127;
      var $call457=_printf(((95060)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and452,HEAP32[(((tempInt)+(4))>>2)]=$and454,HEAP32[(((tempInt)+(8))>>2)]=$and456,tempInt));
      label = 81; break;
    case 60: 
      var $250=$c;
      var $shr459=$250 >>> 23;
      var $and460=$shr459 & 511;
      var $251=$c;
      var $shr461=$251 >>> 14;
      var $and462=$shr461 & 511;
      var $call463=_printf(((94952)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and460,HEAP32[(((tempInt)+(4))>>2)]=$and462,tempInt));
      label = 81; break;
    case 61: 
      var $252=$c;
      var $shr465=$252 >>> 23;
      var $and466=$shr465 & 511;
      var $253=$c;
      var $shr467=$253 >>> 14;
      var $and468=$shr467 & 511;
      var $call469=_printf(((94900)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and466,HEAP32[(((tempInt)+(4))>>2)]=$and468,tempInt));
      label = 81; break;
    case 62: 
      var $254=$c;
      var $shr471=$254 >>> 23;
      var $and472=$shr471 & 511;
      var $255=$c;
      var $shr473=$255 >>> 14;
      var $and474=$shr473 & 511;
      var $256=$c;
      var $shr475=$256 >>> 7;
      var $and476=$shr475 & 127;
      var $call477=_printf(((94640)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and472,HEAP32[(((tempInt)+(4))>>2)]=$and474,HEAP32[(((tempInt)+(8))>>2)]=$and476,tempInt));
      label = 81; break;
    case 63: 
      var $257=$c;
      var $shr479=$257 >>> 23;
      var $and480=$shr479 & 511;
      var $258=$c;
      var $shr481=$258 >>> 14;
      var $and482=$shr481 & 511;
      var $259=$c;
      var $shr483=$259 >>> 7;
      var $and484=$shr483 & 127;
      var $call485=_printf(((94580)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and480,HEAP32[(((tempInt)+(4))>>2)]=$and482,HEAP32[(((tempInt)+(8))>>2)]=$and484,tempInt));
      label = 81; break;
    case 64: 
      var $260=$c;
      var $shr487=$260 >>> 7;
      var $and488=$shr487 & 65535;
      var $261=$irep;
      var $pool=(($261+16)|0);
      var $262=HEAP32[(($pool)>>2)];
      var $arrayidx489=(($262+((($and488)*(12))&-1))|0);
      var $263=$s;
      var $264=$arrayidx489;
      assert(12 % 1 === 0);HEAP32[(($263)>>2)]=HEAP32[(($264)>>2)];HEAP32[((($263)+(4))>>2)]=HEAP32[((($264)+(4))>>2)];HEAP32[((($263)+(8))>>2)]=HEAP32[((($264)+(8))>>2)];
      var $265=$mrb_addr;
      _mrb_str_dump($tmp, $265, $s);
      var $266=$s;
      var $267=$tmp;
      assert(12 % 1 === 0);HEAP32[(($266)>>2)]=HEAP32[(($267)>>2)];HEAP32[((($266)+(4))>>2)]=HEAP32[((($267)+(4))>>2)];HEAP32[((($266)+(8))>>2)]=HEAP32[((($267)+(8))>>2)];
      var $268=$c;
      var $shr490=$268 >>> 23;
      var $and491=$shr490 & 511;
      var $value=(($s)|0);
      var $p=$value;
      var $269=HEAP32[(($p)>>2)];
      var $270=$269;
      var $ptr=(($270+20)|0);
      var $271=HEAP32[(($ptr)>>2)];
      var $call492=_printf(((94512)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and491,HEAP32[(((tempInt)+(4))>>2)]=$271,tempInt));
      label = 81; break;
    case 65: 
      var $272=$c;
      var $shr494=$272 >>> 23;
      var $and495=$shr494 & 511;
      var $273=$c;
      var $shr496=$273 >>> 14;
      var $and497=$shr496 & 511;
      var $call498=_printf(((94468)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and495,HEAP32[(((tempInt)+(4))>>2)]=$and497,tempInt));
      label = 81; break;
    case 66: 
      var $274=$c;
      var $shr500=$274 >>> 23;
      var $and501=$shr500 & 511;
      var $275=$c;
      var $shr502=$275 >>> 14;
      var $and503=$shr502 & 511;
      var $276=$c;
      var $shr504=$276 >>> 7;
      var $and505=$shr504 & 127;
      var $call506=_printf(((94412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and501,HEAP32[(((tempInt)+(4))>>2)]=$and503,HEAP32[(((tempInt)+(8))>>2)]=$and505,tempInt));
      label = 81; break;
    case 67: 
      var $277=$c;
      var $shr508=$277 >>> 23;
      var $and509=$shr508 & 511;
      var $call510=_printf(((94368)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and509,tempInt));
      label = 81; break;
    case 68: 
      var $278=$c;
      var $shr512=$278 >>> 23;
      var $and513=$shr512 & 511;
      var $279=$mrb_addr;
      var $280=$c;
      var $shr514=$280 >>> 14;
      var $and515=$shr514 & 511;
      var $281=$irep;
      var $syms516=(($281+20)|0);
      var $282=HEAP32[(($syms516)>>2)];
      var $arrayidx517=(($282+($and515<<1))|0);
      var $283=HEAP16[(($arrayidx517)>>1)];
      var $call518=_mrb_sym2name($279, $283);
      var $call519=_printf(((94284)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and513,HEAP32[(((tempInt)+(4))>>2)]=$call518,tempInt));
      label = 81; break;
    case 69: 
      var $284=$c;
      var $shr521=$284 >>> 23;
      var $and522=$shr521 & 511;
      var $285=$mrb_addr;
      var $286=$c;
      var $shr523=$286 >>> 14;
      var $and524=$shr523 & 511;
      var $287=$irep;
      var $syms525=(($287+20)|0);
      var $288=HEAP32[(($syms525)>>2)];
      var $arrayidx526=(($288+($and524<<1))|0);
      var $289=HEAP16[(($arrayidx526)>>1)];
      var $call527=_mrb_sym2name($285, $289);
      var $call528=_printf(((94236)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and522,HEAP32[(((tempInt)+(4))>>2)]=$call527,tempInt));
      label = 81; break;
    case 70: 
      var $290=$c;
      var $shr530=$290 >>> 23;
      var $and531=$shr530 & 511;
      var $291=$n_addr;
      var $292=$c;
      var $shr532=$292 >>> 7;
      var $and533=$shr532 & 65535;
      var $add534=((($291)+($and533))|0);
      var $call535=_printf(((94136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and531,HEAP32[(((tempInt)+(4))>>2)]=$add534,tempInt));
      label = 81; break;
    case 71: 
      var $293=$c;
      var $shr537=$293 >>> 23;
      var $and538=$shr537 & 511;
      var $294=$c;
      var $shr539=$294 >>> 14;
      var $and540=$shr539 & 511;
      var $call541=_printf(((94080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and538,HEAP32[(((tempInt)+(4))>>2)]=$and540,tempInt));
      label = 81; break;
    case 72: 
      var $295=$c;
      var $shr543=$295 >>> 23;
      var $and544=$shr543 & 511;
      var $call545=_printf(((93744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and544,tempInt));
      label = 81; break;
    case 73: 
      var $296=$c;
      var $shr547=$296 >>> 7;
      var $and548=$shr547 & 65535;
      var $call549=_printf(((93696)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and548,tempInt));
      label = 81; break;
    case 74: 
      var $297=$n_addr;
      var $298=$c;
      var $shr551=$298 >>> 7;
      var $and552=$shr551 & 65535;
      var $add553=((($297)+($and552))|0);
      var $call554=_printf(((93636)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$add553,tempInt));
      label = 81; break;
    case 75: 
      var $299=$i;
      var $300=$c;
      var $shr556=$300 >>> 7;
      var $and557=$shr556 & 65535;
      var $sub558=((($and557)-(32767))|0);
      var $add559=((($299)+($sub558))|0);
      var $call560=_printf(((93572)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$add559,tempInt));
      label = 81; break;
    case 76: 
      var $301=$c;
      var $shr562=$301 >>> 23;
      var $and563=$shr562 & 511;
      var $call564=_printf(((93516)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and563,tempInt));
      label = 81; break;
    case 77: 
      var $302=$c;
      var $shr566=$302 >>> 23;
      var $and567=$shr566 & 511;
      var $call568=_printf(((93428)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and567,tempInt));
      label = 81; break;
    case 78: 
      var $303=$c;
      var $shr570=$303 >>> 23;
      var $and571=$shr570 & 511;
      var $call572=_printf(((93384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and571,tempInt));
      label = 81; break;
    case 79: 
      var $304=$c;
      var $shr574=$304 >>> 23;
      var $and575=$shr574 & 511;
      var $call576=_printf(((93336)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and575,tempInt));
      label = 81; break;
    case 80: 
      var $305=$c;
      var $and578=$305 & 127;
      var $306=$c;
      var $shr579=$306 >>> 23;
      var $and580=$shr579 & 511;
      var $307=$c;
      var $shr581=$307 >>> 14;
      var $and582=$shr581 & 511;
      var $308=$c;
      var $shr583=$308 >>> 7;
      var $and584=$shr583 & 127;
      var $call585=_printf(((93272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$and578,HEAP32[(((tempInt)+(4))>>2)]=$and580,HEAP32[(((tempInt)+(8))>>2)]=$and582,HEAP32[(((tempInt)+(12))>>2)]=$and584,tempInt));
      label = 81; break;
    case 81: 
      var $309=$mrb_addr;
      var $310=$ai;
      _mrb_gc_arena_restore($309, $310);
      label = 82; break;
    case 82: 
      var $311=$i;
      var $inc=((($311)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 83: 
      var $call587=_printf(((97340)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 84; break;
    case 84: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_generate_code($mrb, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $p_addr;
      var $start;
      var $n;
      $mrb_addr=$mrb;
      $p_addr=$p;
      var $0=$mrb_addr;
      var $irep_len=(($0+28)|0);
      var $1=HEAP32[(($irep_len)>>2)];
      $start=$1;
      var $2=$mrb_addr;
      var $3=$p_addr;
      var $call=_codegen_start($2, $3);
      $n=$call;
      var $4=$n;
      var $cmp=(($4)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$n;
      $retval=$5;
      label = 5; break;
    case 4: 
      var $6=$start;
      $retval=$6;
      label = 5; break;
    case 5: 
      var $7=$retval;
      return $7;
    default: assert(0, "bad label: " + label);
  }
}
function _codegen_start($mrb, $p) {
  var label = 0;
  label = 2; 
  var mySetjmpIds = {};
  var setjmpTable = {"6": function(value) { label = 10; $call7 = value },dummy: 0};
  while(1) try { switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $p_addr;
      var $scope;
      $mrb_addr=$mrb;
      $p_addr=$p;
      var $0=$mrb_addr;
      var $call=_scope_new($0, 0, 0);
      $scope=$call;
      var $1=$scope;
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=-1;
      label = 9; break;
    case 4: 
      var $2=$mrb_addr;
      var $3=$scope;
      var $mrb1=(($3)|0);
      HEAP32[(($mrb1)>>2)]=$2;
      var $4=$p_addr;
      var $filename=(($4+28)|0);
      var $5=HEAP32[(($filename)>>2)];
      var $tobool2=(($5)|(0))!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$p_addr;
      var $filename4=(($6+28)|0);
      var $7=HEAP32[(($filename4)>>2)];
      var $8=$scope;
      var $filename5=(($8+80)|0);
      HEAP32[(($filename5)>>2)]=$7;
      label = 6; break;
    case 6: 
      var $9=$scope;
      var $jmp=(($9+8)|0);
      var $arraydecay=(($jmp)|0);
      var $call7=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($arraydecay)>>2)]=tempInt, 0);
      label = 10; break;
    case 10: 
      var $cmp=(($call7)|(0))!=0;
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=-1;
      label = 9; break;
    case 8: 
      var $10=$scope;
      var $11=$p_addr;
      var $tree=(($11+1136)|0);
      var $12=HEAP32[(($tree)>>2)];
      _codegen($10, $12, 0);
      var $13=$scope;
      var $mpool=(($13+4)|0);
      var $14=HEAP32[(($mpool)>>2)];
      _mrb_pool_close($14);
      $retval=0;
      label = 9; break;
    case 9: 
      var $15=$retval;
      return $15;
    default: assert(0, "bad label: " + label);
  }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function _scope_new($mrb, $prev, $lv) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $prev_addr;
      var $lv_addr;
      var $pool;
      var $p;
      $mrb_addr=$mrb;
      $prev_addr=$prev;
      $lv_addr=$lv;
      var $0=$mrb_addr;
      var $call=_mrb_pool_open($0);
      $pool=$call;
      var $1=$pool;
      var $call1=_mrb_pool_alloc($1, 128);
      var $2=$call1;
      $p=$2;
      var $3=$p;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=0;
      label = 9; break;
    case 4: 
      var $4=$p;
      var $5=$4;
      assert(128 % 1 === 0);_memcpy($5, 58888, 128);
      var $6=$mrb_addr;
      var $7=$p;
      var $mrb2=(($7)|0);
      HEAP32[(($mrb2)>>2)]=$6;
      var $8=$pool;
      var $9=$p;
      var $mpool=(($9+4)|0);
      HEAP32[(($mpool)>>2)]=$8;
      var $10=$prev_addr;
      var $tobool3=(($10)|(0))!=0;
      if ($tobool3) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $11=$p;
      $retval=$11;
      label = 9; break;
    case 6: 
      var $12=$prev_addr;
      var $13=$p;
      var $prev6=(($13+48)|0);
      HEAP32[(($prev6)>>2)]=$12;
      var $14=$p;
      var $15=$14;
      var $bf_field_offs=(($15+68)|0);
      var $16=$bf_field_offs;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17 & -32768;
      var $19=$18 | 32767;
      HEAP32[(($16)>>2)]=$19;
      var $20=$p;
      var $21=$20;
      var $bf_field_offs7=(($21+69)|0);
      var $22=HEAP8[($bf_field_offs7)];
      var $23=$22 & 127;
      HEAP8[($bf_field_offs7)]=$23;
      var $24=$mrb_addr;
      var $call8=_mrb_add_irep($24);
      var $25=$p;
      var $irep=(($25+100)|0);
      HEAP32[(($irep)>>2)]=$call8;
      var $26=$p;
      var $irep9=(($26+100)|0);
      var $27=HEAP32[(($irep9)>>2)];
      var $idx=(($27)|0);
      var $28=HEAP32[(($idx)>>2)];
      var $29=$p;
      var $idx10=(($29+124)|0);
      HEAP32[(($idx10)>>2)]=$28;
      var $30=$p;
      var $icapa=(($30+96)|0);
      HEAP32[(($icapa)>>2)]=1024;
      var $31=$mrb_addr;
      var $32=$p;
      var $icapa11=(($32+96)|0);
      var $33=HEAP32[(($icapa11)>>2)];
      var $mul=($33<<2);
      var $call12=_mrb_malloc($31, $mul);
      var $34=$call12;
      var $35=$p;
      var $iseq=(($35+88)|0);
      HEAP32[(($iseq)>>2)]=$34;
      var $36=$p;
      var $pcapa=(($36+104)|0);
      HEAP32[(($pcapa)>>2)]=32;
      var $37=$mrb_addr;
      var $38=$p;
      var $pcapa13=(($38+104)|0);
      var $39=HEAP32[(($pcapa13)>>2)];
      var $mul14=((($39)*(12))&-1);
      var $call15=_mrb_malloc($37, $mul14);
      var $40=$call15;
      var $41=$p;
      var $irep16=(($41+100)|0);
      var $42=HEAP32[(($irep16)>>2)];
      var $pool17=(($42+16)|0);
      HEAP32[(($pool17)>>2)]=$40;
      var $43=$p;
      var $irep18=(($43+100)|0);
      var $44=HEAP32[(($irep18)>>2)];
      var $plen=(($44+36)|0);
      HEAP32[(($plen)>>2)]=0;
      var $45=$p;
      var $scapa=(($45+108)|0);
      HEAP32[(($scapa)>>2)]=256;
      var $46=$mrb_addr;
      var $call19=_mrb_malloc($46, 512);
      var $47=$call19;
      var $48=$p;
      var $irep20=(($48+100)|0);
      var $49=HEAP32[(($irep20)>>2)];
      var $syms=(($49+20)|0);
      HEAP32[(($syms)>>2)]=$47;
      var $50=$p;
      var $irep21=(($50+100)|0);
      var $51=HEAP32[(($irep21)>>2)];
      var $slen=(($51+40)|0);
      HEAP32[(($slen)>>2)]=0;
      var $52=$lv_addr;
      var $53=$p;
      var $lv22=(($53+52)|0);
      HEAP32[(($lv22)>>2)]=$52;
      var $54=$lv_addr;
      var $call23=_node_len($54);
      var $add=((($call23)+(1))|0);
      var $55=$p;
      var $sp=(($55+56)|0);
      var $56=HEAP32[(($sp)>>2)];
      var $add24=((($56)+($add))|0);
      HEAP32[(($sp)>>2)]=$add24;
      var $57=$p;
      var $sp25=(($57+56)|0);
      var $58=HEAP32[(($sp25)>>2)];
      var $59=$p;
      var $nlocals=(($59+112)|0);
      HEAP32[(($nlocals)>>2)]=$58;
      var $60=$mrb_addr;
      var $call26=_mrb_gc_arena_save($60);
      var $61=$p;
      var $ai=(($61+120)|0);
      HEAP32[(($ai)>>2)]=$call26;
      var $62=$prev_addr;
      var $filename=(($62+80)|0);
      var $63=HEAP32[(($filename)>>2)];
      var $64=$p;
      var $filename27=(($64+80)|0);
      HEAP32[(($filename27)>>2)]=$63;
      var $65=$p;
      var $filename28=(($65+80)|0);
      var $66=HEAP32[(($filename28)>>2)];
      var $tobool29=(($66)|(0))!=0;
      if ($tobool29) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $67=$mrb_addr;
      var $68=$p;
      var $icapa31=(($68+96)|0);
      var $69=HEAP32[(($icapa31)>>2)];
      var $mul32=($69<<1);
      var $call33=_mrb_malloc($67, $mul32);
      var $70=$call33;
      var $71=$p;
      var $lines=(($71+92)|0);
      HEAP32[(($lines)>>2)]=$70;
      label = 8; break;
    case 8: 
      var $72=$prev_addr;
      var $lineno=(($72+84)|0);
      var $73=HEAP16[(($lineno)>>1)];
      var $74=$p;
      var $lineno35=(($74+84)|0);
      HEAP16[(($lineno35)>>1)]=$73;
      var $75=$p;
      $retval=$75;
      label = 9; break;
    case 9: 
      var $76=$retval;
      return $76;
    default: assert(0, "bad label: " + label);
  }
}
function _codegen($s, $tree, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 244)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $tree_addr;
      var $val_addr;
      var $nt;
      var $onerr;
      var $noexc;
      var $exend;
      var $pos1;
      var $pos2;
      var $tmp;
      var $lp;
      var $n2;
      var $exc;
      var $n3;
      var $n4;
      var $idx;
      var $epush;
      var $idx154;
      var $idx166;
      var $pos1178;
      var $pos2180;
      var $e;
      var $pos;
      var $pos242;
      var $lp255;
      var $lp277;
      var $head;
      var $pos1306;
      var $pos2308;
      var $pos3;
      var $tmp311;
      var $n;
      var $sym;
      var $sym458;
      var $n477;
      var $len;
      var $len539;
      var $n541;
      var $post;
      var $t;
      var $p;
      var $rhs;
      var $rn;
      var $sym658;
      var $len663=__stackBase__;
      var $name;
      var $idx668;
      var $pos693;
      var $n890;
      var $noop;
      var $sendv;
      var $args;
      var $s2;
      var $lv;
      var $ainfo;
      var $s21011;
      var $lv1013;
      var $ainfo1015;
      var $n1017;
      var $sendv1019;
      var $msg;
      var $lp1169;
      var $n1172;
      var $idx1224;
      var $lv1239;
      var $up;
      var $sym1268;
      var $sym1280;
      var $sym1292;
      var $sym1304;
      var $buf=(__stackBase__)+(4);
      var $str=(__stackBase__)+(8);
      var $sym1319;
      var $tmp1323=(__stackBase__)+(20);
      var $sym1336;
      var $mrb1338;
      var $fix=(__stackBase__)+(32);
      var $str1342=(__stackBase__)+(44);
      var $tmp1343=(__stackBase__)+(56);
      var $agg_tmp=(__stackBase__)+(68);
      var $tmp1344=(__stackBase__)+(80);
      var $p1360;
      var $base;
      var $i;
      var $co;
      var $overflow=(__stackBase__)+(92);
      var $f;
      var $off;
      var $agg_tmp1374=(__stackBase__)+(96);
      var $off1400;
      var $agg_tmp1401=(__stackBase__)+(108);
      var $p1417;
      var $f1419;
      var $off1422;
      var $agg_tmp1423=(__stackBase__)+(120);
      var $p1438;
      var $f1440;
      var $off1443;
      var $agg_tmp1444=(__stackBase__)+(132);
      var $p1456;
      var $base1459;
      var $i1463;
      var $co1465;
      var $overflow1467=(__stackBase__)+(144);
      var $f1472;
      var $off1475;
      var $agg_tmp1476=(__stackBase__)+(148);
      var $off1503;
      var $agg_tmp1504=(__stackBase__)+(160);
      var $sym1516;
      var $p1540;
      var $len1543;
      var $ai;
      var $off1549;
      var $agg_tmp1550=(__stackBase__)+(172);
      var $n1567;
      var $n1591;
      var $p1611;
      var $len1614;
      var $ai1617;
      var $sym1621;
      var $off1626;
      var $agg_tmp1627=(__stackBase__)+(184);
      var $p1;
      var $p2;
      var $ai1671;
      var $sym1675;
      var $off1680;
      var $agg_tmp1681=(__stackBase__)+(196);
      var $argc;
      var $agg_tmp1706=(__stackBase__)+(208);
      var $n1742;
      var $ai1745;
      var $sym1749;
      var $argc1754;
      var $off1756;
      var $p1758;
      var $agg_tmp1797=(__stackBase__)+(220);
      var $p21825;
      var $off1828;
      var $agg_tmp1829=(__stackBase__)+(232);
      var $n1862;
      var $sym1881;
      var $a;
      var $b;
      var $c;
      var $undef;
      var $num;
      var $t1983;
      var $symbol;
      var $idx2023;
      var $idx2091;
      var $idx2144;
      var $sym2171;
      var $idx2176;
      var $recv;
      var $sym2211;
      var $idx2217;
      $s_addr=$s;
      $tree_addr=$tree;
      $val_addr=$val;
      var $0=$tree_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 438; break;
    case 4: 
      var $1=$tree_addr;
      var $car=(($1)|0);
      var $2=HEAP32[(($car)>>2)];
      var $3=$2;
      $nt=$3;
      var $4=$tree_addr;
      var $lineno=(($4+8)|0);
      var $5=HEAP16[(($lineno)>>1)];
      var $6=$s_addr;
      var $lineno1=(($6+84)|0);
      HEAP16[(($lineno1)>>1)]=$5;
      var $7=$tree_addr;
      var $cdr=(($7+4)|0);
      var $8=HEAP32[(($cdr)>>2)];
      $tree_addr=$8;
      var $9=$nt;
      if ((($9)|(0))==17) {
        label = 5; break;
      }
      else if ((($9)|(0))==18) {
        label = 15; break;
      }
      else if ((($9)|(0))==19) {
        label = 48; break;
      }
      else if ((($9)|(0))==53) {
        label = 49; break;
      }
      else if ((($9)|(0))==4) {
        label = 50; break;
      }
      else if ((($9)|(0))==5) {
        label = 51; break;
      }
      else if ((($9)|(0))==20) {
        label = 63; break;
      }
      else if ((($9)|(0))==21) {
        label = 64; break;
      }
      else if ((($9)|(0))==9) {
        label = 65; break;
      }
      else if ((($9)|(0))==10) {
        label = 66; break;
      }
      else if ((($9)|(0))==12) {
        label = 67; break;
      }
      else if ((($9)|(0))==6) {
        label = 70; break;
      }
      else if ((($9)|(0))==3) {
        label = 92; break;
      }
      else if ((($9)|(0))==30 | (($9)|(0))==29) {
        label = 93; break;
      }
      else if ((($9)|(0))==80) {
        label = 94; break;
      }
      else if ((($9)|(0))==81) {
        label = 97; break;
      }
      else if ((($9)|(0))==77) {
        label = 100; break;
      }
      else if ((($9)|(0))==78) {
        label = 103; break;
      }
      else if ((($9)|(0))==34) {
        label = 106; break;
      }
      else if ((($9)|(0))==36) {
        label = 114; break;
      }
      else if ((($9)|(0))==66) {
        label = 120; break;
      }
      else if ((($9)|(0))==24) {
        label = 121; break;
      }
      else if ((($9)|(0))==23) {
        label = 122; break;
      }
      else if ((($9)|(0))==28) {
        label = 154; break;
      }
      else if ((($9)|(0))==32) {
        label = 195; break;
      }
      else if ((($9)|(0))==33) {
        label = 210; break;
      }
      else if ((($9)|(0))==37) {
        label = 223; break;
      }
      else if ((($9)|(0))==38) {
        label = 232; break;
      }
      else if ((($9)|(0))==13) {
        label = 248; break;
      }
      else if ((($9)|(0))==14) {
        label = 251; break;
      }
      else if ((($9)|(0))==15) {
        label = 265; break;
      }
      else if ((($9)|(0))==16) {
        label = 271; break;
      }
      else if ((($9)|(0))==39) {
        label = 292; break;
      }
      else if ((($9)|(0))==41) {
        label = 303; break;
      }
      else if ((($9)|(0))==42) {
        label = 304; break;
      }
      else if ((($9)|(0))==44) {
        label = 305; break;
      }
      else if ((($9)|(0))==43) {
        label = 306; break;
      }
      else if ((($9)|(0))==89) {
        label = 307; break;
      }
      else if ((($9)|(0))==46) {
        label = 308; break;
      }
      else if ((($9)|(0))==45) {
        label = 309; break;
      }
      else if ((($9)|(0))==63) {
        label = 310; break;
      }
      else if ((($9)|(0))==69) {
        label = 311; break;
      }
      else if ((($9)|(0))==50) {
        label = 312; break;
      }
      else if ((($9)|(0))==51) {
        label = 322; break;
      }
      else if ((($9)|(0))==52) {
        label = 325; break;
      }
      else if ((($9)|(0))==55) {
        label = 337; break;
      }
      else if ((($9)|(0))==99) {
        label = 340; break;
      }
      else if ((($9)|(0))==56) {
        label = 341; break;
      }
      else if ((($9)|(0))==101) {
        label = 353; break;
      }
      else if ((($9)|(0))==102) {
        label = 354; break;
      }
      else if ((($9)|(0))==57) {
        label = 355; break;
      }
      else if ((($9)|(0))==59) {
        label = 358; break;
      }
      else if ((($9)|(0))==60) {
        label = 363; break;
      }
      else if ((($9)|(0))==54) {
        label = 379; break;
      }
      else if ((($9)|(0))==97) {
        label = 382; break;
      }
      else if ((($9)|(0))==85) {
        label = 385; break;
      }
      else if ((($9)|(0))==86) {
        label = 388; break;
      }
      else if ((($9)|(0))==87) {
        label = 391; break;
      }
      else if ((($9)|(0))==88) {
        label = 394; break;
      }
      else if ((($9)|(0))==72) {
        label = 397; break;
      }
      else if ((($9)|(0))==73) {
        label = 400; break;
      }
      else if ((($9)|(0))==74) {
        label = 406; break;
      }
      else if ((($9)|(0))==75) {
        label = 418; break;
      }
      else if ((($9)|(0))==76) {
        label = 427; break;
      }
      else if ((($9)|(0))==70) {
        label = 430; break;
      }
      else if ((($9)|(0))==71) {
        label = 433; break;
      }
      else if ((($9)|(0))==91) {
        label = 436; break;
      }
      else {
      label = 437; break;
      }
    case 5: 
      var $10=$val_addr;
      var $tobool2=(($10)|(0))!=0;
      if ($tobool2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $11=$tree_addr;
      var $tobool3=(($11)|(0))!=0;
      if ($tobool3) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $12=$s_addr;
      var $13=$s_addr;
      var $sp=(($13+56)|0);
      var $14=HEAP32[(($sp)>>2)];
      var $and=$14 & 511;
      var $shl=$and << 23;
      var $or=5 | $shl;
      _genop($12, $or);
      var $15=$s_addr;
      _push_($15);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $16=$tree_addr;
      var $tobool6=(($16)|(0))!=0;
      if ($tobool6) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $17=$s_addr;
      var $18=$tree_addr;
      var $car7=(($18)|0);
      var $19=HEAP32[(($car7)>>2)];
      var $20=$tree_addr;
      var $cdr8=(($20+4)|0);
      var $21=HEAP32[(($cdr8)>>2)];
      var $tobool9=(($21)|(0))!=0;
      if ($tobool9) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $cond = 0;label = 13; break;
    case 12: 
      var $22=$val_addr;
      var $cond = $22;label = 13; break;
    case 13: 
      var $cond;
      _codegen($17, $19, $cond);
      var $23=$tree_addr;
      var $cdr10=(($23+4)|0);
      var $24=HEAP32[(($cdr10)>>2)];
      $tree_addr=$24;
      label = 9; break;
    case 14: 
      label = 438; break;
    case 15: 
      var $25=$s_addr;
      var $call=_new_label($25);
      $onerr=$call;
      var $26=$s_addr;
      _genop($26, 26);
      var $27=$s_addr;
      var $call13=_loop_push($27, 3);
      $lp=$call13;
      var $28=$onerr;
      var $29=$lp;
      var $pc1=(($29+4)|0);
      HEAP32[(($pc1)>>2)]=$28;
      var $30=$tree_addr;
      var $car14=(($30)|0);
      var $31=HEAP32[(($car14)>>2)];
      var $tobool15=(($31)|(0))!=0;
      if ($tobool15) { label = 16; break; } else { label = 19; break; }
    case 16: 
      var $32=$s_addr;
      var $33=$tree_addr;
      var $car17=(($33)|0);
      var $34=HEAP32[(($car17)>>2)];
      var $35=$val_addr;
      _codegen($32, $34, $35);
      var $36=$val_addr;
      var $tobool18=(($36)|(0))!=0;
      if ($tobool18) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $37=$s_addr;
      var $sp20=(($37+56)|0);
      var $38=HEAP32[(($sp20)>>2)];
      var $dec=((($38)-(1))|0);
      HEAP32[(($sp20)>>2)]=$dec;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $39=$lp;
      var $type=(($39)|0);
      HEAP32[(($type)>>2)]=4;
      var $40=$s_addr;
      var $call23=_new_label($40);
      $noexc=$call23;
      var $41=$s_addr;
      _genop($41, 23);
      var $42=$s_addr;
      var $43=$onerr;
      _dispatch($42, $43);
      var $44=$tree_addr;
      var $cdr24=(($44+4)|0);
      var $45=HEAP32[(($cdr24)>>2)];
      $tree_addr=$45;
      $exend=0;
      $pos1=0;
      var $46=$tree_addr;
      var $car25=(($46)|0);
      var $47=HEAP32[(($car25)>>2)];
      var $tobool26=(($47)|(0))!=0;
      if ($tobool26) { label = 20; break; } else { label = 42; break; }
    case 20: 
      var $48=$tree_addr;
      var $car29=(($48)|0);
      var $49=HEAP32[(($car29)>>2)];
      $n2=$49;
      var $50=$s_addr;
      var $sp31=(($50+56)|0);
      var $51=HEAP32[(($sp31)>>2)];
      $exc=$51;
      var $52=$s_addr;
      var $53=$exc;
      var $and32=$53 & 511;
      var $shl33=$and32 << 23;
      var $or34=27 | $shl33;
      _genop($52, $or34);
      var $54=$s_addr;
      _push_($54);
      label = 21; break;
    case 21: 
      var $55=$n2;
      var $tobool36=(($55)|(0))!=0;
      if ($tobool36) { label = 22; break; } else { label = 39; break; }
    case 22: 
      var $56=$n2;
      var $car39=(($56)|0);
      var $57=HEAP32[(($car39)>>2)];
      $n3=$57;
      var $58=$n3;
      var $car41=(($58)|0);
      var $59=HEAP32[(($car41)>>2)];
      $n4=$59;
      var $60=$pos1;
      var $tobool42=(($60)|(0))!=0;
      if ($tobool42) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $61=$s_addr;
      var $62=$pos1;
      _dispatch($61, $62);
      label = 24; break;
    case 24: 
      $pos2=0;
      label = 25; break;
    case 25: 
      var $63=$n4;
      var $tobool45=(($63)|(0))!=0;
      if ($tobool45) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $64=$s_addr;
      var $65=$n4;
      var $car47=(($65)|0);
      var $66=HEAP32[(($car47)>>2)];
      _codegen($64, $66, 1);
      label = 28; break;
    case 27: 
      var $67=$s_addr;
      var $68=$s_addr;
      var $sp48=(($68+56)|0);
      var $69=HEAP32[(($sp48)>>2)];
      var $and49=$69 & 511;
      var $shl50=$and49 << 23;
      var $or51=17 | $shl50;
      var $70=$s_addr;
      var $71=$s_addr;
      var $mrb=(($71)|0);
      var $72=HEAP32[(($mrb)>>2)];
      var $call52=_mrb_intern2($72, ((105496)|0), 13);
      var $call53=_new_msym($70, $call52);
      var $and54=$call53 & 65535;
      var $shl55=$and54 << 7;
      var $or56=$or51 | $shl55;
      _genop($67, $or56);
      var $73=$s_addr;
      _push_($73);
      label = 28; break;
    case 28: 
      var $74=$s_addr;
      var $75=$s_addr;
      var $sp58=(($75+56)|0);
      var $76=HEAP32[(($sp58)>>2)];
      var $and59=$76 & 511;
      var $shl60=$and59 << 23;
      var $or61=1 | $shl60;
      var $77=$exc;
      var $and62=$77 & 511;
      var $shl63=$and62 << 14;
      var $or64=$or61 | $shl63;
      _genop($74, $or64);
      var $78=$s_addr;
      var $sp65=(($78+56)|0);
      var $79=HEAP32[(($sp65)>>2)];
      var $dec66=((($79)-(1))|0);
      HEAP32[(($sp65)>>2)]=$dec66;
      var $80=$s_addr;
      var $81=$s_addr;
      var $sp67=(($81+56)|0);
      var $82=HEAP32[(($sp67)>>2)];
      var $and68=$82 & 511;
      var $shl69=$and68 << 23;
      var $or70=32 | $shl69;
      var $83=$s_addr;
      var $84=$s_addr;
      var $mrb71=(($84)|0);
      var $85=HEAP32[(($mrb71)>>2)];
      var $call72=_mrb_intern2($85, ((102704)|0), 3);
      var $call73=_new_msym($83, $call72);
      var $and74=$call73 & 511;
      var $shl75=$and74 << 14;
      var $or76=$or70 | $shl75;
      var $or77=$or76 | 128;
      _genop($80, $or77);
      var $86=$s_addr;
      var $call78=_new_label($86);
      $tmp=$call78;
      var $87=$s_addr;
      var $88=$s_addr;
      var $sp79=(($88+56)|0);
      var $89=HEAP32[(($sp79)>>2)];
      var $and80=$89 & 511;
      var $shl81=$and80 << 23;
      var $or82=24 | $shl81;
      var $90=$pos2;
      var $add=((($90)+(32767))|0);
      var $and83=$add & 65535;
      var $shl84=$and83 << 7;
      var $or85=$or82 | $shl84;
      _genop($87, $or85);
      var $91=$tmp;
      $pos2=$91;
      var $92=$n4;
      var $tobool86=(($92)|(0))!=0;
      if ($tobool86) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $93=$n4;
      var $cdr88=(($93+4)|0);
      var $94=HEAP32[(($cdr88)>>2)];
      $n4=$94;
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $95=$n4;
      var $tobool90=(($95)|(0))!=0;
      if ($tobool90) { label = 25; break; } else { label = 32; break; }
    case 32: 
      var $96=$s_addr;
      var $call91=_new_label($96);
      $pos1=$call91;
      var $97=$s_addr;
      _genop($97, 4194199);
      var $98=$s_addr;
      var $99=$pos2;
      _dispatch_linked($98, $99);
      var $100=$s_addr;
      var $sp92=(($100+56)|0);
      var $101=HEAP32[(($sp92)>>2)];
      var $dec93=((($101)-(1))|0);
      HEAP32[(($sp92)>>2)]=$dec93;
      var $102=$n3;
      var $cdr94=(($102+4)|0);
      var $103=HEAP32[(($cdr94)>>2)];
      var $car95=(($103)|0);
      var $104=HEAP32[(($car95)>>2)];
      var $tobool96=(($104)|(0))!=0;
      if ($tobool96) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $105=$s_addr;
      var $106=$n3;
      var $cdr98=(($106+4)|0);
      var $107=HEAP32[(($cdr98)>>2)];
      var $car99=(($107)|0);
      var $108=HEAP32[(($car99)>>2)];
      var $109=$exc;
      _gen_assignment($105, $108, $109, 0);
      label = 34; break;
    case 34: 
      var $110=$n3;
      var $cdr101=(($110+4)|0);
      var $111=HEAP32[(($cdr101)>>2)];
      var $cdr102=(($111+4)|0);
      var $112=HEAP32[(($cdr102)>>2)];
      var $car103=(($112)|0);
      var $113=HEAP32[(($car103)>>2)];
      var $tobool104=(($113)|(0))!=0;
      if ($tobool104) { label = 35; break; } else { label = 38; break; }
    case 35: 
      var $114=$s_addr;
      var $115=$n3;
      var $cdr106=(($115+4)|0);
      var $116=HEAP32[(($cdr106)>>2)];
      var $cdr107=(($116+4)|0);
      var $117=HEAP32[(($cdr107)>>2)];
      var $car108=(($117)|0);
      var $118=HEAP32[(($car108)>>2)];
      var $119=$val_addr;
      _codegen($114, $118, $119);
      var $120=$val_addr;
      var $tobool109=(($120)|(0))!=0;
      if ($tobool109) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $121=$s_addr;
      var $sp111=(($121+56)|0);
      var $122=HEAP32[(($sp111)>>2)];
      var $dec112=((($122)-(1))|0);
      HEAP32[(($sp111)>>2)]=$dec112;
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $123=$s_addr;
      var $call115=_new_label($123);
      $tmp=$call115;
      var $124=$s_addr;
      var $125=$exend;
      var $add116=((($125)+(32767))|0);
      var $and117=$add116 & 65535;
      var $shl118=$and117 << 7;
      var $or119=23 | $shl118;
      _genop($124, $or119);
      var $126=$tmp;
      $exend=$126;
      var $127=$n2;
      var $cdr120=(($127+4)|0);
      var $128=HEAP32[(($cdr120)>>2)];
      $n2=$128;
      var $129=$s_addr;
      _push_($129);
      label = 21; break;
    case 39: 
      var $130=$pos1;
      var $tobool122=(($130)|(0))!=0;
      if ($tobool122) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $131=$s_addr;
      var $132=$pos1;
      _dispatch($131, $132);
      var $133=$s_addr;
      var $134=$exc;
      var $and124=$134 & 511;
      var $shl125=$and124 << 23;
      var $or126=29 | $shl125;
      _genop($133, $or126);
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $135=$s_addr;
      var $sp129=(($135+56)|0);
      var $136=HEAP32[(($sp129)>>2)];
      var $dec130=((($136)-(1))|0);
      HEAP32[(($sp129)>>2)]=$dec130;
      var $137=$tree_addr;
      var $cdr131=(($137+4)|0);
      var $138=HEAP32[(($cdr131)>>2)];
      $tree_addr=$138;
      var $139=$s_addr;
      var $140=$noexc;
      _dispatch($139, $140);
      var $141=$s_addr;
      _genop($141, 8388636);
      var $142=$tree_addr;
      var $car132=(($142)|0);
      var $143=HEAP32[(($car132)>>2)];
      var $tobool133=(($143)|(0))!=0;
      if ($tobool133) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $144=$s_addr;
      var $145=$tree_addr;
      var $car135=(($145)|0);
      var $146=HEAP32[(($car135)>>2)];
      var $147=$val_addr;
      _codegen($144, $146, $147);
      label = 47; break;
    case 44: 
      var $148=$val_addr;
      var $tobool137=(($148)|(0))!=0;
      if ($tobool137) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $149=$s_addr;
      _push_($149);
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $150=$s_addr;
      var $151=$exend;
      _dispatch_linked($150, $151);
      var $152=$s_addr;
      _loop_pop($152, 0);
      label = 438; break;
    case 48: 
      var $153=$s_addr;
      var $pc=(($153+60)|0);
      var $154=HEAP32[(($pc)>>2)];
      $epush=$154;
      var $155=$s_addr;
      _genop($155, 30);
      var $156=$s_addr;
      var $ensure_level=(($156+76)|0);
      var $157=HEAP32[(($ensure_level)>>2)];
      var $inc=((($157)+(1))|0);
      HEAP32[(($ensure_level)>>2)]=$inc;
      var $158=$s_addr;
      var $159=$tree_addr;
      var $car144=(($159)|0);
      var $160=HEAP32[(($car144)>>2)];
      var $161=$val_addr;
      _codegen($158, $160, $161);
      var $162=$s_addr;
      var $163=$tree_addr;
      var $cdr145=(($163+4)|0);
      var $164=HEAP32[(($cdr145)>>2)];
      var $call146=_scope_body($162, $164);
      $idx=$call146;
      var $165=$idx;
      var $and147=$165 & 65535;
      var $shl148=$and147 << 7;
      var $or149=30 | $shl148;
      var $166=$epush;
      var $167=$s_addr;
      var $iseq=(($167+88)|0);
      var $168=HEAP32[(($iseq)>>2)];
      var $arrayidx=(($168+($166<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$or149;
      var $169=$s_addr;
      var $ensure_level150=(($169+76)|0);
      var $170=HEAP32[(($ensure_level150)>>2)];
      var $dec151=((($170)-(1))|0);
      HEAP32[(($ensure_level150)>>2)]=$dec151;
      var $171=$s_addr;
      _genop_peep($171, 8388639, 0);
      label = 438; break;
    case 49: 
      var $172=$s_addr;
      var $173=$tree_addr;
      var $call155=_lambda_body($172, $173, 1);
      $idx154=$call155;
      var $174=$s_addr;
      var $175=$s_addr;
      var $sp156=(($175+56)|0);
      var $176=HEAP32[(($sp156)>>2)];
      var $and157=$176 & 511;
      var $shl158=$and157 << 23;
      var $or159=64 | $shl158;
      var $177=$idx154;
      var $and160=$177 & 16383;
      var $shl161=$and160 << 9;
      var $or162=$shl161 | 384;
      var $or163=$or159 | $or162;
      _genop($174, $or163);
      var $178=$s_addr;
      _push_($178);
      label = 438; break;
    case 50: 
      var $179=$s_addr;
      var $180=$tree_addr;
      var $call167=_lambda_body($179, $180, 1);
      $idx166=$call167;
      var $181=$s_addr;
      var $182=$s_addr;
      var $sp168=(($182+56)|0);
      var $183=HEAP32[(($sp168)>>2)];
      var $and169=$183 & 511;
      var $shl170=$and169 << 23;
      var $or171=64 | $shl170;
      var $184=$idx166;
      var $and172=$184 & 16383;
      var $shl173=$and172 << 9;
      var $or174=$shl173 | 256;
      var $or175=$or171 | $or174;
      _genop($181, $or175);
      var $185=$s_addr;
      _push_($185);
      label = 438; break;
    case 51: 
      var $186=$tree_addr;
      var $cdr182=(($186+4)|0);
      var $187=HEAP32[(($cdr182)>>2)];
      var $cdr183=(($187+4)|0);
      var $188=HEAP32[(($cdr183)>>2)];
      var $car184=(($188)|0);
      var $189=HEAP32[(($car184)>>2)];
      $e=$189;
      var $190=$s_addr;
      var $191=$tree_addr;
      var $car185=(($191)|0);
      var $192=HEAP32[(($car185)>>2)];
      _codegen($190, $192, 1);
      var $193=$s_addr;
      var $sp186=(($193+56)|0);
      var $194=HEAP32[(($sp186)>>2)];
      var $dec187=((($194)-(1))|0);
      HEAP32[(($sp186)>>2)]=$dec187;
      var $195=$s_addr;
      var $call188=_new_label($195);
      $pos1178=$call188;
      var $196=$s_addr;
      var $197=$s_addr;
      var $sp189=(($197+56)|0);
      var $198=HEAP32[(($sp189)>>2)];
      var $and190=$198 & 511;
      var $shl191=$and190 << 23;
      var $or192=25 | $shl191;
      var $or193=$or192 | 4194176;
      _genop($196, $or193);
      var $199=$s_addr;
      var $200=$tree_addr;
      var $cdr194=(($200+4)|0);
      var $201=HEAP32[(($cdr194)>>2)];
      var $car195=(($201)|0);
      var $202=HEAP32[(($car195)>>2)];
      var $203=$val_addr;
      _codegen($199, $202, $203);
      var $204=$val_addr;
      var $tobool196=(($204)|(0))!=0;
      if ($tobool196) { label = 52; break; } else { label = 54; break; }
    case 52: 
      var $205=$tree_addr;
      var $cdr198=(($205+4)|0);
      var $206=HEAP32[(($cdr198)>>2)];
      var $car199=(($206)|0);
      var $207=HEAP32[(($car199)>>2)];
      var $tobool200=(($207)|(0))!=0;
      if ($tobool200) { label = 54; break; } else { label = 53; break; }
    case 53: 
      var $208=$s_addr;
      var $209=$s_addr;
      var $sp202=(($209+56)|0);
      var $210=HEAP32[(($sp202)>>2)];
      var $and203=$210 & 511;
      var $shl204=$and203 << 23;
      var $or205=5 | $shl204;
      _genop($208, $or205);
      var $211=$s_addr;
      _push_($211);
      label = 54; break;
    case 54: 
      var $212=$e;
      var $tobool207=(($212)|(0))!=0;
      if ($tobool207) { label = 55; break; } else { label = 58; break; }
    case 55: 
      var $213=$val_addr;
      var $tobool209=(($213)|(0))!=0;
      if ($tobool209) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $214=$s_addr;
      var $sp211=(($214+56)|0);
      var $215=HEAP32[(($sp211)>>2)];
      var $dec212=((($215)-(1))|0);
      HEAP32[(($sp211)>>2)]=$dec212;
      label = 57; break;
    case 57: 
      var $216=$s_addr;
      var $call214=_new_label($216);
      $pos2180=$call214;
      var $217=$s_addr;
      _genop($217, 4194199);
      var $218=$s_addr;
      var $219=$pos1178;
      _dispatch($218, $219);
      var $220=$s_addr;
      var $221=$e;
      var $222=$val_addr;
      _codegen($220, $221, $222);
      var $223=$s_addr;
      var $224=$pos2180;
      _dispatch($223, $224);
      label = 62; break;
    case 58: 
      var $225=$val_addr;
      var $tobool216=(($225)|(0))!=0;
      if ($tobool216) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $226=$s_addr;
      var $sp218=(($226+56)|0);
      var $227=HEAP32[(($sp218)>>2)];
      var $dec219=((($227)-(1))|0);
      HEAP32[(($sp218)>>2)]=$dec219;
      var $228=$s_addr;
      var $call220=_new_label($228);
      $pos2180=$call220;
      var $229=$s_addr;
      _genop($229, 4194199);
      var $230=$s_addr;
      var $231=$pos1178;
      _dispatch($230, $231);
      var $232=$s_addr;
      var $233=$s_addr;
      var $sp221=(($233+56)|0);
      var $234=HEAP32[(($sp221)>>2)];
      var $and222=$234 & 511;
      var $shl223=$and222 << 23;
      var $or224=5 | $shl223;
      _genop($232, $or224);
      var $235=$s_addr;
      var $236=$pos2180;
      _dispatch($235, $236);
      var $237=$s_addr;
      _push_($237);
      label = 61; break;
    case 60: 
      var $238=$s_addr;
      var $239=$pos1178;
      _dispatch($238, $239);
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 438; break;
    case 63: 
      var $240=$s_addr;
      var $241=$tree_addr;
      var $car230=(($241)|0);
      var $242=HEAP32[(($car230)>>2)];
      _codegen($240, $242, 1);
      var $243=$s_addr;
      var $call231=_new_label($243);
      $pos=$call231;
      var $244=$s_addr;
      var $sp232=(($244+56)|0);
      var $245=HEAP32[(($sp232)>>2)];
      var $dec233=((($245)-(1))|0);
      HEAP32[(($sp232)>>2)]=$dec233;
      var $246=$s_addr;
      var $247=$s_addr;
      var $sp234=(($247+56)|0);
      var $248=HEAP32[(($sp234)>>2)];
      var $and235=$248 & 511;
      var $shl236=$and235 << 23;
      var $or237=25 | $shl236;
      var $or238=$or237 | 4194176;
      _genop($246, $or238);
      var $249=$s_addr;
      var $250=$tree_addr;
      var $cdr239=(($250+4)|0);
      var $251=HEAP32[(($cdr239)>>2)];
      var $252=$val_addr;
      _codegen($249, $251, $252);
      var $253=$s_addr;
      var $254=$pos;
      _dispatch($253, $254);
      label = 438; break;
    case 64: 
      var $255=$s_addr;
      var $256=$tree_addr;
      var $car243=(($256)|0);
      var $257=HEAP32[(($car243)>>2)];
      _codegen($255, $257, 1);
      var $258=$s_addr;
      var $call244=_new_label($258);
      $pos242=$call244;
      var $259=$s_addr;
      var $sp245=(($259+56)|0);
      var $260=HEAP32[(($sp245)>>2)];
      var $dec246=((($260)-(1))|0);
      HEAP32[(($sp245)>>2)]=$dec246;
      var $261=$s_addr;
      var $262=$s_addr;
      var $sp247=(($262+56)|0);
      var $263=HEAP32[(($sp247)>>2)];
      var $and248=$263 & 511;
      var $shl249=$and248 << 23;
      var $or250=24 | $shl249;
      var $or251=$or250 | 4194176;
      _genop($261, $or251);
      var $264=$s_addr;
      var $265=$tree_addr;
      var $cdr252=(($265+4)|0);
      var $266=HEAP32[(($cdr252)>>2)];
      var $267=$val_addr;
      _codegen($264, $266, $267);
      var $268=$s_addr;
      var $269=$pos242;
      _dispatch($268, $269);
      label = 438; break;
    case 65: 
      var $270=$s_addr;
      var $call256=_loop_push($270, 0);
      $lp255=$call256;
      var $271=$s_addr;
      var $call257=_new_label($271);
      var $272=$lp255;
      var $pc1258=(($272+4)|0);
      HEAP32[(($pc1258)>>2)]=$call257;
      var $273=$s_addr;
      _genop($273, 4194199);
      var $274=$s_addr;
      var $call259=_new_label($274);
      var $275=$lp255;
      var $pc2=(($275+8)|0);
      HEAP32[(($pc2)>>2)]=$call259;
      var $276=$s_addr;
      var $277=$tree_addr;
      var $cdr260=(($277+4)|0);
      var $278=HEAP32[(($cdr260)>>2)];
      _codegen($276, $278, 0);
      var $279=$s_addr;
      var $280=$lp255;
      var $pc1261=(($280+4)|0);
      var $281=HEAP32[(($pc1261)>>2)];
      _dispatch($279, $281);
      var $282=$s_addr;
      var $283=$tree_addr;
      var $car262=(($283)|0);
      var $284=HEAP32[(($car262)>>2)];
      _codegen($282, $284, 1);
      var $285=$s_addr;
      var $sp263=(($285+56)|0);
      var $286=HEAP32[(($sp263)>>2)];
      var $dec264=((($286)-(1))|0);
      HEAP32[(($sp263)>>2)]=$dec264;
      var $287=$s_addr;
      var $288=$s_addr;
      var $sp265=(($288+56)|0);
      var $289=HEAP32[(($sp265)>>2)];
      var $and266=$289 & 511;
      var $shl267=$and266 << 23;
      var $or268=24 | $shl267;
      var $290=$lp255;
      var $pc2269=(($290+8)|0);
      var $291=HEAP32[(($pc2269)>>2)];
      var $292=$s_addr;
      var $pc270=(($292+60)|0);
      var $293=HEAP32[(($pc270)>>2)];
      var $sub=((($291)-($293))|0);
      var $add271=((($sub)+(32767))|0);
      var $and272=$add271 & 65535;
      var $shl273=$and272 << 7;
      var $or274=$or268 | $shl273;
      _genop($287, $or274);
      var $294=$s_addr;
      var $295=$val_addr;
      _loop_pop($294, $295);
      label = 438; break;
    case 66: 
      var $296=$s_addr;
      var $call278=_loop_push($296, 0);
      $lp277=$call278;
      var $297=$s_addr;
      var $call279=_new_label($297);
      var $298=$lp277;
      var $pc1280=(($298+4)|0);
      HEAP32[(($pc1280)>>2)]=$call279;
      var $299=$s_addr;
      _genop($299, 4194199);
      var $300=$s_addr;
      var $call281=_new_label($300);
      var $301=$lp277;
      var $pc2282=(($301+8)|0);
      HEAP32[(($pc2282)>>2)]=$call281;
      var $302=$s_addr;
      var $303=$tree_addr;
      var $cdr283=(($303+4)|0);
      var $304=HEAP32[(($cdr283)>>2)];
      _codegen($302, $304, 0);
      var $305=$s_addr;
      var $306=$lp277;
      var $pc1284=(($306+4)|0);
      var $307=HEAP32[(($pc1284)>>2)];
      _dispatch($305, $307);
      var $308=$s_addr;
      var $309=$tree_addr;
      var $car285=(($309)|0);
      var $310=HEAP32[(($car285)>>2)];
      _codegen($308, $310, 1);
      var $311=$s_addr;
      var $sp286=(($311+56)|0);
      var $312=HEAP32[(($sp286)>>2)];
      var $dec287=((($312)-(1))|0);
      HEAP32[(($sp286)>>2)]=$dec287;
      var $313=$s_addr;
      var $314=$s_addr;
      var $sp288=(($314+56)|0);
      var $315=HEAP32[(($sp288)>>2)];
      var $and289=$315 & 511;
      var $shl290=$and289 << 23;
      var $or291=25 | $shl290;
      var $316=$lp277;
      var $pc2292=(($316+8)|0);
      var $317=HEAP32[(($pc2292)>>2)];
      var $318=$s_addr;
      var $pc293=(($318+60)|0);
      var $319=HEAP32[(($pc293)>>2)];
      var $sub294=((($317)-($319))|0);
      var $add295=((($sub294)+(32767))|0);
      var $and296=$add295 & 65535;
      var $shl297=$and296 << 7;
      var $or298=$or291 | $shl297;
      _genop($313, $or298);
      var $320=$s_addr;
      var $321=$val_addr;
      _loop_pop($320, $321);
      label = 438; break;
    case 67: 
      var $322=$s_addr;
      var $323=$tree_addr;
      _for_body($322, $323);
      var $324=$val_addr;
      var $tobool300=(($324)|(0))!=0;
      if ($tobool300) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $325=$s_addr;
      _push_($325);
      label = 69; break;
    case 69: 
      label = 438; break;
    case 70: 
      $head=0;
      $pos3=0;
      var $326=$tree_addr;
      var $car313=(($326)|0);
      var $327=HEAP32[(($car313)>>2)];
      var $tobool314=(($327)|(0))!=0;
      if ($tobool314) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $328=$s_addr;
      var $sp316=(($328+56)|0);
      var $329=HEAP32[(($sp316)>>2)];
      $head=$329;
      var $330=$s_addr;
      var $331=$tree_addr;
      var $car317=(($331)|0);
      var $332=HEAP32[(($car317)>>2)];
      _codegen($330, $332, 1);
      label = 72; break;
    case 72: 
      var $333=$tree_addr;
      var $cdr319=(($333+4)|0);
      var $334=HEAP32[(($cdr319)>>2)];
      $tree_addr=$334;
      label = 73; break;
    case 73: 
      var $335=$tree_addr;
      var $tobool321=(($335)|(0))!=0;
      if ($tobool321) { label = 74; break; } else { label = 87; break; }
    case 74: 
      var $336=$tree_addr;
      var $car323=(($336)|0);
      var $337=HEAP32[(($car323)>>2)];
      var $car324=(($337)|0);
      var $338=HEAP32[(($car324)>>2)];
      $n=$338;
      $pos2308=0;
      $pos1306=0;
      label = 75; break;
    case 75: 
      var $339=$n;
      var $tobool326=(($339)|(0))!=0;
      if ($tobool326) { label = 76; break; } else { label = 80; break; }
    case 76: 
      var $340=$s_addr;
      var $341=$n;
      var $car328=(($341)|0);
      var $342=HEAP32[(($car328)>>2)];
      _codegen($340, $342, 1);
      var $343=$head;
      var $tobool329=(($343)|(0))!=0;
      if ($tobool329) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $344=$s_addr;
      var $345=$s_addr;
      var $sp331=(($345+56)|0);
      var $346=HEAP32[(($sp331)>>2)];
      var $and332=$346 & 511;
      var $shl333=$and332 << 23;
      var $or334=1 | $shl333;
      var $347=$head;
      var $and335=$347 & 511;
      var $shl336=$and335 << 14;
      var $or337=$or334 | $shl336;
      _genop($344, $or337);
      var $348=$s_addr;
      var $sp338=(($348+56)|0);
      var $349=HEAP32[(($sp338)>>2)];
      var $dec339=((($349)-(1))|0);
      HEAP32[(($sp338)>>2)]=$dec339;
      var $350=$s_addr;
      var $351=$s_addr;
      var $sp340=(($351+56)|0);
      var $352=HEAP32[(($sp340)>>2)];
      var $and341=$352 & 511;
      var $shl342=$and341 << 23;
      var $or343=32 | $shl342;
      var $353=$s_addr;
      var $354=$s_addr;
      var $mrb344=(($354)|0);
      var $355=HEAP32[(($mrb344)>>2)];
      var $call345=_mrb_intern2($355, ((102704)|0), 3);
      var $call346=_new_msym($353, $call345);
      var $and347=$call346 & 511;
      var $shl348=$and347 << 14;
      var $or349=$or343 | $shl348;
      var $or350=$or349 | 128;
      _genop($350, $or350);
      label = 79; break;
    case 78: 
      var $356=$s_addr;
      var $sp352=(($356+56)|0);
      var $357=HEAP32[(($sp352)>>2)];
      var $dec353=((($357)-(1))|0);
      HEAP32[(($sp352)>>2)]=$dec353;
      label = 79; break;
    case 79: 
      var $358=$s_addr;
      var $call355=_new_label($358);
      $tmp311=$call355;
      var $359=$s_addr;
      var $360=$s_addr;
      var $sp356=(($360+56)|0);
      var $361=HEAP32[(($sp356)>>2)];
      var $and357=$361 & 511;
      var $shl358=$and357 << 23;
      var $or359=24 | $shl358;
      var $362=$pos2308;
      var $add360=((($362)+(32767))|0);
      var $and361=$add360 & 65535;
      var $shl362=$and361 << 7;
      var $or363=$or359 | $shl362;
      _genop($359, $or363);
      var $363=$tmp311;
      $pos2308=$363;
      var $364=$n;
      var $cdr364=(($364+4)|0);
      var $365=HEAP32[(($cdr364)>>2)];
      $n=$365;
      label = 75; break;
    case 80: 
      var $366=$tree_addr;
      var $car366=(($366)|0);
      var $367=HEAP32[(($car366)>>2)];
      var $car367=(($367)|0);
      var $368=HEAP32[(($car367)>>2)];
      var $tobool368=(($368)|(0))!=0;
      if ($tobool368) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $369=$s_addr;
      var $call370=_new_label($369);
      $pos1306=$call370;
      var $370=$s_addr;
      _genop($370, 4194199);
      var $371=$s_addr;
      var $372=$pos2308;
      _dispatch_linked($371, $372);
      label = 82; break;
    case 82: 
      var $373=$s_addr;
      var $374=$tree_addr;
      var $car372=(($374)|0);
      var $375=HEAP32[(($car372)>>2)];
      var $cdr373=(($375+4)|0);
      var $376=HEAP32[(($cdr373)>>2)];
      var $377=$val_addr;
      _codegen($373, $376, $377);
      var $378=$val_addr;
      var $tobool374=(($378)|(0))!=0;
      if ($tobool374) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $379=$s_addr;
      var $sp376=(($379+56)|0);
      var $380=HEAP32[(($sp376)>>2)];
      var $dec377=((($380)-(1))|0);
      HEAP32[(($sp376)>>2)]=$dec377;
      label = 84; break;
    case 84: 
      var $381=$s_addr;
      var $call379=_new_label($381);
      $tmp311=$call379;
      var $382=$s_addr;
      var $383=$pos3;
      var $add380=((($383)+(32767))|0);
      var $and381=$add380 & 65535;
      var $shl382=$and381 << 7;
      var $or383=23 | $shl382;
      _genop($382, $or383);
      var $384=$tmp311;
      $pos3=$384;
      var $385=$pos1306;
      var $tobool384=(($385)|(0))!=0;
      if ($tobool384) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $386=$s_addr;
      var $387=$pos1306;
      _dispatch($386, $387);
      label = 86; break;
    case 86: 
      var $388=$tree_addr;
      var $cdr387=(($388+4)|0);
      var $389=HEAP32[(($cdr387)>>2)];
      $tree_addr=$389;
      label = 73; break;
    case 87: 
      var $390=$val_addr;
      var $tobool389=(($390)|(0))!=0;
      if ($tobool389) { label = 88; break; } else { label = 89; break; }
    case 88: 
      var $391=$s_addr;
      var $392=$s_addr;
      var $sp391=(($392+56)|0);
      var $393=HEAP32[(($sp391)>>2)];
      var $and392=$393 & 511;
      var $shl393=$and392 << 23;
      var $or394=5 | $shl393;
      _genop($391, $or394);
      var $394=$s_addr;
      _push_($394);
      label = 89; break;
    case 89: 
      var $395=$pos3;
      var $tobool396=(($395)|(0))!=0;
      if ($tobool396) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $396=$s_addr;
      var $397=$pos3;
      _dispatch_linked($396, $397);
      label = 91; break;
    case 91: 
      label = 438; break;
    case 92: 
      var $398=$s_addr;
      var $399=$tree_addr;
      var $call400=_scope_body($398, $399);
      label = 438; break;
    case 93: 
      var $400=$s_addr;
      var $401=$tree_addr;
      var $402=$val_addr;
      _gen_call($400, $401, 0, 0, $402);
      label = 438; break;
    case 94: 
      var $403=$s_addr;
      var $404=$tree_addr;
      var $car403=(($404)|0);
      var $405=HEAP32[(($car403)>>2)];
      var $406=$val_addr;
      _codegen($403, $405, $406);
      var $407=$s_addr;
      var $408=$tree_addr;
      var $cdr404=(($408+4)|0);
      var $409=HEAP32[(($cdr404)>>2)];
      var $410=$val_addr;
      _codegen($407, $409, $410);
      var $411=$val_addr;
      var $tobool405=(($411)|(0))!=0;
      if ($tobool405) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $412=$s_addr;
      var $sp407=(($412+56)|0);
      var $413=HEAP32[(($sp407)>>2)];
      var $dec408=((($413)-(1))|0);
      HEAP32[(($sp407)>>2)]=$dec408;
      var $414=$s_addr;
      var $sp409=(($414+56)|0);
      var $415=HEAP32[(($sp409)>>2)];
      var $dec410=((($415)-(1))|0);
      HEAP32[(($sp409)>>2)]=$dec410;
      var $416=$s_addr;
      var $417=$s_addr;
      var $sp411=(($417+56)|0);
      var $418=HEAP32[(($sp411)>>2)];
      var $and412=$418 & 511;
      var $shl413=$and412 << 23;
      var $or414=65 | $shl413;
      var $419=$s_addr;
      var $sp415=(($419+56)|0);
      var $420=HEAP32[(($sp415)>>2)];
      var $and416=$420 & 511;
      var $shl417=$and416 << 14;
      var $or418=$or414 | $shl417;
      _genop($416, $or418);
      var $421=$s_addr;
      _push_($421);
      label = 96; break;
    case 96: 
      label = 438; break;
    case 97: 
      var $422=$s_addr;
      var $423=$tree_addr;
      var $car421=(($423)|0);
      var $424=HEAP32[(($car421)>>2)];
      var $425=$val_addr;
      _codegen($422, $424, $425);
      var $426=$s_addr;
      var $427=$tree_addr;
      var $cdr422=(($427+4)|0);
      var $428=HEAP32[(($cdr422)>>2)];
      var $429=$val_addr;
      _codegen($426, $428, $429);
      var $430=$val_addr;
      var $tobool423=(($430)|(0))!=0;
      if ($tobool423) { label = 98; break; } else { label = 99; break; }
    case 98: 
      var $431=$s_addr;
      var $sp425=(($431+56)|0);
      var $432=HEAP32[(($sp425)>>2)];
      var $dec426=((($432)-(1))|0);
      HEAP32[(($sp425)>>2)]=$dec426;
      var $433=$s_addr;
      var $sp427=(($433+56)|0);
      var $434=HEAP32[(($sp427)>>2)];
      var $dec428=((($434)-(1))|0);
      HEAP32[(($sp427)>>2)]=$dec428;
      var $435=$s_addr;
      var $436=$s_addr;
      var $sp429=(($436+56)|0);
      var $437=HEAP32[(($sp429)>>2)];
      var $and430=$437 & 511;
      var $shl431=$and430 << 23;
      var $or432=65 | $shl431;
      var $438=$s_addr;
      var $sp433=(($438+56)|0);
      var $439=HEAP32[(($sp433)>>2)];
      var $and434=$439 & 511;
      var $shl435=$and434 << 14;
      var $or436=$or432 | $shl435;
      var $or437=$or436 | 128;
      _genop($435, $or437);
      var $440=$s_addr;
      _push_($440);
      label = 99; break;
    case 99: 
      label = 438; break;
    case 100: 
      var $441=$s_addr;
      var $442=$tree_addr;
      var $cdr441=(($442+4)|0);
      var $443=HEAP32[(($cdr441)>>2)];
      var $444=$443;
      var $conv=(($444) & 65535);
      var $call442=_new_sym900($441, $conv);
      $sym=$call442;
      var $445=$s_addr;
      var $446=$tree_addr;
      var $car443=(($446)|0);
      var $447=HEAP32[(($car443)>>2)];
      _codegen($445, $447, 1);
      var $448=$s_addr;
      var $sp444=(($448+56)|0);
      var $449=HEAP32[(($sp444)>>2)];
      var $dec445=((($449)-(1))|0);
      HEAP32[(($sp444)>>2)]=$dec445;
      var $450=$s_addr;
      var $451=$s_addr;
      var $sp446=(($451+56)|0);
      var $452=HEAP32[(($sp446)>>2)];
      var $and447=$452 & 511;
      var $shl448=$and447 << 23;
      var $or449=19 | $shl448;
      var $453=$sym;
      var $and450=$453 & 65535;
      var $shl451=$and450 << 7;
      var $or452=$or449 | $shl451;
      _genop($450, $or452);
      var $454=$val_addr;
      var $tobool453=(($454)|(0))!=0;
      if ($tobool453) { label = 101; break; } else { label = 102; break; }
    case 101: 
      var $455=$s_addr;
      _push_($455);
      label = 102; break;
    case 102: 
      label = 438; break;
    case 103: 
      var $456=$s_addr;
      var $457=$tree_addr;
      var $458=$457;
      var $conv459=(($458) & 65535);
      var $call460=_new_sym900($456, $conv459);
      $sym458=$call460;
      var $459=$s_addr;
      var $460=$s_addr;
      var $sp461=(($460+56)|0);
      var $461=HEAP32[(($sp461)>>2)];
      var $and462=$461 & 511;
      var $shl463=$and462 << 23;
      var $or464=66 | $shl463;
      _genop($459, $or464);
      var $462=$s_addr;
      var $463=$s_addr;
      var $sp465=(($463+56)|0);
      var $464=HEAP32[(($sp465)>>2)];
      var $and466=$464 & 511;
      var $shl467=$and466 << 23;
      var $or468=19 | $shl467;
      var $465=$sym458;
      var $and469=$465 & 65535;
      var $shl470=$and469 << 7;
      var $or471=$or468 | $shl470;
      _genop($462, $or471);
      var $466=$val_addr;
      var $tobool472=(($466)|(0))!=0;
      if ($tobool472) { label = 104; break; } else { label = 105; break; }
    case 104: 
      var $467=$s_addr;
      _push_($467);
      label = 105; break;
    case 105: 
      label = 438; break;
    case 106: 
      var $468=$s_addr;
      var $469=$tree_addr;
      var $470=$val_addr;
      var $call478=_gen_values($468, $469, $470);
      $n477=$call478;
      var $471=$n477;
      var $cmp=(($471)|(0)) >= 0;
      if ($cmp) { label = 107; break; } else { label = 110; break; }
    case 107: 
      var $472=$val_addr;
      var $tobool481=(($472)|(0))!=0;
      if ($tobool481) { label = 108; break; } else { label = 109; break; }
    case 108: 
      var $473=$n477;
      var $474=$s_addr;
      var $sp483=(($474+56)|0);
      var $475=HEAP32[(($sp483)>>2)];
      var $sub484=((($475)-($473))|0);
      HEAP32[(($sp483)>>2)]=$sub484;
      var $476=$s_addr;
      var $477=$s_addr;
      var $sp485=(($477+56)|0);
      var $478=HEAP32[(($sp485)>>2)];
      var $and486=$478 & 511;
      var $shl487=$and486 << 23;
      var $or488=55 | $shl487;
      var $479=$s_addr;
      var $sp489=(($479+56)|0);
      var $480=HEAP32[(($sp489)>>2)];
      var $and490=$480 & 511;
      var $shl491=$and490 << 14;
      var $or492=$or488 | $shl491;
      var $481=$n477;
      var $and493=$481 & 127;
      var $shl494=$and493 << 7;
      var $or495=$or492 | $shl494;
      _genop($476, $or495);
      var $482=$s_addr;
      _push_($482);
      label = 109; break;
    case 109: 
      label = 113; break;
    case 110: 
      var $483=$val_addr;
      var $tobool498=(($483)|(0))!=0;
      if ($tobool498) { label = 111; break; } else { label = 112; break; }
    case 111: 
      var $484=$s_addr;
      _push_($484);
      label = 112; break;
    case 112: 
      label = 113; break;
    case 113: 
      label = 438; break;
    case 114: 
      $len=0;
      label = 115; break;
    case 115: 
      var $485=$tree_addr;
      var $tobool505=(($485)|(0))!=0;
      if ($tobool505) { label = 116; break; } else { label = 117; break; }
    case 116: 
      var $486=$s_addr;
      var $487=$tree_addr;
      var $car507=(($487)|0);
      var $488=HEAP32[(($car507)>>2)];
      var $car508=(($488)|0);
      var $489=HEAP32[(($car508)>>2)];
      var $490=$val_addr;
      _codegen($486, $489, $490);
      var $491=$s_addr;
      var $492=$tree_addr;
      var $car509=(($492)|0);
      var $493=HEAP32[(($car509)>>2)];
      var $cdr510=(($493+4)|0);
      var $494=HEAP32[(($cdr510)>>2)];
      var $495=$val_addr;
      _codegen($491, $494, $495);
      var $496=$len;
      var $inc511=((($496)+(1))|0);
      $len=$inc511;
      var $497=$tree_addr;
      var $cdr512=(($497+4)|0);
      var $498=HEAP32[(($cdr512)>>2)];
      $tree_addr=$498;
      label = 115; break;
    case 117: 
      var $499=$val_addr;
      var $tobool514=(($499)|(0))!=0;
      if ($tobool514) { label = 118; break; } else { label = 119; break; }
    case 118: 
      var $500=$len;
      var $mul=($500<<1);
      var $501=$s_addr;
      var $sp516=(($501+56)|0);
      var $502=HEAP32[(($sp516)>>2)];
      var $sub517=((($502)-($mul))|0);
      HEAP32[(($sp516)>>2)]=$sub517;
      var $503=$s_addr;
      var $504=$s_addr;
      var $sp518=(($504+56)|0);
      var $505=HEAP32[(($sp518)>>2)];
      var $and519=$505 & 511;
      var $shl520=$and519 << 23;
      var $or521=63 | $shl520;
      var $506=$s_addr;
      var $sp522=(($506+56)|0);
      var $507=HEAP32[(($sp522)>>2)];
      var $and523=$507 & 511;
      var $shl524=$and523 << 14;
      var $or525=$or521 | $shl524;
      var $508=$len;
      var $and526=$508 & 127;
      var $shl527=$and526 << 7;
      var $or528=$or525 | $shl527;
      _genop($503, $or528);
      var $509=$s_addr;
      _push_($509);
      label = 119; break;
    case 119: 
      label = 438; break;
    case 120: 
      var $510=$s_addr;
      var $511=$tree_addr;
      _codegen($510, $511, 1);
      label = 438; break;
    case 121: 
      var $512=$s_addr;
      var $513=$tree_addr;
      var $cdr532=(($513+4)|0);
      var $514=HEAP32[(($cdr532)>>2)];
      _codegen($512, $514, 1);
      var $515=$s_addr;
      var $sp533=(($515+56)|0);
      var $516=HEAP32[(($sp533)>>2)];
      var $dec534=((($516)-(1))|0);
      HEAP32[(($sp533)>>2)]=$dec534;
      var $517=$s_addr;
      var $518=$tree_addr;
      var $car535=(($518)|0);
      var $519=HEAP32[(($car535)>>2)];
      var $520=$s_addr;
      var $sp536=(($520+56)|0);
      var $521=HEAP32[(($sp536)>>2)];
      var $522=$val_addr;
      _gen_assignment($517, $519, $521, $522);
      label = 438; break;
    case 122: 
      $len539=0;
      $n541=0;
      $post=0;
      var $523=$tree_addr;
      var $cdr544=(($523+4)|0);
      var $524=HEAP32[(($cdr544)>>2)];
      $t=$524;
      var $525=$s_addr;
      var $sp547=(($525+56)|0);
      var $526=HEAP32[(($sp547)>>2)];
      $rhs=$526;
      var $527=$t;
      var $car548=(($527)|0);
      var $528=HEAP32[(($car548)>>2)];
      var $529=$528;
      var $cmp549=(($529)|(0))==34;
      if ($cmp549) { label = 123; break; } else { label = 150; break; }
    case 123: 
      var $530=$t;
      var $cdr552=(($530+4)|0);
      var $531=HEAP32[(($cdr552)>>2)];
      var $call553=_nosplat($531);
      var $tobool554=(($call553)|(0))!=0;
      if ($tobool554) { label = 124; break; } else { label = 150; break; }
    case 124: 
      var $532=$t;
      var $cdr556=(($532+4)|0);
      var $533=HEAP32[(($cdr556)>>2)];
      $t=$533;
      label = 125; break;
    case 125: 
      var $534=$t;
      var $tobool558=(($534)|(0))!=0;
      if ($tobool558) { label = 126; break; } else { label = 127; break; }
    case 126: 
      var $535=$s_addr;
      var $536=$t;
      var $car560=(($536)|0);
      var $537=HEAP32[(($car560)>>2)];
      _codegen($535, $537, 1);
      var $538=$len539;
      var $inc561=((($538)+(1))|0);
      $len539=$inc561;
      var $539=$t;
      var $cdr562=(($539+4)|0);
      var $540=HEAP32[(($cdr562)>>2)];
      $t=$540;
      label = 125; break;
    case 127: 
      var $541=$tree_addr;
      var $car564=(($541)|0);
      var $542=HEAP32[(($car564)>>2)];
      $tree_addr=$542;
      var $543=$tree_addr;
      var $car565=(($543)|0);
      var $544=HEAP32[(($car565)>>2)];
      var $tobool566=(($544)|(0))!=0;
      if ($tobool566) { label = 128; break; } else { label = 132; break; }
    case 128: 
      var $545=$tree_addr;
      var $car568=(($545)|0);
      var $546=HEAP32[(($car568)>>2)];
      $t=$546;
      $n541=0;
      label = 129; break;
    case 129: 
      var $547=$t;
      var $tobool570=(($547)|(0))!=0;
      if ($tobool570) { label = 130; break; } else { label = 131; break; }
    case 130: 
      var $548=$s_addr;
      var $549=$t;
      var $car572=(($549)|0);
      var $550=HEAP32[(($car572)>>2)];
      var $551=$rhs;
      var $552=$n541;
      var $add573=((($551)+($552))|0);
      _gen_assignment($548, $550, $add573, 0);
      var $553=$n541;
      var $inc574=((($553)+(1))|0);
      $n541=$inc574;
      var $554=$t;
      var $cdr575=(($554+4)|0);
      var $555=HEAP32[(($cdr575)>>2)];
      $t=$555;
      label = 129; break;
    case 131: 
      label = 132; break;
    case 132: 
      var $556=$tree_addr;
      var $cdr578=(($556+4)|0);
      var $557=HEAP32[(($cdr578)>>2)];
      $t=$557;
      var $558=$t;
      var $tobool579=(($558)|(0))!=0;
      if ($tobool579) { label = 133; break; } else { label = 147; break; }
    case 133: 
      var $559=$t;
      var $cdr581=(($559+4)|0);
      var $560=HEAP32[(($cdr581)>>2)];
      var $tobool582=(($560)|(0))!=0;
      if ($tobool582) { label = 134; break; } else { label = 138; break; }
    case 134: 
      var $561=$t;
      var $cdr584=(($561+4)|0);
      var $562=HEAP32[(($cdr584)>>2)];
      var $car585=(($562)|0);
      var $563=HEAP32[(($car585)>>2)];
      $p=$563;
      label = 135; break;
    case 135: 
      var $564=$p;
      var $tobool587=(($564)|(0))!=0;
      if ($tobool587) { label = 136; break; } else { label = 137; break; }
    case 136: 
      var $565=$post;
      var $inc589=((($565)+(1))|0);
      $post=$inc589;
      var $566=$p;
      var $cdr590=(($566+4)|0);
      var $567=HEAP32[(($cdr590)>>2)];
      $p=$567;
      label = 135; break;
    case 137: 
      label = 138; break;
    case 138: 
      var $568=$t;
      var $car593=(($568)|0);
      var $569=HEAP32[(($car593)>>2)];
      var $tobool594=(($569)|(0))!=0;
      if ($tobool594) { label = 139; break; } else { label = 140; break; }
    case 139: 
      var $570=$len539;
      var $571=$post;
      var $sub597=((($570)-($571))|0);
      var $572=$n541;
      var $sub598=((($sub597)-($572))|0);
      $rn=$sub598;
      var $573=$s_addr;
      var $574=$s_addr;
      var $sp599=(($574+56)|0);
      var $575=HEAP32[(($sp599)>>2)];
      var $and600=$575 & 511;
      var $shl601=$and600 << 23;
      var $or602=55 | $shl601;
      var $576=$rhs;
      var $577=$n541;
      var $add603=((($576)+($577))|0);
      var $and604=$add603 & 511;
      var $shl605=$and604 << 14;
      var $or606=$or602 | $shl605;
      var $578=$rn;
      var $and607=$578 & 127;
      var $shl608=$and607 << 7;
      var $or609=$or606 | $shl608;
      _genop($573, $or609);
      var $579=$s_addr;
      var $580=$t;
      var $car610=(($580)|0);
      var $581=HEAP32[(($car610)>>2)];
      var $582=$s_addr;
      var $sp611=(($582+56)|0);
      var $583=HEAP32[(($sp611)>>2)];
      _gen_assignment($579, $581, $583, 0);
      var $584=$rn;
      var $585=$n541;
      var $add612=((($585)+($584))|0);
      $n541=$add612;
      label = 140; break;
    case 140: 
      var $586=$t;
      var $cdr614=(($586+4)|0);
      var $587=HEAP32[(($cdr614)>>2)];
      var $tobool615=(($587)|(0))!=0;
      if ($tobool615) { label = 141; break; } else { label = 146; break; }
    case 141: 
      var $588=$t;
      var $cdr617=(($588+4)|0);
      var $589=HEAP32[(($cdr617)>>2)];
      var $car618=(($589)|0);
      var $590=HEAP32[(($car618)>>2)];
      var $tobool619=(($590)|(0))!=0;
      if ($tobool619) { label = 142; break; } else { label = 146; break; }
    case 142: 
      var $591=$t;
      var $cdr621=(($591+4)|0);
      var $592=HEAP32[(($cdr621)>>2)];
      var $car622=(($592)|0);
      var $593=HEAP32[(($car622)>>2)];
      $t=$593;
      label = 143; break;
    case 143: 
      var $594=$n541;
      var $595=$len539;
      var $cmp624=(($594)|(0)) < (($595)|(0));
      if ($cmp624) { label = 144; break; } else { label = 145; break; }
    case 144: 
      var $596=$s_addr;
      var $597=$t;
      var $car627=(($597)|0);
      var $598=HEAP32[(($car627)>>2)];
      var $599=$rhs;
      var $600=$n541;
      var $add628=((($599)+($600))|0);
      _gen_assignment($596, $598, $add628, 0);
      var $601=$t;
      var $cdr629=(($601+4)|0);
      var $602=HEAP32[(($cdr629)>>2)];
      $t=$602;
      var $603=$n541;
      var $inc630=((($603)+(1))|0);
      $n541=$inc630;
      label = 143; break;
    case 145: 
      label = 146; break;
    case 146: 
      label = 147; break;
    case 147: 
      var $604=$len539;
      var $605=$s_addr;
      var $sp634=(($605+56)|0);
      var $606=HEAP32[(($sp634)>>2)];
      var $sub635=((($606)-($604))|0);
      HEAP32[(($sp634)>>2)]=$sub635;
      var $607=$val_addr;
      var $tobool636=(($607)|(0))!=0;
      if ($tobool636) { label = 148; break; } else { label = 149; break; }
    case 148: 
      var $608=$s_addr;
      var $609=$rhs;
      var $and638=$609 & 511;
      var $shl639=$and638 << 23;
      var $or640=55 | $shl639;
      var $610=$rhs;
      var $and641=$610 & 511;
      var $shl642=$and641 << 14;
      var $or643=$or640 | $shl642;
      var $611=$len539;
      var $and644=$611 & 127;
      var $shl645=$and644 << 7;
      var $or646=$or643 | $shl645;
      _genop($608, $or646);
      var $612=$s_addr;
      _push_($612);
      label = 149; break;
    case 149: 
      label = 153; break;
    case 150: 
      var $613=$s_addr;
      var $614=$t;
      _codegen($613, $614, 1);
      var $615=$s_addr;
      var $616=$tree_addr;
      var $car649=(($616)|0);
      var $617=HEAP32[(($car649)>>2)];
      var $618=$rhs;
      var $619=$val_addr;
      _gen_vmassignment($615, $617, $618, $619);
      var $620=$val_addr;
      var $tobool650=(($620)|(0))!=0;
      if ($tobool650) { label = 152; break; } else { label = 151; break; }
    case 151: 
      var $621=$s_addr;
      var $sp652=(($621+56)|0);
      var $622=HEAP32[(($sp652)>>2)];
      var $dec653=((($622)-(1))|0);
      HEAP32[(($sp652)>>2)]=$dec653;
      label = 152; break;
    case 152: 
      label = 153; break;
    case 153: 
      label = 438; break;
    case 154: 
      var $623=$tree_addr;
      var $cdr659=(($623+4)|0);
      var $624=HEAP32[(($cdr659)>>2)];
      var $car660=(($624)|0);
      var $625=HEAP32[(($car660)>>2)];
      var $626=$625;
      var $conv661=(($626) & 65535);
      $sym658=$conv661;
      var $627=$s_addr;
      var $mrb665=(($627)|0);
      var $628=HEAP32[(($mrb665)>>2)];
      var $629=$sym658;
      var $call666=_mrb_sym2name_len($628, $629, $len663);
      $name=$call666;
      var $630=$s_addr;
      var $631=$tree_addr;
      var $car669=(($631)|0);
      var $632=HEAP32[(($car669)>>2)];
      _codegen($630, $632, 1);
      var $633=HEAP32[(($len663)>>2)];
      var $cmp670=(($633)|(0))==2;
      if ($cmp670) { label = 155; break; } else { label = 160; break; }
    case 155: 
      var $634=$name;
      var $arrayidx673=(($634)|0);
      var $635=HEAP8[($arrayidx673)];
      var $conv674=(($635 << 24) >> 24);
      var $cmp675=(($conv674)|(0))==124;
      if ($cmp675) { label = 156; break; } else { label = 157; break; }
    case 156: 
      var $636=$name;
      var $arrayidx678=(($636+1)|0);
      var $637=HEAP8[($arrayidx678)];
      var $conv679=(($637 << 24) >> 24);
      var $cmp680=(($conv679)|(0))==124;
      if ($cmp680) { label = 159; break; } else { label = 157; break; }
    case 157: 
      var $638=$name;
      var $arrayidx682=(($638)|0);
      var $639=HEAP8[($arrayidx682)];
      var $conv683=(($639 << 24) >> 24);
      var $cmp684=(($conv683)|(0))==38;
      if ($cmp684) { label = 158; break; } else { label = 160; break; }
    case 158: 
      var $640=$name;
      var $arrayidx687=(($640+1)|0);
      var $641=HEAP8[($arrayidx687)];
      var $conv688=(($641 << 24) >> 24);
      var $cmp689=(($conv688)|(0))==38;
      if ($cmp689) { label = 159; break; } else { label = 160; break; }
    case 159: 
      var $642=$s_addr;
      var $sp694=(($642+56)|0);
      var $643=HEAP32[(($sp694)>>2)];
      var $dec695=((($643)-(1))|0);
      HEAP32[(($sp694)>>2)]=$dec695;
      var $644=$s_addr;
      var $call696=_new_label($644);
      $pos693=$call696;
      var $645=$s_addr;
      var $646=$name;
      var $arrayidx697=(($646)|0);
      var $647=HEAP8[($arrayidx697)];
      var $conv698=(($647 << 24) >> 24);
      var $cmp699=(($conv698)|(0))==124;
      var $cond701=$cmp699 ? 24 : 25;
      var $and702=$cond701 & 127;
      var $648=$s_addr;
      var $sp703=(($648+56)|0);
      var $649=HEAP32[(($sp703)>>2)];
      var $and704=$649 & 511;
      var $shl705=$and704 << 23;
      var $or706=$and702 | $shl705;
      var $or707=$or706 | 4194176;
      _genop($645, $or707);
      var $650=$s_addr;
      var $651=$tree_addr;
      var $cdr708=(($651+4)|0);
      var $652=HEAP32[(($cdr708)>>2)];
      var $cdr709=(($652+4)|0);
      var $653=HEAP32[(($cdr709)>>2)];
      var $car710=(($653)|0);
      var $654=HEAP32[(($car710)>>2)];
      _codegen($650, $654, 1);
      var $655=$s_addr;
      var $sp711=(($655+56)|0);
      var $656=HEAP32[(($sp711)>>2)];
      var $dec712=((($656)-(1))|0);
      HEAP32[(($sp711)>>2)]=$dec712;
      var $657=$s_addr;
      var $658=$tree_addr;
      var $car713=(($658)|0);
      var $659=HEAP32[(($car713)>>2)];
      var $660=$s_addr;
      var $sp714=(($660+56)|0);
      var $661=HEAP32[(($sp714)>>2)];
      var $662=$val_addr;
      _gen_assignment($657, $659, $661, $662);
      var $663=$s_addr;
      var $664=$pos693;
      _dispatch($663, $664);
      label = 438; break;
    case 160: 
      var $665=$s_addr;
      var $666=$tree_addr;
      var $cdr716=(($666+4)|0);
      var $667=HEAP32[(($cdr716)>>2)];
      var $cdr717=(($667+4)|0);
      var $668=HEAP32[(($cdr717)>>2)];
      var $car718=(($668)|0);
      var $669=HEAP32[(($car718)>>2)];
      _codegen($665, $669, 1);
      var $670=$s_addr;
      var $sp719=(($670+56)|0);
      var $671=HEAP32[(($sp719)>>2)];
      var $dec720=((($671)-(1))|0);
      HEAP32[(($sp719)>>2)]=$dec720;
      var $672=$s_addr;
      var $sp721=(($672+56)|0);
      var $673=HEAP32[(($sp721)>>2)];
      var $dec722=((($673)-(1))|0);
      HEAP32[(($sp721)>>2)]=$dec722;
      var $674=$s_addr;
      var $675=$sym658;
      var $call723=_new_msym($674, $675);
      $idx668=$call723;
      var $676=HEAP32[(($len663)>>2)];
      var $cmp724=(($676)|(0))==1;
      if ($cmp724) { label = 161; break; } else { label = 163; break; }
    case 161: 
      var $677=$name;
      var $arrayidx727=(($677)|0);
      var $678=HEAP8[($arrayidx727)];
      var $conv728=(($678 << 24) >> 24);
      var $cmp729=(($conv728)|(0))==43;
      if ($cmp729) { label = 162; break; } else { label = 163; break; }
    case 162: 
      var $679=$s_addr;
      var $680=$s_addr;
      var $sp732=(($680+56)|0);
      var $681=HEAP32[(($sp732)>>2)];
      var $and733=$681 & 511;
      var $shl734=$and733 << 23;
      var $or735=44 | $shl734;
      var $682=$idx668;
      var $and736=$682 & 511;
      var $shl737=$and736 << 14;
      var $or738=$or735 | $shl737;
      var $or739=$or738 | 128;
      var $683=$val_addr;
      _genop_peep($679, $or739, $683);
      label = 194; break;
    case 163: 
      var $684=HEAP32[(($len663)>>2)];
      var $cmp741=(($684)|(0))==1;
      if ($cmp741) { label = 164; break; } else { label = 166; break; }
    case 164: 
      var $685=$name;
      var $arrayidx744=(($685)|0);
      var $686=HEAP8[($arrayidx744)];
      var $conv745=(($686 << 24) >> 24);
      var $cmp746=(($conv745)|(0))==45;
      if ($cmp746) { label = 165; break; } else { label = 166; break; }
    case 165: 
      var $687=$s_addr;
      var $688=$s_addr;
      var $sp749=(($688+56)|0);
      var $689=HEAP32[(($sp749)>>2)];
      var $and750=$689 & 511;
      var $shl751=$and750 << 23;
      var $or752=46 | $shl751;
      var $690=$idx668;
      var $and753=$690 & 511;
      var $shl754=$and753 << 14;
      var $or755=$or752 | $shl754;
      var $or756=$or755 | 128;
      var $691=$val_addr;
      _genop_peep($687, $or756, $691);
      label = 193; break;
    case 166: 
      var $692=HEAP32[(($len663)>>2)];
      var $cmp758=(($692)|(0))==1;
      if ($cmp758) { label = 167; break; } else { label = 169; break; }
    case 167: 
      var $693=$name;
      var $arrayidx761=(($693)|0);
      var $694=HEAP8[($arrayidx761)];
      var $conv762=(($694 << 24) >> 24);
      var $cmp763=(($conv762)|(0))==42;
      if ($cmp763) { label = 168; break; } else { label = 169; break; }
    case 168: 
      var $695=$s_addr;
      var $696=$s_addr;
      var $sp766=(($696+56)|0);
      var $697=HEAP32[(($sp766)>>2)];
      var $and767=$697 & 511;
      var $shl768=$and767 << 23;
      var $or769=48 | $shl768;
      var $698=$idx668;
      var $and770=$698 & 511;
      var $shl771=$and770 << 14;
      var $or772=$or769 | $shl771;
      var $or773=$or772 | 128;
      _genop($695, $or773);
      label = 192; break;
    case 169: 
      var $699=HEAP32[(($len663)>>2)];
      var $cmp775=(($699)|(0))==1;
      if ($cmp775) { label = 170; break; } else { label = 172; break; }
    case 170: 
      var $700=$name;
      var $arrayidx778=(($700)|0);
      var $701=HEAP8[($arrayidx778)];
      var $conv779=(($701 << 24) >> 24);
      var $cmp780=(($conv779)|(0))==47;
      if ($cmp780) { label = 171; break; } else { label = 172; break; }
    case 171: 
      var $702=$s_addr;
      var $703=$s_addr;
      var $sp783=(($703+56)|0);
      var $704=HEAP32[(($sp783)>>2)];
      var $and784=$704 & 511;
      var $shl785=$and784 << 23;
      var $or786=49 | $shl785;
      var $705=$idx668;
      var $and787=$705 & 511;
      var $shl788=$and787 << 14;
      var $or789=$or786 | $shl788;
      var $or790=$or789 | 128;
      _genop($702, $or790);
      label = 191; break;
    case 172: 
      var $706=HEAP32[(($len663)>>2)];
      var $cmp792=(($706)|(0))==1;
      if ($cmp792) { label = 173; break; } else { label = 175; break; }
    case 173: 
      var $707=$name;
      var $arrayidx795=(($707)|0);
      var $708=HEAP8[($arrayidx795)];
      var $conv796=(($708 << 24) >> 24);
      var $cmp797=(($conv796)|(0))==60;
      if ($cmp797) { label = 174; break; } else { label = 175; break; }
    case 174: 
      var $709=$s_addr;
      var $710=$s_addr;
      var $sp800=(($710+56)|0);
      var $711=HEAP32[(($sp800)>>2)];
      var $and801=$711 & 511;
      var $shl802=$and801 << 23;
      var $or803=51 | $shl802;
      var $712=$idx668;
      var $and804=$712 & 511;
      var $shl805=$and804 << 14;
      var $or806=$or803 | $shl805;
      var $or807=$or806 | 128;
      _genop($709, $or807);
      label = 190; break;
    case 175: 
      var $713=HEAP32[(($len663)>>2)];
      var $cmp809=(($713)|(0))==2;
      if ($cmp809) { label = 176; break; } else { label = 179; break; }
    case 176: 
      var $714=$name;
      var $arrayidx812=(($714)|0);
      var $715=HEAP8[($arrayidx812)];
      var $conv813=(($715 << 24) >> 24);
      var $cmp814=(($conv813)|(0))==60;
      if ($cmp814) { label = 177; break; } else { label = 179; break; }
    case 177: 
      var $716=$name;
      var $arrayidx817=(($716+1)|0);
      var $717=HEAP8[($arrayidx817)];
      var $conv818=(($717 << 24) >> 24);
      var $cmp819=(($conv818)|(0))==61;
      if ($cmp819) { label = 178; break; } else { label = 179; break; }
    case 178: 
      var $718=$s_addr;
      var $719=$s_addr;
      var $sp822=(($719+56)|0);
      var $720=HEAP32[(($sp822)>>2)];
      var $and823=$720 & 511;
      var $shl824=$and823 << 23;
      var $or825=52 | $shl824;
      var $721=$idx668;
      var $and826=$721 & 511;
      var $shl827=$and826 << 14;
      var $or828=$or825 | $shl827;
      var $or829=$or828 | 128;
      _genop($718, $or829);
      label = 189; break;
    case 179: 
      var $722=HEAP32[(($len663)>>2)];
      var $cmp831=(($722)|(0))==1;
      if ($cmp831) { label = 180; break; } else { label = 182; break; }
    case 180: 
      var $723=$name;
      var $arrayidx834=(($723)|0);
      var $724=HEAP8[($arrayidx834)];
      var $conv835=(($724 << 24) >> 24);
      var $cmp836=(($conv835)|(0))==62;
      if ($cmp836) { label = 181; break; } else { label = 182; break; }
    case 181: 
      var $725=$s_addr;
      var $726=$s_addr;
      var $sp839=(($726+56)|0);
      var $727=HEAP32[(($sp839)>>2)];
      var $and840=$727 & 511;
      var $shl841=$and840 << 23;
      var $or842=53 | $shl841;
      var $728=$idx668;
      var $and843=$728 & 511;
      var $shl844=$and843 << 14;
      var $or845=$or842 | $shl844;
      var $or846=$or845 | 128;
      _genop($725, $or846);
      label = 188; break;
    case 182: 
      var $729=HEAP32[(($len663)>>2)];
      var $cmp848=(($729)|(0))==2;
      if ($cmp848) { label = 183; break; } else { label = 186; break; }
    case 183: 
      var $730=$name;
      var $arrayidx851=(($730)|0);
      var $731=HEAP8[($arrayidx851)];
      var $conv852=(($731 << 24) >> 24);
      var $cmp853=(($conv852)|(0))==62;
      if ($cmp853) { label = 184; break; } else { label = 186; break; }
    case 184: 
      var $732=$name;
      var $arrayidx856=(($732+1)|0);
      var $733=HEAP8[($arrayidx856)];
      var $conv857=(($733 << 24) >> 24);
      var $cmp858=(($conv857)|(0))==61;
      if ($cmp858) { label = 185; break; } else { label = 186; break; }
    case 185: 
      var $734=$s_addr;
      var $735=$s_addr;
      var $sp861=(($735+56)|0);
      var $736=HEAP32[(($sp861)>>2)];
      var $and862=$736 & 511;
      var $shl863=$and862 << 23;
      var $or864=54 | $shl863;
      var $737=$idx668;
      var $and865=$737 & 511;
      var $shl866=$and865 << 14;
      var $or867=$or864 | $shl866;
      var $or868=$or867 | 128;
      _genop($734, $or868);
      label = 187; break;
    case 186: 
      var $738=$s_addr;
      var $739=$s_addr;
      var $sp870=(($739+56)|0);
      var $740=HEAP32[(($sp870)>>2)];
      var $and871=$740 & 511;
      var $shl872=$and871 << 23;
      var $or873=32 | $shl872;
      var $741=$idx668;
      var $and874=$741 & 511;
      var $shl875=$and874 << 14;
      var $or876=$or873 | $shl875;
      var $or877=$or876 | 128;
      _genop($738, $or877);
      label = 187; break;
    case 187: 
      label = 188; break;
    case 188: 
      label = 189; break;
    case 189: 
      label = 190; break;
    case 190: 
      label = 191; break;
    case 191: 
      label = 192; break;
    case 192: 
      label = 193; break;
    case 193: 
      label = 194; break;
    case 194: 
      var $742=$s_addr;
      var $743=$tree_addr;
      var $car886=(($743)|0);
      var $744=HEAP32[(($car886)>>2)];
      var $745=$s_addr;
      var $sp887=(($745+56)|0);
      var $746=HEAP32[(($sp887)>>2)];
      var $747=$val_addr;
      _gen_assignment($742, $744, $746, $747);
      label = 438; break;
    case 195: 
      $n890=0;
      $noop=0;
      $sendv=0;
      var $748=$s_addr;
      _push_($748);
      var $749=$tree_addr;
      var $tobool893=(($749)|(0))!=0;
      if ($tobool893) { label = 196; break; } else { label = 201; break; }
    case 196: 
      var $750=$tree_addr;
      var $car896=(($750)|0);
      var $751=HEAP32[(($car896)>>2)];
      $args=$751;
      var $752=$args;
      var $tobool897=(($752)|(0))!=0;
      if ($tobool897) { label = 197; break; } else { label = 200; break; }
    case 197: 
      var $753=$s_addr;
      var $754=$args;
      var $call899=_gen_values($753, $754, 1);
      $n890=$call899;
      var $755=$n890;
      var $cmp900=(($755)|(0)) < 0;
      if ($cmp900) { label = 198; break; } else { label = 199; break; }
    case 198: 
      $sendv=1;
      $noop=1;
      $n890=1;
      var $756=$s_addr;
      _push_($756);
      label = 199; break;
    case 199: 
      label = 200; break;
    case 200: 
      label = 201; break;
    case 201: 
      var $757=$tree_addr;
      var $tobool906=(($757)|(0))!=0;
      if ($tobool906) { label = 202; break; } else { label = 204; break; }
    case 202: 
      var $758=$tree_addr;
      var $cdr908=(($758+4)|0);
      var $759=HEAP32[(($cdr908)>>2)];
      var $tobool909=(($759)|(0))!=0;
      if ($tobool909) { label = 203; break; } else { label = 204; break; }
    case 203: 
      var $760=$s_addr;
      var $761=$tree_addr;
      var $cdr911=(($761+4)|0);
      var $762=HEAP32[(($cdr911)>>2)];
      _codegen($760, $762, 1);
      var $763=$s_addr;
      var $sp912=(($763+56)|0);
      var $764=HEAP32[(($sp912)>>2)];
      var $dec913=((($764)-(1))|0);
      HEAP32[(($sp912)>>2)]=$dec913;
      label = 205; break;
    case 204: 
      var $765=$s_addr;
      var $766=$s_addr;
      var $sp915=(($766+56)|0);
      var $767=HEAP32[(($sp915)>>2)];
      var $and916=$767 & 511;
      var $shl917=$and916 << 23;
      var $or918=5 | $shl917;
      _genop($765, $or918);
      label = 205; break;
    case 205: 
      var $768=$n890;
      var $add920=((($768)+(1))|0);
      var $769=$s_addr;
      var $sp921=(($769+56)|0);
      var $770=HEAP32[(($sp921)>>2)];
      var $sub922=((($770)-($add920))|0);
      HEAP32[(($sp921)>>2)]=$sub922;
      var $771=$sendv;
      var $tobool923=(($771)|(0))!=0;
      if ($tobool923) { label = 206; break; } else { label = 207; break; }
    case 206: 
      $n890=127;
      label = 207; break;
    case 207: 
      var $772=$s_addr;
      var $773=$s_addr;
      var $sp926=(($773+56)|0);
      var $774=HEAP32[(($sp926)>>2)];
      var $and927=$774 & 511;
      var $shl928=$and927 << 23;
      var $or929=36 | $shl928;
      var $775=$n890;
      var $and930=$775 & 127;
      var $shl931=$and930 << 7;
      var $or932=$or929 | $shl931;
      _genop($772, $or932);
      var $776=$val_addr;
      var $tobool933=(($776)|(0))!=0;
      if ($tobool933) { label = 208; break; } else { label = 209; break; }
    case 208: 
      var $777=$s_addr;
      _push_($777);
      label = 209; break;
    case 209: 
      label = 438; break;
    case 210: 
      var $778=$s_addr;
      $s2=$778;
      $lv=0;
      $ainfo=0;
      var $779=$s_addr;
      _push_($779);
      label = 211; break;
    case 211: 
      var $780=$s2;
      var $781=$780;
      var $bf_field_offs=(($781+69)|0);
      var $782=HEAP8[($bf_field_offs)];
      var $783=(($782)&(255)) >>> 7;
      var $bf_clear=$783 & 1;
      var $tobool941=(($bf_clear << 24) >> 24)!=0;
      var $lnot=$tobool941 ^ 1;
      if ($lnot) { label = 212; break; } else { label = 215; break; }
    case 212: 
      var $784=$lv;
      var $inc943=((($784)+(1))|0);
      $lv=$inc943;
      var $785=$s2;
      var $prev=(($785+48)|0);
      var $786=HEAP32[(($prev)>>2)];
      $s2=$786;
      var $787=$s2;
      var $tobool944=(($787)|(0))!=0;
      if ($tobool944) { label = 214; break; } else { label = 213; break; }
    case 213: 
      label = 215; break;
    case 214: 
      label = 211; break;
    case 215: 
      var $788=$s2;
      var $tobool948=(($788)|(0))!=0;
      if ($tobool948) { label = 216; break; } else { label = 217; break; }
    case 216: 
      var $789=$s2;
      var $790=$789;
      var $bf_field_offs950=(($790+68)|0);
      var $791=$bf_field_offs950;
      var $792=HEAP32[(($791)>>2)];
      var $bf_clear951=$792 & 32767;
      var $793=$bf_clear951 << 17;
      var $bf_val_sext=$793 >> 17;
      $ainfo=$bf_val_sext;
      label = 217; break;
    case 217: 
      var $794=$s_addr;
      var $795=$s_addr;
      var $sp953=(($795+56)|0);
      var $796=HEAP32[(($sp953)>>2)];
      var $and954=$796 & 511;
      var $shl955=$and954 << 23;
      var $or956=37 | $shl955;
      var $797=$ainfo;
      var $shl957=$797 << 4;
      var $798=$lv;
      var $and958=$798 & 15;
      var $or959=$shl957 | $and958;
      var $and960=$or959 & 65535;
      var $shl961=$and960 << 7;
      var $or962=$or956 | $shl961;
      _genop($794, $or962);
      var $799=$tree_addr;
      var $tobool963=(($799)|(0))!=0;
      if ($tobool963) { label = 218; break; } else { label = 220; break; }
    case 218: 
      var $800=$tree_addr;
      var $cdr965=(($800+4)|0);
      var $801=HEAP32[(($cdr965)>>2)];
      var $tobool966=(($801)|(0))!=0;
      if ($tobool966) { label = 219; break; } else { label = 220; break; }
    case 219: 
      var $802=$s_addr;
      _push_($802);
      var $803=$s_addr;
      var $804=$tree_addr;
      var $cdr968=(($804+4)|0);
      var $805=HEAP32[(($cdr968)>>2)];
      _codegen($803, $805, 1);
      var $806=$s_addr;
      var $sp969=(($806+56)|0);
      var $807=HEAP32[(($sp969)>>2)];
      var $sub970=((($807)-(2))|0);
      HEAP32[(($sp969)>>2)]=$sub970;
      label = 220; break;
    case 220: 
      var $808=$s_addr;
      var $sp972=(($808+56)|0);
      var $809=HEAP32[(($sp972)>>2)];
      var $dec973=((($809)-(1))|0);
      HEAP32[(($sp972)>>2)]=$dec973;
      var $810=$s_addr;
      var $811=$s_addr;
      var $sp974=(($811+56)|0);
      var $812=HEAP32[(($sp974)>>2)];
      var $and975=$812 & 511;
      var $shl976=$and975 << 23;
      var $or977=36 | $shl976;
      var $or978=$or977 | 16256;
      _genop($810, $or978);
      var $813=$val_addr;
      var $tobool979=(($813)|(0))!=0;
      if ($tobool979) { label = 221; break; } else { label = 222; break; }
    case 221: 
      var $814=$s_addr;
      _push_($814);
      label = 222; break;
    case 222: 
      label = 438; break;
    case 223: 
      var $815=$tree_addr;
      var $tobool983=(($815)|(0))!=0;
      if ($tobool983) { label = 224; break; } else { label = 225; break; }
    case 224: 
      var $816=$s_addr;
      var $817=$tree_addr;
      _codegen($816, $817, 1);
      var $818=$s_addr;
      var $sp985=(($818+56)|0);
      var $819=HEAP32[(($sp985)>>2)];
      var $dec986=((($819)-(1))|0);
      HEAP32[(($sp985)>>2)]=$dec986;
      label = 226; break;
    case 225: 
      var $820=$s_addr;
      var $821=$s_addr;
      var $sp988=(($821+56)|0);
      var $822=HEAP32[(($sp988)>>2)];
      var $and989=$822 & 511;
      var $shl990=$and989 << 23;
      var $or991=5 | $shl990;
      _genop($820, $or991);
      label = 226; break;
    case 226: 
      var $823=$s_addr;
      var $loop=(($823+72)|0);
      var $824=HEAP32[(($loop)>>2)];
      var $tobool993=(($824)|(0))!=0;
      if ($tobool993) { label = 227; break; } else { label = 228; break; }
    case 227: 
      var $825=$s_addr;
      var $826=$s_addr;
      var $sp995=(($826+56)|0);
      var $827=HEAP32[(($sp995)>>2)];
      var $and996=$827 & 511;
      var $shl997=$and996 << 23;
      var $or998=41 | $shl997;
      var $or999=$or998 | 32768;
      _genop($825, $or999);
      label = 229; break;
    case 228: 
      var $828=$s_addr;
      var $829=$s_addr;
      var $sp1001=(($829+56)|0);
      var $830=HEAP32[(($sp1001)>>2)];
      var $and1002=$830 & 511;
      var $shl1003=$and1002 << 23;
      var $or1004=41 | $shl1003;
      _genop_peep($828, $or1004, 0);
      label = 229; break;
    case 229: 
      var $831=$val_addr;
      var $tobool1006=(($831)|(0))!=0;
      if ($tobool1006) { label = 230; break; } else { label = 231; break; }
    case 230: 
      var $832=$s_addr;
      _push_($832);
      label = 231; break;
    case 231: 
      label = 438; break;
    case 232: 
      var $833=$s_addr;
      $s21011=$833;
      $lv1013=0;
      $ainfo1015=0;
      $n1017=0;
      $sendv1019=0;
      label = 233; break;
    case 233: 
      var $834=$s21011;
      var $835=$834;
      var $bf_field_offs1021=(($835+69)|0);
      var $836=HEAP8[($bf_field_offs1021)];
      var $837=(($836)&(255)) >>> 7;
      var $bf_clear1022=$837 & 1;
      var $tobool1023=(($bf_clear1022 << 24) >> 24)!=0;
      var $lnot1024=$tobool1023 ^ 1;
      if ($lnot1024) { label = 234; break; } else { label = 237; break; }
    case 234: 
      var $838=$lv1013;
      var $inc1026=((($838)+(1))|0);
      $lv1013=$inc1026;
      var $839=$s21011;
      var $prev1027=(($839+48)|0);
      var $840=HEAP32[(($prev1027)>>2)];
      $s21011=$840;
      var $841=$s21011;
      var $tobool1028=(($841)|(0))!=0;
      if ($tobool1028) { label = 236; break; } else { label = 235; break; }
    case 235: 
      label = 237; break;
    case 236: 
      label = 233; break;
    case 237: 
      var $842=$s21011;
      var $tobool1032=(($842)|(0))!=0;
      if ($tobool1032) { label = 238; break; } else { label = 239; break; }
    case 238: 
      var $843=$s21011;
      var $844=$843;
      var $bf_field_offs1034=(($844+68)|0);
      var $845=$bf_field_offs1034;
      var $846=HEAP32[(($845)>>2)];
      var $bf_clear1035=$846 & 32767;
      var $847=$bf_clear1035 << 17;
      var $bf_val_sext1036=$847 >> 17;
      $ainfo1015=$bf_val_sext1036;
      label = 239; break;
    case 239: 
      var $848=$s_addr;
      var $849=$s_addr;
      var $sp1038=(($849+56)|0);
      var $850=HEAP32[(($sp1038)>>2)];
      var $and1039=$850 & 511;
      var $shl1040=$and1039 << 23;
      var $or1041=43 | $shl1040;
      var $851=$ainfo1015;
      var $shl1042=$851 << 4;
      var $852=$lv1013;
      var $and1043=$852 & 15;
      var $or1044=$shl1042 | $and1043;
      var $and1045=$or1044 & 65535;
      var $shl1046=$and1045 << 7;
      var $or1047=$or1041 | $shl1046;
      _genop($848, $or1047);
      var $853=$s_addr;
      _push_($853);
      var $854=$tree_addr;
      var $tobool1048=(($854)|(0))!=0;
      if ($tobool1048) { label = 240; break; } else { label = 243; break; }
    case 240: 
      var $855=$s_addr;
      var $856=$tree_addr;
      var $call1050=_gen_values($855, $856, 1);
      $n1017=$call1050;
      var $857=$n1017;
      var $cmp1051=(($857)|(0)) < 0;
      if ($cmp1051) { label = 241; break; } else { label = 242; break; }
    case 241: 
      $sendv1019=1;
      $n1017=1;
      var $858=$s_addr;
      _push_($858);
      label = 242; break;
    case 242: 
      label = 243; break;
    case 243: 
      var $859=$n1017;
      var $add1056=((($859)+(1))|0);
      var $860=$s_addr;
      var $sp1057=(($860+56)|0);
      var $861=HEAP32[(($sp1057)>>2)];
      var $sub1058=((($861)-($add1056))|0);
      HEAP32[(($sp1057)>>2)]=$sub1058;
      var $862=$sendv1019;
      var $tobool1059=(($862)|(0))!=0;
      if ($tobool1059) { label = 244; break; } else { label = 245; break; }
    case 244: 
      $n1017=127;
      label = 245; break;
    case 245: 
      var $863=$s_addr;
      var $864=$s_addr;
      var $sp1062=(($864+56)|0);
      var $865=HEAP32[(($sp1062)>>2)];
      var $and1063=$865 & 511;
      var $shl1064=$and1063 << 23;
      var $or1065=32 | $shl1064;
      var $866=$s_addr;
      var $867=$s_addr;
      var $mrb1066=(($867)|0);
      var $868=HEAP32[(($mrb1066)>>2)];
      var $call1067=_mrb_intern2($868, ((99964)|0), 4);
      var $call1068=_new_msym($866, $call1067);
      var $and1069=$call1068 & 511;
      var $shl1070=$and1069 << 14;
      var $or1071=$or1065 | $shl1070;
      var $869=$n1017;
      var $and1072=$869 & 127;
      var $shl1073=$and1072 << 7;
      var $or1074=$or1071 | $shl1073;
      _genop($863, $or1074);
      var $870=$val_addr;
      var $tobool1075=(($870)|(0))!=0;
      if ($tobool1075) { label = 246; break; } else { label = 247; break; }
    case 246: 
      var $871=$s_addr;
      _push_($871);
      label = 247; break;
    case 247: 
      label = 438; break;
    case 248: 
      var $872=$s_addr;
      var $873=$tree_addr;
      _loop_break($872, $873);
      var $874=$val_addr;
      var $tobool1079=(($874)|(0))!=0;
      if ($tobool1079) { label = 249; break; } else { label = 250; break; }
    case 249: 
      var $875=$s_addr;
      _push_($875);
      label = 250; break;
    case 250: 
      label = 438; break;
    case 251: 
      var $876=$s_addr;
      var $loop1083=(($876+72)|0);
      var $877=HEAP32[(($loop1083)>>2)];
      var $tobool1084=(($877)|(0))!=0;
      if ($tobool1084) { label = 253; break; } else { label = 252; break; }
    case 252: 
      var $878=$s_addr;
      _raise_error($878, ((97444)|0));
      label = 262; break;
    case 253: 
      var $879=$s_addr;
      var $loop1087=(($879+72)|0);
      var $880=HEAP32[(($loop1087)>>2)];
      var $type1088=(($880)|0);
      var $881=HEAP32[(($type1088)>>2)];
      var $cmp1089=(($881)|(0))==0;
      if ($cmp1089) { label = 254; break; } else { label = 257; break; }
    case 254: 
      var $882=$s_addr;
      var $ensure_level1092=(($882+76)|0);
      var $883=HEAP32[(($ensure_level1092)>>2)];
      var $884=$s_addr;
      var $loop1093=(($884+72)|0);
      var $885=HEAP32[(($loop1093)>>2)];
      var $ensure_level1094=(($885+20)|0);
      var $886=HEAP32[(($ensure_level1094)>>2)];
      var $cmp1095=(($883)|(0)) > (($886)|(0));
      if ($cmp1095) { label = 255; break; } else { label = 256; break; }
    case 255: 
      var $887=$s_addr;
      var $888=$s_addr;
      var $ensure_level1098=(($888+76)|0);
      var $889=HEAP32[(($ensure_level1098)>>2)];
      var $890=$s_addr;
      var $loop1099=(($890+72)|0);
      var $891=HEAP32[(($loop1099)>>2)];
      var $ensure_level1100=(($891+20)|0);
      var $892=HEAP32[(($ensure_level1100)>>2)];
      var $sub1101=((($889)-($892))|0);
      var $and1102=$sub1101 & 511;
      var $shl1103=$and1102 << 23;
      var $or1104=31 | $shl1103;
      _genop_peep($887, $or1104, 0);
      label = 256; break;
    case 256: 
      var $893=$s_addr;
      var $894=$tree_addr;
      _codegen($893, $894, 0);
      var $895=$s_addr;
      var $896=$s_addr;
      var $loop1106=(($896+72)|0);
      var $897=HEAP32[(($loop1106)>>2)];
      var $pc11107=(($897+4)|0);
      var $898=HEAP32[(($pc11107)>>2)];
      var $899=$s_addr;
      var $pc1108=(($899+60)|0);
      var $900=HEAP32[(($pc1108)>>2)];
      var $sub1109=((($898)-($900))|0);
      var $add1110=((($sub1109)+(32767))|0);
      var $and1111=$add1110 & 65535;
      var $shl1112=$and1111 << 7;
      var $or1113=23 | $shl1112;
      _genop($895, $or1113);
      label = 261; break;
    case 257: 
      var $901=$tree_addr;
      var $tobool1115=(($901)|(0))!=0;
      if ($tobool1115) { label = 258; break; } else { label = 259; break; }
    case 258: 
      var $902=$s_addr;
      var $903=$tree_addr;
      _codegen($902, $903, 1);
      var $904=$s_addr;
      var $sp1117=(($904+56)|0);
      var $905=HEAP32[(($sp1117)>>2)];
      var $dec1118=((($905)-(1))|0);
      HEAP32[(($sp1117)>>2)]=$dec1118;
      label = 260; break;
    case 259: 
      var $906=$s_addr;
      var $907=$s_addr;
      var $sp1120=(($907+56)|0);
      var $908=HEAP32[(($sp1120)>>2)];
      var $and1121=$908 & 511;
      var $shl1122=$and1121 << 23;
      var $or1123=5 | $shl1122;
      _genop($906, $or1123);
      label = 260; break;
    case 260: 
      var $909=$s_addr;
      var $910=$s_addr;
      var $sp1125=(($910+56)|0);
      var $911=HEAP32[(($sp1125)>>2)];
      var $and1126=$911 & 511;
      var $shl1127=$and1126 << 23;
      var $or1128=41 | $shl1127;
      _genop_peep($909, $or1128, 0);
      label = 261; break;
    case 261: 
      label = 262; break;
    case 262: 
      var $912=$val_addr;
      var $tobool1131=(($912)|(0))!=0;
      if ($tobool1131) { label = 263; break; } else { label = 264; break; }
    case 263: 
      var $913=$s_addr;
      _push_($913);
      label = 264; break;
    case 264: 
      label = 438; break;
    case 265: 
      var $914=$s_addr;
      var $loop1135=(($914+72)|0);
      var $915=HEAP32[(($loop1135)>>2)];
      var $tobool1136=(($915)|(0))!=0;
      if ($tobool1136) { label = 267; break; } else { label = 266; break; }
    case 266: 
      var $916=$s_addr;
      _raise_error($916, ((96204)|0));
      label = 270; break;
    case 267: 
      var $917=$s_addr;
      var $ensure_level1139=(($917+76)|0);
      var $918=HEAP32[(($ensure_level1139)>>2)];
      var $919=$s_addr;
      var $loop1140=(($919+72)|0);
      var $920=HEAP32[(($loop1140)>>2)];
      var $ensure_level1141=(($920+20)|0);
      var $921=HEAP32[(($ensure_level1141)>>2)];
      var $cmp1142=(($918)|(0)) > (($921)|(0));
      if ($cmp1142) { label = 268; break; } else { label = 269; break; }
    case 268: 
      var $922=$s_addr;
      var $923=$s_addr;
      var $ensure_level1145=(($923+76)|0);
      var $924=HEAP32[(($ensure_level1145)>>2)];
      var $925=$s_addr;
      var $loop1146=(($925+72)|0);
      var $926=HEAP32[(($loop1146)>>2)];
      var $ensure_level1147=(($926+20)|0);
      var $927=HEAP32[(($ensure_level1147)>>2)];
      var $sub1148=((($924)-($927))|0);
      var $and1149=$sub1148 & 511;
      var $shl1150=$and1149 << 23;
      var $or1151=31 | $shl1150;
      _genop_peep($922, $or1151, 0);
      label = 269; break;
    case 269: 
      var $928=$s_addr;
      var $929=$s_addr;
      var $loop1153=(($929+72)|0);
      var $930=HEAP32[(($loop1153)>>2)];
      var $pc21154=(($930+8)|0);
      var $931=HEAP32[(($pc21154)>>2)];
      var $932=$s_addr;
      var $pc1155=(($932+60)|0);
      var $933=HEAP32[(($pc1155)>>2)];
      var $sub1156=((($931)-($933))|0);
      var $add1157=((($sub1156)+(32767))|0);
      var $and1158=$add1157 & 65535;
      var $shl1159=$and1158 << 7;
      var $or1160=23 | $shl1159;
      _genop($928, $or1160);
      label = 270; break;
    case 270: 
      label = 438; break;
    case 271: 
      $msg=((95100)|0);
      var $934=$s_addr;
      var $loop1164=(($934+72)|0);
      var $935=HEAP32[(($loop1164)>>2)];
      var $tobool1165=(($935)|(0))!=0;
      if ($tobool1165) { label = 273; break; } else { label = 272; break; }
    case 272: 
      var $936=$s_addr;
      var $937=$msg;
      _raise_error($936, $937);
      label = 291; break;
    case 273: 
      var $938=$s_addr;
      var $loop1170=(($938+72)|0);
      var $939=HEAP32[(($loop1170)>>2)];
      $lp1169=$939;
      $n1172=0;
      label = 274; break;
    case 274: 
      var $940=$lp1169;
      var $tobool1174=(($940)|(0))!=0;
      if ($tobool1174) { label = 275; break; } else { var $943 = 0;label = 276; break; }
    case 275: 
      var $941=$lp1169;
      var $type1175=(($941)|0);
      var $942=HEAP32[(($type1175)>>2)];
      var $cmp1176=(($942)|(0))!=4;
      var $943 = $cmp1176;label = 276; break;
    case 276: 
      var $943;
      if ($943) { label = 277; break; } else { label = 280; break; }
    case 277: 
      var $944=$lp1169;
      var $type1179=(($944)|0);
      var $945=HEAP32[(($type1179)>>2)];
      var $cmp1180=(($945)|(0))==3;
      if ($cmp1180) { label = 278; break; } else { label = 279; break; }
    case 278: 
      var $946=$n1172;
      var $inc1183=((($946)+(1))|0);
      $n1172=$inc1183;
      label = 279; break;
    case 279: 
      var $947=$lp1169;
      var $prev1185=(($947+24)|0);
      var $948=HEAP32[(($prev1185)>>2)];
      $lp1169=$948;
      label = 274; break;
    case 280: 
      var $949=$lp1169;
      var $tobool1187=(($949)|(0))!=0;
      if ($tobool1187) { label = 282; break; } else { label = 281; break; }
    case 281: 
      var $950=$s_addr;
      var $951=$msg;
      _raise_error($950, $951);
      label = 290; break;
    case 282: 
      var $952=$n1172;
      var $cmp1190=(($952)|(0)) > 0;
      if ($cmp1190) { label = 283; break; } else { label = 287; break; }
    case 283: 
      label = 284; break;
    case 284: 
      var $953=$n1172;
      var $dec1194=((($953)-(1))|0);
      $n1172=$dec1194;
      var $tobool1195=(($953)|(0))!=0;
      if ($tobool1195) { label = 285; break; } else { label = 286; break; }
    case 285: 
      var $954=$s_addr;
      _genop_peep($954, 8388636, 0);
      label = 284; break;
    case 286: 
      label = 287; break;
    case 287: 
      var $955=$s_addr;
      var $ensure_level1199=(($955+76)|0);
      var $956=HEAP32[(($ensure_level1199)>>2)];
      var $957=$lp1169;
      var $ensure_level1200=(($957+20)|0);
      var $958=HEAP32[(($ensure_level1200)>>2)];
      var $cmp1201=(($956)|(0)) > (($958)|(0));
      if ($cmp1201) { label = 288; break; } else { label = 289; break; }
    case 288: 
      var $959=$s_addr;
      var $960=$s_addr;
      var $ensure_level1204=(($960+76)|0);
      var $961=HEAP32[(($ensure_level1204)>>2)];
      var $962=$lp1169;
      var $ensure_level1205=(($962+20)|0);
      var $963=HEAP32[(($ensure_level1205)>>2)];
      var $sub1206=((($961)-($963))|0);
      var $and1207=$sub1206 & 511;
      var $shl1208=$and1207 << 23;
      var $or1209=31 | $shl1208;
      _genop_peep($959, $or1209, 0);
      label = 289; break;
    case 289: 
      var $964=$s_addr;
      var $965=$lp1169;
      var $pc11211=(($965+4)|0);
      var $966=HEAP32[(($pc11211)>>2)];
      var $967=$s_addr;
      var $pc1212=(($967+60)|0);
      var $968=HEAP32[(($pc1212)>>2)];
      var $sub1213=((($966)-($968))|0);
      var $add1214=((($sub1213)+(32767))|0);
      var $and1215=$add1214 & 65535;
      var $shl1216=$and1215 << 7;
      var $or1217=23 | $shl1216;
      _genop($964, $or1217);
      label = 290; break;
    case 290: 
      label = 291; break;
    case 291: 
      label = 438; break;
    case 292: 
      var $969=$val_addr;
      var $tobool1221=(($969)|(0))!=0;
      if ($tobool1221) { label = 293; break; } else { label = 302; break; }
    case 293: 
      var $970=$s_addr;
      var $971=$tree_addr;
      var $972=$971;
      var $conv1225=(($972) & 65535);
      var $call1226=_lv_idx($970, $conv1225);
      $idx1224=$call1226;
      var $973=$idx1224;
      var $cmp1227=(($973)|(0)) > 0;
      if ($cmp1227) { label = 294; break; } else { label = 295; break; }
    case 294: 
      var $974=$s_addr;
      var $975=$s_addr;
      var $sp1230=(($975+56)|0);
      var $976=HEAP32[(($sp1230)>>2)];
      var $and1231=$976 & 511;
      var $shl1232=$and1231 << 23;
      var $or1233=1 | $shl1232;
      var $977=$idx1224;
      var $and1234=$977 & 511;
      var $shl1235=$and1234 << 14;
      var $or1236=$or1233 | $shl1235;
      _genop($974, $or1236);
      label = 301; break;
    case 295: 
      $lv1239=0;
      var $978=$s_addr;
      var $prev1241=(($978+48)|0);
      var $979=HEAP32[(($prev1241)>>2)];
      $up=$979;
      label = 296; break;
    case 296: 
      var $980=$up;
      var $tobool1243=(($980)|(0))!=0;
      if ($tobool1243) { label = 297; break; } else { label = 300; break; }
    case 297: 
      var $981=$up;
      var $982=$tree_addr;
      var $983=$982;
      var $conv1245=(($983) & 65535);
      var $call1246=_lv_idx($981, $conv1245);
      $idx1224=$call1246;
      var $984=$idx1224;
      var $cmp1247=(($984)|(0)) > 0;
      if ($cmp1247) { label = 298; break; } else { label = 299; break; }
    case 298: 
      var $985=$s_addr;
      var $986=$s_addr;
      var $sp1250=(($986+56)|0);
      var $987=HEAP32[(($sp1250)>>2)];
      var $and1251=$987 & 511;
      var $shl1252=$and1251 << 23;
      var $or1253=21 | $shl1252;
      var $988=$idx1224;
      var $and1254=$988 & 511;
      var $shl1255=$and1254 << 14;
      var $or1256=$or1253 | $shl1255;
      var $989=$lv1239;
      var $and1257=$989 & 127;
      var $shl1258=$and1257 << 7;
      var $or1259=$or1256 | $shl1258;
      _genop($985, $or1259);
      label = 300; break;
    case 299: 
      var $990=$lv1239;
      var $inc1261=((($990)+(1))|0);
      $lv1239=$inc1261;
      var $991=$up;
      var $prev1262=(($991+48)|0);
      var $992=HEAP32[(($prev1262)>>2)];
      $up=$992;
      label = 296; break;
    case 300: 
      label = 301; break;
    case 301: 
      var $993=$s_addr;
      _push_($993);
      label = 302; break;
    case 302: 
      label = 438; break;
    case 303: 
      var $994=$s_addr;
      var $995=$tree_addr;
      var $996=$995;
      var $conv1269=(($996) & 65535);
      var $call1270=_new_sym900($994, $conv1269);
      $sym1268=$call1270;
      var $997=$s_addr;
      var $998=$s_addr;
      var $sp1271=(($998+56)|0);
      var $999=HEAP32[(($sp1271)>>2)];
      var $and1272=$999 & 511;
      var $shl1273=$and1272 << 23;
      var $or1274=9 | $shl1273;
      var $1000=$sym1268;
      var $and1275=$1000 & 65535;
      var $shl1276=$and1275 << 7;
      var $or1277=$or1274 | $shl1276;
      _genop($997, $or1277);
      var $1001=$s_addr;
      _push_($1001);
      label = 438; break;
    case 304: 
      var $1002=$s_addr;
      var $1003=$tree_addr;
      var $1004=$1003;
      var $conv1281=(($1004) & 65535);
      var $call1282=_new_sym900($1002, $conv1281);
      $sym1280=$call1282;
      var $1005=$s_addr;
      var $1006=$s_addr;
      var $sp1283=(($1006+56)|0);
      var $1007=HEAP32[(($sp1283)>>2)];
      var $and1284=$1007 & 511;
      var $shl1285=$and1284 << 23;
      var $or1286=13 | $shl1285;
      var $1008=$sym1280;
      var $and1287=$1008 & 65535;
      var $shl1288=$and1287 << 7;
      var $or1289=$or1286 | $shl1288;
      _genop($1005, $or1289);
      var $1009=$s_addr;
      _push_($1009);
      label = 438; break;
    case 305: 
      var $1010=$s_addr;
      var $1011=$tree_addr;
      var $1012=$1011;
      var $conv1293=(($1012) & 65535);
      var $call1294=_new_sym900($1010, $conv1293);
      $sym1292=$call1294;
      var $1013=$s_addr;
      var $1014=$s_addr;
      var $sp1295=(($1014+56)|0);
      var $1015=HEAP32[(($sp1295)>>2)];
      var $and1296=$1015 & 511;
      var $shl1297=$and1296 << 23;
      var $or1298=15 | $shl1297;
      var $1016=$sym1292;
      var $and1299=$1016 & 65535;
      var $shl1300=$and1299 << 7;
      var $or1301=$or1298 | $shl1300;
      _genop($1013, $or1301);
      var $1017=$s_addr;
      _push_($1017);
      label = 438; break;
    case 306: 
      var $1018=$s_addr;
      var $1019=$tree_addr;
      var $1020=$1019;
      var $conv1305=(($1020) & 65535);
      var $call1306=_new_sym900($1018, $conv1305);
      $sym1304=$call1306;
      var $1021=$s_addr;
      var $1022=$s_addr;
      var $sp1307=(($1022+56)|0);
      var $1023=HEAP32[(($sp1307)>>2)];
      var $and1308=$1023 & 511;
      var $shl1309=$and1308 << 23;
      var $or1310=17 | $shl1309;
      var $1024=$sym1304;
      var $and1311=$1024 & 65535;
      var $shl1312=$and1311 << 7;
      var $or1313=$or1310 | $shl1312;
      _genop($1021, $or1313);
      var $1025=$s_addr;
      _push_($1025);
      label = 438; break;
    case 307: 
      var $1026=$s_addr;
      var $1027=$tree_addr;
      _codegen($1026, $1027, 1);
      label = 438; break;
    case 308: 
      var $1028=$buf;
      assert(2 % 1 === 0);HEAP8[($1028)]=HEAP8[((((92968)|0))|0)];HEAP8[((($1028)+(1))|0)]=HEAP8[(((((92968)|0))+(1))|0)];
      var $1029=$tree_addr;
      var $1030=$1029;
      var $conv1320=(($1030) & 255);
      var $arrayidx1321=(($buf+1)|0);
      HEAP8[($arrayidx1321)]=$conv1320;
      var $1031=$s_addr;
      var $mrb1322=(($1031)|0);
      var $1032=HEAP32[(($mrb1322)>>2)];
      var $arraydecay=(($buf)|0);
      _mrb_str_new($tmp1323, $1032, $arraydecay, 2);
      var $1033=$str;
      var $1034=$tmp1323;
      assert(12 % 1 === 0);HEAP32[(($1033)>>2)]=HEAP32[(($1034)>>2)];HEAP32[((($1033)+(4))>>2)]=HEAP32[((($1034)+(4))>>2)];HEAP32[((($1033)+(8))>>2)]=HEAP32[((($1034)+(8))>>2)];
      var $1035=$s_addr;
      var $1036=$s_addr;
      var $mrb1324=(($1036)|0);
      var $1037=HEAP32[(($mrb1324)>>2)];
      var $call1325=_mrb_intern_str($1037, $str);
      var $call1326=_new_sym900($1035, $call1325);
      $sym1319=$call1326;
      var $1038=$s_addr;
      var $1039=$s_addr;
      var $sp1327=(($1039+56)|0);
      var $1040=HEAP32[(($sp1327)>>2)];
      var $and1328=$1040 & 511;
      var $shl1329=$and1328 << 23;
      var $or1330=9 | $shl1329;
      var $1041=$sym1319;
      var $and1331=$1041 & 65535;
      var $shl1332=$and1331 << 7;
      var $or1333=$or1330 | $shl1332;
      _genop($1038, $or1333);
      var $1042=$s_addr;
      _push_($1042);
      label = 438; break;
    case 309: 
      var $1043=$s_addr;
      var $mrb1339=(($1043)|0);
      var $1044=HEAP32[(($mrb1339)>>2)];
      $mrb1338=$1044;
      var $1045=$tree_addr;
      var $1046=$1045;
      _mrb_fixnum_value901($fix, $1046);
      var $1047=$mrb1338;
      _mrb_str_buf_new($str1342, $1047, 4);
      var $1048=$mrb1338;
      _mrb_str_buf_cat($tmp1343, $1048, $str1342, ((94264)|0), 1);
      var $1049=$mrb1338;
      var $1050=$mrb1338;
      _mrb_fixnum_to_str($agg_tmp, $1050, $fix, 10);
      _mrb_str_buf_append($tmp1344, $1049, $str1342, $agg_tmp);
      var $1051=$s_addr;
      var $1052=$mrb1338;
      var $call1345=_mrb_intern_str($1052, $str1342);
      var $call1346=_new_sym900($1051, $call1345);
      $sym1336=$call1346;
      var $1053=$s_addr;
      var $1054=$s_addr;
      var $sp1347=(($1054+56)|0);
      var $1055=HEAP32[(($sp1347)>>2)];
      var $and1348=$1055 & 511;
      var $shl1349=$and1348 << 23;
      var $or1350=9 | $shl1349;
      var $1056=$sym1336;
      var $and1351=$1056 & 65535;
      var $shl1352=$and1351 << 7;
      var $or1353=$or1350 | $shl1352;
      _genop($1053, $or1353);
      var $1057=$s_addr;
      _push_($1057);
      label = 438; break;
    case 310: 
      label = 438; break;
    case 311: 
      var $1058=$s_addr;
      var $1059=$tree_addr;
      _codegen($1058, $1059, 1);
      label = 438; break;
    case 312: 
      var $1060=$val_addr;
      var $tobool1357=(($1060)|(0))!=0;
      if ($tobool1357) { label = 313; break; } else { label = 321; break; }
    case 313: 
      var $1061=$tree_addr;
      var $car1361=(($1061)|0);
      var $1062=HEAP32[(($car1361)>>2)];
      var $1063=$1062;
      $p1360=$1063;
      var $1064=$tree_addr;
      var $cdr1363=(($1064+4)|0);
      var $1065=HEAP32[(($cdr1363)>>2)];
      var $car1364=(($1065)|0);
      var $1066=HEAP32[(($car1364)>>2)];
      var $1067=$1066;
      $base=$1067;
      var $1068=$s_addr;
      var $1069=$p1360;
      var $1070=$base;
      var $call1368=_readint_mrb_int($1068, $1069, $1070, 0, $overflow);
      $i=$call1368;
      var $1071=HEAP32[(($overflow)>>2)];
      var $tobool1369=(($1071)|(0))!=0;
      if ($tobool1369) { label = 314; break; } else { label = 315; break; }
    case 314: 
      var $1072=$s_addr;
      var $1073=$p1360;
      var $1074=$base;
      var $call1372=_readint_float($1072, $1073, $1074);
      $f=$call1372;
      var $1075=$s_addr;
      var $1076=$f;
      _mrb_float_value902($agg_tmp1374, $1076);
      var $call1375=_new_lit($1075, $agg_tmp1374);
      $off=$call1375;
      var $1077=$s_addr;
      var $1078=$s_addr;
      var $sp1376=(($1078+56)|0);
      var $1079=HEAP32[(($sp1376)>>2)];
      var $and1377=$1079 & 511;
      var $shl1378=$and1377 << 23;
      var $or1379=2 | $shl1378;
      var $1080=$off;
      var $and1380=$1080 & 65535;
      var $shl1381=$and1380 << 7;
      var $or1382=$or1379 | $shl1381;
      _genop($1077, $or1382);
      label = 320; break;
    case 315: 
      var $1081=$i;
      var $cmp1384=(($1081)|(0)) < 32767;
      if ($cmp1384) { label = 316; break; } else { label = 318; break; }
    case 316: 
      var $1082=$i;
      var $cmp1387=(($1082)|(0)) > -32767;
      if ($cmp1387) { label = 317; break; } else { label = 318; break; }
    case 317: 
      var $1083=$s_addr;
      var $sp1390=(($1083+56)|0);
      var $1084=HEAP32[(($sp1390)>>2)];
      var $and1391=$1084 & 511;
      var $shl1392=$and1391 << 23;
      var $or1393=3 | $shl1392;
      var $1085=$i;
      var $add1394=((($1085)+(32767))|0);
      var $and1395=$add1394 & 65535;
      var $shl1396=$and1395 << 7;
      var $or1397=$or1393 | $shl1396;
      $co=$or1397;
      label = 319; break;
    case 318: 
      var $1086=$s_addr;
      var $1087=$i;
      _mrb_fixnum_value901($agg_tmp1401, $1087);
      var $call1402=_new_lit($1086, $agg_tmp1401);
      $off1400=$call1402;
      var $1088=$s_addr;
      var $sp1403=(($1088+56)|0);
      var $1089=HEAP32[(($sp1403)>>2)];
      var $and1404=$1089 & 511;
      var $shl1405=$and1404 << 23;
      var $or1406=2 | $shl1405;
      var $1090=$off1400;
      var $and1407=$1090 & 65535;
      var $shl1408=$and1407 << 7;
      var $or1409=$or1406 | $shl1408;
      $co=$or1409;
      label = 319; break;
    case 319: 
      var $1091=$s_addr;
      var $1092=$co;
      _genop($1091, $1092);
      label = 320; break;
    case 320: 
      var $1093=$s_addr;
      _push_($1093);
      label = 321; break;
    case 321: 
      label = 438; break;
    case 322: 
      var $1094=$val_addr;
      var $tobool1414=(($1094)|(0))!=0;
      if ($tobool1414) { label = 323; break; } else { label = 324; break; }
    case 323: 
      var $1095=$tree_addr;
      var $1096=$1095;
      $p1417=$1096;
      var $1097=$p1417;
      var $call1420=_strtod($1097, 0);
      $f1419=$call1420;
      var $1098=$s_addr;
      var $1099=$f1419;
      _mrb_float_value902($agg_tmp1423, $1099);
      var $call1424=_new_lit($1098, $agg_tmp1423);
      $off1422=$call1424;
      var $1100=$s_addr;
      var $1101=$s_addr;
      var $sp1425=(($1101+56)|0);
      var $1102=HEAP32[(($sp1425)>>2)];
      var $and1426=$1102 & 511;
      var $shl1427=$and1426 << 23;
      var $or1428=2 | $shl1427;
      var $1103=$off1422;
      var $and1429=$1103 & 65535;
      var $shl1430=$and1429 << 7;
      var $or1431=$or1428 | $shl1430;
      _genop($1100, $or1431);
      var $1104=$s_addr;
      _push_($1104);
      label = 324; break;
    case 324: 
      label = 438; break;
    case 325: 
      var $1105=$tree_addr;
      var $car1434=(($1105)|0);
      var $1106=HEAP32[(($car1434)>>2)];
      var $1107=$1106;
      $nt=$1107;
      var $1108=$tree_addr;
      var $cdr1435=(($1108+4)|0);
      var $1109=HEAP32[(($cdr1435)>>2)];
      $tree_addr=$1109;
      var $1110=$nt;
      if ((($1110)|(0))==51) {
        label = 326; break;
      }
      else if ((($1110)|(0))==50) {
        label = 327; break;
      }
      else {
      label = 335; break;
      }
    case 326: 
      var $1111=$tree_addr;
      var $1112=$1111;
      $p1438=$1112;
      var $1113=$p1438;
      var $call1441=_strtod($1113, 0);
      $f1440=$call1441;
      var $1114=$s_addr;
      var $1115=$f1440;
      var $sub1445=(-$1115);
      _mrb_float_value902($agg_tmp1444, $sub1445);
      var $call1446=_new_lit($1114, $agg_tmp1444);
      $off1443=$call1446;
      var $1116=$s_addr;
      var $1117=$s_addr;
      var $sp1447=(($1117+56)|0);
      var $1118=HEAP32[(($sp1447)>>2)];
      var $and1448=$1118 & 511;
      var $shl1449=$and1448 << 23;
      var $or1450=2 | $shl1449;
      var $1119=$off1443;
      var $and1451=$1119 & 65535;
      var $shl1452=$and1451 << 7;
      var $or1453=$or1450 | $shl1452;
      _genop($1116, $or1453);
      var $1120=$s_addr;
      _push_($1120);
      label = 336; break;
    case 327: 
      var $1121=$tree_addr;
      var $car1457=(($1121)|0);
      var $1122=HEAP32[(($car1457)>>2)];
      var $1123=$1122;
      $p1456=$1123;
      var $1124=$tree_addr;
      var $cdr1460=(($1124+4)|0);
      var $1125=HEAP32[(($cdr1460)>>2)];
      var $car1461=(($1125)|0);
      var $1126=HEAP32[(($car1461)>>2)];
      var $1127=$1126;
      $base1459=$1127;
      var $1128=$s_addr;
      var $1129=$p1456;
      var $1130=$base1459;
      var $call1468=_readint_mrb_int($1128, $1129, $1130, 1, $overflow1467);
      $i1463=$call1468;
      var $1131=HEAP32[(($overflow1467)>>2)];
      var $tobool1469=(($1131)|(0))!=0;
      if ($tobool1469) { label = 328; break; } else { label = 329; break; }
    case 328: 
      var $1132=$s_addr;
      var $1133=$p1456;
      var $1134=$base1459;
      var $call1473=_readint_float($1132, $1133, $1134);
      $f1472=$call1473;
      var $1135=$s_addr;
      var $1136=$f1472;
      var $sub1477=(-$1136);
      _mrb_float_value902($agg_tmp1476, $sub1477);
      var $call1478=_new_lit($1135, $agg_tmp1476);
      $off1475=$call1478;
      var $1137=$s_addr;
      var $1138=$s_addr;
      var $sp1479=(($1138+56)|0);
      var $1139=HEAP32[(($sp1479)>>2)];
      var $and1480=$1139 & 511;
      var $shl1481=$and1480 << 23;
      var $or1482=2 | $shl1481;
      var $1140=$off1475;
      var $and1483=$1140 & 65535;
      var $shl1484=$and1483 << 7;
      var $or1485=$or1482 | $shl1484;
      _genop($1137, $or1485);
      label = 334; break;
    case 329: 
      var $1141=$i1463;
      var $cmp1487=(($1141)|(0)) < 32767;
      if ($cmp1487) { label = 330; break; } else { label = 332; break; }
    case 330: 
      var $1142=$i1463;
      var $cmp1490=(($1142)|(0)) > -32767;
      if ($cmp1490) { label = 331; break; } else { label = 332; break; }
    case 331: 
      var $1143=$s_addr;
      var $sp1493=(($1143+56)|0);
      var $1144=HEAP32[(($sp1493)>>2)];
      var $and1494=$1144 & 511;
      var $shl1495=$and1494 << 23;
      var $or1496=3 | $shl1495;
      var $1145=$i1463;
      var $add1497=((($1145)+(32767))|0);
      var $and1498=$add1497 & 65535;
      var $shl1499=$and1498 << 7;
      var $or1500=$or1496 | $shl1499;
      $co1465=$or1500;
      label = 333; break;
    case 332: 
      var $1146=$s_addr;
      var $1147=$i1463;
      _mrb_fixnum_value901($agg_tmp1504, $1147);
      var $call1505=_new_lit($1146, $agg_tmp1504);
      $off1503=$call1505;
      var $1148=$s_addr;
      var $sp1506=(($1148+56)|0);
      var $1149=HEAP32[(($sp1506)>>2)];
      var $and1507=$1149 & 511;
      var $shl1508=$and1507 << 23;
      var $or1509=2 | $shl1508;
      var $1150=$off1503;
      var $and1510=$1150 & 65535;
      var $shl1511=$and1510 << 7;
      var $or1512=$or1509 | $shl1511;
      $co1465=$or1512;
      label = 333; break;
    case 333: 
      var $1151=$s_addr;
      var $1152=$co1465;
      _genop($1151, $1152);
      label = 334; break;
    case 334: 
      var $1153=$s_addr;
      _push_($1153);
      label = 336; break;
    case 335: 
      var $1154=$s_addr;
      var $1155=$s_addr;
      var $mrb1517=(($1155)|0);
      var $1156=HEAP32[(($mrb1517)>>2)];
      var $call1518=_mrb_intern2($1156, ((93364)|0), 1);
      var $call1519=_new_msym($1154, $call1518);
      $sym1516=$call1519;
      var $1157=$s_addr;
      var $1158=$s_addr;
      var $sp1520=(($1158+56)|0);
      var $1159=HEAP32[(($sp1520)>>2)];
      var $and1521=$1159 & 511;
      var $shl1522=$and1521 << 23;
      var $or1523=3 | $shl1522;
      _genop($1157, $or1523);
      var $1160=$s_addr;
      _push_($1160);
      var $1161=$s_addr;
      var $1162=$tree_addr;
      _codegen($1161, $1162, 1);
      var $1163=$s_addr;
      var $sp1524=(($1163+56)|0);
      var $1164=HEAP32[(($sp1524)>>2)];
      var $dec1525=((($1164)-(1))|0);
      HEAP32[(($sp1524)>>2)]=$dec1525;
      var $1165=$s_addr;
      var $sp1526=(($1165+56)|0);
      var $1166=HEAP32[(($sp1526)>>2)];
      var $dec1527=((($1166)-(1))|0);
      HEAP32[(($sp1526)>>2)]=$dec1527;
      var $1167=$s_addr;
      var $1168=$s_addr;
      var $sp1528=(($1168+56)|0);
      var $1169=HEAP32[(($sp1528)>>2)];
      var $and1529=$1169 & 511;
      var $shl1530=$and1529 << 23;
      var $or1531=46 | $shl1530;
      var $1170=$sym1516;
      var $and1532=$1170 & 511;
      var $shl1533=$and1532 << 14;
      var $or1534=$or1531 | $shl1533;
      var $or1535=$or1534 | 256;
      _genop($1167, $or1535);
      label = 336; break;
    case 336: 
      label = 438; break;
    case 337: 
      var $1171=$val_addr;
      var $tobool1537=(($1171)|(0))!=0;
      if ($tobool1537) { label = 338; break; } else { label = 339; break; }
    case 338: 
      var $1172=$tree_addr;
      var $car1541=(($1172)|0);
      var $1173=HEAP32[(($car1541)>>2)];
      var $1174=$1173;
      $p1540=$1174;
      var $1175=$tree_addr;
      var $cdr1544=(($1175+4)|0);
      var $1176=HEAP32[(($cdr1544)>>2)];
      var $1177=$1176;
      $len1543=$1177;
      var $1178=$s_addr;
      var $mrb1546=(($1178)|0);
      var $1179=HEAP32[(($mrb1546)>>2)];
      var $call1547=_mrb_gc_arena_save($1179);
      $ai=$call1547;
      var $1180=$s_addr;
      var $1181=$s_addr;
      var $mrb1551=(($1181)|0);
      var $1182=HEAP32[(($mrb1551)>>2)];
      var $1183=$p1540;
      var $1184=$len1543;
      _mrb_str_new($agg_tmp1550, $1182, $1183, $1184);
      var $call1552=_new_lit($1180, $agg_tmp1550);
      $off1549=$call1552;
      var $1185=$s_addr;
      var $mrb1553=(($1185)|0);
      var $1186=HEAP32[(($mrb1553)>>2)];
      var $1187=$ai;
      _mrb_gc_arena_restore($1186, $1187);
      var $1188=$s_addr;
      var $1189=$s_addr;
      var $sp1554=(($1189+56)|0);
      var $1190=HEAP32[(($sp1554)>>2)];
      var $and1555=$1190 & 511;
      var $shl1556=$and1555 << 23;
      var $or1557=61 | $shl1556;
      var $1191=$off1549;
      var $and1558=$1191 & 65535;
      var $shl1559=$and1558 << 7;
      var $or1560=$or1557 | $shl1559;
      _genop($1188, $or1560);
      var $1192=$s_addr;
      _push_($1192);
      label = 339; break;
    case 339: 
      label = 438; break;
    case 340: 
      var $1193=$tree_addr;
      var $1194=$1193;
      var $doc=(($1194+16)|0);
      var $1195=HEAP32[(($doc)>>2)];
      $tree_addr=$1195;
      label = 341; break;
    case 341: 
      var $1196=$val_addr;
      var $tobool1564=(($1196)|(0))!=0;
      if ($tobool1564) { label = 342; break; } else { label = 346; break; }
    case 342: 
      var $1197=$tree_addr;
      $n1567=$1197;
      var $1198=$s_addr;
      var $1199=$n1567;
      var $car1568=(($1199)|0);
      var $1200=HEAP32[(($car1568)>>2)];
      _codegen($1198, $1200, 1);
      var $1201=$n1567;
      var $cdr1569=(($1201+4)|0);
      var $1202=HEAP32[(($cdr1569)>>2)];
      $n1567=$1202;
      label = 343; break;
    case 343: 
      var $1203=$n1567;
      var $tobool1571=(($1203)|(0))!=0;
      if ($tobool1571) { label = 344; break; } else { label = 345; break; }
    case 344: 
      var $1204=$s_addr;
      var $1205=$n1567;
      var $car1573=(($1205)|0);
      var $1206=HEAP32[(($car1573)>>2)];
      _codegen($1204, $1206, 1);
      var $1207=$s_addr;
      var $sp1574=(($1207+56)|0);
      var $1208=HEAP32[(($sp1574)>>2)];
      var $dec1575=((($1208)-(1))|0);
      HEAP32[(($sp1574)>>2)]=$dec1575;
      var $1209=$s_addr;
      var $sp1576=(($1209+56)|0);
      var $1210=HEAP32[(($sp1576)>>2)];
      var $dec1577=((($1210)-(1))|0);
      HEAP32[(($sp1576)>>2)]=$dec1577;
      var $1211=$s_addr;
      var $1212=$s_addr;
      var $sp1578=(($1212+56)|0);
      var $1213=HEAP32[(($sp1578)>>2)];
      var $and1579=$1213 & 511;
      var $shl1580=$and1579 << 23;
      var $or1581=62 | $shl1580;
      var $1214=$s_addr;
      var $sp1582=(($1214+56)|0);
      var $1215=HEAP32[(($sp1582)>>2)];
      var $add1583=((($1215)+(1))|0);
      var $and1584=$add1583 & 511;
      var $shl1585=$and1584 << 14;
      var $or1586=$or1581 | $shl1585;
      _genop_peep($1211, $or1586, 1);
      var $1216=$s_addr;
      _push_($1216);
      var $1217=$n1567;
      var $cdr1587=(($1217+4)|0);
      var $1218=HEAP32[(($cdr1587)>>2)];
      $n1567=$1218;
      label = 343; break;
    case 345: 
      label = 352; break;
    case 346: 
      var $1219=$tree_addr;
      $n1591=$1219;
      label = 347; break;
    case 347: 
      var $1220=$n1591;
      var $tobool1593=(($1220)|(0))!=0;
      if ($tobool1593) { label = 348; break; } else { label = 351; break; }
    case 348: 
      var $1221=$n1591;
      var $car1595=(($1221)|0);
      var $1222=HEAP32[(($car1595)>>2)];
      var $car1596=(($1222)|0);
      var $1223=HEAP32[(($car1596)>>2)];
      var $1224=$1223;
      var $cmp1597=(($1224)|(0))!=55;
      if ($cmp1597) { label = 349; break; } else { label = 350; break; }
    case 349: 
      var $1225=$s_addr;
      var $1226=$n1591;
      var $car1600=(($1226)|0);
      var $1227=HEAP32[(($car1600)>>2)];
      _codegen($1225, $1227, 0);
      label = 350; break;
    case 350: 
      var $1228=$n1591;
      var $cdr1602=(($1228+4)|0);
      var $1229=HEAP32[(($cdr1602)>>2)];
      $n1591=$1229;
      label = 347; break;
    case 351: 
      label = 352; break;
    case 352: 
      label = 438; break;
    case 353: 
      var $1230=$s_addr;
      var $1231=$tree_addr;
      var $1232=$val_addr;
      _gen_literal_array($1230, $1231, 0, $1232);
      label = 438; break;
    case 354: 
      var $1233=$s_addr;
      var $1234=$tree_addr;
      var $1235=$val_addr;
      _gen_literal_array($1233, $1234, 1, $1235);
      label = 438; break;
    case 355: 
      var $1236=$val_addr;
      var $tobool1608=(($1236)|(0))!=0;
      if ($tobool1608) { label = 356; break; } else { label = 357; break; }
    case 356: 
      var $1237=$tree_addr;
      var $car1612=(($1237)|0);
      var $1238=HEAP32[(($car1612)>>2)];
      var $1239=$1238;
      $p1611=$1239;
      var $1240=$tree_addr;
      var $cdr1615=(($1240+4)|0);
      var $1241=HEAP32[(($cdr1615)>>2)];
      var $1242=$1241;
      $len1614=$1242;
      var $1243=$s_addr;
      var $mrb1618=(($1243)|0);
      var $1244=HEAP32[(($mrb1618)>>2)];
      var $call1619=_mrb_gc_arena_save($1244);
      $ai1617=$call1619;
      var $1245=$s_addr;
      var $1246=$s_addr;
      var $mrb1622=(($1246)|0);
      var $1247=HEAP32[(($mrb1622)>>2)];
      var $call1623=_mrb_intern2($1247, ((113360)|0), 6);
      var $call1624=_new_sym900($1245, $call1623);
      $sym1621=$call1624;
      var $1248=$s_addr;
      var $1249=$s_addr;
      var $mrb1628=(($1249)|0);
      var $1250=HEAP32[(($mrb1628)>>2)];
      var $1251=$p1611;
      var $1252=$len1614;
      _mrb_str_new($agg_tmp1627, $1250, $1251, $1252);
      var $call1629=_new_lit($1248, $agg_tmp1627);
      $off1626=$call1629;
      var $1253=$s_addr;
      var $1254=$s_addr;
      var $sp1630=(($1254+56)|0);
      var $1255=HEAP32[(($sp1630)>>2)];
      var $and1631=$1255 & 511;
      var $shl1632=$and1631 << 23;
      var $or1633=66 | $shl1632;
      _genop($1253, $or1633);
      var $1256=$s_addr;
      var $1257=$s_addr;
      var $sp1634=(($1257+56)|0);
      var $1258=HEAP32[(($sp1634)>>2)];
      var $and1635=$1258 & 511;
      var $shl1636=$and1635 << 23;
      var $or1637=19 | $shl1636;
      var $1259=$sym1621;
      var $and1638=$1259 & 65535;
      var $shl1639=$and1638 << 7;
      var $or1640=$or1637 | $shl1639;
      _genop($1256, $or1640);
      var $1260=$s_addr;
      _push_($1260);
      var $1261=$s_addr;
      var $1262=$s_addr;
      var $sp1641=(($1262+56)|0);
      var $1263=HEAP32[(($sp1641)>>2)];
      var $and1642=$1263 & 511;
      var $shl1643=$and1642 << 23;
      var $or1644=61 | $shl1643;
      var $1264=$off1626;
      var $and1645=$1264 & 65535;
      var $shl1646=$and1645 << 7;
      var $or1647=$or1644 | $shl1646;
      _genop($1261, $or1647);
      var $1265=$s_addr;
      var $sp1648=(($1265+56)|0);
      var $1266=HEAP32[(($sp1648)>>2)];
      var $dec1649=((($1266)-(1))|0);
      HEAP32[(($sp1648)>>2)]=$dec1649;
      var $1267=$s_addr;
      var $1268=$s_addr;
      var $mrb1650=(($1268)|0);
      var $1269=HEAP32[(($mrb1650)>>2)];
      var $call1651=_mrb_intern2($1269, ((112564)|0), 1);
      var $call1652=_new_sym900($1267, $call1651);
      $sym1621=$call1652;
      var $1270=$s_addr;
      var $1271=$s_addr;
      var $sp1653=(($1271+56)|0);
      var $1272=HEAP32[(($sp1653)>>2)];
      var $and1654=$1272 & 511;
      var $shl1655=$and1654 << 23;
      var $or1656=32 | $shl1655;
      var $1273=$sym1621;
      var $and1657=$1273 & 511;
      var $shl1658=$and1657 << 14;
      var $or1659=$or1656 | $shl1658;
      var $or1660=$or1659 | 128;
      _genop($1270, $or1660);
      var $1274=$s_addr;
      var $mrb1661=(($1274)|0);
      var $1275=HEAP32[(($mrb1661)>>2)];
      var $1276=$ai1617;
      _mrb_gc_arena_restore($1275, $1276);
      var $1277=$s_addr;
      _push_($1277);
      label = 357; break;
    case 357: 
      label = 438; break;
    case 358: 
      var $1278=$val_addr;
      var $tobool1664=(($1278)|(0))!=0;
      if ($tobool1664) { label = 359; break; } else { label = 362; break; }
    case 359: 
      var $1279=$tree_addr;
      var $car1667=(($1279)|0);
      var $1280=HEAP32[(($car1667)>>2)];
      var $1281=$1280;
      $p1=$1281;
      var $1282=$tree_addr;
      var $cdr1669=(($1282+4)|0);
      var $1283=HEAP32[(($cdr1669)>>2)];
      var $1284=$1283;
      $p2=$1284;
      var $1285=$s_addr;
      var $mrb1672=(($1285)|0);
      var $1286=HEAP32[(($mrb1672)>>2)];
      var $call1673=_mrb_gc_arena_save($1286);
      $ai1671=$call1673;
      var $1287=$s_addr;
      var $1288=$s_addr;
      var $mrb1676=(($1288)|0);
      var $1289=HEAP32[(($mrb1676)>>2)];
      var $call1677=_mrb_intern903($1289, ((111912)|0));
      var $call1678=_new_sym900($1287, $call1677);
      $sym1675=$call1678;
      var $1290=$s_addr;
      var $1291=$s_addr;
      var $mrb1682=(($1291)|0);
      var $1292=HEAP32[(($mrb1682)>>2)];
      var $1293=$p1;
      var $1294=$p1;
      var $call1683=_strlen($1294);
      _mrb_str_new($agg_tmp1681, $1292, $1293, $call1683);
      var $call1684=_new_lit($1290, $agg_tmp1681);
      $off1680=$call1684;
      $argc=1;
      var $1295=$s_addr;
      var $1296=$s_addr;
      var $sp1686=(($1296+56)|0);
      var $1297=HEAP32[(($sp1686)>>2)];
      var $and1687=$1297 & 511;
      var $shl1688=$and1687 << 23;
      var $or1689=66 | $shl1688;
      _genop($1295, $or1689);
      var $1298=$s_addr;
      var $1299=$s_addr;
      var $sp1690=(($1299+56)|0);
      var $1300=HEAP32[(($sp1690)>>2)];
      var $and1691=$1300 & 511;
      var $shl1692=$and1691 << 23;
      var $or1693=19 | $shl1692;
      var $1301=$sym1675;
      var $and1694=$1301 & 65535;
      var $shl1695=$and1694 << 7;
      var $or1696=$or1693 | $shl1695;
      _genop($1298, $or1696);
      var $1302=$s_addr;
      _push_($1302);
      var $1303=$s_addr;
      var $1304=$s_addr;
      var $sp1697=(($1304+56)|0);
      var $1305=HEAP32[(($sp1697)>>2)];
      var $and1698=$1305 & 511;
      var $shl1699=$and1698 << 23;
      var $or1700=61 | $shl1699;
      var $1306=$off1680;
      var $and1701=$1306 & 65535;
      var $shl1702=$and1701 << 7;
      var $or1703=$or1700 | $shl1702;
      _genop($1303, $or1703);
      var $1307=$p2;
      var $tobool1704=(($1307)|(0))!=0;
      if ($tobool1704) { label = 360; break; } else { label = 361; break; }
    case 360: 
      var $1308=$s_addr;
      _push_($1308);
      var $1309=$s_addr;
      var $1310=$s_addr;
      var $mrb1707=(($1310)|0);
      var $1311=HEAP32[(($mrb1707)>>2)];
      var $1312=$p2;
      var $1313=$p2;
      var $call1708=_strlen($1313);
      _mrb_str_new($agg_tmp1706, $1311, $1312, $call1708);
      var $call1709=_new_lit($1309, $agg_tmp1706);
      $off1680=$call1709;
      var $1314=$s_addr;
      var $1315=$s_addr;
      var $sp1710=(($1315+56)|0);
      var $1316=HEAP32[(($sp1710)>>2)];
      var $and1711=$1316 & 511;
      var $shl1712=$and1711 << 23;
      var $or1713=61 | $shl1712;
      var $1317=$off1680;
      var $and1714=$1317 & 65535;
      var $shl1715=$and1714 << 7;
      var $or1716=$or1713 | $shl1715;
      _genop($1314, $or1716);
      var $1318=$argc;
      var $inc1717=((($1318)+(1))|0);
      $argc=$inc1717;
      var $1319=$s_addr;
      var $sp1718=(($1319+56)|0);
      var $1320=HEAP32[(($sp1718)>>2)];
      var $dec1719=((($1320)-(1))|0);
      HEAP32[(($sp1718)>>2)]=$dec1719;
      label = 361; break;
    case 361: 
      var $1321=$s_addr;
      var $sp1721=(($1321+56)|0);
      var $1322=HEAP32[(($sp1721)>>2)];
      var $dec1722=((($1322)-(1))|0);
      HEAP32[(($sp1721)>>2)]=$dec1722;
      var $1323=$s_addr;
      var $1324=$s_addr;
      var $mrb1723=(($1324)|0);
      var $1325=HEAP32[(($mrb1723)>>2)];
      var $call1724=_mrb_intern2($1325, ((111324)|0), 7);
      var $call1725=_new_sym900($1323, $call1724);
      $sym1675=$call1725;
      var $1326=$s_addr;
      var $1327=$s_addr;
      var $sp1726=(($1327+56)|0);
      var $1328=HEAP32[(($sp1726)>>2)];
      var $and1727=$1328 & 511;
      var $shl1728=$and1727 << 23;
      var $or1729=32 | $shl1728;
      var $1329=$sym1675;
      var $and1730=$1329 & 511;
      var $shl1731=$and1730 << 14;
      var $or1732=$or1729 | $shl1731;
      var $1330=$argc;
      var $and1733=$1330 & 127;
      var $shl1734=$and1733 << 7;
      var $or1735=$or1732 | $shl1734;
      _genop($1326, $or1735);
      var $1331=$s_addr;
      var $mrb1736=(($1331)|0);
      var $1332=HEAP32[(($mrb1736)>>2)];
      var $1333=$ai1671;
      _mrb_gc_arena_restore($1332, $1333);
      var $1334=$s_addr;
      _push_($1334);
      label = 362; break;
    case 362: 
      label = 438; break;
    case 363: 
      var $1335=$val_addr;
      var $tobool1739=(($1335)|(0))!=0;
      if ($tobool1739) { label = 364; break; } else { label = 372; break; }
    case 364: 
      var $1336=$tree_addr;
      var $car1743=(($1336)|0);
      var $1337=HEAP32[(($car1743)>>2)];
      $n1742=$1337;
      var $1338=$s_addr;
      var $mrb1746=(($1338)|0);
      var $1339=HEAP32[(($mrb1746)>>2)];
      var $call1747=_mrb_gc_arena_save($1339);
      $ai1745=$call1747;
      var $1340=$s_addr;
      var $1341=$s_addr;
      var $mrb1750=(($1341)|0);
      var $1342=HEAP32[(($mrb1750)>>2)];
      var $call1751=_mrb_intern903($1342, ((111912)|0));
      var $call1752=_new_sym900($1340, $call1751);
      $sym1749=$call1752;
      $argc1754=1;
      var $1343=$s_addr;
      var $1344=$s_addr;
      var $sp1759=(($1344+56)|0);
      var $1345=HEAP32[(($sp1759)>>2)];
      var $and1760=$1345 & 511;
      var $shl1761=$and1760 << 23;
      var $or1762=66 | $shl1761;
      _genop($1343, $or1762);
      var $1346=$s_addr;
      var $1347=$s_addr;
      var $sp1763=(($1347+56)|0);
      var $1348=HEAP32[(($sp1763)>>2)];
      var $and1764=$1348 & 511;
      var $shl1765=$and1764 << 23;
      var $or1766=19 | $shl1765;
      var $1349=$sym1749;
      var $and1767=$1349 & 65535;
      var $shl1768=$and1767 << 7;
      var $or1769=$or1766 | $shl1768;
      _genop($1346, $or1769);
      var $1350=$s_addr;
      _push_($1350);
      var $1351=$s_addr;
      var $1352=$n1742;
      var $car1770=(($1352)|0);
      var $1353=HEAP32[(($car1770)>>2)];
      _codegen($1351, $1353, 1);
      var $1354=$n1742;
      var $cdr1771=(($1354+4)|0);
      var $1355=HEAP32[(($cdr1771)>>2)];
      $n1742=$1355;
      label = 365; break;
    case 365: 
      var $1356=$n1742;
      var $tobool1773=(($1356)|(0))!=0;
      if ($tobool1773) { label = 366; break; } else { label = 367; break; }
    case 366: 
      var $1357=$s_addr;
      var $1358=$n1742;
      var $car1775=(($1358)|0);
      var $1359=HEAP32[(($car1775)>>2)];
      _codegen($1357, $1359, 1);
      var $1360=$s_addr;
      var $sp1776=(($1360+56)|0);
      var $1361=HEAP32[(($sp1776)>>2)];
      var $dec1777=((($1361)-(1))|0);
      HEAP32[(($sp1776)>>2)]=$dec1777;
      var $1362=$s_addr;
      var $sp1778=(($1362+56)|0);
      var $1363=HEAP32[(($sp1778)>>2)];
      var $dec1779=((($1363)-(1))|0);
      HEAP32[(($sp1778)>>2)]=$dec1779;
      var $1364=$s_addr;
      var $1365=$s_addr;
      var $sp1780=(($1365+56)|0);
      var $1366=HEAP32[(($sp1780)>>2)];
      var $and1781=$1366 & 511;
      var $shl1782=$and1781 << 23;
      var $or1783=62 | $shl1782;
      var $1367=$s_addr;
      var $sp1784=(($1367+56)|0);
      var $1368=HEAP32[(($sp1784)>>2)];
      var $add1785=((($1368)+(1))|0);
      var $and1786=$add1785 & 511;
      var $shl1787=$and1786 << 14;
      var $or1788=$or1783 | $shl1787;
      _genop_peep($1364, $or1788, 1);
      var $1369=$s_addr;
      _push_($1369);
      var $1370=$n1742;
      var $cdr1789=(($1370+4)|0);
      var $1371=HEAP32[(($cdr1789)>>2)];
      $n1742=$1371;
      label = 365; break;
    case 367: 
      var $1372=$tree_addr;
      var $cdr1791=(($1372+4)|0);
      var $1373=HEAP32[(($cdr1791)>>2)];
      var $cdr1792=(($1373+4)|0);
      var $1374=HEAP32[(($cdr1792)>>2)];
      $n1742=$1374;
      var $1375=$n1742;
      var $car1793=(($1375)|0);
      var $1376=HEAP32[(($car1793)>>2)];
      var $tobool1794=(($1376)|(0))!=0;
      if ($tobool1794) { label = 368; break; } else { label = 369; break; }
    case 368: 
      var $1377=$n1742;
      var $car1796=(($1377)|0);
      var $1378=HEAP32[(($car1796)>>2)];
      var $1379=$1378;
      $p1758=$1379;
      var $1380=$s_addr;
      var $1381=$s_addr;
      var $mrb1798=(($1381)|0);
      var $1382=HEAP32[(($mrb1798)>>2)];
      var $1383=$p1758;
      var $1384=$p1758;
      var $call1799=_strlen($1384);
      _mrb_str_new($agg_tmp1797, $1382, $1383, $call1799);
      var $call1800=_new_lit($1380, $agg_tmp1797);
      $off1756=$call1800;
      var $1385=$s_addr;
      var $1386=$tree_addr;
      var $car1801=(($1386)|0);
      var $1387=HEAP32[(($car1801)>>2)];
      _codegen($1385, $1387, 1);
      var $1388=$s_addr;
      var $1389=$s_addr;
      var $sp1802=(($1389+56)|0);
      var $1390=HEAP32[(($sp1802)>>2)];
      var $and1803=$1390 & 511;
      var $shl1804=$and1803 << 23;
      var $or1805=61 | $shl1804;
      var $1391=$off1756;
      var $and1806=$1391 & 65535;
      var $shl1807=$and1806 << 7;
      var $or1808=$or1805 | $shl1807;
      _genop($1388, $or1808);
      var $1392=$s_addr;
      var $sp1809=(($1392+56)|0);
      var $1393=HEAP32[(($sp1809)>>2)];
      var $dec1810=((($1393)-(1))|0);
      HEAP32[(($sp1809)>>2)]=$dec1810;
      var $1394=$s_addr;
      var $1395=$s_addr;
      var $sp1811=(($1395+56)|0);
      var $1396=HEAP32[(($sp1811)>>2)];
      var $and1812=$1396 & 511;
      var $shl1813=$and1812 << 23;
      var $or1814=62 | $shl1813;
      var $1397=$s_addr;
      var $sp1815=(($1397+56)|0);
      var $1398=HEAP32[(($sp1815)>>2)];
      var $add1816=((($1398)+(1))|0);
      var $and1817=$add1816 & 511;
      var $shl1818=$and1817 << 14;
      var $or1819=$or1814 | $shl1818;
      _genop_peep($1394, $or1819, 1);
      label = 369; break;
    case 369: 
      var $1399=$n1742;
      var $cdr1821=(($1399+4)|0);
      var $1400=HEAP32[(($cdr1821)>>2)];
      var $tobool1822=(($1400)|(0))!=0;
      if ($tobool1822) { label = 370; break; } else { label = 371; break; }
    case 370: 
      var $1401=$n1742;
      var $cdr1826=(($1401+4)|0);
      var $1402=HEAP32[(($cdr1826)>>2)];
      var $1403=$1402;
      $p21825=$1403;
      var $1404=$s_addr;
      _push_($1404);
      var $1405=$s_addr;
      var $1406=$s_addr;
      var $mrb1830=(($1406)|0);
      var $1407=HEAP32[(($mrb1830)>>2)];
      var $1408=$p21825;
      var $1409=$p21825;
      var $call1831=_strlen($1409);
      _mrb_str_new($agg_tmp1829, $1407, $1408, $call1831);
      var $call1832=_new_lit($1405, $agg_tmp1829);
      $off1828=$call1832;
      var $1410=$s_addr;
      var $1411=$s_addr;
      var $sp1833=(($1411+56)|0);
      var $1412=HEAP32[(($sp1833)>>2)];
      var $and1834=$1412 & 511;
      var $shl1835=$and1834 << 23;
      var $or1836=61 | $shl1835;
      var $1413=$off1828;
      var $and1837=$1413 & 65535;
      var $shl1838=$and1837 << 7;
      var $or1839=$or1836 | $shl1838;
      _genop($1410, $or1839);
      var $1414=$argc1754;
      var $inc1840=((($1414)+(1))|0);
      $argc1754=$inc1840;
      var $1415=$s_addr;
      var $sp1841=(($1415+56)|0);
      var $1416=HEAP32[(($sp1841)>>2)];
      var $dec1842=((($1416)-(1))|0);
      HEAP32[(($sp1841)>>2)]=$dec1842;
      label = 371; break;
    case 371: 
      var $1417=$s_addr;
      var $sp1844=(($1417+56)|0);
      var $1418=HEAP32[(($sp1844)>>2)];
      var $dec1845=((($1418)-(1))|0);
      HEAP32[(($sp1844)>>2)]=$dec1845;
      var $1419=$s_addr;
      var $1420=$s_addr;
      var $mrb1846=(($1420)|0);
      var $1421=HEAP32[(($mrb1846)>>2)];
      var $call1847=_mrb_intern2($1421, ((111324)|0), 7);
      var $call1848=_new_sym900($1419, $call1847);
      $sym1749=$call1848;
      var $1422=$s_addr;
      var $1423=$s_addr;
      var $sp1849=(($1423+56)|0);
      var $1424=HEAP32[(($sp1849)>>2)];
      var $and1850=$1424 & 511;
      var $shl1851=$and1850 << 23;
      var $or1852=32 | $shl1851;
      var $1425=$sym1749;
      var $and1853=$1425 & 511;
      var $shl1854=$and1853 << 14;
      var $or1855=$or1852 | $shl1854;
      var $1426=$argc1754;
      var $and1856=$1426 & 127;
      var $shl1857=$and1856 << 7;
      var $or1858=$or1855 | $shl1857;
      _genop($1422, $or1858);
      var $1427=$s_addr;
      var $mrb1859=(($1427)|0);
      var $1428=HEAP32[(($mrb1859)>>2)];
      var $1429=$ai1745;
      _mrb_gc_arena_restore($1428, $1429);
      var $1430=$s_addr;
      _push_($1430);
      label = 378; break;
    case 372: 
      var $1431=$tree_addr;
      var $car1863=(($1431)|0);
      var $1432=HEAP32[(($car1863)>>2)];
      $n1862=$1432;
      label = 373; break;
    case 373: 
      var $1433=$n1862;
      var $tobool1865=(($1433)|(0))!=0;
      if ($tobool1865) { label = 374; break; } else { label = 377; break; }
    case 374: 
      var $1434=$n1862;
      var $car1867=(($1434)|0);
      var $1435=HEAP32[(($car1867)>>2)];
      var $car1868=(($1435)|0);
      var $1436=HEAP32[(($car1868)>>2)];
      var $1437=$1436;
      var $cmp1869=(($1437)|(0))!=55;
      if ($cmp1869) { label = 375; break; } else { label = 376; break; }
    case 375: 
      var $1438=$s_addr;
      var $1439=$n1862;
      var $car1872=(($1439)|0);
      var $1440=HEAP32[(($car1872)>>2)];
      _codegen($1438, $1440, 0);
      label = 376; break;
    case 376: 
      var $1441=$n1862;
      var $cdr1874=(($1441+4)|0);
      var $1442=HEAP32[(($cdr1874)>>2)];
      $n1862=$1442;
      label = 373; break;
    case 377: 
      label = 378; break;
    case 378: 
      label = 438; break;
    case 379: 
      var $1443=$val_addr;
      var $tobool1878=(($1443)|(0))!=0;
      if ($tobool1878) { label = 380; break; } else { label = 381; break; }
    case 380: 
      var $1444=$s_addr;
      var $1445=$tree_addr;
      var $1446=$1445;
      var $conv1882=(($1446) & 65535);
      var $call1883=_new_sym900($1444, $conv1882);
      $sym1881=$call1883;
      var $1447=$s_addr;
      var $1448=$s_addr;
      var $sp1884=(($1448+56)|0);
      var $1449=HEAP32[(($sp1884)>>2)];
      var $and1885=$1449 & 511;
      var $shl1886=$and1885 << 23;
      var $or1887=4 | $shl1886;
      var $1450=$sym1881;
      var $and1888=$1450 & 65535;
      var $shl1889=$and1888 << 7;
      var $or1890=$or1887 | $shl1889;
      _genop($1447, $or1890);
      var $1451=$s_addr;
      _push_($1451);
      label = 381; break;
    case 381: 
      label = 438; break;
    case 382: 
      var $1452=$s_addr;
      var $1453=$tree_addr;
      var $1454=$val_addr;
      _codegen($1452, $1453, $1454);
      var $1455=$val_addr;
      var $tobool1893=(($1455)|(0))!=0;
      if ($tobool1893) { label = 383; break; } else { label = 384; break; }
    case 383: 
      var $1456=$s_addr;
      _gen_send_intern($1456);
      label = 384; break;
    case 384: 
      label = 438; break;
    case 385: 
      var $1457=$val_addr;
      var $tobool1897=(($1457)|(0))!=0;
      if ($tobool1897) { label = 386; break; } else { label = 387; break; }
    case 386: 
      var $1458=$s_addr;
      var $1459=$s_addr;
      var $sp1899=(($1459+56)|0);
      var $1460=HEAP32[(($sp1899)>>2)];
      var $and1900=$1460 & 511;
      var $shl1901=$and1900 << 23;
      var $or1902=6 | $shl1901;
      _genop($1458, $or1902);
      var $1461=$s_addr;
      _push_($1461);
      label = 387; break;
    case 387: 
      label = 438; break;
    case 388: 
      var $1462=$val_addr;
      var $tobool1905=(($1462)|(0))!=0;
      if ($tobool1905) { label = 389; break; } else { label = 390; break; }
    case 389: 
      var $1463=$s_addr;
      var $1464=$s_addr;
      var $sp1907=(($1464+56)|0);
      var $1465=HEAP32[(($sp1907)>>2)];
      var $and1908=$1465 & 511;
      var $shl1909=$and1908 << 23;
      var $or1910=5 | $shl1909;
      _genop($1463, $or1910);
      var $1466=$s_addr;
      _push_($1466);
      label = 390; break;
    case 390: 
      label = 438; break;
    case 391: 
      var $1467=$val_addr;
      var $tobool1913=(($1467)|(0))!=0;
      if ($tobool1913) { label = 392; break; } else { label = 393; break; }
    case 392: 
      var $1468=$s_addr;
      var $1469=$s_addr;
      var $sp1915=(($1469+56)|0);
      var $1470=HEAP32[(($sp1915)>>2)];
      var $and1916=$1470 & 511;
      var $shl1917=$and1916 << 23;
      var $or1918=7 | $shl1917;
      _genop($1468, $or1918);
      var $1471=$s_addr;
      _push_($1471);
      label = 393; break;
    case 393: 
      label = 438; break;
    case 394: 
      var $1472=$val_addr;
      var $tobool1921=(($1472)|(0))!=0;
      if ($tobool1921) { label = 395; break; } else { label = 396; break; }
    case 395: 
      var $1473=$s_addr;
      var $1474=$s_addr;
      var $sp1923=(($1474+56)|0);
      var $1475=HEAP32[(($sp1923)>>2)];
      var $and1924=$1475 & 511;
      var $shl1925=$and1924 << 23;
      var $or1926=8 | $shl1925;
      _genop($1473, $or1926);
      var $1476=$s_addr;
      _push_($1476);
      label = 396; break;
    case 396: 
      label = 438; break;
    case 397: 
      var $1477=$s_addr;
      var $1478=$tree_addr;
      var $car1930=(($1478)|0);
      var $1479=HEAP32[(($car1930)>>2)];
      var $1480=$1479;
      var $conv1931=(($1480) & 65535);
      var $call1932=_new_msym($1477, $conv1931);
      $a=$call1932;
      var $1481=$s_addr;
      var $1482=$tree_addr;
      var $cdr1934=(($1482+4)|0);
      var $1483=HEAP32[(($cdr1934)>>2)];
      var $1484=$1483;
      var $conv1935=(($1484) & 65535);
      var $call1936=_new_msym($1481, $conv1935);
      $b=$call1936;
      var $1485=$s_addr;
      var $1486=$s_addr;
      var $mrb1938=(($1486)|0);
      var $1487=HEAP32[(($mrb1938)>>2)];
      var $call1939=_mrb_intern2($1487, ((110856)|0), 12);
      var $call1940=_new_msym($1485, $call1939);
      $c=$call1940;
      var $1488=$s_addr;
      var $1489=$s_addr;
      var $sp1941=(($1489+56)|0);
      var $1490=HEAP32[(($sp1941)>>2)];
      var $and1942=$1490 & 511;
      var $shl1943=$and1942 << 23;
      var $or1944=72 | $shl1943;
      _genop($1488, $or1944);
      var $1491=$s_addr;
      _push_($1491);
      var $1492=$s_addr;
      var $1493=$s_addr;
      var $sp1945=(($1493+56)|0);
      var $1494=HEAP32[(($sp1945)>>2)];
      var $and1946=$1494 & 511;
      var $shl1947=$and1946 << 23;
      var $or1948=4 | $shl1947;
      var $1495=$a;
      var $and1949=$1495 & 65535;
      var $shl1950=$and1949 << 7;
      var $or1951=$or1948 | $shl1950;
      _genop($1492, $or1951);
      var $1496=$s_addr;
      _push_($1496);
      var $1497=$s_addr;
      var $1498=$s_addr;
      var $sp1952=(($1498+56)|0);
      var $1499=HEAP32[(($sp1952)>>2)];
      var $and1953=$1499 & 511;
      var $shl1954=$and1953 << 23;
      var $or1955=4 | $shl1954;
      var $1500=$b;
      var $and1956=$1500 & 65535;
      var $shl1957=$and1956 << 7;
      var $or1958=$or1955 | $shl1957;
      _genop($1497, $or1958);
      var $1501=$s_addr;
      _push_($1501);
      var $1502=$s_addr;
      var $1503=$s_addr;
      var $sp1959=(($1503+56)|0);
      var $1504=HEAP32[(($sp1959)>>2)];
      var $and1960=$1504 & 511;
      var $shl1961=$and1960 << 23;
      var $or1962=5 | $shl1961;
      _genop($1502, $or1962);
      var $1505=$s_addr;
      var $sp1963=(($1505+56)|0);
      var $1506=HEAP32[(($sp1963)>>2)];
      var $sub1964=((($1506)-(3))|0);
      HEAP32[(($sp1963)>>2)]=$sub1964;
      var $1507=$s_addr;
      var $1508=$s_addr;
      var $sp1965=(($1508+56)|0);
      var $1509=HEAP32[(($sp1965)>>2)];
      var $and1966=$1509 & 511;
      var $shl1967=$and1966 << 23;
      var $or1968=32 | $shl1967;
      var $1510=$c;
      var $and1969=$1510 & 511;
      var $shl1970=$and1969 << 14;
      var $or1971=$or1968 | $shl1970;
      var $or1972=$or1971 | 256;
      _genop($1507, $or1972);
      var $1511=$val_addr;
      var $tobool1973=(($1511)|(0))!=0;
      if ($tobool1973) { label = 398; break; } else { label = 399; break; }
    case 398: 
      var $1512=$s_addr;
      _push_($1512);
      label = 399; break;
    case 399: 
      label = 438; break;
    case 400: 
      var $1513=$s_addr;
      var $1514=$s_addr;
      var $mrb1978=(($1514)|0);
      var $1515=HEAP32[(($mrb1978)>>2)];
      var $call1979=_mrb_intern2($1515, ((110352)|0), 12);
      var $call1980=_new_msym($1513, $call1979);
      $undef=$call1980;
      $num=0;
      var $1516=$tree_addr;
      $t1983=$1516;
      var $1517=$s_addr;
      var $1518=$s_addr;
      var $sp1984=(($1518+56)|0);
      var $1519=HEAP32[(($sp1984)>>2)];
      var $and1985=$1519 & 511;
      var $shl1986=$and1985 << 23;
      var $or1987=72 | $shl1986;
      _genop($1517, $or1987);
      var $1520=$s_addr;
      _push_($1520);
      label = 401; break;
    case 401: 
      var $1521=$t1983;
      var $tobool1989=(($1521)|(0))!=0;
      if ($tobool1989) { label = 402; break; } else { label = 403; break; }
    case 402: 
      var $1522=$s_addr;
      var $1523=$t1983;
      var $car1992=(($1523)|0);
      var $1524=HEAP32[(($car1992)>>2)];
      var $1525=$1524;
      var $conv1993=(($1525) & 65535);
      var $call1994=_new_msym($1522, $conv1993);
      $symbol=$call1994;
      var $1526=$s_addr;
      var $1527=$s_addr;
      var $sp1995=(($1527+56)|0);
      var $1528=HEAP32[(($sp1995)>>2)];
      var $and1996=$1528 & 511;
      var $shl1997=$and1996 << 23;
      var $or1998=4 | $shl1997;
      var $1529=$symbol;
      var $and1999=$1529 & 65535;
      var $shl2000=$and1999 << 7;
      var $or2001=$or1998 | $shl2000;
      _genop($1526, $or2001);
      var $1530=$s_addr;
      _push_($1530);
      var $1531=$t1983;
      var $cdr2002=(($1531+4)|0);
      var $1532=HEAP32[(($cdr2002)>>2)];
      $t1983=$1532;
      var $1533=$num;
      var $inc2003=((($1533)+(1))|0);
      $num=$inc2003;
      label = 401; break;
    case 403: 
      var $1534=$num;
      var $add2005=((($1534)+(1))|0);
      var $1535=$s_addr;
      var $sp2006=(($1535+56)|0);
      var $1536=HEAP32[(($sp2006)>>2)];
      var $sub2007=((($1536)-($add2005))|0);
      HEAP32[(($sp2006)>>2)]=$sub2007;
      var $1537=$s_addr;
      var $1538=$s_addr;
      var $sp2008=(($1538+56)|0);
      var $1539=HEAP32[(($sp2008)>>2)];
      var $and2009=$1539 & 511;
      var $shl2010=$and2009 << 23;
      var $or2011=32 | $shl2010;
      var $1540=$undef;
      var $and2012=$1540 & 511;
      var $shl2013=$and2012 << 14;
      var $or2014=$or2011 | $shl2013;
      var $1541=$num;
      var $and2015=$1541 & 127;
      var $shl2016=$and2015 << 7;
      var $or2017=$or2014 | $shl2016;
      _genop($1537, $or2017);
      var $1542=$val_addr;
      var $tobool2018=(($1542)|(0))!=0;
      if ($tobool2018) { label = 404; break; } else { label = 405; break; }
    case 404: 
      var $1543=$s_addr;
      _push_($1543);
      label = 405; break;
    case 405: 
      label = 438; break;
    case 406: 
      var $1544=$tree_addr;
      var $car2024=(($1544)|0);
      var $1545=HEAP32[(($car2024)>>2)];
      var $car2025=(($1545)|0);
      var $1546=HEAP32[(($car2025)>>2)];
      var $cmp2026=(($1546)|(0))==0;
      if ($cmp2026) { label = 407; break; } else { label = 408; break; }
    case 407: 
      var $1547=$s_addr;
      var $1548=$s_addr;
      var $sp2029=(($1548+56)|0);
      var $1549=HEAP32[(($sp2029)>>2)];
      var $and2030=$1549 & 511;
      var $shl2031=$and2030 << 23;
      var $or2032=5 | $shl2031;
      _genop($1547, $or2032);
      var $1550=$s_addr;
      _push_($1550);
      label = 412; break;
    case 408: 
      var $1551=$tree_addr;
      var $car2034=(($1551)|0);
      var $1552=HEAP32[(($car2034)>>2)];
      var $car2035=(($1552)|0);
      var $1553=HEAP32[(($car2035)>>2)];
      var $cmp2036=(($1553)|(0))==1;
      if ($cmp2036) { label = 409; break; } else { label = 410; break; }
    case 409: 
      var $1554=$s_addr;
      var $1555=$s_addr;
      var $sp2039=(($1555+56)|0);
      var $1556=HEAP32[(($sp2039)>>2)];
      var $and2040=$1556 & 511;
      var $shl2041=$and2040 << 23;
      var $or2042=66 | $shl2041;
      _genop($1554, $or2042);
      var $1557=$s_addr;
      _push_($1557);
      label = 411; break;
    case 410: 
      var $1558=$s_addr;
      var $1559=$tree_addr;
      var $car2044=(($1559)|0);
      var $1560=HEAP32[(($car2044)>>2)];
      var $car2045=(($1560)|0);
      var $1561=HEAP32[(($car2045)>>2)];
      _codegen($1558, $1561, 1);
      label = 411; break;
    case 411: 
      label = 412; break;
    case 412: 
      var $1562=$tree_addr;
      var $cdr2048=(($1562+4)|0);
      var $1563=HEAP32[(($cdr2048)>>2)];
      var $car2049=(($1563)|0);
      var $1564=HEAP32[(($car2049)>>2)];
      var $tobool2050=(($1564)|(0))!=0;
      if ($tobool2050) { label = 413; break; } else { label = 414; break; }
    case 413: 
      var $1565=$s_addr;
      var $1566=$tree_addr;
      var $cdr2052=(($1566+4)|0);
      var $1567=HEAP32[(($cdr2052)>>2)];
      var $car2053=(($1567)|0);
      var $1568=HEAP32[(($car2053)>>2)];
      _codegen($1565, $1568, 1);
      label = 415; break;
    case 414: 
      var $1569=$s_addr;
      var $1570=$s_addr;
      var $sp2055=(($1570+56)|0);
      var $1571=HEAP32[(($sp2055)>>2)];
      var $and2056=$1571 & 511;
      var $shl2057=$and2056 << 23;
      var $or2058=5 | $shl2057;
      _genop($1569, $or2058);
      var $1572=$s_addr;
      _push_($1572);
      label = 415; break;
    case 415: 
      var $1573=$s_addr;
      var $sp2060=(($1573+56)|0);
      var $1574=HEAP32[(($sp2060)>>2)];
      var $dec2061=((($1574)-(1))|0);
      HEAP32[(($sp2060)>>2)]=$dec2061;
      var $1575=$s_addr;
      var $sp2062=(($1575+56)|0);
      var $1576=HEAP32[(($sp2062)>>2)];
      var $dec2063=((($1576)-(1))|0);
      HEAP32[(($sp2062)>>2)]=$dec2063;
      var $1577=$s_addr;
      var $1578=$tree_addr;
      var $car2064=(($1578)|0);
      var $1579=HEAP32[(($car2064)>>2)];
      var $cdr2065=(($1579+4)|0);
      var $1580=HEAP32[(($cdr2065)>>2)];
      var $1581=$1580;
      var $conv2066=(($1581) & 65535);
      var $call2067=_new_msym($1577, $conv2066);
      $idx2023=$call2067;
      var $1582=$s_addr;
      var $1583=$s_addr;
      var $sp2068=(($1583+56)|0);
      var $1584=HEAP32[(($sp2068)>>2)];
      var $and2069=$1584 & 511;
      var $shl2070=$and2069 << 23;
      var $or2071=67 | $shl2070;
      var $1585=$idx2023;
      var $and2072=$1585 & 511;
      var $shl2073=$and2072 << 14;
      var $or2074=$or2071 | $shl2073;
      _genop($1582, $or2074);
      var $1586=$s_addr;
      var $1587=$tree_addr;
      var $cdr2075=(($1587+4)|0);
      var $1588=HEAP32[(($cdr2075)>>2)];
      var $cdr2076=(($1588+4)|0);
      var $1589=HEAP32[(($cdr2076)>>2)];
      var $car2077=(($1589)|0);
      var $1590=HEAP32[(($car2077)>>2)];
      var $call2078=_scope_body($1586, $1590);
      $idx2023=$call2078;
      var $1591=$s_addr;
      var $1592=$s_addr;
      var $sp2079=(($1592+56)|0);
      var $1593=HEAP32[(($sp2079)>>2)];
      var $and2080=$1593 & 511;
      var $shl2081=$and2080 << 23;
      var $or2082=69 | $shl2081;
      var $1594=$idx2023;
      var $and2083=$1594 & 65535;
      var $shl2084=$and2083 << 7;
      var $or2085=$or2082 | $shl2084;
      _genop($1591, $or2085);
      var $1595=$val_addr;
      var $tobool2086=(($1595)|(0))!=0;
      if ($tobool2086) { label = 416; break; } else { label = 417; break; }
    case 416: 
      var $1596=$s_addr;
      _push_($1596);
      label = 417; break;
    case 417: 
      label = 438; break;
    case 418: 
      var $1597=$tree_addr;
      var $car2092=(($1597)|0);
      var $1598=HEAP32[(($car2092)>>2)];
      var $car2093=(($1598)|0);
      var $1599=HEAP32[(($car2093)>>2)];
      var $cmp2094=(($1599)|(0))==0;
      if ($cmp2094) { label = 419; break; } else { label = 420; break; }
    case 419: 
      var $1600=$s_addr;
      var $1601=$s_addr;
      var $sp2097=(($1601+56)|0);
      var $1602=HEAP32[(($sp2097)>>2)];
      var $and2098=$1602 & 511;
      var $shl2099=$and2098 << 23;
      var $or2100=5 | $shl2099;
      _genop($1600, $or2100);
      var $1603=$s_addr;
      _push_($1603);
      label = 424; break;
    case 420: 
      var $1604=$tree_addr;
      var $car2102=(($1604)|0);
      var $1605=HEAP32[(($car2102)>>2)];
      var $car2103=(($1605)|0);
      var $1606=HEAP32[(($car2103)>>2)];
      var $cmp2104=(($1606)|(0))==1;
      if ($cmp2104) { label = 421; break; } else { label = 422; break; }
    case 421: 
      var $1607=$s_addr;
      var $1608=$s_addr;
      var $sp2107=(($1608+56)|0);
      var $1609=HEAP32[(($sp2107)>>2)];
      var $and2108=$1609 & 511;
      var $shl2109=$and2108 << 23;
      var $or2110=66 | $shl2109;
      _genop($1607, $or2110);
      var $1610=$s_addr;
      _push_($1610);
      label = 423; break;
    case 422: 
      var $1611=$s_addr;
      var $1612=$tree_addr;
      var $car2112=(($1612)|0);
      var $1613=HEAP32[(($car2112)>>2)];
      var $car2113=(($1613)|0);
      var $1614=HEAP32[(($car2113)>>2)];
      _codegen($1611, $1614, 1);
      label = 423; break;
    case 423: 
      label = 424; break;
    case 424: 
      var $1615=$s_addr;
      var $sp2116=(($1615+56)|0);
      var $1616=HEAP32[(($sp2116)>>2)];
      var $dec2117=((($1616)-(1))|0);
      HEAP32[(($sp2116)>>2)]=$dec2117;
      var $1617=$s_addr;
      var $1618=$tree_addr;
      var $car2118=(($1618)|0);
      var $1619=HEAP32[(($car2118)>>2)];
      var $cdr2119=(($1619+4)|0);
      var $1620=HEAP32[(($cdr2119)>>2)];
      var $1621=$1620;
      var $conv2120=(($1621) & 65535);
      var $call2121=_new_msym($1617, $conv2120);
      $idx2091=$call2121;
      var $1622=$s_addr;
      var $1623=$s_addr;
      var $sp2122=(($1623+56)|0);
      var $1624=HEAP32[(($sp2122)>>2)];
      var $and2123=$1624 & 511;
      var $shl2124=$and2123 << 23;
      var $or2125=68 | $shl2124;
      var $1625=$idx2091;
      var $and2126=$1625 & 511;
      var $shl2127=$and2126 << 14;
      var $or2128=$or2125 | $shl2127;
      _genop($1622, $or2128);
      var $1626=$s_addr;
      var $1627=$tree_addr;
      var $cdr2129=(($1627+4)|0);
      var $1628=HEAP32[(($cdr2129)>>2)];
      var $car2130=(($1628)|0);
      var $1629=HEAP32[(($car2130)>>2)];
      var $call2131=_scope_body($1626, $1629);
      $idx2091=$call2131;
      var $1630=$s_addr;
      var $1631=$s_addr;
      var $sp2132=(($1631+56)|0);
      var $1632=HEAP32[(($sp2132)>>2)];
      var $and2133=$1632 & 511;
      var $shl2134=$and2133 << 23;
      var $or2135=69 | $shl2134;
      var $1633=$idx2091;
      var $and2136=$1633 & 65535;
      var $shl2137=$and2136 << 7;
      var $or2138=$or2135 | $shl2137;
      _genop($1630, $or2138);
      var $1634=$val_addr;
      var $tobool2139=(($1634)|(0))!=0;
      if ($tobool2139) { label = 425; break; } else { label = 426; break; }
    case 425: 
      var $1635=$s_addr;
      _push_($1635);
      label = 426; break;
    case 426: 
      label = 438; break;
    case 427: 
      var $1636=$s_addr;
      var $1637=$tree_addr;
      var $car2145=(($1637)|0);
      var $1638=HEAP32[(($car2145)>>2)];
      _codegen($1636, $1638, 1);
      var $1639=$s_addr;
      var $sp2146=(($1639+56)|0);
      var $1640=HEAP32[(($sp2146)>>2)];
      var $dec2147=((($1640)-(1))|0);
      HEAP32[(($sp2146)>>2)]=$dec2147;
      var $1641=$s_addr;
      var $1642=$s_addr;
      var $sp2148=(($1642+56)|0);
      var $1643=HEAP32[(($sp2148)>>2)];
      var $and2149=$1643 & 511;
      var $shl2150=$and2149 << 23;
      var $or2151=71 | $shl2150;
      var $1644=$s_addr;
      var $sp2152=(($1644+56)|0);
      var $1645=HEAP32[(($sp2152)>>2)];
      var $and2153=$1645 & 511;
      var $shl2154=$and2153 << 14;
      var $or2155=$or2151 | $shl2154;
      _genop($1641, $or2155);
      var $1646=$s_addr;
      var $1647=$tree_addr;
      var $cdr2156=(($1647+4)|0);
      var $1648=HEAP32[(($cdr2156)>>2)];
      var $car2157=(($1648)|0);
      var $1649=HEAP32[(($car2157)>>2)];
      var $call2158=_scope_body($1646, $1649);
      $idx2144=$call2158;
      var $1650=$s_addr;
      var $1651=$s_addr;
      var $sp2159=(($1651+56)|0);
      var $1652=HEAP32[(($sp2159)>>2)];
      var $and2160=$1652 & 511;
      var $shl2161=$and2160 << 23;
      var $or2162=69 | $shl2161;
      var $1653=$idx2144;
      var $and2163=$1653 & 65535;
      var $shl2164=$and2163 << 7;
      var $or2165=$or2162 | $shl2164;
      _genop($1650, $or2165);
      var $1654=$val_addr;
      var $tobool2166=(($1654)|(0))!=0;
      if ($tobool2166) { label = 428; break; } else { label = 429; break; }
    case 428: 
      var $1655=$s_addr;
      _push_($1655);
      label = 429; break;
    case 429: 
      label = 438; break;
    case 430: 
      var $1656=$s_addr;
      var $1657=$tree_addr;
      var $car2172=(($1657)|0);
      var $1658=HEAP32[(($car2172)>>2)];
      var $1659=$1658;
      var $conv2173=(($1659) & 65535);
      var $call2174=_new_msym($1656, $conv2173);
      $sym2171=$call2174;
      var $1660=$s_addr;
      var $1661=$tree_addr;
      var $cdr2177=(($1661+4)|0);
      var $1662=HEAP32[(($cdr2177)>>2)];
      var $call2178=_lambda_body($1660, $1662, 0);
      $idx2176=$call2178;
      var $1663=$s_addr;
      var $1664=$s_addr;
      var $sp2179=(($1664+56)|0);
      var $1665=HEAP32[(($sp2179)>>2)];
      var $and2180=$1665 & 511;
      var $shl2181=$and2180 << 23;
      var $or2182=72 | $shl2181;
      _genop($1663, $or2182);
      var $1666=$s_addr;
      _push_($1666);
      var $1667=$s_addr;
      var $1668=$s_addr;
      var $sp2183=(($1668+56)|0);
      var $1669=HEAP32[(($sp2183)>>2)];
      var $and2184=$1669 & 511;
      var $shl2185=$and2184 << 23;
      var $or2186=64 | $shl2185;
      var $1670=$idx2176;
      var $and2187=$1670 & 16383;
      var $shl2188=$and2187 << 9;
      var $or2189=$shl2188 | 128;
      var $or2190=$or2186 | $or2189;
      _genop($1667, $or2190);
      var $1671=$s_addr;
      var $sp2191=(($1671+56)|0);
      var $1672=HEAP32[(($sp2191)>>2)];
      var $dec2192=((($1672)-(1))|0);
      HEAP32[(($sp2191)>>2)]=$dec2192;
      var $1673=$s_addr;
      var $1674=$s_addr;
      var $sp2193=(($1674+56)|0);
      var $1675=HEAP32[(($sp2193)>>2)];
      var $and2194=$1675 & 511;
      var $shl2195=$and2194 << 23;
      var $or2196=70 | $shl2195;
      var $1676=$sym2171;
      var $and2197=$1676 & 511;
      var $shl2198=$and2197 << 14;
      var $or2199=$or2196 | $shl2198;
      _genop($1673, $or2199);
      var $1677=$val_addr;
      var $tobool2200=(($1677)|(0))!=0;
      if ($tobool2200) { label = 431; break; } else { label = 432; break; }
    case 431: 
      var $1678=$s_addr;
      var $1679=$s_addr;
      var $sp2202=(($1679+56)|0);
      var $1680=HEAP32[(($sp2202)>>2)];
      var $and2203=$1680 & 511;
      var $shl2204=$and2203 << 23;
      var $or2205=5 | $shl2204;
      _genop($1678, $or2205);
      var $1681=$s_addr;
      _push_($1681);
      label = 432; break;
    case 432: 
      label = 438; break;
    case 433: 
      var $1682=$tree_addr;
      var $car2209=(($1682)|0);
      var $1683=HEAP32[(($car2209)>>2)];
      $recv=$1683;
      var $1684=$s_addr;
      var $1685=$tree_addr;
      var $cdr2212=(($1685+4)|0);
      var $1686=HEAP32[(($cdr2212)>>2)];
      var $car2213=(($1686)|0);
      var $1687=HEAP32[(($car2213)>>2)];
      var $1688=$1687;
      var $conv2214=(($1688) & 65535);
      var $call2215=_new_msym($1684, $conv2214);
      $sym2211=$call2215;
      var $1689=$s_addr;
      var $1690=$tree_addr;
      var $cdr2218=(($1690+4)|0);
      var $1691=HEAP32[(($cdr2218)>>2)];
      var $cdr2219=(($1691+4)|0);
      var $1692=HEAP32[(($cdr2219)>>2)];
      var $call2220=_lambda_body($1689, $1692, 0);
      $idx2217=$call2220;
      var $1693=$s_addr;
      var $1694=$recv;
      _codegen($1693, $1694, 1);
      var $1695=$s_addr;
      var $sp2221=(($1695+56)|0);
      var $1696=HEAP32[(($sp2221)>>2)];
      var $dec2222=((($1696)-(1))|0);
      HEAP32[(($sp2221)>>2)]=$dec2222;
      var $1697=$s_addr;
      var $1698=$s_addr;
      var $sp2223=(($1698+56)|0);
      var $1699=HEAP32[(($sp2223)>>2)];
      var $and2224=$1699 & 511;
      var $shl2225=$and2224 << 23;
      var $or2226=71 | $shl2225;
      var $1700=$s_addr;
      var $sp2227=(($1700+56)|0);
      var $1701=HEAP32[(($sp2227)>>2)];
      var $and2228=$1701 & 511;
      var $shl2229=$and2228 << 14;
      var $or2230=$or2226 | $shl2229;
      _genop($1697, $or2230);
      var $1702=$s_addr;
      _push_($1702);
      var $1703=$s_addr;
      var $1704=$s_addr;
      var $sp2231=(($1704+56)|0);
      var $1705=HEAP32[(($sp2231)>>2)];
      var $and2232=$1705 & 511;
      var $shl2233=$and2232 << 23;
      var $or2234=64 | $shl2233;
      var $1706=$idx2217;
      var $and2235=$1706 & 16383;
      var $shl2236=$and2235 << 9;
      var $or2237=$shl2236 | 128;
      var $or2238=$or2234 | $or2237;
      _genop($1703, $or2238);
      var $1707=$s_addr;
      var $sp2239=(($1707+56)|0);
      var $1708=HEAP32[(($sp2239)>>2)];
      var $dec2240=((($1708)-(1))|0);
      HEAP32[(($sp2239)>>2)]=$dec2240;
      var $1709=$s_addr;
      var $1710=$s_addr;
      var $sp2241=(($1710+56)|0);
      var $1711=HEAP32[(($sp2241)>>2)];
      var $and2242=$1711 & 511;
      var $shl2243=$and2242 << 23;
      var $or2244=70 | $shl2243;
      var $1712=$sym2211;
      var $and2245=$1712 & 511;
      var $shl2246=$and2245 << 14;
      var $or2247=$or2244 | $shl2246;
      _genop($1709, $or2247);
      var $1713=$val_addr;
      var $tobool2248=(($1713)|(0))!=0;
      if ($tobool2248) { label = 434; break; } else { label = 435; break; }
    case 434: 
      var $1714=$s_addr;
      var $1715=$s_addr;
      var $sp2250=(($1715+56)|0);
      var $1716=HEAP32[(($sp2250)>>2)];
      var $and2251=$1716 & 511;
      var $shl2252=$and2251 << 23;
      var $or2253=5 | $shl2252;
      _genop($1714, $or2253);
      var $1717=$s_addr;
      _push_($1717);
      label = 435; break;
    case 435: 
      label = 438; break;
    case 436: 
      var $1718=$s_addr;
      var $1719=$tree_addr;
      _codegen($1718, $1719, 0);
      label = 438; break;
    case 437: 
      label = 438; break;
    case 438: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_label($s) {
  var label = 0;
  var $s_addr;
  $s_addr=$s;
  var $0=$s_addr;
  var $pc=(($0+60)|0);
  var $1=HEAP32[(($pc)>>2)];
  var $2=$s_addr;
  var $lastlabel=(($2+64)|0);
  HEAP32[(($lastlabel)>>2)]=$1;
  var $3=$s_addr;
  var $pc1=(($3+60)|0);
  var $4=HEAP32[(($pc1)>>2)];
  return $4;
}
function _genop($s, $i) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $i_addr;
      $s_addr=$s;
      $i_addr=$i;
      var $0=$s_addr;
      var $pc=(($0+60)|0);
      var $1=HEAP32[(($pc)>>2)];
      var $2=$s_addr;
      var $icapa=(($2+96)|0);
      var $3=HEAP32[(($icapa)>>2)];
      var $cmp=(($1)|(0))==(($3)|(0));
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $4=$s_addr;
      var $icapa1=(($4+96)|0);
      var $5=HEAP32[(($icapa1)>>2)];
      var $mul=($5<<1);
      HEAP32[(($icapa1)>>2)]=$mul;
      var $6=$s_addr;
      var $7=$s_addr;
      var $iseq=(($7+88)|0);
      var $8=HEAP32[(($iseq)>>2)];
      var $9=$8;
      var $10=$s_addr;
      var $icapa2=(($10+96)|0);
      var $11=HEAP32[(($icapa2)>>2)];
      var $mul3=($11<<2);
      var $call=_codegen_realloc($6, $9, $mul3);
      var $12=$call;
      var $13=$s_addr;
      var $iseq4=(($13+88)|0);
      HEAP32[(($iseq4)>>2)]=$12;
      var $14=$s_addr;
      var $lines=(($14+92)|0);
      var $15=HEAP32[(($lines)>>2)];
      var $tobool=(($15)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$s_addr;
      var $17=$s_addr;
      var $lines6=(($17+92)|0);
      var $18=HEAP32[(($lines6)>>2)];
      var $19=$18;
      var $20=$s_addr;
      var $icapa7=(($20+96)|0);
      var $21=HEAP32[(($icapa7)>>2)];
      var $mul8=($21<<1);
      var $call9=_codegen_realloc($16, $19, $mul8);
      var $22=$call9;
      var $23=$s_addr;
      var $lines10=(($23+92)|0);
      HEAP32[(($lines10)>>2)]=$22;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $24=$i_addr;
      var $25=$s_addr;
      var $pc12=(($25+60)|0);
      var $26=HEAP32[(($pc12)>>2)];
      var $27=$s_addr;
      var $iseq13=(($27+88)|0);
      var $28=HEAP32[(($iseq13)>>2)];
      var $arrayidx=(($28+($26<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$24;
      var $29=$s_addr;
      var $lines14=(($29+92)|0);
      var $30=HEAP32[(($lines14)>>2)];
      var $tobool15=(($30)|(0))!=0;
      if ($tobool15) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $31=$s_addr;
      var $lineno=(($31+84)|0);
      var $32=HEAP16[(($lineno)>>1)];
      var $33=$s_addr;
      var $pc17=(($33+60)|0);
      var $34=HEAP32[(($pc17)>>2)];
      var $35=$s_addr;
      var $lines18=(($35+92)|0);
      var $36=HEAP32[(($lines18)>>2)];
      var $arrayidx19=(($36+($34<<1))|0);
      HEAP16[(($arrayidx19)>>1)]=$32;
      label = 8; break;
    case 8: 
      var $37=$s_addr;
      var $pc21=(($37+60)|0);
      var $38=HEAP32[(($pc21)>>2)];
      var $inc=((($38)+(1))|0);
      HEAP32[(($pc21)>>2)]=$inc;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _push_($s) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      $s_addr=$s;
      var $0=$s_addr;
      var $sp=(($0+56)|0);
      var $1=HEAP32[(($sp)>>2)];
      var $cmp=(($1)|(0)) > 511;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$s_addr;
      _codegen_error($2, ((106540)|0));
      label = 4; break;
    case 4: 
      var $3=$s_addr;
      var $sp1=(($3+56)|0);
      var $4=HEAP32[(($sp1)>>2)];
      var $inc=((($4)+(1))|0);
      HEAP32[(($sp1)>>2)]=$inc;
      label = 5; break;
    case 5: 
      var $5=$s_addr;
      var $sp2=(($5+56)|0);
      var $6=HEAP32[(($sp2)>>2)];
      var $7=$s_addr;
      var $nregs=(($7+116)|0);
      var $8=HEAP32[(($nregs)>>2)];
      var $cmp3=(($6)|(0)) > (($8)|(0));
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $9=$s_addr;
      var $sp5=(($9+56)|0);
      var $10=HEAP32[(($sp5)>>2)];
      var $11=$s_addr;
      var $nregs6=(($11+116)|0);
      HEAP32[(($nregs6)>>2)]=$10;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _loop_push($s, $t) {
  var label = 0;
  var $s_addr;
  var $t_addr;
  var $p;
  $s_addr=$s;
  $t_addr=$t;
  var $0=$s_addr;
  var $call=_codegen_palloc($0, 28);
  var $1=$call;
  $p=$1;
  var $2=$t_addr;
  var $3=$p;
  var $type=(($3)|0);
  HEAP32[(($type)>>2)]=$2;
  var $4=$p;
  var $pc3=(($4+12)|0);
  HEAP32[(($pc3)>>2)]=0;
  var $5=$p;
  var $pc2=(($5+8)|0);
  HEAP32[(($pc2)>>2)]=0;
  var $6=$p;
  var $pc1=(($6+4)|0);
  HEAP32[(($pc1)>>2)]=0;
  var $7=$s_addr;
  var $loop=(($7+72)|0);
  var $8=HEAP32[(($loop)>>2)];
  var $9=$p;
  var $prev=(($9+24)|0);
  HEAP32[(($prev)>>2)]=$8;
  var $10=$s_addr;
  var $ensure_level=(($10+76)|0);
  var $11=HEAP32[(($ensure_level)>>2)];
  var $12=$p;
  var $ensure_level1=(($12+20)|0);
  HEAP32[(($ensure_level1)>>2)]=$11;
  var $13=$s_addr;
  var $sp=(($13+56)|0);
  var $14=HEAP32[(($sp)>>2)];
  var $15=$p;
  var $acc=(($15+16)|0);
  HEAP32[(($acc)>>2)]=$14;
  var $16=$p;
  var $17=$s_addr;
  var $loop2=(($17+72)|0);
  HEAP32[(($loop2)>>2)]=$16;
  var $18=$p;
  return $18;
}
function _dispatch($s, $pc) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $pc_addr;
      var $diff;
      var $i;
      var $c;
      $s_addr=$s;
      $pc_addr=$pc;
      var $0=$s_addr;
      var $pc1=(($0+60)|0);
      var $1=HEAP32[(($pc1)>>2)];
      var $2=$pc_addr;
      var $sub=((($1)-($2))|0);
      $diff=$sub;
      var $3=$pc_addr;
      var $4=$s_addr;
      var $iseq=(($4+88)|0);
      var $5=HEAP32[(($iseq)>>2)];
      var $arrayidx=(($5+($3<<2))|0);
      var $6=HEAP32[(($arrayidx)>>2)];
      $i=$6;
      var $7=$i;
      var $and=$7 & 127;
      $c=$and;
      var $8=$s_addr;
      var $pc2=(($8+60)|0);
      var $9=HEAP32[(($pc2)>>2)];
      var $10=$s_addr;
      var $lastlabel=(($10+64)|0);
      HEAP32[(($lastlabel)>>2)]=$9;
      var $11=$c;
      if ((($11)|(0))==23 | (($11)|(0))==24 | (($11)|(0))==25 | (($11)|(0))==26) {
        label = 3; break;
      }
      else {
      label = 4; break;
      }
    case 3: 
      label = 5; break;
    case 4: 
      var $12=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($12, ((107076)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $13=$s_addr;
      _scope_error($13);
      label = 5; break;
    case 5: 
      var $14=$c;
      var $and3=$14 & 127;
      var $15=$i;
      var $shr=$15 >>> 23;
      var $and4=$shr & 511;
      var $and5=$and4 & 511;
      var $shl=$and5 << 23;
      var $or=$and3 | $shl;
      var $16=$diff;
      var $add=((($16)+(32767))|0);
      var $and6=$add & 65535;
      var $shl7=$and6 << 7;
      var $or8=$or | $shl7;
      var $17=$pc_addr;
      var $18=$s_addr;
      var $iseq9=(($18+88)|0);
      var $19=HEAP32[(($iseq9)>>2)];
      var $arrayidx10=(($19+($17<<2))|0);
      HEAP32[(($arrayidx10)>>2)]=$or8;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_msym($s, $sym) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $s_addr;
      var $sym_addr;
      var $i;
      var $len;
      $s_addr=$s;
      $sym_addr=$sym;
      var $0=$s_addr;
      var $irep=(($0+100)|0);
      var $1=HEAP32[(($irep)>>2)];
      var $slen=(($1+40)|0);
      var $2=HEAP32[(($slen)>>2)];
      $len=$2;
      var $3=$len;
      var $cmp=(($3)|(0)) > 256;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $len=256;
      label = 4; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $4=$i;
      var $5=$len;
      var $cmp1=(($4)|(0)) < (($5)|(0));
      if ($cmp1) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $6=$i;
      var $7=$s_addr;
      var $irep2=(($7+100)|0);
      var $8=HEAP32[(($irep2)>>2)];
      var $syms=(($8+20)|0);
      var $9=HEAP32[(($syms)>>2)];
      var $arrayidx=(($9+($6<<1))|0);
      var $10=HEAP16[(($arrayidx)>>1)];
      var $conv=(($10 << 16) >> 16);
      var $11=$sym_addr;
      var $conv3=(($11 << 16) >> 16);
      var $cmp4=(($conv)|(0))==(($conv3)|(0));
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $12=$i;
      $retval=$12;
      label = 17; break;
    case 8: 
      var $13=$i;
      var $14=$s_addr;
      var $irep8=(($14+100)|0);
      var $15=HEAP32[(($irep8)>>2)];
      var $syms9=(($15+20)|0);
      var $16=HEAP32[(($syms9)>>2)];
      var $arrayidx10=(($16+($13<<1))|0);
      var $17=HEAP16[(($arrayidx10)>>1)];
      var $conv11=(($17 << 16) >> 16);
      var $cmp12=(($conv11)|(0))==0;
      if ($cmp12) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 12; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $18=$i;
      var $inc=((($18)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 12: 
      var $19=$i;
      var $cmp16=(($19)|(0))==256;
      if ($cmp16) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $20=$s_addr;
      _codegen_error($20, ((107368)|0));
      label = 14; break;
    case 14: 
      var $21=$sym_addr;
      var $22=$i;
      var $23=$s_addr;
      var $irep20=(($23+100)|0);
      var $24=HEAP32[(($irep20)>>2)];
      var $syms21=(($24+20)|0);
      var $25=HEAP32[(($syms21)>>2)];
      var $arrayidx22=(($25+($22<<1))|0);
      HEAP16[(($arrayidx22)>>1)]=$21;
      var $26=$i;
      var $27=$s_addr;
      var $irep23=(($27+100)|0);
      var $28=HEAP32[(($irep23)>>2)];
      var $slen24=(($28+40)|0);
      var $29=HEAP32[(($slen24)>>2)];
      var $cmp25=(($26)|(0))==(($29)|(0));
      if ($cmp25) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $30=$s_addr;
      var $irep28=(($30+100)|0);
      var $31=HEAP32[(($irep28)>>2)];
      var $slen29=(($31+40)|0);
      var $32=HEAP32[(($slen29)>>2)];
      var $inc30=((($32)+(1))|0);
      HEAP32[(($slen29)>>2)]=$inc30;
      label = 16; break;
    case 16: 
      var $33=$i;
      $retval=$33;
      label = 17; break;
    case 17: 
      var $34=$retval;
      return $34;
    default: assert(0, "bad label: " + label);
  }
}
function _dispatch_linked($s, $pc) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $pc_addr;
      var $i;
      var $pos;
      $s_addr=$s;
      $pc_addr=$pc;
      var $0=$pc_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 8; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $1=$pc_addr;
      var $2=$s_addr;
      var $iseq=(($2+88)|0);
      var $3=HEAP32[(($iseq)>>2)];
      var $arrayidx=(($3+($1<<2))|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      $i=$4;
      var $5=$i;
      var $shr=$5 >>> 7;
      var $and=$shr & 65535;
      var $sub=((($and)-(32767))|0);
      $pos=$sub;
      var $6=$s_addr;
      var $7=$pc_addr;
      _dispatch($6, $7);
      var $8=$pos;
      var $tobool1=(($8)|(0))!=0;
      if ($tobool1) { label = 7; break; } else { label = 6; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $9=$pos;
      $pc_addr=$9;
      label = 5; break;
    case 8: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _gen_assignment($s, $node, $sp, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $node_addr;
      var $sp_addr;
      var $val_addr;
      var $idx;
      var $type;
      var $lv;
      var $up;
      $s_addr=$s;
      $node_addr=$node;
      $sp_addr=$sp;
      $val_addr=$val;
      var $0=$node_addr;
      var $car=(($0)|0);
      var $1=HEAP32[(($car)>>2)];
      var $2=$1;
      $type=$2;
      var $3=$node_addr;
      var $cdr=(($3+4)|0);
      var $4=HEAP32[(($cdr)>>2)];
      $node_addr=$4;
      var $5=$type;
      if ((($5)|(0))==41) {
        label = 3; break;
      }
      else if ((($5)|(0))==39) {
        label = 4; break;
      }
      else if ((($5)|(0))==42) {
        label = 15; break;
      }
      else if ((($5)|(0))==44) {
        label = 16; break;
      }
      else if ((($5)|(0))==43) {
        label = 17; break;
      }
      else if ((($5)|(0))==77) {
        label = 18; break;
      }
      else if ((($5)|(0))==29) {
        label = 19; break;
      }
      else {
      label = 22; break;
      }
    case 3: 
      var $6=$s_addr;
      var $7=$node_addr;
      var $8=$7;
      var $conv=(($8) & 65535);
      var $call=_new_sym900($6, $conv);
      $idx=$call;
      var $9=$s_addr;
      var $10=$sp_addr;
      var $and=$10 & 511;
      var $shl=$and << 23;
      var $or=10 | $shl;
      var $11=$idx;
      var $and1=$11 & 65535;
      var $shl2=$and1 << 7;
      var $or3=$or | $shl2;
      var $12=$val_addr;
      _genop_peep($9, $or3, $12);
      label = 23; break;
    case 4: 
      var $13=$s_addr;
      var $14=$node_addr;
      var $15=$14;
      var $conv5=(($15) & 65535);
      var $call6=_lv_idx($13, $conv5);
      $idx=$call6;
      var $16=$idx;
      var $cmp=(($16)|(0)) > 0;
      if ($cmp) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $17=$idx;
      var $18=$sp_addr;
      var $cmp8=(($17)|(0))!=(($18)|(0));
      if ($cmp8) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $19=$s_addr;
      var $20=$idx;
      var $and11=$20 & 511;
      var $shl12=$and11 << 23;
      var $or13=1 | $shl12;
      var $21=$sp_addr;
      var $and14=$21 & 511;
      var $shl15=$and14 << 14;
      var $or16=$or13 | $shl15;
      var $22=$val_addr;
      _genop_peep($19, $or16, $22);
      label = 7; break;
    case 7: 
      label = 23; break;
    case 8: 
      $lv=0;
      var $23=$s_addr;
      var $prev=(($23+48)|0);
      var $24=HEAP32[(($prev)>>2)];
      $up=$24;
      label = 9; break;
    case 9: 
      var $25=$up;
      var $tobool=(($25)|(0))!=0;
      if ($tobool) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $26=$up;
      var $27=$node_addr;
      var $28=$27;
      var $conv17=(($28) & 65535);
      var $call18=_lv_idx($26, $conv17);
      $idx=$call18;
      var $29=$idx;
      var $cmp19=(($29)|(0)) > 0;
      if ($cmp19) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $30=$s_addr;
      var $31=$sp_addr;
      var $and22=$31 & 511;
      var $shl23=$and22 << 23;
      var $or24=22 | $shl23;
      var $32=$idx;
      var $and25=$32 & 511;
      var $shl26=$and25 << 14;
      var $or27=$or24 | $shl26;
      var $33=$lv;
      var $and28=$33 & 127;
      var $shl29=$and28 << 7;
      var $or30=$or27 | $shl29;
      var $34=$val_addr;
      _genop_peep($30, $or30, $34);
      label = 13; break;
    case 12: 
      var $35=$lv;
      var $inc=((($35)+(1))|0);
      $lv=$inc;
      var $36=$up;
      var $prev32=(($36+48)|0);
      var $37=HEAP32[(($prev32)>>2)];
      $up=$37;
      label = 9; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 23; break;
    case 15: 
      var $38=$s_addr;
      var $39=$node_addr;
      var $40=$39;
      var $conv35=(($40) & 65535);
      var $call36=_new_sym900($38, $conv35);
      $idx=$call36;
      var $41=$s_addr;
      var $42=$sp_addr;
      var $and37=$42 & 511;
      var $shl38=$and37 << 23;
      var $or39=14 | $shl38;
      var $43=$idx;
      var $and40=$43 & 65535;
      var $shl41=$and40 << 7;
      var $or42=$or39 | $shl41;
      var $44=$val_addr;
      _genop_peep($41, $or42, $44);
      label = 23; break;
    case 16: 
      var $45=$s_addr;
      var $46=$node_addr;
      var $47=$46;
      var $conv44=(($47) & 65535);
      var $call45=_new_sym900($45, $conv44);
      $idx=$call45;
      var $48=$s_addr;
      var $49=$sp_addr;
      var $and46=$49 & 511;
      var $shl47=$and46 << 23;
      var $or48=16 | $shl47;
      var $50=$idx;
      var $and49=$50 & 65535;
      var $shl50=$and49 << 7;
      var $or51=$or48 | $shl50;
      var $51=$val_addr;
      _genop_peep($48, $or51, $51);
      label = 23; break;
    case 17: 
      var $52=$s_addr;
      var $53=$node_addr;
      var $54=$53;
      var $conv53=(($54) & 65535);
      var $call54=_new_sym900($52, $conv53);
      $idx=$call54;
      var $55=$s_addr;
      var $56=$sp_addr;
      var $and55=$56 & 511;
      var $shl56=$and55 << 23;
      var $or57=18 | $shl56;
      var $57=$idx;
      var $and58=$57 & 65535;
      var $shl59=$and58 << 7;
      var $or60=$or57 | $shl59;
      var $58=$val_addr;
      _genop_peep($55, $or60, $58);
      label = 23; break;
    case 18: 
      var $59=$s_addr;
      var $60=$node_addr;
      var $cdr62=(($60+4)|0);
      var $61=HEAP32[(($cdr62)>>2)];
      var $62=$61;
      var $conv63=(($62) & 65535);
      var $call64=_new_sym900($59, $conv63);
      $idx=$call64;
      var $63=$s_addr;
      var $64=$s_addr;
      var $sp65=(($64+56)|0);
      var $65=HEAP32[(($sp65)>>2)];
      var $and66=$65 & 511;
      var $shl67=$and66 << 23;
      var $or68=1 | $shl67;
      var $66=$sp_addr;
      var $and69=$66 & 511;
      var $shl70=$and69 << 14;
      var $or71=$or68 | $shl70;
      _genop_peep($63, $or71, 0);
      var $67=$s_addr;
      _push_($67);
      var $68=$s_addr;
      var $69=$node_addr;
      var $car72=(($69)|0);
      var $70=HEAP32[(($car72)>>2)];
      _codegen($68, $70, 1);
      var $71=$s_addr;
      var $sp73=(($71+56)|0);
      var $72=HEAP32[(($sp73)>>2)];
      var $sub=((($72)-(2))|0);
      HEAP32[(($sp73)>>2)]=$sub;
      var $73=$s_addr;
      var $74=$s_addr;
      var $sp74=(($74+56)|0);
      var $75=HEAP32[(($sp74)>>2)];
      var $and75=$75 & 511;
      var $shl76=$and75 << 23;
      var $or77=20 | $shl76;
      var $76=$idx;
      var $and78=$76 & 65535;
      var $shl79=$and78 << 7;
      var $or80=$or77 | $shl79;
      var $77=$val_addr;
      _genop_peep($73, $or80, $77);
      label = 23; break;
    case 19: 
      var $78=$s_addr;
      _push_($78);
      var $79=$s_addr;
      var $80=$node_addr;
      var $81=$s_addr;
      var $82=$node_addr;
      var $cdr82=(($82+4)|0);
      var $83=HEAP32[(($cdr82)>>2)];
      var $car83=(($83)|0);
      var $84=HEAP32[(($car83)>>2)];
      var $85=$84;
      var $conv84=(($85) & 65535);
      var $call85=_attrsym($81, $conv84);
      var $86=$sp_addr;
      _gen_call($79, $80, $call85, $86, 0);
      var $87=$s_addr;
      var $sp86=(($87+56)|0);
      var $88=HEAP32[(($sp86)>>2)];
      var $dec=((($88)-(1))|0);
      HEAP32[(($sp86)>>2)]=$dec;
      var $89=$val_addr;
      var $tobool87=(($89)|(0))!=0;
      if ($tobool87) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $90=$s_addr;
      var $91=$s_addr;
      var $sp89=(($91+56)|0);
      var $92=HEAP32[(($sp89)>>2)];
      var $and90=$92 & 511;
      var $shl91=$and90 << 23;
      var $or92=1 | $shl91;
      var $93=$sp_addr;
      var $and93=$93 & 511;
      var $shl94=$and93 << 14;
      var $or95=$or92 | $shl94;
      var $94=$val_addr;
      _genop_peep($90, $or95, $94);
      label = 21; break;
    case 21: 
      label = 23; break;
    case 22: 
      var $95=$type;
      var $call97=_printf(((108204)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$95,tempInt));
      label = 23; break;
    case 23: 
      var $96=$val_addr;
      var $tobool98=(($96)|(0))!=0;
      if ($tobool98) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $97=$s_addr;
      _push_($97);
      label = 25; break;
    case 25: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _loop_pop($s, $val) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $val_addr;
      $s_addr=$s;
      $val_addr=$val;
      var $0=$val_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$s_addr;
      var $2=$s_addr;
      var $sp=(($2+56)|0);
      var $3=HEAP32[(($sp)>>2)];
      var $and=$3 & 511;
      var $shl=$and << 23;
      var $or=5 | $shl;
      _genop($1, $or);
      label = 4; break;
    case 4: 
      var $4=$s_addr;
      var $5=$s_addr;
      var $loop=(($5+72)|0);
      var $6=HEAP32[(($loop)>>2)];
      var $pc3=(($6+12)|0);
      var $7=HEAP32[(($pc3)>>2)];
      _dispatch_linked($4, $7);
      var $8=$s_addr;
      var $loop1=(($8+72)|0);
      var $9=HEAP32[(($loop1)>>2)];
      var $prev=(($9+24)|0);
      var $10=HEAP32[(($prev)>>2)];
      var $11=$s_addr;
      var $loop2=(($11+72)|0);
      HEAP32[(($loop2)>>2)]=$10;
      var $12=$val_addr;
      var $tobool3=(($12)|(0))!=0;
      if ($tobool3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $13=$s_addr;
      _push_($13);
      label = 6; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _scope_body($s, $tree) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $tree_addr;
      var $scope;
      var $idx;
      $s_addr=$s;
      $tree_addr=$tree;
      var $0=$s_addr;
      var $mrb=(($0)|0);
      var $1=HEAP32[(($mrb)>>2)];
      var $2=$s_addr;
      var $3=$tree_addr;
      var $car=(($3)|0);
      var $4=HEAP32[(($car)>>2)];
      var $call=_scope_new($1, $2, $4);
      $scope=$call;
      var $5=$scope;
      var $idx1=(($5+124)|0);
      var $6=HEAP32[(($idx1)>>2)];
      $idx=$6;
      var $7=$scope;
      var $8=$tree_addr;
      var $cdr=(($8+4)|0);
      var $9=HEAP32[(($cdr)>>2)];
      _codegen($7, $9, 1);
      var $10=$s_addr;
      var $iseq=(($10+88)|0);
      var $11=HEAP32[(($iseq)>>2)];
      var $tobool=(($11)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $12=$scope;
      _genop($12, 74);
      label = 8; break;
    case 4: 
      var $13=$scope;
      var $nregs=(($13+116)|0);
      var $14=HEAP32[(($nregs)>>2)];
      var $cmp=(($14)|(0))==0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $15=$scope;
      _genop($15, 5);
      var $16=$scope;
      _genop($16, 41);
      label = 7; break;
    case 6: 
      var $17=$scope;
      var $18=$scope;
      var $sp=(($18+56)|0);
      var $19=HEAP32[(($sp)>>2)];
      var $and=$19 & 511;
      var $shl=$and << 23;
      var $or=41 | $shl;
      _genop_peep($17, $or, 0);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $20=$scope;
      _scope_finish($20);
      var $21=$idx;
      var $22=$s_addr;
      var $idx5=(($22+124)|0);
      var $23=HEAP32[(($idx5)>>2)];
      var $sub=((($21)-($23))|0);
      return $sub;
    default: assert(0, "bad label: " + label);
  }
}
function _genop_peep($s, $i, $val) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $i_addr;
      var $val_addr;
      var $i0;
      var $c1;
      var $c0;
      var $c;
      var $i431;
      $s_addr=$s;
      $i_addr=$i;
      $val_addr=$val;
      var $0=$s_addr;
      var $lastlabel=(($0+64)|0);
      var $1=HEAP32[(($lastlabel)>>2)];
      var $2=$s_addr;
      var $pc=(($2+60)|0);
      var $3=HEAP32[(($pc)>>2)];
      var $cmp=(($1)|(0))!=(($3)|(0));
      if ($cmp) { label = 3; break; } else { label = 90; break; }
    case 3: 
      var $4=$s_addr;
      var $pc1=(($4+60)|0);
      var $5=HEAP32[(($pc1)>>2)];
      var $cmp2=(($5)|(0)) > 0;
      if ($cmp2) { label = 4; break; } else { label = 90; break; }
    case 4: 
      var $6=$s_addr;
      var $pc3=(($6+60)|0);
      var $7=HEAP32[(($pc3)>>2)];
      var $sub=((($7)-(1))|0);
      var $8=$s_addr;
      var $iseq=(($8+88)|0);
      var $9=HEAP32[(($iseq)>>2)];
      var $arrayidx=(($9+($sub<<2))|0);
      var $10=HEAP32[(($arrayidx)>>2)];
      $i0=$10;
      var $11=$i_addr;
      var $and=$11 & 127;
      $c1=$and;
      var $12=$i0;
      var $and4=$12 & 127;
      $c0=$and4;
      var $13=$c1;
      if ((($13)|(0))==1) {
        label = 5; break;
      }
      else if ((($13)|(0))==14 | (($13)|(0))==16 | (($13)|(0))==18 | (($13)|(0))==20 | (($13)|(0))==10) {
        label = 40; break;
      }
      else if ((($13)|(0))==22) {
        label = 47; break;
      }
      else if ((($13)|(0))==31) {
        label = 54; break;
      }
      else if ((($13)|(0))==28) {
        label = 57; break;
      }
      else if ((($13)|(0))==41) {
        label = 60; break;
      }
      else if ((($13)|(0))==44 | (($13)|(0))==46) {
        label = 71; break;
      }
      else if ((($13)|(0))==62) {
        label = 82; break;
      }
      else {
      label = 88; break;
      }
    case 5: 
      var $14=$i_addr;
      var $shr=$14 >>> 23;
      var $and5=$shr & 511;
      var $15=$i_addr;
      var $shr6=$15 >>> 14;
      var $and7=$shr6 & 511;
      var $cmp8=(($and5)|(0))==(($and7)|(0));
      if ($cmp8) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 91; break;
    case 7: 
      var $16=$val_addr;
      var $tobool=(($16)|(0))!=0;
      if ($tobool) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 89; break;
    case 9: 
      var $17=$c0;
      if ((($17)|(0))==1) {
        label = 10; break;
      }
      else if ((($17)|(0))==3) {
        label = 18; break;
      }
      else if ((($17)|(0))==55 | (($17)|(0))==63 | (($17)|(0))==65 | (($17)|(0))==58 | (($17)|(0))==21) {
        label = 22; break;
      }
      else if ((($17)|(0))==4 | (($17)|(0))==9 | (($17)|(0))==13 | (($17)|(0))==15 | (($17)|(0))==17 | (($17)|(0))==11 | (($17)|(0))==2 | (($17)|(0))==61) {
        label = 26; break;
      }
      else if ((($17)|(0))==71) {
        label = 30; break;
      }
      else if ((($17)|(0))==5 | (($17)|(0))==6 | (($17)|(0))==7 | (($17)|(0))==8 | (($17)|(0))==66) {
        label = 34; break;
      }
      else {
      label = 38; break;
      }
    case 10: 
      var $18=$i_addr;
      var $shr13=$18 >>> 14;
      var $and14=$shr13 & 511;
      var $19=$i0;
      var $shr15=$19 >>> 23;
      var $and16=$shr15 & 511;
      var $cmp17=(($and14)|(0))==(($and16)|(0));
      if ($cmp17) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $20=$i_addr;
      var $shr19=$20 >>> 23;
      var $and20=$shr19 & 511;
      var $21=$i0;
      var $shr21=$21 >>> 14;
      var $and22=$shr21 & 511;
      var $cmp23=(($and20)|(0))==(($and22)|(0));
      if ($cmp23) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $22=$i_addr;
      var $shr25=$22 >>> 23;
      var $and26=$shr25 & 511;
      var $23=$s_addr;
      var $nlocals=(($23+112)|0);
      var $24=HEAP32[(($nlocals)>>2)];
      var $cmp27=(($and26)|(0)) >= (($24)|(0));
      if ($cmp27) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 91; break;
    case 14: 
      var $25=$i_addr;
      var $shr30=$25 >>> 14;
      var $and31=$shr30 & 511;
      var $26=$i0;
      var $shr32=$26 >>> 23;
      var $and33=$shr32 & 511;
      var $cmp34=(($and31)|(0))==(($and33)|(0));
      if ($cmp34) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $27=$i0;
      var $shr36=$27 >>> 23;
      var $and37=$shr36 & 511;
      var $28=$s_addr;
      var $nlocals38=(($28+112)|0);
      var $29=HEAP32[(($nlocals38)>>2)];
      var $cmp39=(($and37)|(0)) >= (($29)|(0));
      if ($cmp39) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $30=$i_addr;
      var $shr41=$30 >>> 23;
      var $and42=$shr41 & 511;
      var $and43=$and42 & 511;
      var $shl=$and43 << 23;
      var $or=1 | $shl;
      var $31=$i0;
      var $shr44=$31 >>> 14;
      var $and45=$shr44 & 511;
      var $and46=$and45 & 511;
      var $shl47=$and46 << 14;
      var $or48=$or | $shl47;
      var $32=$s_addr;
      var $pc49=(($32+60)|0);
      var $33=HEAP32[(($pc49)>>2)];
      var $sub50=((($33)-(1))|0);
      var $34=$s_addr;
      var $iseq51=(($34+88)|0);
      var $35=HEAP32[(($iseq51)>>2)];
      var $arrayidx52=(($35+($sub50<<2))|0);
      HEAP32[(($arrayidx52)>>2)]=$or48;
      label = 91; break;
    case 17: 
      label = 39; break;
    case 18: 
      var $36=$i_addr;
      var $shr55=$36 >>> 14;
      var $and56=$shr55 & 511;
      var $37=$i0;
      var $shr57=$37 >>> 23;
      var $and58=$shr57 & 511;
      var $cmp59=(($and56)|(0))==(($and58)|(0));
      if ($cmp59) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $38=$i0;
      var $shr61=$38 >>> 23;
      var $and62=$shr61 & 511;
      var $39=$s_addr;
      var $nlocals63=(($39+112)|0);
      var $40=HEAP32[(($nlocals63)>>2)];
      var $cmp64=(($and62)|(0)) >= (($40)|(0));
      if ($cmp64) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $41=$i_addr;
      var $shr66=$41 >>> 23;
      var $and67=$shr66 & 511;
      var $and68=$and67 & 511;
      var $shl69=$and68 << 23;
      var $or70=3 | $shl69;
      var $42=$i0;
      var $shr71=$42 >>> 7;
      var $and72=$shr71 & 65535;
      var $sub73=((($and72)-(32767))|0);
      var $add=((($sub73)+(32767))|0);
      var $and74=$add & 65535;
      var $shl75=$and74 << 7;
      var $or76=$or70 | $shl75;
      var $43=$s_addr;
      var $pc77=(($43+60)|0);
      var $44=HEAP32[(($pc77)>>2)];
      var $sub78=((($44)-(1))|0);
      var $45=$s_addr;
      var $iseq79=(($45+88)|0);
      var $46=HEAP32[(($iseq79)>>2)];
      var $arrayidx80=(($46+($sub78<<2))|0);
      HEAP32[(($arrayidx80)>>2)]=$or76;
      label = 91; break;
    case 21: 
      label = 39; break;
    case 22: 
      var $47=$i_addr;
      var $shr83=$47 >>> 14;
      var $and84=$shr83 & 511;
      var $48=$i0;
      var $shr85=$48 >>> 23;
      var $and86=$shr85 & 511;
      var $cmp87=(($and84)|(0))==(($and86)|(0));
      if ($cmp87) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $49=$i0;
      var $shr89=$49 >>> 23;
      var $and90=$shr89 & 511;
      var $50=$s_addr;
      var $nlocals91=(($50+112)|0);
      var $51=HEAP32[(($nlocals91)>>2)];
      var $cmp92=(($and90)|(0)) >= (($51)|(0));
      if ($cmp92) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $52=$c0;
      var $and94=$52 & 127;
      var $53=$i_addr;
      var $shr95=$53 >>> 23;
      var $and96=$shr95 & 511;
      var $and97=$and96 & 511;
      var $shl98=$and97 << 23;
      var $or99=$and94 | $shl98;
      var $54=$i0;
      var $shr100=$54 >>> 14;
      var $and101=$shr100 & 511;
      var $and102=$and101 & 511;
      var $shl103=$and102 << 14;
      var $or104=$or99 | $shl103;
      var $55=$i0;
      var $shr105=$55 >>> 7;
      var $and106=$shr105 & 127;
      var $and107=$and106 & 127;
      var $shl108=$and107 << 7;
      var $or109=$or104 | $shl108;
      var $56=$s_addr;
      var $pc110=(($56+60)|0);
      var $57=HEAP32[(($pc110)>>2)];
      var $sub111=((($57)-(1))|0);
      var $58=$s_addr;
      var $iseq112=(($58+88)|0);
      var $59=HEAP32[(($iseq112)>>2)];
      var $arrayidx113=(($59+($sub111<<2))|0);
      HEAP32[(($arrayidx113)>>2)]=$or109;
      label = 91; break;
    case 25: 
      label = 39; break;
    case 26: 
      var $60=$i_addr;
      var $shr116=$60 >>> 14;
      var $and117=$shr116 & 511;
      var $61=$i0;
      var $shr118=$61 >>> 23;
      var $and119=$shr118 & 511;
      var $cmp120=(($and117)|(0))==(($and119)|(0));
      if ($cmp120) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $62=$i0;
      var $shr122=$62 >>> 23;
      var $and123=$shr122 & 511;
      var $63=$s_addr;
      var $nlocals124=(($63+112)|0);
      var $64=HEAP32[(($nlocals124)>>2)];
      var $cmp125=(($and123)|(0)) >= (($64)|(0));
      if ($cmp125) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $65=$c0;
      var $and127=$65 & 127;
      var $66=$i_addr;
      var $shr128=$66 >>> 23;
      var $and129=$shr128 & 511;
      var $and130=$and129 & 511;
      var $shl131=$and130 << 23;
      var $or132=$and127 | $shl131;
      var $67=$i0;
      var $shr133=$67 >>> 7;
      var $and134=$shr133 & 65535;
      var $and135=$and134 & 65535;
      var $shl136=$and135 << 7;
      var $or137=$or132 | $shl136;
      var $68=$s_addr;
      var $pc138=(($68+60)|0);
      var $69=HEAP32[(($pc138)>>2)];
      var $sub139=((($69)-(1))|0);
      var $70=$s_addr;
      var $iseq140=(($70+88)|0);
      var $71=HEAP32[(($iseq140)>>2)];
      var $arrayidx141=(($71+($sub139<<2))|0);
      HEAP32[(($arrayidx141)>>2)]=$or137;
      label = 91; break;
    case 29: 
      label = 39; break;
    case 30: 
      var $72=$i_addr;
      var $shr144=$72 >>> 14;
      var $and145=$shr144 & 511;
      var $73=$i0;
      var $shr146=$73 >>> 23;
      var $and147=$shr146 & 511;
      var $cmp148=(($and145)|(0))==(($and147)|(0));
      if ($cmp148) { label = 31; break; } else { label = 33; break; }
    case 31: 
      var $74=$i0;
      var $shr150=$74 >>> 23;
      var $and151=$shr150 & 511;
      var $75=$s_addr;
      var $nlocals152=(($75+112)|0);
      var $76=HEAP32[(($nlocals152)>>2)];
      var $cmp153=(($and151)|(0)) >= (($76)|(0));
      if ($cmp153) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $77=$c0;
      var $and155=$77 & 127;
      var $78=$i_addr;
      var $shr156=$78 >>> 23;
      var $and157=$shr156 & 511;
      var $and158=$and157 & 511;
      var $shl159=$and158 << 23;
      var $or160=$and155 | $shl159;
      var $79=$i0;
      var $shr161=$79 >>> 14;
      var $and162=$shr161 & 511;
      var $and163=$and162 & 511;
      var $shl164=$and163 << 14;
      var $or165=$or160 | $shl164;
      var $80=$s_addr;
      var $pc166=(($80+60)|0);
      var $81=HEAP32[(($pc166)>>2)];
      var $sub167=((($81)-(1))|0);
      var $82=$s_addr;
      var $iseq168=(($82+88)|0);
      var $83=HEAP32[(($iseq168)>>2)];
      var $arrayidx169=(($83+($sub167<<2))|0);
      HEAP32[(($arrayidx169)>>2)]=$or165;
      label = 91; break;
    case 33: 
      label = 39; break;
    case 34: 
      var $84=$i_addr;
      var $shr172=$84 >>> 14;
      var $and173=$shr172 & 511;
      var $85=$i0;
      var $shr174=$85 >>> 23;
      var $and175=$shr174 & 511;
      var $cmp176=(($and173)|(0))==(($and175)|(0));
      if ($cmp176) { label = 35; break; } else { label = 37; break; }
    case 35: 
      var $86=$i0;
      var $shr178=$86 >>> 23;
      var $and179=$shr178 & 511;
      var $87=$s_addr;
      var $nlocals180=(($87+112)|0);
      var $88=HEAP32[(($nlocals180)>>2)];
      var $cmp181=(($and179)|(0)) >= (($88)|(0));
      if ($cmp181) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $89=$c0;
      var $and183=$89 & 127;
      var $90=$i_addr;
      var $shr184=$90 >>> 23;
      var $and185=$shr184 & 511;
      var $and186=$and185 & 511;
      var $shl187=$and186 << 23;
      var $or188=$and183 | $shl187;
      var $91=$s_addr;
      var $pc189=(($91+60)|0);
      var $92=HEAP32[(($pc189)>>2)];
      var $sub190=((($92)-(1))|0);
      var $93=$s_addr;
      var $iseq191=(($93+88)|0);
      var $94=HEAP32[(($iseq191)>>2)];
      var $arrayidx192=(($94+($sub190<<2))|0);
      HEAP32[(($arrayidx192)>>2)]=$or188;
      label = 91; break;
    case 37: 
      label = 39; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 89; break;
    case 40: 
      var $95=$val_addr;
      var $tobool195=(($95)|(0))!=0;
      if ($tobool195) { label = 41; break; } else { label = 42; break; }
    case 41: 
      label = 89; break;
    case 42: 
      var $96=$c0;
      var $cmp198=(($96)|(0))==1;
      if ($cmp198) { label = 43; break; } else { label = 46; break; }
    case 43: 
      var $97=$i_addr;
      var $shr200=$97 >>> 23;
      var $and201=$shr200 & 511;
      var $98=$i0;
      var $shr202=$98 >>> 23;
      var $and203=$shr202 & 511;
      var $cmp204=(($and201)|(0))==(($and203)|(0));
      if ($cmp204) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $99=$c1;
      var $and206=$99 & 127;
      var $100=$i0;
      var $shr207=$100 >>> 14;
      var $and208=$shr207 & 511;
      var $and209=$and208 & 511;
      var $shl210=$and209 << 23;
      var $or211=$and206 | $shl210;
      var $101=$i_addr;
      var $shr212=$101 >>> 7;
      var $and213=$shr212 & 65535;
      var $and214=$and213 & 65535;
      var $shl215=$and214 << 7;
      var $or216=$or211 | $shl215;
      var $102=$s_addr;
      var $pc217=(($102+60)|0);
      var $103=HEAP32[(($pc217)>>2)];
      var $sub218=((($103)-(1))|0);
      var $104=$s_addr;
      var $iseq219=(($104+88)|0);
      var $105=HEAP32[(($iseq219)>>2)];
      var $arrayidx220=(($105+($sub218<<2))|0);
      HEAP32[(($arrayidx220)>>2)]=$or216;
      label = 91; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 89; break;
    case 47: 
      var $106=$val_addr;
      var $tobool224=(($106)|(0))!=0;
      if ($tobool224) { label = 48; break; } else { label = 49; break; }
    case 48: 
      label = 89; break;
    case 49: 
      var $107=$c0;
      var $cmp227=(($107)|(0))==1;
      if ($cmp227) { label = 50; break; } else { label = 53; break; }
    case 50: 
      var $108=$i_addr;
      var $shr229=$108 >>> 23;
      var $and230=$shr229 & 511;
      var $109=$i0;
      var $shr231=$109 >>> 23;
      var $and232=$shr231 & 511;
      var $cmp233=(($and230)|(0))==(($and232)|(0));
      if ($cmp233) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $110=$c1;
      var $and235=$110 & 127;
      var $111=$i0;
      var $shr236=$111 >>> 14;
      var $and237=$shr236 & 511;
      var $and238=$and237 & 511;
      var $shl239=$and238 << 23;
      var $or240=$and235 | $shl239;
      var $112=$i_addr;
      var $shr241=$112 >>> 14;
      var $and242=$shr241 & 511;
      var $and243=$and242 & 511;
      var $shl244=$and243 << 14;
      var $or245=$or240 | $shl244;
      var $113=$i_addr;
      var $shr246=$113 >>> 7;
      var $and247=$shr246 & 127;
      var $and248=$and247 & 127;
      var $shl249=$and248 << 7;
      var $or250=$or245 | $shl249;
      var $114=$s_addr;
      var $pc251=(($114+60)|0);
      var $115=HEAP32[(($pc251)>>2)];
      var $sub252=((($115)-(1))|0);
      var $116=$s_addr;
      var $iseq253=(($116+88)|0);
      var $117=HEAP32[(($iseq253)>>2)];
      var $arrayidx254=(($117+($sub252<<2))|0);
      HEAP32[(($arrayidx254)>>2)]=$or250;
      label = 91; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 89; break;
    case 54: 
      var $118=$c0;
      var $cmp258=(($118)|(0))==31;
      if ($cmp258) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $119=$i0;
      var $shr260=$119 >>> 23;
      var $and261=$shr260 & 511;
      var $120=$i_addr;
      var $shr262=$120 >>> 23;
      var $and263=$shr262 & 511;
      var $add264=((($and261)+($and263))|0);
      var $and265=$add264 & 511;
      var $shl266=$and265 << 23;
      var $or267=31 | $shl266;
      var $121=$s_addr;
      var $pc268=(($121+60)|0);
      var $122=HEAP32[(($pc268)>>2)];
      var $sub269=((($122)-(1))|0);
      var $123=$s_addr;
      var $iseq270=(($123+88)|0);
      var $124=HEAP32[(($iseq270)>>2)];
      var $arrayidx271=(($124+($sub269<<2))|0);
      HEAP32[(($arrayidx271)>>2)]=$or267;
      label = 91; break;
    case 56: 
      label = 89; break;
    case 57: 
      var $125=$c0;
      var $cmp274=(($125)|(0))==28;
      if ($cmp274) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $126=$i0;
      var $shr276=$126 >>> 23;
      var $and277=$shr276 & 511;
      var $127=$i_addr;
      var $shr278=$127 >>> 23;
      var $and279=$shr278 & 511;
      var $add280=((($and277)+($and279))|0);
      var $and281=$add280 & 511;
      var $shl282=$and281 << 23;
      var $or283=28 | $shl282;
      var $128=$s_addr;
      var $pc284=(($128+60)|0);
      var $129=HEAP32[(($pc284)>>2)];
      var $sub285=((($129)-(1))|0);
      var $130=$s_addr;
      var $iseq286=(($130+88)|0);
      var $131=HEAP32[(($iseq286)>>2)];
      var $arrayidx287=(($131+($sub285<<2))|0);
      HEAP32[(($arrayidx287)>>2)]=$or283;
      label = 91; break;
    case 59: 
      label = 89; break;
    case 60: 
      var $132=$c0;
      if ((($132)|(0))==41) {
        label = 61; break;
      }
      else if ((($132)|(0))==1) {
        label = 62; break;
      }
      else if ((($132)|(0))==3) {
        label = 63; break;
      }
      else if ((($132)|(0))==55 | (($132)|(0))==63 | (($132)|(0))==65 | (($132)|(0))==58 | (($132)|(0))==21) {
        label = 64; break;
      }
      else if ((($132)|(0))==14 | (($132)|(0))==16 | (($132)|(0))==18 | (($132)|(0))==20 | (($132)|(0))==22 | (($132)|(0))==10) {
        label = 65; break;
      }
      else if ((($132)|(0))==4 | (($132)|(0))==9 | (($132)|(0))==13 | (($132)|(0))==15 | (($132)|(0))==17 | (($132)|(0))==11 | (($132)|(0))==2 | (($132)|(0))==61) {
        label = 66; break;
      }
      else if ((($132)|(0))==71) {
        label = 67; break;
      }
      else if ((($132)|(0))==5 | (($132)|(0))==6 | (($132)|(0))==7 | (($132)|(0))==8 | (($132)|(0))==66) {
        label = 68; break;
      }
      else {
      label = 69; break;
      }
    case 61: 
      label = 91; break;
    case 62: 
      var $133=$i0;
      var $shr292=$133 >>> 14;
      var $and293=$shr292 & 511;
      var $and294=$and293 & 511;
      var $shl295=$and294 << 23;
      var $or296=41 | $shl295;
      var $134=$s_addr;
      var $pc297=(($134+60)|0);
      var $135=HEAP32[(($pc297)>>2)];
      var $sub298=((($135)-(1))|0);
      var $136=$s_addr;
      var $iseq299=(($136+88)|0);
      var $137=HEAP32[(($iseq299)>>2)];
      var $arrayidx300=(($137+($sub298<<2))|0);
      HEAP32[(($arrayidx300)>>2)]=$or296;
      label = 91; break;
    case 63: 
      var $138=$i0;
      var $shr302=$138 >>> 7;
      var $and303=$shr302 & 65535;
      var $sub304=((($and303)-(32767))|0);
      var $add305=((($sub304)+(32767))|0);
      var $and306=$add305 & 65535;
      var $shl307=$and306 << 7;
      var $or308=3 | $shl307;
      var $139=$s_addr;
      var $pc309=(($139+60)|0);
      var $140=HEAP32[(($pc309)>>2)];
      var $sub310=((($140)-(1))|0);
      var $141=$s_addr;
      var $iseq311=(($141+88)|0);
      var $142=HEAP32[(($iseq311)>>2)];
      var $arrayidx312=(($142+($sub310<<2))|0);
      HEAP32[(($arrayidx312)>>2)]=$or308;
      var $143=$s_addr;
      _genop($143, 41);
      label = 91; break;
    case 64: 
      var $144=$c0;
      var $and314=$144 & 127;
      var $145=$i0;
      var $shr315=$145 >>> 14;
      var $and316=$shr315 & 511;
      var $and317=$and316 & 511;
      var $shl318=$and317 << 14;
      var $or319=$and314 | $shl318;
      var $146=$i0;
      var $shr320=$146 >>> 7;
      var $and321=$shr320 & 127;
      var $and322=$and321 & 127;
      var $shl323=$and322 << 7;
      var $or324=$or319 | $shl323;
      var $147=$s_addr;
      var $pc325=(($147+60)|0);
      var $148=HEAP32[(($pc325)>>2)];
      var $sub326=((($148)-(1))|0);
      var $149=$s_addr;
      var $iseq327=(($149+88)|0);
      var $150=HEAP32[(($iseq327)>>2)];
      var $arrayidx328=(($150+($sub326<<2))|0);
      HEAP32[(($arrayidx328)>>2)]=$or324;
      var $151=$s_addr;
      _genop($151, 41);
      label = 91; break;
    case 65: 
      var $152=$s_addr;
      var $pc330=(($152+60)|0);
      var $153=HEAP32[(($pc330)>>2)];
      var $dec=((($153)-(1))|0);
      HEAP32[(($pc330)>>2)]=$dec;
      var $154=$s_addr;
      var $155=$i0;
      _genop_peep($154, $155, 0);
      var $156=$s_addr;
      var $pc331=(($156+60)|0);
      var $157=HEAP32[(($pc331)>>2)];
      var $sub332=((($157)-(1))|0);
      var $158=$s_addr;
      var $iseq333=(($158+88)|0);
      var $159=HEAP32[(($iseq333)>>2)];
      var $arrayidx334=(($159+($sub332<<2))|0);
      var $160=HEAP32[(($arrayidx334)>>2)];
      $i0=$160;
      var $161=$s_addr;
      var $162=$i0;
      var $shr335=$162 >>> 23;
      var $and336=$shr335 & 511;
      var $and337=$and336 & 511;
      var $shl338=$and337 << 23;
      var $or339=41 | $shl338;
      _genop($161, $or339);
      label = 91; break;
    case 66: 
      var $163=$c0;
      var $and341=$163 & 127;
      var $164=$i0;
      var $shr342=$164 >>> 7;
      var $and343=$shr342 & 65535;
      var $and344=$and343 & 65535;
      var $shl345=$and344 << 7;
      var $or346=$and341 | $shl345;
      var $165=$s_addr;
      var $pc347=(($165+60)|0);
      var $166=HEAP32[(($pc347)>>2)];
      var $sub348=((($166)-(1))|0);
      var $167=$s_addr;
      var $iseq349=(($167+88)|0);
      var $168=HEAP32[(($iseq349)>>2)];
      var $arrayidx350=(($168+($sub348<<2))|0);
      HEAP32[(($arrayidx350)>>2)]=$or346;
      var $169=$s_addr;
      _genop($169, 41);
      label = 91; break;
    case 67: 
      var $170=$c0;
      var $and352=$170 & 127;
      var $171=$i_addr;
      var $shr353=$171 >>> 23;
      var $and354=$shr353 & 511;
      var $and355=$and354 & 511;
      var $shl356=$and355 << 23;
      var $or357=$and352 | $shl356;
      var $172=$i0;
      var $shr358=$172 >>> 14;
      var $and359=$shr358 & 511;
      var $and360=$and359 & 511;
      var $shl361=$and360 << 14;
      var $or362=$or357 | $shl361;
      var $173=$s_addr;
      var $pc363=(($173+60)|0);
      var $174=HEAP32[(($pc363)>>2)];
      var $sub364=((($174)-(1))|0);
      var $175=$s_addr;
      var $iseq365=(($175+88)|0);
      var $176=HEAP32[(($iseq365)>>2)];
      var $arrayidx366=(($176+($sub364<<2))|0);
      HEAP32[(($arrayidx366)>>2)]=$or362;
      var $177=$s_addr;
      _genop($177, 41);
      label = 91; break;
    case 68: 
      var $178=$c0;
      var $and368=$178 & 127;
      var $179=$s_addr;
      var $pc369=(($179+60)|0);
      var $180=HEAP32[(($pc369)>>2)];
      var $sub370=((($180)-(1))|0);
      var $181=$s_addr;
      var $iseq371=(($181+88)|0);
      var $182=HEAP32[(($iseq371)>>2)];
      var $arrayidx372=(($182+($sub370<<2))|0);
      HEAP32[(($arrayidx372)>>2)]=$and368;
      var $183=$s_addr;
      _genop($183, 41);
      label = 91; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 89; break;
    case 71: 
      var $184=$c0;
      var $cmp376=(($184)|(0))==3;
      if ($cmp376) { label = 72; break; } else { label = 81; break; }
    case 72: 
      var $185=$i0;
      var $shr378=$185 >>> 7;
      var $and379=$shr378 & 65535;
      var $sub380=((($and379)-(32767))|0);
      $c=$sub380;
      var $186=$c1;
      var $cmp381=(($186)|(0))==46;
      if ($cmp381) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $187=$c;
      var $sub383=(((-$187))|0);
      $c=$sub383;
      label = 74; break;
    case 74: 
      var $188=$c;
      var $cmp385=(($188)|(0)) > 127;
      if ($cmp385) { label = 76; break; } else { label = 75; break; }
    case 75: 
      var $189=$c;
      var $cmp386=(($189)|(0)) < -127;
      if ($cmp386) { label = 76; break; } else { label = 77; break; }
    case 76: 
      label = 89; break;
    case 77: 
      var $190=$c;
      var $cmp389=0 <= (($190)|(0));
      if ($cmp389) { label = 78; break; } else { label = 79; break; }
    case 78: 
      var $191=$i_addr;
      var $shr391=$191 >>> 23;
      var $and392=$shr391 & 511;
      var $and393=$and392 & 511;
      var $shl394=$and393 << 23;
      var $or395=45 | $shl394;
      var $192=$i_addr;
      var $shr396=$192 >>> 14;
      var $and397=$shr396 & 511;
      var $and398=$and397 & 511;
      var $shl399=$and398 << 14;
      var $or400=$or395 | $shl399;
      var $193=$c;
      var $and401=$193 & 127;
      var $shl402=$and401 << 7;
      var $or403=$or400 | $shl402;
      var $194=$s_addr;
      var $pc404=(($194+60)|0);
      var $195=HEAP32[(($pc404)>>2)];
      var $sub405=((($195)-(1))|0);
      var $196=$s_addr;
      var $iseq406=(($196+88)|0);
      var $197=HEAP32[(($iseq406)>>2)];
      var $arrayidx407=(($197+($sub405<<2))|0);
      HEAP32[(($arrayidx407)>>2)]=$or403;
      label = 80; break;
    case 79: 
      var $198=$i_addr;
      var $shr408=$198 >>> 23;
      var $and409=$shr408 & 511;
      var $and410=$and409 & 511;
      var $shl411=$and410 << 23;
      var $or412=47 | $shl411;
      var $199=$i_addr;
      var $shr413=$199 >>> 14;
      var $and414=$shr413 & 511;
      var $and415=$and414 & 511;
      var $shl416=$and415 << 14;
      var $or417=$or412 | $shl416;
      var $200=$c;
      var $sub418=(((-$200))|0);
      var $and419=$sub418 & 127;
      var $shl420=$and419 << 7;
      var $or421=$or417 | $shl420;
      var $201=$s_addr;
      var $pc422=(($201+60)|0);
      var $202=HEAP32[(($pc422)>>2)];
      var $sub423=((($202)-(1))|0);
      var $203=$s_addr;
      var $iseq424=(($203+88)|0);
      var $204=HEAP32[(($iseq424)>>2)];
      var $arrayidx425=(($204+($sub423<<2))|0);
      HEAP32[(($arrayidx425)>>2)]=$or421;
      label = 80; break;
    case 80: 
      label = 91; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $205=$c0;
      var $cmp429=(($205)|(0))==61;
      if ($cmp429) { label = 83; break; } else { label = 87; break; }
    case 83: 
      var $206=$i0;
      var $shr432=$206 >>> 7;
      var $and433=$shr432 & 65535;
      $i431=$and433;
      var $207=$i431;
      var $208=$s_addr;
      var $irep=(($208+100)|0);
      var $209=HEAP32[(($irep)>>2)];
      var $pool=(($209+16)|0);
      var $210=HEAP32[(($pool)>>2)];
      var $arrayidx434=(($210+((($207)*(12))&-1))|0);
      var $tt=(($arrayidx434+8)|0);
      var $211=HEAP32[(($tt)>>2)];
      var $cmp435=(($211)|(0))==16;
      if ($cmp435) { label = 84; break; } else { label = 86; break; }
    case 84: 
      var $212=$i431;
      var $213=$s_addr;
      var $irep437=(($213+100)|0);
      var $214=HEAP32[(($irep437)>>2)];
      var $pool438=(($214+16)|0);
      var $215=HEAP32[(($pool438)>>2)];
      var $arrayidx439=(($215+((($212)*(12))&-1))|0);
      var $value=(($arrayidx439)|0);
      var $p=$value;
      var $216=HEAP32[(($p)>>2)];
      var $217=$216;
      var $len=(($217+12)|0);
      var $218=HEAP32[(($len)>>2)];
      var $cmp440=(($218)|(0))==0;
      if ($cmp440) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $219=$s_addr;
      var $pc442=(($219+60)|0);
      var $220=HEAP32[(($pc442)>>2)];
      var $dec443=((($220)-(1))|0);
      HEAP32[(($pc442)>>2)]=$dec443;
      label = 91; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 89; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      var $221=$s_addr;
      var $222=$i_addr;
      _genop($221, $222);
      label = 91; break;
    case 91: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _lambda_body($s, $tree, $blk) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $tree_addr;
      var $blk_addr;
      var $idx;
      var $base;
      var $c;
      var $lp;
      var $a;
      var $ma;
      var $oa;
      var $ra;
      var $pa;
      var $ka;
      var $kd;
      var $ba;
      var $pos;
      var $i;
      var $n;
      var $opt;
      var $idx79;
      $s_addr=$s;
      $tree_addr=$tree;
      $blk_addr=$blk;
      var $0=$s_addr;
      var $idx1=(($0+124)|0);
      var $1=HEAP32[(($idx1)>>2)];
      $base=$1;
      var $2=$s_addr;
      var $mrb=(($2)|0);
      var $3=HEAP32[(($mrb)>>2)];
      var $4=$s_addr;
      var $5=$tree_addr;
      var $car=(($5)|0);
      var $6=HEAP32[(($car)>>2)];
      var $call=_scope_new($3, $4, $6);
      $s_addr=$call;
      var $7=$s_addr;
      var $idx2=(($7+124)|0);
      var $8=HEAP32[(($idx2)>>2)];
      $idx=$8;
      var $9=$blk_addr;
      var $tobool=(($9)|(0))!=0;
      var $lnot=$tobool ^ 1;
      var $lnot_ext=(($lnot)&(1));
      var $conv=(($lnot_ext) & 255);
      var $10=$s_addr;
      var $bf_value=$conv & 1;
      var $11=$10;
      var $bf_field_offs=(($11+69)|0);
      var $12=$bf_value & 1;
      var $13=$12 << 7;
      var $14=HEAP8[($bf_field_offs)];
      var $15=$14 & 127;
      var $16=$15 | $13;
      HEAP8[($bf_field_offs)]=$16;
      var $17=$blk_addr;
      var $tobool3=(($17)|(0))!=0;
      if ($tobool3) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $18=$s_addr;
      var $call4=_loop_push($18, 1);
      $lp=$call4;
      var $19=$s_addr;
      var $call5=_new_label($19);
      var $20=$lp;
      var $pc1=(($20+4)|0);
      HEAP32[(($pc1)>>2)]=$call5;
      label = 4; break;
    case 4: 
      var $21=$tree_addr;
      var $cdr=(($21+4)|0);
      var $22=HEAP32[(($cdr)>>2)];
      $tree_addr=$22;
      var $23=$tree_addr;
      var $car6=(($23)|0);
      var $24=HEAP32[(($car6)>>2)];
      var $tobool7=(($24)|(0))!=0;
      if ($tobool7) { label = 5; break; } else { label = 20; break; }
    case 5: 
      var $25=$tree_addr;
      var $car9=(($25)|0);
      var $26=HEAP32[(($car9)>>2)];
      var $car10=(($26)|0);
      var $27=HEAP32[(($car10)>>2)];
      var $call11=_node_len($27);
      $ma=$call11;
      var $28=$tree_addr;
      var $car12=(($28)|0);
      var $29=HEAP32[(($car12)>>2)];
      var $car13=(($29)|0);
      var $30=HEAP32[(($car13)>>2)];
      $n=$30;
      label = 6; break;
    case 6: 
      var $31=$n;
      var $tobool14=(($31)|(0))!=0;
      if ($tobool14) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $32=$n;
      var $cdr15=(($32+4)|0);
      var $33=HEAP32[(($cdr15)>>2)];
      $n=$33;
      label = 6; break;
    case 8: 
      var $34=$tree_addr;
      var $car16=(($34)|0);
      var $35=HEAP32[(($car16)>>2)];
      var $cdr17=(($35+4)|0);
      var $36=HEAP32[(($cdr17)>>2)];
      var $car18=(($36)|0);
      var $37=HEAP32[(($car18)>>2)];
      var $call19=_node_len($37);
      $oa=$call19;
      var $38=$tree_addr;
      var $car20=(($38)|0);
      var $39=HEAP32[(($car20)>>2)];
      var $cdr21=(($39+4)|0);
      var $40=HEAP32[(($cdr21)>>2)];
      var $cdr22=(($40+4)|0);
      var $41=HEAP32[(($cdr22)>>2)];
      var $car23=(($41)|0);
      var $42=HEAP32[(($car23)>>2)];
      var $tobool24=(($42)|(0))!=0;
      var $cond=$tobool24 ? 1 : 0;
      $ra=$cond;
      var $43=$tree_addr;
      var $car25=(($43)|0);
      var $44=HEAP32[(($car25)>>2)];
      var $cdr26=(($44+4)|0);
      var $45=HEAP32[(($cdr26)>>2)];
      var $cdr27=(($45+4)|0);
      var $46=HEAP32[(($cdr27)>>2)];
      var $cdr28=(($46+4)|0);
      var $47=HEAP32[(($cdr28)>>2)];
      var $car29=(($47)|0);
      var $48=HEAP32[(($car29)>>2)];
      var $call30=_node_len($48);
      $pa=$call30;
      $kd=0;
      $ka=0;
      var $49=$tree_addr;
      var $car31=(($49)|0);
      var $50=HEAP32[(($car31)>>2)];
      var $cdr32=(($50+4)|0);
      var $51=HEAP32[(($cdr32)>>2)];
      var $cdr33=(($51+4)|0);
      var $52=HEAP32[(($cdr33)>>2)];
      var $cdr34=(($52+4)|0);
      var $53=HEAP32[(($cdr34)>>2)];
      var $cdr35=(($53+4)|0);
      var $54=HEAP32[(($cdr35)>>2)];
      var $tobool36=(($54)|(0))!=0;
      var $cond37=$tobool36 ? 1 : 0;
      $ba=$cond37;
      var $55=$ma;
      var $and=$55 & 31;
      var $shl=$and << 18;
      var $56=$oa;
      var $and38=$56 & 31;
      var $shl39=$and38 << 13;
      var $or=$shl | $shl39;
      var $57=$ra;
      var $and40=$57 & 1;
      var $shl41=$and40 << 12;
      var $or42=$or | $shl41;
      var $58=$pa;
      var $and43=$58 & 31;
      var $shl44=$and43 << 7;
      var $or45=$or42 | $shl44;
      var $59=$ka;
      var $and46=$59 & 31;
      var $shl47=$and46 << 2;
      var $or48=$or45 | $shl47;
      var $60=$kd;
      var $and49=$60 & 1;
      var $shl50=$and49 << 1;
      var $or51=$or48 | $shl50;
      var $61=$ba;
      var $and52=$61 & 1;
      var $or53=$or51 | $and52;
      $a=$or53;
      var $62=$ma;
      var $63=$oa;
      var $add=((($62)+($63))|0);
      var $and54=$add & 63;
      var $shl55=$and54 << 6;
      var $64=$ra;
      var $and56=$64 & 1;
      var $shl57=$and56 << 5;
      var $or58=$shl55 | $shl57;
      var $65=$pa;
      var $and59=$65 & 31;
      var $or60=$or58 | $and59;
      var $66=$s_addr;
      var $bf_value61=$or60 & 32767;
      var $67=$bf_value61 << 17;
      var $bf_reload_sext=$67 >> 17;
      var $68=$66;
      var $bf_field_offs62=(($68+68)|0);
      var $69=$bf_field_offs62;
      var $70=$bf_value61 & 32767;
      var $71=HEAP32[(($69)>>2)];
      var $72=$71 & -32768;
      var $73=$72 | $70;
      HEAP32[(($69)>>2)]=$73;
      var $74=$s_addr;
      var $75=$a;
      var $and63=$75 & 33554431;
      var $shl64=$and63 << 7;
      var $or65=38 | $shl64;
      _genop($74, $or65);
      var $76=$s_addr;
      var $call66=_new_label($76);
      $pos=$call66;
      $i=0;
      label = 9; break;
    case 9: 
      var $77=$i;
      var $78=$oa;
      var $cmp=(($77)|(0)) < (($78)|(0));
      if ($cmp) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $79=$s_addr;
      var $call68=_new_label($79);
      var $80=$s_addr;
      _genop($80, 4194199);
      label = 11; break;
    case 11: 
      var $81=$i;
      var $inc=((($81)+(1))|0);
      $i=$inc;
      label = 9; break;
    case 12: 
      var $82=$oa;
      var $cmp69=(($82)|(0)) > 0;
      if ($cmp69) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $83=$s_addr;
      _genop($83, 4194199);
      label = 14; break;
    case 14: 
      var $84=$tree_addr;
      var $car73=(($84)|0);
      var $85=HEAP32[(($car73)>>2)];
      var $cdr74=(($85+4)|0);
      var $86=HEAP32[(($cdr74)>>2)];
      var $car75=(($86)|0);
      var $87=HEAP32[(($car75)>>2)];
      $opt=$87;
      $i=0;
      label = 15; break;
    case 15: 
      var $88=$opt;
      var $tobool77=(($88)|(0))!=0;
      if ($tobool77) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $89=$s_addr;
      var $90=$pos;
      var $91=$i;
      var $add80=((($90)+($91))|0);
      _dispatch($89, $add80);
      var $92=$s_addr;
      var $93=$opt;
      var $car81=(($93)|0);
      var $94=HEAP32[(($car81)>>2)];
      var $cdr82=(($94+4)|0);
      var $95=HEAP32[(($cdr82)>>2)];
      _codegen($92, $95, 1);
      var $96=$s_addr;
      var $97=$opt;
      var $car83=(($97)|0);
      var $98=HEAP32[(($car83)>>2)];
      var $car84=(($98)|0);
      var $99=HEAP32[(($car84)>>2)];
      var $100=$99;
      var $conv85=(($100) & 65535);
      var $call86=_lv_idx($96, $conv85);
      $idx79=$call86;
      var $101=$s_addr;
      var $sp=(($101+56)|0);
      var $102=HEAP32[(($sp)>>2)];
      var $dec=((($102)-(1))|0);
      HEAP32[(($sp)>>2)]=$dec;
      var $103=$s_addr;
      var $104=$idx79;
      var $and87=$104 & 511;
      var $shl88=$and87 << 23;
      var $or89=1 | $shl88;
      var $105=$s_addr;
      var $sp90=(($105+56)|0);
      var $106=HEAP32[(($sp90)>>2)];
      var $and91=$106 & 511;
      var $shl92=$and91 << 14;
      var $or93=$or89 | $shl92;
      _genop_peep($103, $or93, 0);
      var $107=$i;
      var $inc94=((($107)+(1))|0);
      $i=$inc94;
      var $108=$opt;
      var $cdr95=(($108+4)|0);
      var $109=HEAP32[(($cdr95)>>2)];
      $opt=$109;
      label = 15; break;
    case 17: 
      var $110=$oa;
      var $cmp97=(($110)|(0)) > 0;
      if ($cmp97) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $111=$s_addr;
      var $112=$pos;
      var $113=$i;
      var $add100=((($112)+($113))|0);
      _dispatch($111, $add100);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $114=$s_addr;
      var $115=$tree_addr;
      var $cdr103=(($115+4)|0);
      var $116=HEAP32[(($cdr103)>>2)];
      var $car104=(($116)|0);
      var $117=HEAP32[(($car104)>>2)];
      _codegen($114, $117, 1);
      var $118=$s_addr;
      var $sp105=(($118+56)|0);
      var $119=HEAP32[(($sp105)>>2)];
      var $dec106=((($119)-(1))|0);
      HEAP32[(($sp105)>>2)]=$dec106;
      var $120=$s_addr;
      var $pc=(($120+60)|0);
      var $121=HEAP32[(($pc)>>2)];
      var $cmp107=(($121)|(0)) > 0;
      if ($cmp107) { label = 21; break; } else { label = 29; break; }
    case 21: 
      var $122=$s_addr;
      var $pc110=(($122+60)|0);
      var $123=HEAP32[(($pc110)>>2)];
      var $sub=((($123)-(1))|0);
      var $124=$s_addr;
      var $iseq=(($124+88)|0);
      var $125=HEAP32[(($iseq)>>2)];
      var $arrayidx=(($125+($sub<<2))|0);
      var $126=HEAP32[(($arrayidx)>>2)];
      $c=$126;
      var $127=$c;
      var $and111=$127 & 127;
      var $cmp112=(($and111)|(0))!=41;
      if ($cmp112) { label = 24; break; } else { label = 22; break; }
    case 22: 
      var $128=$c;
      var $shr=$128 >>> 14;
      var $and114=$shr & 511;
      var $cmp115=(($and114)|(0))!=0;
      if ($cmp115) { label = 24; break; } else { label = 23; break; }
    case 23: 
      var $129=$s_addr;
      var $pc118=(($129+60)|0);
      var $130=HEAP32[(($pc118)>>2)];
      var $131=$s_addr;
      var $lastlabel=(($131+64)|0);
      var $132=HEAP32[(($lastlabel)>>2)];
      var $cmp119=(($130)|(0))==(($132)|(0));
      if ($cmp119) { label = 24; break; } else { label = 28; break; }
    case 24: 
      var $133=$s_addr;
      var $nregs=(($133+116)|0);
      var $134=HEAP32[(($nregs)>>2)];
      var $cmp122=(($134)|(0))==0;
      if ($cmp122) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $135=$s_addr;
      _genop($135, 5);
      var $136=$s_addr;
      _genop($136, 41);
      label = 27; break;
    case 26: 
      var $137=$s_addr;
      var $138=$s_addr;
      var $sp125=(($138+56)|0);
      var $139=HEAP32[(($sp125)>>2)];
      var $and126=$139 & 511;
      var $shl127=$and126 << 23;
      var $or128=41 | $shl127;
      _genop_peep($137, $or128, 0);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $140=$blk_addr;
      var $tobool132=(($140)|(0))!=0;
      if ($tobool132) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $141=$s_addr;
      _loop_pop($141, 0);
      label = 31; break;
    case 31: 
      var $142=$s_addr;
      _scope_finish($142);
      var $143=$idx;
      var $144=$base;
      var $sub135=((($143)-($144))|0);
      return $sub135;
    default: assert(0, "bad label: " + label);
  }
}
function _for_body($s, $tree) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $tree_addr;
      var $prev;
      var $idx;
      var $base;
      var $lp;
      var $n2;
      var $c;
      $s_addr=$s;
      $tree_addr=$tree;
      var $0=$s_addr;
      $prev=$0;
      var $1=$s_addr;
      var $idx1=(($1+124)|0);
      var $2=HEAP32[(($idx1)>>2)];
      $base=$2;
      var $3=$s_addr;
      var $4=$tree_addr;
      var $cdr=(($4+4)|0);
      var $5=HEAP32[(($cdr)>>2)];
      var $car=(($5)|0);
      var $6=HEAP32[(($car)>>2)];
      _codegen($3, $6, 1);
      var $7=$s_addr;
      var $mrb=(($7)|0);
      var $8=HEAP32[(($mrb)>>2)];
      var $9=$s_addr;
      var $10=$tree_addr;
      var $car2=(($10)|0);
      var $11=HEAP32[(($car2)>>2)];
      var $call=_scope_new($8, $9, $11);
      $s_addr=$call;
      var $12=$s_addr;
      var $idx3=(($12+124)|0);
      var $13=HEAP32[(($idx3)>>2)];
      $idx=$13;
      var $14=$s_addr;
      var $call4=_loop_push($14, 2);
      $lp=$call4;
      var $15=$s_addr;
      var $call5=_new_label($15);
      var $16=$lp;
      var $pc1=(($16+4)|0);
      HEAP32[(($pc1)>>2)]=$call5;
      var $17=$tree_addr;
      var $car6=(($17)|0);
      var $18=HEAP32[(($car6)>>2)];
      $n2=$18;
      var $19=$n2;
      var $car7=(($19)|0);
      var $20=HEAP32[(($car7)>>2)];
      var $tobool=(($20)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $21=$n2;
      var $car8=(($21)|0);
      var $22=HEAP32[(($car8)>>2)];
      var $cdr9=(($22+4)|0);
      var $23=HEAP32[(($cdr9)>>2)];
      var $tobool10=(($23)|(0))!=0;
      if ($tobool10) { label = 6; break; } else { label = 4; break; }
    case 4: 
      var $24=$n2;
      var $cdr12=(($24+4)|0);
      var $25=HEAP32[(($cdr12)>>2)];
      var $tobool13=(($25)|(0))!=0;
      if ($tobool13) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $26=$s_addr;
      _genop($26, 33554470);
      var $27=$s_addr;
      var $28=$n2;
      var $car14=(($28)|0);
      var $29=HEAP32[(($car14)>>2)];
      var $car15=(($29)|0);
      var $30=HEAP32[(($car15)>>2)];
      _gen_assignment($27, $30, 1, 0);
      label = 7; break;
    case 6: 
      var $31=$s_addr;
      _genop($31, 33554470);
      var $32=$s_addr;
      var $33=$n2;
      _gen_vmassignment($32, $33, 1, 1);
      label = 7; break;
    case 7: 
      var $34=$s_addr;
      var $35=$tree_addr;
      var $cdr16=(($35+4)|0);
      var $36=HEAP32[(($cdr16)>>2)];
      var $cdr17=(($36+4)|0);
      var $37=HEAP32[(($cdr17)>>2)];
      var $car18=(($37)|0);
      var $38=HEAP32[(($car18)>>2)];
      _codegen($34, $38, 1);
      var $39=$s_addr;
      var $sp=(($39+56)|0);
      var $40=HEAP32[(($sp)>>2)];
      var $dec=((($40)-(1))|0);
      HEAP32[(($sp)>>2)]=$dec;
      var $41=$s_addr;
      var $pc=(($41+60)|0);
      var $42=HEAP32[(($pc)>>2)];
      var $cmp=(($42)|(0)) > 0;
      if ($cmp) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $43=$s_addr;
      var $pc20=(($43+60)|0);
      var $44=HEAP32[(($pc20)>>2)];
      var $sub=((($44)-(1))|0);
      var $45=$s_addr;
      var $iseq=(($45+88)|0);
      var $46=HEAP32[(($iseq)>>2)];
      var $arrayidx=(($46+($sub<<2))|0);
      var $47=HEAP32[(($arrayidx)>>2)];
      $c=$47;
      var $48=$c;
      var $and=$48 & 127;
      var $cmp21=(($and)|(0))!=41;
      if ($cmp21) { label = 11; break; } else { label = 9; break; }
    case 9: 
      var $49=$c;
      var $shr=$49 >>> 14;
      var $and22=$shr & 511;
      var $cmp23=(($and22)|(0))!=0;
      if ($cmp23) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $50=$s_addr;
      var $pc25=(($50+60)|0);
      var $51=HEAP32[(($pc25)>>2)];
      var $52=$s_addr;
      var $lastlabel=(($52+64)|0);
      var $53=HEAP32[(($lastlabel)>>2)];
      var $cmp26=(($51)|(0))==(($53)|(0));
      if ($cmp26) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $54=$s_addr;
      var $55=$s_addr;
      var $sp28=(($55+56)|0);
      var $56=HEAP32[(($sp28)>>2)];
      var $and29=$56 & 511;
      var $shl=$and29 << 23;
      var $or=41 | $shl;
      _genop_peep($54, $or, 0);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $57=$s_addr;
      _loop_pop($57, 0);
      var $58=$s_addr;
      _scope_finish($58);
      var $59=$prev;
      $s_addr=$59;
      var $60=$s_addr;
      var $61=$s_addr;
      var $sp32=(($61+56)|0);
      var $62=HEAP32[(($sp32)>>2)];
      var $and33=$62 & 511;
      var $shl34=$and33 << 23;
      var $or35=64 | $shl34;
      var $63=$idx;
      var $64=$base;
      var $sub36=((($63)-($64))|0);
      var $and37=$sub36 & 16383;
      var $shl38=$and37 << 9;
      var $or39=$shl38 | 256;
      var $or40=$or35 | $or39;
      _genop($60, $or40);
      var $65=$s_addr;
      var $sp41=(($65+56)|0);
      var $66=HEAP32[(($sp41)>>2)];
      var $dec42=((($66)-(1))|0);
      HEAP32[(($sp41)>>2)]=$dec42;
      var $67=$s_addr;
      var $68=$s_addr;
      var $mrb43=(($68)|0);
      var $69=HEAP32[(($mrb43)>>2)];
      var $call44=_mrb_intern2($69, ((108532)|0), 4);
      var $call45=_new_msym($67, $call44);
      $idx=$call45;
      var $70=$s_addr;
      var $71=$s_addr;
      var $sp46=(($71+56)|0);
      var $72=HEAP32[(($sp46)>>2)];
      var $and47=$72 & 511;
      var $shl48=$and47 << 23;
      var $or49=33 | $shl48;
      var $73=$idx;
      var $and50=$73 & 511;
      var $shl51=$and50 << 14;
      var $or52=$or49 | $shl51;
      _genop($70, $or52);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _gen_call($s, $tree, $name, $sp, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $tree_addr;
      var $name_addr;
      var $sp_addr;
      var $val_addr;
      var $sym;
      var $idx;
      var $n;
      var $noop;
      var $sendv;
      var $blk;
      var $len=__stackBase__;
      var $name44;
      $s_addr=$s;
      $tree_addr=$tree;
      $name_addr=$name;
      $sp_addr=$sp;
      $val_addr=$val;
      var $0=$name_addr;
      var $conv=(($0 << 16) >> 16);
      var $tobool=(($conv)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$name_addr;
      var $conv1=(($1 << 16) >> 16);
      var $cond = $conv1;label = 5; break;
    case 4: 
      var $2=$tree_addr;
      var $cdr=(($2+4)|0);
      var $3=HEAP32[(($cdr)>>2)];
      var $car=(($3)|0);
      var $4=HEAP32[(($car)>>2)];
      var $5=$4;
      var $conv2=(($5) & 65535);
      var $conv3=(($conv2 << 16) >> 16);
      var $cond = $conv3;label = 5; break;
    case 5: 
      var $cond;
      var $conv4=(($cond) & 65535);
      $sym=$conv4;
      $n=0;
      $noop=0;
      $sendv=0;
      $blk=0;
      var $6=$s_addr;
      var $7=$tree_addr;
      var $car5=(($7)|0);
      var $8=HEAP32[(($car5)>>2)];
      _codegen($6, $8, 1);
      var $9=$s_addr;
      var $10=$sym;
      var $call=_new_msym($9, $10);
      $idx=$call;
      var $11=$tree_addr;
      var $cdr6=(($11+4)|0);
      var $12=HEAP32[(($cdr6)>>2)];
      var $cdr7=(($12+4)|0);
      var $13=HEAP32[(($cdr7)>>2)];
      var $car8=(($13)|0);
      var $14=HEAP32[(($car8)>>2)];
      $tree_addr=$14;
      var $15=$tree_addr;
      var $tobool9=(($15)|(0))!=0;
      if ($tobool9) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $16=$s_addr;
      var $17=$tree_addr;
      var $car10=(($17)|0);
      var $18=HEAP32[(($car10)>>2)];
      var $call11=_gen_values($16, $18, 1);
      $n=$call11;
      var $19=$n;
      var $cmp=(($19)|(0)) < 0;
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $sendv=1;
      $noop=1;
      $n=1;
      var $20=$s_addr;
      _push_($20);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $21=$sp_addr;
      var $tobool15=(($21)|(0))!=0;
      if ($tobool15) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $22=$sendv;
      var $tobool17=(($22)|(0))!=0;
      if ($tobool17) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $23=$s_addr;
      var $sp19=(($23+56)|0);
      var $24=HEAP32[(($sp19)>>2)];
      var $dec=((($24)-(1))|0);
      HEAP32[(($sp19)>>2)]=$dec;
      var $25=$s_addr;
      var $26=$s_addr;
      var $sp20=(($26+56)|0);
      var $27=HEAP32[(($sp20)>>2)];
      var $and=$27 & 511;
      var $shl=$and << 23;
      var $or=57 | $shl;
      var $28=$sp_addr;
      var $and21=$28 & 511;
      var $shl22=$and21 << 14;
      var $or23=$or | $shl22;
      _genop($25, $or23);
      var $29=$s_addr;
      _push_($29);
      label = 13; break;
    case 12: 
      var $30=$s_addr;
      var $31=$s_addr;
      var $sp24=(($31+56)|0);
      var $32=HEAP32[(($sp24)>>2)];
      var $and25=$32 & 511;
      var $shl26=$and25 << 23;
      var $or27=1 | $shl26;
      var $33=$sp_addr;
      var $and28=$33 & 511;
      var $shl29=$and28 << 14;
      var $or30=$or27 | $shl29;
      _genop($30, $or30);
      var $34=$s_addr;
      _push_($34);
      var $35=$n;
      var $inc=((($35)+(1))|0);
      $n=$inc;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $36=$tree_addr;
      var $tobool33=(($36)|(0))!=0;
      if ($tobool33) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $37=$tree_addr;
      var $cdr34=(($37+4)|0);
      var $38=HEAP32[(($cdr34)>>2)];
      var $tobool35=(($38)|(0))!=0;
      if ($tobool35) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $noop=1;
      var $39=$s_addr;
      var $40=$tree_addr;
      var $cdr37=(($40+4)|0);
      var $41=HEAP32[(($cdr37)>>2)];
      _codegen($39, $41, 1);
      var $42=$s_addr;
      var $sp38=(($42+56)|0);
      var $43=HEAP32[(($sp38)>>2)];
      var $dec39=((($43)-(1))|0);
      HEAP32[(($sp38)>>2)]=$dec39;
      label = 18; break;
    case 17: 
      var $44=$s_addr;
      var $sp41=(($44+56)|0);
      var $45=HEAP32[(($sp41)>>2)];
      $blk=$45;
      label = 18; break;
    case 18: 
      var $46=$n;
      var $add=((($46)+(1))|0);
      var $47=$s_addr;
      var $sp43=(($47+56)|0);
      var $48=HEAP32[(($sp43)>>2)];
      var $sub=((($48)-($add))|0);
      HEAP32[(($sp43)>>2)]=$sub;
      var $49=$s_addr;
      var $mrb=(($49)|0);
      var $50=HEAP32[(($mrb)>>2)];
      var $51=$sym;
      var $call45=_mrb_sym2name_len($50, $51, $len);
      $name44=$call45;
      var $52=$noop;
      var $tobool46=(($52)|(0))!=0;
      if ($tobool46) { label = 22; break; } else { label = 19; break; }
    case 19: 
      var $53=HEAP32[(($len)>>2)];
      var $cmp48=(($53)|(0))==1;
      if ($cmp48) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $54=$name44;
      var $arrayidx=(($54)|0);
      var $55=HEAP8[($arrayidx)];
      var $conv51=(($55 << 24) >> 24);
      var $cmp52=(($conv51)|(0))==43;
      if ($cmp52) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $56=$s_addr;
      var $57=$s_addr;
      var $sp55=(($57+56)|0);
      var $58=HEAP32[(($sp55)>>2)];
      var $and56=$58 & 511;
      var $shl57=$and56 << 23;
      var $or58=44 | $shl57;
      var $59=$idx;
      var $and59=$59 & 511;
      var $shl60=$and59 << 14;
      var $or61=$or58 | $shl60;
      var $60=$n;
      var $and62=$60 & 127;
      var $shl63=$and62 << 7;
      var $or64=$or61 | $shl63;
      var $61=$val_addr;
      _genop_peep($56, $or64, $61);
      label = 71; break;
    case 22: 
      var $62=$noop;
      var $tobool66=(($62)|(0))!=0;
      if ($tobool66) { label = 26; break; } else { label = 23; break; }
    case 23: 
      var $63=HEAP32[(($len)>>2)];
      var $cmp68=(($63)|(0))==1;
      if ($cmp68) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $64=$name44;
      var $arrayidx71=(($64)|0);
      var $65=HEAP8[($arrayidx71)];
      var $conv72=(($65 << 24) >> 24);
      var $cmp73=(($conv72)|(0))==45;
      if ($cmp73) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $66=$s_addr;
      var $67=$s_addr;
      var $sp76=(($67+56)|0);
      var $68=HEAP32[(($sp76)>>2)];
      var $and77=$68 & 511;
      var $shl78=$and77 << 23;
      var $or79=46 | $shl78;
      var $69=$idx;
      var $and80=$69 & 511;
      var $shl81=$and80 << 14;
      var $or82=$or79 | $shl81;
      var $70=$n;
      var $and83=$70 & 127;
      var $shl84=$and83 << 7;
      var $or85=$or82 | $shl84;
      var $71=$val_addr;
      _genop_peep($66, $or85, $71);
      label = 70; break;
    case 26: 
      var $72=$noop;
      var $tobool87=(($72)|(0))!=0;
      if ($tobool87) { label = 30; break; } else { label = 27; break; }
    case 27: 
      var $73=HEAP32[(($len)>>2)];
      var $cmp89=(($73)|(0))==1;
      if ($cmp89) { label = 28; break; } else { label = 30; break; }
    case 28: 
      var $74=$name44;
      var $arrayidx92=(($74)|0);
      var $75=HEAP8[($arrayidx92)];
      var $conv93=(($75 << 24) >> 24);
      var $cmp94=(($conv93)|(0))==42;
      if ($cmp94) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $76=$s_addr;
      var $77=$s_addr;
      var $sp97=(($77+56)|0);
      var $78=HEAP32[(($sp97)>>2)];
      var $and98=$78 & 511;
      var $shl99=$and98 << 23;
      var $or100=48 | $shl99;
      var $79=$idx;
      var $and101=$79 & 511;
      var $shl102=$and101 << 14;
      var $or103=$or100 | $shl102;
      var $80=$n;
      var $and104=$80 & 127;
      var $shl105=$and104 << 7;
      var $or106=$or103 | $shl105;
      _genop($76, $or106);
      label = 69; break;
    case 30: 
      var $81=$noop;
      var $tobool108=(($81)|(0))!=0;
      if ($tobool108) { label = 34; break; } else { label = 31; break; }
    case 31: 
      var $82=HEAP32[(($len)>>2)];
      var $cmp110=(($82)|(0))==1;
      if ($cmp110) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $83=$name44;
      var $arrayidx113=(($83)|0);
      var $84=HEAP8[($arrayidx113)];
      var $conv114=(($84 << 24) >> 24);
      var $cmp115=(($conv114)|(0))==47;
      if ($cmp115) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $85=$s_addr;
      var $86=$s_addr;
      var $sp118=(($86+56)|0);
      var $87=HEAP32[(($sp118)>>2)];
      var $and119=$87 & 511;
      var $shl120=$and119 << 23;
      var $or121=49 | $shl120;
      var $88=$idx;
      var $and122=$88 & 511;
      var $shl123=$and122 << 14;
      var $or124=$or121 | $shl123;
      var $89=$n;
      var $and125=$89 & 127;
      var $shl126=$and125 << 7;
      var $or127=$or124 | $shl126;
      _genop($85, $or127);
      label = 68; break;
    case 34: 
      var $90=$noop;
      var $tobool129=(($90)|(0))!=0;
      if ($tobool129) { label = 38; break; } else { label = 35; break; }
    case 35: 
      var $91=HEAP32[(($len)>>2)];
      var $cmp131=(($91)|(0))==1;
      if ($cmp131) { label = 36; break; } else { label = 38; break; }
    case 36: 
      var $92=$name44;
      var $arrayidx134=(($92)|0);
      var $93=HEAP8[($arrayidx134)];
      var $conv135=(($93 << 24) >> 24);
      var $cmp136=(($conv135)|(0))==60;
      if ($cmp136) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $94=$s_addr;
      var $95=$s_addr;
      var $sp139=(($95+56)|0);
      var $96=HEAP32[(($sp139)>>2)];
      var $and140=$96 & 511;
      var $shl141=$and140 << 23;
      var $or142=51 | $shl141;
      var $97=$idx;
      var $and143=$97 & 511;
      var $shl144=$and143 << 14;
      var $or145=$or142 | $shl144;
      var $98=$n;
      var $and146=$98 & 127;
      var $shl147=$and146 << 7;
      var $or148=$or145 | $shl147;
      _genop($94, $or148);
      label = 67; break;
    case 38: 
      var $99=$noop;
      var $tobool150=(($99)|(0))!=0;
      if ($tobool150) { label = 43; break; } else { label = 39; break; }
    case 39: 
      var $100=HEAP32[(($len)>>2)];
      var $cmp152=(($100)|(0))==2;
      if ($cmp152) { label = 40; break; } else { label = 43; break; }
    case 40: 
      var $101=$name44;
      var $arrayidx155=(($101)|0);
      var $102=HEAP8[($arrayidx155)];
      var $conv156=(($102 << 24) >> 24);
      var $cmp157=(($conv156)|(0))==60;
      if ($cmp157) { label = 41; break; } else { label = 43; break; }
    case 41: 
      var $103=$name44;
      var $arrayidx160=(($103+1)|0);
      var $104=HEAP8[($arrayidx160)];
      var $conv161=(($104 << 24) >> 24);
      var $cmp162=(($conv161)|(0))==61;
      if ($cmp162) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $105=$s_addr;
      var $106=$s_addr;
      var $sp165=(($106+56)|0);
      var $107=HEAP32[(($sp165)>>2)];
      var $and166=$107 & 511;
      var $shl167=$and166 << 23;
      var $or168=52 | $shl167;
      var $108=$idx;
      var $and169=$108 & 511;
      var $shl170=$and169 << 14;
      var $or171=$or168 | $shl170;
      var $109=$n;
      var $and172=$109 & 127;
      var $shl173=$and172 << 7;
      var $or174=$or171 | $shl173;
      _genop($105, $or174);
      label = 66; break;
    case 43: 
      var $110=$noop;
      var $tobool176=(($110)|(0))!=0;
      if ($tobool176) { label = 47; break; } else { label = 44; break; }
    case 44: 
      var $111=HEAP32[(($len)>>2)];
      var $cmp178=(($111)|(0))==1;
      if ($cmp178) { label = 45; break; } else { label = 47; break; }
    case 45: 
      var $112=$name44;
      var $arrayidx181=(($112)|0);
      var $113=HEAP8[($arrayidx181)];
      var $conv182=(($113 << 24) >> 24);
      var $cmp183=(($conv182)|(0))==62;
      if ($cmp183) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $114=$s_addr;
      var $115=$s_addr;
      var $sp186=(($115+56)|0);
      var $116=HEAP32[(($sp186)>>2)];
      var $and187=$116 & 511;
      var $shl188=$and187 << 23;
      var $or189=53 | $shl188;
      var $117=$idx;
      var $and190=$117 & 511;
      var $shl191=$and190 << 14;
      var $or192=$or189 | $shl191;
      var $118=$n;
      var $and193=$118 & 127;
      var $shl194=$and193 << 7;
      var $or195=$or192 | $shl194;
      _genop($114, $or195);
      label = 65; break;
    case 47: 
      var $119=$noop;
      var $tobool197=(($119)|(0))!=0;
      if ($tobool197) { label = 52; break; } else { label = 48; break; }
    case 48: 
      var $120=HEAP32[(($len)>>2)];
      var $cmp199=(($120)|(0))==2;
      if ($cmp199) { label = 49; break; } else { label = 52; break; }
    case 49: 
      var $121=$name44;
      var $arrayidx202=(($121)|0);
      var $122=HEAP8[($arrayidx202)];
      var $conv203=(($122 << 24) >> 24);
      var $cmp204=(($conv203)|(0))==62;
      if ($cmp204) { label = 50; break; } else { label = 52; break; }
    case 50: 
      var $123=$name44;
      var $arrayidx207=(($123+1)|0);
      var $124=HEAP8[($arrayidx207)];
      var $conv208=(($124 << 24) >> 24);
      var $cmp209=(($conv208)|(0))==61;
      if ($cmp209) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $125=$s_addr;
      var $126=$s_addr;
      var $sp212=(($126+56)|0);
      var $127=HEAP32[(($sp212)>>2)];
      var $and213=$127 & 511;
      var $shl214=$and213 << 23;
      var $or215=54 | $shl214;
      var $128=$idx;
      var $and216=$128 & 511;
      var $shl217=$and216 << 14;
      var $or218=$or215 | $shl217;
      var $129=$n;
      var $and219=$129 & 127;
      var $shl220=$and219 << 7;
      var $or221=$or218 | $shl220;
      _genop($125, $or221);
      label = 64; break;
    case 52: 
      var $130=$noop;
      var $tobool223=(($130)|(0))!=0;
      if ($tobool223) { label = 57; break; } else { label = 53; break; }
    case 53: 
      var $131=HEAP32[(($len)>>2)];
      var $cmp225=(($131)|(0))==2;
      if ($cmp225) { label = 54; break; } else { label = 57; break; }
    case 54: 
      var $132=$name44;
      var $arrayidx228=(($132)|0);
      var $133=HEAP8[($arrayidx228)];
      var $conv229=(($133 << 24) >> 24);
      var $cmp230=(($conv229)|(0))==61;
      if ($cmp230) { label = 55; break; } else { label = 57; break; }
    case 55: 
      var $134=$name44;
      var $arrayidx233=(($134+1)|0);
      var $135=HEAP8[($arrayidx233)];
      var $conv234=(($135 << 24) >> 24);
      var $cmp235=(($conv234)|(0))==61;
      if ($cmp235) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $136=$s_addr;
      var $137=$s_addr;
      var $sp238=(($137+56)|0);
      var $138=HEAP32[(($sp238)>>2)];
      var $and239=$138 & 511;
      var $shl240=$and239 << 23;
      var $or241=50 | $shl240;
      var $139=$idx;
      var $and242=$139 & 511;
      var $shl243=$and242 << 14;
      var $or244=$or241 | $shl243;
      var $140=$n;
      var $and245=$140 & 127;
      var $shl246=$and245 << 7;
      var $or247=$or244 | $shl246;
      _genop($136, $or247);
      label = 63; break;
    case 57: 
      var $141=$sendv;
      var $tobool249=(($141)|(0))!=0;
      if ($tobool249) { label = 58; break; } else { label = 59; break; }
    case 58: 
      $n=127;
      label = 59; break;
    case 59: 
      var $142=$blk;
      var $cmp252=(($142)|(0)) > 0;
      if ($cmp252) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $143=$s_addr;
      var $144=$s_addr;
      var $sp255=(($144+56)|0);
      var $145=HEAP32[(($sp255)>>2)];
      var $and256=$145 & 511;
      var $shl257=$and256 << 23;
      var $or258=32 | $shl257;
      var $146=$idx;
      var $and259=$146 & 511;
      var $shl260=$and259 << 14;
      var $or261=$or258 | $shl260;
      var $147=$n;
      var $and262=$147 & 127;
      var $shl263=$and262 << 7;
      var $or264=$or261 | $shl263;
      _genop($143, $or264);
      label = 62; break;
    case 61: 
      var $148=$s_addr;
      var $149=$s_addr;
      var $sp266=(($149+56)|0);
      var $150=HEAP32[(($sp266)>>2)];
      var $and267=$150 & 511;
      var $shl268=$and267 << 23;
      var $or269=33 | $shl268;
      var $151=$idx;
      var $and270=$151 & 511;
      var $shl271=$and270 << 14;
      var $or272=$or269 | $shl271;
      var $152=$n;
      var $and273=$152 & 127;
      var $shl274=$and273 << 7;
      var $or275=$or272 | $shl274;
      _genop($148, $or275);
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $153=$val_addr;
      var $tobool286=(($153)|(0))!=0;
      if ($tobool286) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $154=$s_addr;
      _push_($154);
      label = 73; break;
    case 73: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_sym900($s, $sym) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $s_addr;
      var $sym_addr;
      var $i;
      $s_addr=$s;
      $sym_addr=$sym;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$s_addr;
      var $irep=(($1+100)|0);
      var $2=HEAP32[(($irep)>>2)];
      var $slen=(($2+40)|0);
      var $3=HEAP32[(($slen)>>2)];
      var $cmp=(($0)>>>(0)) < (($3)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $4=$i;
      var $5=$s_addr;
      var $irep1=(($5+100)|0);
      var $6=HEAP32[(($irep1)>>2)];
      var $syms=(($6+20)|0);
      var $7=HEAP32[(($syms)>>2)];
      var $arrayidx=(($7+($4<<1))|0);
      var $8=HEAP16[(($arrayidx)>>1)];
      var $conv=(($8 << 16) >> 16);
      var $9=$sym_addr;
      var $conv2=(($9 << 16) >> 16);
      var $cmp3=(($conv)|(0))==(($conv2)|(0));
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $10=$i;
      $retval=$10;
      label = 16; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      var $12=$s_addr;
      var $irep5=(($12+100)|0);
      var $13=HEAP32[(($irep5)>>2)];
      var $slen6=(($13+40)|0);
      var $14=HEAP32[(($slen6)>>2)];
      var $cmp7=(($14)>>>(0)) > 125;
      if ($cmp7) { label = 9; break; } else { label = 15; break; }
    case 9: 
      var $15=$s_addr;
      var $irep9=(($15+100)|0);
      var $16=HEAP32[(($irep9)>>2)];
      var $slen10=(($16+40)|0);
      var $17=HEAP32[(($slen10)>>2)];
      var $cmp11=(($17)>>>(0)) < 256;
      if ($cmp11) { label = 10; break; } else { label = 15; break; }
    case 10: 
      var $18=$s_addr;
      var $19=$s_addr;
      var $irep14=(($19+100)|0);
      var $20=HEAP32[(($irep14)>>2)];
      var $syms15=(($20+20)|0);
      var $21=HEAP32[(($syms15)>>2)];
      var $22=$21;
      var $call=_codegen_realloc($18, $22, 131072);
      var $23=$call;
      var $24=$s_addr;
      var $irep16=(($24+100)|0);
      var $25=HEAP32[(($irep16)>>2)];
      var $syms17=(($25+20)|0);
      HEAP32[(($syms17)>>2)]=$23;
      $i=0;
      label = 11; break;
    case 11: 
      var $26=$i;
      var $27=$s_addr;
      var $irep19=(($27+100)|0);
      var $28=HEAP32[(($irep19)>>2)];
      var $slen20=(($28+40)|0);
      var $29=HEAP32[(($slen20)>>2)];
      var $sub=(((256)-($29))|0);
      var $cmp21=(($26)>>>(0)) < (($sub)>>>(0));
      if ($cmp21) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $30=$i;
      var $31=$s_addr;
      var $irep24=(($31+100)|0);
      var $32=HEAP32[(($irep24)>>2)];
      var $slen25=(($32+40)|0);
      var $33=HEAP32[(($slen25)>>2)];
      var $add=((($30)+($33))|0);
      var $34=$s_addr;
      var $irep26=(($34+100)|0);
      var $35=HEAP32[(($irep26)>>2)];
      var $syms27=(($35+20)|0);
      var $36=HEAP32[(($syms27)>>2)];
      var $arrayidx28=(($36+($add<<1))|0);
      HEAP16[(($arrayidx28)>>1)]=0;
      label = 13; break;
    case 13: 
      var $37=$i;
      var $inc30=((($37)+(1))|0);
      $i=$inc30;
      label = 11; break;
    case 14: 
      var $38=$s_addr;
      var $irep32=(($38+100)|0);
      var $39=HEAP32[(($irep32)>>2)];
      var $slen33=(($39+40)|0);
      HEAP32[(($slen33)>>2)]=256;
      label = 15; break;
    case 15: 
      var $40=$sym_addr;
      var $41=$s_addr;
      var $irep35=(($41+100)|0);
      var $42=HEAP32[(($irep35)>>2)];
      var $slen36=(($42+40)|0);
      var $43=HEAP32[(($slen36)>>2)];
      var $44=$s_addr;
      var $irep37=(($44+100)|0);
      var $45=HEAP32[(($irep37)>>2)];
      var $syms38=(($45+20)|0);
      var $46=HEAP32[(($syms38)>>2)];
      var $arrayidx39=(($46+($43<<1))|0);
      HEAP16[(($arrayidx39)>>1)]=$40;
      var $47=$s_addr;
      var $irep40=(($47+100)|0);
      var $48=HEAP32[(($irep40)>>2)];
      var $slen41=(($48+40)|0);
      var $49=HEAP32[(($slen41)>>2)];
      var $inc42=((($49)+(1))|0);
      HEAP32[(($slen41)>>2)]=$inc42;
      $retval=$49;
      label = 16; break;
    case 16: 
      var $50=$retval;
      return $50;
    default: assert(0, "bad label: " + label);
  }
}
function _nosplat($t) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      $t_addr=$t;
      label = 3; break;
    case 3: 
      var $0=$t_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $1=$t_addr;
      var $car=(($1)|0);
      var $2=HEAP32[(($car)>>2)];
      var $car1=(($2)|0);
      var $3=HEAP32[(($car1)>>2)];
      var $4=$3;
      var $cmp=(($4)|(0))==66;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 8; break;
    case 6: 
      var $5=$t_addr;
      var $cdr=(($5+4)|0);
      var $6=HEAP32[(($cdr)>>2)];
      $t_addr=$6;
      label = 3; break;
    case 7: 
      $retval=1;
      label = 8; break;
    case 8: 
      var $7=$retval;
      return $7;
    default: assert(0, "bad label: " + label);
  }
}
function _lv_idx($s, $id) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $s_addr;
      var $id_addr;
      var $lv;
      var $n;
      $s_addr=$s;
      $id_addr=$id;
      var $0=$s_addr;
      var $lv1=(($0+52)|0);
      var $1=HEAP32[(($lv1)>>2)];
      $lv=$1;
      $n=1;
      label = 3; break;
    case 3: 
      var $2=$lv;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $3=$lv;
      var $car=(($3)|0);
      var $4=HEAP32[(($car)>>2)];
      var $5=$4;
      var $conv=(($5) & 65535);
      var $conv2=(($conv << 16) >> 16);
      var $6=$id_addr;
      var $conv3=(($6 << 16) >> 16);
      var $cmp=(($conv2)|(0))==(($conv3)|(0));
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$n;
      $retval=$7;
      label = 8; break;
    case 6: 
      var $8=$n;
      var $inc=((($8)+(1))|0);
      $n=$inc;
      var $9=$lv;
      var $cdr=(($9+4)|0);
      var $10=HEAP32[(($cdr)>>2)];
      $lv=$10;
      label = 3; break;
    case 7: 
      $retval=0;
      label = 8; break;
    case 8: 
      var $11=$retval;
      return $11;
    default: assert(0, "bad label: " + label);
  }
}
function _gen_values($s, $t, $val) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $s_addr;
      var $t_addr;
      var $val_addr;
      var $n;
      $s_addr=$s;
      $t_addr=$t;
      $val_addr=$val;
      $n=0;
      label = 3; break;
    case 3: 
      var $0=$t_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 20; break; }
    case 4: 
      var $1=$n;
      var $cmp=(($1)|(0)) >= 127;
      if ($cmp) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $2=$t_addr;
      var $car=(($2)|0);
      var $3=HEAP32[(($car)>>2)];
      var $car1=(($3)|0);
      var $4=HEAP32[(($car1)>>2)];
      var $5=$4;
      var $cmp2=(($5)|(0))==66;
      if ($cmp2) { label = 6; break; } else { label = 19; break; }
    case 6: 
      var $6=$val_addr;
      var $tobool3=(($6)|(0))!=0;
      if ($tobool3) { label = 7; break; } else { label = 14; break; }
    case 7: 
      var $7=$n;
      var $8=$s_addr;
      var $sp=(($8+56)|0);
      var $9=HEAP32[(($sp)>>2)];
      var $sub=((($9)-($7))|0);
      HEAP32[(($sp)>>2)]=$sub;
      var $10=$s_addr;
      var $11=$s_addr;
      var $sp5=(($11+56)|0);
      var $12=HEAP32[(($sp5)>>2)];
      var $and=$12 & 511;
      var $shl=$and << 23;
      var $or=55 | $shl;
      var $13=$s_addr;
      var $sp6=(($13+56)|0);
      var $14=HEAP32[(($sp6)>>2)];
      var $and7=$14 & 511;
      var $shl8=$and7 << 14;
      var $or9=$or | $shl8;
      var $15=$n;
      var $and10=$15 & 127;
      var $shl11=$and10 << 7;
      var $or12=$or9 | $shl11;
      _genop($10, $or12);
      var $16=$s_addr;
      _push_($16);
      var $17=$s_addr;
      var $18=$t_addr;
      var $car13=(($18)|0);
      var $19=HEAP32[(($car13)>>2)];
      _codegen($17, $19, 1);
      var $20=$s_addr;
      var $sp14=(($20+56)|0);
      var $21=HEAP32[(($sp14)>>2)];
      var $dec=((($21)-(1))|0);
      HEAP32[(($sp14)>>2)]=$dec;
      var $22=$s_addr;
      var $sp15=(($22+56)|0);
      var $23=HEAP32[(($sp15)>>2)];
      var $dec16=((($23)-(1))|0);
      HEAP32[(($sp15)>>2)]=$dec16;
      var $24=$s_addr;
      var $25=$s_addr;
      var $sp17=(($25+56)|0);
      var $26=HEAP32[(($sp17)>>2)];
      var $and18=$26 & 511;
      var $shl19=$and18 << 23;
      var $or20=56 | $shl19;
      var $27=$s_addr;
      var $sp21=(($27+56)|0);
      var $28=HEAP32[(($sp21)>>2)];
      var $add=((($28)+(1))|0);
      var $and22=$add & 511;
      var $shl23=$and22 << 14;
      var $or24=$or20 | $shl23;
      _genop($24, $or24);
      var $29=$t_addr;
      var $cdr=(($29+4)|0);
      var $30=HEAP32[(($cdr)>>2)];
      $t_addr=$30;
      label = 8; break;
    case 8: 
      var $31=$t_addr;
      var $tobool26=(($31)|(0))!=0;
      if ($tobool26) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $32=$s_addr;
      _push_($32);
      var $33=$s_addr;
      var $34=$t_addr;
      var $car28=(($34)|0);
      var $35=HEAP32[(($car28)>>2)];
      _codegen($33, $35, 1);
      var $36=$s_addr;
      var $sp29=(($36+56)|0);
      var $37=HEAP32[(($sp29)>>2)];
      var $dec30=((($37)-(1))|0);
      HEAP32[(($sp29)>>2)]=$dec30;
      var $38=$s_addr;
      var $sp31=(($38+56)|0);
      var $39=HEAP32[(($sp31)>>2)];
      var $dec32=((($39)-(1))|0);
      HEAP32[(($sp31)>>2)]=$dec32;
      var $40=$t_addr;
      var $car33=(($40)|0);
      var $41=HEAP32[(($car33)>>2)];
      var $car34=(($41)|0);
      var $42=HEAP32[(($car34)>>2)];
      var $43=$42;
      var $cmp35=(($43)|(0))==66;
      if ($cmp35) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $44=$s_addr;
      var $45=$s_addr;
      var $sp37=(($45+56)|0);
      var $46=HEAP32[(($sp37)>>2)];
      var $and38=$46 & 511;
      var $shl39=$and38 << 23;
      var $or40=56 | $shl39;
      var $47=$s_addr;
      var $sp41=(($47+56)|0);
      var $48=HEAP32[(($sp41)>>2)];
      var $add42=((($48)+(1))|0);
      var $and43=$add42 & 511;
      var $shl44=$and43 << 14;
      var $or45=$or40 | $shl44;
      _genop($44, $or45);
      label = 12; break;
    case 11: 
      var $49=$s_addr;
      var $50=$s_addr;
      var $sp46=(($50+56)|0);
      var $51=HEAP32[(($sp46)>>2)];
      var $and47=$51 & 511;
      var $shl48=$and47 << 23;
      var $or49=57 | $shl48;
      var $52=$s_addr;
      var $sp50=(($52+56)|0);
      var $53=HEAP32[(($sp50)>>2)];
      var $add51=((($53)+(1))|0);
      var $and52=$add51 & 511;
      var $shl53=$and52 << 14;
      var $or54=$or49 | $shl53;
      _genop($49, $or54);
      label = 12; break;
    case 12: 
      var $54=$t_addr;
      var $cdr55=(($54+4)|0);
      var $55=HEAP32[(($cdr55)>>2)];
      $t_addr=$55;
      label = 8; break;
    case 13: 
      label = 18; break;
    case 14: 
      var $56=$s_addr;
      var $57=$t_addr;
      var $car57=(($57)|0);
      var $58=HEAP32[(($car57)>>2)];
      var $cdr58=(($58+4)|0);
      var $59=HEAP32[(($cdr58)>>2)];
      _codegen($56, $59, 0);
      var $60=$t_addr;
      var $cdr59=(($60+4)|0);
      var $61=HEAP32[(($cdr59)>>2)];
      $t_addr=$61;
      label = 15; break;
    case 15: 
      var $62=$t_addr;
      var $tobool61=(($62)|(0))!=0;
      if ($tobool61) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $63=$s_addr;
      var $64=$t_addr;
      var $car63=(($64)|0);
      var $65=HEAP32[(($car63)>>2)];
      _codegen($63, $65, 0);
      var $66=$t_addr;
      var $cdr64=(($66+4)|0);
      var $67=HEAP32[(($cdr64)>>2)];
      $t_addr=$67;
      label = 15; break;
    case 17: 
      label = 18; break;
    case 18: 
      $retval=-1;
      label = 21; break;
    case 19: 
      var $68=$s_addr;
      var $69=$t_addr;
      var $car68=(($69)|0);
      var $70=HEAP32[(($car68)>>2)];
      var $71=$val_addr;
      _codegen($68, $70, $71);
      var $72=$n;
      var $inc=((($72)+(1))|0);
      $n=$inc;
      var $73=$t_addr;
      var $cdr69=(($73+4)|0);
      var $74=HEAP32[(($cdr69)>>2)];
      $t_addr=$74;
      label = 3; break;
    case 20: 
      var $75=$n;
      $retval=$75;
      label = 21; break;
    case 21: 
      var $76=$retval;
      return $76;
    default: assert(0, "bad label: " + label);
  }
}
function _gen_vmassignment($s, $tree, $rhs, $val) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $tree_addr;
      var $rhs_addr;
      var $val_addr;
      var $n;
      var $post;
      var $t;
      var $p;
      $s_addr=$s;
      $tree_addr=$tree;
      $rhs_addr=$rhs;
      $val_addr=$val;
      $n=0;
      $post=0;
      var $0=$tree_addr;
      var $car=(($0)|0);
      var $1=HEAP32[(($car)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $2=$tree_addr;
      var $car1=(($2)|0);
      var $3=HEAP32[(($car1)>>2)];
      $t=$3;
      $n=0;
      label = 4; break;
    case 4: 
      var $4=$t;
      var $tobool2=(($4)|(0))!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$s_addr;
      var $6=$s_addr;
      var $sp=(($6+56)|0);
      var $7=HEAP32[(($sp)>>2)];
      var $and=$7 & 511;
      var $shl=$and << 23;
      var $or=58 | $shl;
      var $8=$rhs_addr;
      var $and3=$8 & 511;
      var $shl4=$and3 << 14;
      var $or5=$or | $shl4;
      var $9=$n;
      var $and6=$9 & 127;
      var $shl7=$and6 << 7;
      var $or8=$or5 | $shl7;
      _genop($5, $or8);
      var $10=$s_addr;
      var $11=$t;
      var $car9=(($11)|0);
      var $12=HEAP32[(($car9)>>2)];
      var $13=$s_addr;
      var $sp10=(($13+56)|0);
      var $14=HEAP32[(($sp10)>>2)];
      _gen_assignment($10, $12, $14, 0);
      var $15=$n;
      var $inc=((($15)+(1))|0);
      $n=$inc;
      var $16=$t;
      var $cdr=(($16+4)|0);
      var $17=HEAP32[(($cdr)>>2)];
      $t=$17;
      label = 4; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $18=$tree_addr;
      var $cdr11=(($18+4)|0);
      var $19=HEAP32[(($cdr11)>>2)];
      $t=$19;
      var $20=$t;
      var $tobool12=(($20)|(0))!=0;
      if ($tobool12) { label = 8; break; } else { label = 24; break; }
    case 8: 
      var $21=$t;
      var $cdr14=(($21+4)|0);
      var $22=HEAP32[(($cdr14)>>2)];
      var $tobool15=(($22)|(0))!=0;
      if ($tobool15) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $23=$t;
      var $cdr17=(($23+4)|0);
      var $24=HEAP32[(($cdr17)>>2)];
      var $car18=(($24)|0);
      var $25=HEAP32[(($car18)>>2)];
      $p=$25;
      label = 10; break;
    case 10: 
      var $26=$p;
      var $tobool20=(($26)|(0))!=0;
      if ($tobool20) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $27=$post;
      var $inc22=((($27)+(1))|0);
      $post=$inc22;
      var $28=$p;
      var $cdr23=(($28+4)|0);
      var $29=HEAP32[(($cdr23)>>2)];
      $p=$29;
      label = 10; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $30=$val_addr;
      var $tobool26=(($30)|(0))!=0;
      if ($tobool26) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $31=$s_addr;
      var $32=$s_addr;
      var $sp28=(($32+56)|0);
      var $33=HEAP32[(($sp28)>>2)];
      var $and29=$33 & 511;
      var $shl30=$and29 << 23;
      var $or31=1 | $shl30;
      var $34=$rhs_addr;
      var $and32=$34 & 511;
      var $shl33=$and32 << 14;
      var $or34=$or31 | $shl33;
      _genop($31, $or34);
      var $35=$s_addr;
      _push_($35);
      label = 15; break;
    case 15: 
      var $36=$s_addr;
      var $sp36=(($36+56)|0);
      var $37=HEAP32[(($sp36)>>2)];
      var $dec=((($37)-(1))|0);
      HEAP32[(($sp36)>>2)]=$dec;
      var $38=$s_addr;
      var $39=$s_addr;
      var $sp37=(($39+56)|0);
      var $40=HEAP32[(($sp37)>>2)];
      var $and38=$40 & 511;
      var $shl39=$and38 << 23;
      var $or40=60 | $shl39;
      var $41=$n;
      var $and41=$41 & 511;
      var $shl42=$and41 << 14;
      var $or43=$or40 | $shl42;
      var $42=$post;
      var $and44=$42 & 127;
      var $shl45=$and44 << 7;
      var $or46=$or43 | $shl45;
      _genop($38, $or46);
      $n=1;
      var $43=$t;
      var $car47=(($43)|0);
      var $44=HEAP32[(($car47)>>2)];
      var $tobool48=(($44)|(0))!=0;
      if ($tobool48) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $45=$s_addr;
      var $46=$t;
      var $car50=(($46)|0);
      var $47=HEAP32[(($car50)>>2)];
      var $48=$s_addr;
      var $sp51=(($48+56)|0);
      var $49=HEAP32[(($sp51)>>2)];
      _gen_assignment($45, $47, $49, 0);
      label = 17; break;
    case 17: 
      var $50=$t;
      var $cdr53=(($50+4)|0);
      var $51=HEAP32[(($cdr53)>>2)];
      var $tobool54=(($51)|(0))!=0;
      if ($tobool54) { label = 18; break; } else { label = 23; break; }
    case 18: 
      var $52=$t;
      var $cdr55=(($52+4)|0);
      var $53=HEAP32[(($cdr55)>>2)];
      var $car56=(($53)|0);
      var $54=HEAP32[(($car56)>>2)];
      var $tobool57=(($54)|(0))!=0;
      if ($tobool57) { label = 19; break; } else { label = 23; break; }
    case 19: 
      var $55=$t;
      var $cdr59=(($55+4)|0);
      var $56=HEAP32[(($cdr59)>>2)];
      var $car60=(($56)|0);
      var $57=HEAP32[(($car60)>>2)];
      $t=$57;
      label = 20; break;
    case 20: 
      var $58=$t;
      var $tobool62=(($58)|(0))!=0;
      if ($tobool62) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $59=$s_addr;
      var $60=$t;
      var $car64=(($60)|0);
      var $61=HEAP32[(($car64)>>2)];
      var $62=$s_addr;
      var $sp65=(($62+56)|0);
      var $63=HEAP32[(($sp65)>>2)];
      var $64=$n;
      var $add=((($63)+($64))|0);
      _gen_assignment($59, $61, $add, 0);
      var $65=$t;
      var $cdr66=(($65+4)|0);
      var $66=HEAP32[(($cdr66)>>2)];
      $t=$66;
      var $67=$n;
      var $inc67=((($67)+(1))|0);
      $n=$inc67;
      label = 20; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _loop_break($s, $tree) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $tree_addr;
      var $loop1;
      var $tmp;
      $s_addr=$s;
      $tree_addr=$tree;
      var $0=$s_addr;
      var $loop=(($0+72)|0);
      var $1=HEAP32[(($loop)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$s_addr;
      var $3=$tree_addr;
      _codegen($2, $3, 0);
      var $4=$s_addr;
      _raise_error($4, ((109120)|0));
      label = 20; break;
    case 4: 
      var $5=$tree_addr;
      var $tobool2=(($5)|(0))!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$s_addr;
      var $7=$tree_addr;
      _codegen($6, $7, 1);
      var $8=$s_addr;
      var $sp=(($8+56)|0);
      var $9=HEAP32[(($sp)>>2)];
      var $dec=((($9)-(1))|0);
      HEAP32[(($sp)>>2)]=$dec;
      label = 6; break;
    case 6: 
      var $10=$s_addr;
      var $loop4=(($10+72)|0);
      var $11=HEAP32[(($loop4)>>2)];
      $loop1=$11;
      label = 7; break;
    case 7: 
      var $12=$loop1;
      var $type=(($12)|0);
      var $13=HEAP32[(($type)>>2)];
      var $cmp=(($13)|(0))==3;
      if ($cmp) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $14=$s_addr;
      _genop_peep($14, 8388636, 0);
      var $15=$loop1;
      var $prev=(($15+24)|0);
      var $16=HEAP32[(($prev)>>2)];
      $loop1=$16;
      label = 7; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $17=$loop1;
      var $type6=(($17)|0);
      var $18=HEAP32[(($type6)>>2)];
      var $cmp7=(($18)|(0))==4;
      if ($cmp7) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $19=$loop1;
      var $prev9=(($19+24)|0);
      var $20=HEAP32[(($prev9)>>2)];
      $loop1=$20;
      label = 10; break;
    case 12: 
      var $21=$loop1;
      var $type11=(($21)|0);
      var $22=HEAP32[(($type11)>>2)];
      var $cmp12=(($22)|(0))==0;
      if ($cmp12) { label = 13; break; } else { label = 18; break; }
    case 13: 
      var $23=$s_addr;
      var $ensure_level=(($23+76)|0);
      var $24=HEAP32[(($ensure_level)>>2)];
      var $25=$s_addr;
      var $loop14=(($25+72)|0);
      var $26=HEAP32[(($loop14)>>2)];
      var $ensure_level15=(($26+20)|0);
      var $27=HEAP32[(($ensure_level15)>>2)];
      var $cmp16=(($24)|(0)) > (($27)|(0));
      if ($cmp16) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $28=$s_addr;
      var $29=$s_addr;
      var $ensure_level18=(($29+76)|0);
      var $30=HEAP32[(($ensure_level18)>>2)];
      var $31=$s_addr;
      var $loop19=(($31+72)|0);
      var $32=HEAP32[(($loop19)>>2)];
      var $ensure_level20=(($32+20)|0);
      var $33=HEAP32[(($ensure_level20)>>2)];
      var $sub=((($30)-($33))|0);
      var $and=$sub & 511;
      var $shl=$and << 23;
      var $or=31 | $shl;
      _genop_peep($28, $or, 0);
      label = 15; break;
    case 15: 
      var $34=$tree_addr;
      var $tobool22=(($34)|(0))!=0;
      if ($tobool22) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $35=$s_addr;
      var $36=$loop1;
      var $acc=(($36+16)|0);
      var $37=HEAP32[(($acc)>>2)];
      var $and24=$37 & 511;
      var $shl25=$and24 << 23;
      var $or26=1 | $shl25;
      var $38=$s_addr;
      var $sp27=(($38+56)|0);
      var $39=HEAP32[(($sp27)>>2)];
      var $and28=$39 & 511;
      var $shl29=$and28 << 14;
      var $or30=$or26 | $shl29;
      _genop_peep($35, $or30, 0);
      label = 17; break;
    case 17: 
      var $40=$s_addr;
      var $call=_new_label($40);
      $tmp=$call;
      var $41=$s_addr;
      var $42=$loop1;
      var $pc3=(($42+12)|0);
      var $43=HEAP32[(($pc3)>>2)];
      var $add=((($43)+(32767))|0);
      var $and32=$add & 65535;
      var $shl33=$and32 << 7;
      var $or34=23 | $shl33;
      _genop($41, $or34);
      var $44=$tmp;
      var $45=$loop1;
      var $pc335=(($45+12)|0);
      HEAP32[(($pc335)>>2)]=$44;
      label = 19; break;
    case 18: 
      var $46=$s_addr;
      var $47=$s_addr;
      var $sp37=(($47+56)|0);
      var $48=HEAP32[(($sp37)>>2)];
      var $and38=$48 & 511;
      var $shl39=$and38 << 23;
      var $or40=41 | $shl39;
      var $or41=$or40 | 16384;
      _genop($46, $or41);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _raise_error($s, $msg) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $s_addr;
  var $msg_addr;
  var $idx;
  var $agg_tmp=__stackBase__;
  $s_addr=$s;
  $msg_addr=$msg;
  var $0=$s_addr;
  var $1=$s_addr;
  var $mrb=(($1)|0);
  var $2=HEAP32[(($mrb)>>2)];
  var $3=$msg_addr;
  _mrb_str_new_cstr($agg_tmp, $2, $3);
  var $call=_new_lit($0, $agg_tmp);
  $idx=$call;
  var $4=$s_addr;
  var $5=$idx;
  var $and=$5 & 65535;
  var $shl=$and << 7;
  var $or=8388683 | $shl;
  _genop($4, $or);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_fixnum_value901($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _readint_mrb_int($s, $p, $base, $neg, $overflow) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $s_addr;
      var $p_addr;
      var $base_addr;
      var $neg_addr;
      var $overflow_addr;
      var $e;
      var $result;
      var $n;
      var $c;
      $s_addr=$s;
      $p_addr=$p;
      $base_addr=$base;
      $neg_addr=$neg;
      $overflow_addr=$overflow;
      var $0=$p_addr;
      var $1=$p_addr;
      var $call=_strlen($1);
      var $add_ptr=(($0+$call)|0);
      $e=$add_ptr;
      $result=0;
      var $2=$p_addr;
      var $3=HEAP8[($2)];
      var $conv=(($3 << 24) >> 24);
      var $cmp=(($conv)|(0))==43;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$p_addr;
      var $incdec_ptr=(($4+1)|0);
      $p_addr=$incdec_ptr;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $5=$p_addr;
      var $6=$e;
      var $cmp2=(($5)>>>(0)) < (($6)>>>(0));
      if ($cmp2) { label = 6; break; } else { label = 22; break; }
    case 6: 
      var $7=$p_addr;
      var $8=HEAP8[($7)];
      $c=$8;
      var $9=$c;
      var $conv4=(($9)&(255));
      var $call5=_tolower($conv4);
      var $conv6=(($call5) & 255);
      $c=$conv6;
      $n=0;
      label = 7; break;
    case 7: 
      var $10=$n;
      var $11=$base_addr;
      var $cmp7=(($10)|(0)) < (($11)|(0));
      if ($cmp7) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $12=$n;
      var $arrayidx=((79868+$12)|0);
      var $13=HEAP8[($arrayidx)];
      var $conv9=(($13 << 24) >> 24);
      var $14=$c;
      var $conv10=(($14 << 24) >> 24);
      var $cmp11=(($conv9)|(0))==(($conv10)|(0));
      if ($cmp11) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 12; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $15=$n;
      var $inc=((($15)+(1))|0);
      $n=$inc;
      label = 7; break;
    case 12: 
      var $16=$n;
      var $17=$base_addr;
      var $cmp15=(($16)|(0))==(($17)|(0));
      if ($cmp15) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $18=$s_addr;
      _codegen_error($18, ((109596)|0));
      label = 14; break;
    case 14: 
      var $19=$neg_addr;
      var $tobool=(($19)|(0))!=0;
      if ($tobool) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $20=$n;
      var $add=((($20)-(2147483648))|0);
      var $21=$base_addr;
      var $div=((((($add)|(0)))/((($21)|(0))))&-1);
      var $22=$result;
      var $cmp20=(($div)|(0)) > (($22)|(0));
      if ($cmp20) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $23=$overflow_addr;
      HEAP32[(($23)>>2)]=1;
      $retval=0;
      label = 23; break;
    case 17: 
      var $24=$base_addr;
      var $25=$result;
      var $mul=Math.imul($25,$24);
      $result=$mul;
      var $26=$n;
      var $27=$result;
      var $sub=((($27)-($26))|0);
      $result=$sub;
      label = 21; break;
    case 18: 
      var $28=$n;
      var $sub24=(((2147483647)-($28))|0);
      var $29=$base_addr;
      var $div25=((((($sub24)|(0)))/((($29)|(0))))&-1);
      var $30=$result;
      var $cmp26=(($div25)|(0)) < (($30)|(0));
      if ($cmp26) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $31=$overflow_addr;
      HEAP32[(($31)>>2)]=1;
      $retval=0;
      label = 23; break;
    case 20: 
      var $32=$base_addr;
      var $33=$result;
      var $mul30=Math.imul($33,$32);
      $result=$mul30;
      var $34=$n;
      var $35=$result;
      var $add31=((($35)+($34))|0);
      $result=$add31;
      label = 21; break;
    case 21: 
      var $36=$p_addr;
      var $incdec_ptr33=(($36+1)|0);
      $p_addr=$incdec_ptr33;
      label = 5; break;
    case 22: 
      var $37=$overflow_addr;
      HEAP32[(($37)>>2)]=0;
      var $38=$result;
      $retval=$38;
      label = 23; break;
    case 23: 
      var $39=$retval;
      return $39;
    default: assert(0, "bad label: " + label);
  }
}
function _node_len($tree) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $tree_addr;
      var $n;
      $tree_addr=$tree;
      $n=0;
      label = 3; break;
    case 3: 
      var $0=$tree_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $1=$n;
      var $inc=((($1)+(1))|0);
      $n=$inc;
      var $2=$tree_addr;
      var $cdr=(($2+4)|0);
      var $3=HEAP32[(($cdr)>>2)];
      $tree_addr=$3;
      label = 3; break;
    case 5: 
      var $4=$n;
      return $4;
    default: assert(0, "bad label: " + label);
  }
}
function _calc_crc_16_ccitt($src, $nbytes, $crc) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $src_addr;
      var $nbytes_addr;
      var $crc_addr;
      var $ibyte;
      var $ibit;
      var $crcwk;
      $src_addr=$src;
      $nbytes_addr=$nbytes;
      $crc_addr=$crc;
      var $0=$crc_addr;
      var $conv=(($0)&(65535));
      var $shl=$conv << 8;
      $crcwk=$shl;
      $ibyte=0;
      label = 3; break;
    case 3: 
      var $1=$ibyte;
      var $2=$nbytes_addr;
      var $cmp=(($1)>>>(0)) < (($2)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $3=$src_addr;
      var $incdec_ptr=(($3+1)|0);
      $src_addr=$incdec_ptr;
      var $4=HEAP8[($3)];
      var $conv2=(($4)&(255));
      var $5=$crcwk;
      var $or=$5 | $conv2;
      $crcwk=$or;
      $ibit=0;
      label = 5; break;
    case 5: 
      var $6=$ibit;
      var $cmp4=(($6)>>>(0)) < 8;
      if ($cmp4) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $7=$crcwk;
      var $shl7=$7 << 1;
      $crcwk=$shl7;
      var $8=$crcwk;
      var $and=$8 & 16777216;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $9=$crcwk;
      var $xor=$9 ^ 17834240;
      $crcwk=$xor;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $10=$ibit;
      var $inc=((($10)+(1))|0);
      $ibit=$inc;
      label = 5; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $11=$ibyte;
      var $inc9=((($11)+(1))|0);
      $ibyte=$inc9;
      label = 3; break;
    case 12: 
      var $12=$crcwk;
      var $shr=$12 >>> 8;
      var $conv11=(($shr) & 65535);
      return $conv11;
    default: assert(0, "bad label: " + label);
  }
}
function _readint_float($s, $p, $base) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $p_addr;
      var $base_addr;
      var $e;
      var $f;
      var $n;
      var $c;
      $s_addr=$s;
      $p_addr=$p;
      $base_addr=$base;
      var $0=$p_addr;
      var $1=$p_addr;
      var $call=_strlen($1);
      var $add_ptr=(($0+$call)|0);
      $e=$add_ptr;
      $f=0;
      var $2=$p_addr;
      var $3=HEAP8[($2)];
      var $conv=(($3 << 24) >> 24);
      var $cmp=(($conv)|(0))==43;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$p_addr;
      var $incdec_ptr=(($4+1)|0);
      $p_addr=$incdec_ptr;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $5=$p_addr;
      var $6=$e;
      var $cmp2=(($5)>>>(0)) < (($6)>>>(0));
      if ($cmp2) { label = 6; break; } else { label = 15; break; }
    case 6: 
      var $7=$p_addr;
      var $8=HEAP8[($7)];
      $c=$8;
      var $9=$c;
      var $conv4=(($9)&(255));
      var $call5=_tolower($conv4);
      var $conv6=(($call5) & 255);
      $c=$conv6;
      $n=0;
      label = 7; break;
    case 7: 
      var $10=$n;
      var $11=$base_addr;
      var $cmp7=(($10)|(0)) < (($11)|(0));
      if ($cmp7) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $12=$n;
      var $arrayidx=((79868+$12)|0);
      var $13=HEAP8[($arrayidx)];
      var $conv9=(($13 << 24) >> 24);
      var $14=$c;
      var $conv10=(($14 << 24) >> 24);
      var $cmp11=(($conv9)|(0))==(($conv10)|(0));
      if ($cmp11) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $15=$base_addr;
      var $conv14=(($15)|(0));
      var $16=$f;
      var $mul=($16)*($conv14);
      $f=$mul;
      var $17=$n;
      var $conv15=(($17)|(0));
      var $18=$f;
      var $add=($18)+($conv15);
      $f=$add;
      label = 12; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $19=$n;
      var $inc=((($19)+(1))|0);
      $n=$inc;
      label = 7; break;
    case 12: 
      var $20=$n;
      var $21=$base_addr;
      var $cmp17=(($20)|(0))==(($21)|(0));
      if ($cmp17) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $22=$s_addr;
      _codegen_error($22, ((109596)|0));
      label = 14; break;
    case 14: 
      var $23=$p_addr;
      var $incdec_ptr21=(($23+1)|0);
      $p_addr=$incdec_ptr21;
      label = 5; break;
    case 15: 
      var $24=$f;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}
function _new_lit($s, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $s_addr;
      var $i;
      var $pv=__stackBase__;
      var $len;
      $s_addr=$s;
      var $tt=(($val+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      if ((($0)|(0))==16) {
        label = 3; break;
      }
      else if ((($0)|(0))==6) {
        label = 14; break;
      }
      else {
      label = 15; break;
      }
    case 3: 
      $i=0;
      label = 4; break;
    case 4: 
      var $1=$i;
      var $2=$s_addr;
      var $irep=(($2+100)|0);
      var $3=HEAP32[(($irep)>>2)];
      var $plen=(($3+36)|0);
      var $4=HEAP32[(($plen)>>2)];
      var $cmp=(($1)>>>(0)) < (($4)>>>(0));
      if ($cmp) { label = 5; break; } else { label = 13; break; }
    case 5: 
      var $5=$i;
      var $6=$s_addr;
      var $irep1=(($6+100)|0);
      var $7=HEAP32[(($irep1)>>2)];
      var $pool=(($7+16)|0);
      var $8=HEAP32[(($pool)>>2)];
      var $arrayidx=(($8+((($5)*(12))&-1))|0);
      var $9=$pv;
      var $10=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      var $tt2=(($pv+8)|0);
      var $11=HEAP32[(($tt2)>>2)];
      var $cmp3=(($11)|(0))!=16;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 12; break;
    case 7: 
      var $value=(($pv)|0);
      var $p=$value;
      var $12=HEAP32[(($p)>>2)];
      var $13=$12;
      var $len4=(($13+12)|0);
      var $14=HEAP32[(($len4)>>2)];
      $len=$14;
      var $value5=(($val)|0);
      var $p6=$value5;
      var $15=HEAP32[(($p6)>>2)];
      var $16=$15;
      var $len7=(($16+12)|0);
      var $17=HEAP32[(($len7)>>2)];
      var $cmp8=(($14)|(0))!=(($17)|(0));
      if ($cmp8) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 12; break;
    case 9: 
      var $value11=(($pv)|0);
      var $p12=$value11;
      var $18=HEAP32[(($p12)>>2)];
      var $19=$18;
      var $ptr=(($19+20)|0);
      var $20=HEAP32[(($ptr)>>2)];
      var $value13=(($val)|0);
      var $p14=$value13;
      var $21=HEAP32[(($p14)>>2)];
      var $22=$21;
      var $ptr15=(($22+20)|0);
      var $23=HEAP32[(($ptr15)>>2)];
      var $24=$len;
      var $call=_memcmp($20, $23, $24);
      var $cmp16=(($call)|(0))==0;
      if ($cmp16) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $25=$i;
      $retval=$25;
      label = 25; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $26=$i;
      var $inc=((($26)+(1))|0);
      $i=$inc;
      label = 4; break;
    case 13: 
      label = 22; break;
    case 14: 
      label = 15; break;
    case 15: 
      $i=0;
      label = 16; break;
    case 16: 
      var $27=$i;
      var $28=$s_addr;
      var $irep21=(($28+100)|0);
      var $29=HEAP32[(($irep21)>>2)];
      var $plen22=(($29+36)|0);
      var $30=HEAP32[(($plen22)>>2)];
      var $cmp23=(($27)>>>(0)) < (($30)>>>(0));
      if ($cmp23) { label = 17; break; } else { label = 21; break; }
    case 17: 
      var $31=$s_addr;
      var $mrb=(($31)|0);
      var $32=HEAP32[(($mrb)>>2)];
      var $33=$i;
      var $34=$s_addr;
      var $irep25=(($34+100)|0);
      var $35=HEAP32[(($irep25)>>2)];
      var $pool26=(($35+16)|0);
      var $36=HEAP32[(($pool26)>>2)];
      var $arrayidx27=(($36+((($33)*(12))&-1))|0);
      var $call28=_mrb_obj_equal($32, $arrayidx27, $val);
      var $tobool=(($call28)|(0))!=0;
      if ($tobool) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $37=$i;
      $retval=$37;
      label = 25; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $38=$i;
      var $inc32=((($38)+(1))|0);
      $i=$inc32;
      label = 16; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $39=$s_addr;
      var $irep34=(($39+100)|0);
      var $40=HEAP32[(($irep34)>>2)];
      var $plen35=(($40+36)|0);
      var $41=HEAP32[(($plen35)>>2)];
      var $42=$s_addr;
      var $pcapa=(($42+104)|0);
      var $43=HEAP32[(($pcapa)>>2)];
      var $cmp36=(($41)|(0))==(($43)|(0));
      if ($cmp36) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $44=$s_addr;
      var $pcapa38=(($44+104)|0);
      var $45=HEAP32[(($pcapa38)>>2)];
      var $mul=($45<<1);
      HEAP32[(($pcapa38)>>2)]=$mul;
      var $46=$s_addr;
      var $47=$s_addr;
      var $irep39=(($47+100)|0);
      var $48=HEAP32[(($irep39)>>2)];
      var $pool40=(($48+16)|0);
      var $49=HEAP32[(($pool40)>>2)];
      var $50=$49;
      var $51=$s_addr;
      var $pcapa41=(($51+104)|0);
      var $52=HEAP32[(($pcapa41)>>2)];
      var $mul42=((($52)*(12))&-1);
      var $call43=_codegen_realloc($46, $50, $mul42);
      var $53=$call43;
      var $54=$s_addr;
      var $irep44=(($54+100)|0);
      var $55=HEAP32[(($irep44)>>2)];
      var $pool45=(($55+16)|0);
      HEAP32[(($pool45)>>2)]=$53;
      label = 24; break;
    case 24: 
      var $56=$s_addr;
      var $irep47=(($56+100)|0);
      var $57=HEAP32[(($irep47)>>2)];
      var $plen48=(($57+36)|0);
      var $58=HEAP32[(($plen48)>>2)];
      var $59=$s_addr;
      var $irep49=(($59+100)|0);
      var $60=HEAP32[(($irep49)>>2)];
      var $pool50=(($60+16)|0);
      var $61=HEAP32[(($pool50)>>2)];
      var $arrayidx51=(($61+((($58)*(12))&-1))|0);
      var $62=$arrayidx51;
      var $63=$val;
      assert(12 % 1 === 0);HEAP32[(($62)>>2)]=HEAP32[(($63)>>2)];HEAP32[((($62)+(4))>>2)]=HEAP32[((($63)+(4))>>2)];HEAP32[((($62)+(8))>>2)]=HEAP32[((($63)+(8))>>2)];
      var $64=$s_addr;
      var $irep52=(($64+100)|0);
      var $65=HEAP32[(($irep52)>>2)];
      var $plen53=(($65+36)|0);
      var $66=HEAP32[(($plen53)>>2)];
      var $inc54=((($66)+(1))|0);
      HEAP32[(($plen53)>>2)]=$inc54;
      $i=$66;
      var $67=$i;
      $retval=$67;
      label = 25; break;
    case 25: 
      var $68=$retval;
      STACKTOP = __stackBase__;
      return $68;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_float_value902($agg_result, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $f_addr;
      var $v=__stackBase__;
      $f_addr=$f;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=6;
      var $0=$f_addr;
      var $value=(($v)|0);
      var $f1=$value;
      (HEAPF64[(tempDoublePtr)>>3]=$0,HEAP32[(($f1)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _gen_literal_array($s, $tree, $sym, $val) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $tree_addr;
      var $sym_addr;
      var $val_addr;
      var $i;
      var $j;
      $s_addr=$s;
      $tree_addr=$tree;
      $sym_addr=$sym;
      $val_addr=$val;
      var $0=$val_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 24; break; }
    case 3: 
      $i=0;
      $j=0;
      label = 4; break;
    case 4: 
      var $1=$tree_addr;
      var $tobool1=(($1)|(0))!=0;
      if ($tobool1) { label = 5; break; } else { label = 19; break; }
    case 5: 
      var $2=$tree_addr;
      var $car=(($2)|0);
      var $3=HEAP32[(($car)>>2)];
      var $car2=(($3)|0);
      var $4=HEAP32[(($car2)>>2)];
      var $5=$4;
      if ((($5)|(0))==55) {
        label = 6; break;
      }
      else if ((($5)|(0))==17) {
        label = 10; break;
      }
      else if ((($5)|(0))==100) {
        label = 11; break;
      }
      else {
      label = 16; break;
      }
    case 6: 
      var $6=$tree_addr;
      var $cdr=(($6+4)|0);
      var $7=HEAP32[(($cdr)>>2)];
      var $cmp=(($7)|(0))==0;
      if ($cmp) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $8=$tree_addr;
      var $car3=(($8)|0);
      var $9=HEAP32[(($car3)>>2)];
      var $cdr4=(($9+4)|0);
      var $10=HEAP32[(($cdr4)>>2)];
      var $cdr5=(($10+4)|0);
      var $11=HEAP32[(($cdr5)>>2)];
      var $12=$11;
      var $cmp6=(($12)|(0))==0;
      if ($cmp6) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 16; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $13=$s_addr;
      var $14=$tree_addr;
      var $car9=(($14)|0);
      var $15=HEAP32[(($car9)>>2)];
      _codegen($13, $15, 1);
      var $16=$j;
      var $inc=((($16)+(1))|0);
      $j=$inc;
      label = 16; break;
    case 11: 
      var $17=$j;
      var $cmp11=(($17)|(0)) > 0;
      if ($cmp11) { label = 12; break; } else { label = 15; break; }
    case 12: 
      $j=0;
      var $18=$i;
      var $inc13=((($18)+(1))|0);
      $i=$inc13;
      var $19=$sym_addr;
      var $tobool14=(($19)|(0))!=0;
      if ($tobool14) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $20=$s_addr;
      _gen_send_intern($20);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $21=$j;
      var $cmp18=(($21)|(0)) >= 2;
      if ($cmp18) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $22=$s_addr;
      var $sp=(($22+56)|0);
      var $23=HEAP32[(($sp)>>2)];
      var $dec=((($23)-(1))|0);
      HEAP32[(($sp)>>2)]=$dec;
      var $24=$s_addr;
      var $sp20=(($24+56)|0);
      var $25=HEAP32[(($sp20)>>2)];
      var $dec21=((($25)-(1))|0);
      HEAP32[(($sp20)>>2)]=$dec21;
      var $26=$s_addr;
      var $27=$s_addr;
      var $sp22=(($27+56)|0);
      var $28=HEAP32[(($sp22)>>2)];
      var $and=$28 & 511;
      var $shl=$and << 23;
      var $or=62 | $shl;
      var $29=$s_addr;
      var $sp23=(($29+56)|0);
      var $30=HEAP32[(($sp23)>>2)];
      var $add=((($30)+(1))|0);
      var $and24=$add & 511;
      var $shl25=$and24 << 14;
      var $or26=$or | $shl25;
      _genop_peep($26, $or26, 1);
      var $31=$s_addr;
      _push_($31);
      $j=1;
      label = 18; break;
    case 18: 
      var $32=$tree_addr;
      var $cdr28=(($32+4)|0);
      var $33=HEAP32[(($cdr28)>>2)];
      $tree_addr=$33;
      label = 4; break;
    case 19: 
      var $34=$j;
      var $cmp29=(($34)|(0)) > 0;
      if ($cmp29) { label = 20; break; } else { label = 23; break; }
    case 20: 
      var $35=$i;
      var $inc31=((($35)+(1))|0);
      $i=$inc31;
      var $36=$sym_addr;
      var $tobool32=(($36)|(0))!=0;
      if ($tobool32) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $37=$s_addr;
      _gen_send_intern($37);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $38=$i;
      var $39=$s_addr;
      var $sp36=(($39+56)|0);
      var $40=HEAP32[(($sp36)>>2)];
      var $sub=((($40)-($38))|0);
      HEAP32[(($sp36)>>2)]=$sub;
      var $41=$s_addr;
      var $42=$s_addr;
      var $sp37=(($42+56)|0);
      var $43=HEAP32[(($sp37)>>2)];
      var $and38=$43 & 511;
      var $shl39=$and38 << 23;
      var $or40=55 | $shl39;
      var $44=$s_addr;
      var $sp41=(($44+56)|0);
      var $45=HEAP32[(($sp41)>>2)];
      var $and42=$45 & 511;
      var $shl43=$and42 << 14;
      var $or44=$or40 | $shl43;
      var $46=$i;
      var $and45=$46 & 127;
      var $shl46=$and45 << 7;
      var $or47=$or44 | $shl46;
      _genop($41, $or47);
      var $47=$s_addr;
      _push_($47);
      label = 30; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $48=$tree_addr;
      var $tobool49=(($48)|(0))!=0;
      if ($tobool49) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $49=$tree_addr;
      var $car51=(($49)|0);
      var $50=HEAP32[(($car51)>>2)];
      var $car52=(($50)|0);
      var $51=HEAP32[(($car52)>>2)];
      var $52=$51;
      if ((($52)|(0))==17 | (($52)|(0))==4) {
        label = 27; break;
      }
      else {
      label = 28; break;
      }
    case 27: 
      var $53=$s_addr;
      var $54=$tree_addr;
      var $car54=(($54)|0);
      var $55=HEAP32[(($car54)>>2)];
      _codegen($53, $55, 0);
      label = 28; break;
    case 28: 
      var $56=$tree_addr;
      var $cdr56=(($56+4)|0);
      var $57=HEAP32[(($cdr56)>>2)];
      $tree_addr=$57;
      label = 25; break;
    case 29: 
      label = 30; break;
    case 30: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern903($mrb, $cstr) {
  var label = 0;
  var $mrb_addr;
  var $cstr_addr;
  $mrb_addr=$mrb;
  $cstr_addr=$cstr;
  var $0=$mrb_addr;
  var $1=$cstr_addr;
  var $call=_mrb_intern_cstr($0, $1);
  return $call;
}
function _gen_send_intern($s) {
  var label = 0;
  var $s_addr;
  $s_addr=$s;
  var $0=$s_addr;
  var $sp=(($0+56)|0);
  var $1=HEAP32[(($sp)>>2)];
  var $dec=((($1)-(1))|0);
  HEAP32[(($sp)>>2)]=$dec;
  var $2=$s_addr;
  var $3=$s_addr;
  var $sp1=(($3+56)|0);
  var $4=HEAP32[(($sp1)>>2)];
  var $and=$4 & 511;
  var $shl=$and << 23;
  var $or=32 | $shl;
  var $5=$s_addr;
  var $6=$s_addr;
  var $mrb=(($6)|0);
  var $7=HEAP32[(($mrb)>>2)];
  var $call=_mrb_intern2($7, ((109976)|0), 6);
  var $call2=_new_msym($5, $call);
  var $and3=$call2 & 511;
  var $shl4=$and3 << 14;
  var $or5=$or | $shl4;
  _genop($2, $or5);
  var $8=$s_addr;
  _push_($8);
  return;
}
function _scope_finish($s) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $mrb;
      var $irep;
      var $fname_len;
      var $fname;
      $s_addr=$s;
      var $0=$s_addr;
      var $mrb1=(($0)|0);
      var $1=HEAP32[(($mrb1)>>2)];
      $mrb=$1;
      var $2=$s_addr;
      var $irep2=(($2+100)|0);
      var $3=HEAP32[(($irep2)>>2)];
      $irep=$3;
      var $4=$irep;
      var $flags=(($4+8)|0);
      HEAP8[($flags)]=0;
      var $5=$s_addr;
      var $iseq=(($5+88)|0);
      var $6=HEAP32[(($iseq)>>2)];
      var $tobool=(($6)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $7=$s_addr;
      var $8=$s_addr;
      var $iseq3=(($8+88)|0);
      var $9=HEAP32[(($iseq3)>>2)];
      var $10=$9;
      var $11=$s_addr;
      var $pc=(($11+60)|0);
      var $12=HEAP32[(($pc)>>2)];
      var $mul=($12<<2);
      var $call=_codegen_realloc($7, $10, $mul);
      var $13=$call;
      var $14=$irep;
      var $iseq4=(($14+12)|0);
      HEAP32[(($iseq4)>>2)]=$13;
      var $15=$s_addr;
      var $pc5=(($15+60)|0);
      var $16=HEAP32[(($pc5)>>2)];
      var $17=$irep;
      var $ilen=(($17+32)|0);
      HEAP32[(($ilen)>>2)]=$16;
      var $18=$s_addr;
      var $lines=(($18+92)|0);
      var $19=HEAP32[(($lines)>>2)];
      var $tobool6=(($19)|(0))!=0;
      if ($tobool6) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$s_addr;
      var $21=$s_addr;
      var $lines8=(($21+92)|0);
      var $22=HEAP32[(($lines8)>>2)];
      var $23=$22;
      var $24=$s_addr;
      var $pc9=(($24+60)|0);
      var $25=HEAP32[(($pc9)>>2)];
      var $mul10=($25<<1);
      var $call11=_codegen_realloc($20, $23, $mul10);
      var $26=$call11;
      var $27=$irep;
      var $lines12=(($27+28)|0);
      HEAP32[(($lines12)>>2)]=$26;
      label = 6; break;
    case 5: 
      var $28=$irep;
      var $lines13=(($28+28)|0);
      HEAP32[(($lines13)>>2)]=0;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $29=$s_addr;
      var $30=$irep;
      var $pool=(($30+16)|0);
      var $31=HEAP32[(($pool)>>2)];
      var $32=$31;
      var $33=$irep;
      var $plen=(($33+36)|0);
      var $34=HEAP32[(($plen)>>2)];
      var $mul15=((($34)*(12))&-1);
      var $call16=_codegen_realloc($29, $32, $mul15);
      var $35=$call16;
      var $36=$irep;
      var $pool17=(($36+16)|0);
      HEAP32[(($pool17)>>2)]=$35;
      var $37=$s_addr;
      var $38=$irep;
      var $syms=(($38+20)|0);
      var $39=HEAP32[(($syms)>>2)];
      var $40=$39;
      var $41=$irep;
      var $slen=(($41+40)|0);
      var $42=HEAP32[(($slen)>>2)];
      var $mul18=($42<<1);
      var $call19=_codegen_realloc($37, $40, $mul18);
      var $43=$call19;
      var $44=$irep;
      var $syms20=(($44+20)|0);
      HEAP32[(($syms20)>>2)]=$43;
      var $45=$s_addr;
      var $filename=(($45+80)|0);
      var $46=HEAP32[(($filename)>>2)];
      var $tobool21=(($46)|(0))!=0;
      if ($tobool21) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $47=$s_addr;
      var $filename23=(($47+80)|0);
      var $48=HEAP32[(($filename23)>>2)];
      var $call24=_strlen($48);
      $fname_len=$call24;
      var $49=$s_addr;
      var $50=$fname_len;
      var $add=((($50)+(1))|0);
      var $call25=_codegen_malloc($49, $add);
      $fname=$call25;
      var $51=$fname;
      var $52=$s_addr;
      var $filename26=(($52+80)|0);
      var $53=HEAP32[(($filename26)>>2)];
      var $54=$fname_len;
      assert($54 % 1 === 0);_memcpy($51, $53, $54);
      var $55=$fname_len;
      var $56=$fname;
      var $arrayidx=(($56+$55)|0);
      HEAP8[($arrayidx)]=0;
      var $57=$fname;
      var $58=$irep;
      var $filename27=(($58+24)|0);
      HEAP32[(($filename27)>>2)]=$57;
      label = 9; break;
    case 9: 
      var $59=$s_addr;
      var $nlocals=(($59+112)|0);
      var $60=HEAP32[(($nlocals)>>2)];
      var $conv=(($60) & 65535);
      var $61=$irep;
      var $nlocals29=(($61+4)|0);
      HEAP16[(($nlocals29)>>1)]=$conv;
      var $62=$s_addr;
      var $nregs=(($62+116)|0);
      var $63=HEAP32[(($nregs)>>2)];
      var $conv30=(($63) & 65535);
      var $64=$irep;
      var $nregs31=(($64+6)|0);
      HEAP16[(($nregs31)>>1)]=$conv30;
      var $65=$mrb;
      var $66=$s_addr;
      var $ai=(($66+120)|0);
      var $67=HEAP32[(($ai)>>2)];
      _mrb_gc_arena_restore($65, $67);
      var $68=$s_addr;
      var $mpool=(($68+4)|0);
      var $69=HEAP32[(($mpool)>>2)];
      _mrb_pool_close($69);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _attrsym($s, $a) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $s_addr;
  var $a_addr;
  var $name;
  var $len=__stackBase__;
  var $name2;
  $s_addr=$s;
  $a_addr=$a;
  var $0=$s_addr;
  var $mrb=(($0)|0);
  var $1=HEAP32[(($mrb)>>2)];
  var $2=$a_addr;
  var $call=_mrb_sym2name_len($1, $2, $len);
  $name=$call;
  var $3=$s_addr;
  var $4=HEAP32[(($len)>>2)];
  var $add=((($4)+(1))|0);
  var $call1=_codegen_palloc($3, $add);
  $name2=$call1;
  var $5=$name2;
  var $6=$name;
  var $7=HEAP32[(($len)>>2)];
  assert($7 % 1 === 0);_memcpy($5, $6, $7);
  var $8=HEAP32[(($len)>>2)];
  var $9=$name2;
  var $arrayidx=(($9+$8)|0);
  HEAP8[($arrayidx)]=61;
  var $10=HEAP32[(($len)>>2)];
  var $add2=((($10)+(1))|0);
  var $11=$name2;
  var $arrayidx3=(($11+$add2)|0);
  HEAP8[($arrayidx3)]=0;
  var $12=$s_addr;
  var $mrb4=(($12)|0);
  var $13=HEAP32[(($mrb4)>>2)];
  var $14=$name2;
  var $15=HEAP32[(($len)>>2)];
  var $add5=((($15)+(1))|0);
  var $call6=_mrb_intern2($13, $14, $add5);
  STACKTOP = __stackBase__;
  return $call6;
}
function _codegen_palloc($s, $len) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $len_addr;
      var $p;
      $s_addr=$s;
      $len_addr=$len;
      var $0=$s_addr;
      var $mpool=(($0+4)|0);
      var $1=HEAP32[(($mpool)>>2)];
      var $2=$len_addr;
      var $call=_mrb_pool_alloc($1, $2);
      $p=$call;
      var $3=$p;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$s_addr;
      _codegen_error($4, ((107656)|0));
      label = 4; break;
    case 4: 
      var $5=$p;
      return $5;
    default: assert(0, "bad label: " + label);
  }
}
function _scope_error($s) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      $s_addr=$s;
      _exit(1);
      throw "Reached an unreachable!";
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_exc_new($agg_result, $mrb, $c, $ptr, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $c_addr;
  var $ptr_addr;
  var $len_addr;
  var $agg_tmp=__stackBase__;
  var $agg_tmp1=(__stackBase__)+(12);
  $mrb_addr=$mrb;
  $c_addr=$c;
  $ptr_addr=$ptr;
  $len_addr=$len;
  var $0=$mrb_addr;
  var $1=$c_addr;
  var $2=$1;
  _mrb_obj_value942($agg_tmp, $2);
  var $3=$mrb_addr;
  var $4=$ptr_addr;
  var $5=$len_addr;
  _mrb_str_new($agg_tmp1, $3, $4, $5);
  _mrb_funcall($agg_result, $0, $agg_tmp, ((94116)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp1)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp1)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp1)+(8))>>2)],tempInt));
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_value942($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_exc_new3($agg_result, $mrb, $c, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $c_addr;
  var $tmp=__stackBase__;
  var $agg_tmp=(__stackBase__)+(12);
  $mrb_addr=$mrb;
  $c_addr=$c;
  var $0=$mrb_addr;
  _mrb_str_to_str($tmp, $0, $str);
  var $1=$str;
  var $2=$tmp;
  assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
  var $3=$mrb_addr;
  var $4=$c_addr;
  var $5=$4;
  _mrb_obj_value942($agg_tmp, $5);
  _mrb_funcall($agg_result, $3, $agg_tmp, ((94116)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($str)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($str)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($str)+(8))>>2)],tempInt));
  STACKTOP = __stackBase__;
  return;
}
function _exc_debug_info($mrb, $exc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $exc_addr;
      var $ci;
      var $pc;
      var $agg_tmp=__stackBase__;
      var $irep;
      var $agg_tmp20=(__stackBase__)+(12);
      var $agg_tmp23=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      $exc_addr=$exc;
      var $0=$mrb_addr;
      var $c=(($0+8)|0);
      var $1=HEAP32[(($c)>>2)];
      var $ci1=(($1+16)|0);
      var $2=HEAP32[(($ci1)>>2)];
      $ci=$2;
      var $3=$ci;
      var $pc2=(($3+20)|0);
      var $4=HEAP32[(($pc2)>>2)];
      $pc=$4;
      var $5=$mrb_addr;
      var $6=$exc_addr;
      var $7=$mrb_addr;
      var $call=_mrb_intern2($7, ((103580)|0), 5);
      var $8=$ci;
      var $9=$mrb_addr;
      var $c3=(($9+8)|0);
      var $10=HEAP32[(($c3)>>2)];
      var $cibase=(($10+20)|0);
      var $11=HEAP32[(($cibase)>>2)];
      var $sub_ptr_lhs_cast=$8;
      var $sub_ptr_rhs_cast=$11;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|(0)))/(44))&-1);
      _mrb_fixnum_value959($agg_tmp, $sub_ptr_div);
      _mrb_obj_iv_set($5, $6, $call, $agg_tmp);
      var $12=$ci;
      var $incdec_ptr=((($12)-(44))|0);
      $ci=$incdec_ptr;
      label = 3; break;
    case 3: 
      var $13=$ci;
      var $14=$mrb_addr;
      var $c4=(($14+8)|0);
      var $15=HEAP32[(($c4)>>2)];
      var $cibase5=(($15+20)|0);
      var $16=HEAP32[(($cibase5)>>2)];
      var $cmp=(($13)>>>(0)) >= (($16)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $17=$ci;
      var $proc=(($17+4)|0);
      var $18=HEAP32[(($proc)>>2)];
      var $tobool=(($18)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 12; break; }
    case 5: 
      var $19=$ci;
      var $proc6=(($19+4)|0);
      var $20=HEAP32[(($proc6)>>2)];
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      var $23=$22 >>> 11;
      var $bf_clear=$23 & 2097151;
      var $and=$bf_clear & 128;
      var $cmp7=(($and)|(0))!=0;
      if ($cmp7) { label = 12; break; } else { label = 6; break; }
    case 6: 
      var $24=$ci;
      var $proc8=(($24+4)|0);
      var $25=HEAP32[(($proc8)>>2)];
      var $body=(($25+12)|0);
      var $irep9=$body;
      var $26=HEAP32[(($irep9)>>2)];
      $irep=$26;
      var $27=$irep;
      var $filename=(($27+24)|0);
      var $28=HEAP32[(($filename)>>2)];
      var $tobool10=(($28)|(0))!=0;
      if ($tobool10) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $29=$irep;
      var $lines=(($29+28)|0);
      var $30=HEAP32[(($lines)>>2)];
      var $tobool12=(($30)|(0))!=0;
      if ($tobool12) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $31=$irep;
      var $iseq=(($31+12)|0);
      var $32=HEAP32[(($iseq)>>2)];
      var $33=$pc;
      var $cmp14=(($32)>>>(0)) <= (($33)>>>(0));
      if ($cmp14) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $34=$pc;
      var $35=$irep;
      var $iseq16=(($35+12)|0);
      var $36=HEAP32[(($iseq16)>>2)];
      var $37=$irep;
      var $ilen=(($37+32)|0);
      var $38=HEAP32[(($ilen)>>2)];
      var $add_ptr=(($36+($38<<2))|0);
      var $cmp17=(($34)>>>(0)) < (($add_ptr)>>>(0));
      if ($cmp17) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$mrb_addr;
      var $40=$exc_addr;
      var $41=$mrb_addr;
      var $call19=_mrb_intern2($41, ((106528)|0), 4);
      var $42=$mrb_addr;
      var $43=$irep;
      var $filename21=(($43+24)|0);
      var $44=HEAP32[(($filename21)>>2)];
      _mrb_str_new_cstr($agg_tmp20, $42, $44);
      _mrb_obj_iv_set($39, $40, $call19, $agg_tmp20);
      var $45=$mrb_addr;
      var $46=$exc_addr;
      var $47=$mrb_addr;
      var $call22=_mrb_intern2($47, ((106124)|0), 4);
      var $48=$pc;
      var $49=$irep;
      var $iseq24=(($49+12)|0);
      var $50=HEAP32[(($iseq24)>>2)];
      var $sub_ptr_lhs_cast25=$48;
      var $sub_ptr_rhs_cast26=$50;
      var $sub_ptr_sub27=((($sub_ptr_lhs_cast25)-($sub_ptr_rhs_cast26))|0);
      var $sub_ptr_div28=((((($sub_ptr_sub27)|(0)))/(4))&-1);
      var $sub=((($sub_ptr_div28)-(1))|0);
      var $51=$irep;
      var $lines29=(($51+28)|0);
      var $52=HEAP32[(($lines29)>>2)];
      var $arrayidx=(($52+($sub<<1))|0);
      var $53=HEAP16[(($arrayidx)>>1)];
      var $conv=(($53)&(65535));
      _mrb_fixnum_value959($agg_tmp23, $conv);
      _mrb_obj_iv_set($45, $46, $call22, $agg_tmp23);
      label = 13; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $54=$ci;
      var $pc31=(($54+20)|0);
      var $55=HEAP32[(($pc31)>>2)];
      $pc=$55;
      var $56=$ci;
      var $incdec_ptr32=((($56)-(44))|0);
      $ci=$incdec_ptr32;
      label = 3; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_raise($mrb, $c, $msg) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $c_addr;
  var $msg_addr;
  var $mesg=__stackBase__;
  var $tmp=(__stackBase__)+(12);
  var $agg_tmp=(__stackBase__)+(24);
  $mrb_addr=$mrb;
  $c_addr=$c;
  $msg_addr=$msg;
  var $0=$mrb_addr;
  var $1=$msg_addr;
  _mrb_str_new_cstr($tmp, $0, $1);
  var $2=$mesg;
  var $3=$tmp;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  var $4=$mrb_addr;
  var $5=$mrb_addr;
  var $6=$c_addr;
  _mrb_exc_new3($agg_tmp, $5, $6, $mesg);
  _mrb_exc_raise($4, $agg_tmp);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_vformat($agg_result, $mrb, $format, $ap) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 84)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $format_addr;
      var $ap_addr;
      var $p;
      var $b;
      var $size;
      var $ary=__stackBase__;
      var $c;
      var $agg_tmp=(__stackBase__)+(12);
      var $agg_tmp6=(__stackBase__)+(24);
      var $agg_tmp17=(__stackBase__)+(36);
      var $agg_tmp18=(__stackBase__)+(48);
      var $agg_tmp31=(__stackBase__)+(60);
      var $agg_tmp32=(__stackBase__)+(72);
      $mrb_addr=$mrb;
      $format_addr=$format;
      $ap_addr=$ap;
      var $0=$format_addr;
      $p=$0;
      var $1=$p;
      $b=$1;
      var $2=$mrb_addr;
      _mrb_ary_new_capa($ary, $2, 4);
      label = 3; break;
    case 3: 
      var $3=$p;
      var $4=HEAP8[($3)];
      var $tobool=(($4 << 24) >> 24)!=0;
      if ($tobool) { label = 4; break; } else { label = 15; break; }
    case 4: 
      var $5=$p;
      var $incdec_ptr=(($5+1)|0);
      $p=$incdec_ptr;
      var $6=HEAP8[($5)];
      $c=$6;
      var $7=$c;
      var $conv=(($7 << 24) >> 24);
      var $cmp=(($conv)|(0))==37;
      if ($cmp) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $8=$p;
      var $9=HEAP8[($8)];
      var $conv2=(($9 << 24) >> 24);
      var $cmp3=(($conv2)|(0))==83;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $10=$p;
      var $11=$b;
      var $sub_ptr_lhs_cast=$10;
      var $sub_ptr_rhs_cast=$11;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub=((($sub_ptr_sub)-(1))|0);
      $size=$sub;
      var $12=$mrb_addr;
      var $13=$mrb_addr;
      var $14=$b;
      var $15=$size;
      _mrb_str_new($agg_tmp, $13, $14, $15);
      _mrb_ary_push($12, $ary, $agg_tmp);
      var $16=$mrb_addr;
      var $ap_cur=$ap_addr;
      var $17=$ap_cur;
      var $ap_next=(($ap_cur+12)|0);
      $ap_addr=$ap_next;
      var $18=$agg_tmp6;
      var $19=$17;
      assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
      _mrb_ary_push($16, $ary, $agg_tmp6);
      var $20=$p;
      var $add_ptr=(($20+1)|0);
      $b=$add_ptr;
      label = 7; break;
    case 7: 
      label = 14; break;
    case 8: 
      var $21=$c;
      var $conv7=(($21 << 24) >> 24);
      var $cmp8=(($conv7)|(0))==92;
      if ($cmp8) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $22=$p;
      var $23=HEAP8[($22)];
      var $tobool11=(($23 << 24) >> 24)!=0;
      if ($tobool11) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $24=$p;
      var $25=$b;
      var $sub_ptr_lhs_cast13=$24;
      var $sub_ptr_rhs_cast14=$25;
      var $sub_ptr_sub15=((($sub_ptr_lhs_cast13)-($sub_ptr_rhs_cast14))|0);
      var $sub16=((($sub_ptr_sub15)-(1))|0);
      $size=$sub16;
      var $26=$mrb_addr;
      var $27=$mrb_addr;
      var $28=$b;
      var $29=$size;
      _mrb_str_new($agg_tmp17, $27, $28, $29);
      _mrb_ary_push($26, $ary, $agg_tmp17);
      var $30=$mrb_addr;
      var $31=$mrb_addr;
      var $32=$p;
      _mrb_str_new($agg_tmp18, $31, $32, 1);
      _mrb_ary_push($30, $ary, $agg_tmp18);
      var $33=$p;
      var $incdec_ptr19=(($33+1)|0);
      $p=$incdec_ptr19;
      $b=$incdec_ptr19;
      label = 12; break;
    case 11: 
      label = 15; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 3; break;
    case 15: 
      var $34=$b;
      var $35=$format_addr;
      var $cmp24=(($34)|(0))==(($35)|(0));
      if ($cmp24) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $36=$mrb_addr;
      var $37=$format_addr;
      _mrb_str_new_cstr($agg_result, $36, $37);
      label = 18; break;
    case 17: 
      var $38=$p;
      var $39=$b;
      var $sub_ptr_lhs_cast28=$38;
      var $sub_ptr_rhs_cast29=$39;
      var $sub_ptr_sub30=((($sub_ptr_lhs_cast28)-($sub_ptr_rhs_cast29))|0);
      $size=$sub_ptr_sub30;
      var $40=$mrb_addr;
      var $41=$mrb_addr;
      var $42=$b;
      var $43=$size;
      _mrb_str_new($agg_tmp31, $41, $42, $43);
      _mrb_ary_push($40, $ary, $agg_tmp31);
      var $44=$mrb_addr;
      var $45=$mrb_addr;
      _mrb_str_new($agg_tmp32, $45, 0, 0);
      _mrb_ary_join($agg_result, $44, $ary, $agg_tmp32);
      label = 18; break;
    case 18: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_format($agg_result, $mrb, $format, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $format_addr;
  var $ap=__stackBase__;
  var $str=(__stackBase__)+(4);
  var $tmp=(__stackBase__)+(16);
  $mrb_addr=$mrb;
  $format_addr=$format;
  var $ap1=$ap;
  HEAP32[(($ap1)>>2)]=varrp;
  var $0=$mrb_addr;
  var $1=$format_addr;
  var $2=HEAP32[(($ap)>>2)];
  _mrb_vformat($tmp, $0, $1, $2);
  var $3=$str;
  var $4=$tmp;
  assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
  var $ap2=$ap;
  var $5=$agg_result;
  var $6=$str;
  assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_raisef($mrb, $c, $fmt, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $c_addr;
  var $fmt_addr;
  var $args=__stackBase__;
  var $mesg=(__stackBase__)+(4);
  var $tmp=(__stackBase__)+(16);
  var $agg_tmp=(__stackBase__)+(28);
  $mrb_addr=$mrb;
  $c_addr=$c;
  $fmt_addr=$fmt;
  var $args1=$args;
  HEAP32[(($args1)>>2)]=varrp;
  var $0=$mrb_addr;
  var $1=$fmt_addr;
  var $2=HEAP32[(($args)>>2)];
  _mrb_vformat($tmp, $0, $1, $2);
  var $3=$mesg;
  var $4=$tmp;
  assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
  var $args2=$args;
  var $5=$mrb_addr;
  var $6=$mrb_addr;
  var $7=$c_addr;
  _mrb_exc_new3($agg_tmp, $6, $7, $mesg);
  _mrb_exc_raise($5, $agg_tmp);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_name_error($mrb, $id, $fmt, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 76)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $id_addr;
  var $fmt_addr;
  var $exc=__stackBase__;
  var $argv=(__stackBase__)+(12);
  var $args=(__stackBase__)+(36);
  var $tmp=(__stackBase__)+(40);
  var $tmp4=(__stackBase__)+(52);
  var $tmp5=(__stackBase__)+(64);
  $mrb_addr=$mrb;
  $id_addr=$id;
  $fmt_addr=$fmt;
  var $args1=$args;
  HEAP32[(($args1)>>2)]=varrp;
  var $arrayidx=(($argv)|0);
  var $0=$mrb_addr;
  var $1=$fmt_addr;
  var $2=HEAP32[(($args)>>2)];
  _mrb_vformat($tmp, $0, $1, $2);
  var $3=$arrayidx;
  var $4=$tmp;
  assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
  var $args2=$args;
  var $arrayidx3=(($argv+12)|0);
  var $5=$id_addr;
  _mrb_symbol_value953($tmp4, $5);
  var $6=$arrayidx3;
  var $7=$tmp4;
  assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
  var $8=$mrb_addr;
  var $arraydecay=(($argv)|0);
  var $9=$mrb_addr;
  var $call=_mrb_class_get($9, ((109036)|0));
  _mrb_class_new_instance($tmp5, $8, 2, $arraydecay, $call);
  var $10=$exc;
  var $11=$tmp5;
  assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
  var $12=$mrb_addr;
  _mrb_exc_raise($12, $exc);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_symbol_value953($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=4;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $sym=$value;
      HEAP16[(($sym)>>1)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_warn($mrb, $fmt, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $fmt_addr;
  var $ap=__stackBase__;
  var $str=(__stackBase__)+(4);
  var $tmp=(__stackBase__)+(16);
  $mrb_addr=$mrb;
  $fmt_addr=$fmt;
  var $ap1=$ap;
  HEAP32[(($ap1)>>2)]=varrp;
  var $0=$mrb_addr;
  var $1=$fmt_addr;
  var $2=HEAP32[(($ap)>>2)];
  _mrb_vformat($tmp, $0, $1, $2);
  var $3=$str;
  var $4=$tmp;
  assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
  var $5=HEAP32[((_stderr)>>2)];
  var $call=_fputs(((105152)|0), $5);
  var $value=(($str)|0);
  var $p=$value;
  var $6=HEAP32[(($p)>>2)];
  var $7=$6;
  var $ptr=(($7+20)|0);
  var $8=HEAP32[(($ptr)>>2)];
  var $value2=(($str)|0);
  var $p3=$value2;
  var $9=HEAP32[(($p3)>>2)];
  var $10=$9;
  var $len=(($10+12)|0);
  var $11=HEAP32[(($len)>>2)];
  var $12=HEAP32[((_stderr)>>2)];
  var $call4=_fwrite($8, $11, 1, $12);
  var $ap5=$ap;
  STACKTOP = __stackBase__;
  return;
}
function _make_exception($agg_result, $mrb, $argc, $argv, $isstr) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argc_addr;
      var $argv_addr;
      var $isstr_addr;
      var $mesg=__stackBase__;
      var $n;
      var $tmp=(__stackBase__)+(12);
      var $tmp6=(__stackBase__)+(24);
      var $tmp14=(__stackBase__)+(36);
      var $exc;
      var $tmp25=(__stackBase__)+(48);
      var $agg_tmp=(__stackBase__)+(60);
      $mrb_addr=$mrb;
      $argc_addr=$argc;
      $argv_addr=$argv;
      $isstr_addr=$isstr;
      _mrb_nil_value958($tmp);
      var $0=$mesg;
      var $1=$tmp;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      var $2=$argc_addr;
      if ((($2)|(0))==0) {
        label = 3; break;
      }
      else if ((($2)|(0))==1) {
        label = 4; break;
      }
      else if ((($2)|(0))==2 | (($2)|(0))==3) {
        label = 13; break;
      }
      else {
      label = 18; break;
      }
    case 3: 
      label = 19; break;
    case 4: 
      var $3=$argv_addr;
      var $arrayidx=(($3)|0);
      var $tt=(($arrayidx+8)|0);
      var $4=HEAP32[(($tt)>>2)];
      var $cmp=(($4)|(0))==0;
      if ($cmp) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $5=$argv_addr;
      var $arrayidx2=(($5)|0);
      var $value=(($arrayidx2)|0);
      var $i=$value;
      var $6=HEAP32[(($i)>>2)];
      var $tobool=(($6)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 6; break; }
    case 6: 
      label = 19; break;
    case 7: 
      var $7=$isstr_addr;
      var $tobool3=(($7)|(0))!=0;
      if ($tobool3) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $8=$mrb_addr;
      var $9=$argv_addr;
      var $arrayidx5=(($9)|0);
      _mrb_check_string_type($tmp6, $8, $arrayidx5);
      var $10=$mesg;
      var $11=$tmp6;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      var $tt7=(($mesg+8)|0);
      var $12=HEAP32[(($tt7)>>2)];
      var $cmp8=(($12)|(0))==0;
      if ($cmp8) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $value10=(($mesg)|0);
      var $i11=$value10;
      var $13=HEAP32[(($i11)>>2)];
      var $tobool12=(($13)|(0))!=0;
      if ($tobool12) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $14=$mrb_addr;
      var $15=$mrb_addr;
      var $call=_mrb_class_get($15, ((97316)|0));
      _mrb_exc_new3($tmp14, $14, $call, $mesg);
      var $16=$mesg;
      var $17=$tmp14;
      assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
      label = 19; break;
    case 11: 
      label = 12; break;
    case 12: 
      $n=0;
      label = 14; break;
    case 13: 
      $n=1;
      label = 14; break;
    case 14: 
      var $18=$mrb_addr;
      var $call19=_mrb_intern2($18, ((96108)|0), 9);
      $exc=$call19;
      var $19=$mrb_addr;
      var $20=$argv_addr;
      var $arrayidx20=(($20)|0);
      var $21=$exc;
      var $call21=_mrb_respond_to($19, $arrayidx20, $21);
      var $tobool22=(($call21)|(0))!=0;
      if ($tobool22) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $22=$mrb_addr;
      var $23=$argv_addr;
      var $arrayidx24=(($23)|0);
      var $24=$exc;
      var $25=$n;
      var $26=$argv_addr;
      var $add_ptr=(($26+12)|0);
      _mrb_funcall_argv($tmp25, $22, $arrayidx24, $24, $25, $add_ptr);
      var $27=$mesg;
      var $28=$tmp25;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      label = 17; break;
    case 16: 
      var $29=$mrb_addr;
      var $30=$mrb_addr;
      var $call26=_mrb_class_get($30, ((95036)|0));
      _mrb_raise($29, $call26, ((94192)|0));
      label = 17; break;
    case 17: 
      label = 19; break;
    case 18: 
      var $31=$mrb_addr;
      var $32=$mrb_addr;
      var $call28=_mrb_class_get($32, ((93316)|0));
      var $33=$argc_addr;
      _mrb_fixnum_value959($agg_tmp, $33);
      _mrb_raisef($31, $call28, ((113304)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 19; break;
    case 19: 
      var $34=$argc_addr;
      var $cmp29=(($34)|(0)) > 0;
      if ($cmp29) { label = 20; break; } else { label = 25; break; }
    case 20: 
      var $35=$mrb_addr;
      var $36=$mrb_addr;
      var $eException_class=(($36+572)|0);
      var $37=HEAP32[(($eException_class)>>2)];
      var $call31=_mrb_obj_is_kind_of($35, $mesg, $37);
      var $tobool32=(($call31)|(0))!=0;
      if ($tobool32) { label = 22; break; } else { label = 21; break; }
    case 21: 
      var $38=$mrb_addr;
      var $39=$mrb_addr;
      var $call34=_mrb_class_get($39, ((95036)|0));
      _mrb_raise($38, $call34, ((112504)|0));
      label = 22; break;
    case 22: 
      var $40=$argc_addr;
      var $cmp36=(($40)|(0)) > 2;
      if ($cmp36) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $41=$mrb_addr;
      var $42=$argv_addr;
      var $arrayidx38=(($42+24)|0);
      _set_backtrace($41, $mesg, $arrayidx38);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $43=$agg_result;
      var $44=$mesg;
      assert(12 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value958($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value959($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _set_backtrace($mrb, $info, $bt) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $info; $info = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($info)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($info)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($info)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $bt; $bt = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($bt)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($bt)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($bt)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $tmp=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_funcall($tmp, $0, $info, ((103796)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($bt)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($bt)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($bt)+(8))>>2)],tempInt));
  STACKTOP = __stackBase__;
  return;
}
function _mrb_make_exception($agg_result, $mrb, $argc, $argv) {
  var label = 0;
  var $mrb_addr;
  var $argc_addr;
  var $argv_addr;
  $mrb_addr=$mrb;
  $argc_addr=$argc;
  $argv_addr=$argv;
  var $0=$mrb_addr;
  var $1=$argc_addr;
  var $2=$argv_addr;
  _make_exception($agg_result, $0, $1, $2, 1);
  return;
}
function _mrb_init_exception($mrb) {
  var label = 0;
  var $mrb_addr;
  var $e;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $object_class=(($1+44)|0);
  var $2=HEAP32[(($object_class)>>2)];
  var $call=_mrb_define_class($0, ((110820)|0), $2);
  $e=$call;
  var $3=$mrb_addr;
  var $eException_class=(($3+572)|0);
  HEAP32[(($eException_class)>>2)]=$call;
  var $4=$mrb_addr;
  var $5=$e;
  _mrb_define_class_method($4, $5, ((96108)|0), 606, 4096);
  var $6=$mrb_addr;
  var $7=$e;
  _mrb_define_method($6, $7, ((96108)|0), 556, 4096);
  var $8=$mrb_addr;
  var $9=$e;
  _mrb_define_method($8, $9, ((110328)|0), 582, 4096);
  var $10=$mrb_addr;
  var $11=$e;
  _mrb_define_method($10, $11, ((109956)|0), 224, 262144);
  var $12=$mrb_addr;
  var $13=$e;
  _mrb_define_method($12, $13, ((109552)|0), 132, 0);
  var $14=$mrb_addr;
  var $15=$e;
  _mrb_define_method($14, $15, ((109088)|0), 356, 0);
  var $16=$mrb_addr;
  var $17=$e;
  _mrb_define_method($16, $17, ((108484)|0), 284, 0);
  var $18=$mrb_addr;
  var $19=$mrb_addr;
  var $eException_class1=(($19+572)|0);
  var $20=HEAP32[(($eException_class1)>>2)];
  var $call2=_mrb_define_class($18, ((108180)|0), $20);
  var $21=$mrb_addr;
  var $eStandardError_class=(($21+576)|0);
  HEAP32[(($eStandardError_class)>>2)]=$call2;
  var $22=$mrb_addr;
  var $23=$mrb_addr;
  var $eStandardError_class3=(($23+576)|0);
  var $24=HEAP32[(($eStandardError_class3)>>2)];
  var $call4=_mrb_define_class($22, ((97316)|0), $24);
  var $25=$mrb_addr;
  var $26=$mrb_addr;
  var $eException_class5=(($26+572)|0);
  var $27=HEAP32[(($eException_class5)>>2)];
  var $call6=_mrb_define_class($25, ((107620)|0), $27);
  $e=$call6;
  var $28=$mrb_addr;
  var $29=$e;
  var $call7=_mrb_define_class($28, ((107348)|0), $29);
  return;
}
function _mrb_exc_raise($mrb, $exc) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $exc; $exc = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($exc)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($exc)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($exc)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      $mrb_addr=$mrb;
      var $value=(($exc)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $2=$mrb_addr;
      var $exc1=(($2+16)|0);
      HEAP32[(($exc1)>>2)]=$1;
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $exc2=(($4+16)|0);
      var $5=HEAP32[(($exc2)>>2)];
      _exc_debug_info($3, $5);
      var $6=$mrb_addr;
      var $jmp=(($6)|0);
      var $7=HEAP32[(($jmp)>>2)];
      var $tobool=(($7)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $8=$mrb_addr;
      _mrb_p($8, $exc);
      _abort();
      throw "Reached an unreachable!";
    case 4: 
      var $9=$mrb_addr;
      var $jmp3=(($9)|0);
      var $10=HEAP32[(($jmp3)>>2)];
      var $11=$10;
      var $arraydecay=(($11)|0);
      _longjmp($arraydecay, 1);
      throw "Reached an unreachable!";
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bug($mrb, $fmt, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $fmt_addr;
      var $ap=__stackBase__;
      var $str=(__stackBase__)+(4);
      var $tmp=(__stackBase__)+(16);
      $mrb_addr=$mrb;
      $fmt_addr=$fmt;
      var $ap1=$ap;
      HEAP32[(($ap1)>>2)]=varrp;
      var $0=$mrb_addr;
      var $1=$fmt_addr;
      var $2=HEAP32[(($ap)>>2)];
      _mrb_vformat($tmp, $0, $1, $2);
      var $3=$str;
      var $4=$tmp;
      assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
      var $5=HEAP32[((_stderr)>>2)];
      var $call=_fputs(((102384)|0), $5);
      var $value=(($str)|0);
      var $p=$value;
      var $6=HEAP32[(($p)>>2)];
      var $7=$6;
      var $ptr=(($7+20)|0);
      var $8=HEAP32[(($ptr)>>2)];
      var $value2=(($str)|0);
      var $p3=$value2;
      var $9=HEAP32[(($p3)>>2)];
      var $10=$9;
      var $len=(($10+12)|0);
      var $11=HEAP32[(($len)>>2)];
      var $12=HEAP32[((_stderr)>>2)];
      var $call4=_fwrite($8, $11, 1, $12);
      var $ap5=$ap;
      _exit(1);
      throw "Reached an unreachable!";
    case 3: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _exc_exception($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $exc=__stackBase__;
      var $a=(__stackBase__)+(12);
      var $argc;
      var $tmp=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((104056)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$a,tempInt));
      $argc=$call;
      var $1=$argc;
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$agg_result;
      var $3=$self;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      label = 7; break;
    case 4: 
      var $4=$mrb_addr;
      var $call1=_mrb_obj_equal($4, $self, $a);
      var $tobool=(($call1)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$agg_result;
      var $6=$self;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      label = 7; break;
    case 6: 
      var $7=$mrb_addr;
      _mrb_obj_clone($tmp, $7, $self);
      var $8=$exc;
      var $9=$tmp;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      var $10=$mrb_addr;
      var $11=$mrb_addr;
      var $call4=_mrb_intern2($11, ((107008)|0), 4);
      _mrb_iv_set($10, $exc, $call4, $a);
      var $12=$agg_result;
      var $13=$exc;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _exc_initialize($agg_result, $mrb, $exc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $exc; $exc = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($exc)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($exc)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($exc)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $mesg=__stackBase__;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((104056)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$mesg,tempInt));
      var $cmp=(($call)|(0))==1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mrb_addr;
      var $2=$mrb_addr;
      var $call1=_mrb_intern2($2, ((107008)|0), 4);
      _mrb_iv_set($1, $exc, $call1, $mesg);
      label = 4; break;
    case 4: 
      var $3=$agg_result;
      var $4=$exc;
      assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _exc_equal($agg_result, $mrb, $exc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $exc; $exc = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($exc)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($exc)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($exc)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $obj=__stackBase__;
      var $mesg=(__stackBase__)+(12);
      var $equal_p;
      var $id_mesg;
      var $tmp=(__stackBase__)+(24);
      var $tmp12=(__stackBase__)+(36);
      var $agg_tmp=(__stackBase__)+(48);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_intern2($0, ((107008)|0), 4);
      $id_mesg=$call;
      var $1=$mrb_addr;
      var $call1=_mrb_get_args($1, ((104604)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj,tempInt));
      var $2=$mrb_addr;
      var $call2=_mrb_obj_equal($2, $exc, $obj);
      var $tobool=(($call2)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $equal_p=1;
      label = 11; break;
    case 4: 
      var $3=$mrb_addr;
      var $call3=_mrb_obj_class($3, $exc);
      var $4=$mrb_addr;
      var $call4=_mrb_obj_class($4, $obj);
      var $cmp=(($call3)|(0))!=(($call4)|(0));
      if ($cmp) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $5=$mrb_addr;
      var $6=$mrb_addr;
      var $call6=_mrb_intern2($6, ((109088)|0), 7);
      var $call7=_mrb_respond_to($5, $obj, $call6);
      var $tobool8=(($call7)|(0))!=0;
      if ($tobool8) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $7=$mrb_addr;
      _mrb_funcall($tmp, $7, $obj, ((109088)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $8=$mesg;
      var $9=$tmp;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 8; break;
    case 7: 
      _mrb_false_value960($agg_result);
      label = 12; break;
    case 8: 
      label = 10; break;
    case 9: 
      var $10=$mrb_addr;
      var $11=$id_mesg;
      _mrb_attr_get($tmp12, $10, $obj, $11);
      var $12=$mesg;
      var $13=$tmp12;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      label = 10; break;
    case 10: 
      var $14=$mrb_addr;
      var $15=$mrb_addr;
      var $16=$id_mesg;
      _mrb_attr_get($agg_tmp, $15, $exc, $16);
      var $call14=_mrb_equal($14, $agg_tmp, $mesg);
      var $conv=(($call14) & 255);
      $equal_p=$conv;
      label = 11; break;
    case 11: 
      var $17=$equal_p;
      _mrb_bool_value961($agg_result, $17);
      label = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _exc_to_s($agg_result, $mrb, $exc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $exc; $exc = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($exc)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($exc)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($exc)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $mesg=__stackBase__;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $1=$mrb_addr;
      var $call=_mrb_intern2($1, ((107008)|0), 4);
      _mrb_attr_get($mesg, $0, $exc, $call);
      var $tt=(($mesg+8)|0);
      var $2=HEAP32[(($tt)>>2)];
      var $cmp=(($2)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $value=(($mesg)|0);
      var $i=$value;
      var $3=HEAP32[(($i)>>2)];
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call1=_mrb_obj_classname($5, $exc);
      _mrb_str_new_cstr($agg_result, $4, $call1);
      label = 6; break;
    case 5: 
      var $6=$agg_result;
      var $7=$mesg;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _exc_message($agg_result, $mrb, $exc) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $exc; $exc = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($exc)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($exc)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($exc)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_funcall($agg_result, $0, $exc, ((109552)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
  STACKTOP = __stackBase__;
  return;
}
function _exc_inspect($agg_result, $mrb, $exc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 228)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $exc; $exc = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($exc)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($exc)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($exc)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $str=__stackBase__;
      var $mesg=(__stackBase__)+(12);
      var $file=(__stackBase__)+(24);
      var $line=(__stackBase__)+(36);
      var $tmp=(__stackBase__)+(48);
      var $tmp2=(__stackBase__)+(60);
      var $tmp4=(__stackBase__)+(72);
      var $tmp12=(__stackBase__)+(84);
      var $tmp13=(__stackBase__)+(96);
      var $tmp14=(__stackBase__)+(108);
      var $tmp25=(__stackBase__)+(120);
      var $tmp26=(__stackBase__)+(132);
      var $tmp28=(__stackBase__)+(144);
      var $tmp41=(__stackBase__)+(156);
      var $tmp44=(__stackBase__)+(168);
      var $tmp57=(__stackBase__)+(180);
      var $tmp58=(__stackBase__)+(192);
      var $tmp60=(__stackBase__)+(204);
      var $tmp62=(__stackBase__)+(216);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $1=$mrb_addr;
      var $call=_mrb_intern2($1, ((107008)|0), 4);
      _mrb_attr_get($tmp, $0, $exc, $call);
      var $2=$mesg;
      var $3=$tmp;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call1=_mrb_intern2($5, ((106528)|0), 4);
      _mrb_attr_get($tmp2, $4, $exc, $call1);
      var $6=$file;
      var $7=$tmp2;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      var $8=$mrb_addr;
      var $9=$mrb_addr;
      var $call3=_mrb_intern2($9, ((106124)|0), 4);
      _mrb_attr_get($tmp4, $8, $exc, $call3);
      var $10=$line;
      var $11=$tmp4;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      var $tt=(($file+8)|0);
      var $12=HEAP32[(($tt)>>2)];
      var $cmp=(($12)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $value=(($file)|0);
      var $i=$value;
      var $13=HEAP32[(($i)>>2)];
      var $tobool=(($13)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 15; break; }
    case 4: 
      var $tt6=(($line+8)|0);
      var $14=HEAP32[(($tt6)>>2)];
      var $cmp7=(($14)|(0))==0;
      if ($cmp7) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $value9=(($line)|0);
      var $i10=$value9;
      var $15=HEAP32[(($i10)>>2)];
      var $tobool11=(($15)|(0))!=0;
      if ($tobool11) { label = 6; break; } else { label = 15; break; }
    case 6: 
      var $16=$str;
      var $17=$file;
      assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
      var $18=$mrb_addr;
      _mrb_str_cat($tmp12, $18, $str, ((105788)|0), 1);
      var $19=$mrb_addr;
      _mrb_str_append($tmp13, $19, $str, $line);
      var $20=$mrb_addr;
      _mrb_str_cat($tmp14, $20, $str, ((105512)|0), 2);
      var $tt15=(($mesg+8)|0);
      var $21=HEAP32[(($tt15)>>2)];
      var $cmp16=(($21)|(0))==0;
      if ($cmp16) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $value18=(($mesg)|0);
      var $i19=$value18;
      var $22=HEAP32[(($i19)>>2)];
      var $tobool20=(($22)|(0))!=0;
      if ($tobool20) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $value22=(($mesg)|0);
      var $p=$value22;
      var $23=HEAP32[(($p)>>2)];
      var $24=$23;
      var $len=(($24+12)|0);
      var $25=HEAP32[(($len)>>2)];
      var $cmp23=(($25)|(0)) > 0;
      if ($cmp23) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $26=$mrb_addr;
      _mrb_str_append($tmp25, $26, $str, $mesg);
      var $27=$mrb_addr;
      _mrb_str_cat($tmp26, $27, $str, ((105184)|0), 2);
      label = 10; break;
    case 10: 
      var $28=$mrb_addr;
      var $29=$mrb_addr;
      var $call27=_mrb_obj_classname($29, $exc);
      _mrb_str_cat_cstr($tmp28, $28, $str, $call27);
      var $tt29=(($mesg+8)|0);
      var $30=HEAP32[(($tt29)>>2)];
      var $cmp30=(($30)|(0))==0;
      if ($cmp30) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $value32=(($mesg)|0);
      var $i33=$value32;
      var $31=HEAP32[(($i33)>>2)];
      var $tobool34=(($31)|(0))!=0;
      if ($tobool34) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $value36=(($mesg)|0);
      var $p37=$value36;
      var $32=HEAP32[(($p37)>>2)];
      var $33=$32;
      var $len38=(($33+12)|0);
      var $34=HEAP32[(($len38)>>2)];
      var $cmp39=(($34)|(0)) > 0;
      if ($cmp39) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $35=$mrb_addr;
      _mrb_str_cat($tmp41, $35, $str, ((104904)|0), 1);
      label = 14; break;
    case 14: 
      label = 21; break;
    case 15: 
      var $36=$mrb_addr;
      var $37=$mrb_addr;
      var $call43=_mrb_obj_classname($37, $exc);
      _mrb_str_new_cstr($tmp44, $36, $call43);
      var $38=$str;
      var $39=$tmp44;
      assert(12 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];HEAP32[((($38)+(8))>>2)]=HEAP32[((($39)+(8))>>2)];
      var $tt45=(($mesg+8)|0);
      var $40=HEAP32[(($tt45)>>2)];
      var $cmp46=(($40)|(0))==0;
      if ($cmp46) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $value48=(($mesg)|0);
      var $i49=$value48;
      var $41=HEAP32[(($i49)>>2)];
      var $tobool50=(($41)|(0))!=0;
      if ($tobool50) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $value52=(($mesg)|0);
      var $p53=$value52;
      var $42=HEAP32[(($p53)>>2)];
      var $43=$42;
      var $len54=(($43+12)|0);
      var $44=HEAP32[(($len54)>>2)];
      var $cmp55=(($44)|(0)) > 0;
      if ($cmp55) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $45=$mrb_addr;
      _mrb_str_cat($tmp57, $45, $str, ((105512)|0), 2);
      var $46=$mrb_addr;
      _mrb_str_append($tmp58, $46, $str, $mesg);
      label = 20; break;
    case 19: 
      var $47=$mrb_addr;
      _mrb_str_cat($tmp60, $47, $str, ((105512)|0), 2);
      var $48=$mrb_addr;
      var $49=$mrb_addr;
      var $call61=_mrb_obj_classname($49, $exc);
      _mrb_str_cat_cstr($tmp62, $48, $str, $call61);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $50=$agg_result;
      var $51=$str;
      assert(12 % 1 === 0);HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((($51)+(4))>>2)];HEAP32[((($50)+(8))>>2)]=HEAP32[((($51)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_false_value960($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value961($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $boolean_addr;
      var $v=__stackBase__;
      $boolean_addr=$boolean;
      label = 3; break;
    case 3: 
      var $0=$boolean_addr;
      var $conv=(($0)&(255));
      var $tobool=(($conv)|(0))!=0;
      var $cond=$tobool ? 2 : 0;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$cond;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_realloc($mrb, $p, $len) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $p_addr;
      var $len_addr;
      var $p2;
      $mrb_addr=$mrb;
      $p_addr=$p;
      $len_addr=$len;
      var $0=$mrb_addr;
      var $allocf=(($0+4)|0);
      var $1=HEAP32[(($allocf)>>2)];
      var $2=$mrb_addr;
      var $3=$p_addr;
      var $4=$len_addr;
      var $5=$mrb_addr;
      var $ud=(($5+580)|0);
      var $6=HEAP32[(($ud)>>2)];
      var $call=FUNCTION_TABLE[$1]($2, $3, $4, $6);
      $p2=$call;
      var $7=$p2;
      var $tobool=(($7)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 3; break; }
    case 3: 
      var $8=$len_addr;
      var $cmp=(($8)>>>(0)) > 0;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $9=$mrb_addr;
      var $heaps=(($9+100)|0);
      var $10=HEAP32[(($heaps)>>2)];
      var $tobool2=(($10)|(0))!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $11=$mrb_addr;
      _mrb_garbage_collect($11);
      var $12=$mrb_addr;
      var $allocf3=(($12+4)|0);
      var $13=HEAP32[(($allocf3)>>2)];
      var $14=$mrb_addr;
      var $15=$p_addr;
      var $16=$len_addr;
      var $17=$mrb_addr;
      var $ud4=(($17+580)|0);
      var $18=HEAP32[(($ud4)>>2)];
      var $call5=FUNCTION_TABLE[$13]($14, $15, $16, $18);
      $p2=$call5;
      label = 6; break;
    case 6: 
      var $19=$p2;
      var $tobool6=(($19)|(0))!=0;
      if ($tobool6) { label = 12; break; } else { label = 7; break; }
    case 7: 
      var $20=$len_addr;
      var $tobool8=(($20)|(0))!=0;
      if ($tobool8) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $21=$mrb_addr;
      var $22=$21;
      var $bf_field_offs=(($22+552)|0);
      var $23=HEAP8[($bf_field_offs)];
      var $24=(($23)&(255)) >>> 3;
      var $bf_clear=$24 & 1;
      var $tobool10=(($bf_clear << 24) >> 24)!=0;
      if ($tobool10) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $25=$mrb_addr;
      var $26=$25;
      var $bf_field_offs12=(($26+552)|0);
      var $27=HEAP8[($bf_field_offs12)];
      var $28=$27 & -9;
      var $29=$28 | 8;
      HEAP8[($bf_field_offs12)]=$29;
      var $30=$mrb_addr;
      var $31=$mrb_addr;
      var $call13=_mrb_class_get($31, ((93484)|0));
      _mrb_raise($30, $call13, ((108604)|0));
      label = 11; break;
    case 11: 
      label = 13; break;
    case 12: 
      var $32=$mrb_addr;
      var $33=$32;
      var $bf_field_offs16=(($33+552)|0);
      var $34=HEAP8[($bf_field_offs16)];
      var $35=$34 & -9;
      HEAP8[($bf_field_offs16)]=$35;
      label = 13; break;
    case 13: 
      var $36=$p2;
      return $36;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_garbage_collect($mrb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $max_limit;
      $mrb_addr=$mrb;
      $max_limit=-1;
      var $0=$mrb_addr;
      var $1=$0;
      var $bf_field_offs=(($1+552)|0);
      var $2=HEAP8[($bf_field_offs)];
      var $bf_clear=$2 & 1;
      var $tobool=(($bf_clear << 24) >> 24)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 16; break;
    case 4: 
      var $3=$mrb_addr;
      var $gc_state=(($3+520)|0);
      var $4=HEAP32[(($gc_state)>>2)];
      var $cmp=(($4)|(0))==2;
      if ($cmp) { label = 5; break; } else { label = 9; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $5=$mrb_addr;
      var $gc_state2=(($5+520)|0);
      var $6=HEAP32[(($gc_state2)>>2)];
      var $cmp3=(($6)|(0))!=0;
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $7=$mrb_addr;
      var $8=$max_limit;
      var $call=_incremental_gc($7, $8);
      label = 6; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $9=$mrb_addr;
      var $10=$9;
      var $bf_field_offs5=(($10+552)|0);
      var $11=HEAP8[($bf_field_offs5)];
      var $12=(($11)&(255)) >>> 2;
      var $bf_clear6=$12 & 1;
      var $tobool7=(($bf_clear6 << 24) >> 24)!=0;
      if ($tobool7) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $13=$mrb_addr;
      _clear_all_old($13);
      var $14=$mrb_addr;
      var $15=$14;
      var $bf_field_offs9=(($15+552)|0);
      var $16=HEAP8[($bf_field_offs9)];
      var $17=$16 & -3;
      var $18=$17 | 2;
      HEAP8[($bf_field_offs9)]=$18;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $19=$mrb_addr;
      var $20=$max_limit;
      var $call11=_incremental_gc($19, $20);
      label = 13; break;
    case 13: 
      var $21=$mrb_addr;
      var $gc_state12=(($21+520)|0);
      var $22=HEAP32[(($gc_state12)>>2)];
      var $cmp13=(($22)|(0))!=0;
      if ($cmp13) { label = 12; break; } else { label = 14; break; }
    case 14: 
      var $23=$mrb_addr;
      var $gc_live_after_mark=(($23+536)|0);
      var $24=HEAP32[(($gc_live_after_mark)>>2)];
      var $div=Math.floor(((($24)>>>(0)))/(100));
      var $25=$mrb_addr;
      var $gc_interval_ratio=(($25+544)|0);
      var $26=HEAP32[(($gc_interval_ratio)>>2)];
      var $mul=Math.imul($div,$26);
      var $27=$mrb_addr;
      var $gc_threshold=(($27+540)|0);
      HEAP32[(($gc_threshold)>>2)]=$mul;
      var $28=$mrb_addr;
      var $29=$28;
      var $bf_field_offs14=(($29+552)|0);
      var $30=HEAP8[($bf_field_offs14)];
      var $31=(($30)&(255)) >>> 2;
      var $bf_clear15=$31 & 1;
      var $tobool16=(($bf_clear15 << 24) >> 24)!=0;
      if ($tobool16) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $32=$mrb_addr;
      var $gc_live_after_mark18=(($32+536)|0);
      var $33=HEAP32[(($gc_live_after_mark18)>>2)];
      var $div19=Math.floor(((($33)>>>(0)))/(100));
      var $mul20=((($div19)*(200))&-1);
      var $34=$mrb_addr;
      var $majorgc_old_threshold=(($34+556)|0);
      HEAP32[(($majorgc_old_threshold)>>2)]=$mul20;
      var $35=$mrb_addr;
      var $36=$35;
      var $bf_field_offs21=(($36+552)|0);
      var $37=HEAP8[($bf_field_offs21)];
      var $38=$37 & -3;
      HEAP8[($bf_field_offs21)]=$38;
      label = 16; break;
    case 16: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_malloc($mrb, $len) {
  var label = 0;
  var $mrb_addr;
  var $len_addr;
  $mrb_addr=$mrb;
  $len_addr=$len;
  var $0=$mrb_addr;
  var $1=$len_addr;
  var $call=_mrb_realloc($0, 0, $1);
  return $call;
}
function _mrb_calloc($mrb, $nelem, $len) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $nelem_addr;
      var $len_addr;
      var $p;
      var $size;
      $mrb_addr=$mrb;
      $nelem_addr=$nelem;
      $len_addr=$len;
      $p=0;
      var $0=$nelem_addr;
      var $1=$len_addr;
      var $div=Math.floor((4294967295)/((($1)>>>(0))));
      var $cmp=(($0)>>>(0)) <= (($div)>>>(0));
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $2=$nelem_addr;
      var $3=$len_addr;
      var $mul=Math.imul($2,$3);
      $size=$mul;
      var $4=$mrb_addr;
      var $5=$size;
      var $call=_mrb_realloc($4, 0, $5);
      $p=$call;
      var $6=$p;
      var $tobool=(($6)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $7=$size;
      var $cmp1=(($7)>>>(0)) > 0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$p;
      var $9=$size;
      _memset($8, 0, $9);
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $10=$p;
      return $10;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_free($mrb, $p) {
  var label = 0;
  var $mrb_addr;
  var $p_addr;
  $mrb_addr=$mrb;
  $p_addr=$p;
  var $0=$mrb_addr;
  var $allocf=(($0+4)|0);
  var $1=HEAP32[(($allocf)>>2)];
  var $2=$mrb_addr;
  var $3=$p_addr;
  var $4=$mrb_addr;
  var $ud=(($4+580)|0);
  var $5=HEAP32[(($ud)>>2)];
  var $call=FUNCTION_TABLE[$1]($2, $3, 0, $5);
  return;
}
function _mrb_init_heap($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $heaps=(($0+100)|0);
  HEAP32[(($heaps)>>2)]=0;
  var $1=$mrb_addr;
  var $free_heaps=(($1+108)|0);
  HEAP32[(($free_heaps)>>2)]=0;
  var $2=$mrb_addr;
  _add_heap($2);
  var $3=$mrb_addr;
  var $gc_interval_ratio=(($3+544)|0);
  HEAP32[(($gc_interval_ratio)>>2)]=200;
  var $4=$mrb_addr;
  var $gc_step_ratio=(($4+548)|0);
  HEAP32[(($gc_step_ratio)>>2)]=200;
  var $5=$mrb_addr;
  var $6=$5;
  var $bf_field_offs=(($6+552)|0);
  var $7=HEAP8[($bf_field_offs)];
  var $8=$7 & -5;
  var $9=$8 | 4;
  HEAP8[($bf_field_offs)]=$9;
  var $10=$mrb_addr;
  var $11=$10;
  var $bf_field_offs1=(($11+552)|0);
  var $12=HEAP8[($bf_field_offs1)];
  var $13=$12 & -3;
  var $14=$13 | 2;
  HEAP8[($bf_field_offs1)]=$14;
  return;
}
function _add_heap($mrb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $page;
      var $p;
      var $e;
      var $prev;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_calloc($0, 1, 24600);
      var $1=$call;
      $page=$1;
      $prev=0;
      var $2=$page;
      var $objects=(($2+24)|0);
      var $arraydecay=(($objects)|0);
      $p=$arraydecay;
      var $3=$p;
      var $add_ptr=(($3+24576)|0);
      $e=$add_ptr;
      label = 3; break;
    case 3: 
      var $4=$p;
      var $5=$e;
      var $cmp=(($4)>>>(0)) < (($5)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $6=$p;
      var $as=(($6)|0);
      var $free=$as;
      var $7=$free;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 & -256;
      var $10=$9 | 1;
      HEAP32[(($7)>>2)]=$10;
      var $11=$prev;
      var $12=$p;
      var $as1=(($12)|0);
      var $free2=$as1;
      var $next=(($free2+12)|0);
      HEAP32[(($next)>>2)]=$11;
      var $13=$p;
      var $as3=(($13)|0);
      var $basic=$as3;
      $prev=$basic;
      label = 5; break;
    case 5: 
      var $14=$p;
      var $incdec_ptr=(($14+24)|0);
      $p=$incdec_ptr;
      label = 3; break;
    case 6: 
      var $15=$prev;
      var $16=$page;
      var $freelist=(($16)|0);
      HEAP32[(($freelist)>>2)]=$15;
      var $17=$mrb_addr;
      var $18=$page;
      _link_heap_page($17, $18);
      var $19=$mrb_addr;
      var $20=$page;
      _link_free_heap_page($19, $20);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_free_heap($mrb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $page;
      var $tmp;
      var $p;
      var $e;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $heaps=(($0+100)|0);
      var $1=HEAP32[(($heaps)>>2)];
      $page=$1;
      label = 3; break;
    case 3: 
      var $2=$page;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $3=$page;
      $tmp=$3;
      var $4=$page;
      var $next=(($4+8)|0);
      var $5=HEAP32[(($next)>>2)];
      $page=$5;
      var $6=$tmp;
      var $objects=(($6+24)|0);
      var $arraydecay=(($objects)|0);
      $p=$arraydecay;
      var $7=$p;
      var $add_ptr=(($7+24576)|0);
      $e=$add_ptr;
      label = 5; break;
    case 5: 
      var $8=$p;
      var $9=$e;
      var $cmp=(($8)>>>(0)) < (($9)>>>(0));
      if ($cmp) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $10=$p;
      var $as=(($10)|0);
      var $free=$as;
      var $11=$free;
      var $12=HEAP32[(($11)>>2)];
      var $bf_clear=$12 & 255;
      var $cmp3=(($bf_clear)|(0))!=1;
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $13=$mrb_addr;
      var $14=$p;
      var $as4=(($14)|0);
      var $basic=$as4;
      _obj_free($13, $basic);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $15=$p;
      var $incdec_ptr=(($15+24)|0);
      $p=$incdec_ptr;
      label = 5; break;
    case 10: 
      var $16=$mrb_addr;
      var $17=$tmp;
      var $18=$17;
      _mrb_free($16, $18);
      label = 3; break;
    case 11: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _unlink_free_heap_page($mrb, $page) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $page_addr;
      $mrb_addr=$mrb;
      $page_addr=$page;
      var $0=$page_addr;
      var $free_prev=(($0+16)|0);
      var $1=HEAP32[(($free_prev)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$page_addr;
      var $free_next=(($2+12)|0);
      var $3=HEAP32[(($free_next)>>2)];
      var $4=$page_addr;
      var $free_prev1=(($4+16)|0);
      var $5=HEAP32[(($free_prev1)>>2)];
      var $free_next2=(($5+12)|0);
      HEAP32[(($free_next2)>>2)]=$3;
      label = 4; break;
    case 4: 
      var $6=$page_addr;
      var $free_next3=(($6+12)|0);
      var $7=HEAP32[(($free_next3)>>2)];
      var $tobool4=(($7)|(0))!=0;
      if ($tobool4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$page_addr;
      var $free_prev6=(($8+16)|0);
      var $9=HEAP32[(($free_prev6)>>2)];
      var $10=$page_addr;
      var $free_next7=(($10+12)|0);
      var $11=HEAP32[(($free_next7)>>2)];
      var $free_prev8=(($11+16)|0);
      HEAP32[(($free_prev8)>>2)]=$9;
      label = 6; break;
    case 6: 
      var $12=$mrb_addr;
      var $free_heaps=(($12+108)|0);
      var $13=HEAP32[(($free_heaps)>>2)];
      var $14=$page_addr;
      var $cmp=(($13)|(0))==(($14)|(0));
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $15=$page_addr;
      var $free_next11=(($15+12)|0);
      var $16=HEAP32[(($free_next11)>>2)];
      var $17=$mrb_addr;
      var $free_heaps12=(($17+108)|0);
      HEAP32[(($free_heaps12)>>2)]=$16;
      label = 8; break;
    case 8: 
      var $18=$page_addr;
      var $free_prev14=(($18+16)|0);
      HEAP32[(($free_prev14)>>2)]=0;
      var $19=$page_addr;
      var $free_next15=(($19+12)|0);
      HEAP32[(($free_next15)>>2)]=0;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _add_gray_list($mrb, $obj) {
  var label = 0;
  var $mrb_addr;
  var $obj_addr;
  $mrb_addr=$mrb;
  $obj_addr=$obj;
  var $0=$obj_addr;
  var $1=$0;
  var $2=HEAP32[(($1)>>2)];
  var $3=$2 & -1793;
  HEAP32[(($1)>>2)]=$3;
  var $4=$mrb_addr;
  var $gray_list=(($4+528)|0);
  var $5=HEAP32[(($gray_list)>>2)];
  var $6=$obj_addr;
  var $gcnext=(($6+8)|0);
  HEAP32[(($gcnext)>>2)]=$5;
  var $7=$obj_addr;
  var $8=$mrb_addr;
  var $gray_list1=(($8+528)|0);
  HEAP32[(($gray_list1)>>2)]=$7;
  return;
}
function _mrb_gc_arena_save($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $arena_idx=(($0+516)|0);
  var $1=HEAP32[(($arena_idx)>>2)];
  return $1;
}
function _mrb_gc_arena_restore($mrb, $idx) {
  var label = 0;
  var $mrb_addr;
  var $idx_addr;
  $mrb_addr=$mrb;
  $idx_addr=$idx;
  var $0=$idx_addr;
  var $1=$mrb_addr;
  var $arena_idx=(($1+516)|0);
  HEAP32[(($arena_idx)>>2)]=$0;
  return;
}
function _obj_free($mrb, $obj) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $obj_addr;
      var $e;
      var $c;
      var $d;
      $mrb_addr=$mrb;
      $obj_addr=$obj;
      var $0=$obj_addr;
      var $1=$0;
      var $2=HEAP32[(($1)>>2)];
      var $bf_clear=$2 & 255;
      if ((($bf_clear)|(0))==2 | (($bf_clear)|(0))==3 | (($bf_clear)|(0))==4 | (($bf_clear)|(0))==6) {
        label = 3; break;
      }
      else if ((($bf_clear)|(0))==8) {
        label = 4; break;
      }
      else if ((($bf_clear)|(0))==9 | (($bf_clear)|(0))==10 | (($bf_clear)|(0))==12) {
        label = 5; break;
      }
      else if ((($bf_clear)|(0))==20) {
        label = 6; break;
      }
      else if ((($bf_clear)|(0))==22) {
        label = 9; break;
      }
      else if ((($bf_clear)|(0))==14) {
        label = 10; break;
      }
      else if ((($bf_clear)|(0))==15) {
        label = 14; break;
      }
      else if ((($bf_clear)|(0))==16) {
        label = 15; break;
      }
      else if ((($bf_clear)|(0))==17) {
        label = 16; break;
      }
      else if ((($bf_clear)|(0))==21) {
        label = 17; break;
      }
      else {
      label = 20; break;
      }
    case 3: 
      label = 22; break;
    case 4: 
      var $3=$mrb_addr;
      var $4=$obj_addr;
      var $5=$4;
      _mrb_gc_free_iv($3, $5);
      label = 21; break;
    case 5: 
      var $6=$mrb_addr;
      var $7=$obj_addr;
      var $8=$7;
      _mrb_gc_free_mt($6, $8);
      var $9=$mrb_addr;
      var $10=$obj_addr;
      var $11=$10;
      _mrb_gc_free_iv($9, $11);
      label = 21; break;
    case 6: 
      var $12=$obj_addr;
      var $13=$12;
      $e=$13;
      var $14=$e;
      var $cioff=(($14+20)|0);
      var $15=HEAP32[(($cioff)>>2)];
      var $cmp=(($15)|(0)) < 0;
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $16=$mrb_addr;
      var $17=$e;
      var $stack=(($17+12)|0);
      var $18=HEAP32[(($stack)>>2)];
      var $19=$18;
      _mrb_free($16, $19);
      var $20=$e;
      var $stack4=(($20+12)|0);
      HEAP32[(($stack4)>>2)]=0;
      label = 8; break;
    case 8: 
      label = 21; break;
    case 9: 
      var $21=$obj_addr;
      var $22=$21;
      var $cxt=(($22+12)|0);
      var $23=HEAP32[(($cxt)>>2)];
      $c=$23;
      var $24=$mrb_addr;
      var $25=$c;
      _mrb_free_context($24, $25);
      label = 21; break;
    case 10: 
      var $26=$obj_addr;
      var $27=$26;
      var $28=HEAP32[(($27)>>2)];
      var $29=$28 >>> 11;
      var $bf_clear7=$29 & 2097151;
      var $and=$bf_clear7 & 256;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $30=$mrb_addr;
      var $31=$obj_addr;
      var $32=$31;
      var $aux=(($32+16)|0);
      var $shared=$aux;
      var $33=HEAP32[(($shared)>>2)];
      _mrb_ary_decref($30, $33);
      label = 13; break;
    case 12: 
      var $34=$mrb_addr;
      var $35=$obj_addr;
      var $36=$35;
      var $ptr=(($36+20)|0);
      var $37=HEAP32[(($ptr)>>2)];
      var $38=$37;
      _mrb_free($34, $38);
      label = 13; break;
    case 13: 
      label = 21; break;
    case 14: 
      var $39=$mrb_addr;
      var $40=$obj_addr;
      var $41=$40;
      _mrb_gc_free_iv($39, $41);
      var $42=$mrb_addr;
      var $43=$obj_addr;
      var $44=$43;
      _mrb_gc_free_hash($42, $44);
      label = 21; break;
    case 15: 
      var $45=$mrb_addr;
      var $46=$obj_addr;
      var $47=$46;
      _mrb_gc_free_str($45, $47);
      label = 21; break;
    case 16: 
      var $48=$mrb_addr;
      var $49=$obj_addr;
      var $50=$49;
      var $edges=(($50+12)|0);
      var $51=HEAP32[(($edges)>>2)];
      var $52=$51;
      _mrb_free($48, $52);
      label = 21; break;
    case 17: 
      var $53=$obj_addr;
      var $54=$53;
      $d=$54;
      var $55=$d;
      var $type=(($55+16)|0);
      var $56=HEAP32[(($type)>>2)];
      var $dfree=(($56+4)|0);
      var $57=HEAP32[(($dfree)>>2)];
      var $tobool14=(($57)|(0))!=0;
      if ($tobool14) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $58=$d;
      var $type16=(($58+16)|0);
      var $59=HEAP32[(($type16)>>2)];
      var $dfree17=(($59+4)|0);
      var $60=HEAP32[(($dfree17)>>2)];
      var $61=$mrb_addr;
      var $62=$d;
      var $data=(($62+20)|0);
      var $63=HEAP32[(($data)>>2)];
      FUNCTION_TABLE[$60]($61, $63);
      label = 19; break;
    case 19: 
      var $64=$mrb_addr;
      var $65=$obj_addr;
      var $66=$65;
      _mrb_gc_free_iv($64, $66);
      label = 21; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $67=$obj_addr;
      var $68=$67;
      var $69=HEAP32[(($68)>>2)];
      var $70=$69 & -256;
      var $71=$70 | 1;
      HEAP32[(($68)>>2)]=$71;
      label = 22; break;
    case 22: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_gc_protect($mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      $mrb_addr=$mrb;
      var $tt=(($obj+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)>>>(0)) <= 7;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      var $1=$mrb_addr;
      var $value=(($obj)|0);
      var $p=$value;
      var $2=HEAP32[(($p)>>2)];
      var $3=$2;
      _gc_protect($1, $3);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _gc_protect($mrb, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $p_addr;
      $mrb_addr=$mrb;
      $p_addr=$p;
      var $0=$mrb_addr;
      var $arena_idx=(($0+516)|0);
      var $1=HEAP32[(($arena_idx)>>2)];
      var $cmp=(($1)|(0)) >= 100;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$mrb_addr;
      var $arena_idx1=(($2+516)|0);
      HEAP32[(($arena_idx1)>>2)]=96;
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call=_mrb_class_get($4, ((93484)|0));
      _mrb_raise($3, $call, ((110784)|0));
      label = 4; break;
    case 4: 
      var $5=$p_addr;
      var $6=$mrb_addr;
      var $arena_idx2=(($6+516)|0);
      var $7=HEAP32[(($arena_idx2)>>2)];
      var $inc=((($7)+(1))|0);
      HEAP32[(($arena_idx2)>>2)]=$inc;
      var $8=$mrb_addr;
      var $arena=(($8+116)|0);
      var $arrayidx=(($arena+($7<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$5;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_alloc($mrb, $ttype, $cls) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ttype_addr;
      var $cls_addr;
      var $p;
      $mrb_addr=$mrb;
      $ttype_addr=$ttype;
      $cls_addr=$cls;
      var $0=$mrb_addr;
      var $gc_threshold=(($0+540)|0);
      var $1=HEAP32[(($gc_threshold)>>2)];
      var $2=$mrb_addr;
      var $live=(($2+112)|0);
      var $3=HEAP32[(($live)>>2)];
      var $cmp=(($1)>>>(0)) < (($3)>>>(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$mrb_addr;
      _mrb_incremental_gc($4);
      label = 4; break;
    case 4: 
      var $5=$mrb_addr;
      var $free_heaps=(($5+108)|0);
      var $6=HEAP32[(($free_heaps)>>2)];
      var $cmp1=(($6)|(0))==0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$mrb_addr;
      _add_heap($7);
      label = 6; break;
    case 6: 
      var $8=$mrb_addr;
      var $free_heaps4=(($8+108)|0);
      var $9=HEAP32[(($free_heaps4)>>2)];
      var $freelist=(($9)|0);
      var $10=HEAP32[(($freelist)>>2)];
      $p=$10;
      var $11=$p;
      var $12=$11;
      var $next=(($12+12)|0);
      var $13=HEAP32[(($next)>>2)];
      var $14=$mrb_addr;
      var $free_heaps5=(($14+108)|0);
      var $15=HEAP32[(($free_heaps5)>>2)];
      var $freelist6=(($15)|0);
      HEAP32[(($freelist6)>>2)]=$13;
      var $16=$mrb_addr;
      var $free_heaps7=(($16+108)|0);
      var $17=HEAP32[(($free_heaps7)>>2)];
      var $freelist8=(($17)|0);
      var $18=HEAP32[(($freelist8)>>2)];
      var $cmp9=(($18)|(0))==0;
      if ($cmp9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $19=$mrb_addr;
      var $20=$mrb_addr;
      var $free_heaps11=(($20+108)|0);
      var $21=HEAP32[(($free_heaps11)>>2)];
      _unlink_free_heap_page($19, $21);
      label = 8; break;
    case 8: 
      var $22=$mrb_addr;
      var $live13=(($22+112)|0);
      var $23=HEAP32[(($live13)>>2)];
      var $inc=((($23)+(1))|0);
      HEAP32[(($live13)>>2)]=$inc;
      var $24=$mrb_addr;
      var $25=$p;
      _gc_protect($24, $25);
      var $26=$p;
      var $27=$26;
      var $28=$27;
      assert(24 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[((((79800)|0))>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[(((((79800)|0))+(4))>>2)];HEAP32[((($28)+(8))>>2)]=HEAP32[(((((79800)|0))+(8))>>2)];HEAP32[((($28)+(12))>>2)]=HEAP32[(((((79800)|0))+(12))>>2)];HEAP32[((($28)+(16))>>2)]=HEAP32[(((((79800)|0))+(16))>>2)];HEAP32[((($28)+(20))>>2)]=HEAP32[(((((79800)|0))+(20))>>2)];
      var $29=$ttype_addr;
      var $30=$p;
      var $bf_value=$29 & 255;
      var $31=$30;
      var $32=$bf_value & 255;
      var $33=HEAP32[(($31)>>2)];
      var $34=$33 & -256;
      var $35=$34 | $32;
      HEAP32[(($31)>>2)]=$35;
      var $36=$cls_addr;
      var $37=$p;
      var $c=(($37+4)|0);
      HEAP32[(($c)>>2)]=$36;
      var $38=$mrb_addr;
      var $current_white_part=(($38+524)|0);
      var $39=HEAP32[(($current_white_part)>>2)];
      var $40=$p;
      var $bf_value14=$39 & 7;
      var $41=$40;
      var $42=$bf_value14 & 7;
      var $43=$42 << 8;
      var $44=HEAP32[(($41)>>2)];
      var $45=$44 & -1793;
      var $46=$45 | $43;
      HEAP32[(($41)>>2)]=$46;
      var $47=$p;
      return $47;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_incremental_gc($mrb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $limit;
      var $result;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $1=$0;
      var $bf_field_offs=(($1+552)|0);
      var $2=HEAP8[($bf_field_offs)];
      var $bf_clear=$2 & 1;
      var $tobool=(($bf_clear << 24) >> 24)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 30; break;
    case 4: 
      var $3=$mrb_addr;
      var $4=$3;
      var $bf_field_offs1=(($4+552)|0);
      var $5=HEAP8[($bf_field_offs1)];
      var $6=(($5)&(255)) >>> 2;
      var $bf_clear2=$6 & 1;
      var $conv=(($bf_clear2)&(255));
      var $tobool3=(($conv)|(0))!=0;
      if ($tobool3) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $7=$mrb_addr;
      var $8=$7;
      var $bf_field_offs4=(($8+552)|0);
      var $9=HEAP8[($bf_field_offs4)];
      var $10=(($9)&(255)) >>> 1;
      var $bf_clear5=$10 & 1;
      var $tobool6=(($bf_clear5 << 24) >> 24)!=0;
      if ($tobool6) { label = 10; break; } else { label = 6; break; }
    case 6: 
      label = 7; break;
    case 7: 
      var $11=$mrb_addr;
      var $call=_incremental_gc($11, -1);
      label = 8; break;
    case 8: 
      var $12=$mrb_addr;
      var $gc_state=(($12+520)|0);
      var $13=HEAP32[(($gc_state)>>2)];
      var $cmp=(($13)|(0))!=0;
      if ($cmp) { label = 7; break; } else { label = 9; break; }
    case 9: 
      label = 16; break;
    case 10: 
      $limit=0;
      $result=0;
      var $14=$mrb_addr;
      var $gc_step_ratio=(($14+548)|0);
      var $15=HEAP32[(($gc_step_ratio)>>2)];
      var $mul=((($15)*(10))&-1);
      $limit=$mul;
      label = 11; break;
    case 11: 
      var $16=$result;
      var $17=$limit;
      var $cmp9=(($16)>>>(0)) < (($17)>>>(0));
      if ($cmp9) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $18=$mrb_addr;
      var $19=$limit;
      var $call11=_incremental_gc($18, $19);
      var $20=$result;
      var $add=((($20)+($call11))|0);
      $result=$add;
      var $21=$mrb_addr;
      var $gc_state12=(($21+520)|0);
      var $22=HEAP32[(($gc_state12)>>2)];
      var $cmp13=(($22)|(0))==0;
      if ($cmp13) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      label = 11; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $23=$mrb_addr;
      var $gc_state18=(($23+520)|0);
      var $24=HEAP32[(($gc_state18)>>2)];
      var $cmp19=(($24)|(0))==0;
      if ($cmp19) { label = 17; break; } else { label = 29; break; }
    case 17: 
      var $25=$mrb_addr;
      var $gc_live_after_mark=(($25+536)|0);
      var $26=HEAP32[(($gc_live_after_mark)>>2)];
      var $div=Math.floor(((($26)>>>(0)))/(100));
      var $27=$mrb_addr;
      var $gc_interval_ratio=(($27+544)|0);
      var $28=HEAP32[(($gc_interval_ratio)>>2)];
      var $mul22=Math.imul($div,$28);
      var $29=$mrb_addr;
      var $gc_threshold=(($29+540)|0);
      HEAP32[(($gc_threshold)>>2)]=$mul22;
      var $30=$mrb_addr;
      var $gc_threshold23=(($30+540)|0);
      var $31=HEAP32[(($gc_threshold23)>>2)];
      var $cmp24=(($31)>>>(0)) < 1024;
      if ($cmp24) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $32=$mrb_addr;
      var $gc_threshold27=(($32+540)|0);
      HEAP32[(($gc_threshold27)>>2)]=1024;
      label = 19; break;
    case 19: 
      var $33=$mrb_addr;
      var $34=$33;
      var $bf_field_offs29=(($34+552)|0);
      var $35=HEAP8[($bf_field_offs29)];
      var $36=(($35)&(255)) >>> 2;
      var $bf_clear30=$36 & 1;
      var $conv31=(($bf_clear30)&(255));
      var $tobool32=(($conv31)|(0))!=0;
      if ($tobool32) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $37=$mrb_addr;
      var $38=$37;
      var $bf_field_offs34=(($38+552)|0);
      var $39=HEAP8[($bf_field_offs34)];
      var $40=(($39)&(255)) >>> 1;
      var $bf_clear35=$40 & 1;
      var $conv36=(($bf_clear35)&(255));
      var $tobool37=(($conv36)|(0))!=0;
      if ($tobool37) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $41=$mrb_addr;
      var $gc_live_after_mark39=(($41+536)|0);
      var $42=HEAP32[(($gc_live_after_mark39)>>2)];
      var $div40=Math.floor(((($42)>>>(0)))/(100));
      var $mul41=((($div40)*(200))&-1);
      var $43=$mrb_addr;
      var $majorgc_old_threshold=(($43+556)|0);
      HEAP32[(($majorgc_old_threshold)>>2)]=$mul41;
      var $44=$mrb_addr;
      var $45=$44;
      var $bf_field_offs42=(($45+552)|0);
      var $46=HEAP8[($bf_field_offs42)];
      var $47=$46 & -3;
      HEAP8[($bf_field_offs42)]=$47;
      label = 28; break;
    case 22: 
      var $48=$mrb_addr;
      var $49=$48;
      var $bf_field_offs44=(($49+552)|0);
      var $50=HEAP8[($bf_field_offs44)];
      var $51=(($50)&(255)) >>> 2;
      var $bf_clear45=$51 & 1;
      var $conv46=(($bf_clear45)&(255));
      var $tobool47=(($conv46)|(0))!=0;
      if ($tobool47) { label = 23; break; } else { label = 27; break; }
    case 23: 
      var $52=$mrb_addr;
      var $53=$52;
      var $bf_field_offs49=(($53+552)|0);
      var $54=HEAP8[($bf_field_offs49)];
      var $55=(($54)&(255)) >>> 1;
      var $bf_clear50=$55 & 1;
      var $tobool51=(($bf_clear50 << 24) >> 24)!=0;
      if ($tobool51) { label = 27; break; } else { label = 24; break; }
    case 24: 
      var $56=$mrb_addr;
      var $live=(($56+112)|0);
      var $57=HEAP32[(($live)>>2)];
      var $58=$mrb_addr;
      var $majorgc_old_threshold53=(($58+556)|0);
      var $59=HEAP32[(($majorgc_old_threshold53)>>2)];
      var $cmp54=(($57)>>>(0)) > (($59)>>>(0));
      if ($cmp54) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $60=$mrb_addr;
      _clear_all_old($60);
      var $61=$mrb_addr;
      var $62=$61;
      var $bf_field_offs57=(($62+552)|0);
      var $63=HEAP8[($bf_field_offs57)];
      var $64=$63 & -3;
      var $65=$64 | 2;
      HEAP8[($bf_field_offs57)]=$65;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 30; break;
    case 29: 
      var $66=$mrb_addr;
      var $live62=(($66+112)|0);
      var $67=HEAP32[(($live62)>>2)];
      var $add63=((($67)+(1024))|0);
      var $68=$mrb_addr;
      var $gc_threshold64=(($68+540)|0);
      HEAP32[(($gc_threshold64)>>2)]=$add63;
      label = 30; break;
    case 30: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_gc_mark($mrb, $obj) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $obj_addr;
      $mrb_addr=$mrb;
      $obj_addr=$obj;
      var $0=$obj_addr;
      var $cmp=(($0)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 7; break;
    case 4: 
      var $1=$obj_addr;
      var $2=$1;
      var $3=HEAP32[(($2)>>2)];
      var $4=$3 >>> 8;
      var $bf_clear=$4 & 7;
      var $and=$bf_clear & 3;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 5; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $5=$mrb_addr;
      var $6=$obj_addr;
      _add_gray_list($5, $6);
      label = 7; break;
    case 7: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _incremental_gc($mrb, $limit) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $limit_addr;
      var $tried_sweep;
      $mrb_addr=$mrb;
      $limit_addr=$limit;
      var $0=$mrb_addr;
      var $gc_state=(($0+520)|0);
      var $1=HEAP32[(($gc_state)>>2)];
      if ((($1)|(0))==0) {
        label = 3; break;
      }
      else if ((($1)|(0))==1) {
        label = 4; break;
      }
      else if ((($1)|(0))==2) {
        label = 7; break;
      }
      else {
      label = 10; break;
      }
    case 3: 
      var $2=$mrb_addr;
      _root_scan_phase($2);
      var $3=$mrb_addr;
      var $gc_state1=(($3+520)|0);
      HEAP32[(($gc_state1)>>2)]=1;
      var $4=$mrb_addr;
      var $current_white_part=(($4+524)|0);
      var $5=HEAP32[(($current_white_part)>>2)];
      var $xor=$5 ^ 3;
      var $6=$mrb_addr;
      var $current_white_part2=(($6+524)|0);
      HEAP32[(($current_white_part2)>>2)]=$xor;
      $retval=0;
      label = 11; break;
    case 4: 
      var $7=$mrb_addr;
      var $gray_list=(($7+528)|0);
      var $8=HEAP32[(($gray_list)>>2)];
      var $tobool=(($8)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=$mrb_addr;
      var $10=$limit_addr;
      var $call=_incremental_marking_phase($9, $10);
      $retval=$call;
      label = 11; break;
    case 6: 
      var $11=$mrb_addr;
      _final_marking_phase($11);
      var $12=$mrb_addr;
      _prepare_incremental_sweep($12);
      $retval=0;
      label = 11; break;
    case 7: 
      $tried_sweep=0;
      var $13=$mrb_addr;
      var $14=$limit_addr;
      var $call5=_incremental_sweep_phase($13, $14);
      $tried_sweep=$call5;
      var $15=$tried_sweep;
      var $cmp=(($15)|(0))==0;
      if ($cmp) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $16=$mrb_addr;
      var $gc_state7=(($16+520)|0);
      HEAP32[(($gc_state7)>>2)]=0;
      label = 9; break;
    case 9: 
      var $17=$tried_sweep;
      $retval=$17;
      label = 11; break;
    case 10: 
      $retval=0;
      label = 11; break;
    case 11: 
      var $18=$retval;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function _clear_all_old($mrb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $origin_mode;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $1=$0;
      var $bf_field_offs=(($1+552)|0);
      var $2=HEAP8[($bf_field_offs)];
      var $3=(($2)&(255)) >>> 2;
      var $bf_clear=$3 & 1;
      var $conv=(($bf_clear)&(255));
      $origin_mode=$conv;
      var $4=$mrb_addr;
      var $5=$4;
      var $bf_field_offs1=(($5+552)|0);
      var $6=HEAP8[($bf_field_offs1)];
      var $7=(($6)&(255)) >>> 2;
      var $bf_clear2=$7 & 1;
      var $conv3=(($bf_clear2)&(255));
      var $tobool=(($conv3)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $8=$mrb_addr;
      var $9=$8;
      var $bf_field_offs4=(($9+552)|0);
      var $10=HEAP8[($bf_field_offs4)];
      var $11=(($10)&(255)) >>> 1;
      var $bf_clear5=$11 & 1;
      var $conv6=(($bf_clear5)&(255));
      var $tobool7=(($conv6)|(0))!=0;
      if ($tobool7) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $12=$mrb_addr;
      _advance_phase($12, 0);
      label = 5; break;
    case 5: 
      var $13=$mrb_addr;
      var $14=$13;
      var $bf_field_offs8=(($14+552)|0);
      var $15=HEAP8[($bf_field_offs8)];
      var $16=$15 & -5;
      HEAP8[($bf_field_offs8)]=$16;
      var $17=$mrb_addr;
      _prepare_incremental_sweep($17);
      var $18=$mrb_addr;
      _advance_phase($18, 0);
      var $19=$mrb_addr;
      var $gray_list=(($19+528)|0);
      HEAP32[(($gray_list)>>2)]=0;
      var $20=$mrb_addr;
      var $variable_gray_list=(($20+532)|0);
      HEAP32[(($variable_gray_list)>>2)]=0;
      var $21=$origin_mode;
      var $conv9=(($21) & 255);
      var $22=$mrb_addr;
      var $bf_value=$conv9 & 1;
      var $23=$22;
      var $bf_field_offs10=(($23+552)|0);
      var $24=$bf_value & 1;
      var $25=$24 << 2;
      var $26=HEAP8[($bf_field_offs10)];
      var $27=$26 & -5;
      var $28=$27 | $25;
      HEAP8[($bf_field_offs10)]=$28;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_field_write_barrier($mrb, $obj, $value) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $obj_addr;
      var $value_addr;
      $mrb_addr=$mrb;
      $obj_addr=$obj;
      $value_addr=$value;
      var $0=$obj_addr;
      var $1=$0;
      var $2=HEAP32[(($1)>>2)];
      var $3=$2 >>> 8;
      var $bf_clear=$3 & 7;
      var $and=$bf_clear & 4;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 10; break;
    case 4: 
      var $4=$value_addr;
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6 >>> 8;
      var $bf_clear1=$7 & 7;
      var $and2=$bf_clear1 & 3;
      var $tobool3=(($and2)|(0))!=0;
      if ($tobool3) { label = 6; break; } else { label = 5; break; }
    case 5: 
      label = 10; break;
    case 6: 
      var $8=$mrb_addr;
      var $9=$8;
      var $bf_field_offs=(($9+552)|0);
      var $10=HEAP8[($bf_field_offs)];
      var $11=(($10)&(255)) >>> 2;
      var $bf_clear6=$11 & 1;
      var $conv=(($bf_clear6)&(255));
      var $tobool7=(($conv)|(0))!=0;
      if ($tobool7) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $12=$mrb_addr;
      var $gc_state=(($12+520)|0);
      var $13=HEAP32[(($gc_state)>>2)];
      var $cmp=(($13)|(0))==1;
      if ($cmp) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $14=$mrb_addr;
      var $15=$value_addr;
      _add_gray_list($14, $15);
      label = 10; break;
    case 9: 
      var $16=$mrb_addr;
      var $current_white_part=(($16+524)|0);
      var $17=HEAP32[(($current_white_part)>>2)];
      var $18=$obj_addr;
      var $bf_value=$17 & 7;
      var $19=$18;
      var $20=$bf_value & 7;
      var $21=$20 << 8;
      var $22=HEAP32[(($19)>>2)];
      var $23=$22 & -1793;
      var $24=$23 | $21;
      HEAP32[(($19)>>2)]=$24;
      label = 10; break;
    case 10: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_write_barrier($mrb, $obj) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $obj_addr;
      $mrb_addr=$mrb;
      $obj_addr=$obj;
      var $0=$obj_addr;
      var $1=$0;
      var $2=HEAP32[(($1)>>2)];
      var $3=$2 >>> 8;
      var $bf_clear=$3 & 7;
      var $and=$bf_clear & 4;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 5; break;
    case 4: 
      var $4=$obj_addr;
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6 & -1793;
      HEAP32[(($5)>>2)]=$7;
      var $8=$mrb_addr;
      var $variable_gray_list=(($8+532)|0);
      var $9=HEAP32[(($variable_gray_list)>>2)];
      var $10=$obj_addr;
      var $gcnext=(($10+8)|0);
      HEAP32[(($gcnext)>>2)]=$9;
      var $11=$obj_addr;
      var $12=$mrb_addr;
      var $variable_gray_list1=(($12+532)|0);
      HEAP32[(($variable_gray_list1)>>2)]=$11;
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _prepare_incremental_sweep($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $gc_state=(($0+520)|0);
  HEAP32[(($gc_state)>>2)]=2;
  var $1=$mrb_addr;
  var $heaps=(($1+100)|0);
  var $2=HEAP32[(($heaps)>>2)];
  var $3=$mrb_addr;
  var $sweeps=(($3+104)|0);
  HEAP32[(($sweeps)>>2)]=$2;
  var $4=$mrb_addr;
  var $live=(($4+112)|0);
  var $5=HEAP32[(($live)>>2)];
  var $6=$mrb_addr;
  var $gc_live_after_mark=(($6+536)|0);
  HEAP32[(($gc_live_after_mark)>>2)]=$5;
  return;
}
function _mrb_objspace_each_objects($mrb, $callback, $data) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $callback_addr;
      var $data_addr;
      var $page;
      var $p;
      var $pend;
      $mrb_addr=$mrb;
      $callback_addr=$callback;
      $data_addr=$data;
      var $0=$mrb_addr;
      var $heaps=(($0+100)|0);
      var $1=HEAP32[(($heaps)>>2)];
      $page=$1;
      label = 3; break;
    case 3: 
      var $2=$page;
      var $cmp=(($2)|(0))!=0;
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $3=$page;
      var $objects=(($3+24)|0);
      var $arraydecay=(($objects)|0);
      $p=$arraydecay;
      var $4=$p;
      var $add_ptr=(($4+24576)|0);
      $pend=$add_ptr;
      label = 5; break;
    case 5: 
      var $5=$p;
      var $6=$pend;
      var $cmp1=(($5)>>>(0)) < (($6)>>>(0));
      if ($cmp1) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $7=$callback_addr;
      var $8=$mrb_addr;
      var $9=$p;
      var $as=(($9)|0);
      var $basic=$as;
      var $10=$data_addr;
      FUNCTION_TABLE[$7]($8, $basic, $10);
      label = 7; break;
    case 7: 
      var $11=$p;
      var $incdec_ptr=(($11+24)|0);
      $p=$incdec_ptr;
      label = 5; break;
    case 8: 
      var $12=$page;
      var $next=(($12+8)|0);
      var $13=HEAP32[(($next)>>2)];
      $page=$13;
      label = 3; break;
    case 9: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_gc($mrb) {
  var label = 0;
  var $mrb_addr;
  var $gc;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_define_module($0, ((104992)|0));
  $gc=$call;
  var $1=$mrb_addr;
  var $2=$gc;
  _mrb_define_class_method($1, $2, ((102148)|0), 270, 0);
  var $3=$mrb_addr;
  var $4=$gc;
  _mrb_define_class_method($3, $4, ((99600)|0), 168, 0);
  var $5=$mrb_addr;
  var $6=$gc;
  _mrb_define_class_method($5, $6, ((97280)|0), 106, 0);
  var $7=$mrb_addr;
  var $8=$gc;
  _mrb_define_class_method($7, $8, ((96072)|0), 110, 0);
  var $9=$mrb_addr;
  var $10=$gc;
  _mrb_define_class_method($9, $10, ((95008)|0), 268, 262144);
  var $11=$mrb_addr;
  var $12=$gc;
  _mrb_define_class_method($11, $12, ((94180)|0), 402, 0);
  var $13=$mrb_addr;
  var $14=$gc;
  _mrb_define_class_method($13, $14, ((93304)|0), 652, 262144);
  var $15=$mrb_addr;
  var $16=$gc;
  _mrb_define_class_method($15, $16, ((113284)|0), 364, 262144);
  var $17=$mrb_addr;
  var $18=$gc;
  _mrb_define_class_method($17, $18, ((112444)|0), 192, 0);
  return;
}
function _gc_start($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_garbage_collect($0);
  _mrb_nil_value1004($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _gc_enable($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $old;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$0;
  var $bf_field_offs=(($1+552)|0);
  var $2=HEAP8[($bf_field_offs)];
  var $bf_clear=$2 & 1;
  var $conv=(($bf_clear)&(255));
  $old=$conv;
  var $3=$mrb_addr;
  var $4=$3;
  var $bf_field_offs1=(($4+552)|0);
  var $5=HEAP8[($bf_field_offs1)];
  var $6=$5 & -2;
  HEAP8[($bf_field_offs1)]=$6;
  var $7=$old;
  var $conv2=(($7) & 255);
  _mrb_bool_value1003($agg_result, $conv2);
  STACKTOP = __stackBase__;
  return;
}
function _gc_disable($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $old;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$0;
  var $bf_field_offs=(($1+552)|0);
  var $2=HEAP8[($bf_field_offs)];
  var $bf_clear=$2 & 1;
  var $conv=(($bf_clear)&(255));
  $old=$conv;
  var $3=$mrb_addr;
  var $4=$3;
  var $bf_field_offs1=(($4+552)|0);
  var $5=HEAP8[($bf_field_offs1)];
  var $6=$5 & -2;
  var $7=$6 | 1;
  HEAP8[($bf_field_offs1)]=$7;
  var $8=$old;
  var $conv2=(($8) & 255);
  _mrb_bool_value1003($agg_result, $conv2);
  STACKTOP = __stackBase__;
  return;
}
function _gc_interval_ratio_get($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $gc_interval_ratio=(($0+544)|0);
  var $1=HEAP32[(($gc_interval_ratio)>>2)];
  _mrb_fixnum_value1005($agg_result, $1);
  STACKTOP = __stackBase__;
  return;
}
function _gc_interval_ratio_set($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $ratio=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((111284)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ratio,tempInt));
  var $1=HEAP32[(($ratio)>>2)];
  var $2=$mrb_addr;
  var $gc_interval_ratio=(($2+544)|0);
  HEAP32[(($gc_interval_ratio)>>2)]=$1;
  _mrb_nil_value1004($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _gc_step_ratio_get($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $gc_step_ratio=(($0+548)|0);
  var $1=HEAP32[(($gc_step_ratio)>>2)];
  _mrb_fixnum_value1005($agg_result, $1);
  STACKTOP = __stackBase__;
  return;
}
function _gc_step_ratio_set($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $ratio=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((111284)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ratio,tempInt));
  var $1=HEAP32[(($ratio)>>2)];
  var $2=$mrb_addr;
  var $gc_step_ratio=(($2+548)|0);
  HEAP32[(($gc_step_ratio)>>2)]=$1;
  _mrb_nil_value1004($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _gc_generational_mode_set($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $enable=__stackBase__;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((111896)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$enable,tempInt));
      var $1=$mrb_addr;
      var $2=$1;
      var $bf_field_offs=(($2+552)|0);
      var $3=HEAP8[($bf_field_offs)];
      var $4=(($3)&(255)) >>> 2;
      var $bf_clear=$4 & 1;
      var $conv=(($bf_clear)&(255));
      var $5=HEAP8[($enable)];
      var $conv1=(($5)&(255));
      var $cmp=(($conv)|(0))!=(($conv1)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$mrb_addr;
      var $7=HEAP8[($enable)];
      var $conv3=(($7)&(255));
      _change_gen_gc_mode($6, $conv3);
      label = 4; break;
    case 4: 
      var $8=HEAP8[($enable)];
      _mrb_bool_value1003($agg_result, $8);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _gc_generational_mode_get($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$0;
  var $bf_field_offs=(($1+552)|0);
  var $2=HEAP8[($bf_field_offs)];
  var $3=(($2)&(255)) >>> 2;
  var $bf_clear=$3 & 1;
  _mrb_bool_value1003($agg_result, $bf_clear);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_bool_value1003($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $boolean_addr;
      var $v=__stackBase__;
      $boolean_addr=$boolean;
      label = 3; break;
    case 3: 
      var $0=$boolean_addr;
      var $conv=(($0)&(255));
      var $tobool=(($conv)|(0))!=0;
      var $cond=$tobool ? 2 : 0;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$cond;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _change_gen_gc_mode($mrb, $enable) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $enable_addr;
      $mrb_addr=$mrb;
      $enable_addr=$enable;
      var $0=$mrb_addr;
      var $1=$0;
      var $bf_field_offs=(($1+552)|0);
      var $2=HEAP8[($bf_field_offs)];
      var $3=(($2)&(255)) >>> 2;
      var $bf_clear=$3 & 1;
      var $conv=(($bf_clear)&(255));
      var $tobool=(($conv)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $4=$enable_addr;
      var $tobool1=(($4)|(0))!=0;
      if ($tobool1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $5=$mrb_addr;
      _clear_all_old($5);
      var $6=$mrb_addr;
      var $7=$6;
      var $bf_field_offs2=(($7+552)|0);
      var $8=HEAP8[($bf_field_offs2)];
      var $9=$8 & -3;
      HEAP8[($bf_field_offs2)]=$9;
      label = 9; break;
    case 5: 
      var $10=$mrb_addr;
      var $11=$10;
      var $bf_field_offs3=(($11+552)|0);
      var $12=HEAP8[($bf_field_offs3)];
      var $13=(($12)&(255)) >>> 2;
      var $bf_clear4=$13 & 1;
      var $tobool5=(($bf_clear4 << 24) >> 24)!=0;
      if ($tobool5) { label = 8; break; } else { label = 6; break; }
    case 6: 
      var $14=$enable_addr;
      var $tobool7=(($14)|(0))!=0;
      if ($tobool7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $15=$mrb_addr;
      _advance_phase($15, 0);
      var $16=$mrb_addr;
      var $gc_live_after_mark=(($16+536)|0);
      var $17=HEAP32[(($gc_live_after_mark)>>2)];
      var $div=Math.floor(((($17)>>>(0)))/(100));
      var $mul=((($div)*(200))&-1);
      var $18=$mrb_addr;
      var $majorgc_old_threshold=(($18+556)|0);
      HEAP32[(($majorgc_old_threshold)>>2)]=$mul;
      var $19=$mrb_addr;
      var $20=$19;
      var $bf_field_offs9=(($20+552)|0);
      var $21=HEAP8[($bf_field_offs9)];
      var $22=$21 & -3;
      HEAP8[($bf_field_offs9)]=$22;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $23=$enable_addr;
      var $conv11=(($23) & 255);
      var $24=$mrb_addr;
      var $bf_value=$conv11 & 1;
      var $25=$24;
      var $bf_field_offs12=(($25+552)|0);
      var $26=$bf_value & 1;
      var $27=$26 << 2;
      var $28=HEAP8[($bf_field_offs12)];
      var $29=$28 & -5;
      var $30=$29 | $27;
      HEAP8[($bf_field_offs12)]=$30;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _advance_phase($mrb, $to_state) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $to_state_addr;
      $mrb_addr=$mrb;
      $to_state_addr=$to_state;
      label = 3; break;
    case 3: 
      var $0=$mrb_addr;
      var $gc_state=(($0+520)|0);
      var $1=HEAP32[(($gc_state)>>2)];
      var $2=$to_state_addr;
      var $cmp=(($1)|(0))!=(($2)|(0));
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$mrb_addr;
      var $call=_incremental_gc($3, -1);
      label = 3; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1004($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value1005($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _root_scan_phase($mrb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $j;
      var $i;
      var $e;
      var $len;
      var $irep16;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $1=$0;
      var $bf_field_offs=(($1+552)|0);
      var $2=HEAP8[($bf_field_offs)];
      var $3=(($2)&(255)) >>> 2;
      var $bf_clear=$3 & 1;
      var $conv=(($bf_clear)&(255));
      var $tobool=(($conv)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$mrb_addr;
      var $5=$4;
      var $bf_field_offs1=(($5+552)|0);
      var $6=HEAP8[($bf_field_offs1)];
      var $7=(($6)&(255)) >>> 1;
      var $bf_clear2=$7 & 1;
      var $tobool3=(($bf_clear2 << 24) >> 24)!=0;
      if ($tobool3) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$mrb_addr;
      var $gray_list=(($8+528)|0);
      HEAP32[(($gray_list)>>2)]=0;
      var $9=$mrb_addr;
      var $variable_gray_list=(($9+532)|0);
      HEAP32[(($variable_gray_list)>>2)]=0;
      label = 5; break;
    case 5: 
      var $10=$mrb_addr;
      _mrb_gc_mark_gv($10);
      $i=0;
      var $11=$mrb_addr;
      var $arena_idx=(($11+516)|0);
      var $12=HEAP32[(($arena_idx)>>2)];
      $e=$12;
      label = 6; break;
    case 6: 
      var $13=$i;
      var $14=$e;
      var $cmp=(($13)>>>(0)) < (($14)>>>(0));
      if ($cmp) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $15=$mrb_addr;
      var $16=$i;
      var $17=$mrb_addr;
      var $arena=(($17+116)|0);
      var $arrayidx=(($arena+($16<<2))|0);
      var $18=HEAP32[(($arrayidx)>>2)];
      _mrb_gc_mark($15, $18);
      label = 8; break;
    case 8: 
      var $19=$i;
      var $inc=((($19)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 9: 
      var $20=$mrb_addr;
      var $21=$mrb_addr;
      var $object_class=(($21+44)|0);
      var $22=HEAP32[(($object_class)>>2)];
      var $23=$22;
      _mrb_gc_mark($20, $23);
      var $24=$mrb_addr;
      var $25=$mrb_addr;
      var $top_self=(($25+40)|0);
      var $26=HEAP32[(($top_self)>>2)];
      var $27=$26;
      _mrb_gc_mark($24, $27);
      var $28=$mrb_addr;
      var $29=$mrb_addr;
      var $exc=(($29+16)|0);
      var $30=HEAP32[(($exc)>>2)];
      var $31=$30;
      _mrb_gc_mark($28, $31);
      var $32=$mrb_addr;
      var $33=$mrb_addr;
      var $root_c=(($33+12)|0);
      var $34=HEAP32[(($root_c)>>2)];
      _mark_context($32, $34);
      var $35=$mrb_addr;
      var $irep=(($35+24)|0);
      var $36=HEAP32[(($irep)>>2)];
      var $tobool5=(($36)|(0))!=0;
      if ($tobool5) { label = 10; break; } else { label = 27; break; }
    case 10: 
      var $37=$mrb_addr;
      var $irep_len=(($37+28)|0);
      var $38=HEAP32[(($irep_len)>>2)];
      $len=$38;
      var $39=$len;
      var $40=$mrb_addr;
      var $irep_capa=(($40+32)|0);
      var $41=HEAP32[(($irep_capa)>>2)];
      var $cmp7=(($39)>>>(0)) > (($41)>>>(0));
      if ($cmp7) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $42=$mrb_addr;
      var $irep_capa10=(($42+32)|0);
      var $43=HEAP32[(($irep_capa10)>>2)];
      $len=$43;
      label = 12; break;
    case 12: 
      $i=0;
      label = 13; break;
    case 13: 
      var $44=$i;
      var $45=$len;
      var $cmp13=(($44)>>>(0)) < (($45)>>>(0));
      if ($cmp13) { label = 14; break; } else { label = 26; break; }
    case 14: 
      var $46=$i;
      var $47=$mrb_addr;
      var $irep17=(($47+24)|0);
      var $48=HEAP32[(($irep17)>>2)];
      var $arrayidx18=(($48+($46<<2))|0);
      var $49=HEAP32[(($arrayidx18)>>2)];
      $irep16=$49;
      var $50=$irep16;
      var $tobool19=(($50)|(0))!=0;
      if ($tobool19) { label = 16; break; } else { label = 15; break; }
    case 15: 
      label = 25; break;
    case 16: 
      $j=0;
      label = 17; break;
    case 17: 
      var $51=$j;
      var $52=$irep16;
      var $plen=(($52+36)|0);
      var $53=HEAP32[(($plen)>>2)];
      var $cmp23=(($51)>>>(0)) < (($53)>>>(0));
      if ($cmp23) { label = 18; break; } else { label = 24; break; }
    case 18: 
      label = 19; break;
    case 19: 
      var $54=$j;
      var $55=$irep16;
      var $pool=(($55+16)|0);
      var $56=HEAP32[(($pool)>>2)];
      var $arrayidx26=(($56+((($54)*(12))&-1))|0);
      var $tt=(($arrayidx26+8)|0);
      var $57=HEAP32[(($tt)>>2)];
      var $cmp27=(($57)>>>(0)) >= 8;
      if ($cmp27) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $58=$mrb_addr;
      var $59=$j;
      var $60=$irep16;
      var $pool30=(($60+16)|0);
      var $61=HEAP32[(($pool30)>>2)];
      var $arrayidx31=(($61+((($59)*(12))&-1))|0);
      var $value=(($arrayidx31)|0);
      var $p=$value;
      var $62=HEAP32[(($p)>>2)];
      var $63=$62;
      _mrb_gc_mark($58, $63);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $64=$j;
      var $inc34=((($64)+(1))|0);
      $j=$inc34;
      label = 17; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $65=$i;
      var $inc37=((($65)+(1))|0);
      $i=$inc37;
      label = 13; break;
    case 26: 
      label = 27; break;
    case 27: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _incremental_marking_phase($mrb, $limit) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $limit_addr;
      var $tried_marks;
      $mrb_addr=$mrb;
      $limit_addr=$limit;
      $tried_marks=0;
      label = 3; break;
    case 3: 
      var $0=$mrb_addr;
      var $gray_list=(($0+528)|0);
      var $1=HEAP32[(($gray_list)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { var $4 = 0;label = 5; break; }
    case 4: 
      var $2=$tried_marks;
      var $3=$limit_addr;
      var $cmp=(($2)>>>(0)) < (($3)>>>(0));
      var $4 = $cmp;label = 5; break;
    case 5: 
      var $4;
      if ($4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $5=$mrb_addr;
      var $6=$mrb_addr;
      var $gray_list1=(($6+528)|0);
      var $7=HEAP32[(($gray_list1)>>2)];
      var $call=_gc_gray_mark($5, $7);
      var $8=$tried_marks;
      var $add=((($8)+($call))|0);
      $tried_marks=$add;
      label = 3; break;
    case 7: 
      var $9=$tried_marks;
      return $9;
    default: assert(0, "bad label: " + label);
  }
}
function _final_marking_phase($mrb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      $mrb_addr=$mrb;
      label = 3; break;
    case 3: 
      var $0=$mrb_addr;
      var $gray_list=(($0+528)|0);
      var $1=HEAP32[(($gray_list)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $2=$mrb_addr;
      var $gray_list1=(($2+528)|0);
      var $3=HEAP32[(($gray_list1)>>2)];
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5 >>> 8;
      var $bf_clear=$6 & 7;
      var $cmp=(($bf_clear)|(0))==0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$mrb_addr;
      var $8=$mrb_addr;
      var $gray_list2=(($8+528)|0);
      var $9=HEAP32[(($gray_list2)>>2)];
      _gc_mark_children($7, $9);
      label = 7; break;
    case 6: 
      var $10=$mrb_addr;
      var $gray_list3=(($10+528)|0);
      var $11=HEAP32[(($gray_list3)>>2)];
      var $gcnext=(($11+8)|0);
      var $12=HEAP32[(($gcnext)>>2)];
      var $13=$mrb_addr;
      var $gray_list4=(($13+528)|0);
      HEAP32[(($gray_list4)>>2)]=$12;
      label = 7; break;
    case 7: 
      label = 3; break;
    case 8: 
      var $14=$mrb_addr;
      var $variable_gray_list=(($14+532)|0);
      var $15=HEAP32[(($variable_gray_list)>>2)];
      var $16=$mrb_addr;
      var $gray_list5=(($16+528)|0);
      HEAP32[(($gray_list5)>>2)]=$15;
      var $17=$mrb_addr;
      var $variable_gray_list6=(($17+532)|0);
      HEAP32[(($variable_gray_list6)>>2)]=0;
      label = 9; break;
    case 9: 
      var $18=$mrb_addr;
      var $gray_list8=(($18+528)|0);
      var $19=HEAP32[(($gray_list8)>>2)];
      var $tobool9=(($19)|(0))!=0;
      if ($tobool9) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $20=$mrb_addr;
      var $gray_list11=(($20+528)|0);
      var $21=HEAP32[(($gray_list11)>>2)];
      var $22=$21;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 >>> 8;
      var $bf_clear12=$24 & 7;
      var $cmp13=(($bf_clear12)|(0))==0;
      if ($cmp13) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $25=$mrb_addr;
      var $26=$mrb_addr;
      var $gray_list15=(($26+528)|0);
      var $27=HEAP32[(($gray_list15)>>2)];
      _gc_mark_children($25, $27);
      label = 13; break;
    case 12: 
      var $28=$mrb_addr;
      var $gray_list17=(($28+528)|0);
      var $29=HEAP32[(($gray_list17)>>2)];
      var $gcnext18=(($29+8)|0);
      var $30=HEAP32[(($gcnext18)>>2)];
      var $31=$mrb_addr;
      var $gray_list19=(($31+528)|0);
      HEAP32[(($gray_list19)>>2)]=$30;
      label = 13; break;
    case 13: 
      label = 9; break;
    case 14: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _unlink_heap_page($mrb, $page) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $page_addr;
      $mrb_addr=$mrb;
      $page_addr=$page;
      var $0=$page_addr;
      var $prev=(($0+4)|0);
      var $1=HEAP32[(($prev)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$page_addr;
      var $next=(($2+8)|0);
      var $3=HEAP32[(($next)>>2)];
      var $4=$page_addr;
      var $prev1=(($4+4)|0);
      var $5=HEAP32[(($prev1)>>2)];
      var $next2=(($5+8)|0);
      HEAP32[(($next2)>>2)]=$3;
      label = 4; break;
    case 4: 
      var $6=$page_addr;
      var $next3=(($6+8)|0);
      var $7=HEAP32[(($next3)>>2)];
      var $tobool4=(($7)|(0))!=0;
      if ($tobool4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$page_addr;
      var $prev6=(($8+4)|0);
      var $9=HEAP32[(($prev6)>>2)];
      var $10=$page_addr;
      var $next7=(($10+8)|0);
      var $11=HEAP32[(($next7)>>2)];
      var $prev8=(($11+4)|0);
      HEAP32[(($prev8)>>2)]=$9;
      label = 6; break;
    case 6: 
      var $12=$mrb_addr;
      var $heaps=(($12+100)|0);
      var $13=HEAP32[(($heaps)>>2)];
      var $14=$page_addr;
      var $cmp=(($13)|(0))==(($14)|(0));
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $15=$page_addr;
      var $next11=(($15+8)|0);
      var $16=HEAP32[(($next11)>>2)];
      var $17=$mrb_addr;
      var $heaps12=(($17+100)|0);
      HEAP32[(($heaps12)>>2)]=$16;
      label = 8; break;
    case 8: 
      var $18=$page_addr;
      var $prev14=(($18+4)|0);
      HEAP32[(($prev14)>>2)]=0;
      var $19=$page_addr;
      var $next15=(($19+8)|0);
      HEAP32[(($next15)>>2)]=0;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _link_free_heap_page($mrb, $page) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $page_addr;
      $mrb_addr=$mrb;
      $page_addr=$page;
      var $0=$mrb_addr;
      var $free_heaps=(($0+108)|0);
      var $1=HEAP32[(($free_heaps)>>2)];
      var $2=$page_addr;
      var $free_next=(($2+12)|0);
      HEAP32[(($free_next)>>2)]=$1;
      var $3=$mrb_addr;
      var $free_heaps1=(($3+108)|0);
      var $4=HEAP32[(($free_heaps1)>>2)];
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$page_addr;
      var $6=$mrb_addr;
      var $free_heaps2=(($6+108)|0);
      var $7=HEAP32[(($free_heaps2)>>2)];
      var $free_prev=(($7+16)|0);
      HEAP32[(($free_prev)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $8=$page_addr;
      var $9=$mrb_addr;
      var $free_heaps3=(($9+108)|0);
      HEAP32[(($free_heaps3)>>2)]=$8;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _incremental_sweep_phase($mrb, $limit) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $limit_addr;
      var $page;
      var $tried_sweep;
      var $p;
      var $e;
      var $freed;
      var $dead_slot;
      var $full;
      var $next51;
      $mrb_addr=$mrb;
      $limit_addr=$limit;
      var $0=$mrb_addr;
      var $sweeps=(($0+104)|0);
      var $1=HEAP32[(($sweeps)>>2)];
      $page=$1;
      $tried_sweep=0;
      label = 3; break;
    case 3: 
      var $2=$page;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { var $5 = 0;label = 5; break; }
    case 4: 
      var $3=$tried_sweep;
      var $4=$limit_addr;
      var $cmp=(($3)>>>(0)) < (($4)>>>(0));
      var $5 = $cmp;label = 5; break;
    case 5: 
      var $5;
      if ($5) { label = 6; break; } else { label = 34; break; }
    case 6: 
      var $6=$page;
      var $objects=(($6+24)|0);
      var $arraydecay=(($objects)|0);
      $p=$arraydecay;
      var $7=$p;
      var $add_ptr=(($7+24576)|0);
      $e=$add_ptr;
      $freed=0;
      $dead_slot=1;
      var $8=$page;
      var $freelist=(($8)|0);
      var $9=HEAP32[(($freelist)>>2)];
      var $cmp1=(($9)|(0))==0;
      var $conv=(($cmp1)&(1));
      $full=$conv;
      var $10=$mrb_addr;
      var $11=$10;
      var $bf_field_offs=(($11+552)|0);
      var $12=HEAP8[($bf_field_offs)];
      var $13=(($12)&(255)) >>> 2;
      var $bf_clear=$13 & 1;
      var $conv2=(($bf_clear)&(255));
      var $tobool3=(($conv2)|(0))!=0;
      if ($tobool3) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $14=$mrb_addr;
      var $15=$14;
      var $bf_field_offs4=(($15+552)|0);
      var $16=HEAP8[($bf_field_offs4)];
      var $17=(($16)&(255)) >>> 1;
      var $bf_clear5=$17 & 1;
      var $tobool6=(($bf_clear5 << 24) >> 24)!=0;
      if ($tobool6) { label = 10; break; } else { label = 8; break; }
    case 8: 
      var $18=$page;
      var $19=$18;
      var $bf_field_offs8=(($19+20)|0);
      var $20=HEAP8[($bf_field_offs8)];
      var $bf_clear9=$20 & 1;
      var $conv10=(($bf_clear9)&(255));
      var $tobool11=(($conv10)|(0))!=0;
      if ($tobool11) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $21=$e;
      $p=$21;
      $dead_slot=0;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $22=$p;
      var $23=$e;
      var $cmp13=(($22)>>>(0)) < (($23)>>>(0));
      if ($cmp13) { label = 12; break; } else { label = 21; break; }
    case 12: 
      var $24=$p;
      var $as=(($24)|0);
      var $basic=$as;
      var $25=$basic;
      var $26=HEAP32[(($25)>>2)];
      var $27=$26 >>> 8;
      var $bf_clear16=$27 & 7;
      var $28=$mrb_addr;
      var $current_white_part=(($28+524)|0);
      var $29=HEAP32[(($current_white_part)>>2)];
      var $xor=$29 ^ 3;
      var $and=$bf_clear16 & $xor;
      var $and17=$and & 3;
      var $tobool18=(($and17)|(0))!=0;
      if ($tobool18) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $30=$p;
      var $as19=(($30)|0);
      var $basic20=$as19;
      var $31=$basic20;
      var $32=HEAP32[(($31)>>2)];
      var $bf_clear21=$32 & 255;
      var $cmp22=(($bf_clear21)|(0))==1;
      if ($cmp22) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $33=$p;
      var $as25=(($33)|0);
      var $basic26=$as25;
      var $34=$basic26;
      var $35=HEAP32[(($34)>>2)];
      var $bf_clear27=$35 & 255;
      var $cmp28=(($bf_clear27)|(0))!=1;
      if ($cmp28) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $36=$mrb_addr;
      var $37=$p;
      var $as31=(($37)|0);
      var $basic32=$as31;
      _obj_free($36, $basic32);
      var $38=$page;
      var $freelist33=(($38)|0);
      var $39=HEAP32[(($freelist33)>>2)];
      var $40=$p;
      var $as34=(($40)|0);
      var $free=$as34;
      var $next=(($free+12)|0);
      HEAP32[(($next)>>2)]=$39;
      var $41=$p;
      var $42=$41;
      var $43=$page;
      var $freelist35=(($43)|0);
      HEAP32[(($freelist35)>>2)]=$42;
      var $44=$freed;
      var $inc=((($44)+(1))|0);
      $freed=$inc;
      label = 16; break;
    case 16: 
      label = 20; break;
    case 17: 
      var $45=$mrb_addr;
      var $46=$45;
      var $bf_field_offs37=(($46+552)|0);
      var $47=HEAP8[($bf_field_offs37)];
      var $48=(($47)&(255)) >>> 2;
      var $bf_clear38=$48 & 1;
      var $tobool39=(($bf_clear38 << 24) >> 24)!=0;
      if ($tobool39) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $49=$mrb_addr;
      var $current_white_part41=(($49+524)|0);
      var $50=HEAP32[(($current_white_part41)>>2)];
      var $51=$p;
      var $as42=(($51)|0);
      var $basic43=$as42;
      var $bf_value=$50 & 7;
      var $52=$basic43;
      var $53=$bf_value & 7;
      var $54=$53 << 8;
      var $55=HEAP32[(($52)>>2)];
      var $56=$55 & -1793;
      var $57=$56 | $54;
      HEAP32[(($52)>>2)]=$57;
      label = 19; break;
    case 19: 
      $dead_slot=0;
      label = 20; break;
    case 20: 
      var $58=$p;
      var $incdec_ptr=(($58+24)|0);
      $p=$incdec_ptr;
      label = 11; break;
    case 21: 
      var $59=$dead_slot;
      var $tobool46=(($59)|(0))!=0;
      if ($tobool46) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $60=$freed;
      var $cmp48=(($60)>>>(0)) < 1024;
      if ($cmp48) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $61=$page;
      var $next52=(($61+8)|0);
      var $62=HEAP32[(($next52)>>2)];
      $next51=$62;
      var $63=$mrb_addr;
      var $64=$page;
      _unlink_heap_page($63, $64);
      var $65=$mrb_addr;
      var $66=$page;
      _unlink_free_heap_page($65, $66);
      var $67=$mrb_addr;
      var $68=$page;
      var $69=$68;
      _mrb_free($67, $69);
      var $70=$next51;
      $page=$70;
      label = 33; break;
    case 24: 
      var $71=$full;
      var $tobool54=(($71)|(0))!=0;
      if ($tobool54) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $72=$freed;
      var $cmp56=(($72)>>>(0)) > 0;
      if ($cmp56) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $73=$mrb_addr;
      var $74=$page;
      _link_free_heap_page($73, $74);
      label = 27; break;
    case 27: 
      var $75=$page;
      var $freelist60=(($75)|0);
      var $76=HEAP32[(($freelist60)>>2)];
      var $cmp61=(($76)|(0))==0;
      if ($cmp61) { label = 28; break; } else { label = 31; break; }
    case 28: 
      var $77=$mrb_addr;
      var $78=$77;
      var $bf_field_offs64=(($78+552)|0);
      var $79=HEAP8[($bf_field_offs64)];
      var $80=(($79)&(255)) >>> 2;
      var $bf_clear65=$80 & 1;
      var $conv66=(($bf_clear65)&(255));
      var $tobool67=(($conv66)|(0))!=0;
      if ($tobool67) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $81=$mrb_addr;
      var $82=$81;
      var $bf_field_offs69=(($82+552)|0);
      var $83=HEAP8[($bf_field_offs69)];
      var $84=(($83)&(255)) >>> 1;
      var $bf_clear70=$84 & 1;
      var $tobool71=(($bf_clear70 << 24) >> 24)!=0;
      if ($tobool71) { label = 31; break; } else { label = 30; break; }
    case 30: 
      var $85=$page;
      var $86=$85;
      var $bf_field_offs73=(($86+20)|0);
      var $87=HEAP8[($bf_field_offs73)];
      var $88=$87 & -2;
      var $89=$88 | 1;
      HEAP8[($bf_field_offs73)]=$89;
      label = 32; break;
    case 31: 
      var $90=$page;
      var $91=$90;
      var $bf_field_offs75=(($91+20)|0);
      var $92=HEAP8[($bf_field_offs75)];
      var $93=$92 & -2;
      HEAP8[($bf_field_offs75)]=$93;
      label = 32; break;
    case 32: 
      var $94=$page;
      var $next77=(($94+8)|0);
      var $95=HEAP32[(($next77)>>2)];
      $page=$95;
      label = 33; break;
    case 33: 
      var $96=$tried_sweep;
      var $add=((($96)+(1024))|0);
      $tried_sweep=$add;
      var $97=$freed;
      var $98=$mrb_addr;
      var $live=(($98+112)|0);
      var $99=HEAP32[(($live)>>2)];
      var $sub=((($99)-($97))|0);
      HEAP32[(($live)>>2)]=$sub;
      var $100=$freed;
      var $101=$mrb_addr;
      var $gc_live_after_mark=(($101+536)|0);
      var $102=HEAP32[(($gc_live_after_mark)>>2)];
      var $sub79=((($102)-($100))|0);
      HEAP32[(($gc_live_after_mark)>>2)]=$sub79;
      label = 3; break;
    case 34: 
      var $103=$page;
      var $104=$mrb_addr;
      var $sweeps81=(($104+104)|0);
      HEAP32[(($sweeps81)>>2)]=$103;
      var $105=$tried_sweep;
      return $105;
    default: assert(0, "bad label: " + label);
  }
}
function _gc_mark_children($mrb, $obj) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $obj_addr;
      var $c2;
      var $p;
      var $e;
      var $i;
      var $len;
      var $c16;
      var $a;
      var $i18;
      var $e19;
      var $r;
      $mrb_addr=$mrb;
      $obj_addr=$obj;
      var $0=$obj_addr;
      var $1=$0;
      var $2=HEAP32[(($1)>>2)];
      var $3=$2 & -1793;
      var $4=$3 | 1024;
      HEAP32[(($1)>>2)]=$4;
      var $5=$obj_addr;
      var $gcnext=(($5+8)|0);
      var $6=HEAP32[(($gcnext)>>2)];
      var $7=$mrb_addr;
      var $gray_list=(($7+528)|0);
      HEAP32[(($gray_list)>>2)]=$6;
      var $8=$mrb_addr;
      var $9=$obj_addr;
      var $c=(($9+4)|0);
      var $10=HEAP32[(($c)>>2)];
      var $11=$10;
      _mrb_gc_mark($8, $11);
      var $12=$obj_addr;
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $bf_clear=$14 & 255;
      if ((($bf_clear)|(0))==11) {
        label = 3; break;
      }
      else if ((($bf_clear)|(0))==9 | (($bf_clear)|(0))==10 | (($bf_clear)|(0))==12) {
        label = 4; break;
      }
      else if ((($bf_clear)|(0))==8 | (($bf_clear)|(0))==21) {
        label = 5; break;
      }
      else if ((($bf_clear)|(0))==13) {
        label = 6; break;
      }
      else if ((($bf_clear)|(0))==20) {
        label = 7; break;
      }
      else if ((($bf_clear)|(0))==22) {
        label = 18; break;
      }
      else if ((($bf_clear)|(0))==14) {
        label = 19; break;
      }
      else if ((($bf_clear)|(0))==15) {
        label = 28; break;
      }
      else if ((($bf_clear)|(0))==16) {
        label = 29; break;
      }
      else if ((($bf_clear)|(0))==17) {
        label = 30; break;
      }
      else {
      label = 41; break;
      }
    case 3: 
      var $15=$mrb_addr;
      var $16=$obj_addr;
      var $17=$16;
      var $super=(($17+20)|0);
      var $18=HEAP32[(($super)>>2)];
      var $19=$18;
      _mrb_gc_mark($15, $19);
      label = 42; break;
    case 4: 
      var $20=$obj_addr;
      var $21=$20;
      $c2=$21;
      var $22=$mrb_addr;
      var $23=$c2;
      _mrb_gc_mark_mt($22, $23);
      var $24=$mrb_addr;
      var $25=$c2;
      var $super3=(($25+20)|0);
      var $26=HEAP32[(($super3)>>2)];
      var $27=$26;
      _mrb_gc_mark($24, $27);
      label = 5; break;
    case 5: 
      var $28=$mrb_addr;
      var $29=$obj_addr;
      var $30=$29;
      _mrb_gc_mark_iv($28, $30);
      label = 42; break;
    case 6: 
      var $31=$obj_addr;
      var $32=$31;
      $p=$32;
      var $33=$mrb_addr;
      var $34=$p;
      var $env=(($34+20)|0);
      var $35=HEAP32[(($env)>>2)];
      var $36=$35;
      _mrb_gc_mark($33, $36);
      var $37=$mrb_addr;
      var $38=$p;
      var $target_class=(($38+16)|0);
      var $39=HEAP32[(($target_class)>>2)];
      var $40=$39;
      _mrb_gc_mark($37, $40);
      label = 42; break;
    case 7: 
      var $41=$obj_addr;
      var $42=$41;
      $e=$42;
      var $43=$e;
      var $cioff=(($43+20)|0);
      var $44=HEAP32[(($cioff)>>2)];
      var $cmp=(($44)|(0)) < 0;
      if ($cmp) { label = 8; break; } else { label = 17; break; }
    case 8: 
      var $45=$e;
      var $46=$45;
      var $47=HEAP32[(($46)>>2)];
      var $48=$47 >>> 11;
      var $bf_clear7=$48 & 2097151;
      $len=$bf_clear7;
      $i=0;
      label = 9; break;
    case 9: 
      var $49=$i;
      var $50=$len;
      var $cmp8=(($49)|(0)) < (($50)|(0));
      if ($cmp8) { label = 10; break; } else { label = 16; break; }
    case 10: 
      label = 11; break;
    case 11: 
      var $51=$i;
      var $52=$e;
      var $stack=(($52+12)|0);
      var $53=HEAP32[(($stack)>>2)];
      var $arrayidx=(($53+((($51)*(12))&-1))|0);
      var $tt=(($arrayidx+8)|0);
      var $54=HEAP32[(($tt)>>2)];
      var $cmp9=(($54)>>>(0)) >= 8;
      if ($cmp9) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $55=$mrb_addr;
      var $56=$i;
      var $57=$e;
      var $stack11=(($57+12)|0);
      var $58=HEAP32[(($stack11)>>2)];
      var $arrayidx12=(($58+((($56)*(12))&-1))|0);
      var $value=(($arrayidx12)|0);
      var $p13=$value;
      var $59=HEAP32[(($p13)>>2)];
      var $60=$59;
      _mrb_gc_mark($55, $60);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $61=$i;
      var $inc=((($61)+(1))|0);
      $i=$inc;
      label = 9; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 42; break;
    case 18: 
      var $62=$obj_addr;
      var $63=$62;
      var $cxt=(($63+12)|0);
      var $64=HEAP32[(($cxt)>>2)];
      $c16=$64;
      var $65=$mrb_addr;
      var $66=$c16;
      _mark_context($65, $66);
      label = 42; break;
    case 19: 
      var $67=$obj_addr;
      var $68=$67;
      $a=$68;
      $i18=0;
      var $69=$a;
      var $len20=(($69+12)|0);
      var $70=HEAP32[(($len20)>>2)];
      $e19=$70;
      label = 20; break;
    case 20: 
      var $71=$i18;
      var $72=$e19;
      var $cmp22=(($71)>>>(0)) < (($72)>>>(0));
      if ($cmp22) { label = 21; break; } else { label = 27; break; }
    case 21: 
      label = 22; break;
    case 22: 
      var $73=$i18;
      var $74=$a;
      var $ptr=(($74+20)|0);
      var $75=HEAP32[(($ptr)>>2)];
      var $arrayidx25=(($75+((($73)*(12))&-1))|0);
      var $tt26=(($arrayidx25+8)|0);
      var $76=HEAP32[(($tt26)>>2)];
      var $cmp27=(($76)>>>(0)) >= 8;
      if ($cmp27) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $77=$mrb_addr;
      var $78=$i18;
      var $79=$a;
      var $ptr29=(($79+20)|0);
      var $80=HEAP32[(($ptr29)>>2)];
      var $arrayidx30=(($80+((($78)*(12))&-1))|0);
      var $value31=(($arrayidx30)|0);
      var $p32=$value31;
      var $81=HEAP32[(($p32)>>2)];
      var $82=$81;
      _mrb_gc_mark($77, $82);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $83=$i18;
      var $inc36=((($83)+(1))|0);
      $i18=$inc36;
      label = 20; break;
    case 27: 
      label = 42; break;
    case 28: 
      var $84=$mrb_addr;
      var $85=$obj_addr;
      var $86=$85;
      _mrb_gc_mark_iv($84, $86);
      var $87=$mrb_addr;
      var $88=$obj_addr;
      var $89=$88;
      _mrb_gc_mark_hash($87, $89);
      label = 42; break;
    case 29: 
      label = 42; break;
    case 30: 
      var $90=$obj_addr;
      var $91=$90;
      $r=$91;
      var $92=$r;
      var $edges=(($92+12)|0);
      var $93=HEAP32[(($edges)>>2)];
      var $tobool=(($93)|(0))!=0;
      if ($tobool) { label = 31; break; } else { label = 40; break; }
    case 31: 
      label = 32; break;
    case 32: 
      var $94=$r;
      var $edges43=(($94+12)|0);
      var $95=HEAP32[(($edges43)>>2)];
      var $beg=(($95)|0);
      var $tt44=(($beg+8)|0);
      var $96=HEAP32[(($tt44)>>2)];
      var $cmp45=(($96)>>>(0)) >= 8;
      if ($cmp45) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $97=$mrb_addr;
      var $98=$r;
      var $edges47=(($98+12)|0);
      var $99=HEAP32[(($edges47)>>2)];
      var $beg48=(($99)|0);
      var $value49=(($beg48)|0);
      var $p50=$value49;
      var $100=HEAP32[(($p50)>>2)];
      var $101=$100;
      _mrb_gc_mark($97, $101);
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $102=$r;
      var $edges54=(($102+12)|0);
      var $103=HEAP32[(($edges54)>>2)];
      var $end=(($103+12)|0);
      var $tt55=(($end+8)|0);
      var $104=HEAP32[(($tt55)>>2)];
      var $cmp56=(($104)>>>(0)) >= 8;
      if ($cmp56) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $105=$mrb_addr;
      var $106=$r;
      var $edges58=(($106+12)|0);
      var $107=HEAP32[(($edges58)>>2)];
      var $end59=(($107+12)|0);
      var $value60=(($end59)|0);
      var $p61=$value60;
      var $108=HEAP32[(($p61)>>2)];
      var $109=$108;
      _mrb_gc_mark($105, $109);
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 42; break;
    case 41: 
      label = 42; break;
    case 42: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _link_heap_page($mrb, $page) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $page_addr;
      $mrb_addr=$mrb;
      $page_addr=$page;
      var $0=$mrb_addr;
      var $heaps=(($0+100)|0);
      var $1=HEAP32[(($heaps)>>2)];
      var $2=$page_addr;
      var $next=(($2+8)|0);
      HEAP32[(($next)>>2)]=$1;
      var $3=$mrb_addr;
      var $heaps1=(($3+100)|0);
      var $4=HEAP32[(($heaps1)>>2)];
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$page_addr;
      var $6=$mrb_addr;
      var $heaps2=(($6+100)|0);
      var $7=HEAP32[(($heaps2)>>2)];
      var $prev=(($7+4)|0);
      HEAP32[(($prev)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $8=$page_addr;
      var $9=$mrb_addr;
      var $heaps3=(($9+100)|0);
      HEAP32[(($heaps3)>>2)]=$8;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_fill_flags1053($p, $c, $len) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $c_addr;
      var $len_addr;
      $p_addr=$p;
      $c_addr=$c;
      $len_addr=$len;
      label = 3; break;
    case 3: 
      var $0=$len_addr;
      var $dec=((($0)-(1))|0);
      $len_addr=$dec;
      var $cmp=(($0)>>>(0)) > 0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $1=$c_addr;
      var $2=$p_addr;
      var $incdec_ptr=(($2+1)|0);
      $p_addr=$incdec_ptr;
      HEAP8[($2)]=$1;
      label = 3; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mark_context($mrb, $c) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $c_addr;
      var $i;
      var $e;
      var $ci;
      $mrb_addr=$mrb;
      $c_addr=$c;
      var $0=$c_addr;
      var $stack=(($0+4)|0);
      var $1=HEAP32[(($stack)>>2)];
      var $2=$c_addr;
      var $stbase=(($2+8)|0);
      var $3=HEAP32[(($stbase)>>2)];
      var $sub_ptr_lhs_cast=$1;
      var $sub_ptr_rhs_cast=$3;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|(0)))/(12))&-1);
      $e=$sub_ptr_div;
      var $4=$c_addr;
      var $ci1=(($4+16)|0);
      var $5=HEAP32[(($ci1)>>2)];
      var $tobool=(($5)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$c_addr;
      var $ci2=(($6+16)|0);
      var $7=HEAP32[(($ci2)>>2)];
      var $nregs=(($7+12)|0);
      var $8=HEAP32[(($nregs)>>2)];
      var $9=$e;
      var $add=((($9)+($8))|0);
      $e=$add;
      label = 4; break;
    case 4: 
      var $10=$c_addr;
      var $stbase3=(($10+8)|0);
      var $11=HEAP32[(($stbase3)>>2)];
      var $12=$e;
      var $add_ptr=(($11+((($12)*(12))&-1))|0);
      var $13=$c_addr;
      var $stend=(($13+12)|0);
      var $14=HEAP32[(($stend)>>2)];
      var $cmp=(($add_ptr)>>>(0)) > (($14)>>>(0));
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $15=$c_addr;
      var $stend5=(($15+12)|0);
      var $16=HEAP32[(($stend5)>>2)];
      var $17=$c_addr;
      var $stbase6=(($17+8)|0);
      var $18=HEAP32[(($stbase6)>>2)];
      var $sub_ptr_lhs_cast7=$16;
      var $sub_ptr_rhs_cast8=$18;
      var $sub_ptr_sub9=((($sub_ptr_lhs_cast7)-($sub_ptr_rhs_cast8))|0);
      var $sub_ptr_div10=((((($sub_ptr_sub9)|(0)))/(12))&-1);
      $e=$sub_ptr_div10;
      label = 6; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $19=$i;
      var $20=$e;
      var $cmp12=(($19)>>>(0)) < (($20)>>>(0));
      if ($cmp12) { label = 8; break; } else { label = 14; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $21=$i;
      var $22=$c_addr;
      var $stbase13=(($22+8)|0);
      var $23=HEAP32[(($stbase13)>>2)];
      var $arrayidx=(($23+((($21)*(12))&-1))|0);
      var $tt=(($arrayidx+8)|0);
      var $24=HEAP32[(($tt)>>2)];
      var $cmp14=(($24)>>>(0)) >= 8;
      if ($cmp14) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $25=$mrb_addr;
      var $26=$i;
      var $27=$c_addr;
      var $stbase16=(($27+8)|0);
      var $28=HEAP32[(($stbase16)>>2)];
      var $arrayidx17=(($28+((($26)*(12))&-1))|0);
      var $value=(($arrayidx17)|0);
      var $p=$value;
      var $29=HEAP32[(($p)>>2)];
      var $30=$29;
      _mrb_gc_mark($25, $30);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $31=$i;
      var $inc=((($31)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 14: 
      var $32=$c_addr;
      var $ci19=(($32+16)|0);
      var $33=HEAP32[(($ci19)>>2)];
      var $tobool20=(($33)|(0))!=0;
      if ($tobool20) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $34=$c_addr;
      var $ci21=(($34+16)|0);
      var $35=HEAP32[(($ci21)>>2)];
      var $eidx=(($35+36)|0);
      var $36=HEAP32[(($eidx)>>2)];
      var $cond = $36;label = 17; break;
    case 16: 
      var $cond = 0;label = 17; break;
    case 17: 
      var $cond;
      $e=$cond;
      $i=0;
      label = 18; break;
    case 18: 
      var $37=$i;
      var $38=$e;
      var $cmp23=(($37)>>>(0)) < (($38)>>>(0));
      if ($cmp23) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $39=$mrb_addr;
      var $40=$i;
      var $41=$c_addr;
      var $ensure=(($41+36)|0);
      var $42=HEAP32[(($ensure)>>2)];
      var $arrayidx25=(($42+($40<<2))|0);
      var $43=HEAP32[(($arrayidx25)>>2)];
      var $44=$43;
      _mrb_gc_mark($39, $44);
      label = 20; break;
    case 20: 
      var $45=$i;
      var $inc27=((($45)+(1))|0);
      $i=$inc27;
      label = 18; break;
    case 21: 
      var $46=$c_addr;
      var $cibase=(($46+20)|0);
      var $47=HEAP32[(($cibase)>>2)];
      $ci=$47;
      label = 22; break;
    case 22: 
      var $48=$ci;
      var $49=$c_addr;
      var $ci30=(($49+16)|0);
      var $50=HEAP32[(($ci30)>>2)];
      var $cmp31=(($48)>>>(0)) <= (($50)>>>(0));
      if ($cmp31) { label = 23; break; } else { label = 27; break; }
    case 23: 
      var $51=$ci;
      var $tobool33=(($51)|(0))!=0;
      if ($tobool33) { label = 25; break; } else { label = 24; break; }
    case 24: 
      label = 26; break;
    case 25: 
      var $52=$mrb_addr;
      var $53=$ci;
      var $env=(($53+40)|0);
      var $54=HEAP32[(($env)>>2)];
      var $55=$54;
      _mrb_gc_mark($52, $55);
      var $56=$mrb_addr;
      var $57=$ci;
      var $proc=(($57+4)|0);
      var $58=HEAP32[(($proc)>>2)];
      var $59=$58;
      _mrb_gc_mark($56, $59);
      var $60=$mrb_addr;
      var $61=$ci;
      var $target_class=(($61+28)|0);
      var $62=HEAP32[(($target_class)>>2)];
      var $63=$62;
      _mrb_gc_mark($60, $63);
      label = 26; break;
    case 26: 
      var $64=$ci;
      var $incdec_ptr=(($64+44)|0);
      $ci=$incdec_ptr;
      label = 22; break;
    case 27: 
      var $65=$c_addr;
      var $prev=(($65)|0);
      var $66=HEAP32[(($prev)>>2)];
      var $tobool38=(($66)|(0))!=0;
      if ($tobool38) { label = 28; break; } else { label = 30; break; }
    case 28: 
      var $67=$c_addr;
      var $prev39=(($67)|0);
      var $68=HEAP32[(($prev39)>>2)];
      var $fib=(($68+48)|0);
      var $69=HEAP32[(($fib)>>2)];
      var $tobool40=(($69)|(0))!=0;
      if ($tobool40) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $70=$mrb_addr;
      var $71=$c_addr;
      var $prev42=(($71)|0);
      var $72=HEAP32[(($prev42)>>2)];
      var $fib43=(($72+48)|0);
      var $73=HEAP32[(($fib43)>>2)];
      var $74=$73;
      _mrb_gc_mark($70, $74);
      label = 30; break;
    case 30: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _gc_gray_mark($mrb, $obj) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $obj_addr;
      var $children;
      var $c;
      var $c12;
      var $i;
      var $ci;
      var $a;
      $mrb_addr=$mrb;
      $obj_addr=$obj;
      $children=0;
      var $0=$mrb_addr;
      var $1=$obj_addr;
      _gc_mark_children($0, $1);
      var $2=$obj_addr;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      if ((($bf_clear)|(0))==11) {
        label = 3; break;
      }
      else if ((($bf_clear)|(0))==9 | (($bf_clear)|(0))==12 | (($bf_clear)|(0))==10) {
        label = 4; break;
      }
      else if ((($bf_clear)|(0))==8 | (($bf_clear)|(0))==21) {
        label = 5; break;
      }
      else if ((($bf_clear)|(0))==20) {
        label = 6; break;
      }
      else if ((($bf_clear)|(0))==22) {
        label = 7; break;
      }
      else if ((($bf_clear)|(0))==14) {
        label = 21; break;
      }
      else if ((($bf_clear)|(0))==15) {
        label = 22; break;
      }
      else if ((($bf_clear)|(0))==13 | (($bf_clear)|(0))==17) {
        label = 23; break;
      }
      else {
      label = 24; break;
      }
    case 3: 
      var $5=$children;
      var $inc=((($5)+(1))|0);
      $children=$inc;
      label = 25; break;
    case 4: 
      var $6=$obj_addr;
      var $7=$6;
      $c=$7;
      var $8=$mrb_addr;
      var $9=$obj_addr;
      var $10=$9;
      var $call=_mrb_gc_mark_iv_size($8, $10);
      var $11=$children;
      var $add=((($11)+($call))|0);
      $children=$add;
      var $12=$mrb_addr;
      var $13=$c;
      var $call2=_mrb_gc_mark_mt_size($12, $13);
      var $14=$children;
      var $add3=((($14)+($call2))|0);
      $children=$add3;
      var $15=$children;
      var $inc4=((($15)+(1))|0);
      $children=$inc4;
      label = 25; break;
    case 5: 
      var $16=$mrb_addr;
      var $17=$obj_addr;
      var $18=$17;
      var $call6=_mrb_gc_mark_iv_size($16, $18);
      var $19=$children;
      var $add7=((($19)+($call6))|0);
      $children=$add7;
      label = 25; break;
    case 6: 
      var $20=$obj_addr;
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      var $23=$22 >>> 11;
      var $bf_clear9=$23 & 2097151;
      var $24=$children;
      var $add10=((($24)+($bf_clear9))|0);
      $children=$add10;
      label = 25; break;
    case 7: 
      var $25=$obj_addr;
      var $26=$25;
      var $cxt=(($26+12)|0);
      var $27=HEAP32[(($cxt)>>2)];
      $c12=$27;
      var $28=$c12;
      var $stack=(($28+4)|0);
      var $29=HEAP32[(($stack)>>2)];
      var $30=$c12;
      var $stbase=(($30+8)|0);
      var $31=HEAP32[(($stbase)>>2)];
      var $sub_ptr_lhs_cast=$29;
      var $sub_ptr_rhs_cast=$31;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|(0)))/(12))&-1);
      $i=$sub_ptr_div;
      var $32=$c12;
      var $ci13=(($32+16)|0);
      var $33=HEAP32[(($ci13)>>2)];
      var $tobool=(($33)|(0))!=0;
      if ($tobool) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $34=$c12;
      var $ci14=(($34+16)|0);
      var $35=HEAP32[(($ci14)>>2)];
      var $nregs=(($35+12)|0);
      var $36=HEAP32[(($nregs)>>2)];
      var $37=$i;
      var $add15=((($37)+($36))|0);
      $i=$add15;
      label = 9; break;
    case 9: 
      var $38=$c12;
      var $stbase16=(($38+8)|0);
      var $39=HEAP32[(($stbase16)>>2)];
      var $40=$i;
      var $add_ptr=(($39+((($40)*(12))&-1))|0);
      var $41=$c12;
      var $stend=(($41+12)|0);
      var $42=HEAP32[(($stend)>>2)];
      var $cmp=(($add_ptr)>>>(0)) > (($42)>>>(0));
      if ($cmp) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $43=$c12;
      var $stend18=(($43+12)|0);
      var $44=HEAP32[(($stend18)>>2)];
      var $45=$c12;
      var $stbase19=(($45+8)|0);
      var $46=HEAP32[(($stbase19)>>2)];
      var $sub_ptr_lhs_cast20=$44;
      var $sub_ptr_rhs_cast21=$46;
      var $sub_ptr_sub22=((($sub_ptr_lhs_cast20)-($sub_ptr_rhs_cast21))|0);
      var $sub_ptr_div23=((((($sub_ptr_sub22)|(0)))/(12))&-1);
      $i=$sub_ptr_div23;
      label = 11; break;
    case 11: 
      var $47=$i;
      var $48=$children;
      var $add25=((($48)+($47))|0);
      $children=$add25;
      var $49=$c12;
      var $ci26=(($49+16)|0);
      var $50=HEAP32[(($ci26)>>2)];
      var $tobool27=(($50)|(0))!=0;
      if ($tobool27) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $51=$c12;
      var $ci28=(($51+16)|0);
      var $52=HEAP32[(($ci28)>>2)];
      var $eidx=(($52+36)|0);
      var $53=HEAP32[(($eidx)>>2)];
      var $cond = $53;label = 14; break;
    case 13: 
      var $cond = 0;label = 14; break;
    case 14: 
      var $cond;
      var $54=$children;
      var $add29=((($54)+($cond))|0);
      $children=$add29;
      var $55=$c12;
      var $cibase=(($55+20)|0);
      var $56=HEAP32[(($cibase)>>2)];
      var $tobool30=(($56)|(0))!=0;
      if ($tobool30) { label = 15; break; } else { label = 20; break; }
    case 15: 
      $i=0;
      var $57=$c12;
      var $cibase32=(($57+20)|0);
      var $58=HEAP32[(($cibase32)>>2)];
      $ci=$58;
      label = 16; break;
    case 16: 
      var $59=$ci;
      var $60=$c12;
      var $ci33=(($60+16)|0);
      var $61=HEAP32[(($ci33)>>2)];
      var $cmp34=(($59)>>>(0)) <= (($61)>>>(0));
      if ($cmp34) { label = 17; break; } else { label = 19; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $62=$i;
      var $inc35=((($62)+(1))|0);
      $i=$inc35;
      var $63=$ci;
      var $incdec_ptr=(($63+44)|0);
      $ci=$incdec_ptr;
      label = 16; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $64=$i;
      var $65=$children;
      var $add37=((($65)+($64))|0);
      $children=$add37;
      label = 25; break;
    case 21: 
      var $66=$obj_addr;
      var $67=$66;
      $a=$67;
      var $68=$a;
      var $len=(($68+12)|0);
      var $69=HEAP32[(($len)>>2)];
      var $70=$children;
      var $add39=((($70)+($69))|0);
      $children=$add39;
      label = 25; break;
    case 22: 
      var $71=$mrb_addr;
      var $72=$obj_addr;
      var $73=$72;
      var $call41=_mrb_gc_mark_iv_size($71, $73);
      var $74=$children;
      var $add42=((($74)+($call41))|0);
      $children=$add42;
      var $75=$mrb_addr;
      var $76=$obj_addr;
      var $77=$76;
      var $call43=_mrb_gc_mark_hash_size($75, $77);
      var $78=$children;
      var $add44=((($78)+($call43))|0);
      $children=$add44;
      label = 25; break;
    case 23: 
      var $79=$children;
      var $add46=((($79)+(2))|0);
      $children=$add46;
      label = 25; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $80=$children;
      return $80;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_alloc_ht($h) {
  var label = 0;
  var $h_addr;
  var $sz;
  $h_addr=$h;
  var $0=$h_addr;
  var $n_buckets=(($0)|0);
  var $1=HEAP32[(($n_buckets)>>2)];
  $sz=$1;
  var $2=$h_addr;
  var $n_occupied=(($2+8)|0);
  HEAP32[(($n_occupied)>>2)]=0;
  var $3=$h_addr;
  var $size=(($3+4)|0);
  HEAP32[(($size)>>2)]=0;
  var $4=$sz;
  var $shr=$4 >>> 2;
  var $5=$sz;
  var $shr1=$5 >>> 1;
  var $or=$shr | $shr1;
  var $6=$h_addr;
  var $upper_bound=(($6+12)|0);
  HEAP32[(($upper_bound)>>2)]=$or;
  var $7=$h_addr;
  var $mrb=(($7+40)|0);
  var $8=HEAP32[(($mrb)>>2)];
  var $9=$sz;
  var $mul=$9;
  var $div=Math.floor(((($mul)>>>(0)))/(4));
  var $call=_mrb_malloc($8, $div);
  var $10=$h_addr;
  var $e_flags=(($10+16)|0);
  HEAP32[(($e_flags)>>2)]=$call;
  var $11=$h_addr;
  var $e_flags2=(($11+16)|0);
  var $12=HEAP32[(($e_flags2)>>2)];
  var $13=$sz;
  var $div3=Math.floor(((($13)>>>(0)))/(8));
  var $add_ptr=(($12+$div3)|0);
  var $14=$h_addr;
  var $d_flags=(($14+20)|0);
  HEAP32[(($d_flags)>>2)]=$add_ptr;
  var $15=$h_addr;
  var $e_flags4=(($15+16)|0);
  var $16=HEAP32[(($e_flags4)>>2)];
  var $17=$sz;
  var $div5=Math.floor(((($17)>>>(0)))/(8));
  _kh_fill_flags1053($16, -1, $div5);
  var $18=$h_addr;
  var $d_flags6=(($18+20)|0);
  var $19=HEAP32[(($d_flags6)>>2)];
  var $20=$sz;
  var $div7=Math.floor(((($20)>>>(0)))/(8));
  _kh_fill_flags1053($19, 0, $div7);
  var $21=$h_addr;
  var $mrb8=(($21+40)|0);
  var $22=HEAP32[(($mrb8)>>2)];
  var $23=$sz;
  var $mul9=((($23)*(12))&-1);
  var $call10=_mrb_malloc($22, $mul9);
  var $24=$call10;
  var $25=$h_addr;
  var $keys=(($25+24)|0);
  HEAP32[(($keys)>>2)]=$24;
  var $26=$h_addr;
  var $mrb11=(($26+40)|0);
  var $27=HEAP32[(($mrb11)>>2)];
  var $28=$sz;
  var $mul12=((($28)*(12))&-1);
  var $call13=_mrb_malloc($27, $mul12);
  var $29=$call13;
  var $30=$h_addr;
  var $vals=(($30+28)|0);
  HEAP32[(($vals)>>2)]=$29;
  var $31=$sz;
  var $sub=((($31)-(1))|0);
  var $32=$h_addr;
  var $mask=(($32+32)|0);
  HEAP32[(($mask)>>2)]=$sub;
  var $33=$sz;
  var $div14=Math.floor(((($33)>>>(0)))/(2));
  var $sub15=((($div14)-(1))|0);
  var $34=$h_addr;
  var $inc=(($34+36)|0);
  HEAP32[(($inc)>>2)]=$sub15;
  return;
}
function _kh_init_ht_size($mrb, $size) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $size_addr;
      var $h;
      $mrb_addr=$mrb;
      $size_addr=$size;
      var $0=$mrb_addr;
      var $call=_mrb_calloc($0, 1, 44);
      var $1=$call;
      $h=$1;
      var $2=$size_addr;
      var $cmp=(($2)>>>(0)) < 8;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $size_addr=8;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $3=$size_addr;
      var $dec=((($3)-(1))|0);
      $size_addr=$dec;
      var $4=$size_addr;
      var $shr=$4 >>> 1;
      var $5=$size_addr;
      var $or=$5 | $shr;
      $size_addr=$or;
      var $6=$size_addr;
      var $shr1=$6 >>> 2;
      var $7=$size_addr;
      var $or2=$7 | $shr1;
      $size_addr=$or2;
      var $8=$size_addr;
      var $shr3=$8 >>> 4;
      var $9=$size_addr;
      var $or4=$9 | $shr3;
      $size_addr=$or4;
      var $10=$size_addr;
      var $shr5=$10 >>> 8;
      var $11=$size_addr;
      var $or6=$11 | $shr5;
      $size_addr=$or6;
      var $12=$size_addr;
      var $shr7=$12 >>> 16;
      var $13=$size_addr;
      var $or8=$13 | $shr7;
      $size_addr=$or8;
      var $14=$size_addr;
      var $inc=((($14)+(1))|0);
      $size_addr=$inc;
      label = 6; break;
    case 6: 
      var $15=$size_addr;
      var $16=$h;
      var $n_buckets=(($16)|0);
      HEAP32[(($n_buckets)>>2)]=$15;
      var $17=$mrb_addr;
      var $18=$h;
      var $mrb9=(($18+40)|0);
      HEAP32[(($mrb9)>>2)]=$17;
      var $19=$h;
      _kh_alloc_ht($19);
      var $20=$h;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_init_ht($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_kh_init_ht_size($0, 32);
  return $call;
}
function _kh_destroy_ht($h) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $h_addr;
      $h_addr=$h;
      var $0=$h_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$h_addr;
      var $mrb=(($1+40)|0);
      var $2=HEAP32[(($mrb)>>2)];
      var $3=$h_addr;
      var $keys=(($3+24)|0);
      var $4=HEAP32[(($keys)>>2)];
      var $5=$4;
      _mrb_free($2, $5);
      var $6=$h_addr;
      var $mrb1=(($6+40)|0);
      var $7=HEAP32[(($mrb1)>>2)];
      var $8=$h_addr;
      var $vals=(($8+28)|0);
      var $9=HEAP32[(($vals)>>2)];
      var $10=$9;
      _mrb_free($7, $10);
      var $11=$h_addr;
      var $mrb2=(($11+40)|0);
      var $12=HEAP32[(($mrb2)>>2)];
      var $13=$h_addr;
      var $e_flags=(($13+16)|0);
      var $14=HEAP32[(($e_flags)>>2)];
      _mrb_free($12, $14);
      var $15=$h_addr;
      var $mrb3=(($15+40)|0);
      var $16=HEAP32[(($mrb3)>>2)];
      var $17=$h_addr;
      var $18=$17;
      _mrb_free($16, $18);
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_clear_ht($h) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $h_addr;
      $h_addr=$h;
      var $0=$h_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $1=$h_addr;
      var $e_flags=(($1+16)|0);
      var $2=HEAP32[(($e_flags)>>2)];
      var $tobool1=(($2)|(0))!=0;
      if ($tobool1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$h_addr;
      var $e_flags2=(($3+16)|0);
      var $4=HEAP32[(($e_flags2)>>2)];
      var $5=$h_addr;
      var $n_buckets=(($5)|0);
      var $6=HEAP32[(($n_buckets)>>2)];
      var $div=Math.floor(((($6)>>>(0)))/(8));
      _kh_fill_flags1053($4, -1, $div);
      var $7=$h_addr;
      var $d_flags=(($7+20)|0);
      var $8=HEAP32[(($d_flags)>>2)];
      var $9=$h_addr;
      var $n_buckets3=(($9)|0);
      var $10=HEAP32[(($n_buckets3)>>2)];
      var $div4=Math.floor(((($10)>>>(0)))/(8));
      _kh_fill_flags1053($8, 0, $div4);
      var $11=$h_addr;
      var $n_occupied=(($11+8)|0);
      HEAP32[(($n_occupied)>>2)]=0;
      var $12=$h_addr;
      var $size=(($12+4)|0);
      HEAP32[(($size)>>2)]=0;
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_get_ht($h, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $h_addr;
      var $k;
      $h_addr=$h;
      var $0=$h_addr;
      var $mrb=(($0+40)|0);
      var $1=HEAP32[(($mrb)>>2)];
      var $call=_mrb_hash_ht_hash_func($1, $key);
      var $2=$h_addr;
      var $mask=(($2+32)|0);
      var $3=HEAP32[(($mask)>>2)];
      var $and=$call & $3;
      $k=$and;
      label = 3; break;
    case 3: 
      var $4=$k;
      var $div=Math.floor(((($4)>>>(0)))/(8));
      var $5=$h_addr;
      var $e_flags=(($5+16)|0);
      var $6=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($6+$div)|0);
      var $7=HEAP8[($arrayidx)];
      var $conv=(($7)&(255));
      var $8=$k;
      var $rem=((($8)>>>(0)))%(8);
      var $arrayidx1=((114496+$rem)|0);
      var $9=HEAP8[($arrayidx1)];
      var $conv2=(($9)&(255));
      var $and3=$conv & $conv2;
      var $tobool=(($and3)|(0))!=0;
      var $lnot=$tobool ^ 1;
      if ($lnot) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $10=$k;
      var $div4=Math.floor(((($10)>>>(0)))/(8));
      var $11=$h_addr;
      var $d_flags=(($11+20)|0);
      var $12=HEAP32[(($d_flags)>>2)];
      var $arrayidx5=(($12+$div4)|0);
      var $13=HEAP8[($arrayidx5)];
      var $conv6=(($13)&(255));
      var $14=$k;
      var $rem7=((($14)>>>(0)))%(8);
      var $arrayidx8=((114496+$rem7)|0);
      var $15=HEAP8[($arrayidx8)];
      var $conv9=(($15)&(255));
      var $and10=$conv6 & $conv9;
      var $tobool11=(($and10)|(0))!=0;
      if ($tobool11) { label = 8; break; } else { label = 5; break; }
    case 5: 
      var $16=$h_addr;
      var $mrb12=(($16+40)|0);
      var $17=HEAP32[(($mrb12)>>2)];
      var $18=$k;
      var $19=$h_addr;
      var $keys=(($19+24)|0);
      var $20=HEAP32[(($keys)>>2)];
      var $arrayidx13=(($20+((($18)*(12))&-1))|0);
      var $call14=_mrb_hash_ht_hash_equal($17, $arrayidx13, $key);
      var $tobool15=(($call14)|(0))!=0;
      if ($tobool15) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $21=$k;
      $retval=$21;
      label = 10; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $22=$k;
      var $23=$h_addr;
      var $inc=(($23+36)|0);
      var $24=HEAP32[(($inc)>>2)];
      var $add=((($22)+($24))|0);
      var $25=$h_addr;
      var $mask18=(($25+32)|0);
      var $26=HEAP32[(($mask18)>>2)];
      var $and19=$add & $26;
      $k=$and19;
      label = 3; break;
    case 9: 
      var $27=$h_addr;
      var $n_buckets=(($27)|0);
      var $28=HEAP32[(($n_buckets)>>2)];
      $retval=$28;
      label = 10; break;
    case 10: 
      var $29=$retval;
      STACKTOP = __stackBase__;
      return $29;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_ht_hash_func($mrb, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $h;
  var $h2=__stackBase__;
  var $tmp=(__stackBase__)+(12);
  $mrb_addr=$mrb;
  var $tt=(($key+8)|0);
  var $0=HEAP32[(($tt)>>2)];
  var $shl=$0 << 24;
  $h=$shl;
  var $1=$mrb_addr;
  _mrb_funcall($tmp, $1, $key, ((100512)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $2=$h2;
  var $3=$tmp;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  var $value=(($h2)|0);
  var $i=$value;
  var $4=HEAP32[(($i)>>2)];
  var $5=$h;
  var $xor=$5 ^ $4;
  $h=$xor;
  var $6=$h;
  STACKTOP = __stackBase__;
  return $6;
}
function _mrb_hash_ht_hash_equal($mrb, $a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_eql($0, $a, $b);
  STACKTOP = __stackBase__;
  return $call;
}
function _kh_del_ht($h, $x) {
  var label = 0;
  var $h_addr;
  var $x_addr;
  $h_addr=$h;
  $x_addr=$x;
  var $0=$x_addr;
  var $rem=((($0)>>>(0)))%(8);
  var $arrayidx=((114496+$rem)|0);
  var $1=HEAP8[($arrayidx)];
  var $conv=(($1)&(255));
  var $2=$x_addr;
  var $div=Math.floor(((($2)>>>(0)))/(8));
  var $3=$h_addr;
  var $d_flags=(($3+20)|0);
  var $4=HEAP32[(($d_flags)>>2)];
  var $arrayidx1=(($4+$div)|0);
  var $5=HEAP8[($arrayidx1)];
  var $conv2=(($5)&(255));
  var $or=$conv2 | $conv;
  var $conv3=(($or) & 255);
  HEAP8[($arrayidx1)]=$conv3;
  var $6=$h_addr;
  var $size=(($6+4)|0);
  var $7=HEAP32[(($size)>>2)];
  var $dec=((($7)-(1))|0);
  HEAP32[(($size)>>2)]=$dec;
  return;
}
function _mrb_gc_mark_hash_size($mrb, $hash) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $hash_addr;
      $mrb_addr=$mrb;
      $hash_addr=$hash;
      var $0=$hash_addr;
      var $ht=(($0+16)|0);
      var $1=HEAP32[(($ht)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      var $2=$hash_addr;
      var $ht1=(($2+16)|0);
      var $3=HEAP32[(($ht1)>>2)];
      var $size=(($3+4)|0);
      var $4=HEAP32[(($size)>>2)];
      var $mul=($4<<1);
      $retval=$mul;
      label = 5; break;
    case 5: 
      var $5=$retval;
      return $5;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_resize_ht($h, $new_n_buckets) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $h_addr;
      var $new_n_buckets_addr;
      var $old_e_flags;
      var $old_keys;
      var $old_vals;
      var $old_n_buckets;
      var $i;
      var $k;
      $h_addr=$h;
      $new_n_buckets_addr=$new_n_buckets;
      var $0=$new_n_buckets_addr;
      var $cmp=(($0)>>>(0)) < 8;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $new_n_buckets_addr=8;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $1=$new_n_buckets_addr;
      var $dec=((($1)-(1))|0);
      $new_n_buckets_addr=$dec;
      var $2=$new_n_buckets_addr;
      var $shr=$2 >>> 1;
      var $3=$new_n_buckets_addr;
      var $or=$3 | $shr;
      $new_n_buckets_addr=$or;
      var $4=$new_n_buckets_addr;
      var $shr1=$4 >>> 2;
      var $5=$new_n_buckets_addr;
      var $or2=$5 | $shr1;
      $new_n_buckets_addr=$or2;
      var $6=$new_n_buckets_addr;
      var $shr3=$6 >>> 4;
      var $7=$new_n_buckets_addr;
      var $or4=$7 | $shr3;
      $new_n_buckets_addr=$or4;
      var $8=$new_n_buckets_addr;
      var $shr5=$8 >>> 8;
      var $9=$new_n_buckets_addr;
      var $or6=$9 | $shr5;
      $new_n_buckets_addr=$or6;
      var $10=$new_n_buckets_addr;
      var $shr7=$10 >>> 16;
      var $11=$new_n_buckets_addr;
      var $or8=$11 | $shr7;
      $new_n_buckets_addr=$or8;
      var $12=$new_n_buckets_addr;
      var $inc=((($12)+(1))|0);
      $new_n_buckets_addr=$inc;
      label = 6; break;
    case 6: 
      var $13=$h_addr;
      var $e_flags=(($13+16)|0);
      var $14=HEAP32[(($e_flags)>>2)];
      $old_e_flags=$14;
      var $15=$h_addr;
      var $keys=(($15+24)|0);
      var $16=HEAP32[(($keys)>>2)];
      $old_keys=$16;
      var $17=$h_addr;
      var $vals=(($17+28)|0);
      var $18=HEAP32[(($vals)>>2)];
      $old_vals=$18;
      var $19=$h_addr;
      var $n_buckets=(($19)|0);
      var $20=HEAP32[(($n_buckets)>>2)];
      $old_n_buckets=$20;
      var $21=$new_n_buckets_addr;
      var $22=$h_addr;
      var $n_buckets9=(($22)|0);
      HEAP32[(($n_buckets9)>>2)]=$21;
      var $23=$h_addr;
      _kh_alloc_ht($23);
      $i=0;
      label = 7; break;
    case 7: 
      var $24=$i;
      var $25=$old_n_buckets;
      var $cmp10=(($24)>>>(0)) < (($25)>>>(0));
      if ($cmp10) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $26=$i;
      var $div=Math.floor(((($26)>>>(0)))/(8));
      var $27=$old_e_flags;
      var $arrayidx=(($27+$div)|0);
      var $28=HEAP8[($arrayidx)];
      var $conv=(($28)&(255));
      var $29=$i;
      var $rem=((($29)>>>(0)))%(8);
      var $arrayidx11=((114496+$rem)|0);
      var $30=HEAP8[($arrayidx11)];
      var $conv12=(($30)&(255));
      var $and=$conv & $conv12;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $31=$h_addr;
      var $32=$i;
      var $33=$old_keys;
      var $arrayidx14=(($33+((($32)*(12))&-1))|0);
      var $call=_kh_put_ht($31, $arrayidx14);
      $k=$call;
      var $34=$k;
      var $35=$h_addr;
      var $vals15=(($35+28)|0);
      var $36=HEAP32[(($vals15)>>2)];
      var $arrayidx16=(($36+((($34)*(12))&-1))|0);
      var $37=$i;
      var $38=$old_vals;
      var $arrayidx17=(($38+((($37)*(12))&-1))|0);
      var $39=$arrayidx16;
      var $40=$arrayidx17;
      assert(12 % 1 === 0);HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];HEAP32[((($39)+(8))>>2)]=HEAP32[((($40)+(8))>>2)];
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $41=$i;
      var $inc19=((($41)+(1))|0);
      $i=$inc19;
      label = 7; break;
    case 12: 
      var $42=$h_addr;
      var $mrb=(($42+40)|0);
      var $43=HEAP32[(($mrb)>>2)];
      var $44=$old_e_flags;
      _mrb_free($43, $44);
      var $45=$h_addr;
      var $mrb20=(($45+40)|0);
      var $46=HEAP32[(($mrb20)>>2)];
      var $47=$old_keys;
      var $48=$47;
      _mrb_free($46, $48);
      var $49=$h_addr;
      var $mrb21=(($49+40)|0);
      var $50=HEAP32[(($mrb21)>>2)];
      var $51=$old_vals;
      var $52=$51;
      _mrb_free($50, $52);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_put_ht($h, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $h_addr;
      var $k;
      $h_addr=$h;
      var $0=$h_addr;
      var $n_occupied=(($0+8)|0);
      var $1=HEAP32[(($n_occupied)>>2)];
      var $2=$h_addr;
      var $upper_bound=(($2+12)|0);
      var $3=HEAP32[(($upper_bound)>>2)];
      var $cmp=(($1)>>>(0)) >= (($3)>>>(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$h_addr;
      var $5=$h_addr;
      var $n_buckets=(($5)|0);
      var $6=HEAP32[(($n_buckets)>>2)];
      var $mul=($6<<1);
      _kh_resize_ht($4, $mul);
      label = 4; break;
    case 4: 
      var $7=$h_addr;
      var $mrb=(($7+40)|0);
      var $8=HEAP32[(($mrb)>>2)];
      var $call=_mrb_hash_ht_hash_func($8, $key);
      var $9=$h_addr;
      var $mask=(($9+32)|0);
      var $10=HEAP32[(($mask)>>2)];
      var $and=$call & $10;
      $k=$and;
      label = 5; break;
    case 5: 
      var $11=$k;
      var $div=Math.floor(((($11)>>>(0)))/(8));
      var $12=$h_addr;
      var $e_flags=(($12+16)|0);
      var $13=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($13+$div)|0);
      var $14=HEAP8[($arrayidx)];
      var $conv=(($14)&(255));
      var $15=$k;
      var $rem=((($15)>>>(0)))%(8);
      var $arrayidx1=((114496+$rem)|0);
      var $16=HEAP8[($arrayidx1)];
      var $conv2=(($16)&(255));
      var $and3=$conv & $conv2;
      var $tobool=(($and3)|(0))!=0;
      if ($tobool) { var $23 = 1;label = 7; break; } else { label = 6; break; }
    case 6: 
      var $17=$k;
      var $div4=Math.floor(((($17)>>>(0)))/(8));
      var $18=$h_addr;
      var $d_flags=(($18+20)|0);
      var $19=HEAP32[(($d_flags)>>2)];
      var $arrayidx5=(($19+$div4)|0);
      var $20=HEAP8[($arrayidx5)];
      var $conv6=(($20)&(255));
      var $21=$k;
      var $rem7=((($21)>>>(0)))%(8);
      var $arrayidx8=((114496+$rem7)|0);
      var $22=HEAP8[($arrayidx8)];
      var $conv9=(($22)&(255));
      var $and10=$conv6 & $conv9;
      var $tobool11=(($and10)|(0))!=0;
      var $23 = $tobool11;label = 7; break;
    case 7: 
      var $23;
      var $lnot=$23 ^ 1;
      if ($lnot) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $24=$h_addr;
      var $mrb12=(($24+40)|0);
      var $25=HEAP32[(($mrb12)>>2)];
      var $26=$k;
      var $27=$h_addr;
      var $keys=(($27+24)|0);
      var $28=HEAP32[(($keys)>>2)];
      var $arrayidx13=(($28+((($26)*(12))&-1))|0);
      var $call14=_mrb_hash_ht_hash_equal($25, $arrayidx13, $key);
      var $tobool15=(($call14)|(0))!=0;
      if ($tobool15) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $29=$k;
      var $30=$h_addr;
      var $inc=(($30+36)|0);
      var $31=HEAP32[(($inc)>>2)];
      var $add=((($29)+($31))|0);
      var $32=$h_addr;
      var $mask18=(($32+32)|0);
      var $33=HEAP32[(($mask18)>>2)];
      var $and19=$add & $33;
      $k=$and19;
      label = 5; break;
    case 11: 
      var $34=$k;
      var $div20=Math.floor(((($34)>>>(0)))/(8));
      var $35=$h_addr;
      var $e_flags21=(($35+16)|0);
      var $36=HEAP32[(($e_flags21)>>2)];
      var $arrayidx22=(($36+$div20)|0);
      var $37=HEAP8[($arrayidx22)];
      var $conv23=(($37)&(255));
      var $38=$k;
      var $rem24=((($38)>>>(0)))%(8);
      var $arrayidx25=((114496+$rem24)|0);
      var $39=HEAP8[($arrayidx25)];
      var $conv26=(($39)&(255));
      var $and27=$conv23 & $conv26;
      var $tobool28=(($and27)|(0))!=0;
      if ($tobool28) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $40=$k;
      var $41=$h_addr;
      var $keys30=(($41+24)|0);
      var $42=HEAP32[(($keys30)>>2)];
      var $arrayidx31=(($42+((($40)*(12))&-1))|0);
      var $43=$arrayidx31;
      var $44=$key;
      assert(12 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];
      var $45=$k;
      var $rem32=((($45)>>>(0)))%(8);
      var $arrayidx33=((114496+$rem32)|0);
      var $46=HEAP8[($arrayidx33)];
      var $conv34=(($46)&(255));
      var $neg=$conv34 ^ -1;
      var $47=$k;
      var $div35=Math.floor(((($47)>>>(0)))/(8));
      var $48=$h_addr;
      var $e_flags36=(($48+16)|0);
      var $49=HEAP32[(($e_flags36)>>2)];
      var $arrayidx37=(($49+$div35)|0);
      var $50=HEAP8[($arrayidx37)];
      var $conv38=(($50)&(255));
      var $and39=$conv38 & $neg;
      var $conv40=(($and39) & 255);
      HEAP8[($arrayidx37)]=$conv40;
      var $51=$h_addr;
      var $size=(($51+4)|0);
      var $52=HEAP32[(($size)>>2)];
      var $inc41=((($52)+(1))|0);
      HEAP32[(($size)>>2)]=$inc41;
      var $53=$h_addr;
      var $n_occupied42=(($53+8)|0);
      var $54=HEAP32[(($n_occupied42)>>2)];
      var $inc43=((($54)+(1))|0);
      HEAP32[(($n_occupied42)>>2)]=$inc43;
      label = 16; break;
    case 13: 
      var $55=$k;
      var $div44=Math.floor(((($55)>>>(0)))/(8));
      var $56=$h_addr;
      var $d_flags45=(($56+20)|0);
      var $57=HEAP32[(($d_flags45)>>2)];
      var $arrayidx46=(($57+$div44)|0);
      var $58=HEAP8[($arrayidx46)];
      var $conv47=(($58)&(255));
      var $59=$k;
      var $rem48=((($59)>>>(0)))%(8);
      var $arrayidx49=((114496+$rem48)|0);
      var $60=HEAP8[($arrayidx49)];
      var $conv50=(($60)&(255));
      var $and51=$conv47 & $conv50;
      var $tobool52=(($and51)|(0))!=0;
      if ($tobool52) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $61=$k;
      var $62=$h_addr;
      var $keys54=(($62+24)|0);
      var $63=HEAP32[(($keys54)>>2)];
      var $arrayidx55=(($63+((($61)*(12))&-1))|0);
      var $64=$arrayidx55;
      var $65=$key;
      assert(12 % 1 === 0);HEAP32[(($64)>>2)]=HEAP32[(($65)>>2)];HEAP32[((($64)+(4))>>2)]=HEAP32[((($65)+(4))>>2)];HEAP32[((($64)+(8))>>2)]=HEAP32[((($65)+(8))>>2)];
      var $66=$k;
      var $rem56=((($66)>>>(0)))%(8);
      var $arrayidx57=((114496+$rem56)|0);
      var $67=HEAP8[($arrayidx57)];
      var $conv58=(($67)&(255));
      var $neg59=$conv58 ^ -1;
      var $68=$k;
      var $div60=Math.floor(((($68)>>>(0)))/(8));
      var $69=$h_addr;
      var $d_flags61=(($69+20)|0);
      var $70=HEAP32[(($d_flags61)>>2)];
      var $arrayidx62=(($70+$div60)|0);
      var $71=HEAP8[($arrayidx62)];
      var $conv63=(($71)&(255));
      var $and64=$conv63 & $neg59;
      var $conv65=(($and64) & 255);
      HEAP8[($arrayidx62)]=$conv65;
      var $72=$h_addr;
      var $size66=(($72+4)|0);
      var $73=HEAP32[(($size66)>>2)];
      var $inc67=((($73)+(1))|0);
      HEAP32[(($size66)>>2)]=$inc67;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $74=$k;
      STACKTOP = __stackBase__;
      return $74;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_gc_mark_hash($mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $hash_addr;
      var $k;
      var $h;
      var $key=__stackBase__;
      var $val=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      $hash_addr=$hash;
      var $0=$hash_addr;
      var $ht=(($0+16)|0);
      var $1=HEAP32[(($ht)>>2)];
      $h=$1;
      var $2=$h;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 19; break;
    case 4: 
      $k=0;
      label = 5; break;
    case 5: 
      var $3=$k;
      var $4=$h;
      var $n_buckets=(($4)|0);
      var $5=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($3)|(0))!=(($5)|(0));
      if ($cmp) { label = 6; break; } else { label = 19; break; }
    case 6: 
      var $6=$k;
      var $div=Math.floor(((($6)>>>(0)))/(8));
      var $7=$h;
      var $e_flags=(($7+16)|0);
      var $8=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($8+$div)|0);
      var $9=HEAP8[($arrayidx)];
      var $conv=(($9)&(255));
      var $10=$k;
      var $rem=((($10)>>>(0)))%(8);
      var $arrayidx1=((114496+$rem)|0);
      var $11=HEAP8[($arrayidx1)];
      var $conv2=(($11)&(255));
      var $and=$conv & $conv2;
      var $tobool3=(($and)|(0))!=0;
      if ($tobool3) { label = 17; break; } else { label = 7; break; }
    case 7: 
      var $12=$k;
      var $div4=Math.floor(((($12)>>>(0)))/(8));
      var $13=$h;
      var $d_flags=(($13+20)|0);
      var $14=HEAP32[(($d_flags)>>2)];
      var $arrayidx5=(($14+$div4)|0);
      var $15=HEAP8[($arrayidx5)];
      var $conv6=(($15)&(255));
      var $16=$k;
      var $rem7=((($16)>>>(0)))%(8);
      var $arrayidx8=((114496+$rem7)|0);
      var $17=HEAP8[($arrayidx8)];
      var $conv9=(($17)&(255));
      var $and10=$conv6 & $conv9;
      var $tobool11=(($and10)|(0))!=0;
      if ($tobool11) { label = 17; break; } else { label = 8; break; }
    case 8: 
      var $18=$k;
      var $19=$h;
      var $keys=(($19+24)|0);
      var $20=HEAP32[(($keys)>>2)];
      var $arrayidx13=(($20+((($18)*(12))&-1))|0);
      var $21=$key;
      var $22=$arrayidx13;
      assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
      var $23=$k;
      var $24=$h;
      var $vals=(($24+28)|0);
      var $25=HEAP32[(($vals)>>2)];
      var $arrayidx14=(($25+((($23)*(12))&-1))|0);
      var $26=$val;
      var $27=$arrayidx14;
      assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
      label = 9; break;
    case 9: 
      var $tt=(($key+8)|0);
      var $28=HEAP32[(($tt)>>2)];
      var $cmp15=(($28)>>>(0)) >= 8;
      if ($cmp15) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $29=$mrb_addr;
      var $value=(($key)|0);
      var $p=$value;
      var $30=HEAP32[(($p)>>2)];
      var $31=$30;
      _mrb_gc_mark($29, $31);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $tt20=(($val+8)|0);
      var $32=HEAP32[(($tt20)>>2)];
      var $cmp21=(($32)>>>(0)) >= 8;
      if ($cmp21) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $33=$mrb_addr;
      var $value24=(($val)|0);
      var $p25=$value24;
      var $34=HEAP32[(($p25)>>2)];
      var $35=$34;
      _mrb_gc_mark($33, $35);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $36=$k;
      var $inc=((($36)+(1))|0);
      $k=$inc;
      label = 5; break;
    case 19: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_gc_free_hash($mrb, $hash) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $hash_addr;
      $mrb_addr=$mrb;
      $hash_addr=$hash;
      var $0=$hash_addr;
      var $ht=(($0+16)|0);
      var $1=HEAP32[(($ht)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$hash_addr;
      var $ht1=(($2+16)|0);
      var $3=HEAP32[(($ht1)>>2)];
      _kh_destroy_ht($3);
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_new_capa($agg_result, $mrb, $capa) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $capa_addr;
      var $h;
      $mrb_addr=$mrb;
      $capa_addr=$capa;
      var $0=$mrb_addr;
      var $1=$mrb_addr;
      var $hash_class=(($1+68)|0);
      var $2=HEAP32[(($hash_class)>>2)];
      var $call=_mrb_obj_alloc($0, 15, $2);
      var $3=$call;
      $h=$3;
      var $4=$mrb_addr;
      var $call1=_kh_init_ht($4);
      var $5=$h;
      var $ht=(($5+16)|0);
      HEAP32[(($ht)>>2)]=$call1;
      var $6=$capa_addr;
      var $cmp=(($6)|(0)) > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=$h;
      var $ht2=(($7+16)|0);
      var $8=HEAP32[(($ht2)>>2)];
      var $9=$capa_addr;
      _kh_resize_ht($8, $9);
      label = 4; break;
    case 4: 
      var $10=$h;
      var $iv=(($10+12)|0);
      HEAP32[(($iv)>>2)]=0;
      var $11=$h;
      var $12=$11;
      _mrb_obj_value1062($agg_result, $12);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value1062($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_new($agg_result, $mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_hash_new_capa($agg_result, $0, 0);
  return;
}
function _mrb_hash_get($agg_result, $mrb, $hash, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $h;
      var $k;
      var $agg_tmp=__stackBase__;
      $mrb_addr=$mrb;
      var $value=(($hash)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $ht=(($1+16)|0);
      var $2=HEAP32[(($ht)>>2)];
      $h=$2;
      var $3=$h;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $4=$h;
      var $call=_kh_get_ht($4, $key);
      $k=$call;
      var $5=$k;
      var $6=$h;
      var $n_buckets=(($6)|0);
      var $7=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($5)|(0))!=(($7)|(0));
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$k;
      var $9=$h;
      var $vals=(($9+28)|0);
      var $10=HEAP32[(($vals)>>2)];
      var $arrayidx=(($10+((($8)*(12))&-1))|0);
      var $11=$agg_result;
      var $12=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      label = 9; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $value3=(($hash)|0);
      var $p4=$value3;
      var $13=HEAP32[(($p4)>>2)];
      var $14=$13;
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=$16 >>> 11;
      var $bf_clear=$17 & 2097151;
      var $and=$bf_clear & 256;
      var $tobool5=(($and)|(0))!=0;
      if ($tobool5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $18=$mrb_addr;
      var $19=$mrb_addr;
      var $20=$mrb_addr;
      var $call7=_mrb_intern2($20, ((113952)|0), 6);
      _mrb_iv_get($agg_tmp, $19, $hash, $call7);
      _mrb_funcall($agg_result, $18, $agg_tmp, ((113252)|0), 2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($hash)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($hash)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($hash)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($key)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($key)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($key)+(8))>>2)],tempInt));
      label = 9; break;
    case 8: 
      var $21=$mrb_addr;
      var $22=$mrb_addr;
      var $call9=_mrb_intern2($22, ((113952)|0), 6);
      _mrb_iv_get($agg_result, $21, $hash, $call9);
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_fetch($agg_result, $mrb, $hash, $key, $def) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $def; $def = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($def)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($def)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($def)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $h;
      var $k;
      $mrb_addr=$mrb;
      var $value=(($hash)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $ht=(($1+16)|0);
      var $2=HEAP32[(($ht)>>2)];
      $h=$2;
      var $3=$h;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $4=$h;
      var $call=_kh_get_ht($4, $key);
      $k=$call;
      var $5=$k;
      var $6=$h;
      var $n_buckets=(($6)|0);
      var $7=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($5)|(0))!=(($7)|(0));
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$k;
      var $9=$h;
      var $vals=(($9+28)|0);
      var $10=HEAP32[(($vals)>>2)];
      var $arrayidx=(($10+((($8)*(12))&-1))|0);
      var $11=$agg_result;
      var $12=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $13=$agg_result;
      var $14=$def;
      assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_set($mrb, $hash, $key, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $h;
      var $k;
      var $agg_tmp=__stackBase__;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      _mrb_hash_modify($0, $hash);
      var $value=(($hash)|0);
      var $p=$value;
      var $1=HEAP32[(($p)>>2)];
      var $2=$1;
      var $ht=(($2+16)|0);
      var $3=HEAP32[(($ht)>>2)];
      $h=$3;
      var $4=$h;
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $5=$mrb_addr;
      var $call=_kh_init_ht($5);
      var $value1=(($hash)|0);
      var $p2=$value1;
      var $6=HEAP32[(($p2)>>2)];
      var $7=$6;
      var $ht3=(($7+16)|0);
      HEAP32[(($ht3)>>2)]=$call;
      $h=$call;
      label = 4; break;
    case 4: 
      var $8=$h;
      var $call4=_kh_get_ht($8, $key);
      $k=$call4;
      var $9=$k;
      var $10=$h;
      var $n_buckets=(($10)|0);
      var $11=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($9)|(0))==(($11)|(0));
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $12=$h;
      var $13=$mrb_addr;
      _mrb_hash_ht_key($agg_tmp, $13, $key);
      var $call6=_kh_put_ht($12, $agg_tmp);
      $k=$call6;
      label = 6; break;
    case 6: 
      var $14=$k;
      var $15=$h;
      var $vals=(($15+28)|0);
      var $16=HEAP32[(($vals)>>2)];
      var $arrayidx=(($16+((($14)*(12))&-1))|0);
      var $17=$arrayidx;
      var $18=$val;
      assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
      var $19=$mrb_addr;
      var $value8=(($hash)|0);
      var $p9=$value8;
      var $20=HEAP32[(($p9)>>2)];
      var $21=$20;
      var $22=$21;
      _mrb_write_barrier($19, $22);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_modify($mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_hash_tbl($0, $hash);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_ht_key($agg_result, $mrb, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      $mrb_addr=$mrb;
      var $tt=(($key+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)|(0))==16;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mrb_addr;
      _mrb_str_dup($agg_result, $1, $key);
      label = 5; break;
    case 4: 
      var $2=$agg_result;
      var $3=$key;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_tbl($mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $h;
      $mrb_addr=$mrb;
      var $value=(($hash)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $ht=(($1+16)|0);
      var $2=HEAP32[(($ht)>>2)];
      $h=$2;
      var $3=$h;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$mrb_addr;
      var $call=_kh_init_ht($4);
      var $value1=(($hash)|0);
      var $p2=$value1;
      var $5=HEAP32[(($p2)>>2)];
      var $6=$5;
      var $ht3=(($6+16)|0);
      HEAP32[(($ht3)>>2)]=$call;
      label = 4; break;
    case 4: 
      var $7=$h;
      STACKTOP = __stackBase__;
      return $7;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_aget($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $key=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((101832)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$key,tempInt));
  var $1=$mrb_addr;
  _mrb_hash_get($agg_result, $1, $self, $key);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_delete_key($agg_result, $mrb, $hash, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $h;
      var $k;
      var $delVal=__stackBase__;
      $mrb_addr=$mrb;
      var $value=(($hash)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $ht=(($1+16)|0);
      var $2=HEAP32[(($ht)>>2)];
      $h=$2;
      var $3=$h;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $4=$h;
      var $call=_kh_get_ht($4, $key);
      $k=$call;
      var $5=$k;
      var $6=$h;
      var $n_buckets=(($6)|0);
      var $7=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($5)|(0))!=(($7)|(0));
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$k;
      var $9=$h;
      var $vals=(($9+28)|0);
      var $10=HEAP32[(($vals)>>2)];
      var $arrayidx=(($10+((($8)*(12))&-1))|0);
      var $11=$delVal;
      var $12=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      var $13=$h;
      var $14=$k;
      _kh_del_ht($13, $14);
      var $15=$agg_result;
      var $16=$delVal;
      assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      _mrb_nil_value1065($agg_result);
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1065($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_delete($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $key=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((101832)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$key,tempInt));
  var $1=$mrb_addr;
  _mrb_hash_delete_key($agg_result, $1, $self, $key);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_clear($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $h;
      $mrb_addr=$mrb;
      var $value=(($hash)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $ht=(($1+16)|0);
      var $2=HEAP32[(($ht)>>2)];
      $h=$2;
      var $3=$h;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$h;
      _kh_clear_ht($4);
      label = 4; break;
    case 4: 
      var $5=$agg_result;
      var $6=$hash;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_aset($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $key=__stackBase__;
  var $val=(__stackBase__)+(12);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((99284)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$key,HEAP32[(((tempInt)+(4))>>2)]=$val,tempInt));
  var $1=$mrb_addr;
  _mrb_hash_set($1, $self, $key, $val);
  var $2=$agg_result;
  var $3=$val;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_empty_p($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $h;
      var $empty_p;
      $mrb_addr=$mrb;
      var $value=(($self)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $ht=(($1+16)|0);
      var $2=HEAP32[(($ht)>>2)];
      $h=$2;
      var $3=$h;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$h;
      var $size=(($4+4)|0);
      var $5=HEAP32[(($size)>>2)];
      var $cmp=(($5)|(0))==0;
      var $conv=(($cmp)&(1));
      var $conv1=(($conv) & 255);
      $empty_p=$conv1;
      label = 5; break;
    case 4: 
      $empty_p=1;
      label = 5; break;
    case 5: 
      var $6=$empty_p;
      _mrb_bool_value1066($agg_result, $6);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value1066($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $boolean_addr;
      var $v=__stackBase__;
      $boolean_addr=$boolean;
      label = 3; break;
    case 3: 
      var $0=$boolean_addr;
      var $conv=(($0)&(255));
      var $tobool=(($conv)|(0))!=0;
      var $cond=$tobool ? 2 : 0;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$cond;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_keys($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $h;
      var $k;
      var $ary=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      var $v=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      var $value=(($hash)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $ht=(($1+16)|0);
      var $2=HEAP32[(($ht)>>2)];
      $h=$2;
      var $3=$h;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$mrb_addr;
      _mrb_ary_new($agg_result, $4);
      label = 12; break;
    case 4: 
      var $5=$mrb_addr;
      var $6=$h;
      var $size=(($6+4)|0);
      var $7=HEAP32[(($size)>>2)];
      _mrb_ary_new_capa($tmp, $5, $7);
      var $8=$ary;
      var $9=$tmp;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      $k=0;
      label = 5; break;
    case 5: 
      var $10=$k;
      var $11=$h;
      var $n_buckets=(($11)|0);
      var $12=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($10)|(0))!=(($12)|(0));
      if ($cmp) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $13=$k;
      var $div=Math.floor(((($13)>>>(0)))/(8));
      var $14=$h;
      var $e_flags=(($14+16)|0);
      var $15=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($15+$div)|0);
      var $16=HEAP8[($arrayidx)];
      var $conv=(($16)&(255));
      var $17=$k;
      var $rem=((($17)>>>(0)))%(8);
      var $arrayidx1=((114496+$rem)|0);
      var $18=HEAP8[($arrayidx1)];
      var $conv2=(($18)&(255));
      var $and=$conv & $conv2;
      var $tobool3=(($and)|(0))!=0;
      if ($tobool3) { label = 9; break; } else { label = 7; break; }
    case 7: 
      var $19=$k;
      var $div4=Math.floor(((($19)>>>(0)))/(8));
      var $20=$h;
      var $d_flags=(($20+20)|0);
      var $21=HEAP32[(($d_flags)>>2)];
      var $arrayidx5=(($21+$div4)|0);
      var $22=HEAP8[($arrayidx5)];
      var $conv6=(($22)&(255));
      var $23=$k;
      var $rem7=((($23)>>>(0)))%(8);
      var $arrayidx8=((114496+$rem7)|0);
      var $24=HEAP8[($arrayidx8)];
      var $conv9=(($24)&(255));
      var $and10=$conv6 & $conv9;
      var $tobool11=(($and10)|(0))!=0;
      if ($tobool11) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $25=$k;
      var $26=$h;
      var $keys=(($26+24)|0);
      var $27=HEAP32[(($keys)>>2)];
      var $arrayidx14=(($27+((($25)*(12))&-1))|0);
      var $28=$v;
      var $29=$arrayidx14;
      assert(12 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];HEAP32[((($28)+(8))>>2)]=HEAP32[((($29)+(8))>>2)];
      var $30=$mrb_addr;
      _mrb_ary_push($30, $ary, $v);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $31=$k;
      var $inc=((($31)+(1))|0);
      $k=$inc;
      label = 5; break;
    case 11: 
      var $32=$agg_result;
      var $33=$ary;
      assert(12 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];
      label = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_has_keyWithKey($agg_result, $mrb, $hash, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $h;
      var $k;
      var $result;
      $mrb_addr=$mrb;
      var $value=(($hash)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $ht=(($1+16)|0);
      var $2=HEAP32[(($ht)>>2)];
      $h=$2;
      var $3=$h;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$h;
      var $call=_kh_get_ht($4, $key);
      $k=$call;
      var $5=$k;
      var $6=$h;
      var $n_buckets=(($6)|0);
      var $7=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($5)|(0))!=(($7)|(0));
      var $conv=(($cmp)&(1));
      var $conv1=(($conv) & 255);
      $result=$conv1;
      label = 5; break;
    case 4: 
      $result=0;
      label = 5; break;
    case 5: 
      var $8=$result;
      _mrb_bool_value1066($agg_result, $8);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_hash($mrb) {
  var label = 0;
  var $mrb_addr;
  var $h;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $object_class=(($1+44)|0);
  var $2=HEAP32[(($object_class)>>2)];
  var $call=_mrb_define_class($0, ((108156)|0), $2);
  var $3=$mrb_addr;
  var $hash_class=(($3+68)|0);
  HEAP32[(($hash_class)>>2)]=$call;
  $h=$call;
  var $4=$h;
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=$6 >>> 11;
  var $bf_clear=$7 & 2097151;
  var $and=$bf_clear & -256;
  var $or=$and | 15;
  var $8=$h;
  var $bf_value=$or & 2097151;
  var $9=$8;
  var $10=$bf_value & 2097151;
  var $11=$10 << 11;
  var $12=HEAP32[(($9)>>2)];
  var $13=$12 & 2047;
  var $14=$13 | $11;
  HEAP32[(($9)>>2)]=$14;
  var $15=$mrb_addr;
  var $16=$h;
  var $17=$mrb_addr;
  var $call1=_mrb_class_get($17, ((94880)|0));
  _mrb_include_module($15, $16, $call1);
  var $18=$mrb_addr;
  var $19=$h;
  _mrb_define_method($18, $19, ((94068)|0), 48, 262144);
  var $20=$mrb_addr;
  var $21=$h;
  _mrb_define_method($20, $21, ((113892)|0), 676, 262144);
  var $22=$mrb_addr;
  var $23=$h;
  _mrb_define_method($22, $23, ((113212)|0), 22, 524288);
  var $24=$mrb_addr;
  var $25=$h;
  _mrb_define_method($24, $25, ((112376)|0), 410, 0);
  var $26=$mrb_addr;
  var $27=$h;
  _mrb_define_method($26, $27, ((111812)|0), 150, 4096);
  var $28=$mrb_addr;
  var $29=$h;
  _mrb_define_method($28, $29, ((111228)|0), 42, 262144);
  var $30=$mrb_addr;
  var $31=$h;
  _mrb_define_method($30, $31, ((110728)|0), 280, 0);
  var $32=$mrb_addr;
  var $33=$h;
  _mrb_define_method($32, $33, ((110284)|0), 448, 262144);
  var $34=$mrb_addr;
  var $35=$h;
  _mrb_define_method($34, $35, ((109892)|0), 704, 262144);
  var $36=$mrb_addr;
  var $37=$h;
  _mrb_define_method($36, $37, ((109472)|0), 580, 0);
  var $38=$mrb_addr;
  var $39=$h;
  _mrb_define_method($38, $39, ((108976)|0), 414, 262144);
  var $40=$mrb_addr;
  var $41=$h;
  _mrb_define_method($40, $41, ((108444)|0), 474, 262144);
  var $42=$mrb_addr;
  var $43=$h;
  _mrb_define_method($42, $43, ((108116)|0), 414, 262144);
  var $44=$mrb_addr;
  var $45=$h;
  _mrb_define_method($44, $45, ((107596)|0), 470, 4096);
  var $46=$mrb_addr;
  var $47=$h;
  _mrb_define_method($46, $47, ((107308)|0), 238, 262144);
  var $48=$mrb_addr;
  var $49=$h;
  _mrb_define_method($48, $49, ((106936)|0), 414, 262144);
  var $50=$mrb_addr;
  var $51=$h;
  _mrb_define_method($50, $51, ((106460)|0), 120, 0);
  var $52=$mrb_addr;
  var $53=$h;
  _mrb_define_method($52, $53, ((106076)|0), 678, 0);
  var $54=$mrb_addr;
  var $55=$h;
  _mrb_define_method($54, $55, ((105740)|0), 414, 262144);
  var $56=$mrb_addr;
  var $57=$h;
  _mrb_define_method($56, $57, ((105452)|0), 238, 262144);
  var $58=$mrb_addr;
  var $59=$h;
  _mrb_define_method($58, $59, ((105128)|0), 258, 0);
  var $60=$mrb_addr;
  var $61=$h;
  _mrb_define_method($60, $61, ((104836)|0), 678, 0);
  var $62=$mrb_addr;
  var $63=$h;
  _mrb_define_method($62, $63, ((104536)|0), 22, 524288);
  var $64=$mrb_addr;
  var $65=$h;
  _mrb_define_method($64, $65, ((104008)|0), 474, 262144);
  var $66=$mrb_addr;
  var $67=$h;
  _mrb_define_method($66, $67, ((103764)|0), 96, 0);
  var $68=$mrb_addr;
  var $69=$h;
  _mrb_define_method($68, $69, ((104572)|0), 32, 0);
  var $70=$mrb_addr;
  var $71=$h;
  _mrb_define_method($70, $71, ((103548)|0), 214, 0);
  var $72=$mrb_addr;
  var $73=$h;
  _mrb_define_alias($72, $73, ((103340)|0), ((103548)|0));
  var $74=$mrb_addr;
  var $75=$h;
  _mrb_define_method($74, $75, ((103136)|0), 700, 262144);
  return;
}
function _mrb_hash_equal($agg_result, $mrb, $hash1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash1; $hash1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $hash2=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((101832)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$hash2,tempInt));
  var $1=$mrb_addr;
  _hash_equal($agg_result, $1, $hash1, $hash2, 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_default($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argv=__stackBase__;
      var $argc=(__stackBase__)+(4);
      var $key=(__stackBase__)+(8);
      var $agg_tmp=(__stackBase__)+(20);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((100772)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      var $value=(($hash)|0);
      var $p=$value;
      var $1=HEAP32[(($p)>>2)];
      var $2=$1;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4 >>> 11;
      var $bf_clear=$5 & 2097151;
      var $and=$bf_clear & 256;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $6=HEAP32[(($argc)>>2)];
      var $cmp=(($6)|(0))==0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      _mrb_nil_value1065($agg_result);
      label = 7; break;
    case 5: 
      var $7=HEAP32[(($argv)>>2)];
      var $arrayidx=(($7)|0);
      var $8=$key;
      var $9=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      var $10=$mrb_addr;
      var $11=$mrb_addr;
      var $12=$mrb_addr;
      var $call2=_mrb_intern2($12, ((113952)|0), 6);
      _mrb_iv_get($agg_tmp, $11, $hash, $call2);
      _mrb_funcall($agg_result, $10, $agg_tmp, ((113252)|0), 2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($hash)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($hash)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($hash)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($key)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($key)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($key)+(8))>>2)],tempInt));
      label = 7; break;
    case 6: 
      var $13=$mrb_addr;
      var $14=$mrb_addr;
      var $call3=_mrb_intern2($14, ((113952)|0), 6);
      _mrb_iv_get($agg_result, $13, $hash, $call3);
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_set_default($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $ifnone=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((101832)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ifnone,tempInt));
  var $1=$mrb_addr;
  _mrb_hash_modify($1, $hash);
  var $2=$mrb_addr;
  var $3=$mrb_addr;
  var $call1=_mrb_intern2($3, ((113952)|0), 6);
  _mrb_iv_set($2, $hash, $call1, $ifnone);
  var $value=(($hash)|0);
  var $p=$value;
  var $4=HEAP32[(($p)>>2)];
  var $5=$4;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=$7 >>> 11;
  var $bf_clear=$8 & 2097151;
  var $and=$bf_clear & -257;
  var $bf_value=$and & 2097151;
  var $9=$5;
  var $10=$bf_value & 2097151;
  var $11=$10 << 11;
  var $12=HEAP32[(($9)>>2)];
  var $13=$12 & 2047;
  var $14=$13 | $11;
  HEAP32[(($9)>>2)]=$14;
  var $15=$agg_result;
  var $16=$ifnone;
  assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_default_proc($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      $mrb_addr=$mrb;
      var $value=(($hash)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $2=$1;
      var $3=HEAP32[(($2)>>2)];
      var $4=$3 >>> 11;
      var $bf_clear=$4 & 2097151;
      var $and=$bf_clear & 256;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$mrb_addr;
      var $6=$mrb_addr;
      var $call=_mrb_intern2($6, ((113952)|0), 6);
      _mrb_iv_get($agg_result, $5, $hash, $call);
      label = 5; break;
    case 4: 
      _mrb_nil_value1065($agg_result);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_set_default_proc($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $ifnone=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((101832)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ifnone,tempInt));
  var $1=$mrb_addr;
  _mrb_hash_modify($1, $hash);
  var $2=$mrb_addr;
  var $3=$mrb_addr;
  var $call1=_mrb_intern2($3, ((113952)|0), 6);
  _mrb_iv_set($2, $hash, $call1, $ifnone);
  var $value=(($hash)|0);
  var $p=$value;
  var $4=HEAP32[(($p)>>2)];
  var $5=$4;
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=$7 >>> 11;
  var $bf_clear=$8 & 2097151;
  var $or=$bf_clear | 256;
  var $bf_value=$or & 2097151;
  var $9=$5;
  var $10=$bf_value & 2097151;
  var $11=$10 << 11;
  var $12=HEAP32[(($9)>>2)];
  var $13=$12 & 2047;
  var $14=$13 | $11;
  HEAP32[(($9)>>2)]=$14;
  var $15=$agg_result;
  var $16=$ifnone;
  assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_has_key($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $key=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((101832)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$key,tempInt));
  var $1=$mrb_addr;
  _mrb_hash_has_keyWithKey($agg_result, $1, $hash, $key);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_has_value($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $val=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((101832)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$val,tempInt));
  var $1=$mrb_addr;
  _mrb_hash_has_valueWithvalue($agg_result, $1, $hash, $val);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_init_core($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 44)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $block=__stackBase__;
      var $ifnone=(__stackBase__)+(12);
      var $argv=(__stackBase__)+(24);
      var $argc=(__stackBase__)+(28);
      var $tmp=(__stackBase__)+(32);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((101040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$block,HEAP32[(((tempInt)+(4))>>2)]=$argv,HEAP32[(((tempInt)+(8))>>2)]=$argc,tempInt));
      var $1=$mrb_addr;
      _mrb_hash_modify($1, $hash);
      var $tt=(($block+8)|0);
      var $2=HEAP32[(($tt)>>2)];
      var $cmp=(($2)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $value=(($block)|0);
      var $i=$value;
      var $3=HEAP32[(($i)>>2)];
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 10; break; } else { label = 4; break; }
    case 4: 
      var $4=HEAP32[(($argc)>>2)];
      var $cmp1=(($4)|(0)) > 0;
      if ($cmp1) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $5=HEAP32[(($argc)>>2)];
      var $cmp3=(($5)|(0))!=1;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $6=$mrb_addr;
      var $7=$mrb_addr;
      var $call5=_mrb_class_get($7, ((97096)|0));
      _mrb_raise($6, $call5, ((95952)|0));
      label = 7; break;
    case 7: 
      var $8=HEAP32[(($argv)>>2)];
      var $arrayidx=(($8)|0);
      var $9=$ifnone;
      var $10=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      label = 9; break;
    case 8: 
      _mrb_nil_value1065($tmp);
      var $11=$ifnone;
      var $12=$tmp;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      label = 9; break;
    case 9: 
      label = 13; break;
    case 10: 
      var $13=HEAP32[(($argc)>>2)];
      var $cmp8=(($13)|(0)) > 0;
      if ($cmp8) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $14=$mrb_addr;
      var $15=$mrb_addr;
      var $call10=_mrb_class_get($15, ((97096)|0));
      _mrb_raise($14, $call10, ((95952)|0));
      label = 12; break;
    case 12: 
      var $value12=(($hash)|0);
      var $p=$value12;
      var $16=HEAP32[(($p)>>2)];
      var $17=$16;
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19 >>> 11;
      var $bf_clear=$20 & 2097151;
      var $or=$bf_clear | 256;
      var $bf_value=$or & 2097151;
      var $21=$17;
      var $22=$bf_value & 2097151;
      var $23=$22 << 11;
      var $24=HEAP32[(($21)>>2)];
      var $25=$24 & 2047;
      var $26=$25 | $23;
      HEAP32[(($21)>>2)]=$26;
      var $27=$ifnone;
      var $28=$block;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      label = 13; break;
    case 13: 
      var $29=$mrb_addr;
      var $30=$mrb_addr;
      var $call14=_mrb_intern2($30, ((113952)|0), 6);
      _mrb_iv_set($29, $hash, $call14, $ifnone);
      var $31=$agg_result;
      var $32=$hash;
      assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_replace($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $hash2=__stackBase__;
      var $ifnone=(__stackBase__)+(12);
      var $h2;
      var $k;
      var $tmp=(__stackBase__)+(24);
      var $tmp2=(__stackBase__)+(36);
      var $tmp30=(__stackBase__)+(48);
      var $tmp32=(__stackBase__)+(60);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((101832)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$hash2,tempInt));
      var $1=$mrb_addr;
      _to_hash1070($tmp, $1, $hash2);
      var $2=$hash2;
      var $3=$tmp;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      var $4=$mrb_addr;
      var $call1=_mrb_obj_equal($4, $hash, $hash2);
      var $tobool=(($call1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$agg_result;
      var $6=$hash;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      label = 17; break;
    case 4: 
      var $7=$mrb_addr;
      _mrb_hash_clear($tmp2, $7, $hash);
      var $value=(($hash2)|0);
      var $p=$value;
      var $8=HEAP32[(($p)>>2)];
      var $9=$8;
      var $ht=(($9+16)|0);
      var $10=HEAP32[(($ht)>>2)];
      $h2=$10;
      var $11=$h2;
      var $tobool3=(($11)|(0))!=0;
      if ($tobool3) { label = 5; break; } else { label = 13; break; }
    case 5: 
      $k=0;
      label = 6; break;
    case 6: 
      var $12=$k;
      var $13=$h2;
      var $n_buckets=(($13)|0);
      var $14=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($12)|(0))!=(($14)|(0));
      if ($cmp) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $15=$k;
      var $div=Math.floor(((($15)>>>(0)))/(8));
      var $16=$h2;
      var $e_flags=(($16+16)|0);
      var $17=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($17+$div)|0);
      var $18=HEAP8[($arrayidx)];
      var $conv=(($18)&(255));
      var $19=$k;
      var $rem=((($19)>>>(0)))%(8);
      var $arrayidx5=((114496+$rem)|0);
      var $20=HEAP8[($arrayidx5)];
      var $conv6=(($20)&(255));
      var $and=$conv & $conv6;
      var $tobool7=(($and)|(0))!=0;
      if ($tobool7) { label = 10; break; } else { label = 8; break; }
    case 8: 
      var $21=$k;
      var $div8=Math.floor(((($21)>>>(0)))/(8));
      var $22=$h2;
      var $d_flags=(($22+20)|0);
      var $23=HEAP32[(($d_flags)>>2)];
      var $arrayidx9=(($23+$div8)|0);
      var $24=HEAP8[($arrayidx9)];
      var $conv10=(($24)&(255));
      var $25=$k;
      var $rem11=((($25)>>>(0)))%(8);
      var $arrayidx12=((114496+$rem11)|0);
      var $26=HEAP8[($arrayidx12)];
      var $conv13=(($26)&(255));
      var $and14=$conv10 & $conv13;
      var $tobool15=(($and14)|(0))!=0;
      if ($tobool15) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $27=$mrb_addr;
      var $28=$k;
      var $29=$h2;
      var $keys=(($29+24)|0);
      var $30=HEAP32[(($keys)>>2)];
      var $arrayidx17=(($30+((($28)*(12))&-1))|0);
      var $31=$k;
      var $32=$h2;
      var $vals=(($32+28)|0);
      var $33=HEAP32[(($vals)>>2)];
      var $arrayidx18=(($33+((($31)*(12))&-1))|0);
      _mrb_hash_set($27, $hash, $arrayidx17, $arrayidx18);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $34=$k;
      var $inc=((($34)+(1))|0);
      $k=$inc;
      label = 6; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $value21=(($hash2)|0);
      var $p22=$value21;
      var $35=HEAP32[(($p22)>>2)];
      var $36=$35;
      var $37=$36;
      var $38=HEAP32[(($37)>>2)];
      var $39=$38 >>> 11;
      var $bf_clear=$39 & 2097151;
      var $and23=$bf_clear & 256;
      var $tobool24=(($and23)|(0))!=0;
      if ($tobool24) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $value26=(($hash)|0);
      var $p27=$value26;
      var $40=HEAP32[(($p27)>>2)];
      var $41=$40;
      var $42=$41;
      var $43=HEAP32[(($42)>>2)];
      var $44=$43 >>> 11;
      var $bf_clear28=$44 & 2097151;
      var $or=$bf_clear28 | 256;
      var $bf_value=$or & 2097151;
      var $45=$41;
      var $46=$bf_value & 2097151;
      var $47=$46 << 11;
      var $48=HEAP32[(($45)>>2)];
      var $49=$48 & 2047;
      var $50=$49 | $47;
      HEAP32[(($45)>>2)]=$50;
      var $51=$mrb_addr;
      var $52=$mrb_addr;
      var $call29=_mrb_intern2($52, ((113952)|0), 6);
      _mrb_iv_get($tmp30, $51, $hash2, $call29);
      var $53=$ifnone;
      var $54=$tmp30;
      assert(12 % 1 === 0);HEAP32[(($53)>>2)]=HEAP32[(($54)>>2)];HEAP32[((($53)+(4))>>2)]=HEAP32[((($54)+(4))>>2)];HEAP32[((($53)+(8))>>2)]=HEAP32[((($54)+(8))>>2)];
      label = 16; break;
    case 15: 
      var $55=$mrb_addr;
      var $56=$mrb_addr;
      var $call31=_mrb_intern2($56, ((113952)|0), 6);
      _mrb_iv_get($tmp32, $55, $hash2, $call31);
      var $57=$ifnone;
      var $58=$tmp32;
      assert(12 % 1 === 0);HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];HEAP32[((($57)+(4))>>2)]=HEAP32[((($58)+(4))>>2)];HEAP32[((($57)+(8))>>2)]=HEAP32[((($58)+(8))>>2)];
      label = 16; break;
    case 16: 
      var $59=$mrb_addr;
      var $60=$mrb_addr;
      var $call34=_mrb_intern2($60, ((113952)|0), 6);
      _mrb_iv_set($59, $hash, $call34, $ifnone);
      var $61=$agg_result;
      var $62=$hash;
      assert(12 % 1 === 0);HEAP32[(($61)>>2)]=HEAP32[(($62)>>2)];HEAP32[((($61)+(4))>>2)]=HEAP32[((($62)+(4))>>2)];HEAP32[((($61)+(8))>>2)]=HEAP32[((($62)+(8))>>2)];
      label = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_size_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $h;
      $mrb_addr=$mrb;
      var $value=(($self)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $ht=(($1+16)|0);
      var $2=HEAP32[(($ht)>>2)];
      $h=$2;
      var $3=$h;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_fixnum_value1069($agg_result, 0);
      label = 5; break;
    case 4: 
      var $4=$h;
      var $size=(($4+4)|0);
      var $5=HEAP32[(($size)>>2)];
      _mrb_fixnum_value1069($agg_result, $5);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_shift($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $h;
      var $k;
      var $delKey=__stackBase__;
      var $delVal=(__stackBase__)+(12);
      var $tmp=(__stackBase__)+(24);
      var $agg_tmp=(__stackBase__)+(36);
      var $agg_tmp23=(__stackBase__)+(48);
      $mrb_addr=$mrb;
      var $value=(($hash)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $ht=(($1+16)|0);
      var $2=HEAP32[(($ht)>>2)];
      $h=$2;
      var $3=$mrb_addr;
      _mrb_hash_modify($3, $hash);
      var $4=$h;
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 13; break; }
    case 3: 
      var $5=$h;
      var $size=(($5+4)|0);
      var $6=HEAP32[(($size)>>2)];
      var $cmp=(($6)>>>(0)) > 0;
      if ($cmp) { label = 4; break; } else { label = 12; break; }
    case 4: 
      $k=0;
      label = 5; break;
    case 5: 
      var $7=$k;
      var $8=$h;
      var $n_buckets=(($8)|0);
      var $9=HEAP32[(($n_buckets)>>2)];
      var $cmp2=(($7)|(0))!=(($9)|(0));
      if ($cmp2) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $10=$k;
      var $div=Math.floor(((($10)>>>(0)))/(8));
      var $11=$h;
      var $e_flags=(($11+16)|0);
      var $12=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($12+$div)|0);
      var $13=HEAP8[($arrayidx)];
      var $conv=(($13)&(255));
      var $14=$k;
      var $rem=((($14)>>>(0)))%(8);
      var $arrayidx3=((114496+$rem)|0);
      var $15=HEAP8[($arrayidx3)];
      var $conv4=(($15)&(255));
      var $and=$conv & $conv4;
      var $tobool5=(($and)|(0))!=0;
      if ($tobool5) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $16=$k;
      var $div6=Math.floor(((($16)>>>(0)))/(8));
      var $17=$h;
      var $d_flags=(($17+20)|0);
      var $18=HEAP32[(($d_flags)>>2)];
      var $arrayidx7=(($18+$div6)|0);
      var $19=HEAP8[($arrayidx7)];
      var $conv8=(($19)&(255));
      var $20=$k;
      var $rem9=((($20)>>>(0)))%(8);
      var $arrayidx10=((114496+$rem9)|0);
      var $21=HEAP8[($arrayidx10)];
      var $conv11=(($21)&(255));
      var $and12=$conv8 & $conv11;
      var $tobool13=(($and12)|(0))!=0;
      if ($tobool13) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $22=$k;
      var $23=$h;
      var $keys=(($23+24)|0);
      var $24=HEAP32[(($keys)>>2)];
      var $arrayidx15=(($24+((($22)*(12))&-1))|0);
      var $25=$delKey;
      var $26=$arrayidx15;
      assert(12 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
      var $27=$mrb_addr;
      _mrb_gc_protect($27, $delKey);
      var $28=$mrb_addr;
      _mrb_hash_delete_key($tmp, $28, $hash, $delKey);
      var $29=$delVal;
      var $30=$tmp;
      assert(12 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($29)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];
      var $31=$mrb_addr;
      _mrb_gc_protect($31, $delVal);
      var $32=$mrb_addr;
      _mrb_assoc_new($agg_result, $32, $delKey, $delVal);
      label = 16; break;
    case 10: 
      var $33=$k;
      var $inc=((($33)+(1))|0);
      $k=$inc;
      label = 5; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $value18=(($hash)|0);
      var $p19=$value18;
      var $34=HEAP32[(($p19)>>2)];
      var $35=$34;
      var $36=$35;
      var $37=HEAP32[(($36)>>2)];
      var $38=$37 >>> 11;
      var $bf_clear=$38 & 2097151;
      var $and20=$bf_clear & 256;
      var $tobool21=(($and20)|(0))!=0;
      if ($tobool21) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $39=$mrb_addr;
      var $40=$mrb_addr;
      var $41=$mrb_addr;
      var $call=_mrb_intern2($41, ((113952)|0), 6);
      _mrb_iv_get($agg_tmp, $40, $hash, $call);
      _mrb_nil_value1065($agg_tmp23);
      _mrb_funcall($agg_result, $39, $agg_tmp, ((113252)|0), 2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($hash)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($hash)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($hash)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp23)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp23)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp23)+(8))>>2)],tempInt));
      label = 16; break;
    case 15: 
      var $42=$mrb_addr;
      var $43=$mrb_addr;
      var $call24=_mrb_intern2($43, ((113952)|0), 6);
      _mrb_iv_get($agg_result, $42, $hash, $call24);
      label = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_values($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $h;
      var $k;
      var $ary=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      var $v=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      var $value=(($hash)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $ht=(($1+16)|0);
      var $2=HEAP32[(($ht)>>2)];
      $h=$2;
      var $3=$h;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$mrb_addr;
      _mrb_ary_new($agg_result, $4);
      label = 12; break;
    case 4: 
      var $5=$mrb_addr;
      var $6=$h;
      var $size=(($6+4)|0);
      var $7=HEAP32[(($size)>>2)];
      _mrb_ary_new_capa($tmp, $5, $7);
      var $8=$ary;
      var $9=$tmp;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      $k=0;
      label = 5; break;
    case 5: 
      var $10=$k;
      var $11=$h;
      var $n_buckets=(($11)|0);
      var $12=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($10)|(0))!=(($12)|(0));
      if ($cmp) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $13=$k;
      var $div=Math.floor(((($13)>>>(0)))/(8));
      var $14=$h;
      var $e_flags=(($14+16)|0);
      var $15=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($15+$div)|0);
      var $16=HEAP8[($arrayidx)];
      var $conv=(($16)&(255));
      var $17=$k;
      var $rem=((($17)>>>(0)))%(8);
      var $arrayidx1=((114496+$rem)|0);
      var $18=HEAP8[($arrayidx1)];
      var $conv2=(($18)&(255));
      var $and=$conv & $conv2;
      var $tobool3=(($and)|(0))!=0;
      if ($tobool3) { label = 9; break; } else { label = 7; break; }
    case 7: 
      var $19=$k;
      var $div4=Math.floor(((($19)>>>(0)))/(8));
      var $20=$h;
      var $d_flags=(($20+20)|0);
      var $21=HEAP32[(($d_flags)>>2)];
      var $arrayidx5=(($21+$div4)|0);
      var $22=HEAP8[($arrayidx5)];
      var $conv6=(($22)&(255));
      var $23=$k;
      var $rem7=((($23)>>>(0)))%(8);
      var $arrayidx8=((114496+$rem7)|0);
      var $24=HEAP8[($arrayidx8)];
      var $conv9=(($24)&(255));
      var $and10=$conv6 & $conv9;
      var $tobool11=(($and10)|(0))!=0;
      if ($tobool11) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $25=$k;
      var $26=$h;
      var $vals=(($26+28)|0);
      var $27=HEAP32[(($vals)>>2)];
      var $arrayidx14=(($27+((($25)*(12))&-1))|0);
      var $28=$v;
      var $29=$arrayidx14;
      assert(12 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];HEAP32[((($28)+(8))>>2)]=HEAP32[((($29)+(8))>>2)];
      var $30=$mrb_addr;
      _mrb_ary_push($30, $ary, $v);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $31=$k;
      var $inc=((($31)+(1))|0);
      $k=$inc;
      label = 5; break;
    case 11: 
      var $32=$agg_result;
      var $33=$ary;
      assert(12 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];
      label = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_to_hash($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$agg_result;
  var $1=$hash;
  assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_inspect($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $h;
      $mrb_addr=$mrb;
      var $value=(($hash)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $ht=(($1+16)|0);
      var $2=HEAP32[(($ht)>>2)];
      $h=$2;
      var $3=$h;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$h;
      var $size=(($4+4)|0);
      var $5=HEAP32[(($size)>>2)];
      var $cmp=(($5)|(0))==0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$mrb_addr;
      _mrb_str_new($agg_result, $6, ((102852)|0), 2);
      label = 6; break;
    case 5: 
      var $7=$mrb_addr;
      _inspect_hash($agg_result, $7, $hash, 0);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_eql($agg_result, $mrb, $hash1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash1; $hash1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $hash2=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((101832)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$hash2,tempInt));
  var $1=$mrb_addr;
  _hash_equal($agg_result, $1, $hash1, $hash2, 1);
  STACKTOP = __stackBase__;
  return;
}
function _hash_equal($agg_result, $mrb, $hash1, $hash2, $eql) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash1; $hash1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $hash2; $hash2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $eql_addr;
      var $h1;
      var $h2;
      var $k1;
      var $k2;
      var $key=__stackBase__;
      $mrb_addr=$mrb;
      $eql_addr=$eql;
      var $0=$mrb_addr;
      var $call=_mrb_obj_equal($0, $hash1, $hash2);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      _mrb_true_value1067($agg_result);
      label = 29; break;
    case 4: 
      var $tt=(($hash2+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==15;
      if ($cmp) { label = 10; break; } else { label = 5; break; }
    case 5: 
      var $2=$mrb_addr;
      var $3=$mrb_addr;
      var $call2=_mrb_intern2($3, ((104572)|0), 7);
      var $call3=_mrb_respond_to($2, $hash2, $call2);
      var $tobool4=(($call3)|(0))!=0;
      if ($tobool4) { label = 7; break; } else { label = 6; break; }
    case 6: 
      _mrb_false_value1068($agg_result);
      label = 29; break;
    case 7: 
      var $4=$eql_addr;
      var $tobool7=(($4)|(0))!=0;
      if ($tobool7) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $5=$mrb_addr;
      var $call9=_mrb_eql($5, $hash2, $hash1);
      _mrb_fixnum_value1069($agg_result, $call9);
      label = 29; break;
    case 9: 
      var $6=$mrb_addr;
      var $call10=_mrb_equal($6, $hash2, $hash1);
      _mrb_fixnum_value1069($agg_result, $call10);
      label = 29; break;
    case 10: 
      var $value=(($hash1)|0);
      var $p=$value;
      var $7=HEAP32[(($p)>>2)];
      var $8=$7;
      var $ht=(($8+16)|0);
      var $9=HEAP32[(($ht)>>2)];
      $h1=$9;
      var $value12=(($hash2)|0);
      var $p13=$value12;
      var $10=HEAP32[(($p13)>>2)];
      var $11=$10;
      var $ht14=(($11+16)|0);
      var $12=HEAP32[(($ht14)>>2)];
      $h2=$12;
      var $13=$h1;
      var $tobool15=(($13)|(0))!=0;
      if ($tobool15) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $14=$h2;
      var $tobool17=(($14)|(0))!=0;
      var $lnot=$tobool17 ^ 1;
      var $lnot_ext=(($lnot)&(1));
      var $conv=(($lnot_ext) & 255);
      _mrb_bool_value1066($agg_result, $conv);
      label = 29; break;
    case 12: 
      var $15=$h2;
      var $tobool19=(($15)|(0))!=0;
      if ($tobool19) { label = 14; break; } else { label = 13; break; }
    case 13: 
      _mrb_false_value1068($agg_result);
      label = 29; break;
    case 14: 
      var $16=$h1;
      var $size=(($16+4)|0);
      var $17=HEAP32[(($size)>>2)];
      var $18=$h2;
      var $size22=(($18+4)|0);
      var $19=HEAP32[(($size22)>>2)];
      var $cmp23=(($17)|(0))!=(($19)|(0));
      if ($cmp23) { label = 15; break; } else { label = 16; break; }
    case 15: 
      _mrb_false_value1068($agg_result);
      label = 29; break;
    case 16: 
      $k1=0;
      label = 17; break;
    case 17: 
      var $20=$k1;
      var $21=$h1;
      var $n_buckets=(($21)|0);
      var $22=HEAP32[(($n_buckets)>>2)];
      var $cmp27=(($20)|(0))!=(($22)|(0));
      if ($cmp27) { label = 18; break; } else { label = 27; break; }
    case 18: 
      var $23=$k1;
      var $div=Math.floor(((($23)>>>(0)))/(8));
      var $24=$h1;
      var $e_flags=(($24+16)|0);
      var $25=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($25+$div)|0);
      var $26=HEAP8[($arrayidx)];
      var $conv29=(($26)&(255));
      var $27=$k1;
      var $rem=((($27)>>>(0)))%(8);
      var $arrayidx30=((114496+$rem)|0);
      var $28=HEAP8[($arrayidx30)];
      var $conv31=(($28)&(255));
      var $and=$conv29 & $conv31;
      var $tobool32=(($and)|(0))!=0;
      if ($tobool32) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $29=$k1;
      var $div33=Math.floor(((($29)>>>(0)))/(8));
      var $30=$h1;
      var $d_flags=(($30+20)|0);
      var $31=HEAP32[(($d_flags)>>2)];
      var $arrayidx34=(($31+$div33)|0);
      var $32=HEAP8[($arrayidx34)];
      var $conv35=(($32)&(255));
      var $33=$k1;
      var $rem36=((($33)>>>(0)))%(8);
      var $arrayidx37=((114496+$rem36)|0);
      var $34=HEAP8[($arrayidx37)];
      var $conv38=(($34)&(255));
      var $and39=$conv35 & $conv38;
      var $tobool40=(($and39)|(0))!=0;
      if ($tobool40) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 26; break;
    case 21: 
      var $35=$k1;
      var $36=$h1;
      var $keys=(($36+24)|0);
      var $37=HEAP32[(($keys)>>2)];
      var $arrayidx43=(($37+((($35)*(12))&-1))|0);
      var $38=$key;
      var $39=$arrayidx43;
      assert(12 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];HEAP32[((($38)+(8))>>2)]=HEAP32[((($39)+(8))>>2)];
      var $40=$h2;
      var $call44=_kh_get_ht($40, $key);
      $k2=$call44;
      var $41=$k2;
      var $42=$h2;
      var $n_buckets45=(($42)|0);
      var $43=HEAP32[(($n_buckets45)>>2)];
      var $cmp46=(($41)|(0))!=(($43)|(0));
      if ($cmp46) { label = 22; break; } else { label = 25; break; }
    case 22: 
      var $44=$mrb_addr;
      var $45=$k1;
      var $46=$h1;
      var $vals=(($46+28)|0);
      var $47=HEAP32[(($vals)>>2)];
      var $arrayidx49=(($47+((($45)*(12))&-1))|0);
      var $48=$k2;
      var $49=$h2;
      var $vals50=(($49+28)|0);
      var $50=HEAP32[(($vals50)>>2)];
      var $arrayidx51=(($50+((($48)*(12))&-1))|0);
      var $call52=_mrb_equal($44, $arrayidx49, $arrayidx51);
      var $tobool53=(($call52)|(0))!=0;
      if ($tobool53) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 26; break;
    case 24: 
      label = 25; break;
    case 25: 
      _mrb_false_value1068($agg_result);
      label = 29; break;
    case 26: 
      var $51=$k1;
      var $inc=((($51)+(1))|0);
      $k1=$inc;
      label = 17; break;
    case 27: 
      label = 28; break;
    case 28: 
      _mrb_true_value1067($agg_result);
      label = 29; break;
    case 29: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_true_value1067($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=2;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_false_value1068($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value1069($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _inspect_hash($agg_result, $mrb, $hash, $recur) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $recur_addr;
      var $str=__stackBase__;
      var $str2=(__stackBase__)+(12);
      var $h;
      var $k;
      var $tmp=(__stackBase__)+(24);
      var $ai;
      var $tmp23=(__stackBase__)+(36);
      var $tmp26=(__stackBase__)+(48);
      var $tmp27=(__stackBase__)+(60);
      var $tmp28=(__stackBase__)+(72);
      var $tmp30=(__stackBase__)+(84);
      var $tmp31=(__stackBase__)+(96);
      var $tmp33=(__stackBase__)+(108);
      $mrb_addr=$mrb;
      $recur_addr=$recur;
      var $value=(($hash)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $ht=(($1+16)|0);
      var $2=HEAP32[(($ht)>>2)];
      $h=$2;
      var $3=$recur_addr;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$mrb_addr;
      _mrb_str_new($agg_result, $4, ((102676)|0), 5);
      label = 17; break;
    case 4: 
      var $5=$mrb_addr;
      _mrb_str_new($tmp, $5, ((102356)|0), 1);
      var $6=$str;
      var $7=$tmp;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      var $8=$h;
      var $tobool1=(($8)|(0))!=0;
      if ($tobool1) { label = 5; break; } else { label = 16; break; }
    case 5: 
      var $9=$h;
      var $size=(($9+4)|0);
      var $10=HEAP32[(($size)>>2)];
      var $cmp=(($10)>>>(0)) > 0;
      if ($cmp) { label = 6; break; } else { label = 16; break; }
    case 6: 
      $k=0;
      label = 7; break;
    case 7: 
      var $11=$k;
      var $12=$h;
      var $n_buckets=(($12)|0);
      var $13=HEAP32[(($n_buckets)>>2)];
      var $cmp3=(($11)|(0))!=(($13)|(0));
      if ($cmp3) { label = 8; break; } else { label = 15; break; }
    case 8: 
      var $14=$k;
      var $div=Math.floor(((($14)>>>(0)))/(8));
      var $15=$h;
      var $e_flags=(($15+16)|0);
      var $16=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($16+$div)|0);
      var $17=HEAP8[($arrayidx)];
      var $conv=(($17)&(255));
      var $18=$k;
      var $rem=((($18)>>>(0)))%(8);
      var $arrayidx5=((114496+$rem)|0);
      var $19=HEAP8[($arrayidx5)];
      var $conv6=(($19)&(255));
      var $and=$conv & $conv6;
      var $tobool7=(($and)|(0))!=0;
      if ($tobool7) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $20=$k;
      var $div8=Math.floor(((($20)>>>(0)))/(8));
      var $21=$h;
      var $d_flags=(($21+20)|0);
      var $22=HEAP32[(($d_flags)>>2)];
      var $arrayidx9=(($22+$div8)|0);
      var $23=HEAP8[($arrayidx9)];
      var $conv10=(($23)&(255));
      var $24=$k;
      var $rem11=((($24)>>>(0)))%(8);
      var $arrayidx12=((114496+$rem11)|0);
      var $25=HEAP8[($arrayidx12)];
      var $conv13=(($25)&(255));
      var $and14=$conv10 & $conv13;
      var $tobool15=(($and14)|(0))!=0;
      if ($tobool15) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 14; break;
    case 11: 
      var $26=$mrb_addr;
      var $call=_mrb_gc_arena_save($26);
      $ai=$call;
      var $value18=(($str)|0);
      var $p19=$value18;
      var $27=HEAP32[(($p19)>>2)];
      var $28=$27;
      var $len=(($28+12)|0);
      var $29=HEAP32[(($len)>>2)];
      var $cmp20=(($29)|(0)) > 1;
      if ($cmp20) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $30=$mrb_addr;
      _mrb_str_cat($tmp23, $30, $str, ((102040)|0), 2);
      label = 13; break;
    case 13: 
      var $31=$mrb_addr;
      var $32=$k;
      var $33=$h;
      var $keys=(($33+24)|0);
      var $34=HEAP32[(($keys)>>2)];
      var $arrayidx25=(($34+((($32)*(12))&-1))|0);
      _mrb_inspect($tmp26, $31, $arrayidx25);
      var $35=$str2;
      var $36=$tmp26;
      assert(12 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];HEAP32[((($35)+(8))>>2)]=HEAP32[((($36)+(8))>>2)];
      var $37=$mrb_addr;
      _mrb_str_append($tmp27, $37, $str, $str2);
      var $38=$mrb_addr;
      _mrb_str_buf_cat($tmp28, $38, $str, ((101796)|0), 2);
      var $39=$mrb_addr;
      var $40=$k;
      var $41=$h;
      var $vals=(($41+28)|0);
      var $42=HEAP32[(($vals)>>2)];
      var $arrayidx29=(($42+((($40)*(12))&-1))|0);
      _mrb_inspect($tmp30, $39, $arrayidx29);
      var $43=$str2;
      var $44=$tmp30;
      assert(12 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];
      var $45=$mrb_addr;
      _mrb_str_append($tmp31, $45, $str, $str2);
      var $46=$mrb_addr;
      var $47=$ai;
      _mrb_gc_arena_restore($46, $47);
      label = 14; break;
    case 14: 
      var $48=$k;
      var $inc=((($48)+(1))|0);
      $k=$inc;
      label = 7; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $49=$mrb_addr;
      _mrb_str_buf_cat($tmp33, $49, $str, ((101344)|0), 1);
      var $50=$agg_result;
      var $51=$str;
      assert(12 % 1 === 0);HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((($51)+(4))>>2)];HEAP32[((($50)+(8))>>2)]=HEAP32[((($51)+(8))>>2)];
      label = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _to_hash1070($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_convert_type($agg_result, $0, $hash, 15, ((108156)|0), ((104572)|0));
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_has_valueWithvalue($agg_result, $mrb, $hash, $value) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $value; $value = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($value)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($value)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($value)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $h;
      var $k;
      $mrb_addr=$mrb;
      var $value1=(($hash)|0);
      var $p=$value1;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $ht=(($1+16)|0);
      var $2=HEAP32[(($ht)>>2)];
      $h=$2;
      var $3=$h;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 13; break; }
    case 3: 
      $k=0;
      label = 4; break;
    case 4: 
      var $4=$k;
      var $5=$h;
      var $n_buckets=(($5)|0);
      var $6=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($4)|(0))!=(($6)|(0));
      if ($cmp) { label = 5; break; } else { label = 12; break; }
    case 5: 
      var $7=$k;
      var $div=Math.floor(((($7)>>>(0)))/(8));
      var $8=$h;
      var $e_flags=(($8+16)|0);
      var $9=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($9+$div)|0);
      var $10=HEAP8[($arrayidx)];
      var $conv=(($10)&(255));
      var $11=$k;
      var $rem=((($11)>>>(0)))%(8);
      var $arrayidx2=((114496+$rem)|0);
      var $12=HEAP8[($arrayidx2)];
      var $conv3=(($12)&(255));
      var $and=$conv & $conv3;
      var $tobool4=(($and)|(0))!=0;
      if ($tobool4) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $13=$k;
      var $div5=Math.floor(((($13)>>>(0)))/(8));
      var $14=$h;
      var $d_flags=(($14+20)|0);
      var $15=HEAP32[(($d_flags)>>2)];
      var $arrayidx6=(($15+$div5)|0);
      var $16=HEAP8[($arrayidx6)];
      var $conv7=(($16)&(255));
      var $17=$k;
      var $rem8=((($17)>>>(0)))%(8);
      var $arrayidx9=((114496+$rem8)|0);
      var $18=HEAP8[($arrayidx9)];
      var $conv10=(($18)&(255));
      var $and11=$conv7 & $conv10;
      var $tobool12=(($and11)|(0))!=0;
      if ($tobool12) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 11; break;
    case 8: 
      var $19=$mrb_addr;
      var $20=$k;
      var $21=$h;
      var $vals=(($21+28)|0);
      var $22=HEAP32[(($vals)>>2)];
      var $arrayidx14=(($22+((($20)*(12))&-1))|0);
      var $call=_mrb_equal($19, $arrayidx14, $value);
      var $tobool15=(($call)|(0))!=0;
      if ($tobool15) { label = 9; break; } else { label = 10; break; }
    case 9: 
      _mrb_true_value1067($agg_result);
      label = 14; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $23=$k;
      var $inc=((($23)+(1))|0);
      $k=$inc;
      label = 4; break;
    case 12: 
      label = 13; break;
    case 13: 
      _mrb_false_value1068($agg_result);
      label = 14; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_core($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_init_symtbl($0);
  var $1=$mrb_addr;
  _mrb_gc_arena_restore($1, 0);
  var $2=$mrb_addr;
  _mrb_init_class($2);
  var $3=$mrb_addr;
  _mrb_gc_arena_restore($3, 0);
  var $4=$mrb_addr;
  _mrb_init_object($4);
  var $5=$mrb_addr;
  _mrb_gc_arena_restore($5, 0);
  var $6=$mrb_addr;
  _mrb_init_kernel($6);
  var $7=$mrb_addr;
  _mrb_gc_arena_restore($7, 0);
  var $8=$mrb_addr;
  _mrb_init_comparable($8);
  var $9=$mrb_addr;
  _mrb_gc_arena_restore($9, 0);
  var $10=$mrb_addr;
  _mrb_init_enumerable($10);
  var $11=$mrb_addr;
  _mrb_gc_arena_restore($11, 0);
  var $12=$mrb_addr;
  _mrb_init_symbol($12);
  var $13=$mrb_addr;
  _mrb_gc_arena_restore($13, 0);
  var $14=$mrb_addr;
  _mrb_init_exception($14);
  var $15=$mrb_addr;
  _mrb_gc_arena_restore($15, 0);
  var $16=$mrb_addr;
  _mrb_init_proc($16);
  var $17=$mrb_addr;
  _mrb_gc_arena_restore($17, 0);
  var $18=$mrb_addr;
  _mrb_init_string($18);
  var $19=$mrb_addr;
  _mrb_gc_arena_restore($19, 0);
  var $20=$mrb_addr;
  _mrb_init_array($20);
  var $21=$mrb_addr;
  _mrb_gc_arena_restore($21, 0);
  var $22=$mrb_addr;
  _mrb_init_hash($22);
  var $23=$mrb_addr;
  _mrb_gc_arena_restore($23, 0);
  var $24=$mrb_addr;
  _mrb_init_numeric($24);
  var $25=$mrb_addr;
  _mrb_gc_arena_restore($25, 0);
  var $26=$mrb_addr;
  _mrb_init_range($26);
  var $27=$mrb_addr;
  _mrb_gc_arena_restore($27, 0);
  var $28=$mrb_addr;
  _mrb_init_gc($28);
  var $29=$mrb_addr;
  _mrb_gc_arena_restore($29, 0);
  var $30=$mrb_addr;
  _mrb_init_mrblib($30);
  var $31=$mrb_addr;
  _mrb_gc_arena_restore($31, 0);
  var $32=$mrb_addr;
  _mrb_init_mrbgems($32);
  var $33=$mrb_addr;
  _mrb_gc_arena_restore($33, 0);
  return;
}
function _mrb_final_core($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_final_mrbgems($0);
  var $1=$mrb_addr;
  _mrb_gc_arena_restore($1, 0);
  return;
}
function _mrb_class1141($mrb, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      $mrb_addr=$mrb;
      var $tt=(($v+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      if ((($0)|(0))==0) {
        label = 3; break;
      }
      else if ((($0)|(0))==2) {
        label = 6; break;
      }
      else if ((($0)|(0))==4) {
        label = 7; break;
      }
      else if ((($0)|(0))==3) {
        label = 8; break;
      }
      else if ((($0)|(0))==6) {
        label = 9; break;
      }
      else {
      label = 10; break;
      }
    case 3: 
      var $value=(($v)|0);
      var $i=$value;
      var $1=HEAP32[(($i)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$mrb_addr;
      var $false_class=(($2+84)|0);
      var $3=HEAP32[(($false_class)>>2)];
      $retval=$3;
      label = 11; break;
    case 5: 
      var $4=$mrb_addr;
      var $nil_class=(($4+88)|0);
      var $5=HEAP32[(($nil_class)>>2)];
      $retval=$5;
      label = 11; break;
    case 6: 
      var $6=$mrb_addr;
      var $true_class=(($6+80)|0);
      var $7=HEAP32[(($true_class)>>2)];
      $retval=$7;
      label = 11; break;
    case 7: 
      var $8=$mrb_addr;
      var $symbol_class=(($8+92)|0);
      var $9=HEAP32[(($symbol_class)>>2)];
      $retval=$9;
      label = 11; break;
    case 8: 
      var $10=$mrb_addr;
      var $fixnum_class=(($10+76)|0);
      var $11=HEAP32[(($fixnum_class)>>2)];
      $retval=$11;
      label = 11; break;
    case 9: 
      var $12=$mrb_addr;
      var $float_class=(($12+72)|0);
      var $13=HEAP32[(($float_class)>>2)];
      $retval=$13;
      label = 11; break;
    case 10: 
      var $value5=(($v)|0);
      var $p=$value5;
      var $14=HEAP32[(($p)>>2)];
      var $15=$14;
      var $c=(($15+4)|0);
      var $16=HEAP32[(($c)>>2)];
      $retval=$16;
      label = 11; break;
    case 11: 
      var $17=$retval;
      STACKTOP = __stackBase__;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_basic_to_s_p($mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $me;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $1=$mrb_addr;
      var $call=_mrb_class1141($1, $obj);
      var $2=$mrb_addr;
      var $call1=_mrb_intern2($2, ((113384)|0), 4);
      var $call2=_mrb_method_search($0, $call, $call1);
      $me=$call2;
      var $3=$me;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $4=$me;
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6 >>> 11;
      var $bf_clear=$7 & 2097151;
      var $and=$bf_clear & 128;
      var $cmp=(($and)|(0))!=0;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $8=$me;
      var $body=(($8+12)|0);
      var $func=$body;
      var $9=HEAP32[(($func)>>2)];
      var $cmp4=(($9)|(0))==(((400))|(0));
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=1;
      label = 7; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $10=$retval;
      STACKTOP = __stackBase__;
      return $10;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_inspect($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      $mrb_addr=$mrb;
      var $tt=(($obj+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)|(0))==8;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $1=$mrb_addr;
      var $call=_mrb_obj_basic_to_s_p($1, $obj);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$mrb_addr;
      var $value=(($obj)|0);
      var $p=$value;
      var $3=HEAP32[(($p)>>2)];
      var $4=$3;
      _mrb_obj_iv_inspect($agg_result, $2, $4);
      label = 6; break;
    case 5: 
      var $5=$mrb_addr;
      _mrb_any_to_s($agg_result, $5, $obj);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_singleton_class_clone($mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $klass;
      var $clone;
      var $agg_tmp=__stackBase__;
      var $agg_tmp12=(__stackBase__)+(12);
      var $agg_tmp13=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      var $value=(($obj)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $c=(($1+4)|0);
      var $2=HEAP32[(($c)>>2)];
      $klass=$2;
      var $3=$klass;
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $bf_clear=$5 & 255;
      var $cmp=(($bf_clear)|(0))!=12;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$klass;
      $retval=$6;
      label = 14; break;
    case 4: 
      var $7=$mrb_addr;
      var $8=$klass;
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $bf_clear1=$10 & 255;
      var $11=$mrb_addr;
      var $class_class=(($11+48)|0);
      var $12=HEAP32[(($class_class)>>2)];
      var $call=_mrb_obj_alloc($7, $bf_clear1, $12);
      var $13=$call;
      $clone=$13;
      var $tt=(($obj+8)|0);
      var $14=HEAP32[(($tt)>>2)];
      var $cmp2=(($14)|(0))==9;
      if ($cmp2) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $tt3=(($obj+8)|0);
      var $15=HEAP32[(($tt3)>>2)];
      var $cmp4=(($15)|(0))==12;
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $16=$clone;
      var $17=$clone;
      var $c6=(($17+4)|0);
      HEAP32[(($c6)>>2)]=$16;
      label = 8; break;
    case 7: 
      var $18=$mrb_addr;
      var $19=$klass;
      var $20=$19;
      _mrb_obj_value1142($agg_tmp, $20);
      var $call8=_mrb_singleton_class_clone($18, $agg_tmp);
      var $21=$clone;
      var $c9=(($21+4)|0);
      HEAP32[(($c9)>>2)]=$call8;
      label = 8; break;
    case 8: 
      var $22=$klass;
      var $super=(($22+20)|0);
      var $23=HEAP32[(($super)>>2)];
      var $24=$clone;
      var $super10=(($24+20)|0);
      HEAP32[(($super10)>>2)]=$23;
      var $25=$klass;
      var $iv=(($25+12)|0);
      var $26=HEAP32[(($iv)>>2)];
      var $tobool=(($26)|(0))!=0;
      if ($tobool) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $27=$mrb_addr;
      var $28=$clone;
      var $29=$28;
      _mrb_obj_value1142($agg_tmp12, $29);
      var $30=$klass;
      var $31=$30;
      _mrb_obj_value1142($agg_tmp13, $31);
      _mrb_iv_copy($27, $agg_tmp12, $agg_tmp13);
      var $32=$mrb_addr;
      var $33=$clone;
      var $34=$33;
      var $35=$mrb_addr;
      var $call14=_mrb_intern2($35, ((113224)|0), 12);
      _mrb_obj_iv_set($32, $34, $call14, $obj);
      label = 10; break;
    case 10: 
      var $36=$klass;
      var $mt=(($36+16)|0);
      var $37=HEAP32[(($mt)>>2)];
      var $tobool16=(($37)|(0))!=0;
      if ($tobool16) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $38=$mrb_addr;
      var $39=$klass;
      var $mt18=(($39+16)|0);
      var $40=HEAP32[(($mt18)>>2)];
      var $call19=_kh_copy_mt($38, $40);
      var $41=$clone;
      var $mt20=(($41+16)|0);
      HEAP32[(($mt20)>>2)]=$call19;
      label = 13; break;
    case 12: 
      var $42=$mrb_addr;
      var $call22=_kh_init_mt($42);
      var $43=$clone;
      var $mt23=(($43+16)|0);
      HEAP32[(($mt23)>>2)]=$call22;
      label = 13; break;
    case 13: 
      var $44=$clone;
      var $45=$44;
      var $46=HEAP32[(($45)>>2)];
      var $47=$46 & -256;
      var $48=$47 | 12;
      HEAP32[(($45)>>2)]=$48;
      var $49=$clone;
      $retval=$49;
      label = 14; break;
    case 14: 
      var $50=$retval;
      STACKTOP = __stackBase__;
      return $50;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value1142($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_clone($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $p;
      var $clone=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $tt=(($self+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)>>>(0)) <= 7;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mrb_addr;
      var $2=$mrb_addr;
      var $call=_mrb_class_get($2, ((108144)|0));
      _mrb_raisef($1, $call, ((104556)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($self)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($self)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($self)+(8))>>2)],tempInt));
      label = 4; break;
    case 4: 
      var $3=$mrb_addr;
      var $tt1=(($self+8)|0);
      var $4=HEAP32[(($tt1)>>2)];
      var $5=$mrb_addr;
      var $call2=_mrb_obj_class($5, $self);
      var $call3=_mrb_obj_alloc($3, $4, $call2);
      var $6=$call3;
      $p=$6;
      var $7=$mrb_addr;
      var $call4=_mrb_singleton_class_clone($7, $self);
      var $8=$p;
      var $c=(($8+4)|0);
      HEAP32[(($c)>>2)]=$call4;
      var $9=$p;
      var $10=$9;
      _mrb_obj_value1142($tmp, $10);
      var $11=$clone;
      var $12=$tmp;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      var $13=$mrb_addr;
      _init_copy($13, $clone, $self);
      var $14=$agg_result;
      var $15=$clone;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _init_copy($mrb, $dest, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $dest; $dest = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($dest)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dest)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($dest)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tmp=__stackBase__;
      $mrb_addr=$mrb;
      var $tt=(($obj+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      if ((($0)|(0))==8 | (($0)|(0))==9 | (($0)|(0))==10 | (($0)|(0))==12 | (($0)|(0))==15 | (($0)|(0))==21) {
        label = 3; break;
      }
      else {
      label = 4; break;
      }
    case 3: 
      var $1=$mrb_addr;
      _mrb_iv_copy($1, $dest, $obj);
      label = 5; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $2=$mrb_addr;
      _mrb_funcall($tmp, $2, $dest, ((102340)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($obj)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj)+(8))>>2)],tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_dup($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $p;
      var $dup=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $tt=(($obj+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)>>>(0)) <= 7;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mrb_addr;
      var $2=$mrb_addr;
      var $call=_mrb_class_get($2, ((108144)|0));
      _mrb_raisef($1, $call, ((101812)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($obj)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj)+(8))>>2)],tempInt));
      label = 4; break;
    case 4: 
      var $3=$mrb_addr;
      var $tt1=(($obj+8)|0);
      var $4=HEAP32[(($tt1)>>2)];
      var $5=$mrb_addr;
      var $call2=_mrb_obj_class($5, $obj);
      var $call3=_mrb_obj_alloc($3, $4, $call2);
      $p=$call3;
      var $6=$p;
      var $7=$6;
      _mrb_obj_value1142($tmp, $7);
      var $8=$dup;
      var $9=$tmp;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      var $10=$mrb_addr;
      _init_copy($10, $dup, $obj);
      var $11=$agg_result;
      var $12=$dup;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_extend_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $argv=__stackBase__;
  var $argc=(__stackBase__)+(4);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((99240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
  var $1=$mrb_addr;
  var $2=HEAP32[(($argc)>>2)];
  var $3=HEAP32[(($argv)>>2)];
  _mrb_obj_extend($agg_result, $1, $2, $3, $self);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_extend($agg_result, $mrb, $argc, $argv, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argc_addr;
      var $argv_addr;
      var $i;
      var $tmp=__stackBase__;
      var $tmp4=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      $argc_addr=$argc;
      $argv_addr=$argv;
      var $0=$argc_addr;
      var $cmp=(($0)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mrb_addr;
      var $2=$mrb_addr;
      var $call=_mrb_class_get($2, ((97064)|0));
      _mrb_raise($1, $call, ((96744)|0));
      label = 4; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $3=$i;
      var $4=$argc_addr;
      var $cmp1=(($3)|(0)) < (($4)|(0));
      if ($cmp1) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $5=$mrb_addr;
      var $6=$i;
      var $7=$argv_addr;
      var $arrayidx=(($7+((($6)*(12))&-1))|0);
      _mrb_check_type($5, $arrayidx, 10);
      label = 7; break;
    case 7: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $9=$argc_addr;
      var $dec=((($9)-(1))|0);
      $argc_addr=$dec;
      var $tobool=(($9)|(0))!=0;
      if ($tobool) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $10=$mrb_addr;
      var $11=$argc_addr;
      var $12=$argv_addr;
      var $arrayidx2=(($12+((($11)*(12))&-1))|0);
      _mrb_funcall($tmp, $10, $arrayidx2, ((96648)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($obj)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj)+(8))>>2)],tempInt));
      var $13=$mrb_addr;
      var $14=$argc_addr;
      var $15=$argv_addr;
      var $arrayidx3=(($15+((($14)*(12))&-1))|0);
      _mrb_funcall($tmp4, $13, $arrayidx3, ((96560)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($obj)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj)+(8))>>2)],tempInt));
      label = 9; break;
    case 11: 
      var $16=$agg_result;
      var $17=$obj;
      assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_hash($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $call=_mrb_obj_id($self);
  _mrb_fixnum_value1145($agg_result, $call);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_fixnum_value1145($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_init_copy($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $orig=__stackBase__;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((97080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$orig,tempInt));
      var $1=$mrb_addr;
      var $call1=_mrb_obj_equal($1, $self, $orig);
      var $tobool=(($call1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$agg_result;
      var $3=$self;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      label = 8; break;
    case 4: 
      var $tt=(($self+8)|0);
      var $4=HEAP32[(($tt)>>2)];
      var $tt2=(($orig+8)|0);
      var $5=HEAP32[(($tt2)>>2)];
      var $cmp=(($4)|(0))!=(($5)|(0));
      if ($cmp) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $6=$mrb_addr;
      var $call3=_mrb_obj_class($6, $self);
      var $7=$mrb_addr;
      var $call4=_mrb_obj_class($7, $orig);
      var $cmp5=(($call3)|(0))!=(($call4)|(0));
      if ($cmp5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $8=$mrb_addr;
      var $9=$mrb_addr;
      var $call7=_mrb_class_get($9, ((108144)|0));
      _mrb_raise($8, $call7, ((95888)|0));
      label = 7; break;
    case 7: 
      var $10=$agg_result;
      var $11=$self;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_instance_eval($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a=__stackBase__;
      var $b=(__stackBase__)+(12);
      var $cv=(__stackBase__)+(24);
      var $c;
      var $tmp=(__stackBase__)+(36);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((94848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$a,HEAP32[(((tempInt)+(4))>>2)]=$b,tempInt));
      var $cmp=(($call)|(0))==1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mrb_addr;
      var $2=$mrb_addr;
      var $call1=_mrb_class_get($2, ((94036)|0));
      _mrb_raise($1, $call1, ((113808)|0));
      label = 4; break;
    case 4: 
      var $tt=(($self+8)|0);
      var $3=HEAP32[(($tt)>>2)];
      if ((($3)|(0))==4 | (($3)|(0))==3 | (($3)|(0))==6) {
        label = 5; break;
      }
      else {
      label = 6; break;
      }
    case 5: 
      $c=0;
      label = 7; break;
    case 6: 
      var $4=$mrb_addr;
      _mrb_singleton_class($tmp, $4, $self);
      var $5=$cv;
      var $6=$tmp;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      var $value=(($cv)|0);
      var $p=$value;
      var $7=HEAP32[(($p)>>2)];
      var $8=$7;
      $c=$8;
      label = 7; break;
    case 7: 
      var $9=$mrb_addr;
      var $10=$c;
      _mrb_yield_internal($agg_result, $9, $b, 0, 0, $self, $10);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_is_instance_of($mrb, $obj, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $c_addr;
      $mrb_addr=$mrb;
      $c_addr=$c;
      var $0=$mrb_addr;
      var $call=_mrb_obj_class($0, $obj);
      var $1=$c_addr;
      var $cmp=(($call)|(0))==(($1)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=1;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $2=$retval;
      STACKTOP = __stackBase__;
      return $2;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_ivar_defined($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $mid=__stackBase__;
  var $defined_p;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((113208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$mid,tempInt));
  var $1=$mrb_addr;
  var $2=HEAP16[(($mid)>>1)];
  _check_iv_name($1, $2);
  var $3=$mrb_addr;
  var $value=(($self)|0);
  var $p=$value;
  var $4=HEAP32[(($p)>>2)];
  var $5=$4;
  var $6=HEAP16[(($mid)>>1)];
  var $call1=_mrb_obj_iv_defined($3, $5, $6);
  $defined_p=$call1;
  var $7=$defined_p;
  _mrb_bool_value1146($agg_result, $7);
  STACKTOP = __stackBase__;
  return;
}
function _check_iv_name($mrb, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $id_addr;
      var $s;
      var $len=__stackBase__;
      var $agg_tmp=(__stackBase__)+(4);
      $mrb_addr=$mrb;
      $id_addr=$id;
      var $0=$mrb_addr;
      var $1=$id_addr;
      var $call=_mrb_sym2name_len($0, $1, $len);
      $s=$call;
      var $2=HEAP32[(($len)>>2)];
      var $cmp=(($2)>>>(0)) < 2;
      if ($cmp) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $3=$s;
      var $arrayidx=(($3)|0);
      var $4=HEAP8[($arrayidx)];
      var $conv=(($4 << 24) >> 24);
      var $cmp1=(($conv)|(0))==64;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$s;
      var $arrayidx3=(($5+1)|0);
      var $6=HEAP8[($arrayidx3)];
      var $conv4=(($6 << 24) >> 24);
      var $cmp5=(($conv4)|(0))!=64;
      if ($cmp5) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $7=$mrb_addr;
      var $8=$id_addr;
      var $9=$mrb_addr;
      var $10=$id_addr;
      _mrb_sym2str($agg_tmp, $9, $10);
      _mrb_name_error($7, $8, ((97192)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value1146($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $boolean_addr;
      var $v=__stackBase__;
      $boolean_addr=$boolean;
      label = 3; break;
    case 3: 
      var $0=$boolean_addr;
      var $conv=(($0)&(255));
      var $tobool=(($conv)|(0))!=0;
      var $cond=$tobool ? 2 : 0;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$cond;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_ivar_get($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $id=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((113208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$id,tempInt));
  var $1=$mrb_addr;
  var $2=HEAP16[(($id)>>1)];
  _check_iv_name($1, $2);
  var $3=$mrb_addr;
  var $4=HEAP16[(($id)>>1)];
  _mrb_iv_get($agg_result, $3, $self, $4);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_ivar_set($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $id=__stackBase__;
  var $val=(__stackBase__)+(4);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((112372)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$id,HEAP32[(((tempInt)+(4))>>2)]=$val,tempInt));
  var $1=$mrb_addr;
  var $2=HEAP16[(($id)>>1)];
  _check_iv_name($1, $2);
  var $3=$mrb_addr;
  var $4=HEAP16[(($id)>>1)];
  _mrb_iv_set($3, $self, $4, $val);
  var $5=$agg_result;
  var $6=$val;
  assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_is_kind_of_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $arg=__stackBase__;
  var $kind_of_p;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((97080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$arg,tempInt));
  var $1=$mrb_addr;
  var $value=(($arg)|0);
  var $p=$value;
  var $2=HEAP32[(($p)>>2)];
  var $3=$2;
  var $call1=_mrb_obj_is_kind_of($1, $self, $3);
  var $conv=(($call1) & 255);
  $kind_of_p=$conv;
  var $4=$kind_of_p;
  _mrb_bool_value1146($agg_result, $4);
  STACKTOP = __stackBase__;
  return;
}
function _class_instance_method_list($agg_result, $mrb, $recur, $klass, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $recur_addr;
      var $klass_addr;
      var $obj_addr;
      var $ary=__stackBase__;
      var $oldklass;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      $recur_addr=$recur;
      $klass_addr=$klass;
      $obj_addr=$obj;
      var $0=$mrb_addr;
      _mrb_ary_new($tmp, $0);
      var $1=$ary;
      var $2=$tmp;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      $oldklass=0;
      label = 3; break;
    case 3: 
      var $3=$klass_addr;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 4; break; } else { var $6 = 0;label = 5; break; }
    case 4: 
      var $4=$klass_addr;
      var $5=$oldklass;
      var $cmp=(($4)|(0))!=(($5)|(0));
      var $6 = $cmp;label = 5; break;
    case 5: 
      var $6;
      if ($6) { label = 6; break; } else { label = 13; break; }
    case 6: 
      var $7=$mrb_addr;
      var $8=$klass_addr;
      _method_entry_loop($7, $8, $ary);
      var $9=$klass_addr;
      var $10=$9;
      var $11=HEAP32[(($10)>>2)];
      var $bf_clear=$11 & 255;
      var $cmp1=(($bf_clear)|(0))==11;
      if ($cmp1) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $12=$klass_addr;
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $bf_clear2=$14 & 255;
      var $cmp3=(($bf_clear2)|(0))==12;
      if ($cmp3) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 12; break;
    case 9: 
      var $15=$recur_addr;
      var $tobool4=(($15 << 24) >> 24)!=0;
      if ($tobool4) { label = 11; break; } else { label = 10; break; }
    case 10: 
      label = 13; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $16=$klass_addr;
      $oldklass=$16;
      var $17=$klass_addr;
      var $super=(($17+20)|0);
      var $18=HEAP32[(($super)>>2)];
      $klass_addr=$18;
      label = 3; break;
    case 13: 
      var $19=$agg_result;
      var $20=$ary;
      assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _method_entry_loop($mrb, $klass, $ary) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $klass_addr;
      var $i;
      var $h;
      var $agg_tmp=__stackBase__;
      $mrb_addr=$mrb;
      $klass_addr=$klass;
      var $0=$klass_addr;
      var $mt=(($0+16)|0);
      var $1=HEAP32[(($mt)>>2)];
      $h=$1;
      var $2=$h;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 11; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $3=$i;
      var $4=$h;
      var $n_buckets=(($4)|0);
      var $5=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($3)>>>(0)) < (($5)>>>(0));
      if ($cmp) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $6=$i;
      var $div=Math.floor(((($6)>>>(0)))/(8));
      var $7=$h;
      var $e_flags=(($7+16)|0);
      var $8=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($8+$div)|0);
      var $9=HEAP8[($arrayidx)];
      var $conv=(($9)&(255));
      var $10=$i;
      var $rem=((($10)>>>(0)))%(8);
      var $arrayidx1=((114488+$rem)|0);
      var $11=HEAP8[($arrayidx1)];
      var $conv2=(($11)&(255));
      var $and=$conv & $conv2;
      var $tobool3=(($and)|(0))!=0;
      if ($tobool3) { label = 9; break; } else { label = 7; break; }
    case 7: 
      var $12=$i;
      var $div4=Math.floor(((($12)>>>(0)))/(8));
      var $13=$h;
      var $d_flags=(($13+20)|0);
      var $14=HEAP32[(($d_flags)>>2)];
      var $arrayidx5=(($14+$div4)|0);
      var $15=HEAP8[($arrayidx5)];
      var $conv6=(($15)&(255));
      var $16=$i;
      var $rem7=((($16)>>>(0)))%(8);
      var $arrayidx8=((114488+$rem7)|0);
      var $17=HEAP8[($arrayidx8)];
      var $conv9=(($17)&(255));
      var $and10=$conv6 & $conv9;
      var $tobool11=(($and10)|(0))!=0;
      if ($tobool11) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $18=$mrb_addr;
      var $19=$i;
      var $20=$h;
      var $keys=(($20+24)|0);
      var $21=HEAP32[(($keys)>>2)];
      var $arrayidx13=(($21+($19<<1))|0);
      var $22=HEAP16[(($arrayidx13)>>1)];
      _mrb_symbol_value1155($agg_tmp, $22);
      _mrb_ary_push($18, $ary, $agg_tmp);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $23=$i;
      var $inc=((($23)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_singleton_methods($agg_result, $mrb, $recur, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $recur_addr;
      var $ary=__stackBase__;
      var $klass;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      $recur_addr=$recur;
      var $0=$mrb_addr;
      var $call=_mrb_class1141($0, $obj);
      $klass=$call;
      var $1=$mrb_addr;
      _mrb_ary_new($tmp, $1);
      var $2=$ary;
      var $3=$tmp;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      var $4=$klass;
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $5=$klass;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $bf_clear=$7 & 255;
      var $cmp=(($bf_clear)|(0))==12;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $8=$mrb_addr;
      var $9=$klass;
      _method_entry_loop($8, $9, $ary);
      var $10=$klass;
      var $super=(($10+20)|0);
      var $11=HEAP32[(($super)>>2)];
      $klass=$11;
      label = 5; break;
    case 5: 
      var $12=$recur_addr;
      var $tobool1=(($12 << 24) >> 24)!=0;
      if ($tobool1) { label = 6; break; } else { label = 14; break; }
    case 6: 
      label = 7; break;
    case 7: 
      var $13=$klass;
      var $tobool3=(($13)|(0))!=0;
      if ($tobool3) { label = 8; break; } else { var $21 = 0;label = 11; break; }
    case 8: 
      var $14=$klass;
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $bf_clear4=$16 & 255;
      var $cmp5=(($bf_clear4)|(0))==12;
      if ($cmp5) { var $20 = 1;label = 10; break; } else { label = 9; break; }
    case 9: 
      var $17=$klass;
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $bf_clear6=$19 & 255;
      var $cmp7=(($bf_clear6)|(0))==11;
      var $20 = $cmp7;label = 10; break;
    case 10: 
      var $20;
      var $21 = $20;label = 11; break;
    case 11: 
      var $21;
      if ($21) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $22=$mrb_addr;
      var $23=$klass;
      _method_entry_loop($22, $23, $ary);
      var $24=$klass;
      var $super8=(($24+20)|0);
      var $25=HEAP32[(($super8)>>2)];
      $klass=$25;
      label = 7; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $26=$agg_result;
      var $27=$ary;
      assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_methods($agg_result, $mrb, $recur, $obj, $flag) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $recur_addr;
      var $flag_addr;
      $mrb_addr=$mrb;
      $recur_addr=$recur;
      $flag_addr=$flag;
      var $0=$recur_addr;
      var $tobool=(($0 << 24) >> 24)!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mrb_addr;
      var $2=$recur_addr;
      var $3=$mrb_addr;
      var $call=_mrb_class1141($3, $obj);
      _class_instance_method_list($agg_result, $1, $2, $call, 0);
      label = 5; break;
    case 4: 
      var $4=$mrb_addr;
      var $5=$recur_addr;
      _mrb_obj_singleton_methods($agg_result, $4, $5, $obj);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_methods_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $recur=__stackBase__;
  $mrb_addr=$mrb;
  HEAP8[($recur)]=1;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((111808)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$recur,tempInt));
  var $1=$mrb_addr;
  var $2=HEAP8[($recur)];
  _mrb_obj_methods($agg_result, $1, $2, $self, 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_false($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  _mrb_false_value1149($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_false_value1149($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_private_methods($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $recur=__stackBase__;
  $mrb_addr=$mrb;
  HEAP8[($recur)]=1;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((111808)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$recur,tempInt));
  var $1=$mrb_addr;
  var $2=HEAP8[($recur)];
  _mrb_obj_methods($agg_result, $1, $2, $self, 2);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_protected_methods($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $recur=__stackBase__;
  $mrb_addr=$mrb;
  HEAP8[($recur)]=1;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((111808)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$recur,tempInt));
  var $1=$mrb_addr;
  var $2=HEAP8[($recur)];
  _mrb_obj_methods($agg_result, $1, $2, $self, 4);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_public_methods($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $recur=__stackBase__;
  $mrb_addr=$mrb;
  HEAP8[($recur)]=1;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((111808)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$recur,tempInt));
  var $1=$mrb_addr;
  var $2=HEAP8[($recur)];
  _mrb_obj_methods($agg_result, $1, $2, $self, 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_f_raise($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 84)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a=__stackBase__;
      var $exc=(__stackBase__)+(24);
      var $argc;
      var $tmp=(__stackBase__)+(36);
      var $tmp10=(__stackBase__)+(48);
      var $tmp11=(__stackBase__)+(60);
      var $agg_tmp=(__stackBase__)+(72);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $arrayidx=(($a)|0);
      var $arrayidx1=(($a+12)|0);
      var $call=_mrb_get_args($0, ((111224)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$arrayidx,HEAP32[(((tempInt)+(4))>>2)]=$arrayidx1,tempInt));
      $argc=$call;
      var $1=$argc;
      if ((($1)|(0))==0) {
        label = 3; break;
      }
      else if ((($1)|(0))==1) {
        label = 4; break;
      }
      else {
      label = 8; break;
      }
    case 3: 
      var $2=$mrb_addr;
      var $3=$mrb_addr;
      var $call2=_mrb_class_get($3, ((110712)|0));
      _mrb_raise($2, $call2, ((110280)|0));
      label = 9; break;
    case 4: 
      var $arrayidx4=(($a+12)|0);
      var $4=$mrb_addr;
      var $arrayidx5=(($a)|0);
      _mrb_check_string_type($tmp, $4, $arrayidx5);
      var $5=$arrayidx4;
      var $6=$tmp;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      var $arrayidx6=(($a+12)|0);
      var $tt=(($arrayidx6+8)|0);
      var $7=HEAP32[(($tt)>>2)];
      var $cmp=(($7)|(0))==0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $arrayidx7=(($a+12)|0);
      var $value=(($arrayidx7)|0);
      var $i=$value;
      var $8=HEAP32[(($i)>>2)];
      var $tobool=(($8)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $argc=2;
      var $arrayidx8=(($a)|0);
      var $9=$mrb_addr;
      var $call9=_mrb_class_get($9, ((110712)|0));
      var $10=$call9;
      _mrb_obj_value1142($tmp10, $10);
      var $11=$arrayidx8;
      var $12=$tmp10;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $13=$mrb_addr;
      var $14=$argc;
      var $arraydecay=(($a)|0);
      _mrb_make_exception($tmp11, $13, $14, $arraydecay);
      var $15=$exc;
      var $16=$tmp11;
      assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
      var $17=$mrb_addr;
      var $value12=(($exc)|0);
      var $p=$value12;
      var $18=HEAP32[(($p)>>2)];
      var $19=$18;
      var $20=$mrb_addr;
      var $call13=_mrb_intern2($20, ((109884)|0), 6);
      var $21=$mrb_addr;
      var $c=(($21+8)|0);
      var $22=HEAP32[(($c)>>2)];
      var $ci=(($22+16)|0);
      var $23=HEAP32[(($ci)>>2)];
      var $pc=(($23+20)|0);
      var $24=HEAP32[(($pc)>>2)];
      var $25=$24;
      _mrb_voidp_value1150($agg_tmp, $25);
      _mrb_obj_iv_set($17, $19, $call13, $agg_tmp);
      var $26=$mrb_addr;
      _mrb_exc_raise($26, $exc);
      label = 9; break;
    case 9: 
      _mrb_nil_value1151($agg_result);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_voidp_value1150($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      $p_addr=$p;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=7;
      var $0=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1151($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_remove_instance_variable($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $sym=__stackBase__;
      var $val=(__stackBase__)+(4);
      var $tmp=(__stackBase__)+(16);
      var $agg_tmp=(__stackBase__)+(28);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((113208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$sym,tempInt));
      var $1=$mrb_addr;
      var $2=HEAP16[(($sym)>>1)];
      _check_iv_name($1, $2);
      var $3=$mrb_addr;
      var $4=HEAP16[(($sym)>>1)];
      _mrb_iv_remove($tmp, $3, $self, $4);
      var $5=$val;
      var $6=$tmp;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      var $tt=(($val+8)|0);
      var $7=HEAP32[(($tt)>>2)];
      var $cmp=(($7)|(0))==5;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$mrb_addr;
      var $9=HEAP16[(($sym)>>1)];
      var $10=$mrb_addr;
      var $11=HEAP16[(($sym)>>1)];
      _mrb_sym2str($agg_tmp, $10, $11);
      _mrb_name_error($8, $9, ((109436)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 4; break;
    case 4: 
      var $12=$agg_result;
      var $13=$val;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _obj_respond_to($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 92)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argv=__stackBase__;
      var $argc=(__stackBase__)+(4);
      var $mid=(__stackBase__)+(8);
      var $priv=(__stackBase__)+(20);
      var $id;
      var $rtm_id;
      var $respond_to_p;
      var $tmp=(__stackBase__)+(32);
      var $tmp6=(__stackBase__)+(44);
      var $tmp10=(__stackBase__)+(56);
      var $tmp15=(__stackBase__)+(68);
      var $tmp19=(__stackBase__)+(80);
      $mrb_addr=$mrb;
      $respond_to_p=1;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((99240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      var $1=HEAP32[(($argv)>>2)];
      var $arrayidx=(($1)|0);
      var $2=$mid;
      var $3=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      var $4=HEAP32[(($argc)>>2)];
      var $cmp=(($4)|(0)) > 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=HEAP32[(($argv)>>2)];
      var $arrayidx1=(($5+12)|0);
      var $6=$priv;
      var $7=$arrayidx1;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      label = 5; break;
    case 4: 
      _mrb_nil_value1151($tmp);
      var $8=$priv;
      var $9=$tmp;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 5; break;
    case 5: 
      var $tt=(($mid+8)|0);
      var $10=HEAP32[(($tt)>>2)];
      var $cmp2=(($10)|(0))==4;
      if ($cmp2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $value=(($mid)|0);
      var $sym=$value;
      var $11=HEAP16[(($sym)>>1)];
      $id=$11;
      label = 17; break;
    case 7: 
      var $tt7=(($mid+8)|0);
      var $12=HEAP32[(($tt7)>>2)];
      var $cmp8=(($12)|(0))==16;
      if ($cmp8) { label = 12; break; } else { label = 8; break; }
    case 8: 
      var $13=$mrb_addr;
      _mrb_check_string_type($tmp10, $13, $mid);
      var $14=$tmp6;
      var $15=$tmp10;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      var $tt11=(($tmp6+8)|0);
      var $16=HEAP32[(($tt11)>>2)];
      var $cmp12=(($16)|(0))==0;
      if ($cmp12) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $value13=(($tmp6)|0);
      var $i=$value13;
      var $17=HEAP32[(($i)>>2)];
      var $tobool=(($17)|(0))!=0;
      if ($tobool) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $18=$mrb_addr;
      _mrb_inspect($tmp15, $18, $mid);
      var $19=$tmp6;
      var $20=$tmp15;
      assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
      var $21=$mrb_addr;
      var $22=$mrb_addr;
      var $call16=_mrb_class_get($22, ((108144)|0));
      _mrb_raisef($21, $call16, ((108956)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($tmp6)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($tmp6)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($tmp6)+(8))>>2)],tempInt));
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $23=$mrb_addr;
      _mrb_check_intern_str($tmp19, $23, $mid);
      var $24=$tmp6;
      var $25=$tmp19;
      assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
      var $tt20=(($tmp6+8)|0);
      var $26=HEAP32[(($tt20)>>2)];
      var $cmp21=(($26)|(0))==0;
      if ($cmp21) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $value23=(($tmp6)|0);
      var $i24=$value23;
      var $27=HEAP32[(($i24)>>2)];
      var $tobool25=(($27)|(0))!=0;
      if ($tobool25) { label = 15; break; } else { label = 14; break; }
    case 14: 
      $respond_to_p=0;
      label = 16; break;
    case 15: 
      var $value28=(($tmp6)|0);
      var $sym29=$value28;
      var $28=HEAP16[(($sym29)>>1)];
      $id=$28;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $29=$respond_to_p;
      var $tobool32=(($29 << 24) >> 24)!=0;
      if ($tobool32) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $30=$mrb_addr;
      var $31=$id;
      var $tt34=(($priv+8)|0);
      var $32=HEAP32[(($tt34)>>2)];
      var $cmp35=(($32)|(0))!=0;
      var $lnot=$cmp35 ^ 1;
      var $lnot_ext=(($lnot)&(1));
      var $call36=_basic_obj_respond_to($30, $self, $31, $lnot_ext);
      var $conv=(($call36) & 255);
      $respond_to_p=$conv;
      label = 19; break;
    case 19: 
      var $33=$respond_to_p;
      var $tobool38=(($33 << 24) >> 24)!=0;
      if ($tobool38) { label = 23; break; } else { label = 20; break; }
    case 20: 
      var $34=$mrb_addr;
      var $call40=_mrb_intern2($34, ((108424)|0), 19);
      $rtm_id=$call40;
      var $35=$mrb_addr;
      var $36=$rtm_id;
      var $tt41=(($priv+8)|0);
      var $37=HEAP32[(($tt41)>>2)];
      var $cmp42=(($37)|(0))!=0;
      var $lnot44=$cmp42 ^ 1;
      var $lnot_ext45=(($lnot44)&(1));
      var $call46=_basic_obj_respond_to($35, $self, $36, $lnot_ext45);
      var $tobool47=(($call46)|(0))!=0;
      if ($tobool47) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $38=$mrb_addr;
      var $39=$rtm_id;
      var $40=HEAP32[(($argc)>>2)];
      var $41=HEAP32[(($argv)>>2)];
      _mrb_funcall_argv($agg_result, $38, $self, $39, $40, $41);
      label = 24; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $42=$respond_to_p;
      _mrb_bool_value1146($agg_result, $42);
      label = 24; break;
    case 24: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _basic_obj_respond_to($mrb, $obj, $id, $pub) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $id_addr;
  var $pub_addr;
  $mrb_addr=$mrb;
  $id_addr=$id;
  $pub_addr=$pub;
  var $0=$mrb_addr;
  var $1=$id_addr;
  var $call=_mrb_respond_to($0, $obj, $1);
  STACKTOP = __stackBase__;
  return $call;
}
function _mrb_obj_singleton_methods_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $recur=__stackBase__;
  $mrb_addr=$mrb;
  HEAP8[($recur)]=1;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((111808)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$recur,tempInt));
  var $1=$mrb_addr;
  var $2=HEAP8[($recur)];
  _mrb_obj_singleton_methods($agg_result, $1, $2, $self);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_init_kernel($mrb) {
  var label = 0;
  var $mrb_addr;
  var $krn;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_define_module($0, ((108108)|0));
  var $1=$mrb_addr;
  var $kernel_module=(($1+96)|0);
  HEAP32[(($kernel_module)>>2)]=$call;
  $krn=$call;
  var $2=$mrb_addr;
  var $3=$krn;
  _mrb_define_class_method($2, $3, ((107580)|0), 128, 0);
  var $4=$mrb_addr;
  var $5=$krn;
  _mrb_define_class_method($4, $5, ((107288)|0), 18, 0);
  var $6=$mrb_addr;
  var $7=$krn;
  _mrb_define_class_method($6, $7, ((106924)|0), 128, 0);
  var $8=$mrb_addr;
  var $9=$krn;
  _mrb_define_class_method($8, $9, ((106452)|0), 64, 4096);
  var $10=$mrb_addr;
  var $11=$krn;
  _mrb_define_method($10, $11, ((106060)|0), 574, 0);
  var $12=$mrb_addr;
  var $13=$krn;
  _mrb_define_method($12, $13, ((105736)|0), 194, 262144);
  var $14=$mrb_addr;
  var $15=$krn;
  _mrb_define_method($14, $15, ((105448)|0), 116, 262144);
  var $16=$mrb_addr;
  var $17=$krn;
  _mrb_define_method($16, $17, ((105124)|0), 630, 262144);
  var $18=$mrb_addr;
  var $19=$krn;
  _mrb_define_method($18, $19, ((104828)|0), 566, 0);
  var $20=$mrb_addr;
  var $21=$krn;
  _mrb_define_method($20, $21, ((104524)|0), 554, 4096);
  var $22=$mrb_addr;
  var $23=$krn;
  _mrb_define_method($22, $23, ((107580)|0), 128, 0);
  var $24=$mrb_addr;
  var $25=$krn;
  _mrb_define_method($24, $25, ((104000)|0), 602, 0);
  var $26=$mrb_addr;
  var $27=$krn;
  _mrb_define_method($26, $27, ((103756)|0), 60, 0);
  var $28=$mrb_addr;
  var $29=$krn;
  _mrb_define_method($28, $29, ((103544)|0), 460, 0);
  var $30=$mrb_addr;
  var $31=$krn;
  _mrb_define_method($30, $31, ((103332)|0), 194, 262144);
  var $32=$mrb_addr;
  var $33=$krn;
  _mrb_define_method($32, $33, ((103128)|0), 194, 262144);
  var $34=$mrb_addr;
  var $35=$krn;
  _mrb_define_method($34, $35, ((102844)|0), 480, 4096);
  var $36=$mrb_addr;
  var $37=$krn;
  _mrb_define_method($36, $37, ((107288)|0), 18, 0);
  var $38=$mrb_addr;
  var $39=$krn;
  _mrb_define_method($38, $39, ((102668)|0), 178, 0);
  var $40=$mrb_addr;
  var $41=$krn;
  _mrb_define_method($40, $41, ((102340)|0), 684, 262144);
  var $42=$mrb_addr;
  var $43=$krn;
  _mrb_define_method($42, $43, ((102032)|0), 536, 0);
  var $44=$mrb_addr;
  var $45=$krn;
  _mrb_define_method($44, $45, ((101780)|0), 468, 4096);
  var $46=$mrb_addr;
  var $47=$krn;
  _mrb_define_method($46, $47, ((101328)|0), 298, 262144);
  var $48=$mrb_addr;
  var $49=$krn;
  _mrb_define_method($48, $49, ((101012)|0), 372, 262144);
  var $50=$mrb_addr;
  var $51=$krn;
  _mrb_define_method($50, $51, ((100748)|0), 84, 262144);
  var $52=$mrb_addr;
  var $53=$krn;
  _mrb_define_method($52, $53, ((100488)|0), 236, 524288);
  var $54=$mrb_addr;
  var $55=$krn;
  _mrb_define_method($54, $55, ((100288)|0), 502, 0);
  var $56=$mrb_addr;
  var $57=$krn;
  _mrb_define_method($56, $57, ((100136)|0), 670, 262144);
  var $58=$mrb_addr;
  var $59=$krn;
  _mrb_define_method($58, $59, ((106924)|0), 128, 0);
  var $60=$mrb_addr;
  var $61=$krn;
  _mrb_define_method($60, $61, ((99924)|0), 670, 262144);
  var $62=$mrb_addr;
  var $63=$krn;
  _mrb_define_method($62, $63, ((99740)|0), 306, 8192);
  var $64=$mrb_addr;
  var $65=$krn;
  _mrb_define_method($64, $65, ((99488)|0), 472, 0);
  var $66=$mrb_addr;
  var $67=$krn;
  _mrb_define_method($66, $67, ((99212)|0), 566, 0);
  var $68=$mrb_addr;
  var $69=$krn;
  _mrb_define_method($68, $69, ((98724)|0), 696, 8192);
  var $70=$mrb_addr;
  var $71=$krn;
  _mrb_define_method($70, $71, ((98476)|0), 618, 8192);
  var $72=$mrb_addr;
  var $73=$krn;
  _mrb_define_method($72, $73, ((98212)|0), 672, 8192);
  var $74=$mrb_addr;
  var $75=$krn;
  _mrb_define_method($74, $75, ((106452)|0), 64, 4096);
  var $76=$mrb_addr;
  var $77=$krn;
  _mrb_define_method($76, $77, ((97964)|0), 532, 262144);
  var $78=$mrb_addr;
  var $79=$krn;
  _mrb_define_method($78, $79, ((97780)|0), 694, 4096);
  var $80=$mrb_addr;
  var $81=$krn;
  _mrb_define_method($80, $81, ((97564)|0), 554, 4096);
  var $82=$mrb_addr;
  var $83=$krn;
  _mrb_define_method($82, $83, ((97416)|0), 210, 8192);
  var $84=$mrb_addr;
  var $85=$krn;
  _mrb_define_method($84, $85, ((113384)|0), 400, 0);
  var $86=$mrb_addr;
  var $87=$mrb_addr;
  var $object_class=(($87+44)|0);
  var $88=HEAP32[(($object_class)>>2)];
  var $89=$mrb_addr;
  var $kernel_module1=(($89+96)|0);
  var $90=HEAP32[(($kernel_module1)>>2)];
  _mrb_include_module($86, $88, $90);
  var $91=$mrb_addr;
  var $92=$mrb_addr;
  var $module_class=(($92+52)|0);
  var $93=HEAP32[(($module_class)>>2)];
  var $94=$mrb_addr;
  var $call2=_mrb_intern1154($94, ((103544)|0));
  var $95=$mrb_addr;
  var $call3=_mrb_intern1154($95, ((103756)|0));
  _mrb_alias_method($91, $93, $call2, $call3);
  return;
}
function _mrb_f_block_given_p_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ci;
      var $bp;
      var $given_p;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $c=(($0+8)|0);
      var $1=HEAP32[(($c)>>2)];
      var $ci1=(($1+16)|0);
      var $2=HEAP32[(($ci1)>>2)];
      $ci=$2;
      var $3=$mrb_addr;
      var $c2=(($3+8)|0);
      var $4=HEAP32[(($c2)>>2)];
      var $stbase=(($4+8)|0);
      var $5=HEAP32[(($stbase)>>2)];
      var $6=$ci;
      var $stackidx=(($6+8)|0);
      var $7=HEAP32[(($stackidx)>>2)];
      var $add_ptr=(($5+((($7)*(12))&-1))|0);
      var $add_ptr3=(($add_ptr+12)|0);
      $bp=$add_ptr3;
      var $8=$ci;
      var $incdec_ptr=((($8)-(44))|0);
      $ci=$incdec_ptr;
      var $9=$ci;
      var $10=$mrb_addr;
      var $c4=(($10+8)|0);
      var $11=HEAP32[(($c4)>>2)];
      var $cibase=(($11+20)|0);
      var $12=HEAP32[(($cibase)>>2)];
      var $cmp=(($9)>>>(0)) <= (($12)>>>(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $given_p=0;
      label = 17; break;
    case 4: 
      var $13=$ci;
      var $proc=(($13+4)|0);
      var $14=HEAP32[(($proc)>>2)];
      var $env=(($14+20)|0);
      var $15=HEAP32[(($env)>>2)];
      var $tobool=(($15)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 11; break; }
    case 5: 
      var $16=$ci;
      var $proc5=(($16+4)|0);
      var $17=HEAP32[(($proc5)>>2)];
      var $env6=(($17+20)|0);
      var $18=HEAP32[(($env6)>>2)];
      var $stack=(($18+12)|0);
      var $19=HEAP32[(($stack)>>2)];
      var $tobool7=(($19)|(0))!=0;
      if ($tobool7) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $20=$ci;
      var $proc9=(($20+4)|0);
      var $21=HEAP32[(($proc9)>>2)];
      var $env10=(($21+20)|0);
      var $22=HEAP32[(($env10)>>2)];
      var $stack11=(($22+12)|0);
      var $23=HEAP32[(($stack11)>>2)];
      var $24=$mrb_addr;
      var $c12=(($24+8)|0);
      var $25=HEAP32[(($c12)>>2)];
      var $stbase13=(($25+8)|0);
      var $26=HEAP32[(($stbase13)>>2)];
      var $cmp14=(($23)|(0))==(($26)|(0));
      if ($cmp14) { var $38 = 1;label = 10; break; } else { label = 7; break; }
    case 7: 
      var $27=$ci;
      var $proc15=(($27+4)|0);
      var $28=HEAP32[(($proc15)>>2)];
      var $env16=(($28+20)|0);
      var $29=HEAP32[(($env16)>>2)];
      var $stack17=(($29+12)|0);
      var $30=HEAP32[(($stack17)>>2)];
      var $arrayidx=(($30+12)|0);
      var $tt=(($arrayidx+8)|0);
      var $31=HEAP32[(($tt)>>2)];
      var $cmp18=(($31)|(0))==0;
      if ($cmp18) { label = 8; break; } else { var $37 = 0;label = 9; break; }
    case 8: 
      var $32=$ci;
      var $proc19=(($32+4)|0);
      var $33=HEAP32[(($proc19)>>2)];
      var $env20=(($33+20)|0);
      var $34=HEAP32[(($env20)>>2)];
      var $stack21=(($34+12)|0);
      var $35=HEAP32[(($stack21)>>2)];
      var $arrayidx22=(($35+12)|0);
      var $value=(($arrayidx22)|0);
      var $i=$value;
      var $36=HEAP32[(($i)>>2)];
      var $tobool23=(($36)|(0))!=0;
      var $lnot=$tobool23 ^ 1;
      var $37 = $lnot;label = 9; break;
    case 9: 
      var $37;
      var $38 = $37;label = 10; break;
    case 10: 
      var $38;
      var $lnot24=$38 ^ 1;
      var $lnot_ext=(($lnot24)&(1));
      var $conv=(($lnot_ext) & 255);
      $given_p=$conv;
      label = 16; break;
    case 11: 
      var $39=$ci;
      var $argc=(($39+16)|0);
      var $40=HEAP32[(($argc)>>2)];
      var $cmp26=(($40)|(0)) > 0;
      if ($cmp26) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $41=$ci;
      var $argc29=(($41+16)|0);
      var $42=HEAP32[(($argc29)>>2)];
      var $43=$bp;
      var $add_ptr30=(($43+((($42)*(12))&-1))|0);
      $bp=$add_ptr30;
      label = 13; break;
    case 13: 
      var $44=$bp;
      var $tt31=(($44+8)|0);
      var $45=HEAP32[(($tt31)>>2)];
      var $cmp32=(($45)|(0))==0;
      if ($cmp32) { label = 14; break; } else { var $48 = 0;label = 15; break; }
    case 14: 
      var $46=$bp;
      var $value35=(($46)|0);
      var $i36=$value35;
      var $47=HEAP32[(($i36)>>2)];
      var $tobool37=(($47)|(0))!=0;
      var $lnot38=$tobool37 ^ 1;
      var $48 = $lnot38;label = 15; break;
    case 15: 
      var $48;
      var $lnot41=$48 ^ 1;
      var $lnot_ext42=(($lnot41)&(1));
      var $conv43=(($lnot_ext42) & 255);
      $given_p=$conv43;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $49=$given_p;
      _mrb_bool_value1146($agg_result, $49);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_equal_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $arg=__stackBase__;
  var $eql_p;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((97080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$arg,tempInt));
  var $1=$mrb_addr;
  var $call1=_mrb_obj_equal($1, $self, $arg);
  var $conv=(($call1) & 255);
  $eql_p=$conv;
  var $2=$eql_p;
  _mrb_bool_value1146($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_not_equal_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $arg=__stackBase__;
  var $eql_p;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((97080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$arg,tempInt));
  var $1=$mrb_addr;
  var $call1=_mrb_equal($1, $self, $arg);
  var $conv=(($call1) & 255);
  $eql_p=$conv;
  var $2=$eql_p;
  var $tobool=(($2 << 24) >> 24)!=0;
  var $lnot=$tobool ^ 1;
  var $lnot_ext=(($lnot)&(1));
  var $conv2=(($lnot_ext) & 255);
  _mrb_bool_value1146($agg_result, $conv2);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_equal_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $arg=__stackBase__;
  var $equal_p;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((97080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$arg,tempInt));
  var $1=$mrb_addr;
  var $call1=_mrb_equal($1, $self, $arg);
  var $conv=(($call1) & 255);
  $equal_p=$conv;
  var $2=$equal_p;
  _mrb_bool_value1146($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_id_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $call=_mrb_obj_id($self);
  _mrb_fixnum_value1145($agg_result, $call);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_f_send($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $name=__stackBase__;
  var $block=(__stackBase__)+(4);
  var $argv=(__stackBase__)+(16);
  var $argc=(__stackBase__)+(20);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((97312)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$name,HEAP32[(((tempInt)+(4))>>2)]=$argv,HEAP32[(((tempInt)+(8))>>2)]=$argc,HEAP32[(((tempInt)+(12))>>2)]=$block,tempInt));
  var $1=$mrb_addr;
  var $2=HEAP16[(($name)>>1)];
  var $3=HEAP32[(($argc)>>2)];
  var $4=HEAP32[(($argv)>>2)];
  _mrb_funcall_with_block($agg_result, $1, $self, $2, $3, $4, $block);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_class_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_obj_class($0, $self);
  var $1=$call;
  _mrb_obj_value1142($agg_result, $1);
  STACKTOP = __stackBase__;
  return;
}
function _obj_is_instance_of($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $arg=__stackBase__;
  var $instance_of_p;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((97080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$arg,tempInt));
  var $1=$mrb_addr;
  var $value=(($arg)|0);
  var $p=$value;
  var $2=HEAP32[(($p)>>2)];
  var $3=$2;
  var $call1=_mrb_obj_is_instance_of($1, $self, $3);
  var $conv=(($call1) & 255);
  $instance_of_p=$conv;
  var $4=$instance_of_p;
  _mrb_bool_value1146($agg_result, $4);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_intern1154($mrb, $cstr) {
  var label = 0;
  var $mrb_addr;
  var $cstr_addr;
  $mrb_addr=$mrb;
  $cstr_addr=$cstr;
  var $0=$mrb_addr;
  var $1=$cstr_addr;
  var $call=_mrb_intern_cstr($0, $1);
  return $call;
}
function _mrb_symbol_value1155($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=4;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $sym=$value;
      HEAP16[(($sym)>>1)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_float_value1215($agg_result, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $f_addr;
      var $v=__stackBase__;
      $f_addr=$f;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=6;
      var $0=$f_addr;
      var $value=(($v)|0);
      var $f1=$value;
      (HEAPF64[(tempDoublePtr)>>3]=$0,HEAP32[(($f1)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_to_flo($mrb, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      $mrb_addr=$mrb;
      var $tt=(($val+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      if ((($0)|(0))==3) {
        label = 3; break;
      }
      else if ((($0)|(0))==6) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
    case 3: 
      var $value=(($val)|0);
      var $i=$value;
      var $1=HEAP32[(($i)>>2)];
      var $conv=(($1)|(0));
      $retval=$conv;
      label = 7; break;
    case 4: 
      label = 6; break;
    case 5: 
      var $2=$mrb_addr;
      var $3=$mrb_addr;
      var $call=_mrb_class_get($3, ((108024)|0));
      _mrb_raise($2, $call, ((104488)|0));
      label = 6; break;
    case 6: 
      var $value2=(($val)|0);
      var $f=$value2;
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $retval=$4;
      label = 7; break;
    case 7: 
      var $5=$retval;
      STACKTOP = __stackBase__;
      return $5;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_flo_to_str($agg_result, $mrb, $flo, $max_digit) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 108)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $flo; $flo = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($flo)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($flo)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($flo)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $max_digit_addr;
      var $result=__stackBase__;
      var $n;
      var $tmp=(__stackBase__)+(12);
      var $tmp14=(__stackBase__)+(24);
      var $tmp16=(__stackBase__)+(36);
      var $digit;
      var $m;
      var $exp;
      var $e;
      var $s=(__stackBase__)+(48);
      var $c;
      var $weight;
      var $tmp97=(__stackBase__)+(96);
      $mrb_addr=$mrb;
      $max_digit_addr=$max_digit;
      var $0=$max_digit_addr;
      var $cmp=(($0)|(0)) > 40;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mrb_addr;
      var $2=$mrb_addr;
      var $call=_mrb_class_get($2, ((112732)|0));
      _mrb_raise($1, $call, ((113088)|0));
      label = 7; break;
    case 4: 
      var $tt=(($flo+8)|0);
      var $3=HEAP32[(($tt)>>2)];
      var $cmp1=(($3)|(0))==6;
      if ($cmp1) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call3=_mrb_class_get($5, ((108024)|0));
      _mrb_raise($4, $call3, ((104488)|0));
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $value=(($flo)|0);
      var $f=$value;
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $n=$6;
      var $7=$n;
      var $call5=___fpclassifyf($7);
      var $cmp6=(($call5)|(0))==0;
      if ($cmp6) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $8=$mrb_addr;
      _mrb_str_new($tmp, $8, ((101748)|0), 3);
      var $9=$result;
      var $10=$tmp;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      label = 44; break;
    case 9: 
      var $11=$n;
      var $call9=___fpclassifyf($11);
      var $cmp10=(($call9)|(0))==1;
      if ($cmp10) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $12=$n;
      var $cmp12=$12 < 0;
      if ($cmp12) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $13=$mrb_addr;
      _mrb_str_new($tmp14, $13, ((99196)|0), 4);
      var $14=$result;
      var $15=$tmp14;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      label = 13; break;
    case 12: 
      var $16=$mrb_addr;
      _mrb_str_new($tmp16, $16, ((97060)|0), 3);
      var $17=$result;
      var $18=$tmp16;
      assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
      label = 13; break;
    case 13: 
      label = 43; break;
    case 14: 
      $e=0;
      var $arrayidx=(($s)|0);
      $c=$arrayidx;
      var $19=$n;
      var $cmp25=$19 < 0;
      if ($cmp25) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $20=$n;
      var $sub=(-$20);
      $n=$sub;
      var $21=$c;
      var $incdec_ptr=(($21+1)|0);
      $c=$incdec_ptr;
      HEAP8[($21)]=45;
      label = 16; break;
    case 16: 
      var $22=$n;
      var $call28=_log10($22);
      var $conv=(($call28)&-1);
      $exp=$conv;
      var $23=$exp;
      var $cmp29=(($23)|(0)) < 0;
      if ($cmp29) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $24=$exp;
      var $sub31=(((-$24))|0);
      var $cond = $sub31;label = 19; break;
    case 18: 
      var $25=$exp;
      var $cond = $25;label = 19; break;
    case 19: 
      var $cond;
      var $26=$max_digit_addr;
      var $cmp32=(($cond)|(0)) > (($26)|(0));
      if ($cmp32) { label = 20; break; } else { label = 23; break; }
    case 20: 
      $e=1;
      var $27=$exp;
      $m=$27;
      var $28=$m;
      var $cmp35=(($28)|(0)) < 0;
      if ($cmp35) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $29=$m;
      var $sub38=((($29)-(1))|0);
      $m=$sub38;
      label = 22; break;
    case 22: 
      var $30=$n;
      var $31=$m;
      var $conv40=(($31)|(0));
      var $32=Math.pow(10, $conv40);
      var $div=($30)/($32);
      $n=$div;
      $m=0;
      label = 26; break;
    case 23: 
      var $33=$exp;
      $m=$33;
      var $34=$m;
      var $cmp42=(($34)|(0)) < 0;
      if ($cmp42) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $m=0;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $35=$max_digit_addr;
      var $cmp47=(($35)|(0)) >= 0;
      if ($cmp47) { label = 28; break; } else { label = 35; break; }
    case 28: 
      var $36=$m;
      var $conv50=(($36)|(0));
      var $37=Math.pow(10, $conv50);
      $weight=$37;
      var $38=$n;
      var $39=$weight;
      var $div51=($38)/($39);
      var $add=($div51)+(1.1920928955078125e-7);
      var $call52=Math.floor($add);
      var $conv53=(($call52)&-1);
      $digit=$conv53;
      var $40=$digit;
      var $add54=((($40)+(48))|0);
      var $conv55=(($add54) & 255);
      var $41=$c;
      var $incdec_ptr56=(($41+1)|0);
      $c=$incdec_ptr56;
      HEAP8[($41)]=$conv55;
      var $42=$digit;
      var $conv57=(($42)|(0));
      var $43=$weight;
      var $mul=($conv57)*($43);
      var $44=$n;
      var $sub58=($44)-($mul);
      $n=$sub58;
      var $45=$max_digit_addr;
      var $dec=((($45)-(1))|0);
      $max_digit_addr=$dec;
      var $46=$m;
      var $dec59=((($46)-(1))|0);
      $m=$dec59;
      var $cmp60=(($46)|(0))==0;
      if ($cmp60) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $47=$c;
      var $incdec_ptr63=(($47+1)|0);
      $c=$incdec_ptr63;
      HEAP8[($47)]=46;
      label = 34; break;
    case 30: 
      var $48=$m;
      var $cmp65=(($48)|(0)) < -1;
      if ($cmp65) { label = 31; break; } else { label = 33; break; }
    case 31: 
      var $49=$n;
      var $cmp67=$49 < 1.1920928955078125e-7;
      if ($cmp67) { label = 32; break; } else { label = 33; break; }
    case 32: 
      label = 35; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 27; break;
    case 35: 
      var $50=$e;
      var $tobool=(($50)|(0))!=0;
      if ($tobool) { label = 36; break; } else { label = 42; break; }
    case 36: 
      var $51=$c;
      var $incdec_ptr73=(($51+1)|0);
      $c=$incdec_ptr73;
      HEAP8[($51)]=101;
      var $52=$exp;
      var $cmp74=(($52)|(0)) > 0;
      if ($cmp74) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $53=$c;
      var $incdec_ptr77=(($53+1)|0);
      $c=$incdec_ptr77;
      HEAP8[($53)]=43;
      label = 39; break;
    case 38: 
      var $54=$c;
      var $incdec_ptr79=(($54+1)|0);
      $c=$incdec_ptr79;
      HEAP8[($54)]=45;
      var $55=$exp;
      var $sub80=(((-$55))|0);
      $exp=$sub80;
      label = 39; break;
    case 39: 
      var $56=$exp;
      var $cmp82=(($56)|(0)) >= 100;
      if ($cmp82) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $57=$mrb_addr;
      var $58=$mrb_addr;
      var $call85=_mrb_class_get($58, ((112732)|0));
      _mrb_raise($57, $call85, ((95864)|0));
      label = 41; break;
    case 41: 
      var $59=$exp;
      var $div87=((((($59)|(0)))/(10))&-1);
      var $add88=((($div87)+(48))|0);
      var $conv89=(($add88) & 255);
      var $60=$c;
      var $incdec_ptr90=(($60+1)|0);
      $c=$incdec_ptr90;
      HEAP8[($60)]=$conv89;
      var $61=$exp;
      var $rem=((($61)|(0)))%(10);
      var $add91=((($rem)+(48))|0);
      var $conv92=(($add91) & 255);
      var $62=$c;
      var $incdec_ptr93=(($62+1)|0);
      $c=$incdec_ptr93;
      HEAP8[($62)]=$conv92;
      label = 42; break;
    case 42: 
      var $63=$c;
      HEAP8[($63)]=0;
      var $64=$mrb_addr;
      var $arrayidx95=(($s)|0);
      var $65=$c;
      var $arrayidx96=(($s)|0);
      var $sub_ptr_lhs_cast=$65;
      var $sub_ptr_rhs_cast=$arrayidx96;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      _mrb_str_new($tmp97, $64, $arrayidx95, $sub_ptr_sub);
      var $66=$result;
      var $67=$tmp97;
      assert(12 % 1 === 0);HEAP32[(($66)>>2)]=HEAP32[(($67)>>2)];HEAP32[((($66)+(4))>>2)]=HEAP32[((($67)+(4))>>2)];HEAP32[((($66)+(8))>>2)]=HEAP32[((($67)+(8))>>2)];
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $68=$agg_result;
      var $69=$result;
      assert(12 % 1 === 0);HEAP32[(($68)>>2)]=HEAP32[(($69)>>2)];HEAP32[((($68)+(4))>>2)]=HEAP32[((($69)+(4))>>2)];HEAP32[((($68)+(8))>>2)]=HEAP32[((($69)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_mul($agg_result, $mrb, $x, $y) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $y; $y = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($y)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($y)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($y)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a;
      var $b;
      var $c;
      $mrb_addr=$mrb;
      var $value=(($x)|0);
      var $i=$value;
      var $0=HEAP32[(($i)>>2)];
      $a=$0;
      var $1=$a;
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$agg_result;
      var $3=$x;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      label = 15; break;
    case 4: 
      var $tt=(($y+8)|0);
      var $4=HEAP32[(($tt)>>2)];
      var $cmp1=(($4)|(0))==3;
      if ($cmp1) { label = 5; break; } else { label = 14; break; }
    case 5: 
      var $value3=(($y)|0);
      var $i4=$value3;
      var $5=HEAP32[(($i4)>>2)];
      $b=$5;
      var $6=$a;
      var $cmp5=(($6)|(0)) < 32768;
      if ($cmp5) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $7=$a;
      var $cmp6=(($7)|(0)) >= -32768;
      if ($cmp6) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $8=$b;
      var $cmp8=(($8)|(0)) < 32768;
      if ($cmp8) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $9=$b;
      var $cmp10=(($9)|(0)) >= -32768;
      if ($cmp10) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $10=$a;
      var $11=$b;
      var $mul=Math.imul($10,$11);
      _mrb_fixnum_value1216($agg_result, $mul);
      label = 15; break;
    case 10: 
      var $12=$a;
      var $13=$b;
      var $mul13=Math.imul($12,$13);
      $c=$mul13;
      var $14=$a;
      var $cmp14=(($14)|(0))!=0;
      if ($cmp14) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $15=$c;
      var $16=$a;
      var $div=((((($15)|(0)))/((($16)|(0))))&-1);
      var $17=$b;
      var $cmp16=(($div)|(0))!=(($17)|(0));
      if ($cmp16) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $18=$a;
      var $conv=(($18)|(0));
      var $19=$b;
      var $conv18=(($19)|(0));
      var $mul19=($conv)*($conv18);
      _mrb_float_value1215($agg_result, $mul19);
      label = 15; break;
    case 13: 
      var $20=$c;
      _mrb_fixnum_value1216($agg_result, $20);
      label = 15; break;
    case 14: 
      var $21=$a;
      var $conv22=(($21)|(0));
      var $22=$mrb_addr;
      var $call=_mrb_to_flo($22, $y);
      var $mul23=($conv22)*($call);
      _mrb_float_value1215($agg_result, $mul23);
      label = 15; break;
    case 15: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value1216($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_flo_to_fixnum($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $z;
      var $d;
      $mrb_addr=$mrb;
      var $tt=(($x+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)|(0))==6;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mrb_addr;
      var $2=$mrb_addr;
      var $call=_mrb_class_get($2, ((108024)|0));
      _mrb_raise($1, $call, ((104488)|0));
      $z=0;
      label = 9; break;
    case 4: 
      var $value=(($x)|0);
      var $f=$value;
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $d=$3;
      var $4=$d;
      var $call1=___fpclassifyf($4);
      var $cmp2=(($call1)|(0))==1;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$mrb_addr;
      var $6=$mrb_addr;
      var $call4=_mrb_class_get($6, ((94828)|0));
      var $7=$d;
      var $cmp5=$7 < 0;
      var $cond=$cmp5 ? (((94024)|0)) : (((113796)|0));
      _mrb_raise($5, $call4, $cond);
      label = 6; break;
    case 6: 
      var $8=$d;
      var $call6=___fpclassifyf($8);
      var $cmp7=(($call6)|(0))==0;
      if ($cmp7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $9=$mrb_addr;
      var $10=$mrb_addr;
      var $call9=_mrb_class_get($10, ((94828)|0));
      _mrb_raise($9, $call9, ((101748)|0));
      label = 8; break;
    case 8: 
      var $11=$d;
      var $conv=(($11)&-1);
      $z=$conv;
      label = 9; break;
    case 9: 
      var $12=$z;
      _mrb_fixnum_value1216($agg_result, $12);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_plus($agg_result, $mrb, $x, $y) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $y; $y = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($y)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($y)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($y)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a;
      var $b;
      var $c;
      $mrb_addr=$mrb;
      var $value=(($x)|0);
      var $i=$value;
      var $0=HEAP32[(($i)>>2)];
      $a=$0;
      var $1=$a;
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$agg_result;
      var $3=$y;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      label = 10; break;
    case 4: 
      var $tt=(($y+8)|0);
      var $4=HEAP32[(($tt)>>2)];
      var $cmp1=(($4)|(0))==3;
      if ($cmp1) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $value3=(($y)|0);
      var $i4=$value3;
      var $5=HEAP32[(($i4)>>2)];
      $b=$5;
      var $6=$a;
      var $7=$b;
      var $add=((($6)+($7))|0);
      $c=$add;
      var $8=$a;
      var $cmp5=(($8)|(0)) < 0;
      var $conv=(($cmp5)&(1));
      var $9=$b;
      var $cmp6=(($9)|(0)) < 0;
      var $conv7=(($cmp6)&(1));
      var $xor=$conv ^ $conv7;
      var $cmp8=(($xor)|(0))==0;
      if ($cmp8) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $10=$a;
      var $cmp10=(($10)|(0)) < 0;
      var $conv11=(($cmp10)&(1));
      var $11=$c;
      var $cmp12=(($11)|(0)) < 0;
      var $conv13=(($cmp12)&(1));
      var $cmp14=(($conv11)|(0))!=(($conv13)|(0));
      if ($cmp14) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $12=$a;
      var $conv17=(($12)|(0));
      var $13=$b;
      var $conv18=(($13)|(0));
      var $add19=($conv17)+($conv18);
      _mrb_float_value1215($agg_result, $add19);
      label = 10; break;
    case 8: 
      var $14=$c;
      _mrb_fixnum_value1216($agg_result, $14);
      label = 10; break;
    case 9: 
      var $15=$a;
      var $conv22=(($15)|(0));
      var $16=$mrb_addr;
      var $call=_mrb_to_flo($16, $y);
      var $add23=($conv22)+($call);
      _mrb_float_value1215($agg_result, $add23);
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_minus($agg_result, $mrb, $x, $y) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $y; $y = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($y)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($y)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($y)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a;
      var $b;
      var $c;
      $mrb_addr=$mrb;
      var $value=(($x)|0);
      var $i=$value;
      var $0=HEAP32[(($i)>>2)];
      $a=$0;
      var $tt=(($y+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==3;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $value1=(($y)|0);
      var $i2=$value1;
      var $2=HEAP32[(($i2)>>2)];
      $b=$2;
      var $3=$a;
      var $4=$b;
      var $sub=((($3)-($4))|0);
      $c=$sub;
      var $5=$a;
      var $cmp3=(($5)|(0)) < 0;
      var $conv=(($cmp3)&(1));
      var $6=$b;
      var $cmp4=(($6)|(0)) < 0;
      var $conv5=(($cmp4)&(1));
      var $xor=$conv ^ $conv5;
      var $cmp6=(($xor)|(0))!=0;
      if ($cmp6) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $7=$a;
      var $cmp8=(($7)|(0)) < 0;
      var $conv9=(($cmp8)&(1));
      var $8=$c;
      var $cmp10=(($8)|(0)) < 0;
      var $conv11=(($cmp10)&(1));
      var $cmp12=(($conv9)|(0))!=(($conv11)|(0));
      if ($cmp12) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=$a;
      var $conv15=(($9)|(0));
      var $10=$b;
      var $conv16=(($10)|(0));
      var $sub17=($conv15)-($conv16);
      _mrb_float_value1215($agg_result, $sub17);
      label = 8; break;
    case 6: 
      var $11=$c;
      _mrb_fixnum_value1216($agg_result, $11);
      label = 8; break;
    case 7: 
      var $12=$a;
      var $conv19=(($12)|(0));
      var $13=$mrb_addr;
      var $call=_mrb_to_flo($13, $y);
      var $sub20=($conv19)-($call);
      _mrb_float_value1215($agg_result, $sub20);
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_to_str($agg_result, $mrb, $x, $base) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $base_addr;
      var $buf=__stackBase__;
      var $b;
      var $val;
      var $agg_tmp=(__stackBase__)+(36);
      $mrb_addr=$mrb;
      $base_addr=$base;
      var $arraydecay=(($buf)|0);
      var $add_ptr=(($arraydecay+33)|0);
      $b=$add_ptr;
      var $value=(($x)|0);
      var $i=$value;
      var $0=HEAP32[(($i)>>2)];
      $val=$0;
      var $1=$base_addr;
      var $cmp=(($1)|(0)) < 2;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$base_addr;
      var $cmp1=36 < (($2)|(0));
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call=_mrb_class_get($4, ((113188)|0));
      var $5=$base_addr;
      _mrb_fixnum_value1216($agg_tmp, $5);
      _mrb_raisef($3, $call, ((112348)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      var $6=$val;
      var $cmp2=(($6)|(0))==0;
      if ($cmp2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $7=$b;
      var $incdec_ptr=((($7)-(1))|0);
      $b=$incdec_ptr;
      HEAP8[($incdec_ptr)]=48;
      label = 17; break;
    case 7: 
      var $8=$val;
      var $cmp4=(($8)|(0)) < 0;
      if ($cmp4) { label = 8; break; } else { label = 12; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $9=$val;
      var $10=$base_addr;
      var $rem=((($9)|(0)))%((($10)|(0)));
      var $sub=(((-$rem))|0);
      var $arrayidx=((79868+$sub)|0);
      var $11=HEAP8[($arrayidx)];
      var $12=$b;
      var $incdec_ptr6=((($12)-(1))|0);
      $b=$incdec_ptr6;
      HEAP8[($incdec_ptr6)]=$11;
      label = 10; break;
    case 10: 
      var $13=$base_addr;
      var $14=$val;
      var $div=((((($14)|(0)))/((($13)|(0))))&-1);
      $val=$div;
      var $tobool=(($div)|(0))!=0;
      if ($tobool) { label = 9; break; } else { label = 11; break; }
    case 11: 
      var $15=$b;
      var $incdec_ptr7=((($15)-(1))|0);
      $b=$incdec_ptr7;
      HEAP8[($incdec_ptr7)]=45;
      label = 16; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $16=$val;
      var $17=$base_addr;
      var $rem10=((($16)|(0)))%((($17)|(0)));
      var $arrayidx11=((79868+$rem10)|0);
      var $18=HEAP8[($arrayidx11)];
      var $19=$b;
      var $incdec_ptr12=((($19)-(1))|0);
      $b=$incdec_ptr12;
      HEAP8[($incdec_ptr12)]=$18;
      label = 14; break;
    case 14: 
      var $20=$base_addr;
      var $21=$val;
      var $div14=((((($21)|(0)))/((($20)|(0))))&-1);
      $val=$div14;
      var $tobool15=(($div14)|(0))!=0;
      if ($tobool15) { label = 13; break; } else { label = 15; break; }
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $22=$mrb_addr;
      var $23=$b;
      var $arraydecay19=(($buf)|0);
      var $add_ptr20=(($arraydecay19+33)|0);
      var $24=$b;
      var $sub_ptr_lhs_cast=$add_ptr20;
      var $sub_ptr_rhs_cast=$24;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      _mrb_str_new($agg_result, $22, $23, $sub_ptr_sub);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_numeric($mrb) {
  var label = 0;
  var $mrb_addr;
  var $numeric;
  var $integer;
  var $fixnum;
  var $fl;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $object_class=(($1+44)|0);
  var $2=HEAP32[(($object_class)>>2)];
  var $call=_mrb_define_class($0, ((111796)|0), $2);
  $numeric=$call;
  var $3=$mrb_addr;
  var $4=$numeric;
  var $5=$mrb_addr;
  var $call1=_mrb_class_get($5, ((111212)|0));
  _mrb_include_module($3, $4, $call1);
  var $6=$mrb_addr;
  var $7=$numeric;
  _mrb_define_method($6, $7, ((110708)|0), 608, 262144);
  var $8=$mrb_addr;
  var $9=$numeric;
  _mrb_define_method($8, $9, ((110276)|0), 492, 262144);
  var $10=$mrb_addr;
  var $11=$numeric;
  _mrb_define_method($10, $11, ((109880)|0), 62, 262144);
  var $12=$mrb_addr;
  var $13=$numeric;
  _mrb_define_method($12, $13, ((109432)|0), 412, 262144);
  var $14=$mrb_addr;
  var $15=$numeric;
  _mrb_define_method($14, $15, ((108952)|0), 412, 262144);
  var $16=$mrb_addr;
  var $17=$numeric;
  _mrb_define_method($16, $17, ((108420)|0), 398, 0);
  var $18=$mrb_addr;
  var $19=$numeric;
  _mrb_define_method($18, $19, ((108104)|0), 312, 262144);
  var $20=$mrb_addr;
  var $21=$numeric;
  var $call2=_mrb_define_class($20, ((107572)|0), $21);
  $integer=$call2;
  var $22=$mrb_addr;
  var $23=$integer;
  _mrb_undef_class_method($22, $23, ((107284)|0));
  var $24=$mrb_addr;
  var $25=$integer;
  _mrb_define_method($24, $25, ((106916)|0), 438, 0);
  var $26=$mrb_addr;
  var $27=$integer;
  _mrb_define_method($26, $27, ((106444)|0), 438, 0);
  var $28=$mrb_addr;
  var $29=$integer;
  var $call3=_mrb_define_class($28, ((106052)|0), $29);
  var $30=$mrb_addr;
  var $fixnum_class=(($30+76)|0);
  HEAP32[(($fixnum_class)>>2)]=$call3;
  $fixnum=$call3;
  var $31=$mrb_addr;
  var $32=$fixnum;
  _mrb_undef_class_method($31, $32, ((107284)|0));
  var $33=$mrb_addr;
  var $34=$fixnum;
  _mrb_define_method($33, $34, ((105732)|0), 662, 262144);
  var $35=$mrb_addr;
  var $36=$fixnum;
  _mrb_define_method($35, $36, ((105444)|0), 388, 262144);
  var $37=$mrb_addr;
  var $38=$fixnum;
  _mrb_define_method($37, $38, ((110276)|0), 354, 262144);
  var $39=$mrb_addr;
  var $40=$fixnum;
  _mrb_define_method($39, $40, ((105120)|0), 24, 262144);
  var $41=$mrb_addr;
  var $42=$fixnum;
  _mrb_define_method($41, $42, ((104824)|0), 246, 262144);
  var $43=$mrb_addr;
  var $44=$fixnum;
  _mrb_define_method($43, $44, ((104520)|0), 316, 262144);
  var $45=$mrb_addr;
  var $46=$fixnum;
  _mrb_define_method($45, $46, ((103996)|0), 136, 0);
  var $47=$mrb_addr;
  var $48=$fixnum;
  _mrb_define_method($47, $48, ((103752)|0), 44, 262144);
  var $49=$mrb_addr;
  var $50=$fixnum;
  _mrb_define_method($49, $50, ((103540)|0), 206, 262144);
  var $51=$mrb_addr;
  var $52=$fixnum;
  _mrb_define_method($51, $52, ((103328)|0), 318, 262144);
  var $53=$mrb_addr;
  var $54=$fixnum;
  _mrb_define_method($53, $54, ((103124)|0), 596, 262144);
  var $55=$mrb_addr;
  var $56=$fixnum;
  _mrb_define_method($55, $56, ((102840)|0), 576, 262144);
  var $57=$mrb_addr;
  var $58=$fixnum;
  _mrb_define_method($57, $58, ((102660)|0), 122, 262144);
  var $59=$mrb_addr;
  var $60=$fixnum;
  _mrb_define_method($59, $60, ((102332)|0), 276, 0);
  var $61=$mrb_addr;
  var $62=$fixnum;
  _mrb_define_method($61, $62, ((102024)|0), 522, 0);
  var $63=$mrb_addr;
  var $64=$fixnum;
  _mrb_define_method($63, $64, ((101772)|0), 648, 0);
  var $65=$mrb_addr;
  var $66=$fixnum;
  _mrb_define_method($65, $66, ((101320)|0), 396, 0);
  var $67=$mrb_addr;
  var $68=$fixnum;
  _mrb_define_method($67, $68, ((101004)|0), 386, 0);
  var $69=$mrb_addr;
  var $70=$fixnum;
  _mrb_define_method($69, $70, ((100740)|0), 386, 0);
  var $71=$mrb_addr;
  var $72=$fixnum;
  _mrb_define_method($71, $72, ((100480)|0), 376, 262144);
  var $73=$mrb_addr;
  var $74=$numeric;
  var $call4=_mrb_define_class($73, ((100280)|0), $74);
  var $75=$mrb_addr;
  var $float_class=(($75+72)|0);
  HEAP32[(($float_class)>>2)]=$call4;
  $fl=$call4;
  var $76=$mrb_addr;
  var $77=$fl;
  _mrb_undef_class_method($76, $77, ((107284)|0));
  var $78=$mrb_addr;
  var $79=$fl;
  _mrb_define_method($78, $79, ((105732)|0), 160, 262144);
  var $80=$mrb_addr;
  var $81=$fl;
  _mrb_define_method($80, $81, ((105444)|0), 510, 262144);
  var $82=$mrb_addr;
  var $83=$fl;
  _mrb_define_method($82, $83, ((105120)|0), 36, 262144);
  var $84=$mrb_addr;
  var $85=$fl;
  _mrb_define_method($84, $85, ((104824)|0), 624, 262144);
  var $86=$mrb_addr;
  var $87=$fl;
  _mrb_define_method($86, $87, ((104520)|0), 166, 262144);
  var $88=$mrb_addr;
  var $89=$fl;
  _mrb_define_method($88, $89, ((100128)|0), 592, 0);
  var $90=$mrb_addr;
  var $91=$fl;
  _mrb_define_method($90, $91, ((99916)|0), 484, 0);
  var $92=$mrb_addr;
  var $93=$fl;
  _mrb_define_method($92, $93, ((99732)|0), 208, 0);
  var $94=$mrb_addr;
  var $95=$fl;
  _mrb_define_method($94, $95, ((99476)|0), 234, 0);
  var $96=$mrb_addr;
  var $97=$fl;
  _mrb_define_method($96, $97, ((99204)|0), 558, 0);
  var $98=$mrb_addr;
  var $99=$fl;
  _mrb_define_method($98, $99, ((101320)|0), 540, 0);
  var $100=$mrb_addr;
  var $101=$fl;
  _mrb_define_method($100, $101, ((106916)|0), 564, 0);
  var $102=$mrb_addr;
  var $103=$fl;
  _mrb_define_method($102, $103, ((106444)|0), 564, 0);
  var $104=$mrb_addr;
  var $105=$fl;
  _mrb_define_method($104, $105, ((98712)|0), 564, 0);
  var $106=$mrb_addr;
  var $107=$fl;
  _mrb_define_method($106, $107, ((101004)|0), 544, 0);
  var $108=$mrb_addr;
  var $109=$fl;
  _mrb_define_method($108, $109, ((100740)|0), 544, 0);
  return;
}
function _num_uplus($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$agg_result;
  var $1=$num;
  assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _num_uminus($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_to_flo($0, $num);
  var $sub=(-$call);
  _mrb_float_value1215($agg_result, $sub);
  STACKTOP = __stackBase__;
  return;
}
function _num_pow($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $y=__stackBase__;
      var $both_int;
      var $d;
      $mrb_addr=$mrb;
      $both_int=0;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((98208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
      var $tt=(($x+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==3;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $tt1=(($y+8)|0);
      var $2=HEAP32[(($tt1)>>2)];
      var $cmp2=(($2)|(0))==3;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $both_int=1;
      label = 5; break;
    case 5: 
      var $3=$mrb_addr;
      var $call3=_mrb_to_flo($3, $x);
      var $4=$mrb_addr;
      var $call4=_mrb_to_flo($4, $y);
      var $5=Math.pow($call3, $call4);
      $d=$5;
      var $6=$both_int;
      var $tobool=(($6)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $7=$d;
      var $cmp6=$7 <= 2147483647;
      if ($cmp6) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $8=$d;
      var $cmp8=$8 >= -2147483648;
      if ($cmp8) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $9=$d;
      var $conv=(($9)&-1);
      _mrb_fixnum_value1216($agg_result, $conv);
      label = 10; break;
    case 9: 
      var $10=$d;
      _mrb_float_value1215($agg_result, $10);
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _num_div($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $y=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((97776)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
  var $1=$mrb_addr;
  var $call1=_mrb_to_flo($1, $x);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($y)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($y)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $div=($call1)/($2);
  _mrb_float_value1215($agg_result, $div);
  STACKTOP = __stackBase__;
  return;
}
function _num_abs($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_to_flo($0, $num);
      var $cmp=$call < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mrb_addr;
      _num_uminus($agg_result, $1, $num);
      label = 5; break;
    case 4: 
      var $2=$agg_result;
      var $3=$num;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _num_cmp($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $other=__stackBase__;
      var $x;
      var $y;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((98208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$other,tempInt));
      var $1=$mrb_addr;
      var $call1=_mrb_to_flo($1, $self);
      $x=$call1;
      var $tt=(($other+8)|0);
      var $2=HEAP32[(($tt)>>2)];
      if ((($2)|(0))==3) {
        label = 3; break;
      }
      else if ((($2)|(0))==6) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
    case 3: 
      var $value=(($other)|0);
      var $i=$value;
      var $3=HEAP32[(($i)>>2)];
      var $conv=(($3)|(0));
      $y=$conv;
      label = 6; break;
    case 4: 
      var $value3=(($other)|0);
      var $f=$value3;
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $y=$4;
      label = 6; break;
    case 5: 
      _mrb_nil_value1221($agg_result);
      label = 11; break;
    case 6: 
      var $5=$x;
      var $6=$y;
      var $cmp=$5 > $6;
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _mrb_fixnum_value1216($agg_result, 1);
      label = 11; break;
    case 8: 
      var $7=$x;
      var $8=$y;
      var $cmp5=$7 < $8;
      if ($cmp5) { label = 9; break; } else { label = 10; break; }
    case 9: 
      _mrb_fixnum_value1216($agg_result, -1);
      label = 11; break;
    case 10: 
      _mrb_fixnum_value1216($agg_result, 0);
      label = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _int_to_i($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$agg_result;
  var $1=$num;
  assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _fix_plus($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $other=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((98208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$other,tempInt));
  var $1=$mrb_addr;
  _mrb_fixnum_plus($agg_result, $1, $self, $other);
  STACKTOP = __stackBase__;
  return;
}
function _fix_minus($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $other=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((98208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$other,tempInt));
  var $1=$mrb_addr;
  _mrb_fixnum_minus($agg_result, $1, $self, $other);
  STACKTOP = __stackBase__;
  return;
}
function _fix_uminus($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $value=(($num)|0);
  var $i=$value;
  var $0=HEAP32[(($i)>>2)];
  var $sub=(((-$0))|0);
  _mrb_fixnum_value1216($agg_result, $sub);
  STACKTOP = __stackBase__;
  return;
}
function _fix_mul($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $y=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((98208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
  var $1=$mrb_addr;
  _mrb_fixnum_mul($agg_result, $1, $x, $y);
  STACKTOP = __stackBase__;
  return;
}
function _fix_mod($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $y=__stackBase__;
      var $a;
      var $b;
      var $mod=(__stackBase__)+(12);
      var $mod11=(__stackBase__)+(16);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((98208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
      var $value=(($x)|0);
      var $i=$value;
      var $1=HEAP32[(($i)>>2)];
      $a=$1;
      var $tt=(($y+8)|0);
      var $2=HEAP32[(($tt)>>2)];
      var $cmp=(($2)|(0))==3;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $value1=(($y)|0);
      var $i2=$value1;
      var $3=HEAP32[(($i2)>>2)];
      $b=$3;
      var $cmp3=(($3)|(0))!=0;
      if ($cmp3) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $value4=(($y)|0);
      var $i5=$value4;
      var $4=HEAP32[(($i5)>>2)];
      var $cmp6=(($4)|(0))==0;
      if ($cmp6) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $call8=_strtod(((97960)|0), 0);
      _mrb_float_value1215($agg_result, $call8);
      label = 8; break;
    case 6: 
      var $5=$mrb_addr;
      var $6=$a;
      var $value9=(($y)|0);
      var $i10=$value9;
      var $7=HEAP32[(($i10)>>2)];
      _fixdivmod($5, $6, $7, 0, $mod);
      var $8=HEAP32[(($mod)>>2)];
      _mrb_fixnum_value1216($agg_result, $8);
      label = 8; break;
    case 7: 
      var $9=$mrb_addr;
      var $10=$a;
      var $conv=(($10)|(0));
      var $11=$mrb_addr;
      var $call12=_mrb_to_flo($11, $y);
      _flodivmod($9, $conv, $call12, 0, $mod11);
      var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($mod11)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($mod11)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _mrb_float_value1215($agg_result, $12);
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fix_equal($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $y=__stackBase__;
      var $equal_p;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((98208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
      var $1=$mrb_addr;
      var $call1=_mrb_obj_equal($1, $x, $y);
      var $tobool=(($call1)|(0))!=0;
      if ($tobool) { var $6 = 1;label = 6; break; } else { label = 3; break; }
    case 3: 
      var $tt=(($y+8)|0);
      var $2=HEAP32[(($tt)>>2)];
      var $cmp=(($2)|(0))==6;
      if ($cmp) { label = 4; break; } else { var $5 = 0;label = 5; break; }
    case 4: 
      var $value=(($x)|0);
      var $i=$value;
      var $3=HEAP32[(($i)>>2)];
      var $conv=(($3)|(0));
      var $value2=(($y)|0);
      var $f=$value2;
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp3=$conv == $4;
      var $5 = $cmp3;label = 5; break;
    case 5: 
      var $5;
      var $6 = $5;label = 6; break;
    case 6: 
      var $6;
      var $lor_ext=(($6)&(1));
      var $conv5=(($lor_ext) & 255);
      $equal_p=$conv5;
      var $7=$equal_p;
      _mrb_bool_value1222($agg_result, $7);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fix_rev($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $val;
  $mrb_addr=$mrb;
  var $value=(($num)|0);
  var $i=$value;
  var $0=HEAP32[(($i)>>2)];
  $val=$0;
  var $1=$val;
  var $neg=$1 ^ -1;
  $val=$neg;
  var $2=$val;
  _mrb_fixnum_value1216($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _fix_and($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $y=__stackBase__;
  var $val;
  var $tmp=(__stackBase__)+(12);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((98208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
  var $1=$mrb_addr;
  _bit_coerce($tmp, $1, $y);
  var $2=$y;
  var $3=$tmp;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  var $value=(($x)|0);
  var $i=$value;
  var $4=HEAP32[(($i)>>2)];
  var $value1=(($y)|0);
  var $i2=$value1;
  var $5=HEAP32[(($i2)>>2)];
  var $and=$4 & $5;
  $val=$and;
  var $6=$val;
  _mrb_fixnum_value1216($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _fix_or($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $y=__stackBase__;
  var $val;
  var $tmp=(__stackBase__)+(12);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((98208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
  var $1=$mrb_addr;
  _bit_coerce($tmp, $1, $y);
  var $2=$y;
  var $3=$tmp;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  var $value=(($x)|0);
  var $i=$value;
  var $4=HEAP32[(($i)>>2)];
  var $value1=(($y)|0);
  var $i2=$value1;
  var $5=HEAP32[(($i2)>>2)];
  var $or=$4 | $5;
  $val=$or;
  var $6=$val;
  _mrb_fixnum_value1216($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _fix_xor($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $y=__stackBase__;
  var $val;
  var $tmp=(__stackBase__)+(12);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((98208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
  var $1=$mrb_addr;
  _bit_coerce($tmp, $1, $y);
  var $2=$y;
  var $3=$tmp;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  var $value=(($x)|0);
  var $i=$value;
  var $4=HEAP32[(($i)>>2)];
  var $value1=(($y)|0);
  var $i2=$value1;
  var $5=HEAP32[(($i2)>>2)];
  var $xor=$4 ^ $5;
  $val=$xor;
  var $6=$val;
  _mrb_fixnum_value1216($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _fix_lshift($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $width=__stackBase__;
      var $result=(__stackBase__)+(4);
      var $val;
      var $tmp=(__stackBase__)+(16);
      var $tmp4=(__stackBase__)+(28);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      _fix_shift_get_width($0, $width);
      var $1=HEAP32[(($width)>>2)];
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$result;
      var $3=$x;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      label = 8; break;
    case 4: 
      var $value=(($x)|0);
      var $i=$value;
      var $4=HEAP32[(($i)>>2)];
      $val=$4;
      var $5=HEAP32[(($width)>>2)];
      var $cmp1=(($5)|(0)) < 0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$val;
      var $7=HEAP32[(($width)>>2)];
      var $sub=(((-$7))|0);
      _rshift($tmp, $6, $sub);
      var $8=$result;
      var $9=$tmp;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 7; break;
    case 6: 
      var $10=$mrb_addr;
      var $11=$val;
      var $12=HEAP32[(($width)>>2)];
      _lshift($tmp4, $10, $11, $12);
      var $13=$result;
      var $14=$tmp4;
      assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $15=$agg_result;
      var $16=$result;
      assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fix_rshift($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $width=__stackBase__;
      var $result=(__stackBase__)+(4);
      var $val;
      var $tmp=(__stackBase__)+(16);
      var $tmp4=(__stackBase__)+(28);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      _fix_shift_get_width($0, $width);
      var $1=HEAP32[(($width)>>2)];
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$result;
      var $3=$x;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      label = 8; break;
    case 4: 
      var $value=(($x)|0);
      var $i=$value;
      var $4=HEAP32[(($i)>>2)];
      $val=$4;
      var $5=HEAP32[(($width)>>2)];
      var $cmp1=(($5)|(0)) < 0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$mrb_addr;
      var $7=$val;
      var $8=HEAP32[(($width)>>2)];
      var $sub=(((-$8))|0);
      _lshift($tmp, $6, $7, $sub);
      var $9=$result;
      var $10=$tmp;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      label = 7; break;
    case 6: 
      var $11=$val;
      var $12=HEAP32[(($width)>>2)];
      _rshift($tmp4, $11, $12);
      var $13=$result;
      var $14=$tmp4;
      assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $15=$agg_result;
      var $16=$result;
      assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _num_eql($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $y=__stackBase__;
      var $eql_p;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((98208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
      var $tt=(($x+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $tt1=(($y+8)|0);
      var $2=HEAP32[(($tt1)>>2)];
      var $cmp=(($1)|(0))!=(($2)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $eql_p=0;
      label = 5; break;
    case 4: 
      var $3=$mrb_addr;
      var $call2=_mrb_equal($3, $x, $y);
      var $conv=(($call2) & 255);
      $eql_p=$conv;
      label = 5; break;
    case 5: 
      var $4=$eql_p;
      _mrb_bool_value1222($agg_result, $4);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _flo_hash($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $d=__stackBase__;
      var $c;
      var $i;
      var $hash;
      $mrb_addr=$mrb;
      var $value=(($num)|0);
      var $i1=$value;
      var $0=HEAP32[(($i1)>>2)];
      var $conv=(($0)|(0));
      (HEAPF64[(tempDoublePtr)>>3]=$conv,HEAP32[(($d)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($d)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($d)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($d)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp=$1 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($d)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($d)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 4; break;
    case 4: 
      var $2=$d;
      $c=$2;
      $hash=0;
      $i=0;
      label = 5; break;
    case 5: 
      var $3=$i;
      var $cmp3=(($3)>>>(0)) < 8;
      if ($cmp3) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $4=$hash;
      var $mul=((($4)*(971))&-1);
      var $5=$i;
      var $6=$c;
      var $arrayidx=(($6+$5)|0);
      var $7=HEAP8[($arrayidx)];
      var $conv5=(($7)&(255));
      var $xor=$mul ^ $conv5;
      $hash=$xor;
      label = 7; break;
    case 7: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $9=$hash;
      var $cmp6=(($9)|(0)) < 0;
      if ($cmp6) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $10=$hash;
      var $sub=(((-$10))|0);
      $hash=$sub;
      label = 10; break;
    case 10: 
      var $11=$hash;
      _mrb_fixnum_value1216($agg_result, $11);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _int_succ($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $agg_tmp=__stackBase__;
      $mrb_addr=$mrb;
      var $tt=(($num+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)|(0))==3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mrb_addr;
      _fix_succ($agg_result, $1, $num);
      label = 5; break;
    case 4: 
      var $2=$mrb_addr;
      _mrb_fixnum_value1216($agg_tmp, 1);
      _mrb_funcall($agg_result, $2, $num, ((105732)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fix_succ($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $value=(($num)|0);
  var $i=$value;
  var $0=HEAP32[(($i)>>2)];
  var $add=((($0)+(1))|0);
  _mrb_fixnum_value1216($agg_result, $add);
  STACKTOP = __stackBase__;
  return;
}
function _fix_to_f($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $val;
  $mrb_addr=$mrb;
  var $value=(($num)|0);
  var $i=$value;
  var $0=HEAP32[(($i)>>2)];
  var $conv=(($0)|(0));
  $val=$conv;
  var $1=$val;
  _mrb_float_value1215($agg_result, $1);
  STACKTOP = __stackBase__;
  return;
}
function _fix_to_s($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $base=__stackBase__;
  $mrb_addr=$mrb;
  HEAP32[(($base)>>2)]=10;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((98472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$base,tempInt));
  var $1=$mrb_addr;
  var $2=HEAP32[(($base)>>2)];
  _mrb_fixnum_to_str($agg_result, $1, $self, $2);
  STACKTOP = __stackBase__;
  return;
}
function _fix_divmod($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 132)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $y=__stackBase__;
      var $div=(__stackBase__)+(12);
      var $mod=(__stackBase__)+(16);
      var $agg_tmp=(__stackBase__)+(20);
      var $agg_tmp4=(__stackBase__)+(32);
      var $agg_tmp10=(__stackBase__)+(44);
      var $agg_tmp11=(__stackBase__)+(56);
      var $div12=(__stackBase__)+(68);
      var $mod13=(__stackBase__)+(76);
      var $a=(__stackBase__)+(84);
      var $b=(__stackBase__)+(96);
      var $tmp=(__stackBase__)+(108);
      var $tmp19=(__stackBase__)+(120);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((98208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
      var $tt=(($y+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==3;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $value=(($y)|0);
      var $i=$value;
      var $2=HEAP32[(($i)>>2)];
      var $cmp1=(($2)|(0))==0;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$mrb_addr;
      var $call3=_strtod(((97060)|0), 0);
      _mrb_float_value1215($agg_tmp, $call3);
      var $call5=_strtod(((97960)|0), 0);
      _mrb_float_value1215($agg_tmp4, $call5);
      _mrb_assoc_new($agg_result, $3, $agg_tmp, $agg_tmp4);
      label = 7; break;
    case 5: 
      var $4=$mrb_addr;
      var $value6=(($x)|0);
      var $i7=$value6;
      var $5=HEAP32[(($i7)>>2)];
      var $value8=(($y)|0);
      var $i9=$value8;
      var $6=HEAP32[(($i9)>>2)];
      _fixdivmod($4, $5, $6, $div, $mod);
      var $7=$mrb_addr;
      var $8=HEAP32[(($div)>>2)];
      _mrb_fixnum_value1216($agg_tmp10, $8);
      var $9=HEAP32[(($mod)>>2)];
      _mrb_fixnum_value1216($agg_tmp11, $9);
      _mrb_assoc_new($agg_result, $7, $agg_tmp10, $agg_tmp11);
      label = 7; break;
    case 6: 
      var $10=$mrb_addr;
      var $value14=(($x)|0);
      var $i15=$value14;
      var $11=HEAP32[(($i15)>>2)];
      var $conv=(($11)|(0));
      var $12=$mrb_addr;
      var $call16=_mrb_to_flo($12, $y);
      _flodivmod($10, $conv, $call16, $div12, $mod13);
      var $13=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($div12)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($div12)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $conv17=(($13)&-1);
      var $conv18=(($conv17)|(0));
      _mrb_float_value1215($tmp, $conv18);
      var $14=$a;
      var $15=$tmp;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      var $16=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($mod13)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($mod13)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _mrb_float_value1215($tmp19, $16);
      var $17=$b;
      var $18=$tmp19;
      assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
      var $19=$mrb_addr;
      _mrb_assoc_new($agg_result, $19, $a, $b);
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _flo_plus($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x;
  var $y=__stackBase__;
  $mrb_addr=$mrb;
  var $value=(($self)|0);
  var $f=$value;
  var $0=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  $x=$0;
  var $1=$mrb_addr;
  var $call=_mrb_get_args($1, ((97776)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
  var $2=$x;
  var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($y)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($y)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $add=($2)+($3);
  _mrb_float_value1215($agg_result, $add);
  STACKTOP = __stackBase__;
  return;
}
function _flo_minus($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $y=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((98208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
  var $value=(($x)|0);
  var $f=$value;
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $2=$mrb_addr;
  var $call1=_mrb_to_flo($2, $y);
  var $sub=($1)-($call1);
  _mrb_float_value1215($agg_result, $sub);
  STACKTOP = __stackBase__;
  return;
}
function _flo_mul($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $y=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((98208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
  var $value=(($x)|0);
  var $f=$value;
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $2=$mrb_addr;
  var $call1=_mrb_to_flo($2, $y);
  var $mul=($1)*($call1);
  _mrb_float_value1215($agg_result, $mul);
  STACKTOP = __stackBase__;
  return;
}
function _flo_mod($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $y=__stackBase__;
  var $fy;
  var $mod=(__stackBase__)+(12);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((98208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
  var $1=$mrb_addr;
  var $call1=_mrb_to_flo($1, $y);
  $fy=$call1;
  var $2=$mrb_addr;
  var $value=(($x)|0);
  var $f=$value;
  var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $4=$fy;
  _flodivmod($2, $3, $4, 0, $mod);
  var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($mod)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($mod)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1215($agg_result, $5);
  STACKTOP = __stackBase__;
  return;
}
function _flo_eq($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $y=__stackBase__;
      var $a;
      var $b;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((98208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
      var $tt=(($y+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      if ((($1)|(0))==3) {
        label = 3; break;
      }
      else if ((($1)|(0))==6) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
    case 3: 
      var $value=(($y)|0);
      var $i=$value;
      var $2=HEAP32[(($i)>>2)];
      var $conv=(($2)|(0));
      $b=$conv;
      label = 6; break;
    case 4: 
      var $value2=(($y)|0);
      var $f=$value2;
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $b=$3;
      label = 6; break;
    case 5: 
      var $4=$mrb_addr;
      _num_equal($agg_result, $4, $x, $y);
      label = 7; break;
    case 6: 
      var $value3=(($x)|0);
      var $f4=$value3;
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f4)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f4)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $a=$5;
      var $6=$a;
      var $7=$b;
      var $cmp=$6 == $7;
      var $conv5=(($cmp)&(1));
      var $conv6=(($conv5) & 255);
      _mrb_bool_value1222($agg_result, $conv6);
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _flo_ceil($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $f;
      $mrb_addr=$mrb;
      var $value=(($num)|0);
      var $f1=$value;
      var $0=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f1)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f1)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call=Math.ceil($0);
      $f=$call;
      var $1=$f;
      var $cmp=$1 <= 2147483647;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$f;
      var $cmp2=$2 >= -2147483648;
      if ($cmp2) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $3=$f;
      _mrb_float_value1215($agg_result, $3);
      label = 6; break;
    case 5: 
      var $4=$f;
      var $conv=(($4)&-1);
      _mrb_fixnum_value1216($agg_result, $conv);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _flo_finite_p($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $value;
      var $finite_p;
      $mrb_addr=$mrb;
      var $value1=(($num)|0);
      var $f=$value1;
      var $0=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $value=$0;
      var $1=$value;
      var $call=___fpclassifyf($1);
      var $cmp=(($call)|(0))==1;
      if ($cmp) { var $3 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$value;
      var $call2=___fpclassifyf($2);
      var $cmp3=(($call2)|(0))==0;
      var $3 = $cmp3;label = 4; break;
    case 4: 
      var $3;
      var $lnot=$3 ^ 1;
      var $lnot_ext=(($lnot)&(1));
      var $conv=(($lnot_ext) & 255);
      $finite_p=$conv;
      var $4=$finite_p;
      _mrb_bool_value1222($agg_result, $4);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fixdivmod($mrb, $x, $y, $divp, $modp) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $x_addr;
      var $y_addr;
      var $divp_addr;
      var $modp_addr;
      var $div;
      var $mod;
      $mrb_addr=$mrb;
      $x_addr=$x;
      $y_addr=$y;
      $divp_addr=$divp;
      $modp_addr=$modp;
      var $0=$y_addr;
      var $cmp=(($0)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$x_addr;
      var $cmp1=(($1)|(0)) < 0;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$x_addr;
      var $sub=(((-$2))|0);
      var $3=$y_addr;
      var $sub3=(((-$3))|0);
      var $div4=((((($sub)|(0)))/((($sub3)|(0))))&-1);
      $div=$div4;
      label = 6; break;
    case 5: 
      var $4=$x_addr;
      var $5=$y_addr;
      var $sub5=(((-$5))|0);
      var $div6=((((($4)|(0)))/((($sub5)|(0))))&-1);
      var $sub7=(((-$div6))|0);
      $div=$sub7;
      label = 6; break;
    case 6: 
      label = 11; break;
    case 7: 
      var $6=$x_addr;
      var $cmp9=(($6)|(0)) < 0;
      if ($cmp9) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $7=$x_addr;
      var $sub11=(((-$7))|0);
      var $8=$y_addr;
      var $div12=((((($sub11)|(0)))/((($8)|(0))))&-1);
      var $sub13=(((-$div12))|0);
      $div=$sub13;
      label = 10; break;
    case 9: 
      var $9=$x_addr;
      var $10=$y_addr;
      var $div15=((((($9)|(0)))/((($10)|(0))))&-1);
      $div=$div15;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $11=$x_addr;
      var $12=$div;
      var $13=$y_addr;
      var $mul=Math.imul($12,$13);
      var $sub18=((($11)-($mul))|0);
      $mod=$sub18;
      var $14=$mod;
      var $cmp19=(($14)|(0)) < 0;
      if ($cmp19) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $15=$y_addr;
      var $cmp20=(($15)|(0)) > 0;
      if ($cmp20) { label = 15; break; } else { label = 13; break; }
    case 13: 
      var $16=$mod;
      var $cmp21=(($16)|(0)) > 0;
      if ($cmp21) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $17=$y_addr;
      var $cmp23=(($17)|(0)) < 0;
      if ($cmp23) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $18=$y_addr;
      var $19=$mod;
      var $add=((($19)+($18))|0);
      $mod=$add;
      var $20=$div;
      var $sub25=((($20)-(1))|0);
      $div=$sub25;
      label = 16; break;
    case 16: 
      var $21=$divp_addr;
      var $tobool=(($21)|(0))!=0;
      if ($tobool) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $22=$div;
      var $23=$divp_addr;
      HEAP32[(($23)>>2)]=$22;
      label = 18; break;
    case 18: 
      var $24=$modp_addr;
      var $tobool29=(($24)|(0))!=0;
      if ($tobool29) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $25=$mod;
      var $26=$modp_addr;
      HEAP32[(($26)>>2)]=$25;
      label = 20; break;
    case 20: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_eq($mrb, $v1, $v2) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v1; $v1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $v2; $v2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      $mrb_addr=$mrb;
      var $tt=(($v1+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $tt1=(($v2+8)|0);
      var $1=HEAP32[(($tt1)>>2)];
      var $cmp=(($0)|(0))!=(($1)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 10; break;
    case 4: 
      var $tt2=(($v1+8)|0);
      var $2=HEAP32[(($tt2)>>2)];
      if ((($2)|(0))==2) {
        label = 5; break;
      }
      else if ((($2)|(0))==0 | (($2)|(0))==3) {
        label = 6; break;
      }
      else if ((($2)|(0))==4) {
        label = 7; break;
      }
      else if ((($2)|(0))==6) {
        label = 8; break;
      }
      else {
      label = 9; break;
      }
    case 5: 
      $retval=1;
      label = 10; break;
    case 6: 
      var $value=(($v1)|0);
      var $i=$value;
      var $3=HEAP32[(($i)>>2)];
      var $value4=(($v2)|0);
      var $i5=$value4;
      var $4=HEAP32[(($i5)>>2)];
      var $cmp6=(($3)|(0))==(($4)|(0));
      var $conv=(($cmp6)&(1));
      $retval=$conv;
      label = 10; break;
    case 7: 
      var $value8=(($v1)|0);
      var $sym=$value8;
      var $5=HEAP16[(($sym)>>1)];
      var $conv9=(($5 << 16) >> 16);
      var $value10=(($v2)|0);
      var $sym11=$value10;
      var $6=HEAP16[(($sym11)>>1)];
      var $conv12=(($6 << 16) >> 16);
      var $cmp13=(($conv9)|(0))==(($conv12)|(0));
      var $conv14=(($cmp13)&(1));
      $retval=$conv14;
      label = 10; break;
    case 8: 
      var $value16=(($v1)|0);
      var $f=$value16;
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $value17=(($v2)|0);
      var $f18=$value17;
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f18)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f18)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp19=$7 == $8;
      var $conv20=(($cmp19)&(1));
      $retval=$conv20;
      label = 10; break;
    case 9: 
      var $value21=(($v1)|0);
      var $p=$value21;
      var $9=HEAP32[(($p)>>2)];
      var $value22=(($v2)|0);
      var $p23=$value22;
      var $10=HEAP32[(($p23)>>2)];
      var $cmp24=(($9)|(0))==(($10)|(0));
      var $conv25=(($cmp24)&(1));
      $retval=$conv25;
      label = 10; break;
    case 10: 
      var $11=$retval;
      STACKTOP = __stackBase__;
      return $11;
    default: assert(0, "bad label: " + label);
  }
}
function _flo_floor($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $f;
      $mrb_addr=$mrb;
      var $value=(($num)|0);
      var $f1=$value;
      var $0=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f1)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f1)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call=Math.floor($0);
      $f=$call;
      var $1=$f;
      var $cmp=$1 <= 2147483647;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$f;
      var $cmp2=$2 >= -2147483648;
      if ($cmp2) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $3=$f;
      _mrb_float_value1215($agg_result, $3);
      label = 6; break;
    case 5: 
      var $4=$f;
      var $conv=(($4)&-1);
      _mrb_fixnum_value1216($agg_result, $conv);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _flo_infinite_p($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $value;
      $mrb_addr=$mrb;
      var $value1=(($num)|0);
      var $f=$value1;
      var $0=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $value=$0;
      var $1=$value;
      var $call=___fpclassifyf($1);
      var $cmp=(($call)|(0))==1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$value;
      var $cmp2=$2 < 0;
      var $cond=$cmp2 ? -1 : 1;
      _mrb_fixnum_value1216($agg_result, $cond);
      label = 5; break;
    case 4: 
      _mrb_nil_value1221($agg_result);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _flo_round($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $number;
      var $f;
      var $ndigits=__stackBase__;
      var $i;
      var $d;
      $mrb_addr=$mrb;
      HEAP32[(($ndigits)>>2)]=0;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((98472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ndigits,tempInt));
      var $value=(($num)|0);
      var $f1=$value;
      var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f1)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f1)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $number=$1;
      $f=1;
      var $2=HEAP32[(($ndigits)>>2)];
      var $call2=Math.abs($2);
      $i=$call2;
      label = 3; break;
    case 3: 
      var $3=$i;
      var $dec=((($3)-(1))|0);
      $i=$dec;
      var $cmp=(($dec)|(0)) >= 0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$f;
      var $mul=($4)*(10);
      $f=$mul;
      label = 3; break;
    case 5: 
      var $5=$f;
      var $call3=___fpclassifyf($5);
      var $cmp4=(($call3)|(0))==1;
      if ($cmp4) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $6=HEAP32[(($ndigits)>>2)];
      var $cmp5=(($6)|(0)) < 0;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $number=0;
      label = 8; break;
    case 8: 
      label = 21; break;
    case 9: 
      var $7=HEAP32[(($ndigits)>>2)];
      var $cmp7=(($7)|(0)) < 0;
      if ($cmp7) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $8=$f;
      var $9=$number;
      var $div=($9)/($8);
      $number=$div;
      label = 12; break;
    case 11: 
      var $10=$f;
      var $11=$number;
      var $mul10=($11)*($10);
      $number=$mul10;
      label = 12; break;
    case 12: 
      var $12=$number;
      var $cmp12=$12 > 0;
      if ($cmp12) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $13=$number;
      var $call14=Math.floor($13);
      $d=$call14;
      var $14=$d;
      var $15=$number;
      var $16=$d;
      var $sub=($15)-($16);
      var $cmp15=$sub >= 0.5;
      var $conv=(($cmp15)&(1));
      var $conv16=(($conv)|(0));
      var $add=($14)+($conv16);
      $number=$add;
      label = 17; break;
    case 14: 
      var $17=$number;
      var $cmp18=$17 < 0;
      if ($cmp18) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $18=$number;
      var $call21=Math.ceil($18);
      $d=$call21;
      var $19=$d;
      var $20=$d;
      var $21=$number;
      var $sub22=($20)-($21);
      var $cmp23=$sub22 >= 0.5;
      var $conv24=(($cmp23)&(1));
      var $conv25=(($conv24)|(0));
      var $sub26=($19)-($conv25);
      $number=$sub26;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $22=HEAP32[(($ndigits)>>2)];
      var $cmp29=(($22)|(0)) < 0;
      if ($cmp29) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $23=$f;
      var $24=$number;
      var $mul32=($24)*($23);
      $number=$mul32;
      label = 20; break;
    case 19: 
      var $25=$f;
      var $26=$number;
      var $div34=($26)/($25);
      $number=$div34;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $27=HEAP32[(($ndigits)>>2)];
      var $cmp37=(($27)|(0)) > 0;
      if ($cmp37) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $28=$number;
      _mrb_float_value1215($agg_result, $28);
      label = 24; break;
    case 23: 
      var $29=$number;
      var $conv41=(($29)&-1);
      _mrb_fixnum_value1216($agg_result, $conv41);
      label = 24; break;
    case 24: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _flo_to_f($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$agg_result;
  var $1=$num;
  assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _flo_truncate($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $f;
      $mrb_addr=$mrb;
      var $value=(($num)|0);
      var $f1=$value;
      var $0=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f1)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f1)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $f=$0;
      var $1=$f;
      var $cmp=$1 > 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$f;
      var $call=Math.floor($2);
      $f=$call;
      label = 4; break;
    case 4: 
      var $3=$f;
      var $cmp2=$3 < 0;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=$f;
      var $call4=Math.ceil($4);
      $f=$call4;
      label = 6; break;
    case 6: 
      var $5=$f;
      var $cmp6=$5 <= 2147483647;
      if ($cmp6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $6=$f;
      var $cmp7=$6 >= -2147483648;
      if ($cmp7) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $7=$f;
      _mrb_float_value1215($agg_result, $7);
      label = 10; break;
    case 9: 
      var $8=$f;
      var $conv=(($8)&-1);
      _mrb_fixnum_value1216($agg_result, $conv);
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _flo_to_s($agg_result, $mrb, $flt) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $flt; $flt = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($flt)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($flt)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($flt)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_flo_to_str($agg_result, $0, $flt, 14);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_nil_value1221($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value1222($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $boolean_addr;
      var $v=__stackBase__;
      $boolean_addr=$boolean;
      label = 3; break;
    case 3: 
      var $0=$boolean_addr;
      var $conv=(($0)&(255));
      var $tobool=(($conv)|(0))!=0;
      var $cond=$tobool ? 2 : 0;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$cond;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _num_equal($agg_result, $mrb, $x, $y) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $y; $y = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($y)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($y)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($y)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_obj_equal($0, $x, $y);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      _mrb_true_value1223($agg_result);
      label = 5; break;
    case 4: 
      var $1=$mrb_addr;
      _mrb_funcall($agg_result, $1, $y, ((104520)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($x)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_true_value1223($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=2;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _flodivmod($mrb, $x, $y, $divp, $modp) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $x_addr;
      var $y_addr;
      var $divp_addr;
      var $modp_addr;
      var $div;
      var $mod;
      $mrb_addr=$mrb;
      $x_addr=$x;
      $y_addr=$y;
      $divp_addr=$divp;
      $modp_addr=$modp;
      var $0=$y_addr;
      var $cmp=$0 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $call=_strtod(((97060)|0), 0);
      $div=$call;
      var $call1=_strtod(((97960)|0), 0);
      $mod=$call1;
      label = 12; break;
    case 4: 
      var $1=$x_addr;
      var $2=$y_addr;
      var $call2=_fmod($1, $2);
      $mod=$call2;
      var $3=$x_addr;
      var $call3=___fpclassifyf($3);
      var $cmp4=(($call3)|(0))==1;
      if ($cmp4) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $4=$y_addr;
      var $call5=___fpclassifyf($4);
      var $cmp6=(($call5)|(0))==1;
      if ($cmp6) { label = 8; break; } else { label = 6; break; }
    case 6: 
      var $5=$y_addr;
      var $call8=___fpclassifyf($5);
      var $cmp9=(($call8)|(0))==0;
      if ($cmp9) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $6=$x_addr;
      $div=$6;
      label = 9; break;
    case 8: 
      var $7=$x_addr;
      var $8=$mod;
      var $sub=($7)-($8);
      var $9=$y_addr;
      var $div12=($sub)/($9);
      $div=$div12;
      label = 9; break;
    case 9: 
      var $10=$y_addr;
      var $11=$mod;
      var $mul=($10)*($11);
      var $cmp13=$mul < 0;
      if ($cmp13) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $12=$y_addr;
      var $13=$mod;
      var $add=($13)+($12);
      $mod=$add;
      var $14=$div;
      var $sub15=($14)-(1);
      $div=$sub15;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $15=$modp_addr;
      var $tobool=(($15)|(0))!=0;
      if ($tobool) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $16=$mod;
      var $17=$modp_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$16,HEAP32[(($17)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($17)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 14; break;
    case 14: 
      var $18=$divp_addr;
      var $tobool20=(($18)|(0))!=0;
      if ($tobool20) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $19=$div;
      var $20=$divp_addr;
      (HEAPF64[(tempDoublePtr)>>3]=$19,HEAP32[(($20)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($20)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 16; break;
    case 16: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fix_shift_get_width($mrb, $width) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $width_addr;
  var $y=__stackBase__;
  var $tmp=(__stackBase__)+(12);
  $mrb_addr=$mrb;
  $width_addr=$width;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((98208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
  var $1=$mrb_addr;
  _bit_coerce($tmp, $1, $y);
  var $2=$y;
  var $3=$tmp;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  var $value=(($y)|0);
  var $i=$value;
  var $4=HEAP32[(($i)>>2)];
  var $5=$width_addr;
  HEAP32[(($5)>>2)]=$4;
  STACKTOP = __stackBase__;
  return;
}
function _lshift($agg_result, $mrb, $val, $width) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $val_addr;
      var $width_addr;
      var $agg_tmp=__stackBase__;
      var $agg_tmp1=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      $val_addr=$val;
      $width_addr=$width;
      var $0=$width_addr;
      var $cmp=(($0)>>>(0)) > 31;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mrb_addr;
      var $2=$mrb_addr;
      var $call=_mrb_class_get($2, ((112732)|0));
      var $3=$width_addr;
      _mrb_fixnum_value1216($agg_tmp, $3);
      _mrb_fixnum_value1216($agg_tmp1, 31);
      _mrb_raisef($1, $call, ((97520)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp1)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp1)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp1)+(8))>>2)],tempInt));
      label = 4; break;
    case 4: 
      var $4=$val_addr;
      var $5=$width_addr;
      var $shl=$4 << $5;
      $val_addr=$shl;
      var $6=$val_addr;
      _mrb_fixnum_value1216($agg_result, $6);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _rshift($agg_result, $val, $width) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $val_addr;
      var $width_addr;
      $val_addr=$val;
      $width_addr=$width;
      var $0=$width_addr;
      var $cmp=(($0)>>>(0)) >= 31;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$val_addr;
      var $cmp1=(($1)|(0)) < 0;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $val_addr=-1;
      label = 6; break;
    case 5: 
      $val_addr=0;
      label = 6; break;
    case 6: 
      label = 8; break;
    case 7: 
      var $2=$val_addr;
      var $3=$width_addr;
      var $shr=$2 >> (($3)|(0));
      $val_addr=$shr;
      label = 8; break;
    case 8: 
      var $4=$val_addr;
      _mrb_fixnum_value1216($agg_result, $4);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _bit_coerce($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tmp=__stackBase__;
      $mrb_addr=$mrb;
      label = 3; break;
    case 3: 
      var $tt=(($x+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)|(0))==3;
      var $lnot=$cmp ^ 1;
      if ($lnot) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $tt1=(($x+8)|0);
      var $1=HEAP32[(($tt1)>>2)];
      var $cmp2=(($1)|(0))==6;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $2=$mrb_addr;
      var $3=$mrb_addr;
      var $call=_mrb_class_get($3, ((108024)|0));
      _mrb_raise($2, $call, ((97380)|0));
      label = 6; break;
    case 6: 
      var $4=$mrb_addr;
      _mrb_to_int($tmp, $4, $x);
      var $5=$x;
      var $6=$tmp;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      label = 3; break;
    case 7: 
      var $7=$agg_result;
      var $8=$x;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_equal($mrb, $v1, $v2) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v1; $v1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $v2; $v2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_obj_eq($0, $v1, $v2);
  STACKTOP = __stackBase__;
  return $call;
}
function _mrb_equal($mrb, $obj1, $obj2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj1; $obj1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $obj2; $obj2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $result=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_obj_eq($0, $obj1, $obj2);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=1;
      label = 7; break;
    case 4: 
      var $1=$mrb_addr;
      _mrb_funcall($tmp, $1, $obj1, ((112028)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($obj2)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj2)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj2)+(8))>>2)],tempInt));
      var $2=$result;
      var $3=$tmp;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      var $tt=(($result+8)|0);
      var $4=HEAP32[(($tt)>>2)];
      var $cmp=(($4)|(0))!=0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=1;
      label = 7; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $5=$retval;
      STACKTOP = __stackBase__;
      return $5;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_object($mrb) {
  var label = 0;
  var $mrb_addr;
  var $n;
  var $t;
  var $f;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $object_class=(($1+44)|0);
  var $2=HEAP32[(($object_class)>>2)];
  var $call=_mrb_define_class($0, ((112976)|0), $2);
  var $3=$mrb_addr;
  var $nil_class=(($3+88)|0);
  HEAP32[(($nil_class)>>2)]=$call;
  $n=$call;
  var $4=$mrb_addr;
  var $5=$n;
  _mrb_undef_class_method($4, $5, ((107952)|0));
  var $6=$mrb_addr;
  var $7=$n;
  _mrb_define_method($6, $7, ((104448)|0), 646, 262144);
  var $8=$mrb_addr;
  var $9=$n;
  _mrb_define_method($8, $9, ((101712)|0), 290, 262144);
  var $10=$mrb_addr;
  var $11=$n;
  _mrb_define_method($10, $11, ((99128)|0), 660, 262144);
  var $12=$mrb_addr;
  var $13=$n;
  _mrb_define_method($12, $13, ((97028)|0), 454, 0);
  var $14=$mrb_addr;
  var $15=$n;
  _mrb_define_method($14, $15, ((95836)|0), 488, 0);
  var $16=$mrb_addr;
  var $17=$n;
  _mrb_define_method($16, $17, ((94820)|0), 78, 0);
  var $18=$mrb_addr;
  var $19=$mrb_addr;
  var $object_class1=(($19+44)|0);
  var $20=HEAP32[(($object_class1)>>2)];
  var $call2=_mrb_define_class($18, ((94012)|0), $20);
  var $21=$mrb_addr;
  var $true_class=(($21+80)|0);
  HEAP32[(($true_class)>>2)]=$call2;
  $t=$call2;
  var $22=$mrb_addr;
  var $23=$t;
  _mrb_undef_class_method($22, $23, ((107952)|0));
  var $24=$mrb_addr;
  var $25=$t;
  _mrb_define_method($24, $25, ((104448)|0), 650, 262144);
  var $26=$mrb_addr;
  var $27=$t;
  _mrb_define_method($26, $27, ((101712)|0), 350, 262144);
  var $28=$mrb_addr;
  var $29=$t;
  _mrb_define_method($28, $29, ((95836)|0), 570, 0);
  var $30=$mrb_addr;
  var $31=$t;
  _mrb_define_method($30, $31, ((99128)|0), 458, 262144);
  var $32=$mrb_addr;
  var $33=$t;
  _mrb_define_method($32, $33, ((94820)|0), 570, 0);
  var $34=$mrb_addr;
  var $35=$mrb_addr;
  var $object_class3=(($35+44)|0);
  var $36=HEAP32[(($object_class3)>>2)];
  var $call4=_mrb_define_class($34, ((113784)|0), $36);
  var $37=$mrb_addr;
  var $false_class=(($37+84)|0);
  HEAP32[(($false_class)>>2)]=$call4;
  $f=$call4;
  var $38=$mrb_addr;
  var $39=$f;
  _mrb_undef_class_method($38, $39, ((107952)|0));
  var $40=$mrb_addr;
  var $41=$f;
  _mrb_define_method($40, $41, ((104448)|0), 646, 262144);
  var $42=$mrb_addr;
  var $43=$f;
  _mrb_define_method($42, $43, ((101712)|0), 290, 262144);
  var $44=$mrb_addr;
  var $45=$f;
  _mrb_define_method($44, $45, ((95836)|0), 190, 0);
  var $46=$mrb_addr;
  var $47=$f;
  _mrb_define_method($46, $47, ((99128)|0), 660, 262144);
  var $48=$mrb_addr;
  var $49=$f;
  _mrb_define_method($48, $49, ((94820)|0), 190, 0);
  return;
}
function _false_and($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $obj2=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((99912)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj2,tempInt));
  _mrb_false_value1305($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _false_xor($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $obj2=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((99912)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj2,tempInt));
  var $1=HEAP8[($obj2)];
  _mrb_bool_value1304($agg_result, $1);
  STACKTOP = __stackBase__;
  return;
}
function _false_or($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $obj2=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((99912)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj2,tempInt));
  var $1=HEAP8[($obj2)];
  _mrb_bool_value1304($agg_result, $1);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_class1294($mrb, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      $mrb_addr=$mrb;
      var $tt=(($v+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      if ((($0)|(0))==0) {
        label = 3; break;
      }
      else if ((($0)|(0))==2) {
        label = 6; break;
      }
      else if ((($0)|(0))==4) {
        label = 7; break;
      }
      else if ((($0)|(0))==3) {
        label = 8; break;
      }
      else if ((($0)|(0))==6) {
        label = 9; break;
      }
      else {
      label = 10; break;
      }
    case 3: 
      var $value=(($v)|0);
      var $i=$value;
      var $1=HEAP32[(($i)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$mrb_addr;
      var $false_class=(($2+84)|0);
      var $3=HEAP32[(($false_class)>>2)];
      $retval=$3;
      label = 11; break;
    case 5: 
      var $4=$mrb_addr;
      var $nil_class=(($4+88)|0);
      var $5=HEAP32[(($nil_class)>>2)];
      $retval=$5;
      label = 11; break;
    case 6: 
      var $6=$mrb_addr;
      var $true_class=(($6+80)|0);
      var $7=HEAP32[(($true_class)>>2)];
      $retval=$7;
      label = 11; break;
    case 7: 
      var $8=$mrb_addr;
      var $symbol_class=(($8+92)|0);
      var $9=HEAP32[(($symbol_class)>>2)];
      $retval=$9;
      label = 11; break;
    case 8: 
      var $10=$mrb_addr;
      var $fixnum_class=(($10+76)|0);
      var $11=HEAP32[(($fixnum_class)>>2)];
      $retval=$11;
      label = 11; break;
    case 9: 
      var $12=$mrb_addr;
      var $float_class=(($12+72)|0);
      var $13=HEAP32[(($float_class)>>2)];
      $retval=$13;
      label = 11; break;
    case 10: 
      var $value5=(($v)|0);
      var $p=$value5;
      var $14=HEAP32[(($p)>>2)];
      var $15=$14;
      var $c=(($15+4)|0);
      var $16=HEAP32[(($c)>>2)];
      $retval=$16;
      label = 11; break;
    case 11: 
      var $17=$retval;
      STACKTOP = __stackBase__;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_true($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  _mrb_true_value1303($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _nil_to_s($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_str_new($agg_result, $0, 0, 0);
  STACKTOP = __stackBase__;
  return;
}
function _nil_inspect($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_str_new($agg_result, $0, ((111208)|0), 3);
  STACKTOP = __stackBase__;
  return;
}
function _true_and($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $obj2=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((99912)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj2,tempInt));
  var $1=HEAP8[($obj2)];
  _mrb_bool_value1304($agg_result, $1);
  STACKTOP = __stackBase__;
  return;
}
function _true_xor($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $obj2=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((99912)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj2,tempInt));
  var $1=HEAP8[($obj2)];
  var $tobool=(($1 << 24) >> 24)!=0;
  var $lnot=$tobool ^ 1;
  var $lnot_ext=(($lnot)&(1));
  var $conv=(($lnot_ext) & 255);
  _mrb_bool_value1304($agg_result, $conv);
  STACKTOP = __stackBase__;
  return;
}
function _true_to_s($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_str_new($agg_result, $0, ((103532)|0), 4);
  STACKTOP = __stackBase__;
  return;
}
function _true_or($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $obj2=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((99912)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj2,tempInt));
  _mrb_true_value1303($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _false_to_s($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_str_new($agg_result, $0, ((103744)|0), 5);
  STACKTOP = __stackBase__;
  return;
}
function _convert_type($agg_result, $mrb, $val, $tname, $method, $raise) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tname_addr;
      var $method_addr;
      var $raise_addr;
      var $m;
      var $agg_tmp=__stackBase__;
      $mrb_addr=$mrb;
      $tname_addr=$tname;
      $method_addr=$method;
      $raise_addr=$raise;
      $m=0;
      var $0=$mrb_addr;
      var $1=$method_addr;
      var $call=_mrb_intern1302($0, $1);
      $m=$call;
      var $2=$mrb_addr;
      var $3=$m;
      var $call1=_mrb_respond_to($2, $val, $3);
      var $tobool=(($call1)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 3; break; }
    case 3: 
      var $4=$raise_addr;
      var $tobool2=(($4)|(0))!=0;
      if ($tobool2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$mrb_addr;
      var $6=$mrb_addr;
      var $call4=_mrb_class_get($6, ((112320)|0));
      var $7=$mrb_addr;
      var $8=$tname_addr;
      _mrb_str_new_cstr($agg_tmp, $7, $8);
      _mrb_raisef($5, $call4, ((100100)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($val)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($val)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($val)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      _mrb_nil_value1281($agg_result);
      label = 7; break;
    case 5: 
      _mrb_nil_value1281($agg_result);
      label = 7; break;
    case 6: 
      var $9=$mrb_addr;
      var $10=$m;
      _mrb_funcall_argv($agg_result, $9, $val, $10, 0, 0);
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1281($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_convert_type($agg_result, $mrb, $val, $type, $tname, $method) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $type_addr;
      var $tname_addr;
      var $method_addr;
      var $v=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      var $agg_tmp=(__stackBase__)+(24);
      var $agg_tmp4=(__stackBase__)+(36);
      $mrb_addr=$mrb;
      $type_addr=$type;
      $tname_addr=$tname;
      $method_addr=$method;
      var $tt=(($val+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $1=$type_addr;
      var $cmp=(($0)|(0))==(($1)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$agg_result;
      var $3=$val;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      label = 7; break;
    case 4: 
      var $4=$mrb_addr;
      var $5=$tname_addr;
      var $6=$method_addr;
      _convert_type($tmp, $4, $val, $5, $6, 1);
      var $7=$v;
      var $8=$tmp;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      var $tt1=(($v+8)|0);
      var $9=HEAP32[(($tt1)>>2)];
      var $10=$type_addr;
      var $cmp2=(($9)|(0))!=(($10)|(0));
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $11=$mrb_addr;
      var $12=$mrb_addr;
      var $call=_mrb_class_get($12, ((112320)|0));
      var $13=$mrb_addr;
      var $14=$tname_addr;
      _mrb_str_new_cstr($agg_tmp, $13, $14);
      var $15=$mrb_addr;
      var $16=$method_addr;
      _mrb_str_new_cstr($agg_tmp4, $15, $16);
      _mrb_raisef($11, $call, ((111736)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 36)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($val)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($val)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($val)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],HEAP32[(((tempInt)+(24))>>2)]=HEAP32[(($agg_tmp4)>>2)],HEAP32[((((tempInt)+(24))+(4))>>2)]=HEAP32[((($agg_tmp4)+(4))>>2)],HEAP32[((((tempInt)+(24))+(8))>>2)]=HEAP32[((($agg_tmp4)+(8))>>2)],tempInt));
      label = 6; break;
    case 6: 
      var $17=$agg_result;
      var $18=$v;
      assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_check_convert_type($agg_result, $mrb, $val, $type, $tname, $method) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $type_addr;
      var $tname_addr;
      var $method_addr;
      var $v=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      $type_addr=$type;
      $tname_addr=$tname;
      $method_addr=$method;
      var $tt=(($val+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $1=$type_addr;
      var $cmp=(($0)|(0))==(($1)|(0));
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $2=$type_addr;
      var $cmp1=(($2)|(0))!=21;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$agg_result;
      var $4=$val;
      assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
      label = 10; break;
    case 5: 
      var $5=$mrb_addr;
      var $6=$tname_addr;
      var $7=$method_addr;
      _convert_type($tmp, $5, $val, $6, $7, 0);
      var $8=$v;
      var $9=$tmp;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      var $tt2=(($v+8)|0);
      var $10=HEAP32[(($tt2)>>2)];
      var $cmp3=(($10)|(0))==0;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $value=(($v)|0);
      var $i=$value;
      var $11=HEAP32[(($i)>>2)];
      var $tobool=(($11)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $tt5=(($v+8)|0);
      var $12=HEAP32[(($tt5)>>2)];
      var $13=$type_addr;
      var $cmp6=(($12)|(0))!=(($13)|(0));
      if ($cmp6) { label = 8; break; } else { label = 9; break; }
    case 8: 
      _mrb_nil_value1281($agg_result);
      label = 10; break;
    case 9: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_check_type($mrb, $x, $t) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $t_addr;
      var $type;
      var $s;
      var $xt;
      var $etype;
      var $tmp=__stackBase__;
      var $agg_tmp=(__stackBase__)+(12);
      var $agg_tmp34=(__stackBase__)+(24);
      var $agg_tmp37=(__stackBase__)+(36);
      var $agg_tmp38=(__stackBase__)+(48);
      $mrb_addr=$mrb;
      $t_addr=$t;
      $type=((92976)|0);
      var $tt=(($x+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      $xt=$0;
      var $1=$xt;
      var $2=$t_addr;
      var $cmp=(($1)|(0))!=(($2)|(0));
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=$xt;
      var $cmp1=(($3)|(0))==21;
      if ($cmp1) { label = 4; break; } else { label = 23; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $4=$type;
      var $type2=(($4)|0);
      var $5=HEAP8[($type2)];
      var $conv=(($5)&(255));
      var $cmp3=(($conv)|(0)) < 23;
      if ($cmp3) { label = 6; break; } else { label = 22; break; }
    case 6: 
      var $6=$type;
      var $type5=(($6)|0);
      var $7=HEAP8[($type5)];
      var $conv6=(($7)&(255));
      var $8=$t_addr;
      var $cmp7=(($conv6)|(0))==(($8)|(0));
      if ($cmp7) { label = 7; break; } else { label = 21; break; }
    case 7: 
      var $tt10=(($x+8)|0);
      var $9=HEAP32[(($tt10)>>2)];
      var $cmp11=(($9)|(0))==0;
      if ($cmp11) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $value=(($x)|0);
      var $i=$value;
      var $10=HEAP32[(($i)>>2)];
      var $tobool=(($10)|(0))!=0;
      if ($tobool) { label = 10; break; } else { label = 9; break; }
    case 9: 
      $etype=((111208)|0);
      label = 20; break;
    case 10: 
      var $tt14=(($x+8)|0);
      var $11=HEAP32[(($tt14)>>2)];
      var $cmp15=(($11)|(0))==3;
      if ($cmp15) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $etype=((110700)|0);
      label = 19; break;
    case 12: 
      var $tt19=(($x+8)|0);
      var $12=HEAP32[(($tt19)>>2)];
      var $cmp20=(($12)|(0))==4;
      if ($cmp20) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $etype=((110268)|0);
      label = 18; break;
    case 14: 
      var $tt24=(($x+8)|0);
      var $13=HEAP32[(($tt24)>>2)];
      var $cmp25=(($13)>>>(0)) <= 7;
      if ($cmp25) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $14=$mrb_addr;
      _mrb_obj_as_string($tmp, $14, $x);
      var $value28=(($tmp)|0);
      var $p=$value28;
      var $15=HEAP32[(($p)>>2)];
      var $16=$15;
      $s=$16;
      var $17=$s;
      var $ptr=(($17+20)|0);
      var $18=HEAP32[(($ptr)>>2)];
      $etype=$18;
      label = 17; break;
    case 16: 
      var $19=$mrb_addr;
      var $call=_mrb_obj_classname($19, $x);
      $etype=$call;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $20=$mrb_addr;
      var $21=$mrb_addr;
      var $call33=_mrb_class_get($21, ((112320)|0));
      var $22=$mrb_addr;
      var $23=$etype;
      _mrb_str_new_cstr($agg_tmp, $22, $23);
      var $24=$mrb_addr;
      var $25=$type;
      var $name=(($25+4)|0);
      var $26=HEAP32[(($name)>>2)];
      _mrb_str_new_cstr($agg_tmp34, $24, $26);
      _mrb_raisef($20, $call33, ((109840)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp34)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp34)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp34)+(8))>>2)],tempInt));
      label = 21; break;
    case 21: 
      var $27=$type;
      var $incdec_ptr=(($27+8)|0);
      $type=$incdec_ptr;
      label = 5; break;
    case 22: 
      var $28=$mrb_addr;
      var $29=$mrb_addr;
      var $call36=_mrb_class_get($29, ((112320)|0));
      var $30=$t_addr;
      _mrb_fixnum_value1288($agg_tmp37, $30);
      var $tt39=(($x+8)|0);
      var $31=HEAP32[(($tt39)>>2)];
      _mrb_fixnum_value1288($agg_tmp38, $31);
      _mrb_raisef($28, $call36, ((109404)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp37)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp37)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp37)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp38)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp38)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp38)+(8))>>2)],tempInt));
      label = 23; break;
    case 23: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value1288($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_any_to_s($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $str=__stackBase__;
  var $cname;
  var $tmp=(__stackBase__)+(12);
  var $tmp1=(__stackBase__)+(24);
  var $tmp2=(__stackBase__)+(36);
  var $agg_tmp=(__stackBase__)+(48);
  var $tmp3=(__stackBase__)+(60);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_str_buf_new($str, $0, 20);
  var $1=$mrb_addr;
  var $call=_mrb_obj_classname($1, $obj);
  $cname=$call;
  var $2=$mrb_addr;
  _mrb_str_buf_cat($tmp, $2, $str, ((108948)|0), 2);
  var $3=$mrb_addr;
  var $4=$cname;
  _mrb_str_cat21291($tmp1, $3, $str, $4);
  var $5=$mrb_addr;
  _mrb_str_cat($tmp2, $5, $str, ((108416)|0), 1);
  var $6=$mrb_addr;
  var $7=$mrb_addr;
  var $value=(($obj)|0);
  var $p=$value;
  var $8=HEAP32[(($p)>>2)];
  _mrb_ptr_to_str($agg_tmp, $7, $8);
  _mrb_str_concat($6, $str, $agg_tmp);
  var $9=$mrb_addr;
  _mrb_str_buf_cat($tmp3, $9, $str, ((108092)|0), 1);
  var $10=$agg_result;
  var $11=$str;
  assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_cat21291($agg_result, $mrb, $str, $ptr) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $ptr_addr;
  $mrb_addr=$mrb;
  $ptr_addr=$ptr;
  var $0=$mrb_addr;
  var $1=$ptr_addr;
  _mrb_str_cat_cstr($agg_result, $0, $str, $1);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_is_kind_of($mrb, $obj, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $c_addr;
      var $cl;
      $mrb_addr=$mrb;
      $c_addr=$c;
      var $0=$mrb_addr;
      var $call=_mrb_class1294($0, $obj);
      $cl=$call;
      var $1=$c_addr;
      var $2=$1;
      var $3=HEAP32[(($2)>>2)];
      var $bf_clear=$3 & 255;
      if ((($bf_clear)|(0))==10 | (($bf_clear)|(0))==9 | (($bf_clear)|(0))==11) {
        label = 3; break;
      }
      else {
      label = 4; break;
      }
    case 3: 
      label = 5; break;
    case 4: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call1=_mrb_class_get($5, ((112320)|0));
      _mrb_raise($4, $call1, ((107544)|0));
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $6=$cl;
      var $tobool=(($6)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $7=$cl;
      var $8=$c_addr;
      var $cmp=(($7)|(0))==(($8)|(0));
      if ($cmp) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $9=$cl;
      var $mt=(($9+16)|0);
      var $10=HEAP32[(($mt)>>2)];
      var $11=$c_addr;
      var $mt2=(($11+16)|0);
      var $12=HEAP32[(($mt2)>>2)];
      var $cmp3=(($10)|(0))==(($12)|(0));
      if ($cmp3) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $retval=1;
      label = 12; break;
    case 10: 
      var $13=$cl;
      var $super=(($13+20)|0);
      var $14=HEAP32[(($super)>>2)];
      $cl=$14;
      label = 6; break;
    case 11: 
      $retval=0;
      label = 12; break;
    case 12: 
      var $15=$retval;
      STACKTOP = __stackBase__;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_to_int($agg_result, $mrb, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_to_integer($agg_result, $0, $val, ((107276)|0));
  STACKTOP = __stackBase__;
  return;
}
function _mrb_to_integer($agg_result, $mrb, $val, $method) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $method_addr;
      var $v=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      var $agg_tmp=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      $method_addr=$method;
      var $tt=(($val+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)|(0))==3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$agg_result;
      var $2=$val;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      label = 7; break;
    case 4: 
      var $3=$mrb_addr;
      var $4=$method_addr;
      _convert_type($tmp, $3, $val, ((113180)|0), $4, 1);
      var $5=$v;
      var $6=$tmp;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      var $7=$mrb_addr;
      var $8=$mrb_addr;
      var $fixnum_class=(($8+76)|0);
      var $9=HEAP32[(($fixnum_class)>>2)];
      var $call=_mrb_obj_is_kind_of($7, $v, $9);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $10=$mrb_addr;
      var $11=$mrb_addr;
      var $call2=_mrb_class_get($11, ((112320)|0));
      var $12=$mrb_addr;
      var $13=$method_addr;
      _mrb_str_new_cstr($agg_tmp, $12, $13);
      _mrb_raisef($10, $call2, ((103948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 48)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($val)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($val)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($val)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($val)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($val)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($val)+(8))>>2)],HEAP32[(((tempInt)+(24))>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[((((tempInt)+(24))+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[((((tempInt)+(24))+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],HEAP32[(((tempInt)+(36))>>2)]=HEAP32[(($v)>>2)],HEAP32[((((tempInt)+(36))+(4))>>2)]=HEAP32[((($v)+(4))>>2)],HEAP32[((((tempInt)+(36))+(8))>>2)]=HEAP32[((($v)+(8))>>2)],tempInt));
      label = 6; break;
    case 6: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_Integer($agg_result, $mrb, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_convert_to_integer($agg_result, $0, $val, 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_convert_to_integer($agg_result, $mrb, $val, $base) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $base_addr;
      var $tmp=__stackBase__;
      var $tmp23=(__stackBase__)+(12);
      var $tmp34=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      $base_addr=$base;
      var $tt=(($val+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $value=(($val)|0);
      var $i=$value;
      var $1=HEAP32[(($i)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 4; break; }
    case 4: 
      var $2=$base_addr;
      var $cmp1=(($2)|(0))!=0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 25; break;
    case 6: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call=_mrb_class_get($4, ((112320)|0));
      _mrb_raise($3, $call, ((105412)|0));
      label = 7; break;
    case 7: 
      var $tt4=(($val+8)|0);
      var $5=HEAP32[(($tt4)>>2)];
      if ((($5)|(0))==6) {
        label = 8; break;
      }
      else if ((($5)|(0))==3) {
        label = 14; break;
      }
      else if ((($5)|(0))==16) {
        label = 17; break;
      }
      else {
      label = 19; break;
      }
    case 8: 
      var $6=$base_addr;
      var $cmp5=(($6)|(0))!=0;
      if ($cmp5) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 25; break;
    case 10: 
      var $value8=(($val)|0);
      var $f=$value8;
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp9=$7 <= 2147483647;
      if ($cmp9) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $value11=(($val)|0);
      var $f12=$value11;
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f12)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f12)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp13=$8 >= -2147483648;
      if ($cmp13) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 20; break;
    case 13: 
      var $9=$mrb_addr;
      _mrb_flo_to_fixnum($agg_result, $9, $val);
      label = 30; break;
    case 14: 
      var $10=$base_addr;
      var $cmp17=(($10)|(0))!=0;
      if ($cmp17) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 25; break;
    case 16: 
      var $11=$agg_result;
      var $12=$val;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      label = 30; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $13=$mrb_addr;
      var $14=$base_addr;
      _mrb_str_to_inum($agg_result, $13, $val, $14, 1);
      label = 30; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $15=$base_addr;
      var $cmp21=(($15)|(0))!=0;
      if ($cmp21) { label = 21; break; } else { label = 26; break; }
    case 21: 
      var $16=$mrb_addr;
      _mrb_check_string_type($tmp23, $16, $val);
      var $17=$tmp;
      var $18=$tmp23;
      assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
      var $tt24=(($tmp+8)|0);
      var $19=HEAP32[(($tt24)>>2)];
      var $cmp25=(($19)|(0))==0;
      if ($cmp25) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $value27=(($tmp)|0);
      var $i28=$value27;
      var $20=HEAP32[(($i28)>>2)];
      var $tobool29=(($20)|(0))!=0;
      if ($tobool29) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 18; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $21=$mrb_addr;
      var $22=$mrb_addr;
      var $call32=_mrb_class_get($22, ((105104)|0));
      _mrb_raise($21, $call32, ((104788)|0));
      label = 26; break;
    case 26: 
      var $23=$mrb_addr;
      _convert_type($tmp34, $23, $val, ((113180)|0), ((107276)|0), 0);
      var $24=$tmp;
      var $25=$tmp34;
      assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
      var $tt35=(($tmp+8)|0);
      var $26=HEAP32[(($tt35)>>2)];
      var $cmp36=(($26)|(0))==0;
      if ($cmp36) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $value38=(($tmp)|0);
      var $i39=$value38;
      var $27=HEAP32[(($i39)>>2)];
      var $tobool40=(($27)|(0))!=0;
      if ($tobool40) { label = 29; break; } else { label = 28; break; }
    case 28: 
      var $28=$mrb_addr;
      _mrb_to_integer($agg_result, $28, $val, ((104512)|0));
      label = 30; break;
    case 29: 
      var $29=$agg_result;
      var $30=$tmp;
      assert(12 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($29)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];
      label = 30; break;
    case 30: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_Float($agg_result, $mrb, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      $mrb_addr=$mrb;
      var $tt=(($val+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $value=(($val)|0);
      var $i=$value;
      var $1=HEAP32[(($i)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$mrb_addr;
      var $3=$mrb_addr;
      var $call=_mrb_class_get($3, ((112320)|0));
      _mrb_raise($2, $call, ((106884)|0));
      label = 5; break;
    case 5: 
      var $tt1=(($val+8)|0);
      var $4=HEAP32[(($tt1)>>2)];
      if ((($4)|(0))==3) {
        label = 6; break;
      }
      else if ((($4)|(0))==6) {
        label = 7; break;
      }
      else if ((($4)|(0))==16) {
        label = 8; break;
      }
      else {
      label = 9; break;
      }
    case 6: 
      var $value2=(($val)|0);
      var $i3=$value2;
      var $5=HEAP32[(($i3)>>2)];
      var $conv=(($5)|(0));
      _mrb_float_value1297($agg_result, $conv);
      label = 10; break;
    case 7: 
      var $6=$agg_result;
      var $7=$val;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      label = 10; break;
    case 8: 
      var $8=$mrb_addr;
      var $call6=_mrb_str_to_dbl($8, $val, 1);
      _mrb_float_value1297($agg_result, $call6);
      label = 10; break;
    case 9: 
      var $9=$mrb_addr;
      _mrb_convert_type($agg_result, $9, $val, 6, ((106436)|0), ((106044)|0));
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_float_value1297($agg_result, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $f_addr;
      var $v=__stackBase__;
      $f_addr=$f;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=6;
      var $0=$f_addr;
      var $value=(($v)|0);
      var $f1=$value;
      (HEAPF64[(tempDoublePtr)>>3]=$0,HEAP32[(($f1)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_inspect($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $agg_tmp=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  _mrb_funcall($agg_tmp, $1, $obj, ((94820)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
  _mrb_obj_as_string($agg_result, $0, $agg_tmp);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_eql($mrb, $obj1, $obj2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj1; $obj1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $obj2; $obj2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $tmp=__stackBase__;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_obj_eq($0, $obj1, $obj2);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=1;
      label = 5; break;
    case 4: 
      var $1=$mrb_addr;
      _mrb_funcall($tmp, $1, $obj1, ((105724)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($obj2)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj2)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj2)+(8))>>2)],tempInt));
      var $tt=(($tmp+8)|0);
      var $2=HEAP32[(($tt)>>2)];
      var $cmp=(($2)|(0))!=0;
      var $conv=(($cmp)&(1));
      $retval=$conv;
      label = 5; break;
    case 5: 
      var $3=$retval;
      STACKTOP = __stackBase__;
      return $3;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern1302($mrb, $cstr) {
  var label = 0;
  var $mrb_addr;
  var $cstr_addr;
  $mrb_addr=$mrb;
  $cstr_addr=$cstr;
  var $0=$mrb_addr;
  var $1=$cstr_addr;
  var $call=_mrb_intern_cstr($0, $1);
  return $call;
}
function _mrb_true_value1303($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=2;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value1304($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $boolean_addr;
      var $v=__stackBase__;
      $boolean_addr=$boolean;
      label = 3; break;
    case 3: 
      var $0=$boolean_addr;
      var $conv=(($0)&(255));
      var $tobool=(($conv)|(0))!=0;
      var $cond=$tobool ? 2 : 0;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$cond;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_false_value1305($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_pool_open($mrb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $pool;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_malloc($0, 8);
      var $1=$call;
      $pool=$1;
      var $2=$pool;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      var $4=$pool;
      var $mrb1=(($4)|0);
      HEAP32[(($mrb1)>>2)]=$3;
      var $5=$pool;
      var $pages=(($5+4)|0);
      HEAP32[(($pages)>>2)]=0;
      label = 4; break;
    case 4: 
      var $6=$pool;
      return $6;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_pool_close($pool) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $pool_addr;
      var $page;
      var $tmp;
      $pool_addr=$pool;
      var $0=$pool_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      label = 8; break;
    case 4: 
      var $1=$pool_addr;
      var $pages=(($1+4)|0);
      var $2=HEAP32[(($pages)>>2)];
      $page=$2;
      label = 5; break;
    case 5: 
      var $3=$page;
      var $tobool1=(($3)|(0))!=0;
      if ($tobool1) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $4=$page;
      $tmp=$4;
      var $5=$page;
      var $next=(($5)|0);
      var $6=HEAP32[(($next)>>2)];
      $page=$6;
      var $7=$pool_addr;
      var $mrb=(($7)|0);
      var $8=HEAP32[(($mrb)>>2)];
      var $9=$tmp;
      var $10=$9;
      _mrb_free($8, $10);
      label = 5; break;
    case 7: 
      var $11=$pool_addr;
      var $mrb2=(($11)|0);
      var $12=HEAP32[(($mrb2)>>2)];
      var $13=$pool_addr;
      var $14=$13;
      _mrb_free($12, $14);
      label = 8; break;
    case 8: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_pool_alloc($pool, $len) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $pool_addr;
      var $len_addr;
      var $page;
      var $n;
      $pool_addr=$pool;
      $len_addr=$len;
      var $0=$pool_addr;
      var $tobool=(($0)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $retval=0;
      label = 12; break;
    case 4: 
      var $1=$len_addr;
      var $sub=(((-$1))|0);
      var $and=$sub & 3;
      var $2=$len_addr;
      var $add=((($2)+($and))|0);
      $len_addr=$add;
      var $3=$pool_addr;
      var $pages=(($3+4)|0);
      var $4=HEAP32[(($pages)>>2)];
      $page=$4;
      label = 5; break;
    case 5: 
      var $5=$page;
      var $tobool1=(($5)|(0))!=0;
      if ($tobool1) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $6=$page;
      var $offset=(($6+4)|0);
      var $7=HEAP32[(($offset)>>2)];
      var $8=$len_addr;
      var $add2=((($7)+($8))|0);
      var $9=$page;
      var $len3=(($9+8)|0);
      var $10=HEAP32[(($len3)>>2)];
      var $cmp=(($add2)>>>(0)) <= (($10)>>>(0));
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $11=$page;
      var $offset5=(($11+4)|0);
      var $12=HEAP32[(($offset5)>>2)];
      $n=$12;
      var $13=$len_addr;
      var $14=$page;
      var $offset6=(($14+4)|0);
      var $15=HEAP32[(($offset6)>>2)];
      var $add7=((($15)+($13))|0);
      HEAP32[(($offset6)>>2)]=$add7;
      var $16=$page;
      var $page8=(($16+16)|0);
      var $arraydecay=(($page8)|0);
      var $17=$n;
      var $add_ptr=(($arraydecay+$17)|0);
      var $18=$page;
      var $last=(($18+12)|0);
      HEAP32[(($last)>>2)]=$add_ptr;
      var $19=$page;
      var $last9=(($19+12)|0);
      var $20=HEAP32[(($last9)>>2)];
      $retval=$20;
      label = 12; break;
    case 8: 
      var $21=$page;
      var $next=(($21)|0);
      var $22=HEAP32[(($next)>>2)];
      $page=$22;
      label = 5; break;
    case 9: 
      var $23=$pool_addr;
      var $24=$len_addr;
      var $call=_page_alloc($23, $24);
      $page=$call;
      var $25=$page;
      var $tobool11=(($25)|(0))!=0;
      if ($tobool11) { label = 11; break; } else { label = 10; break; }
    case 10: 
      $retval=0;
      label = 12; break;
    case 11: 
      var $26=$len_addr;
      var $27=$page;
      var $offset14=(($27+4)|0);
      HEAP32[(($offset14)>>2)]=$26;
      var $28=$pool_addr;
      var $pages15=(($28+4)|0);
      var $29=HEAP32[(($pages15)>>2)];
      var $30=$page;
      var $next16=(($30)|0);
      HEAP32[(($next16)>>2)]=$29;
      var $31=$page;
      var $32=$pool_addr;
      var $pages17=(($32+4)|0);
      HEAP32[(($pages17)>>2)]=$31;
      var $33=$page;
      var $page18=(($33+16)|0);
      var $arraydecay19=(($page18)|0);
      var $34=$page;
      var $last20=(($34+12)|0);
      HEAP32[(($last20)>>2)]=$arraydecay19;
      var $35=$page;
      var $last21=(($35+12)|0);
      var $36=HEAP32[(($last21)>>2)];
      $retval=$36;
      label = 12; break;
    case 12: 
      var $37=$retval;
      return $37;
    default: assert(0, "bad label: " + label);
  }
}
function _page_alloc($pool, $len) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $pool_addr;
      var $len_addr;
      var $page;
      $pool_addr=$pool;
      $len_addr=$len;
      var $0=$len_addr;
      var $cmp=(($0)>>>(0)) < 16000;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $len_addr=16000;
      label = 4; break;
    case 4: 
      var $1=$pool_addr;
      var $mrb=(($1)|0);
      var $2=HEAP32[(($mrb)>>2)];
      var $3=$len_addr;
      var $add=((($3)+(16))|0);
      var $call=_mrb_malloc($2, $add);
      var $4=$call;
      $page=$4;
      var $5=$page;
      var $tobool=(($5)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$page;
      var $offset=(($6+4)|0);
      HEAP32[(($offset)>>2)]=0;
      var $7=$len_addr;
      var $8=$page;
      var $len2=(($8+8)|0);
      HEAP32[(($len2)>>2)]=$7;
      label = 6; break;
    case 6: 
      var $9=$page;
      return $9;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_range_new($agg_result, $mrb, $beg, $end, $excl) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $beg; $beg = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($beg)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($beg)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($beg)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $end; $end = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($end)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($end)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($end)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $excl_addr;
  var $r;
  $mrb_addr=$mrb;
  $excl_addr=$excl;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $call=_mrb_class_get($1, ((111788)|0));
  var $call1=_mrb_obj_alloc($0, 17, $call);
  var $2=$call1;
  $r=$2;
  var $3=$mrb_addr;
  _range_check($3, $beg, $end);
  var $4=$mrb_addr;
  var $call2=_mrb_malloc($4, 24);
  var $5=$call2;
  var $6=$r;
  var $edges=(($6+12)|0);
  HEAP32[(($edges)>>2)]=$5;
  var $7=$r;
  var $edges3=(($7+12)|0);
  var $8=HEAP32[(($edges3)>>2)];
  var $beg4=(($8)|0);
  var $9=$beg4;
  var $10=$beg;
  assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
  var $11=$r;
  var $edges5=(($11+12)|0);
  var $12=HEAP32[(($edges5)>>2)];
  var $end6=(($12+12)|0);
  var $13=$end6;
  var $14=$end;
  assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
  var $15=$excl_addr;
  var $16=$r;
  var $excl7=(($16+16)|0);
  HEAP32[(($excl7)>>2)]=$15;
  var $17=$r;
  var $18=$17;
  _mrb_obj_value1340($agg_result, $18);
  STACKTOP = __stackBase__;
  return;
}
function _range_check($mrb, $a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ans=__stackBase__;
      var $ta;
      var $tb;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $tt=(($a+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      $ta=$0;
      var $tt1=(($b+8)|0);
      var $1=HEAP32[(($tt1)>>2)];
      $tb=$1;
      var $2=$ta;
      var $cmp=(($2)|(0))==3;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=$ta;
      var $cmp2=(($3)|(0))==6;
      if ($cmp2) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $4=$tb;
      var $cmp3=(($4)|(0))==3;
      if ($cmp3) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $5=$tb;
      var $cmp5=(($5)|(0))==6;
      if ($cmp5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 10; break;
    case 7: 
      var $6=$mrb_addr;
      _mrb_funcall($tmp, $6, $a, ((107272)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($b)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($b)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($b)+(8))>>2)],tempInt));
      var $7=$ans;
      var $8=$tmp;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      var $tt6=(($ans+8)|0);
      var $9=HEAP32[(($tt6)>>2)];
      var $cmp7=(($9)|(0))==0;
      if ($cmp7) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $value=(($ans)|0);
      var $i=$value;
      var $10=HEAP32[(($i)>>2)];
      var $tobool=(($10)|(0))!=0;
      if ($tobool) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $11=$mrb_addr;
      var $12=$mrb_addr;
      var $call=_mrb_class_get($12, ((106868)|0));
      _mrb_raise($11, $call, ((106416)|0));
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value1340($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_range_beg($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $r;
  $mrb_addr=$mrb;
  var $value=(($range)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  $r=$1;
  var $2=$r;
  var $edges=(($2+12)|0);
  var $3=HEAP32[(($edges)>>2)];
  var $beg=(($3)|0);
  var $4=$agg_result;
  var $5=$beg;
  assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_range_end($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $r;
  $mrb_addr=$mrb;
  var $value=(($range)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  $r=$1;
  var $2=$r;
  var $edges=(($2+12)|0);
  var $3=HEAP32[(($edges)>>2)];
  var $end=(($3+12)|0);
  var $4=$agg_result;
  var $5=$end;
  assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_range_excl($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $r;
  $mrb_addr=$mrb;
  var $value=(($range)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  $r=$1;
  var $2=$r;
  var $excl=(($2+16)|0);
  var $3=HEAP32[(($excl)>>2)];
  var $conv=(($3) & 255);
  _mrb_bool_value1341($agg_result, $conv);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_bool_value1341($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $boolean_addr;
      var $v=__stackBase__;
      $boolean_addr=$boolean;
      label = 3; break;
    case 3: 
      var $0=$boolean_addr;
      var $conv=(($0)&(255));
      var $tobool=(($conv)|(0))!=0;
      var $cond=$tobool ? 2 : 0;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$cond;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_range_initialize($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $beg=__stackBase__;
      var $end=(__stackBase__)+(12);
      var $exclusive=(__stackBase__)+(24);
      var $n;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((112920)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$beg,HEAP32[(((tempInt)+(4))>>2)]=$end,HEAP32[(((tempInt)+(8))>>2)]=$exclusive,tempInt));
      $n=$call;
      var $1=$n;
      var $cmp=(($1)|(0))!=3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      HEAP8[($exclusive)]=0;
      label = 4; break;
    case 4: 
      var $2=$mrb_addr;
      var $3=HEAP8[($exclusive)];
      var $conv=(($3)&(255));
      _range_init($2, $range, $beg, $end, $conv);
      var $4=$agg_result;
      var $5=$range;
      assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _range_init($mrb, $range, $beg, $end, $exclude_end) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $beg; $beg = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($beg)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($beg)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($beg)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $end; $end = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($end)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($end)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($end)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $exclude_end_addr;
      var $r;
      $mrb_addr=$mrb;
      $exclude_end_addr=$exclude_end;
      var $value=(($range)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $r=$1;
      var $2=$mrb_addr;
      _range_check($2, $beg, $end);
      var $3=$exclude_end_addr;
      var $4=$r;
      var $excl=(($4+16)|0);
      HEAP32[(($excl)>>2)]=$3;
      var $5=$r;
      var $edges=(($5+12)|0);
      var $6=HEAP32[(($edges)>>2)];
      var $tobool=(($6)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $7=$mrb_addr;
      var $call=_mrb_malloc($7, 24);
      var $8=$call;
      var $9=$r;
      var $edges1=(($9+12)|0);
      HEAP32[(($edges1)>>2)]=$8;
      label = 4; break;
    case 4: 
      var $10=$r;
      var $edges2=(($10+12)|0);
      var $11=HEAP32[(($edges2)>>2)];
      var $beg3=(($11)|0);
      var $12=$beg3;
      var $13=$beg;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      var $14=$r;
      var $edges4=(($14+12)|0);
      var $15=HEAP32[(($edges4)>>2)];
      var $end5=(($15+12)|0);
      var $16=$end5;
      var $17=$end;
      assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_range_eq($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $rr;
      var $ro;
      var $obj=__stackBase__;
      var $eq_p;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((107908)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj,tempInt));
      var $1=$mrb_addr;
      var $call1=_mrb_obj_equal($1, $range, $obj);
      var $tobool=(($call1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $eq_p=1;
      label = 13; break;
    case 4: 
      var $2=$mrb_addr;
      var $3=$mrb_addr;
      var $call2=_mrb_obj_class($3, $range);
      var $call3=_mrb_obj_is_instance_of($2, $obj, $call2);
      var $tobool4=(($call3)|(0))!=0;
      if ($tobool4) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $eq_p=0;
      label = 12; break;
    case 6: 
      var $value=(($range)|0);
      var $p=$value;
      var $4=HEAP32[(($p)>>2)];
      var $5=$4;
      $rr=$5;
      var $value7=(($obj)|0);
      var $p8=$value7;
      var $6=HEAP32[(($p8)>>2)];
      var $7=$6;
      $ro=$7;
      var $8=$mrb_addr;
      var $9=$rr;
      var $edges=(($9+12)|0);
      var $10=HEAP32[(($edges)>>2)];
      var $beg=(($10)|0);
      var $11=$ro;
      var $edges9=(($11+12)|0);
      var $12=HEAP32[(($edges9)>>2)];
      var $beg10=(($12)|0);
      var $call11=_mrb_obj_equal($8, $beg, $beg10);
      var $tobool12=(($call11)|(0))!=0;
      if ($tobool12) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $13=$mrb_addr;
      var $14=$rr;
      var $edges13=(($14+12)|0);
      var $15=HEAP32[(($edges13)>>2)];
      var $end=(($15+12)|0);
      var $16=$ro;
      var $edges14=(($16+12)|0);
      var $17=HEAP32[(($edges14)>>2)];
      var $end15=(($17+12)|0);
      var $call16=_mrb_obj_equal($13, $end, $end15);
      var $tobool17=(($call16)|(0))!=0;
      if ($tobool17) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $18=$rr;
      var $excl=(($18+16)|0);
      var $19=HEAP32[(($excl)>>2)];
      var $20=$ro;
      var $excl19=(($20+16)|0);
      var $21=HEAP32[(($excl19)>>2)];
      var $cmp=(($19)|(0))!=(($21)|(0));
      if ($cmp) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $eq_p=0;
      label = 11; break;
    case 10: 
      $eq_p=1;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $22=$eq_p;
      _mrb_bool_value1341($agg_result, $22);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_range_include($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $val=__stackBase__;
      var $r;
      var $beg=(__stackBase__)+(12);
      var $end=(__stackBase__)+(24);
      var $include_p;
      $mrb_addr=$mrb;
      var $value=(($range)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $r=$1;
      var $2=$mrb_addr;
      var $call=_mrb_get_args($2, ((107908)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$val,tempInt));
      var $3=$r;
      var $edges=(($3+12)|0);
      var $4=HEAP32[(($edges)>>2)];
      var $beg1=(($4)|0);
      var $5=$beg;
      var $6=$beg1;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      var $7=$r;
      var $edges2=(($7+12)|0);
      var $8=HEAP32[(($edges2)>>2)];
      var $end3=(($8+12)|0);
      var $9=$end;
      var $10=$end3;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      var $11=$mrb_addr;
      var $call4=_r_le($11, $beg, $val);
      var $tobool=(($call4)|(0))!=0;
      if ($tobool) { label = 3; break; } else { var $17 = 0;label = 7; break; }
    case 3: 
      var $12=$r;
      var $excl=(($12+16)|0);
      var $13=HEAP32[(($excl)>>2)];
      var $tobool5=(($13)|(0))!=0;
      if ($tobool5) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $14=$mrb_addr;
      var $call6=_r_gt($14, $end, $val);
      var $tobool7=(($call6)|(0))!=0;
      if ($tobool7) { var $16 = 1;label = 6; break; } else { label = 5; break; }
    case 5: 
      var $15=$mrb_addr;
      var $call8=_r_ge($15, $end, $val);
      var $tobool9=(($call8)|(0))!=0;
      var $16 = $tobool9;label = 6; break;
    case 6: 
      var $16;
      var $17 = $16;label = 7; break;
    case 7: 
      var $17;
      var $land_ext=(($17)&(1));
      var $conv=(($land_ext) & 255);
      $include_p=$conv;
      var $18=$include_p;
      _mrb_bool_value1341($agg_result, $18);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _r_le($mrb, $a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $r=__stackBase__;
      var $c;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      _mrb_funcall($r, $0, $a, ((107272)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($b)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($b)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($b)+(8))>>2)],tempInt));
      var $tt=(($r+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==3;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $value=(($r)|0);
      var $i=$value;
      var $2=HEAP32[(($i)>>2)];
      $c=$2;
      var $3=$c;
      var $cmp1=(($3)|(0))==0;
      if ($cmp1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$c;
      var $cmp2=(($4)|(0))==-1;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=1;
      label = 8; break;
    case 6: 
      label = 7; break;
    case 7: 
      $retval=0;
      label = 8; break;
    case 8: 
      var $5=$retval;
      STACKTOP = __stackBase__;
      return $5;
    default: assert(0, "bad label: " + label);
  }
}
function _r_gt($mrb, $a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $r=__stackBase__;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      _mrb_funcall($r, $0, $a, ((107272)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($b)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($b)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($b)+(8))>>2)],tempInt));
      var $tt=(($r+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==3;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $value=(($r)|0);
      var $i=$value;
      var $2=HEAP32[(($i)>>2)];
      var $cmp1=(($2)|(0))==1;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $retval=1;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $3=$retval;
      STACKTOP = __stackBase__;
      return $3;
    default: assert(0, "bad label: " + label);
  }
}
function _r_ge($mrb, $a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $r=__stackBase__;
      var $c;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      _mrb_funcall($r, $0, $a, ((107272)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($b)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($b)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($b)+(8))>>2)],tempInt));
      var $tt=(($r+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==3;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $value=(($r)|0);
      var $i=$value;
      var $2=HEAP32[(($i)>>2)];
      $c=$2;
      var $3=$c;
      var $cmp1=(($3)|(0))==0;
      if ($cmp1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$c;
      var $cmp2=(($4)|(0))==1;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=1;
      label = 8; break;
    case 6: 
      label = 7; break;
    case 7: 
      $retval=0;
      label = 8; break;
    case 8: 
      var $5=$retval;
      STACKTOP = __stackBase__;
      return $5;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_range_each($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$agg_result;
  var $1=$range;
  assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mruby_array_ext_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  return;
}
function _GENERATED_TMP_mrb_mruby_bin_mirb_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  return;
}
function _mrb_range_beg_len($mrb, $range, $begp, $lenp, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $begp_addr;
      var $lenp_addr;
      var $len_addr;
      var $beg;
      var $end;
      var $b;
      var $e;
      var $r;
      $mrb_addr=$mrb;
      $begp_addr=$begp;
      $lenp_addr=$lenp;
      $len_addr=$len;
      var $value=(($range)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $r=$1;
      var $tt=(($range+8)|0);
      var $2=HEAP32[(($tt)>>2)];
      var $cmp=(($2)|(0))!=17;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call=_mrb_class_get($4, ((104412)|0));
      _mrb_raise($3, $call, ((101672)|0));
      label = 4; break;
    case 4: 
      var $5=$r;
      var $edges=(($5+12)|0);
      var $6=HEAP32[(($edges)>>2)];
      var $beg1=(($6)|0);
      var $value2=(($beg1)|0);
      var $i=$value2;
      var $7=HEAP32[(($i)>>2)];
      $b=$7;
      $beg=$7;
      var $8=$r;
      var $edges3=(($8+12)|0);
      var $9=HEAP32[(($edges3)>>2)];
      var $end4=(($9+12)|0);
      var $value5=(($end4)|0);
      var $i6=$value5;
      var $10=HEAP32[(($i6)>>2)];
      $e=$10;
      $end=$10;
      var $11=$beg;
      var $cmp7=(($11)|(0)) < 0;
      if ($cmp7) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $12=$len_addr;
      var $13=$beg;
      var $add=((($13)+($12))|0);
      $beg=$add;
      var $14=$beg;
      var $cmp9=(($14)|(0)) < 0;
      if ($cmp9) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 20; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $15=$beg;
      var $16=$len_addr;
      var $cmp13=(($15)|(0)) > (($16)|(0));
      if ($cmp13) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 20; break;
    case 10: 
      var $17=$end;
      var $18=$len_addr;
      var $cmp16=(($17)|(0)) > (($18)|(0));
      if ($cmp16) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $19=$len_addr;
      $end=$19;
      label = 12; break;
    case 12: 
      var $20=$end;
      var $cmp19=(($20)|(0)) < 0;
      if ($cmp19) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $21=$len_addr;
      var $22=$end;
      var $add21=((($22)+($21))|0);
      $end=$add21;
      label = 14; break;
    case 14: 
      var $23=$r;
      var $excl=(($23+16)|0);
      var $24=HEAP32[(($excl)>>2)];
      var $tobool=(($24)|(0))!=0;
      if ($tobool) { label = 17; break; } else { label = 15; break; }
    case 15: 
      var $25=$end;
      var $26=$len_addr;
      var $cmp23=(($25)|(0)) < (($26)|(0));
      if ($cmp23) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $27=$end;
      var $inc=((($27)+(1))|0);
      $end=$inc;
      label = 17; break;
    case 17: 
      var $28=$end;
      var $29=$beg;
      var $sub=((($28)-($29))|0);
      $len_addr=$sub;
      var $30=$len_addr;
      var $cmp26=(($30)|(0)) < 0;
      if ($cmp26) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $len_addr=0;
      label = 19; break;
    case 19: 
      var $31=$beg;
      var $32=$begp_addr;
      HEAP32[(($32)>>2)]=$31;
      var $33=$len_addr;
      var $34=$lenp_addr;
      HEAP32[(($34)>>2)]=$33;
      $retval=1;
      label = 21; break;
    case 20: 
      $retval=0;
      label = 21; break;
    case 21: 
      var $35=$retval;
      STACKTOP = __stackBase__;
      return $35;
    default: assert(0, "bad label: " + label);
  }
}
function _range_initialize_copy($agg_result, $mrb, $copy) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $copy; $copy = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($copy)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($copy)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($copy)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $src=__stackBase__;
      var $r;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((107908)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$src,tempInt));
      var $1=$mrb_addr;
      var $call1=_mrb_obj_equal($1, $copy, $src);
      var $tobool=(($call1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$agg_result;
      var $3=$copy;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      label = 7; break;
    case 4: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call2=_mrb_obj_class($5, $copy);
      var $call3=_mrb_obj_is_instance_of($4, $src, $call2);
      var $tobool4=(($call3)|(0))!=0;
      if ($tobool4) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $6=$mrb_addr;
      var $7=$mrb_addr;
      var $call6=_mrb_class_get($7, ((104412)|0));
      _mrb_raise($6, $call6, ((99080)|0));
      label = 6; break;
    case 6: 
      var $value=(($src)|0);
      var $p=$value;
      var $8=HEAP32[(($p)>>2)];
      var $9=$8;
      $r=$9;
      var $10=$mrb_addr;
      var $11=$r;
      var $edges=(($11+12)|0);
      var $12=HEAP32[(($edges)>>2)];
      var $beg=(($12)|0);
      var $13=$r;
      var $edges8=(($13+12)|0);
      var $14=HEAP32[(($edges8)>>2)];
      var $end=(($14+12)|0);
      var $15=$r;
      var $excl=(($15+16)|0);
      var $16=HEAP32[(($excl)>>2)];
      _range_init($10, $copy, $beg, $end, $16);
      var $17=$agg_result;
      var $18=$copy;
      assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_range($mrb) {
  var label = 0;
  var $mrb_addr;
  var $r;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $object_class=(($1+44)|0);
  var $2=HEAP32[(($object_class)>>2)];
  var $call=_mrb_define_class($0, ((111788)|0), $2);
  $r=$call;
  var $3=$r;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=$5 >>> 11;
  var $bf_clear=$6 & 2097151;
  var $and=$bf_clear & -256;
  var $or=$and | 17;
  var $7=$r;
  var $bf_value=$or & 2097151;
  var $8=$7;
  var $9=$bf_value & 2097151;
  var $10=$9 << 11;
  var $11=HEAP32[(($8)>>2)];
  var $12=$11 & 2047;
  var $13=$12 | $10;
  HEAP32[(($8)>>2)]=$13;
  var $14=$mrb_addr;
  var $15=$r;
  var $16=$mrb_addr;
  var $call1=_mrb_class_get($16, ((97008)|0));
  _mrb_include_module($14, $15, $call1);
  var $17=$mrb_addr;
  var $18=$r;
  _mrb_define_method($17, $18, ((95820)|0), 628, 0);
  var $19=$mrb_addr;
  var $20=$r;
  _mrb_define_method($19, $20, ((94800)|0), 604, 0);
  var $21=$mrb_addr;
  var $22=$r;
  _mrb_define_method($21, $22, ((93992)|0), 658, 262144);
  var $23=$mrb_addr;
  var $24=$r;
  _mrb_define_method($23, $24, ((113768)|0), 182, 262144);
  var $25=$mrb_addr;
  var $26=$r;
  _mrb_define_method($25, $26, ((113172)|0), 76, 0);
  var $27=$mrb_addr;
  var $28=$r;
  _mrb_define_method($27, $28, ((112304)|0), 124, 0);
  var $29=$mrb_addr;
  var $30=$r;
  _mrb_define_method($29, $30, ((111728)|0), 628, 0);
  var $31=$mrb_addr;
  var $32=$r;
  _mrb_define_method($31, $32, ((111196)|0), 182, 262144);
  var $33=$mrb_addr;
  var $34=$r;
  _mrb_define_method($33, $34, ((110688)|0), 390, 4096);
  var $35=$mrb_addr;
  var $36=$r;
  _mrb_define_method($35, $36, ((110260)|0), 604, 0);
  var $37=$mrb_addr;
  var $38=$r;
  _mrb_define_method($37, $38, ((109832)|0), 182, 262144);
  var $39=$mrb_addr;
  var $40=$r;
  _mrb_define_method($39, $40, ((109396)|0), 198, 0);
  var $41=$mrb_addr;
  var $42=$r;
  _mrb_define_method($41, $42, ((108940)|0), 254, 0);
  var $43=$mrb_addr;
  var $44=$r;
  _mrb_define_method($43, $44, ((108408)|0), 92, 262144);
  var $45=$mrb_addr;
  var $46=$r;
  _mrb_define_method($45, $46, ((108076)|0), 710, 262144);
  return;
}
function _range_to_s($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 84)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $str=__stackBase__;
  var $str2=(__stackBase__)+(12);
  var $r;
  var $tmp=(__stackBase__)+(24);
  var $tmp2=(__stackBase__)+(36);
  var $tmp3=(__stackBase__)+(48);
  var $tmp4=(__stackBase__)+(60);
  var $tmp5=(__stackBase__)+(72);
  $mrb_addr=$mrb;
  var $value=(($range)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  $r=$1;
  var $2=$mrb_addr;
  var $3=$r;
  var $edges=(($3+12)|0);
  var $4=HEAP32[(($edges)>>2)];
  var $beg=(($4)|0);
  _mrb_obj_as_string($tmp, $2, $beg);
  var $5=$str;
  var $6=$tmp;
  assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
  var $7=$mrb_addr;
  var $8=$r;
  var $edges1=(($8+12)|0);
  var $9=HEAP32[(($edges1)>>2)];
  var $end=(($9+12)|0);
  _mrb_obj_as_string($tmp2, $7, $end);
  var $10=$str2;
  var $11=$tmp2;
  assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
  var $12=$mrb_addr;
  _mrb_str_dup($tmp3, $12, $str);
  var $13=$str;
  var $14=$tmp3;
  assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
  var $15=$mrb_addr;
  var $16=$r;
  var $excl=(($16+16)|0);
  var $17=HEAP32[(($excl)>>2)];
  var $tobool=(($17)|(0))!=0;
  var $cond=$tobool ? 3 : 2;
  _mrb_str_cat($tmp4, $15, $str, ((107540)|0), $cond);
  var $18=$mrb_addr;
  _mrb_str_append($tmp5, $18, $str, $str2);
  var $19=$agg_result;
  var $20=$str;
  assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _range_inspect($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _inspect_range($agg_result, $0, $range, 0);
  STACKTOP = __stackBase__;
  return;
}
function _range_eql($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $obj=__stackBase__;
      var $r;
      var $o;
      var $eql_p;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((107908)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj,tempInt));
      var $1=$mrb_addr;
      var $call1=_mrb_obj_equal($1, $range, $obj);
      var $tobool=(($call1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $eql_p=1;
      label = 16; break;
    case 4: 
      var $2=$mrb_addr;
      var $3=$mrb_addr;
      var $call2=_mrb_class_get($3, ((111788)|0));
      var $call3=_mrb_obj_is_kind_of($2, $obj, $call2);
      var $tobool4=(($call3)|(0))!=0;
      if ($tobool4) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $eql_p=0;
      label = 15; break;
    case 6: 
      var $value=(($range)|0);
      var $p=$value;
      var $4=HEAP32[(($p)>>2)];
      var $5=$4;
      $r=$5;
      var $tt=(($obj+8)|0);
      var $6=HEAP32[(($tt)>>2)];
      var $cmp=(($6)|(0))!=17;
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $eql_p=0;
      label = 14; break;
    case 8: 
      var $value9=(($obj)|0);
      var $p10=$value9;
      var $7=HEAP32[(($p10)>>2)];
      var $8=$7;
      $o=$8;
      var $9=$mrb_addr;
      var $10=$r;
      var $edges=(($10+12)|0);
      var $11=HEAP32[(($edges)>>2)];
      var $beg=(($11)|0);
      var $12=$o;
      var $edges11=(($12+12)|0);
      var $13=HEAP32[(($edges11)>>2)];
      var $beg12=(($13)|0);
      var $call13=_mrb_eql($9, $beg, $beg12);
      var $tobool14=(($call13)|(0))!=0;
      if ($tobool14) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $14=$mrb_addr;
      var $15=$r;
      var $edges15=(($15+12)|0);
      var $16=HEAP32[(($edges15)>>2)];
      var $end=(($16+12)|0);
      var $17=$o;
      var $edges16=(($17+12)|0);
      var $18=HEAP32[(($edges16)>>2)];
      var $end17=(($18+12)|0);
      var $call18=_mrb_eql($14, $end, $end17);
      var $tobool19=(($call18)|(0))!=0;
      if ($tobool19) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $19=$r;
      var $excl=(($19+16)|0);
      var $20=HEAP32[(($excl)>>2)];
      var $21=$o;
      var $excl21=(($21+16)|0);
      var $22=HEAP32[(($excl21)>>2)];
      var $cmp22=(($20)|(0))!=(($22)|(0));
      if ($cmp22) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $eql_p=0;
      label = 13; break;
    case 12: 
      $eql_p=1;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $23=$eql_p;
      _mrb_bool_value1341($agg_result, $23);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _inspect_range($agg_result, $mrb, $range, $recur) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 84)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $recur_addr;
      var $str=__stackBase__;
      var $str2=(__stackBase__)+(12);
      var $r;
      var $idx;
      var $tmp=(__stackBase__)+(24);
      var $tmp4=(__stackBase__)+(36);
      var $tmp5=(__stackBase__)+(48);
      var $tmp9=(__stackBase__)+(60);
      var $tmp10=(__stackBase__)+(72);
      $mrb_addr=$mrb;
      $recur_addr=$recur;
      var $value=(($range)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $r=$1;
      var $2=$recur_addr;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$r;
      var $excl=(($3+16)|0);
      var $4=HEAP32[(($excl)>>2)];
      var $tobool1=(($4)|(0))!=0;
      var $cond=$tobool1 ? 0 : 1;
      $idx=$cond;
      var $5=$mrb_addr;
      var $6=$idx;
      var $arrayidx=((80388+((($6)*(14))&-1))|0);
      var $arraydecay=(($arrayidx)|0);
      var $7=$idx;
      var $arrayidx2=((80416+($7<<2))|0);
      var $8=HEAP32[(($arrayidx2)>>2)];
      _mrb_str_new($agg_result, $5, $arraydecay, $8);
      label = 5; break;
    case 4: 
      var $9=$mrb_addr;
      var $10=$r;
      var $edges=(($10+12)|0);
      var $11=HEAP32[(($edges)>>2)];
      var $beg=(($11)|0);
      _mrb_inspect($tmp, $9, $beg);
      var $12=$str;
      var $13=$tmp;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      var $14=$mrb_addr;
      var $15=$r;
      var $edges3=(($15+12)|0);
      var $16=HEAP32[(($edges3)>>2)];
      var $end=(($16+12)|0);
      _mrb_inspect($tmp4, $14, $end);
      var $17=$str2;
      var $18=$tmp4;
      assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
      var $19=$mrb_addr;
      _mrb_str_dup($tmp5, $19, $str);
      var $20=$str;
      var $21=$tmp5;
      assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
      var $22=$mrb_addr;
      var $23=$r;
      var $excl6=(($23+16)|0);
      var $24=HEAP32[(($excl6)>>2)];
      var $tobool7=(($24)|(0))!=0;
      var $cond8=$tobool7 ? 3 : 2;
      _mrb_str_cat($tmp9, $22, $str, ((107540)|0), $cond8);
      var $25=$mrb_addr;
      _mrb_str_append($tmp10, $25, $str, $str2);
      var $26=$agg_result;
      var $27=$str;
      assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_mrbgems($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_sprintf_gem_init($0);
  var $1=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_print_gem_init($1);
  var $2=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_array_ext_gem_init($2);
  var $3=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_bin_mirb_gem_init($3);
  var $4=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_bin_mruby_gem_init($4);
  var $5=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_enum_ext_gem_init($5);
  var $6=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_eval_gem_init($6);
  var $7=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_fiber_gem_init($7);
  var $8=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_hash_ext_gem_init($8);
  var $9=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_math_gem_init($9);
  var $10=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_numeric_ext_gem_init($10);
  var $11=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_objectspace_gem_init($11);
  var $12=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_proc_ext_gem_init($12);
  var $13=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_random_gem_init($13);
  var $14=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_range_ext_gem_init($14);
  var $15=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_string_ext_gem_init($15);
  var $16=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_struct_gem_init($16);
  var $17=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_symbol_ext_gem_init($17);
  var $18=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_time_gem_init($18);
  var $19=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_js_gem_init($19);
  return;
}
function _mrb_final_mrbgems($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_sprintf_gem_final($0);
  var $1=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_print_gem_final($1);
  var $2=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_array_ext_gem_final($2);
  var $3=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_bin_mirb_gem_final($3);
  var $4=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_bin_mruby_gem_final($4);
  var $5=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_enum_ext_gem_final($5);
  var $6=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_eval_gem_final($6);
  var $7=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_fiber_gem_final($7);
  var $8=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_hash_ext_gem_final($8);
  var $9=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_math_gem_final($9);
  var $10=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_numeric_ext_gem_final($10);
  var $11=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_objectspace_gem_final($11);
  var $12=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_proc_ext_gem_final($12);
  var $13=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_random_gem_final($13);
  var $14=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_range_ext_gem_final($14);
  var $15=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_string_ext_gem_final($15);
  var $16=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_struct_gem_final($16);
  var $17=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_symbol_ext_gem_final($17);
  var $18=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_time_gem_final($18);
  var $19=$mrb_addr;
  _GENERATED_TMP_mrb_mruby_js_gem_final($19);
  return;
}
function _mrb_obj_value1352($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_array_ext_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_mruby_array_ext_gem_final($0);
  return;
}
function _mrb_mruby_array_ext_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $a;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $array_class=(($0+64)|0);
  var $1=HEAP32[(($array_class)>>2)];
  $a=$1;
  var $2=$mrb_addr;
  var $3=$a;
  _mrb_define_class_method($2, $3, ((111412)|0), 296, 262144);
  var $4=$mrb_addr;
  var $5=$a;
  _mrb_define_method($4, $5, ((112912)|0), 20, 262144);
  var $6=$mrb_addr;
  var $7=$a;
  _mrb_define_method($6, $7, ((107904)|0), 476, 262144);
  var $8=$mrb_addr;
  var $9=$a;
  _mrb_define_method($8, $9, ((104404)|0), 520, 262144);
  return;
}
function _mrb_ary_s_try_convert($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $ary=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((101664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ary,tempInt));
  var $1=$mrb_addr;
  _mrb_check_array_type($agg_result, $1, $ary);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_assoc($agg_result, $mrb, $ary) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $i;
      var $v=__stackBase__;
      var $k=(__stackBase__)+(12);
      var $tmp=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((101664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$k,tempInt));
      $i=0;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $value=(($ary)|0);
      var $p=$value;
      var $2=HEAP32[(($p)>>2)];
      var $3=$2;
      var $len=(($3+12)|0);
      var $4=HEAP32[(($len)>>2)];
      var $cmp=(($1)|(0)) < (($4)|(0));
      if ($cmp) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $5=$mrb_addr;
      var $6=$i;
      var $value1=(($ary)|0);
      var $p2=$value1;
      var $7=HEAP32[(($p2)>>2)];
      var $8=$7;
      var $ptr=(($8+20)|0);
      var $9=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($9+((($6)*(12))&-1))|0);
      _mrb_check_array_type($tmp, $5, $arrayidx);
      var $10=$v;
      var $11=$tmp;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      var $tt=(($v+8)|0);
      var $12=HEAP32[(($tt)>>2)];
      var $cmp3=(($12)|(0))==0;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $value4=(($v)|0);
      var $i5=$value4;
      var $13=HEAP32[(($i5)>>2)];
      var $tobool=(($13)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $value7=(($v)|0);
      var $p8=$value7;
      var $14=HEAP32[(($p8)>>2)];
      var $15=$14;
      var $len9=(($15+12)|0);
      var $16=HEAP32[(($len9)>>2)];
      var $cmp10=(($16)|(0)) > 0;
      if ($cmp10) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $17=$mrb_addr;
      var $value12=(($v)|0);
      var $p13=$value12;
      var $18=HEAP32[(($p13)>>2)];
      var $19=$18;
      var $ptr14=(($19+20)|0);
      var $20=HEAP32[(($ptr14)>>2)];
      var $arrayidx15=(($20)|0);
      var $call16=_mrb_equal($17, $arrayidx15, $k);
      var $tobool17=(($call16)|(0))!=0;
      if ($tobool17) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $21=$agg_result;
      var $22=$v;
      assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
      label = 12; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $23=$i;
      var $inc=((($23)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 11: 
      _mrb_nil_value1365($agg_result);
      label = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_at($agg_result, $mrb, $ary) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $pos=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((99076)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pos,tempInt));
  var $1=HEAP32[(($pos)>>2)];
  _mrb_ary_entry($agg_result, $ary, $1);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_rassoc($agg_result, $mrb, $ary) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $i;
      var $v=__stackBase__;
      var $value=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((101664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$value,tempInt));
      $i=0;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $value1=(($ary)|0);
      var $p=$value1;
      var $2=HEAP32[(($p)>>2)];
      var $3=$2;
      var $len=(($3+12)|0);
      var $4=HEAP32[(($len)>>2)];
      var $cmp=(($1)|(0)) < (($4)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $5=$i;
      var $value2=(($ary)|0);
      var $p3=$value2;
      var $6=HEAP32[(($p3)>>2)];
      var $7=$6;
      var $ptr=(($7+20)|0);
      var $8=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($8+((($5)*(12))&-1))|0);
      var $9=$v;
      var $10=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      var $tt=(($v+8)|0);
      var $11=HEAP32[(($tt)>>2)];
      var $cmp4=(($11)|(0))==14;
      if ($cmp4) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $value5=(($v)|0);
      var $p6=$value5;
      var $12=HEAP32[(($p6)>>2)];
      var $13=$12;
      var $len7=(($13+12)|0);
      var $14=HEAP32[(($len7)>>2)];
      var $cmp8=(($14)|(0)) > 1;
      if ($cmp8) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $15=$mrb_addr;
      var $value10=(($v)|0);
      var $p11=$value10;
      var $16=HEAP32[(($p11)>>2)];
      var $17=$16;
      var $ptr12=(($17+20)|0);
      var $18=HEAP32[(($ptr12)>>2)];
      var $arrayidx13=(($18+12)|0);
      var $call14=_mrb_equal($15, $arrayidx13, $value);
      var $tobool=(($call14)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $19=$agg_result;
      var $20=$v;
      assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
      label = 11; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $21=$i;
      var $inc=((($21)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 10: 
      _mrb_nil_value1365($agg_result);
      label = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1365($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_bin_mirb_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $ai;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_gc_arena_save($0);
  $ai=$call;
  var $1=$mrb_addr;
  var $2=$ai;
  _mrb_gc_arena_restore($1, $2);
  return;
}
function _GENERATED_TMP_mrb_mruby_bin_mruby_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $ai;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_gc_arena_save($0);
  $ai=$call;
  var $1=$mrb_addr;
  var $2=$ai;
  _mrb_gc_arena_restore($1, $2);
  return;
}
function _GENERATED_TMP_mrb_mruby_array_ext_gem_init($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ai;
      var $tmp=__stackBase__;
      var $agg_tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_gc_arena_save($0);
      $ai=$call;
      var $1=$mrb_addr;
      _mrb_mruby_array_ext_gem_init($1);
      var $2=$mrb_addr;
      _mrb_load_irep($tmp, $2, ((90692)|0));
      var $3=$mrb_addr;
      var $exc=(($3+16)|0);
      var $4=HEAP32[(($exc)>>2)];
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$mrb_addr;
      _mrb_print_backtrace($5);
      var $6=$mrb_addr;
      var $7=$mrb_addr;
      var $exc1=(($7+16)|0);
      var $8=HEAP32[(($exc1)>>2)];
      var $9=$8;
      _mrb_obj_value1352($agg_tmp, $9);
      _mrb_p($6, $agg_tmp);
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $10=$mrb_addr;
      var $11=$ai;
      _mrb_gc_arena_restore($10, $11);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_bin_mruby_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  return;
}
function _GENERATED_TMP_mrb_mruby_enum_ext_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  return;
}
function _mrb_mruby_eval_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  return;
}
function _mrb_mruby_fiber_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  return;
}
function _mrb_mruby_hash_ext_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  return;
}
function _mrb_obj_value1376($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_eval_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $ai;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_gc_arena_save($0);
  $ai=$call;
  var $1=$mrb_addr;
  _mrb_mruby_eval_gem_init($1);
  var $2=$mrb_addr;
  var $3=$ai;
  _mrb_gc_arena_restore($2, $3);
  return;
}
function _GENERATED_TMP_mrb_mruby_eval_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_mruby_eval_gem_final($0);
  return;
}
function _mrb_mruby_eval_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $kernel_module=(($1+96)|0);
  var $2=HEAP32[(($kernel_module)>>2)];
  _mrb_define_class_method($0, $2, ((111316)|0), 428, 262144);
  return;
}
function _f_eval($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $s=__stackBase__;
  var $len=(__stackBase__)+(4);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((112908)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$s,HEAP32[(((tempInt)+(4))>>2)]=$len,tempInt));
  var $1=$mrb_addr;
  var $2=HEAP32[(($s)>>2)];
  var $3=HEAP32[(($len)>>2)];
  _mrb_load_nstring($agg_result, $1, $2, $3);
  STACKTOP = __stackBase__;
  return;
}
function _GENERATED_TMP_mrb_mruby_fiber_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $ai;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_gc_arena_save($0);
  $ai=$call;
  var $1=$mrb_addr;
  _mrb_mruby_fiber_gem_init($1);
  var $2=$mrb_addr;
  var $3=$ai;
  _mrb_gc_arena_restore($2, $3);
  return;
}
function _GENERATED_TMP_mrb_mruby_fiber_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_mruby_fiber_gem_final($0);
  return;
}
function _mrb_mruby_fiber_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $c;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $object_class=(($1+44)|0);
  var $2=HEAP32[(($object_class)>>2)];
  var $call=_mrb_define_class($0, ((111288)|0), $2);
  $c=$call;
  var $3=$c;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=$5 >>> 11;
  var $bf_clear=$6 & 2097151;
  var $and=$bf_clear & -256;
  var $or=$and | 22;
  var $7=$c;
  var $bf_value=$or & 2097151;
  var $8=$7;
  var $9=$bf_value & 2097151;
  var $10=$9 << 11;
  var $11=HEAP32[(($8)>>2)];
  var $12=$11 & 2047;
  var $13=$12 | $10;
  HEAP32[(($8)>>2)]=$13;
  var $14=$mrb_addr;
  var $15=$c;
  _mrb_define_method($14, $15, ((112896)|0), 250, 0);
  var $16=$mrb_addr;
  var $17=$c;
  _mrb_define_method($16, $17, ((107896)|0), 230, 4096);
  var $18=$mrb_addr;
  var $19=$c;
  _mrb_define_class_method($18, $19, ((104396)|0), 82, 4096);
  return;
}
function _fiber_init($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $f;
      var $c;
      var $p1;
      var $ci;
      var $blk=__stackBase__;
      $mrb_addr=$mrb;
      var $value=(($self)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $f=$1;
      var $2=$mrb_addr;
      var $call=_mrb_get_args($2, ((113148)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$blk,tempInt));
      var $tt=(($blk+8)|0);
      var $3=HEAP32[(($tt)>>2)];
      var $cmp=(($3)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $value2=(($blk)|0);
      var $i=$value2;
      var $4=HEAP32[(($i)>>2)];
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $5=$mrb_addr;
      var $6=$mrb_addr;
      var $call3=_mrb_class_get($6, ((101648)|0));
      _mrb_raise($5, $call3, ((112240)|0));
      label = 5; break;
    case 5: 
      var $value4=(($blk)|0);
      var $p5=$value4;
      var $7=HEAP32[(($p5)>>2)];
      var $8=$7;
      $p1=$8;
      var $9=$p1;
      var $10=$9;
      var $11=HEAP32[(($10)>>2)];
      var $12=$11 >>> 11;
      var $bf_clear=$12 & 2097151;
      var $and=$bf_clear & 128;
      var $cmp6=(($and)|(0))!=0;
      if ($cmp6) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $13=$mrb_addr;
      var $14=$mrb_addr;
      var $call8=_mrb_class_get($14, ((101648)|0));
      _mrb_raise($13, $call8, ((111640)|0));
      label = 7; break;
    case 7: 
      var $15=$mrb_addr;
      var $call10=_mrb_malloc($15, 52);
      var $16=$call10;
      var $17=$f;
      var $cxt=(($17+12)|0);
      HEAP32[(($cxt)>>2)]=$16;
      var $18=$f;
      var $cxt11=(($18+12)|0);
      var $19=HEAP32[(($cxt11)>>2)];
      var $20=$19;
      assert(52 % 1 === 0);_memcpy($20, 92916, 52);
      var $21=$f;
      var $cxt12=(($21+12)|0);
      var $22=HEAP32[(($cxt12)>>2)];
      $c=$22;
      var $23=$mrb_addr;
      var $call13=_mrb_calloc($23, 64, 12);
      var $24=$call13;
      var $25=$c;
      var $stbase=(($25+8)|0);
      HEAP32[(($stbase)>>2)]=$24;
      var $26=$c;
      var $stbase14=(($26+8)|0);
      var $27=HEAP32[(($stbase14)>>2)];
      var $add_ptr=(($27+768)|0);
      var $28=$c;
      var $stend=(($28+12)|0);
      HEAP32[(($stend)>>2)]=$add_ptr;
      var $29=$c;
      var $stbase15=(($29+8)|0);
      var $30=HEAP32[(($stbase15)>>2)];
      var $31=$c;
      var $stack=(($31+4)|0);
      HEAP32[(($stack)>>2)]=$30;
      var $32=$c;
      var $stack16=(($32+4)|0);
      var $33=HEAP32[(($stack16)>>2)];
      var $arrayidx=(($33)|0);
      var $34=$mrb_addr;
      var $c17=(($34+8)|0);
      var $35=HEAP32[(($c17)>>2)];
      var $stack18=(($35+4)|0);
      var $36=HEAP32[(($stack18)>>2)];
      var $arrayidx19=(($36)|0);
      var $37=$arrayidx;
      var $38=$arrayidx19;
      assert(12 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];HEAP32[((($37)+(8))>>2)]=HEAP32[((($38)+(8))>>2)];
      var $39=$mrb_addr;
      var $call20=_mrb_calloc($39, 8, 44);
      var $40=$call20;
      var $41=$c;
      var $cibase=(($41+20)|0);
      HEAP32[(($cibase)>>2)]=$40;
      var $42=$c;
      var $cibase21=(($42+20)|0);
      var $43=HEAP32[(($cibase21)>>2)];
      var $add_ptr22=(($43+352)|0);
      var $44=$c;
      var $ciend=(($44+24)|0);
      HEAP32[(($ciend)>>2)]=$add_ptr22;
      var $45=$c;
      var $cibase23=(($45+20)|0);
      var $46=HEAP32[(($cibase23)>>2)];
      var $47=$c;
      var $ci24=(($47+16)|0);
      HEAP32[(($ci24)>>2)]=$46;
      var $48=$c;
      var $ci25=(($48+16)|0);
      var $49=HEAP32[(($ci25)>>2)];
      $ci=$49;
      var $50=$p1;
      var $target_class=(($50+16)|0);
      var $51=HEAP32[(($target_class)>>2)];
      var $52=$ci;
      var $target_class26=(($52+28)|0);
      HEAP32[(($target_class26)>>2)]=$51;
      var $53=$p1;
      var $54=$ci;
      var $proc=(($54+4)|0);
      HEAP32[(($proc)>>2)]=$53;
      var $55=$p1;
      var $body=(($55+12)|0);
      var $irep=$body;
      var $56=HEAP32[(($irep)>>2)];
      var $iseq=(($56+12)|0);
      var $57=HEAP32[(($iseq)>>2)];
      var $58=$ci;
      var $pc=(($58+20)|0);
      HEAP32[(($pc)>>2)]=$57;
      var $59=$p1;
      var $body27=(($59+12)|0);
      var $irep28=$body27;
      var $60=HEAP32[(($irep28)>>2)];
      var $nregs=(($60+6)|0);
      var $61=HEAP16[(($nregs)>>1)];
      var $conv=(($61)&(65535));
      var $62=$ci;
      var $nregs29=(($62+12)|0);
      HEAP32[(($nregs29)>>2)]=$conv;
      var $63=$ci;
      var $arrayidx30=(($63+44)|0);
      var $64=$ci;
      var $arrayidx31=(($64)|0);
      var $65=$arrayidx30;
      var $66=$arrayidx31;
      assert(44 % 1 === 0);_memcpy($65, $66, 44);
      var $67=$c;
      var $ci32=(($67+16)|0);
      var $68=HEAP32[(($ci32)>>2)];
      var $incdec_ptr=(($68+44)|0);
      HEAP32[(($ci32)>>2)]=$incdec_ptr;
      var $69=$f;
      var $70=$c;
      var $fib=(($70+48)|0);
      HEAP32[(($fib)>>2)]=$69;
      var $71=$c;
      var $status=(($71+44)|0);
      HEAP8[($status)]=0;
      var $72=$agg_result;
      var $73=$self;
      assert(12 % 1 === 0);HEAP32[(($72)>>2)]=HEAP32[(($73)>>2)];HEAP32[((($72)+(4))>>2)]=HEAP32[((($73)+(4))>>2)];HEAP32[((($72)+(8))>>2)]=HEAP32[((($73)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fiber_resume($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $c;
      var $a=__stackBase__;
      var $len=(__stackBase__)+(4);
      var $b;
      var $e;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_fiber_check($0, $self);
      $c=$call;
      var $1=$c;
      var $status=(($1+44)|0);
      var $2=HEAP8[($status)];
      var $conv=(($2)&(255));
      var $cmp=(($conv)|(0))==2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call2=_mrb_class_get($4, ((95804)|0));
      _mrb_raise($3, $call2, ((94784)|0));
      label = 4; break;
    case 4: 
      var $5=$c;
      var $status3=(($5+44)|0);
      var $6=HEAP8[($status3)];
      var $conv4=(($6)&(255));
      var $cmp5=(($conv4)|(0))==3;
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$mrb_addr;
      var $8=$mrb_addr;
      var $call8=_mrb_class_get($8, ((95804)|0));
      _mrb_raise($7, $call8, ((93972)|0));
      label = 6; break;
    case 6: 
      var $9=$mrb_addr;
      var $call10=_mrb_get_args($9, ((97004)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$a,HEAP32[(((tempInt)+(4))>>2)]=$len,tempInt));
      var $10=$mrb_addr;
      var $c11=(($10+8)|0);
      var $11=HEAP32[(($c11)>>2)];
      var $status12=(($11+44)|0);
      HEAP8[($status12)]=2;
      var $12=$c;
      var $status13=(($12+44)|0);
      var $13=HEAP8[($status13)];
      var $conv14=(($13)&(255));
      var $cmp15=(($conv14)|(0))==0;
      if ($cmp15) { label = 7; break; } else { label = 13; break; }
    case 7: 
      var $14=$c;
      var $stack=(($14+4)|0);
      var $15=HEAP32[(($stack)>>2)];
      var $add_ptr=(($15+12)|0);
      $b=$add_ptr;
      var $16=$b;
      var $17=HEAP32[(($len)>>2)];
      var $add_ptr18=(($16+((($17)*(12))&-1))|0);
      $e=$add_ptr18;
      label = 8; break;
    case 8: 
      var $18=$b;
      var $19=$e;
      var $cmp19=(($18)>>>(0)) < (($19)>>>(0));
      if ($cmp19) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $20=$b;
      var $incdec_ptr=(($20+12)|0);
      $b=$incdec_ptr;
      var $21=HEAP32[(($a)>>2)];
      var $incdec_ptr21=(($21+12)|0);
      HEAP32[(($a)>>2)]=$incdec_ptr21;
      var $22=$20;
      var $23=$21;
      assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
      label = 8; break;
    case 10: 
      var $24=HEAP32[(($len)>>2)];
      var $25=$c;
      var $cibase=(($25+20)|0);
      var $26=HEAP32[(($cibase)>>2)];
      var $argc=(($26+16)|0);
      HEAP32[(($argc)>>2)]=$24;
      var $27=$mrb_addr;
      var $c22=(($27+8)|0);
      var $28=HEAP32[(($c22)>>2)];
      var $29=$c;
      var $prev=(($29)|0);
      HEAP32[(($prev)>>2)]=$28;
      var $30=$c;
      var $prev23=(($30)|0);
      var $31=HEAP32[(($prev23)>>2)];
      var $fib=(($31+48)|0);
      var $32=HEAP32[(($fib)>>2)];
      var $tobool=(($32)|(0))!=0;
      if ($tobool) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $33=$mrb_addr;
      var $34=$c;
      var $fib25=(($34+48)|0);
      var $35=HEAP32[(($fib25)>>2)];
      var $36=$35;
      var $37=$c;
      var $prev26=(($37)|0);
      var $38=HEAP32[(($prev26)>>2)];
      var $fib27=(($38+48)|0);
      var $39=HEAP32[(($fib27)>>2)];
      var $40=$39;
      _mrb_field_write_barrier($33, $36, $40);
      label = 12; break;
    case 12: 
      var $41=$c;
      var $status29=(($41+44)|0);
      HEAP8[($status29)]=1;
      var $42=$c;
      var $43=$mrb_addr;
      var $c30=(($43+8)|0);
      HEAP32[(($c30)>>2)]=$42;
      var $44=$c;
      var $ci=(($44+16)|0);
      var $45=HEAP32[(($ci)>>2)];
      var $target_class=(($45+28)|0);
      HEAP32[(($target_class)>>2)]=0;
      var $46=$c;
      var $ci31=(($46+16)|0);
      var $47=HEAP32[(($ci31)>>2)];
      var $proc=(($47+4)|0);
      var $48=HEAP32[(($proc)>>2)];
      var $env=(($48+20)|0);
      var $49=HEAP32[(($env)>>2)];
      var $stack32=(($49+12)|0);
      var $50=HEAP32[(($stack32)>>2)];
      var $arrayidx=(($50)|0);
      var $51=$agg_result;
      var $52=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($52)+(8))>>2)];
      label = 16; break;
    case 13: 
      var $53=$c;
      var $ci34=(($53+16)|0);
      var $54=HEAP32[(($ci34)>>2)];
      var $target_class35=(($54+28)|0);
      HEAP32[(($target_class35)>>2)]=0;
      var $55=$mrb_addr;
      var $c36=(($55+8)|0);
      var $56=HEAP32[(($c36)>>2)];
      var $57=$c;
      var $prev37=(($57)|0);
      HEAP32[(($prev37)>>2)]=$56;
      var $58=$c;
      var $prev38=(($58)|0);
      var $59=HEAP32[(($prev38)>>2)];
      var $fib39=(($59+48)|0);
      var $60=HEAP32[(($fib39)>>2)];
      var $tobool40=(($60)|(0))!=0;
      if ($tobool40) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $61=$mrb_addr;
      var $62=$c;
      var $fib42=(($62+48)|0);
      var $63=HEAP32[(($fib42)>>2)];
      var $64=$63;
      var $65=$c;
      var $prev43=(($65)|0);
      var $66=HEAP32[(($prev43)>>2)];
      var $fib44=(($66+48)|0);
      var $67=HEAP32[(($fib44)>>2)];
      var $68=$67;
      _mrb_field_write_barrier($61, $64, $68);
      label = 15; break;
    case 15: 
      var $69=$c;
      var $status46=(($69+44)|0);
      HEAP8[($status46)]=1;
      var $70=$c;
      var $71=$mrb_addr;
      var $c47=(($71+8)|0);
      HEAP32[(($c47)>>2)]=$70;
      var $72=$mrb_addr;
      var $73=HEAP32[(($a)>>2)];
      var $74=HEAP32[(($len)>>2)];
      _fiber_result($agg_result, $72, $73, $74);
      label = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fiber_yield($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $c;
      var $a=__stackBase__;
      var $len=(__stackBase__)+(4);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $c1=(($0+8)|0);
      var $1=HEAP32[(($c1)>>2)];
      $c=$1;
      var $2=$c;
      var $prev=(($2)|0);
      var $3=HEAP32[(($prev)>>2)];
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call=_mrb_class_get($5, ((101648)|0));
      _mrb_raise($4, $call, ((99048)|0));
      label = 4; break;
    case 4: 
      var $6=$mrb_addr;
      var $call2=_mrb_get_args($6, ((97004)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$a,HEAP32[(((tempInt)+(4))>>2)]=$len,tempInt));
      var $7=$c;
      var $prev3=(($7)|0);
      var $8=HEAP32[(($prev3)>>2)];
      var $status=(($8+44)|0);
      HEAP8[($status)]=1;
      var $9=$c;
      var $prev4=(($9)|0);
      var $10=HEAP32[(($prev4)>>2)];
      var $11=$mrb_addr;
      var $c5=(($11+8)|0);
      HEAP32[(($c5)>>2)]=$10;
      var $12=$c;
      var $prev6=(($12)|0);
      HEAP32[(($prev6)>>2)]=0;
      var $13=$mrb_addr;
      var $c7=(($13+8)|0);
      var $14=HEAP32[(($c7)>>2)];
      var $ci=(($14+16)|0);
      var $15=HEAP32[(($ci)>>2)];
      var $target_class=(($15+28)|0);
      HEAP32[(($target_class)>>2)]=0;
      var $16=$mrb_addr;
      var $17=HEAP32[(($a)>>2)];
      var $18=HEAP32[(($len)>>2)];
      _fiber_result($agg_result, $16, $17, $18);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fiber_result($agg_result, $mrb, $a, $len) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $a_addr;
      var $len_addr;
      $mrb_addr=$mrb;
      $a_addr=$a;
      $len_addr=$len;
      var $0=$len_addr;
      var $cmp=(($0)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      _mrb_nil_value1411($agg_result);
      label = 7; break;
    case 4: 
      var $1=$len_addr;
      var $cmp1=(($1)|(0))==1;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $2=$a_addr;
      var $arrayidx=(($2)|0);
      var $3=$agg_result;
      var $4=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
      label = 7; break;
    case 6: 
      var $5=$mrb_addr;
      var $6=$len_addr;
      var $7=$a_addr;
      _mrb_ary_new_from_values($agg_result, $5, $6, $7);
      label = 7; break;
    case 7: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1411($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fiber_check($mrb, $fib) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $fib; $fib = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($fib)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($fib)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($fib)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $f;
      $mrb_addr=$mrb;
      var $value=(($fib)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $f=$1;
      var $2=$f;
      var $cxt=(($2+12)|0);
      var $3=HEAP32[(($cxt)>>2)];
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call=_mrb_class_get($5, ((101648)|0));
      _mrb_raise($4, $call, ((113748)|0));
      label = 4; break;
    case 4: 
      var $6=$f;
      var $cxt1=(($6+12)|0);
      var $7=HEAP32[(($cxt1)>>2)];
      STACKTOP = __stackBase__;
      return $7;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value1414($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_hash_ext_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_mruby_hash_ext_gem_final($0);
  return;
}
function _mrb_hash_values_at($agg_result, $mrb, $argc, $argv, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argc_addr;
      var $argv_addr;
      var $result=__stackBase__;
      var $i;
      var $agg_tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      $argc_addr=$argc;
      $argv_addr=$argv;
      var $0=$mrb_addr;
      var $1=$argc_addr;
      _mrb_ary_new_capa($result, $0, $1);
      $i=0;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $3=$argc_addr;
      var $cmp=(($2)|(0)) < (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $6=$i;
      var $7=$argv_addr;
      var $arrayidx=(($7+((($6)*(12))&-1))|0);
      _mrb_hash_get($agg_tmp, $5, $hash, $arrayidx);
      _mrb_ary_push($4, $result, $agg_tmp);
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $9=$agg_result;
      var $10=$result;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_hash_ext_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $h;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $hash_class=(($0+68)|0);
  var $1=HEAP32[(($hash_class)>>2)];
  $h=$1;
  var $2=$mrb_addr;
  var $3=$h;
  _mrb_define_method($2, $3, ((111060)|0), 654, 4096);
  return;
}
function _hash_values_at($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $argv=__stackBase__;
  var $argc=(__stackBase__)+(4);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((112848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
  var $1=$mrb_addr;
  var $2=HEAP32[(($argc)>>2)];
  var $3=HEAP32[(($argv)>>2)];
  _mrb_hash_values_at($agg_result, $1, $2, $3, $hash);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_value1425($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_js_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_mruby_js_gem_final($0);
  return;
}
function _GENERATED_TMP_mrb_mruby_enum_ext_gem_init($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ai;
      var $tmp=__stackBase__;
      var $agg_tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_gc_arena_save($0);
      $ai=$call;
      var $1=$mrb_addr;
      _mrb_load_irep($tmp, $1, ((88468)|0));
      var $2=$mrb_addr;
      var $exc=(($2+16)|0);
      var $3=HEAP32[(($exc)>>2)];
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$mrb_addr;
      _mrb_print_backtrace($4);
      var $5=$mrb_addr;
      var $6=$mrb_addr;
      var $exc1=(($6+16)|0);
      var $7=HEAP32[(($exc1)>>2)];
      var $8=$7;
      _mrb_obj_value1376($agg_tmp, $8);
      _mrb_p($5, $agg_tmp);
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $9=$mrb_addr;
      var $10=$ai;
      _mrb_gc_arena_restore($9, $10);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_hash_ext_gem_init($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ai;
      var $tmp=__stackBase__;
      var $agg_tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_gc_arena_save($0);
      $ai=$call;
      var $1=$mrb_addr;
      _mrb_mruby_hash_ext_gem_init($1);
      var $2=$mrb_addr;
      _mrb_load_irep($tmp, $2, ((87940)|0));
      var $3=$mrb_addr;
      var $exc=(($3+16)|0);
      var $4=HEAP32[(($exc)>>2)];
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$mrb_addr;
      _mrb_print_backtrace($5);
      var $6=$mrb_addr;
      var $7=$mrb_addr;
      var $exc1=(($7+16)|0);
      var $8=HEAP32[(($exc1)>>2)];
      var $9=$8;
      _mrb_obj_value1414($agg_tmp, $9);
      _mrb_p($6, $agg_tmp);
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $10=$mrb_addr;
      var $11=$ai;
      _mrb_gc_arena_restore($10, $11);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_js_gem_init($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ai;
      var $tmp=__stackBase__;
      var $agg_tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_gc_arena_save($0);
      $ai=$call;
      var $1=$mrb_addr;
      _mrb_mruby_js_gem_init($1);
      var $2=$mrb_addr;
      _mrb_load_irep($tmp, $2, ((85088)|0));
      var $3=$mrb_addr;
      var $exc=(($3+16)|0);
      var $4=HEAP32[(($exc)>>2)];
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$mrb_addr;
      _mrb_print_backtrace($5);
      var $6=$mrb_addr;
      var $7=$mrb_addr;
      var $exc1=(($7+16)|0);
      var $8=HEAP32[(($exc1)>>2)];
      var $9=$8;
      _mrb_obj_value1425($agg_tmp, $9);
      _mrb_p($6, $agg_tmp);
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $10=$mrb_addr;
      var $11=$ai;
      _mrb_gc_arena_restore($10, $11);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mruby_js_get_string_len($mrb, $argv, $idx) {
  var label = 0;
  var $mrb_addr;
  var $argv_addr;
  var $idx_addr;
  var $s;
  $mrb_addr=$mrb;
  $argv_addr=$argv;
  $idx_addr=$idx;
  var $0=$idx_addr;
  var $1=$argv_addr;
  var $arrayidx=(($1+((($0)*(12))&-1))|0);
  var $value=(($arrayidx)|0);
  var $p=$value;
  var $2=HEAP32[(($p)>>2)];
  var $3=$2;
  $s=$3;
  var $4=$s;
  var $len=(($4+12)|0);
  var $5=HEAP32[(($len)>>2)];
  return $5;
}
Module["_mruby_js_get_string_len"] = _mruby_js_get_string_len;
function _mruby_js_invoke_fetch_argp($mrb, $argv, $idx) {
  var label = 0;
  var $mrb_addr;
  var $argv_addr;
  var $idx_addr;
  $mrb_addr=$mrb;
  $argv_addr=$argv;
  $idx_addr=$idx;
  var $0=$idx_addr;
  var $1=$argv_addr;
  var $arrayidx=(($1+((($0)*(12))&-1))|0);
  return $arrayidx;
}
Module["_mruby_js_invoke_fetch_argp"] = _mruby_js_invoke_fetch_argp;
function _mruby_js_argument_type($mrb, $argv, $idx) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $argv_addr;
      var $idx_addr;
      var $t;
      $mrb_addr=$mrb;
      $argv_addr=$argv;
      $idx_addr=$idx;
      var $0=$idx_addr;
      var $1=$argv_addr;
      var $arrayidx=(($1+((($0)*(12))&-1))|0);
      var $tt=(($arrayidx+8)|0);
      var $2=HEAP32[(($tt)>>2)];
      $t=$2;
      var $3=$t;
      if ((($3)|(0))==0) {
        label = 3; break;
      }
      else if ((($3)|(0))==2) {
        label = 7; break;
      }
      else if ((($3)|(0))==3) {
        label = 8; break;
      }
      else if ((($3)|(0))==6) {
        label = 9; break;
      }
      else if ((($3)|(0))==8) {
        label = 10; break;
      }
      else if ((($3)|(0))==16) {
        label = 11; break;
      }
      else if ((($3)|(0))==13) {
        label = 12; break;
      }
      else if ((($3)|(0))==14) {
        label = 13; break;
      }
      else if ((($3)|(0))==15) {
        label = 14; break;
      }
      else if ((($3)|(0))==4) {
        label = 15; break;
      }
      else {
      label = 16; break;
      }
    case 3: 
      var $4=$idx_addr;
      var $5=$argv_addr;
      var $arrayidx1=(($5+((($4)*(12))&-1))|0);
      var $tt2=(($arrayidx1+8)|0);
      var $6=HEAP32[(($tt2)>>2)];
      var $cmp=(($6)|(0))==0;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $7=$idx_addr;
      var $8=$argv_addr;
      var $arrayidx3=(($8+((($7)*(12))&-1))|0);
      var $value=(($arrayidx3)|0);
      var $i=$value;
      var $9=HEAP32[(($i)>>2)];
      var $tobool=(($9)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $retval=6;
      label = 18; break;
    case 6: 
      $retval=0;
      label = 18; break;
    case 7: 
      $retval=1;
      label = 18; break;
    case 8: 
      $retval=2;
      label = 18; break;
    case 9: 
      $retval=3;
      label = 18; break;
    case 10: 
      $retval=4;
      label = 18; break;
    case 11: 
      $retval=5;
      label = 18; break;
    case 12: 
      $retval=7;
      label = 18; break;
    case 13: 
      $retval=8;
      label = 18; break;
    case 14: 
      $retval=9;
      label = 18; break;
    case 15: 
      $retval=10;
      label = 18; break;
    case 16: 
      var $10=$mrb_addr;
      var $11=$mrb_addr;
      var $call=_mrb_class_get($11, ((111016)|0));
      var $12=$t;
      _mrb_raisef($10, $call, ((112800)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$12,tempInt));
      label = 17; break;
    case 17: 
      $retval=-1;
      label = 18; break;
    case 18: 
      var $13=$retval;
      STACKTOP = __stackBase__;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_argument_type"] = _mruby_js_argument_type;
function _mruby_js_get_string_ptr($mrb, $argv, $idx) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argv_addr;
      var $idx_addr;
      var $s;
      $mrb_addr=$mrb;
      $argv_addr=$argv;
      $idx_addr=$idx;
      var $0=$idx_addr;
      var $1=$argv_addr;
      var $arrayidx=(($1+((($0)*(12))&-1))|0);
      var $tt=(($arrayidx+8)|0);
      var $2=HEAP32[(($tt)>>2)];
      var $cmp=(($2)|(0))!=16;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call=_mrb_class_get($4, ((111016)|0));
      _mrb_raise($3, $call, ((107860)|0));
      label = 4; break;
    case 4: 
      var $5=$idx_addr;
      var $6=$argv_addr;
      var $arrayidx1=(($6+((($5)*(12))&-1))|0);
      var $value=(($arrayidx1)|0);
      var $p=$value;
      var $7=HEAP32[(($p)>>2)];
      var $8=$7;
      $s=$8;
      var $9=$s;
      var $ptr=(($9+20)|0);
      var $10=HEAP32[(($ptr)>>2)];
      return $10;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_get_string_ptr"] = _mruby_js_get_string_ptr;
function _mruby_js_get_integer($mrb, $argv, $idx) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argv_addr;
      var $idx_addr;
      $mrb_addr=$mrb;
      $argv_addr=$argv;
      $idx_addr=$idx;
      var $0=$idx_addr;
      var $1=$argv_addr;
      var $arrayidx=(($1+((($0)*(12))&-1))|0);
      var $tt=(($arrayidx+8)|0);
      var $2=HEAP32[(($tt)>>2)];
      var $cmp=(($2)|(0))!=3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call=_mrb_class_get($4, ((111016)|0));
      _mrb_raise($3, $call, ((104348)|0));
      label = 4; break;
    case 4: 
      var $5=$idx_addr;
      var $6=$argv_addr;
      var $arrayidx1=(($6+((($5)*(12))&-1))|0);
      var $value=(($arrayidx1)|0);
      var $i=$value;
      var $7=HEAP32[(($i)>>2)];
      return $7;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_get_integer"] = _mruby_js_get_integer;
function _mruby_js_get_float($mrb, $argv, $idx) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argv_addr;
      var $idx_addr;
      $mrb_addr=$mrb;
      $argv_addr=$argv;
      $idx_addr=$idx;
      var $0=$idx_addr;
      var $1=$argv_addr;
      var $arrayidx=(($1+((($0)*(12))&-1))|0);
      var $tt=(($arrayidx+8)|0);
      var $2=HEAP32[(($tt)>>2)];
      var $cmp=(($2)|(0))!=6;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call=_mrb_class_get($4, ((111016)|0));
      _mrb_raise($3, $call, ((101604)|0));
      label = 4; break;
    case 4: 
      var $5=$idx_addr;
      var $6=$argv_addr;
      var $arrayidx1=(($6+((($5)*(12))&-1))|0);
      var $value=(($arrayidx1)|0);
      var $f=$value;
      var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      return $7;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_get_float"] = _mruby_js_get_float;
function _mruby_js_get_object_handle($mrb, $argv, $idx) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argv_addr;
      var $idx_addr;
      $mrb_addr=$mrb;
      $argv_addr=$argv;
      $idx_addr=$idx;
      var $0=$idx_addr;
      var $1=$argv_addr;
      var $arrayidx=(($1+((($0)*(12))&-1))|0);
      var $tt=(($arrayidx+8)|0);
      var $2=HEAP32[(($tt)>>2)];
      var $cmp=(($2)|(0))!=8;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call=_mrb_class_get($4, ((111016)|0));
      _mrb_raise($3, $call, ((99000)|0));
      label = 4; break;
    case 4: 
      var $5=$mrb_addr;
      var $6=$idx_addr;
      var $7=$argv_addr;
      var $arrayidx1=(($7+((($6)*(12))&-1))|0);
      var $call2=_mruby_js_get_object_handle_value($5, $arrayidx1);
      return $call2;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_get_object_handle"] = _mruby_js_get_object_handle;
function _mruby_js_get_object_handle_value($mrb, $js_obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $js_obj; $js_obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($js_obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($js_obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($js_obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $value_handle=__stackBase__;
      var $handle_p=(__stackBase__)+(12);
      var $tmp=(__stackBase__)+(16);
      $mrb_addr=$mrb;
      HEAP32[(($handle_p)>>2)]=0;
      var $0=$mrb_addr;
      var $1=$mrb_addr;
      var $call=_mrb_intern1472($1, ((102316)|0));
      _mrb_iv_get($tmp, $0, $js_obj, $call);
      var $2=$value_handle;
      var $3=$tmp;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      label = 3; break;
    case 3: 
      var $4=$mrb_addr;
      var $call1=_mrb_data_check_and_get($4, $value_handle, 62584);
      var $5=$handle_p;
      HEAP32[(($5)>>2)]=$call1;
      label = 4; break;
    case 4: 
      var $6=HEAP32[(($handle_p)>>2)];
      var $cmp=(($6)|(0))==0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$mrb_addr;
      var $8=$mrb_addr;
      var $call2=_mrb_class_get($8, ((111016)|0));
      _mrb_raise($7, $call2, ((101284)|0));
      label = 6; break;
    case 6: 
      var $9=HEAP32[(($handle_p)>>2)];
      var $10=HEAP32[(($9)>>2)];
      STACKTOP = __stackBase__;
      return $10;
    default: assert(0, "bad label: " + label);
  }
}
function _mruby_js_get_proc($mrb, $argv, $idx) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argv_addr;
      var $idx_addr;
      var $agg_tmp=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      $argv_addr=$argv;
      $idx_addr=$idx;
      var $0=$idx_addr;
      var $1=$argv_addr;
      var $arrayidx=(($1+((($0)*(12))&-1))|0);
      var $tt=(($arrayidx+8)|0);
      var $2=HEAP32[(($tt)>>2)];
      var $cmp=(($2)|(0))!=13;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call=_mrb_class_get($4, ((111016)|0));
      _mrb_raise($3, $call, ((96972)|0));
      label = 4; break;
    case 4: 
      var $5=$mrb_addr;
      var $6=HEAP32[((80024)>>2)];
      var $7=$6;
      _mrb_obj_value1471($agg_tmp, $7);
      var $8=$mrb_addr;
      var $call1=_mrb_intern1472($8, ((95792)|0));
      var $9=$idx_addr;
      var $10=$argv_addr;
      var $arrayidx2=(($10+((($9)*(12))&-1))|0);
      _mrb_funcall_argv($tmp, $5, $agg_tmp, $call1, 1, $arrayidx2);
      var $11=$idx_addr;
      var $12=$argv_addr;
      var $arrayidx3=(($12+((($11)*(12))&-1))|0);
      var $value=(($arrayidx3)|0);
      var $p=$value;
      var $13=HEAP32[(($p)>>2)];
      var $14=$13;
      STACKTOP = __stackBase__;
      return $14;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_get_proc"] = _mruby_js_get_proc;
function _mrb_obj_value1471($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern1472($mrb, $cstr) {
  var label = 0;
  var $mrb_addr;
  var $cstr_addr;
  $mrb_addr=$mrb;
  $cstr_addr=$cstr;
  var $0=$mrb_addr;
  var $1=$cstr_addr;
  var $call=_mrb_intern_cstr($0, $1);
  return $call;
}
function _mruby_js_get_array_handle($mrb, $argv, $idx) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argv_addr;
      var $idx_addr;
      var $js_array=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      $argv_addr=$argv;
      $idx_addr=$idx;
      var $0=$idx_addr;
      var $1=$argv_addr;
      var $arrayidx=(($1+((($0)*(12))&-1))|0);
      var $tt=(($arrayidx+8)|0);
      var $2=HEAP32[(($tt)>>2)];
      var $cmp=(($2)|(0))!=14;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call=_mrb_class_get($4, ((111016)|0));
      _mrb_raise($3, $call, ((94752)|0));
      label = 4; break;
    case 4: 
      var $5=$mrb_addr;
      var $6=$idx_addr;
      var $7=$argv_addr;
      var $arrayidx1=(($7+((($6)*(12))&-1))|0);
      var $8=$mrb_addr;
      var $call2=_mrb_intern1472($8, ((93960)|0));
      _mrb_funcall_argv($tmp, $5, $arrayidx1, $call2, 0, 0);
      var $9=$js_array;
      var $10=$tmp;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      var $11=$mrb_addr;
      var $call3=_mruby_js_get_object_handle($11, $js_array, 0);
      STACKTOP = __stackBase__;
      return $call3;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_get_array_handle"] = _mruby_js_get_array_handle;
function _mruby_js_get_hash_handle($mrb, $argv, $idx) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argv_addr;
      var $idx_addr;
      var $js_object=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      $argv_addr=$argv;
      $idx_addr=$idx;
      var $0=$idx_addr;
      var $1=$argv_addr;
      var $arrayidx=(($1+((($0)*(12))&-1))|0);
      var $tt=(($arrayidx+8)|0);
      var $2=HEAP32[(($tt)>>2)];
      var $cmp=(($2)|(0))!=15;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call=_mrb_class_get($4, ((111016)|0));
      _mrb_raise($3, $call, ((113716)|0));
      label = 4; break;
    case 4: 
      var $5=$mrb_addr;
      var $6=$idx_addr;
      var $7=$argv_addr;
      var $arrayidx1=(($7+((($6)*(12))&-1))|0);
      var $8=$mrb_addr;
      var $call2=_mrb_intern1472($8, ((113136)|0));
      _mrb_funcall_argv($tmp, $5, $arrayidx1, $call2, 0, 0);
      var $9=$js_object;
      var $10=$tmp;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      var $11=$mrb_addr;
      var $call3=_mruby_js_get_object_handle($11, $js_object, 0);
      STACKTOP = __stackBase__;
      return $call3;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_get_hash_handle"] = _mruby_js_get_hash_handle;
function _mruby_js_convert_symbol_to_string($mrb, $argv, $idx) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argv_addr;
      var $idx_addr;
      var $str=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      $argv_addr=$argv;
      $idx_addr=$idx;
      var $0=$idx_addr;
      var $1=$argv_addr;
      var $arrayidx=(($1+((($0)*(12))&-1))|0);
      var $tt=(($arrayidx+8)|0);
      var $2=HEAP32[(($tt)>>2)];
      var $cmp=(($2)|(0))!=4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call=_mrb_class_get($4, ((111016)|0));
      _mrb_raise($3, $call, ((112208)|0));
      label = 4; break;
    case 4: 
      var $5=$mrb_addr;
      var $6=$idx_addr;
      var $7=$argv_addr;
      var $arrayidx1=(($7+((($6)*(12))&-1))|0);
      var $8=$mrb_addr;
      var $call2=_mrb_intern1472($8, ((111632)|0));
      _mrb_funcall_argv($tmp, $5, $arrayidx1, $call2, 0, 0);
      var $9=$str;
      var $10=$tmp;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      var $tt3=(($str+8)|0);
      var $11=HEAP32[(($tt3)>>2)];
      var $cmp4=(($11)|(0))!=16;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $12=$mrb_addr;
      var $13=$mrb_addr;
      var $call6=_mrb_class_get($13, ((111016)|0));
      _mrb_raise($12, $call6, ((111120)|0));
      label = 6; break;
    case 6: 
      var $14=$idx_addr;
      var $15=$argv_addr;
      var $arrayidx8=(($15+((($14)*(12))&-1))|0);
      var $16=$arrayidx8;
      var $17=$str;
      assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_convert_symbol_to_string"] = _mruby_js_convert_symbol_to_string;
function _mruby_js_invoke_alloc_argv($mrb, $argc) {
  var label = 0;
  var $mrb_addr;
  var $argc_addr;
  $mrb_addr=$mrb;
  $argc_addr=$argc;
  var $0=$argc_addr;
  var $mul=((($0)*(12))&-1);
  var $call=_malloc($mul);
  var $1=$call;
  return $1;
}
Module["_mruby_js_invoke_alloc_argv"] = _mruby_js_invoke_alloc_argv;
function _mruby_js_invoke_release_argv($mrb, $argv) {
  var label = 0;
  var $mrb_addr;
  var $argv_addr;
  $mrb_addr=$mrb;
  $argv_addr=$argv;
  var $0=$argv_addr;
  var $1=$0;
  _free($1);
  return;
}
Module["_mruby_js_invoke_release_argv"] = _mruby_js_invoke_release_argv;
function _mruby_js_invoke_proc($mrb, $proc, $argc, $argv) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $proc_addr;
      var $argc_addr;
      var $argv_addr;
      var $p=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      var $agg_tmp=(__stackBase__)+(24);
      var $agg_tmp2=(__stackBase__)+(36);
      var $tmp3=(__stackBase__)+(48);
      $mrb_addr=$mrb;
      $proc_addr=$proc;
      $argc_addr=$argc;
      $argv_addr=$argv;
      var $0=$proc_addr;
      var $1=$0;
      _mrb_obj_value1471($p, $1);
      var $2=$mrb_addr;
      var $3=$argc_addr;
      var $4=$argv_addr;
      _mrb_yield_argv($tmp, $2, $p, $3, $4);
      var $5=$mrb_addr;
      var $exc=(($5+16)|0);
      var $6=HEAP32[(($exc)>>2)];
      var $tobool=(($6)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=$mrb_addr;
      var $8=$mrb_addr;
      var $exc1=(($8+16)|0);
      var $9=HEAP32[(($exc1)>>2)];
      var $10=$9;
      _mrb_obj_value1471($agg_tmp, $10);
      _mrb_p($7, $agg_tmp);
      label = 4; break;
    case 4: 
      var $11=$mrb_addr;
      var $12=HEAP32[((80024)>>2)];
      var $13=$12;
      _mrb_obj_value1471($agg_tmp2, $13);
      var $14=$mrb_addr;
      var $call=_mrb_intern1472($14, ((110628)|0));
      _mrb_funcall_argv($tmp3, $11, $agg_tmp2, $call, 1, $p);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_invoke_proc"] = _mruby_js_invoke_proc;
function _mruby_js_name_error($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $call=_mrb_class_get($1, ((111016)|0));
  _mrb_raise($0, $call, ((110208)|0));
  return;
}
Module["_mruby_js_name_error"] = _mruby_js_name_error;
function _mruby_js_set_integer($mrb, $arg, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $arg_addr;
  var $val_addr;
  var $tmp=__stackBase__;
  $mrb_addr=$mrb;
  $arg_addr=$arg;
  $val_addr=$val;
  var $0=$arg_addr;
  var $1=$val_addr;
  _mrb_fixnum_value1473($tmp, $1);
  var $2=$0;
  var $3=$tmp;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
Module["_mruby_js_set_integer"] = _mruby_js_set_integer;
function _mrb_fixnum_value1473($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mruby_js_set_float($mrb, $arg, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $arg_addr;
  var $val_addr;
  var $tmp=__stackBase__;
  $mrb_addr=$mrb;
  $arg_addr=$arg;
  $val_addr=$val;
  var $0=$arg_addr;
  var $1=$val_addr;
  _mrb_float_value1474($tmp, $1);
  var $2=$0;
  var $3=$tmp;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
Module["_mruby_js_set_float"] = _mruby_js_set_float;
function _mrb_float_value1474($agg_result, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $f_addr;
      var $v=__stackBase__;
      $f_addr=$f;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=6;
      var $0=$f_addr;
      var $value=(($v)|0);
      var $f1=$value;
      (HEAPF64[(tempDoublePtr)>>3]=$0,HEAP32[(($f1)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mruby_js_set_boolean($mrb, $arg, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $arg_addr;
      var $val_addr;
      var $tmp=__stackBase__;
      var $tmp1=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      $arg_addr=$arg;
      $val_addr=$val;
      var $0=$arg_addr;
      var $1=$val_addr;
      var $cmp=(($1)|(0))==1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      _mrb_true_value1475($tmp);
      var $2=$0;
      var $3=$tmp;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      label = 5; break;
    case 4: 
      _mrb_false_value1476($tmp1);
      var $4=$0;
      var $5=$tmp1;
      assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_set_boolean"] = _mruby_js_set_boolean;
function _mrb_true_value1475($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=2;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_false_value1476($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mruby_js_set_nil($mrb, $arg) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $arg_addr;
  var $tmp=__stackBase__;
  $mrb_addr=$mrb;
  $arg_addr=$arg;
  var $0=$arg_addr;
  _mrb_nil_value1477($tmp);
  var $1=$0;
  var $2=$tmp;
  assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
Module["_mruby_js_set_nil"] = _mruby_js_set_nil;
function _mrb_nil_value1477($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mruby_js_set_string($mrb, $arg, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $arg_addr;
  var $val_addr;
  var $tmp=__stackBase__;
  $mrb_addr=$mrb;
  $arg_addr=$arg;
  $val_addr=$val;
  var $0=$arg_addr;
  var $1=$mrb_addr;
  var $2=$val_addr;
  _mrb_str_new_cstr($tmp, $1, $2);
  var $3=$0;
  var $4=$tmp;
  assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
Module["_mruby_js_set_string"] = _mruby_js_set_string;
function _mruby_js_set_object_handle($mrb, $arg, $handle) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $arg_addr;
      var $handle_addr;
      var $o;
      var $ttype;
      var $argv=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      var $tmp1=(__stackBase__)+(24);
      var $tmp2=(__stackBase__)+(36);
      $mrb_addr=$mrb;
      $arg_addr=$arg;
      $handle_addr=$handle;
      var $0=HEAP32[((80104)>>2)];
      var $1=$0;
      var $2=HEAP32[(($1)>>2)];
      var $3=$2 >>> 11;
      var $bf_clear=$3 & 2097151;
      var $and=$bf_clear & 255;
      $ttype=$and;
      var $4=$ttype;
      var $cmp=(($4)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $ttype=8;
      label = 4; break;
    case 4: 
      var $5=$mrb_addr;
      var $6=$ttype;
      var $7=HEAP32[((80104)>>2)];
      var $call=_mrb_obj_alloc($5, $6, $7);
      var $8=$call;
      $o=$8;
      var $9=$arg_addr;
      var $10=$o;
      var $11=$10;
      _mrb_obj_value1471($tmp, $11);
      var $12=$9;
      var $13=$tmp;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      var $14=$handle_addr;
      _mrb_fixnum_value1473($tmp1, $14);
      var $15=$argv;
      var $16=$tmp1;
      assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
      var $17=$mrb_addr;
      var $18=$arg_addr;
      var $19=$mrb_addr;
      var $init_sym=(($19+36)|0);
      var $20=HEAP16[(($init_sym)>>1)];
      _mrb_funcall_argv($tmp2, $17, $18, $20, 1, $argv);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_set_object_handle"] = _mruby_js_set_object_handle;
function _mruby_js_set_array_handle($mrb, $arg, $handle) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $arg_addr;
      var $handle_addr;
      var $o;
      var $ttype;
      var $argv=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      var $tmp1=(__stackBase__)+(24);
      var $tmp2=(__stackBase__)+(36);
      $mrb_addr=$mrb;
      $arg_addr=$arg;
      $handle_addr=$handle;
      var $0=HEAP32[((80112)>>2)];
      var $1=$0;
      var $2=HEAP32[(($1)>>2)];
      var $3=$2 >>> 11;
      var $bf_clear=$3 & 2097151;
      var $and=$bf_clear & 255;
      $ttype=$and;
      var $4=$ttype;
      var $cmp=(($4)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $ttype=8;
      label = 4; break;
    case 4: 
      var $5=$mrb_addr;
      var $6=$ttype;
      var $7=HEAP32[((80112)>>2)];
      var $call=_mrb_obj_alloc($5, $6, $7);
      var $8=$call;
      $o=$8;
      var $9=$arg_addr;
      var $10=$o;
      var $11=$10;
      _mrb_obj_value1471($tmp, $11);
      var $12=$9;
      var $13=$tmp;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      var $14=$handle_addr;
      _mrb_fixnum_value1473($tmp1, $14);
      var $15=$argv;
      var $16=$tmp1;
      assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
      var $17=$mrb_addr;
      var $18=$arg_addr;
      var $19=$mrb_addr;
      var $init_sym=(($19+36)|0);
      var $20=HEAP16[(($init_sym)>>1)];
      _mrb_funcall_argv($tmp2, $17, $18, $20, 1, $argv);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_set_array_handle"] = _mruby_js_set_array_handle;
function _mrb_mruby_js_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  return;
}
function _mrb_mruby_math_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  return;
}
function _mruby_js_set_function_handle($mrb, $arg, $handle, $parent) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $arg_addr;
      var $handle_addr;
      var $parent_addr;
      var $o;
      var $ttype;
      var $argv=__stackBase__;
      var $tmp=(__stackBase__)+(24);
      var $tmp1=(__stackBase__)+(36);
      var $tmp6=(__stackBase__)+(48);
      var $tmp8=(__stackBase__)+(60);
      $mrb_addr=$mrb;
      $arg_addr=$arg;
      $handle_addr=$handle;
      $parent_addr=$parent;
      var $0=HEAP32[((80108)>>2)];
      var $1=$0;
      var $2=HEAP32[(($1)>>2)];
      var $3=$2 >>> 11;
      var $bf_clear=$3 & 2097151;
      var $and=$bf_clear & 255;
      $ttype=$and;
      var $4=$ttype;
      var $cmp=(($4)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $ttype=8;
      label = 4; break;
    case 4: 
      var $5=$mrb_addr;
      var $6=$ttype;
      var $7=HEAP32[((80108)>>2)];
      var $call=_mrb_obj_alloc($5, $6, $7);
      var $8=$call;
      $o=$8;
      var $9=$arg_addr;
      var $10=$o;
      var $11=$10;
      _mrb_obj_value1471($tmp, $11);
      var $12=$9;
      var $13=$tmp;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      var $arrayidx=(($argv)|0);
      var $14=$handle_addr;
      _mrb_fixnum_value1473($tmp1, $14);
      var $15=$arrayidx;
      var $16=$tmp1;
      assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
      var $17=$parent_addr;
      var $cmp2=(($17)|(0))!=0;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $arrayidx4=(($argv+12)|0);
      var $18=$parent_addr;
      var $19=$arrayidx4;
      var $20=$18;
      assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
      label = 7; break;
    case 6: 
      var $arrayidx5=(($argv+12)|0);
      _mrb_nil_value1477($tmp6);
      var $21=$arrayidx5;
      var $22=$tmp6;
      assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
      label = 7; break;
    case 7: 
      var $23=$mrb_addr;
      var $24=$arg_addr;
      var $25=$mrb_addr;
      var $init_sym=(($25+36)|0);
      var $26=HEAP16[(($init_sym)>>1)];
      var $arraydecay=(($argv)|0);
      _mrb_funcall_argv($tmp8, $23, $24, $26, 2, $arraydecay);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_set_function_handle"] = _mruby_js_set_function_handle;
function _mrb_mruby_js_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_define_module($0, ((109824)|0));
  HEAP32[((80024)>>2)]=$call;
  var $1=$mrb_addr;
  var $2=HEAP32[((80024)>>2)];
  _mrb_define_class_method($1, $2, ((109380)|0), 422, 0);
  var $3=$mrb_addr;
  var $4=HEAP32[((80024)>>2)];
  _mrb_define_class_method($3, $4, ((108932)|0), 422, 0);
  var $5=$mrb_addr;
  var $6=HEAP32[((80024)>>2)];
  _mrb_define_class_method($5, $6, ((108400)|0), 422, 0);
  var $7=$mrb_addr;
  var $8=HEAP32[((80024)>>2)];
  var $9=$mrb_addr;
  var $object_class=(($9+44)|0);
  var $10=HEAP32[(($object_class)>>2)];
  var $call1=_mrb_define_class_under($7, $8, ((108064)|0), $10);
  HEAP32[((80104)>>2)]=$call1;
  var $11=$mrb_addr;
  var $12=HEAP32[((80104)>>2)];
  _mrb_define_method($11, $12, ((107528)|0), 590, 262144);
  var $13=$mrb_addr;
  var $14=HEAP32[((80104)>>2)];
  _mrb_define_method($13, $14, ((107268)|0), 104, 262144);
  var $15=$mrb_addr;
  var $16=HEAP32[((80104)>>2)];
  _mrb_define_method($15, $16, ((106864)|0), 692, 524288);
  var $17=$mrb_addr;
  var $18=HEAP32[((80104)>>2)];
  _mrb_define_method($17, $18, ((106412)|0), 104, 262144);
  var $19=$mrb_addr;
  var $20=HEAP32[((80104)>>2)];
  _mrb_define_method($19, $20, ((106040)|0), 692, 524288);
  var $21=$mrb_addr;
  var $22=HEAP32[((80104)>>2)];
  _mrb_define_class_method($21, $22, ((105716)|0), 436, 0);
  var $23=$mrb_addr;
  var $24=HEAP32[((80024)>>2)];
  var $25=HEAP32[((80104)>>2)];
  var $call2=_mrb_define_class_under($23, $24, ((105400)|0), $25);
  HEAP32[((80108)>>2)]=$call2;
  var $26=$mrb_addr;
  var $27=HEAP32[((80108)>>2)];
  _mrb_define_method($26, $27, ((105088)|0), 496, 4096);
  var $28=$mrb_addr;
  var $29=HEAP32[((80024)>>2)];
  var $30=HEAP32[((80104)>>2)];
  var $call3=_mrb_define_class_under($28, $29, ((104780)|0), $30);
  HEAP32[((80112)>>2)]=$call3;
  var $31=$mrb_addr;
  var $32=HEAP32[((80112)>>2)];
  _mrb_define_class_method($31, $32, ((105716)|0), 584, 0);
  var $33=$mrb_addr;
  var $34=$mrb_addr;
  var $array_class=(($34+64)|0);
  var $35=HEAP32[(($array_class)>>2)];
  _mrb_define_method($33, $35, ((93960)|0), 38, 0);
  return;
}
function _mrb_js_get_root_object($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $root_sym;
      var $ret=__stackBase__;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_intern1472($0, ((101752)|0));
      $root_sym=$call;
      var $1=$mrb_addr;
      var $2=$root_sym;
      _mrb_iv_get($ret, $1, $mod, $2);
      var $tt=(($ret+8)|0);
      var $3=HEAP32[(($tt)>>2)];
      var $cmp=(($3)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $value=(($ret)|0);
      var $i=$value;
      var $4=HEAP32[(($i)>>2)];
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$agg_result;
      var $6=$ret;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      label = 9; break;
    case 5: 
      var $7=$mrb_addr;
      _js_get_root_object($7, $ret);
      var $tt1=(($ret+8)|0);
      var $8=HEAP32[(($tt1)>>2)];
      var $cmp2=(($8)|(0))==0;
      if ($cmp2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $value4=(($ret)|0);
      var $i5=$value4;
      var $9=HEAP32[(($i5)>>2)];
      var $tobool6=(($9)|(0))!=0;
      if ($tobool6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $10=$mrb_addr;
      var $11=$root_sym;
      _mrb_iv_set($10, $mod, $11, $ret);
      label = 8; break;
    case 8: 
      var $12=$agg_result;
      var $13=$ret;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_js_obj_initialize($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $handle=__stackBase__;
      var $handle_p;
      var $agg_tmp=(__stackBase__)+(4);
      $mrb_addr=$mrb;
      HEAP32[(($handle)>>2)]=-1;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((103316)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$handle,tempInt));
      var $1=HEAP32[(($handle)>>2)];
      var $cmp=(($1)|(0)) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$mrb_addr;
      var $3=$mrb_addr;
      var $call1=_mrb_class_get($3, ((111016)|0));
      _mrb_raise($2, $call1, ((103084)|0));
      label = 4; break;
    case 4: 
      var $call2=_malloc(4);
      var $4=$call2;
      $handle_p=$4;
      var $5=$handle_p;
      var $cmp3=(($5)|(0))==0;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$mrb_addr;
      var $7=$mrb_addr;
      var $call5=_mrb_class_get($7, ((102816)|0));
      _mrb_raise($6, $call5, ((102628)|0));
      label = 6; break;
    case 6: 
      var $8=HEAP32[(($handle)>>2)];
      var $9=$handle_p;
      HEAP32[(($9)>>2)]=$8;
      var $10=$mrb_addr;
      var $11=$mrb_addr;
      var $call7=_mrb_intern1472($11, ((102316)|0));
      var $12=$mrb_addr;
      var $13=$mrb_addr;
      var $object_class=(($13+44)|0);
      var $14=HEAP32[(($object_class)>>2)];
      var $15=$handle_p;
      var $16=$15;
      var $call8=_mrb_data_object_alloc($12, $14, $16, 62584);
      var $17=$call8;
      _mrb_obj_value1471($agg_tmp, $17);
      _mrb_iv_set($10, $self, $call7, $agg_tmp);
      var $18=$agg_result;
      var $19=$self;
      assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_js_obj_get($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $field=__stackBase__;
  var $ret=(__stackBase__)+(12);
  $mrb_addr=$mrb;
  _mrb_nil_value1477($ret);
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((103528)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$field,tempInt));
  var $1=$mrb_addr;
  _js_get_field($1, $self, $field, $ret);
  var $2=$agg_result;
  var $3=$ret;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_js_obj_set($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $field=__stackBase__;
  var $val=(__stackBase__)+(12);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((103740)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$field,HEAP32[(((tempInt)+(4))>>2)]=$val,tempInt));
  var $1=$mrb_addr;
  _js_set_field($1, $self, $field, $val);
  _mrb_nil_value1477($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_js_obj_create($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $ret=__stackBase__;
  $mrb_addr=$mrb;
  _mrb_nil_value1477($ret);
  var $0=$mrb_addr;
  _js_create_empty_object($0, $ret);
  var $1=$agg_result;
  var $2=$ret;
  assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_js_func_invoke_internal($agg_result, $mrb, $func) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $func; $func = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($func)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($func)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($func)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argv=__stackBase__;
      var $ret=(__stackBase__)+(4);
      var $this_value=(__stackBase__)+(16);
      var $argc=(__stackBase__)+(28);
      var $type=(__stackBase__)+(32);
      var $tmp=(__stackBase__)+(36);
      $mrb_addr=$mrb;
      HEAP32[(($argv)>>2)]=0;
      _mrb_nil_value1477($ret);
      HEAP32[(($argc)>>2)]=0;
      HEAP32[(($type)>>2)]=-1;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((104508)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$type,HEAP32[(((tempInt)+(4))>>2)]=$argv,HEAP32[(((tempInt)+(8))>>2)]=$argc,tempInt));
      var $1=HEAP32[(($type)>>2)];
      var $cmp=(($1)|(0))==2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[(($argv)>>2)];
      var $arrayidx=(($2)|0);
      var $3=$this_value;
      var $4=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
      var $5=HEAP32[(($argv)>>2)];
      var $incdec_ptr=(($5+12)|0);
      HEAP32[(($argv)>>2)]=$incdec_ptr;
      var $6=HEAP32[(($argc)>>2)];
      var $dec=((($6)-(1))|0);
      HEAP32[(($argc)>>2)]=$dec;
      label = 5; break;
    case 4: 
      var $7=$mrb_addr;
      var $8=$mrb_addr;
      var $call1=_mrb_intern1472($8, ((103932)|0));
      _mrb_funcall_argv($tmp, $7, $func, $call1, 0, 0);
      var $9=$this_value;
      var $10=$tmp;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      label = 5; break;
    case 5: 
      var $11=$mrb_addr;
      var $12=$mrb_addr;
      var $call2=_mruby_js_get_object_handle_value($12, $func);
      var $13=HEAP32[(($argv)>>2)];
      var $14=HEAP32[(($argc)>>2)];
      var $15=HEAP32[(($type)>>2)];
      _js_invoke($11, $this_value, $call2, $13, $14, $ret, $15);
      var $16=$agg_result;
      var $17=$ret;
      assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_js_array_create($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $ret=__stackBase__;
  $mrb_addr=$mrb;
  _mrb_nil_value1477($ret);
  var $0=$mrb_addr;
  _js_create_array($0, 0, -1, $ret);
  var $1=$agg_result;
  var $2=$ret;
  assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_array_tojs($agg_result, $mrb, $arr) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $arr; $arr = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($arr)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($arr)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($arr)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $ret=__stackBase__;
  $mrb_addr=$mrb;
  _mrb_nil_value1477($ret);
  var $0=$mrb_addr;
  var $value=(($arr)|0);
  var $p=$value;
  var $1=HEAP32[(($p)>>2)];
  var $2=$1;
  var $ptr=(($2+20)|0);
  var $3=HEAP32[(($ptr)>>2)];
  var $value1=(($arr)|0);
  var $p2=$value1;
  var $4=HEAP32[(($p2)>>2)];
  var $5=$4;
  var $len=(($5+12)|0);
  var $6=HEAP32[(($len)>>2)];
  _js_create_array($0, $3, $6, $ret);
  var $7=$agg_result;
  var $8=$ret;
  assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mruby_js_object_handle_free($mrb, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $p_addr;
      var $handle;
      $mrb_addr=$mrb;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $handle=$1;
      var $2=$handle;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      var $4=$handle;
      var $5=HEAP32[(($4)>>2)];
      _js_release_object($3, $5);
      label = 4; break;
    case 4: 
      var $6=$p_addr;
      _free($6);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_math_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $ai;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_gc_arena_save($0);
  $ai=$call;
  var $1=$mrb_addr;
  _mrb_mruby_math_gem_init($1);
  var $2=$mrb_addr;
  var $3=$ai;
  _mrb_gc_arena_restore($2, $3);
  return;
}
function _GENERATED_TMP_mrb_mruby_math_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_mruby_math_gem_final($0);
  return;
}
function _mrb_mruby_math_gem_init($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $mrb_math;
  var $agg_tmp=__stackBase__;
  var $agg_tmp1=(__stackBase__)+(12);
  var $agg_tmp2=(__stackBase__)+(24);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_define_module($0, ((110848)|0));
  $mrb_math=$call;
  var $1=$mrb_addr;
  var $2=$mrb_math;
  _mrb_float_value1520($agg_tmp, 3.141592653589793);
  _mrb_define_const($1, $2, ((112796)|0), $agg_tmp);
  var $3=$mrb_addr;
  var $4=$mrb_math;
  _mrb_float_value1520($agg_tmp1, 2.718281828459045);
  _mrb_define_const($3, $4, ((107856)|0), $agg_tmp1);
  var $5=$mrb_addr;
  var $6=$mrb_math;
  _mrb_float_value1520($agg_tmp2, 1e-12);
  _mrb_define_const($5, $6, ((104336)|0), $agg_tmp2);
  var $7=$mrb_addr;
  var $8=$mrb_math;
  _mrb_define_module_function($7, $8, ((101600)|0), 158, 262144);
  var $9=$mrb_addr;
  var $10=$mrb_math;
  _mrb_define_module_function($9, $10, ((98996)|0), 256, 262144);
  var $11=$mrb_addr;
  var $12=$mrb_math;
  _mrb_define_module_function($11, $12, ((96968)|0), 204, 262144);
  var $13=$mrb_addr;
  var $14=$mrb_math;
  _mrb_define_module_function($13, $14, ((95784)|0), 622, 262144);
  var $15=$mrb_addr;
  var $16=$mrb_math;
  _mrb_define_module_function($15, $16, ((94744)|0), 490, 262144);
  var $17=$mrb_addr;
  var $18=$mrb_math;
  _mrb_define_module_function($17, $18, ((93952)|0), 380, 262144);
  var $19=$mrb_addr;
  var $20=$mrb_math;
  _mrb_define_module_function($19, $20, ((113708)|0), 640, 524288);
  var $21=$mrb_addr;
  var $22=$mrb_math;
  _mrb_define_module_function($21, $22, ((113128)|0), 548, 262144);
  var $23=$mrb_addr;
  var $24=$mrb_math;
  _mrb_define_module_function($23, $24, ((112200)|0), 176, 262144);
  var $25=$mrb_addr;
  var $26=$mrb_math;
  _mrb_define_module_function($25, $26, ((111624)|0), 286, 262144);
  var $27=$mrb_addr;
  var $28=$mrb_math;
  _mrb_define_module_function($27, $28, ((111112)|0), 164, 262144);
  var $29=$mrb_addr;
  var $30=$mrb_math;
  _mrb_define_module_function($29, $30, ((110620)|0), 180, 262144);
  var $31=$mrb_addr;
  var $32=$mrb_math;
  _mrb_define_module_function($31, $32, ((110200)|0), 610, 262144);
  var $33=$mrb_addr;
  var $34=$mrb_math;
  _mrb_define_module_function($33, $34, ((109820)|0), 240, 262144);
  var $35=$mrb_addr;
  var $36=$mrb_math;
  _mrb_define_module_function($35, $36, ((109376)|0), 146, 270336);
  var $37=$mrb_addr;
  var $38=$mrb_math;
  _mrb_define_module_function($37, $38, ((108912)|0), 702, 262144);
  var $39=$mrb_addr;
  var $40=$mrb_math;
  _mrb_define_module_function($39, $40, ((108392)|0), 14, 262144);
  var $41=$mrb_addr;
  var $42=$mrb_math;
  _mrb_define_module_function($41, $42, ((108056)|0), 174, 262144);
  var $43=$mrb_addr;
  var $44=$mrb_math;
  _mrb_define_module_function($43, $44, ((107520)|0), 244, 262144);
  var $45=$mrb_addr;
  var $46=$mrb_math;
  _mrb_define_module_function($45, $46, ((107260)|0), 118, 262144);
  var $47=$mrb_addr;
  var $48=$mrb_math;
  _mrb_define_module_function($47, $48, ((106856)|0), 144, 524288);
  var $49=$mrb_addr;
  var $50=$mrb_math;
  _mrb_define_module_function($49, $50, ((106404)|0), 188, 524288);
  var $51=$mrb_addr;
  var $52=$mrb_math;
  _mrb_define_module_function($51, $52, ((106036)|0), 384, 262144);
  var $53=$mrb_addr;
  var $54=$mrb_math;
  _mrb_define_module_function($53, $54, ((105708)|0), 88, 262144);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_float_value1520($agg_result, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $f_addr;
      var $v=__stackBase__;
      $f_addr=$f;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=6;
      var $0=$f_addr;
      var $value=(($v)|0);
      var $f1=$value;
      (HEAPF64[(tempDoublePtr)>>3]=$0,HEAP32[(($f1)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _math_sin($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=Math.sin($1);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _math_cos($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=Math.cos($1);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _math_tan($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=Math.tan($1);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _math_asin($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=Math.asin($1);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _math_acos($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=Math.acos($1);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _math_atan($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=Math.atan($1);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _math_atan2($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  var $y=(__stackBase__)+(8);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105084)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,HEAP32[(((tempInt)+(4))>>2)]=$y,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($y)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($y)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=Math.atan2($1, $2);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $3);
  STACKTOP = __stackBase__;
  return;
}
function _math_sinh($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=_sinh($1);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _math_cosh($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=_cosh($1);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _math_tanh($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=_tanh($1);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _math_asinh($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=_asinh($1);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _math_acosh($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=_acosh($1);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _math_atanh($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=_atanh($1);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _math_exp($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=Math.exp($1);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _math_log($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $x=__stackBase__;
      var $base=(__stackBase__)+(8);
      var $argc;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((104504)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,HEAP32[(((tempInt)+(4))>>2)]=$base,tempInt));
      $argc=$call;
      var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call1=Math.log($1);
      (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $2=$argc;
      var $cmp=(($2)|(0))==2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($base)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($base)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call2=Math.log($3);
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $div=($4)/($call2);
      (HEAPF64[(tempDoublePtr)>>3]=$div,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 4; break;
    case 4: 
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _mrb_float_value1520($agg_result, $5);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _math_log2($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=Math.log($1);
  var $div=($call1)/(0.6931471805599453);
  (HEAPF64[(tempDoublePtr)>>3]=$div,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _math_log10($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=_log10($1);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _math_sqrt($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=Math.sqrt($1);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _math_cbrt($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=_cbrt($1);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _math_frexp($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  var $exp=(__stackBase__)+(8);
  var $agg_tmp=(__stackBase__)+(12);
  var $agg_tmp2=(__stackBase__)+(24);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=_frexp($1, $exp);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=$mrb_addr;
  var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_tmp, $3);
  var $4=HEAP32[(($exp)>>2)];
  _mrb_fixnum_value1523($agg_tmp2, $4);
  _mrb_assoc_new($agg_result, $2, $agg_tmp, $agg_tmp2);
  STACKTOP = __stackBase__;
  return;
}
function _math_ldexp($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  var $i=(__stackBase__)+(8);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((104776)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,HEAP32[(((tempInt)+(4))>>2)]=$i,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $2=HEAP32[(($i)>>2)];
  var $call1=_ldexp($1, $2);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $3);
  STACKTOP = __stackBase__;
  return;
}
function _math_hypot($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  var $y=(__stackBase__)+(8);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105084)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,HEAP32[(((tempInt)+(4))>>2)]=$y,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($y)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($y)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=_hypot($1, $2);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $3=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $3);
  STACKTOP = __stackBase__;
  return;
}
function _math_erf($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=_erf($1);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _math_erfc($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $x=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((105396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $1=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $call1=_erfc($1);
  (HEAPF64[(tempDoublePtr)>>3]=$call1,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1520($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_fixnum_value1523($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_numeric_ext_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $ai;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_gc_arena_save($0);
  $ai=$call;
  var $1=$mrb_addr;
  _mrb_mruby_numeric_ext_gem_init($1);
  var $2=$mrb_addr;
  var $3=$ai;
  _mrb_gc_arena_restore($2, $3);
  return;
}
function _GENERATED_TMP_mrb_mruby_numeric_ext_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_mruby_numeric_ext_gem_final($0);
  return;
}
function _mrb_mruby_numeric_ext_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  return;
}
function _mrb_mruby_objectspace_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  return;
}
function _mrb_mruby_print_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  return;
}
function _os_count_object_type($mrb, $obj, $data) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $obj_addr;
      var $data_addr;
      var $obj_count;
      $mrb_addr=$mrb;
      $obj_addr=$obj;
      $data_addr=$data;
      var $0=$data_addr;
      var $1=$0;
      $obj_count=$1;
      var $2=$obj_addr;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4 >>> 8;
      var $bf_clear=$5 & 7;
      var $6=$mrb_addr;
      var $current_white_part=(($6+524)|0);
      var $7=HEAP32[(($current_white_part)>>2)];
      var $xor=$7 ^ 3;
      var $and=$bf_clear & $xor;
      var $and1=$and & 3;
      var $tobool=(($and1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $8=$obj_addr;
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $bf_clear2=$10 & 255;
      var $cmp=(($bf_clear2)|(0))==1;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $11=$obj_count;
      var $freed=(($11+4)|0);
      var $12=HEAP32[(($freed)>>2)];
      var $inc=((($12)+(1))|0);
      HEAP32[(($freed)>>2)]=$inc;
      label = 6; break;
    case 5: 
      var $13=$obj_addr;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $bf_clear3=$15 & 255;
      var $16=$obj_count;
      var $counts=(($16+8)|0);
      var $arrayidx=(($counts+($bf_clear3<<2))|0);
      var $17=HEAP32[(($arrayidx)>>2)];
      var $inc4=((($17)+(1))|0);
      HEAP32[(($arrayidx)>>2)]=$inc4;
      var $18=$obj_count;
      var $total=(($18)|0);
      var $19=HEAP32[(($total)>>2)];
      var $inc5=((($19)+(1))|0);
      HEAP32[(($total)>>2)]=$inc5;
      label = 6; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_numeric_ext_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $i;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_class_get($0, ((110512)|0));
  $i=$call;
  var $1=$mrb_addr;
  var $2=$i;
  _mrb_define_method($1, $2, ((112752)|0), 514, 0);
  return;
}
function _mrb_int_chr($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $chr;
      var $c=__stackBase__;
      $mrb_addr=$mrb;
      var $value=(($x)|0);
      var $i=$value;
      var $0=HEAP32[(($i)>>2)];
      $chr=$0;
      var $1=$chr;
      var $cmp=(($1)|(0)) >= 256;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$mrb_addr;
      var $3=$mrb_addr;
      var $call=_mrb_class_get($3, ((107820)|0));
      _mrb_raisef($2, $call, ((104284)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($x)+(8))>>2)],tempInt));
      label = 4; break;
    case 4: 
      var $4=$chr;
      var $conv=(($4) & 255);
      HEAP8[($c)]=$conv;
      var $5=$mrb_addr;
      _mrb_str_new($agg_result, $5, $c, 1);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_objectspace_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $ai;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_gc_arena_save($0);
  $ai=$call;
  var $1=$mrb_addr;
  _mrb_mruby_objectspace_gem_init($1);
  var $2=$mrb_addr;
  var $3=$ai;
  _mrb_gc_arena_restore($2, $3);
  return;
}
function _GENERATED_TMP_mrb_mruby_objectspace_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_mruby_objectspace_gem_final($0);
  return;
}
function _os_count_objects($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 500)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $obj_count=__stackBase__;
      var $i;
      var $hash=(__stackBase__)+(104);
      var $tmp=(__stackBase__)+(116);
      var $tmp1=(__stackBase__)+(128);
      var $tmp4=(__stackBase__)+(140);
      var $agg_tmp=(__stackBase__)+(152);
      var $agg_tmp8=(__stackBase__)+(164);
      var $agg_tmp10=(__stackBase__)+(176);
      var $agg_tmp12=(__stackBase__)+(188);
      var $type=(__stackBase__)+(200);
      var $tmp19=(__stackBase__)+(212);
      var $tmp22=(__stackBase__)+(224);
      var $tmp25=(__stackBase__)+(236);
      var $tmp28=(__stackBase__)+(248);
      var $tmp31=(__stackBase__)+(260);
      var $tmp34=(__stackBase__)+(272);
      var $tmp37=(__stackBase__)+(284);
      var $tmp40=(__stackBase__)+(296);
      var $tmp43=(__stackBase__)+(308);
      var $tmp46=(__stackBase__)+(320);
      var $tmp49=(__stackBase__)+(332);
      var $tmp52=(__stackBase__)+(344);
      var $tmp55=(__stackBase__)+(356);
      var $tmp58=(__stackBase__)+(368);
      var $tmp61=(__stackBase__)+(380);
      var $tmp64=(__stackBase__)+(392);
      var $tmp67=(__stackBase__)+(404);
      var $tmp70=(__stackBase__)+(416);
      var $tmp73=(__stackBase__)+(428);
      var $tmp76=(__stackBase__)+(440);
      var $tmp79=(__stackBase__)+(452);
      var $tmp82=(__stackBase__)+(464);
      var $tmp83=(__stackBase__)+(476);
      var $agg_tmp87=(__stackBase__)+(488);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((110484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$hash,tempInt));
      var $cmp=(($call)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$mrb_addr;
      _mrb_hash_new($tmp, $1);
      var $2=$hash;
      var $3=$tmp;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      label = 4; break;
    case 4: 
      var $4=$mrb_addr;
      _mrb_hash_empty_p($tmp1, $4, $hash);
      var $tt=(($tmp1+8)|0);
      var $5=HEAP32[(($tt)>>2)];
      var $cmp2=(($5)|(0))!=0;
      if ($cmp2) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $6=$mrb_addr;
      _mrb_hash_clear($tmp4, $6, $hash);
      label = 6; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $7=$i;
      var $cmp6=(($7)>>>(0)) <= 23;
      if ($cmp6) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $8=$i;
      var $counts=(($obj_count+8)|0);
      var $arrayidx=(($counts+($8<<2))|0);
      HEAP32[(($arrayidx)>>2)]=0;
      label = 9; break;
    case 9: 
      var $9=$i;
      var $inc=((($9)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 10: 
      var $total=(($obj_count)|0);
      HEAP32[(($total)>>2)]=0;
      var $freed=(($obj_count+4)|0);
      HEAP32[(($freed)>>2)]=0;
      var $10=$mrb_addr;
      var $11=$obj_count;
      _mrb_objspace_each_objects($10, 656, $11);
      var $12=$mrb_addr;
      var $13=$mrb_addr;
      var $call7=_mrb_intern_cstr($13, ((112744)|0));
      _mrb_symbol_value1567($agg_tmp, $call7);
      var $total9=(($obj_count)|0);
      var $14=HEAP32[(($total9)>>2)];
      _mrb_fixnum_value1568($agg_tmp8, $14);
      _mrb_hash_set($12, $hash, $agg_tmp, $agg_tmp8);
      var $15=$mrb_addr;
      var $16=$mrb_addr;
      var $call11=_mrb_intern_cstr($16, ((107812)|0));
      _mrb_symbol_value1567($agg_tmp10, $call11);
      var $freed13=(($obj_count+4)|0);
      var $17=HEAP32[(($freed13)>>2)];
      _mrb_fixnum_value1568($agg_tmp12, $17);
      _mrb_hash_set($15, $hash, $agg_tmp10, $agg_tmp12);
      $i=0;
      label = 11; break;
    case 11: 
      var $18=$i;
      var $cmp15=(($18)>>>(0)) < 23;
      if ($cmp15) { label = 12; break; } else { label = 40; break; }
    case 12: 
      var $19=$i;
      if ((($19)|(0))==0) {
        label = 13; break;
      }
      else if ((($19)|(0))==1) {
        label = 14; break;
      }
      else if ((($19)|(0))==2) {
        label = 15; break;
      }
      else if ((($19)|(0))==3) {
        label = 16; break;
      }
      else if ((($19)|(0))==4) {
        label = 17; break;
      }
      else if ((($19)|(0))==5) {
        label = 18; break;
      }
      else if ((($19)|(0))==6) {
        label = 19; break;
      }
      else if ((($19)|(0))==7) {
        label = 20; break;
      }
      else if ((($19)|(0))==8) {
        label = 21; break;
      }
      else if ((($19)|(0))==9) {
        label = 22; break;
      }
      else if ((($19)|(0))==10) {
        label = 23; break;
      }
      else if ((($19)|(0))==11) {
        label = 24; break;
      }
      else if ((($19)|(0))==12) {
        label = 25; break;
      }
      else if ((($19)|(0))==13) {
        label = 26; break;
      }
      else if ((($19)|(0))==14) {
        label = 27; break;
      }
      else if ((($19)|(0))==15) {
        label = 28; break;
      }
      else if ((($19)|(0))==16) {
        label = 29; break;
      }
      else if ((($19)|(0))==17) {
        label = 30; break;
      }
      else if ((($19)|(0))==18) {
        label = 31; break;
      }
      else if ((($19)|(0))==19) {
        label = 32; break;
      }
      else if ((($19)|(0))==20) {
        label = 33; break;
      }
      else if ((($19)|(0))==21) {
        label = 34; break;
      }
      else {
      label = 35; break;
      }
    case 13: 
      var $20=$mrb_addr;
      var $call18=_mrb_intern_cstr($20, ((104268)|0));
      _mrb_symbol_value1567($tmp19, $call18);
      var $21=$type;
      var $22=$tmp19;
      assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
      label = 36; break;
    case 14: 
      var $23=$mrb_addr;
      var $call21=_mrb_intern_cstr($23, ((101552)|0));
      _mrb_symbol_value1567($tmp22, $call21);
      var $24=$type;
      var $25=$tmp22;
      assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
      label = 36; break;
    case 15: 
      var $26=$mrb_addr;
      var $call24=_mrb_intern_cstr($26, ((98964)|0));
      _mrb_symbol_value1567($tmp25, $call24);
      var $27=$type;
      var $28=$tmp25;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      label = 36; break;
    case 16: 
      var $29=$mrb_addr;
      var $call27=_mrb_intern_cstr($29, ((96944)|0));
      _mrb_symbol_value1567($tmp28, $call27);
      var $30=$type;
      var $31=$tmp28;
      assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
      label = 36; break;
    case 17: 
      var $32=$mrb_addr;
      var $call30=_mrb_intern_cstr($32, ((95768)|0));
      _mrb_symbol_value1567($tmp31, $call30);
      var $33=$type;
      var $34=$tmp31;
      assert(12 % 1 === 0);HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];HEAP32[((($33)+(8))>>2)]=HEAP32[((($34)+(8))>>2)];
      label = 36; break;
    case 18: 
      var $35=$mrb_addr;
      var $call33=_mrb_intern_cstr($35, ((94728)|0));
      _mrb_symbol_value1567($tmp34, $call33);
      var $36=$type;
      var $37=$tmp34;
      assert(12 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];HEAP32[((($36)+(8))>>2)]=HEAP32[((($37)+(8))>>2)];
      label = 36; break;
    case 19: 
      var $38=$mrb_addr;
      var $call36=_mrb_intern_cstr($38, ((93936)|0));
      _mrb_symbol_value1567($tmp37, $call36);
      var $39=$type;
      var $40=$tmp37;
      assert(12 % 1 === 0);HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];HEAP32[((($39)+(8))>>2)]=HEAP32[((($40)+(8))>>2)];
      label = 36; break;
    case 20: 
      var $41=$mrb_addr;
      var $call39=_mrb_intern_cstr($41, ((113692)|0));
      _mrb_symbol_value1567($tmp40, $call39);
      var $42=$type;
      var $43=$tmp40;
      assert(12 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];HEAP32[((($42)+(8))>>2)]=HEAP32[((($43)+(8))>>2)];
      label = 36; break;
    case 21: 
      var $44=$mrb_addr;
      var $call42=_mrb_intern_cstr($44, ((113112)|0));
      _mrb_symbol_value1567($tmp43, $call42);
      var $45=$type;
      var $46=$tmp43;
      assert(12 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];HEAP32[((($45)+(8))>>2)]=HEAP32[((($46)+(8))>>2)];
      label = 36; break;
    case 22: 
      var $47=$mrb_addr;
      var $call45=_mrb_intern_cstr($47, ((112184)|0));
      _mrb_symbol_value1567($tmp46, $call45);
      var $48=$type;
      var $49=$tmp46;
      assert(12 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($49)+(4))>>2)];HEAP32[((($48)+(8))>>2)]=HEAP32[((($49)+(8))>>2)];
      label = 36; break;
    case 23: 
      var $50=$mrb_addr;
      var $call48=_mrb_intern_cstr($50, ((111608)|0));
      _mrb_symbol_value1567($tmp49, $call48);
      var $51=$type;
      var $52=$tmp49;
      assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($52)+(8))>>2)];
      label = 36; break;
    case 24: 
      var $53=$mrb_addr;
      var $call51=_mrb_intern_cstr($53, ((111096)|0));
      _mrb_symbol_value1567($tmp52, $call51);
      var $54=$type;
      var $55=$tmp52;
      assert(12 % 1 === 0);HEAP32[(($54)>>2)]=HEAP32[(($55)>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[((($55)+(4))>>2)];HEAP32[((($54)+(8))>>2)]=HEAP32[((($55)+(8))>>2)];
      label = 36; break;
    case 25: 
      var $56=$mrb_addr;
      var $call54=_mrb_intern_cstr($56, ((110604)|0));
      _mrb_symbol_value1567($tmp55, $call54);
      var $57=$type;
      var $58=$tmp55;
      assert(12 % 1 === 0);HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];HEAP32[((($57)+(4))>>2)]=HEAP32[((($58)+(4))>>2)];HEAP32[((($57)+(8))>>2)]=HEAP32[((($58)+(8))>>2)];
      label = 36; break;
    case 26: 
      var $59=$mrb_addr;
      var $call57=_mrb_intern_cstr($59, ((110188)|0));
      _mrb_symbol_value1567($tmp58, $call57);
      var $60=$type;
      var $61=$tmp58;
      assert(12 % 1 === 0);HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($60)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];HEAP32[((($60)+(8))>>2)]=HEAP32[((($61)+(8))>>2)];
      label = 36; break;
    case 27: 
      var $62=$mrb_addr;
      var $call60=_mrb_intern_cstr($62, ((109804)|0));
      _mrb_symbol_value1567($tmp61, $call60);
      var $63=$type;
      var $64=$tmp61;
      assert(12 % 1 === 0);HEAP32[(($63)>>2)]=HEAP32[(($64)>>2)];HEAP32[((($63)+(4))>>2)]=HEAP32[((($64)+(4))>>2)];HEAP32[((($63)+(8))>>2)]=HEAP32[((($64)+(8))>>2)];
      label = 36; break;
    case 28: 
      var $65=$mrb_addr;
      var $call63=_mrb_intern_cstr($65, ((109364)|0));
      _mrb_symbol_value1567($tmp64, $call63);
      var $66=$type;
      var $67=$tmp64;
      assert(12 % 1 === 0);HEAP32[(($66)>>2)]=HEAP32[(($67)>>2)];HEAP32[((($66)+(4))>>2)]=HEAP32[((($67)+(4))>>2)];HEAP32[((($66)+(8))>>2)]=HEAP32[((($67)+(8))>>2)];
      label = 36; break;
    case 29: 
      var $68=$mrb_addr;
      var $call66=_mrb_intern_cstr($68, ((108896)|0));
      _mrb_symbol_value1567($tmp67, $call66);
      var $69=$type;
      var $70=$tmp67;
      assert(12 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($70)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($70)+(4))>>2)];HEAP32[((($69)+(8))>>2)]=HEAP32[((($70)+(8))>>2)];
      label = 36; break;
    case 30: 
      var $71=$mrb_addr;
      var $call69=_mrb_intern_cstr($71, ((108376)|0));
      _mrb_symbol_value1567($tmp70, $call69);
      var $72=$type;
      var $73=$tmp70;
      assert(12 % 1 === 0);HEAP32[(($72)>>2)]=HEAP32[(($73)>>2)];HEAP32[((($72)+(4))>>2)]=HEAP32[((($73)+(4))>>2)];HEAP32[((($72)+(8))>>2)]=HEAP32[((($73)+(8))>>2)];
      label = 36; break;
    case 31: 
      var $74=$mrb_addr;
      var $call72=_mrb_intern_cstr($74, ((108036)|0));
      _mrb_symbol_value1567($tmp73, $call72);
      var $75=$type;
      var $76=$tmp73;
      assert(12 % 1 === 0);HEAP32[(($75)>>2)]=HEAP32[(($76)>>2)];HEAP32[((($75)+(4))>>2)]=HEAP32[((($76)+(4))>>2)];HEAP32[((($75)+(8))>>2)]=HEAP32[((($76)+(8))>>2)];
      label = 36; break;
    case 32: 
      var $77=$mrb_addr;
      var $call75=_mrb_intern_cstr($77, ((107508)|0));
      _mrb_symbol_value1567($tmp76, $call75);
      var $78=$type;
      var $79=$tmp76;
      assert(12 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[((($78)+(4))>>2)]=HEAP32[((($79)+(4))>>2)];HEAP32[((($78)+(8))>>2)]=HEAP32[((($79)+(8))>>2)];
      label = 36; break;
    case 33: 
      var $80=$mrb_addr;
      var $call78=_mrb_intern_cstr($80, ((107248)|0));
      _mrb_symbol_value1567($tmp79, $call78);
      var $81=$type;
      var $82=$tmp79;
      assert(12 % 1 === 0);HEAP32[(($81)>>2)]=HEAP32[(($82)>>2)];HEAP32[((($81)+(4))>>2)]=HEAP32[((($82)+(4))>>2)];HEAP32[((($81)+(8))>>2)]=HEAP32[((($82)+(8))>>2)];
      label = 36; break;
    case 34: 
      var $83=$mrb_addr;
      var $call81=_mrb_intern_cstr($83, ((106844)|0));
      _mrb_symbol_value1567($tmp82, $call81);
      var $84=$type;
      var $85=$tmp82;
      assert(12 % 1 === 0);HEAP32[(($84)>>2)]=HEAP32[(($85)>>2)];HEAP32[((($84)+(4))>>2)]=HEAP32[((($85)+(4))>>2)];HEAP32[((($84)+(8))>>2)]=HEAP32[((($85)+(8))>>2)];
      label = 36; break;
    case 35: 
      var $86=$i;
      _mrb_fixnum_value1568($tmp83, $86);
      var $87=$type;
      var $88=$tmp83;
      assert(12 % 1 === 0);HEAP32[(($87)>>2)]=HEAP32[(($88)>>2)];HEAP32[((($87)+(4))>>2)]=HEAP32[((($88)+(4))>>2)];HEAP32[((($87)+(8))>>2)]=HEAP32[((($88)+(8))>>2)];
      label = 36; break;
    case 36: 
      var $89=$i;
      var $counts84=(($obj_count+8)|0);
      var $arrayidx85=(($counts84+($89<<2))|0);
      var $90=HEAP32[(($arrayidx85)>>2)];
      var $tobool=(($90)|(0))!=0;
      if ($tobool) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $91=$mrb_addr;
      var $92=$i;
      var $counts88=(($obj_count+8)|0);
      var $arrayidx89=(($counts88+($92<<2))|0);
      var $93=HEAP32[(($arrayidx89)>>2)];
      _mrb_fixnum_value1568($agg_tmp87, $93);
      _mrb_hash_set($91, $hash, $type, $agg_tmp87);
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $94=$i;
      var $inc92=((($94)+(1))|0);
      $i=$inc92;
      label = 11; break;
    case 40: 
      var $95=$agg_result;
      var $96=$hash;
      assert(12 % 1 === 0);HEAP32[(($95)>>2)]=HEAP32[(($96)>>2)];HEAP32[((($95)+(4))>>2)]=HEAP32[((($96)+(4))>>2)];HEAP32[((($95)+(8))>>2)]=HEAP32[((($96)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_symbol_value1567($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=4;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $sym=$value;
      HEAP16[(($sym)>>1)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value1568($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_objectspace_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $os;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_define_module($0, ((106392)|0));
  $os=$call;
  var $1=$mrb_addr;
  var $2=$os;
  _mrb_define_class_method($1, $2, ((106020)|0), 642, 4096);
  return;
}
function _mrb_obj_value1575($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_print_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_mruby_print_gem_final($0);
  return;
}
function _mrb_printstr($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $argv=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((110372)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,tempInt));
  var $1=$mrb_addr;
  _printstr1581($1, $argv);
  var $2=$agg_result;
  var $3=$argv;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _printstr1581($mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $str;
      var $s;
      var $len;
      $mrb_addr=$mrb;
      var $tt=(($obj+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)|(0))==16;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $value=(($obj)|0);
      var $p=$value;
      var $1=HEAP32[(($p)>>2)];
      var $2=$1;
      $str=$2;
      var $3=$str;
      var $ptr=(($3+20)|0);
      var $4=HEAP32[(($ptr)>>2)];
      $s=$4;
      var $5=$str;
      var $len1=(($5+12)|0);
      var $6=HEAP32[(($len1)>>2)];
      $len=$6;
      var $7=$s;
      var $8=$len;
      var $9=HEAP32[((_stdout)>>2)];
      var $call=_fwrite($7, $8, 1, $9);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_print_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $krn;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $kernel_module=(($0+96)|0);
  var $1=HEAP32[(($kernel_module)>>2)];
  $krn=$1;
  var $2=$mrb_addr;
  var $3=$krn;
  _mrb_define_method($2, $3, ((112712)|0), 72, 262144);
  return;
}
function _mrb_obj_value1588($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_proc_ext_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_mruby_proc_ext_gem_final($0);
  return;
}
function _mrb_mruby_proc_ext_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $p;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $proc_class=(($0+56)|0);
  var $1=HEAP32[(($proc_class)>>2)];
  $p=$1;
  var $2=$mrb_addr;
  var $3=$p;
  _mrb_define_method($2, $3, ((110340)|0), 16, 0);
  var $4=$mrb_addr;
  var $5=$p;
  _mrb_define_method($4, $5, ((112696)|0), 406, 0);
  var $6=$mrb_addr;
  var $7=$p;
  _mrb_define_method($6, $7, ((107800)|0), 434, 0);
  var $8=$mrb_addr;
  var $9=$p;
  _mrb_define_method($8, $9, ((104260)|0), 434, 0);
  var $10=$mrb_addr;
  var $11=$mrb_addr;
  var $kernel_module=(($11+96)|0);
  var $12=HEAP32[(($kernel_module)>>2)];
  _mrb_define_class_method($10, $12, ((101544)|0), 126, 0);
  var $13=$mrb_addr;
  var $14=$mrb_addr;
  var $kernel_module1=(($14+96)|0);
  var $15=HEAP32[(($kernel_module1)>>2)];
  _mrb_define_method($13, $15, ((101544)|0), 126, 0);
  return;
}
function _mrb_proc_lambda($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $p;
  $mrb_addr=$mrb;
  var $value=(($self)|0);
  var $p1=$value;
  var $0=HEAP32[(($p1)>>2)];
  var $1=$0;
  $p=$1;
  var $2=$p;
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4 >>> 11;
  var $bf_clear=$5 & 2097151;
  var $and=$bf_clear & 256;
  var $cmp=(($and)|(0))!=0;
  var $conv=(($cmp)&(1));
  var $conv2=(($conv) & 255);
  _mrb_bool_value1611($agg_result, $conv2);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_proc_source_location($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $p;
      var $irep;
      var $filename=__stackBase__;
      var $lines=(__stackBase__)+(12);
      var $tmp=(__stackBase__)+(24);
      var $tmp10=(__stackBase__)+(36);
      $mrb_addr=$mrb;
      var $value=(($self)|0);
      var $p1=$value;
      var $0=HEAP32[(($p1)>>2)];
      var $1=$0;
      $p=$1;
      var $2=$p;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4 >>> 11;
      var $bf_clear=$5 & 2097151;
      var $and=$bf_clear & 128;
      var $cmp=(($and)|(0))!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      _mrb_nil_value1610($agg_result);
      label = 9; break;
    case 4: 
      var $6=$p;
      var $body=(($6+12)|0);
      var $irep2=$body;
      var $7=HEAP32[(($irep2)>>2)];
      $irep=$7;
      _mrb_nil_value1610($filename);
      _mrb_nil_value1610($lines);
      var $8=$irep;
      var $filename3=(($8+24)|0);
      var $9=HEAP32[(($filename3)>>2)];
      var $tobool=(($9)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $10=$mrb_addr;
      var $11=$irep;
      var $filename5=(($11+24)|0);
      var $12=HEAP32[(($filename5)>>2)];
      _mrb_str_new_cstr($tmp, $10, $12);
      var $13=$filename;
      var $14=$tmp;
      assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
      label = 6; break;
    case 6: 
      var $15=$irep;
      var $lines6=(($15+28)|0);
      var $16=HEAP32[(($lines6)>>2)];
      var $tobool7=(($16)|(0))!=0;
      if ($tobool7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $17=$irep;
      var $lines9=(($17+28)|0);
      var $18=HEAP32[(($lines9)>>2)];
      var $19=HEAP16[(($18)>>1)];
      var $conv=(($19)&(65535));
      _mrb_fixnum_value1609($tmp10, $conv);
      var $20=$lines;
      var $21=$tmp10;
      assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
      label = 8; break;
    case 8: 
      var $22=$mrb_addr;
      _mrb_assoc_new($agg_result, $22, $filename, $lines);
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_print_gem_init($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ai;
      var $tmp=__stackBase__;
      var $agg_tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_gc_arena_save($0);
      $ai=$call;
      var $1=$mrb_addr;
      _mrb_mruby_print_gem_init($1);
      var $2=$mrb_addr;
      _mrb_load_irep($tmp, $2, ((83960)|0));
      var $3=$mrb_addr;
      var $exc=(($3+16)|0);
      var $4=HEAP32[(($exc)>>2)];
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$mrb_addr;
      _mrb_print_backtrace($5);
      var $6=$mrb_addr;
      var $7=$mrb_addr;
      var $exc1=(($7+16)|0);
      var $8=HEAP32[(($exc1)>>2)];
      var $9=$8;
      _mrb_obj_value1575($agg_tmp, $9);
      _mrb_p($6, $agg_tmp);
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $10=$mrb_addr;
      var $11=$ai;
      _mrb_gc_arena_restore($10, $11);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_proc_ext_gem_init($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ai;
      var $tmp=__stackBase__;
      var $agg_tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_gc_arena_save($0);
      $ai=$call;
      var $1=$mrb_addr;
      _mrb_mruby_proc_ext_gem_init($1);
      var $2=$mrb_addr;
      _mrb_load_irep($tmp, $2, ((82968)|0));
      var $3=$mrb_addr;
      var $exc=(($3+16)|0);
      var $4=HEAP32[(($exc)>>2)];
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$mrb_addr;
      _mrb_print_backtrace($5);
      var $6=$mrb_addr;
      var $7=$mrb_addr;
      var $exc1=(($7+16)|0);
      var $8=HEAP32[(($exc1)>>2)];
      var $9=$8;
      _mrb_obj_value1588($agg_tmp, $9);
      _mrb_p($6, $agg_tmp);
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $10=$mrb_addr;
      var $11=$ai;
      _mrb_gc_arena_restore($10, $11);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_proc_ext_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  return;
}
function _mrb_mruby_random_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  return;
}
function _mrb_proc_inspect($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 132)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $p;
      var $str=__stackBase__;
      var $agg_tmp=(__stackBase__)+(12);
      var $irep;
      var $tmp=(__stackBase__)+(24);
      var $tmp7=(__stackBase__)+(36);
      var $tmp8=(__stackBase__)+(48);
      var $tmp9=(__stackBase__)+(60);
      var $agg_tmp12=(__stackBase__)+(72);
      var $tmp14=(__stackBase__)+(84);
      var $tmp16=(__stackBase__)+(96);
      var $tmp24=(__stackBase__)+(108);
      var $tmp26=(__stackBase__)+(120);
      $mrb_addr=$mrb;
      var $value=(($self)|0);
      var $p1=$value;
      var $0=HEAP32[(($p1)>>2)];
      var $1=$0;
      $p=$1;
      var $2=$mrb_addr;
      _mrb_str_new_cstr($str, $2, ((94708)|0));
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $value2=(($self)|0);
      var $p3=$value2;
      var $5=HEAP32[(($p3)>>2)];
      _mrb_ptr_to_str($agg_tmp, $4, $5);
      _mrb_str_concat($3, $str, $agg_tmp);
      var $6=$p;
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 >>> 11;
      var $bf_clear=$9 & 2097151;
      var $and=$bf_clear & 128;
      var $cmp=(($and)|(0))!=0;
      if ($cmp) { label = 10; break; } else { label = 3; break; }
    case 3: 
      var $10=$p;
      var $body=(($10+12)|0);
      var $irep4=$body;
      var $11=HEAP32[(($irep4)>>2)];
      $irep=$11;
      var $12=$mrb_addr;
      _mrb_str_cat_cstr($tmp, $12, $str, ((93868)|0));
      var $13=$irep;
      var $filename=(($13+24)|0);
      var $14=HEAP32[(($filename)>>2)];
      var $tobool=(($14)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $15=$mrb_addr;
      var $16=$irep;
      var $filename6=(($16+24)|0);
      var $17=HEAP32[(($filename6)>>2)];
      _mrb_str_cat_cstr($tmp7, $15, $str, $17);
      label = 6; break;
    case 5: 
      var $18=$mrb_addr;
      _mrb_str_cat_cstr($tmp8, $18, $str, ((113656)|0));
      label = 6; break;
    case 6: 
      var $19=$mrb_addr;
      _mrb_str_cat_cstr($tmp9, $19, $str, ((113064)|0));
      var $20=$irep;
      var $lines=(($20+28)|0);
      var $21=HEAP32[(($lines)>>2)];
      var $tobool10=(($21)|(0))!=0;
      if ($tobool10) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $22=$mrb_addr;
      var $23=$irep;
      var $lines13=(($23+28)|0);
      var $24=HEAP32[(($lines13)>>2)];
      var $25=HEAP16[(($24)>>1)];
      var $conv=(($25)&(65535));
      _mrb_fixnum_value1609($agg_tmp12, $conv);
      _mrb_str_append($tmp14, $22, $str, $agg_tmp12);
      label = 9; break;
    case 8: 
      var $26=$mrb_addr;
      _mrb_str_cat_cstr($tmp16, $26, $str, ((113656)|0));
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $27=$p;
      var $28=$27;
      var $29=HEAP32[(($28)>>2)];
      var $30=$29 >>> 11;
      var $bf_clear19=$30 & 2097151;
      var $and20=$bf_clear19 & 256;
      var $cmp21=(($and20)|(0))!=0;
      if ($cmp21) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $31=$mrb_addr;
      _mrb_str_cat_cstr($tmp24, $31, $str, ((112172)|0));
      label = 12; break;
    case 12: 
      var $32=$mrb_addr;
      _mrb_str_cat_cstr($tmp26, $32, $str, ((111604)|0));
      var $33=$agg_result;
      var $34=$str;
      assert(12 % 1 === 0);HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];HEAP32[((($33)+(8))>>2)]=HEAP32[((($34)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_kernel_proc($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $blk=__stackBase__;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((98960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$blk,tempInt));
      var $tt=(($blk+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $value=(($blk)|0);
      var $i=$value;
      var $2=HEAP32[(($i)>>2)];
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call1=_mrb_class_get($4, ((96912)|0));
      _mrb_raise($3, $call1, ((95720)|0));
      label = 5; break;
    case 5: 
      var $5=$agg_result;
      var $6=$blk;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value1609($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1610($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value1611($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $boolean_addr;
      var $v=__stackBase__;
      $boolean_addr=$boolean;
      label = 3; break;
    case 3: 
      var $0=$boolean_addr;
      var $conv=(($0)&(255));
      var $tobool=(($conv)|(0))!=0;
      var $cond=$tobool ? 2 : 0;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$cond;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_random_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $ai;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_gc_arena_save($0);
  $ai=$call;
  var $1=$mrb_addr;
  _mrb_mruby_random_gem_init($1);
  var $2=$mrb_addr;
  var $3=$ai;
  _mrb_gc_arena_restore($2, $3);
  return;
}
function _GENERATED_TMP_mrb_mruby_random_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_mruby_random_gem_final($0);
  return;
}
function _mrb_mruby_random_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $random;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $kernel_module=(($1+96)|0);
  var $2=HEAP32[(($kernel_module)>>2)];
  _mrb_define_method($0, $2, ((110180)|0), 304, 8192);
  var $3=$mrb_addr;
  var $4=$mrb_addr;
  var $kernel_module1=(($4+96)|0);
  var $5=HEAP32[(($kernel_module1)>>2)];
  _mrb_define_method($3, $5, ((112680)|0), 430, 8192);
  var $6=$mrb_addr;
  var $7=$mrb_addr;
  var $object_class=(($7+44)|0);
  var $8=HEAP32[(($object_class)>>2)];
  var $call=_mrb_define_class($6, ((107788)|0), $8);
  $random=$call;
  var $9=$mrb_addr;
  var $10=$random;
  _mrb_define_class_method($9, $10, ((110180)|0), 304, 8192);
  var $11=$mrb_addr;
  var $12=$random;
  _mrb_define_class_method($11, $12, ((112680)|0), 430, 8192);
  var $13=$mrb_addr;
  var $14=$random;
  _mrb_define_method($13, $14, ((104224)|0), 456, 8192);
  var $15=$mrb_addr;
  var $16=$random;
  _mrb_define_method($15, $16, ((110180)|0), 348, 8192);
  var $17=$mrb_addr;
  var $18=$random;
  _mrb_define_method($17, $18, ((112680)|0), 282, 8192);
  return;
}
function _mrb_random_g_rand($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $max=__stackBase__;
      var $seed=(__stackBase__)+(12);
      var $tmp=(__stackBase__)+(24);
      var $tmp1=(__stackBase__)+(36);
      var $agg_tmp=(__stackBase__)+(48);
      var $tmp2=(__stackBase__)+(60);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      _get_opt($tmp, $0);
      var $1=$max;
      var $2=$tmp;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call=_mrb_intern1634($4, ((111560)|0));
      _mrb_gv_get($tmp1, $3, $call);
      var $5=$seed;
      var $6=$tmp1;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      var $tt=(($seed+8)|0);
      var $7=HEAP32[(($tt)>>2)];
      var $cmp=(($7)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $value=(($seed)|0);
      var $i=$value;
      var $8=HEAP32[(($i)>>2)];
      var $tobool=(($8)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $9=$mrb_addr;
      _mrb_nil_value1636($agg_tmp);
      _mrb_random_mt_g_srand($tmp2, $9, $agg_tmp);
      label = 5; break;
    case 5: 
      var $10=$mrb_addr;
      _mrb_random_mt_g_rand($agg_result, $10, $max);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_random_g_srand($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $seed=__stackBase__;
  var $old_seed=(__stackBase__)+(12);
  var $tmp=(__stackBase__)+(24);
  var $tmp1=(__stackBase__)+(36);
  var $tmp2=(__stackBase__)+(48);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _get_opt($tmp, $0);
  var $1=$seed;
  var $2=$tmp;
  assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
  var $3=$mrb_addr;
  _mrb_random_mt_g_srand($tmp1, $3, $seed);
  var $4=$seed;
  var $5=$tmp1;
  assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
  var $6=$mrb_addr;
  var $7=$mrb_addr;
  var $call=_mrb_intern1634($7, ((111560)|0));
  _mrb_gv_get($tmp2, $6, $call);
  var $8=$old_seed;
  var $9=$tmp2;
  assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
  var $10=$mrb_addr;
  var $11=$mrb_addr;
  var $call3=_mrb_intern1634($11, ((111560)|0));
  _mrb_gv_set($10, $call3, $seed);
  var $12=$agg_result;
  var $13=$old_seed;
  assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_random_init($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $seed=__stackBase__;
  var $t;
  var $tmp=(__stackBase__)+(12);
  var $tmp1=(__stackBase__)+(24);
  var $agg_tmp=(__stackBase__)+(36);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_malloc($0, 2508);
  var $1=$call;
  $t=$1;
  var $2=$t;
  var $mti=(($2+2496)|0);
  HEAP32[(($mti)>>2)]=625;
  var $3=$mrb_addr;
  _get_opt($tmp, $3);
  var $4=$seed;
  var $5=$tmp;
  assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
  var $6=$mrb_addr;
  var $7=$t;
  _mrb_random_mt_srand($tmp1, $6, $7, $seed);
  var $8=$seed;
  var $9=$tmp1;
  assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
  var $10=$mrb_addr;
  var $11=$mrb_addr;
  var $call2=_mrb_intern1634($11, ((101508)|0));
  _mrb_iv_set($10, $self, $call2, $seed);
  var $12=$mrb_addr;
  var $13=$mrb_addr;
  var $call3=_mrb_intern1634($13, ((113640)|0));
  var $14=$mrb_addr;
  var $15=$mrb_addr;
  var $object_class=(($15+44)|0);
  var $16=HEAP32[(($object_class)>>2)];
  var $17=$t;
  var $18=$17;
  var $call4=_mrb_data_object_alloc($14, $16, $18, 60080);
  var $19=$call4;
  _mrb_obj_value1638($agg_tmp, $19);
  _mrb_iv_set($12, $self, $call3, $agg_tmp);
  var $20=$agg_result;
  var $21=$self;
  assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_random_rand($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $max=__stackBase__;
      var $seed=(__stackBase__)+(12);
      var $t;
      var $tmp=(__stackBase__)+(24);
      var $tmp2=(__stackBase__)+(36);
      var $agg_tmp=(__stackBase__)+(48);
      var $tmp3=(__stackBase__)+(60);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_mt_get_context($0, $self);
      $t=$call;
      var $1=$mrb_addr;
      _get_opt($tmp, $1);
      var $2=$max;
      var $3=$tmp;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call1=_mrb_intern1634($5, ((101508)|0));
      _mrb_iv_get($tmp2, $4, $self, $call1);
      var $6=$seed;
      var $7=$tmp2;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      var $tt=(($seed+8)|0);
      var $8=HEAP32[(($tt)>>2)];
      var $cmp=(($8)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $value=(($seed)|0);
      var $i=$value;
      var $9=HEAP32[(($i)>>2)];
      var $tobool=(($9)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $10=$mrb_addr;
      var $11=$t;
      _mrb_nil_value1636($agg_tmp);
      _mrb_random_mt_srand($tmp3, $10, $11, $agg_tmp);
      label = 5; break;
    case 5: 
      var $12=$mrb_addr;
      var $13=$t;
      _mrb_random_mt_rand($agg_result, $12, $13, $max);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_random_srand($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $seed=__stackBase__;
  var $old_seed=(__stackBase__)+(12);
  var $t;
  var $tmp=(__stackBase__)+(24);
  var $tmp1=(__stackBase__)+(36);
  var $tmp3=(__stackBase__)+(48);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_mt_get_context($0, $self);
  $t=$call;
  var $1=$mrb_addr;
  _get_opt($tmp, $1);
  var $2=$seed;
  var $3=$tmp;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  var $4=$mrb_addr;
  var $5=$t;
  _mrb_random_mt_srand($tmp1, $4, $5, $seed);
  var $6=$seed;
  var $7=$tmp1;
  assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
  var $8=$mrb_addr;
  var $9=$mrb_addr;
  var $call2=_mrb_intern1634($9, ((101508)|0));
  _mrb_iv_get($tmp3, $8, $self, $call2);
  var $10=$old_seed;
  var $11=$tmp3;
  assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
  var $12=$mrb_addr;
  var $13=$mrb_addr;
  var $call4=_mrb_intern1634($13, ((101508)|0));
  _mrb_iv_set($12, $self, $call4, $seed);
  var $14=$agg_result;
  var $15=$old_seed;
  assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mt_get_context($mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $t;
      var $context=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $1=$mrb_addr;
      var $call=_mrb_intern1634($1, ((113640)|0));
      _mrb_iv_get($tmp, $0, $self, $call);
      var $2=$context;
      var $3=$tmp;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      var $4=$mrb_addr;
      var $call1=_mrb_data_get_ptr($4, $context, 60080);
      var $5=$call1;
      $t=$5;
      var $6=$t;
      var $tobool=(($6)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $7=$mrb_addr;
      var $8=$mrb_addr;
      var $call2=_mrb_class_get($8, ((113048)|0));
      _mrb_raise($7, $call2, ((112132)|0));
      label = 4; break;
    case 4: 
      var $9=$t;
      STACKTOP = __stackBase__;
      return $9;
    default: assert(0, "bad label: " + label);
  }
}
function _get_opt($agg_result, $mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $arg=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      var $tmp5=(__stackBase__)+(24);
      var $tmp12=(__stackBase__)+(36);
      $mrb_addr=$mrb;
      _mrb_fixnum_value1635($tmp, 0);
      var $0=$arg;
      var $1=$tmp;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      var $2=$mrb_addr;
      var $call=_mrb_get_args($2, ((98928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$arg,tempInt));
      var $tt=(($arg+8)|0);
      var $3=HEAP32[(($tt)>>2)];
      var $cmp=(($3)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $value=(($arg)|0);
      var $i=$value;
      var $4=HEAP32[(($i)>>2)];
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $tt1=(($arg+8)|0);
      var $5=HEAP32[(($tt1)>>2)];
      var $cmp2=(($5)|(0))==3;
      if ($cmp2) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $6=$mrb_addr;
      var $7=$mrb_addr;
      var $call4=_mrb_class_get($7, ((96896)|0));
      _mrb_raise($6, $call4, ((95696)|0));
      label = 6; break;
    case 6: 
      var $8=$mrb_addr;
      _mrb_check_convert_type($tmp5, $8, $arg, 3, ((94700)|0), ((93860)|0));
      var $9=$arg;
      var $10=$tmp5;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      var $value6=(($arg)|0);
      var $i7=$value6;
      var $11=HEAP32[(($i7)>>2)];
      var $cmp8=(($11)|(0)) < 0;
      if ($cmp8) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $value10=(($arg)|0);
      var $i11=$value10;
      var $12=HEAP32[(($i11)>>2)];
      var $sub=(((-$12))|0);
      _mrb_fixnum_value1635($tmp12, $sub);
      var $13=$arg;
      var $14=$tmp12;
      assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $15=$agg_result;
      var $16=$arg;
      assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_random_mt_srand($agg_result, $mrb, $t, $seed) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $seed; $seed = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($seed)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($seed)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($seed)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $t_addr;
      var $tmp=__stackBase__;
      var $tmp8=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      $t_addr=$t;
      var $tt=(($seed+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $value=(($seed)|0);
      var $i=$value;
      var $1=HEAP32[(($i)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 4; break; }
    case 4: 
      var $call=_time(0);
      var $2=$t_addr;
      var $call1=_mt_rand($2);
      var $add=((($call)+($call1))|0);
      _mrb_fixnum_value1635($tmp, $add);
      var $3=$seed;
      var $4=$tmp;
      assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
      var $value2=(($seed)|0);
      var $i3=$value2;
      var $5=HEAP32[(($i3)>>2)];
      var $cmp4=(($5)|(0)) < 0;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $value6=(($seed)|0);
      var $i7=$value6;
      var $6=HEAP32[(($i7)>>2)];
      var $sub=(((-$6))|0);
      _mrb_fixnum_value1635($tmp8, $sub);
      var $7=$seed;
      var $8=$tmp8;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $9=$t_addr;
      var $value10=(($seed)|0);
      var $i11=$value10;
      var $10=HEAP32[(($i11)>>2)];
      _mt_srand($9, $10);
      var $11=$agg_result;
      var $12=$seed;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern1634($mrb, $cstr) {
  var label = 0;
  var $mrb_addr;
  var $cstr_addr;
  $mrb_addr=$mrb;
  $cstr_addr=$cstr;
  var $0=$mrb_addr;
  var $1=$cstr_addr;
  var $call=_mrb_intern_cstr($0, $1);
  return $call;
}
function _mrb_fixnum_value1635($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mt_rand($t) {
  var label = 0;
  var $t_addr;
  $t_addr=$t;
  var $0=$t_addr;
  var $call=_mrb_random_genrand_int32($0);
  return $call;
}
function _mt_srand($t, $seed) {
  var label = 0;
  var $t_addr;
  var $seed_addr;
  $t_addr=$t;
  $seed_addr=$seed;
  var $0=$t_addr;
  var $1=$seed_addr;
  _mrb_random_init_genrand($0, $1);
  return;
}
function _mrb_nil_value1636($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_random_mt_rand($agg_result, $mrb, $t, $max) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $max; $max = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($max)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($max)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($max)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $t_addr;
      var $value=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      var $tmp5=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      $t_addr=$t;
      var $value1=(($max)|0);
      var $i=$value1;
      var $0=HEAP32[(($i)>>2)];
      var $cmp=(($0)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$t_addr;
      var $call=_mt_rand_real($1);
      _mrb_float_value1637($tmp, $call);
      var $2=$value;
      var $3=$tmp;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      label = 5; break;
    case 4: 
      var $4=$t_addr;
      var $call2=_mt_rand($4);
      var $value3=(($max)|0);
      var $i4=$value3;
      var $5=HEAP32[(($i4)>>2)];
      var $rem=((($call2)>>>(0)))%((($5)>>>(0)));
      _mrb_fixnum_value1635($tmp5, $rem);
      var $6=$value;
      var $7=$tmp5;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      label = 5; break;
    case 5: 
      var $8=$agg_result;
      var $9=$value;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_float_value1637($agg_result, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $f_addr;
      var $v=__stackBase__;
      $f_addr=$f;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=6;
      var $0=$f_addr;
      var $value=(($v)|0);
      var $f1=$value;
      (HEAPF64[(tempDoublePtr)>>3]=$0,HEAP32[(($f1)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mt_rand_real($t) {
  var label = 0;
  var $t_addr;
  $t_addr=$t;
  var $0=$t_addr;
  var $call=_mrb_random_genrand_real1($0);
  return $call;
}
function _mrb_obj_value1638($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_random_mt_g_srand($agg_result, $mrb, $seed) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $seed; $seed = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($seed)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($seed)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($seed)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tmp=__stackBase__;
      var $tmp8=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $tt=(($seed+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $value=(($seed)|0);
      var $i=$value;
      var $1=HEAP32[(($i)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 4; break; }
    case 4: 
      var $call=_time(0);
      var $call1=_mt_g_rand();
      var $add=((($call)+($call1))|0);
      _mrb_fixnum_value1635($tmp, $add);
      var $2=$seed;
      var $3=$tmp;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      var $value2=(($seed)|0);
      var $i3=$value2;
      var $4=HEAP32[(($i3)>>2)];
      var $cmp4=(($4)|(0)) < 0;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $value6=(($seed)|0);
      var $i7=$value6;
      var $5=HEAP32[(($i7)>>2)];
      var $sub=(((-$5))|0);
      _mrb_fixnum_value1635($tmp8, $sub);
      var $6=$seed;
      var $7=$tmp8;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $value10=(($seed)|0);
      var $i11=$value10;
      var $8=HEAP32[(($i11)>>2)];
      _mt_g_srand($8);
      var $9=$agg_result;
      var $10=$seed;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mt_g_srand($seed) {
  var label = 0;
  var $seed_addr;
  $seed_addr=$seed;
  var $0=$seed_addr;
  _init_genrand($0);
  return;
}
function _mt_g_rand() {
  var label = 0;
  var $call=_genrand_int32();
  return $call;
}
function _mrb_random_mt_g_rand($agg_result, $mrb, $max) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $max; $max = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($max)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($max)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($max)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $value=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      var $tmp5=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      var $value1=(($max)|0);
      var $i=$value1;
      var $0=HEAP32[(($i)>>2)];
      var $cmp=(($0)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $call=_mt_g_rand_real();
      _mrb_float_value1637($tmp, $call);
      var $1=$value;
      var $2=$tmp;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      label = 5; break;
    case 4: 
      var $call2=_mt_g_rand();
      var $value3=(($max)|0);
      var $i4=$value3;
      var $3=HEAP32[(($i4)>>2)];
      var $rem=((($call2)>>>(0)))%((($3)>>>(0)));
      _mrb_fixnum_value1635($tmp5, $rem);
      var $4=$value;
      var $5=$tmp5;
      assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
      label = 5; break;
    case 5: 
      var $6=$agg_result;
      var $7=$value;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mt_g_rand_real() {
  var label = 0;
  var $call=_genrand_real1();
  return $call;
}
function _GENERATED_TMP_mrb_mruby_range_ext_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $ai;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_gc_arena_save($0);
  $ai=$call;
  var $1=$mrb_addr;
  _mrb_mruby_range_ext_gem_init($1);
  var $2=$mrb_addr;
  var $3=$ai;
  _mrb_gc_arena_restore($2, $3);
  return;
}
function _GENERATED_TMP_mrb_mruby_range_ext_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_mruby_range_ext_gem_final($0);
  return;
}
function _mrb_mruby_range_ext_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  return;
}
function _mrb_mruby_sprintf_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  return;
}
function _mrb_mruby_range_ext_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $s;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_class_get($0, ((110064)|0));
  $s=$call;
  var $1=$mrb_addr;
  var $2=$s;
  _mrb_define_method($1, $2, ((112672)|0), 46, 262144);
  var $3=$mrb_addr;
  var $4=$s;
  _mrb_define_method($3, $4, ((107780)|0), 34, 8192);
  var $5=$mrb_addr;
  var $6=$s;
  _mrb_define_method($5, $6, ((104216)|0), 272, 8192);
  return;
}
function _mrb_range_cover($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $val=__stackBase__;
      var $r;
      var $beg=(__stackBase__)+(12);
      var $end=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      var $value=(($range)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $r=$1;
      var $2=$mrb_addr;
      var $call=_mrb_get_args($2, ((96892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$val,tempInt));
      var $3=$r;
      var $edges=(($3+12)|0);
      var $4=HEAP32[(($edges)>>2)];
      var $beg1=(($4)|0);
      var $5=$beg;
      var $6=$beg1;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      var $7=$r;
      var $edges2=(($7+12)|0);
      var $8=HEAP32[(($edges2)>>2)];
      var $end3=(($8+12)|0);
      var $9=$end;
      var $10=$end3;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      var $11=$mrb_addr;
      var $call4=_r_le1655($11, $beg, $val);
      var $tobool=(($call4)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 11; break; }
    case 3: 
      var $12=$r;
      var $excl=(($12+16)|0);
      var $13=HEAP32[(($excl)>>2)];
      var $tobool5=(($13)|(0))!=0;
      if ($tobool5) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $14=$mrb_addr;
      var $call7=_r_lt($14, $val, $end);
      var $tobool8=(($call7)|(0))!=0;
      if ($tobool8) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _mrb_true_value1656($agg_result);
      label = 12; break;
    case 6: 
      label = 10; break;
    case 7: 
      var $15=$mrb_addr;
      var $call10=_r_le1655($15, $val, $end);
      var $tobool11=(($call10)|(0))!=0;
      if ($tobool11) { label = 8; break; } else { label = 9; break; }
    case 8: 
      _mrb_true_value1656($agg_result);
      label = 12; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      _mrb_false_value1657($agg_result);
      label = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_range_first($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $num=__stackBase__;
      var $array=(__stackBase__)+(12);
      var $r;
      var $tmp=(__stackBase__)+(24);
      var $agg_tmp=(__stackBase__)+(36);
      $mrb_addr=$mrb;
      var $value=(($range)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $r=$1;
      var $2=$mrb_addr;
      var $call=_mrb_get_args($2, ((101504)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$num,tempInt));
      var $cmp=(($call)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$r;
      var $edges=(($3+12)|0);
      var $4=HEAP32[(($edges)>>2)];
      var $beg=(($4)|0);
      var $5=$agg_result;
      var $6=$beg;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      label = 5; break;
    case 4: 
      var $7=$mrb_addr;
      _mrb_funcall($tmp, $7, $range, ((98920)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $8=$array;
      var $9=$tmp;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      var $10=$mrb_addr;
      var $11=$mrb_addr;
      _mrb_to_int($agg_tmp, $11, $num);
      _mrb_funcall($agg_result, $10, $array, ((107780)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_range_last($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $num=__stackBase__;
      var $array=(__stackBase__)+(12);
      var $r;
      var $tmp=(__stackBase__)+(24);
      var $agg_tmp=(__stackBase__)+(36);
      $mrb_addr=$mrb;
      var $value=(($range)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      $r=$1;
      var $2=$mrb_addr;
      var $call=_mrb_get_args($2, ((101504)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$num,tempInt));
      var $cmp=(($call)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$r;
      var $edges=(($3+12)|0);
      var $4=HEAP32[(($edges)>>2)];
      var $end=(($4+12)|0);
      var $5=$agg_result;
      var $6=$end;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      label = 5; break;
    case 4: 
      var $7=$mrb_addr;
      _mrb_funcall($tmp, $7, $range, ((98920)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $8=$array;
      var $9=$tmp;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      var $10=$mrb_addr;
      var $11=$mrb_addr;
      _mrb_to_int($agg_tmp, $11, $num);
      _mrb_funcall($agg_result, $10, $array, ((104216)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _r_le1655($mrb, $a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $r=__stackBase__;
      var $c;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      _mrb_funcall($r, $0, $a, ((95692)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($b)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($b)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($b)+(8))>>2)],tempInt));
      var $tt=(($r+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==3;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $value=(($r)|0);
      var $i=$value;
      var $2=HEAP32[(($i)>>2)];
      $c=$2;
      var $3=$c;
      var $cmp1=(($3)|(0))==0;
      if ($cmp1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$c;
      var $cmp2=(($4)|(0))==-1;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=1;
      label = 8; break;
    case 6: 
      label = 7; break;
    case 7: 
      $retval=0;
      label = 8; break;
    case 8: 
      var $5=$retval;
      STACKTOP = __stackBase__;
      return $5;
    default: assert(0, "bad label: " + label);
  }
}
function _r_lt($mrb, $a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $r=__stackBase__;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      _mrb_funcall($r, $0, $a, ((95692)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($b)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($b)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($b)+(8))>>2)],tempInt));
      var $tt=(($r+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==3;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $value=(($r)|0);
      var $i=$value;
      var $2=HEAP32[(($i)>>2)];
      var $cmp1=(($2)|(0))==-1;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $retval=1;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $3=$retval;
      STACKTOP = __stackBase__;
      return $3;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_true_value1656($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=2;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_false_value1657($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_sprintf_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $ai;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_gc_arena_save($0);
  $ai=$call;
  var $1=$mrb_addr;
  _mrb_mruby_sprintf_gem_init($1);
  var $2=$mrb_addr;
  var $3=$ai;
  _mrb_gc_arena_restore($2, $3);
  return;
}
function _GENERATED_TMP_mrb_mruby_sprintf_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_mruby_sprintf_gem_final($0);
  return;
}
function _mrb_mruby_sprintf_gem_init($mrb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $krn;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $kernel_module=(($0+96)|0);
      var $1=HEAP32[(($kernel_module)>>2)];
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$mrb_addr;
      var $call=_mrb_define_module($2, ((110024)|0));
      var $3=$mrb_addr;
      var $kernel_module1=(($3+96)|0);
      HEAP32[(($kernel_module1)>>2)]=$call;
      label = 4; break;
    case 4: 
      var $4=$mrb_addr;
      var $kernel_module2=(($4+96)|0);
      var $5=HEAP32[(($kernel_module2)>>2)];
      $krn=$5;
      var $6=$mrb_addr;
      var $7=$krn;
      _mrb_define_method($6, $7, ((112628)|0), 228, 4096);
      var $8=$mrb_addr;
      var $9=$krn;
      _mrb_define_method($8, $9, ((107772)|0), 228, 4096);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_f_sprintf($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argc=__stackBase__;
      var $argv=(__stackBase__)+(4);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((110012)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      var $1=HEAP32[(($argc)>>2)];
      var $cmp=(($1)|(0)) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$mrb_addr;
      var $3=$mrb_addr;
      var $call1=_mrb_class_get($3, ((112612)|0));
      _mrb_raise($2, $call1, ((107728)|0));
      _mrb_nil_value1717($agg_result);
      label = 5; break;
    case 4: 
      var $4=$mrb_addr;
      var $5=HEAP32[(($argc)>>2)];
      var $sub=((($5)-(1))|0);
      var $6=HEAP32[(($argv)>>2)];
      var $add_ptr=(($6+12)|0);
      var $7=HEAP32[(($argv)>>2)];
      var $arrayidx=(($7)|0);
      _mrb_str_format($agg_result, $4, $sub, $add_ptr, $arrayidx);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1717($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_format($agg_result, $mrb, $argc, $argv, $fmt) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1396)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $fmt; $fmt = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($fmt)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($fmt)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($fmt)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argc_addr;
      var $argv_addr;
      var $p;
      var $end;
      var $buf;
      var $blen;
      var $bsiz;
      var $result=__stackBase__;
      var $n;
      var $width;
      var $prec;
      var $flags;
      var $nextarg;
      var $posarg;
      var $nextvalue=(__stackBase__)+(12);
      var $tmp=(__stackBase__)+(24);
      var $str=(__stackBase__)+(36);
      var $hash=(__stackBase__)+(48);
      var $tmp3=(__stackBase__)+(60);
      var $tmp7=(__stackBase__)+(72);
      var $t;
      var $id;
      var $tmp22=(__stackBase__)+(84);
      var $tmp37=(__stackBase__)+(96);
      var $agg_tmp=(__stackBase__)+(108);
      var $next_n;
      var $agg_tmp135=(__stackBase__)+(120);
      var $agg_tmp140=(__stackBase__)+(132);
      var $agg_tmp141=(__stackBase__)+(144);
      var $tmp142=(__stackBase__)+(156);
      var $agg_tmp147=(__stackBase__)+(168);
      var $tmp148=(__stackBase__)+(180);
      var $agg_tmp154=(__stackBase__)+(192);
      var $tmp155=(__stackBase__)+(204);
      var $tmp161=(__stackBase__)+(216);
      var $start;
      var $term;
      var $symname=(__stackBase__)+(228);
      var $agg_tmp203=(__stackBase__)+(240);
      var $agg_tmp208=(__stackBase__)+(252);
      var $tmp215=(__stackBase__)+(264);
      var $agg_tmp221=(__stackBase__)+(276);
      var $agg_tmp226=(__stackBase__)+(288);
      var $tmp227=(__stackBase__)+(300);
      var $agg_tmp233=(__stackBase__)+(312);
      var $tmp238=(__stackBase__)+(324);
      var $agg_tmp240=(__stackBase__)+(336);
      var $agg_tmp241=(__stackBase__)+(348);
      var $agg_tmp242=(__stackBase__)+(360);
      var $tmp243=(__stackBase__)+(372);
      var $agg_tmp251=(__stackBase__)+(384);
      var $next_n287;
      var $agg_tmp314=(__stackBase__)+(396);
      var $agg_tmp315=(__stackBase__)+(408);
      var $tmp316=(__stackBase__)+(420);
      var $agg_tmp322=(__stackBase__)+(432);
      var $tmp323=(__stackBase__)+(444);
      var $agg_tmp329=(__stackBase__)+(456);
      var $tmp330=(__stackBase__)+(468);
      var $tmp336=(__stackBase__)+(480);
      var $agg_tmp352=(__stackBase__)+(492);
      var $tmp353=(__stackBase__)+(504);
      var $agg_tmp359=(__stackBase__)+(516);
      var $tmp360=(__stackBase__)+(528);
      var $tmp367=(__stackBase__)+(540);
      var $next_n408;
      var $agg_tmp435=(__stackBase__)+(552);
      var $agg_tmp436=(__stackBase__)+(564);
      var $tmp437=(__stackBase__)+(576);
      var $agg_tmp443=(__stackBase__)+(588);
      var $tmp444=(__stackBase__)+(600);
      var $agg_tmp450=(__stackBase__)+(612);
      var $tmp451=(__stackBase__)+(624);
      var $tmp457=(__stackBase__)+(636);
      var $agg_tmp474=(__stackBase__)+(648);
      var $tmp475=(__stackBase__)+(660);
      var $agg_tmp481=(__stackBase__)+(672);
      var $tmp482=(__stackBase__)+(684);
      var $tmp489=(__stackBase__)+(696);
      var $next_n517;
      var $tmp553=(__stackBase__)+(708);
      var $val=(__stackBase__)+(720);
      var $agg_tmp572=(__stackBase__)+(732);
      var $agg_tmp578=(__stackBase__)+(744);
      var $tmp592=(__stackBase__)+(756);
      var $c;
      var $tmp594=(__stackBase__)+(768);
      var $tmp635=(__stackBase__)+(780);
      var $tmp655=(__stackBase__)+(792);
      var $tmp673=(__stackBase__)+(804);
      var $tmp694=(__stackBase__)+(816);
      var $tmp712=(__stackBase__)+(828);
      var $arg=(__stackBase__)+(840);
      var $agg_tmp733=(__stackBase__)+(852);
      var $agg_tmp739=(__stackBase__)+(864);
      var $len753;
      var $slen;
      var $tmp759=(__stackBase__)+(876);
      var $tmp761=(__stackBase__)+(888);
      var $p786;
      var $tmp816=(__stackBase__)+(900);
      var $tmp836=(__stackBase__)+(912);
      var $tmp857=(__stackBase__)+(924);
      var $tmp881=(__stackBase__)+(936);
      var $val894=(__stackBase__)+(948);
      var $agg_tmp904=(__stackBase__)+(960);
      var $agg_tmp910=(__stackBase__)+(972);
      var $fbuf=(__stackBase__)+(984);
      var $nbuf=(__stackBase__)+(1016);
      var $s;
      var $prefix;
      var $sign;
      var $dots;
      var $sc=(__stackBase__)+(1080);
      var $v;
      var $org_v;
      var $base;
      var $len934;
      var $tmp969=(__stackBase__)+(1084);
      var $tmp971=(__stackBase__)+(1096);
      var $tmp978=(__stackBase__)+(1108);
      var $tmp983=(__stackBase__)+(1120);
      var $agg_tmp1000=(__stackBase__)+(1132);
      var $tmp1001=(__stackBase__)+(1144);
      var $agg_tmp1003=(__stackBase__)+(1156);
      var $tmp1004=(__stackBase__)+(1168);
      var $tmp1006=(__stackBase__)+(1180);
      var $c1013;
      var $c1049;
      var $d;
      var $size;
      var $pp;
      var $c1105;
      var $size1159;
      var $tmp1198=(__stackBase__)+(1192);
      var $tmp1223=(__stackBase__)+(1204);
      var $plen;
      var $tmp1245=(__stackBase__)+(1216);
      var $tmp1263=(__stackBase__)+(1228);
      var $tmp1279=(__stackBase__)+(1240);
      var $c1297;
      var $c1313;
      var $tmp1333=(__stackBase__)+(1252);
      var $tmp1349=(__stackBase__)+(1264);
      var $val1364=(__stackBase__)+(1276);
      var $agg_tmp1374=(__stackBase__)+(1288);
      var $agg_tmp1380=(__stackBase__)+(1300);
      var $fval;
      var $i1395=(__stackBase__)+(1312);
      var $need;
      var $fbuf1398=(__stackBase__)+(1316);
      var $tmp1399=(__stackBase__)+(1348);
      var $expr;
      var $elen;
      var $tmp1446=(__stackBase__)+(1360);
      var $tmp1562=(__stackBase__)+(1372);
      var $tmp1575=(__stackBase__)+(1384);
      $mrb_addr=$mrb;
      $argc_addr=$argc;
      $argv_addr=$argv;
      $flags=0;
      $nextarg=1;
      $posarg=0;
      _mrb_undef_value1718($hash);
      var $0=$argc_addr;
      var $inc=((($0)+(1))|0);
      $argc_addr=$inc;
      var $1=$argv_addr;
      var $incdec_ptr=((($1)-(12))|0);
      $argv_addr=$incdec_ptr;
      var $2=$mrb_addr;
      _mrb_str_to_str($tmp3, $2, $fmt);
      var $3=$fmt;
      var $4=$tmp3;
      assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
      var $value=(($fmt)|0);
      var $p4=$value;
      var $5=HEAP32[(($p4)>>2)];
      var $6=$5;
      var $ptr=(($6+20)|0);
      var $7=HEAP32[(($ptr)>>2)];
      $p=$7;
      var $8=$p;
      var $value5=(($fmt)|0);
      var $p6=$value5;
      var $9=HEAP32[(($p6)>>2)];
      var $10=$9;
      var $len=(($10+12)|0);
      var $11=HEAP32[(($len)>>2)];
      var $add_ptr=(($8+$11)|0);
      $end=$add_ptr;
      $blen=0;
      $bsiz=120;
      var $12=$mrb_addr;
      var $13=$bsiz;
      _mrb_str_buf_new($tmp7, $12, $13);
      var $14=$result;
      var $15=$tmp7;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      var $value8=(($result)|0);
      var $p9=$value8;
      var $16=HEAP32[(($p9)>>2)];
      var $17=$16;
      var $ptr10=(($17+20)|0);
      var $18=HEAP32[(($ptr10)>>2)];
      $buf=$18;
      var $19=$buf;
      var $20=$bsiz;
      _memset($19, 0, $20);
      label = 3; break;
    case 3: 
      var $21=$p;
      var $22=$end;
      var $cmp=(($21)>>>(0)) < (($22)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 584; break; }
    case 4: 
      $id=0;
      var $23=$p;
      $t=$23;
      label = 5; break;
    case 5: 
      var $24=$t;
      var $25=$end;
      var $cmp14=(($24)>>>(0)) < (($25)>>>(0));
      if ($cmp14) { label = 6; break; } else { var $28 = 0;label = 7; break; }
    case 6: 
      var $26=$t;
      var $27=HEAP8[($26)];
      var $conv=(($27 << 24) >> 24);
      var $cmp15=(($conv)|(0))!=37;
      var $28 = $cmp15;label = 7; break;
    case 7: 
      var $28;
      if ($28) { label = 8; break; } else { label = 10; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $29=$t;
      var $incdec_ptr18=(($29+1)|0);
      $t=$incdec_ptr18;
      label = 5; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $30=$blen;
      var $31=$t;
      var $32=$p;
      var $sub_ptr_lhs_cast=$31;
      var $sub_ptr_rhs_cast=$32;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $add=((($30)+($sub_ptr_sub))|0);
      var $33=$bsiz;
      var $cmp20=(($add)|(0)) >= (($33)|(0));
      if ($cmp20) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $34=$bsiz;
      var $mul=($34<<1);
      $bsiz=$mul;
      label = 13; break;
    case 15: 
      var $35=$mrb_addr;
      var $36=$bsiz;
      _mrb_str_resize($tmp22, $35, $result, $36);
      var $value23=(($result)|0);
      var $p24=$value23;
      var $37=HEAP32[(($p24)>>2)];
      var $38=$37;
      var $ptr25=(($38+20)|0);
      var $39=HEAP32[(($ptr25)>>2)];
      $buf=$39;
      label = 16; break;
    case 16: 
      var $40=$blen;
      var $41=$buf;
      var $arrayidx=(($41+$40)|0);
      var $42=$p;
      var $43=$t;
      var $44=$p;
      var $sub_ptr_lhs_cast26=$43;
      var $sub_ptr_rhs_cast27=$44;
      var $sub_ptr_sub28=((($sub_ptr_lhs_cast26)-($sub_ptr_rhs_cast27))|0);
      assert($sub_ptr_sub28 % 1 === 0);_memcpy($arrayidx, $42, $sub_ptr_sub28);
      var $45=$t;
      var $46=$p;
      var $sub_ptr_lhs_cast29=$45;
      var $sub_ptr_rhs_cast30=$46;
      var $sub_ptr_sub31=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast30))|0);
      var $47=$blen;
      var $add32=((($47)+($sub_ptr_sub31))|0);
      $blen=$add32;
      label = 17; break;
    case 17: 
      var $48=$t;
      var $49=$end;
      var $cmp34=(($48)>>>(0)) >= (($49)>>>(0));
      if ($cmp34) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 585; break;
    case 19: 
      var $50=$t;
      var $add_ptr36=(($50+1)|0);
      $p=$add_ptr36;
      $prec=-1;
      $width=-1;
      _mrb_undef_value1718($tmp37);
      var $51=$nextvalue;
      var $52=$tmp37;
      assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($52)+(8))>>2)];
      label = 20; break;
    case 20: 
      var $53=$p;
      var $54=HEAP8[($53)];
      var $conv38=(($54 << 24) >> 24);
      if ((($conv38)|(0))==32) {
        label = 22; break;
      }
      else if ((($conv38)|(0))==35) {
        label = 27; break;
      }
      else if ((($conv38)|(0))==43) {
        label = 32; break;
      }
      else if ((($conv38)|(0))==45) {
        label = 37; break;
      }
      else if ((($conv38)|(0))==48) {
        label = 42; break;
      }
      else if ((($conv38)|(0))==49 | (($conv38)|(0))==50 | (($conv38)|(0))==51 | (($conv38)|(0))==52 | (($conv38)|(0))==53 | (($conv38)|(0))==54 | (($conv38)|(0))==55 | (($conv38)|(0))==56 | (($conv38)|(0))==57) {
        label = 47; break;
      }
      else if ((($conv38)|(0))==60 | (($conv38)|(0))==123) {
        label = 78; break;
      }
      else if ((($conv38)|(0))==42) {
        label = 96; break;
      }
      else if ((($conv38)|(0))==46) {
        label = 142; break;
      }
      else if ((($conv38)|(0))==10 | (($conv38)|(0))==0) {
        label = 198; break;
      }
      else if ((($conv38)|(0))==37) {
        label = 199; break;
      }
      else if ((($conv38)|(0))==99) {
        label = 209; break;
      }
      else if ((($conv38)|(0))==115 | (($conv38)|(0))==112) {
        label = 265; break;
      }
      else if ((($conv38)|(0))==100 | (($conv38)|(0))==105 | (($conv38)|(0))==111 | (($conv38)|(0))==120 | (($conv38)|(0))==88 | (($conv38)|(0))==98 | (($conv38)|(0))==66 | (($conv38)|(0))==117) {
        label = 323; break;
      }
      else if ((($conv38)|(0))==102 | (($conv38)|(0))==103 | (($conv38)|(0))==71 | (($conv38)|(0))==101 | (($conv38)|(0))==69 | (($conv38)|(0))==97 | (($conv38)|(0))==65) {
        label = 513; break;
      }
      else {
      label = 21; break;
      }
    case 21: 
      var $55=$mrb_addr;
      var $56=$mrb_addr;
      var $call=_mrb_class_get($56, ((112612)|0));
      var $57=$mrb_addr;
      var $58=$p;
      _mrb_str_new($agg_tmp, $57, $58, 1);
      _mrb_raisef($55, $call, ((104184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 582; break;
    case 22: 
      var $59=$flags;
      var $and=$59 & 32;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $60=$mrb_addr;
      var $61=$mrb_addr;
      var $call40=_mrb_class_get($61, ((112612)|0));
      _mrb_raise($60, $call40, ((101484)|0));
      label = 24; break;
    case 24: 
      var $62=$flags;
      var $and42=$62 & 128;
      var $tobool43=(($and42)|(0))!=0;
      if ($tobool43) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $63=$mrb_addr;
      var $64=$mrb_addr;
      var $call45=_mrb_class_get($64, ((112612)|0));
      _mrb_raise($63, $call45, ((98896)|0));
      label = 26; break;
    case 26: 
      var $65=$flags;
      var $or=$65 | 16;
      $flags=$or;
      var $66=$p;
      var $incdec_ptr47=(($66+1)|0);
      $p=$incdec_ptr47;
      label = 20; break;
    case 27: 
      var $67=$flags;
      var $and49=$67 & 32;
      var $tobool50=(($and49)|(0))!=0;
      if ($tobool50) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $68=$mrb_addr;
      var $69=$mrb_addr;
      var $call52=_mrb_class_get($69, ((112612)|0));
      _mrb_raise($68, $call52, ((101484)|0));
      label = 29; break;
    case 29: 
      var $70=$flags;
      var $and54=$70 & 128;
      var $tobool55=(($and54)|(0))!=0;
      if ($tobool55) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $71=$mrb_addr;
      var $72=$mrb_addr;
      var $call57=_mrb_class_get($72, ((112612)|0));
      _mrb_raise($71, $call57, ((98896)|0));
      label = 31; break;
    case 31: 
      var $73=$flags;
      var $or59=$73 | 1;
      $flags=$or59;
      var $74=$p;
      var $incdec_ptr60=(($74+1)|0);
      $p=$incdec_ptr60;
      label = 20; break;
    case 32: 
      var $75=$flags;
      var $and62=$75 & 32;
      var $tobool63=(($and62)|(0))!=0;
      if ($tobool63) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $76=$mrb_addr;
      var $77=$mrb_addr;
      var $call65=_mrb_class_get($77, ((112612)|0));
      _mrb_raise($76, $call65, ((101484)|0));
      label = 34; break;
    case 34: 
      var $78=$flags;
      var $and67=$78 & 128;
      var $tobool68=(($and67)|(0))!=0;
      if ($tobool68) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $79=$mrb_addr;
      var $80=$mrb_addr;
      var $call70=_mrb_class_get($80, ((112612)|0));
      _mrb_raise($79, $call70, ((98896)|0));
      label = 36; break;
    case 36: 
      var $81=$flags;
      var $or72=$81 | 4;
      $flags=$or72;
      var $82=$p;
      var $incdec_ptr73=(($82+1)|0);
      $p=$incdec_ptr73;
      label = 20; break;
    case 37: 
      var $83=$flags;
      var $and75=$83 & 32;
      var $tobool76=(($and75)|(0))!=0;
      if ($tobool76) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $84=$mrb_addr;
      var $85=$mrb_addr;
      var $call78=_mrb_class_get($85, ((112612)|0));
      _mrb_raise($84, $call78, ((101484)|0));
      label = 39; break;
    case 39: 
      var $86=$flags;
      var $and80=$86 & 128;
      var $tobool81=(($and80)|(0))!=0;
      if ($tobool81) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $87=$mrb_addr;
      var $88=$mrb_addr;
      var $call83=_mrb_class_get($88, ((112612)|0));
      _mrb_raise($87, $call83, ((98896)|0));
      label = 41; break;
    case 41: 
      var $89=$flags;
      var $or85=$89 | 2;
      $flags=$or85;
      var $90=$p;
      var $incdec_ptr86=(($90+1)|0);
      $p=$incdec_ptr86;
      label = 20; break;
    case 42: 
      var $91=$flags;
      var $and88=$91 & 32;
      var $tobool89=(($and88)|(0))!=0;
      if ($tobool89) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $92=$mrb_addr;
      var $93=$mrb_addr;
      var $call91=_mrb_class_get($93, ((112612)|0));
      _mrb_raise($92, $call91, ((101484)|0));
      label = 44; break;
    case 44: 
      var $94=$flags;
      var $and93=$94 & 128;
      var $tobool94=(($and93)|(0))!=0;
      if ($tobool94) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $95=$mrb_addr;
      var $96=$mrb_addr;
      var $call96=_mrb_class_get($96, ((112612)|0));
      _mrb_raise($95, $call96, ((98896)|0));
      label = 46; break;
    case 46: 
      var $97=$flags;
      var $or98=$97 | 8;
      $flags=$or98;
      var $98=$p;
      var $incdec_ptr99=(($98+1)|0);
      $p=$incdec_ptr99;
      label = 20; break;
    case 47: 
      $n=0;
      label = 48; break;
    case 48: 
      var $99=$p;
      var $100=$end;
      var $cmp102=(($99)>>>(0)) < (($100)>>>(0));
      if ($cmp102) { label = 49; break; } else { var $103 = 0;label = 50; break; }
    case 49: 
      var $101=$p;
      var $102=HEAP8[($101)];
      var $conv105=(($102)&(255));
      var $call106=_isdigit($conv105);
      var $tobool107=(($call106)|(0))!=0;
      var $103 = $tobool107;label = 50; break;
    case 50: 
      var $103;
      if ($103) { label = 51; break; } else { label = 55; break; }
    case 51: 
      var $104=$n;
      var $mul111=((($104)*(10))&-1);
      var $105=$p;
      var $106=HEAP8[($105)];
      var $conv112=(($106 << 24) >> 24);
      var $sub=((($conv112)-(48))|0);
      var $add113=((($mul111)+($sub))|0);
      $next_n=$add113;
      var $107=$next_n;
      var $div=((((($107)|(0)))/(10))&-1);
      var $108=$n;
      var $cmp114=(($div)|(0))!=(($108)|(0));
      if ($cmp114) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $109=$mrb_addr;
      var $110=$mrb_addr;
      var $call117=_mrb_class_get($110, ((112612)|0));
      _mrb_raise($109, $call117, ((96876)|0));
      label = 53; break;
    case 53: 
      var $111=$next_n;
      $n=$111;
      label = 54; break;
    case 54: 
      var $112=$p;
      var $incdec_ptr120=(($112+1)|0);
      $p=$incdec_ptr120;
      label = 48; break;
    case 55: 
      var $113=$p;
      var $114=$end;
      var $cmp122=(($113)>>>(0)) >= (($114)>>>(0));
      if ($cmp122) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $115=$mrb_addr;
      var $116=$mrb_addr;
      var $call125=_mrb_class_get($116, ((112612)|0));
      _mrb_raise($115, $call125, ((95656)|0));
      label = 57; break;
    case 57: 
      var $117=$p;
      var $118=HEAP8[($117)];
      var $conv127=(($118 << 24) >> 24);
      var $cmp128=(($conv127)|(0))==36;
      if ($cmp128) { label = 58; break; } else { label = 73; break; }
    case 58: 
      var $tt=(($nextvalue+8)|0);
      var $119=HEAP32[(($tt)>>2)];
      var $cmp131=(($119)|(0))==5;
      if ($cmp131) { label = 60; break; } else { label = 59; break; }
    case 59: 
      var $120=$mrb_addr;
      var $121=$mrb_addr;
      var $call134=_mrb_class_get($121, ((112612)|0));
      var $122=$n;
      _mrb_fixnum_value1719($agg_tmp135, $122);
      _mrb_raisef($120, $call134, ((94676)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp135)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp135)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp135)+(8))>>2)],tempInt));
      label = 60; break;
    case 60: 
      var $123=$posarg;
      var $cmp137=(($123)|(0)) > 0;
      if ($cmp137) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $124=$mrb_addr;
      var $125=$mrb_addr;
      var $call139=_mrb_class_get($125, ((112612)|0));
      var $126=$n;
      _mrb_fixnum_value1719($agg_tmp140, $126);
      var $127=$posarg;
      _mrb_fixnum_value1719($agg_tmp141, $127);
      _mrb_raisef($124, $call139, ((93824)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp140)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp140)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp140)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp141)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp141)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp141)+(8))>>2)],tempInt));
      _mrb_undef_value1718($tmp142);
      var $128=$nextvalue;
      var $129=$tmp142;
      assert(12 % 1 === 0);HEAP32[(($128)>>2)]=HEAP32[(($129)>>2)];HEAP32[((($128)+(4))>>2)]=HEAP32[((($129)+(4))>>2)];HEAP32[((($128)+(8))>>2)]=HEAP32[((($129)+(8))>>2)];
      label = 72; break;
    case 62: 
      var $130=$posarg;
      var $cmp143=(($130)|(0))==-2;
      if ($cmp143) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $131=$mrb_addr;
      var $132=$mrb_addr;
      var $call146=_mrb_class_get($132, ((112612)|0));
      var $133=$n;
      _mrb_fixnum_value1719($agg_tmp147, $133);
      _mrb_raisef($131, $call146, ((113612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp147)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp147)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp147)+(8))>>2)],tempInt));
      _mrb_undef_value1718($tmp148);
      var $134=$nextvalue;
      var $135=$tmp148;
      assert(12 % 1 === 0);HEAP32[(($134)>>2)]=HEAP32[(($135)>>2)];HEAP32[((($134)+(4))>>2)]=HEAP32[((($135)+(4))>>2)];HEAP32[((($134)+(8))>>2)]=HEAP32[((($135)+(8))>>2)];
      label = 71; break;
    case 64: 
      var $136=$n;
      var $cmp150=(($136)|(0)) < 1;
      if ($cmp150) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $137=$mrb_addr;
      var $138=$mrb_addr;
      var $call153=_mrb_class_get($138, ((112612)|0));
      var $139=$n;
      _mrb_fixnum_value1719($agg_tmp154, $139);
      _mrb_raisef($137, $call153, ((113028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp154)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp154)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp154)+(8))>>2)],tempInt));
      _mrb_undef_value1718($tmp155);
      var $140=$nextvalue;
      var $141=$tmp155;
      assert(12 % 1 === 0);HEAP32[(($140)>>2)]=HEAP32[(($141)>>2)];HEAP32[((($140)+(4))>>2)]=HEAP32[((($141)+(4))>>2)];HEAP32[((($140)+(8))>>2)]=HEAP32[((($141)+(8))>>2)];
      label = 70; break;
    case 66: 
      $posarg=-1;
      var $142=$n;
      var $143=$argc_addr;
      var $cmp157=(($142)|(0)) >= (($143)|(0));
      if ($cmp157) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $144=$mrb_addr;
      var $145=$mrb_addr;
      var $call160=_mrb_class_get($145, ((112612)|0));
      _mrb_raise($144, $call160, ((107728)|0));
      _mrb_undef_value1718($tmp161);
      var $146=$nextvalue;
      var $147=$tmp161;
      assert(12 % 1 === 0);HEAP32[(($146)>>2)]=HEAP32[(($147)>>2)];HEAP32[((($146)+(4))>>2)]=HEAP32[((($147)+(4))>>2)];HEAP32[((($146)+(8))>>2)]=HEAP32[((($147)+(8))>>2)];
      label = 69; break;
    case 68: 
      var $148=$n;
      var $149=$argv_addr;
      var $arrayidx163=(($149+((($148)*(12))&-1))|0);
      var $150=$nextvalue;
      var $151=$arrayidx163;
      assert(12 % 1 === 0);HEAP32[(($150)>>2)]=HEAP32[(($151)>>2)];HEAP32[((($150)+(4))>>2)]=HEAP32[((($151)+(4))>>2)];HEAP32[((($150)+(8))>>2)]=HEAP32[((($151)+(8))>>2)];
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $152=$p;
      var $incdec_ptr167=(($152+1)|0);
      $p=$incdec_ptr167;
      label = 20; break;
    case 73: 
      var $153=$flags;
      var $and169=$153 & 32;
      var $tobool170=(($and169)|(0))!=0;
      if ($tobool170) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $154=$mrb_addr;
      var $155=$mrb_addr;
      var $call172=_mrb_class_get($155, ((112612)|0));
      _mrb_raise($154, $call172, ((112112)|0));
      label = 75; break;
    case 75: 
      var $156=$flags;
      var $and174=$156 & 128;
      var $tobool175=(($and174)|(0))!=0;
      if ($tobool175) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $157=$mrb_addr;
      var $158=$mrb_addr;
      var $call177=_mrb_class_get($158, ((112612)|0));
      _mrb_raise($157, $call177, ((111536)|0));
      label = 77; break;
    case 77: 
      var $159=$n;
      $width=$159;
      var $160=$flags;
      var $or179=$160 | 32;
      $flags=$or179;
      label = 20; break;
    case 78: 
      var $161=$p;
      $start=$161;
      var $162=$p;
      var $163=HEAP8[($162)];
      var $conv183=(($163 << 24) >> 24);
      var $cmp184=(($conv183)|(0))==60;
      var $cond=$cmp184 ? 62 : 125;
      var $conv186=(($cond) & 255);
      $term=$conv186;
      label = 79; break;
    case 79: 
      var $164=$p;
      var $165=$end;
      var $cmp189=(($164)>>>(0)) < (($165)>>>(0));
      if ($cmp189) { label = 80; break; } else { var $169 = 0;label = 81; break; }
    case 80: 
      var $166=$p;
      var $167=HEAP8[($166)];
      var $conv192=(($167 << 24) >> 24);
      var $168=$term;
      var $conv193=(($168 << 24) >> 24);
      var $cmp194=(($conv192)|(0))!=(($conv193)|(0));
      var $169 = $cmp194;label = 81; break;
    case 81: 
      var $169;
      if ($169) { label = 82; break; } else { label = 83; break; }
    case 82: 
      var $170=$p;
      var $incdec_ptr198=(($170+1)|0);
      $p=$incdec_ptr198;
      label = 79; break;
    case 83: 
      var $171=$id;
      var $tobool200=(($171 << 16) >> 16)!=0;
      if ($tobool200) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $172=$mrb_addr;
      var $173=$mrb_addr;
      var $call202=_mrb_class_get($173, ((112612)|0));
      var $174=$mrb_addr;
      var $175=$start;
      var $176=$p;
      var $177=$start;
      var $sub_ptr_lhs_cast204=$176;
      var $sub_ptr_rhs_cast205=$177;
      var $sub_ptr_sub206=((($sub_ptr_lhs_cast204)-($sub_ptr_rhs_cast205))|0);
      var $add207=((($sub_ptr_sub206)+(1))|0);
      _mrb_str_new($agg_tmp203, $174, $175, $add207);
      var $178=$mrb_addr;
      var $179=$id;
      _mrb_sym2str($agg_tmp208, $178, $179);
      _mrb_raisef($172, $call202, ((111072)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp203)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp203)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp203)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp208)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp208)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp208)+(8))>>2)],tempInt));
      label = 85; break;
    case 85: 
      var $180=$mrb_addr;
      var $181=$start;
      var $add_ptr210=(($181+1)|0);
      var $182=$p;
      var $183=$start;
      var $sub_ptr_lhs_cast211=$182;
      var $sub_ptr_rhs_cast212=$183;
      var $sub_ptr_sub213=((($sub_ptr_lhs_cast211)-($sub_ptr_rhs_cast212))|0);
      var $sub214=((($sub_ptr_sub213)-(1))|0);
      _mrb_str_new($tmp215, $180, $add_ptr210, $sub214);
      var $184=$symname;
      var $185=$tmp215;
      assert(12 % 1 === 0);HEAP32[(($184)>>2)]=HEAP32[(($185)>>2)];HEAP32[((($184)+(4))>>2)]=HEAP32[((($185)+(4))>>2)];HEAP32[((($184)+(8))>>2)]=HEAP32[((($185)+(8))>>2)];
      var $186=$mrb_addr;
      var $call216=_mrb_intern_str($186, $symname);
      $id=$call216;
      var $187=$posarg;
      var $cmp217=(($187)|(0)) > 0;
      if ($cmp217) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $188=$mrb_addr;
      var $189=$mrb_addr;
      var $call220=_mrb_class_get($189, ((112612)|0));
      var $190=$mrb_addr;
      var $191=$start;
      var $192=$p;
      var $193=$start;
      var $sub_ptr_lhs_cast222=$192;
      var $sub_ptr_rhs_cast223=$193;
      var $sub_ptr_sub224=((($sub_ptr_lhs_cast222)-($sub_ptr_rhs_cast223))|0);
      var $add225=((($sub_ptr_sub224)+(1))|0);
      _mrb_str_new($agg_tmp221, $190, $191, $add225);
      var $194=$posarg;
      _mrb_fixnum_value1719($agg_tmp226, $194);
      _mrb_raisef($188, $call220, ((110544)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp221)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp221)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp221)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp226)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp226)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp226)+(8))>>2)],tempInt));
      _mrb_undef_value1718($tmp227);
      var $195=$nextvalue;
      var $196=$tmp227;
      assert(12 % 1 === 0);HEAP32[(($195)>>2)]=HEAP32[(($196)>>2)];HEAP32[((($195)+(4))>>2)]=HEAP32[((($196)+(4))>>2)];HEAP32[((($195)+(8))>>2)]=HEAP32[((($196)+(8))>>2)];
      label = 91; break;
    case 87: 
      var $197=$posarg;
      var $cmp229=(($197)|(0))==-1;
      if ($cmp229) { label = 88; break; } else { label = 89; break; }
    case 88: 
      var $198=$mrb_addr;
      var $199=$mrb_addr;
      var $call232=_mrb_class_get($199, ((112612)|0));
      var $200=$mrb_addr;
      var $201=$start;
      var $202=$p;
      var $203=$start;
      var $sub_ptr_lhs_cast234=$202;
      var $sub_ptr_rhs_cast235=$203;
      var $sub_ptr_sub236=((($sub_ptr_lhs_cast234)-($sub_ptr_rhs_cast235))|0);
      var $add237=((($sub_ptr_sub236)+(1))|0);
      _mrb_str_new($agg_tmp233, $200, $201, $add237);
      _mrb_raisef($198, $call232, ((110120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp233)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp233)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp233)+(8))>>2)],tempInt));
      _mrb_undef_value1718($tmp238);
      var $204=$nextvalue;
      var $205=$tmp238;
      assert(12 % 1 === 0);HEAP32[(($204)>>2)]=HEAP32[(($205)>>2)];HEAP32[((($204)+(4))>>2)]=HEAP32[((($205)+(4))>>2)];HEAP32[((($204)+(8))>>2)]=HEAP32[((($205)+(8))>>2)];
      label = 90; break;
    case 89: 
      $posarg=-2;
      var $206=$mrb_addr;
      var $207=$mrb_addr;
      var $208=$argc_addr;
      var $209=$argv_addr;
      _get_hash($agg_tmp240, $207, $hash, $208, $209);
      var $210=$id;
      _mrb_symbol_value1720($agg_tmp241, $210);
      _mrb_undef_value1718($agg_tmp242);
      _mrb_hash_fetch($tmp243, $206, $agg_tmp240, $agg_tmp241, $agg_tmp242);
      var $211=$nextvalue;
      var $212=$tmp243;
      assert(12 % 1 === 0);HEAP32[(($211)>>2)]=HEAP32[(($212)>>2)];HEAP32[((($211)+(4))>>2)]=HEAP32[((($212)+(4))>>2)];HEAP32[((($211)+(8))>>2)]=HEAP32[((($212)+(8))>>2)];
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      var $tt246=(($nextvalue+8)|0);
      var $213=HEAP32[(($tt246)>>2)];
      var $cmp247=(($213)|(0))==5;
      if ($cmp247) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $214=$mrb_addr;
      var $215=$mrb_addr;
      var $call250=_mrb_class_get($215, ((109788)|0));
      var $216=$mrb_addr;
      var $217=$start;
      var $218=$p;
      var $219=$start;
      var $sub_ptr_lhs_cast252=$218;
      var $sub_ptr_rhs_cast253=$219;
      var $sub_ptr_sub254=((($sub_ptr_lhs_cast252)-($sub_ptr_rhs_cast253))|0);
      var $add255=((($sub_ptr_sub254)+(1))|0);
      _mrb_str_new($agg_tmp251, $216, $217, $add255);
      _mrb_raisef($214, $call250, ((109344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp251)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp251)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp251)+(8))>>2)],tempInt));
      label = 93; break;
    case 93: 
      var $220=$term;
      var $conv257=(($220 << 24) >> 24);
      var $cmp258=(($conv257)|(0))==125;
      if ($cmp258) { label = 94; break; } else { label = 95; break; }
    case 94: 
      label = 266; break;
    case 95: 
      var $221=$p;
      var $incdec_ptr262=(($221+1)|0);
      $p=$incdec_ptr262;
      label = 20; break;
    case 96: 
      var $222=$flags;
      var $and264=$222 & 32;
      var $tobool265=(($and264)|(0))!=0;
      if ($tobool265) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $223=$mrb_addr;
      var $224=$mrb_addr;
      var $call267=_mrb_class_get($224, ((112612)|0));
      _mrb_raise($223, $call267, ((112112)|0));
      label = 98; break;
    case 98: 
      var $225=$flags;
      var $and269=$225 & 128;
      var $tobool270=(($and269)|(0))!=0;
      if ($tobool270) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $226=$mrb_addr;
      var $227=$mrb_addr;
      var $call272=_mrb_class_get($227, ((112612)|0));
      _mrb_raise($226, $call272, ((111536)|0));
      label = 100; break;
    case 100: 
      var $228=$flags;
      var $or274=$228 | 32;
      $flags=$or274;
      label = 101; break;
    case 101: 
      var $229=$p;
      var $incdec_ptr276=(($229+1)|0);
      $p=$incdec_ptr276;
      $t=$229;
      $n=0;
      label = 102; break;
    case 102: 
      var $230=$p;
      var $231=$end;
      var $cmp278=(($230)>>>(0)) < (($231)>>>(0));
      if ($cmp278) { label = 103; break; } else { var $234 = 0;label = 104; break; }
    case 103: 
      var $232=$p;
      var $233=HEAP8[($232)];
      var $conv281=(($233)&(255));
      var $call282=_isdigit($conv281);
      var $tobool283=(($call282)|(0))!=0;
      var $234 = $tobool283;label = 104; break;
    case 104: 
      var $234;
      if ($234) { label = 105; break; } else { label = 109; break; }
    case 105: 
      var $235=$n;
      var $mul288=((($235)*(10))&-1);
      var $236=$p;
      var $237=HEAP8[($236)];
      var $conv289=(($237 << 24) >> 24);
      var $sub290=((($conv289)-(48))|0);
      var $add291=((($mul288)+($sub290))|0);
      $next_n287=$add291;
      var $238=$next_n287;
      var $div292=((((($238)|(0)))/(10))&-1);
      var $239=$n;
      var $cmp293=(($div292)|(0))!=(($239)|(0));
      if ($cmp293) { label = 106; break; } else { label = 107; break; }
    case 106: 
      var $240=$mrb_addr;
      var $241=$mrb_addr;
      var $call296=_mrb_class_get($241, ((112612)|0));
      _mrb_raise($240, $call296, ((108880)|0));
      label = 107; break;
    case 107: 
      var $242=$next_n287;
      $n=$242;
      label = 108; break;
    case 108: 
      var $243=$p;
      var $incdec_ptr299=(($243+1)|0);
      $p=$incdec_ptr299;
      label = 102; break;
    case 109: 
      var $244=$p;
      var $245=$end;
      var $cmp301=(($244)>>>(0)) >= (($245)>>>(0));
      if ($cmp301) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $246=$mrb_addr;
      var $247=$mrb_addr;
      var $call304=_mrb_class_get($247, ((112612)|0));
      _mrb_raise($246, $call304, ((95656)|0));
      label = 111; break;
    case 111: 
      var $248=$p;
      var $249=HEAP8[($248)];
      var $conv306=(($249 << 24) >> 24);
      var $cmp307=(($conv306)|(0))==36;
      if ($cmp307) { label = 112; break; } else { label = 125; break; }
    case 112: 
      var $250=$posarg;
      var $cmp310=(($250)|(0)) > 0;
      if ($cmp310) { label = 113; break; } else { label = 114; break; }
    case 113: 
      var $251=$mrb_addr;
      var $252=$mrb_addr;
      var $call313=_mrb_class_get($252, ((112612)|0));
      var $253=$n;
      _mrb_fixnum_value1719($agg_tmp314, $253);
      var $254=$posarg;
      _mrb_fixnum_value1719($agg_tmp315, $254);
      _mrb_raisef($251, $call313, ((93824)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp314)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp314)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp314)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp315)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp315)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp315)+(8))>>2)],tempInt));
      _mrb_undef_value1718($tmp316);
      var $255=$tmp;
      var $256=$tmp316;
      assert(12 % 1 === 0);HEAP32[(($255)>>2)]=HEAP32[(($256)>>2)];HEAP32[((($255)+(4))>>2)]=HEAP32[((($256)+(4))>>2)];HEAP32[((($255)+(8))>>2)]=HEAP32[((($256)+(8))>>2)];
      label = 124; break;
    case 114: 
      var $257=$posarg;
      var $cmp318=(($257)|(0))==-2;
      if ($cmp318) { label = 115; break; } else { label = 116; break; }
    case 115: 
      var $258=$mrb_addr;
      var $259=$mrb_addr;
      var $call321=_mrb_class_get($259, ((112612)|0));
      var $260=$n;
      _mrb_fixnum_value1719($agg_tmp322, $260);
      _mrb_raisef($258, $call321, ((113612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp322)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp322)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp322)+(8))>>2)],tempInt));
      _mrb_undef_value1718($tmp323);
      var $261=$tmp;
      var $262=$tmp323;
      assert(12 % 1 === 0);HEAP32[(($261)>>2)]=HEAP32[(($262)>>2)];HEAP32[((($261)+(4))>>2)]=HEAP32[((($262)+(4))>>2)];HEAP32[((($261)+(8))>>2)]=HEAP32[((($262)+(8))>>2)];
      label = 123; break;
    case 116: 
      var $263=$n;
      var $cmp325=(($263)|(0)) < 1;
      if ($cmp325) { label = 117; break; } else { label = 118; break; }
    case 117: 
      var $264=$mrb_addr;
      var $265=$mrb_addr;
      var $call328=_mrb_class_get($265, ((112612)|0));
      var $266=$n;
      _mrb_fixnum_value1719($agg_tmp329, $266);
      _mrb_raisef($264, $call328, ((113028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp329)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp329)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp329)+(8))>>2)],tempInt));
      _mrb_undef_value1718($tmp330);
      var $267=$tmp;
      var $268=$tmp330;
      assert(12 % 1 === 0);HEAP32[(($267)>>2)]=HEAP32[(($268)>>2)];HEAP32[((($267)+(4))>>2)]=HEAP32[((($268)+(4))>>2)];HEAP32[((($267)+(8))>>2)]=HEAP32[((($268)+(8))>>2)];
      label = 122; break;
    case 118: 
      $posarg=-1;
      var $269=$n;
      var $270=$argc_addr;
      var $cmp332=(($269)|(0)) >= (($270)|(0));
      if ($cmp332) { label = 119; break; } else { label = 120; break; }
    case 119: 
      var $271=$mrb_addr;
      var $272=$mrb_addr;
      var $call335=_mrb_class_get($272, ((112612)|0));
      _mrb_raise($271, $call335, ((107728)|0));
      _mrb_undef_value1718($tmp336);
      var $273=$tmp;
      var $274=$tmp336;
      assert(12 % 1 === 0);HEAP32[(($273)>>2)]=HEAP32[(($274)>>2)];HEAP32[((($273)+(4))>>2)]=HEAP32[((($274)+(4))>>2)];HEAP32[((($273)+(8))>>2)]=HEAP32[((($274)+(8))>>2)];
      label = 121; break;
    case 120: 
      var $275=$n;
      var $276=$argv_addr;
      var $arrayidx338=(($276+((($275)*(12))&-1))|0);
      var $277=$tmp;
      var $278=$arrayidx338;
      assert(12 % 1 === 0);HEAP32[(($277)>>2)]=HEAP32[(($278)>>2)];HEAP32[((($277)+(4))>>2)]=HEAP32[((($278)+(4))>>2)];HEAP32[((($277)+(8))>>2)]=HEAP32[((($278)+(8))>>2)];
      label = 121; break;
    case 121: 
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      label = 138; break;
    case 125: 
      var $tt343=(($nextvalue+8)|0);
      var $279=HEAP32[(($tt343)>>2)];
      var $cmp344=(($279)|(0))==5;
      if ($cmp344) { label = 127; break; } else { label = 126; break; }
    case 126: 
      var $280=$tmp;
      var $281=$nextvalue;
      assert(12 % 1 === 0);HEAP32[(($280)>>2)]=HEAP32[(($281)>>2)];HEAP32[((($280)+(4))>>2)]=HEAP32[((($281)+(4))>>2)];HEAP32[((($280)+(8))>>2)]=HEAP32[((($281)+(8))>>2)];
      label = 137; break;
    case 127: 
      var $282=$posarg;
      var $cmp348=(($282)|(0))==-1;
      if ($cmp348) { label = 128; break; } else { label = 129; break; }
    case 128: 
      var $283=$mrb_addr;
      var $284=$mrb_addr;
      var $call351=_mrb_class_get($284, ((112612)|0));
      var $285=$nextarg;
      _mrb_fixnum_value1719($agg_tmp352, $285);
      _mrb_raisef($283, $call351, ((108340)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp352)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp352)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp352)+(8))>>2)],tempInt));
      _mrb_undef_value1718($tmp353);
      var $286=$tmp;
      var $287=$tmp353;
      assert(12 % 1 === 0);HEAP32[(($286)>>2)]=HEAP32[(($287)>>2)];HEAP32[((($286)+(4))>>2)]=HEAP32[((($287)+(4))>>2)];HEAP32[((($286)+(8))>>2)]=HEAP32[((($287)+(8))>>2)];
      label = 136; break;
    case 129: 
      var $288=$posarg;
      var $cmp355=(($288)|(0))==-2;
      if ($cmp355) { label = 130; break; } else { label = 131; break; }
    case 130: 
      var $289=$mrb_addr;
      var $290=$mrb_addr;
      var $call358=_mrb_class_get($290, ((112612)|0));
      var $291=$nextarg;
      _mrb_fixnum_value1719($agg_tmp359, $291);
      _mrb_raisef($289, $call358, ((107992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp359)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp359)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp359)+(8))>>2)],tempInt));
      _mrb_undef_value1718($tmp360);
      var $292=$tmp;
      var $293=$tmp360;
      assert(12 % 1 === 0);HEAP32[(($292)>>2)]=HEAP32[(($293)>>2)];HEAP32[((($292)+(4))>>2)]=HEAP32[((($293)+(4))>>2)];HEAP32[((($292)+(8))>>2)]=HEAP32[((($293)+(8))>>2)];
      label = 135; break;
    case 131: 
      var $294=$nextarg;
      var $inc362=((($294)+(1))|0);
      $nextarg=$inc362;
      $posarg=$294;
      var $295=$posarg;
      var $296=$argc_addr;
      var $cmp363=(($295)|(0)) >= (($296)|(0));
      if ($cmp363) { label = 132; break; } else { label = 133; break; }
    case 132: 
      var $297=$mrb_addr;
      var $298=$mrb_addr;
      var $call366=_mrb_class_get($298, ((112612)|0));
      _mrb_raise($297, $call366, ((107728)|0));
      _mrb_undef_value1718($tmp367);
      var $299=$tmp;
      var $300=$tmp367;
      assert(12 % 1 === 0);HEAP32[(($299)>>2)]=HEAP32[(($300)>>2)];HEAP32[((($299)+(4))>>2)]=HEAP32[((($300)+(4))>>2)];HEAP32[((($299)+(8))>>2)]=HEAP32[((($300)+(8))>>2)];
      label = 134; break;
    case 133: 
      var $301=$posarg;
      var $302=$argv_addr;
      var $arrayidx369=(($302+((($301)*(12))&-1))|0);
      var $303=$tmp;
      var $304=$arrayidx369;
      assert(12 % 1 === 0);HEAP32[(($303)>>2)]=HEAP32[(($304)>>2)];HEAP32[((($303)+(4))>>2)]=HEAP32[((($304)+(4))>>2)];HEAP32[((($303)+(8))>>2)]=HEAP32[((($304)+(8))>>2)];
      label = 134; break;
    case 134: 
      label = 135; break;
    case 135: 
      label = 136; break;
    case 136: 
      label = 137; break;
    case 137: 
      var $305=$t;
      $p=$305;
      label = 138; break;
    case 138: 
      var $value375=(($tmp)|0);
      var $i=$value375;
      var $306=HEAP32[(($i)>>2)];
      $width=$306;
      label = 139; break;
    case 139: 
      var $307=$width;
      var $cmp377=(($307)|(0)) < 0;
      if ($cmp377) { label = 140; break; } else { label = 141; break; }
    case 140: 
      var $308=$flags;
      var $or380=$308 | 2;
      $flags=$or380;
      var $309=$width;
      var $sub381=(((-$309))|0);
      $width=$sub381;
      label = 141; break;
    case 141: 
      var $310=$p;
      var $incdec_ptr383=(($310+1)|0);
      $p=$incdec_ptr383;
      label = 20; break;
    case 142: 
      var $311=$flags;
      var $and385=$311 & 128;
      var $tobool386=(($and385)|(0))!=0;
      if ($tobool386) { label = 143; break; } else { label = 144; break; }
    case 143: 
      var $312=$mrb_addr;
      var $313=$mrb_addr;
      var $call388=_mrb_class_get($313, ((112612)|0));
      _mrb_raise($312, $call388, ((107484)|0));
      label = 144; break;
    case 144: 
      var $314=$flags;
      var $or390=$314 | 192;
      $flags=$or390;
      $prec=0;
      var $315=$p;
      var $incdec_ptr391=(($315+1)|0);
      $p=$incdec_ptr391;
      var $316=$p;
      var $317=HEAP8[($316)];
      var $conv392=(($317 << 24) >> 24);
      var $cmp393=(($conv392)|(0))==42;
      if ($cmp393) { label = 145; break; } else { label = 187; break; }
    case 145: 
      label = 146; break;
    case 146: 
      var $318=$p;
      var $incdec_ptr397=(($318+1)|0);
      $p=$incdec_ptr397;
      $t=$318;
      $n=0;
      label = 147; break;
    case 147: 
      var $319=$p;
      var $320=$end;
      var $cmp399=(($319)>>>(0)) < (($320)>>>(0));
      if ($cmp399) { label = 148; break; } else { var $323 = 0;label = 149; break; }
    case 148: 
      var $321=$p;
      var $322=HEAP8[($321)];
      var $conv402=(($322)&(255));
      var $call403=_isdigit($conv402);
      var $tobool404=(($call403)|(0))!=0;
      var $323 = $tobool404;label = 149; break;
    case 149: 
      var $323;
      if ($323) { label = 150; break; } else { label = 154; break; }
    case 150: 
      var $324=$n;
      var $mul409=((($324)*(10))&-1);
      var $325=$p;
      var $326=HEAP8[($325)];
      var $conv410=(($326 << 24) >> 24);
      var $sub411=((($conv410)-(48))|0);
      var $add412=((($mul409)+($sub411))|0);
      $next_n408=$add412;
      var $327=$next_n408;
      var $div413=((((($327)|(0)))/(10))&-1);
      var $328=$n;
      var $cmp414=(($div413)|(0))!=(($328)|(0));
      if ($cmp414) { label = 151; break; } else { label = 152; break; }
    case 151: 
      var $329=$mrb_addr;
      var $330=$mrb_addr;
      var $call417=_mrb_class_get($330, ((112612)|0));
      _mrb_raise($329, $call417, ((108880)|0));
      label = 152; break;
    case 152: 
      var $331=$next_n408;
      $n=$331;
      label = 153; break;
    case 153: 
      var $332=$p;
      var $incdec_ptr420=(($332+1)|0);
      $p=$incdec_ptr420;
      label = 147; break;
    case 154: 
      var $333=$p;
      var $334=$end;
      var $cmp422=(($333)>>>(0)) >= (($334)>>>(0));
      if ($cmp422) { label = 155; break; } else { label = 156; break; }
    case 155: 
      var $335=$mrb_addr;
      var $336=$mrb_addr;
      var $call425=_mrb_class_get($336, ((112612)|0));
      _mrb_raise($335, $call425, ((95656)|0));
      label = 156; break;
    case 156: 
      var $337=$p;
      var $338=HEAP8[($337)];
      var $conv427=(($338 << 24) >> 24);
      var $cmp428=(($conv427)|(0))==36;
      if ($cmp428) { label = 157; break; } else { label = 170; break; }
    case 157: 
      var $339=$posarg;
      var $cmp431=(($339)|(0)) > 0;
      if ($cmp431) { label = 158; break; } else { label = 159; break; }
    case 158: 
      var $340=$mrb_addr;
      var $341=$mrb_addr;
      var $call434=_mrb_class_get($341, ((112612)|0));
      var $342=$n;
      _mrb_fixnum_value1719($agg_tmp435, $342);
      var $343=$posarg;
      _mrb_fixnum_value1719($agg_tmp436, $343);
      _mrb_raisef($340, $call434, ((93824)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp435)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp435)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp435)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp436)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp436)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp436)+(8))>>2)],tempInt));
      _mrb_undef_value1718($tmp437);
      var $344=$tmp;
      var $345=$tmp437;
      assert(12 % 1 === 0);HEAP32[(($344)>>2)]=HEAP32[(($345)>>2)];HEAP32[((($344)+(4))>>2)]=HEAP32[((($345)+(4))>>2)];HEAP32[((($344)+(8))>>2)]=HEAP32[((($345)+(8))>>2)];
      label = 169; break;
    case 159: 
      var $346=$posarg;
      var $cmp439=(($346)|(0))==-2;
      if ($cmp439) { label = 160; break; } else { label = 161; break; }
    case 160: 
      var $347=$mrb_addr;
      var $348=$mrb_addr;
      var $call442=_mrb_class_get($348, ((112612)|0));
      var $349=$n;
      _mrb_fixnum_value1719($agg_tmp443, $349);
      _mrb_raisef($347, $call442, ((113612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp443)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp443)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp443)+(8))>>2)],tempInt));
      _mrb_undef_value1718($tmp444);
      var $350=$tmp;
      var $351=$tmp444;
      assert(12 % 1 === 0);HEAP32[(($350)>>2)]=HEAP32[(($351)>>2)];HEAP32[((($350)+(4))>>2)]=HEAP32[((($351)+(4))>>2)];HEAP32[((($350)+(8))>>2)]=HEAP32[((($351)+(8))>>2)];
      label = 168; break;
    case 161: 
      var $352=$n;
      var $cmp446=(($352)|(0)) < 1;
      if ($cmp446) { label = 162; break; } else { label = 163; break; }
    case 162: 
      var $353=$mrb_addr;
      var $354=$mrb_addr;
      var $call449=_mrb_class_get($354, ((112612)|0));
      var $355=$n;
      _mrb_fixnum_value1719($agg_tmp450, $355);
      _mrb_raisef($353, $call449, ((113028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp450)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp450)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp450)+(8))>>2)],tempInt));
      _mrb_undef_value1718($tmp451);
      var $356=$tmp;
      var $357=$tmp451;
      assert(12 % 1 === 0);HEAP32[(($356)>>2)]=HEAP32[(($357)>>2)];HEAP32[((($356)+(4))>>2)]=HEAP32[((($357)+(4))>>2)];HEAP32[((($356)+(8))>>2)]=HEAP32[((($357)+(8))>>2)];
      label = 167; break;
    case 163: 
      $posarg=-1;
      var $358=$n;
      var $359=$argc_addr;
      var $cmp453=(($358)|(0)) >= (($359)|(0));
      if ($cmp453) { label = 164; break; } else { label = 165; break; }
    case 164: 
      var $360=$mrb_addr;
      var $361=$mrb_addr;
      var $call456=_mrb_class_get($361, ((112612)|0));
      _mrb_raise($360, $call456, ((107728)|0));
      _mrb_undef_value1718($tmp457);
      var $362=$tmp;
      var $363=$tmp457;
      assert(12 % 1 === 0);HEAP32[(($362)>>2)]=HEAP32[(($363)>>2)];HEAP32[((($362)+(4))>>2)]=HEAP32[((($363)+(4))>>2)];HEAP32[((($362)+(8))>>2)]=HEAP32[((($363)+(8))>>2)];
      label = 166; break;
    case 165: 
      var $364=$n;
      var $365=$argv_addr;
      var $arrayidx459=(($365+((($364)*(12))&-1))|0);
      var $366=$tmp;
      var $367=$arrayidx459;
      assert(12 % 1 === 0);HEAP32[(($366)>>2)]=HEAP32[(($367)>>2)];HEAP32[((($366)+(4))>>2)]=HEAP32[((($367)+(4))>>2)];HEAP32[((($366)+(8))>>2)]=HEAP32[((($367)+(8))>>2)];
      label = 166; break;
    case 166: 
      label = 167; break;
    case 167: 
      label = 168; break;
    case 168: 
      label = 169; break;
    case 169: 
      label = 183; break;
    case 170: 
      var $tt465=(($nextvalue+8)|0);
      var $368=HEAP32[(($tt465)>>2)];
      var $cmp466=(($368)|(0))==5;
      if ($cmp466) { label = 172; break; } else { label = 171; break; }
    case 171: 
      var $369=$tmp;
      var $370=$nextvalue;
      assert(12 % 1 === 0);HEAP32[(($369)>>2)]=HEAP32[(($370)>>2)];HEAP32[((($369)+(4))>>2)]=HEAP32[((($370)+(4))>>2)];HEAP32[((($369)+(8))>>2)]=HEAP32[((($370)+(8))>>2)];
      label = 182; break;
    case 172: 
      var $371=$posarg;
      var $cmp470=(($371)|(0))==-1;
      if ($cmp470) { label = 173; break; } else { label = 174; break; }
    case 173: 
      var $372=$mrb_addr;
      var $373=$mrb_addr;
      var $call473=_mrb_class_get($373, ((112612)|0));
      var $374=$nextarg;
      _mrb_fixnum_value1719($agg_tmp474, $374);
      _mrb_raisef($372, $call473, ((108340)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp474)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp474)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp474)+(8))>>2)],tempInt));
      _mrb_undef_value1718($tmp475);
      var $375=$tmp;
      var $376=$tmp475;
      assert(12 % 1 === 0);HEAP32[(($375)>>2)]=HEAP32[(($376)>>2)];HEAP32[((($375)+(4))>>2)]=HEAP32[((($376)+(4))>>2)];HEAP32[((($375)+(8))>>2)]=HEAP32[((($376)+(8))>>2)];
      label = 181; break;
    case 174: 
      var $377=$posarg;
      var $cmp477=(($377)|(0))==-2;
      if ($cmp477) { label = 175; break; } else { label = 176; break; }
    case 175: 
      var $378=$mrb_addr;
      var $379=$mrb_addr;
      var $call480=_mrb_class_get($379, ((112612)|0));
      var $380=$nextarg;
      _mrb_fixnum_value1719($agg_tmp481, $380);
      _mrb_raisef($378, $call480, ((107992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp481)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp481)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp481)+(8))>>2)],tempInt));
      _mrb_undef_value1718($tmp482);
      var $381=$tmp;
      var $382=$tmp482;
      assert(12 % 1 === 0);HEAP32[(($381)>>2)]=HEAP32[(($382)>>2)];HEAP32[((($381)+(4))>>2)]=HEAP32[((($382)+(4))>>2)];HEAP32[((($381)+(8))>>2)]=HEAP32[((($382)+(8))>>2)];
      label = 180; break;
    case 176: 
      var $383=$nextarg;
      var $inc484=((($383)+(1))|0);
      $nextarg=$inc484;
      $posarg=$383;
      var $384=$posarg;
      var $385=$argc_addr;
      var $cmp485=(($384)|(0)) >= (($385)|(0));
      if ($cmp485) { label = 177; break; } else { label = 178; break; }
    case 177: 
      var $386=$mrb_addr;
      var $387=$mrb_addr;
      var $call488=_mrb_class_get($387, ((112612)|0));
      _mrb_raise($386, $call488, ((107728)|0));
      _mrb_undef_value1718($tmp489);
      var $388=$tmp;
      var $389=$tmp489;
      assert(12 % 1 === 0);HEAP32[(($388)>>2)]=HEAP32[(($389)>>2)];HEAP32[((($388)+(4))>>2)]=HEAP32[((($389)+(4))>>2)];HEAP32[((($388)+(8))>>2)]=HEAP32[((($389)+(8))>>2)];
      label = 179; break;
    case 178: 
      var $390=$posarg;
      var $391=$argv_addr;
      var $arrayidx491=(($391+((($390)*(12))&-1))|0);
      var $392=$tmp;
      var $393=$arrayidx491;
      assert(12 % 1 === 0);HEAP32[(($392)>>2)]=HEAP32[(($393)>>2)];HEAP32[((($392)+(4))>>2)]=HEAP32[((($393)+(4))>>2)];HEAP32[((($392)+(8))>>2)]=HEAP32[((($393)+(8))>>2)];
      label = 179; break;
    case 179: 
      label = 180; break;
    case 180: 
      label = 181; break;
    case 181: 
      label = 182; break;
    case 182: 
      var $394=$t;
      $p=$394;
      label = 183; break;
    case 183: 
      var $value497=(($tmp)|0);
      var $i498=$value497;
      var $395=HEAP32[(($i498)>>2)];
      $prec=$395;
      label = 184; break;
    case 184: 
      var $396=$prec;
      var $cmp500=(($396)|(0)) < 0;
      if ($cmp500) { label = 185; break; } else { label = 186; break; }
    case 185: 
      var $397=$flags;
      var $and503=$397 & -65;
      $flags=$and503;
      label = 186; break;
    case 186: 
      var $398=$p;
      var $incdec_ptr505=(($398+1)|0);
      $p=$incdec_ptr505;
      label = 20; break;
    case 187: 
      label = 188; break;
    case 188: 
      var $399=$p;
      var $400=$end;
      var $cmp508=(($399)>>>(0)) < (($400)>>>(0));
      if ($cmp508) { label = 189; break; } else { var $403 = 0;label = 190; break; }
    case 189: 
      var $401=$p;
      var $402=HEAP8[($401)];
      var $conv511=(($402)&(255));
      var $call512=_isdigit($conv511);
      var $tobool513=(($call512)|(0))!=0;
      var $403 = $tobool513;label = 190; break;
    case 190: 
      var $403;
      if ($403) { label = 191; break; } else { label = 195; break; }
    case 191: 
      var $404=$prec;
      var $mul518=((($404)*(10))&-1);
      var $405=$p;
      var $406=HEAP8[($405)];
      var $conv519=(($406 << 24) >> 24);
      var $sub520=((($conv519)-(48))|0);
      var $add521=((($mul518)+($sub520))|0);
      $next_n517=$add521;
      var $407=$next_n517;
      var $div522=((((($407)|(0)))/(10))&-1);
      var $408=$prec;
      var $cmp523=(($div522)|(0))!=(($408)|(0));
      if ($cmp523) { label = 192; break; } else { label = 193; break; }
    case 192: 
      var $409=$mrb_addr;
      var $410=$mrb_addr;
      var $call526=_mrb_class_get($410, ((112612)|0));
      _mrb_raise($409, $call526, ((107228)|0));
      label = 193; break;
    case 193: 
      var $411=$next_n517;
      $prec=$411;
      label = 194; break;
    case 194: 
      var $412=$p;
      var $incdec_ptr529=(($412+1)|0);
      $p=$incdec_ptr529;
      label = 188; break;
    case 195: 
      var $413=$p;
      var $414=$end;
      var $cmp531=(($413)>>>(0)) >= (($414)>>>(0));
      if ($cmp531) { label = 196; break; } else { label = 197; break; }
    case 196: 
      var $415=$mrb_addr;
      var $416=$mrb_addr;
      var $call534=_mrb_class_get($416, ((112612)|0));
      _mrb_raise($415, $call534, ((95656)|0));
      label = 197; break;
    case 197: 
      label = 20; break;
    case 198: 
      var $417=$p;
      var $incdec_ptr537=((($417)-(1))|0);
      $p=$incdec_ptr537;
      label = 199; break;
    case 199: 
      var $418=$flags;
      var $cmp539=(($418)|(0))!=0;
      if ($cmp539) { label = 200; break; } else { label = 201; break; }
    case 200: 
      var $419=$mrb_addr;
      var $420=$mrb_addr;
      var $call542=_mrb_class_get($420, ((112612)|0));
      _mrb_raise($419, $call542, ((106812)|0));
      label = 201; break;
    case 201: 
      label = 202; break;
    case 202: 
      label = 203; break;
    case 203: 
      label = 204; break;
    case 204: 
      var $421=$blen;
      var $add547=((($421)+(1))|0);
      var $422=$bsiz;
      var $cmp548=(($add547)|(0)) >= (($422)|(0));
      if ($cmp548) { label = 205; break; } else { label = 206; break; }
    case 205: 
      var $423=$bsiz;
      var $mul551=($423<<1);
      $bsiz=$mul551;
      label = 204; break;
    case 206: 
      var $424=$mrb_addr;
      var $425=$bsiz;
      _mrb_str_resize($tmp553, $424, $result, $425);
      var $value554=(($result)|0);
      var $p555=$value554;
      var $426=HEAP32[(($p555)>>2)];
      var $427=$426;
      var $ptr556=(($427+20)|0);
      var $428=HEAP32[(($ptr556)>>2)];
      $buf=$428;
      label = 207; break;
    case 207: 
      var $429=$blen;
      var $430=$buf;
      var $arrayidx558=(($430+$429)|0);
      assert(1 % 1 === 0);HEAP8[($arrayidx558)]=HEAP8[((((106388)|0))|0)];
      var $431=$blen;
      var $add559=((($431)+(1))|0);
      $blen=$add559;
      label = 208; break;
    case 208: 
      label = 582; break;
    case 209: 
      var $tt563=(($nextvalue+8)|0);
      var $432=HEAP32[(($tt563)>>2)];
      var $cmp564=(($432)|(0))==5;
      if ($cmp564) { label = 211; break; } else { label = 210; break; }
    case 210: 
      var $433=$val;
      var $434=$nextvalue;
      assert(12 % 1 === 0);HEAP32[(($433)>>2)]=HEAP32[(($434)>>2)];HEAP32[((($433)+(4))>>2)]=HEAP32[((($434)+(4))>>2)];HEAP32[((($433)+(8))>>2)]=HEAP32[((($434)+(8))>>2)];
      label = 221; break;
    case 211: 
      var $435=$posarg;
      var $cmp568=(($435)|(0))==-1;
      if ($cmp568) { label = 212; break; } else { label = 213; break; }
    case 212: 
      var $436=$mrb_addr;
      var $437=$mrb_addr;
      var $call571=_mrb_class_get($437, ((112612)|0));
      var $438=$nextarg;
      _mrb_fixnum_value1719($agg_tmp572, $438);
      _mrb_raisef($436, $call571, ((108340)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp572)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp572)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp572)+(8))>>2)],tempInt));
      _mrb_undef_value1718($val);
      label = 220; break;
    case 213: 
      var $439=$posarg;
      var $cmp574=(($439)|(0))==-2;
      if ($cmp574) { label = 214; break; } else { label = 215; break; }
    case 214: 
      var $440=$mrb_addr;
      var $441=$mrb_addr;
      var $call577=_mrb_class_get($441, ((112612)|0));
      var $442=$nextarg;
      _mrb_fixnum_value1719($agg_tmp578, $442);
      _mrb_raisef($440, $call577, ((107992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp578)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp578)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp578)+(8))>>2)],tempInt));
      _mrb_undef_value1718($val);
      label = 219; break;
    case 215: 
      var $443=$nextarg;
      var $inc580=((($443)+(1))|0);
      $nextarg=$inc580;
      $posarg=$443;
      var $444=$posarg;
      var $445=$argc_addr;
      var $cmp581=(($444)|(0)) >= (($445)|(0));
      if ($cmp581) { label = 216; break; } else { label = 217; break; }
    case 216: 
      var $446=$mrb_addr;
      var $447=$mrb_addr;
      var $call584=_mrb_class_get($447, ((112612)|0));
      _mrb_raise($446, $call584, ((107728)|0));
      _mrb_undef_value1718($val);
      label = 218; break;
    case 217: 
      var $448=$posarg;
      var $449=$argv_addr;
      var $arrayidx586=(($449+((($448)*(12))&-1))|0);
      var $450=$val;
      var $451=$arrayidx586;
      assert(12 % 1 === 0);HEAP32[(($450)>>2)]=HEAP32[(($451)>>2)];HEAP32[((($450)+(4))>>2)]=HEAP32[((($451)+(4))>>2)];HEAP32[((($450)+(8))>>2)]=HEAP32[((($451)+(8))>>2)];
      label = 218; break;
    case 218: 
      label = 219; break;
    case 219: 
      label = 220; break;
    case 220: 
      label = 221; break;
    case 221: 
      var $452=$mrb_addr;
      _mrb_check_string_type($tmp594, $452, $val);
      var $453=$tmp592;
      var $454=$tmp594;
      assert(12 % 1 === 0);HEAP32[(($453)>>2)]=HEAP32[(($454)>>2)];HEAP32[((($453)+(4))>>2)]=HEAP32[((($454)+(4))>>2)];HEAP32[((($453)+(8))>>2)]=HEAP32[((($454)+(8))>>2)];
      var $tt595=(($tmp592+8)|0);
      var $455=HEAP32[(($tt595)>>2)];
      var $cmp596=(($455)|(0))==0;
      if ($cmp596) { label = 222; break; } else { label = 223; break; }
    case 222: 
      var $value598=(($tmp592)|0);
      var $i599=$value598;
      var $456=HEAP32[(($i599)>>2)];
      var $tobool600=(($456)|(0))!=0;
      if ($tobool600) { label = 223; break; } else { label = 226; break; }
    case 223: 
      var $value602=(($tmp592)|0);
      var $p603=$value602;
      var $457=HEAP32[(($p603)>>2)];
      var $458=$457;
      var $len604=(($458+12)|0);
      var $459=HEAP32[(($len604)>>2)];
      var $cmp605=(($459)|(0))!=1;
      if ($cmp605) { label = 224; break; } else { label = 225; break; }
    case 224: 
      var $460=$mrb_addr;
      var $461=$mrb_addr;
      var $call608=_mrb_class_get($461, ((112612)|0));
      _mrb_raise($460, $call608, ((105996)|0));
      label = 225; break;
    case 225: 
      var $value610=(($tmp592)|0);
      var $p611=$value610;
      var $462=HEAP32[(($p611)>>2)];
      var $463=$462;
      var $ptr612=(($463+20)|0);
      var $464=HEAP32[(($ptr612)>>2)];
      var $arrayidx613=(($464)|0);
      var $465=HEAP8[($arrayidx613)];
      var $conv614=(($465 << 24) >> 24);
      $c=$conv614;
      $n=1;
      label = 227; break;
    case 226: 
      var $value616=(($val)|0);
      var $i617=$value616;
      var $466=HEAP32[(($i617)>>2)];
      $c=$466;
      $n=1;
      label = 227; break;
    case 227: 
      var $467=$n;
      var $cmp619=(($467)|(0)) <= 0;
      if ($cmp619) { label = 228; break; } else { label = 229; break; }
    case 228: 
      var $468=$mrb_addr;
      var $469=$mrb_addr;
      var $call622=_mrb_class_get($469, ((112612)|0));
      _mrb_raise($468, $call622, ((105688)|0));
      label = 229; break;
    case 229: 
      var $470=$flags;
      var $and624=$470 & 32;
      var $tobool625=(($and624)|(0))!=0;
      if ($tobool625) { label = 236; break; } else { label = 230; break; }
    case 230: 
      label = 231; break;
    case 231: 
      label = 232; break;
    case 232: 
      var $471=$blen;
      var $472=$n;
      var $add629=((($471)+($472))|0);
      var $473=$bsiz;
      var $cmp630=(($add629)|(0)) >= (($473)|(0));
      if ($cmp630) { label = 233; break; } else { label = 234; break; }
    case 233: 
      var $474=$bsiz;
      var $mul633=($474<<1);
      $bsiz=$mul633;
      label = 232; break;
    case 234: 
      var $475=$mrb_addr;
      var $476=$bsiz;
      _mrb_str_resize($tmp635, $475, $result, $476);
      var $value636=(($result)|0);
      var $p637=$value636;
      var $477=HEAP32[(($p637)>>2)];
      var $478=$477;
      var $ptr638=(($478+20)|0);
      var $479=HEAP32[(($ptr638)>>2)];
      $buf=$479;
      label = 235; break;
    case 235: 
      var $480=$c;
      var $conv640=(($480) & 255);
      var $481=$blen;
      var $482=$buf;
      var $arrayidx641=(($482+$481)|0);
      HEAP8[($arrayidx641)]=$conv640;
      var $483=$n;
      var $484=$blen;
      var $add642=((($484)+($483))|0);
      $blen=$add642;
      label = 264; break;
    case 236: 
      var $485=$flags;
      var $and644=$485 & 2;
      var $tobool645=(($and644)|(0))!=0;
      if ($tobool645) { label = 237; break; } else { label = 250; break; }
    case 237: 
      label = 238; break;
    case 238: 
      label = 239; break;
    case 239: 
      var $486=$blen;
      var $487=$n;
      var $add649=((($486)+($487))|0);
      var $488=$bsiz;
      var $cmp650=(($add649)|(0)) >= (($488)|(0));
      if ($cmp650) { label = 240; break; } else { label = 241; break; }
    case 240: 
      var $489=$bsiz;
      var $mul653=($489<<1);
      $bsiz=$mul653;
      label = 239; break;
    case 241: 
      var $490=$mrb_addr;
      var $491=$bsiz;
      _mrb_str_resize($tmp655, $490, $result, $491);
      var $value656=(($result)|0);
      var $p657=$value656;
      var $492=HEAP32[(($p657)>>2)];
      var $493=$492;
      var $ptr658=(($493+20)|0);
      var $494=HEAP32[(($ptr658)>>2)];
      $buf=$494;
      label = 242; break;
    case 242: 
      var $495=$c;
      var $conv660=(($495) & 255);
      var $496=$blen;
      var $497=$buf;
      var $arrayidx661=(($497+$496)|0);
      HEAP8[($arrayidx661)]=$conv660;
      var $498=$n;
      var $499=$blen;
      var $add662=((($499)+($498))|0);
      $blen=$add662;
      label = 243; break;
    case 243: 
      label = 244; break;
    case 244: 
      label = 245; break;
    case 245: 
      var $500=$blen;
      var $501=$width;
      var $sub666=((($501)-(1))|0);
      var $add667=((($500)+($sub666))|0);
      var $502=$bsiz;
      var $cmp668=(($add667)|(0)) >= (($502)|(0));
      if ($cmp668) { label = 246; break; } else { label = 247; break; }
    case 246: 
      var $503=$bsiz;
      var $mul671=($503<<1);
      $bsiz=$mul671;
      label = 245; break;
    case 247: 
      var $504=$mrb_addr;
      var $505=$bsiz;
      _mrb_str_resize($tmp673, $504, $result, $505);
      var $value674=(($result)|0);
      var $p675=$value674;
      var $506=HEAP32[(($p675)>>2)];
      var $507=$506;
      var $ptr676=(($507+20)|0);
      var $508=HEAP32[(($ptr676)>>2)];
      $buf=$508;
      label = 248; break;
    case 248: 
      var $509=$blen;
      var $510=$buf;
      var $arrayidx678=(($510+$509)|0);
      var $511=$width;
      var $sub679=((($511)-(1))|0);
      _memset($arrayidx678, 32, $sub679);
      var $512=$width;
      var $sub680=((($512)-(1))|0);
      var $513=$blen;
      var $add681=((($513)+($sub680))|0);
      $blen=$add681;
      label = 249; break;
    case 249: 
      label = 263; break;
    case 250: 
      label = 251; break;
    case 251: 
      label = 252; break;
    case 252: 
      label = 253; break;
    case 253: 
      var $514=$blen;
      var $515=$width;
      var $sub687=((($515)-(1))|0);
      var $add688=((($514)+($sub687))|0);
      var $516=$bsiz;
      var $cmp689=(($add688)|(0)) >= (($516)|(0));
      if ($cmp689) { label = 254; break; } else { label = 255; break; }
    case 254: 
      var $517=$bsiz;
      var $mul692=($517<<1);
      $bsiz=$mul692;
      label = 253; break;
    case 255: 
      var $518=$mrb_addr;
      var $519=$bsiz;
      _mrb_str_resize($tmp694, $518, $result, $519);
      var $value695=(($result)|0);
      var $p696=$value695;
      var $520=HEAP32[(($p696)>>2)];
      var $521=$520;
      var $ptr697=(($521+20)|0);
      var $522=HEAP32[(($ptr697)>>2)];
      $buf=$522;
      label = 256; break;
    case 256: 
      var $523=$blen;
      var $524=$buf;
      var $arrayidx699=(($524+$523)|0);
      var $525=$width;
      var $sub700=((($525)-(1))|0);
      _memset($arrayidx699, 32, $sub700);
      var $526=$width;
      var $sub701=((($526)-(1))|0);
      var $527=$blen;
      var $add702=((($527)+($sub701))|0);
      $blen=$add702;
      label = 257; break;
    case 257: 
      label = 258; break;
    case 258: 
      label = 259; break;
    case 259: 
      var $528=$blen;
      var $529=$n;
      var $add706=((($528)+($529))|0);
      var $530=$bsiz;
      var $cmp707=(($add706)|(0)) >= (($530)|(0));
      if ($cmp707) { label = 260; break; } else { label = 261; break; }
    case 260: 
      var $531=$bsiz;
      var $mul710=($531<<1);
      $bsiz=$mul710;
      label = 259; break;
    case 261: 
      var $532=$mrb_addr;
      var $533=$bsiz;
      _mrb_str_resize($tmp712, $532, $result, $533);
      var $value713=(($result)|0);
      var $p714=$value713;
      var $534=HEAP32[(($p714)>>2)];
      var $535=$534;
      var $ptr715=(($535+20)|0);
      var $536=HEAP32[(($ptr715)>>2)];
      $buf=$536;
      label = 262; break;
    case 262: 
      var $537=$c;
      var $conv717=(($537) & 255);
      var $538=$blen;
      var $539=$buf;
      var $arrayidx718=(($539+$538)|0);
      HEAP8[($arrayidx718)]=$conv717;
      var $540=$n;
      var $541=$blen;
      var $add719=((($541)+($540))|0);
      $blen=$add719;
      label = 263; break;
    case 263: 
      label = 264; break;
    case 264: 
      label = 582; break;
    case 265: 
      label = 266; break;
    case 266: 
      var $tt724=(($nextvalue+8)|0);
      var $542=HEAP32[(($tt724)>>2)];
      var $cmp725=(($542)|(0))==5;
      if ($cmp725) { label = 268; break; } else { label = 267; break; }
    case 267: 
      var $543=$arg;
      var $544=$nextvalue;
      assert(12 % 1 === 0);HEAP32[(($543)>>2)]=HEAP32[(($544)>>2)];HEAP32[((($543)+(4))>>2)]=HEAP32[((($544)+(4))>>2)];HEAP32[((($543)+(8))>>2)]=HEAP32[((($544)+(8))>>2)];
      label = 278; break;
    case 268: 
      var $545=$posarg;
      var $cmp729=(($545)|(0))==-1;
      if ($cmp729) { label = 269; break; } else { label = 270; break; }
    case 269: 
      var $546=$mrb_addr;
      var $547=$mrb_addr;
      var $call732=_mrb_class_get($547, ((112612)|0));
      var $548=$nextarg;
      _mrb_fixnum_value1719($agg_tmp733, $548);
      _mrb_raisef($546, $call732, ((108340)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp733)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp733)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp733)+(8))>>2)],tempInt));
      _mrb_undef_value1718($arg);
      label = 277; break;
    case 270: 
      var $549=$posarg;
      var $cmp735=(($549)|(0))==-2;
      if ($cmp735) { label = 271; break; } else { label = 272; break; }
    case 271: 
      var $550=$mrb_addr;
      var $551=$mrb_addr;
      var $call738=_mrb_class_get($551, ((112612)|0));
      var $552=$nextarg;
      _mrb_fixnum_value1719($agg_tmp739, $552);
      _mrb_raisef($550, $call738, ((107992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp739)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp739)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp739)+(8))>>2)],tempInt));
      _mrb_undef_value1718($arg);
      label = 276; break;
    case 272: 
      var $553=$nextarg;
      var $inc741=((($553)+(1))|0);
      $nextarg=$inc741;
      $posarg=$553;
      var $554=$posarg;
      var $555=$argc_addr;
      var $cmp742=(($554)|(0)) >= (($555)|(0));
      if ($cmp742) { label = 273; break; } else { label = 274; break; }
    case 273: 
      var $556=$mrb_addr;
      var $557=$mrb_addr;
      var $call745=_mrb_class_get($557, ((112612)|0));
      _mrb_raise($556, $call745, ((107728)|0));
      _mrb_undef_value1718($arg);
      label = 275; break;
    case 274: 
      var $558=$posarg;
      var $559=$argv_addr;
      var $arrayidx747=(($559+((($558)*(12))&-1))|0);
      var $560=$arg;
      var $561=$arrayidx747;
      assert(12 % 1 === 0);HEAP32[(($560)>>2)]=HEAP32[(($561)>>2)];HEAP32[((($560)+(4))>>2)]=HEAP32[((($561)+(4))>>2)];HEAP32[((($560)+(8))>>2)]=HEAP32[((($561)+(8))>>2)];
      label = 275; break;
    case 275: 
      label = 276; break;
    case 276: 
      label = 277; break;
    case 277: 
      label = 278; break;
    case 278: 
      var $562=$p;
      var $563=HEAP8[($562)];
      var $conv755=(($563 << 24) >> 24);
      var $cmp756=(($conv755)|(0))==112;
      if ($cmp756) { label = 279; break; } else { label = 280; break; }
    case 279: 
      var $564=$mrb_addr;
      _mrb_inspect($tmp759, $564, $arg);
      var $565=$arg;
      var $566=$tmp759;
      assert(12 % 1 === 0);HEAP32[(($565)>>2)]=HEAP32[(($566)>>2)];HEAP32[((($565)+(4))>>2)]=HEAP32[((($566)+(4))>>2)];HEAP32[((($565)+(8))>>2)]=HEAP32[((($566)+(8))>>2)];
      label = 280; break;
    case 280: 
      var $567=$mrb_addr;
      _mrb_obj_as_string($tmp761, $567, $arg);
      var $568=$str;
      var $569=$tmp761;
      assert(12 % 1 === 0);HEAP32[(($568)>>2)]=HEAP32[(($569)>>2)];HEAP32[((($568)+(4))>>2)]=HEAP32[((($569)+(4))>>2)];HEAP32[((($568)+(8))>>2)]=HEAP32[((($569)+(8))>>2)];
      var $value762=(($str)|0);
      var $p763=$value762;
      var $570=HEAP32[(($p763)>>2)];
      var $571=$570;
      var $len764=(($571+12)|0);
      var $572=HEAP32[(($len764)>>2)];
      $len753=$572;
      var $573=$blen;
      var $value765=(($result)|0);
      var $p766=$value765;
      var $574=HEAP32[(($p766)>>2)];
      var $575=$574;
      var $len767=(($575+12)|0);
      HEAP32[(($len767)>>2)]=$573;
      var $576=$flags;
      var $and768=$576 & 96;
      var $tobool769=(($and768)|(0))!=0;
      if ($tobool769) { label = 281; break; } else { label = 315; break; }
    case 281: 
      var $value771=(($str)|0);
      var $p772=$value771;
      var $577=HEAP32[(($p772)>>2)];
      var $578=$577;
      var $len773=(($578+12)|0);
      var $579=HEAP32[(($len773)>>2)];
      $slen=$579;
      var $580=$slen;
      var $cmp774=(($580)|(0)) < 0;
      if ($cmp774) { label = 282; break; } else { label = 283; break; }
    case 282: 
      var $581=$mrb_addr;
      var $582=$mrb_addr;
      var $call777=_mrb_class_get($582, ((112612)|0));
      _mrb_raise($581, $call777, ((105368)|0));
      label = 283; break;
    case 283: 
      var $583=$flags;
      var $and779=$583 & 64;
      var $tobool780=(($and779)|(0))!=0;
      if ($tobool780) { label = 284; break; } else { label = 286; break; }
    case 284: 
      var $584=$prec;
      var $585=$slen;
      var $cmp782=(($584)|(0)) < (($585)|(0));
      if ($cmp782) { label = 285; break; } else { label = 286; break; }
    case 285: 
      var $value787=(($str)|0);
      var $p788=$value787;
      var $586=HEAP32[(($p788)>>2)];
      var $587=$586;
      var $ptr789=(($587+20)|0);
      var $588=HEAP32[(($ptr789)>>2)];
      var $589=$prec;
      var $add_ptr790=(($588+$589)|0);
      $p786=$add_ptr790;
      var $590=$prec;
      $slen=$590;
      var $591=$p786;
      var $value791=(($str)|0);
      var $p792=$value791;
      var $592=HEAP32[(($p792)>>2)];
      var $593=$592;
      var $ptr793=(($593+20)|0);
      var $594=HEAP32[(($ptr793)>>2)];
      var $sub_ptr_lhs_cast794=$591;
      var $sub_ptr_rhs_cast795=$594;
      var $sub_ptr_sub796=((($sub_ptr_lhs_cast794)-($sub_ptr_rhs_cast795))|0);
      $len753=$sub_ptr_sub796;
      label = 286; break;
    case 286: 
      var $595=$flags;
      var $and798=$595 & 32;
      var $tobool799=(($and798)|(0))!=0;
      if ($tobool799) { label = 287; break; } else { label = 314; break; }
    case 287: 
      var $596=$width;
      var $597=$slen;
      var $cmp801=(($596)|(0)) > (($597)|(0));
      if ($cmp801) { label = 288; break; } else { label = 314; break; }
    case 288: 
      var $598=$slen;
      var $599=$width;
      var $sub804=((($599)-($598))|0);
      $width=$sub804;
      var $600=$flags;
      var $and805=$600 & 2;
      var $tobool806=(($and805)|(0))!=0;
      if ($tobool806) { label = 298; break; } else { label = 289; break; }
    case 289: 
      label = 290; break;
    case 290: 
      label = 291; break;
    case 291: 
      var $601=$blen;
      var $602=$width;
      var $add810=((($601)+($602))|0);
      var $603=$bsiz;
      var $cmp811=(($add810)|(0)) >= (($603)|(0));
      if ($cmp811) { label = 292; break; } else { label = 293; break; }
    case 292: 
      var $604=$bsiz;
      var $mul814=($604<<1);
      $bsiz=$mul814;
      label = 291; break;
    case 293: 
      var $605=$mrb_addr;
      var $606=$bsiz;
      _mrb_str_resize($tmp816, $605, $result, $606);
      var $value817=(($result)|0);
      var $p818=$value817;
      var $607=HEAP32[(($p818)>>2)];
      var $608=$607;
      var $ptr819=(($608+20)|0);
      var $609=HEAP32[(($ptr819)>>2)];
      $buf=$609;
      label = 294; break;
    case 294: 
      label = 295; break;
    case 295: 
      var $610=$width;
      var $dec=((($610)-(1))|0);
      $width=$dec;
      var $tobool822=(($610)|(0))!=0;
      if ($tobool822) { label = 296; break; } else { label = 297; break; }
    case 296: 
      var $611=$blen;
      var $inc824=((($611)+(1))|0);
      $blen=$inc824;
      var $612=$buf;
      var $arrayidx825=(($612+$611)|0);
      HEAP8[($arrayidx825)]=32;
      label = 295; break;
    case 297: 
      label = 298; break;
    case 298: 
      label = 299; break;
    case 299: 
      label = 300; break;
    case 300: 
      var $613=$blen;
      var $614=$len753;
      var $add830=((($613)+($614))|0);
      var $615=$bsiz;
      var $cmp831=(($add830)|(0)) >= (($615)|(0));
      if ($cmp831) { label = 301; break; } else { label = 302; break; }
    case 301: 
      var $616=$bsiz;
      var $mul834=($616<<1);
      $bsiz=$mul834;
      label = 300; break;
    case 302: 
      var $617=$mrb_addr;
      var $618=$bsiz;
      _mrb_str_resize($tmp836, $617, $result, $618);
      var $value837=(($result)|0);
      var $p838=$value837;
      var $619=HEAP32[(($p838)>>2)];
      var $620=$619;
      var $ptr839=(($620+20)|0);
      var $621=HEAP32[(($ptr839)>>2)];
      $buf=$621;
      label = 303; break;
    case 303: 
      var $622=$blen;
      var $623=$buf;
      var $arrayidx841=(($623+$622)|0);
      var $value842=(($str)|0);
      var $p843=$value842;
      var $624=HEAP32[(($p843)>>2)];
      var $625=$624;
      var $ptr844=(($625+20)|0);
      var $626=HEAP32[(($ptr844)>>2)];
      var $627=$len753;
      assert($627 % 1 === 0);_memcpy($arrayidx841, $626, $627);
      var $628=$len753;
      var $629=$blen;
      var $add845=((($629)+($628))|0);
      $blen=$add845;
      var $630=$flags;
      var $and846=$630 & 2;
      var $tobool847=(($and846)|(0))!=0;
      if ($tobool847) { label = 304; break; } else { label = 313; break; }
    case 304: 
      label = 305; break;
    case 305: 
      label = 306; break;
    case 306: 
      var $631=$blen;
      var $632=$width;
      var $add851=((($631)+($632))|0);
      var $633=$bsiz;
      var $cmp852=(($add851)|(0)) >= (($633)|(0));
      if ($cmp852) { label = 307; break; } else { label = 308; break; }
    case 307: 
      var $634=$bsiz;
      var $mul855=($634<<1);
      $bsiz=$mul855;
      label = 306; break;
    case 308: 
      var $635=$mrb_addr;
      var $636=$bsiz;
      _mrb_str_resize($tmp857, $635, $result, $636);
      var $value858=(($result)|0);
      var $p859=$value858;
      var $637=HEAP32[(($p859)>>2)];
      var $638=$637;
      var $ptr860=(($638+20)|0);
      var $639=HEAP32[(($ptr860)>>2)];
      $buf=$639;
      label = 309; break;
    case 309: 
      label = 310; break;
    case 310: 
      var $640=$width;
      var $dec863=((($640)-(1))|0);
      $width=$dec863;
      var $tobool864=(($640)|(0))!=0;
      if ($tobool864) { label = 311; break; } else { label = 312; break; }
    case 311: 
      var $641=$blen;
      var $inc866=((($641)+(1))|0);
      $blen=$inc866;
      var $642=$buf;
      var $arrayidx867=(($642+$641)|0);
      HEAP8[($arrayidx867)]=32;
      label = 310; break;
    case 312: 
      label = 313; break;
    case 313: 
      label = 582; break;
    case 314: 
      label = 315; break;
    case 315: 
      label = 316; break;
    case 316: 
      label = 317; break;
    case 317: 
      label = 318; break;
    case 318: 
      var $643=$blen;
      var $644=$len753;
      var $add875=((($643)+($644))|0);
      var $645=$bsiz;
      var $cmp876=(($add875)|(0)) >= (($645)|(0));
      if ($cmp876) { label = 319; break; } else { label = 320; break; }
    case 319: 
      var $646=$bsiz;
      var $mul879=($646<<1);
      $bsiz=$mul879;
      label = 318; break;
    case 320: 
      var $647=$mrb_addr;
      var $648=$bsiz;
      _mrb_str_resize($tmp881, $647, $result, $648);
      var $value882=(($result)|0);
      var $p883=$value882;
      var $649=HEAP32[(($p883)>>2)];
      var $650=$649;
      var $ptr884=(($650+20)|0);
      var $651=HEAP32[(($ptr884)>>2)];
      $buf=$651;
      label = 321; break;
    case 321: 
      var $652=$blen;
      var $653=$buf;
      var $arrayidx886=(($653+$652)|0);
      var $value887=(($str)|0);
      var $p888=$value887;
      var $654=HEAP32[(($p888)>>2)];
      var $655=$654;
      var $ptr889=(($655+20)|0);
      var $656=HEAP32[(($ptr889)>>2)];
      var $657=$len753;
      assert($657 % 1 === 0);_memcpy($arrayidx886, $656, $657);
      var $658=$len753;
      var $659=$blen;
      var $add890=((($659)+($658))|0);
      $blen=$add890;
      label = 322; break;
    case 322: 
      label = 582; break;
    case 323: 
      var $tt895=(($nextvalue+8)|0);
      var $660=HEAP32[(($tt895)>>2)];
      var $cmp896=(($660)|(0))==5;
      if ($cmp896) { label = 325; break; } else { label = 324; break; }
    case 324: 
      var $661=$val894;
      var $662=$nextvalue;
      assert(12 % 1 === 0);HEAP32[(($661)>>2)]=HEAP32[(($662)>>2)];HEAP32[((($661)+(4))>>2)]=HEAP32[((($662)+(4))>>2)];HEAP32[((($661)+(8))>>2)]=HEAP32[((($662)+(8))>>2)];
      label = 335; break;
    case 325: 
      var $663=$posarg;
      var $cmp900=(($663)|(0))==-1;
      if ($cmp900) { label = 326; break; } else { label = 327; break; }
    case 326: 
      var $664=$mrb_addr;
      var $665=$mrb_addr;
      var $call903=_mrb_class_get($665, ((112612)|0));
      var $666=$nextarg;
      _mrb_fixnum_value1719($agg_tmp904, $666);
      _mrb_raisef($664, $call903, ((108340)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp904)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp904)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp904)+(8))>>2)],tempInt));
      _mrb_undef_value1718($val894);
      label = 334; break;
    case 327: 
      var $667=$posarg;
      var $cmp906=(($667)|(0))==-2;
      if ($cmp906) { label = 328; break; } else { label = 329; break; }
    case 328: 
      var $668=$mrb_addr;
      var $669=$mrb_addr;
      var $call909=_mrb_class_get($669, ((112612)|0));
      var $670=$nextarg;
      _mrb_fixnum_value1719($agg_tmp910, $670);
      _mrb_raisef($668, $call909, ((107992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp910)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp910)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp910)+(8))>>2)],tempInt));
      _mrb_undef_value1718($val894);
      label = 333; break;
    case 329: 
      var $671=$nextarg;
      var $inc912=((($671)+(1))|0);
      $nextarg=$inc912;
      $posarg=$671;
      var $672=$posarg;
      var $673=$argc_addr;
      var $cmp913=(($672)|(0)) >= (($673)|(0));
      if ($cmp913) { label = 330; break; } else { label = 331; break; }
    case 330: 
      var $674=$mrb_addr;
      var $675=$mrb_addr;
      var $call916=_mrb_class_get($675, ((112612)|0));
      _mrb_raise($674, $call916, ((107728)|0));
      _mrb_undef_value1718($val894);
      label = 332; break;
    case 331: 
      var $676=$posarg;
      var $677=$argv_addr;
      var $arrayidx918=(($677+((($676)*(12))&-1))|0);
      var $678=$val894;
      var $679=$arrayidx918;
      assert(12 % 1 === 0);HEAP32[(($678)>>2)]=HEAP32[(($679)>>2)];HEAP32[((($678)+(4))>>2)]=HEAP32[((($679)+(4))>>2)];HEAP32[((($678)+(8))>>2)]=HEAP32[((($679)+(8))>>2)];
      label = 332; break;
    case 332: 
      label = 333; break;
    case 333: 
      label = 334; break;
    case 334: 
      label = 335; break;
    case 335: 
      $prefix=0;
      $sign=0;
      $dots=0;
      HEAP8[($sc)]=0;
      $v=0;
      $org_v=0;
      var $680=$p;
      var $681=HEAP8[($680)];
      var $conv935=(($681 << 24) >> 24);
      if ((($conv935)|(0))==100 | (($conv935)|(0))==105 | (($conv935)|(0))==117) {
        label = 336; break;
      }
      else if ((($conv935)|(0))==111 | (($conv935)|(0))==120 | (($conv935)|(0))==88 | (($conv935)|(0))==98 | (($conv935)|(0))==66) {
        label = 337; break;
      }
      else {
      label = 340; break;
      }
    case 336: 
      $sign=1;
      label = 341; break;
    case 337: 
      var $682=$flags;
      var $and938=$682 & 20;
      var $tobool939=(($and938)|(0))!=0;
      if ($tobool939) { label = 338; break; } else { label = 339; break; }
    case 338: 
      $sign=1;
      label = 339; break;
    case 339: 
      label = 341; break;
    case 340: 
      label = 341; break;
    case 341: 
      var $683=$flags;
      var $and943=$683 & 1;
      var $tobool944=(($and943)|(0))!=0;
      if ($tobool944) { label = 342; break; } else { label = 350; break; }
    case 342: 
      var $684=$p;
      var $685=HEAP8[($684)];
      var $conv946=(($685 << 24) >> 24);
      if ((($conv946)|(0))==111) {
        label = 343; break;
      }
      else if ((($conv946)|(0))==120) {
        label = 344; break;
      }
      else if ((($conv946)|(0))==88) {
        label = 345; break;
      }
      else if ((($conv946)|(0))==98) {
        label = 346; break;
      }
      else if ((($conv946)|(0))==66) {
        label = 347; break;
      }
      else {
      label = 348; break;
      }
    case 343: 
      $prefix=((105080)|0);
      label = 349; break;
    case 344: 
      $prefix=((104772)|0);
      label = 349; break;
    case 345: 
      $prefix=((104484)|0);
      label = 349; break;
    case 346: 
      $prefix=((103928)|0);
      label = 349; break;
    case 347: 
      $prefix=((103736)|0);
      label = 349; break;
    case 348: 
      label = 349; break;
    case 349: 
      label = 350; break;
    case 350: 
      label = 351; break;
    case 351: 
      var $tt955=(($val894+8)|0);
      var $686=HEAP32[(($tt955)>>2)];
      if ((($686)|(0))==6) {
        label = 352; break;
      }
      else if ((($686)|(0))==16) {
        label = 358; break;
      }
      else if ((($686)|(0))==3) {
        label = 359; break;
      }
      else {
      label = 360; break;
      }
    case 352: 
      var $value957=(($val894)|0);
      var $f=$value957;
      var $687=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp958=$687 <= 2147483647;
      if ($cmp958) { label = 353; break; } else { label = 355; break; }
    case 353: 
      var $value961=(($val894)|0);
      var $f962=$value961;
      var $688=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f962)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f962)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $cmp963=$688 >= -2147483648;
      if ($cmp963) { label = 354; break; } else { label = 355; break; }
    case 354: 
      var $value966=(($val894)|0);
      var $f967=$value966;
      var $689=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f967)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f967)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $conv968=(($689)&-1);
      _mrb_fixnum_value1719($tmp969, $conv968);
      var $690=$val894;
      var $691=$tmp969;
      assert(12 % 1 === 0);HEAP32[(($690)>>2)]=HEAP32[(($691)>>2)];HEAP32[((($690)+(4))>>2)]=HEAP32[((($691)+(4))>>2)];HEAP32[((($690)+(8))>>2)]=HEAP32[((($691)+(8))>>2)];
      label = 351; break;
    case 355: 
      var $692=$mrb_addr;
      _mrb_flo_to_fixnum($tmp971, $692, $val894);
      var $693=$val894;
      var $694=$tmp971;
      assert(12 % 1 === 0);HEAP32[(($693)>>2)]=HEAP32[(($694)>>2)];HEAP32[((($693)+(4))>>2)]=HEAP32[((($694)+(4))>>2)];HEAP32[((($693)+(8))>>2)]=HEAP32[((($694)+(8))>>2)];
      var $tt972=(($val894+8)|0);
      var $695=HEAP32[(($tt972)>>2)];
      var $cmp973=(($695)|(0))==3;
      if ($cmp973) { label = 356; break; } else { label = 357; break; }
    case 356: 
      label = 351; break;
    case 357: 
      label = 361; break;
    case 358: 
      var $696=$mrb_addr;
      _mrb_str_to_inum($tmp978, $696, $val894, 0, 1);
      var $697=$val894;
      var $698=$tmp978;
      assert(12 % 1 === 0);HEAP32[(($697)>>2)]=HEAP32[(($698)>>2)];HEAP32[((($697)+(4))>>2)]=HEAP32[((($698)+(4))>>2)];HEAP32[((($697)+(8))>>2)]=HEAP32[((($698)+(8))>>2)];
      label = 351; break;
    case 359: 
      var $value980=(($val894)|0);
      var $i981=$value980;
      var $699=HEAP32[(($i981)>>2)];
      $v=$699;
      label = 361; break;
    case 360: 
      var $700=$mrb_addr;
      _mrb_Integer($tmp983, $700, $val894);
      var $701=$val894;
      var $702=$tmp983;
      assert(12 % 1 === 0);HEAP32[(($701)>>2)]=HEAP32[(($702)>>2)];HEAP32[((($701)+(4))>>2)]=HEAP32[((($702)+(4))>>2)];HEAP32[((($701)+(8))>>2)]=HEAP32[((($702)+(8))>>2)];
      label = 351; break;
    case 361: 
      var $703=$p;
      var $704=HEAP8[($703)];
      var $conv985=(($704 << 24) >> 24);
      if ((($conv985)|(0))==111) {
        label = 362; break;
      }
      else if ((($conv985)|(0))==120 | (($conv985)|(0))==88) {
        label = 363; break;
      }
      else if ((($conv985)|(0))==98 | (($conv985)|(0))==66) {
        label = 364; break;
      }
      else if ((($conv985)|(0))==117 | (($conv985)|(0))==100 | (($conv985)|(0))==105) {
        label = 365; break;
      }
      else {
      label = 366; break;
      }
    case 362: 
      $base=8;
      label = 367; break;
    case 363: 
      $base=16;
      label = 367; break;
    case 364: 
      $base=2;
      label = 367; break;
    case 365: 
      label = 366; break;
    case 366: 
      $base=10;
      label = 367; break;
    case 367: 
      var $705=$base;
      var $cmp992=(($705)|(0))==2;
      if ($cmp992) { label = 368; break; } else { label = 373; break; }
    case 368: 
      var $706=$v;
      $org_v=$706;
      var $707=$v;
      var $cmp995=(($707)|(0)) < 0;
      if ($cmp995) { label = 369; break; } else { label = 371; break; }
    case 369: 
      var $708=$sign;
      var $tobool998=(($708)|(0))!=0;
      if ($tobool998) { label = 371; break; } else { label = 370; break; }
    case 370: 
      var $709=$mrb_addr;
      var $710=$v;
      _mrb_fixnum_value1719($agg_tmp1000, $710);
      var $711=$base;
      _mrb_fix2binstr($tmp1001, $709, $agg_tmp1000, $711);
      var $712=$val894;
      var $713=$tmp1001;
      assert(12 % 1 === 0);HEAP32[(($712)>>2)]=HEAP32[(($713)>>2)];HEAP32[((($712)+(4))>>2)]=HEAP32[((($713)+(4))>>2)];HEAP32[((($712)+(8))>>2)]=HEAP32[((($713)+(8))>>2)];
      $dots=1;
      label = 372; break;
    case 371: 
      var $714=$mrb_addr;
      var $715=$v;
      _mrb_fixnum_value1719($agg_tmp1003, $715);
      var $716=$base;
      _mrb_fixnum_to_str($tmp1004, $714, $agg_tmp1003, $716);
      var $717=$val894;
      var $718=$tmp1004;
      assert(12 % 1 === 0);HEAP32[(($717)>>2)]=HEAP32[(($718)>>2)];HEAP32[((($717)+(4))>>2)]=HEAP32[((($718)+(4))>>2)];HEAP32[((($717)+(8))>>2)]=HEAP32[((($718)+(8))>>2)];
      label = 372; break;
    case 372: 
      var $719=$mrb_addr;
      _mrb_str_to_inum($tmp1006, $719, $val894, 10, 0);
      var $value1007=(($tmp1006)|0);
      var $i1008=$value1007;
      var $720=HEAP32[(($i1008)>>2)];
      $v=$720;
      label = 373; break;
    case 373: 
      var $721=$sign;
      var $tobool1010=(($721)|(0))!=0;
      if ($tobool1010) { label = 374; break; } else { label = 387; break; }
    case 374: 
      var $722=$p;
      var $723=HEAP8[($722)];
      $c1013=$723;
      var $724=$c1013;
      var $conv1014=(($724 << 24) >> 24);
      var $cmp1015=(($conv1014)|(0))==105;
      if ($cmp1015) { label = 375; break; } else { label = 376; break; }
    case 375: 
      $c1013=100;
      label = 376; break;
    case 376: 
      var $725=$base;
      var $cmp1019=(($725)|(0))==2;
      if ($cmp1019) { label = 377; break; } else { label = 378; break; }
    case 377: 
      $c1013=100;
      label = 378; break;
    case 378: 
      var $726=$v;
      var $cmp1023=(($726)|(0)) < 0;
      if ($cmp1023) { label = 379; break; } else { label = 380; break; }
    case 379: 
      var $727=$v;
      var $sub1026=(((-$727))|0);
      $v=$sub1026;
      HEAP8[($sc)]=45;
      var $728=$width;
      var $dec1027=((($728)-(1))|0);
      $width=$dec1027;
      label = 386; break;
    case 380: 
      var $729=$flags;
      var $and1029=$729 & 4;
      var $tobool1030=(($and1029)|(0))!=0;
      if ($tobool1030) { label = 381; break; } else { label = 382; break; }
    case 381: 
      HEAP8[($sc)]=43;
      var $730=$width;
      var $dec1032=((($730)-(1))|0);
      $width=$dec1032;
      label = 385; break;
    case 382: 
      var $731=$flags;
      var $and1034=$731 & 16;
      var $tobool1035=(($and1034)|(0))!=0;
      if ($tobool1035) { label = 383; break; } else { label = 384; break; }
    case 383: 
      HEAP8[($sc)]=32;
      var $732=$width;
      var $dec1037=((($732)-(1))|0);
      $width=$dec1037;
      label = 384; break;
    case 384: 
      label = 385; break;
    case 385: 
      label = 386; break;
    case 386: 
      var $arraydecay=(($fbuf)|0);
      var $733=$c1013;
      var $conv1041=(($733 << 24) >> 24);
      var $call1042=_snprintf($arraydecay, 32, ((103520)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$conv1041,tempInt));
      var $arraydecay1043=(($nbuf)|0);
      var $arraydecay1044=(($fbuf)|0);
      var $734=$v;
      var $call1045=_snprintf($arraydecay1043, 64, $arraydecay1044, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$734,tempInt));
      var $arraydecay1046=(($nbuf)|0);
      $s=$arraydecay1046;
      label = 404; break;
    case 387: 
      var $735=$p;
      var $736=HEAP8[($735)];
      $c1049=$736;
      var $737=$c1049;
      var $conv1050=(($737 << 24) >> 24);
      var $cmp1051=(($conv1050)|(0))==88;
      if ($cmp1051) { label = 388; break; } else { label = 389; break; }
    case 388: 
      $c1049=120;
      label = 389; break;
    case 389: 
      var $738=$base;
      var $cmp1055=(($738)|(0))==2;
      if ($cmp1055) { label = 390; break; } else { label = 391; break; }
    case 390: 
      $c1049=100;
      label = 391; break;
    case 391: 
      var $arraydecay1059=(($nbuf)|0);
      $s=$arraydecay1059;
      var $739=$v;
      var $cmp1060=(($739)|(0)) < 0;
      if ($cmp1060) { label = 392; break; } else { label = 393; break; }
    case 392: 
      $dots=1;
      label = 393; break;
    case 393: 
      var $arraydecay1064=(($fbuf)|0);
      var $740=$c1049;
      var $conv1065=(($740 << 24) >> 24);
      var $call1066=_snprintf($arraydecay1064, 32, ((103520)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$conv1065,tempInt));
      var $741=$s;
      var $incdec_ptr1067=(($741+1)|0);
      $s=$incdec_ptr1067;
      var $arraydecay1068=(($fbuf)|0);
      var $742=$v;
      var $call1069=_snprintf($incdec_ptr1067, 63, $arraydecay1068, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$742,tempInt));
      var $743=$v;
      var $cmp1070=(($743)|(0)) < 0;
      if ($cmp1070) { label = 394; break; } else { label = 403; break; }
    case 394: 
      var $744=$s;
      var $745=$base;
      var $call1074=_remove_sign_bits($744, $745);
      $s=$call1074;
      var $746=$base;
      if ((($746)|(0))==16) {
        label = 395; break;
      }
      else if ((($746)|(0))==8) {
        label = 396; break;
      }
      else if ((($746)|(0))==2) {
        label = 397; break;
      }
      else {
      label = 398; break;
      }
    case 395: 
      $d=102;
      label = 399; break;
    case 396: 
      $d=55;
      label = 399; break;
    case 397: 
      $d=49;
      label = 399; break;
    case 398: 
      $d=0;
      label = 399; break;
    case 399: 
      var $747=$d;
      var $conv1080=(($747 << 24) >> 24);
      var $tobool1081=(($conv1080)|(0))!=0;
      if ($tobool1081) { label = 400; break; } else { label = 402; break; }
    case 400: 
      var $748=$s;
      var $749=HEAP8[($748)];
      var $conv1083=(($749 << 24) >> 24);
      var $750=$d;
      var $conv1084=(($750 << 24) >> 24);
      var $cmp1085=(($conv1083)|(0))!=(($conv1084)|(0));
      if ($cmp1085) { label = 401; break; } else { label = 402; break; }
    case 401: 
      var $751=$d;
      var $752=$s;
      var $incdec_ptr1088=((($752)-(1))|0);
      $s=$incdec_ptr1088;
      HEAP8[($incdec_ptr1088)]=$751;
      label = 402; break;
    case 402: 
      label = 403; break;
    case 403: 
      label = 404; break;
    case 404: 
      var $753=$s;
      var $call1093=_strlen($753);
      $size=$call1093;
      var $754=$size;
      $len934=$754;
      var $755=$dots;
      var $tobool1094=(($755)|(0))!=0;
      if ($tobool1094) { label = 405; break; } else { label = 406; break; }
    case 405: 
      var $756=$prec;
      var $sub1096=((($756)-(2))|0);
      $prec=$sub1096;
      var $757=$width;
      var $sub1097=((($757)-(2))|0);
      $width=$sub1097;
      label = 406; break;
    case 406: 
      var $758=$p;
      var $759=HEAP8[($758)];
      var $conv1099=(($759 << 24) >> 24);
      var $cmp1100=(($conv1099)|(0))==88;
      if ($cmp1100) { label = 407; break; } else { label = 411; break; }
    case 407: 
      var $760=$s;
      $pp=$760;
      label = 408; break;
    case 408: 
      var $761=$pp;
      var $762=HEAP8[($761)];
      var $conv1107=(($762)&(255));
      $c1105=$conv1107;
      var $cmp1108=(($conv1107)|(0))!=0;
      if ($cmp1108) { label = 409; break; } else { label = 410; break; }
    case 409: 
      var $763=$c1105;
      var $call1111=_toupper($763);
      var $conv1112=(($call1111) & 255);
      var $764=$pp;
      HEAP8[($764)]=$conv1112;
      var $765=$pp;
      var $incdec_ptr1113=(($765+1)|0);
      $pp=$incdec_ptr1113;
      label = 408; break;
    case 410: 
      label = 411; break;
    case 411: 
      var $766=$prefix;
      var $tobool1116=(($766)|(0))!=0;
      if ($tobool1116) { label = 412; break; } else { label = 426; break; }
    case 412: 
      var $767=$prefix;
      var $arrayidx1118=(($767+1)|0);
      var $768=HEAP8[($arrayidx1118)];
      var $tobool1119=(($768 << 24) >> 24)!=0;
      if ($tobool1119) { label = 426; break; } else { label = 413; break; }
    case 413: 
      var $769=$dots;
      var $tobool1121=(($769)|(0))!=0;
      if ($tobool1121) { label = 414; break; } else { label = 415; break; }
    case 414: 
      $prefix=0;
      label = 425; break;
    case 415: 
      var $770=$len934;
      var $cmp1124=(($770)|(0))==1;
      if ($cmp1124) { label = 416; break; } else { label = 420; break; }
    case 416: 
      var $771=$s;
      var $772=HEAP8[($771)];
      var $conv1127=(($772 << 24) >> 24);
      var $cmp1128=(($conv1127)|(0))==48;
      if ($cmp1128) { label = 417; break; } else { label = 420; break; }
    case 417: 
      $len934=0;
      var $773=$flags;
      var $and1131=$773 & 64;
      var $tobool1132=(($and1131)|(0))!=0;
      if ($tobool1132) { label = 418; break; } else { label = 419; break; }
    case 418: 
      var $774=$prec;
      var $dec1134=((($774)-(1))|0);
      $prec=$dec1134;
      label = 419; break;
    case 419: 
      label = 424; break;
    case 420: 
      var $775=$flags;
      var $and1137=$775 & 64;
      var $tobool1138=(($and1137)|(0))!=0;
      if ($tobool1138) { label = 421; break; } else { label = 423; break; }
    case 421: 
      var $776=$prec;
      var $777=$len934;
      var $cmp1140=(($776)|(0)) > (($777)|(0));
      if ($cmp1140) { label = 422; break; } else { label = 423; break; }
    case 422: 
      $prefix=0;
      label = 423; break;
    case 423: 
      label = 424; break;
    case 424: 
      label = 425; break;
    case 425: 
      label = 430; break;
    case 426: 
      var $778=$len934;
      var $cmp1147=(($778)|(0))==1;
      if ($cmp1147) { label = 427; break; } else { label = 429; break; }
    case 427: 
      var $779=$s;
      var $780=HEAP8[($779)];
      var $conv1150=(($780 << 24) >> 24);
      var $cmp1151=(($conv1150)|(0))==48;
      if ($cmp1151) { label = 428; break; } else { label = 429; break; }
    case 428: 
      $prefix=0;
      label = 429; break;
    case 429: 
      label = 430; break;
    case 430: 
      var $781=$prefix;
      var $tobool1156=(($781)|(0))!=0;
      if ($tobool1156) { label = 431; break; } else { label = 432; break; }
    case 431: 
      var $782=$prefix;
      var $call1160=_strlen($782);
      $size1159=$call1160;
      var $783=$size1159;
      var $784=$width;
      var $sub1161=((($784)-($783))|0);
      $width=$sub1161;
      label = 432; break;
    case 432: 
      var $785=$flags;
      var $and1163=$785 & 74;
      var $cmp1164=(($and1163)|(0))==8;
      if ($cmp1164) { label = 433; break; } else { label = 434; break; }
    case 433: 
      var $786=$width;
      $prec=$786;
      $width=0;
      label = 442; break;
    case 434: 
      var $787=$prec;
      var $788=$len934;
      var $cmp1168=(($787)|(0)) < (($788)|(0));
      if ($cmp1168) { label = 435; break; } else { label = 441; break; }
    case 435: 
      var $789=$prefix;
      var $tobool1171=(($789)|(0))!=0;
      if ($tobool1171) { label = 440; break; } else { label = 436; break; }
    case 436: 
      var $790=$prec;
      var $cmp1173=(($790)|(0))==0;
      if ($cmp1173) { label = 437; break; } else { label = 440; break; }
    case 437: 
      var $791=$len934;
      var $cmp1176=(($791)|(0))==1;
      if ($cmp1176) { label = 438; break; } else { label = 440; break; }
    case 438: 
      var $792=$s;
      var $793=HEAP8[($792)];
      var $conv1179=(($793 << 24) >> 24);
      var $cmp1180=(($conv1179)|(0))==48;
      if ($cmp1180) { label = 439; break; } else { label = 440; break; }
    case 439: 
      $len934=0;
      label = 440; break;
    case 440: 
      var $794=$len934;
      $prec=$794;
      label = 441; break;
    case 441: 
      var $795=$prec;
      var $796=$width;
      var $sub1185=((($796)-($795))|0);
      $width=$sub1185;
      label = 442; break;
    case 442: 
      var $797=$flags;
      var $and1187=$797 & 2;
      var $tobool1188=(($and1187)|(0))!=0;
      if ($tobool1188) { label = 452; break; } else { label = 443; break; }
    case 443: 
      label = 444; break;
    case 444: 
      label = 445; break;
    case 445: 
      var $798=$blen;
      var $799=$width;
      var $add1192=((($798)+($799))|0);
      var $800=$bsiz;
      var $cmp1193=(($add1192)|(0)) >= (($800)|(0));
      if ($cmp1193) { label = 446; break; } else { label = 447; break; }
    case 446: 
      var $801=$bsiz;
      var $mul1196=($801<<1);
      $bsiz=$mul1196;
      label = 445; break;
    case 447: 
      var $802=$mrb_addr;
      var $803=$bsiz;
      _mrb_str_resize($tmp1198, $802, $result, $803);
      var $value1199=(($result)|0);
      var $p1200=$value1199;
      var $804=HEAP32[(($p1200)>>2)];
      var $805=$804;
      var $ptr1201=(($805+20)|0);
      var $806=HEAP32[(($ptr1201)>>2)];
      $buf=$806;
      label = 448; break;
    case 448: 
      label = 449; break;
    case 449: 
      var $807=$width;
      var $dec1204=((($807)-(1))|0);
      $width=$dec1204;
      var $cmp1205=(($807)|(0)) > 0;
      if ($cmp1205) { label = 450; break; } else { label = 451; break; }
    case 450: 
      var $808=$blen;
      var $inc1208=((($808)+(1))|0);
      $blen=$inc1208;
      var $809=$buf;
      var $arrayidx1209=(($809+$808)|0);
      HEAP8[($arrayidx1209)]=32;
      label = 449; break;
    case 451: 
      label = 452; break;
    case 452: 
      var $810=HEAP8[($sc)];
      var $tobool1212=(($810 << 24) >> 24)!=0;
      if ($tobool1212) { label = 453; break; } else { label = 461; break; }
    case 453: 
      label = 454; break;
    case 454: 
      label = 455; break;
    case 455: 
      label = 456; break;
    case 456: 
      var $811=$blen;
      var $add1217=((($811)+(1))|0);
      var $812=$bsiz;
      var $cmp1218=(($add1217)|(0)) >= (($812)|(0));
      if ($cmp1218) { label = 457; break; } else { label = 458; break; }
    case 457: 
      var $813=$bsiz;
      var $mul1221=($813<<1);
      $bsiz=$mul1221;
      label = 456; break;
    case 458: 
      var $814=$mrb_addr;
      var $815=$bsiz;
      _mrb_str_resize($tmp1223, $814, $result, $815);
      var $value1224=(($result)|0);
      var $p1225=$value1224;
      var $816=HEAP32[(($p1225)>>2)];
      var $817=$816;
      var $ptr1226=(($817+20)|0);
      var $818=HEAP32[(($ptr1226)>>2)];
      $buf=$818;
      label = 459; break;
    case 459: 
      var $819=$blen;
      var $820=$buf;
      var $arrayidx1228=(($820+$819)|0);
      assert(1 % 1 === 0);HEAP8[($arrayidx1228)]=HEAP8[($sc)];
      var $821=$blen;
      var $add1229=((($821)+(1))|0);
      $blen=$add1229;
      label = 460; break;
    case 460: 
      label = 461; break;
    case 461: 
      var $822=$prefix;
      var $tobool1232=(($822)|(0))!=0;
      if ($tobool1232) { label = 462; break; } else { label = 470; break; }
    case 462: 
      var $823=$prefix;
      var $call1235=_strlen($823);
      $plen=$call1235;
      label = 463; break;
    case 463: 
      label = 464; break;
    case 464: 
      label = 465; break;
    case 465: 
      var $824=$blen;
      var $825=$plen;
      var $add1239=((($824)+($825))|0);
      var $826=$bsiz;
      var $cmp1240=(($add1239)|(0)) >= (($826)|(0));
      if ($cmp1240) { label = 466; break; } else { label = 467; break; }
    case 466: 
      var $827=$bsiz;
      var $mul1243=($827<<1);
      $bsiz=$mul1243;
      label = 465; break;
    case 467: 
      var $828=$mrb_addr;
      var $829=$bsiz;
      _mrb_str_resize($tmp1245, $828, $result, $829);
      var $value1246=(($result)|0);
      var $p1247=$value1246;
      var $830=HEAP32[(($p1247)>>2)];
      var $831=$830;
      var $ptr1248=(($831+20)|0);
      var $832=HEAP32[(($ptr1248)>>2)];
      $buf=$832;
      label = 468; break;
    case 468: 
      var $833=$blen;
      var $834=$buf;
      var $arrayidx1250=(($834+$833)|0);
      var $835=$prefix;
      var $836=$plen;
      assert($836 % 1 === 0);_memcpy($arrayidx1250, $835, $836);
      var $837=$plen;
      var $838=$blen;
      var $add1251=((($838)+($837))|0);
      $blen=$add1251;
      label = 469; break;
    case 469: 
      label = 470; break;
    case 470: 
      label = 471; break;
    case 471: 
      label = 472; break;
    case 472: 
      var $839=$blen;
      var $840=$prec;
      var $841=$len934;
      var $sub1256=((($840)-($841))|0);
      var $add1257=((($839)+($sub1256))|0);
      var $842=$bsiz;
      var $cmp1258=(($add1257)|(0)) >= (($842)|(0));
      if ($cmp1258) { label = 473; break; } else { label = 474; break; }
    case 473: 
      var $843=$bsiz;
      var $mul1261=($843<<1);
      $bsiz=$mul1261;
      label = 472; break;
    case 474: 
      var $844=$mrb_addr;
      var $845=$bsiz;
      _mrb_str_resize($tmp1263, $844, $result, $845);
      var $value1264=(($result)|0);
      var $p1265=$value1264;
      var $846=HEAP32[(($p1265)>>2)];
      var $847=$846;
      var $ptr1266=(($847+20)|0);
      var $848=HEAP32[(($ptr1266)>>2)];
      $buf=$848;
      label = 475; break;
    case 475: 
      var $849=$dots;
      var $tobool1268=(($849)|(0))!=0;
      if ($tobool1268) { label = 476; break; } else { label = 484; break; }
    case 476: 
      label = 477; break;
    case 477: 
      label = 478; break;
    case 478: 
      label = 479; break;
    case 479: 
      var $850=$blen;
      var $add1273=((($850)+(2))|0);
      var $851=$bsiz;
      var $cmp1274=(($add1273)|(0)) >= (($851)|(0));
      if ($cmp1274) { label = 480; break; } else { label = 481; break; }
    case 480: 
      var $852=$bsiz;
      var $mul1277=($852<<1);
      $bsiz=$mul1277;
      label = 479; break;
    case 481: 
      var $853=$mrb_addr;
      var $854=$bsiz;
      _mrb_str_resize($tmp1279, $853, $result, $854);
      var $value1280=(($result)|0);
      var $p1281=$value1280;
      var $855=HEAP32[(($p1281)>>2)];
      var $856=$855;
      var $ptr1282=(($856+20)|0);
      var $857=HEAP32[(($ptr1282)>>2)];
      $buf=$857;
      label = 482; break;
    case 482: 
      var $858=$blen;
      var $859=$buf;
      var $arrayidx1284=(($859+$858)|0);
      assert(2 % 1 === 0);HEAP8[($arrayidx1284)]=HEAP8[((((103312)|0))|0)];HEAP8[((($arrayidx1284)+(1))|0)]=HEAP8[(((((103312)|0))+(1))|0)];
      var $860=$blen;
      var $add1285=((($860)+(2))|0);
      $blen=$add1285;
      label = 483; break;
    case 483: 
      label = 484; break;
    case 484: 
      var $861=$v;
      var $cmp1288=(($861)|(0)) < 0;
      if ($cmp1288) { label = 487; break; } else { label = 485; break; }
    case 485: 
      var $862=$base;
      var $cmp1290=(($862)|(0))==2;
      if ($cmp1290) { label = 486; break; } else { label = 491; break; }
    case 486: 
      var $863=$org_v;
      var $cmp1293=(($863)|(0)) < 0;
      if ($cmp1293) { label = 487; break; } else { label = 491; break; }
    case 487: 
      var $864=$base;
      var $865=$p;
      var $call1298=_sign_bits($864, $865);
      $c1297=$call1298;
      label = 488; break;
    case 488: 
      var $866=$len934;
      var $867=$prec;
      var $dec1300=((($867)-(1))|0);
      $prec=$dec1300;
      var $cmp1301=(($866)|(0)) < (($867)|(0));
      if ($cmp1301) { label = 489; break; } else { label = 490; break; }
    case 489: 
      var $868=$c1297;
      var $869=$blen;
      var $inc1304=((($869)+(1))|0);
      $blen=$inc1304;
      var $870=$buf;
      var $arrayidx1305=(($870+$869)|0);
      HEAP8[($arrayidx1305)]=$868;
      label = 488; break;
    case 490: 
      label = 497; break;
    case 491: 
      var $871=$flags;
      var $and1308=$871 & 66;
      var $cmp1309=(($and1308)|(0))!=2;
      if ($cmp1309) { label = 492; break; } else { label = 496; break; }
    case 492: 
      $c1313=48;
      label = 493; break;
    case 493: 
      var $872=$len934;
      var $873=$prec;
      var $dec1315=((($873)-(1))|0);
      $prec=$dec1315;
      var $cmp1316=(($872)|(0)) < (($873)|(0));
      if ($cmp1316) { label = 494; break; } else { label = 495; break; }
    case 494: 
      var $874=$c1313;
      var $875=$blen;
      var $inc1319=((($875)+(1))|0);
      $blen=$inc1319;
      var $876=$buf;
      var $arrayidx1320=(($876+$875)|0);
      HEAP8[($arrayidx1320)]=$874;
      label = 493; break;
    case 495: 
      label = 496; break;
    case 496: 
      label = 497; break;
    case 497: 
      label = 498; break;
    case 498: 
      label = 499; break;
    case 499: 
      label = 500; break;
    case 500: 
      var $877=$blen;
      var $878=$len934;
      var $add1327=((($877)+($878))|0);
      var $879=$bsiz;
      var $cmp1328=(($add1327)|(0)) >= (($879)|(0));
      if ($cmp1328) { label = 501; break; } else { label = 502; break; }
    case 501: 
      var $880=$bsiz;
      var $mul1331=($880<<1);
      $bsiz=$mul1331;
      label = 500; break;
    case 502: 
      var $881=$mrb_addr;
      var $882=$bsiz;
      _mrb_str_resize($tmp1333, $881, $result, $882);
      var $value1334=(($result)|0);
      var $p1335=$value1334;
      var $883=HEAP32[(($p1335)>>2)];
      var $884=$883;
      var $ptr1336=(($884+20)|0);
      var $885=HEAP32[(($ptr1336)>>2)];
      $buf=$885;
      label = 503; break;
    case 503: 
      var $886=$blen;
      var $887=$buf;
      var $arrayidx1338=(($887+$886)|0);
      var $888=$s;
      var $889=$len934;
      assert($889 % 1 === 0);_memcpy($arrayidx1338, $888, $889);
      var $890=$len934;
      var $891=$blen;
      var $add1339=((($891)+($890))|0);
      $blen=$add1339;
      label = 504; break;
    case 504: 
      label = 505; break;
    case 505: 
      label = 506; break;
    case 506: 
      var $892=$blen;
      var $893=$width;
      var $add1343=((($892)+($893))|0);
      var $894=$bsiz;
      var $cmp1344=(($add1343)|(0)) >= (($894)|(0));
      if ($cmp1344) { label = 507; break; } else { label = 508; break; }
    case 507: 
      var $895=$bsiz;
      var $mul1347=($895<<1);
      $bsiz=$mul1347;
      label = 506; break;
    case 508: 
      var $896=$mrb_addr;
      var $897=$bsiz;
      _mrb_str_resize($tmp1349, $896, $result, $897);
      var $value1350=(($result)|0);
      var $p1351=$value1350;
      var $898=HEAP32[(($p1351)>>2)];
      var $899=$898;
      var $ptr1352=(($899+20)|0);
      var $900=HEAP32[(($ptr1352)>>2)];
      $buf=$900;
      label = 509; break;
    case 509: 
      label = 510; break;
    case 510: 
      var $901=$width;
      var $dec1355=((($901)-(1))|0);
      $width=$dec1355;
      var $cmp1356=(($901)|(0)) > 0;
      if ($cmp1356) { label = 511; break; } else { label = 512; break; }
    case 511: 
      var $902=$blen;
      var $inc1359=((($902)+(1))|0);
      $blen=$inc1359;
      var $903=$buf;
      var $arrayidx1360=(($903+$902)|0);
      HEAP8[($arrayidx1360)]=32;
      label = 510; break;
    case 512: 
      label = 582; break;
    case 513: 
      var $tt1365=(($nextvalue+8)|0);
      var $904=HEAP32[(($tt1365)>>2)];
      var $cmp1366=(($904)|(0))==5;
      if ($cmp1366) { label = 515; break; } else { label = 514; break; }
    case 514: 
      var $905=$val1364;
      var $906=$nextvalue;
      assert(12 % 1 === 0);HEAP32[(($905)>>2)]=HEAP32[(($906)>>2)];HEAP32[((($905)+(4))>>2)]=HEAP32[((($906)+(4))>>2)];HEAP32[((($905)+(8))>>2)]=HEAP32[((($906)+(8))>>2)];
      label = 525; break;
    case 515: 
      var $907=$posarg;
      var $cmp1370=(($907)|(0))==-1;
      if ($cmp1370) { label = 516; break; } else { label = 517; break; }
    case 516: 
      var $908=$mrb_addr;
      var $909=$mrb_addr;
      var $call1373=_mrb_class_get($909, ((112612)|0));
      var $910=$nextarg;
      _mrb_fixnum_value1719($agg_tmp1374, $910);
      _mrb_raisef($908, $call1373, ((108340)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp1374)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp1374)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp1374)+(8))>>2)],tempInt));
      _mrb_undef_value1718($val1364);
      label = 524; break;
    case 517: 
      var $911=$posarg;
      var $cmp1376=(($911)|(0))==-2;
      if ($cmp1376) { label = 518; break; } else { label = 519; break; }
    case 518: 
      var $912=$mrb_addr;
      var $913=$mrb_addr;
      var $call1379=_mrb_class_get($913, ((112612)|0));
      var $914=$nextarg;
      _mrb_fixnum_value1719($agg_tmp1380, $914);
      _mrb_raisef($912, $call1379, ((107992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp1380)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp1380)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp1380)+(8))>>2)],tempInt));
      _mrb_undef_value1718($val1364);
      label = 523; break;
    case 519: 
      var $915=$nextarg;
      var $inc1382=((($915)+(1))|0);
      $nextarg=$inc1382;
      $posarg=$915;
      var $916=$posarg;
      var $917=$argc_addr;
      var $cmp1383=(($916)|(0)) >= (($917)|(0));
      if ($cmp1383) { label = 520; break; } else { label = 521; break; }
    case 520: 
      var $918=$mrb_addr;
      var $919=$mrb_addr;
      var $call1386=_mrb_class_get($919, ((112612)|0));
      _mrb_raise($918, $call1386, ((107728)|0));
      _mrb_undef_value1718($val1364);
      label = 522; break;
    case 521: 
      var $920=$posarg;
      var $921=$argv_addr;
      var $arrayidx1388=(($921+((($920)*(12))&-1))|0);
      var $922=$val1364;
      var $923=$arrayidx1388;
      assert(12 % 1 === 0);HEAP32[(($922)>>2)]=HEAP32[(($923)>>2)];HEAP32[((($922)+(4))>>2)]=HEAP32[((($923)+(4))>>2)];HEAP32[((($922)+(8))>>2)]=HEAP32[((($923)+(8))>>2)];
      label = 522; break;
    case 522: 
      label = 523; break;
    case 523: 
      label = 524; break;
    case 524: 
      label = 525; break;
    case 525: 
      $need=6;
      var $924=$mrb_addr;
      _mrb_Float($tmp1399, $924, $val1364);
      var $value1400=(($tmp1399)|0);
      var $f1401=$value1400;
      var $925=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f1401)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f1401)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $fval=$925;
      var $926=$fval;
      var $call1402=___fpclassifyf($926);
      var $cmp1403=(($call1402)|(0))==0;
      if ($cmp1403) { label = 527; break; } else { label = 526; break; }
    case 526: 
      var $927=$fval;
      var $call1406=___fpclassifyf($927);
      var $cmp1407=(($call1406)|(0))==1;
      if ($cmp1407) { label = 527; break; } else { label = 565; break; }
    case 527: 
      $elen=3;
      var $928=$fval;
      var $call1412=___fpclassifyf($928);
      var $cmp1413=(($call1412)|(0))==0;
      if ($cmp1413) { label = 528; break; } else { label = 529; break; }
    case 528: 
      $expr=((103080)|0);
      label = 530; break;
    case 529: 
      $expr=((102812)|0);
      label = 530; break;
    case 530: 
      $need=3;
      var $929=$fval;
      var $call1418=___fpclassifyf($929);
      var $cmp1419=(($call1418)|(0))==0;
      if ($cmp1419) { label = 532; break; } else { label = 531; break; }
    case 531: 
      var $930=$fval;
      var $cmp1422=$930 < 0;
      if ($cmp1422) { label = 533; break; } else { label = 532; break; }
    case 532: 
      var $931=$flags;
      var $and1425=$931 & 4;
      var $tobool1426=(($and1425)|(0))!=0;
      if ($tobool1426) { label = 533; break; } else { label = 534; break; }
    case 533: 
      var $932=$need;
      var $inc1428=((($932)+(1))|0);
      $need=$inc1428;
      label = 534; break;
    case 534: 
      var $933=$flags;
      var $and1430=$933 & 32;
      var $tobool1431=(($and1430)|(0))!=0;
      if ($tobool1431) { label = 535; break; } else { label = 537; break; }
    case 535: 
      var $934=$need;
      var $935=$width;
      var $cmp1433=(($934)|(0)) < (($935)|(0));
      if ($cmp1433) { label = 536; break; } else { label = 537; break; }
    case 536: 
      var $936=$width;
      $need=$936;
      label = 537; break;
    case 537: 
      label = 538; break;
    case 538: 
      label = 539; break;
    case 539: 
      var $937=$blen;
      var $938=$need;
      var $add1439=((($938)+(1))|0);
      var $add1440=((($937)+($add1439))|0);
      var $939=$bsiz;
      var $cmp1441=(($add1440)|(0)) >= (($939)|(0));
      if ($cmp1441) { label = 540; break; } else { label = 541; break; }
    case 540: 
      var $940=$bsiz;
      var $mul1444=($940<<1);
      $bsiz=$mul1444;
      label = 539; break;
    case 541: 
      var $941=$mrb_addr;
      var $942=$bsiz;
      _mrb_str_resize($tmp1446, $941, $result, $942);
      var $value1447=(($result)|0);
      var $p1448=$value1447;
      var $943=HEAP32[(($p1448)>>2)];
      var $944=$943;
      var $ptr1449=(($944+20)|0);
      var $945=HEAP32[(($ptr1449)>>2)];
      $buf=$945;
      label = 542; break;
    case 542: 
      var $946=$blen;
      var $947=$buf;
      var $arrayidx1451=(($947+$946)|0);
      var $948=$need;
      var $add1452=((($948)+(1))|0);
      var $949=$need;
      var $call1453=_snprintf($arrayidx1451, $add1452, ((102624)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$949,HEAP32[(((tempInt)+(4))>>2)]=((102312)|0),tempInt));
      var $950=$flags;
      var $and1454=$950 & 2;
      var $tobool1455=(($and1454)|(0))!=0;
      if ($tobool1455) { label = 543; break; } else { label = 553; break; }
    case 543: 
      var $951=$fval;
      var $call1457=___fpclassifyf($951);
      var $cmp1458=(($call1457)|(0))==0;
      if ($cmp1458) { label = 546; break; } else { label = 544; break; }
    case 544: 
      var $952=$fval;
      var $cmp1461=$952 < 0;
      if ($cmp1461) { label = 545; break; } else { label = 546; break; }
    case 545: 
      var $953=$blen;
      var $inc1464=((($953)+(1))|0);
      $blen=$inc1464;
      var $954=$buf;
      var $arrayidx1465=(($954+$953)|0);
      HEAP8[($arrayidx1465)]=45;
      label = 552; break;
    case 546: 
      var $955=$flags;
      var $and1467=$955 & 4;
      var $tobool1468=(($and1467)|(0))!=0;
      if ($tobool1468) { label = 547; break; } else { label = 548; break; }
    case 547: 
      var $956=$blen;
      var $inc1470=((($956)+(1))|0);
      $blen=$inc1470;
      var $957=$buf;
      var $arrayidx1471=(($957+$956)|0);
      HEAP8[($arrayidx1471)]=43;
      label = 551; break;
    case 548: 
      var $958=$flags;
      var $and1473=$958 & 16;
      var $tobool1474=(($and1473)|(0))!=0;
      if ($tobool1474) { label = 549; break; } else { label = 550; break; }
    case 549: 
      var $959=$blen;
      var $inc1476=((($959)+(1))|0);
      $blen=$inc1476;
      label = 550; break;
    case 550: 
      label = 551; break;
    case 551: 
      label = 552; break;
    case 552: 
      var $960=$blen;
      var $961=$buf;
      var $arrayidx1480=(($961+$960)|0);
      var $962=$expr;
      assert(3 % 1 === 0);HEAP8[($arrayidx1480)]=HEAP8[($962)];HEAP8[((($arrayidx1480)+(1))|0)]=HEAP8[((($962)+(1))|0)];HEAP8[((($arrayidx1480)+(2))|0)]=HEAP8[((($962)+(2))|0)];
      label = 564; break;
    case 553: 
      var $963=$fval;
      var $call1482=___fpclassifyf($963);
      var $cmp1483=(($call1482)|(0))==0;
      if ($cmp1483) { label = 556; break; } else { label = 554; break; }
    case 554: 
      var $964=$fval;
      var $cmp1486=$964 < 0;
      if ($cmp1486) { label = 555; break; } else { label = 556; break; }
    case 555: 
      var $965=$blen;
      var $966=$need;
      var $add1489=((($965)+($966))|0);
      var $sub1490=((($add1489)-(3))|0);
      var $sub1491=((($sub1490)-(1))|0);
      var $967=$buf;
      var $arrayidx1492=(($967+$sub1491)|0);
      HEAP8[($arrayidx1492)]=45;
      label = 563; break;
    case 556: 
      var $968=$flags;
      var $and1494=$968 & 4;
      var $tobool1495=(($and1494)|(0))!=0;
      if ($tobool1495) { label = 557; break; } else { label = 558; break; }
    case 557: 
      var $969=$blen;
      var $970=$need;
      var $add1497=((($969)+($970))|0);
      var $sub1498=((($add1497)-(3))|0);
      var $sub1499=((($sub1498)-(1))|0);
      var $971=$buf;
      var $arrayidx1500=(($971+$sub1499)|0);
      HEAP8[($arrayidx1500)]=43;
      label = 562; break;
    case 558: 
      var $972=$flags;
      var $and1502=$972 & 16;
      var $tobool1503=(($and1502)|(0))!=0;
      if ($tobool1503) { label = 559; break; } else { label = 561; break; }
    case 559: 
      var $973=$need;
      var $974=$width;
      var $cmp1505=(($973)|(0)) > (($974)|(0));
      if ($cmp1505) { label = 560; break; } else { label = 561; break; }
    case 560: 
      var $975=$blen;
      var $inc1508=((($975)+(1))|0);
      $blen=$inc1508;
      label = 561; break;
    case 561: 
      label = 562; break;
    case 562: 
      label = 563; break;
    case 563: 
      var $976=$blen;
      var $977=$need;
      var $add1512=((($976)+($977))|0);
      var $sub1513=((($add1512)-(3))|0);
      var $978=$buf;
      var $arrayidx1514=(($978+$sub1513)|0);
      var $979=$expr;
      assert(3 % 1 === 0);HEAP8[($arrayidx1514)]=HEAP8[($979)];HEAP8[((($arrayidx1514)+(1))|0)]=HEAP8[((($979)+(1))|0)];HEAP8[((($arrayidx1514)+(2))|0)]=HEAP8[((($979)+(2))|0)];
      label = 564; break;
    case 564: 
      var $980=$blen;
      var $981=$buf;
      var $arrayidx1516=(($981+$980)|0);
      var $call1517=_strlen($arrayidx1516);
      var $982=$blen;
      var $add1518=((($982)+($call1517))|0);
      $blen=$add1518;
      label = 582; break;
    case 565: 
      var $arraydecay1520=(($fbuf1398)|0);
      var $983=$p;
      var $984=HEAP8[($983)];
      var $conv1521=(($984 << 24) >> 24);
      var $985=$flags;
      var $986=$width;
      var $987=$prec;
      _fmt_setup($arraydecay1520, 32, $conv1521, $985, $986, $987);
      $need=0;
      var $988=$p;
      var $989=HEAP8[($988)];
      var $conv1522=(($989 << 24) >> 24);
      var $cmp1523=(($conv1522)|(0))!=101;
      if ($cmp1523) { label = 566; break; } else { label = 570; break; }
    case 566: 
      var $990=$p;
      var $991=HEAP8[($990)];
      var $conv1526=(($991 << 24) >> 24);
      var $cmp1527=(($conv1526)|(0))!=69;
      if ($cmp1527) { label = 567; break; } else { label = 570; break; }
    case 567: 
      HEAP32[(($i1395)>>2)]=-2147483648;
      var $992=$fval;
      var $call1530=_frexp($992, $i1395);
      var $993=HEAP32[(($i1395)>>2)];
      var $cmp1531=(($993)|(0)) > 0;
      if ($cmp1531) { label = 568; break; } else { label = 569; break; }
    case 568: 
      var $994=HEAP32[(($i1395)>>2)];
      var $mul1534=((($994)*(146))&-1);
      var $div1535=((((($mul1534)|(0)))/(485))&-1);
      var $add1536=((($div1535)+(1))|0);
      $need=$add1536;
      label = 569; break;
    case 569: 
      label = 570; break;
    case 570: 
      var $995=$flags;
      var $and1539=$995 & 64;
      var $tobool1540=(($and1539)|(0))!=0;
      if ($tobool1540) { label = 571; break; } else { label = 572; break; }
    case 571: 
      var $996=$prec;
      var $cond1544 = $996;label = 573; break;
    case 572: 
      var $cond1544 = 6;label = 573; break;
    case 573: 
      var $cond1544;
      var $997=$need;
      var $add1545=((($997)+($cond1544))|0);
      $need=$add1545;
      var $998=$flags;
      var $and1546=$998 & 32;
      var $tobool1547=(($and1546)|(0))!=0;
      if ($tobool1547) { label = 574; break; } else { label = 576; break; }
    case 574: 
      var $999=$need;
      var $1000=$width;
      var $cmp1549=(($999)|(0)) < (($1000)|(0));
      if ($cmp1549) { label = 575; break; } else { label = 576; break; }
    case 575: 
      var $1001=$width;
      $need=$1001;
      label = 576; break;
    case 576: 
      var $1002=$need;
      var $add1553=((($1002)+(20))|0);
      $need=$add1553;
      label = 577; break;
    case 577: 
      label = 578; break;
    case 578: 
      var $1003=$blen;
      var $1004=$need;
      var $add1556=((($1003)+($1004))|0);
      var $1005=$bsiz;
      var $cmp1557=(($add1556)|(0)) >= (($1005)|(0));
      if ($cmp1557) { label = 579; break; } else { label = 580; break; }
    case 579: 
      var $1006=$bsiz;
      var $mul1560=($1006<<1);
      $bsiz=$mul1560;
      label = 578; break;
    case 580: 
      var $1007=$mrb_addr;
      var $1008=$bsiz;
      _mrb_str_resize($tmp1562, $1007, $result, $1008);
      var $value1563=(($result)|0);
      var $p1564=$value1563;
      var $1009=HEAP32[(($p1564)>>2)];
      var $1010=$1009;
      var $ptr1565=(($1010+20)|0);
      var $1011=HEAP32[(($ptr1565)>>2)];
      $buf=$1011;
      label = 581; break;
    case 581: 
      var $1012=$blen;
      var $1013=$buf;
      var $arrayidx1567=(($1013+$1012)|0);
      var $1014=$need;
      var $arraydecay1568=(($fbuf1398)|0);
      var $1015=$fval;
      var $call1569=_snprintf($arrayidx1567, $1014, $arraydecay1568, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$1015,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      $n=$call1569;
      var $1016=$n;
      var $1017=$blen;
      var $add1570=((($1017)+($1016))|0);
      $blen=$add1570;
      label = 582; break;
    case 582: 
      $flags=0;
      label = 583; break;
    case 583: 
      var $1018=$p;
      var $incdec_ptr1573=(($1018+1)|0);
      $p=$incdec_ptr1573;
      label = 3; break;
    case 584: 
      label = 585; break;
    case 585: 
      var $1019=$mrb_addr;
      var $1020=$blen;
      _mrb_str_resize($tmp1575, $1019, $result, $1020);
      var $1021=$agg_result;
      var $1022=$result;
      assert(12 % 1 === 0);HEAP32[(($1021)>>2)]=HEAP32[(($1022)>>2)];HEAP32[((($1021)+(4))>>2)]=HEAP32[((($1022)+(4))>>2)];HEAP32[((($1021)+(8))>>2)]=HEAP32[((($1022)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _sign_bits($base, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $base_addr;
      var $p_addr;
      var $c;
      $base_addr=$base;
      $p_addr=$p;
      var $0=$base_addr;
      if ((($0)|(0))==16) {
        label = 3; break;
      }
      else if ((($0)|(0))==8) {
        label = 7; break;
      }
      else if ((($0)|(0))==2) {
        label = 8; break;
      }
      else {
      label = 9; break;
      }
    case 3: 
      var $1=$p_addr;
      var $2=HEAP8[($1)];
      var $conv=(($2 << 24) >> 24);
      var $cmp=(($conv)|(0))==88;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $c=70;
      label = 6; break;
    case 5: 
      $c=102;
      label = 6; break;
    case 6: 
      label = 10; break;
    case 7: 
      $c=55;
      label = 10; break;
    case 8: 
      $c=49;
      label = 10; break;
    case 9: 
      $c=46;
      label = 10; break;
    case 10: 
      var $3=$c;
      return $3;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_undef_value1718($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=5;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value1719($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _get_hash($agg_result, $mrb, $hash, $argc, $argv) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $hash_addr;
      var $argc_addr;
      var $argv_addr;
      var $tmp=__stackBase__;
      var $tmp4=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      $hash_addr=$hash;
      $argc_addr=$argc;
      $argv_addr=$argv;
      var $0=$hash_addr;
      var $tt=(($0+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==5;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$hash_addr;
      var $3=$agg_result;
      var $4=$2;
      assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
      label = 10; break;
    case 4: 
      var $5=$argc_addr;
      var $cmp1=(($5)|(0))!=2;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$mrb_addr;
      var $7=$mrb_addr;
      var $call=_mrb_class_get($7, ((112612)|0));
      _mrb_raise($6, $call, ((100976)|0));
      label = 6; break;
    case 6: 
      var $8=$mrb_addr;
      var $9=$argv_addr;
      var $arrayidx=(($9+12)|0);
      _mrb_check_convert_type($tmp4, $8, $arrayidx, 15, ((100724)|0), ((100464)|0));
      var $10=$tmp;
      var $11=$tmp4;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      var $tt5=(($tmp+8)|0);
      var $12=HEAP32[(($tt5)>>2)];
      var $cmp6=(($12)|(0))==0;
      if ($cmp6) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $value=(($tmp)|0);
      var $i=$value;
      var $13=HEAP32[(($i)>>2)];
      var $tobool=(($13)|(0))!=0;
      if ($tobool) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $14=$mrb_addr;
      var $15=$mrb_addr;
      var $call8=_mrb_class_get($15, ((112612)|0));
      _mrb_raise($14, $call8, ((100976)|0));
      label = 9; break;
    case 9: 
      var $16=$hash_addr;
      var $17=$16;
      var $18=$tmp;
      assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
      var $19=$agg_result;
      var $20=$16;
      assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_symbol_value1720($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=4;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $sym=$value;
      HEAP16[(($sym)>>1)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fix2binstr($agg_result, $mrb, $x, $base) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 76)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $base_addr;
      var $buf=__stackBase__;
      var $b;
      var $num;
      var $val;
      var $d;
      var $agg_tmp=(__stackBase__)+(64);
      $mrb_addr=$mrb;
      $base_addr=$base;
      var $arraydecay=(($buf)|0);
      var $add_ptr=(($arraydecay+64)|0);
      $b=$add_ptr;
      var $value=(($x)|0);
      var $i=$value;
      var $0=HEAP32[(($i)>>2)];
      $num=$0;
      var $1=$num;
      $val=$1;
      var $2=$base_addr;
      var $cmp=(($2)|(0))!=2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call=_mrb_class_get($4, ((112612)|0));
      var $5=$base_addr;
      _mrb_fixnum_value1719($agg_tmp, $5);
      _mrb_raisef($3, $call, ((101264)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      label = 4; break;
    case 4: 
      var $6=$val;
      var $cmp1=(($6)>>>(0)) >= 1024;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$val;
      var $and=$7 & 1023;
      $val=$and;
      label = 6; break;
    case 6: 
      var $8=$val;
      var $cmp4=(($8)|(0))==0;
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $9=$mrb_addr;
      _mrb_str_new($agg_result, $9, ((105080)|0), 1);
      label = 22; break;
    case 8: 
      var $10=$b;
      var $incdec_ptr=((($10)-(1))|0);
      $b=$incdec_ptr;
      HEAP8[($incdec_ptr)]=0;
      label = 9; break;
    case 9: 
      var $11=$val;
      var $12=$base_addr;
      var $rem=((($11)>>>(0)))%((($12)>>>(0)));
      var $arrayidx=((79868+$rem)|0);
      var $13=HEAP8[($arrayidx)];
      var $14=$b;
      var $incdec_ptr7=((($14)-(1))|0);
      $b=$incdec_ptr7;
      HEAP8[($incdec_ptr7)]=$13;
      label = 10; break;
    case 10: 
      var $15=$base_addr;
      var $16=$val;
      var $div=Math.floor(((($16)>>>(0)))/((($15)>>>(0))));
      $val=$div;
      var $tobool=(($div)|(0))!=0;
      if ($tobool) { label = 9; break; } else { label = 11; break; }
    case 11: 
      var $17=$num;
      var $cmp8=(($17)|(0)) < 0;
      if ($cmp8) { label = 12; break; } else { label = 21; break; }
    case 12: 
      var $18=$b;
      var $19=$base_addr;
      var $call10=_remove_sign_bits($18, $19);
      $b=$call10;
      var $20=$base_addr;
      if ((($20)|(0))==16) {
        label = 13; break;
      }
      else if ((($20)|(0))==8) {
        label = 14; break;
      }
      else if ((($20)|(0))==2) {
        label = 15; break;
      }
      else {
      label = 16; break;
      }
    case 13: 
      $d=102;
      label = 17; break;
    case 14: 
      $d=55;
      label = 17; break;
    case 15: 
      $d=49;
      label = 17; break;
    case 16: 
      $d=0;
      label = 17; break;
    case 17: 
      var $21=$d;
      var $conv=(($21 << 24) >> 24);
      var $tobool13=(($conv)|(0))!=0;
      if ($tobool13) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $22=$b;
      var $23=HEAP8[($22)];
      var $conv14=(($23 << 24) >> 24);
      var $24=$d;
      var $conv15=(($24 << 24) >> 24);
      var $cmp16=(($conv14)|(0))!=(($conv15)|(0));
      if ($cmp16) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $25=$d;
      var $26=$b;
      var $incdec_ptr19=((($26)-(1))|0);
      $b=$incdec_ptr19;
      HEAP8[($incdec_ptr19)]=$25;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $27=$mrb_addr;
      var $28=$b;
      _mrb_str_new_cstr($agg_result, $27, $28);
      label = 22; break;
    case 22: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _remove_sign_bits($str, $base) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $str_addr;
      var $base_addr;
      var $t;
      $str_addr=$str;
      $base_addr=$base;
      var $0=$str_addr;
      $t=$0;
      var $1=$base_addr;
      var $cmp=(($1)|(0))==16;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      label = 4; break;
    case 4: 
      var $2=$t;
      var $3=HEAP8[($2)];
      var $conv=(($3 << 24) >> 24);
      var $cmp1=(($conv)|(0))==102;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=$t;
      var $incdec_ptr=(($4+1)|0);
      $t=$incdec_ptr;
      label = 4; break;
    case 6: 
      label = 19; break;
    case 7: 
      var $5=$base_addr;
      var $cmp3=(($5)|(0))==8;
      if ($cmp3) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $6=$t;
      var $call=_strlen($6);
      var $mul=((($call)*(3))&-1);
      var $rem=((($mul)>>>(0)))%(32);
      var $shr=-8 >> (($rem)|(0));
      var $and=$shr & 7;
      var $7=$t;
      var $8=HEAP8[($7)];
      var $conv6=(($8 << 24) >> 24);
      var $or=$conv6 | $and;
      var $conv7=(($or) & 255);
      HEAP8[($7)]=$conv7;
      label = 9; break;
    case 9: 
      var $9=$t;
      var $10=HEAP8[($9)];
      var $conv9=(($10 << 24) >> 24);
      var $cmp10=(($conv9)|(0))==55;
      if ($cmp10) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $11=$t;
      var $incdec_ptr13=(($11+1)|0);
      $t=$incdec_ptr13;
      label = 9; break;
    case 11: 
      label = 18; break;
    case 12: 
      var $12=$base_addr;
      var $cmp16=(($12)|(0))==2;
      if ($cmp16) { label = 13; break; } else { label = 17; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $13=$t;
      var $14=HEAP8[($13)];
      var $conv20=(($14 << 24) >> 24);
      var $cmp21=(($conv20)|(0))==49;
      if ($cmp21) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $15=$t;
      var $incdec_ptr24=(($15+1)|0);
      $t=$incdec_ptr24;
      label = 14; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $16=$t;
      return $16;
    default: assert(0, "bad label: " + label);
  }
}
function _fmt_setup($buf, $size, $c, $flags, $width, $prec) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $buf_addr;
      var $size_addr;
      var $c_addr;
      var $flags_addr;
      var $width_addr;
      var $prec_addr;
      var $end;
      var $n;
      $buf_addr=$buf;
      $size_addr=$size;
      $c_addr=$c;
      $flags_addr=$flags;
      $width_addr=$width;
      $prec_addr=$prec;
      var $0=$buf_addr;
      var $1=$size_addr;
      var $add_ptr=(($0+$1)|0);
      $end=$add_ptr;
      var $2=$buf_addr;
      var $incdec_ptr=(($2+1)|0);
      $buf_addr=$incdec_ptr;
      HEAP8[($2)]=37;
      var $3=$flags_addr;
      var $and=$3 & 1;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$buf_addr;
      var $incdec_ptr1=(($4+1)|0);
      $buf_addr=$incdec_ptr1;
      HEAP8[($4)]=35;
      label = 4; break;
    case 4: 
      var $5=$flags_addr;
      var $and2=$5 & 4;
      var $tobool3=(($and2)|(0))!=0;
      if ($tobool3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$buf_addr;
      var $incdec_ptr5=(($6+1)|0);
      $buf_addr=$incdec_ptr5;
      HEAP8[($6)]=43;
      label = 6; break;
    case 6: 
      var $7=$flags_addr;
      var $and7=$7 & 2;
      var $tobool8=(($and7)|(0))!=0;
      if ($tobool8) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $8=$buf_addr;
      var $incdec_ptr10=(($8+1)|0);
      $buf_addr=$incdec_ptr10;
      HEAP8[($8)]=45;
      label = 8; break;
    case 8: 
      var $9=$flags_addr;
      var $and12=$9 & 8;
      var $tobool13=(($and12)|(0))!=0;
      if ($tobool13) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $10=$buf_addr;
      var $incdec_ptr15=(($10+1)|0);
      $buf_addr=$incdec_ptr15;
      HEAP8[($10)]=48;
      label = 10; break;
    case 10: 
      var $11=$flags_addr;
      var $and17=$11 & 16;
      var $tobool18=(($and17)|(0))!=0;
      if ($tobool18) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $12=$buf_addr;
      var $incdec_ptr20=(($12+1)|0);
      $buf_addr=$incdec_ptr20;
      HEAP8[($12)]=32;
      label = 12; break;
    case 12: 
      var $13=$flags_addr;
      var $and22=$13 & 32;
      var $tobool23=(($and22)|(0))!=0;
      if ($tobool23) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $14=$buf_addr;
      var $15=$end;
      var $16=$buf_addr;
      var $sub_ptr_lhs_cast=$15;
      var $sub_ptr_rhs_cast=$16;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $17=$width_addr;
      var $call=_snprintf($14, $sub_ptr_sub, ((101988)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$17,tempInt));
      $n=$call;
      var $18=$n;
      var $19=$buf_addr;
      var $add_ptr25=(($19+$18)|0);
      $buf_addr=$add_ptr25;
      label = 14; break;
    case 14: 
      var $20=$flags_addr;
      var $and27=$20 & 64;
      var $tobool28=(($and27)|(0))!=0;
      if ($tobool28) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $21=$buf_addr;
      var $22=$end;
      var $23=$buf_addr;
      var $sub_ptr_lhs_cast30=$22;
      var $sub_ptr_rhs_cast31=$23;
      var $sub_ptr_sub32=((($sub_ptr_lhs_cast30)-($sub_ptr_rhs_cast31))|0);
      var $24=$prec_addr;
      var $call33=_snprintf($21, $sub_ptr_sub32, ((101744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$24,tempInt));
      $n=$call33;
      var $25=$n;
      var $26=$buf_addr;
      var $add_ptr34=(($26+$25)|0);
      $buf_addr=$add_ptr34;
      label = 16; break;
    case 16: 
      var $27=$c_addr;
      var $conv=(($27) & 255);
      var $28=$buf_addr;
      var $incdec_ptr36=(($28+1)|0);
      $buf_addr=$incdec_ptr36;
      HEAP8[($28)]=$conv;
      var $29=$buf_addr;
      HEAP8[($29)]=0;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value1723($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_string_ext_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_mruby_string_ext_gem_final($0);
  return;
}
function _mrb_mruby_string_ext_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $s;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $string_class=(($0+60)|0);
  var $1=HEAP32[(($string_class)>>2)];
  $s=$1;
  var $2=$mrb_addr;
  var $3=$s;
  _mrb_define_method($2, $3, ((109756)|0), 578, 0);
  var $4=$mrb_addr;
  var $5=$s;
  _mrb_define_method($4, $5, ((112588)|0), 524, 262144);
  var $6=$mrb_addr;
  var $7=$s;
  _mrb_define_method($6, $7, ((107708)|0), 588, 0);
  var $8=$mrb_addr;
  var $9=$s;
  _mrb_define_method($8, $9, ((104148)|0), 266, 0);
  var $10=$mrb_addr;
  var $11=$s;
  _mrb_define_method($10, $11, ((101444)|0), 134, 262144);
  var $12=$mrb_addr;
  var $13=$s;
  _mrb_define_method($12, $13, ((98860)|0), 134, 262144);
  var $14=$mrb_addr;
  var $15=$s;
  _mrb_define_method($14, $15, ((96844)|0), 252, 4096);
  var $16=$mrb_addr;
  var $17=$s;
  _mrb_define_method($16, $17, ((95628)|0), 698, 4096);
  return;
}
function _mrb_str_getbyte($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $pos=__stackBase__;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((113608)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pos,tempInt));
      var $1=HEAP32[(($pos)>>2)];
      var $cmp=(($1)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $value=(($str)|0);
      var $p=$value;
      var $2=HEAP32[(($p)>>2)];
      var $3=$2;
      var $len=(($3+12)|0);
      var $4=HEAP32[(($len)>>2)];
      var $5=HEAP32[(($pos)>>2)];
      var $add=((($5)+($4))|0);
      HEAP32[(($pos)>>2)]=$add;
      label = 4; break;
    case 4: 
      var $6=HEAP32[(($pos)>>2)];
      var $cmp1=(($6)|(0)) < 0;
      if ($cmp1) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $value2=(($str)|0);
      var $p3=$value2;
      var $7=HEAP32[(($p3)>>2)];
      var $8=$7;
      var $len4=(($8+12)|0);
      var $9=HEAP32[(($len4)>>2)];
      var $10=HEAP32[(($pos)>>2)];
      var $cmp5=(($9)|(0)) <= (($10)|(0));
      if ($cmp5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      _mrb_nil_value1743($agg_result);
      label = 8; break;
    case 7: 
      var $11=HEAP32[(($pos)>>2)];
      var $value8=(($str)|0);
      var $p9=$value8;
      var $12=HEAP32[(($p9)>>2)];
      var $13=$12;
      var $ptr=(($13+20)|0);
      var $14=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($14+$11)|0);
      var $15=HEAP8[($arrayidx)];
      var $conv=(($15)&(255));
      _mrb_fixnum_value1744($agg_result, $conv);
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_swapcase_bang($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $p;
      var $pend;
      var $modify;
      var $s;
      $mrb_addr=$mrb;
      $modify=0;
      var $value=(($str)|0);
      var $p1=$value;
      var $0=HEAP32[(($p1)>>2)];
      var $1=$0;
      $s=$1;
      var $2=$mrb_addr;
      var $3=$s;
      _mrb_str_modify($2, $3);
      var $4=$s;
      var $ptr=(($4+20)|0);
      var $5=HEAP32[(($ptr)>>2)];
      $p=$5;
      var $6=$s;
      var $ptr2=(($6+20)|0);
      var $7=HEAP32[(($ptr2)>>2)];
      var $8=$s;
      var $len=(($8+12)|0);
      var $9=HEAP32[(($len)>>2)];
      var $add_ptr=(($7+$9)|0);
      $pend=$add_ptr;
      label = 3; break;
    case 3: 
      var $10=$p;
      var $11=$pend;
      var $cmp=(($10)>>>(0)) < (($11)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $12=$p;
      var $13=HEAP8[($12)];
      var $conv=(($13)&(255));
      var $call=_isupper($conv);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $14=$p;
      var $15=HEAP8[($14)];
      var $conv3=(($15)&(255));
      var $call4=_tolower($conv3);
      var $conv5=(($call4) & 255);
      var $16=$p;
      HEAP8[($16)]=$conv5;
      $modify=1;
      label = 9; break;
    case 6: 
      var $17=$p;
      var $18=HEAP8[($17)];
      var $conv6=(($18)&(255));
      var $call7=_islower($conv6);
      var $tobool8=(($call7)|(0))!=0;
      if ($tobool8) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $19=$p;
      var $20=HEAP8[($19)];
      var $conv10=(($20)&(255));
      var $call11=_toupper($conv10);
      var $conv12=(($call11) & 255);
      var $21=$p;
      HEAP8[($21)]=$conv12;
      $modify=1;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $22=$p;
      var $incdec_ptr=(($22+1)|0);
      $p=$incdec_ptr;
      label = 3; break;
    case 10: 
      var $23=$modify;
      var $tobool14=(($23)|(0))!=0;
      if ($tobool14) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $24=$agg_result;
      var $25=$str;
      assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
      label = 13; break;
    case 12: 
      _mrb_nil_value1743($agg_result);
      label = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_swapcase($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $str=__stackBase__;
  var $tmp=(__stackBase__)+(12);
  var $tmp1=(__stackBase__)+(24);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_str_dup($tmp, $0, $self);
  var $1=$str;
  var $2=$tmp;
  assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
  var $3=$mrb_addr;
  _mrb_str_swapcase_bang($tmp1, $3, $str);
  var $4=$agg_result;
  var $5=$str;
  assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_concat2($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $str=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((93820)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$str,tempInt));
  var $1=$mrb_addr;
  _mrb_str_concat($1, $self, $str);
  var $2=$agg_result;
  var $3=$self;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_start_with($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argv=__stackBase__;
      var $argc=(__stackBase__)+(4);
      var $i;
      var $len_l;
      var $len_r;
      var $len_cmp;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((94668)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      $i=0;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $2=HEAP32[(($argc)>>2)];
      var $cmp=(($1)|(0)) < (($2)|(0));
      if ($cmp) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $value=(($self)|0);
      var $p=$value;
      var $3=HEAP32[(($p)>>2)];
      var $4=$3;
      var $len=(($4+12)|0);
      var $5=HEAP32[(($len)>>2)];
      $len_l=$5;
      var $6=$i;
      var $7=HEAP32[(($argv)>>2)];
      var $arrayidx=(($7+((($6)*(12))&-1))|0);
      var $value1=(($arrayidx)|0);
      var $p2=$value1;
      var $8=HEAP32[(($p2)>>2)];
      var $9=$8;
      var $len3=(($9+12)|0);
      var $10=HEAP32[(($len3)>>2)];
      $len_r=$10;
      var $11=$len_l;
      var $12=$len_r;
      var $cmp4=(($11)>>>(0)) > (($12)>>>(0));
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $13=$len_r;
      var $cond = $13;label = 7; break;
    case 6: 
      var $14=$len_l;
      var $cond = $14;label = 7; break;
    case 7: 
      var $cond;
      $len_cmp=$cond;
      var $value5=(($self)|0);
      var $p6=$value5;
      var $15=HEAP32[(($p6)>>2)];
      var $16=$15;
      var $ptr=(($16+20)|0);
      var $17=HEAP32[(($ptr)>>2)];
      var $18=$i;
      var $19=HEAP32[(($argv)>>2)];
      var $arrayidx7=(($19+((($18)*(12))&-1))|0);
      var $value8=(($arrayidx7)|0);
      var $p9=$value8;
      var $20=HEAP32[(($p9)>>2)];
      var $21=$20;
      var $ptr10=(($21+20)|0);
      var $22=HEAP32[(($ptr10)>>2)];
      var $23=$len_cmp;
      var $call11=_memcmp($17, $22, $23);
      var $cmp12=(($call11)|(0))==0;
      if ($cmp12) { label = 8; break; } else { label = 9; break; }
    case 8: 
      _mrb_true_value1741($agg_result);
      label = 12; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $24=$i;
      var $inc=((($24)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 11: 
      _mrb_false_value1742($agg_result);
      label = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_string_ext_gem_init($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ai;
      var $tmp=__stackBase__;
      var $agg_tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_gc_arena_save($0);
      $ai=$call;
      var $1=$mrb_addr;
      _mrb_mruby_string_ext_gem_init($1);
      var $2=$mrb_addr;
      _mrb_load_irep($tmp, $2, ((81664)|0));
      var $3=$mrb_addr;
      var $exc=(($3+16)|0);
      var $4=HEAP32[(($exc)>>2)];
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$mrb_addr;
      _mrb_print_backtrace($5);
      var $6=$mrb_addr;
      var $7=$mrb_addr;
      var $exc1=(($7+16)|0);
      var $8=HEAP32[(($exc1)>>2)];
      var $9=$8;
      _mrb_obj_value1723($agg_tmp, $9);
      _mrb_p($6, $agg_tmp);
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $10=$mrb_addr;
      var $11=$ai;
      _mrb_gc_arena_restore($10, $11);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_string_ext_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  return;
}
function _mrb_is_local_id($id) {
  var label = 0;
  var $id_addr;
  $id_addr=$id;
  var $0=$id_addr;
  var $conv=(($0 << 16) >> 16);
  return $conv;
}
function _mrb_is_const_id($id) {
  var label = 0;
  var $id_addr;
  $id_addr=$id;
  var $0=$id_addr;
  var $conv=(($0 << 16) >> 16);
  return $conv;
}
function _mrb_str_end_with($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argv=__stackBase__;
      var $argc=(__stackBase__)+(4);
      var $i;
      var $len_l;
      var $len_r;
      var $len_cmp;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((94668)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      $i=0;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $2=HEAP32[(($argc)>>2)];
      var $cmp=(($1)|(0)) < (($2)|(0));
      if ($cmp) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $value=(($self)|0);
      var $p=$value;
      var $3=HEAP32[(($p)>>2)];
      var $4=$3;
      var $len=(($4+12)|0);
      var $5=HEAP32[(($len)>>2)];
      $len_l=$5;
      var $6=$i;
      var $7=HEAP32[(($argv)>>2)];
      var $arrayidx=(($7+((($6)*(12))&-1))|0);
      var $value1=(($arrayidx)|0);
      var $p2=$value1;
      var $8=HEAP32[(($p2)>>2)];
      var $9=$8;
      var $len3=(($9+12)|0);
      var $10=HEAP32[(($len3)>>2)];
      $len_r=$10;
      var $11=$len_l;
      var $12=$len_r;
      var $cmp4=(($11)>>>(0)) > (($12)>>>(0));
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $13=$len_r;
      var $cond = $13;label = 7; break;
    case 6: 
      var $14=$len_l;
      var $cond = $14;label = 7; break;
    case 7: 
      var $cond;
      $len_cmp=$cond;
      var $value5=(($self)|0);
      var $p6=$value5;
      var $15=HEAP32[(($p6)>>2)];
      var $16=$15;
      var $ptr=(($16+20)|0);
      var $17=HEAP32[(($ptr)>>2)];
      var $18=$len_l;
      var $19=$len_cmp;
      var $sub=((($18)-($19))|0);
      var $add_ptr=(($17+$sub)|0);
      var $20=$i;
      var $21=HEAP32[(($argv)>>2)];
      var $arrayidx7=(($21+((($20)*(12))&-1))|0);
      var $value8=(($arrayidx7)|0);
      var $p9=$value8;
      var $22=HEAP32[(($p9)>>2)];
      var $23=$22;
      var $ptr10=(($23+20)|0);
      var $24=HEAP32[(($ptr10)>>2)];
      var $25=$len_r;
      var $26=$len_cmp;
      var $sub11=((($25)-($26))|0);
      var $add_ptr12=(($24+$sub11)|0);
      var $27=$len_cmp;
      var $call13=_memcmp($add_ptr, $add_ptr12, $27);
      var $cmp14=(($call13)|(0))==0;
      if ($cmp14) { label = 8; break; } else { label = 9; break; }
    case 8: 
      _mrb_true_value1741($agg_result);
      label = 12; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $28=$i;
      var $inc=((($28)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 11: 
      _mrb_false_value1742($agg_result);
      label = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_true_value1741($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=2;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_false_value1742($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1743($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value1744($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value1747($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_struct_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_mruby_struct_gem_final($0);
  return;
}
function _struct_ivar_get($agg_result, $mrb, $c, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $c; $c = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($c)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($c)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($c)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $id_addr;
      var $kclass;
      var $sclass;
      var $ans=__stackBase__;
      var $tmp=(__stackBase__)+(12);
      var $tmp6=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      $id_addr=$id;
      var $0=$mrb_addr;
      var $call=_struct_class($0);
      $sclass=$call;
      label = 3; break;
    case 3: 
      var $1=$mrb_addr;
      var $2=$id_addr;
      _mrb_iv_get($tmp, $1, $c, $2);
      var $3=$ans;
      var $4=$tmp;
      assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
      var $tt=(($ans+8)|0);
      var $5=HEAP32[(($tt)>>2)];
      var $cmp=(($5)|(0))==0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $value=(($ans)|0);
      var $i=$value;
      var $6=HEAP32[(($i)>>2)];
      var $tobool=(($6)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$agg_result;
      var $8=$ans;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      label = 10; break;
    case 6: 
      var $value1=(($c)|0);
      var $p=$value1;
      var $9=HEAP32[(($p)>>2)];
      var $10=$9;
      var $super=(($10+20)|0);
      var $11=HEAP32[(($super)>>2)];
      $kclass=$11;
      var $12=$kclass;
      var $cmp2=(($12)|(0))==0;
      if ($cmp2) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $13=$kclass;
      var $14=$sclass;
      var $cmp3=(($13)|(0))==(($14)|(0));
      if ($cmp3) { label = 8; break; } else { label = 9; break; }
    case 8: 
      _mrb_nil_value1795($agg_result);
      label = 10; break;
    case 9: 
      var $15=$kclass;
      var $16=$15;
      _mrb_obj_value1792($tmp6, $16);
      var $17=$c;
      var $18=$tmp6;
      assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
      label = 3; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_s_members($agg_result, $mrb, $klass) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $klass; $klass = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($klass)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($klass)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($klass)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $members=__stackBase__;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $1=$mrb_addr;
      var $call=_mrb_intern2($1, ((109728)|0), 11);
      _struct_ivar_get($members, $0, $klass, $call);
      var $tt=(($members+8)|0);
      var $2=HEAP32[(($tt)>>2)];
      var $cmp=(($2)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $value=(($members)|0);
      var $i=$value;
      var $3=HEAP32[(($i)>>2)];
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call1=_mrb_class_get($5, ((112576)|0));
      _mrb_raise($4, $call1, ((107684)|0));
      label = 5; break;
    case 5: 
      var $tt2=(($members+8)|0);
      var $6=HEAP32[(($tt2)>>2)];
      var $cmp3=(($6)|(0))==14;
      if ($cmp3) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $7=$mrb_addr;
      var $8=$mrb_addr;
      var $call5=_mrb_class_get($8, ((112576)|0));
      _mrb_raise($7, $call5, ((104128)|0));
      label = 7; break;
    case 7: 
      var $9=$agg_result;
      var $10=$members;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_members($agg_result, $mrb, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $members=__stackBase__;
      var $agg_tmp=(__stackBase__)+(12);
      var $agg_tmp9=(__stackBase__)+(24);
      var $agg_tmp13=(__stackBase__)+(36);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $1=$mrb_addr;
      var $call=_mrb_obj_class($1, $s);
      var $2=$call;
      _mrb_obj_value1792($agg_tmp, $2);
      _mrb_struct_s_members($members, $0, $agg_tmp);
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call1=_mrb_obj_class($4, $s);
      var $call2=_mrb_class_name($3, $call1);
      var $call3=_strcmp($call2, ((101436)|0));
      var $tobool=(($call3)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 3; break; }
    case 3: 
      var $value=(($s)|0);
      var $p=$value;
      var $5=HEAP32[(($p)>>2)];
      var $6=$5;
      var $len=(($6+12)|0);
      var $7=HEAP32[(($len)>>2)];
      var $value4=(($members)|0);
      var $p5=$value4;
      var $8=HEAP32[(($p5)>>2)];
      var $9=$8;
      var $len6=(($9+12)|0);
      var $10=HEAP32[(($len6)>>2)];
      var $cmp=(($7)|(0))!=(($10)|(0));
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $11=$mrb_addr;
      var $12=$mrb_addr;
      var $call8=_mrb_class_get($12, ((112576)|0));
      var $value10=(($members)|0);
      var $p11=$value10;
      var $13=HEAP32[(($p11)>>2)];
      var $14=$13;
      var $len12=(($14+12)|0);
      var $15=HEAP32[(($len12)>>2)];
      _mrb_fixnum_value1793($agg_tmp9, $15);
      var $value14=(($s)|0);
      var $p15=$value14;
      var $16=HEAP32[(($p15)>>2)];
      var $17=$16;
      var $len16=(($17+12)|0);
      var $18=HEAP32[(($len16)>>2)];
      _mrb_fixnum_value1793($agg_tmp13, $18);
      _mrb_raisef($11, $call8, ((98816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp9)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp9)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp9)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp13)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp13)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp13)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $19=$agg_result;
      var $20=$members;
      assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value1792($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value1793($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_getmember($agg_result, $mrb, $obj, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $id_addr;
      var $members=__stackBase__;
      var $slot=(__stackBase__)+(12);
      var $ptr;
      var $ptr_members;
      var $i;
      var $len;
      var $tmp=(__stackBase__)+(24);
      var $tmp5=(__stackBase__)+(36);
      var $agg_tmp=(__stackBase__)+(48);
      $mrb_addr=$mrb;
      $id_addr=$id;
      var $value=(($obj)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $ptr1=(($1+20)|0);
      var $2=HEAP32[(($ptr1)>>2)];
      $ptr=$2;
      var $3=$mrb_addr;
      _mrb_struct_members($tmp, $3, $obj);
      var $4=$members;
      var $5=$tmp;
      assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
      var $value2=(($members)|0);
      var $p3=$value2;
      var $6=HEAP32[(($p3)>>2)];
      var $7=$6;
      var $ptr4=(($7+20)|0);
      var $8=HEAP32[(($ptr4)>>2)];
      $ptr_members=$8;
      var $9=$id_addr;
      _mrb_symbol_value1794($tmp5, $9);
      var $10=$slot;
      var $11=$tmp5;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      var $value6=(($members)|0);
      var $p7=$value6;
      var $12=HEAP32[(($p7)>>2)];
      var $13=$12;
      var $len8=(($13+12)|0);
      var $14=HEAP32[(($len8)>>2)];
      $len=$14;
      $i=0;
      label = 3; break;
    case 3: 
      var $15=$i;
      var $16=$len;
      var $cmp=(($15)|(0)) < (($16)|(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $17=$mrb_addr;
      var $18=$i;
      var $19=$ptr_members;
      var $arrayidx=(($19+((($18)*(12))&-1))|0);
      var $call=_mrb_obj_equal($17, $arrayidx, $slot);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $20=$i;
      var $21=$ptr;
      var $arrayidx9=(($21+((($20)*(12))&-1))|0);
      var $22=$agg_result;
      var $23=$arrayidx9;
      assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $24=$i;
      var $inc=((($24)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      var $25=$mrb_addr;
      var $26=$mrb_addr;
      var $call10=_mrb_class_get($26, ((96832)|0));
      var $27=$mrb_addr;
      var $28=$id_addr;
      _mrb_sym2str($agg_tmp, $27, $28);
      _mrb_raisef($25, $call10, ((95604)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      _mrb_nil_value1795($agg_result);
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_symbol_value1794($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=4;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $sym=$value;
      HEAP16[(($sym)>>1)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1795($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_id_attrset($mrb, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $id_addr;
  var $name;
  var $buf;
  var $len=__stackBase__;
  var $mid;
  $mrb_addr=$mrb;
  $id_addr=$id;
  var $0=$mrb_addr;
  var $1=$id_addr;
  var $call=_mrb_sym2name_len($0, $1, $len);
  $name=$call;
  var $2=$mrb_addr;
  var $3=HEAP32[(($len)>>2)];
  var $add=((($3)+(2))|0);
  var $call1=_mrb_malloc($2, $add);
  $buf=$call1;
  var $4=$buf;
  var $5=$name;
  var $6=HEAP32[(($len)>>2)];
  assert($6 % 1 === 0);_memcpy($4, $5, $6);
  var $7=HEAP32[(($len)>>2)];
  var $8=$buf;
  var $arrayidx=(($8+$7)|0);
  HEAP8[($arrayidx)]=61;
  var $9=HEAP32[(($len)>>2)];
  var $add2=((($9)+(1))|0);
  var $10=$buf;
  var $arrayidx3=(($10+$add2)|0);
  HEAP8[($arrayidx3)]=0;
  var $11=$mrb_addr;
  var $12=$buf;
  var $13=HEAP32[(($len)>>2)];
  var $add4=((($13)+(1))|0);
  var $call5=_mrb_intern2($11, $12, $add4);
  $mid=$call5;
  var $14=$mrb_addr;
  var $15=$buf;
  _mrb_free($14, $15);
  var $16=$mid;
  STACKTOP = __stackBase__;
  return $16;
}
function _make_struct($agg_result, $mrb, $name, $members, $klass) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $name; $name = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($name)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($name)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($name)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $members; $members = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($members)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($members)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($members)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $klass_addr;
      var $nstr=__stackBase__;
      var $ptr_members;
      var $id;
      var $i;
      var $len;
      var $c;
      var $tmp=(__stackBase__)+(12);
      var $tmp13=(__stackBase__)+(24);
      var $id23;
      $mrb_addr=$mrb;
      $klass_addr=$klass;
      var $tt=(($name+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $value=(($name)|0);
      var $i1=$value;
      var $1=HEAP32[(($i1)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$mrb_addr;
      var $3=$klass_addr;
      var $call=_mrb_class_new($2, $3);
      $c=$call;
      label = 10; break;
    case 5: 
      var $4=$mrb_addr;
      _mrb_str_to_str($tmp, $4, $name);
      var $5=$name;
      var $6=$tmp;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      var $7=$mrb_addr;
      var $call2=_mrb_obj_to_sym($7, $name);
      $id=$call2;
      var $8=$id;
      var $call3=_mrb_is_const_id($8);
      var $tobool4=(($call3)|(0))!=0;
      if ($tobool4) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $9=$mrb_addr;
      var $10=$id;
      _mrb_name_error($9, $10, ((102588)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($name)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($name)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($name)+(8))>>2)],tempInt));
      label = 7; break;
    case 7: 
      var $11=$mrb_addr;
      var $12=$klass_addr;
      var $13=$id;
      var $call6=_mrb_const_defined_at($11, $12, $13);
      var $tobool7=(($call6)|(0))!=0;
      if ($tobool7) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $14=$mrb_addr;
      _mrb_warn($14, ((102280)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($name)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($name)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($name)+(8))>>2)],tempInt));
      label = 9; break;
    case 9: 
      var $15=$mrb_addr;
      var $16=$klass_addr;
      var $value10=(($name)|0);
      var $p=$value10;
      var $17=HEAP32[(($p)>>2)];
      var $18=$17;
      var $ptr=(($18+20)|0);
      var $19=HEAP32[(($ptr)>>2)];
      var $20=$klass_addr;
      var $call11=_mrb_define_class_under($15, $16, $19, $20);
      $c=$call11;
      label = 10; break;
    case 10: 
      var $21=$c;
      var $22=$21;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 >>> 11;
      var $bf_clear=$24 & 2097151;
      var $and=$bf_clear & -256;
      var $or=$and | 14;
      var $25=$c;
      var $bf_value=$or & 2097151;
      var $26=$25;
      var $27=$bf_value & 2097151;
      var $28=$27 << 11;
      var $29=HEAP32[(($26)>>2)];
      var $30=$29 & 2047;
      var $31=$30 | $28;
      HEAP32[(($26)>>2)]=$31;
      var $32=$c;
      var $33=$32;
      _mrb_obj_value1792($tmp13, $33);
      var $34=$nstr;
      var $35=$tmp13;
      assert(12 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];
      var $36=$mrb_addr;
      var $37=$mrb_addr;
      var $call14=_mrb_intern2($37, ((109728)|0), 11);
      _mrb_iv_set($36, $nstr, $call14, $members);
      var $38=$mrb_addr;
      var $39=$c;
      _mrb_define_class_method($38, $39, ((110540)|0), 606, 4096);
      var $40=$mrb_addr;
      var $41=$c;
      _mrb_define_class_method($40, $41, ((109784)|0), 606, 4096);
      var $42=$mrb_addr;
      var $43=$c;
      _mrb_define_class_method($42, $43, ((108872)|0), 518, 0);
      var $value15=(($members)|0);
      var $p16=$value15;
      var $44=HEAP32[(($p16)>>2)];
      var $45=$44;
      var $ptr17=(($45+20)|0);
      var $46=HEAP32[(($ptr17)>>2)];
      $ptr_members=$46;
      var $value18=(($members)|0);
      var $p19=$value18;
      var $47=HEAP32[(($p19)>>2)];
      var $48=$47;
      var $len20=(($48+12)|0);
      var $49=HEAP32[(($len20)>>2)];
      $len=$49;
      $i=0;
      label = 11; break;
    case 11: 
      var $50=$i;
      var $51=$len;
      var $cmp21=(($50)|(0)) < (($51)|(0));
      if ($cmp21) { label = 12; break; } else { label = 20; break; }
    case 12: 
      var $52=$i;
      var $53=$ptr_members;
      var $arrayidx=(($53+((($52)*(12))&-1))|0);
      var $value24=(($arrayidx)|0);
      var $sym=$value24;
      var $54=HEAP16[(($sym)>>1)];
      $id23=$54;
      var $55=$id23;
      var $call25=_mrb_is_local_id($55);
      var $tobool26=(($call25)|(0))!=0;
      if ($tobool26) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $56=$id23;
      var $call27=_mrb_is_const_id($56);
      var $tobool28=(($call27)|(0))!=0;
      if ($tobool28) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $57=$i;
      var $cmp30=(($57)|(0)) < 10;
      if ($cmp30) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $58=$mrb_addr;
      var $59=$c;
      var $60=$id23;
      var $61=$i;
      var $arrayidx32=((59868+($61<<2))|0);
      var $62=HEAP32[(($arrayidx32)>>2)];
      _mrb_define_method_id($58, $59, $60, $62, 0);
      label = 17; break;
    case 16: 
      var $63=$mrb_addr;
      var $64=$c;
      var $65=$id23;
      _mrb_define_method_id($63, $64, $65, 218, 0);
      label = 17; break;
    case 17: 
      var $66=$mrb_addr;
      var $67=$c;
      var $68=$mrb_addr;
      var $69=$id23;
      var $call35=_mrb_id_attrset($68, $69);
      _mrb_define_method_id($66, $67, $call35, 320, 262144);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $70=$i;
      var $inc=((($70)+(1))|0);
      $i=$inc;
      label = 11; break;
    case 20: 
      var $71=$agg_result;
      var $72=$nstr;
      assert(12 % 1 === 0);HEAP32[(($71)>>2)]=HEAP32[(($72)>>2)];HEAP32[((($71)+(4))>>2)]=HEAP32[((($72)+(4))>>2)];HEAP32[((($71)+(8))>>2)]=HEAP32[((($72)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _struct_class($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_class_get($0, ((101436)|0));
  return $call;
}
function _GENERATED_TMP_mrb_mruby_struct_gem_init($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ai;
      var $tmp=__stackBase__;
      var $agg_tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_gc_arena_save($0);
      $ai=$call;
      var $1=$mrb_addr;
      _mrb_mruby_struct_gem_init($1);
      var $2=$mrb_addr;
      _mrb_load_irep($tmp, $2, ((80960)|0));
      var $3=$mrb_addr;
      var $exc=(($3+16)|0);
      var $4=HEAP32[(($exc)>>2)];
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$mrb_addr;
      _mrb_print_backtrace($5);
      var $6=$mrb_addr;
      var $7=$mrb_addr;
      var $exc1=(($7+16)|0);
      var $8=HEAP32[(($exc1)>>2)];
      var $9=$8;
      _mrb_obj_value1747($agg_tmp, $9);
      _mrb_p($6, $agg_tmp);
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $10=$mrb_addr;
      var $11=$ai;
      _mrb_gc_arena_restore($10, $11);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_initialize_withArg($agg_result, $mrb, $argc, $argv, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $argc_addr;
      var $argv_addr;
      var $klass;
      var $i;
      var $n;
      var $agg_tmp=__stackBase__;
      $mrb_addr=$mrb;
      $argc_addr=$argc;
      $argv_addr=$argv;
      var $0=$mrb_addr;
      var $call=_mrb_obj_class($0, $self);
      $klass=$call;
      var $1=$mrb_addr;
      var $2=$klass;
      var $call1=_num_members($1, $2);
      $n=$call1;
      var $3=$n;
      var $4=$argc_addr;
      var $cmp=(($3)|(0)) < (($4)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$mrb_addr;
      var $6=$mrb_addr;
      var $call2=_mrb_class_get($6, ((103296)|0));
      _mrb_raise($5, $call2, ((103060)|0));
      label = 4; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $8=$argc_addr;
      var $cmp3=(($7)|(0)) < (($8)|(0));
      if ($cmp3) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $9=$mrb_addr;
      var $10=$i;
      var $11=$i;
      var $12=$argv_addr;
      var $arrayidx=(($12+((($11)*(12))&-1))|0);
      _mrb_ary_set($9, $self, $10, $arrayidx);
      label = 7; break;
    case 7: 
      var $13=$i;
      var $inc=((($13)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $14=$argc_addr;
      $i=$14;
      label = 9; break;
    case 9: 
      var $15=$i;
      var $16=$n;
      var $cmp5=(($15)|(0)) < (($16)|(0));
      if ($cmp5) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $17=$mrb_addr;
      var $18=$i;
      _mrb_nil_value1795($agg_tmp);
      _mrb_ary_set($17, $self, $18, $agg_tmp);
      label = 11; break;
    case 11: 
      var $19=$i;
      var $inc8=((($19)+(1))|0);
      $i=$inc8;
      label = 9; break;
    case 12: 
      var $20=$agg_result;
      var $21=$self;
      assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_init_copy($agg_result, $mrb, $copy) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $copy; $copy = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($copy)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($copy)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($copy)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $s=__stackBase__;
      var $i;
      var $len;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((94664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$s,tempInt));
      var $1=$mrb_addr;
      var $call1=_mrb_obj_equal($1, $copy, $s);
      var $tobool=(($call1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$agg_result;
      var $3=$copy;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      label = 15; break;
    case 4: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call2=_mrb_obj_class($5, $copy);
      var $call3=_mrb_obj_is_instance_of($4, $s, $call2);
      var $tobool4=(($call3)|(0))!=0;
      if ($tobool4) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $6=$mrb_addr;
      var $7=$mrb_addr;
      var $call6=_mrb_class_get($7, ((112576)|0));
      _mrb_raise($6, $call6, ((93764)|0));
      label = 6; break;
    case 6: 
      var $tt=(($s+8)|0);
      var $8=HEAP32[(($tt)>>2)];
      var $cmp=(($8)|(0))==14;
      if ($cmp) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $9=$mrb_addr;
      var $10=$mrb_addr;
      var $call9=_mrb_class_get($10, ((112576)|0));
      _mrb_raise($9, $call9, ((104128)|0));
      label = 8; break;
    case 8: 
      var $value=(($copy)|0);
      var $p=$value;
      var $11=HEAP32[(($p)>>2)];
      var $12=$11;
      var $len11=(($12+12)|0);
      var $13=HEAP32[(($len11)>>2)];
      var $value12=(($s)|0);
      var $p13=$value12;
      var $14=HEAP32[(($p13)>>2)];
      var $15=$14;
      var $len14=(($15+12)|0);
      var $16=HEAP32[(($len14)>>2)];
      var $cmp15=(($13)|(0))!=(($16)|(0));
      if ($cmp15) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $17=$mrb_addr;
      var $18=$mrb_addr;
      var $call17=_mrb_class_get($18, ((112576)|0));
      _mrb_raise($17, $call17, ((113556)|0));
      label = 10; break;
    case 10: 
      var $value19=(($copy)|0);
      var $p20=$value19;
      var $19=HEAP32[(($p20)>>2)];
      var $20=$19;
      var $len21=(($20+12)|0);
      var $21=HEAP32[(($len21)>>2)];
      $len=$21;
      $i=0;
      label = 11; break;
    case 11: 
      var $22=$i;
      var $23=$len;
      var $cmp22=(($22)|(0)) < (($23)|(0));
      if ($cmp22) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $24=$mrb_addr;
      var $25=$i;
      var $26=$i;
      var $value23=(($s)|0);
      var $p24=$value23;
      var $27=HEAP32[(($p24)>>2)];
      var $28=$27;
      var $ptr=(($28+20)|0);
      var $29=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($29+((($26)*(12))&-1))|0);
      _mrb_ary_set($24, $copy, $25, $arrayidx);
      label = 13; break;
    case 13: 
      var $30=$i;
      var $inc=((($30)+(1))|0);
      $i=$inc;
      label = 11; break;
    case 14: 
      var $31=$agg_result;
      var $32=$copy;
      assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
      label = 15; break;
    case 15: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_aref_n($agg_result, $mrb, $s, $idx) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $idx; $idx = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($idx)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($idx)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($idx)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $i;
      var $sym=__stackBase__;
      var $agg_tmp=(__stackBase__)+(12);
      var $agg_tmp21=(__stackBase__)+(24);
      var $agg_tmp32=(__stackBase__)+(36);
      var $agg_tmp33=(__stackBase__)+(48);
      $mrb_addr=$mrb;
      var $tt=(($idx+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)|(0))==16;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $1=$mrb_addr;
      _mrb_check_intern_str($sym, $1, $idx);
      var $tt1=(($sym+8)|0);
      var $2=HEAP32[(($tt1)>>2)];
      var $cmp2=(($2)|(0))==0;
      if ($cmp2) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $value=(($sym)|0);
      var $i3=$value;
      var $3=HEAP32[(($i3)>>2)];
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call=_mrb_class_get($5, ((96832)|0));
      _mrb_raisef($4, $call, ((113000)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($idx)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($idx)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($idx)+(8))>>2)],tempInt));
      label = 6; break;
    case 6: 
      var $6=$idx;
      var $7=$sym;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      label = 7; break;
    case 7: 
      var $tt6=(($idx+8)|0);
      var $8=HEAP32[(($tt6)>>2)];
      var $cmp7=(($8)|(0))==4;
      if ($cmp7) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $9=$mrb_addr;
      var $value9=(($idx)|0);
      var $sym10=$value9;
      var $10=HEAP16[(($sym10)>>1)];
      _mrb_struct_aref_id($agg_result, $9, $s, $10);
      label = 16; break;
    case 9: 
      var $value12=(($idx)|0);
      var $i13=$value12;
      var $11=HEAP32[(($i13)>>2)];
      $i=$11;
      var $12=$i;
      var $cmp14=(($12)|(0)) < 0;
      if ($cmp14) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $value16=(($s)|0);
      var $p=$value16;
      var $13=HEAP32[(($p)>>2)];
      var $14=$13;
      var $len=(($14+12)|0);
      var $15=HEAP32[(($len)>>2)];
      var $16=$i;
      var $add=((($15)+($16))|0);
      $i=$add;
      label = 11; break;
    case 11: 
      var $17=$i;
      var $cmp18=(($17)|(0)) < 0;
      if ($cmp18) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $18=$mrb_addr;
      var $19=$mrb_addr;
      var $call20=_mrb_class_get($19, ((96832)|0));
      var $20=$i;
      _mrb_fixnum_value1793($agg_tmp, $20);
      var $value22=(($s)|0);
      var $p23=$value22;
      var $21=HEAP32[(($p23)>>2)];
      var $22=$21;
      var $len24=(($22+12)|0);
      var $23=HEAP32[(($len24)>>2)];
      _mrb_fixnum_value1793($agg_tmp21, $23);
      _mrb_raisef($18, $call20, ((112072)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp21)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp21)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp21)+(8))>>2)],tempInt));
      label = 13; break;
    case 13: 
      var $value26=(($s)|0);
      var $p27=$value26;
      var $24=HEAP32[(($p27)>>2)];
      var $25=$24;
      var $len28=(($25+12)|0);
      var $26=HEAP32[(($len28)>>2)];
      var $27=$i;
      var $cmp29=(($26)|(0)) <= (($27)|(0));
      if ($cmp29) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $28=$mrb_addr;
      var $29=$mrb_addr;
      var $call31=_mrb_class_get($29, ((96832)|0));
      var $30=$i;
      _mrb_fixnum_value1793($agg_tmp32, $30);
      var $value34=(($s)|0);
      var $p35=$value34;
      var $31=HEAP32[(($p35)>>2)];
      var $32=$31;
      var $len36=(($32+12)|0);
      var $33=HEAP32[(($len36)>>2)];
      _mrb_fixnum_value1793($agg_tmp33, $33);
      _mrb_raisef($28, $call31, ((111496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp32)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp32)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp32)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp33)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp33)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp33)+(8))>>2)],tempInt));
      label = 15; break;
    case 15: 
      var $34=$i;
      var $value38=(($s)|0);
      var $p39=$value38;
      var $35=HEAP32[(($p39)>>2)];
      var $36=$35;
      var $ptr=(($36+20)|0);
      var $37=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($37+((($34)*(12))&-1))|0);
      var $38=$agg_result;
      var $39=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];HEAP32[((($38)+(8))>>2)]=HEAP32[((($39)+(8))>>2)];
      label = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_aref_id($agg_result, $mrb, $s, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $id_addr;
      var $ptr;
      var $members=__stackBase__;
      var $ptr_members;
      var $i;
      var $len;
      var $tmp=(__stackBase__)+(12);
      var $agg_tmp=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      $id_addr=$id;
      var $value=(($s)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $ptr1=(($1+20)|0);
      var $2=HEAP32[(($ptr1)>>2)];
      $ptr=$2;
      var $3=$mrb_addr;
      _mrb_struct_members($tmp, $3, $s);
      var $4=$members;
      var $5=$tmp;
      assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
      var $value2=(($members)|0);
      var $p3=$value2;
      var $6=HEAP32[(($p3)>>2)];
      var $7=$6;
      var $ptr4=(($7+20)|0);
      var $8=HEAP32[(($ptr4)>>2)];
      $ptr_members=$8;
      var $value5=(($members)|0);
      var $p6=$value5;
      var $9=HEAP32[(($p6)>>2)];
      var $10=$9;
      var $len7=(($10+12)|0);
      var $11=HEAP32[(($len7)>>2)];
      $len=$11;
      $i=0;
      label = 3; break;
    case 3: 
      var $12=$i;
      var $13=$len;
      var $cmp=(($12)|(0)) < (($13)|(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $14=$i;
      var $15=$ptr_members;
      var $arrayidx=(($15+((($14)*(12))&-1))|0);
      var $value8=(($arrayidx)|0);
      var $sym=$value8;
      var $16=HEAP16[(($sym)>>1)];
      var $conv=(($16 << 16) >> 16);
      var $17=$id_addr;
      var $conv9=(($17 << 16) >> 16);
      var $cmp10=(($conv)|(0))==(($conv9)|(0));
      if ($cmp10) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $18=$i;
      var $19=$ptr;
      var $arrayidx12=(($19+((($18)*(12))&-1))|0);
      var $20=$agg_result;
      var $21=$arrayidx12;
      assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $22=$i;
      var $inc=((($22)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      var $23=$mrb_addr;
      var $24=$mrb_addr;
      var $call=_mrb_class_get($24, ((96832)|0));
      var $25=$mrb_addr;
      var $26=$id_addr;
      _mrb_sym2str($agg_tmp, $25, $26);
      _mrb_raisef($23, $call, ((113000)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      _mrb_nil_value1795($agg_result);
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_aref($agg_result, $mrb, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $idx=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((94664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$idx,tempInt));
  var $1=$mrb_addr;
  _mrb_struct_aref_n($agg_result, $1, $s, $idx);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_aset($agg_result, $mrb, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $i;
      var $idx=__stackBase__;
      var $val=(__stackBase__)+(12);
      var $agg_tmp=(__stackBase__)+(24);
      var $agg_tmp12=(__stackBase__)+(36);
      var $agg_tmp23=(__stackBase__)+(48);
      var $agg_tmp24=(__stackBase__)+(60);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((111056)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$idx,HEAP32[(((tempInt)+(4))>>2)]=$val,tempInt));
      var $tt=(($idx+8)|0);
      var $1=HEAP32[(($tt)>>2)];
      var $cmp=(($1)|(0))==16;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $tt1=(($idx+8)|0);
      var $2=HEAP32[(($tt1)>>2)];
      var $cmp2=(($2)|(0))==4;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$mrb_addr;
      var $4=$mrb_addr;
      var $call3=_mrb_obj_to_sym($4, $idx);
      _mrb_struct_aset_id($agg_result, $3, $s, $call3, $val);
      label = 12; break;
    case 5: 
      var $value=(($idx)|0);
      var $i4=$value;
      var $5=HEAP32[(($i4)>>2)];
      $i=$5;
      var $6=$i;
      var $cmp5=(($6)|(0)) < 0;
      if ($cmp5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $value7=(($s)|0);
      var $p=$value7;
      var $7=HEAP32[(($p)>>2)];
      var $8=$7;
      var $len=(($8+12)|0);
      var $9=HEAP32[(($len)>>2)];
      var $10=$i;
      var $add=((($9)+($10))|0);
      $i=$add;
      label = 7; break;
    case 7: 
      var $11=$i;
      var $cmp9=(($11)|(0)) < 0;
      if ($cmp9) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $12=$mrb_addr;
      var $13=$mrb_addr;
      var $call11=_mrb_class_get($13, ((96832)|0));
      var $14=$i;
      _mrb_fixnum_value1793($agg_tmp, $14);
      var $value13=(($s)|0);
      var $p14=$value13;
      var $15=HEAP32[(($p14)>>2)];
      var $16=$15;
      var $len15=(($16+12)|0);
      var $17=HEAP32[(($len15)>>2)];
      _mrb_fixnum_value1793($agg_tmp12, $17);
      _mrb_raisef($12, $call11, ((112072)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp12)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp12)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp12)+(8))>>2)],tempInt));
      label = 9; break;
    case 9: 
      var $value17=(($s)|0);
      var $p18=$value17;
      var $18=HEAP32[(($p18)>>2)];
      var $19=$18;
      var $len19=(($19+12)|0);
      var $20=HEAP32[(($len19)>>2)];
      var $21=$i;
      var $cmp20=(($20)|(0)) <= (($21)|(0));
      if ($cmp20) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $22=$mrb_addr;
      var $23=$mrb_addr;
      var $call22=_mrb_class_get($23, ((96832)|0));
      var $24=$i;
      _mrb_fixnum_value1793($agg_tmp23, $24);
      var $value25=(($s)|0);
      var $p26=$value25;
      var $25=HEAP32[(($p26)>>2)];
      var $26=$25;
      var $len27=(($26+12)|0);
      var $27=HEAP32[(($len27)>>2)];
      _mrb_fixnum_value1793($agg_tmp24, $27);
      _mrb_raisef($22, $call22, ((111496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp23)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp23)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp23)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp24)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp24)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp24)+(8))>>2)],tempInt));
      label = 11; break;
    case 11: 
      var $28=$i;
      var $value29=(($s)|0);
      var $p30=$value29;
      var $29=HEAP32[(($p30)>>2)];
      var $30=$29;
      var $ptr=(($30+20)|0);
      var $31=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($31+((($28)*(12))&-1))|0);
      var $32=$arrayidx;
      var $33=$val;
      assert(12 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];
      var $34=$agg_result;
      var $35=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];
      label = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_aset_id($agg_result, $mrb, $s, $id, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $id_addr;
      var $members=__stackBase__;
      var $ptr;
      var $ptr_members;
      var $i;
      var $len;
      var $tmp=(__stackBase__)+(12);
      var $agg_tmp=(__stackBase__)+(24);
      var $agg_tmp5=(__stackBase__)+(36);
      var $agg_tmp24=(__stackBase__)+(48);
      $mrb_addr=$mrb;
      $id_addr=$id;
      var $0=$mrb_addr;
      _mrb_struct_members($tmp, $0, $s);
      var $1=$members;
      var $2=$tmp;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      var $value=(($members)|0);
      var $p=$value;
      var $3=HEAP32[(($p)>>2)];
      var $4=$3;
      var $len1=(($4+12)|0);
      var $5=HEAP32[(($len1)>>2)];
      $len=$5;
      var $value2=(($s)|0);
      var $p3=$value2;
      var $6=HEAP32[(($p3)>>2)];
      var $7=$6;
      var $len4=(($7+12)|0);
      var $8=HEAP32[(($len4)>>2)];
      var $9=$len;
      var $cmp=(($8)|(0))!=(($9)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$mrb_addr;
      var $11=$mrb_addr;
      var $call=_mrb_class_get($11, ((112576)|0));
      var $12=$len;
      _mrb_fixnum_value1793($agg_tmp, $12);
      var $value6=(($s)|0);
      var $p7=$value6;
      var $13=HEAP32[(($p7)>>2)];
      var $14=$13;
      var $len8=(($14+12)|0);
      var $15=HEAP32[(($len8)>>2)];
      _mrb_fixnum_value1793($agg_tmp5, $15);
      _mrb_raisef($10, $call, ((98816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp5)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp5)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp5)+(8))>>2)],tempInt));
      label = 4; break;
    case 4: 
      var $value9=(($s)|0);
      var $p10=$value9;
      var $16=HEAP32[(($p10)>>2)];
      var $17=$16;
      var $ptr11=(($17+20)|0);
      var $18=HEAP32[(($ptr11)>>2)];
      $ptr=$18;
      var $value12=(($members)|0);
      var $p13=$value12;
      var $19=HEAP32[(($p13)>>2)];
      var $20=$19;
      var $ptr14=(($20+20)|0);
      var $21=HEAP32[(($ptr14)>>2)];
      $ptr_members=$21;
      $i=0;
      label = 5; break;
    case 5: 
      var $22=$i;
      var $23=$len;
      var $cmp15=(($22)|(0)) < (($23)|(0));
      if ($cmp15) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $24=$i;
      var $25=$ptr_members;
      var $arrayidx=(($25+((($24)*(12))&-1))|0);
      var $value16=(($arrayidx)|0);
      var $sym=$value16;
      var $26=HEAP16[(($sym)>>1)];
      var $conv=(($26 << 16) >> 16);
      var $27=$id_addr;
      var $conv17=(($27 << 16) >> 16);
      var $cmp18=(($conv)|(0))==(($conv17)|(0));
      if ($cmp18) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $28=$i;
      var $29=$ptr;
      var $arrayidx21=(($29+((($28)*(12))&-1))|0);
      var $30=$arrayidx21;
      var $31=$val;
      assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
      var $32=$agg_result;
      var $33=$val;
      assert(12 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];
      label = 11; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $34=$i;
      var $inc=((($34)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 10: 
      var $35=$mrb_addr;
      var $36=$mrb_addr;
      var $call23=_mrb_class_get($36, ((96832)|0));
      var $37=$mrb_addr;
      var $38=$id_addr;
      _mrb_sym2str($agg_tmp24, $37, $38);
      _mrb_raisef($35, $call23, ((113000)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp24)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp24)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp24)+(8))>>2)],tempInt));
      var $39=$agg_result;
      var $40=$val;
      assert(12 % 1 === 0);HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];HEAP32[((($39)+(8))>>2)]=HEAP32[((($40)+(8))>>2)];
      label = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_struct_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $st;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $object_class=(($1+44)|0);
  var $2=HEAP32[(($object_class)>>2)];
  var $call=_mrb_define_class($0, ((101436)|0), $2);
  $st=$call;
  var $3=$mrb_addr;
  var $4=$st;
  _mrb_define_class_method($3, $4, ((110540)|0), 512, 4096);
  var $5=$mrb_addr;
  var $6=$st;
  _mrb_define_method($5, $6, ((110116)|0), 682, 262144);
  var $7=$mrb_addr;
  var $8=$st;
  _mrb_define_method($7, $8, ((109784)|0), 6, 262144);
  var $9=$mrb_addr;
  var $10=$st;
  _mrb_define_method($9, $10, ((109340)|0), 632, 524288);
  var $11=$mrb_addr;
  var $12=$st;
  _mrb_define_method($11, $12, ((108872)|0), 636, 0);
  var $13=$mrb_addr;
  var $14=$st;
  _mrb_define_method($13, $14, ((108324)|0), 232, 4096);
  var $15=$mrb_addr;
  var $16=$st;
  _mrb_define_method($15, $16, ((107972)|0), 28, 262144);
  var $17=$mrb_addr;
  var $18=$st;
  _mrb_define_method($17, $18, ((107472)|0), 370, 0);
  var $19=$mrb_addr;
  var $20=$st;
  _mrb_define_alias($19, $20, ((107216)|0), ((107472)|0));
  var $21=$mrb_addr;
  var $22=$st;
  _mrb_define_method($21, $22, ((106800)|0), 212, 262144);
  return;
}
function _mrb_struct_s_def($agg_result, $mrb, $klass) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 176)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $klass; $klass = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($klass)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($klass)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($klass)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $name=__stackBase__;
      var $rest=(__stackBase__)+(12);
      var $pargv;
      var $argcnt;
      var $i;
      var $b=(__stackBase__)+(24);
      var $st=(__stackBase__)+(36);
      var $id;
      var $argv=(__stackBase__)+(48);
      var $argc=(__stackBase__)+(52);
      var $tmp=(__stackBase__)+(56);
      var $tmp1=(__stackBase__)+(68);
      var $tmp2=(__stackBase__)+(80);
      var $tmp18=(__stackBase__)+(92);
      var $tmp19=(__stackBase__)+(104);
      var $tmp33=(__stackBase__)+(116);
      var $tmp36=(__stackBase__)+(128);
      var $tmp48=(__stackBase__)+(140);
      var $tmp52=(__stackBase__)+(152);
      var $tmp60=(__stackBase__)+(164);
      $mrb_addr=$mrb;
      _mrb_nil_value1795($tmp);
      var $0=$name;
      var $1=$tmp;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      _mrb_nil_value1795($tmp1);
      var $2=$rest;
      var $3=$tmp1;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      var $4=$mrb_addr;
      var $call=_mrb_get_args($4, ((103732)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,HEAP32[(((tempInt)+(8))>>2)]=$b,tempInt));
      var $5=HEAP32[(($argc)>>2)];
      var $cmp=(($5)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$mrb_addr;
      _mrb_ary_new($tmp2, $6);
      var $7=$rest;
      var $8=$tmp2;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      label = 24; break;
    case 4: 
      var $9=HEAP32[(($argc)>>2)];
      var $cmp3=(($9)|(0)) > 0;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $10=HEAP32[(($argv)>>2)];
      var $arrayidx=(($10)|0);
      var $11=$name;
      var $12=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      label = 6; break;
    case 6: 
      var $13=HEAP32[(($argc)>>2)];
      var $cmp5=(($13)|(0)) > 1;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $14=HEAP32[(($argv)>>2)];
      var $arrayidx7=(($14+12)|0);
      var $15=$rest;
      var $16=$arrayidx7;
      assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
      label = 8; break;
    case 8: 
      var $tt=(($rest+8)|0);
      var $17=HEAP32[(($tt)>>2)];
      var $cmp9=(($17)|(0))==14;
      if ($cmp9) { label = 9; break; } else { label = 14; break; }
    case 9: 
      var $tt11=(($name+8)|0);
      var $18=HEAP32[(($tt11)>>2)];
      var $cmp12=(($18)|(0))==0;
      if ($cmp12) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $value=(($name)|0);
      var $i13=$value;
      var $19=HEAP32[(($i13)>>2)];
      var $tobool=(($19)|(0))!=0;
      if ($tobool) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $tt15=(($name+8)|0);
      var $20=HEAP32[(($tt15)>>2)];
      var $cmp16=(($20)|(0))==4;
      if ($cmp16) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $21=$mrb_addr;
      _mrb_ary_unshift($tmp18, $21, $rest, $name);
      _mrb_nil_value1795($tmp19);
      var $22=$name;
      var $23=$tmp19;
      assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
      label = 13; break;
    case 13: 
      label = 19; break;
    case 14: 
      var $24=HEAP32[(($argv)>>2)];
      var $arrayidx22=(($24+12)|0);
      $pargv=$arrayidx22;
      var $25=HEAP32[(($argc)>>2)];
      var $sub=((($25)-(1))|0);
      $argcnt=$sub;
      var $tt23=(($name+8)|0);
      var $26=HEAP32[(($tt23)>>2)];
      var $cmp24=(($26)|(0))==0;
      if ($cmp24) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $value26=(($name)|0);
      var $i27=$value26;
      var $27=HEAP32[(($i27)>>2)];
      var $tobool28=(($27)|(0))!=0;
      if ($tobool28) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $tt30=(($name+8)|0);
      var $28=HEAP32[(($tt30)>>2)];
      var $cmp31=(($28)|(0))==4;
      if ($cmp31) { label = 17; break; } else { label = 18; break; }
    case 17: 
      _mrb_nil_value1795($tmp33);
      var $29=$name;
      var $30=$tmp33;
      assert(12 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($29)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];
      var $31=HEAP32[(($argv)>>2)];
      var $arrayidx34=(($31)|0);
      $pargv=$arrayidx34;
      var $32=$argcnt;
      var $inc=((($32)+(1))|0);
      $argcnt=$inc;
      label = 18; break;
    case 18: 
      var $33=$mrb_addr;
      var $34=$argcnt;
      var $35=$pargv;
      _mrb_ary_new_from_values($tmp36, $33, $34, $35);
      var $36=$rest;
      var $37=$tmp36;
      assert(12 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];HEAP32[((($36)+(8))>>2)]=HEAP32[((($37)+(8))>>2)];
      label = 19; break;
    case 19: 
      $i=0;
      label = 20; break;
    case 20: 
      var $38=$i;
      var $value38=(($rest)|0);
      var $p=$value38;
      var $39=HEAP32[(($p)>>2)];
      var $40=$39;
      var $len=(($40+12)|0);
      var $41=HEAP32[(($len)>>2)];
      var $cmp39=(($38)|(0)) < (($41)|(0));
      if ($cmp39) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $42=$mrb_addr;
      var $43=$i;
      var $value40=(($rest)|0);
      var $p41=$value40;
      var $44=HEAP32[(($p41)>>2)];
      var $45=$44;
      var $ptr=(($45+20)|0);
      var $46=HEAP32[(($ptr)>>2)];
      var $arrayidx42=(($46+((($43)*(12))&-1))|0);
      var $call43=_mrb_obj_to_sym($42, $arrayidx42);
      $id=$call43;
      var $47=$i;
      var $value44=(($rest)|0);
      var $p45=$value44;
      var $48=HEAP32[(($p45)>>2)];
      var $49=$48;
      var $ptr46=(($49+20)|0);
      var $50=HEAP32[(($ptr46)>>2)];
      var $arrayidx47=(($50+((($47)*(12))&-1))|0);
      var $51=$id;
      _mrb_symbol_value1794($tmp48, $51);
      var $52=$arrayidx47;
      var $53=$tmp48;
      assert(12 % 1 === 0);HEAP32[(($52)>>2)]=HEAP32[(($53)>>2)];HEAP32[((($52)+(4))>>2)]=HEAP32[((($53)+(4))>>2)];HEAP32[((($52)+(8))>>2)]=HEAP32[((($53)+(8))>>2)];
      label = 22; break;
    case 22: 
      var $54=$i;
      var $inc49=((($54)+(1))|0);
      $i=$inc49;
      label = 20; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $55=$mrb_addr;
      var $56=$mrb_addr;
      var $call51=_struct_class($56);
      _make_struct($tmp52, $55, $name, $rest, $call51);
      var $57=$st;
      var $58=$tmp52;
      assert(12 % 1 === 0);HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];HEAP32[((($57)+(4))>>2)]=HEAP32[((($58)+(4))>>2)];HEAP32[((($57)+(8))>>2)]=HEAP32[((($58)+(8))>>2)];
      var $tt53=(($b+8)|0);
      var $59=HEAP32[(($tt53)>>2)];
      var $cmp54=(($59)|(0))==0;
      if ($cmp54) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $value56=(($b)|0);
      var $i57=$value56;
      var $60=HEAP32[(($i57)>>2)];
      var $tobool58=(($60)|(0))!=0;
      if ($tobool58) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $61=$mrb_addr;
      _mrb_funcall($tmp60, $61, $b, ((103512)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$st,tempInt));
      label = 27; break;
    case 27: 
      var $62=$agg_result;
      var $63=$st;
      assert(12 % 1 === 0);HEAP32[(($62)>>2)]=HEAP32[(($63)>>2)];HEAP32[((($62)+(4))>>2)]=HEAP32[((($63)+(4))>>2)];HEAP32[((($62)+(8))>>2)]=HEAP32[((($63)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_struct_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  return;
}
function _mrb_struct_equal($agg_result, $mrb, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $s2=__stackBase__;
      var $ptr;
      var $ptr2;
      var $i;
      var $len;
      var $equal_p;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((94664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$s2,tempInt));
      var $1=$mrb_addr;
      var $call1=_mrb_obj_equal($1, $s, $s2);
      var $tobool=(($call1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $equal_p=1;
      label = 18; break;
    case 4: 
      var $2=$mrb_addr;
      var $3=$mrb_addr;
      var $call2=_mrb_obj_class($3, $s);
      var $call3=_mrb_class_name($2, $call2);
      var $call4=_strcmp($call3, ((101436)|0));
      var $tobool5=(($call4)|(0))!=0;
      if ($tobool5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=$mrb_addr;
      var $call6=_mrb_obj_class($4, $s);
      var $5=$mrb_addr;
      var $call7=_mrb_obj_class($5, $s2);
      var $cmp=(($call6)|(0))!=(($call7)|(0));
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $equal_p=0;
      label = 17; break;
    case 7: 
      var $value=(($s)|0);
      var $p=$value;
      var $6=HEAP32[(($p)>>2)];
      var $7=$6;
      var $len10=(($7+12)|0);
      var $8=HEAP32[(($len10)>>2)];
      var $value11=(($s2)|0);
      var $p12=$value11;
      var $9=HEAP32[(($p12)>>2)];
      var $10=$9;
      var $len13=(($10+12)|0);
      var $11=HEAP32[(($len13)>>2)];
      var $cmp14=(($8)|(0))!=(($11)|(0));
      if ($cmp14) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $12=$mrb_addr;
      _mrb_bug($12, ((106364)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $equal_p=0;
      label = 16; break;
    case 9: 
      var $value17=(($s)|0);
      var $p18=$value17;
      var $13=HEAP32[(($p18)>>2)];
      var $14=$13;
      var $ptr19=(($14+20)|0);
      var $15=HEAP32[(($ptr19)>>2)];
      $ptr=$15;
      var $value20=(($s2)|0);
      var $p21=$value20;
      var $16=HEAP32[(($p21)>>2)];
      var $17=$16;
      var $ptr22=(($17+20)|0);
      var $18=HEAP32[(($ptr22)>>2)];
      $ptr2=$18;
      var $value23=(($s)|0);
      var $p24=$value23;
      var $19=HEAP32[(($p24)>>2)];
      var $20=$19;
      var $len25=(($20+12)|0);
      var $21=HEAP32[(($len25)>>2)];
      $len=$21;
      $equal_p=1;
      $i=0;
      label = 10; break;
    case 10: 
      var $22=$i;
      var $23=$len;
      var $cmp26=(($22)|(0)) < (($23)|(0));
      if ($cmp26) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $24=$mrb_addr;
      var $25=$i;
      var $26=$ptr;
      var $arrayidx=(($26+((($25)*(12))&-1))|0);
      var $27=$i;
      var $28=$ptr2;
      var $arrayidx27=(($28+((($27)*(12))&-1))|0);
      var $call28=_mrb_equal($24, $arrayidx, $arrayidx27);
      var $tobool29=(($call28)|(0))!=0;
      if ($tobool29) { label = 13; break; } else { label = 12; break; }
    case 12: 
      $equal_p=0;
      label = 15; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $29=$i;
      var $inc=((($29)+(1))|0);
      $i=$inc;
      label = 10; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $30=$equal_p;
      _mrb_bool_value1800($agg_result, $30);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_members_m($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $agg_tmp=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $call=_mrb_obj_class($1, $obj);
  var $2=$call;
  _mrb_obj_value1792($agg_tmp, $2);
  _mrb_struct_s_members_m($agg_result, $0, $agg_tmp);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_initialize_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $argv=__stackBase__;
  var $argc=(__stackBase__)+(4);
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((103924)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
  var $1=$mrb_addr;
  var $2=HEAP32[(($argc)>>2)];
  var $3=HEAP32[(($argv)>>2)];
  _mrb_struct_initialize_withArg($agg_result, $1, $2, $3, $self);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_inspect($agg_result, $mrb, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _inspect_struct($agg_result, $0, $s, 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_eql($agg_result, $mrb, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $s2=__stackBase__;
      var $ptr;
      var $ptr2;
      var $i;
      var $len;
      var $eql_p;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((94664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$s2,tempInt));
      var $1=$mrb_addr;
      var $call1=_mrb_obj_equal($1, $s, $s2);
      var $tobool=(($call1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $eql_p=1;
      label = 18; break;
    case 4: 
      var $2=$mrb_addr;
      var $3=$mrb_addr;
      var $call2=_mrb_obj_class($3, $s2);
      var $call3=_mrb_class_name($2, $call2);
      var $call4=_strcmp($call3, ((101436)|0));
      var $tobool5=(($call4)|(0))!=0;
      if ($tobool5) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $4=$mrb_addr;
      var $call6=_mrb_obj_class($4, $s);
      var $5=$mrb_addr;
      var $call7=_mrb_obj_class($5, $s2);
      var $cmp=(($call6)|(0))!=(($call7)|(0));
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $eql_p=0;
      label = 17; break;
    case 7: 
      var $value=(($s)|0);
      var $p=$value;
      var $6=HEAP32[(($p)>>2)];
      var $7=$6;
      var $len10=(($7+12)|0);
      var $8=HEAP32[(($len10)>>2)];
      var $value11=(($s2)|0);
      var $p12=$value11;
      var $9=HEAP32[(($p12)>>2)];
      var $10=$9;
      var $len13=(($10+12)|0);
      var $11=HEAP32[(($len13)>>2)];
      var $cmp14=(($8)|(0))!=(($11)|(0));
      if ($cmp14) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $12=$mrb_addr;
      _mrb_bug($12, ((106364)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $eql_p=0;
      label = 16; break;
    case 9: 
      var $value17=(($s)|0);
      var $p18=$value17;
      var $13=HEAP32[(($p18)>>2)];
      var $14=$13;
      var $ptr19=(($14+20)|0);
      var $15=HEAP32[(($ptr19)>>2)];
      $ptr=$15;
      var $value20=(($s2)|0);
      var $p21=$value20;
      var $16=HEAP32[(($p21)>>2)];
      var $17=$16;
      var $ptr22=(($17+20)|0);
      var $18=HEAP32[(($ptr22)>>2)];
      $ptr2=$18;
      var $value23=(($s)|0);
      var $p24=$value23;
      var $19=HEAP32[(($p24)>>2)];
      var $20=$19;
      var $len25=(($20+12)|0);
      var $21=HEAP32[(($len25)>>2)];
      $len=$21;
      $eql_p=1;
      $i=0;
      label = 10; break;
    case 10: 
      var $22=$i;
      var $23=$len;
      var $cmp26=(($22)|(0)) < (($23)|(0));
      if ($cmp26) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $24=$mrb_addr;
      var $25=$i;
      var $26=$ptr;
      var $arrayidx=(($26+((($25)*(12))&-1))|0);
      var $27=$i;
      var $28=$ptr2;
      var $arrayidx27=(($28+((($27)*(12))&-1))|0);
      var $call28=_mrb_eql($24, $arrayidx, $arrayidx27);
      var $tobool29=(($call28)|(0))!=0;
      if ($tobool29) { label = 13; break; } else { label = 12; break; }
    case 12: 
      $eql_p=0;
      label = 15; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $29=$i;
      var $inc=((($29)+(1))|0);
      $i=$inc;
      label = 10; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $30=$eql_p;
      _mrb_bool_value1800($agg_result, $30);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value1800($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $boolean_addr;
      var $v=__stackBase__;
      $boolean_addr=$boolean;
      label = 3; break;
    case 3: 
      var $0=$boolean_addr;
      var $conv=(($0)&(255));
      var $tobool=(($conv)|(0))!=0;
      var $cond=$tobool ? 2 : 0;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$cond;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _inspect_struct($agg_result, $mrb, $s, $recur) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 196)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $recur_addr;
      var $cn;
      var $members=__stackBase__;
      var $str=(__stackBase__)+(12);
      var $ptr;
      var $ptr_members;
      var $i;
      var $len;
      var $agg_tmp=(__stackBase__)+(24);
      var $tmp=(__stackBase__)+(36);
      var $tmp5=(__stackBase__)+(48);
      var $slot=(__stackBase__)+(60);
      var $id;
      var $tmp17=(__stackBase__)+(72);
      var $tmp20=(__stackBase__)+(84);
      var $name;
      var $len31=(__stackBase__)+(96);
      var $agg_tmp33=(__stackBase__)+(100);
      var $tmp34=(__stackBase__)+(112);
      var $agg_tmp36=(__stackBase__)+(124);
      var $tmp37=(__stackBase__)+(136);
      var $tmp39=(__stackBase__)+(148);
      var $agg_tmp40=(__stackBase__)+(160);
      var $tmp42=(__stackBase__)+(172);
      var $tmp43=(__stackBase__)+(184);
      $mrb_addr=$mrb;
      $recur_addr=$recur;
      var $0=$mrb_addr;
      var $1=$mrb_addr;
      var $call=_mrb_obj_class($1, $s);
      var $call1=_mrb_class_name($0, $call);
      $cn=$call1;
      var $2=$mrb_addr;
      _mrb_str_new($str, $2, ((105980)|0), 9);
      var $3=$cn;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $6=$cn;
      _mrb_str_new_cstr($agg_tmp, $5, $6);
      _mrb_str_append($tmp, $4, $str, $agg_tmp);
      label = 4; break;
    case 4: 
      var $7=$recur_addr;
      var $tobool2=(($7)|(0))!=0;
      if ($tobool2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$mrb_addr;
      _mrb_str_cat21801($agg_result, $8, $str, ((105676)|0));
      label = 20; break;
    case 6: 
      var $9=$mrb_addr;
      _mrb_struct_members($tmp5, $9, $s);
      var $10=$members;
      var $11=$tmp5;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      var $value=(($members)|0);
      var $p=$value;
      var $12=HEAP32[(($p)>>2)];
      var $13=$12;
      var $ptr6=(($13+20)|0);
      var $14=HEAP32[(($ptr6)>>2)];
      $ptr_members=$14;
      var $value7=(($s)|0);
      var $p8=$value7;
      var $15=HEAP32[(($p8)>>2)];
      var $16=$15;
      var $ptr9=(($16+20)|0);
      var $17=HEAP32[(($ptr9)>>2)];
      $ptr=$17;
      var $value10=(($s)|0);
      var $p11=$value10;
      var $18=HEAP32[(($p11)>>2)];
      var $19=$18;
      var $len12=(($19+12)|0);
      var $20=HEAP32[(($len12)>>2)];
      $len=$20;
      $i=0;
      label = 7; break;
    case 7: 
      var $21=$i;
      var $22=$len;
      var $cmp=(($21)|(0)) < (($22)|(0));
      if ($cmp) { label = 8; break; } else { label = 19; break; }
    case 8: 
      var $23=$i;
      var $cmp15=(($23)|(0)) > 0;
      if ($cmp15) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $24=$mrb_addr;
      _mrb_str_cat21801($tmp17, $24, $str, ((105360)|0));
      label = 13; break;
    case 10: 
      var $25=$cn;
      var $tobool18=(($25)|(0))!=0;
      if ($tobool18) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $26=$mrb_addr;
      _mrb_str_cat21801($tmp20, $26, $str, ((105076)|0));
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $27=$i;
      var $28=$ptr_members;
      var $arrayidx=(($28+((($27)*(12))&-1))|0);
      var $29=$slot;
      var $30=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($29)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];
      var $value23=(($slot)|0);
      var $sym=$value23;
      var $31=HEAP16[(($sym)>>1)];
      $id=$31;
      var $32=$id;
      var $call24=_mrb_is_local_id($32);
      var $tobool25=(($call24)|(0))!=0;
      if ($tobool25) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $33=$id;
      var $call26=_mrb_is_const_id($33);
      var $tobool27=(($call26)|(0))!=0;
      if ($tobool27) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $34=$mrb_addr;
      var $35=$id;
      var $call32=_mrb_sym2name_len($34, $35, $len31);
      $name=$call32;
      var $36=$mrb_addr;
      var $37=$mrb_addr;
      var $38=$name;
      var $39=HEAP32[(($len31)>>2)];
      _mrb_str_new($agg_tmp33, $37, $38, $39);
      _mrb_str_append($tmp34, $36, $str, $agg_tmp33);
      label = 17; break;
    case 16: 
      var $40=$mrb_addr;
      var $41=$mrb_addr;
      _mrb_inspect($agg_tmp36, $41, $slot);
      _mrb_str_append($tmp37, $40, $str, $agg_tmp36);
      label = 17; break;
    case 17: 
      var $42=$mrb_addr;
      _mrb_str_cat21801($tmp39, $42, $str, ((104768)|0));
      var $43=$mrb_addr;
      var $44=$mrb_addr;
      var $45=$i;
      var $46=$ptr;
      var $arrayidx41=(($46+((($45)*(12))&-1))|0);
      _mrb_inspect($agg_tmp40, $44, $arrayidx41);
      _mrb_str_append($tmp42, $43, $str, $agg_tmp40);
      label = 18; break;
    case 18: 
      var $47=$i;
      var $inc=((($47)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 19: 
      var $48=$mrb_addr;
      _mrb_str_cat21801($tmp43, $48, $str, ((104480)|0));
      var $49=$agg_result;
      var $50=$str;
      assert(12 % 1 === 0);HEAP32[(($49)>>2)]=HEAP32[(($50)>>2)];HEAP32[((($49)+(4))>>2)]=HEAP32[((($50)+(4))>>2)];HEAP32[((($49)+(8))>>2)]=HEAP32[((($50)+(8))>>2)];
      label = 20; break;
    case 20: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_cat21801($agg_result, $mrb, $str, $ptr) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $ptr_addr;
  $mrb_addr=$mrb;
  $ptr_addr=$ptr;
  var $0=$mrb_addr;
  var $1=$ptr_addr;
  _mrb_str_cat_cstr($agg_result, $0, $str, $1);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_s_members_m($agg_result, $mrb, $klass) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $klass; $klass = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($klass)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($klass)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($klass)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $members=__stackBase__;
      var $ary=(__stackBase__)+(12);
      var $p;
      var $pend;
      var $tmp=(__stackBase__)+(24);
      var $tmp2=(__stackBase__)+(36);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      _mrb_struct_s_members($tmp, $0, $klass);
      var $1=$members;
      var $2=$tmp;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      var $3=$mrb_addr;
      var $value=(($members)|0);
      var $p1=$value;
      var $4=HEAP32[(($p1)>>2)];
      var $5=$4;
      var $len=(($5+12)|0);
      var $6=HEAP32[(($len)>>2)];
      _mrb_ary_new_capa($tmp2, $3, $6);
      var $7=$ary;
      var $8=$tmp2;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      var $value3=(($members)|0);
      var $p4=$value3;
      var $9=HEAP32[(($p4)>>2)];
      var $10=$9;
      var $ptr=(($10+20)|0);
      var $11=HEAP32[(($ptr)>>2)];
      $p=$11;
      var $12=$p;
      var $value5=(($members)|0);
      var $p6=$value5;
      var $13=HEAP32[(($p6)>>2)];
      var $14=$13;
      var $len7=(($14+12)|0);
      var $15=HEAP32[(($len7)>>2)];
      var $add_ptr=(($12+((($15)*(12))&-1))|0);
      $pend=$add_ptr;
      label = 3; break;
    case 3: 
      var $16=$p;
      var $17=$pend;
      var $cmp=(($16)>>>(0)) < (($17)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $18=$mrb_addr;
      var $19=$p;
      _mrb_ary_push($18, $ary, $19);
      var $20=$p;
      var $incdec_ptr=(($20+12)|0);
      $p=$incdec_ptr;
      label = 3; break;
    case 5: 
      var $21=$agg_result;
      var $22=$ary;
      assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _num_members($mrb, $klass) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $klass_addr;
      var $members=__stackBase__;
      var $agg_tmp=(__stackBase__)+(12);
      var $tmp=(__stackBase__)+(24);
      $mrb_addr=$mrb;
      $klass_addr=$klass;
      var $0=$mrb_addr;
      var $1=$klass_addr;
      var $2=$1;
      _mrb_obj_value1792($agg_tmp, $2);
      var $3=$mrb_addr;
      var $call=_mrb_intern2($3, ((109728)|0), 11);
      _struct_ivar_get($tmp, $0, $agg_tmp, $call);
      var $4=$members;
      var $5=$tmp;
      assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
      var $tt=(($members+8)|0);
      var $6=HEAP32[(($tt)>>2)];
      var $cmp=(($6)|(0))==14;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $7=$mrb_addr;
      var $8=$mrb_addr;
      var $call1=_mrb_class_get($8, ((112576)|0));
      _mrb_raise($7, $call1, ((102796)|0));
      label = 4; break;
    case 4: 
      var $value=(($members)|0);
      var $p=$value;
      var $9=HEAP32[(($p)>>2)];
      var $10=$9;
      var $len=(($10+12)|0);
      var $11=HEAP32[(($len)>>2)];
      STACKTOP = __stackBase__;
      return $11;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_ref($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $c=(($1+8)|0);
  var $2=HEAP32[(($c)>>2)];
  var $ci=(($2+16)|0);
  var $3=HEAP32[(($ci)>>2)];
  var $mid=(($3)|0);
  var $4=HEAP16[(($mid)>>1)];
  _mrb_struct_getmember($agg_result, $0, $obj, $4);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_set_m($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $val=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((94664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$val,tempInt));
  var $1=$mrb_addr;
  _mrb_struct_set($agg_result, $1, $obj, $val);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_set($agg_result, $mrb, $obj, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $name;
      var $i;
      var $len=__stackBase__;
      var $mid;
      var $members=(__stackBase__)+(4);
      var $slot=(__stackBase__)+(16);
      var $ptr;
      var $ptr_members;
      var $tmp=(__stackBase__)+(28);
      var $agg_tmp=(__stackBase__)+(40);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $1=$mrb_addr;
      var $c=(($1+8)|0);
      var $2=HEAP32[(($c)>>2)];
      var $ci=(($2+16)|0);
      var $3=HEAP32[(($ci)>>2)];
      var $mid1=(($3)|0);
      var $4=HEAP16[(($mid1)>>1)];
      var $call=_mrb_sym2name_len($0, $4, $len);
      $name=$call;
      var $5=$mrb_addr;
      var $6=$name;
      var $7=HEAP32[(($len)>>2)];
      var $sub=((($7)-(1))|0);
      var $call2=_mrb_intern2($5, $6, $sub);
      $mid=$call2;
      var $8=$mrb_addr;
      _mrb_struct_members($tmp, $8, $obj);
      var $9=$members;
      var $10=$tmp;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      var $value=(($members)|0);
      var $p=$value;
      var $11=HEAP32[(($p)>>2)];
      var $12=$11;
      var $ptr3=(($12+20)|0);
      var $13=HEAP32[(($ptr3)>>2)];
      $ptr_members=$13;
      var $value4=(($members)|0);
      var $p5=$value4;
      var $14=HEAP32[(($p5)>>2)];
      var $15=$14;
      var $len6=(($15+12)|0);
      var $16=HEAP32[(($len6)>>2)];
      HEAP32[(($len)>>2)]=$16;
      var $value7=(($obj)|0);
      var $p8=$value7;
      var $17=HEAP32[(($p8)>>2)];
      var $18=$17;
      var $ptr9=(($18+20)|0);
      var $19=HEAP32[(($ptr9)>>2)];
      $ptr=$19;
      $i=0;
      label = 3; break;
    case 3: 
      var $20=$i;
      var $21=HEAP32[(($len)>>2)];
      var $cmp=(($20)>>>(0)) < (($21)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $22=$i;
      var $23=$ptr_members;
      var $arrayidx=(($23+((($22)*(12))&-1))|0);
      var $24=$slot;
      var $25=$arrayidx;
      assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
      var $value10=(($slot)|0);
      var $sym=$value10;
      var $26=HEAP16[(($sym)>>1)];
      var $conv=(($26 << 16) >> 16);
      var $27=$mid;
      var $conv11=(($27 << 16) >> 16);
      var $cmp12=(($conv)|(0))==(($conv11)|(0));
      if ($cmp12) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $28=$i;
      var $29=$ptr;
      var $arrayidx14=(($29+((($28)*(12))&-1))|0);
      var $30=$arrayidx14;
      var $31=$val;
      assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
      var $32=$agg_result;
      var $33=$arrayidx14;
      assert(12 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $34=$i;
      var $inc=((($34)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      var $35=$mrb_addr;
      var $36=$mrb_addr;
      var $call15=_mrb_class_get($36, ((96832)|0));
      var $37=$mrb_addr;
      var $38=$mid;
      _mrb_sym2str($agg_tmp, $37, $38);
      _mrb_raisef($35, $call15, ((101960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],tempInt));
      _mrb_nil_value1795($agg_result);
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_ref0($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $value=(($obj)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  var $ptr=(($1+20)|0);
  var $2=HEAP32[(($ptr)>>2)];
  var $arrayidx=(($2)|0);
  var $3=$agg_result;
  var $4=$arrayidx;
  assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref1($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $value=(($obj)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  var $ptr=(($1+20)|0);
  var $2=HEAP32[(($ptr)>>2)];
  var $arrayidx=(($2+12)|0);
  var $3=$agg_result;
  var $4=$arrayidx;
  assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref2($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $value=(($obj)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  var $ptr=(($1+20)|0);
  var $2=HEAP32[(($ptr)>>2)];
  var $arrayidx=(($2+24)|0);
  var $3=$agg_result;
  var $4=$arrayidx;
  assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref3($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $value=(($obj)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  var $ptr=(($1+20)|0);
  var $2=HEAP32[(($ptr)>>2)];
  var $arrayidx=(($2+36)|0);
  var $3=$agg_result;
  var $4=$arrayidx;
  assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref4($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $value=(($obj)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  var $ptr=(($1+20)|0);
  var $2=HEAP32[(($ptr)>>2)];
  var $arrayidx=(($2+48)|0);
  var $3=$agg_result;
  var $4=$arrayidx;
  assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref5($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $value=(($obj)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  var $ptr=(($1+20)|0);
  var $2=HEAP32[(($ptr)>>2)];
  var $arrayidx=(($2+60)|0);
  var $3=$agg_result;
  var $4=$arrayidx;
  assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref6($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $value=(($obj)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  var $ptr=(($1+20)|0);
  var $2=HEAP32[(($ptr)>>2)];
  var $arrayidx=(($2+72)|0);
  var $3=$agg_result;
  var $4=$arrayidx;
  assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref7($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $value=(($obj)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  var $ptr=(($1+20)|0);
  var $2=HEAP32[(($ptr)>>2)];
  var $arrayidx=(($2+84)|0);
  var $3=$agg_result;
  var $4=$arrayidx;
  assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref8($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $value=(($obj)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  var $ptr=(($1+20)|0);
  var $2=HEAP32[(($ptr)>>2)];
  var $arrayidx=(($2+96)|0);
  var $3=$agg_result;
  var $4=$arrayidx;
  assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref9($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $value=(($obj)|0);
  var $p=$value;
  var $0=HEAP32[(($p)>>2)];
  var $1=$0;
  var $ptr=(($1+20)|0);
  var $2=HEAP32[(($ptr)>>2)];
  var $arrayidx=(($2+108)|0);
  var $3=$agg_result;
  var $4=$arrayidx;
  assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _GENERATED_TMP_mrb_mruby_symbol_ext_gem_init($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ai;
      var $tmp=__stackBase__;
      var $agg_tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_gc_arena_save($0);
      $ai=$call;
      var $1=$mrb_addr;
      _mrb_mruby_symbol_ext_gem_init($1);
      var $2=$mrb_addr;
      _mrb_load_irep($tmp, $2, ((80700)|0));
      var $3=$mrb_addr;
      var $exc=(($3+16)|0);
      var $4=HEAP32[(($exc)>>2)];
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$mrb_addr;
      _mrb_print_backtrace($5);
      var $6=$mrb_addr;
      var $7=$mrb_addr;
      var $exc1=(($7+16)|0);
      var $8=HEAP32[(($exc1)>>2)];
      var $9=$8;
      _mrb_obj_value1804($agg_tmp, $9);
      _mrb_p($6, $agg_tmp);
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $10=$mrb_addr;
      var $11=$ai;
      _mrb_gc_arena_restore($10, $11);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_symbol_ext_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  return;
}
function _mrb_obj_value1804($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_symbol_ext_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_mruby_symbol_ext_gem_final($0);
  return;
}
function _mrb_mruby_symbol_ext_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $s;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $symbol_class=(($0+92)|0);
  var $1=HEAP32[(($symbol_class)>>2)];
  $s=$1;
  var $2=$mrb_addr;
  var $3=$s;
  _mrb_define_class_method($2, $3, ((109516)|0), 494, 0);
  return;
}
function _mrb_sym_all_symbols($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $k;
      var $sym;
      var $h;
      var $ary=__stackBase__;
      var $agg_tmp=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $name2sym=(($0+568)|0);
      var $1=HEAP32[(($name2sym)>>2)];
      $h=$1;
      var $2=$mrb_addr;
      var $3=$h;
      var $size=(($3+4)|0);
      var $4=HEAP32[(($size)>>2)];
      _mrb_ary_new_capa($ary, $2, $4);
      $k=0;
      label = 3; break;
    case 3: 
      var $5=$k;
      var $6=$h;
      var $n_buckets=(($6)|0);
      var $7=HEAP32[(($n_buckets)>>2)];
      var $cmp=(($5)|(0))!=(($7)|(0));
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $8=$k;
      var $div=Math.floor(((($8)>>>(0)))/(8));
      var $9=$h;
      var $e_flags=(($9+16)|0);
      var $10=HEAP32[(($e_flags)>>2)];
      var $arrayidx=(($10+$div)|0);
      var $11=HEAP8[($arrayidx)];
      var $conv=(($11)&(255));
      var $12=$k;
      var $rem=((($12)>>>(0)))%(8);
      var $arrayidx1=((114480+$rem)|0);
      var $13=HEAP8[($arrayidx1)];
      var $conv2=(($13)&(255));
      var $and=$conv & $conv2;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 5; break; }
    case 5: 
      var $14=$k;
      var $div3=Math.floor(((($14)>>>(0)))/(8));
      var $15=$h;
      var $d_flags=(($15+20)|0);
      var $16=HEAP32[(($d_flags)>>2)];
      var $arrayidx4=(($16+$div3)|0);
      var $17=HEAP8[($arrayidx4)];
      var $conv5=(($17)&(255));
      var $18=$k;
      var $rem6=((($18)>>>(0)))%(8);
      var $arrayidx7=((114480+$rem6)|0);
      var $19=HEAP8[($arrayidx7)];
      var $conv8=(($19)&(255));
      var $and9=$conv5 & $conv8;
      var $tobool10=(($and9)|(0))!=0;
      if ($tobool10) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $20=$k;
      var $21=$h;
      var $vals=(($21+28)|0);
      var $22=HEAP32[(($vals)>>2)];
      var $arrayidx11=(($22+($20<<1))|0);
      var $23=HEAP16[(($arrayidx11)>>1)];
      $sym=$23;
      var $24=$mrb_addr;
      var $25=$sym;
      _mrb_symbol_value1813($agg_tmp, $25);
      _mrb_ary_push($24, $ary, $agg_tmp);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $26=$k;
      var $inc=((($26)+(1))|0);
      $k=$inc;
      label = 3; break;
    case 9: 
      var $27=$agg_result;
      var $28=$ary;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_symbol_value1813($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=4;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $sym=$value;
      HEAP16[(($sym)>>1)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_time_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $ai;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_gc_arena_save($0);
  $ai=$call;
  var $1=$mrb_addr;
  _mrb_mruby_time_gem_init($1);
  var $2=$mrb_addr;
  var $3=$ai;
  _mrb_gc_arena_restore($2, $3);
  return;
}
function _GENERATED_TMP_mrb_mruby_time_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_mruby_time_gem_final($0);
  return;
}
function _mrb_mruby_time_gem_init($mrb) {
  var label = 0;
  var $mrb_addr;
  var $tc;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $1=$mrb_addr;
  var $object_class=(($1+44)|0);
  var $2=HEAP32[(($object_class)>>2)];
  var $call=_mrb_define_class($0, ((109332)|0), $2);
  $tc=$call;
  var $3=$tc;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=$5 >>> 11;
  var $bf_clear=$6 & 2097151;
  var $and=$bf_clear & -256;
  var $or=$and | 21;
  var $7=$tc;
  var $bf_value=$or & 2097151;
  var $8=$7;
  var $9=$bf_value & 2097151;
  var $10=$9 << 11;
  var $11=HEAP32[(($8)>>2)];
  var $12=$11 & 2047;
  var $13=$12 | $10;
  HEAP32[(($8)>>2)]=$13;
  var $14=$mrb_addr;
  var $15=$tc;
  var $16=$mrb_addr;
  var $call1=_mrb_class_get($16, ((112552)|0));
  _mrb_include_module($14, $15, $call1);
  var $17=$mrb_addr;
  var $18=$tc;
  _mrb_define_class_method($17, $18, ((107652)|0), 442, 4096);
  var $19=$mrb_addr;
  var $20=$tc;
  _mrb_define_class_method($19, $20, ((104116)|0), 54, 311296);
  var $21=$mrb_addr;
  var $22=$tc;
  _mrb_define_class_method($21, $22, ((101424)|0), 444, 311296);
  var $23=$mrb_addr;
  var $24=$tc;
  _mrb_define_class_method($23, $24, ((98800)|0), 444, 311296);
  var $25=$mrb_addr;
  var $26=$tc;
  _mrb_define_class_method($25, $26, ((96828)|0), 500, 0);
  var $27=$mrb_addr;
  var $28=$tc;
  _mrb_define_class_method($27, $28, ((95600)|0), 54, 311296);
  var $29=$mrb_addr;
  var $30=$tc;
  _mrb_define_method($29, $30, ((94660)|0), 366, 262144);
  var $31=$mrb_addr;
  var $32=$tc;
  _mrb_define_method($31, $32, ((93760)|0), 368, 262144);
  var $33=$mrb_addr;
  var $34=$tc;
  _mrb_define_method($33, $34, ((113552)|0), 612, 262144);
  var $35=$mrb_addr;
  var $36=$tc;
  _mrb_define_method($35, $36, ((112996)|0), 140, 262144);
  var $37=$mrb_addr;
  var $38=$tc;
  _mrb_define_method($37, $38, ((112064)|0), 220, 0);
  var $39=$mrb_addr;
  var $40=$tc;
  _mrb_define_method($39, $40, ((111488)|0), 220, 0);
  var $41=$mrb_addr;
  var $42=$tc;
  _mrb_define_method($41, $42, ((111048)|0), 220, 0);
  var $43=$mrb_addr;
  var $44=$tc;
  _mrb_define_method($43, $44, ((110532)|0), 220, 0);
  var $45=$mrb_addr;
  var $46=$tc;
  _mrb_define_method($45, $46, ((110112)|0), 358, 0);
  var $47=$mrb_addr;
  var $48=$tc;
  _mrb_define_method($47, $48, ((109776)|0), 260, 0);
  var $49=$mrb_addr;
  var $50=$tc;
  _mrb_define_method($49, $50, ((109324)|0), 294, 0);
  var $51=$mrb_addr;
  var $52=$tc;
  _mrb_define_method($51, $52, ((108848)|0), 200, 0);
  var $53=$mrb_addr;
  var $54=$tc;
  _mrb_define_method($53, $54, ((108316)|0), 294, 0);
  var $55=$mrb_addr;
  var $56=$tc;
  _mrb_define_method($55, $56, ((107964)|0), 616, 0);
  var $57=$mrb_addr;
  var $58=$tc;
  _mrb_define_method($57, $58, ((107464)|0), 572, 0);
  var $59=$mrb_addr;
  var $60=$tc;
  _mrb_define_method($59, $60, ((107208)|0), 666, 0);
  var $61=$mrb_addr;
  var $62=$tc;
  _mrb_define_method($61, $62, ((106788)|0), 720, 0);
  var $63=$mrb_addr;
  var $64=$tc;
  _mrb_define_method($63, $64, ((106356)|0), 170, 0);
  var $65=$mrb_addr;
  var $66=$tc;
  _mrb_define_method($65, $66, ((105976)|0), 154, 0);
  var $67=$mrb_addr;
  var $68=$tc;
  _mrb_define_method($67, $68, ((105672)|0), 718, 0);
  var $69=$mrb_addr;
  var $70=$tc;
  _mrb_define_method($69, $70, ((105352)|0), 718, 0);
  var $71=$mrb_addr;
  var $72=$tc;
  _mrb_define_method($71, $72, ((105068)|0), 464, 0);
  var $73=$mrb_addr;
  var $74=$tc;
  _mrb_define_method($73, $74, ((104756)|0), 420, 0);
  var $75=$mrb_addr;
  var $76=$tc;
  _mrb_define_method($75, $76, ((104468)|0), 416, 0);
  var $77=$mrb_addr;
  var $78=$tc;
  _mrb_define_method($77, $78, ((103912)|0), 708, 0);
  var $79=$mrb_addr;
  var $80=$tc;
  _mrb_define_method($79, $80, ((95600)|0), 572, 0);
  var $81=$mrb_addr;
  var $82=$tc;
  _mrb_define_method($81, $82, ((103720)|0), 616, 0);
  var $83=$mrb_addr;
  var $84=$tc;
  _mrb_define_method($83, $84, ((103500)|0), 530, 0);
  var $85=$mrb_addr;
  var $86=$tc;
  _mrb_define_method($85, $86, ((103284)|0), 424, 0);
  var $87=$mrb_addr;
  var $88=$tc;
  _mrb_define_method($87, $88, ((103048)|0), 378, 0);
  var $89=$mrb_addr;
  var $90=$tc;
  _mrb_define_method($89, $90, ((102788)|0), 346, 0);
  var $91=$mrb_addr;
  var $92=$tc;
  _mrb_define_method($91, $92, ((102576)|0), 152, 262144);
  var $93=$mrb_addr;
  var $94=$tc;
  _mrb_define_method($93, $94, ((102264)|0), 138, 262144);
  return;
}
function _mrb_time_at($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $f=__stackBase__;
  var $f2=(__stackBase__)+(8);
  $mrb_addr=$mrb;
  (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($f2)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f2)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((95456)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$f,HEAP32[(((tempInt)+(4))>>2)]=$f2,tempInt));
  var $1=$mrb_addr;
  var $value=(($self)|0);
  var $p=$value;
  var $2=HEAP32[(($p)>>2)];
  var $3=$2;
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_time_make($agg_result, $1, $3, $4, $5, 2);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_time_gm($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $ayear=__stackBase__;
  var $amonth=(__stackBase__)+(4);
  var $aday=(__stackBase__)+(8);
  var $ahour=(__stackBase__)+(12);
  var $amin=(__stackBase__)+(16);
  var $asec=(__stackBase__)+(20);
  var $ausec=(__stackBase__)+(24);
  $mrb_addr=$mrb;
  HEAP32[(($ayear)>>2)]=0;
  HEAP32[(($amonth)>>2)]=1;
  HEAP32[(($aday)>>2)]=1;
  HEAP32[(($ahour)>>2)]=0;
  HEAP32[(($amin)>>2)]=0;
  HEAP32[(($asec)>>2)]=0;
  HEAP32[(($ausec)>>2)]=0;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((95528)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ayear,HEAP32[(((tempInt)+(4))>>2)]=$amonth,HEAP32[(((tempInt)+(8))>>2)]=$aday,HEAP32[(((tempInt)+(12))>>2)]=$ahour,HEAP32[(((tempInt)+(16))>>2)]=$amin,HEAP32[(((tempInt)+(20))>>2)]=$asec,HEAP32[(((tempInt)+(24))>>2)]=$ausec,tempInt));
  var $1=$mrb_addr;
  var $value=(($self)|0);
  var $p=$value;
  var $2=HEAP32[(($p)>>2)];
  var $3=$2;
  var $4=$mrb_addr;
  var $5=HEAP32[(($ayear)>>2)];
  var $6=HEAP32[(($amonth)>>2)];
  var $7=HEAP32[(($aday)>>2)];
  var $8=HEAP32[(($ahour)>>2)];
  var $9=HEAP32[(($amin)>>2)];
  var $10=HEAP32[(($asec)>>2)];
  var $11=HEAP32[(($ausec)>>2)];
  var $call1=_time_mktime($4, $5, $6, $7, $8, $9, $10, $11, 1);
  _mrb_time_wrap($agg_result, $1, $3, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_time_local($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $ayear=__stackBase__;
  var $amonth=(__stackBase__)+(4);
  var $aday=(__stackBase__)+(8);
  var $ahour=(__stackBase__)+(12);
  var $amin=(__stackBase__)+(16);
  var $asec=(__stackBase__)+(20);
  var $ausec=(__stackBase__)+(24);
  $mrb_addr=$mrb;
  HEAP32[(($ayear)>>2)]=0;
  HEAP32[(($amonth)>>2)]=1;
  HEAP32[(($aday)>>2)]=1;
  HEAP32[(($ahour)>>2)]=0;
  HEAP32[(($amin)>>2)]=0;
  HEAP32[(($asec)>>2)]=0;
  HEAP32[(($ausec)>>2)]=0;
  var $0=$mrb_addr;
  var $call=_mrb_get_args($0, ((95528)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ayear,HEAP32[(((tempInt)+(4))>>2)]=$amonth,HEAP32[(((tempInt)+(8))>>2)]=$aday,HEAP32[(((tempInt)+(12))>>2)]=$ahour,HEAP32[(((tempInt)+(16))>>2)]=$amin,HEAP32[(((tempInt)+(20))>>2)]=$asec,HEAP32[(((tempInt)+(24))>>2)]=$ausec,tempInt));
  var $1=$mrb_addr;
  var $value=(($self)|0);
  var $p=$value;
  var $2=HEAP32[(($p)>>2)];
  var $3=$2;
  var $4=$mrb_addr;
  var $5=HEAP32[(($ayear)>>2)];
  var $6=HEAP32[(($amonth)>>2)];
  var $7=HEAP32[(($aday)>>2)];
  var $8=HEAP32[(($ahour)>>2)];
  var $9=HEAP32[(($amin)>>2)];
  var $10=HEAP32[(($asec)>>2)];
  var $11=HEAP32[(($ausec)>>2)];
  var $call1=_time_mktime($4, $5, $6, $7, $8, $9, $10, $11, 2);
  _mrb_time_wrap($agg_result, $1, $3, $call1);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_time_now($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $value=(($self)|0);
  var $p=$value;
  var $1=HEAP32[(($p)>>2)];
  var $2=$1;
  var $3=$mrb_addr;
  var $call=_current_mrb_time($3);
  _mrb_time_wrap($agg_result, $0, $2, $call);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_time_eq($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $other=__stackBase__;
      var $tm1;
      var $tm2;
      var $eq_p;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((101956)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$other,tempInt));
      var $1=$mrb_addr;
      var $call1=_mrb_data_get_ptr($1, $self, 77360);
      var $2=$call1;
      $tm1=$2;
      var $3=$mrb_addr;
      var $call2=_mrb_data_get_ptr($3, $other, 77360);
      var $4=$call2;
      $tm2=$4;
      var $5=$tm1;
      var $tobool=(($5)|(0))!=0;
      if ($tobool) { label = 3; break; } else { var $15 = 0;label = 6; break; }
    case 3: 
      var $6=$tm2;
      var $tobool3=(($6)|(0))!=0;
      if ($tobool3) { label = 4; break; } else { var $15 = 0;label = 6; break; }
    case 4: 
      var $7=$tm1;
      var $sec=(($7)|0);
      var $8=HEAP32[(($sec)>>2)];
      var $9=$tm2;
      var $sec5=(($9)|0);
      var $10=HEAP32[(($sec5)>>2)];
      var $cmp=(($8)|(0))==(($10)|(0));
      if ($cmp) { label = 5; break; } else { var $15 = 0;label = 6; break; }
    case 5: 
      var $11=$tm1;
      var $usec=(($11+4)|0);
      var $12=HEAP32[(($usec)>>2)];
      var $13=$tm2;
      var $usec6=(($13+4)|0);
      var $14=HEAP32[(($usec6)>>2)];
      var $cmp7=(($12)|(0))==(($14)|(0));
      var $15 = $cmp7;label = 6; break;
    case 6: 
      var $15;
      var $land_ext=(($15)&(1));
      var $conv=(($land_ext) & 255);
      $eq_p=$conv;
      var $16=$eq_p;
      _mrb_bool_value1899($agg_result, $16);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_cmp($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $other=__stackBase__;
      var $tm1;
      var $tm2;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((101956)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$other,tempInt));
      var $1=$mrb_addr;
      var $call1=_mrb_data_get_ptr($1, $self, 77360);
      var $2=$call1;
      $tm1=$2;
      var $3=$mrb_addr;
      var $call2=_mrb_data_get_ptr($3, $other, 77360);
      var $4=$call2;
      $tm2=$4;
      var $5=$tm1;
      var $tobool=(($5)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$tm2;
      var $tobool3=(($6)|(0))!=0;
      if ($tobool3) { label = 5; break; } else { label = 4; break; }
    case 4: 
      _mrb_nil_value1896($agg_result);
      label = 16; break;
    case 5: 
      var $7=$tm1;
      var $sec=(($7)|0);
      var $8=HEAP32[(($sec)>>2)];
      var $9=$tm2;
      var $sec4=(($9)|0);
      var $10=HEAP32[(($sec4)>>2)];
      var $cmp=(($8)|(0)) > (($10)|(0));
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      _mrb_fixnum_value1897($agg_result, 1);
      label = 16; break;
    case 7: 
      var $11=$tm1;
      var $sec6=(($11)|0);
      var $12=HEAP32[(($sec6)>>2)];
      var $13=$tm2;
      var $sec7=(($13)|0);
      var $14=HEAP32[(($sec7)>>2)];
      var $cmp8=(($12)|(0)) < (($14)|(0));
      if ($cmp8) { label = 8; break; } else { label = 9; break; }
    case 8: 
      _mrb_fixnum_value1897($agg_result, -1);
      label = 16; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $15=$tm1;
      var $usec=(($15+4)|0);
      var $16=HEAP32[(($usec)>>2)];
      var $17=$tm2;
      var $usec12=(($17+4)|0);
      var $18=HEAP32[(($usec12)>>2)];
      var $cmp13=(($16)|(0)) > (($18)|(0));
      if ($cmp13) { label = 11; break; } else { label = 12; break; }
    case 11: 
      _mrb_fixnum_value1897($agg_result, 1);
      label = 16; break;
    case 12: 
      var $19=$tm1;
      var $usec16=(($19+4)|0);
      var $20=HEAP32[(($usec16)>>2)];
      var $21=$tm2;
      var $usec17=(($21+4)|0);
      var $22=HEAP32[(($usec17)>>2)];
      var $cmp18=(($20)|(0)) < (($22)|(0));
      if ($cmp18) { label = 13; break; } else { label = 14; break; }
    case 13: 
      _mrb_fixnum_value1897($agg_result, -1);
      label = 16; break;
    case 14: 
      label = 15; break;
    case 15: 
      _mrb_fixnum_value1897($agg_result, 0);
      label = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_plus($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $f=__stackBase__;
      var $tm;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((95860)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$f,tempInt));
      var $1=$mrb_addr;
      var $call1=_mrb_data_get_ptr($1, $self, 77360);
      var $2=$call1;
      $tm=$2;
      var $3=$tm;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value1896($agg_result);
      label = 5; break;
    case 4: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call2=_mrb_obj_class($5, $self);
      var $6=$tm;
      var $sec=(($6)|0);
      var $7=HEAP32[(($sec)>>2)];
      var $conv=(($7)|(0));
      var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $add=($conv)+($8);
      var $9=$tm;
      var $usec=(($9+4)|0);
      var $10=HEAP32[(($usec)>>2)];
      var $conv3=(($10)|(0));
      var $11=$tm;
      var $timezone=(($11+8)|0);
      var $12=HEAP32[(($timezone)>>2)];
      _mrb_time_make($agg_result, $4, $call2, $add, $conv3, $12);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_minus($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $f=__stackBase__;
      var $other=(__stackBase__)+(8);
      var $tm;
      var $tm2;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((101956)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$other,tempInt));
      var $1=$mrb_addr;
      var $call1=_mrb_data_get_ptr($1, $self, 77360);
      var $2=$call1;
      $tm=$2;
      var $3=$tm;
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value1896($agg_result);
      label = 7; break;
    case 4: 
      var $4=$mrb_addr;
      var $call2=_mrb_data_get_ptr($4, $other, 77360);
      var $5=$call2;
      $tm2=$5;
      var $6=$tm2;
      var $tobool3=(($6)|(0))!=0;
      if ($tobool3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$tm;
      var $sec=(($7)|0);
      var $8=HEAP32[(($sec)>>2)];
      var $9=$tm2;
      var $sec5=(($9)|0);
      var $10=HEAP32[(($sec5)>>2)];
      var $sub=((($8)-($10))|0);
      var $conv=(($sub)|(0));
      var $11=$tm;
      var $usec=(($11+4)|0);
      var $12=HEAP32[(($usec)>>2)];
      var $13=$tm2;
      var $usec6=(($13+4)|0);
      var $14=HEAP32[(($usec6)>>2)];
      var $sub7=((($12)-($14))|0);
      var $conv8=(($sub7)|(0));
      var $div=($conv8)/(1000000);
      var $add=($conv)+($div);
      (HEAPF64[(tempDoublePtr)>>3]=$add,HEAP32[(($f)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $15=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _mrb_float_value1898($agg_result, $15);
      label = 7; break;
    case 6: 
      var $16=$mrb_addr;
      var $call9=_mrb_get_args($16, ((95860)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$f,tempInt));
      var $17=$mrb_addr;
      var $18=$mrb_addr;
      var $call10=_mrb_obj_class($18, $self);
      var $19=$tm;
      var $sec11=(($19)|0);
      var $20=HEAP32[(($sec11)>>2)];
      var $conv12=(($20)|(0));
      var $21=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $sub13=($conv12)-($21);
      var $22=$tm;
      var $usec14=(($22+4)|0);
      var $23=HEAP32[(($usec14)>>2)];
      var $conv15=(($23)|(0));
      var $24=$tm;
      var $timezone=(($24+8)|0);
      var $25=HEAP32[(($timezone)>>2)];
      _mrb_time_make($agg_result, $17, $call10, $sub13, $conv15, $25);
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_asctime($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 256)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tm;
      var $d;
      var $buf=__stackBase__;
      var $len;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_data_get_ptr($0, $self, 77360);
      var $1=$call;
      $tm=$1;
      var $2=$tm;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value1896($agg_result);
      label = 5; break;
    case 4: 
      var $3=$tm;
      var $datetime=(($3+12)|0);
      $d=$datetime;
      var $arraydecay=(($buf)|0);
      var $4=$d;
      var $tm_wday=(($4+24)|0);
      var $5=HEAP32[(($tm_wday)>>2)];
      var $arrayidx=((58832+($5<<2))|0);
      var $6=HEAP32[(($arrayidx)>>2)];
      var $7=$d;
      var $tm_mon=(($7+16)|0);
      var $8=HEAP32[(($tm_mon)>>2)];
      var $arrayidx1=((79976+($8<<2))|0);
      var $9=HEAP32[(($arrayidx1)>>2)];
      var $10=$d;
      var $tm_mday=(($10+12)|0);
      var $11=HEAP32[(($tm_mday)>>2)];
      var $12=$d;
      var $tm_hour=(($12+8)|0);
      var $13=HEAP32[(($tm_hour)>>2)];
      var $14=$d;
      var $tm_min=(($14+4)|0);
      var $15=HEAP32[(($tm_min)>>2)];
      var $16=$d;
      var $tm_sec=(($16)|0);
      var $17=HEAP32[(($tm_sec)>>2)];
      var $18=$tm;
      var $timezone=(($18+8)|0);
      var $19=HEAP32[(($timezone)>>2)];
      var $cmp=(($19)|(0))==1;
      var $cond=$cmp ? (((99468)|0)) : (((99192)|0));
      var $20=$d;
      var $tm_year=(($20+20)|0);
      var $21=HEAP32[(($tm_year)>>2)];
      var $add=((($21)+(1900))|0);
      var $call2=_snprintf($arraydecay, 256, ((99700)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 32)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$6,HEAP32[(((tempInt)+(4))>>2)]=$9,HEAP32[(((tempInt)+(8))>>2)]=$11,HEAP32[(((tempInt)+(12))>>2)]=$13,HEAP32[(((tempInt)+(16))>>2)]=$15,HEAP32[(((tempInt)+(20))>>2)]=$17,HEAP32[(((tempInt)+(24))>>2)]=$cond,HEAP32[(((tempInt)+(28))>>2)]=$add,tempInt));
      $len=$call2;
      var $22=$mrb_addr;
      var $arraydecay3=(($buf)|0);
      var $23=$len;
      _mrb_str_new($agg_result, $22, $arraydecay3, $23);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_day($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tm;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_data_get_ptr($0, $self, 77360);
      var $1=$call;
      $tm=$1;
      var $2=$tm;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value1896($agg_result);
      label = 5; break;
    case 4: 
      var $3=$tm;
      var $datetime=(($3+12)|0);
      var $tm_mday=(($datetime+12)|0);
      var $4=HEAP32[(($tm_mday)>>2)];
      _mrb_fixnum_value1897($agg_result, $4);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_dstp($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tm;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_data_get_ptr($0, $self, 77360);
      var $1=$call;
      $tm=$1;
      var $2=$tm;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value1896($agg_result);
      label = 5; break;
    case 4: 
      var $3=$tm;
      var $datetime=(($3+12)|0);
      var $tm_isdst=(($datetime+32)|0);
      var $4=HEAP32[(($tm_isdst)>>2)];
      var $conv=(($4) & 255);
      _mrb_bool_value1899($agg_result, $conv);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_getutc($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tm;
      var $tm2;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_data_get_ptr($0, $self, 77360);
      var $1=$call;
      $tm=$1;
      var $2=$tm;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=$agg_result;
      var $4=$self;
      assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
      label = 5; break;
    case 4: 
      var $5=$mrb_addr;
      var $call1=_mrb_malloc($5, 56);
      var $6=$call1;
      $tm2=$6;
      var $7=$tm2;
      var $8=$tm;
      var $9=$7;
      var $10=$8;
      assert(56 % 1 === 0);_memcpy($9, $10, 56);
      var $11=$tm2;
      var $timezone=(($11+8)|0);
      HEAP32[(($timezone)>>2)]=1;
      var $12=$tm2;
      var $call2=_mrb_time_update_datetime($12);
      var $13=$mrb_addr;
      var $14=$mrb_addr;
      var $call3=_mrb_obj_class($14, $self);
      var $15=$tm2;
      _mrb_time_wrap($agg_result, $13, $call3, $15);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_getlocal($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tm;
      var $tm2;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_data_get_ptr($0, $self, 77360);
      var $1=$call;
      $tm=$1;
      var $2=$tm;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=$agg_result;
      var $4=$self;
      assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
      label = 5; break;
    case 4: 
      var $5=$mrb_addr;
      var $call1=_mrb_malloc($5, 56);
      var $6=$call1;
      $tm2=$6;
      var $7=$tm2;
      var $8=$tm;
      var $9=$7;
      var $10=$8;
      assert(56 % 1 === 0);_memcpy($9, $10, 56);
      var $11=$tm2;
      var $timezone=(($11+8)|0);
      HEAP32[(($timezone)>>2)]=2;
      var $12=$tm2;
      var $call2=_mrb_time_update_datetime($12);
      var $13=$mrb_addr;
      var $14=$mrb_addr;
      var $call3=_mrb_obj_class($14, $self);
      var $15=$tm2;
      _mrb_time_wrap($agg_result, $13, $call3, $15);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_utcp($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tm;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_data_get_ptr($0, $self, 77360);
      var $1=$call;
      $tm=$1;
      var $2=$tm;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value1896($agg_result);
      label = 5; break;
    case 4: 
      var $3=$tm;
      var $timezone=(($3+8)|0);
      var $4=HEAP32[(($timezone)>>2)];
      var $cmp=(($4)|(0))==1;
      var $conv=(($cmp)&(1));
      var $conv1=(($conv) & 255);
      _mrb_bool_value1899($agg_result, $conv1);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_time_gem_final($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  return;
}
function _mrb_time_utc($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tm;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_data_get_ptr($0, $self, 77360);
      var $1=$call;
      $tm=$1;
      var $2=$tm;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$tm;
      var $timezone=(($3+8)|0);
      HEAP32[(($timezone)>>2)]=1;
      var $4=$tm;
      var $call1=_mrb_time_update_datetime($4);
      label = 4; break;
    case 4: 
      var $5=$agg_result;
      var $6=$self;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_hour($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tm;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_data_get_ptr($0, $self, 77360);
      var $1=$call;
      $tm=$1;
      var $2=$tm;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value1896($agg_result);
      label = 5; break;
    case 4: 
      var $3=$tm;
      var $datetime=(($3+12)|0);
      var $tm_hour=(($datetime+8)|0);
      var $4=HEAP32[(($tm_hour)>>2)];
      _mrb_fixnum_value1897($agg_result, $4);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_localtime($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tm;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_data_get_ptr($0, $self, 77360);
      var $1=$call;
      $tm=$1;
      var $2=$tm;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $3=$agg_result;
      var $4=$self;
      assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
      label = 5; break;
    case 4: 
      var $5=$tm;
      var $timezone=(($5+8)|0);
      HEAP32[(($timezone)>>2)]=2;
      var $6=$tm;
      var $call1=_mrb_time_update_datetime($6);
      var $7=$agg_result;
      var $8=$self;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_mday($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tm;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_data_get_ptr($0, $self, 77360);
      var $1=$call;
      $tm=$1;
      var $2=$tm;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value1896($agg_result);
      label = 5; break;
    case 4: 
      var $3=$tm;
      var $datetime=(($3+12)|0);
      var $tm_mday=(($datetime+12)|0);
      var $4=HEAP32[(($tm_mday)>>2)];
      _mrb_fixnum_value1897($agg_result, $4);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_min($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tm;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_data_get_ptr($0, $self, 77360);
      var $1=$call;
      $tm=$1;
      var $2=$tm;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value1896($agg_result);
      label = 5; break;
    case 4: 
      var $3=$tm;
      var $datetime=(($3+12)|0);
      var $tm_min=(($datetime+4)|0);
      var $4=HEAP32[(($tm_min)>>2)];
      _mrb_fixnum_value1897($agg_result, $4);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_mon($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tm;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_data_get_ptr($0, $self, 77360);
      var $1=$call;
      $tm=$1;
      var $2=$tm;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value1896($agg_result);
      label = 5; break;
    case 4: 
      var $3=$tm;
      var $datetime=(($3+12)|0);
      var $tm_mon=(($datetime+16)|0);
      var $4=HEAP32[(($tm_mon)>>2)];
      var $add=((($4)+(1))|0);
      _mrb_fixnum_value1897($agg_result, $add);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_sec($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tm;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_data_get_ptr($0, $self, 77360);
      var $1=$call;
      $tm=$1;
      var $2=$tm;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value1896($agg_result);
      label = 5; break;
    case 4: 
      var $3=$tm;
      var $datetime=(($3+12)|0);
      var $tm_sec=(($datetime)|0);
      var $4=HEAP32[(($tm_sec)>>2)];
      _mrb_fixnum_value1897($agg_result, $4);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_to_i($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tm;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_data_get_ptr($0, $self, 77360);
      var $1=$call;
      $tm=$1;
      var $2=$tm;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value1896($agg_result);
      label = 5; break;
    case 4: 
      var $3=$tm;
      var $sec=(($3)|0);
      var $4=HEAP32[(($sec)>>2)];
      _mrb_fixnum_value1897($agg_result, $4);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_to_f($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tm;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_data_get_ptr($0, $self, 77360);
      var $1=$call;
      $tm=$1;
      var $2=$tm;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value1896($agg_result);
      label = 5; break;
    case 4: 
      var $3=$tm;
      var $sec=(($3)|0);
      var $4=HEAP32[(($sec)>>2)];
      var $conv=(($4)|(0));
      var $5=$tm;
      var $usec=(($5+4)|0);
      var $6=HEAP32[(($usec)>>2)];
      var $conv1=(($6)|(0));
      var $div=($conv1)/(1000000);
      var $add=($conv)+($div);
      _mrb_float_value1898($agg_result, $add);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_usec($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tm;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_data_get_ptr($0, $self, 77360);
      var $1=$call;
      $tm=$1;
      var $2=$tm;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value1896($agg_result);
      label = 5; break;
    case 4: 
      var $3=$tm;
      var $usec=(($3+4)|0);
      var $4=HEAP32[(($usec)>>2)];
      _mrb_fixnum_value1897($agg_result, $4);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_wday($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tm;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_data_get_ptr($0, $self, 77360);
      var $1=$call;
      $tm=$1;
      var $2=$tm;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value1896($agg_result);
      label = 5; break;
    case 4: 
      var $3=$tm;
      var $datetime=(($3+12)|0);
      var $tm_wday=(($datetime+24)|0);
      var $4=HEAP32[(($tm_wday)>>2)];
      _mrb_fixnum_value1897($agg_result, $4);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_yday($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tm;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_data_get_ptr($0, $self, 77360);
      var $1=$call;
      $tm=$1;
      var $2=$tm;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value1896($agg_result);
      label = 5; break;
    case 4: 
      var $3=$tm;
      var $datetime=(($3+12)|0);
      var $tm_yday=(($datetime+28)|0);
      var $4=HEAP32[(($tm_yday)>>2)];
      var $add=((($4)+(1))|0);
      _mrb_fixnum_value1897($agg_result, $add);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_year($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tm;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_data_get_ptr($0, $self, 77360);
      var $1=$call;
      $tm=$1;
      var $2=$tm;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value1896($agg_result);
      label = 5; break;
    case 4: 
      var $3=$tm;
      var $datetime=(($3+12)|0);
      var $tm_year=(($datetime+20)|0);
      var $4=HEAP32[(($tm_year)>>2)];
      var $add=((($4)+(1900))|0);
      _mrb_fixnum_value1897($agg_result, $add);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_zone($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tm;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_data_get_ptr($0, $self, 77360);
      var $1=$call;
      $tm=$1;
      var $2=$tm;
      var $tobool=(($2)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value1896($agg_result);
      label = 9; break;
    case 4: 
      var $3=$tm;
      var $timezone=(($3+8)|0);
      var $4=HEAP32[(($timezone)>>2)];
      var $cmp=(($4)>>>(0)) <= 0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _mrb_nil_value1896($agg_result);
      label = 9; break;
    case 6: 
      var $5=$tm;
      var $timezone3=(($5+8)|0);
      var $6=HEAP32[(($timezone3)>>2)];
      var $cmp4=(($6)>>>(0)) >= 3;
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _mrb_nil_value1896($agg_result);
      label = 9; break;
    case 8: 
      var $7=$mrb_addr;
      var $8=$tm;
      var $timezone7=(($8+8)|0);
      var $9=HEAP32[(($timezone7)>>2)];
      var $arrayidx=((58860+($9<<2))|0);
      var $10=HEAP32[(($arrayidx)>>2)];
      _mrb_str_new_cstr($agg_result, $7, $10);
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_initialize($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ayear=__stackBase__;
      var $amonth=(__stackBase__)+(4);
      var $aday=(__stackBase__)+(8);
      var $ahour=(__stackBase__)+(12);
      var $amin=(__stackBase__)+(16);
      var $asec=(__stackBase__)+(20);
      var $ausec=(__stackBase__)+(24);
      var $n;
      var $tm;
      $mrb_addr=$mrb;
      HEAP32[(($ayear)>>2)]=0;
      HEAP32[(($amonth)>>2)]=1;
      HEAP32[(($aday)>>2)]=1;
      HEAP32[(($ahour)>>2)]=0;
      HEAP32[(($amin)>>2)]=0;
      HEAP32[(($asec)>>2)]=0;
      HEAP32[(($ausec)>>2)]=0;
      var $value=(($self)|0);
      var $p=$value;
      var $0=HEAP32[(($p)>>2)];
      var $1=$0;
      var $data=(($1+20)|0);
      var $2=HEAP32[(($data)>>2)];
      var $3=$2;
      $tm=$3;
      var $4=$tm;
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$mrb_addr;
      var $6=$tm;
      var $7=$6;
      _mrb_time_free($5, $7);
      label = 4; break;
    case 4: 
      var $value1=(($self)|0);
      var $p2=$value1;
      var $8=HEAP32[(($p2)>>2)];
      var $9=$8;
      var $type=(($9+16)|0);
      HEAP32[(($type)>>2)]=77360;
      var $value3=(($self)|0);
      var $p4=$value3;
      var $10=HEAP32[(($p4)>>2)];
      var $11=$10;
      var $data5=(($11+20)|0);
      HEAP32[(($data5)>>2)]=0;
      var $12=$mrb_addr;
      var $call=_mrb_get_args($12, ((100964)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ayear,HEAP32[(((tempInt)+(4))>>2)]=$amonth,HEAP32[(((tempInt)+(8))>>2)]=$aday,HEAP32[(((tempInt)+(12))>>2)]=$ahour,HEAP32[(((tempInt)+(16))>>2)]=$amin,HEAP32[(((tempInt)+(20))>>2)]=$asec,HEAP32[(((tempInt)+(24))>>2)]=$ausec,tempInt));
      $n=$call;
      var $13=$n;
      var $cmp=(($13)|(0))==0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $14=$mrb_addr;
      var $call7=_current_mrb_time($14);
      $tm=$call7;
      label = 7; break;
    case 6: 
      var $15=$mrb_addr;
      var $16=HEAP32[(($ayear)>>2)];
      var $17=HEAP32[(($amonth)>>2)];
      var $18=HEAP32[(($aday)>>2)];
      var $19=HEAP32[(($ahour)>>2)];
      var $20=HEAP32[(($amin)>>2)];
      var $21=HEAP32[(($asec)>>2)];
      var $22=HEAP32[(($ausec)>>2)];
      var $call8=_time_mktime($15, $16, $17, $18, $19, $20, $21, $22, 2);
      $tm=$call8;
      label = 7; break;
    case 7: 
      var $23=$tm;
      var $24=$23;
      var $value10=(($self)|0);
      var $p11=$value10;
      var $25=HEAP32[(($p11)>>2)];
      var $26=$25;
      var $data12=(($26+20)|0);
      HEAP32[(($data12)>>2)]=$24;
      var $27=$agg_result;
      var $28=$self;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_initialize_copy($agg_result, $mrb, $copy) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $copy; $copy = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($copy)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($copy)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($copy)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $src=__stackBase__;
      $mrb_addr=$mrb;
      var $0=$mrb_addr;
      var $call=_mrb_get_args($0, ((101956)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$src,tempInt));
      var $1=$mrb_addr;
      var $call1=_mrb_obj_equal($1, $copy, $src);
      var $tobool=(($call1)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$agg_result;
      var $3=$copy;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      label = 9; break;
    case 4: 
      var $4=$mrb_addr;
      var $5=$mrb_addr;
      var $call2=_mrb_obj_class($5, $copy);
      var $call3=_mrb_obj_is_instance_of($4, $src, $call2);
      var $tobool4=(($call3)|(0))!=0;
      if ($tobool4) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $6=$mrb_addr;
      var $7=$mrb_addr;
      var $call6=_mrb_class_get($7, ((101732)|0));
      _mrb_raise($6, $call6, ((101240)|0));
      label = 6; break;
    case 6: 
      var $value=(($copy)|0);
      var $p=$value;
      var $8=HEAP32[(($p)>>2)];
      var $9=$8;
      var $data=(($9+20)|0);
      var $10=HEAP32[(($data)>>2)];
      var $tobool8=(($10)|(0))!=0;
      if ($tobool8) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $11=$mrb_addr;
      var $call10=_mrb_malloc($11, 56);
      var $value11=(($copy)|0);
      var $p12=$value11;
      var $12=HEAP32[(($p12)>>2)];
      var $13=$12;
      var $data13=(($13+20)|0);
      HEAP32[(($data13)>>2)]=$call10;
      var $value14=(($copy)|0);
      var $p15=$value14;
      var $14=HEAP32[(($p15)>>2)];
      var $15=$14;
      var $type=(($15+16)|0);
      HEAP32[(($type)>>2)]=77360;
      label = 8; break;
    case 8: 
      var $value17=(($copy)|0);
      var $p18=$value17;
      var $16=HEAP32[(($p18)>>2)];
      var $17=$16;
      var $data19=(($17+20)|0);
      var $18=HEAP32[(($data19)>>2)];
      var $19=$18;
      var $value20=(($src)|0);
      var $p21=$value20;
      var $20=HEAP32[(($p21)>>2)];
      var $21=$20;
      var $data22=(($21+20)|0);
      var $22=HEAP32[(($data22)>>2)];
      var $23=$22;
      var $24=$19;
      var $25=$23;
      assert(56 % 1 === 0);_memcpy($24, $25, 56);
      var $26=$agg_result;
      var $27=$copy;
      assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_free($mrb, $ptr) {
  var label = 0;
  var $mrb_addr;
  var $ptr_addr;
  $mrb_addr=$mrb;
  $ptr_addr=$ptr;
  var $0=$mrb_addr;
  var $1=$ptr_addr;
  _mrb_free($0, $1);
  return;
}
function _current_mrb_time($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $tm;
  var $tv=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_malloc($0, 56);
  var $1=$call;
  $tm=$1;
  var $call1=_gettimeofday($tv, 0);
  var $tv_sec=(($tv)|0);
  var $2=HEAP32[(($tv_sec)>>2)];
  var $3=$tm;
  var $sec=(($3)|0);
  HEAP32[(($sec)>>2)]=$2;
  var $tv_usec=(($tv+4)|0);
  var $4=HEAP32[(($tv_usec)>>2)];
  var $5=$tm;
  var $usec=(($5+4)|0);
  HEAP32[(($usec)>>2)]=$4;
  var $6=$tm;
  var $timezone=(($6+8)|0);
  HEAP32[(($timezone)>>2)]=2;
  var $7=$tm;
  var $call2=_mrb_time_update_datetime($7);
  var $8=$tm;
  STACKTOP = __stackBase__;
  return $8;
}
function _time_mktime($mrb, $ayear, $amonth, $aday, $ahour, $amin, $asec, $ausec, $timezone) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 44)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ayear_addr;
      var $amonth_addr;
      var $aday_addr;
      var $ahour_addr;
      var $amin_addr;
      var $asec_addr;
      var $ausec_addr;
      var $timezone_addr;
      var $nowsecs;
      var $nowtime=__stackBase__;
      $mrb_addr=$mrb;
      $ayear_addr=$ayear;
      $amonth_addr=$amonth;
      $aday_addr=$aday;
      $ahour_addr=$ahour;
      $amin_addr=$amin;
      $asec_addr=$asec;
      $ausec_addr=$ausec;
      $timezone_addr=$timezone;
      var $0=$nowtime;
      _memset($0, 0, 44);
      var $1=$ayear_addr;
      var $sub=((($1)-(1900))|0);
      var $tm_year=(($nowtime+20)|0);
      HEAP32[(($tm_year)>>2)]=$sub;
      var $2=$amonth_addr;
      var $sub1=((($2)-(1))|0);
      var $tm_mon=(($nowtime+16)|0);
      HEAP32[(($tm_mon)>>2)]=$sub1;
      var $3=$aday_addr;
      var $tm_mday=(($nowtime+12)|0);
      HEAP32[(($tm_mday)>>2)]=$3;
      var $4=$ahour_addr;
      var $tm_hour=(($nowtime+8)|0);
      HEAP32[(($tm_hour)>>2)]=$4;
      var $5=$amin_addr;
      var $tm_min=(($nowtime+4)|0);
      HEAP32[(($tm_min)>>2)]=$5;
      var $6=$asec_addr;
      var $tm_sec=(($nowtime)|0);
      HEAP32[(($tm_sec)>>2)]=$6;
      var $tm_isdst=(($nowtime+32)|0);
      HEAP32[(($tm_isdst)>>2)]=-1;
      var $7=$timezone_addr;
      var $cmp=(($7)|(0))==1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $call=_my_timgm($nowtime);
      $nowsecs=$call;
      label = 5; break;
    case 4: 
      var $call2=_mktime($nowtime);
      $nowsecs=$call2;
      label = 5; break;
    case 5: 
      var $8=$nowsecs;
      var $cmp3=(($8)|(0)) < 0;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $9=$mrb_addr;
      var $10=$mrb_addr;
      var $call5=_mrb_class_get($10, ((100708)|0));
      _mrb_raise($9, $call5, ((100444)|0));
      label = 7; break;
    case 7: 
      var $11=$mrb_addr;
      var $12=$nowsecs;
      var $conv=(($12)|(0));
      var $13=$ausec_addr;
      var $conv7=(($13)|(0));
      var $14=$timezone_addr;
      var $call8=_mrb_time_alloc($11, $conv, $conv7, $14);
      STACKTOP = __stackBase__;
      return $call8;
    default: assert(0, "bad label: " + label);
  }
}
function _my_timgm($tm) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $tm_addr;
      var $r;
      var $i;
      var $nday;
      $tm_addr=$tm;
      $r=0;
      var $0=$tm_addr;
      var $tm_year=(($0+20)|0);
      var $1=HEAP32[(($tm_year)>>2)];
      var $add=((($1)+(1900))|0);
      var $call=_is_leapyear($add);
      var $arrayidx=((59980+((($call)*(48))&-1))|0);
      var $arraydecay=(($arrayidx)|0);
      $nday=$arraydecay;
      $i=70;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $3=$tm_addr;
      var $tm_year1=(($3+20)|0);
      var $4=HEAP32[(($tm_year1)>>2)];
      var $cmp=(($2)|(0)) < (($4)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $5=$i;
      var $add2=((($5)+(1900))|0);
      var $call3=_is_leapyear($add2);
      var $tobool=(($call3)|(0))!=0;
      var $cond=$tobool ? 31622400 : 31536000;
      var $6=$r;
      var $add4=((($6)+($cond))|0);
      $r=$add4;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $inc=((($7)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $8=$i;
      var $9=$tm_addr;
      var $tm_mon=(($9+16)|0);
      var $10=HEAP32[(($tm_mon)>>2)];
      var $cmp6=(($8)|(0)) < (($10)|(0));
      if ($cmp6) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $11=$i;
      var $12=$nday;
      var $arrayidx8=(($12+($11<<2))|0);
      var $13=HEAP32[(($arrayidx8)>>2)];
      var $mul=((($13)*(24))&-1);
      var $mul9=((($mul)*(60))&-1);
      var $mul10=((($mul9)*(60))&-1);
      var $14=$r;
      var $add11=((($14)+($mul10))|0);
      $r=$add11;
      label = 9; break;
    case 9: 
      var $15=$i;
      var $inc13=((($15)+(1))|0);
      $i=$inc13;
      label = 7; break;
    case 10: 
      var $16=$tm_addr;
      var $tm_mday=(($16+12)|0);
      var $17=HEAP32[(($tm_mday)>>2)];
      var $sub=((($17)-(1))|0);
      var $mul15=((($sub)*(24))&-1);
      var $mul16=((($mul15)*(60))&-1);
      var $mul17=((($mul16)*(60))&-1);
      var $18=$r;
      var $add18=((($18)+($mul17))|0);
      $r=$add18;
      var $19=$tm_addr;
      var $tm_hour=(($19+8)|0);
      var $20=HEAP32[(($tm_hour)>>2)];
      var $mul19=((($20)*(60))&-1);
      var $mul20=((($mul19)*(60))&-1);
      var $21=$r;
      var $add21=((($21)+($mul20))|0);
      $r=$add21;
      var $22=$tm_addr;
      var $tm_min=(($22+4)|0);
      var $23=HEAP32[(($tm_min)>>2)];
      var $mul22=((($23)*(60))&-1);
      var $24=$r;
      var $add23=((($24)+($mul22))|0);
      $r=$add23;
      var $25=$tm_addr;
      var $tm_sec=(($25)|0);
      var $26=HEAP32[(($tm_sec)>>2)];
      var $27=$r;
      var $add24=((($27)+($26))|0);
      $r=$add24;
      var $28=$r;
      return $28;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_alloc($mrb, $sec, $usec, $timezone) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $sec_addr;
      var $usec_addr;
      var $timezone_addr;
      var $tm;
      $mrb_addr=$mrb;
      $sec_addr=$sec;
      $usec_addr=$usec;
      $timezone_addr=$timezone;
      var $0=$mrb_addr;
      var $call=_mrb_malloc($0, 56);
      var $1=$call;
      $tm=$1;
      var $2=$sec_addr;
      var $conv=(($2)&-1);
      var $3=$tm;
      var $sec1=(($3)|0);
      HEAP32[(($sec1)>>2)]=$conv;
      var $4=$sec_addr;
      var $5=$tm;
      var $sec2=(($5)|0);
      var $6=HEAP32[(($sec2)>>2)];
      var $conv3=(($6)|(0));
      var $sub=($4)-($conv3);
      var $mul=($sub)*(1000000);
      var $7=$usec_addr;
      var $add=($mul)+($7);
      var $conv4=(($add)&-1);
      var $8=$tm;
      var $usec5=(($8+4)|0);
      HEAP32[(($usec5)>>2)]=$conv4;
      label = 3; break;
    case 3: 
      var $9=$tm;
      var $usec6=(($9+4)|0);
      var $10=HEAP32[(($usec6)>>2)];
      var $cmp=(($10)|(0)) < 0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $11=$tm;
      var $sec8=(($11)|0);
      var $12=HEAP32[(($sec8)>>2)];
      var $dec=((($12)-(1))|0);
      HEAP32[(($sec8)>>2)]=$dec;
      var $13=$tm;
      var $usec9=(($13+4)|0);
      var $14=HEAP32[(($usec9)>>2)];
      var $conv10=(($14)|(0));
      var $add11=($conv10)+(1000000);
      var $conv12=(($add11)&-1);
      HEAP32[(($usec9)>>2)]=$conv12;
      label = 3; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $15=$tm;
      var $usec14=(($15+4)|0);
      var $16=HEAP32[(($usec14)>>2)];
      var $conv15=(($16)|(0));
      var $cmp16=$conv15 > 1000000;
      if ($cmp16) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $17=$tm;
      var $sec19=(($17)|0);
      var $18=HEAP32[(($sec19)>>2)];
      var $inc=((($18)+(1))|0);
      HEAP32[(($sec19)>>2)]=$inc;
      var $19=$tm;
      var $usec20=(($19+4)|0);
      var $20=HEAP32[(($usec20)>>2)];
      var $conv21=(($20)|(0));
      var $sub22=($conv21)-(1000000);
      var $conv23=(($sub22)&-1);
      HEAP32[(($usec20)>>2)]=$conv23;
      label = 6; break;
    case 8: 
      var $21=$timezone_addr;
      var $22=$tm;
      var $timezone25=(($22+8)|0);
      HEAP32[(($timezone25)>>2)]=$21;
      var $23=$tm;
      var $call26=_mrb_time_update_datetime($23);
      var $24=$tm;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_update_datetime($self) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $self_addr;
      var $aid;
      $self_addr=$self;
      var $0=$self_addr;
      var $timezone=(($0+8)|0);
      var $1=HEAP32[(($timezone)>>2)];
      var $cmp=(($1)|(0))==1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$self_addr;
      var $sec=(($2)|0);
      var $3=$self_addr;
      var $datetime=(($3+12)|0);
      var $call=_gmtime_r($sec, $datetime);
      $aid=$call;
      label = 5; break;
    case 4: 
      var $4=$self_addr;
      var $sec1=(($4)|0);
      var $5=$self_addr;
      var $datetime2=(($5+12)|0);
      var $call3=_localtime_r($sec1, $datetime2);
      $aid=$call3;
      label = 5; break;
    case 5: 
      var $6=$aid;
      var $tobool=(($6)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 6; break; }
    case 6: 
      $retval=0;
      label = 8; break;
    case 7: 
      var $7=$self_addr;
      $retval=$7;
      label = 8; break;
    case 8: 
      var $8=$retval;
      return $8;
    default: assert(0, "bad label: " + label);
  }
}
function _is_leapyear($y) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $y_addr;
      $y_addr=$y;
      var $0=$y_addr;
      var $rem=((($0)>>>(0)))%(4);
      var $cmp=(($rem)|(0))==0;
      if ($cmp) { label = 3; break; } else { var $4 = 0;label = 6; break; }
    case 3: 
      var $1=$y_addr;
      var $rem1=((($1)>>>(0)))%(100);
      var $cmp2=(($rem1)|(0))!=0;
      if ($cmp2) { var $3 = 1;label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$y_addr;
      var $rem3=((($2)>>>(0)))%(400);
      var $cmp4=(($rem3)|(0))==0;
      var $3 = $cmp4;label = 5; break;
    case 5: 
      var $3;
      var $4 = $3;label = 6; break;
    case 6: 
      var $4;
      var $land_ext=(($4)&(1));
      return $land_ext;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_data_get_ptr($mrb, $obj, $type) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $mrb_addr;
      var $type_addr;
      $mrb_addr=$mrb;
      $type_addr=$type;
      var $tt=(($obj+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)>>>(0)) <= 7;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $tt1=(($obj+8)|0);
      var $1=HEAP32[(($tt1)>>2)];
      var $cmp2=(($1)|(0))!=21;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $retval=0;
      label = 8; break;
    case 5: 
      var $value=(($obj)|0);
      var $p=$value;
      var $2=HEAP32[(($p)>>2)];
      var $3=$2;
      var $type3=(($3+16)|0);
      var $4=HEAP32[(($type3)>>2)];
      var $5=$type_addr;
      var $cmp4=(($4)|(0))!=(($5)|(0));
      if ($cmp4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $retval=0;
      label = 8; break;
    case 7: 
      var $value7=(($obj)|0);
      var $p8=$value7;
      var $6=HEAP32[(($p8)>>2)];
      var $7=$6;
      var $data=(($7+20)|0);
      var $8=HEAP32[(($data)>>2)];
      $retval=$8;
      label = 8; break;
    case 8: 
      var $9=$retval;
      STACKTOP = __stackBase__;
      return $9;
    default: assert(0, "bad label: " + label);
  }
}
function _float_id($f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $f_addr=__stackBase__;
      var $p;
      var $len;
      var $id;
      (HEAPF64[(tempDoublePtr)>>3]=$f,HEAP32[(($f_addr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f_addr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $0=$f_addr;
      $p=$0;
      $len=8;
      $id=0;
      label = 3; break;
    case 3: 
      var $1=$len;
      var $dec=((($1)-(1))|0);
      $len=$dec;
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$id;
      var $mul=((($2)*(65599))&-1);
      var $3=$p;
      var $4=HEAP8[($3)];
      var $conv=(($4 << 24) >> 24);
      var $add=((($mul)+($conv))|0);
      $id=$add;
      var $5=$p;
      var $incdec_ptr=(($5+1)|0);
      $p=$incdec_ptr;
      label = 3; break;
    case 5: 
      var $6=$id;
      var $7=$id;
      var $shr=$7 >> 5;
      var $add1=((($6)+($shr))|0);
      $id=$add1;
      var $8=$id;
      STACKTOP = __stackBase__;
      return $8;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_random_init_genrand($t, $s) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $s_addr;
      $t_addr=$t;
      $s_addr=$s;
      var $0=$s_addr;
      var $1=$t_addr;
      var $mt=(($1)|0);
      var $arrayidx=(($mt)|0);
      HEAP32[(($arrayidx)>>2)]=$0;
      var $2=$t_addr;
      var $mti=(($2+2496)|0);
      HEAP32[(($mti)>>2)]=1;
      label = 3; break;
    case 3: 
      var $3=$t_addr;
      var $mti1=(($3+2496)|0);
      var $4=HEAP32[(($mti1)>>2)];
      var $cmp=(($4)|(0)) < 624;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $5=$t_addr;
      var $mti2=(($5+2496)|0);
      var $6=HEAP32[(($mti2)>>2)];
      var $sub=((($6)-(1))|0);
      var $7=$t_addr;
      var $mt3=(($7)|0);
      var $arrayidx4=(($mt3+($sub<<2))|0);
      var $8=HEAP32[(($arrayidx4)>>2)];
      var $9=$t_addr;
      var $mti5=(($9+2496)|0);
      var $10=HEAP32[(($mti5)>>2)];
      var $sub6=((($10)-(1))|0);
      var $11=$t_addr;
      var $mt7=(($11)|0);
      var $arrayidx8=(($mt7+($sub6<<2))|0);
      var $12=HEAP32[(($arrayidx8)>>2)];
      var $shr=$12 >>> 30;
      var $xor=$8 ^ $shr;
      var $mul=Math.imul($xor,1812433253);
      var $13=$t_addr;
      var $mti9=(($13+2496)|0);
      var $14=HEAP32[(($mti9)>>2)];
      var $add=((($mul)+($14))|0);
      var $15=$t_addr;
      var $mti10=(($15+2496)|0);
      var $16=HEAP32[(($mti10)>>2)];
      var $17=$t_addr;
      var $mt11=(($17)|0);
      var $arrayidx12=(($mt11+($16<<2))|0);
      HEAP32[(($arrayidx12)>>2)]=$add;
      var $18=$t_addr;
      var $mti13=(($18+2496)|0);
      var $19=HEAP32[(($mti13)>>2)];
      var $20=$t_addr;
      var $mt14=(($20)|0);
      var $arrayidx15=(($mt14+($19<<2))|0);
      var $21=HEAP32[(($arrayidx15)>>2)];
      HEAP32[(($arrayidx15)>>2)]=$21;
      label = 5; break;
    case 5: 
      var $22=$t_addr;
      var $mti16=(($22+2496)|0);
      var $23=HEAP32[(($mti16)>>2)];
      var $inc=((($23)+(1))|0);
      HEAP32[(($mti16)>>2)]=$inc;
      label = 3; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1896($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v=__stackBase__;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=0;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=0;
      label = 4; break;
    case 4: 
      var $0=$agg_result;
      var $1=$v;
      assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value1897($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $v=__stackBase__;
      $i_addr=$i;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=3;
      var $0=$i_addr;
      var $value=(($v)|0);
      var $i1=$value;
      HEAP32[(($i1)>>2)]=$0;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_float_value1898($agg_result, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $f_addr;
      var $v=__stackBase__;
      $f_addr=$f;
      label = 3; break;
    case 3: 
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=6;
      var $0=$f_addr;
      var $value=(($v)|0);
      var $f1=$value;
      (HEAPF64[(tempDoublePtr)>>3]=$0,HEAP32[(($f1)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f1)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value1899($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $boolean_addr;
      var $v=__stackBase__;
      $boolean_addr=$boolean;
      label = 3; break;
    case 3: 
      var $0=$boolean_addr;
      var $conv=(($0)&(255));
      var $tobool=(($conv)|(0))!=0;
      var $cond=$tobool ? 2 : 0;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$cond;
      var $value=(($v)|0);
      var $i=$value;
      HEAP32[(($i)>>2)]=1;
      label = 4; break;
    case 4: 
      var $1=$agg_result;
      var $2=$v;
      assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_wrap($agg_result, $mrb, $tc, $tm) {
  var label = 0;
  var $mrb_addr;
  var $tc_addr;
  var $tm_addr;
  $mrb_addr=$mrb;
  $tc_addr=$tc;
  $tm_addr=$tm;
  var $0=$mrb_addr;
  var $1=$tc_addr;
  var $2=$tm_addr;
  var $3=$2;
  var $call=_mrb_data_object_alloc($0, $1, $3, 77360);
  var $4=$call;
  _mrb_obj_value1900($agg_result, $4);
  return;
}
function _mrb_obj_value1900($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $v=__stackBase__;
      var $b;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$0;
      $b=$1;
      label = 3; break;
    case 3: 
      var $2=$b;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $bf_clear=$4 & 255;
      var $tt=(($v+8)|0);
      HEAP32[(($tt)>>2)]=$bf_clear;
      var $5=$p_addr;
      var $value=(($v)|0);
      var $p1=$value;
      HEAP32[(($p1)>>2)]=$5;
      label = 4; break;
    case 4: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_make($agg_result, $mrb, $c, $sec, $usec, $timezone) {
  var label = 0;
  var $mrb_addr;
  var $c_addr;
  var $sec_addr;
  var $usec_addr;
  var $timezone_addr;
  $mrb_addr=$mrb;
  $c_addr=$c;
  $sec_addr=$sec;
  $usec_addr=$usec;
  $timezone_addr=$timezone;
  var $0=$mrb_addr;
  var $1=$c_addr;
  var $2=$mrb_addr;
  var $3=$sec_addr;
  var $4=$usec_addr;
  var $5=$timezone_addr;
  var $call=_mrb_time_alloc($2, $3, $4, $5);
  _mrb_time_wrap($agg_result, $0, $1, $call);
  return;
}
function _mrb_init_mrblib($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $mrb_addr;
  var $tmp=__stackBase__;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  _mrb_load_irep($tmp, $0, ((62592)|0));
  STACKTOP = __stackBase__;
  return;
}
function _mrb_print_backtrace($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $ci;
      var $ciidx;
      var $filename;
      var $method;
      var $sep;
      var $i;
      var $line;
      var $tmp=__stackBase__;
      var $irep;
      var $pc;
      var $tmp30=(__stackBase__)+(12);
      var $cn;
      $mrb_addr=$mrb;
      var $call=_printf(((109048)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $0=$mrb_addr;
      var $1=$mrb_addr;
      var $exc=(($1+16)|0);
      var $2=HEAP32[(($exc)>>2)];
      var $3=$mrb_addr;
      var $call1=_mrb_intern1914($3, ((112532)|0));
      _mrb_obj_iv_get($tmp, $0, $2, $call1);
      var $value=(($tmp)|0);
      var $i2=$value;
      var $4=HEAP32[(($i2)>>2)];
      $ciidx=$4;
      var $5=$ciidx;
      var $6=$mrb_addr;
      var $c=(($6+8)|0);
      var $7=HEAP32[(($c)>>2)];
      var $ciend=(($7+24)|0);
      var $8=HEAP32[(($ciend)>>2)];
      var $9=$mrb_addr;
      var $c3=(($9+8)|0);
      var $10=HEAP32[(($c3)>>2)];
      var $cibase=(($10+20)|0);
      var $11=HEAP32[(($cibase)>>2)];
      var $sub_ptr_lhs_cast=$8;
      var $sub_ptr_rhs_cast=$11;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|(0)))/(44))&-1);
      var $cmp=(($5)|(0)) >= (($sub_ptr_div)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $ciidx=10;
      label = 4; break;
    case 4: 
      var $12=$ciidx;
      $i=$12;
      label = 5; break;
    case 5: 
      var $13=$i;
      var $cmp4=(($13)|(0)) >= 0;
      if ($cmp4) { label = 6; break; } else { label = 32; break; }
    case 6: 
      var $14=$i;
      var $15=$mrb_addr;
      var $c5=(($15+8)|0);
      var $16=HEAP32[(($c5)>>2)];
      var $cibase6=(($16+20)|0);
      var $17=HEAP32[(($cibase6)>>2)];
      var $arrayidx=(($17+((($14)*(44))&-1))|0);
      $ci=$arrayidx;
      $filename=((107632)|0);
      $line=-1;
      var $18=$ci;
      var $proc=(($18+4)|0);
      var $19=HEAP32[(($proc)>>2)];
      var $20=$19;
      var $21=HEAP32[(($20)>>2)];
      var $22=$21 >>> 11;
      var $bf_clear=$22 & 2097151;
      var $and=$bf_clear & 128;
      var $cmp7=(($and)|(0))!=0;
      if ($cmp7) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 31; break;
    case 8: 
      var $23=$ci;
      var $proc10=(($23+4)|0);
      var $24=HEAP32[(($proc10)>>2)];
      var $body=(($24+12)|0);
      var $irep11=$body;
      var $25=HEAP32[(($irep11)>>2)];
      $irep=$25;
      var $26=$irep;
      var $filename12=(($26+24)|0);
      var $27=HEAP32[(($filename12)>>2)];
      var $cmp13=(($27)|(0))!=0;
      if ($cmp13) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $28=$irep;
      var $filename15=(($28+24)|0);
      var $29=HEAP32[(($filename15)>>2)];
      $filename=$29;
      label = 10; break;
    case 10: 
      var $30=$irep;
      var $lines=(($30+28)|0);
      var $31=HEAP32[(($lines)>>2)];
      var $cmp17=(($31)|(0))!=0;
      if ($cmp17) { label = 11; break; } else { label = 18; break; }
    case 11: 
      var $32=$i;
      var $add=((($32)+(1))|0);
      var $33=$ciidx;
      var $cmp20=(($add)|(0)) <= (($33)|(0));
      if ($cmp20) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $34=$i;
      var $add22=((($34)+(1))|0);
      var $35=$mrb_addr;
      var $c23=(($35+8)|0);
      var $36=HEAP32[(($c23)>>2)];
      var $cibase24=(($36+20)|0);
      var $37=HEAP32[(($cibase24)>>2)];
      var $arrayidx25=(($37+((($add22)*(44))&-1))|0);
      var $pc26=(($arrayidx25+20)|0);
      var $38=HEAP32[(($pc26)>>2)];
      $pc=$38;
      label = 14; break;
    case 13: 
      var $39=$mrb_addr;
      var $40=$mrb_addr;
      var $exc28=(($40+16)|0);
      var $41=HEAP32[(($exc28)>>2)];
      var $42=$mrb_addr;
      var $call29=_mrb_intern1914($42, ((104080)|0));
      _mrb_obj_iv_get($tmp30, $39, $41, $call29);
      var $value31=(($tmp30)|0);
      var $p=$value31;
      var $43=HEAP32[(($p)>>2)];
      var $44=$43;
      $pc=$44;
      label = 14; break;
    case 14: 
      var $45=$irep;
      var $iseq=(($45+12)|0);
      var $46=HEAP32[(($iseq)>>2)];
      var $47=$pc;
      var $cmp33=(($46)>>>(0)) <= (($47)>>>(0));
      if ($cmp33) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $48=$pc;
      var $49=$irep;
      var $iseq34=(($49+12)|0);
      var $50=HEAP32[(($iseq34)>>2)];
      var $51=$irep;
      var $ilen=(($51+32)|0);
      var $52=HEAP32[(($ilen)>>2)];
      var $add_ptr=(($50+($52<<2))|0);
      var $cmp35=(($48)>>>(0)) < (($add_ptr)>>>(0));
      if ($cmp35) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $53=$pc;
      var $54=$irep;
      var $iseq37=(($54+12)|0);
      var $55=HEAP32[(($iseq37)>>2)];
      var $sub_ptr_lhs_cast38=$53;
      var $sub_ptr_rhs_cast39=$55;
      var $sub_ptr_sub40=((($sub_ptr_lhs_cast38)-($sub_ptr_rhs_cast39))|0);
      var $sub_ptr_div41=((((($sub_ptr_sub40)|(0)))/(4))&-1);
      var $sub=((($sub_ptr_div41)-(1))|0);
      var $56=$irep;
      var $lines42=(($56+28)|0);
      var $57=HEAP32[(($lines42)>>2)];
      var $arrayidx43=(($57+($sub<<1))|0);
      var $58=HEAP16[(($arrayidx43)>>1)];
      var $conv=(($58)&(65535));
      $line=$conv;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $59=$line;
      var $cmp47=(($59)|(0))==-1;
      if ($cmp47) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 31; break;
    case 21: 
      var $60=$ci;
      var $target_class=(($60+28)|0);
      var $61=HEAP32[(($target_class)>>2)];
      var $62=$ci;
      var $proc51=(($62+4)|0);
      var $63=HEAP32[(($proc51)>>2)];
      var $target_class52=(($63+16)|0);
      var $64=HEAP32[(($target_class52)>>2)];
      var $cmp53=(($61)|(0))==(($64)|(0));
      if ($cmp53) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $sep=((101376)|0);
      label = 24; break;
    case 23: 
      $sep=((98764)|0);
      label = 24; break;
    case 24: 
      var $65=$mrb_addr;
      var $66=$ci;
      var $mid=(($66)|0);
      var $67=HEAP16[(($mid)>>1)];
      var $call58=_mrb_sym2name($65, $67);
      $method=$call58;
      var $68=$method;
      var $tobool=(($68)|(0))!=0;
      if ($tobool) { label = 25; break; } else { label = 29; break; }
    case 25: 
      var $69=$mrb_addr;
      var $70=$ci;
      var $proc61=(($70+4)|0);
      var $71=HEAP32[(($proc61)>>2)];
      var $target_class62=(($71+16)|0);
      var $72=HEAP32[(($target_class62)>>2)];
      var $call63=_mrb_class_name($69, $72);
      $cn=$call63;
      var $73=$cn;
      var $tobool64=(($73)|(0))!=0;
      if ($tobool64) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $74=$i;
      var $75=$filename;
      var $76=$line;
      var $77=$cn;
      var $78=$sep;
      var $79=$method;
      var $call66=_printf(((96792)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$74,HEAP32[(((tempInt)+(4))>>2)]=$75,HEAP32[(((tempInt)+(8))>>2)]=$76,HEAP32[(((tempInt)+(12))>>2)]=$77,HEAP32[(((tempInt)+(16))>>2)]=$78,HEAP32[(((tempInt)+(20))>>2)]=$79,tempInt));
      label = 28; break;
    case 27: 
      var $80=$i;
      var $81=$filename;
      var $82=$line;
      var $83=$method;
      var $call68=_printf(((95560)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$80,HEAP32[(((tempInt)+(4))>>2)]=$81,HEAP32[(((tempInt)+(8))>>2)]=$82,HEAP32[(((tempInt)+(12))>>2)]=$83,tempInt));
      label = 28; break;
    case 28: 
      label = 30; break;
    case 29: 
      var $84=$i;
      var $85=$filename;
      var $86=$line;
      var $call71=_printf(((94624)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$84,HEAP32[(((tempInt)+(4))>>2)]=$85,HEAP32[(((tempInt)+(8))>>2)]=$86,tempInt));
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $87=$i;
      var $dec=((($87)-(1))|0);
      $i=$dec;
      label = 5; break;
    case 32: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern1914($mrb, $cstr) {
  var label = 0;
  var $mrb_addr;
  var $cstr_addr;
  $mrb_addr=$mrb;
  $cstr_addr=$cstr;
  var $0=$mrb_addr;
  var $1=$cstr_addr;
  var $call=_mrb_intern_cstr($0, $1);
  return $call;
}
function _mrb_init_comparable($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_define_module($0, ((108920)|0));
  return;
}
function _mrb_init_enumerable($mrb) {
  var label = 0;
  var $mrb_addr;
  $mrb_addr=$mrb;
  var $0=$mrb_addr;
  var $call=_mrb_define_module($0, ((108860)|0));
  return;
}
function _mrb_data_object_alloc($mrb, $klass, $ptr, $type) {
  var label = 0;
  var $mrb_addr;
  var $klass_addr;
  var $ptr_addr;
  var $type_addr;
  var $data;
  $mrb_addr=$mrb;
  $klass_addr=$klass;
  $ptr_addr=$ptr;
  $type_addr=$type;
  var $0=$mrb_addr;
  var $1=$klass_addr;
  var $call=_mrb_obj_alloc($0, 21, $1);
  var $2=$call;
  $data=$2;
  var $3=$ptr_addr;
  var $4=$data;
  var $data1=(($4+20)|0);
  HEAP32[(($data1)>>2)]=$3;
  var $5=$type_addr;
  var $6=$data;
  var $type2=(($6+16)|0);
  HEAP32[(($type2)>>2)]=$5;
  var $7=$data;
  return $7;
}
function _mrb_data_check_type($mrb, $obj, $type) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $type_addr;
      var $t2;
      var $agg_tmp=__stackBase__;
      var $agg_tmp10=(__stackBase__)+(12);
      $mrb_addr=$mrb;
      $type_addr=$type;
      var $tt=(($obj+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      var $cmp=(($0)>>>(0)) <= 7;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $tt1=(($obj+8)|0);
      var $1=HEAP32[(($tt1)>>2)];
      var $cmp2=(($1)|(0))!=21;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$mrb_addr;
      _mrb_check_type($2, $obj, 21);
      label = 5; break;
    case 5: 
      var $value=(($obj)|0);
      var $p=$value;
      var $3=HEAP32[(($p)>>2)];
      var $4=$3;
      var $type3=(($4+16)|0);
      var $5=HEAP32[(($type3)>>2)];
      var $6=$type_addr;
      var $cmp4=(($5)|(0))!=(($6)|(0));
      if ($cmp4) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $value6=(($obj)|0);
      var $p7=$value6;
      var $7=HEAP32[(($p7)>>2)];
      var $8=$7;
      var $type8=(($8+16)|0);
      var $9=HEAP32[(($type8)>>2)];
      $t2=$9;
      var $10=$t2;
      var $tobool=(($10)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $11=$mrb_addr;
      var $12=$mrb_addr;
      var $call=_mrb_class_get($12, ((108800)|0));
      var $13=$mrb_addr;
      var $14=$t2;
      var $struct_name=(($14)|0);
      var $15=HEAP32[(($struct_name)>>2)];
      _mrb_str_new_cstr($agg_tmp, $13, $15);
      var $16=$mrb_addr;
      var $17=$type_addr;
      var $struct_name11=(($17)|0);
      var $18=HEAP32[(($struct_name11)>>2)];
      _mrb_str_new_cstr($agg_tmp10, $16, $18);
      _mrb_raisef($11, $call, ((112464)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($agg_tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($agg_tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($agg_tmp)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($agg_tmp10)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($agg_tmp10)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($agg_tmp10)+(8))>>2)],tempInt));
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_data_check_and_get($mrb, $obj, $type) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $mrb_addr;
  var $type_addr;
  $mrb_addr=$mrb;
  $type_addr=$type;
  var $0=$mrb_addr;
  var $1=$type_addr;
  _mrb_data_check_type($0, $obj, $1);
  var $value=(($obj)|0);
  var $p=$value;
  var $2=HEAP32[(($p)>>2)];
  var $3=$2;
  var $data=(($3+20)|0);
  var $4=HEAP32[(($data)>>2)];
  STACKTOP = __stackBase__;
  return $4;
}
function _mrb_obj_to_sym($mrb, $name) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $name; $name = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($name)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($name)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($name)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mrb_addr;
      var $tmp=__stackBase__;
      var $id;
      var $tmp2=(__stackBase__)+(12);
      var $tmp4=(__stackBase__)+(24);
      var $tmp5=(__stackBase__)+(36);
      $mrb_addr=$mrb;
      var $tt=(($name+8)|0);
      var $0=HEAP32[(($tt)>>2)];
      if ((($0)|(0))==16) {
        label = 7; break;
      }
      else if ((($0)|(0))==4) {
        label = 8; break;
      }
      else {
      label = 3; break;
      }
    case 3: 
      var $1=$mrb_addr;
      _mrb_check_string_type($tmp2, $1, $name);
      var $2=$tmp;
      var $3=$tmp2;
      assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
      var $tt3=(($tmp+8)|0);
      var $4=HEAP32[(($tt3)>>2)];
      var $cmp=(($4)|(0))==0;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $value=(($tmp)|0);
      var $i=$value;
      var $5=HEAP32[(($i)>>2)];
      var $tobool=(($5)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $6=$mrb_addr;
      _mrb_inspect($tmp4, $6, $name);
      var $7=$tmp;
      var $8=$tmp4;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      var $9=$mrb_addr;
      var $10=$mrb_addr;
      var $call=_mrb_class_get($10, ((108800)|0));
      _mrb_raisef($9, $call, ((104060)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($tmp)+(8))>>2)],tempInt));
      label = 6; break;
    case 6: 
      var $11=$name;
      var $12=$tmp;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      label = 7; break;
    case 7: 
      var $13=$mrb_addr;
      _mrb_str_intern($tmp5, $13, $name);
      var $14=$name;
      var $15=$tmp5;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      label = 8; break;
    case 8: 
      var $value7=(($name)|0);
      var $sym=$value7;
      var $16=HEAP16[(($sym)>>1)];
      STACKTOP = __stackBase__;
      return $16;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_id($obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $tt;
      var $tt1=(($obj+8)|0);
      var $0=HEAP32[(($tt1)>>2)];
      $tt=$0;
      var $1=$tt;
      if ((($1)|(0))==1 | (($1)|(0))==5) {
        label = 3; break;
      }
      else if ((($1)|(0))==0) {
        label = 4; break;
      }
      else if ((($1)|(0))==2) {
        label = 8; break;
      }
      else if ((($1)|(0))==4) {
        label = 9; break;
      }
      else if ((($1)|(0))==3) {
        label = 10; break;
      }
      else if ((($1)|(0))==6) {
        label = 11; break;
      }
      else if ((($1)|(0))==16 | (($1)|(0))==8 | (($1)|(0))==9 | (($1)|(0))==10 | (($1)|(0))==11 | (($1)|(0))==12 | (($1)|(0))==13 | (($1)|(0))==14 | (($1)|(0))==15 | (($1)|(0))==17 | (($1)|(0))==18 | (($1)|(0))==19 | (($1)|(0))==21) {
        label = 12; break;
      }
      else {
      label = 13; break;
      }
    case 3: 
      var $2=$tt;
      var $xor=0 ^ $2;
      $retval=$xor;
      label = 14; break;
    case 4: 
      var $tt3=(($obj+8)|0);
      var $3=HEAP32[(($tt3)>>2)];
      var $cmp=(($3)|(0))==0;
      if ($cmp) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $value=(($obj)|0);
      var $i=$value;
      var $4=HEAP32[(($i)>>2)];
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $5=$tt;
      var $xor4=1 ^ $5;
      $retval=$xor4;
      label = 14; break;
    case 7: 
      var $6=$tt;
      var $xor5=0 ^ $6;
      $retval=$xor5;
      label = 14; break;
    case 8: 
      var $7=$tt;
      var $xor7=1 ^ $7;
      $retval=$xor7;
      label = 14; break;
    case 9: 
      var $value9=(($obj)|0);
      var $sym=$value9;
      var $8=HEAP16[(($sym)>>1)];
      var $conv=(($8 << 16) >> 16);
      var $9=$tt;
      var $xor10=$conv ^ $9;
      $retval=$xor10;
      label = 14; break;
    case 10: 
      var $value12=(($obj)|0);
      var $i13=$value12;
      var $10=HEAP32[(($i13)>>2)];
      var $conv14=(($10)|(0));
      var $call=_float_id($conv14);
      var $xor15=$call ^ 6;
      $retval=$xor15;
      label = 14; break;
    case 11: 
      var $value17=(($obj)|0);
      var $f=$value17;
      var $11=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $call18=_float_id($11);
      var $12=$tt;
      var $xor19=$call18 ^ $12;
      $retval=$xor19;
      label = 14; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $value21=(($obj)|0);
      var $p=$value21;
      var $13=HEAP32[(($p)>>2)];
      var $14=$13;
      var $15=$tt;
      var $xor22=$14 ^ $15;
      $retval=$xor22;
      label = 14; break;
    case 14: 
      var $16=$retval;
      STACKTOP = __stackBase__;
      return $16;
    default: assert(0, "bad label: " + label);
  }
}
function _init_genrand($s) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      $s_addr=$s;
      var $0=$s_addr;
      HEAP32[((((60088)|0))>>2)]=$0;
      HEAP32[((60076)>>2)]=1;
      label = 3; break;
    case 3: 
      var $1=HEAP32[((60076)>>2)];
      var $cmp=(($1)|(0)) < 624;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=HEAP32[((60076)>>2)];
      var $sub=((($2)-(1))|0);
      var $arrayidx=((60088+($sub<<2))|0);
      var $3=HEAP32[(($arrayidx)>>2)];
      var $4=HEAP32[((60076)>>2)];
      var $sub1=((($4)-(1))|0);
      var $arrayidx2=((60088+($sub1<<2))|0);
      var $5=HEAP32[(($arrayidx2)>>2)];
      var $shr=$5 >>> 30;
      var $xor=$3 ^ $shr;
      var $mul=Math.imul($xor,1812433253);
      var $6=HEAP32[((60076)>>2)];
      var $add=((($mul)+($6))|0);
      var $7=HEAP32[((60076)>>2)];
      var $arrayidx3=((60088+($7<<2))|0);
      HEAP32[(($arrayidx3)>>2)]=$add;
      var $8=HEAP32[((60076)>>2)];
      var $arrayidx4=((60088+($8<<2))|0);
      var $9=HEAP32[(($arrayidx4)>>2)];
      HEAP32[(($arrayidx4)>>2)]=$9;
      label = 5; break;
    case 5: 
      var $10=HEAP32[((60076)>>2)];
      var $inc=((($10)+(1))|0);
      HEAP32[((60076)>>2)]=$inc;
      label = 3; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_random_genrand_int32($t) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $y;
      var $kk;
      $t_addr=$t;
      var $0=$t_addr;
      var $mti=(($0+2496)|0);
      var $1=HEAP32[(($mti)>>2)];
      var $cmp=(($1)|(0)) >= 624;
      if ($cmp) { label = 3; break; } else { label = 14; break; }
    case 3: 
      var $2=$t_addr;
      var $mti1=(($2+2496)|0);
      var $3=HEAP32[(($mti1)>>2)];
      var $cmp2=(($3)|(0))==625;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$t_addr;
      _mrb_random_init_genrand($4, 5489);
      label = 5; break;
    case 5: 
      $kk=0;
      label = 6; break;
    case 6: 
      var $5=$kk;
      var $cmp4=(($5)|(0)) < 227;
      if ($cmp4) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $6=$kk;
      var $7=$t_addr;
      var $mt=(($7)|0);
      var $arrayidx=(($mt+($6<<2))|0);
      var $8=HEAP32[(($arrayidx)>>2)];
      var $and=$8 & -2147483648;
      var $9=$kk;
      var $add=((($9)+(1))|0);
      var $10=$t_addr;
      var $mt5=(($10)|0);
      var $arrayidx6=(($mt5+($add<<2))|0);
      var $11=HEAP32[(($arrayidx6)>>2)];
      var $and7=$11 & 2147483647;
      var $or=$and | $and7;
      $y=$or;
      var $12=$kk;
      var $add8=((($12)+(397))|0);
      var $13=$t_addr;
      var $mt9=(($13)|0);
      var $arrayidx10=(($mt9+($add8<<2))|0);
      var $14=HEAP32[(($arrayidx10)>>2)];
      var $15=$y;
      var $shr=$15 >>> 1;
      var $xor=$14 ^ $shr;
      var $16=$y;
      var $and11=$16 & 1;
      var $arrayidx12=((77732+($and11<<2))|0);
      var $17=HEAP32[(($arrayidx12)>>2)];
      var $xor13=$xor ^ $17;
      var $18=$kk;
      var $19=$t_addr;
      var $mt14=(($19)|0);
      var $arrayidx15=(($mt14+($18<<2))|0);
      HEAP32[(($arrayidx15)>>2)]=$xor13;
      label = 8; break;
    case 8: 
      var $20=$kk;
      var $inc=((($20)+(1))|0);
      $kk=$inc;
      label = 6; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $21=$kk;
      var $cmp17=(($21)|(0)) < 623;
      if ($cmp17) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $22=$kk;
      var $23=$t_addr;
      var $mt19=(($23)|0);
      var $arrayidx20=(($mt19+($22<<2))|0);
      var $24=HEAP32[(($arrayidx20)>>2)];
      var $and21=$24 & -2147483648;
      var $25=$kk;
      var $add22=((($25)+(1))|0);
      var $26=$t_addr;
      var $mt23=(($26)|0);
      var $arrayidx24=(($mt23+($add22<<2))|0);
      var $27=HEAP32[(($arrayidx24)>>2)];
      var $and25=$27 & 2147483647;
      var $or26=$and21 | $and25;
      $y=$or26;
      var $28=$kk;
      var $add27=((($28)-(227))|0);
      var $29=$t_addr;
      var $mt28=(($29)|0);
      var $arrayidx29=(($mt28+($add27<<2))|0);
      var $30=HEAP32[(($arrayidx29)>>2)];
      var $31=$y;
      var $shr30=$31 >>> 1;
      var $xor31=$30 ^ $shr30;
      var $32=$y;
      var $and32=$32 & 1;
      var $arrayidx33=((77732+($and32<<2))|0);
      var $33=HEAP32[(($arrayidx33)>>2)];
      var $xor34=$xor31 ^ $33;
      var $34=$kk;
      var $35=$t_addr;
      var $mt35=(($35)|0);
      var $arrayidx36=(($mt35+($34<<2))|0);
      HEAP32[(($arrayidx36)>>2)]=$xor34;
      label = 12; break;
    case 12: 
      var $36=$kk;
      var $inc38=((($36)+(1))|0);
      $kk=$inc38;
      label = 10; break;
    case 13: 
      var $37=$t_addr;
      var $mt40=(($37)|0);
      var $arrayidx41=(($mt40+2492)|0);
      var $38=HEAP32[(($arrayidx41)>>2)];
      var $and42=$38 & -2147483648;
      var $39=$t_addr;
      var $mt43=(($39)|0);
      var $arrayidx44=(($mt43)|0);
      var $40=HEAP32[(($arrayidx44)>>2)];
      var $and45=$40 & 2147483647;
      var $or46=$and42 | $and45;
      $y=$or46;
      var $41=$t_addr;
      var $mt47=(($41)|0);
      var $arrayidx48=(($mt47+1584)|0);
      var $42=HEAP32[(($arrayidx48)>>2)];
      var $43=$y;
      var $shr49=$43 >>> 1;
      var $xor50=$42 ^ $shr49;
      var $44=$y;
      var $and51=$44 & 1;
      var $arrayidx52=((77732+($and51<<2))|0);
      var $45=HEAP32[(($arrayidx52)>>2)];
      var $xor53=$xor50 ^ $45;
      var $46=$t_addr;
      var $mt54=(($46)|0);
      var $arrayidx55=(($mt54+2492)|0);
      HEAP32[(($arrayidx55)>>2)]=$xor53;
      var $47=$t_addr;
      var $mti56=(($47+2496)|0);
      HEAP32[(($mti56)>>2)]=0;
      label = 14; break;
    case 14: 
      var $48=$t_addr;
      var $mti58=(($48+2496)|0);
      var $49=HEAP32[(($mti58)>>2)];
      var $inc59=((($49)+(1))|0);
      HEAP32[(($mti58)>>2)]=$inc59;
      var $50=$t_addr;
      var $mt60=(($50)|0);
      var $arrayidx61=(($mt60+($49<<2))|0);
      var $51=HEAP32[(($arrayidx61)>>2)];
      $y=$51;
      var $52=$y;
      var $shr62=$52 >>> 11;
      var $53=$y;
      var $xor63=$53 ^ $shr62;
      $y=$xor63;
      var $54=$y;
      var $shl=$54 << 7;
      var $and64=$shl & -1658038656;
      var $55=$y;
      var $xor65=$55 ^ $and64;
      $y=$xor65;
      var $56=$y;
      var $shl66=$56 << 15;
      var $and67=$shl66 & -272236544;
      var $57=$y;
      var $xor68=$57 ^ $and67;
      $y=$xor68;
      var $58=$y;
      var $shr69=$58 >>> 18;
      var $59=$y;
      var $xor70=$59 ^ $shr69;
      $y=$xor70;
      var $60=$y;
      var $61=$t_addr;
      var $62=(($61+2500)|0);
      var $gen_int=$62;
      HEAP32[(($gen_int)>>2)]=$60;
      var $63=$y;
      return $63;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_random_genrand_real1($t) {
  var label = 0;
  var $t_addr;
  $t_addr=$t;
  var $0=$t_addr;
  var $call=_mrb_random_genrand_int32($0);
  var $1=$t_addr;
  var $2=(($1+2500)|0);
  var $gen_int=$2;
  var $3=HEAP32[(($gen_int)>>2)];
  var $conv=(($3)>>>(0));
  var $mul=($conv)*(2.3283064370807974e-10);
  var $4=$t_addr;
  var $5=(($4+2500)|0);
  var $gen_dbl=$5;
  (HEAPF64[(tempDoublePtr)>>3]=$mul,HEAP32[(($gen_dbl)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($gen_dbl)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=$t_addr;
  var $7=(($6+2500)|0);
  var $gen_dbl1=$7;
  var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($gen_dbl1)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($gen_dbl1)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  return $8;
}
function _genrand_int32() {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $y;
      var $kk;
      var $0=HEAP32[((60076)>>2)];
      var $cmp=(($0)|(0)) >= 624;
      if ($cmp) { label = 3; break; } else { label = 14; break; }
    case 3: 
      var $1=HEAP32[((60076)>>2)];
      var $cmp1=(($1)|(0))==625;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      _init_genrand(5489);
      label = 5; break;
    case 5: 
      $kk=0;
      label = 6; break;
    case 6: 
      var $2=$kk;
      var $cmp3=(($2)|(0)) < 227;
      if ($cmp3) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $3=$kk;
      var $arrayidx=((60088+($3<<2))|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      var $and=$4 & -2147483648;
      var $5=$kk;
      var $add=((($5)+(1))|0);
      var $arrayidx4=((60088+($add<<2))|0);
      var $6=HEAP32[(($arrayidx4)>>2)];
      var $and5=$6 & 2147483647;
      var $or=$and | $and5;
      $y=$or;
      var $7=$kk;
      var $add6=((($7)+(397))|0);
      var $arrayidx7=((60088+($add6<<2))|0);
      var $8=HEAP32[(($arrayidx7)>>2)];
      var $9=$y;
      var $shr=$9 >>> 1;
      var $xor=$8 ^ $shr;
      var $10=$y;
      var $and8=$10 & 1;
      var $arrayidx9=((80692+($and8<<2))|0);
      var $11=HEAP32[(($arrayidx9)>>2)];
      var $xor10=$xor ^ $11;
      var $12=$kk;
      var $arrayidx11=((60088+($12<<2))|0);
      HEAP32[(($arrayidx11)>>2)]=$xor10;
      label = 8; break;
    case 8: 
      var $13=$kk;
      var $inc=((($13)+(1))|0);
      $kk=$inc;
      label = 6; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $14=$kk;
      var $cmp13=(($14)|(0)) < 623;
      if ($cmp13) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $15=$kk;
      var $arrayidx15=((60088+($15<<2))|0);
      var $16=HEAP32[(($arrayidx15)>>2)];
      var $and16=$16 & -2147483648;
      var $17=$kk;
      var $add17=((($17)+(1))|0);
      var $arrayidx18=((60088+($add17<<2))|0);
      var $18=HEAP32[(($arrayidx18)>>2)];
      var $and19=$18 & 2147483647;
      var $or20=$and16 | $and19;
      $y=$or20;
      var $19=$kk;
      var $add21=((($19)-(227))|0);
      var $arrayidx22=((60088+($add21<<2))|0);
      var $20=HEAP32[(($arrayidx22)>>2)];
      var $21=$y;
      var $shr23=$21 >>> 1;
      var $xor24=$20 ^ $shr23;
      var $22=$y;
      var $and25=$22 & 1;
      var $arrayidx26=((80692+($and25<<2))|0);
      var $23=HEAP32[(($arrayidx26)>>2)];
      var $xor27=$xor24 ^ $23;
      var $24=$kk;
      var $arrayidx28=((60088+($24<<2))|0);
      HEAP32[(($arrayidx28)>>2)]=$xor27;
      label = 12; break;
    case 12: 
      var $25=$kk;
      var $inc30=((($25)+(1))|0);
      $kk=$inc30;
      label = 10; break;
    case 13: 
      var $26=HEAP32[((((62580)|0))>>2)];
      var $and32=$26 & -2147483648;
      var $27=HEAP32[((((60088)|0))>>2)];
      var $and33=$27 & 2147483647;
      var $or34=$and32 | $and33;
      $y=$or34;
      var $28=HEAP32[((((61672)|0))>>2)];
      var $29=$y;
      var $shr35=$29 >>> 1;
      var $xor36=$28 ^ $shr35;
      var $30=$y;
      var $and37=$30 & 1;
      var $arrayidx38=((80692+($and37<<2))|0);
      var $31=HEAP32[(($arrayidx38)>>2)];
      var $xor39=$xor36 ^ $31;
      HEAP32[((((62580)|0))>>2)]=$xor39;
      HEAP32[((60076)>>2)]=0;
      label = 14; break;
    case 14: 
      var $32=HEAP32[((60076)>>2)];
      var $inc41=((($32)+(1))|0);
      HEAP32[((60076)>>2)]=$inc41;
      var $arrayidx42=((60088+($32<<2))|0);
      var $33=HEAP32[(($arrayidx42)>>2)];
      $y=$33;
      var $34=$y;
      var $shr43=$34 >>> 11;
      var $35=$y;
      var $xor44=$35 ^ $shr43;
      $y=$xor44;
      var $36=$y;
      var $shl=$36 << 7;
      var $and45=$shl & -1658038656;
      var $37=$y;
      var $xor46=$37 ^ $and45;
      $y=$xor46;
      var $38=$y;
      var $shl47=$38 << 15;
      var $and48=$shl47 & -272236544;
      var $39=$y;
      var $xor49=$39 ^ $and48;
      $y=$xor49;
      var $40=$y;
      var $shr50=$40 >>> 18;
      var $41=$y;
      var $xor51=$41 ^ $shr50;
      $y=$xor51;
      var $42=$y;
      return $42;
    default: assert(0, "bad label: " + label);
  }
}
function _genrand_real1() {
  var label = 0;
  var $call=_genrand_int32();
  var $conv=(($call)>>>(0));
  var $mul=($conv)*(2.3283064370807974e-10);
  return $mul;
}
function _malloc($bytes) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $bytes_addr;
      var $mem;
      var $nb;
      var $idx;
      var $smallbits;
      var $b;
      var $p;
      var $F;
      var $b33;
      var $p34;
      var $r;
      var $rsize;
      var $i;
      var $leftbits;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $F68;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F104;
      var $rsize158;
      var $p160;
      var $r164;
      var $dvs;
      var $rsize186;
      var $p188;
      var $r189;
      $bytes_addr=$bytes;
      var $0=$bytes_addr;
      var $cmp=(($0)>>>(0)) <= 244;
      if ($cmp) { label = 3; break; } else { label = 42; break; }
    case 3: 
      var $1=$bytes_addr;
      var $cmp1=(($1)>>>(0)) < 11;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $cond = 16;label = 6; break;
    case 5: 
      var $2=$bytes_addr;
      var $add=((($2)+(4))|0);
      var $add2=((($add)+(7))|0);
      var $and=$add2 & -8;
      var $cond = $and;label = 6; break;
    case 6: 
      var $cond;
      $nb=$cond;
      var $3=$nb;
      var $shr=$3 >>> 3;
      $idx=$shr;
      var $4=HEAP32[((((113992)|0))>>2)];
      var $5=$idx;
      var $shr3=$4 >>> (($5)>>>(0));
      $smallbits=$shr3;
      var $6=$smallbits;
      var $and4=$6 & 3;
      var $cmp5=(($and4)|(0))!=0;
      if ($cmp5) { label = 7; break; } else { label = 16; break; }
    case 7: 
      var $7=$smallbits;
      var $neg=$7 ^ -1;
      var $and7=$neg & 1;
      var $8=$idx;
      var $add8=((($8)+($and7))|0);
      $idx=$add8;
      var $9=$idx;
      var $shl=$9 << 1;
      var $arrayidx=((((114032)|0)+($shl<<2))|0);
      var $10=$arrayidx;
      var $11=$10;
      $b=$11;
      var $12=$b;
      var $fd=(($12+8)|0);
      var $13=HEAP32[(($fd)>>2)];
      $p=$13;
      var $14=$p;
      var $fd9=(($14+8)|0);
      var $15=HEAP32[(($fd9)>>2)];
      $F=$15;
      var $16=$b;
      var $17=$F;
      var $cmp10=(($16)|(0))==(($17)|(0));
      if ($cmp10) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $18=$idx;
      var $shl12=1 << $18;
      var $neg13=$shl12 ^ -1;
      var $19=HEAP32[((((113992)|0))>>2)];
      var $and14=$19 & $neg13;
      HEAP32[((((113992)|0))>>2)]=$and14;
      label = 15; break;
    case 9: 
      var $20=$F;
      var $21=$20;
      var $22=HEAP32[((((114008)|0))>>2)];
      var $cmp15=(($21)>>>(0)) >= (($22)>>>(0));
      if ($cmp15) { label = 10; break; } else { var $26 = 0;label = 11; break; }
    case 10: 
      var $23=$F;
      var $bk=(($23+12)|0);
      var $24=HEAP32[(($bk)>>2)];
      var $25=$p;
      var $cmp16=(($24)|(0))==(($25)|(0));
      var $26 = $cmp16;label = 11; break;
    case 11: 
      var $26;
      var $land_ext=(($26)&(1));
      var $expval=($land_ext);
      var $tobool=(($expval)|(0))!=0;
      if ($tobool) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $27=$b;
      var $28=$F;
      var $bk18=(($28+12)|0);
      HEAP32[(($bk18)>>2)]=$27;
      var $29=$F;
      var $30=$b;
      var $fd19=(($30+8)|0);
      HEAP32[(($fd19)>>2)]=$29;
      label = 14; break;
    case 13: 
      _abort();
      throw "Reached an unreachable!";
    case 14: 
      label = 15; break;
    case 15: 
      var $31=$idx;
      var $shl22=$31 << 3;
      var $or=$shl22 | 1;
      var $or23=$or | 2;
      var $32=$p;
      var $head=(($32+4)|0);
      HEAP32[(($head)>>2)]=$or23;
      var $33=$p;
      var $34=$33;
      var $35=$idx;
      var $shl24=$35 << 3;
      var $add_ptr=(($34+$shl24)|0);
      var $36=$add_ptr;
      var $head25=(($36+4)|0);
      var $37=HEAP32[(($head25)>>2)];
      var $or26=$37 | 1;
      HEAP32[(($head25)>>2)]=$or26;
      var $38=$p;
      var $39=$38;
      var $add_ptr27=(($39+8)|0);
      $mem=$add_ptr27;
      label = 58; break;
    case 16: 
      var $40=$nb;
      var $41=HEAP32[((((114000)|0))>>2)];
      var $cmp29=(($40)>>>(0)) > (($41)>>>(0));
      if ($cmp29) { label = 17; break; } else { label = 40; break; }
    case 17: 
      var $42=$smallbits;
      var $cmp31=(($42)|(0))!=0;
      if ($cmp31) { label = 18; break; } else { label = 35; break; }
    case 18: 
      var $43=$smallbits;
      var $44=$idx;
      var $shl35=$43 << $44;
      var $45=$idx;
      var $shl36=1 << $45;
      var $shl37=$shl36 << 1;
      var $46=$idx;
      var $shl38=1 << $46;
      var $shl39=$shl38 << 1;
      var $sub=(((-$shl39))|0);
      var $or40=$shl37 | $sub;
      var $and41=$shl35 & $or40;
      $leftbits=$and41;
      var $47=$leftbits;
      var $48=$leftbits;
      var $sub42=(((-$48))|0);
      var $and43=$47 & $sub42;
      $leastbit=$and43;
      var $49=$leastbit;
      var $sub44=((($49)-(1))|0);
      $Y=$sub44;
      var $50=$Y;
      var $shr45=$50 >>> 12;
      var $and46=$shr45 & 16;
      $K=$and46;
      var $51=$K;
      $N=$51;
      var $52=$K;
      var $53=$Y;
      var $shr47=$53 >>> (($52)>>>(0));
      $Y=$shr47;
      var $54=$Y;
      var $shr48=$54 >>> 5;
      var $and49=$shr48 & 8;
      $K=$and49;
      var $55=$N;
      var $add50=((($55)+($and49))|0);
      $N=$add50;
      var $56=$K;
      var $57=$Y;
      var $shr51=$57 >>> (($56)>>>(0));
      $Y=$shr51;
      var $58=$Y;
      var $shr52=$58 >>> 2;
      var $and53=$shr52 & 4;
      $K=$and53;
      var $59=$N;
      var $add54=((($59)+($and53))|0);
      $N=$add54;
      var $60=$K;
      var $61=$Y;
      var $shr55=$61 >>> (($60)>>>(0));
      $Y=$shr55;
      var $62=$Y;
      var $shr56=$62 >>> 1;
      var $and57=$shr56 & 2;
      $K=$and57;
      var $63=$N;
      var $add58=((($63)+($and57))|0);
      $N=$add58;
      var $64=$K;
      var $65=$Y;
      var $shr59=$65 >>> (($64)>>>(0));
      $Y=$shr59;
      var $66=$Y;
      var $shr60=$66 >>> 1;
      var $and61=$shr60 & 1;
      $K=$and61;
      var $67=$N;
      var $add62=((($67)+($and61))|0);
      $N=$add62;
      var $68=$K;
      var $69=$Y;
      var $shr63=$69 >>> (($68)>>>(0));
      $Y=$shr63;
      var $70=$N;
      var $71=$Y;
      var $add64=((($70)+($71))|0);
      $i=$add64;
      var $72=$i;
      var $shl65=$72 << 1;
      var $arrayidx66=((((114032)|0)+($shl65<<2))|0);
      var $73=$arrayidx66;
      var $74=$73;
      $b33=$74;
      var $75=$b33;
      var $fd67=(($75+8)|0);
      var $76=HEAP32[(($fd67)>>2)];
      $p34=$76;
      var $77=$p34;
      var $fd69=(($77+8)|0);
      var $78=HEAP32[(($fd69)>>2)];
      $F68=$78;
      var $79=$b33;
      var $80=$F68;
      var $cmp70=(($79)|(0))==(($80)|(0));
      if ($cmp70) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $81=$i;
      var $shl72=1 << $81;
      var $neg73=$shl72 ^ -1;
      var $82=HEAP32[((((113992)|0))>>2)];
      var $and74=$82 & $neg73;
      HEAP32[((((113992)|0))>>2)]=$and74;
      label = 26; break;
    case 20: 
      var $83=$F68;
      var $84=$83;
      var $85=HEAP32[((((114008)|0))>>2)];
      var $cmp76=(($84)>>>(0)) >= (($85)>>>(0));
      if ($cmp76) { label = 21; break; } else { var $89 = 0;label = 22; break; }
    case 21: 
      var $86=$F68;
      var $bk78=(($86+12)|0);
      var $87=HEAP32[(($bk78)>>2)];
      var $88=$p34;
      var $cmp79=(($87)|(0))==(($88)|(0));
      var $89 = $cmp79;label = 22; break;
    case 22: 
      var $89;
      var $land_ext81=(($89)&(1));
      var $expval82=($land_ext81);
      var $tobool83=(($expval82)|(0))!=0;
      if ($tobool83) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $90=$b33;
      var $91=$F68;
      var $bk85=(($91+12)|0);
      HEAP32[(($bk85)>>2)]=$90;
      var $92=$F68;
      var $93=$b33;
      var $fd86=(($93+8)|0);
      HEAP32[(($fd86)>>2)]=$92;
      label = 25; break;
    case 24: 
      _abort();
      throw "Reached an unreachable!";
    case 25: 
      label = 26; break;
    case 26: 
      var $94=$i;
      var $shl90=$94 << 3;
      var $95=$nb;
      var $sub91=((($shl90)-($95))|0);
      $rsize=$sub91;
      var $96=$nb;
      var $or92=$96 | 1;
      var $or93=$or92 | 2;
      var $97=$p34;
      var $head94=(($97+4)|0);
      HEAP32[(($head94)>>2)]=$or93;
      var $98=$p34;
      var $99=$98;
      var $100=$nb;
      var $add_ptr95=(($99+$100)|0);
      var $101=$add_ptr95;
      $r=$101;
      var $102=$rsize;
      var $or96=$102 | 1;
      var $103=$r;
      var $head97=(($103+4)|0);
      HEAP32[(($head97)>>2)]=$or96;
      var $104=$rsize;
      var $105=$r;
      var $106=$105;
      var $107=$rsize;
      var $add_ptr98=(($106+$107)|0);
      var $108=$add_ptr98;
      var $prev_foot=(($108)|0);
      HEAP32[(($prev_foot)>>2)]=$104;
      var $109=HEAP32[((((114000)|0))>>2)];
      $DVS=$109;
      var $110=$DVS;
      var $cmp99=(($110)|(0))!=0;
      if ($cmp99) { label = 27; break; } else { label = 34; break; }
    case 27: 
      var $111=HEAP32[((((114012)|0))>>2)];
      $DV=$111;
      var $112=$DVS;
      var $shr101=$112 >>> 3;
      $I=$shr101;
      var $113=$I;
      var $shl102=$113 << 1;
      var $arrayidx103=((((114032)|0)+($shl102<<2))|0);
      var $114=$arrayidx103;
      var $115=$114;
      $B=$115;
      var $116=$B;
      $F104=$116;
      var $117=HEAP32[((((113992)|0))>>2)];
      var $118=$I;
      var $shl105=1 << $118;
      var $and106=$117 & $shl105;
      var $tobool107=(($and106)|(0))!=0;
      if ($tobool107) { label = 29; break; } else { label = 28; break; }
    case 28: 
      var $119=$I;
      var $shl109=1 << $119;
      var $120=HEAP32[((((113992)|0))>>2)];
      var $or110=$120 | $shl109;
      HEAP32[((((113992)|0))>>2)]=$or110;
      label = 33; break;
    case 29: 
      var $121=$B;
      var $fd112=(($121+8)|0);
      var $122=HEAP32[(($fd112)>>2)];
      var $123=$122;
      var $124=HEAP32[((((114008)|0))>>2)];
      var $cmp113=(($123)>>>(0)) >= (($124)>>>(0));
      var $conv=(($cmp113)&(1));
      var $expval114=($conv);
      var $tobool115=(($expval114)|(0))!=0;
      if ($tobool115) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $125=$B;
      var $fd117=(($125+8)|0);
      var $126=HEAP32[(($fd117)>>2)];
      $F104=$126;
      label = 32; break;
    case 31: 
      _abort();
      throw "Reached an unreachable!";
    case 32: 
      label = 33; break;
    case 33: 
      var $127=$DV;
      var $128=$B;
      var $fd121=(($128+8)|0);
      HEAP32[(($fd121)>>2)]=$127;
      var $129=$DV;
      var $130=$F104;
      var $bk122=(($130+12)|0);
      HEAP32[(($bk122)>>2)]=$129;
      var $131=$F104;
      var $132=$DV;
      var $fd123=(($132+8)|0);
      HEAP32[(($fd123)>>2)]=$131;
      var $133=$B;
      var $134=$DV;
      var $bk124=(($134+12)|0);
      HEAP32[(($bk124)>>2)]=$133;
      label = 34; break;
    case 34: 
      var $135=$rsize;
      HEAP32[((((114000)|0))>>2)]=$135;
      var $136=$r;
      HEAP32[((((114012)|0))>>2)]=$136;
      var $137=$p34;
      var $138=$137;
      var $add_ptr126=(($138+8)|0);
      $mem=$add_ptr126;
      label = 58; break;
    case 35: 
      var $139=HEAP32[((((113996)|0))>>2)];
      var $cmp128=(($139)|(0))!=0;
      if ($cmp128) { label = 36; break; } else { label = 38; break; }
    case 36: 
      var $140=$nb;
      var $call=_tmalloc_small(113992, $140);
      $mem=$call;
      var $cmp130=(($call)|(0))!=0;
      if ($cmp130) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 58; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 49; break;
    case 42: 
      var $141=$bytes_addr;
      var $cmp138=(($141)>>>(0)) >= 4294967232;
      if ($cmp138) { label = 43; break; } else { label = 44; break; }
    case 43: 
      $nb=-1;
      label = 48; break;
    case 44: 
      var $142=$bytes_addr;
      var $add142=((($142)+(4))|0);
      var $add143=((($add142)+(7))|0);
      var $and144=$add143 & -8;
      $nb=$and144;
      var $143=HEAP32[((((113996)|0))>>2)];
      var $cmp145=(($143)|(0))!=0;
      if ($cmp145) { label = 45; break; } else { label = 47; break; }
    case 45: 
      var $144=$nb;
      var $call148=_tmalloc_large(113992, $144);
      $mem=$call148;
      var $cmp149=(($call148)|(0))!=0;
      if ($cmp149) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 58; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $145=$nb;
      var $146=HEAP32[((((114000)|0))>>2)];
      var $cmp155=(($145)>>>(0)) <= (($146)>>>(0));
      if ($cmp155) { label = 50; break; } else { label = 54; break; }
    case 50: 
      var $147=HEAP32[((((114000)|0))>>2)];
      var $148=$nb;
      var $sub159=((($147)-($148))|0);
      $rsize158=$sub159;
      var $149=HEAP32[((((114012)|0))>>2)];
      $p160=$149;
      var $150=$rsize158;
      var $cmp161=(($150)>>>(0)) >= 16;
      if ($cmp161) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $151=$p160;
      var $152=$151;
      var $153=$nb;
      var $add_ptr165=(($152+$153)|0);
      var $154=$add_ptr165;
      HEAP32[((((114012)|0))>>2)]=$154;
      $r164=$154;
      var $155=$rsize158;
      HEAP32[((((114000)|0))>>2)]=$155;
      var $156=$rsize158;
      var $or166=$156 | 1;
      var $157=$r164;
      var $head167=(($157+4)|0);
      HEAP32[(($head167)>>2)]=$or166;
      var $158=$rsize158;
      var $159=$r164;
      var $160=$159;
      var $161=$rsize158;
      var $add_ptr168=(($160+$161)|0);
      var $162=$add_ptr168;
      var $prev_foot169=(($162)|0);
      HEAP32[(($prev_foot169)>>2)]=$158;
      var $163=$nb;
      var $or170=$163 | 1;
      var $or171=$or170 | 2;
      var $164=$p160;
      var $head172=(($164+4)|0);
      HEAP32[(($head172)>>2)]=$or171;
      label = 53; break;
    case 52: 
      var $165=HEAP32[((((114000)|0))>>2)];
      $dvs=$165;
      HEAP32[((((114000)|0))>>2)]=0;
      HEAP32[((((114012)|0))>>2)]=0;
      var $166=$dvs;
      var $or174=$166 | 1;
      var $or175=$or174 | 2;
      var $167=$p160;
      var $head176=(($167+4)|0);
      HEAP32[(($head176)>>2)]=$or175;
      var $168=$p160;
      var $169=$168;
      var $170=$dvs;
      var $add_ptr177=(($169+$170)|0);
      var $171=$add_ptr177;
      var $head178=(($171+4)|0);
      var $172=HEAP32[(($head178)>>2)];
      var $or179=$172 | 1;
      HEAP32[(($head178)>>2)]=$or179;
      label = 53; break;
    case 53: 
      var $173=$p160;
      var $174=$173;
      var $add_ptr181=(($174+8)|0);
      $mem=$add_ptr181;
      label = 58; break;
    case 54: 
      var $175=$nb;
      var $176=HEAP32[((((114004)|0))>>2)];
      var $cmp183=(($175)>>>(0)) < (($176)>>>(0));
      if ($cmp183) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $177=$nb;
      var $178=HEAP32[((((114004)|0))>>2)];
      var $sub187=((($178)-($177))|0);
      HEAP32[((((114004)|0))>>2)]=$sub187;
      $rsize186=$sub187;
      var $179=HEAP32[((((114016)|0))>>2)];
      $p188=$179;
      var $180=$p188;
      var $181=$180;
      var $182=$nb;
      var $add_ptr190=(($181+$182)|0);
      var $183=$add_ptr190;
      HEAP32[((((114016)|0))>>2)]=$183;
      $r189=$183;
      var $184=$rsize186;
      var $or191=$184 | 1;
      var $185=$r189;
      var $head192=(($185+4)|0);
      HEAP32[(($head192)>>2)]=$or191;
      var $186=$nb;
      var $or193=$186 | 1;
      var $or194=$or193 | 2;
      var $187=$p188;
      var $head195=(($187+4)|0);
      HEAP32[(($head195)>>2)]=$or194;
      var $188=$p188;
      var $189=$188;
      var $add_ptr196=(($189+8)|0);
      $mem=$add_ptr196;
      label = 58; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $190=$nb;
      var $call199=_sys_alloc(113992, $190);
      $mem=$call199;
      label = 58; break;
    case 58: 
      var $191=$mem;
      return $191;
    default: assert(0, "bad label: " + label);
  }
}
function _tmalloc_small($m, $nb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $nb_addr;
      var $t;
      var $v;
      var $rsize;
      var $i;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $trem;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F197;
      $m_addr=$m;
      $nb_addr=$nb;
      var $0=$m_addr;
      var $treemap=(($0+4)|0);
      var $1=HEAP32[(($treemap)>>2)];
      var $2=$m_addr;
      var $treemap1=(($2+4)|0);
      var $3=HEAP32[(($treemap1)>>2)];
      var $sub=(((-$3))|0);
      var $and=$1 & $sub;
      $leastbit=$and;
      var $4=$leastbit;
      var $sub2=((($4)-(1))|0);
      $Y=$sub2;
      var $5=$Y;
      var $shr=$5 >>> 12;
      var $and3=$shr & 16;
      $K=$and3;
      var $6=$K;
      $N=$6;
      var $7=$K;
      var $8=$Y;
      var $shr4=$8 >>> (($7)>>>(0));
      $Y=$shr4;
      var $9=$Y;
      var $shr5=$9 >>> 5;
      var $and6=$shr5 & 8;
      $K=$and6;
      var $10=$N;
      var $add=((($10)+($and6))|0);
      $N=$add;
      var $11=$K;
      var $12=$Y;
      var $shr7=$12 >>> (($11)>>>(0));
      $Y=$shr7;
      var $13=$Y;
      var $shr8=$13 >>> 2;
      var $and9=$shr8 & 4;
      $K=$and9;
      var $14=$N;
      var $add10=((($14)+($and9))|0);
      $N=$add10;
      var $15=$K;
      var $16=$Y;
      var $shr11=$16 >>> (($15)>>>(0));
      $Y=$shr11;
      var $17=$Y;
      var $shr12=$17 >>> 1;
      var $and13=$shr12 & 2;
      $K=$and13;
      var $18=$N;
      var $add14=((($18)+($and13))|0);
      $N=$add14;
      var $19=$K;
      var $20=$Y;
      var $shr15=$20 >>> (($19)>>>(0));
      $Y=$shr15;
      var $21=$Y;
      var $shr16=$21 >>> 1;
      var $and17=$shr16 & 1;
      $K=$and17;
      var $22=$N;
      var $add18=((($22)+($and17))|0);
      $N=$add18;
      var $23=$K;
      var $24=$Y;
      var $shr19=$24 >>> (($23)>>>(0));
      $Y=$shr19;
      var $25=$N;
      var $26=$Y;
      var $add20=((($25)+($26))|0);
      $i=$add20;
      var $27=$i;
      var $28=$m_addr;
      var $treebins=(($28+304)|0);
      var $arrayidx=(($treebins+($27<<2))|0);
      var $29=HEAP32[(($arrayidx)>>2)];
      $t=$29;
      $v=$29;
      var $30=$t;
      var $head=(($30+4)|0);
      var $31=HEAP32[(($head)>>2)];
      var $and21=$31 & -8;
      var $32=$nb_addr;
      var $sub22=((($and21)-($32))|0);
      $rsize=$sub22;
      label = 3; break;
    case 3: 
      var $33=$t;
      var $child=(($33+16)|0);
      var $arrayidx23=(($child)|0);
      var $34=HEAP32[(($arrayidx23)>>2)];
      var $cmp=(($34)|(0))!=0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $35=$t;
      var $child24=(($35+16)|0);
      var $arrayidx25=(($child24)|0);
      var $36=HEAP32[(($arrayidx25)>>2)];
      var $cond = $36;label = 6; break;
    case 5: 
      var $37=$t;
      var $child26=(($37+16)|0);
      var $arrayidx27=(($child26+4)|0);
      var $38=HEAP32[(($arrayidx27)>>2)];
      var $cond = $38;label = 6; break;
    case 6: 
      var $cond;
      $t=$cond;
      var $cmp28=(($cond)|(0))!=0;
      if ($cmp28) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $39=$t;
      var $head29=(($39+4)|0);
      var $40=HEAP32[(($head29)>>2)];
      var $and30=$40 & -8;
      var $41=$nb_addr;
      var $sub31=((($and30)-($41))|0);
      $trem=$sub31;
      var $42=$trem;
      var $43=$rsize;
      var $cmp32=(($42)>>>(0)) < (($43)>>>(0));
      if ($cmp32) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $44=$trem;
      $rsize=$44;
      var $45=$t;
      $v=$45;
      label = 9; break;
    case 9: 
      label = 3; break;
    case 10: 
      var $46=$v;
      var $47=$46;
      var $48=$m_addr;
      var $least_addr=(($48+16)|0);
      var $49=HEAP32[(($least_addr)>>2)];
      var $cmp33=(($47)>>>(0)) >= (($49)>>>(0));
      var $conv=(($cmp33)&(1));
      var $expval=($conv);
      var $tobool=(($expval)|(0))!=0;
      if ($tobool) { label = 11; break; } else { label = 73; break; }
    case 11: 
      var $50=$v;
      var $51=$50;
      var $52=$nb_addr;
      var $add_ptr=(($51+$52)|0);
      var $53=$add_ptr;
      $r=$53;
      var $54=$v;
      var $55=$54;
      var $56=$r;
      var $57=$56;
      var $cmp35=(($55)>>>(0)) < (($57)>>>(0));
      var $conv36=(($cmp35)&(1));
      var $expval37=($conv36);
      var $tobool38=(($expval37)|(0))!=0;
      if ($tobool38) { label = 12; break; } else { label = 72; break; }
    case 12: 
      var $58=$v;
      var $parent=(($58+24)|0);
      var $59=HEAP32[(($parent)>>2)];
      $XP=$59;
      var $60=$v;
      var $bk=(($60+12)|0);
      var $61=HEAP32[(($bk)>>2)];
      var $62=$v;
      var $cmp40=(($61)|(0))!=(($62)|(0));
      if ($cmp40) { label = 13; break; } else { label = 20; break; }
    case 13: 
      var $63=$v;
      var $fd=(($63+8)|0);
      var $64=HEAP32[(($fd)>>2)];
      $F=$64;
      var $65=$v;
      var $bk43=(($65+12)|0);
      var $66=HEAP32[(($bk43)>>2)];
      $R=$66;
      var $67=$F;
      var $68=$67;
      var $69=$m_addr;
      var $least_addr44=(($69+16)|0);
      var $70=HEAP32[(($least_addr44)>>2)];
      var $cmp45=(($68)>>>(0)) >= (($70)>>>(0));
      if ($cmp45) { label = 14; break; } else { var $77 = 0;label = 16; break; }
    case 14: 
      var $71=$F;
      var $bk47=(($71+12)|0);
      var $72=HEAP32[(($bk47)>>2)];
      var $73=$v;
      var $cmp48=(($72)|(0))==(($73)|(0));
      if ($cmp48) { label = 15; break; } else { var $77 = 0;label = 16; break; }
    case 15: 
      var $74=$R;
      var $fd50=(($74+8)|0);
      var $75=HEAP32[(($fd50)>>2)];
      var $76=$v;
      var $cmp51=(($75)|(0))==(($76)|(0));
      var $77 = $cmp51;label = 16; break;
    case 16: 
      var $77;
      var $land_ext=(($77)&(1));
      var $expval53=($land_ext);
      var $tobool54=(($expval53)|(0))!=0;
      if ($tobool54) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $78=$R;
      var $79=$F;
      var $bk56=(($79+12)|0);
      HEAP32[(($bk56)>>2)]=$78;
      var $80=$F;
      var $81=$R;
      var $fd57=(($81+8)|0);
      HEAP32[(($fd57)>>2)]=$80;
      label = 19; break;
    case 18: 
      _abort();
      throw "Reached an unreachable!";
    case 19: 
      label = 32; break;
    case 20: 
      var $82=$v;
      var $child60=(($82+16)|0);
      var $arrayidx61=(($child60+4)|0);
      $RP=$arrayidx61;
      var $83=HEAP32[(($arrayidx61)>>2)];
      $R=$83;
      var $cmp62=(($83)|(0))!=0;
      if ($cmp62) { label = 22; break; } else { label = 21; break; }
    case 21: 
      var $84=$v;
      var $child64=(($84+16)|0);
      var $arrayidx65=(($child64)|0);
      $RP=$arrayidx65;
      var $85=HEAP32[(($arrayidx65)>>2)];
      $R=$85;
      var $cmp66=(($85)|(0))!=0;
      if ($cmp66) { label = 22; break; } else { label = 31; break; }
    case 22: 
      label = 23; break;
    case 23: 
      var $86=$R;
      var $child70=(($86+16)|0);
      var $arrayidx71=(($child70+4)|0);
      $CP=$arrayidx71;
      var $87=HEAP32[(($arrayidx71)>>2)];
      var $cmp72=(($87)|(0))!=0;
      if ($cmp72) { var $90 = 1;label = 25; break; } else { label = 24; break; }
    case 24: 
      var $88=$R;
      var $child74=(($88+16)|0);
      var $arrayidx75=(($child74)|0);
      $CP=$arrayidx75;
      var $89=HEAP32[(($arrayidx75)>>2)];
      var $cmp76=(($89)|(0))!=0;
      var $90 = $cmp76;label = 25; break;
    case 25: 
      var $90;
      if ($90) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $91=$CP;
      $RP=$91;
      var $92=HEAP32[(($91)>>2)];
      $R=$92;
      label = 23; break;
    case 27: 
      var $93=$RP;
      var $94=$93;
      var $95=$m_addr;
      var $least_addr80=(($95+16)|0);
      var $96=HEAP32[(($least_addr80)>>2)];
      var $cmp81=(($94)>>>(0)) >= (($96)>>>(0));
      var $conv82=(($cmp81)&(1));
      var $expval83=($conv82);
      var $tobool84=(($expval83)|(0))!=0;
      if ($tobool84) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $97=$RP;
      HEAP32[(($97)>>2)]=0;
      label = 30; break;
    case 29: 
      _abort();
      throw "Reached an unreachable!";
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $98=$XP;
      var $cmp90=(($98)|(0))!=0;
      if ($cmp90) { label = 33; break; } else { label = 60; break; }
    case 33: 
      var $99=$v;
      var $index=(($99+28)|0);
      var $100=HEAP32[(($index)>>2)];
      var $101=$m_addr;
      var $treebins93=(($101+304)|0);
      var $arrayidx94=(($treebins93+($100<<2))|0);
      $H=$arrayidx94;
      var $102=$v;
      var $103=$H;
      var $104=HEAP32[(($103)>>2)];
      var $cmp95=(($102)|(0))==(($104)|(0));
      if ($cmp95) { label = 34; break; } else { label = 37; break; }
    case 34: 
      var $105=$R;
      var $106=$H;
      HEAP32[(($106)>>2)]=$105;
      var $cmp98=(($105)|(0))==0;
      if ($cmp98) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $107=$v;
      var $index101=(($107+28)|0);
      var $108=HEAP32[(($index101)>>2)];
      var $shl=1 << $108;
      var $neg=$shl ^ -1;
      var $109=$m_addr;
      var $treemap102=(($109+4)|0);
      var $110=HEAP32[(($treemap102)>>2)];
      var $and103=$110 & $neg;
      HEAP32[(($treemap102)>>2)]=$and103;
      label = 36; break;
    case 36: 
      label = 44; break;
    case 37: 
      var $111=$XP;
      var $112=$111;
      var $113=$m_addr;
      var $least_addr106=(($113+16)|0);
      var $114=HEAP32[(($least_addr106)>>2)];
      var $cmp107=(($112)>>>(0)) >= (($114)>>>(0));
      var $conv108=(($cmp107)&(1));
      var $expval109=($conv108);
      var $tobool110=(($expval109)|(0))!=0;
      if ($tobool110) { label = 38; break; } else { label = 42; break; }
    case 38: 
      var $115=$XP;
      var $child112=(($115+16)|0);
      var $arrayidx113=(($child112)|0);
      var $116=HEAP32[(($arrayidx113)>>2)];
      var $117=$v;
      var $cmp114=(($116)|(0))==(($117)|(0));
      if ($cmp114) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $118=$R;
      var $119=$XP;
      var $child117=(($119+16)|0);
      var $arrayidx118=(($child117)|0);
      HEAP32[(($arrayidx118)>>2)]=$118;
      label = 41; break;
    case 40: 
      var $120=$R;
      var $121=$XP;
      var $child120=(($121+16)|0);
      var $arrayidx121=(($child120+4)|0);
      HEAP32[(($arrayidx121)>>2)]=$120;
      label = 41; break;
    case 41: 
      label = 43; break;
    case 42: 
      _abort();
      throw "Reached an unreachable!";
    case 43: 
      label = 44; break;
    case 44: 
      var $122=$R;
      var $cmp126=(($122)|(0))!=0;
      if ($cmp126) { label = 45; break; } else { label = 59; break; }
    case 45: 
      var $123=$R;
      var $124=$123;
      var $125=$m_addr;
      var $least_addr129=(($125+16)|0);
      var $126=HEAP32[(($least_addr129)>>2)];
      var $cmp130=(($124)>>>(0)) >= (($126)>>>(0));
      var $conv131=(($cmp130)&(1));
      var $expval132=($conv131);
      var $tobool133=(($expval132)|(0))!=0;
      if ($tobool133) { label = 46; break; } else { label = 57; break; }
    case 46: 
      var $127=$XP;
      var $128=$R;
      var $parent135=(($128+24)|0);
      HEAP32[(($parent135)>>2)]=$127;
      var $129=$v;
      var $child136=(($129+16)|0);
      var $arrayidx137=(($child136)|0);
      var $130=HEAP32[(($arrayidx137)>>2)];
      $C0=$130;
      var $cmp138=(($130)|(0))!=0;
      if ($cmp138) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $131=$C0;
      var $132=$131;
      var $133=$m_addr;
      var $least_addr141=(($133+16)|0);
      var $134=HEAP32[(($least_addr141)>>2)];
      var $cmp142=(($132)>>>(0)) >= (($134)>>>(0));
      var $conv143=(($cmp142)&(1));
      var $expval144=($conv143);
      var $tobool145=(($expval144)|(0))!=0;
      if ($tobool145) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $135=$C0;
      var $136=$R;
      var $child147=(($136+16)|0);
      var $arrayidx148=(($child147)|0);
      HEAP32[(($arrayidx148)>>2)]=$135;
      var $137=$R;
      var $138=$C0;
      var $parent149=(($138+24)|0);
      HEAP32[(($parent149)>>2)]=$137;
      label = 50; break;
    case 49: 
      _abort();
      throw "Reached an unreachable!";
    case 50: 
      label = 51; break;
    case 51: 
      var $139=$v;
      var $child153=(($139+16)|0);
      var $arrayidx154=(($child153+4)|0);
      var $140=HEAP32[(($arrayidx154)>>2)];
      $C1=$140;
      var $cmp155=(($140)|(0))!=0;
      if ($cmp155) { label = 52; break; } else { label = 56; break; }
    case 52: 
      var $141=$C1;
      var $142=$141;
      var $143=$m_addr;
      var $least_addr158=(($143+16)|0);
      var $144=HEAP32[(($least_addr158)>>2)];
      var $cmp159=(($142)>>>(0)) >= (($144)>>>(0));
      var $conv160=(($cmp159)&(1));
      var $expval161=($conv160);
      var $tobool162=(($expval161)|(0))!=0;
      if ($tobool162) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $145=$C1;
      var $146=$R;
      var $child164=(($146+16)|0);
      var $arrayidx165=(($child164+4)|0);
      HEAP32[(($arrayidx165)>>2)]=$145;
      var $147=$R;
      var $148=$C1;
      var $parent166=(($148+24)|0);
      HEAP32[(($parent166)>>2)]=$147;
      label = 55; break;
    case 54: 
      _abort();
      throw "Reached an unreachable!";
    case 55: 
      label = 56; break;
    case 56: 
      label = 58; break;
    case 57: 
      _abort();
      throw "Reached an unreachable!";
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $149=$rsize;
      var $cmp174=(($149)>>>(0)) < 16;
      if ($cmp174) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $150=$rsize;
      var $151=$nb_addr;
      var $add177=((($150)+($151))|0);
      var $or=$add177 | 1;
      var $or178=$or | 2;
      var $152=$v;
      var $head179=(($152+4)|0);
      HEAP32[(($head179)>>2)]=$or178;
      var $153=$v;
      var $154=$153;
      var $155=$rsize;
      var $156=$nb_addr;
      var $add180=((($155)+($156))|0);
      var $add_ptr181=(($154+$add180)|0);
      var $157=$add_ptr181;
      var $head182=(($157+4)|0);
      var $158=HEAP32[(($head182)>>2)];
      var $or183=$158 | 1;
      HEAP32[(($head182)>>2)]=$or183;
      label = 71; break;
    case 62: 
      var $159=$nb_addr;
      var $or185=$159 | 1;
      var $or186=$or185 | 2;
      var $160=$v;
      var $head187=(($160+4)|0);
      HEAP32[(($head187)>>2)]=$or186;
      var $161=$rsize;
      var $or188=$161 | 1;
      var $162=$r;
      var $head189=(($162+4)|0);
      HEAP32[(($head189)>>2)]=$or188;
      var $163=$rsize;
      var $164=$r;
      var $165=$164;
      var $166=$rsize;
      var $add_ptr190=(($165+$166)|0);
      var $167=$add_ptr190;
      var $prev_foot=(($167)|0);
      HEAP32[(($prev_foot)>>2)]=$163;
      var $168=$m_addr;
      var $dvsize=(($168+8)|0);
      var $169=HEAP32[(($dvsize)>>2)];
      $DVS=$169;
      var $170=$DVS;
      var $cmp191=(($170)|(0))!=0;
      if ($cmp191) { label = 63; break; } else { label = 70; break; }
    case 63: 
      var $171=$m_addr;
      var $dv=(($171+20)|0);
      var $172=HEAP32[(($dv)>>2)];
      $DV=$172;
      var $173=$DVS;
      var $shr194=$173 >>> 3;
      $I=$shr194;
      var $174=$I;
      var $shl195=$174 << 1;
      var $175=$m_addr;
      var $smallbins=(($175+40)|0);
      var $arrayidx196=(($smallbins+($shl195<<2))|0);
      var $176=$arrayidx196;
      var $177=$176;
      $B=$177;
      var $178=$B;
      $F197=$178;
      var $179=$m_addr;
      var $smallmap=(($179)|0);
      var $180=HEAP32[(($smallmap)>>2)];
      var $181=$I;
      var $shl198=1 << $181;
      var $and199=$180 & $shl198;
      var $tobool200=(($and199)|(0))!=0;
      if ($tobool200) { label = 65; break; } else { label = 64; break; }
    case 64: 
      var $182=$I;
      var $shl202=1 << $182;
      var $183=$m_addr;
      var $smallmap203=(($183)|0);
      var $184=HEAP32[(($smallmap203)>>2)];
      var $or204=$184 | $shl202;
      HEAP32[(($smallmap203)>>2)]=$or204;
      label = 69; break;
    case 65: 
      var $185=$B;
      var $fd206=(($185+8)|0);
      var $186=HEAP32[(($fd206)>>2)];
      var $187=$186;
      var $188=$m_addr;
      var $least_addr207=(($188+16)|0);
      var $189=HEAP32[(($least_addr207)>>2)];
      var $cmp208=(($187)>>>(0)) >= (($189)>>>(0));
      var $conv209=(($cmp208)&(1));
      var $expval210=($conv209);
      var $tobool211=(($expval210)|(0))!=0;
      if ($tobool211) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $190=$B;
      var $fd213=(($190+8)|0);
      var $191=HEAP32[(($fd213)>>2)];
      $F197=$191;
      label = 68; break;
    case 67: 
      _abort();
      throw "Reached an unreachable!";
    case 68: 
      label = 69; break;
    case 69: 
      var $192=$DV;
      var $193=$B;
      var $fd217=(($193+8)|0);
      HEAP32[(($fd217)>>2)]=$192;
      var $194=$DV;
      var $195=$F197;
      var $bk218=(($195+12)|0);
      HEAP32[(($bk218)>>2)]=$194;
      var $196=$F197;
      var $197=$DV;
      var $fd219=(($197+8)|0);
      HEAP32[(($fd219)>>2)]=$196;
      var $198=$B;
      var $199=$DV;
      var $bk220=(($199+12)|0);
      HEAP32[(($bk220)>>2)]=$198;
      label = 70; break;
    case 70: 
      var $200=$rsize;
      var $201=$m_addr;
      var $dvsize222=(($201+8)|0);
      HEAP32[(($dvsize222)>>2)]=$200;
      var $202=$r;
      var $203=$m_addr;
      var $dv223=(($203+20)|0);
      HEAP32[(($dv223)>>2)]=$202;
      label = 71; break;
    case 71: 
      var $204=$v;
      var $205=$204;
      var $add_ptr225=(($205+8)|0);
      return $add_ptr225;
    case 72: 
      label = 73; break;
    case 73: 
      _abort();
      throw "Reached an unreachable!";
    default: assert(0, "bad label: " + label);
  }
}
function _tmalloc_large($m, $nb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $v;
      var $rsize;
      var $t;
      var $idx;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $sizebits;
      var $rst;
      var $rt;
      var $trem;
      var $leftbits;
      var $i;
      var $leastbit;
      var $Y68;
      var $K70;
      var $N73;
      var $trem97;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I;
      var $B;
      var $F289;
      var $TP;
      var $H314;
      var $I315;
      var $X316;
      var $Y326;
      var $N327;
      var $K331;
      var $T;
      var $K372;
      var $C;
      var $F411;
      $m_addr=$m;
      $nb_addr=$nb;
      $v=0;
      var $0=$nb_addr;
      var $sub=(((-$0))|0);
      $rsize=$sub;
      var $1=$nb_addr;
      var $shr=$1 >>> 8;
      $X=$shr;
      var $2=$X;
      var $cmp=(($2)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $idx=0;
      label = 8; break;
    case 4: 
      var $3=$X;
      var $cmp1=(($3)>>>(0)) > 65535;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $idx=31;
      label = 7; break;
    case 6: 
      var $4=$X;
      $Y=$4;
      var $5=$Y;
      var $sub4=((($5)-(256))|0);
      var $shr5=$sub4 >>> 16;
      var $and=$shr5 & 8;
      $N=$and;
      var $6=$N;
      var $7=$Y;
      var $shl=$7 << $6;
      $Y=$shl;
      var $sub6=((($shl)-(4096))|0);
      var $shr7=$sub6 >>> 16;
      var $and8=$shr7 & 4;
      $K=$and8;
      var $8=$K;
      var $9=$N;
      var $add=((($9)+($8))|0);
      $N=$add;
      var $10=$K;
      var $11=$Y;
      var $shl9=$11 << $10;
      $Y=$shl9;
      var $sub10=((($shl9)-(16384))|0);
      var $shr11=$sub10 >>> 16;
      var $and12=$shr11 & 2;
      $K=$and12;
      var $12=$N;
      var $add13=((($12)+($and12))|0);
      $N=$add13;
      var $13=$N;
      var $sub14=(((14)-($13))|0);
      var $14=$K;
      var $15=$Y;
      var $shl15=$15 << $14;
      $Y=$shl15;
      var $shr16=$shl15 >>> 15;
      var $add17=((($sub14)+($shr16))|0);
      $K=$add17;
      var $16=$K;
      var $shl18=$16 << 1;
      var $17=$nb_addr;
      var $18=$K;
      var $add19=((($18)+(7))|0);
      var $shr20=$17 >>> (($add19)>>>(0));
      var $and21=$shr20 & 1;
      var $add22=((($shl18)+($and21))|0);
      $idx=$add22;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $19=$idx;
      var $20=$m_addr;
      var $treebins=(($20+304)|0);
      var $arrayidx=(($treebins+($19<<2))|0);
      var $21=HEAP32[(($arrayidx)>>2)];
      $t=$21;
      var $cmp24=(($21)|(0))!=0;
      if ($cmp24) { label = 9; break; } else { label = 24; break; }
    case 9: 
      var $22=$nb_addr;
      var $23=$idx;
      var $cmp26=(($23)|(0))==31;
      if ($cmp26) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $cond = 0;label = 12; break;
    case 11: 
      var $24=$idx;
      var $shr27=$24 >>> 1;
      var $add28=((($shr27)+(8))|0);
      var $sub29=((($add28)-(2))|0);
      var $sub30=(((31)-($sub29))|0);
      var $cond = $sub30;label = 12; break;
    case 12: 
      var $cond;
      var $shl31=$22 << $cond;
      $sizebits=$shl31;
      $rst=0;
      label = 13; break;
    case 13: 
      var $25=$t;
      var $head=(($25+4)|0);
      var $26=HEAP32[(($head)>>2)];
      var $and32=$26 & -8;
      var $27=$nb_addr;
      var $sub33=((($and32)-($27))|0);
      $trem=$sub33;
      var $28=$trem;
      var $29=$rsize;
      var $cmp34=(($28)>>>(0)) < (($29)>>>(0));
      if ($cmp34) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $30=$t;
      $v=$30;
      var $31=$trem;
      $rsize=$31;
      var $cmp36=(($31)|(0))==0;
      if ($cmp36) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 23; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $32=$t;
      var $child=(($32+16)|0);
      var $arrayidx40=(($child+4)|0);
      var $33=HEAP32[(($arrayidx40)>>2)];
      $rt=$33;
      var $34=$sizebits;
      var $shr41=$34 >>> 31;
      var $and42=$shr41 & 1;
      var $35=$t;
      var $child43=(($35+16)|0);
      var $arrayidx44=(($child43+($and42<<2))|0);
      var $36=HEAP32[(($arrayidx44)>>2)];
      $t=$36;
      var $37=$rt;
      var $cmp45=(($37)|(0))!=0;
      if ($cmp45) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $38=$rt;
      var $39=$t;
      var $cmp46=(($38)|(0))!=(($39)|(0));
      if ($cmp46) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $40=$rt;
      $rst=$40;
      label = 20; break;
    case 20: 
      var $41=$t;
      var $cmp49=(($41)|(0))==0;
      if ($cmp49) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $42=$rst;
      $t=$42;
      label = 23; break;
    case 22: 
      var $43=$sizebits;
      var $shl52=$43 << 1;
      $sizebits=$shl52;
      label = 13; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $44=$t;
      var $cmp54=(($44)|(0))==0;
      if ($cmp54) { label = 25; break; } else { label = 29; break; }
    case 25: 
      var $45=$v;
      var $cmp56=(($45)|(0))==0;
      if ($cmp56) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $46=$idx;
      var $shl58=1 << $46;
      var $shl59=$shl58 << 1;
      var $47=$idx;
      var $shl60=1 << $47;
      var $shl61=$shl60 << 1;
      var $sub62=(((-$shl61))|0);
      var $or=$shl59 | $sub62;
      var $48=$m_addr;
      var $treemap=(($48+4)|0);
      var $49=HEAP32[(($treemap)>>2)];
      var $and63=$or & $49;
      $leftbits=$and63;
      var $50=$leftbits;
      var $cmp64=(($50)|(0))!=0;
      if ($cmp64) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $51=$leftbits;
      var $52=$leftbits;
      var $sub66=(((-$52))|0);
      var $and67=$51 & $sub66;
      $leastbit=$and67;
      var $53=$leastbit;
      var $sub69=((($53)-(1))|0);
      $Y68=$sub69;
      var $54=$Y68;
      var $shr71=$54 >>> 12;
      var $and72=$shr71 & 16;
      $K70=$and72;
      var $55=$K70;
      $N73=$55;
      var $56=$K70;
      var $57=$Y68;
      var $shr74=$57 >>> (($56)>>>(0));
      $Y68=$shr74;
      var $58=$Y68;
      var $shr75=$58 >>> 5;
      var $and76=$shr75 & 8;
      $K70=$and76;
      var $59=$N73;
      var $add77=((($59)+($and76))|0);
      $N73=$add77;
      var $60=$K70;
      var $61=$Y68;
      var $shr78=$61 >>> (($60)>>>(0));
      $Y68=$shr78;
      var $62=$Y68;
      var $shr79=$62 >>> 2;
      var $and80=$shr79 & 4;
      $K70=$and80;
      var $63=$N73;
      var $add81=((($63)+($and80))|0);
      $N73=$add81;
      var $64=$K70;
      var $65=$Y68;
      var $shr82=$65 >>> (($64)>>>(0));
      $Y68=$shr82;
      var $66=$Y68;
      var $shr83=$66 >>> 1;
      var $and84=$shr83 & 2;
      $K70=$and84;
      var $67=$N73;
      var $add85=((($67)+($and84))|0);
      $N73=$add85;
      var $68=$K70;
      var $69=$Y68;
      var $shr86=$69 >>> (($68)>>>(0));
      $Y68=$shr86;
      var $70=$Y68;
      var $shr87=$70 >>> 1;
      var $and88=$shr87 & 1;
      $K70=$and88;
      var $71=$N73;
      var $add89=((($71)+($and88))|0);
      $N73=$add89;
      var $72=$K70;
      var $73=$Y68;
      var $shr90=$73 >>> (($72)>>>(0));
      $Y68=$shr90;
      var $74=$N73;
      var $75=$Y68;
      var $add91=((($74)+($75))|0);
      $i=$add91;
      var $76=$i;
      var $77=$m_addr;
      var $treebins92=(($77+304)|0);
      var $arrayidx93=(($treebins92+($76<<2))|0);
      var $78=HEAP32[(($arrayidx93)>>2)];
      $t=$78;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $79=$t;
      var $cmp96=(($79)|(0))!=0;
      if ($cmp96) { label = 31; break; } else { label = 37; break; }
    case 31: 
      var $80=$t;
      var $head98=(($80+4)|0);
      var $81=HEAP32[(($head98)>>2)];
      var $and99=$81 & -8;
      var $82=$nb_addr;
      var $sub100=((($and99)-($82))|0);
      $trem97=$sub100;
      var $83=$trem97;
      var $84=$rsize;
      var $cmp101=(($83)>>>(0)) < (($84)>>>(0));
      if ($cmp101) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $85=$trem97;
      $rsize=$85;
      var $86=$t;
      $v=$86;
      label = 33; break;
    case 33: 
      var $87=$t;
      var $child104=(($87+16)|0);
      var $arrayidx105=(($child104)|0);
      var $88=HEAP32[(($arrayidx105)>>2)];
      var $cmp106=(($88)|(0))!=0;
      if ($cmp106) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $89=$t;
      var $child108=(($89+16)|0);
      var $arrayidx109=(($child108)|0);
      var $90=HEAP32[(($arrayidx109)>>2)];
      var $cond114 = $90;label = 36; break;
    case 35: 
      var $91=$t;
      var $child111=(($91+16)|0);
      var $arrayidx112=(($child111+4)|0);
      var $92=HEAP32[(($arrayidx112)>>2)];
      var $cond114 = $92;label = 36; break;
    case 36: 
      var $cond114;
      $t=$cond114;
      label = 30; break;
    case 37: 
      var $93=$v;
      var $cmp115=(($93)|(0))!=0;
      if ($cmp115) { label = 38; break; } else { label = 130; break; }
    case 38: 
      var $94=$rsize;
      var $95=$m_addr;
      var $dvsize=(($95+8)|0);
      var $96=HEAP32[(($dvsize)>>2)];
      var $97=$nb_addr;
      var $sub117=((($96)-($97))|0);
      var $cmp118=(($94)>>>(0)) < (($sub117)>>>(0));
      if ($cmp118) { label = 39; break; } else { label = 130; break; }
    case 39: 
      var $98=$v;
      var $99=$98;
      var $100=$m_addr;
      var $least_addr=(($100+16)|0);
      var $101=HEAP32[(($least_addr)>>2)];
      var $cmp120=(($99)>>>(0)) >= (($101)>>>(0));
      var $conv=(($cmp120)&(1));
      var $expval=($conv);
      var $tobool=(($expval)|(0))!=0;
      if ($tobool) { label = 40; break; } else { label = 129; break; }
    case 40: 
      var $102=$v;
      var $103=$102;
      var $104=$nb_addr;
      var $add_ptr=(($103+$104)|0);
      var $105=$add_ptr;
      $r=$105;
      var $106=$v;
      var $107=$106;
      var $108=$r;
      var $109=$108;
      var $cmp122=(($107)>>>(0)) < (($109)>>>(0));
      var $conv123=(($cmp122)&(1));
      var $expval124=($conv123);
      var $tobool125=(($expval124)|(0))!=0;
      if ($tobool125) { label = 41; break; } else { label = 128; break; }
    case 41: 
      var $110=$v;
      var $parent=(($110+24)|0);
      var $111=HEAP32[(($parent)>>2)];
      $XP=$111;
      var $112=$v;
      var $bk=(($112+12)|0);
      var $113=HEAP32[(($bk)>>2)];
      var $114=$v;
      var $cmp127=(($113)|(0))!=(($114)|(0));
      if ($cmp127) { label = 42; break; } else { label = 49; break; }
    case 42: 
      var $115=$v;
      var $fd=(($115+8)|0);
      var $116=HEAP32[(($fd)>>2)];
      $F=$116;
      var $117=$v;
      var $bk130=(($117+12)|0);
      var $118=HEAP32[(($bk130)>>2)];
      $R=$118;
      var $119=$F;
      var $120=$119;
      var $121=$m_addr;
      var $least_addr131=(($121+16)|0);
      var $122=HEAP32[(($least_addr131)>>2)];
      var $cmp132=(($120)>>>(0)) >= (($122)>>>(0));
      if ($cmp132) { label = 43; break; } else { var $129 = 0;label = 45; break; }
    case 43: 
      var $123=$F;
      var $bk135=(($123+12)|0);
      var $124=HEAP32[(($bk135)>>2)];
      var $125=$v;
      var $cmp136=(($124)|(0))==(($125)|(0));
      if ($cmp136) { label = 44; break; } else { var $129 = 0;label = 45; break; }
    case 44: 
      var $126=$R;
      var $fd138=(($126+8)|0);
      var $127=HEAP32[(($fd138)>>2)];
      var $128=$v;
      var $cmp139=(($127)|(0))==(($128)|(0));
      var $129 = $cmp139;label = 45; break;
    case 45: 
      var $129;
      var $land_ext=(($129)&(1));
      var $expval141=($land_ext);
      var $tobool142=(($expval141)|(0))!=0;
      if ($tobool142) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $130=$R;
      var $131=$F;
      var $bk144=(($131+12)|0);
      HEAP32[(($bk144)>>2)]=$130;
      var $132=$F;
      var $133=$R;
      var $fd145=(($133+8)|0);
      HEAP32[(($fd145)>>2)]=$132;
      label = 48; break;
    case 47: 
      _abort();
      throw "Reached an unreachable!";
    case 48: 
      label = 61; break;
    case 49: 
      var $134=$v;
      var $child149=(($134+16)|0);
      var $arrayidx150=(($child149+4)|0);
      $RP=$arrayidx150;
      var $135=HEAP32[(($arrayidx150)>>2)];
      $R=$135;
      var $cmp151=(($135)|(0))!=0;
      if ($cmp151) { label = 51; break; } else { label = 50; break; }
    case 50: 
      var $136=$v;
      var $child153=(($136+16)|0);
      var $arrayidx154=(($child153)|0);
      $RP=$arrayidx154;
      var $137=HEAP32[(($arrayidx154)>>2)];
      $R=$137;
      var $cmp155=(($137)|(0))!=0;
      if ($cmp155) { label = 51; break; } else { label = 60; break; }
    case 51: 
      label = 52; break;
    case 52: 
      var $138=$R;
      var $child159=(($138+16)|0);
      var $arrayidx160=(($child159+4)|0);
      $CP=$arrayidx160;
      var $139=HEAP32[(($arrayidx160)>>2)];
      var $cmp161=(($139)|(0))!=0;
      if ($cmp161) { var $142 = 1;label = 54; break; } else { label = 53; break; }
    case 53: 
      var $140=$R;
      var $child163=(($140+16)|0);
      var $arrayidx164=(($child163)|0);
      $CP=$arrayidx164;
      var $141=HEAP32[(($arrayidx164)>>2)];
      var $cmp165=(($141)|(0))!=0;
      var $142 = $cmp165;label = 54; break;
    case 54: 
      var $142;
      if ($142) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $143=$CP;
      $RP=$143;
      var $144=HEAP32[(($143)>>2)];
      $R=$144;
      label = 52; break;
    case 56: 
      var $145=$RP;
      var $146=$145;
      var $147=$m_addr;
      var $least_addr169=(($147+16)|0);
      var $148=HEAP32[(($least_addr169)>>2)];
      var $cmp170=(($146)>>>(0)) >= (($148)>>>(0));
      var $conv171=(($cmp170)&(1));
      var $expval172=($conv171);
      var $tobool173=(($expval172)|(0))!=0;
      if ($tobool173) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $149=$RP;
      HEAP32[(($149)>>2)]=0;
      label = 59; break;
    case 58: 
      _abort();
      throw "Reached an unreachable!";
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $150=$XP;
      var $cmp179=(($150)|(0))!=0;
      if ($cmp179) { label = 62; break; } else { label = 89; break; }
    case 62: 
      var $151=$v;
      var $index=(($151+28)|0);
      var $152=HEAP32[(($index)>>2)];
      var $153=$m_addr;
      var $treebins182=(($153+304)|0);
      var $arrayidx183=(($treebins182+($152<<2))|0);
      $H=$arrayidx183;
      var $154=$v;
      var $155=$H;
      var $156=HEAP32[(($155)>>2)];
      var $cmp184=(($154)|(0))==(($156)|(0));
      if ($cmp184) { label = 63; break; } else { label = 66; break; }
    case 63: 
      var $157=$R;
      var $158=$H;
      HEAP32[(($158)>>2)]=$157;
      var $cmp187=(($157)|(0))==0;
      if ($cmp187) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $159=$v;
      var $index190=(($159+28)|0);
      var $160=HEAP32[(($index190)>>2)];
      var $shl191=1 << $160;
      var $neg=$shl191 ^ -1;
      var $161=$m_addr;
      var $treemap192=(($161+4)|0);
      var $162=HEAP32[(($treemap192)>>2)];
      var $and193=$162 & $neg;
      HEAP32[(($treemap192)>>2)]=$and193;
      label = 65; break;
    case 65: 
      label = 73; break;
    case 66: 
      var $163=$XP;
      var $164=$163;
      var $165=$m_addr;
      var $least_addr196=(($165+16)|0);
      var $166=HEAP32[(($least_addr196)>>2)];
      var $cmp197=(($164)>>>(0)) >= (($166)>>>(0));
      var $conv198=(($cmp197)&(1));
      var $expval199=($conv198);
      var $tobool200=(($expval199)|(0))!=0;
      if ($tobool200) { label = 67; break; } else { label = 71; break; }
    case 67: 
      var $167=$XP;
      var $child202=(($167+16)|0);
      var $arrayidx203=(($child202)|0);
      var $168=HEAP32[(($arrayidx203)>>2)];
      var $169=$v;
      var $cmp204=(($168)|(0))==(($169)|(0));
      if ($cmp204) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $170=$R;
      var $171=$XP;
      var $child207=(($171+16)|0);
      var $arrayidx208=(($child207)|0);
      HEAP32[(($arrayidx208)>>2)]=$170;
      label = 70; break;
    case 69: 
      var $172=$R;
      var $173=$XP;
      var $child210=(($173+16)|0);
      var $arrayidx211=(($child210+4)|0);
      HEAP32[(($arrayidx211)>>2)]=$172;
      label = 70; break;
    case 70: 
      label = 72; break;
    case 71: 
      _abort();
      throw "Reached an unreachable!";
    case 72: 
      label = 73; break;
    case 73: 
      var $174=$R;
      var $cmp216=(($174)|(0))!=0;
      if ($cmp216) { label = 74; break; } else { label = 88; break; }
    case 74: 
      var $175=$R;
      var $176=$175;
      var $177=$m_addr;
      var $least_addr219=(($177+16)|0);
      var $178=HEAP32[(($least_addr219)>>2)];
      var $cmp220=(($176)>>>(0)) >= (($178)>>>(0));
      var $conv221=(($cmp220)&(1));
      var $expval222=($conv221);
      var $tobool223=(($expval222)|(0))!=0;
      if ($tobool223) { label = 75; break; } else { label = 86; break; }
    case 75: 
      var $179=$XP;
      var $180=$R;
      var $parent225=(($180+24)|0);
      HEAP32[(($parent225)>>2)]=$179;
      var $181=$v;
      var $child226=(($181+16)|0);
      var $arrayidx227=(($child226)|0);
      var $182=HEAP32[(($arrayidx227)>>2)];
      $C0=$182;
      var $cmp228=(($182)|(0))!=0;
      if ($cmp228) { label = 76; break; } else { label = 80; break; }
    case 76: 
      var $183=$C0;
      var $184=$183;
      var $185=$m_addr;
      var $least_addr231=(($185+16)|0);
      var $186=HEAP32[(($least_addr231)>>2)];
      var $cmp232=(($184)>>>(0)) >= (($186)>>>(0));
      var $conv233=(($cmp232)&(1));
      var $expval234=($conv233);
      var $tobool235=(($expval234)|(0))!=0;
      if ($tobool235) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $187=$C0;
      var $188=$R;
      var $child237=(($188+16)|0);
      var $arrayidx238=(($child237)|0);
      HEAP32[(($arrayidx238)>>2)]=$187;
      var $189=$R;
      var $190=$C0;
      var $parent239=(($190+24)|0);
      HEAP32[(($parent239)>>2)]=$189;
      label = 79; break;
    case 78: 
      _abort();
      throw "Reached an unreachable!";
    case 79: 
      label = 80; break;
    case 80: 
      var $191=$v;
      var $child243=(($191+16)|0);
      var $arrayidx244=(($child243+4)|0);
      var $192=HEAP32[(($arrayidx244)>>2)];
      $C1=$192;
      var $cmp245=(($192)|(0))!=0;
      if ($cmp245) { label = 81; break; } else { label = 85; break; }
    case 81: 
      var $193=$C1;
      var $194=$193;
      var $195=$m_addr;
      var $least_addr248=(($195+16)|0);
      var $196=HEAP32[(($least_addr248)>>2)];
      var $cmp249=(($194)>>>(0)) >= (($196)>>>(0));
      var $conv250=(($cmp249)&(1));
      var $expval251=($conv250);
      var $tobool252=(($expval251)|(0))!=0;
      if ($tobool252) { label = 82; break; } else { label = 83; break; }
    case 82: 
      var $197=$C1;
      var $198=$R;
      var $child254=(($198+16)|0);
      var $arrayidx255=(($child254+4)|0);
      HEAP32[(($arrayidx255)>>2)]=$197;
      var $199=$R;
      var $200=$C1;
      var $parent256=(($200+24)|0);
      HEAP32[(($parent256)>>2)]=$199;
      label = 84; break;
    case 83: 
      _abort();
      throw "Reached an unreachable!";
    case 84: 
      label = 85; break;
    case 85: 
      label = 87; break;
    case 86: 
      _abort();
      throw "Reached an unreachable!";
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $201=$rsize;
      var $cmp264=(($201)>>>(0)) < 16;
      if ($cmp264) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $202=$rsize;
      var $203=$nb_addr;
      var $add267=((($202)+($203))|0);
      var $or268=$add267 | 1;
      var $or269=$or268 | 2;
      var $204=$v;
      var $head270=(($204+4)|0);
      HEAP32[(($head270)>>2)]=$or269;
      var $205=$v;
      var $206=$205;
      var $207=$rsize;
      var $208=$nb_addr;
      var $add271=((($207)+($208))|0);
      var $add_ptr272=(($206+$add271)|0);
      var $209=$add_ptr272;
      var $head273=(($209+4)|0);
      var $210=HEAP32[(($head273)>>2)];
      var $or274=$210 | 1;
      HEAP32[(($head273)>>2)]=$or274;
      label = 127; break;
    case 91: 
      var $211=$nb_addr;
      var $or276=$211 | 1;
      var $or277=$or276 | 2;
      var $212=$v;
      var $head278=(($212+4)|0);
      HEAP32[(($head278)>>2)]=$or277;
      var $213=$rsize;
      var $or279=$213 | 1;
      var $214=$r;
      var $head280=(($214+4)|0);
      HEAP32[(($head280)>>2)]=$or279;
      var $215=$rsize;
      var $216=$r;
      var $217=$216;
      var $218=$rsize;
      var $add_ptr281=(($217+$218)|0);
      var $219=$add_ptr281;
      var $prev_foot=(($219)|0);
      HEAP32[(($prev_foot)>>2)]=$215;
      var $220=$rsize;
      var $shr282=$220 >>> 3;
      var $cmp283=(($shr282)>>>(0)) < 32;
      if ($cmp283) { label = 92; break; } else { label = 99; break; }
    case 92: 
      var $221=$rsize;
      var $shr286=$221 >>> 3;
      $I=$shr286;
      var $222=$I;
      var $shl287=$222 << 1;
      var $223=$m_addr;
      var $smallbins=(($223+40)|0);
      var $arrayidx288=(($smallbins+($shl287<<2))|0);
      var $224=$arrayidx288;
      var $225=$224;
      $B=$225;
      var $226=$B;
      $F289=$226;
      var $227=$m_addr;
      var $smallmap=(($227)|0);
      var $228=HEAP32[(($smallmap)>>2)];
      var $229=$I;
      var $shl290=1 << $229;
      var $and291=$228 & $shl290;
      var $tobool292=(($and291)|(0))!=0;
      if ($tobool292) { label = 94; break; } else { label = 93; break; }
    case 93: 
      var $230=$I;
      var $shl294=1 << $230;
      var $231=$m_addr;
      var $smallmap295=(($231)|0);
      var $232=HEAP32[(($smallmap295)>>2)];
      var $or296=$232 | $shl294;
      HEAP32[(($smallmap295)>>2)]=$or296;
      label = 98; break;
    case 94: 
      var $233=$B;
      var $fd298=(($233+8)|0);
      var $234=HEAP32[(($fd298)>>2)];
      var $235=$234;
      var $236=$m_addr;
      var $least_addr299=(($236+16)|0);
      var $237=HEAP32[(($least_addr299)>>2)];
      var $cmp300=(($235)>>>(0)) >= (($237)>>>(0));
      var $conv301=(($cmp300)&(1));
      var $expval302=($conv301);
      var $tobool303=(($expval302)|(0))!=0;
      if ($tobool303) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $238=$B;
      var $fd305=(($238+8)|0);
      var $239=HEAP32[(($fd305)>>2)];
      $F289=$239;
      label = 97; break;
    case 96: 
      _abort();
      throw "Reached an unreachable!";
    case 97: 
      label = 98; break;
    case 98: 
      var $240=$r;
      var $241=$B;
      var $fd309=(($241+8)|0);
      HEAP32[(($fd309)>>2)]=$240;
      var $242=$r;
      var $243=$F289;
      var $bk310=(($243+12)|0);
      HEAP32[(($bk310)>>2)]=$242;
      var $244=$F289;
      var $245=$r;
      var $fd311=(($245+8)|0);
      HEAP32[(($fd311)>>2)]=$244;
      var $246=$B;
      var $247=$r;
      var $bk312=(($247+12)|0);
      HEAP32[(($bk312)>>2)]=$246;
      label = 126; break;
    case 99: 
      var $248=$r;
      var $249=$248;
      $TP=$249;
      var $250=$rsize;
      var $shr317=$250 >>> 8;
      $X316=$shr317;
      var $251=$X316;
      var $cmp318=(($251)|(0))==0;
      if ($cmp318) { label = 100; break; } else { label = 101; break; }
    case 100: 
      $I315=0;
      label = 105; break;
    case 101: 
      var $252=$X316;
      var $cmp322=(($252)>>>(0)) > 65535;
      if ($cmp322) { label = 102; break; } else { label = 103; break; }
    case 102: 
      $I315=31;
      label = 104; break;
    case 103: 
      var $253=$X316;
      $Y326=$253;
      var $254=$Y326;
      var $sub328=((($254)-(256))|0);
      var $shr329=$sub328 >>> 16;
      var $and330=$shr329 & 8;
      $N327=$and330;
      var $255=$N327;
      var $256=$Y326;
      var $shl332=$256 << $255;
      $Y326=$shl332;
      var $sub333=((($shl332)-(4096))|0);
      var $shr334=$sub333 >>> 16;
      var $and335=$shr334 & 4;
      $K331=$and335;
      var $257=$K331;
      var $258=$N327;
      var $add336=((($258)+($257))|0);
      $N327=$add336;
      var $259=$K331;
      var $260=$Y326;
      var $shl337=$260 << $259;
      $Y326=$shl337;
      var $sub338=((($shl337)-(16384))|0);
      var $shr339=$sub338 >>> 16;
      var $and340=$shr339 & 2;
      $K331=$and340;
      var $261=$N327;
      var $add341=((($261)+($and340))|0);
      $N327=$add341;
      var $262=$N327;
      var $sub342=(((14)-($262))|0);
      var $263=$K331;
      var $264=$Y326;
      var $shl343=$264 << $263;
      $Y326=$shl343;
      var $shr344=$shl343 >>> 15;
      var $add345=((($sub342)+($shr344))|0);
      $K331=$add345;
      var $265=$K331;
      var $shl346=$265 << 1;
      var $266=$rsize;
      var $267=$K331;
      var $add347=((($267)+(7))|0);
      var $shr348=$266 >>> (($add347)>>>(0));
      var $and349=$shr348 & 1;
      var $add350=((($shl346)+($and349))|0);
      $I315=$add350;
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      var $268=$I315;
      var $269=$m_addr;
      var $treebins353=(($269+304)|0);
      var $arrayidx354=(($treebins353+($268<<2))|0);
      $H314=$arrayidx354;
      var $270=$I315;
      var $271=$TP;
      var $index355=(($271+28)|0);
      HEAP32[(($index355)>>2)]=$270;
      var $272=$TP;
      var $child356=(($272+16)|0);
      var $arrayidx357=(($child356+4)|0);
      HEAP32[(($arrayidx357)>>2)]=0;
      var $273=$TP;
      var $child358=(($273+16)|0);
      var $arrayidx359=(($child358)|0);
      HEAP32[(($arrayidx359)>>2)]=0;
      var $274=$m_addr;
      var $treemap360=(($274+4)|0);
      var $275=HEAP32[(($treemap360)>>2)];
      var $276=$I315;
      var $shl361=1 << $276;
      var $and362=$275 & $shl361;
      var $tobool363=(($and362)|(0))!=0;
      if ($tobool363) { label = 107; break; } else { label = 106; break; }
    case 106: 
      var $277=$I315;
      var $shl365=1 << $277;
      var $278=$m_addr;
      var $treemap366=(($278+4)|0);
      var $279=HEAP32[(($treemap366)>>2)];
      var $or367=$279 | $shl365;
      HEAP32[(($treemap366)>>2)]=$or367;
      var $280=$TP;
      var $281=$H314;
      HEAP32[(($281)>>2)]=$280;
      var $282=$H314;
      var $283=$282;
      var $284=$TP;
      var $parent368=(($284+24)|0);
      HEAP32[(($parent368)>>2)]=$283;
      var $285=$TP;
      var $286=$TP;
      var $bk369=(($286+12)|0);
      HEAP32[(($bk369)>>2)]=$285;
      var $287=$TP;
      var $fd370=(($287+8)|0);
      HEAP32[(($fd370)>>2)]=$285;
      label = 125; break;
    case 107: 
      var $288=$H314;
      var $289=HEAP32[(($288)>>2)];
      $T=$289;
      var $290=$rsize;
      var $291=$I315;
      var $cmp373=(($291)|(0))==31;
      if ($cmp373) { label = 108; break; } else { label = 109; break; }
    case 108: 
      var $cond382 = 0;label = 110; break;
    case 109: 
      var $292=$I315;
      var $shr377=$292 >>> 1;
      var $add378=((($shr377)+(8))|0);
      var $sub379=((($add378)-(2))|0);
      var $sub380=(((31)-($sub379))|0);
      var $cond382 = $sub380;label = 110; break;
    case 110: 
      var $cond382;
      var $shl383=$290 << $cond382;
      $K372=$shl383;
      label = 111; break;
    case 111: 
      var $293=$T;
      var $head385=(($293+4)|0);
      var $294=HEAP32[(($head385)>>2)];
      var $and386=$294 & -8;
      var $295=$rsize;
      var $cmp387=(($and386)|(0))!=(($295)|(0));
      if ($cmp387) { label = 112; break; } else { label = 118; break; }
    case 112: 
      var $296=$K372;
      var $shr390=$296 >>> 31;
      var $and391=$shr390 & 1;
      var $297=$T;
      var $child392=(($297+16)|0);
      var $arrayidx393=(($child392+($and391<<2))|0);
      $C=$arrayidx393;
      var $298=$K372;
      var $shl394=$298 << 1;
      $K372=$shl394;
      var $299=$C;
      var $300=HEAP32[(($299)>>2)];
      var $cmp395=(($300)|(0))!=0;
      if ($cmp395) { label = 113; break; } else { label = 114; break; }
    case 113: 
      var $301=$C;
      var $302=HEAP32[(($301)>>2)];
      $T=$302;
      label = 117; break;
    case 114: 
      var $303=$C;
      var $304=$303;
      var $305=$m_addr;
      var $least_addr399=(($305+16)|0);
      var $306=HEAP32[(($least_addr399)>>2)];
      var $cmp400=(($304)>>>(0)) >= (($306)>>>(0));
      var $conv401=(($cmp400)&(1));
      var $expval402=($conv401);
      var $tobool403=(($expval402)|(0))!=0;
      if ($tobool403) { label = 115; break; } else { label = 116; break; }
    case 115: 
      var $307=$TP;
      var $308=$C;
      HEAP32[(($308)>>2)]=$307;
      var $309=$T;
      var $310=$TP;
      var $parent405=(($310+24)|0);
      HEAP32[(($parent405)>>2)]=$309;
      var $311=$TP;
      var $312=$TP;
      var $bk406=(($312+12)|0);
      HEAP32[(($bk406)>>2)]=$311;
      var $313=$TP;
      var $fd407=(($313+8)|0);
      HEAP32[(($fd407)>>2)]=$311;
      label = 124; break;
    case 116: 
      _abort();
      throw "Reached an unreachable!";
    case 117: 
      label = 123; break;
    case 118: 
      var $314=$T;
      var $fd412=(($314+8)|0);
      var $315=HEAP32[(($fd412)>>2)];
      $F411=$315;
      var $316=$T;
      var $317=$316;
      var $318=$m_addr;
      var $least_addr413=(($318+16)|0);
      var $319=HEAP32[(($least_addr413)>>2)];
      var $cmp414=(($317)>>>(0)) >= (($319)>>>(0));
      if ($cmp414) { label = 119; break; } else { var $324 = 0;label = 120; break; }
    case 119: 
      var $320=$F411;
      var $321=$320;
      var $322=$m_addr;
      var $least_addr417=(($322+16)|0);
      var $323=HEAP32[(($least_addr417)>>2)];
      var $cmp418=(($321)>>>(0)) >= (($323)>>>(0));
      var $324 = $cmp418;label = 120; break;
    case 120: 
      var $324;
      var $land_ext421=(($324)&(1));
      var $expval422=($land_ext421);
      var $tobool423=(($expval422)|(0))!=0;
      if ($tobool423) { label = 121; break; } else { label = 122; break; }
    case 121: 
      var $325=$TP;
      var $326=$F411;
      var $bk425=(($326+12)|0);
      HEAP32[(($bk425)>>2)]=$325;
      var $327=$T;
      var $fd426=(($327+8)|0);
      HEAP32[(($fd426)>>2)]=$325;
      var $328=$F411;
      var $329=$TP;
      var $fd427=(($329+8)|0);
      HEAP32[(($fd427)>>2)]=$328;
      var $330=$T;
      var $331=$TP;
      var $bk428=(($331+12)|0);
      HEAP32[(($bk428)>>2)]=$330;
      var $332=$TP;
      var $parent429=(($332+24)|0);
      HEAP32[(($parent429)>>2)]=0;
      label = 124; break;
    case 122: 
      _abort();
      throw "Reached an unreachable!";
    case 123: 
      label = 111; break;
    case 124: 
      label = 125; break;
    case 125: 
      label = 126; break;
    case 126: 
      label = 127; break;
    case 127: 
      var $333=$v;
      var $334=$333;
      var $add_ptr436=(($334+8)|0);
      $retval=$add_ptr436;
      label = 131; break;
    case 128: 
      label = 129; break;
    case 129: 
      _abort();
      throw "Reached an unreachable!";
    case 130: 
      $retval=0;
      label = 131; break;
    case 131: 
      var $335=$retval;
      return $335;
    default: assert(0, "bad label: " + label);
  }
}
function _sys_alloc($m, $nb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $tbase;
      var $tsize;
      var $mmap_flag;
      var $asize;
      var $mem;
      var $fp;
      var $br;
      var $ssize;
      var $ss;
      var $base;
      var $fp37;
      var $esize;
      var $end;
      var $br126;
      var $end127;
      var $ssize136;
      var $mn;
      var $sp;
      var $oldbase;
      var $rsize;
      var $p;
      var $r;
      $m_addr=$m;
      $nb_addr=$nb;
      $tbase=-1;
      $tsize=0;
      $mmap_flag=0;
      var $0=HEAP32[((((79952)|0))>>2)];
      var $cmp=(($0)|(0))!=0;
      if ($cmp) { var $1 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $call=_init_mparams();
      var $tobool=(($call)|(0))!=0;
      var $1 = $tobool;label = 4; break;
    case 4: 
      var $1;
      var $lor_ext=(($1)&(1));
      var $2=$m_addr;
      var $mflags=(($2+444)|0);
      var $3=HEAP32[(($mflags)>>2)];
      var $and=$3 & 0;
      var $tobool1=(($and)|(0))!=0;
      if ($tobool1) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $4=$nb_addr;
      var $5=HEAP32[((((79964)|0))>>2)];
      var $cmp2=(($4)>>>(0)) >= (($5)>>>(0));
      if ($cmp2) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $6=$m_addr;
      var $topsize=(($6+12)|0);
      var $7=HEAP32[(($topsize)>>2)];
      var $cmp4=(($7)|(0))!=0;
      if ($cmp4) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $8=$m_addr;
      var $9=$nb_addr;
      var $call5=_mmap_alloc($8, $9);
      $mem=$call5;
      var $10=$mem;
      var $cmp6=(($10)|(0))!=0;
      if ($cmp6) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $11=$mem;
      $retval=$11;
      label = 104; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $12=$nb_addr;
      var $add=((($12)+(48))|0);
      var $13=HEAP32[((((79960)|0))>>2)];
      var $sub=((($13)-(1))|0);
      var $add9=((($add)+($sub))|0);
      var $14=HEAP32[((((79960)|0))>>2)];
      var $sub10=((($14)-(1))|0);
      var $neg=$sub10 ^ -1;
      var $and11=$add9 & $neg;
      $asize=$and11;
      var $15=$asize;
      var $16=$nb_addr;
      var $cmp12=(($15)>>>(0)) <= (($16)>>>(0));
      if ($cmp12) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $retval=0;
      label = 104; break;
    case 12: 
      var $17=$m_addr;
      var $footprint_limit=(($17+440)|0);
      var $18=HEAP32[(($footprint_limit)>>2)];
      var $cmp15=(($18)|(0))!=0;
      if ($cmp15) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $19=$m_addr;
      var $footprint=(($19+432)|0);
      var $20=HEAP32[(($footprint)>>2)];
      var $21=$asize;
      var $add17=((($20)+($21))|0);
      $fp=$add17;
      var $22=$fp;
      var $23=$m_addr;
      var $footprint18=(($23+432)|0);
      var $24=HEAP32[(($footprint18)>>2)];
      var $cmp19=(($22)>>>(0)) <= (($24)>>>(0));
      if ($cmp19) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $25=$fp;
      var $26=$m_addr;
      var $footprint_limit20=(($26+440)|0);
      var $27=HEAP32[(($footprint_limit20)>>2)];
      var $cmp21=(($25)>>>(0)) > (($27)>>>(0));
      if ($cmp21) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $retval=0;
      label = 104; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $28=$m_addr;
      var $mflags25=(($28+444)|0);
      var $29=HEAP32[(($mflags25)>>2)];
      var $and26=$29 & 4;
      var $tobool27=(($and26)|(0))!=0;
      if ($tobool27) { label = 54; break; } else { label = 18; break; }
    case 18: 
      $br=-1;
      var $30=$asize;
      $ssize=$30;
      var $31=$m_addr;
      var $top=(($31+24)|0);
      var $32=HEAP32[(($top)>>2)];
      var $cmp29=(($32)|(0))==0;
      if ($cmp29) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $cond = 0;label = 21; break;
    case 20: 
      var $33=$m_addr;
      var $34=$m_addr;
      var $top30=(($34+24)|0);
      var $35=HEAP32[(($top30)>>2)];
      var $36=$35;
      var $call31=_segment_holding($33, $36);
      var $cond = $call31;label = 21; break;
    case 21: 
      var $cond;
      $ss=$cond;
      var $37=$ss;
      var $cmp32=(($37)|(0))==0;
      if ($cmp32) { label = 22; break; } else { label = 34; break; }
    case 22: 
      var $call34=_sbrk(0);
      $base=$call34;
      var $38=$base;
      var $cmp35=(($38)|(0))!=-1;
      if ($cmp35) { label = 23; break; } else { label = 33; break; }
    case 23: 
      var $39=$base;
      var $40=$39;
      var $41=HEAP32[((((79956)|0))>>2)];
      var $sub38=((($41)-(1))|0);
      var $and39=$40 & $sub38;
      var $cmp40=(($and39)|(0))==0;
      if ($cmp40) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $42=$base;
      var $43=$42;
      var $44=HEAP32[((((79956)|0))>>2)];
      var $sub42=((($44)-(1))|0);
      var $add43=((($43)+($sub42))|0);
      var $45=HEAP32[((((79956)|0))>>2)];
      var $sub44=((($45)-(1))|0);
      var $neg45=$sub44 ^ -1;
      var $and46=$add43 & $neg45;
      var $46=$base;
      var $47=$46;
      var $sub47=((($and46)-($47))|0);
      var $48=$ssize;
      var $add48=((($48)+($sub47))|0);
      $ssize=$add48;
      label = 25; break;
    case 25: 
      var $49=$m_addr;
      var $footprint50=(($49+432)|0);
      var $50=HEAP32[(($footprint50)>>2)];
      var $51=$ssize;
      var $add51=((($50)+($51))|0);
      $fp37=$add51;
      var $52=$ssize;
      var $53=$nb_addr;
      var $cmp52=(($52)>>>(0)) > (($53)>>>(0));
      if ($cmp52) { label = 26; break; } else { label = 32; break; }
    case 26: 
      var $54=$ssize;
      var $cmp54=(($54)>>>(0)) < 2147483647;
      if ($cmp54) { label = 27; break; } else { label = 32; break; }
    case 27: 
      var $55=$m_addr;
      var $footprint_limit56=(($55+440)|0);
      var $56=HEAP32[(($footprint_limit56)>>2)];
      var $cmp57=(($56)|(0))==0;
      if ($cmp57) { label = 30; break; } else { label = 28; break; }
    case 28: 
      var $57=$fp37;
      var $58=$m_addr;
      var $footprint59=(($58+432)|0);
      var $59=HEAP32[(($footprint59)>>2)];
      var $cmp60=(($57)>>>(0)) > (($59)>>>(0));
      if ($cmp60) { label = 29; break; } else { label = 32; break; }
    case 29: 
      var $60=$fp37;
      var $61=$m_addr;
      var $footprint_limit62=(($61+440)|0);
      var $62=HEAP32[(($footprint_limit62)>>2)];
      var $cmp63=(($60)>>>(0)) <= (($62)>>>(0));
      if ($cmp63) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $63=$ssize;
      var $call65=_sbrk($63);
      $br=$call65;
      var $64=$base;
      var $cmp66=(($call65)|(0))==(($64)|(0));
      if ($cmp66) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $65=$base;
      $tbase=$65;
      var $66=$ssize;
      $tsize=$66;
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 38; break;
    case 34: 
      var $67=$nb_addr;
      var $68=$m_addr;
      var $topsize70=(($68+12)|0);
      var $69=HEAP32[(($topsize70)>>2)];
      var $sub71=((($67)-($69))|0);
      var $add72=((($sub71)+(48))|0);
      var $70=HEAP32[((((79960)|0))>>2)];
      var $sub73=((($70)-(1))|0);
      var $add74=((($add72)+($sub73))|0);
      var $71=HEAP32[((((79960)|0))>>2)];
      var $sub75=((($71)-(1))|0);
      var $neg76=$sub75 ^ -1;
      var $and77=$add74 & $neg76;
      $ssize=$and77;
      var $72=$ssize;
      var $cmp78=(($72)>>>(0)) < 2147483647;
      if ($cmp78) { label = 35; break; } else { label = 37; break; }
    case 35: 
      var $73=$ssize;
      var $call80=_sbrk($73);
      $br=$call80;
      var $74=$ss;
      var $base81=(($74)|0);
      var $75=HEAP32[(($base81)>>2)];
      var $76=$ss;
      var $size=(($76+4)|0);
      var $77=HEAP32[(($size)>>2)];
      var $add_ptr=(($75+$77)|0);
      var $cmp82=(($call80)|(0))==(($add_ptr)|(0));
      if ($cmp82) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $78=$br;
      $tbase=$78;
      var $79=$ssize;
      $tsize=$79;
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $80=$tbase;
      var $cmp86=(($80)|(0))==-1;
      if ($cmp86) { label = 39; break; } else { label = 53; break; }
    case 39: 
      var $81=$br;
      var $cmp88=(($81)|(0))!=-1;
      if ($cmp88) { label = 40; break; } else { label = 49; break; }
    case 40: 
      var $82=$ssize;
      var $cmp90=(($82)>>>(0)) < 2147483647;
      if ($cmp90) { label = 41; break; } else { label = 48; break; }
    case 41: 
      var $83=$ssize;
      var $84=$nb_addr;
      var $add92=((($84)+(48))|0);
      var $cmp93=(($83)>>>(0)) < (($add92)>>>(0));
      if ($cmp93) { label = 42; break; } else { label = 48; break; }
    case 42: 
      var $85=$nb_addr;
      var $add95=((($85)+(48))|0);
      var $86=$ssize;
      var $sub96=((($add95)-($86))|0);
      var $87=HEAP32[((((79960)|0))>>2)];
      var $sub97=((($87)-(1))|0);
      var $add98=((($sub96)+($sub97))|0);
      var $88=HEAP32[((((79960)|0))>>2)];
      var $sub99=((($88)-(1))|0);
      var $neg100=$sub99 ^ -1;
      var $and101=$add98 & $neg100;
      $esize=$and101;
      var $89=$esize;
      var $cmp102=(($89)>>>(0)) < 2147483647;
      if ($cmp102) { label = 43; break; } else { label = 47; break; }
    case 43: 
      var $90=$esize;
      var $call104=_sbrk($90);
      $end=$call104;
      var $91=$end;
      var $cmp105=(($91)|(0))!=-1;
      if ($cmp105) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $92=$esize;
      var $93=$ssize;
      var $add107=((($93)+($92))|0);
      $ssize=$add107;
      label = 46; break;
    case 45: 
      var $94=$ssize;
      var $sub109=(((-$94))|0);
      var $call110=_sbrk($sub109);
      $br=-1;
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $95=$br;
      var $cmp115=(($95)|(0))!=-1;
      if ($cmp115) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $96=$br;
      $tbase=$96;
      var $97=$ssize;
      $tsize=$97;
      label = 52; break;
    case 51: 
      var $98=$m_addr;
      var $mflags118=(($98+444)|0);
      var $99=HEAP32[(($mflags118)>>2)];
      var $or=$99 | 4;
      HEAP32[(($mflags118)>>2)]=$or;
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $100=$tbase;
      var $cmp122=(($100)|(0))==-1;
      if ($cmp122) { label = 55; break; } else { label = 64; break; }
    case 55: 
      var $101=$asize;
      var $cmp124=(($101)>>>(0)) < 2147483647;
      if ($cmp124) { label = 56; break; } else { label = 63; break; }
    case 56: 
      $br126=-1;
      $end127=-1;
      var $102=$asize;
      var $call128=_sbrk($102);
      $br126=$call128;
      var $call129=_sbrk(0);
      $end127=$call129;
      var $103=$br126;
      var $cmp130=(($103)|(0))!=-1;
      if ($cmp130) { label = 57; break; } else { label = 62; break; }
    case 57: 
      var $104=$end127;
      var $cmp132=(($104)|(0))!=-1;
      if ($cmp132) { label = 58; break; } else { label = 62; break; }
    case 58: 
      var $105=$br126;
      var $106=$end127;
      var $cmp134=(($105)>>>(0)) < (($106)>>>(0));
      if ($cmp134) { label = 59; break; } else { label = 62; break; }
    case 59: 
      var $107=$end127;
      var $108=$br126;
      var $sub_ptr_lhs_cast=$107;
      var $sub_ptr_rhs_cast=$108;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $ssize136=$sub_ptr_sub;
      var $109=$ssize136;
      var $110=$nb_addr;
      var $add137=((($110)+(40))|0);
      var $cmp138=(($109)>>>(0)) > (($add137)>>>(0));
      if ($cmp138) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $111=$br126;
      $tbase=$111;
      var $112=$ssize136;
      $tsize=$112;
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $113=$tbase;
      var $cmp144=(($113)|(0))!=-1;
      if ($cmp144) { label = 65; break; } else { label = 103; break; }
    case 65: 
      var $114=$tsize;
      var $115=$m_addr;
      var $footprint146=(($115+432)|0);
      var $116=HEAP32[(($footprint146)>>2)];
      var $add147=((($116)+($114))|0);
      HEAP32[(($footprint146)>>2)]=$add147;
      var $117=$m_addr;
      var $max_footprint=(($117+436)|0);
      var $118=HEAP32[(($max_footprint)>>2)];
      var $cmp148=(($add147)>>>(0)) > (($118)>>>(0));
      if ($cmp148) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $119=$m_addr;
      var $footprint150=(($119+432)|0);
      var $120=HEAP32[(($footprint150)>>2)];
      var $121=$m_addr;
      var $max_footprint151=(($121+436)|0);
      HEAP32[(($max_footprint151)>>2)]=$120;
      label = 67; break;
    case 67: 
      var $122=$m_addr;
      var $top153=(($122+24)|0);
      var $123=HEAP32[(($top153)>>2)];
      var $cmp154=(($123)|(0))!=0;
      if ($cmp154) { label = 75; break; } else { label = 68; break; }
    case 68: 
      var $124=$m_addr;
      var $least_addr=(($124+16)|0);
      var $125=HEAP32[(($least_addr)>>2)];
      var $cmp156=(($125)|(0))==0;
      if ($cmp156) { label = 70; break; } else { label = 69; break; }
    case 69: 
      var $126=$tbase;
      var $127=$m_addr;
      var $least_addr158=(($127+16)|0);
      var $128=HEAP32[(($least_addr158)>>2)];
      var $cmp159=(($126)>>>(0)) < (($128)>>>(0));
      if ($cmp159) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $129=$tbase;
      var $130=$m_addr;
      var $least_addr161=(($130+16)|0);
      HEAP32[(($least_addr161)>>2)]=$129;
      label = 71; break;
    case 71: 
      var $131=$tbase;
      var $132=$m_addr;
      var $seg=(($132+448)|0);
      var $base163=(($seg)|0);
      HEAP32[(($base163)>>2)]=$131;
      var $133=$tsize;
      var $134=$m_addr;
      var $seg164=(($134+448)|0);
      var $size165=(($seg164+4)|0);
      HEAP32[(($size165)>>2)]=$133;
      var $135=$mmap_flag;
      var $136=$m_addr;
      var $seg166=(($136+448)|0);
      var $sflags=(($seg166+12)|0);
      HEAP32[(($sflags)>>2)]=$135;
      var $137=HEAP32[((((79952)|0))>>2)];
      var $138=$m_addr;
      var $magic=(($138+36)|0);
      HEAP32[(($magic)>>2)]=$137;
      var $139=$m_addr;
      var $release_checks=(($139+32)|0);
      HEAP32[(($release_checks)>>2)]=-1;
      var $140=$m_addr;
      _init_bins($140);
      var $141=$m_addr;
      var $cmp167=(($141)|(0))==113992;
      if ($cmp167) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $142=$m_addr;
      var $143=$tbase;
      var $144=$143;
      var $145=$tsize;
      var $sub169=((($145)-(40))|0);
      _init_top($142, $144, $sub169);
      label = 74; break;
    case 73: 
      var $146=$m_addr;
      var $147=$146;
      var $add_ptr171=((($147)-(8))|0);
      var $148=$add_ptr171;
      var $149=$148;
      var $150=$m_addr;
      var $151=$150;
      var $add_ptr172=((($151)-(8))|0);
      var $152=$add_ptr172;
      var $head=(($152+4)|0);
      var $153=HEAP32[(($head)>>2)];
      var $and173=$153 & -8;
      var $add_ptr174=(($149+$and173)|0);
      var $154=$add_ptr174;
      $mn=$154;
      var $155=$m_addr;
      var $156=$mn;
      var $157=$tbase;
      var $158=$tsize;
      var $add_ptr175=(($157+$158)|0);
      var $159=$mn;
      var $160=$159;
      var $sub_ptr_lhs_cast176=$add_ptr175;
      var $sub_ptr_rhs_cast177=$160;
      var $sub_ptr_sub178=((($sub_ptr_lhs_cast176)-($sub_ptr_rhs_cast177))|0);
      var $sub179=((($sub_ptr_sub178)-(40))|0);
      _init_top($155, $156, $sub179);
      label = 74; break;
    case 74: 
      label = 100; break;
    case 75: 
      var $161=$m_addr;
      var $seg182=(($161+448)|0);
      $sp=$seg182;
      label = 76; break;
    case 76: 
      var $162=$sp;
      var $cmp183=(($162)|(0))!=0;
      if ($cmp183) { label = 77; break; } else { var $168 = 0;label = 78; break; }
    case 77: 
      var $163=$tbase;
      var $164=$sp;
      var $base184=(($164)|0);
      var $165=HEAP32[(($base184)>>2)];
      var $166=$sp;
      var $size185=(($166+4)|0);
      var $167=HEAP32[(($size185)>>2)];
      var $add_ptr186=(($165+$167)|0);
      var $cmp187=(($163)|(0))!=(($add_ptr186)|(0));
      var $168 = $cmp187;label = 78; break;
    case 78: 
      var $168;
      if ($168) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $169=$sp;
      var $next=(($169+8)|0);
      var $170=HEAP32[(($next)>>2)];
      $sp=$170;
      label = 76; break;
    case 80: 
      var $171=$sp;
      var $cmp188=(($171)|(0))!=0;
      if ($cmp188) { label = 81; break; } else { label = 86; break; }
    case 81: 
      var $172=$sp;
      var $sflags190=(($172+12)|0);
      var $173=HEAP32[(($sflags190)>>2)];
      var $and191=$173 & 8;
      var $tobool192=(($and191)|(0))!=0;
      if ($tobool192) { label = 86; break; } else { label = 82; break; }
    case 82: 
      var $174=$sp;
      var $sflags194=(($174+12)|0);
      var $175=HEAP32[(($sflags194)>>2)];
      var $and195=$175 & 0;
      var $176=$mmap_flag;
      var $cmp196=(($and195)|(0))==(($176)|(0));
      if ($cmp196) { label = 83; break; } else { label = 86; break; }
    case 83: 
      var $177=$m_addr;
      var $top198=(($177+24)|0);
      var $178=HEAP32[(($top198)>>2)];
      var $179=$178;
      var $180=$sp;
      var $base199=(($180)|0);
      var $181=HEAP32[(($base199)>>2)];
      var $cmp200=(($179)>>>(0)) >= (($181)>>>(0));
      if ($cmp200) { label = 84; break; } else { label = 86; break; }
    case 84: 
      var $182=$m_addr;
      var $top202=(($182+24)|0);
      var $183=HEAP32[(($top202)>>2)];
      var $184=$183;
      var $185=$sp;
      var $base203=(($185)|0);
      var $186=HEAP32[(($base203)>>2)];
      var $187=$sp;
      var $size204=(($187+4)|0);
      var $188=HEAP32[(($size204)>>2)];
      var $add_ptr205=(($186+$188)|0);
      var $cmp206=(($184)>>>(0)) < (($add_ptr205)>>>(0));
      if ($cmp206) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $189=$tsize;
      var $190=$sp;
      var $size208=(($190+4)|0);
      var $191=HEAP32[(($size208)>>2)];
      var $add209=((($191)+($189))|0);
      HEAP32[(($size208)>>2)]=$add209;
      var $192=$m_addr;
      var $193=$m_addr;
      var $top210=(($193+24)|0);
      var $194=HEAP32[(($top210)>>2)];
      var $195=$m_addr;
      var $topsize211=(($195+12)|0);
      var $196=HEAP32[(($topsize211)>>2)];
      var $197=$tsize;
      var $add212=((($196)+($197))|0);
      _init_top($192, $194, $add212);
      label = 99; break;
    case 86: 
      var $198=$tbase;
      var $199=$m_addr;
      var $least_addr214=(($199+16)|0);
      var $200=HEAP32[(($least_addr214)>>2)];
      var $cmp215=(($198)>>>(0)) < (($200)>>>(0));
      if ($cmp215) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $201=$tbase;
      var $202=$m_addr;
      var $least_addr217=(($202+16)|0);
      HEAP32[(($least_addr217)>>2)]=$201;
      label = 88; break;
    case 88: 
      var $203=$m_addr;
      var $seg219=(($203+448)|0);
      $sp=$seg219;
      label = 89; break;
    case 89: 
      var $204=$sp;
      var $cmp221=(($204)|(0))!=0;
      if ($cmp221) { label = 90; break; } else { var $209 = 0;label = 91; break; }
    case 90: 
      var $205=$sp;
      var $base223=(($205)|0);
      var $206=HEAP32[(($base223)>>2)];
      var $207=$tbase;
      var $208=$tsize;
      var $add_ptr224=(($207+$208)|0);
      var $cmp225=(($206)|(0))!=(($add_ptr224)|(0));
      var $209 = $cmp225;label = 91; break;
    case 91: 
      var $209;
      if ($209) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $210=$sp;
      var $next228=(($210+8)|0);
      var $211=HEAP32[(($next228)>>2)];
      $sp=$211;
      label = 89; break;
    case 93: 
      var $212=$sp;
      var $cmp230=(($212)|(0))!=0;
      if ($cmp230) { label = 94; break; } else { label = 97; break; }
    case 94: 
      var $213=$sp;
      var $sflags232=(($213+12)|0);
      var $214=HEAP32[(($sflags232)>>2)];
      var $and233=$214 & 8;
      var $tobool234=(($and233)|(0))!=0;
      if ($tobool234) { label = 97; break; } else { label = 95; break; }
    case 95: 
      var $215=$sp;
      var $sflags236=(($215+12)|0);
      var $216=HEAP32[(($sflags236)>>2)];
      var $and237=$216 & 0;
      var $217=$mmap_flag;
      var $cmp238=(($and237)|(0))==(($217)|(0));
      if ($cmp238) { label = 96; break; } else { label = 97; break; }
    case 96: 
      var $218=$sp;
      var $base240=(($218)|0);
      var $219=HEAP32[(($base240)>>2)];
      $oldbase=$219;
      var $220=$tbase;
      var $221=$sp;
      var $base241=(($221)|0);
      HEAP32[(($base241)>>2)]=$220;
      var $222=$tsize;
      var $223=$sp;
      var $size242=(($223+4)|0);
      var $224=HEAP32[(($size242)>>2)];
      var $add243=((($224)+($222))|0);
      HEAP32[(($size242)>>2)]=$add243;
      var $225=$m_addr;
      var $226=$tbase;
      var $227=$oldbase;
      var $228=$nb_addr;
      var $call244=_prepend_alloc($225, $226, $227, $228);
      $retval=$call244;
      label = 104; break;
    case 97: 
      var $229=$m_addr;
      var $230=$tbase;
      var $231=$tsize;
      var $232=$mmap_flag;
      _add_segment($229, $230, $231, $232);
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      var $233=$nb_addr;
      var $234=$m_addr;
      var $topsize249=(($234+12)|0);
      var $235=HEAP32[(($topsize249)>>2)];
      var $cmp250=(($233)>>>(0)) < (($235)>>>(0));
      if ($cmp250) { label = 101; break; } else { label = 102; break; }
    case 101: 
      var $236=$nb_addr;
      var $237=$m_addr;
      var $topsize252=(($237+12)|0);
      var $238=HEAP32[(($topsize252)>>2)];
      var $sub253=((($238)-($236))|0);
      HEAP32[(($topsize252)>>2)]=$sub253;
      $rsize=$sub253;
      var $239=$m_addr;
      var $top254=(($239+24)|0);
      var $240=HEAP32[(($top254)>>2)];
      $p=$240;
      var $241=$p;
      var $242=$241;
      var $243=$nb_addr;
      var $add_ptr255=(($242+$243)|0);
      var $244=$add_ptr255;
      var $245=$m_addr;
      var $top256=(($245+24)|0);
      HEAP32[(($top256)>>2)]=$244;
      $r=$244;
      var $246=$rsize;
      var $or257=$246 | 1;
      var $247=$r;
      var $head258=(($247+4)|0);
      HEAP32[(($head258)>>2)]=$or257;
      var $248=$nb_addr;
      var $or259=$248 | 1;
      var $or260=$or259 | 2;
      var $249=$p;
      var $head261=(($249+4)|0);
      HEAP32[(($head261)>>2)]=$or260;
      var $250=$p;
      var $251=$250;
      var $add_ptr262=(($251+8)|0);
      $retval=$add_ptr262;
      label = 104; break;
    case 102: 
      label = 103; break;
    case 103: 
      var $call265=___errno_location();
      HEAP32[(($call265)>>2)]=12;
      $retval=0;
      label = 104; break;
    case 104: 
      var $252=$retval;
      return $252;
    default: assert(0, "bad label: " + label);
  }
}
function _free($mem) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mem_addr;
      var $p;
      var $psize;
      var $next;
      var $prevsize;
      var $prev;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F77;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F271;
      var $B273;
      var $I275;
      var $TP328;
      var $XP329;
      var $R331;
      var $F336;
      var $RP359;
      var $CP370;
      var $H397;
      var $C0439;
      var $C1440;
      var $I501;
      var $B503;
      var $F506;
      var $tp;
      var $H529;
      var $I530;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K579;
      var $C;
      var $F612;
      $mem_addr=$mem;
      var $0=$mem_addr;
      var $cmp=(($0)|(0))!=0;
      if ($cmp) { label = 3; break; } else { label = 215; break; }
    case 3: 
      var $1=$mem_addr;
      var $add_ptr=((($1)-(8))|0);
      var $2=$add_ptr;
      $p=$2;
      var $3=$p;
      var $4=$3;
      var $5=HEAP32[((((114008)|0))>>2)];
      var $cmp1=(($4)>>>(0)) >= (($5)>>>(0));
      if ($cmp1) { label = 4; break; } else { var $8 = 0;label = 5; break; }
    case 4: 
      var $6=$p;
      var $head=(($6+4)|0);
      var $7=HEAP32[(($head)>>2)];
      var $and=$7 & 3;
      var $cmp2=(($and)|(0))!=1;
      var $8 = $cmp2;label = 5; break;
    case 5: 
      var $8;
      var $land_ext=(($8)&(1));
      var $expval=($land_ext);
      var $tobool=(($expval)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 212; break; }
    case 6: 
      var $9=$p;
      var $head4=(($9+4)|0);
      var $10=HEAP32[(($head4)>>2)];
      var $and5=$10 & -8;
      $psize=$and5;
      var $11=$p;
      var $12=$11;
      var $13=$psize;
      var $add_ptr6=(($12+$13)|0);
      var $14=$add_ptr6;
      $next=$14;
      var $15=$p;
      var $head7=(($15+4)|0);
      var $16=HEAP32[(($head7)>>2)];
      var $and8=$16 & 1;
      var $tobool9=(($and8)|(0))!=0;
      if ($tobool9) { label = 87; break; } else { label = 7; break; }
    case 7: 
      var $17=$p;
      var $prev_foot=(($17)|0);
      var $18=HEAP32[(($prev_foot)>>2)];
      $prevsize=$18;
      var $19=$p;
      var $head11=(($19+4)|0);
      var $20=HEAP32[(($head11)>>2)];
      var $and12=$20 & 3;
      var $cmp13=(($and12)|(0))==0;
      if ($cmp13) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $21=$prevsize;
      var $add=((($21)+(16))|0);
      var $22=$psize;
      var $add15=((($22)+($add))|0);
      $psize=$add15;
      label = 214; break;
    case 9: 
      var $23=$p;
      var $24=$23;
      var $25=$prevsize;
      var $idx_neg=(((-$25))|0);
      var $add_ptr16=(($24+$idx_neg)|0);
      var $26=$add_ptr16;
      $prev=$26;
      var $27=$prevsize;
      var $28=$psize;
      var $add17=((($28)+($27))|0);
      $psize=$add17;
      var $29=$prev;
      $p=$29;
      var $30=$prev;
      var $31=$30;
      var $32=HEAP32[((((114008)|0))>>2)];
      var $cmp18=(($31)>>>(0)) >= (($32)>>>(0));
      var $conv=(($cmp18)&(1));
      var $expval19=($conv);
      var $tobool20=(($expval19)|(0))!=0;
      if ($tobool20) { label = 10; break; } else { label = 84; break; }
    case 10: 
      var $33=$p;
      var $34=HEAP32[((((114012)|0))>>2)];
      var $cmp22=(($33)|(0))!=(($34)|(0));
      if ($cmp22) { label = 11; break; } else { label = 80; break; }
    case 11: 
      var $35=$prevsize;
      var $shr=$35 >>> 3;
      var $cmp25=(($shr)>>>(0)) < 32;
      if ($cmp25) { label = 12; break; } else { label = 30; break; }
    case 12: 
      var $36=$p;
      var $fd=(($36+8)|0);
      var $37=HEAP32[(($fd)>>2)];
      $F=$37;
      var $38=$p;
      var $bk=(($38+12)|0);
      var $39=HEAP32[(($bk)>>2)];
      $B=$39;
      var $40=$prevsize;
      var $shr28=$40 >>> 3;
      $I=$shr28;
      var $41=$F;
      var $42=$I;
      var $shl=$42 << 1;
      var $arrayidx=((((114032)|0)+($shl<<2))|0);
      var $43=$arrayidx;
      var $44=$43;
      var $cmp29=(($41)|(0))==(($44)|(0));
      if ($cmp29) { var $52 = 1;label = 16; break; } else { label = 13; break; }
    case 13: 
      var $45=$F;
      var $46=$45;
      var $47=HEAP32[((((114008)|0))>>2)];
      var $cmp31=(($46)>>>(0)) >= (($47)>>>(0));
      if ($cmp31) { label = 14; break; } else { var $51 = 0;label = 15; break; }
    case 14: 
      var $48=$F;
      var $bk34=(($48+12)|0);
      var $49=HEAP32[(($bk34)>>2)];
      var $50=$p;
      var $cmp35=(($49)|(0))==(($50)|(0));
      var $51 = $cmp35;label = 15; break;
    case 15: 
      var $51;
      var $52 = $51;label = 16; break;
    case 16: 
      var $52;
      var $lor_ext=(($52)&(1));
      var $expval39=($lor_ext);
      var $tobool40=(($expval39)|(0))!=0;
      if ($tobool40) { label = 17; break; } else { label = 28; break; }
    case 17: 
      var $53=$B;
      var $54=$F;
      var $cmp42=(($53)|(0))==(($54)|(0));
      if ($cmp42) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $55=$I;
      var $shl45=1 << $55;
      var $neg=$shl45 ^ -1;
      var $56=HEAP32[((((113992)|0))>>2)];
      var $and46=$56 & $neg;
      HEAP32[((((113992)|0))>>2)]=$and46;
      label = 27; break;
    case 19: 
      var $57=$B;
      var $58=$I;
      var $shl48=$58 << 1;
      var $arrayidx49=((((114032)|0)+($shl48<<2))|0);
      var $59=$arrayidx49;
      var $60=$59;
      var $cmp50=(($57)|(0))==(($60)|(0));
      if ($cmp50) { var $68 = 1;label = 23; break; } else { label = 20; break; }
    case 20: 
      var $61=$B;
      var $62=$61;
      var $63=HEAP32[((((114008)|0))>>2)];
      var $cmp53=(($62)>>>(0)) >= (($63)>>>(0));
      if ($cmp53) { label = 21; break; } else { var $67 = 0;label = 22; break; }
    case 21: 
      var $64=$B;
      var $fd56=(($64+8)|0);
      var $65=HEAP32[(($fd56)>>2)];
      var $66=$p;
      var $cmp57=(($65)|(0))==(($66)|(0));
      var $67 = $cmp57;label = 22; break;
    case 22: 
      var $67;
      var $68 = $67;label = 23; break;
    case 23: 
      var $68;
      var $lor_ext62=(($68)&(1));
      var $expval63=($lor_ext62);
      var $tobool64=(($expval63)|(0))!=0;
      if ($tobool64) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $69=$B;
      var $70=$F;
      var $bk66=(($70+12)|0);
      HEAP32[(($bk66)>>2)]=$69;
      var $71=$F;
      var $72=$B;
      var $fd67=(($72+8)|0);
      HEAP32[(($fd67)>>2)]=$71;
      label = 26; break;
    case 25: 
      _abort();
      throw "Reached an unreachable!";
    case 26: 
      label = 27; break;
    case 27: 
      label = 29; break;
    case 28: 
      _abort();
      throw "Reached an unreachable!";
    case 29: 
      label = 79; break;
    case 30: 
      var $73=$p;
      var $74=$73;
      $TP=$74;
      var $75=$TP;
      var $parent=(($75+24)|0);
      var $76=HEAP32[(($parent)>>2)];
      $XP=$76;
      var $77=$TP;
      var $bk73=(($77+12)|0);
      var $78=HEAP32[(($bk73)>>2)];
      var $79=$TP;
      var $cmp74=(($78)|(0))!=(($79)|(0));
      if ($cmp74) { label = 31; break; } else { label = 38; break; }
    case 31: 
      var $80=$TP;
      var $fd78=(($80+8)|0);
      var $81=HEAP32[(($fd78)>>2)];
      $F77=$81;
      var $82=$TP;
      var $bk79=(($82+12)|0);
      var $83=HEAP32[(($bk79)>>2)];
      $R=$83;
      var $84=$F77;
      var $85=$84;
      var $86=HEAP32[((((114008)|0))>>2)];
      var $cmp80=(($85)>>>(0)) >= (($86)>>>(0));
      if ($cmp80) { label = 32; break; } else { var $93 = 0;label = 34; break; }
    case 32: 
      var $87=$F77;
      var $bk82=(($87+12)|0);
      var $88=HEAP32[(($bk82)>>2)];
      var $89=$TP;
      var $cmp83=(($88)|(0))==(($89)|(0));
      if ($cmp83) { label = 33; break; } else { var $93 = 0;label = 34; break; }
    case 33: 
      var $90=$R;
      var $fd86=(($90+8)|0);
      var $91=HEAP32[(($fd86)>>2)];
      var $92=$TP;
      var $cmp87=(($91)|(0))==(($92)|(0));
      var $93 = $cmp87;label = 34; break;
    case 34: 
      var $93;
      var $land_ext90=(($93)&(1));
      var $expval91=($land_ext90);
      var $tobool92=(($expval91)|(0))!=0;
      if ($tobool92) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $94=$R;
      var $95=$F77;
      var $bk94=(($95+12)|0);
      HEAP32[(($bk94)>>2)]=$94;
      var $96=$F77;
      var $97=$R;
      var $fd95=(($97+8)|0);
      HEAP32[(($fd95)>>2)]=$96;
      label = 37; break;
    case 36: 
      _abort();
      throw "Reached an unreachable!";
    case 37: 
      label = 50; break;
    case 38: 
      var $98=$TP;
      var $child=(($98+16)|0);
      var $arrayidx99=(($child+4)|0);
      $RP=$arrayidx99;
      var $99=HEAP32[(($arrayidx99)>>2)];
      $R=$99;
      var $cmp100=(($99)|(0))!=0;
      if ($cmp100) { label = 40; break; } else { label = 39; break; }
    case 39: 
      var $100=$TP;
      var $child102=(($100+16)|0);
      var $arrayidx103=(($child102)|0);
      $RP=$arrayidx103;
      var $101=HEAP32[(($arrayidx103)>>2)];
      $R=$101;
      var $cmp104=(($101)|(0))!=0;
      if ($cmp104) { label = 40; break; } else { label = 49; break; }
    case 40: 
      label = 41; break;
    case 41: 
      var $102=$R;
      var $child107=(($102+16)|0);
      var $arrayidx108=(($child107+4)|0);
      $CP=$arrayidx108;
      var $103=HEAP32[(($arrayidx108)>>2)];
      var $cmp109=(($103)|(0))!=0;
      if ($cmp109) { var $106 = 1;label = 43; break; } else { label = 42; break; }
    case 42: 
      var $104=$R;
      var $child112=(($104+16)|0);
      var $arrayidx113=(($child112)|0);
      $CP=$arrayidx113;
      var $105=HEAP32[(($arrayidx113)>>2)];
      var $cmp114=(($105)|(0))!=0;
      var $106 = $cmp114;label = 43; break;
    case 43: 
      var $106;
      if ($106) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $107=$CP;
      $RP=$107;
      var $108=HEAP32[(($107)>>2)];
      $R=$108;
      label = 41; break;
    case 45: 
      var $109=$RP;
      var $110=$109;
      var $111=HEAP32[((((114008)|0))>>2)];
      var $cmp118=(($110)>>>(0)) >= (($111)>>>(0));
      var $conv119=(($cmp118)&(1));
      var $expval120=($conv119);
      var $tobool121=(($expval120)|(0))!=0;
      if ($tobool121) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $112=$RP;
      HEAP32[(($112)>>2)]=0;
      label = 48; break;
    case 47: 
      _abort();
      throw "Reached an unreachable!";
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $113=$XP;
      var $cmp127=(($113)|(0))!=0;
      if ($cmp127) { label = 51; break; } else { label = 78; break; }
    case 51: 
      var $114=$TP;
      var $index=(($114+28)|0);
      var $115=HEAP32[(($index)>>2)];
      var $arrayidx130=((((114296)|0)+($115<<2))|0);
      $H=$arrayidx130;
      var $116=$TP;
      var $117=$H;
      var $118=HEAP32[(($117)>>2)];
      var $cmp131=(($116)|(0))==(($118)|(0));
      if ($cmp131) { label = 52; break; } else { label = 55; break; }
    case 52: 
      var $119=$R;
      var $120=$H;
      HEAP32[(($120)>>2)]=$119;
      var $cmp134=(($119)|(0))==0;
      if ($cmp134) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $121=$TP;
      var $index137=(($121+28)|0);
      var $122=HEAP32[(($index137)>>2)];
      var $shl138=1 << $122;
      var $neg139=$shl138 ^ -1;
      var $123=HEAP32[((((113996)|0))>>2)];
      var $and140=$123 & $neg139;
      HEAP32[((((113996)|0))>>2)]=$and140;
      label = 54; break;
    case 54: 
      label = 62; break;
    case 55: 
      var $124=$XP;
      var $125=$124;
      var $126=HEAP32[((((114008)|0))>>2)];
      var $cmp143=(($125)>>>(0)) >= (($126)>>>(0));
      var $conv144=(($cmp143)&(1));
      var $expval145=($conv144);
      var $tobool146=(($expval145)|(0))!=0;
      if ($tobool146) { label = 56; break; } else { label = 60; break; }
    case 56: 
      var $127=$XP;
      var $child148=(($127+16)|0);
      var $arrayidx149=(($child148)|0);
      var $128=HEAP32[(($arrayidx149)>>2)];
      var $129=$TP;
      var $cmp150=(($128)|(0))==(($129)|(0));
      if ($cmp150) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $130=$R;
      var $131=$XP;
      var $child153=(($131+16)|0);
      var $arrayidx154=(($child153)|0);
      HEAP32[(($arrayidx154)>>2)]=$130;
      label = 59; break;
    case 58: 
      var $132=$R;
      var $133=$XP;
      var $child156=(($133+16)|0);
      var $arrayidx157=(($child156+4)|0);
      HEAP32[(($arrayidx157)>>2)]=$132;
      label = 59; break;
    case 59: 
      label = 61; break;
    case 60: 
      _abort();
      throw "Reached an unreachable!";
    case 61: 
      label = 62; break;
    case 62: 
      var $134=$R;
      var $cmp162=(($134)|(0))!=0;
      if ($cmp162) { label = 63; break; } else { label = 77; break; }
    case 63: 
      var $135=$R;
      var $136=$135;
      var $137=HEAP32[((((114008)|0))>>2)];
      var $cmp165=(($136)>>>(0)) >= (($137)>>>(0));
      var $conv166=(($cmp165)&(1));
      var $expval167=($conv166);
      var $tobool168=(($expval167)|(0))!=0;
      if ($tobool168) { label = 64; break; } else { label = 75; break; }
    case 64: 
      var $138=$XP;
      var $139=$R;
      var $parent170=(($139+24)|0);
      HEAP32[(($parent170)>>2)]=$138;
      var $140=$TP;
      var $child171=(($140+16)|0);
      var $arrayidx172=(($child171)|0);
      var $141=HEAP32[(($arrayidx172)>>2)];
      $C0=$141;
      var $cmp173=(($141)|(0))!=0;
      if ($cmp173) { label = 65; break; } else { label = 69; break; }
    case 65: 
      var $142=$C0;
      var $143=$142;
      var $144=HEAP32[((((114008)|0))>>2)];
      var $cmp176=(($143)>>>(0)) >= (($144)>>>(0));
      var $conv177=(($cmp176)&(1));
      var $expval178=($conv177);
      var $tobool179=(($expval178)|(0))!=0;
      if ($tobool179) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $145=$C0;
      var $146=$R;
      var $child181=(($146+16)|0);
      var $arrayidx182=(($child181)|0);
      HEAP32[(($arrayidx182)>>2)]=$145;
      var $147=$R;
      var $148=$C0;
      var $parent183=(($148+24)|0);
      HEAP32[(($parent183)>>2)]=$147;
      label = 68; break;
    case 67: 
      _abort();
      throw "Reached an unreachable!";
    case 68: 
      label = 69; break;
    case 69: 
      var $149=$TP;
      var $child187=(($149+16)|0);
      var $arrayidx188=(($child187+4)|0);
      var $150=HEAP32[(($arrayidx188)>>2)];
      $C1=$150;
      var $cmp189=(($150)|(0))!=0;
      if ($cmp189) { label = 70; break; } else { label = 74; break; }
    case 70: 
      var $151=$C1;
      var $152=$151;
      var $153=HEAP32[((((114008)|0))>>2)];
      var $cmp192=(($152)>>>(0)) >= (($153)>>>(0));
      var $conv193=(($cmp192)&(1));
      var $expval194=($conv193);
      var $tobool195=(($expval194)|(0))!=0;
      if ($tobool195) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $154=$C1;
      var $155=$R;
      var $child197=(($155+16)|0);
      var $arrayidx198=(($child197+4)|0);
      HEAP32[(($arrayidx198)>>2)]=$154;
      var $156=$R;
      var $157=$C1;
      var $parent199=(($157+24)|0);
      HEAP32[(($parent199)>>2)]=$156;
      label = 73; break;
    case 72: 
      _abort();
      throw "Reached an unreachable!";
    case 73: 
      label = 74; break;
    case 74: 
      label = 76; break;
    case 75: 
      _abort();
      throw "Reached an unreachable!";
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 83; break;
    case 80: 
      var $158=$next;
      var $head209=(($158+4)|0);
      var $159=HEAP32[(($head209)>>2)];
      var $and210=$159 & 3;
      var $cmp211=(($and210)|(0))==3;
      if ($cmp211) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $160=$psize;
      HEAP32[((((114000)|0))>>2)]=$160;
      var $161=$next;
      var $head214=(($161+4)|0);
      var $162=HEAP32[(($head214)>>2)];
      var $and215=$162 & -2;
      HEAP32[(($head214)>>2)]=$and215;
      var $163=$psize;
      var $or=$163 | 1;
      var $164=$p;
      var $head216=(($164+4)|0);
      HEAP32[(($head216)>>2)]=$or;
      var $165=$psize;
      var $166=$p;
      var $167=$166;
      var $168=$psize;
      var $add_ptr217=(($167+$168)|0);
      var $169=$add_ptr217;
      var $prev_foot218=(($169)|0);
      HEAP32[(($prev_foot218)>>2)]=$165;
      label = 214; break;
    case 82: 
      label = 83; break;
    case 83: 
      label = 85; break;
    case 84: 
      label = 213; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $170=$p;
      var $171=$170;
      var $172=$next;
      var $173=$172;
      var $cmp225=(($171)>>>(0)) < (($173)>>>(0));
      if ($cmp225) { label = 88; break; } else { var $176 = 0;label = 89; break; }
    case 88: 
      var $174=$next;
      var $head228=(($174+4)|0);
      var $175=HEAP32[(($head228)>>2)];
      var $and229=$175 & 1;
      var $tobool230=(($and229)|(0))!=0;
      var $176 = $tobool230;label = 89; break;
    case 89: 
      var $176;
      var $land_ext232=(($176)&(1));
      var $expval233=($land_ext232);
      var $tobool234=(($expval233)|(0))!=0;
      if ($tobool234) { label = 90; break; } else { label = 211; break; }
    case 90: 
      var $177=$next;
      var $head236=(($177+4)|0);
      var $178=HEAP32[(($head236)>>2)];
      var $and237=$178 & 2;
      var $tobool238=(($and237)|(0))!=0;
      if ($tobool238) { label = 172; break; } else { label = 91; break; }
    case 91: 
      var $179=$next;
      var $180=HEAP32[((((114016)|0))>>2)];
      var $cmp240=(($179)|(0))==(($180)|(0));
      if ($cmp240) { label = 92; break; } else { label = 97; break; }
    case 92: 
      var $181=$psize;
      var $182=HEAP32[((((114004)|0))>>2)];
      var $add243=((($182)+($181))|0);
      HEAP32[((((114004)|0))>>2)]=$add243;
      $tsize=$add243;
      var $183=$p;
      HEAP32[((((114016)|0))>>2)]=$183;
      var $184=$tsize;
      var $or244=$184 | 1;
      var $185=$p;
      var $head245=(($185+4)|0);
      HEAP32[(($head245)>>2)]=$or244;
      var $186=$p;
      var $187=HEAP32[((((114012)|0))>>2)];
      var $cmp246=(($186)|(0))==(($187)|(0));
      if ($cmp246) { label = 93; break; } else { label = 94; break; }
    case 93: 
      HEAP32[((((114012)|0))>>2)]=0;
      HEAP32[((((114000)|0))>>2)]=0;
      label = 94; break;
    case 94: 
      var $188=$tsize;
      var $189=HEAP32[((((114020)|0))>>2)];
      var $cmp250=(($188)>>>(0)) > (($189)>>>(0));
      if ($cmp250) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $call=_sys_trim(113992, 0);
      label = 96; break;
    case 96: 
      label = 214; break;
    case 97: 
      var $190=$next;
      var $191=HEAP32[((((114012)|0))>>2)];
      var $cmp255=(($190)|(0))==(($191)|(0));
      if ($cmp255) { label = 98; break; } else { label = 99; break; }
    case 98: 
      var $192=$psize;
      var $193=HEAP32[((((114000)|0))>>2)];
      var $add258=((($193)+($192))|0);
      HEAP32[((((114000)|0))>>2)]=$add258;
      $dsize=$add258;
      var $194=$p;
      HEAP32[((((114012)|0))>>2)]=$194;
      var $195=$dsize;
      var $or259=$195 | 1;
      var $196=$p;
      var $head260=(($196+4)|0);
      HEAP32[(($head260)>>2)]=$or259;
      var $197=$dsize;
      var $198=$p;
      var $199=$198;
      var $200=$dsize;
      var $add_ptr261=(($199+$200)|0);
      var $201=$add_ptr261;
      var $prev_foot262=(($201)|0);
      HEAP32[(($prev_foot262)>>2)]=$197;
      label = 214; break;
    case 99: 
      var $202=$next;
      var $head264=(($202+4)|0);
      var $203=HEAP32[(($head264)>>2)];
      var $and265=$203 & -8;
      $nsize=$and265;
      var $204=$nsize;
      var $205=$psize;
      var $add266=((($205)+($204))|0);
      $psize=$add266;
      var $206=$nsize;
      var $shr267=$206 >>> 3;
      var $cmp268=(($shr267)>>>(0)) < 32;
      if ($cmp268) { label = 100; break; } else { label = 118; break; }
    case 100: 
      var $207=$next;
      var $fd272=(($207+8)|0);
      var $208=HEAP32[(($fd272)>>2)];
      $F271=$208;
      var $209=$next;
      var $bk274=(($209+12)|0);
      var $210=HEAP32[(($bk274)>>2)];
      $B273=$210;
      var $211=$nsize;
      var $shr276=$211 >>> 3;
      $I275=$shr276;
      var $212=$F271;
      var $213=$I275;
      var $shl277=$213 << 1;
      var $arrayidx278=((((114032)|0)+($shl277<<2))|0);
      var $214=$arrayidx278;
      var $215=$214;
      var $cmp279=(($212)|(0))==(($215)|(0));
      if ($cmp279) { var $223 = 1;label = 104; break; } else { label = 101; break; }
    case 101: 
      var $216=$F271;
      var $217=$216;
      var $218=HEAP32[((((114008)|0))>>2)];
      var $cmp282=(($217)>>>(0)) >= (($218)>>>(0));
      if ($cmp282) { label = 102; break; } else { var $222 = 0;label = 103; break; }
    case 102: 
      var $219=$F271;
      var $bk285=(($219+12)|0);
      var $220=HEAP32[(($bk285)>>2)];
      var $221=$next;
      var $cmp286=(($220)|(0))==(($221)|(0));
      var $222 = $cmp286;label = 103; break;
    case 103: 
      var $222;
      var $223 = $222;label = 104; break;
    case 104: 
      var $223;
      var $lor_ext291=(($223)&(1));
      var $expval292=($lor_ext291);
      var $tobool293=(($expval292)|(0))!=0;
      if ($tobool293) { label = 105; break; } else { label = 116; break; }
    case 105: 
      var $224=$B273;
      var $225=$F271;
      var $cmp295=(($224)|(0))==(($225)|(0));
      if ($cmp295) { label = 106; break; } else { label = 107; break; }
    case 106: 
      var $226=$I275;
      var $shl298=1 << $226;
      var $neg299=$shl298 ^ -1;
      var $227=HEAP32[((((113992)|0))>>2)];
      var $and300=$227 & $neg299;
      HEAP32[((((113992)|0))>>2)]=$and300;
      label = 115; break;
    case 107: 
      var $228=$B273;
      var $229=$I275;
      var $shl302=$229 << 1;
      var $arrayidx303=((((114032)|0)+($shl302<<2))|0);
      var $230=$arrayidx303;
      var $231=$230;
      var $cmp304=(($228)|(0))==(($231)|(0));
      if ($cmp304) { var $239 = 1;label = 111; break; } else { label = 108; break; }
    case 108: 
      var $232=$B273;
      var $233=$232;
      var $234=HEAP32[((((114008)|0))>>2)];
      var $cmp307=(($233)>>>(0)) >= (($234)>>>(0));
      if ($cmp307) { label = 109; break; } else { var $238 = 0;label = 110; break; }
    case 109: 
      var $235=$B273;
      var $fd310=(($235+8)|0);
      var $236=HEAP32[(($fd310)>>2)];
      var $237=$next;
      var $cmp311=(($236)|(0))==(($237)|(0));
      var $238 = $cmp311;label = 110; break;
    case 110: 
      var $238;
      var $239 = $238;label = 111; break;
    case 111: 
      var $239;
      var $lor_ext316=(($239)&(1));
      var $expval317=($lor_ext316);
      var $tobool318=(($expval317)|(0))!=0;
      if ($tobool318) { label = 112; break; } else { label = 113; break; }
    case 112: 
      var $240=$B273;
      var $241=$F271;
      var $bk320=(($241+12)|0);
      HEAP32[(($bk320)>>2)]=$240;
      var $242=$F271;
      var $243=$B273;
      var $fd321=(($243+8)|0);
      HEAP32[(($fd321)>>2)]=$242;
      label = 114; break;
    case 113: 
      _abort();
      throw "Reached an unreachable!";
    case 114: 
      label = 115; break;
    case 115: 
      label = 117; break;
    case 116: 
      _abort();
      throw "Reached an unreachable!";
    case 117: 
      label = 167; break;
    case 118: 
      var $244=$next;
      var $245=$244;
      $TP328=$245;
      var $246=$TP328;
      var $parent330=(($246+24)|0);
      var $247=HEAP32[(($parent330)>>2)];
      $XP329=$247;
      var $248=$TP328;
      var $bk332=(($248+12)|0);
      var $249=HEAP32[(($bk332)>>2)];
      var $250=$TP328;
      var $cmp333=(($249)|(0))!=(($250)|(0));
      if ($cmp333) { label = 119; break; } else { label = 126; break; }
    case 119: 
      var $251=$TP328;
      var $fd337=(($251+8)|0);
      var $252=HEAP32[(($fd337)>>2)];
      $F336=$252;
      var $253=$TP328;
      var $bk338=(($253+12)|0);
      var $254=HEAP32[(($bk338)>>2)];
      $R331=$254;
      var $255=$F336;
      var $256=$255;
      var $257=HEAP32[((((114008)|0))>>2)];
      var $cmp339=(($256)>>>(0)) >= (($257)>>>(0));
      if ($cmp339) { label = 120; break; } else { var $264 = 0;label = 122; break; }
    case 120: 
      var $258=$F336;
      var $bk342=(($258+12)|0);
      var $259=HEAP32[(($bk342)>>2)];
      var $260=$TP328;
      var $cmp343=(($259)|(0))==(($260)|(0));
      if ($cmp343) { label = 121; break; } else { var $264 = 0;label = 122; break; }
    case 121: 
      var $261=$R331;
      var $fd346=(($261+8)|0);
      var $262=HEAP32[(($fd346)>>2)];
      var $263=$TP328;
      var $cmp347=(($262)|(0))==(($263)|(0));
      var $264 = $cmp347;label = 122; break;
    case 122: 
      var $264;
      var $land_ext350=(($264)&(1));
      var $expval351=($land_ext350);
      var $tobool352=(($expval351)|(0))!=0;
      if ($tobool352) { label = 123; break; } else { label = 124; break; }
    case 123: 
      var $265=$R331;
      var $266=$F336;
      var $bk354=(($266+12)|0);
      HEAP32[(($bk354)>>2)]=$265;
      var $267=$F336;
      var $268=$R331;
      var $fd355=(($268+8)|0);
      HEAP32[(($fd355)>>2)]=$267;
      label = 125; break;
    case 124: 
      _abort();
      throw "Reached an unreachable!";
    case 125: 
      label = 138; break;
    case 126: 
      var $269=$TP328;
      var $child360=(($269+16)|0);
      var $arrayidx361=(($child360+4)|0);
      $RP359=$arrayidx361;
      var $270=HEAP32[(($arrayidx361)>>2)];
      $R331=$270;
      var $cmp362=(($270)|(0))!=0;
      if ($cmp362) { label = 128; break; } else { label = 127; break; }
    case 127: 
      var $271=$TP328;
      var $child365=(($271+16)|0);
      var $arrayidx366=(($child365)|0);
      $RP359=$arrayidx366;
      var $272=HEAP32[(($arrayidx366)>>2)];
      $R331=$272;
      var $cmp367=(($272)|(0))!=0;
      if ($cmp367) { label = 128; break; } else { label = 137; break; }
    case 128: 
      label = 129; break;
    case 129: 
      var $273=$R331;
      var $child372=(($273+16)|0);
      var $arrayidx373=(($child372+4)|0);
      $CP370=$arrayidx373;
      var $274=HEAP32[(($arrayidx373)>>2)];
      var $cmp374=(($274)|(0))!=0;
      if ($cmp374) { var $277 = 1;label = 131; break; } else { label = 130; break; }
    case 130: 
      var $275=$R331;
      var $child377=(($275+16)|0);
      var $arrayidx378=(($child377)|0);
      $CP370=$arrayidx378;
      var $276=HEAP32[(($arrayidx378)>>2)];
      var $cmp379=(($276)|(0))!=0;
      var $277 = $cmp379;label = 131; break;
    case 131: 
      var $277;
      if ($277) { label = 132; break; } else { label = 133; break; }
    case 132: 
      var $278=$CP370;
      $RP359=$278;
      var $279=HEAP32[(($278)>>2)];
      $R331=$279;
      label = 129; break;
    case 133: 
      var $280=$RP359;
      var $281=$280;
      var $282=HEAP32[((((114008)|0))>>2)];
      var $cmp385=(($281)>>>(0)) >= (($282)>>>(0));
      var $conv386=(($cmp385)&(1));
      var $expval387=($conv386);
      var $tobool388=(($expval387)|(0))!=0;
      if ($tobool388) { label = 134; break; } else { label = 135; break; }
    case 134: 
      var $283=$RP359;
      HEAP32[(($283)>>2)]=0;
      label = 136; break;
    case 135: 
      _abort();
      throw "Reached an unreachable!";
    case 136: 
      label = 137; break;
    case 137: 
      label = 138; break;
    case 138: 
      var $284=$XP329;
      var $cmp394=(($284)|(0))!=0;
      if ($cmp394) { label = 139; break; } else { label = 166; break; }
    case 139: 
      var $285=$TP328;
      var $index398=(($285+28)|0);
      var $286=HEAP32[(($index398)>>2)];
      var $arrayidx399=((((114296)|0)+($286<<2))|0);
      $H397=$arrayidx399;
      var $287=$TP328;
      var $288=$H397;
      var $289=HEAP32[(($288)>>2)];
      var $cmp400=(($287)|(0))==(($289)|(0));
      if ($cmp400) { label = 140; break; } else { label = 143; break; }
    case 140: 
      var $290=$R331;
      var $291=$H397;
      HEAP32[(($291)>>2)]=$290;
      var $cmp403=(($290)|(0))==0;
      if ($cmp403) { label = 141; break; } else { label = 142; break; }
    case 141: 
      var $292=$TP328;
      var $index406=(($292+28)|0);
      var $293=HEAP32[(($index406)>>2)];
      var $shl407=1 << $293;
      var $neg408=$shl407 ^ -1;
      var $294=HEAP32[((((113996)|0))>>2)];
      var $and409=$294 & $neg408;
      HEAP32[((((113996)|0))>>2)]=$and409;
      label = 142; break;
    case 142: 
      label = 150; break;
    case 143: 
      var $295=$XP329;
      var $296=$295;
      var $297=HEAP32[((((114008)|0))>>2)];
      var $cmp412=(($296)>>>(0)) >= (($297)>>>(0));
      var $conv413=(($cmp412)&(1));
      var $expval414=($conv413);
      var $tobool415=(($expval414)|(0))!=0;
      if ($tobool415) { label = 144; break; } else { label = 148; break; }
    case 144: 
      var $298=$XP329;
      var $child417=(($298+16)|0);
      var $arrayidx418=(($child417)|0);
      var $299=HEAP32[(($arrayidx418)>>2)];
      var $300=$TP328;
      var $cmp419=(($299)|(0))==(($300)|(0));
      if ($cmp419) { label = 145; break; } else { label = 146; break; }
    case 145: 
      var $301=$R331;
      var $302=$XP329;
      var $child422=(($302+16)|0);
      var $arrayidx423=(($child422)|0);
      HEAP32[(($arrayidx423)>>2)]=$301;
      label = 147; break;
    case 146: 
      var $303=$R331;
      var $304=$XP329;
      var $child425=(($304+16)|0);
      var $arrayidx426=(($child425+4)|0);
      HEAP32[(($arrayidx426)>>2)]=$303;
      label = 147; break;
    case 147: 
      label = 149; break;
    case 148: 
      _abort();
      throw "Reached an unreachable!";
    case 149: 
      label = 150; break;
    case 150: 
      var $305=$R331;
      var $cmp431=(($305)|(0))!=0;
      if ($cmp431) { label = 151; break; } else { label = 165; break; }
    case 151: 
      var $306=$R331;
      var $307=$306;
      var $308=HEAP32[((((114008)|0))>>2)];
      var $cmp434=(($307)>>>(0)) >= (($308)>>>(0));
      var $conv435=(($cmp434)&(1));
      var $expval436=($conv435);
      var $tobool437=(($expval436)|(0))!=0;
      if ($tobool437) { label = 152; break; } else { label = 163; break; }
    case 152: 
      var $309=$XP329;
      var $310=$R331;
      var $parent441=(($310+24)|0);
      HEAP32[(($parent441)>>2)]=$309;
      var $311=$TP328;
      var $child442=(($311+16)|0);
      var $arrayidx443=(($child442)|0);
      var $312=HEAP32[(($arrayidx443)>>2)];
      $C0439=$312;
      var $cmp444=(($312)|(0))!=0;
      if ($cmp444) { label = 153; break; } else { label = 157; break; }
    case 153: 
      var $313=$C0439;
      var $314=$313;
      var $315=HEAP32[((((114008)|0))>>2)];
      var $cmp447=(($314)>>>(0)) >= (($315)>>>(0));
      var $conv448=(($cmp447)&(1));
      var $expval449=($conv448);
      var $tobool450=(($expval449)|(0))!=0;
      if ($tobool450) { label = 154; break; } else { label = 155; break; }
    case 154: 
      var $316=$C0439;
      var $317=$R331;
      var $child452=(($317+16)|0);
      var $arrayidx453=(($child452)|0);
      HEAP32[(($arrayidx453)>>2)]=$316;
      var $318=$R331;
      var $319=$C0439;
      var $parent454=(($319+24)|0);
      HEAP32[(($parent454)>>2)]=$318;
      label = 156; break;
    case 155: 
      _abort();
      throw "Reached an unreachable!";
    case 156: 
      label = 157; break;
    case 157: 
      var $320=$TP328;
      var $child458=(($320+16)|0);
      var $arrayidx459=(($child458+4)|0);
      var $321=HEAP32[(($arrayidx459)>>2)];
      $C1440=$321;
      var $cmp460=(($321)|(0))!=0;
      if ($cmp460) { label = 158; break; } else { label = 162; break; }
    case 158: 
      var $322=$C1440;
      var $323=$322;
      var $324=HEAP32[((((114008)|0))>>2)];
      var $cmp463=(($323)>>>(0)) >= (($324)>>>(0));
      var $conv464=(($cmp463)&(1));
      var $expval465=($conv464);
      var $tobool466=(($expval465)|(0))!=0;
      if ($tobool466) { label = 159; break; } else { label = 160; break; }
    case 159: 
      var $325=$C1440;
      var $326=$R331;
      var $child468=(($326+16)|0);
      var $arrayidx469=(($child468+4)|0);
      HEAP32[(($arrayidx469)>>2)]=$325;
      var $327=$R331;
      var $328=$C1440;
      var $parent470=(($328+24)|0);
      HEAP32[(($parent470)>>2)]=$327;
      label = 161; break;
    case 160: 
      _abort();
      throw "Reached an unreachable!";
    case 161: 
      label = 162; break;
    case 162: 
      label = 164; break;
    case 163: 
      _abort();
      throw "Reached an unreachable!";
    case 164: 
      label = 165; break;
    case 165: 
      label = 166; break;
    case 166: 
      label = 167; break;
    case 167: 
      var $329=$psize;
      var $or479=$329 | 1;
      var $330=$p;
      var $head480=(($330+4)|0);
      HEAP32[(($head480)>>2)]=$or479;
      var $331=$psize;
      var $332=$p;
      var $333=$332;
      var $334=$psize;
      var $add_ptr481=(($333+$334)|0);
      var $335=$add_ptr481;
      var $prev_foot482=(($335)|0);
      HEAP32[(($prev_foot482)>>2)]=$331;
      var $336=$p;
      var $337=HEAP32[((((114012)|0))>>2)];
      var $cmp483=(($336)|(0))==(($337)|(0));
      if ($cmp483) { label = 168; break; } else { label = 169; break; }
    case 168: 
      var $338=$psize;
      HEAP32[((((114000)|0))>>2)]=$338;
      label = 214; break;
    case 169: 
      label = 170; break;
    case 170: 
      label = 171; break;
    case 171: 
      label = 173; break;
    case 172: 
      var $339=$next;
      var $head490=(($339+4)|0);
      var $340=HEAP32[(($head490)>>2)];
      var $and491=$340 & -2;
      HEAP32[(($head490)>>2)]=$and491;
      var $341=$psize;
      var $or492=$341 | 1;
      var $342=$p;
      var $head493=(($342+4)|0);
      HEAP32[(($head493)>>2)]=$or492;
      var $343=$psize;
      var $344=$p;
      var $345=$344;
      var $346=$psize;
      var $add_ptr494=(($345+$346)|0);
      var $347=$add_ptr494;
      var $prev_foot495=(($347)|0);
      HEAP32[(($prev_foot495)>>2)]=$343;
      label = 173; break;
    case 173: 
      var $348=$psize;
      var $shr497=$348 >>> 3;
      var $cmp498=(($shr497)>>>(0)) < 32;
      if ($cmp498) { label = 174; break; } else { label = 181; break; }
    case 174: 
      var $349=$psize;
      var $shr502=$349 >>> 3;
      $I501=$shr502;
      var $350=$I501;
      var $shl504=$350 << 1;
      var $arrayidx505=((((114032)|0)+($shl504<<2))|0);
      var $351=$arrayidx505;
      var $352=$351;
      $B503=$352;
      var $353=$B503;
      $F506=$353;
      var $354=HEAP32[((((113992)|0))>>2)];
      var $355=$I501;
      var $shl507=1 << $355;
      var $and508=$354 & $shl507;
      var $tobool509=(($and508)|(0))!=0;
      if ($tobool509) { label = 176; break; } else { label = 175; break; }
    case 175: 
      var $356=$I501;
      var $shl511=1 << $356;
      var $357=HEAP32[((((113992)|0))>>2)];
      var $or512=$357 | $shl511;
      HEAP32[((((113992)|0))>>2)]=$or512;
      label = 180; break;
    case 176: 
      var $358=$B503;
      var $fd514=(($358+8)|0);
      var $359=HEAP32[(($fd514)>>2)];
      var $360=$359;
      var $361=HEAP32[((((114008)|0))>>2)];
      var $cmp515=(($360)>>>(0)) >= (($361)>>>(0));
      var $conv516=(($cmp515)&(1));
      var $expval517=($conv516);
      var $tobool518=(($expval517)|(0))!=0;
      if ($tobool518) { label = 177; break; } else { label = 178; break; }
    case 177: 
      var $362=$B503;
      var $fd520=(($362+8)|0);
      var $363=HEAP32[(($fd520)>>2)];
      $F506=$363;
      label = 179; break;
    case 178: 
      _abort();
      throw "Reached an unreachable!";
    case 179: 
      label = 180; break;
    case 180: 
      var $364=$p;
      var $365=$B503;
      var $fd524=(($365+8)|0);
      HEAP32[(($fd524)>>2)]=$364;
      var $366=$p;
      var $367=$F506;
      var $bk525=(($367+12)|0);
      HEAP32[(($bk525)>>2)]=$366;
      var $368=$F506;
      var $369=$p;
      var $fd526=(($369+8)|0);
      HEAP32[(($fd526)>>2)]=$368;
      var $370=$B503;
      var $371=$p;
      var $bk527=(($371+12)|0);
      HEAP32[(($bk527)>>2)]=$370;
      label = 210; break;
    case 181: 
      var $372=$p;
      var $373=$372;
      $tp=$373;
      var $374=$psize;
      var $shr531=$374 >>> 8;
      $X=$shr531;
      var $375=$X;
      var $cmp532=(($375)|(0))==0;
      if ($cmp532) { label = 182; break; } else { label = 183; break; }
    case 182: 
      $I530=0;
      label = 187; break;
    case 183: 
      var $376=$X;
      var $cmp536=(($376)>>>(0)) > 65535;
      if ($cmp536) { label = 184; break; } else { label = 185; break; }
    case 184: 
      $I530=31;
      label = 186; break;
    case 185: 
      var $377=$X;
      $Y=$377;
      var $378=$Y;
      var $sub=((($378)-(256))|0);
      var $shr540=$sub >>> 16;
      var $and541=$shr540 & 8;
      $N=$and541;
      var $379=$N;
      var $380=$Y;
      var $shl542=$380 << $379;
      $Y=$shl542;
      var $sub543=((($shl542)-(4096))|0);
      var $shr544=$sub543 >>> 16;
      var $and545=$shr544 & 4;
      $K=$and545;
      var $381=$K;
      var $382=$N;
      var $add546=((($382)+($381))|0);
      $N=$add546;
      var $383=$K;
      var $384=$Y;
      var $shl547=$384 << $383;
      $Y=$shl547;
      var $sub548=((($shl547)-(16384))|0);
      var $shr549=$sub548 >>> 16;
      var $and550=$shr549 & 2;
      $K=$and550;
      var $385=$N;
      var $add551=((($385)+($and550))|0);
      $N=$add551;
      var $386=$N;
      var $sub552=(((14)-($386))|0);
      var $387=$K;
      var $388=$Y;
      var $shl553=$388 << $387;
      $Y=$shl553;
      var $shr554=$shl553 >>> 15;
      var $add555=((($sub552)+($shr554))|0);
      $K=$add555;
      var $389=$K;
      var $shl556=$389 << 1;
      var $390=$psize;
      var $391=$K;
      var $add557=((($391)+(7))|0);
      var $shr558=$390 >>> (($add557)>>>(0));
      var $and559=$shr558 & 1;
      var $add560=((($shl556)+($and559))|0);
      $I530=$add560;
      label = 186; break;
    case 186: 
      label = 187; break;
    case 187: 
      var $392=$I530;
      var $arrayidx563=((((114296)|0)+($392<<2))|0);
      $H529=$arrayidx563;
      var $393=$I530;
      var $394=$tp;
      var $index564=(($394+28)|0);
      HEAP32[(($index564)>>2)]=$393;
      var $395=$tp;
      var $child565=(($395+16)|0);
      var $arrayidx566=(($child565+4)|0);
      HEAP32[(($arrayidx566)>>2)]=0;
      var $396=$tp;
      var $child567=(($396+16)|0);
      var $arrayidx568=(($child567)|0);
      HEAP32[(($arrayidx568)>>2)]=0;
      var $397=HEAP32[((((113996)|0))>>2)];
      var $398=$I530;
      var $shl569=1 << $398;
      var $and570=$397 & $shl569;
      var $tobool571=(($and570)|(0))!=0;
      if ($tobool571) { label = 189; break; } else { label = 188; break; }
    case 188: 
      var $399=$I530;
      var $shl573=1 << $399;
      var $400=HEAP32[((((113996)|0))>>2)];
      var $or574=$400 | $shl573;
      HEAP32[((((113996)|0))>>2)]=$or574;
      var $401=$tp;
      var $402=$H529;
      HEAP32[(($402)>>2)]=$401;
      var $403=$H529;
      var $404=$403;
      var $405=$tp;
      var $parent575=(($405+24)|0);
      HEAP32[(($parent575)>>2)]=$404;
      var $406=$tp;
      var $407=$tp;
      var $bk576=(($407+12)|0);
      HEAP32[(($bk576)>>2)]=$406;
      var $408=$tp;
      var $fd577=(($408+8)|0);
      HEAP32[(($fd577)>>2)]=$406;
      label = 207; break;
    case 189: 
      var $409=$H529;
      var $410=HEAP32[(($409)>>2)];
      $T=$410;
      var $411=$psize;
      var $412=$I530;
      var $cmp580=(($412)|(0))==31;
      if ($cmp580) { label = 190; break; } else { label = 191; break; }
    case 190: 
      var $cond = 0;label = 192; break;
    case 191: 
      var $413=$I530;
      var $shr582=$413 >>> 1;
      var $add583=((($shr582)+(8))|0);
      var $sub584=((($add583)-(2))|0);
      var $sub585=(((31)-($sub584))|0);
      var $cond = $sub585;label = 192; break;
    case 192: 
      var $cond;
      var $shl586=$411 << $cond;
      $K579=$shl586;
      label = 193; break;
    case 193: 
      var $414=$T;
      var $head587=(($414+4)|0);
      var $415=HEAP32[(($head587)>>2)];
      var $and588=$415 & -8;
      var $416=$psize;
      var $cmp589=(($and588)|(0))!=(($416)|(0));
      if ($cmp589) { label = 194; break; } else { label = 200; break; }
    case 194: 
      var $417=$K579;
      var $shr592=$417 >>> 31;
      var $and593=$shr592 & 1;
      var $418=$T;
      var $child594=(($418+16)|0);
      var $arrayidx595=(($child594+($and593<<2))|0);
      $C=$arrayidx595;
      var $419=$K579;
      var $shl596=$419 << 1;
      $K579=$shl596;
      var $420=$C;
      var $421=HEAP32[(($420)>>2)];
      var $cmp597=(($421)|(0))!=0;
      if ($cmp597) { label = 195; break; } else { label = 196; break; }
    case 195: 
      var $422=$C;
      var $423=HEAP32[(($422)>>2)];
      $T=$423;
      label = 199; break;
    case 196: 
      var $424=$C;
      var $425=$424;
      var $426=HEAP32[((((114008)|0))>>2)];
      var $cmp601=(($425)>>>(0)) >= (($426)>>>(0));
      var $conv602=(($cmp601)&(1));
      var $expval603=($conv602);
      var $tobool604=(($expval603)|(0))!=0;
      if ($tobool604) { label = 197; break; } else { label = 198; break; }
    case 197: 
      var $427=$tp;
      var $428=$C;
      HEAP32[(($428)>>2)]=$427;
      var $429=$T;
      var $430=$tp;
      var $parent606=(($430+24)|0);
      HEAP32[(($parent606)>>2)]=$429;
      var $431=$tp;
      var $432=$tp;
      var $bk607=(($432+12)|0);
      HEAP32[(($bk607)>>2)]=$431;
      var $433=$tp;
      var $fd608=(($433+8)|0);
      HEAP32[(($fd608)>>2)]=$431;
      label = 206; break;
    case 198: 
      _abort();
      throw "Reached an unreachable!";
    case 199: 
      label = 205; break;
    case 200: 
      var $434=$T;
      var $fd613=(($434+8)|0);
      var $435=HEAP32[(($fd613)>>2)];
      $F612=$435;
      var $436=$T;
      var $437=$436;
      var $438=HEAP32[((((114008)|0))>>2)];
      var $cmp614=(($437)>>>(0)) >= (($438)>>>(0));
      if ($cmp614) { label = 201; break; } else { var $442 = 0;label = 202; break; }
    case 201: 
      var $439=$F612;
      var $440=$439;
      var $441=HEAP32[((((114008)|0))>>2)];
      var $cmp617=(($440)>>>(0)) >= (($441)>>>(0));
      var $442 = $cmp617;label = 202; break;
    case 202: 
      var $442;
      var $land_ext620=(($442)&(1));
      var $expval621=($land_ext620);
      var $tobool622=(($expval621)|(0))!=0;
      if ($tobool622) { label = 203; break; } else { label = 204; break; }
    case 203: 
      var $443=$tp;
      var $444=$F612;
      var $bk624=(($444+12)|0);
      HEAP32[(($bk624)>>2)]=$443;
      var $445=$T;
      var $fd625=(($445+8)|0);
      HEAP32[(($fd625)>>2)]=$443;
      var $446=$F612;
      var $447=$tp;
      var $fd626=(($447+8)|0);
      HEAP32[(($fd626)>>2)]=$446;
      var $448=$T;
      var $449=$tp;
      var $bk627=(($449+12)|0);
      HEAP32[(($bk627)>>2)]=$448;
      var $450=$tp;
      var $parent628=(($450+24)|0);
      HEAP32[(($parent628)>>2)]=0;
      label = 206; break;
    case 204: 
      _abort();
      throw "Reached an unreachable!";
    case 205: 
      label = 193; break;
    case 206: 
      label = 207; break;
    case 207: 
      var $451=HEAP32[((((114024)|0))>>2)];
      var $dec=((($451)-(1))|0);
      HEAP32[((((114024)|0))>>2)]=$dec;
      var $cmp632=(($dec)|(0))==0;
      if ($cmp632) { label = 208; break; } else { label = 209; break; }
    case 208: 
      var $call635=_release_unused_segments(113992);
      label = 209; break;
    case 209: 
      label = 210; break;
    case 210: 
      label = 214; break;
    case 211: 
      label = 212; break;
    case 212: 
      label = 213; break;
    case 213: 
      _abort();
      throw "Reached an unreachable!";
    case 214: 
      label = 215; break;
    case 215: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _sys_trim($m, $pad) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $pad_addr;
      var $released;
      var $unit;
      var $extra;
      var $sp;
      var $old_br;
      var $rel_br;
      var $new_br;
      $m_addr=$m;
      $pad_addr=$pad;
      $released=0;
      var $0=HEAP32[((((79952)|0))>>2)];
      var $cmp=(($0)|(0))!=0;
      if ($cmp) { var $1 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $call=_init_mparams();
      var $tobool=(($call)|(0))!=0;
      var $1 = $tobool;label = 4; break;
    case 4: 
      var $1;
      var $lor_ext=(($1)&(1));
      var $2=$pad_addr;
      var $cmp1=(($2)>>>(0)) < 4294967232;
      if ($cmp1) { label = 5; break; } else { label = 26; break; }
    case 5: 
      var $3=$m_addr;
      var $top=(($3+24)|0);
      var $4=HEAP32[(($top)>>2)];
      var $cmp2=(($4)|(0))!=0;
      if ($cmp2) { label = 6; break; } else { label = 26; break; }
    case 6: 
      var $5=$pad_addr;
      var $add=((($5)+(40))|0);
      $pad_addr=$add;
      var $6=$m_addr;
      var $topsize=(($6+12)|0);
      var $7=HEAP32[(($topsize)>>2)];
      var $8=$pad_addr;
      var $cmp3=(($7)>>>(0)) > (($8)>>>(0));
      if ($cmp3) { label = 7; break; } else { label = 22; break; }
    case 7: 
      var $9=HEAP32[((((79960)|0))>>2)];
      $unit=$9;
      var $10=$m_addr;
      var $topsize5=(($10+12)|0);
      var $11=HEAP32[(($topsize5)>>2)];
      var $12=$pad_addr;
      var $sub=((($11)-($12))|0);
      var $13=$unit;
      var $sub6=((($13)-(1))|0);
      var $add7=((($sub)+($sub6))|0);
      var $14=$unit;
      var $div=Math.floor(((($add7)>>>(0)))/((($14)>>>(0))));
      var $sub8=((($div)-(1))|0);
      var $15=$unit;
      var $mul=Math.imul($sub8,$15);
      $extra=$mul;
      var $16=$m_addr;
      var $17=$m_addr;
      var $top9=(($17+24)|0);
      var $18=HEAP32[(($top9)>>2)];
      var $19=$18;
      var $call10=_segment_holding($16, $19);
      $sp=$call10;
      var $20=$sp;
      var $sflags=(($20+12)|0);
      var $21=HEAP32[(($sflags)>>2)];
      var $and=$21 & 8;
      var $tobool11=(($and)|(0))!=0;
      if ($tobool11) { label = 19; break; } else { label = 8; break; }
    case 8: 
      var $22=$sp;
      var $sflags13=(($22+12)|0);
      var $23=HEAP32[(($sflags13)>>2)];
      var $and14=$23 & 0;
      var $tobool15=(($and14)|(0))!=0;
      if ($tobool15) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 18; break;
    case 10: 
      var $24=$extra;
      var $cmp17=(($24)>>>(0)) >= 2147483647;
      if ($cmp17) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $25=$unit;
      var $sub19=(((-2147483648)-($25))|0);
      $extra=$sub19;
      label = 12; break;
    case 12: 
      var $call20=_sbrk(0);
      $old_br=$call20;
      var $26=$old_br;
      var $27=$sp;
      var $base=(($27)|0);
      var $28=HEAP32[(($base)>>2)];
      var $29=$sp;
      var $size=(($29+4)|0);
      var $30=HEAP32[(($size)>>2)];
      var $add_ptr=(($28+$30)|0);
      var $cmp21=(($26)|(0))==(($add_ptr)|(0));
      if ($cmp21) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $31=$extra;
      var $sub23=(((-$31))|0);
      var $call24=_sbrk($sub23);
      $rel_br=$call24;
      var $call25=_sbrk(0);
      $new_br=$call25;
      var $32=$rel_br;
      var $cmp26=(($32)|(0))!=-1;
      if ($cmp26) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $33=$new_br;
      var $34=$old_br;
      var $cmp28=(($33)>>>(0)) < (($34)>>>(0));
      if ($cmp28) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $35=$old_br;
      var $36=$new_br;
      var $sub_ptr_lhs_cast=$35;
      var $sub_ptr_rhs_cast=$36;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $released=$sub_ptr_sub;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $37=$released;
      var $cmp34=(($37)|(0))!=0;
      if ($cmp34) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $38=$released;
      var $39=$sp;
      var $size36=(($39+4)|0);
      var $40=HEAP32[(($size36)>>2)];
      var $sub37=((($40)-($38))|0);
      HEAP32[(($size36)>>2)]=$sub37;
      var $41=$released;
      var $42=$m_addr;
      var $footprint=(($42+432)|0);
      var $43=HEAP32[(($footprint)>>2)];
      var $sub38=((($43)-($41))|0);
      HEAP32[(($footprint)>>2)]=$sub38;
      var $44=$m_addr;
      var $45=$m_addr;
      var $top39=(($45+24)|0);
      var $46=HEAP32[(($top39)>>2)];
      var $47=$m_addr;
      var $topsize40=(($47+12)|0);
      var $48=HEAP32[(($topsize40)>>2)];
      var $49=$released;
      var $sub41=((($48)-($49))|0);
      _init_top($44, $46, $sub41);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $50=$released;
      var $cmp44=(($50)|(0))==0;
      if ($cmp44) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $51=$m_addr;
      var $topsize46=(($51+12)|0);
      var $52=HEAP32[(($topsize46)>>2)];
      var $53=$m_addr;
      var $trim_check=(($53+28)|0);
      var $54=HEAP32[(($trim_check)>>2)];
      var $cmp47=(($52)>>>(0)) > (($54)>>>(0));
      if ($cmp47) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $55=$m_addr;
      var $trim_check49=(($55+28)|0);
      HEAP32[(($trim_check49)>>2)]=-1;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $56=$released;
      var $cmp52=(($56)|(0))!=0;
      var $cond=$cmp52 ? 1 : 0;
      return $cond;
    default: assert(0, "bad label: " + label);
  }
}
function _realloc($oldmem, $bytes) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $oldmem_addr;
      var $bytes_addr;
      var $mem;
      var $nb;
      var $oldp;
      var $m;
      var $newp;
      var $oc;
      $oldmem_addr=$oldmem;
      $bytes_addr=$bytes;
      $mem=0;
      var $0=$oldmem_addr;
      var $cmp=(($0)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$bytes_addr;
      var $call=_malloc($1);
      $mem=$call;
      label = 19; break;
    case 4: 
      var $2=$bytes_addr;
      var $cmp1=(($2)>>>(0)) >= 4294967232;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $call3=___errno_location();
      HEAP32[(($call3)>>2)]=12;
      label = 18; break;
    case 6: 
      var $3=$bytes_addr;
      var $cmp5=(($3)>>>(0)) < 11;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $cond = 16;label = 9; break;
    case 8: 
      var $4=$bytes_addr;
      var $add=((($4)+(4))|0);
      var $add6=((($add)+(7))|0);
      var $and=$add6 & -8;
      var $cond = $and;label = 9; break;
    case 9: 
      var $cond;
      $nb=$cond;
      var $5=$oldmem_addr;
      var $add_ptr=((($5)-(8))|0);
      var $6=$add_ptr;
      $oldp=$6;
      $m=113992;
      var $7=$m;
      var $8=$oldp;
      var $9=$nb;
      var $call7=_try_realloc_chunk($7, $8, $9, 1);
      $newp=$call7;
      var $10=$newp;
      var $cmp8=(($10)|(0))!=0;
      if ($cmp8) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $11=$newp;
      var $12=$11;
      var $add_ptr10=(($12+8)|0);
      $mem=$add_ptr10;
      label = 17; break;
    case 11: 
      var $13=$bytes_addr;
      var $call12=_malloc($13);
      $mem=$call12;
      var $14=$mem;
      var $cmp13=(($14)|(0))!=0;
      if ($cmp13) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $15=$oldp;
      var $head=(($15+4)|0);
      var $16=HEAP32[(($head)>>2)];
      var $and15=$16 & -8;
      var $17=$oldp;
      var $head16=(($17+4)|0);
      var $18=HEAP32[(($head16)>>2)];
      var $and17=$18 & 3;
      var $cmp18=(($and17)|(0))==0;
      var $cond19=$cmp18 ? 8 : 4;
      var $sub=((($and15)-($cond19))|0);
      $oc=$sub;
      var $19=$mem;
      var $20=$oldmem_addr;
      var $21=$oc;
      var $22=$bytes_addr;
      var $cmp20=(($21)>>>(0)) < (($22)>>>(0));
      if ($cmp20) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $23=$oc;
      var $cond24 = $23;label = 15; break;
    case 14: 
      var $24=$bytes_addr;
      var $cond24 = $24;label = 15; break;
    case 15: 
      var $cond24;
      assert($cond24 % 1 === 0);_memcpy($19, $20, $cond24);
      var $25=$oldmem_addr;
      _free($25);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $26=$mem;
      return $26;
    default: assert(0, "bad label: " + label);
  }
}
Module["_realloc"] = _realloc;
function _release_unused_segments($m) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $released;
      var $nsegs;
      var $pred;
      var $sp;
      var $base;
      var $size;
      var $next3;
      var $p;
      var $psize;
      var $tp;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $H147;
      var $I;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K197;
      var $C;
      var $F235;
      $m_addr=$m;
      $released=0;
      $nsegs=0;
      var $0=$m_addr;
      var $seg=(($0+448)|0);
      $pred=$seg;
      var $1=$pred;
      var $next=(($1+8)|0);
      var $2=HEAP32[(($next)>>2)];
      $sp=$2;
      label = 3; break;
    case 3: 
      var $3=$sp;
      var $cmp=(($3)|(0))!=0;
      if ($cmp) { label = 4; break; } else { label = 91; break; }
    case 4: 
      var $4=$sp;
      var $base1=(($4)|0);
      var $5=HEAP32[(($base1)>>2)];
      $base=$5;
      var $6=$sp;
      var $size2=(($6+4)|0);
      var $7=HEAP32[(($size2)>>2)];
      $size=$7;
      var $8=$sp;
      var $next4=(($8+8)|0);
      var $9=HEAP32[(($next4)>>2)];
      $next3=$9;
      var $10=$nsegs;
      var $inc=((($10)+(1))|0);
      $nsegs=$inc;
      var $11=$sp;
      var $sflags=(($11+12)|0);
      var $12=HEAP32[(($sflags)>>2)];
      var $and=$12 & 0;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 90; break; }
    case 5: 
      var $13=$sp;
      var $sflags5=(($13+12)|0);
      var $14=HEAP32[(($sflags5)>>2)];
      var $and6=$14 & 8;
      var $tobool7=(($and6)|(0))!=0;
      if ($tobool7) { label = 90; break; } else { label = 6; break; }
    case 6: 
      var $15=$base;
      var $16=$base;
      var $add_ptr=(($16+8)|0);
      var $17=$add_ptr;
      var $and8=$17 & 7;
      var $cmp9=(($and8)|(0))==0;
      if ($cmp9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $cond = 0;label = 9; break;
    case 8: 
      var $18=$base;
      var $add_ptr10=(($18+8)|0);
      var $19=$add_ptr10;
      var $and11=$19 & 7;
      var $sub=(((8)-($and11))|0);
      var $and12=$sub & 7;
      var $cond = $and12;label = 9; break;
    case 9: 
      var $cond;
      var $add_ptr13=(($15+$cond)|0);
      var $20=$add_ptr13;
      $p=$20;
      var $21=$p;
      var $head=(($21+4)|0);
      var $22=HEAP32[(($head)>>2)];
      var $and14=$22 & -8;
      $psize=$and14;
      var $23=$p;
      var $head15=(($23+4)|0);
      var $24=HEAP32[(($head15)>>2)];
      var $and16=$24 & 3;
      var $cmp17=(($and16)|(0))!=1;
      if ($cmp17) { label = 89; break; } else { label = 10; break; }
    case 10: 
      var $25=$p;
      var $26=$25;
      var $27=$psize;
      var $add_ptr19=(($26+$27)|0);
      var $28=$base;
      var $29=$size;
      var $add_ptr20=(($28+$29)|0);
      var $add_ptr21=((($add_ptr20)-(40))|0);
      var $cmp22=(($add_ptr19)>>>(0)) >= (($add_ptr21)>>>(0));
      if ($cmp22) { label = 11; break; } else { label = 89; break; }
    case 11: 
      var $30=$p;
      var $31=$30;
      $tp=$31;
      var $32=$p;
      var $33=$m_addr;
      var $dv=(($33+20)|0);
      var $34=HEAP32[(($dv)>>2)];
      var $cmp24=(($32)|(0))==(($34)|(0));
      if ($cmp24) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $35=$m_addr;
      var $dv26=(($35+20)|0);
      HEAP32[(($dv26)>>2)]=0;
      var $36=$m_addr;
      var $dvsize=(($36+8)|0);
      HEAP32[(($dvsize)>>2)]=0;
      label = 62; break;
    case 13: 
      var $37=$tp;
      var $parent=(($37+24)|0);
      var $38=HEAP32[(($parent)>>2)];
      $XP=$38;
      var $39=$tp;
      var $bk=(($39+12)|0);
      var $40=HEAP32[(($bk)>>2)];
      var $41=$tp;
      var $cmp27=(($40)|(0))!=(($41)|(0));
      if ($cmp27) { label = 14; break; } else { label = 21; break; }
    case 14: 
      var $42=$tp;
      var $fd=(($42+8)|0);
      var $43=HEAP32[(($fd)>>2)];
      $F=$43;
      var $44=$tp;
      var $bk29=(($44+12)|0);
      var $45=HEAP32[(($bk29)>>2)];
      $R=$45;
      var $46=$F;
      var $47=$46;
      var $48=$m_addr;
      var $least_addr=(($48+16)|0);
      var $49=HEAP32[(($least_addr)>>2)];
      var $cmp30=(($47)>>>(0)) >= (($49)>>>(0));
      if ($cmp30) { label = 15; break; } else { var $56 = 0;label = 17; break; }
    case 15: 
      var $50=$F;
      var $bk32=(($50+12)|0);
      var $51=HEAP32[(($bk32)>>2)];
      var $52=$tp;
      var $cmp33=(($51)|(0))==(($52)|(0));
      if ($cmp33) { label = 16; break; } else { var $56 = 0;label = 17; break; }
    case 16: 
      var $53=$R;
      var $fd34=(($53+8)|0);
      var $54=HEAP32[(($fd34)>>2)];
      var $55=$tp;
      var $cmp35=(($54)|(0))==(($55)|(0));
      var $56 = $cmp35;label = 17; break;
    case 17: 
      var $56;
      var $land_ext=(($56)&(1));
      var $expval=($land_ext);
      var $tobool36=(($expval)|(0))!=0;
      if ($tobool36) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $57=$R;
      var $58=$F;
      var $bk38=(($58+12)|0);
      HEAP32[(($bk38)>>2)]=$57;
      var $59=$F;
      var $60=$R;
      var $fd39=(($60+8)|0);
      HEAP32[(($fd39)>>2)]=$59;
      label = 20; break;
    case 19: 
      _abort();
      throw "Reached an unreachable!";
    case 20: 
      label = 33; break;
    case 21: 
      var $61=$tp;
      var $child=(($61+16)|0);
      var $arrayidx=(($child+4)|0);
      $RP=$arrayidx;
      var $62=HEAP32[(($arrayidx)>>2)];
      $R=$62;
      var $cmp42=(($62)|(0))!=0;
      if ($cmp42) { label = 23; break; } else { label = 22; break; }
    case 22: 
      var $63=$tp;
      var $child43=(($63+16)|0);
      var $arrayidx44=(($child43)|0);
      $RP=$arrayidx44;
      var $64=HEAP32[(($arrayidx44)>>2)];
      $R=$64;
      var $cmp45=(($64)|(0))!=0;
      if ($cmp45) { label = 23; break; } else { label = 32; break; }
    case 23: 
      label = 24; break;
    case 24: 
      var $65=$R;
      var $child48=(($65+16)|0);
      var $arrayidx49=(($child48+4)|0);
      $CP=$arrayidx49;
      var $66=HEAP32[(($arrayidx49)>>2)];
      var $cmp50=(($66)|(0))!=0;
      if ($cmp50) { var $69 = 1;label = 26; break; } else { label = 25; break; }
    case 25: 
      var $67=$R;
      var $child51=(($67+16)|0);
      var $arrayidx52=(($child51)|0);
      $CP=$arrayidx52;
      var $68=HEAP32[(($arrayidx52)>>2)];
      var $cmp53=(($68)|(0))!=0;
      var $69 = $cmp53;label = 26; break;
    case 26: 
      var $69;
      if ($69) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $70=$CP;
      $RP=$70;
      var $71=HEAP32[(($70)>>2)];
      $R=$71;
      label = 24; break;
    case 28: 
      var $72=$RP;
      var $73=$72;
      var $74=$m_addr;
      var $least_addr55=(($74+16)|0);
      var $75=HEAP32[(($least_addr55)>>2)];
      var $cmp56=(($73)>>>(0)) >= (($75)>>>(0));
      var $conv=(($cmp56)&(1));
      var $expval57=($conv);
      var $tobool58=(($expval57)|(0))!=0;
      if ($tobool58) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $76=$RP;
      HEAP32[(($76)>>2)]=0;
      label = 31; break;
    case 30: 
      _abort();
      throw "Reached an unreachable!";
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $77=$XP;
      var $cmp64=(($77)|(0))!=0;
      if ($cmp64) { label = 34; break; } else { label = 61; break; }
    case 34: 
      var $78=$tp;
      var $index=(($78+28)|0);
      var $79=HEAP32[(($index)>>2)];
      var $80=$m_addr;
      var $treebins=(($80+304)|0);
      var $arrayidx67=(($treebins+($79<<2))|0);
      $H=$arrayidx67;
      var $81=$tp;
      var $82=$H;
      var $83=HEAP32[(($82)>>2)];
      var $cmp68=(($81)|(0))==(($83)|(0));
      if ($cmp68) { label = 35; break; } else { label = 38; break; }
    case 35: 
      var $84=$R;
      var $85=$H;
      HEAP32[(($85)>>2)]=$84;
      var $cmp71=(($84)|(0))==0;
      if ($cmp71) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $86=$tp;
      var $index74=(($86+28)|0);
      var $87=HEAP32[(($index74)>>2)];
      var $shl=1 << $87;
      var $neg=$shl ^ -1;
      var $88=$m_addr;
      var $treemap=(($88+4)|0);
      var $89=HEAP32[(($treemap)>>2)];
      var $and75=$89 & $neg;
      HEAP32[(($treemap)>>2)]=$and75;
      label = 37; break;
    case 37: 
      label = 45; break;
    case 38: 
      var $90=$XP;
      var $91=$90;
      var $92=$m_addr;
      var $least_addr78=(($92+16)|0);
      var $93=HEAP32[(($least_addr78)>>2)];
      var $cmp79=(($91)>>>(0)) >= (($93)>>>(0));
      var $conv80=(($cmp79)&(1));
      var $expval81=($conv80);
      var $tobool82=(($expval81)|(0))!=0;
      if ($tobool82) { label = 39; break; } else { label = 43; break; }
    case 39: 
      var $94=$XP;
      var $child84=(($94+16)|0);
      var $arrayidx85=(($child84)|0);
      var $95=HEAP32[(($arrayidx85)>>2)];
      var $96=$tp;
      var $cmp86=(($95)|(0))==(($96)|(0));
      if ($cmp86) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $97=$R;
      var $98=$XP;
      var $child89=(($98+16)|0);
      var $arrayidx90=(($child89)|0);
      HEAP32[(($arrayidx90)>>2)]=$97;
      label = 42; break;
    case 41: 
      var $99=$R;
      var $100=$XP;
      var $child92=(($100+16)|0);
      var $arrayidx93=(($child92+4)|0);
      HEAP32[(($arrayidx93)>>2)]=$99;
      label = 42; break;
    case 42: 
      label = 44; break;
    case 43: 
      _abort();
      throw "Reached an unreachable!";
    case 44: 
      label = 45; break;
    case 45: 
      var $101=$R;
      var $cmp98=(($101)|(0))!=0;
      if ($cmp98) { label = 46; break; } else { label = 60; break; }
    case 46: 
      var $102=$R;
      var $103=$102;
      var $104=$m_addr;
      var $least_addr101=(($104+16)|0);
      var $105=HEAP32[(($least_addr101)>>2)];
      var $cmp102=(($103)>>>(0)) >= (($105)>>>(0));
      var $conv103=(($cmp102)&(1));
      var $expval104=($conv103);
      var $tobool105=(($expval104)|(0))!=0;
      if ($tobool105) { label = 47; break; } else { label = 58; break; }
    case 47: 
      var $106=$XP;
      var $107=$R;
      var $parent107=(($107+24)|0);
      HEAP32[(($parent107)>>2)]=$106;
      var $108=$tp;
      var $child108=(($108+16)|0);
      var $arrayidx109=(($child108)|0);
      var $109=HEAP32[(($arrayidx109)>>2)];
      $C0=$109;
      var $cmp110=(($109)|(0))!=0;
      if ($cmp110) { label = 48; break; } else { label = 52; break; }
    case 48: 
      var $110=$C0;
      var $111=$110;
      var $112=$m_addr;
      var $least_addr113=(($112+16)|0);
      var $113=HEAP32[(($least_addr113)>>2)];
      var $cmp114=(($111)>>>(0)) >= (($113)>>>(0));
      var $conv115=(($cmp114)&(1));
      var $expval116=($conv115);
      var $tobool117=(($expval116)|(0))!=0;
      if ($tobool117) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $114=$C0;
      var $115=$R;
      var $child119=(($115+16)|0);
      var $arrayidx120=(($child119)|0);
      HEAP32[(($arrayidx120)>>2)]=$114;
      var $116=$R;
      var $117=$C0;
      var $parent121=(($117+24)|0);
      HEAP32[(($parent121)>>2)]=$116;
      label = 51; break;
    case 50: 
      _abort();
      throw "Reached an unreachable!";
    case 51: 
      label = 52; break;
    case 52: 
      var $118=$tp;
      var $child125=(($118+16)|0);
      var $arrayidx126=(($child125+4)|0);
      var $119=HEAP32[(($arrayidx126)>>2)];
      $C1=$119;
      var $cmp127=(($119)|(0))!=0;
      if ($cmp127) { label = 53; break; } else { label = 57; break; }
    case 53: 
      var $120=$C1;
      var $121=$120;
      var $122=$m_addr;
      var $least_addr130=(($122+16)|0);
      var $123=HEAP32[(($least_addr130)>>2)];
      var $cmp131=(($121)>>>(0)) >= (($123)>>>(0));
      var $conv132=(($cmp131)&(1));
      var $expval133=($conv132);
      var $tobool134=(($expval133)|(0))!=0;
      if ($tobool134) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $124=$C1;
      var $125=$R;
      var $child136=(($125+16)|0);
      var $arrayidx137=(($child136+4)|0);
      HEAP32[(($arrayidx137)>>2)]=$124;
      var $126=$R;
      var $127=$C1;
      var $parent138=(($127+24)|0);
      HEAP32[(($parent138)>>2)]=$126;
      label = 56; break;
    case 55: 
      _abort();
      throw "Reached an unreachable!";
    case 56: 
      label = 57; break;
    case 57: 
      label = 59; break;
    case 58: 
      _abort();
      throw "Reached an unreachable!";
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $128=$psize;
      var $shr=$128 >>> 8;
      $X=$shr;
      var $129=$X;
      var $cmp148=(($129)|(0))==0;
      if ($cmp148) { label = 63; break; } else { label = 64; break; }
    case 63: 
      $I=0;
      label = 68; break;
    case 64: 
      var $130=$X;
      var $cmp152=(($130)>>>(0)) > 65535;
      if ($cmp152) { label = 65; break; } else { label = 66; break; }
    case 65: 
      $I=31;
      label = 67; break;
    case 66: 
      var $131=$X;
      $Y=$131;
      var $132=$Y;
      var $sub156=((($132)-(256))|0);
      var $shr157=$sub156 >>> 16;
      var $and158=$shr157 & 8;
      $N=$and158;
      var $133=$N;
      var $134=$Y;
      var $shl159=$134 << $133;
      $Y=$shl159;
      var $sub160=((($shl159)-(4096))|0);
      var $shr161=$sub160 >>> 16;
      var $and162=$shr161 & 4;
      $K=$and162;
      var $135=$K;
      var $136=$N;
      var $add=((($136)+($135))|0);
      $N=$add;
      var $137=$K;
      var $138=$Y;
      var $shl163=$138 << $137;
      $Y=$shl163;
      var $sub164=((($shl163)-(16384))|0);
      var $shr165=$sub164 >>> 16;
      var $and166=$shr165 & 2;
      $K=$and166;
      var $139=$N;
      var $add167=((($139)+($and166))|0);
      $N=$add167;
      var $140=$N;
      var $sub168=(((14)-($140))|0);
      var $141=$K;
      var $142=$Y;
      var $shl169=$142 << $141;
      $Y=$shl169;
      var $shr170=$shl169 >>> 15;
      var $add171=((($sub168)+($shr170))|0);
      $K=$add171;
      var $143=$K;
      var $shl172=$143 << 1;
      var $144=$psize;
      var $145=$K;
      var $add173=((($145)+(7))|0);
      var $shr174=$144 >>> (($add173)>>>(0));
      var $and175=$shr174 & 1;
      var $add176=((($shl172)+($and175))|0);
      $I=$add176;
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $146=$I;
      var $147=$m_addr;
      var $treebins179=(($147+304)|0);
      var $arrayidx180=(($treebins179+($146<<2))|0);
      $H147=$arrayidx180;
      var $148=$I;
      var $149=$tp;
      var $index181=(($149+28)|0);
      HEAP32[(($index181)>>2)]=$148;
      var $150=$tp;
      var $child182=(($150+16)|0);
      var $arrayidx183=(($child182+4)|0);
      HEAP32[(($arrayidx183)>>2)]=0;
      var $151=$tp;
      var $child184=(($151+16)|0);
      var $arrayidx185=(($child184)|0);
      HEAP32[(($arrayidx185)>>2)]=0;
      var $152=$m_addr;
      var $treemap186=(($152+4)|0);
      var $153=HEAP32[(($treemap186)>>2)];
      var $154=$I;
      var $shl187=1 << $154;
      var $and188=$153 & $shl187;
      var $tobool189=(($and188)|(0))!=0;
      if ($tobool189) { label = 70; break; } else { label = 69; break; }
    case 69: 
      var $155=$I;
      var $shl191=1 << $155;
      var $156=$m_addr;
      var $treemap192=(($156+4)|0);
      var $157=HEAP32[(($treemap192)>>2)];
      var $or=$157 | $shl191;
      HEAP32[(($treemap192)>>2)]=$or;
      var $158=$tp;
      var $159=$H147;
      HEAP32[(($159)>>2)]=$158;
      var $160=$H147;
      var $161=$160;
      var $162=$tp;
      var $parent193=(($162+24)|0);
      HEAP32[(($parent193)>>2)]=$161;
      var $163=$tp;
      var $164=$tp;
      var $bk194=(($164+12)|0);
      HEAP32[(($bk194)>>2)]=$163;
      var $165=$tp;
      var $fd195=(($165+8)|0);
      HEAP32[(($fd195)>>2)]=$163;
      label = 88; break;
    case 70: 
      var $166=$H147;
      var $167=HEAP32[(($166)>>2)];
      $T=$167;
      var $168=$psize;
      var $169=$I;
      var $cmp198=(($169)|(0))==31;
      if ($cmp198) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $cond207 = 0;label = 73; break;
    case 72: 
      var $170=$I;
      var $shr202=$170 >>> 1;
      var $add203=((($shr202)+(8))|0);
      var $sub204=((($add203)-(2))|0);
      var $sub205=(((31)-($sub204))|0);
      var $cond207 = $sub205;label = 73; break;
    case 73: 
      var $cond207;
      var $shl208=$168 << $cond207;
      $K197=$shl208;
      label = 74; break;
    case 74: 
      var $171=$T;
      var $head209=(($171+4)|0);
      var $172=HEAP32[(($head209)>>2)];
      var $and210=$172 & -8;
      var $173=$psize;
      var $cmp211=(($and210)|(0))!=(($173)|(0));
      if ($cmp211) { label = 75; break; } else { label = 81; break; }
    case 75: 
      var $174=$K197;
      var $shr214=$174 >>> 31;
      var $and215=$shr214 & 1;
      var $175=$T;
      var $child216=(($175+16)|0);
      var $arrayidx217=(($child216+($and215<<2))|0);
      $C=$arrayidx217;
      var $176=$K197;
      var $shl218=$176 << 1;
      $K197=$shl218;
      var $177=$C;
      var $178=HEAP32[(($177)>>2)];
      var $cmp219=(($178)|(0))!=0;
      if ($cmp219) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $179=$C;
      var $180=HEAP32[(($179)>>2)];
      $T=$180;
      label = 80; break;
    case 77: 
      var $181=$C;
      var $182=$181;
      var $183=$m_addr;
      var $least_addr223=(($183+16)|0);
      var $184=HEAP32[(($least_addr223)>>2)];
      var $cmp224=(($182)>>>(0)) >= (($184)>>>(0));
      var $conv225=(($cmp224)&(1));
      var $expval226=($conv225);
      var $tobool227=(($expval226)|(0))!=0;
      if ($tobool227) { label = 78; break; } else { label = 79; break; }
    case 78: 
      var $185=$tp;
      var $186=$C;
      HEAP32[(($186)>>2)]=$185;
      var $187=$T;
      var $188=$tp;
      var $parent229=(($188+24)|0);
      HEAP32[(($parent229)>>2)]=$187;
      var $189=$tp;
      var $190=$tp;
      var $bk230=(($190+12)|0);
      HEAP32[(($bk230)>>2)]=$189;
      var $191=$tp;
      var $fd231=(($191+8)|0);
      HEAP32[(($fd231)>>2)]=$189;
      label = 87; break;
    case 79: 
      _abort();
      throw "Reached an unreachable!";
    case 80: 
      label = 86; break;
    case 81: 
      var $192=$T;
      var $fd236=(($192+8)|0);
      var $193=HEAP32[(($fd236)>>2)];
      $F235=$193;
      var $194=$T;
      var $195=$194;
      var $196=$m_addr;
      var $least_addr237=(($196+16)|0);
      var $197=HEAP32[(($least_addr237)>>2)];
      var $cmp238=(($195)>>>(0)) >= (($197)>>>(0));
      if ($cmp238) { label = 82; break; } else { var $202 = 0;label = 83; break; }
    case 82: 
      var $198=$F235;
      var $199=$198;
      var $200=$m_addr;
      var $least_addr241=(($200+16)|0);
      var $201=HEAP32[(($least_addr241)>>2)];
      var $cmp242=(($199)>>>(0)) >= (($201)>>>(0));
      var $202 = $cmp242;label = 83; break;
    case 83: 
      var $202;
      var $land_ext245=(($202)&(1));
      var $expval246=($land_ext245);
      var $tobool247=(($expval246)|(0))!=0;
      if ($tobool247) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $203=$tp;
      var $204=$F235;
      var $bk249=(($204+12)|0);
      HEAP32[(($bk249)>>2)]=$203;
      var $205=$T;
      var $fd250=(($205+8)|0);
      HEAP32[(($fd250)>>2)]=$203;
      var $206=$F235;
      var $207=$tp;
      var $fd251=(($207+8)|0);
      HEAP32[(($fd251)>>2)]=$206;
      var $208=$T;
      var $209=$tp;
      var $bk252=(($209+12)|0);
      HEAP32[(($bk252)>>2)]=$208;
      var $210=$tp;
      var $parent253=(($210+24)|0);
      HEAP32[(($parent253)>>2)]=0;
      label = 87; break;
    case 85: 
      _abort();
      throw "Reached an unreachable!";
    case 86: 
      label = 74; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      var $211=$sp;
      $pred=$211;
      var $212=$next3;
      $sp=$212;
      label = 3; break;
    case 91: 
      var $213=$nsegs;
      var $cmp260=(($213)>>>(0)) > 4294967295;
      if ($cmp260) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $214=$nsegs;
      var $cond265 = $214;label = 94; break;
    case 93: 
      var $cond265 = -1;label = 94; break;
    case 94: 
      var $cond265;
      var $215=$m_addr;
      var $release_checks=(($215+32)|0);
      HEAP32[(($release_checks)>>2)]=$cond265;
      var $216=$released;
      return $216;
    default: assert(0, "bad label: " + label);
  }
}
function _try_realloc_chunk($m, $p, $nb, $can_move) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $p_addr;
      var $nb_addr;
      var $can_move_addr;
      var $newp;
      var $oldsize;
      var $next;
      var $rsize;
      var $r;
      var $newsize;
      var $newtopsize;
      var $newtop;
      var $dvs;
      var $dsize;
      var $r65;
      var $n;
      var $newsize84;
      var $nextsize;
      var $rsize108;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F158;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $newsize291;
      var $r302;
      $m_addr=$m;
      $p_addr=$p;
      $nb_addr=$nb;
      $can_move_addr=$can_move;
      $newp=0;
      var $0=$p_addr;
      var $head=(($0+4)|0);
      var $1=HEAP32[(($head)>>2)];
      var $and=$1 & -8;
      $oldsize=$and;
      var $2=$p_addr;
      var $3=$2;
      var $4=$oldsize;
      var $add_ptr=(($3+$4)|0);
      var $5=$add_ptr;
      $next=$5;
      var $6=$p_addr;
      var $7=$6;
      var $8=$m_addr;
      var $least_addr=(($8+16)|0);
      var $9=HEAP32[(($least_addr)>>2)];
      var $cmp=(($7)>>>(0)) >= (($9)>>>(0));
      if ($cmp) { label = 3; break; } else { var $18 = 0;label = 6; break; }
    case 3: 
      var $10=$p_addr;
      var $head1=(($10+4)|0);
      var $11=HEAP32[(($head1)>>2)];
      var $and2=$11 & 3;
      var $cmp3=(($and2)|(0))!=1;
      if ($cmp3) { label = 4; break; } else { var $18 = 0;label = 6; break; }
    case 4: 
      var $12=$p_addr;
      var $13=$12;
      var $14=$next;
      var $15=$14;
      var $cmp5=(($13)>>>(0)) < (($15)>>>(0));
      if ($cmp5) { label = 5; break; } else { var $18 = 0;label = 6; break; }
    case 5: 
      var $16=$next;
      var $head6=(($16+4)|0);
      var $17=HEAP32[(($head6)>>2)];
      var $and7=$17 & 1;
      var $tobool=(($and7)|(0))!=0;
      var $18 = $tobool;label = 6; break;
    case 6: 
      var $18;
      var $land_ext=(($18)&(1));
      var $expval=($land_ext);
      var $tobool8=(($expval)|(0))!=0;
      if ($tobool8) { label = 7; break; } else { label = 104; break; }
    case 7: 
      var $19=$p_addr;
      var $head9=(($19+4)|0);
      var $20=HEAP32[(($head9)>>2)];
      var $and10=$20 & 3;
      var $cmp11=(($and10)|(0))==0;
      if ($cmp11) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $21=$m_addr;
      var $22=$p_addr;
      var $23=$nb_addr;
      var $24=$can_move_addr;
      var $call=_mmap_resize($21, $22, $23, $24);
      $newp=$call;
      label = 103; break;
    case 9: 
      var $25=$oldsize;
      var $26=$nb_addr;
      var $cmp13=(($25)>>>(0)) >= (($26)>>>(0));
      if ($cmp13) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $27=$oldsize;
      var $28=$nb_addr;
      var $sub=((($27)-($28))|0);
      $rsize=$sub;
      var $29=$rsize;
      var $cmp15=(($29)>>>(0)) >= 16;
      if ($cmp15) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $30=$p_addr;
      var $31=$30;
      var $32=$nb_addr;
      var $add_ptr17=(($31+$32)|0);
      var $33=$add_ptr17;
      $r=$33;
      var $34=$p_addr;
      var $head18=(($34+4)|0);
      var $35=HEAP32[(($head18)>>2)];
      var $and19=$35 & 1;
      var $36=$nb_addr;
      var $or=$and19 | $36;
      var $or20=$or | 2;
      var $37=$p_addr;
      var $head21=(($37+4)|0);
      HEAP32[(($head21)>>2)]=$or20;
      var $38=$p_addr;
      var $39=$38;
      var $40=$nb_addr;
      var $add_ptr22=(($39+$40)|0);
      var $41=$add_ptr22;
      var $head23=(($41+4)|0);
      var $42=HEAP32[(($head23)>>2)];
      var $or24=$42 | 1;
      HEAP32[(($head23)>>2)]=$or24;
      var $43=$r;
      var $head25=(($43+4)|0);
      var $44=HEAP32[(($head25)>>2)];
      var $and26=$44 & 1;
      var $45=$rsize;
      var $or27=$and26 | $45;
      var $or28=$or27 | 2;
      var $46=$r;
      var $head29=(($46+4)|0);
      HEAP32[(($head29)>>2)]=$or28;
      var $47=$r;
      var $48=$47;
      var $49=$rsize;
      var $add_ptr30=(($48+$49)|0);
      var $50=$add_ptr30;
      var $head31=(($50+4)|0);
      var $51=HEAP32[(($head31)>>2)];
      var $or32=$51 | 1;
      HEAP32[(($head31)>>2)]=$or32;
      var $52=$m_addr;
      var $53=$r;
      var $54=$rsize;
      _dispose_chunk($52, $53, $54);
      label = 12; break;
    case 12: 
      var $55=$p_addr;
      $newp=$55;
      label = 102; break;
    case 13: 
      var $56=$next;
      var $57=$m_addr;
      var $top=(($57+24)|0);
      var $58=HEAP32[(($top)>>2)];
      var $cmp34=(($56)|(0))==(($58)|(0));
      if ($cmp34) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $59=$oldsize;
      var $60=$m_addr;
      var $topsize=(($60+12)|0);
      var $61=HEAP32[(($topsize)>>2)];
      var $add=((($59)+($61))|0);
      var $62=$nb_addr;
      var $cmp36=(($add)>>>(0)) > (($62)>>>(0));
      if ($cmp36) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $63=$oldsize;
      var $64=$m_addr;
      var $topsize38=(($64+12)|0);
      var $65=HEAP32[(($topsize38)>>2)];
      var $add39=((($63)+($65))|0);
      $newsize=$add39;
      var $66=$newsize;
      var $67=$nb_addr;
      var $sub40=((($66)-($67))|0);
      $newtopsize=$sub40;
      var $68=$p_addr;
      var $69=$68;
      var $70=$nb_addr;
      var $add_ptr41=(($69+$70)|0);
      var $71=$add_ptr41;
      $newtop=$71;
      var $72=$p_addr;
      var $head42=(($72+4)|0);
      var $73=HEAP32[(($head42)>>2)];
      var $and43=$73 & 1;
      var $74=$nb_addr;
      var $or44=$and43 | $74;
      var $or45=$or44 | 2;
      var $75=$p_addr;
      var $head46=(($75+4)|0);
      HEAP32[(($head46)>>2)]=$or45;
      var $76=$p_addr;
      var $77=$76;
      var $78=$nb_addr;
      var $add_ptr47=(($77+$78)|0);
      var $79=$add_ptr47;
      var $head48=(($79+4)|0);
      var $80=HEAP32[(($head48)>>2)];
      var $or49=$80 | 1;
      HEAP32[(($head48)>>2)]=$or49;
      var $81=$newtopsize;
      var $or50=$81 | 1;
      var $82=$newtop;
      var $head51=(($82+4)|0);
      HEAP32[(($head51)>>2)]=$or50;
      var $83=$newtop;
      var $84=$m_addr;
      var $top52=(($84+24)|0);
      HEAP32[(($top52)>>2)]=$83;
      var $85=$newtopsize;
      var $86=$m_addr;
      var $topsize53=(($86+12)|0);
      HEAP32[(($topsize53)>>2)]=$85;
      var $87=$p_addr;
      $newp=$87;
      label = 16; break;
    case 16: 
      label = 101; break;
    case 17: 
      var $88=$next;
      var $89=$m_addr;
      var $dv=(($89+20)|0);
      var $90=HEAP32[(($dv)>>2)];
      var $cmp56=(($88)|(0))==(($90)|(0));
      if ($cmp56) { label = 18; break; } else { label = 24; break; }
    case 18: 
      var $91=$m_addr;
      var $dvsize=(($91+8)|0);
      var $92=HEAP32[(($dvsize)>>2)];
      $dvs=$92;
      var $93=$oldsize;
      var $94=$dvs;
      var $add58=((($93)+($94))|0);
      var $95=$nb_addr;
      var $cmp59=(($add58)>>>(0)) >= (($95)>>>(0));
      if ($cmp59) { label = 19; break; } else { label = 23; break; }
    case 19: 
      var $96=$oldsize;
      var $97=$dvs;
      var $add61=((($96)+($97))|0);
      var $98=$nb_addr;
      var $sub62=((($add61)-($98))|0);
      $dsize=$sub62;
      var $99=$dsize;
      var $cmp63=(($99)>>>(0)) >= 16;
      if ($cmp63) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $100=$p_addr;
      var $101=$100;
      var $102=$nb_addr;
      var $add_ptr66=(($101+$102)|0);
      var $103=$add_ptr66;
      $r65=$103;
      var $104=$r65;
      var $105=$104;
      var $106=$dsize;
      var $add_ptr67=(($105+$106)|0);
      var $107=$add_ptr67;
      $n=$107;
      var $108=$p_addr;
      var $head68=(($108+4)|0);
      var $109=HEAP32[(($head68)>>2)];
      var $and69=$109 & 1;
      var $110=$nb_addr;
      var $or70=$and69 | $110;
      var $or71=$or70 | 2;
      var $111=$p_addr;
      var $head72=(($111+4)|0);
      HEAP32[(($head72)>>2)]=$or71;
      var $112=$p_addr;
      var $113=$112;
      var $114=$nb_addr;
      var $add_ptr73=(($113+$114)|0);
      var $115=$add_ptr73;
      var $head74=(($115+4)|0);
      var $116=HEAP32[(($head74)>>2)];
      var $or75=$116 | 1;
      HEAP32[(($head74)>>2)]=$or75;
      var $117=$dsize;
      var $or76=$117 | 1;
      var $118=$r65;
      var $head77=(($118+4)|0);
      HEAP32[(($head77)>>2)]=$or76;
      var $119=$dsize;
      var $120=$r65;
      var $121=$120;
      var $122=$dsize;
      var $add_ptr78=(($121+$122)|0);
      var $123=$add_ptr78;
      var $prev_foot=(($123)|0);
      HEAP32[(($prev_foot)>>2)]=$119;
      var $124=$n;
      var $head79=(($124+4)|0);
      var $125=HEAP32[(($head79)>>2)];
      var $and80=$125 & -2;
      HEAP32[(($head79)>>2)]=$and80;
      var $126=$dsize;
      var $127=$m_addr;
      var $dvsize81=(($127+8)|0);
      HEAP32[(($dvsize81)>>2)]=$126;
      var $128=$r65;
      var $129=$m_addr;
      var $dv82=(($129+20)|0);
      HEAP32[(($dv82)>>2)]=$128;
      label = 22; break;
    case 21: 
      var $130=$oldsize;
      var $131=$dvs;
      var $add85=((($130)+($131))|0);
      $newsize84=$add85;
      var $132=$p_addr;
      var $head86=(($132+4)|0);
      var $133=HEAP32[(($head86)>>2)];
      var $and87=$133 & 1;
      var $134=$newsize84;
      var $or88=$and87 | $134;
      var $or89=$or88 | 2;
      var $135=$p_addr;
      var $head90=(($135+4)|0);
      HEAP32[(($head90)>>2)]=$or89;
      var $136=$p_addr;
      var $137=$136;
      var $138=$newsize84;
      var $add_ptr91=(($137+$138)|0);
      var $139=$add_ptr91;
      var $head92=(($139+4)|0);
      var $140=HEAP32[(($head92)>>2)];
      var $or93=$140 | 1;
      HEAP32[(($head92)>>2)]=$or93;
      var $141=$m_addr;
      var $dvsize94=(($141+8)|0);
      HEAP32[(($dvsize94)>>2)]=0;
      var $142=$m_addr;
      var $dv95=(($142+20)|0);
      HEAP32[(($dv95)>>2)]=0;
      label = 22; break;
    case 22: 
      var $143=$p_addr;
      $newp=$143;
      label = 23; break;
    case 23: 
      label = 100; break;
    case 24: 
      var $144=$next;
      var $head99=(($144+4)|0);
      var $145=HEAP32[(($head99)>>2)];
      var $and100=$145 & 2;
      var $tobool101=(($and100)|(0))!=0;
      if ($tobool101) { label = 99; break; } else { label = 25; break; }
    case 25: 
      var $146=$next;
      var $head103=(($146+4)|0);
      var $147=HEAP32[(($head103)>>2)];
      var $and104=$147 & -8;
      $nextsize=$and104;
      var $148=$oldsize;
      var $149=$nextsize;
      var $add105=((($148)+($149))|0);
      var $150=$nb_addr;
      var $cmp106=(($add105)>>>(0)) >= (($150)>>>(0));
      if ($cmp106) { label = 26; break; } else { label = 98; break; }
    case 26: 
      var $151=$oldsize;
      var $152=$nextsize;
      var $add109=((($151)+($152))|0);
      var $153=$nb_addr;
      var $sub110=((($add109)-($153))|0);
      $rsize108=$sub110;
      var $154=$nextsize;
      var $shr=$154 >>> 3;
      var $cmp111=(($shr)>>>(0)) < 32;
      if ($cmp111) { label = 27; break; } else { label = 45; break; }
    case 27: 
      var $155=$next;
      var $fd=(($155+8)|0);
      var $156=HEAP32[(($fd)>>2)];
      $F=$156;
      var $157=$next;
      var $bk=(($157+12)|0);
      var $158=HEAP32[(($bk)>>2)];
      $B=$158;
      var $159=$nextsize;
      var $shr113=$159 >>> 3;
      $I=$shr113;
      var $160=$F;
      var $161=$I;
      var $shl=$161 << 1;
      var $162=$m_addr;
      var $smallbins=(($162+40)|0);
      var $arrayidx=(($smallbins+($shl<<2))|0);
      var $163=$arrayidx;
      var $164=$163;
      var $cmp114=(($160)|(0))==(($164)|(0));
      if ($cmp114) { var $173 = 1;label = 31; break; } else { label = 28; break; }
    case 28: 
      var $165=$F;
      var $166=$165;
      var $167=$m_addr;
      var $least_addr115=(($167+16)|0);
      var $168=HEAP32[(($least_addr115)>>2)];
      var $cmp116=(($166)>>>(0)) >= (($168)>>>(0));
      if ($cmp116) { label = 29; break; } else { var $172 = 0;label = 30; break; }
    case 29: 
      var $169=$F;
      var $bk118=(($169+12)|0);
      var $170=HEAP32[(($bk118)>>2)];
      var $171=$next;
      var $cmp119=(($170)|(0))==(($171)|(0));
      var $172 = $cmp119;label = 30; break;
    case 30: 
      var $172;
      var $173 = $172;label = 31; break;
    case 31: 
      var $173;
      var $lor_ext=(($173)&(1));
      var $expval122=($lor_ext);
      var $tobool123=(($expval122)|(0))!=0;
      if ($tobool123) { label = 32; break; } else { label = 43; break; }
    case 32: 
      var $174=$B;
      var $175=$F;
      var $cmp125=(($174)|(0))==(($175)|(0));
      if ($cmp125) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $176=$I;
      var $shl127=1 << $176;
      var $neg=$shl127 ^ -1;
      var $177=$m_addr;
      var $smallmap=(($177)|0);
      var $178=HEAP32[(($smallmap)>>2)];
      var $and128=$178 & $neg;
      HEAP32[(($smallmap)>>2)]=$and128;
      label = 42; break;
    case 34: 
      var $179=$B;
      var $180=$I;
      var $shl130=$180 << 1;
      var $181=$m_addr;
      var $smallbins131=(($181+40)|0);
      var $arrayidx132=(($smallbins131+($shl130<<2))|0);
      var $182=$arrayidx132;
      var $183=$182;
      var $cmp133=(($179)|(0))==(($183)|(0));
      if ($cmp133) { var $192 = 1;label = 38; break; } else { label = 35; break; }
    case 35: 
      var $184=$B;
      var $185=$184;
      var $186=$m_addr;
      var $least_addr135=(($186+16)|0);
      var $187=HEAP32[(($least_addr135)>>2)];
      var $cmp136=(($185)>>>(0)) >= (($187)>>>(0));
      if ($cmp136) { label = 36; break; } else { var $191 = 0;label = 37; break; }
    case 36: 
      var $188=$B;
      var $fd138=(($188+8)|0);
      var $189=HEAP32[(($fd138)>>2)];
      var $190=$next;
      var $cmp139=(($189)|(0))==(($190)|(0));
      var $191 = $cmp139;label = 37; break;
    case 37: 
      var $191;
      var $192 = $191;label = 38; break;
    case 38: 
      var $192;
      var $lor_ext143=(($192)&(1));
      var $expval144=($lor_ext143);
      var $tobool145=(($expval144)|(0))!=0;
      if ($tobool145) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $193=$B;
      var $194=$F;
      var $bk147=(($194+12)|0);
      HEAP32[(($bk147)>>2)]=$193;
      var $195=$F;
      var $196=$B;
      var $fd148=(($196+8)|0);
      HEAP32[(($fd148)>>2)]=$195;
      label = 41; break;
    case 40: 
      _abort();
      throw "Reached an unreachable!";
    case 41: 
      label = 42; break;
    case 42: 
      label = 44; break;
    case 43: 
      _abort();
      throw "Reached an unreachable!";
    case 44: 
      label = 94; break;
    case 45: 
      var $197=$next;
      var $198=$197;
      $TP=$198;
      var $199=$TP;
      var $parent=(($199+24)|0);
      var $200=HEAP32[(($parent)>>2)];
      $XP=$200;
      var $201=$TP;
      var $bk155=(($201+12)|0);
      var $202=HEAP32[(($bk155)>>2)];
      var $203=$TP;
      var $cmp156=(($202)|(0))!=(($203)|(0));
      if ($cmp156) { label = 46; break; } else { label = 53; break; }
    case 46: 
      var $204=$TP;
      var $fd159=(($204+8)|0);
      var $205=HEAP32[(($fd159)>>2)];
      $F158=$205;
      var $206=$TP;
      var $bk160=(($206+12)|0);
      var $207=HEAP32[(($bk160)>>2)];
      $R=$207;
      var $208=$F158;
      var $209=$208;
      var $210=$m_addr;
      var $least_addr161=(($210+16)|0);
      var $211=HEAP32[(($least_addr161)>>2)];
      var $cmp162=(($209)>>>(0)) >= (($211)>>>(0));
      if ($cmp162) { label = 47; break; } else { var $218 = 0;label = 49; break; }
    case 47: 
      var $212=$F158;
      var $bk164=(($212+12)|0);
      var $213=HEAP32[(($bk164)>>2)];
      var $214=$TP;
      var $cmp165=(($213)|(0))==(($214)|(0));
      if ($cmp165) { label = 48; break; } else { var $218 = 0;label = 49; break; }
    case 48: 
      var $215=$R;
      var $fd167=(($215+8)|0);
      var $216=HEAP32[(($fd167)>>2)];
      var $217=$TP;
      var $cmp168=(($216)|(0))==(($217)|(0));
      var $218 = $cmp168;label = 49; break;
    case 49: 
      var $218;
      var $land_ext170=(($218)&(1));
      var $expval171=($land_ext170);
      var $tobool172=(($expval171)|(0))!=0;
      if ($tobool172) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $219=$R;
      var $220=$F158;
      var $bk174=(($220+12)|0);
      HEAP32[(($bk174)>>2)]=$219;
      var $221=$F158;
      var $222=$R;
      var $fd175=(($222+8)|0);
      HEAP32[(($fd175)>>2)]=$221;
      label = 52; break;
    case 51: 
      _abort();
      throw "Reached an unreachable!";
    case 52: 
      label = 65; break;
    case 53: 
      var $223=$TP;
      var $child=(($223+16)|0);
      var $arrayidx179=(($child+4)|0);
      $RP=$arrayidx179;
      var $224=HEAP32[(($arrayidx179)>>2)];
      $R=$224;
      var $cmp180=(($224)|(0))!=0;
      if ($cmp180) { label = 55; break; } else { label = 54; break; }
    case 54: 
      var $225=$TP;
      var $child181=(($225+16)|0);
      var $arrayidx182=(($child181)|0);
      $RP=$arrayidx182;
      var $226=HEAP32[(($arrayidx182)>>2)];
      $R=$226;
      var $cmp183=(($226)|(0))!=0;
      if ($cmp183) { label = 55; break; } else { label = 64; break; }
    case 55: 
      label = 56; break;
    case 56: 
      var $227=$R;
      var $child185=(($227+16)|0);
      var $arrayidx186=(($child185+4)|0);
      $CP=$arrayidx186;
      var $228=HEAP32[(($arrayidx186)>>2)];
      var $cmp187=(($228)|(0))!=0;
      if ($cmp187) { var $231 = 1;label = 58; break; } else { label = 57; break; }
    case 57: 
      var $229=$R;
      var $child189=(($229+16)|0);
      var $arrayidx190=(($child189)|0);
      $CP=$arrayidx190;
      var $230=HEAP32[(($arrayidx190)>>2)];
      var $cmp191=(($230)|(0))!=0;
      var $231 = $cmp191;label = 58; break;
    case 58: 
      var $231;
      if ($231) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $232=$CP;
      $RP=$232;
      var $233=HEAP32[(($232)>>2)];
      $R=$233;
      label = 56; break;
    case 60: 
      var $234=$RP;
      var $235=$234;
      var $236=$m_addr;
      var $least_addr194=(($236+16)|0);
      var $237=HEAP32[(($least_addr194)>>2)];
      var $cmp195=(($235)>>>(0)) >= (($237)>>>(0));
      var $conv=(($cmp195)&(1));
      var $expval196=($conv);
      var $tobool197=(($expval196)|(0))!=0;
      if ($tobool197) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $238=$RP;
      HEAP32[(($238)>>2)]=0;
      label = 63; break;
    case 62: 
      _abort();
      throw "Reached an unreachable!";
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $239=$XP;
      var $cmp203=(($239)|(0))!=0;
      if ($cmp203) { label = 66; break; } else { label = 93; break; }
    case 66: 
      var $240=$TP;
      var $index=(($240+28)|0);
      var $241=HEAP32[(($index)>>2)];
      var $242=$m_addr;
      var $treebins=(($242+304)|0);
      var $arrayidx206=(($treebins+($241<<2))|0);
      $H=$arrayidx206;
      var $243=$TP;
      var $244=$H;
      var $245=HEAP32[(($244)>>2)];
      var $cmp207=(($243)|(0))==(($245)|(0));
      if ($cmp207) { label = 67; break; } else { label = 70; break; }
    case 67: 
      var $246=$R;
      var $247=$H;
      HEAP32[(($247)>>2)]=$246;
      var $cmp210=(($246)|(0))==0;
      if ($cmp210) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $248=$TP;
      var $index213=(($248+28)|0);
      var $249=HEAP32[(($index213)>>2)];
      var $shl214=1 << $249;
      var $neg215=$shl214 ^ -1;
      var $250=$m_addr;
      var $treemap=(($250+4)|0);
      var $251=HEAP32[(($treemap)>>2)];
      var $and216=$251 & $neg215;
      HEAP32[(($treemap)>>2)]=$and216;
      label = 69; break;
    case 69: 
      label = 77; break;
    case 70: 
      var $252=$XP;
      var $253=$252;
      var $254=$m_addr;
      var $least_addr219=(($254+16)|0);
      var $255=HEAP32[(($least_addr219)>>2)];
      var $cmp220=(($253)>>>(0)) >= (($255)>>>(0));
      var $conv221=(($cmp220)&(1));
      var $expval222=($conv221);
      var $tobool223=(($expval222)|(0))!=0;
      if ($tobool223) { label = 71; break; } else { label = 75; break; }
    case 71: 
      var $256=$XP;
      var $child225=(($256+16)|0);
      var $arrayidx226=(($child225)|0);
      var $257=HEAP32[(($arrayidx226)>>2)];
      var $258=$TP;
      var $cmp227=(($257)|(0))==(($258)|(0));
      if ($cmp227) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $259=$R;
      var $260=$XP;
      var $child230=(($260+16)|0);
      var $arrayidx231=(($child230)|0);
      HEAP32[(($arrayidx231)>>2)]=$259;
      label = 74; break;
    case 73: 
      var $261=$R;
      var $262=$XP;
      var $child233=(($262+16)|0);
      var $arrayidx234=(($child233+4)|0);
      HEAP32[(($arrayidx234)>>2)]=$261;
      label = 74; break;
    case 74: 
      label = 76; break;
    case 75: 
      _abort();
      throw "Reached an unreachable!";
    case 76: 
      label = 77; break;
    case 77: 
      var $263=$R;
      var $cmp239=(($263)|(0))!=0;
      if ($cmp239) { label = 78; break; } else { label = 92; break; }
    case 78: 
      var $264=$R;
      var $265=$264;
      var $266=$m_addr;
      var $least_addr242=(($266+16)|0);
      var $267=HEAP32[(($least_addr242)>>2)];
      var $cmp243=(($265)>>>(0)) >= (($267)>>>(0));
      var $conv244=(($cmp243)&(1));
      var $expval245=($conv244);
      var $tobool246=(($expval245)|(0))!=0;
      if ($tobool246) { label = 79; break; } else { label = 90; break; }
    case 79: 
      var $268=$XP;
      var $269=$R;
      var $parent248=(($269+24)|0);
      HEAP32[(($parent248)>>2)]=$268;
      var $270=$TP;
      var $child249=(($270+16)|0);
      var $arrayidx250=(($child249)|0);
      var $271=HEAP32[(($arrayidx250)>>2)];
      $C0=$271;
      var $cmp251=(($271)|(0))!=0;
      if ($cmp251) { label = 80; break; } else { label = 84; break; }
    case 80: 
      var $272=$C0;
      var $273=$272;
      var $274=$m_addr;
      var $least_addr254=(($274+16)|0);
      var $275=HEAP32[(($least_addr254)>>2)];
      var $cmp255=(($273)>>>(0)) >= (($275)>>>(0));
      var $conv256=(($cmp255)&(1));
      var $expval257=($conv256);
      var $tobool258=(($expval257)|(0))!=0;
      if ($tobool258) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $276=$C0;
      var $277=$R;
      var $child260=(($277+16)|0);
      var $arrayidx261=(($child260)|0);
      HEAP32[(($arrayidx261)>>2)]=$276;
      var $278=$R;
      var $279=$C0;
      var $parent262=(($279+24)|0);
      HEAP32[(($parent262)>>2)]=$278;
      label = 83; break;
    case 82: 
      _abort();
      throw "Reached an unreachable!";
    case 83: 
      label = 84; break;
    case 84: 
      var $280=$TP;
      var $child266=(($280+16)|0);
      var $arrayidx267=(($child266+4)|0);
      var $281=HEAP32[(($arrayidx267)>>2)];
      $C1=$281;
      var $cmp268=(($281)|(0))!=0;
      if ($cmp268) { label = 85; break; } else { label = 89; break; }
    case 85: 
      var $282=$C1;
      var $283=$282;
      var $284=$m_addr;
      var $least_addr271=(($284+16)|0);
      var $285=HEAP32[(($least_addr271)>>2)];
      var $cmp272=(($283)>>>(0)) >= (($285)>>>(0));
      var $conv273=(($cmp272)&(1));
      var $expval274=($conv273);
      var $tobool275=(($expval274)|(0))!=0;
      if ($tobool275) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $286=$C1;
      var $287=$R;
      var $child277=(($287+16)|0);
      var $arrayidx278=(($child277+4)|0);
      HEAP32[(($arrayidx278)>>2)]=$286;
      var $288=$R;
      var $289=$C1;
      var $parent279=(($289+24)|0);
      HEAP32[(($parent279)>>2)]=$288;
      label = 88; break;
    case 87: 
      _abort();
      throw "Reached an unreachable!";
    case 88: 
      label = 89; break;
    case 89: 
      label = 91; break;
    case 90: 
      _abort();
      throw "Reached an unreachable!";
    case 91: 
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      label = 94; break;
    case 94: 
      var $290=$rsize108;
      var $cmp288=(($290)>>>(0)) < 16;
      if ($cmp288) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $291=$oldsize;
      var $292=$nextsize;
      var $add292=((($291)+($292))|0);
      $newsize291=$add292;
      var $293=$p_addr;
      var $head293=(($293+4)|0);
      var $294=HEAP32[(($head293)>>2)];
      var $and294=$294 & 1;
      var $295=$newsize291;
      var $or295=$and294 | $295;
      var $or296=$or295 | 2;
      var $296=$p_addr;
      var $head297=(($296+4)|0);
      HEAP32[(($head297)>>2)]=$or296;
      var $297=$p_addr;
      var $298=$297;
      var $299=$newsize291;
      var $add_ptr298=(($298+$299)|0);
      var $300=$add_ptr298;
      var $head299=(($300+4)|0);
      var $301=HEAP32[(($head299)>>2)];
      var $or300=$301 | 1;
      HEAP32[(($head299)>>2)]=$or300;
      label = 97; break;
    case 96: 
      var $302=$p_addr;
      var $303=$302;
      var $304=$nb_addr;
      var $add_ptr303=(($303+$304)|0);
      var $305=$add_ptr303;
      $r302=$305;
      var $306=$p_addr;
      var $head304=(($306+4)|0);
      var $307=HEAP32[(($head304)>>2)];
      var $and305=$307 & 1;
      var $308=$nb_addr;
      var $or306=$and305 | $308;
      var $or307=$or306 | 2;
      var $309=$p_addr;
      var $head308=(($309+4)|0);
      HEAP32[(($head308)>>2)]=$or307;
      var $310=$p_addr;
      var $311=$310;
      var $312=$nb_addr;
      var $add_ptr309=(($311+$312)|0);
      var $313=$add_ptr309;
      var $head310=(($313+4)|0);
      var $314=HEAP32[(($head310)>>2)];
      var $or311=$314 | 1;
      HEAP32[(($head310)>>2)]=$or311;
      var $315=$r302;
      var $head312=(($315+4)|0);
      var $316=HEAP32[(($head312)>>2)];
      var $and313=$316 & 1;
      var $317=$rsize108;
      var $or314=$and313 | $317;
      var $or315=$or314 | 2;
      var $318=$r302;
      var $head316=(($318+4)|0);
      HEAP32[(($head316)>>2)]=$or315;
      var $319=$r302;
      var $320=$319;
      var $321=$rsize108;
      var $add_ptr317=(($320+$321)|0);
      var $322=$add_ptr317;
      var $head318=(($322+4)|0);
      var $323=HEAP32[(($head318)>>2)];
      var $or319=$323 | 1;
      HEAP32[(($head318)>>2)]=$or319;
      var $324=$m_addr;
      var $325=$r302;
      var $326=$rsize108;
      _dispose_chunk($324, $325, $326);
      label = 97; break;
    case 97: 
      var $327=$p_addr;
      $newp=$327;
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      label = 103; break;
    case 103: 
      label = 105; break;
    case 104: 
      _abort();
      throw "Reached an unreachable!";
    case 105: 
      var $328=$newp;
      return $328;
    default: assert(0, "bad label: " + label);
  }
}
function _init_mparams() {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $magic;
      var $psize;
      var $gsize;
      var $0=HEAP32[((((79952)|0))>>2)];
      var $cmp=(($0)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $call=_sysconf(8);
      $psize=$call;
      var $1=$psize;
      $gsize=$1;
      var $2=$gsize;
      var $3=$gsize;
      var $sub=((($3)-(1))|0);
      var $and=$2 & $sub;
      var $cmp1=(($and)|(0))!=0;
      if ($cmp1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$psize;
      var $5=$psize;
      var $sub2=((($5)-(1))|0);
      var $and3=$4 & $sub2;
      var $cmp4=(($and3)|(0))!=0;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _abort();
      throw "Reached an unreachable!";
    case 6: 
      var $6=$gsize;
      HEAP32[((((79960)|0))>>2)]=$6;
      var $7=$psize;
      HEAP32[((((79956)|0))>>2)]=$7;
      HEAP32[((((79964)|0))>>2)]=-1;
      HEAP32[((((79968)|0))>>2)]=2097152;
      HEAP32[((((79972)|0))>>2)]=0;
      var $8=HEAP32[((((79972)|0))>>2)];
      HEAP32[((((114436)|0))>>2)]=$8;
      var $call6=_time(0);
      var $xor=$call6 ^ 1431655765;
      $magic=$xor;
      var $9=$magic;
      var $or=$9 | 8;
      $magic=$or;
      var $10=$magic;
      var $and7=$10 & -8;
      $magic=$and7;
      var $11=$magic;
      HEAP32[((((79952)|0))>>2)]=$11;
      label = 7; break;
    case 7: 
      return 1;
    default: assert(0, "bad label: " + label);
  }
}
function _dispose_chunk($m, $p, $psize) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $p_addr;
      var $psize_addr;
      var $next;
      var $prev;
      var $prevsize;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F64;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F260;
      var $B262;
      var $I264;
      var $TP322;
      var $XP323;
      var $R325;
      var $F330;
      var $RP354;
      var $CP365;
      var $H393;
      var $C0439;
      var $C1440;
      var $I505;
      var $B507;
      var $F511;
      var $TP537;
      var $H538;
      var $I539;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K591;
      var $C;
      var $F625;
      $m_addr=$m;
      $p_addr=$p;
      $psize_addr=$psize;
      var $0=$p_addr;
      var $1=$0;
      var $2=$psize_addr;
      var $add_ptr=(($1+$2)|0);
      var $3=$add_ptr;
      $next=$3;
      var $4=$p_addr;
      var $head=(($4+4)|0);
      var $5=HEAP32[(($head)>>2)];
      var $and=$5 & 1;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 82; break; } else { label = 3; break; }
    case 3: 
      var $6=$p_addr;
      var $prev_foot=(($6)|0);
      var $7=HEAP32[(($prev_foot)>>2)];
      $prevsize=$7;
      var $8=$p_addr;
      var $head1=(($8+4)|0);
      var $9=HEAP32[(($head1)>>2)];
      var $and2=$9 & 3;
      var $cmp=(($and2)|(0))==0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $10=$prevsize;
      var $add=((($10)+(16))|0);
      var $11=$psize_addr;
      var $add4=((($11)+($add))|0);
      $psize_addr=$add4;
      label = 201; break;
    case 5: 
      var $12=$p_addr;
      var $13=$12;
      var $14=$prevsize;
      var $idx_neg=(((-$14))|0);
      var $add_ptr5=(($13+$idx_neg)|0);
      var $15=$add_ptr5;
      $prev=$15;
      var $16=$prevsize;
      var $17=$psize_addr;
      var $add6=((($17)+($16))|0);
      $psize_addr=$add6;
      var $18=$prev;
      $p_addr=$18;
      var $19=$prev;
      var $20=$19;
      var $21=$m_addr;
      var $least_addr=(($21+16)|0);
      var $22=HEAP32[(($least_addr)>>2)];
      var $cmp7=(($20)>>>(0)) >= (($22)>>>(0));
      var $conv=(($cmp7)&(1));
      var $expval=($conv);
      var $tobool8=(($expval)|(0))!=0;
      if ($tobool8) { label = 6; break; } else { label = 80; break; }
    case 6: 
      var $23=$p_addr;
      var $24=$m_addr;
      var $dv=(($24+20)|0);
      var $25=HEAP32[(($dv)>>2)];
      var $cmp10=(($23)|(0))!=(($25)|(0));
      if ($cmp10) { label = 7; break; } else { label = 76; break; }
    case 7: 
      var $26=$prevsize;
      var $shr=$26 >>> 3;
      var $cmp13=(($shr)>>>(0)) < 32;
      if ($cmp13) { label = 8; break; } else { label = 26; break; }
    case 8: 
      var $27=$p_addr;
      var $fd=(($27+8)|0);
      var $28=HEAP32[(($fd)>>2)];
      $F=$28;
      var $29=$p_addr;
      var $bk=(($29+12)|0);
      var $30=HEAP32[(($bk)>>2)];
      $B=$30;
      var $31=$prevsize;
      var $shr16=$31 >>> 3;
      $I=$shr16;
      var $32=$F;
      var $33=$I;
      var $shl=$33 << 1;
      var $34=$m_addr;
      var $smallbins=(($34+40)|0);
      var $arrayidx=(($smallbins+($shl<<2))|0);
      var $35=$arrayidx;
      var $36=$35;
      var $cmp17=(($32)|(0))==(($36)|(0));
      if ($cmp17) { var $45 = 1;label = 12; break; } else { label = 9; break; }
    case 9: 
      var $37=$F;
      var $38=$37;
      var $39=$m_addr;
      var $least_addr19=(($39+16)|0);
      var $40=HEAP32[(($least_addr19)>>2)];
      var $cmp20=(($38)>>>(0)) >= (($40)>>>(0));
      if ($cmp20) { label = 10; break; } else { var $44 = 0;label = 11; break; }
    case 10: 
      var $41=$F;
      var $bk22=(($41+12)|0);
      var $42=HEAP32[(($bk22)>>2)];
      var $43=$p_addr;
      var $cmp23=(($42)|(0))==(($43)|(0));
      var $44 = $cmp23;label = 11; break;
    case 11: 
      var $44;
      var $45 = $44;label = 12; break;
    case 12: 
      var $45;
      var $lor_ext=(($45)&(1));
      var $expval25=($lor_ext);
      var $tobool26=(($expval25)|(0))!=0;
      if ($tobool26) { label = 13; break; } else { label = 24; break; }
    case 13: 
      var $46=$B;
      var $47=$F;
      var $cmp28=(($46)|(0))==(($47)|(0));
      if ($cmp28) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $48=$I;
      var $shl31=1 << $48;
      var $neg=$shl31 ^ -1;
      var $49=$m_addr;
      var $smallmap=(($49)|0);
      var $50=HEAP32[(($smallmap)>>2)];
      var $and32=$50 & $neg;
      HEAP32[(($smallmap)>>2)]=$and32;
      label = 23; break;
    case 15: 
      var $51=$B;
      var $52=$I;
      var $shl33=$52 << 1;
      var $53=$m_addr;
      var $smallbins34=(($53+40)|0);
      var $arrayidx35=(($smallbins34+($shl33<<2))|0);
      var $54=$arrayidx35;
      var $55=$54;
      var $cmp36=(($51)|(0))==(($55)|(0));
      if ($cmp36) { var $64 = 1;label = 19; break; } else { label = 16; break; }
    case 16: 
      var $56=$B;
      var $57=$56;
      var $58=$m_addr;
      var $least_addr39=(($58+16)|0);
      var $59=HEAP32[(($least_addr39)>>2)];
      var $cmp40=(($57)>>>(0)) >= (($59)>>>(0));
      if ($cmp40) { label = 17; break; } else { var $63 = 0;label = 18; break; }
    case 17: 
      var $60=$B;
      var $fd43=(($60+8)|0);
      var $61=HEAP32[(($fd43)>>2)];
      var $62=$p_addr;
      var $cmp44=(($61)|(0))==(($62)|(0));
      var $63 = $cmp44;label = 18; break;
    case 18: 
      var $63;
      var $64 = $63;label = 19; break;
    case 19: 
      var $64;
      var $lor_ext48=(($64)&(1));
      var $expval49=($lor_ext48);
      var $tobool50=(($expval49)|(0))!=0;
      if ($tobool50) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $65=$B;
      var $66=$F;
      var $bk52=(($66+12)|0);
      HEAP32[(($bk52)>>2)]=$65;
      var $67=$F;
      var $68=$B;
      var $fd53=(($68+8)|0);
      HEAP32[(($fd53)>>2)]=$67;
      label = 22; break;
    case 21: 
      _abort();
      throw "Reached an unreachable!";
    case 22: 
      label = 23; break;
    case 23: 
      label = 25; break;
    case 24: 
      _abort();
      throw "Reached an unreachable!";
    case 25: 
      label = 75; break;
    case 26: 
      var $69=$p_addr;
      var $70=$69;
      $TP=$70;
      var $71=$TP;
      var $parent=(($71+24)|0);
      var $72=HEAP32[(($parent)>>2)];
      $XP=$72;
      var $73=$TP;
      var $bk60=(($73+12)|0);
      var $74=HEAP32[(($bk60)>>2)];
      var $75=$TP;
      var $cmp61=(($74)|(0))!=(($75)|(0));
      if ($cmp61) { label = 27; break; } else { label = 34; break; }
    case 27: 
      var $76=$TP;
      var $fd65=(($76+8)|0);
      var $77=HEAP32[(($fd65)>>2)];
      $F64=$77;
      var $78=$TP;
      var $bk66=(($78+12)|0);
      var $79=HEAP32[(($bk66)>>2)];
      $R=$79;
      var $80=$F64;
      var $81=$80;
      var $82=$m_addr;
      var $least_addr67=(($82+16)|0);
      var $83=HEAP32[(($least_addr67)>>2)];
      var $cmp68=(($81)>>>(0)) >= (($83)>>>(0));
      if ($cmp68) { label = 28; break; } else { var $90 = 0;label = 30; break; }
    case 28: 
      var $84=$F64;
      var $bk70=(($84+12)|0);
      var $85=HEAP32[(($bk70)>>2)];
      var $86=$TP;
      var $cmp71=(($85)|(0))==(($86)|(0));
      if ($cmp71) { label = 29; break; } else { var $90 = 0;label = 30; break; }
    case 29: 
      var $87=$R;
      var $fd74=(($87+8)|0);
      var $88=HEAP32[(($fd74)>>2)];
      var $89=$TP;
      var $cmp75=(($88)|(0))==(($89)|(0));
      var $90 = $cmp75;label = 30; break;
    case 30: 
      var $90;
      var $land_ext=(($90)&(1));
      var $expval78=($land_ext);
      var $tobool79=(($expval78)|(0))!=0;
      if ($tobool79) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $91=$R;
      var $92=$F64;
      var $bk81=(($92+12)|0);
      HEAP32[(($bk81)>>2)]=$91;
      var $93=$F64;
      var $94=$R;
      var $fd82=(($94+8)|0);
      HEAP32[(($fd82)>>2)]=$93;
      label = 33; break;
    case 32: 
      _abort();
      throw "Reached an unreachable!";
    case 33: 
      label = 46; break;
    case 34: 
      var $95=$TP;
      var $child=(($95+16)|0);
      var $arrayidx86=(($child+4)|0);
      $RP=$arrayidx86;
      var $96=HEAP32[(($arrayidx86)>>2)];
      $R=$96;
      var $cmp87=(($96)|(0))!=0;
      if ($cmp87) { label = 36; break; } else { label = 35; break; }
    case 35: 
      var $97=$TP;
      var $child89=(($97+16)|0);
      var $arrayidx90=(($child89)|0);
      $RP=$arrayidx90;
      var $98=HEAP32[(($arrayidx90)>>2)];
      $R=$98;
      var $cmp91=(($98)|(0))!=0;
      if ($cmp91) { label = 36; break; } else { label = 45; break; }
    case 36: 
      label = 37; break;
    case 37: 
      var $99=$R;
      var $child94=(($99+16)|0);
      var $arrayidx95=(($child94+4)|0);
      $CP=$arrayidx95;
      var $100=HEAP32[(($arrayidx95)>>2)];
      var $cmp96=(($100)|(0))!=0;
      if ($cmp96) { var $103 = 1;label = 39; break; } else { label = 38; break; }
    case 38: 
      var $101=$R;
      var $child99=(($101+16)|0);
      var $arrayidx100=(($child99)|0);
      $CP=$arrayidx100;
      var $102=HEAP32[(($arrayidx100)>>2)];
      var $cmp101=(($102)|(0))!=0;
      var $103 = $cmp101;label = 39; break;
    case 39: 
      var $103;
      if ($103) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $104=$CP;
      $RP=$104;
      var $105=HEAP32[(($104)>>2)];
      $R=$105;
      label = 37; break;
    case 41: 
      var $106=$RP;
      var $107=$106;
      var $108=$m_addr;
      var $least_addr105=(($108+16)|0);
      var $109=HEAP32[(($least_addr105)>>2)];
      var $cmp106=(($107)>>>(0)) >= (($109)>>>(0));
      var $conv107=(($cmp106)&(1));
      var $expval108=($conv107);
      var $tobool109=(($expval108)|(0))!=0;
      if ($tobool109) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $110=$RP;
      HEAP32[(($110)>>2)]=0;
      label = 44; break;
    case 43: 
      _abort();
      throw "Reached an unreachable!";
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $111=$XP;
      var $cmp115=(($111)|(0))!=0;
      if ($cmp115) { label = 47; break; } else { label = 74; break; }
    case 47: 
      var $112=$TP;
      var $index=(($112+28)|0);
      var $113=HEAP32[(($index)>>2)];
      var $114=$m_addr;
      var $treebins=(($114+304)|0);
      var $arrayidx118=(($treebins+($113<<2))|0);
      $H=$arrayidx118;
      var $115=$TP;
      var $116=$H;
      var $117=HEAP32[(($116)>>2)];
      var $cmp119=(($115)|(0))==(($117)|(0));
      if ($cmp119) { label = 48; break; } else { label = 51; break; }
    case 48: 
      var $118=$R;
      var $119=$H;
      HEAP32[(($119)>>2)]=$118;
      var $cmp122=(($118)|(0))==0;
      if ($cmp122) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $120=$TP;
      var $index125=(($120+28)|0);
      var $121=HEAP32[(($index125)>>2)];
      var $shl126=1 << $121;
      var $neg127=$shl126 ^ -1;
      var $122=$m_addr;
      var $treemap=(($122+4)|0);
      var $123=HEAP32[(($treemap)>>2)];
      var $and128=$123 & $neg127;
      HEAP32[(($treemap)>>2)]=$and128;
      label = 50; break;
    case 50: 
      label = 58; break;
    case 51: 
      var $124=$XP;
      var $125=$124;
      var $126=$m_addr;
      var $least_addr131=(($126+16)|0);
      var $127=HEAP32[(($least_addr131)>>2)];
      var $cmp132=(($125)>>>(0)) >= (($127)>>>(0));
      var $conv133=(($cmp132)&(1));
      var $expval134=($conv133);
      var $tobool135=(($expval134)|(0))!=0;
      if ($tobool135) { label = 52; break; } else { label = 56; break; }
    case 52: 
      var $128=$XP;
      var $child137=(($128+16)|0);
      var $arrayidx138=(($child137)|0);
      var $129=HEAP32[(($arrayidx138)>>2)];
      var $130=$TP;
      var $cmp139=(($129)|(0))==(($130)|(0));
      if ($cmp139) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $131=$R;
      var $132=$XP;
      var $child142=(($132+16)|0);
      var $arrayidx143=(($child142)|0);
      HEAP32[(($arrayidx143)>>2)]=$131;
      label = 55; break;
    case 54: 
      var $133=$R;
      var $134=$XP;
      var $child145=(($134+16)|0);
      var $arrayidx146=(($child145+4)|0);
      HEAP32[(($arrayidx146)>>2)]=$133;
      label = 55; break;
    case 55: 
      label = 57; break;
    case 56: 
      _abort();
      throw "Reached an unreachable!";
    case 57: 
      label = 58; break;
    case 58: 
      var $135=$R;
      var $cmp151=(($135)|(0))!=0;
      if ($cmp151) { label = 59; break; } else { label = 73; break; }
    case 59: 
      var $136=$R;
      var $137=$136;
      var $138=$m_addr;
      var $least_addr154=(($138+16)|0);
      var $139=HEAP32[(($least_addr154)>>2)];
      var $cmp155=(($137)>>>(0)) >= (($139)>>>(0));
      var $conv156=(($cmp155)&(1));
      var $expval157=($conv156);
      var $tobool158=(($expval157)|(0))!=0;
      if ($tobool158) { label = 60; break; } else { label = 71; break; }
    case 60: 
      var $140=$XP;
      var $141=$R;
      var $parent160=(($141+24)|0);
      HEAP32[(($parent160)>>2)]=$140;
      var $142=$TP;
      var $child161=(($142+16)|0);
      var $arrayidx162=(($child161)|0);
      var $143=HEAP32[(($arrayidx162)>>2)];
      $C0=$143;
      var $cmp163=(($143)|(0))!=0;
      if ($cmp163) { label = 61; break; } else { label = 65; break; }
    case 61: 
      var $144=$C0;
      var $145=$144;
      var $146=$m_addr;
      var $least_addr166=(($146+16)|0);
      var $147=HEAP32[(($least_addr166)>>2)];
      var $cmp167=(($145)>>>(0)) >= (($147)>>>(0));
      var $conv168=(($cmp167)&(1));
      var $expval169=($conv168);
      var $tobool170=(($expval169)|(0))!=0;
      if ($tobool170) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $148=$C0;
      var $149=$R;
      var $child172=(($149+16)|0);
      var $arrayidx173=(($child172)|0);
      HEAP32[(($arrayidx173)>>2)]=$148;
      var $150=$R;
      var $151=$C0;
      var $parent174=(($151+24)|0);
      HEAP32[(($parent174)>>2)]=$150;
      label = 64; break;
    case 63: 
      _abort();
      throw "Reached an unreachable!";
    case 64: 
      label = 65; break;
    case 65: 
      var $152=$TP;
      var $child178=(($152+16)|0);
      var $arrayidx179=(($child178+4)|0);
      var $153=HEAP32[(($arrayidx179)>>2)];
      $C1=$153;
      var $cmp180=(($153)|(0))!=0;
      if ($cmp180) { label = 66; break; } else { label = 70; break; }
    case 66: 
      var $154=$C1;
      var $155=$154;
      var $156=$m_addr;
      var $least_addr183=(($156+16)|0);
      var $157=HEAP32[(($least_addr183)>>2)];
      var $cmp184=(($155)>>>(0)) >= (($157)>>>(0));
      var $conv185=(($cmp184)&(1));
      var $expval186=($conv185);
      var $tobool187=(($expval186)|(0))!=0;
      if ($tobool187) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $158=$C1;
      var $159=$R;
      var $child189=(($159+16)|0);
      var $arrayidx190=(($child189+4)|0);
      HEAP32[(($arrayidx190)>>2)]=$158;
      var $160=$R;
      var $161=$C1;
      var $parent191=(($161+24)|0);
      HEAP32[(($parent191)>>2)]=$160;
      label = 69; break;
    case 68: 
      _abort();
      throw "Reached an unreachable!";
    case 69: 
      label = 70; break;
    case 70: 
      label = 72; break;
    case 71: 
      _abort();
      throw "Reached an unreachable!";
    case 72: 
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 79; break;
    case 76: 
      var $162=$next;
      var $head201=(($162+4)|0);
      var $163=HEAP32[(($head201)>>2)];
      var $and202=$163 & 3;
      var $cmp203=(($and202)|(0))==3;
      if ($cmp203) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $164=$psize_addr;
      var $165=$m_addr;
      var $dvsize=(($165+8)|0);
      HEAP32[(($dvsize)>>2)]=$164;
      var $166=$next;
      var $head206=(($166+4)|0);
      var $167=HEAP32[(($head206)>>2)];
      var $and207=$167 & -2;
      HEAP32[(($head206)>>2)]=$and207;
      var $168=$psize_addr;
      var $or=$168 | 1;
      var $169=$p_addr;
      var $head208=(($169+4)|0);
      HEAP32[(($head208)>>2)]=$or;
      var $170=$psize_addr;
      var $171=$p_addr;
      var $172=$171;
      var $173=$psize_addr;
      var $add_ptr209=(($172+$173)|0);
      var $174=$add_ptr209;
      var $prev_foot210=(($174)|0);
      HEAP32[(($prev_foot210)>>2)]=$170;
      label = 201; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 81; break;
    case 80: 
      _abort();
      throw "Reached an unreachable!";
    case 81: 
      label = 82; break;
    case 82: 
      var $175=$next;
      var $176=$175;
      var $177=$m_addr;
      var $least_addr216=(($177+16)|0);
      var $178=HEAP32[(($least_addr216)>>2)];
      var $cmp217=(($176)>>>(0)) >= (($178)>>>(0));
      var $conv218=(($cmp217)&(1));
      var $expval219=($conv218);
      var $tobool220=(($expval219)|(0))!=0;
      if ($tobool220) { label = 83; break; } else { label = 200; break; }
    case 83: 
      var $179=$next;
      var $head222=(($179+4)|0);
      var $180=HEAP32[(($head222)>>2)];
      var $and223=$180 & 2;
      var $tobool224=(($and223)|(0))!=0;
      if ($tobool224) { label = 163; break; } else { label = 84; break; }
    case 84: 
      var $181=$next;
      var $182=$m_addr;
      var $top=(($182+24)|0);
      var $183=HEAP32[(($top)>>2)];
      var $cmp226=(($181)|(0))==(($183)|(0));
      if ($cmp226) { label = 85; break; } else { label = 88; break; }
    case 85: 
      var $184=$psize_addr;
      var $185=$m_addr;
      var $topsize=(($185+12)|0);
      var $186=HEAP32[(($topsize)>>2)];
      var $add229=((($186)+($184))|0);
      HEAP32[(($topsize)>>2)]=$add229;
      $tsize=$add229;
      var $187=$p_addr;
      var $188=$m_addr;
      var $top230=(($188+24)|0);
      HEAP32[(($top230)>>2)]=$187;
      var $189=$tsize;
      var $or231=$189 | 1;
      var $190=$p_addr;
      var $head232=(($190+4)|0);
      HEAP32[(($head232)>>2)]=$or231;
      var $191=$p_addr;
      var $192=$m_addr;
      var $dv233=(($192+20)|0);
      var $193=HEAP32[(($dv233)>>2)];
      var $cmp234=(($191)|(0))==(($193)|(0));
      if ($cmp234) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $194=$m_addr;
      var $dv237=(($194+20)|0);
      HEAP32[(($dv237)>>2)]=0;
      var $195=$m_addr;
      var $dvsize238=(($195+8)|0);
      HEAP32[(($dvsize238)>>2)]=0;
      label = 87; break;
    case 87: 
      label = 201; break;
    case 88: 
      var $196=$next;
      var $197=$m_addr;
      var $dv241=(($197+20)|0);
      var $198=HEAP32[(($dv241)>>2)];
      var $cmp242=(($196)|(0))==(($198)|(0));
      if ($cmp242) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $199=$psize_addr;
      var $200=$m_addr;
      var $dvsize245=(($200+8)|0);
      var $201=HEAP32[(($dvsize245)>>2)];
      var $add246=((($201)+($199))|0);
      HEAP32[(($dvsize245)>>2)]=$add246;
      $dsize=$add246;
      var $202=$p_addr;
      var $203=$m_addr;
      var $dv247=(($203+20)|0);
      HEAP32[(($dv247)>>2)]=$202;
      var $204=$dsize;
      var $or248=$204 | 1;
      var $205=$p_addr;
      var $head249=(($205+4)|0);
      HEAP32[(($head249)>>2)]=$or248;
      var $206=$dsize;
      var $207=$p_addr;
      var $208=$207;
      var $209=$dsize;
      var $add_ptr250=(($208+$209)|0);
      var $210=$add_ptr250;
      var $prev_foot251=(($210)|0);
      HEAP32[(($prev_foot251)>>2)]=$206;
      label = 201; break;
    case 90: 
      var $211=$next;
      var $head253=(($211+4)|0);
      var $212=HEAP32[(($head253)>>2)];
      var $and254=$212 & -8;
      $nsize=$and254;
      var $213=$nsize;
      var $214=$psize_addr;
      var $add255=((($214)+($213))|0);
      $psize_addr=$add255;
      var $215=$nsize;
      var $shr256=$215 >>> 3;
      var $cmp257=(($shr256)>>>(0)) < 32;
      if ($cmp257) { label = 91; break; } else { label = 109; break; }
    case 91: 
      var $216=$next;
      var $fd261=(($216+8)|0);
      var $217=HEAP32[(($fd261)>>2)];
      $F260=$217;
      var $218=$next;
      var $bk263=(($218+12)|0);
      var $219=HEAP32[(($bk263)>>2)];
      $B262=$219;
      var $220=$nsize;
      var $shr265=$220 >>> 3;
      $I264=$shr265;
      var $221=$F260;
      var $222=$I264;
      var $shl266=$222 << 1;
      var $223=$m_addr;
      var $smallbins267=(($223+40)|0);
      var $arrayidx268=(($smallbins267+($shl266<<2))|0);
      var $224=$arrayidx268;
      var $225=$224;
      var $cmp269=(($221)|(0))==(($225)|(0));
      if ($cmp269) { var $234 = 1;label = 95; break; } else { label = 92; break; }
    case 92: 
      var $226=$F260;
      var $227=$226;
      var $228=$m_addr;
      var $least_addr272=(($228+16)|0);
      var $229=HEAP32[(($least_addr272)>>2)];
      var $cmp273=(($227)>>>(0)) >= (($229)>>>(0));
      if ($cmp273) { label = 93; break; } else { var $233 = 0;label = 94; break; }
    case 93: 
      var $230=$F260;
      var $bk276=(($230+12)|0);
      var $231=HEAP32[(($bk276)>>2)];
      var $232=$next;
      var $cmp277=(($231)|(0))==(($232)|(0));
      var $233 = $cmp277;label = 94; break;
    case 94: 
      var $233;
      var $234 = $233;label = 95; break;
    case 95: 
      var $234;
      var $lor_ext282=(($234)&(1));
      var $expval283=($lor_ext282);
      var $tobool284=(($expval283)|(0))!=0;
      if ($tobool284) { label = 96; break; } else { label = 107; break; }
    case 96: 
      var $235=$B262;
      var $236=$F260;
      var $cmp286=(($235)|(0))==(($236)|(0));
      if ($cmp286) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $237=$I264;
      var $shl289=1 << $237;
      var $neg290=$shl289 ^ -1;
      var $238=$m_addr;
      var $smallmap291=(($238)|0);
      var $239=HEAP32[(($smallmap291)>>2)];
      var $and292=$239 & $neg290;
      HEAP32[(($smallmap291)>>2)]=$and292;
      label = 106; break;
    case 98: 
      var $240=$B262;
      var $241=$I264;
      var $shl294=$241 << 1;
      var $242=$m_addr;
      var $smallbins295=(($242+40)|0);
      var $arrayidx296=(($smallbins295+($shl294<<2))|0);
      var $243=$arrayidx296;
      var $244=$243;
      var $cmp297=(($240)|(0))==(($244)|(0));
      if ($cmp297) { var $253 = 1;label = 102; break; } else { label = 99; break; }
    case 99: 
      var $245=$B262;
      var $246=$245;
      var $247=$m_addr;
      var $least_addr300=(($247+16)|0);
      var $248=HEAP32[(($least_addr300)>>2)];
      var $cmp301=(($246)>>>(0)) >= (($248)>>>(0));
      if ($cmp301) { label = 100; break; } else { var $252 = 0;label = 101; break; }
    case 100: 
      var $249=$B262;
      var $fd304=(($249+8)|0);
      var $250=HEAP32[(($fd304)>>2)];
      var $251=$next;
      var $cmp305=(($250)|(0))==(($251)|(0));
      var $252 = $cmp305;label = 101; break;
    case 101: 
      var $252;
      var $253 = $252;label = 102; break;
    case 102: 
      var $253;
      var $lor_ext310=(($253)&(1));
      var $expval311=($lor_ext310);
      var $tobool312=(($expval311)|(0))!=0;
      if ($tobool312) { label = 103; break; } else { label = 104; break; }
    case 103: 
      var $254=$B262;
      var $255=$F260;
      var $bk314=(($255+12)|0);
      HEAP32[(($bk314)>>2)]=$254;
      var $256=$F260;
      var $257=$B262;
      var $fd315=(($257+8)|0);
      HEAP32[(($fd315)>>2)]=$256;
      label = 105; break;
    case 104: 
      _abort();
      throw "Reached an unreachable!";
    case 105: 
      label = 106; break;
    case 106: 
      label = 108; break;
    case 107: 
      _abort();
      throw "Reached an unreachable!";
    case 108: 
      label = 158; break;
    case 109: 
      var $258=$next;
      var $259=$258;
      $TP322=$259;
      var $260=$TP322;
      var $parent324=(($260+24)|0);
      var $261=HEAP32[(($parent324)>>2)];
      $XP323=$261;
      var $262=$TP322;
      var $bk326=(($262+12)|0);
      var $263=HEAP32[(($bk326)>>2)];
      var $264=$TP322;
      var $cmp327=(($263)|(0))!=(($264)|(0));
      if ($cmp327) { label = 110; break; } else { label = 117; break; }
    case 110: 
      var $265=$TP322;
      var $fd331=(($265+8)|0);
      var $266=HEAP32[(($fd331)>>2)];
      $F330=$266;
      var $267=$TP322;
      var $bk332=(($267+12)|0);
      var $268=HEAP32[(($bk332)>>2)];
      $R325=$268;
      var $269=$F330;
      var $270=$269;
      var $271=$m_addr;
      var $least_addr333=(($271+16)|0);
      var $272=HEAP32[(($least_addr333)>>2)];
      var $cmp334=(($270)>>>(0)) >= (($272)>>>(0));
      if ($cmp334) { label = 111; break; } else { var $279 = 0;label = 113; break; }
    case 111: 
      var $273=$F330;
      var $bk337=(($273+12)|0);
      var $274=HEAP32[(($bk337)>>2)];
      var $275=$TP322;
      var $cmp338=(($274)|(0))==(($275)|(0));
      if ($cmp338) { label = 112; break; } else { var $279 = 0;label = 113; break; }
    case 112: 
      var $276=$R325;
      var $fd341=(($276+8)|0);
      var $277=HEAP32[(($fd341)>>2)];
      var $278=$TP322;
      var $cmp342=(($277)|(0))==(($278)|(0));
      var $279 = $cmp342;label = 113; break;
    case 113: 
      var $279;
      var $land_ext345=(($279)&(1));
      var $expval346=($land_ext345);
      var $tobool347=(($expval346)|(0))!=0;
      if ($tobool347) { label = 114; break; } else { label = 115; break; }
    case 114: 
      var $280=$R325;
      var $281=$F330;
      var $bk349=(($281+12)|0);
      HEAP32[(($bk349)>>2)]=$280;
      var $282=$F330;
      var $283=$R325;
      var $fd350=(($283+8)|0);
      HEAP32[(($fd350)>>2)]=$282;
      label = 116; break;
    case 115: 
      _abort();
      throw "Reached an unreachable!";
    case 116: 
      label = 129; break;
    case 117: 
      var $284=$TP322;
      var $child355=(($284+16)|0);
      var $arrayidx356=(($child355+4)|0);
      $RP354=$arrayidx356;
      var $285=HEAP32[(($arrayidx356)>>2)];
      $R325=$285;
      var $cmp357=(($285)|(0))!=0;
      if ($cmp357) { label = 119; break; } else { label = 118; break; }
    case 118: 
      var $286=$TP322;
      var $child360=(($286+16)|0);
      var $arrayidx361=(($child360)|0);
      $RP354=$arrayidx361;
      var $287=HEAP32[(($arrayidx361)>>2)];
      $R325=$287;
      var $cmp362=(($287)|(0))!=0;
      if ($cmp362) { label = 119; break; } else { label = 128; break; }
    case 119: 
      label = 120; break;
    case 120: 
      var $288=$R325;
      var $child367=(($288+16)|0);
      var $arrayidx368=(($child367+4)|0);
      $CP365=$arrayidx368;
      var $289=HEAP32[(($arrayidx368)>>2)];
      var $cmp369=(($289)|(0))!=0;
      if ($cmp369) { var $292 = 1;label = 122; break; } else { label = 121; break; }
    case 121: 
      var $290=$R325;
      var $child372=(($290+16)|0);
      var $arrayidx373=(($child372)|0);
      $CP365=$arrayidx373;
      var $291=HEAP32[(($arrayidx373)>>2)];
      var $cmp374=(($291)|(0))!=0;
      var $292 = $cmp374;label = 122; break;
    case 122: 
      var $292;
      if ($292) { label = 123; break; } else { label = 124; break; }
    case 123: 
      var $293=$CP365;
      $RP354=$293;
      var $294=HEAP32[(($293)>>2)];
      $R325=$294;
      label = 120; break;
    case 124: 
      var $295=$RP354;
      var $296=$295;
      var $297=$m_addr;
      var $least_addr380=(($297+16)|0);
      var $298=HEAP32[(($least_addr380)>>2)];
      var $cmp381=(($296)>>>(0)) >= (($298)>>>(0));
      var $conv382=(($cmp381)&(1));
      var $expval383=($conv382);
      var $tobool384=(($expval383)|(0))!=0;
      if ($tobool384) { label = 125; break; } else { label = 126; break; }
    case 125: 
      var $299=$RP354;
      HEAP32[(($299)>>2)]=0;
      label = 127; break;
    case 126: 
      _abort();
      throw "Reached an unreachable!";
    case 127: 
      label = 128; break;
    case 128: 
      label = 129; break;
    case 129: 
      var $300=$XP323;
      var $cmp390=(($300)|(0))!=0;
      if ($cmp390) { label = 130; break; } else { label = 157; break; }
    case 130: 
      var $301=$TP322;
      var $index394=(($301+28)|0);
      var $302=HEAP32[(($index394)>>2)];
      var $303=$m_addr;
      var $treebins395=(($303+304)|0);
      var $arrayidx396=(($treebins395+($302<<2))|0);
      $H393=$arrayidx396;
      var $304=$TP322;
      var $305=$H393;
      var $306=HEAP32[(($305)>>2)];
      var $cmp397=(($304)|(0))==(($306)|(0));
      if ($cmp397) { label = 131; break; } else { label = 134; break; }
    case 131: 
      var $307=$R325;
      var $308=$H393;
      HEAP32[(($308)>>2)]=$307;
      var $cmp400=(($307)|(0))==0;
      if ($cmp400) { label = 132; break; } else { label = 133; break; }
    case 132: 
      var $309=$TP322;
      var $index403=(($309+28)|0);
      var $310=HEAP32[(($index403)>>2)];
      var $shl404=1 << $310;
      var $neg405=$shl404 ^ -1;
      var $311=$m_addr;
      var $treemap406=(($311+4)|0);
      var $312=HEAP32[(($treemap406)>>2)];
      var $and407=$312 & $neg405;
      HEAP32[(($treemap406)>>2)]=$and407;
      label = 133; break;
    case 133: 
      label = 141; break;
    case 134: 
      var $313=$XP323;
      var $314=$313;
      var $315=$m_addr;
      var $least_addr410=(($315+16)|0);
      var $316=HEAP32[(($least_addr410)>>2)];
      var $cmp411=(($314)>>>(0)) >= (($316)>>>(0));
      var $conv412=(($cmp411)&(1));
      var $expval413=($conv412);
      var $tobool414=(($expval413)|(0))!=0;
      if ($tobool414) { label = 135; break; } else { label = 139; break; }
    case 135: 
      var $317=$XP323;
      var $child416=(($317+16)|0);
      var $arrayidx417=(($child416)|0);
      var $318=HEAP32[(($arrayidx417)>>2)];
      var $319=$TP322;
      var $cmp418=(($318)|(0))==(($319)|(0));
      if ($cmp418) { label = 136; break; } else { label = 137; break; }
    case 136: 
      var $320=$R325;
      var $321=$XP323;
      var $child421=(($321+16)|0);
      var $arrayidx422=(($child421)|0);
      HEAP32[(($arrayidx422)>>2)]=$320;
      label = 138; break;
    case 137: 
      var $322=$R325;
      var $323=$XP323;
      var $child424=(($323+16)|0);
      var $arrayidx425=(($child424+4)|0);
      HEAP32[(($arrayidx425)>>2)]=$322;
      label = 138; break;
    case 138: 
      label = 140; break;
    case 139: 
      _abort();
      throw "Reached an unreachable!";
    case 140: 
      label = 141; break;
    case 141: 
      var $324=$R325;
      var $cmp430=(($324)|(0))!=0;
      if ($cmp430) { label = 142; break; } else { label = 156; break; }
    case 142: 
      var $325=$R325;
      var $326=$325;
      var $327=$m_addr;
      var $least_addr433=(($327+16)|0);
      var $328=HEAP32[(($least_addr433)>>2)];
      var $cmp434=(($326)>>>(0)) >= (($328)>>>(0));
      var $conv435=(($cmp434)&(1));
      var $expval436=($conv435);
      var $tobool437=(($expval436)|(0))!=0;
      if ($tobool437) { label = 143; break; } else { label = 154; break; }
    case 143: 
      var $329=$XP323;
      var $330=$R325;
      var $parent441=(($330+24)|0);
      HEAP32[(($parent441)>>2)]=$329;
      var $331=$TP322;
      var $child442=(($331+16)|0);
      var $arrayidx443=(($child442)|0);
      var $332=HEAP32[(($arrayidx443)>>2)];
      $C0439=$332;
      var $cmp444=(($332)|(0))!=0;
      if ($cmp444) { label = 144; break; } else { label = 148; break; }
    case 144: 
      var $333=$C0439;
      var $334=$333;
      var $335=$m_addr;
      var $least_addr447=(($335+16)|0);
      var $336=HEAP32[(($least_addr447)>>2)];
      var $cmp448=(($334)>>>(0)) >= (($336)>>>(0));
      var $conv449=(($cmp448)&(1));
      var $expval450=($conv449);
      var $tobool451=(($expval450)|(0))!=0;
      if ($tobool451) { label = 145; break; } else { label = 146; break; }
    case 145: 
      var $337=$C0439;
      var $338=$R325;
      var $child453=(($338+16)|0);
      var $arrayidx454=(($child453)|0);
      HEAP32[(($arrayidx454)>>2)]=$337;
      var $339=$R325;
      var $340=$C0439;
      var $parent455=(($340+24)|0);
      HEAP32[(($parent455)>>2)]=$339;
      label = 147; break;
    case 146: 
      _abort();
      throw "Reached an unreachable!";
    case 147: 
      label = 148; break;
    case 148: 
      var $341=$TP322;
      var $child459=(($341+16)|0);
      var $arrayidx460=(($child459+4)|0);
      var $342=HEAP32[(($arrayidx460)>>2)];
      $C1440=$342;
      var $cmp461=(($342)|(0))!=0;
      if ($cmp461) { label = 149; break; } else { label = 153; break; }
    case 149: 
      var $343=$C1440;
      var $344=$343;
      var $345=$m_addr;
      var $least_addr464=(($345+16)|0);
      var $346=HEAP32[(($least_addr464)>>2)];
      var $cmp465=(($344)>>>(0)) >= (($346)>>>(0));
      var $conv466=(($cmp465)&(1));
      var $expval467=($conv466);
      var $tobool468=(($expval467)|(0))!=0;
      if ($tobool468) { label = 150; break; } else { label = 151; break; }
    case 150: 
      var $347=$C1440;
      var $348=$R325;
      var $child470=(($348+16)|0);
      var $arrayidx471=(($child470+4)|0);
      HEAP32[(($arrayidx471)>>2)]=$347;
      var $349=$R325;
      var $350=$C1440;
      var $parent472=(($350+24)|0);
      HEAP32[(($parent472)>>2)]=$349;
      label = 152; break;
    case 151: 
      _abort();
      throw "Reached an unreachable!";
    case 152: 
      label = 153; break;
    case 153: 
      label = 155; break;
    case 154: 
      _abort();
      throw "Reached an unreachable!";
    case 155: 
      label = 156; break;
    case 156: 
      label = 157; break;
    case 157: 
      label = 158; break;
    case 158: 
      var $351=$psize_addr;
      var $or481=$351 | 1;
      var $352=$p_addr;
      var $head482=(($352+4)|0);
      HEAP32[(($head482)>>2)]=$or481;
      var $353=$psize_addr;
      var $354=$p_addr;
      var $355=$354;
      var $356=$psize_addr;
      var $add_ptr483=(($355+$356)|0);
      var $357=$add_ptr483;
      var $prev_foot484=(($357)|0);
      HEAP32[(($prev_foot484)>>2)]=$353;
      var $358=$p_addr;
      var $359=$m_addr;
      var $dv485=(($359+20)|0);
      var $360=HEAP32[(($dv485)>>2)];
      var $cmp486=(($358)|(0))==(($360)|(0));
      if ($cmp486) { label = 159; break; } else { label = 160; break; }
    case 159: 
      var $361=$psize_addr;
      var $362=$m_addr;
      var $dvsize489=(($362+8)|0);
      HEAP32[(($dvsize489)>>2)]=$361;
      label = 201; break;
    case 160: 
      label = 161; break;
    case 161: 
      label = 162; break;
    case 162: 
      label = 164; break;
    case 163: 
      var $363=$next;
      var $head494=(($363+4)|0);
      var $364=HEAP32[(($head494)>>2)];
      var $and495=$364 & -2;
      HEAP32[(($head494)>>2)]=$and495;
      var $365=$psize_addr;
      var $or496=$365 | 1;
      var $366=$p_addr;
      var $head497=(($366+4)|0);
      HEAP32[(($head497)>>2)]=$or496;
      var $367=$psize_addr;
      var $368=$p_addr;
      var $369=$368;
      var $370=$psize_addr;
      var $add_ptr498=(($369+$370)|0);
      var $371=$add_ptr498;
      var $prev_foot499=(($371)|0);
      HEAP32[(($prev_foot499)>>2)]=$367;
      label = 164; break;
    case 164: 
      var $372=$psize_addr;
      var $shr501=$372 >>> 3;
      var $cmp502=(($shr501)>>>(0)) < 32;
      if ($cmp502) { label = 165; break; } else { label = 172; break; }
    case 165: 
      var $373=$psize_addr;
      var $shr506=$373 >>> 3;
      $I505=$shr506;
      var $374=$I505;
      var $shl508=$374 << 1;
      var $375=$m_addr;
      var $smallbins509=(($375+40)|0);
      var $arrayidx510=(($smallbins509+($shl508<<2))|0);
      var $376=$arrayidx510;
      var $377=$376;
      $B507=$377;
      var $378=$B507;
      $F511=$378;
      var $379=$m_addr;
      var $smallmap512=(($379)|0);
      var $380=HEAP32[(($smallmap512)>>2)];
      var $381=$I505;
      var $shl513=1 << $381;
      var $and514=$380 & $shl513;
      var $tobool515=(($and514)|(0))!=0;
      if ($tobool515) { label = 167; break; } else { label = 166; break; }
    case 166: 
      var $382=$I505;
      var $shl517=1 << $382;
      var $383=$m_addr;
      var $smallmap518=(($383)|0);
      var $384=HEAP32[(($smallmap518)>>2)];
      var $or519=$384 | $shl517;
      HEAP32[(($smallmap518)>>2)]=$or519;
      label = 171; break;
    case 167: 
      var $385=$B507;
      var $fd521=(($385+8)|0);
      var $386=HEAP32[(($fd521)>>2)];
      var $387=$386;
      var $388=$m_addr;
      var $least_addr522=(($388+16)|0);
      var $389=HEAP32[(($least_addr522)>>2)];
      var $cmp523=(($387)>>>(0)) >= (($389)>>>(0));
      var $conv524=(($cmp523)&(1));
      var $expval525=($conv524);
      var $tobool526=(($expval525)|(0))!=0;
      if ($tobool526) { label = 168; break; } else { label = 169; break; }
    case 168: 
      var $390=$B507;
      var $fd528=(($390+8)|0);
      var $391=HEAP32[(($fd528)>>2)];
      $F511=$391;
      label = 170; break;
    case 169: 
      _abort();
      throw "Reached an unreachable!";
    case 170: 
      label = 171; break;
    case 171: 
      var $392=$p_addr;
      var $393=$B507;
      var $fd532=(($393+8)|0);
      HEAP32[(($fd532)>>2)]=$392;
      var $394=$p_addr;
      var $395=$F511;
      var $bk533=(($395+12)|0);
      HEAP32[(($bk533)>>2)]=$394;
      var $396=$F511;
      var $397=$p_addr;
      var $fd534=(($397+8)|0);
      HEAP32[(($fd534)>>2)]=$396;
      var $398=$B507;
      var $399=$p_addr;
      var $bk535=(($399+12)|0);
      HEAP32[(($bk535)>>2)]=$398;
      label = 199; break;
    case 172: 
      var $400=$p_addr;
      var $401=$400;
      $TP537=$401;
      var $402=$psize_addr;
      var $shr540=$402 >>> 8;
      $X=$shr540;
      var $403=$X;
      var $cmp541=(($403)|(0))==0;
      if ($cmp541) { label = 173; break; } else { label = 174; break; }
    case 173: 
      $I539=0;
      label = 178; break;
    case 174: 
      var $404=$X;
      var $cmp545=(($404)>>>(0)) > 65535;
      if ($cmp545) { label = 175; break; } else { label = 176; break; }
    case 175: 
      $I539=31;
      label = 177; break;
    case 176: 
      var $405=$X;
      $Y=$405;
      var $406=$Y;
      var $sub=((($406)-(256))|0);
      var $shr549=$sub >>> 16;
      var $and550=$shr549 & 8;
      $N=$and550;
      var $407=$N;
      var $408=$Y;
      var $shl551=$408 << $407;
      $Y=$shl551;
      var $sub552=((($shl551)-(4096))|0);
      var $shr553=$sub552 >>> 16;
      var $and554=$shr553 & 4;
      $K=$and554;
      var $409=$K;
      var $410=$N;
      var $add555=((($410)+($409))|0);
      $N=$add555;
      var $411=$K;
      var $412=$Y;
      var $shl556=$412 << $411;
      $Y=$shl556;
      var $sub557=((($shl556)-(16384))|0);
      var $shr558=$sub557 >>> 16;
      var $and559=$shr558 & 2;
      $K=$and559;
      var $413=$N;
      var $add560=((($413)+($and559))|0);
      $N=$add560;
      var $414=$N;
      var $sub561=(((14)-($414))|0);
      var $415=$K;
      var $416=$Y;
      var $shl562=$416 << $415;
      $Y=$shl562;
      var $shr563=$shl562 >>> 15;
      var $add564=((($sub561)+($shr563))|0);
      $K=$add564;
      var $417=$K;
      var $shl565=$417 << 1;
      var $418=$psize_addr;
      var $419=$K;
      var $add566=((($419)+(7))|0);
      var $shr567=$418 >>> (($add566)>>>(0));
      var $and568=$shr567 & 1;
      var $add569=((($shl565)+($and568))|0);
      $I539=$add569;
      label = 177; break;
    case 177: 
      label = 178; break;
    case 178: 
      var $420=$I539;
      var $421=$m_addr;
      var $treebins572=(($421+304)|0);
      var $arrayidx573=(($treebins572+($420<<2))|0);
      $H538=$arrayidx573;
      var $422=$I539;
      var $423=$TP537;
      var $index574=(($423+28)|0);
      HEAP32[(($index574)>>2)]=$422;
      var $424=$TP537;
      var $child575=(($424+16)|0);
      var $arrayidx576=(($child575+4)|0);
      HEAP32[(($arrayidx576)>>2)]=0;
      var $425=$TP537;
      var $child577=(($425+16)|0);
      var $arrayidx578=(($child577)|0);
      HEAP32[(($arrayidx578)>>2)]=0;
      var $426=$m_addr;
      var $treemap579=(($426+4)|0);
      var $427=HEAP32[(($treemap579)>>2)];
      var $428=$I539;
      var $shl580=1 << $428;
      var $and581=$427 & $shl580;
      var $tobool582=(($and581)|(0))!=0;
      if ($tobool582) { label = 180; break; } else { label = 179; break; }
    case 179: 
      var $429=$I539;
      var $shl584=1 << $429;
      var $430=$m_addr;
      var $treemap585=(($430+4)|0);
      var $431=HEAP32[(($treemap585)>>2)];
      var $or586=$431 | $shl584;
      HEAP32[(($treemap585)>>2)]=$or586;
      var $432=$TP537;
      var $433=$H538;
      HEAP32[(($433)>>2)]=$432;
      var $434=$H538;
      var $435=$434;
      var $436=$TP537;
      var $parent587=(($436+24)|0);
      HEAP32[(($parent587)>>2)]=$435;
      var $437=$TP537;
      var $438=$TP537;
      var $bk588=(($438+12)|0);
      HEAP32[(($bk588)>>2)]=$437;
      var $439=$TP537;
      var $fd589=(($439+8)|0);
      HEAP32[(($fd589)>>2)]=$437;
      label = 198; break;
    case 180: 
      var $440=$H538;
      var $441=HEAP32[(($440)>>2)];
      $T=$441;
      var $442=$psize_addr;
      var $443=$I539;
      var $cmp592=(($443)|(0))==31;
      if ($cmp592) { label = 181; break; } else { label = 182; break; }
    case 181: 
      var $cond = 0;label = 183; break;
    case 182: 
      var $444=$I539;
      var $shr594=$444 >>> 1;
      var $add595=((($shr594)+(8))|0);
      var $sub596=((($add595)-(2))|0);
      var $sub597=(((31)-($sub596))|0);
      var $cond = $sub597;label = 183; break;
    case 183: 
      var $cond;
      var $shl598=$442 << $cond;
      $K591=$shl598;
      label = 184; break;
    case 184: 
      var $445=$T;
      var $head599=(($445+4)|0);
      var $446=HEAP32[(($head599)>>2)];
      var $and600=$446 & -8;
      var $447=$psize_addr;
      var $cmp601=(($and600)|(0))!=(($447)|(0));
      if ($cmp601) { label = 185; break; } else { label = 191; break; }
    case 185: 
      var $448=$K591;
      var $shr604=$448 >>> 31;
      var $and605=$shr604 & 1;
      var $449=$T;
      var $child606=(($449+16)|0);
      var $arrayidx607=(($child606+($and605<<2))|0);
      $C=$arrayidx607;
      var $450=$K591;
      var $shl608=$450 << 1;
      $K591=$shl608;
      var $451=$C;
      var $452=HEAP32[(($451)>>2)];
      var $cmp609=(($452)|(0))!=0;
      if ($cmp609) { label = 186; break; } else { label = 187; break; }
    case 186: 
      var $453=$C;
      var $454=HEAP32[(($453)>>2)];
      $T=$454;
      label = 190; break;
    case 187: 
      var $455=$C;
      var $456=$455;
      var $457=$m_addr;
      var $least_addr613=(($457+16)|0);
      var $458=HEAP32[(($least_addr613)>>2)];
      var $cmp614=(($456)>>>(0)) >= (($458)>>>(0));
      var $conv615=(($cmp614)&(1));
      var $expval616=($conv615);
      var $tobool617=(($expval616)|(0))!=0;
      if ($tobool617) { label = 188; break; } else { label = 189; break; }
    case 188: 
      var $459=$TP537;
      var $460=$C;
      HEAP32[(($460)>>2)]=$459;
      var $461=$T;
      var $462=$TP537;
      var $parent619=(($462+24)|0);
      HEAP32[(($parent619)>>2)]=$461;
      var $463=$TP537;
      var $464=$TP537;
      var $bk620=(($464+12)|0);
      HEAP32[(($bk620)>>2)]=$463;
      var $465=$TP537;
      var $fd621=(($465+8)|0);
      HEAP32[(($fd621)>>2)]=$463;
      label = 197; break;
    case 189: 
      _abort();
      throw "Reached an unreachable!";
    case 190: 
      label = 196; break;
    case 191: 
      var $466=$T;
      var $fd626=(($466+8)|0);
      var $467=HEAP32[(($fd626)>>2)];
      $F625=$467;
      var $468=$T;
      var $469=$468;
      var $470=$m_addr;
      var $least_addr627=(($470+16)|0);
      var $471=HEAP32[(($least_addr627)>>2)];
      var $cmp628=(($469)>>>(0)) >= (($471)>>>(0));
      if ($cmp628) { label = 192; break; } else { var $476 = 0;label = 193; break; }
    case 192: 
      var $472=$F625;
      var $473=$472;
      var $474=$m_addr;
      var $least_addr631=(($474+16)|0);
      var $475=HEAP32[(($least_addr631)>>2)];
      var $cmp632=(($473)>>>(0)) >= (($475)>>>(0));
      var $476 = $cmp632;label = 193; break;
    case 193: 
      var $476;
      var $land_ext635=(($476)&(1));
      var $expval636=($land_ext635);
      var $tobool637=(($expval636)|(0))!=0;
      if ($tobool637) { label = 194; break; } else { label = 195; break; }
    case 194: 
      var $477=$TP537;
      var $478=$F625;
      var $bk639=(($478+12)|0);
      HEAP32[(($bk639)>>2)]=$477;
      var $479=$T;
      var $fd640=(($479+8)|0);
      HEAP32[(($fd640)>>2)]=$477;
      var $480=$F625;
      var $481=$TP537;
      var $fd641=(($481+8)|0);
      HEAP32[(($fd641)>>2)]=$480;
      var $482=$T;
      var $483=$TP537;
      var $bk642=(($483+12)|0);
      HEAP32[(($bk642)>>2)]=$482;
      var $484=$TP537;
      var $parent643=(($484+24)|0);
      HEAP32[(($parent643)>>2)]=0;
      label = 197; break;
    case 195: 
      _abort();
      throw "Reached an unreachable!";
    case 196: 
      label = 184; break;
    case 197: 
      label = 198; break;
    case 198: 
      label = 199; break;
    case 199: 
      label = 201; break;
    case 200: 
      _abort();
      throw "Reached an unreachable!";
    case 201: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mmap_resize($m, $oldp, $nb, $flags) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $oldp_addr;
      var $nb_addr;
      var $flags_addr;
      var $oldsize;
      var $offset;
      var $oldmmsize;
      var $newmmsize;
      var $cp;
      var $newp;
      var $psize;
      $m_addr=$m;
      $oldp_addr=$oldp;
      $nb_addr=$nb;
      $flags_addr=$flags;
      var $0=$oldp_addr;
      var $head=(($0+4)|0);
      var $1=HEAP32[(($head)>>2)];
      var $and=$1 & -8;
      $oldsize=$and;
      var $2=$flags_addr;
      var $3=$nb_addr;
      var $shr=$3 >>> 3;
      var $cmp=(($shr)>>>(0)) < 32;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 15; break;
    case 4: 
      var $4=$oldsize;
      var $5=$nb_addr;
      var $add=((($5)+(4))|0);
      var $cmp1=(($4)>>>(0)) >= (($add)>>>(0));
      if ($cmp1) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $6=$oldsize;
      var $7=$nb_addr;
      var $sub=((($6)-($7))|0);
      var $8=HEAP32[((((79960)|0))>>2)];
      var $shl=$8 << 1;
      var $cmp2=(($sub)>>>(0)) <= (($shl)>>>(0));
      if ($cmp2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $9=$oldp_addr;
      $retval=$9;
      label = 15; break;
    case 7: 
      var $10=$oldp_addr;
      var $prev_foot=(($10)|0);
      var $11=HEAP32[(($prev_foot)>>2)];
      $offset=$11;
      var $12=$oldsize;
      var $13=$offset;
      var $add4=((($12)+($13))|0);
      var $add5=((($add4)+(16))|0);
      $oldmmsize=$add5;
      var $14=$nb_addr;
      var $add6=((($14)+(24))|0);
      var $add7=((($add6)+(7))|0);
      var $15=HEAP32[((((79956)|0))>>2)];
      var $sub8=((($15)-(1))|0);
      var $add9=((($add7)+($sub8))|0);
      var $16=HEAP32[((((79956)|0))>>2)];
      var $sub10=((($16)-(1))|0);
      var $neg=$sub10 ^ -1;
      var $and11=$add9 & $neg;
      $newmmsize=$and11;
      $cp=-1;
      var $17=$cp;
      var $cmp12=(($17)|(0))!=-1;
      if ($cmp12) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $18=$cp;
      var $19=$offset;
      var $add_ptr=(($18+$19)|0);
      var $20=$add_ptr;
      $newp=$20;
      var $21=$newmmsize;
      var $22=$offset;
      var $sub14=((($21)-($22))|0);
      var $sub15=((($sub14)-(16))|0);
      $psize=$sub15;
      var $23=$psize;
      var $24=$newp;
      var $head16=(($24+4)|0);
      HEAP32[(($head16)>>2)]=$23;
      var $25=$newp;
      var $26=$25;
      var $27=$psize;
      var $add_ptr17=(($26+$27)|0);
      var $28=$add_ptr17;
      var $head18=(($28+4)|0);
      HEAP32[(($head18)>>2)]=7;
      var $29=$newp;
      var $30=$29;
      var $31=$psize;
      var $add19=((($31)+(4))|0);
      var $add_ptr20=(($30+$add19)|0);
      var $32=$add_ptr20;
      var $head21=(($32+4)|0);
      HEAP32[(($head21)>>2)]=0;
      var $33=$cp;
      var $34=$m_addr;
      var $least_addr=(($34+16)|0);
      var $35=HEAP32[(($least_addr)>>2)];
      var $cmp22=(($33)>>>(0)) < (($35)>>>(0));
      if ($cmp22) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $36=$cp;
      var $37=$m_addr;
      var $least_addr24=(($37+16)|0);
      HEAP32[(($least_addr24)>>2)]=$36;
      label = 10; break;
    case 10: 
      var $38=$newmmsize;
      var $39=$oldmmsize;
      var $sub26=((($38)-($39))|0);
      var $40=$m_addr;
      var $footprint=(($40+432)|0);
      var $41=HEAP32[(($footprint)>>2)];
      var $add27=((($41)+($sub26))|0);
      HEAP32[(($footprint)>>2)]=$add27;
      var $42=$m_addr;
      var $max_footprint=(($42+436)|0);
      var $43=HEAP32[(($max_footprint)>>2)];
      var $cmp28=(($add27)>>>(0)) > (($43)>>>(0));
      if ($cmp28) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $44=$m_addr;
      var $footprint30=(($44+432)|0);
      var $45=HEAP32[(($footprint30)>>2)];
      var $46=$m_addr;
      var $max_footprint31=(($46+436)|0);
      HEAP32[(($max_footprint31)>>2)]=$45;
      label = 12; break;
    case 12: 
      var $47=$newp;
      $retval=$47;
      label = 15; break;
    case 13: 
      label = 14; break;
    case 14: 
      $retval=0;
      label = 15; break;
    case 15: 
      var $48=$retval;
      return $48;
    default: assert(0, "bad label: " + label);
  }
}
function _segment_holding($m, $addr) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $addr_addr;
      var $sp;
      $m_addr=$m;
      $addr_addr=$addr;
      var $0=$m_addr;
      var $seg=(($0+448)|0);
      $sp=$seg;
      label = 3; break;
    case 3: 
      var $1=$addr_addr;
      var $2=$sp;
      var $base=(($2)|0);
      var $3=HEAP32[(($base)>>2)];
      var $cmp=(($1)>>>(0)) >= (($3)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $4=$addr_addr;
      var $5=$sp;
      var $base1=(($5)|0);
      var $6=HEAP32[(($base1)>>2)];
      var $7=$sp;
      var $size=(($7+4)|0);
      var $8=HEAP32[(($size)>>2)];
      var $add_ptr=(($6+$8)|0);
      var $cmp2=(($4)>>>(0)) < (($add_ptr)>>>(0));
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=$sp;
      $retval=$9;
      label = 9; break;
    case 6: 
      var $10=$sp;
      var $next=(($10+8)|0);
      var $11=HEAP32[(($next)>>2)];
      $sp=$11;
      var $cmp3=(($11)|(0))==0;
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=0;
      label = 9; break;
    case 8: 
      label = 3; break;
    case 9: 
      var $12=$retval;
      return $12;
    default: assert(0, "bad label: " + label);
  }
}
function _init_top($m, $p, $psize) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $p_addr;
      var $psize_addr;
      var $offset;
      $m_addr=$m;
      $p_addr=$p;
      $psize_addr=$psize;
      var $0=$p_addr;
      var $1=$0;
      var $add_ptr=(($1+8)|0);
      var $2=$add_ptr;
      var $and=$2 & 7;
      var $cmp=(($and)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 0;label = 5; break;
    case 4: 
      var $3=$p_addr;
      var $4=$3;
      var $add_ptr1=(($4+8)|0);
      var $5=$add_ptr1;
      var $and2=$5 & 7;
      var $sub=(((8)-($and2))|0);
      var $and3=$sub & 7;
      var $cond = $and3;label = 5; break;
    case 5: 
      var $cond;
      $offset=$cond;
      var $6=$p_addr;
      var $7=$6;
      var $8=$offset;
      var $add_ptr4=(($7+$8)|0);
      var $9=$add_ptr4;
      $p_addr=$9;
      var $10=$offset;
      var $11=$psize_addr;
      var $sub5=((($11)-($10))|0);
      $psize_addr=$sub5;
      var $12=$p_addr;
      var $13=$m_addr;
      var $top=(($13+24)|0);
      HEAP32[(($top)>>2)]=$12;
      var $14=$psize_addr;
      var $15=$m_addr;
      var $topsize=(($15+12)|0);
      HEAP32[(($topsize)>>2)]=$14;
      var $16=$psize_addr;
      var $or=$16 | 1;
      var $17=$p_addr;
      var $head=(($17+4)|0);
      HEAP32[(($head)>>2)]=$or;
      var $18=$p_addr;
      var $19=$18;
      var $20=$psize_addr;
      var $add_ptr6=(($19+$20)|0);
      var $21=$add_ptr6;
      var $head7=(($21+4)|0);
      HEAP32[(($head7)>>2)]=40;
      var $22=HEAP32[((((79968)|0))>>2)];
      var $23=$m_addr;
      var $trim_check=(($23+28)|0);
      HEAP32[(($trim_check)>>2)]=$22;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mmap_alloc($m, $nb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $mmsize;
      var $fp;
      var $mm;
      var $offset;
      var $psize;
      var $p;
      $m_addr=$m;
      $nb_addr=$nb;
      var $0=$nb_addr;
      var $add=((($0)+(24))|0);
      var $add1=((($add)+(7))|0);
      var $1=HEAP32[((((79956)|0))>>2)];
      var $sub=((($1)-(1))|0);
      var $add2=((($add1)+($sub))|0);
      var $2=HEAP32[((((79956)|0))>>2)];
      var $sub3=((($2)-(1))|0);
      var $neg=$sub3 ^ -1;
      var $and=$add2 & $neg;
      $mmsize=$and;
      var $3=$m_addr;
      var $footprint_limit=(($3+440)|0);
      var $4=HEAP32[(($footprint_limit)>>2)];
      var $cmp=(($4)|(0))!=0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $5=$m_addr;
      var $footprint=(($5+432)|0);
      var $6=HEAP32[(($footprint)>>2)];
      var $7=$mmsize;
      var $add4=((($6)+($7))|0);
      $fp=$add4;
      var $8=$fp;
      var $9=$m_addr;
      var $footprint5=(($9+432)|0);
      var $10=HEAP32[(($footprint5)>>2)];
      var $cmp6=(($8)>>>(0)) <= (($10)>>>(0));
      if ($cmp6) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $11=$fp;
      var $12=$m_addr;
      var $footprint_limit7=(($12+440)|0);
      var $13=HEAP32[(($footprint_limit7)>>2)];
      var $cmp8=(($11)>>>(0)) > (($13)>>>(0));
      if ($cmp8) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 20; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $14=$mmsize;
      var $15=$nb_addr;
      var $cmp11=(($14)>>>(0)) > (($15)>>>(0));
      if ($cmp11) { label = 8; break; } else { label = 19; break; }
    case 8: 
      $mm=-1;
      var $16=$mm;
      var $cmp13=(($16)|(0))!=-1;
      if ($cmp13) { label = 9; break; } else { label = 18; break; }
    case 9: 
      var $17=$mm;
      var $add_ptr=(($17+8)|0);
      var $18=$add_ptr;
      var $and15=$18 & 7;
      var $cmp16=(($and15)|(0))==0;
      if ($cmp16) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $cond = 0;label = 12; break;
    case 11: 
      var $19=$mm;
      var $add_ptr17=(($19+8)|0);
      var $20=$add_ptr17;
      var $and18=$20 & 7;
      var $sub19=(((8)-($and18))|0);
      var $and20=$sub19 & 7;
      var $cond = $and20;label = 12; break;
    case 12: 
      var $cond;
      $offset=$cond;
      var $21=$mmsize;
      var $22=$offset;
      var $sub21=((($21)-($22))|0);
      var $sub22=((($sub21)-(16))|0);
      $psize=$sub22;
      var $23=$mm;
      var $24=$offset;
      var $add_ptr23=(($23+$24)|0);
      var $25=$add_ptr23;
      $p=$25;
      var $26=$offset;
      var $27=$p;
      var $prev_foot=(($27)|0);
      HEAP32[(($prev_foot)>>2)]=$26;
      var $28=$psize;
      var $29=$p;
      var $head=(($29+4)|0);
      HEAP32[(($head)>>2)]=$28;
      var $30=$p;
      var $31=$30;
      var $32=$psize;
      var $add_ptr24=(($31+$32)|0);
      var $33=$add_ptr24;
      var $head25=(($33+4)|0);
      HEAP32[(($head25)>>2)]=7;
      var $34=$p;
      var $35=$34;
      var $36=$psize;
      var $add26=((($36)+(4))|0);
      var $add_ptr27=(($35+$add26)|0);
      var $37=$add_ptr27;
      var $head28=(($37+4)|0);
      HEAP32[(($head28)>>2)]=0;
      var $38=$m_addr;
      var $least_addr=(($38+16)|0);
      var $39=HEAP32[(($least_addr)>>2)];
      var $cmp29=(($39)|(0))==0;
      if ($cmp29) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $40=$mm;
      var $41=$m_addr;
      var $least_addr31=(($41+16)|0);
      var $42=HEAP32[(($least_addr31)>>2)];
      var $cmp32=(($40)>>>(0)) < (($42)>>>(0));
      if ($cmp32) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $43=$mm;
      var $44=$m_addr;
      var $least_addr34=(($44+16)|0);
      HEAP32[(($least_addr34)>>2)]=$43;
      label = 15; break;
    case 15: 
      var $45=$mmsize;
      var $46=$m_addr;
      var $footprint36=(($46+432)|0);
      var $47=HEAP32[(($footprint36)>>2)];
      var $add37=((($47)+($45))|0);
      HEAP32[(($footprint36)>>2)]=$add37;
      var $48=$m_addr;
      var $max_footprint=(($48+436)|0);
      var $49=HEAP32[(($max_footprint)>>2)];
      var $cmp38=(($add37)>>>(0)) > (($49)>>>(0));
      if ($cmp38) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $50=$m_addr;
      var $footprint40=(($50+432)|0);
      var $51=HEAP32[(($footprint40)>>2)];
      var $52=$m_addr;
      var $max_footprint41=(($52+436)|0);
      HEAP32[(($max_footprint41)>>2)]=$51;
      label = 17; break;
    case 17: 
      var $53=$p;
      var $54=$53;
      var $add_ptr43=(($54+8)|0);
      $retval=$add_ptr43;
      label = 20; break;
    case 18: 
      label = 19; break;
    case 19: 
      $retval=0;
      label = 20; break;
    case 20: 
      var $55=$retval;
      return $55;
    default: assert(0, "bad label: " + label);
  }
}
function _init_bins($m) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $i;
      var $bin;
      $m_addr=$m;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)>>>(0)) < 32;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $shl=$1 << 1;
      var $2=$m_addr;
      var $smallbins=(($2+40)|0);
      var $arrayidx=(($smallbins+($shl<<2))|0);
      var $3=$arrayidx;
      var $4=$3;
      $bin=$4;
      var $5=$bin;
      var $6=$bin;
      var $bk=(($6+12)|0);
      HEAP32[(($bk)>>2)]=$5;
      var $7=$bin;
      var $fd=(($7+8)|0);
      HEAP32[(($fd)>>2)]=$5;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _prepend_alloc($m, $newbase, $oldbase, $nb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $newbase_addr;
      var $oldbase_addr;
      var $nb_addr;
      var $p;
      var $oldfirst;
      var $psize;
      var $q;
      var $qsize;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F77;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I218;
      var $B220;
      var $F224;
      var $TP250;
      var $H251;
      var $I252;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K305;
      var $C;
      var $F343;
      $m_addr=$m;
      $newbase_addr=$newbase;
      $oldbase_addr=$oldbase;
      $nb_addr=$nb;
      var $0=$newbase_addr;
      var $1=$newbase_addr;
      var $add_ptr=(($1+8)|0);
      var $2=$add_ptr;
      var $and=$2 & 7;
      var $cmp=(($and)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 0;label = 5; break;
    case 4: 
      var $3=$newbase_addr;
      var $add_ptr1=(($3+8)|0);
      var $4=$add_ptr1;
      var $and2=$4 & 7;
      var $sub=(((8)-($and2))|0);
      var $and3=$sub & 7;
      var $cond = $and3;label = 5; break;
    case 5: 
      var $cond;
      var $add_ptr4=(($0+$cond)|0);
      var $5=$add_ptr4;
      $p=$5;
      var $6=$oldbase_addr;
      var $7=$oldbase_addr;
      var $add_ptr5=(($7+8)|0);
      var $8=$add_ptr5;
      var $and6=$8 & 7;
      var $cmp7=(($and6)|(0))==0;
      if ($cmp7) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $cond15 = 0;label = 8; break;
    case 7: 
      var $9=$oldbase_addr;
      var $add_ptr10=(($9+8)|0);
      var $10=$add_ptr10;
      var $and11=$10 & 7;
      var $sub12=(((8)-($and11))|0);
      var $and13=$sub12 & 7;
      var $cond15 = $and13;label = 8; break;
    case 8: 
      var $cond15;
      var $add_ptr16=(($6+$cond15)|0);
      var $11=$add_ptr16;
      $oldfirst=$11;
      var $12=$oldfirst;
      var $13=$12;
      var $14=$p;
      var $15=$14;
      var $sub_ptr_lhs_cast=$13;
      var $sub_ptr_rhs_cast=$15;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $psize=$sub_ptr_sub;
      var $16=$p;
      var $17=$16;
      var $18=$nb_addr;
      var $add_ptr17=(($17+$18)|0);
      var $19=$add_ptr17;
      $q=$19;
      var $20=$psize;
      var $21=$nb_addr;
      var $sub18=((($20)-($21))|0);
      $qsize=$sub18;
      var $22=$nb_addr;
      var $or=$22 | 1;
      var $or19=$or | 2;
      var $23=$p;
      var $head=(($23+4)|0);
      HEAP32[(($head)>>2)]=$or19;
      var $24=$oldfirst;
      var $25=$m_addr;
      var $top=(($25+24)|0);
      var $26=HEAP32[(($top)>>2)];
      var $cmp20=(($24)|(0))==(($26)|(0));
      if ($cmp20) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $27=$qsize;
      var $28=$m_addr;
      var $topsize=(($28+12)|0);
      var $29=HEAP32[(($topsize)>>2)];
      var $add=((($29)+($27))|0);
      HEAP32[(($topsize)>>2)]=$add;
      $tsize=$add;
      var $30=$q;
      var $31=$m_addr;
      var $top21=(($31+24)|0);
      HEAP32[(($top21)>>2)]=$30;
      var $32=$tsize;
      var $or22=$32 | 1;
      var $33=$q;
      var $head23=(($33+4)|0);
      HEAP32[(($head23)>>2)]=$or22;
      label = 119; break;
    case 10: 
      var $34=$oldfirst;
      var $35=$m_addr;
      var $dv=(($35+20)|0);
      var $36=HEAP32[(($dv)>>2)];
      var $cmp24=(($34)|(0))==(($36)|(0));
      if ($cmp24) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $37=$qsize;
      var $38=$m_addr;
      var $dvsize=(($38+8)|0);
      var $39=HEAP32[(($dvsize)>>2)];
      var $add26=((($39)+($37))|0);
      HEAP32[(($dvsize)>>2)]=$add26;
      $dsize=$add26;
      var $40=$q;
      var $41=$m_addr;
      var $dv27=(($41+20)|0);
      HEAP32[(($dv27)>>2)]=$40;
      var $42=$dsize;
      var $or28=$42 | 1;
      var $43=$q;
      var $head29=(($43+4)|0);
      HEAP32[(($head29)>>2)]=$or28;
      var $44=$dsize;
      var $45=$q;
      var $46=$45;
      var $47=$dsize;
      var $add_ptr30=(($46+$47)|0);
      var $48=$add_ptr30;
      var $prev_foot=(($48)|0);
      HEAP32[(($prev_foot)>>2)]=$44;
      label = 118; break;
    case 12: 
      var $49=$oldfirst;
      var $head32=(($49+4)|0);
      var $50=HEAP32[(($head32)>>2)];
      var $and33=$50 & 3;
      var $cmp34=(($and33)|(0))!=1;
      if ($cmp34) { label = 82; break; } else { label = 13; break; }
    case 13: 
      var $51=$oldfirst;
      var $head36=(($51+4)|0);
      var $52=HEAP32[(($head36)>>2)];
      var $and37=$52 & -8;
      $nsize=$and37;
      var $53=$nsize;
      var $shr=$53 >>> 3;
      var $cmp38=(($shr)>>>(0)) < 32;
      if ($cmp38) { label = 14; break; } else { label = 32; break; }
    case 14: 
      var $54=$oldfirst;
      var $fd=(($54+8)|0);
      var $55=HEAP32[(($fd)>>2)];
      $F=$55;
      var $56=$oldfirst;
      var $bk=(($56+12)|0);
      var $57=HEAP32[(($bk)>>2)];
      $B=$57;
      var $58=$nsize;
      var $shr40=$58 >>> 3;
      $I=$shr40;
      var $59=$F;
      var $60=$I;
      var $shl=$60 << 1;
      var $61=$m_addr;
      var $smallbins=(($61+40)|0);
      var $arrayidx=(($smallbins+($shl<<2))|0);
      var $62=$arrayidx;
      var $63=$62;
      var $cmp41=(($59)|(0))==(($63)|(0));
      if ($cmp41) { var $72 = 1;label = 18; break; } else { label = 15; break; }
    case 15: 
      var $64=$F;
      var $65=$64;
      var $66=$m_addr;
      var $least_addr=(($66+16)|0);
      var $67=HEAP32[(($least_addr)>>2)];
      var $cmp42=(($65)>>>(0)) >= (($67)>>>(0));
      if ($cmp42) { label = 16; break; } else { var $71 = 0;label = 17; break; }
    case 16: 
      var $68=$F;
      var $bk43=(($68+12)|0);
      var $69=HEAP32[(($bk43)>>2)];
      var $70=$oldfirst;
      var $cmp44=(($69)|(0))==(($70)|(0));
      var $71 = $cmp44;label = 17; break;
    case 17: 
      var $71;
      var $72 = $71;label = 18; break;
    case 18: 
      var $72;
      var $lor_ext=(($72)&(1));
      var $expval=($lor_ext);
      var $tobool=(($expval)|(0))!=0;
      if ($tobool) { label = 19; break; } else { label = 30; break; }
    case 19: 
      var $73=$B;
      var $74=$F;
      var $cmp46=(($73)|(0))==(($74)|(0));
      if ($cmp46) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $75=$I;
      var $shl48=1 << $75;
      var $neg=$shl48 ^ -1;
      var $76=$m_addr;
      var $smallmap=(($76)|0);
      var $77=HEAP32[(($smallmap)>>2)];
      var $and49=$77 & $neg;
      HEAP32[(($smallmap)>>2)]=$and49;
      label = 29; break;
    case 21: 
      var $78=$B;
      var $79=$I;
      var $shl51=$79 << 1;
      var $80=$m_addr;
      var $smallbins52=(($80+40)|0);
      var $arrayidx53=(($smallbins52+($shl51<<2))|0);
      var $81=$arrayidx53;
      var $82=$81;
      var $cmp54=(($78)|(0))==(($82)|(0));
      if ($cmp54) { var $91 = 1;label = 25; break; } else { label = 22; break; }
    case 22: 
      var $83=$B;
      var $84=$83;
      var $85=$m_addr;
      var $least_addr56=(($85+16)|0);
      var $86=HEAP32[(($least_addr56)>>2)];
      var $cmp57=(($84)>>>(0)) >= (($86)>>>(0));
      if ($cmp57) { label = 23; break; } else { var $90 = 0;label = 24; break; }
    case 23: 
      var $87=$B;
      var $fd59=(($87+8)|0);
      var $88=HEAP32[(($fd59)>>2)];
      var $89=$oldfirst;
      var $cmp60=(($88)|(0))==(($89)|(0));
      var $90 = $cmp60;label = 24; break;
    case 24: 
      var $90;
      var $91 = $90;label = 25; break;
    case 25: 
      var $91;
      var $lor_ext63=(($91)&(1));
      var $expval64=($lor_ext63);
      var $tobool65=(($expval64)|(0))!=0;
      if ($tobool65) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $92=$B;
      var $93=$F;
      var $bk67=(($93+12)|0);
      HEAP32[(($bk67)>>2)]=$92;
      var $94=$F;
      var $95=$B;
      var $fd68=(($95+8)|0);
      HEAP32[(($fd68)>>2)]=$94;
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!";
    case 28: 
      label = 29; break;
    case 29: 
      label = 31; break;
    case 30: 
      _abort();
      throw "Reached an unreachable!";
    case 31: 
      label = 81; break;
    case 32: 
      var $96=$oldfirst;
      var $97=$96;
      $TP=$97;
      var $98=$TP;
      var $parent=(($98+24)|0);
      var $99=HEAP32[(($parent)>>2)];
      $XP=$99;
      var $100=$TP;
      var $bk74=(($100+12)|0);
      var $101=HEAP32[(($bk74)>>2)];
      var $102=$TP;
      var $cmp75=(($101)|(0))!=(($102)|(0));
      if ($cmp75) { label = 33; break; } else { label = 40; break; }
    case 33: 
      var $103=$TP;
      var $fd78=(($103+8)|0);
      var $104=HEAP32[(($fd78)>>2)];
      $F77=$104;
      var $105=$TP;
      var $bk79=(($105+12)|0);
      var $106=HEAP32[(($bk79)>>2)];
      $R=$106;
      var $107=$F77;
      var $108=$107;
      var $109=$m_addr;
      var $least_addr80=(($109+16)|0);
      var $110=HEAP32[(($least_addr80)>>2)];
      var $cmp81=(($108)>>>(0)) >= (($110)>>>(0));
      if ($cmp81) { label = 34; break; } else { var $117 = 0;label = 36; break; }
    case 34: 
      var $111=$F77;
      var $bk82=(($111+12)|0);
      var $112=HEAP32[(($bk82)>>2)];
      var $113=$TP;
      var $cmp83=(($112)|(0))==(($113)|(0));
      if ($cmp83) { label = 35; break; } else { var $117 = 0;label = 36; break; }
    case 35: 
      var $114=$R;
      var $fd85=(($114+8)|0);
      var $115=HEAP32[(($fd85)>>2)];
      var $116=$TP;
      var $cmp86=(($115)|(0))==(($116)|(0));
      var $117 = $cmp86;label = 36; break;
    case 36: 
      var $117;
      var $land_ext=(($117)&(1));
      var $expval88=($land_ext);
      var $tobool89=(($expval88)|(0))!=0;
      if ($tobool89) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $118=$R;
      var $119=$F77;
      var $bk91=(($119+12)|0);
      HEAP32[(($bk91)>>2)]=$118;
      var $120=$F77;
      var $121=$R;
      var $fd92=(($121+8)|0);
      HEAP32[(($fd92)>>2)]=$120;
      label = 39; break;
    case 38: 
      _abort();
      throw "Reached an unreachable!";
    case 39: 
      label = 52; break;
    case 40: 
      var $122=$TP;
      var $child=(($122+16)|0);
      var $arrayidx96=(($child+4)|0);
      $RP=$arrayidx96;
      var $123=HEAP32[(($arrayidx96)>>2)];
      $R=$123;
      var $cmp97=(($123)|(0))!=0;
      if ($cmp97) { label = 42; break; } else { label = 41; break; }
    case 41: 
      var $124=$TP;
      var $child98=(($124+16)|0);
      var $arrayidx99=(($child98)|0);
      $RP=$arrayidx99;
      var $125=HEAP32[(($arrayidx99)>>2)];
      $R=$125;
      var $cmp100=(($125)|(0))!=0;
      if ($cmp100) { label = 42; break; } else { label = 51; break; }
    case 42: 
      label = 43; break;
    case 43: 
      var $126=$R;
      var $child102=(($126+16)|0);
      var $arrayidx103=(($child102+4)|0);
      $CP=$arrayidx103;
      var $127=HEAP32[(($arrayidx103)>>2)];
      var $cmp104=(($127)|(0))!=0;
      if ($cmp104) { var $130 = 1;label = 45; break; } else { label = 44; break; }
    case 44: 
      var $128=$R;
      var $child106=(($128+16)|0);
      var $arrayidx107=(($child106)|0);
      $CP=$arrayidx107;
      var $129=HEAP32[(($arrayidx107)>>2)];
      var $cmp108=(($129)|(0))!=0;
      var $130 = $cmp108;label = 45; break;
    case 45: 
      var $130;
      if ($130) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $131=$CP;
      $RP=$131;
      var $132=HEAP32[(($131)>>2)];
      $R=$132;
      label = 43; break;
    case 47: 
      var $133=$RP;
      var $134=$133;
      var $135=$m_addr;
      var $least_addr111=(($135+16)|0);
      var $136=HEAP32[(($least_addr111)>>2)];
      var $cmp112=(($134)>>>(0)) >= (($136)>>>(0));
      var $conv=(($cmp112)&(1));
      var $expval113=($conv);
      var $tobool114=(($expval113)|(0))!=0;
      if ($tobool114) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $137=$RP;
      HEAP32[(($137)>>2)]=0;
      label = 50; break;
    case 49: 
      _abort();
      throw "Reached an unreachable!";
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $138=$XP;
      var $cmp120=(($138)|(0))!=0;
      if ($cmp120) { label = 53; break; } else { label = 80; break; }
    case 53: 
      var $139=$TP;
      var $index=(($139+28)|0);
      var $140=HEAP32[(($index)>>2)];
      var $141=$m_addr;
      var $treebins=(($141+304)|0);
      var $arrayidx123=(($treebins+($140<<2))|0);
      $H=$arrayidx123;
      var $142=$TP;
      var $143=$H;
      var $144=HEAP32[(($143)>>2)];
      var $cmp124=(($142)|(0))==(($144)|(0));
      if ($cmp124) { label = 54; break; } else { label = 57; break; }
    case 54: 
      var $145=$R;
      var $146=$H;
      HEAP32[(($146)>>2)]=$145;
      var $cmp127=(($145)|(0))==0;
      if ($cmp127) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $147=$TP;
      var $index130=(($147+28)|0);
      var $148=HEAP32[(($index130)>>2)];
      var $shl131=1 << $148;
      var $neg132=$shl131 ^ -1;
      var $149=$m_addr;
      var $treemap=(($149+4)|0);
      var $150=HEAP32[(($treemap)>>2)];
      var $and133=$150 & $neg132;
      HEAP32[(($treemap)>>2)]=$and133;
      label = 56; break;
    case 56: 
      label = 64; break;
    case 57: 
      var $151=$XP;
      var $152=$151;
      var $153=$m_addr;
      var $least_addr136=(($153+16)|0);
      var $154=HEAP32[(($least_addr136)>>2)];
      var $cmp137=(($152)>>>(0)) >= (($154)>>>(0));
      var $conv138=(($cmp137)&(1));
      var $expval139=($conv138);
      var $tobool140=(($expval139)|(0))!=0;
      if ($tobool140) { label = 58; break; } else { label = 62; break; }
    case 58: 
      var $155=$XP;
      var $child142=(($155+16)|0);
      var $arrayidx143=(($child142)|0);
      var $156=HEAP32[(($arrayidx143)>>2)];
      var $157=$TP;
      var $cmp144=(($156)|(0))==(($157)|(0));
      if ($cmp144) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $158=$R;
      var $159=$XP;
      var $child147=(($159+16)|0);
      var $arrayidx148=(($child147)|0);
      HEAP32[(($arrayidx148)>>2)]=$158;
      label = 61; break;
    case 60: 
      var $160=$R;
      var $161=$XP;
      var $child150=(($161+16)|0);
      var $arrayidx151=(($child150+4)|0);
      HEAP32[(($arrayidx151)>>2)]=$160;
      label = 61; break;
    case 61: 
      label = 63; break;
    case 62: 
      _abort();
      throw "Reached an unreachable!";
    case 63: 
      label = 64; break;
    case 64: 
      var $162=$R;
      var $cmp156=(($162)|(0))!=0;
      if ($cmp156) { label = 65; break; } else { label = 79; break; }
    case 65: 
      var $163=$R;
      var $164=$163;
      var $165=$m_addr;
      var $least_addr159=(($165+16)|0);
      var $166=HEAP32[(($least_addr159)>>2)];
      var $cmp160=(($164)>>>(0)) >= (($166)>>>(0));
      var $conv161=(($cmp160)&(1));
      var $expval162=($conv161);
      var $tobool163=(($expval162)|(0))!=0;
      if ($tobool163) { label = 66; break; } else { label = 77; break; }
    case 66: 
      var $167=$XP;
      var $168=$R;
      var $parent165=(($168+24)|0);
      HEAP32[(($parent165)>>2)]=$167;
      var $169=$TP;
      var $child166=(($169+16)|0);
      var $arrayidx167=(($child166)|0);
      var $170=HEAP32[(($arrayidx167)>>2)];
      $C0=$170;
      var $cmp168=(($170)|(0))!=0;
      if ($cmp168) { label = 67; break; } else { label = 71; break; }
    case 67: 
      var $171=$C0;
      var $172=$171;
      var $173=$m_addr;
      var $least_addr171=(($173+16)|0);
      var $174=HEAP32[(($least_addr171)>>2)];
      var $cmp172=(($172)>>>(0)) >= (($174)>>>(0));
      var $conv173=(($cmp172)&(1));
      var $expval174=($conv173);
      var $tobool175=(($expval174)|(0))!=0;
      if ($tobool175) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $175=$C0;
      var $176=$R;
      var $child177=(($176+16)|0);
      var $arrayidx178=(($child177)|0);
      HEAP32[(($arrayidx178)>>2)]=$175;
      var $177=$R;
      var $178=$C0;
      var $parent179=(($178+24)|0);
      HEAP32[(($parent179)>>2)]=$177;
      label = 70; break;
    case 69: 
      _abort();
      throw "Reached an unreachable!";
    case 70: 
      label = 71; break;
    case 71: 
      var $179=$TP;
      var $child183=(($179+16)|0);
      var $arrayidx184=(($child183+4)|0);
      var $180=HEAP32[(($arrayidx184)>>2)];
      $C1=$180;
      var $cmp185=(($180)|(0))!=0;
      if ($cmp185) { label = 72; break; } else { label = 76; break; }
    case 72: 
      var $181=$C1;
      var $182=$181;
      var $183=$m_addr;
      var $least_addr188=(($183+16)|0);
      var $184=HEAP32[(($least_addr188)>>2)];
      var $cmp189=(($182)>>>(0)) >= (($184)>>>(0));
      var $conv190=(($cmp189)&(1));
      var $expval191=($conv190);
      var $tobool192=(($expval191)|(0))!=0;
      if ($tobool192) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $185=$C1;
      var $186=$R;
      var $child194=(($186+16)|0);
      var $arrayidx195=(($child194+4)|0);
      HEAP32[(($arrayidx195)>>2)]=$185;
      var $187=$R;
      var $188=$C1;
      var $parent196=(($188+24)|0);
      HEAP32[(($parent196)>>2)]=$187;
      label = 75; break;
    case 74: 
      _abort();
      throw "Reached an unreachable!";
    case 75: 
      label = 76; break;
    case 76: 
      label = 78; break;
    case 77: 
      _abort();
      throw "Reached an unreachable!";
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      var $189=$oldfirst;
      var $190=$189;
      var $191=$nsize;
      var $add_ptr205=(($190+$191)|0);
      var $192=$add_ptr205;
      $oldfirst=$192;
      var $193=$nsize;
      var $194=$qsize;
      var $add206=((($194)+($193))|0);
      $qsize=$add206;
      label = 82; break;
    case 82: 
      var $195=$oldfirst;
      var $head208=(($195+4)|0);
      var $196=HEAP32[(($head208)>>2)];
      var $and209=$196 & -2;
      HEAP32[(($head208)>>2)]=$and209;
      var $197=$qsize;
      var $or210=$197 | 1;
      var $198=$q;
      var $head211=(($198+4)|0);
      HEAP32[(($head211)>>2)]=$or210;
      var $199=$qsize;
      var $200=$q;
      var $201=$200;
      var $202=$qsize;
      var $add_ptr212=(($201+$202)|0);
      var $203=$add_ptr212;
      var $prev_foot213=(($203)|0);
      HEAP32[(($prev_foot213)>>2)]=$199;
      var $204=$qsize;
      var $shr214=$204 >>> 3;
      var $cmp215=(($shr214)>>>(0)) < 32;
      if ($cmp215) { label = 83; break; } else { label = 90; break; }
    case 83: 
      var $205=$qsize;
      var $shr219=$205 >>> 3;
      $I218=$shr219;
      var $206=$I218;
      var $shl221=$206 << 1;
      var $207=$m_addr;
      var $smallbins222=(($207+40)|0);
      var $arrayidx223=(($smallbins222+($shl221<<2))|0);
      var $208=$arrayidx223;
      var $209=$208;
      $B220=$209;
      var $210=$B220;
      $F224=$210;
      var $211=$m_addr;
      var $smallmap225=(($211)|0);
      var $212=HEAP32[(($smallmap225)>>2)];
      var $213=$I218;
      var $shl226=1 << $213;
      var $and227=$212 & $shl226;
      var $tobool228=(($and227)|(0))!=0;
      if ($tobool228) { label = 85; break; } else { label = 84; break; }
    case 84: 
      var $214=$I218;
      var $shl230=1 << $214;
      var $215=$m_addr;
      var $smallmap231=(($215)|0);
      var $216=HEAP32[(($smallmap231)>>2)];
      var $or232=$216 | $shl230;
      HEAP32[(($smallmap231)>>2)]=$or232;
      label = 89; break;
    case 85: 
      var $217=$B220;
      var $fd234=(($217+8)|0);
      var $218=HEAP32[(($fd234)>>2)];
      var $219=$218;
      var $220=$m_addr;
      var $least_addr235=(($220+16)|0);
      var $221=HEAP32[(($least_addr235)>>2)];
      var $cmp236=(($219)>>>(0)) >= (($221)>>>(0));
      var $conv237=(($cmp236)&(1));
      var $expval238=($conv237);
      var $tobool239=(($expval238)|(0))!=0;
      if ($tobool239) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $222=$B220;
      var $fd241=(($222+8)|0);
      var $223=HEAP32[(($fd241)>>2)];
      $F224=$223;
      label = 88; break;
    case 87: 
      _abort();
      throw "Reached an unreachable!";
    case 88: 
      label = 89; break;
    case 89: 
      var $224=$q;
      var $225=$B220;
      var $fd245=(($225+8)|0);
      HEAP32[(($fd245)>>2)]=$224;
      var $226=$q;
      var $227=$F224;
      var $bk246=(($227+12)|0);
      HEAP32[(($bk246)>>2)]=$226;
      var $228=$F224;
      var $229=$q;
      var $fd247=(($229+8)|0);
      HEAP32[(($fd247)>>2)]=$228;
      var $230=$B220;
      var $231=$q;
      var $bk248=(($231+12)|0);
      HEAP32[(($bk248)>>2)]=$230;
      label = 117; break;
    case 90: 
      var $232=$q;
      var $233=$232;
      $TP250=$233;
      var $234=$qsize;
      var $shr253=$234 >>> 8;
      $X=$shr253;
      var $235=$X;
      var $cmp254=(($235)|(0))==0;
      if ($cmp254) { label = 91; break; } else { label = 92; break; }
    case 91: 
      $I252=0;
      label = 96; break;
    case 92: 
      var $236=$X;
      var $cmp258=(($236)>>>(0)) > 65535;
      if ($cmp258) { label = 93; break; } else { label = 94; break; }
    case 93: 
      $I252=31;
      label = 95; break;
    case 94: 
      var $237=$X;
      $Y=$237;
      var $238=$Y;
      var $sub262=((($238)-(256))|0);
      var $shr263=$sub262 >>> 16;
      var $and264=$shr263 & 8;
      $N=$and264;
      var $239=$N;
      var $240=$Y;
      var $shl265=$240 << $239;
      $Y=$shl265;
      var $sub266=((($shl265)-(4096))|0);
      var $shr267=$sub266 >>> 16;
      var $and268=$shr267 & 4;
      $K=$and268;
      var $241=$K;
      var $242=$N;
      var $add269=((($242)+($241))|0);
      $N=$add269;
      var $243=$K;
      var $244=$Y;
      var $shl270=$244 << $243;
      $Y=$shl270;
      var $sub271=((($shl270)-(16384))|0);
      var $shr272=$sub271 >>> 16;
      var $and273=$shr272 & 2;
      $K=$and273;
      var $245=$N;
      var $add274=((($245)+($and273))|0);
      $N=$add274;
      var $246=$N;
      var $sub275=(((14)-($246))|0);
      var $247=$K;
      var $248=$Y;
      var $shl276=$248 << $247;
      $Y=$shl276;
      var $shr277=$shl276 >>> 15;
      var $add278=((($sub275)+($shr277))|0);
      $K=$add278;
      var $249=$K;
      var $shl279=$249 << 1;
      var $250=$qsize;
      var $251=$K;
      var $add280=((($251)+(7))|0);
      var $shr281=$250 >>> (($add280)>>>(0));
      var $and282=$shr281 & 1;
      var $add283=((($shl279)+($and282))|0);
      $I252=$add283;
      label = 95; break;
    case 95: 
      label = 96; break;
    case 96: 
      var $252=$I252;
      var $253=$m_addr;
      var $treebins286=(($253+304)|0);
      var $arrayidx287=(($treebins286+($252<<2))|0);
      $H251=$arrayidx287;
      var $254=$I252;
      var $255=$TP250;
      var $index288=(($255+28)|0);
      HEAP32[(($index288)>>2)]=$254;
      var $256=$TP250;
      var $child289=(($256+16)|0);
      var $arrayidx290=(($child289+4)|0);
      HEAP32[(($arrayidx290)>>2)]=0;
      var $257=$TP250;
      var $child291=(($257+16)|0);
      var $arrayidx292=(($child291)|0);
      HEAP32[(($arrayidx292)>>2)]=0;
      var $258=$m_addr;
      var $treemap293=(($258+4)|0);
      var $259=HEAP32[(($treemap293)>>2)];
      var $260=$I252;
      var $shl294=1 << $260;
      var $and295=$259 & $shl294;
      var $tobool296=(($and295)|(0))!=0;
      if ($tobool296) { label = 98; break; } else { label = 97; break; }
    case 97: 
      var $261=$I252;
      var $shl298=1 << $261;
      var $262=$m_addr;
      var $treemap299=(($262+4)|0);
      var $263=HEAP32[(($treemap299)>>2)];
      var $or300=$263 | $shl298;
      HEAP32[(($treemap299)>>2)]=$or300;
      var $264=$TP250;
      var $265=$H251;
      HEAP32[(($265)>>2)]=$264;
      var $266=$H251;
      var $267=$266;
      var $268=$TP250;
      var $parent301=(($268+24)|0);
      HEAP32[(($parent301)>>2)]=$267;
      var $269=$TP250;
      var $270=$TP250;
      var $bk302=(($270+12)|0);
      HEAP32[(($bk302)>>2)]=$269;
      var $271=$TP250;
      var $fd303=(($271+8)|0);
      HEAP32[(($fd303)>>2)]=$269;
      label = 116; break;
    case 98: 
      var $272=$H251;
      var $273=HEAP32[(($272)>>2)];
      $T=$273;
      var $274=$qsize;
      var $275=$I252;
      var $cmp306=(($275)|(0))==31;
      if ($cmp306) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $cond315 = 0;label = 101; break;
    case 100: 
      var $276=$I252;
      var $shr310=$276 >>> 1;
      var $add311=((($shr310)+(8))|0);
      var $sub312=((($add311)-(2))|0);
      var $sub313=(((31)-($sub312))|0);
      var $cond315 = $sub313;label = 101; break;
    case 101: 
      var $cond315;
      var $shl316=$274 << $cond315;
      $K305=$shl316;
      label = 102; break;
    case 102: 
      var $277=$T;
      var $head317=(($277+4)|0);
      var $278=HEAP32[(($head317)>>2)];
      var $and318=$278 & -8;
      var $279=$qsize;
      var $cmp319=(($and318)|(0))!=(($279)|(0));
      if ($cmp319) { label = 103; break; } else { label = 109; break; }
    case 103: 
      var $280=$K305;
      var $shr322=$280 >>> 31;
      var $and323=$shr322 & 1;
      var $281=$T;
      var $child324=(($281+16)|0);
      var $arrayidx325=(($child324+($and323<<2))|0);
      $C=$arrayidx325;
      var $282=$K305;
      var $shl326=$282 << 1;
      $K305=$shl326;
      var $283=$C;
      var $284=HEAP32[(($283)>>2)];
      var $cmp327=(($284)|(0))!=0;
      if ($cmp327) { label = 104; break; } else { label = 105; break; }
    case 104: 
      var $285=$C;
      var $286=HEAP32[(($285)>>2)];
      $T=$286;
      label = 108; break;
    case 105: 
      var $287=$C;
      var $288=$287;
      var $289=$m_addr;
      var $least_addr331=(($289+16)|0);
      var $290=HEAP32[(($least_addr331)>>2)];
      var $cmp332=(($288)>>>(0)) >= (($290)>>>(0));
      var $conv333=(($cmp332)&(1));
      var $expval334=($conv333);
      var $tobool335=(($expval334)|(0))!=0;
      if ($tobool335) { label = 106; break; } else { label = 107; break; }
    case 106: 
      var $291=$TP250;
      var $292=$C;
      HEAP32[(($292)>>2)]=$291;
      var $293=$T;
      var $294=$TP250;
      var $parent337=(($294+24)|0);
      HEAP32[(($parent337)>>2)]=$293;
      var $295=$TP250;
      var $296=$TP250;
      var $bk338=(($296+12)|0);
      HEAP32[(($bk338)>>2)]=$295;
      var $297=$TP250;
      var $fd339=(($297+8)|0);
      HEAP32[(($fd339)>>2)]=$295;
      label = 115; break;
    case 107: 
      _abort();
      throw "Reached an unreachable!";
    case 108: 
      label = 114; break;
    case 109: 
      var $298=$T;
      var $fd344=(($298+8)|0);
      var $299=HEAP32[(($fd344)>>2)];
      $F343=$299;
      var $300=$T;
      var $301=$300;
      var $302=$m_addr;
      var $least_addr345=(($302+16)|0);
      var $303=HEAP32[(($least_addr345)>>2)];
      var $cmp346=(($301)>>>(0)) >= (($303)>>>(0));
      if ($cmp346) { label = 110; break; } else { var $308 = 0;label = 111; break; }
    case 110: 
      var $304=$F343;
      var $305=$304;
      var $306=$m_addr;
      var $least_addr349=(($306+16)|0);
      var $307=HEAP32[(($least_addr349)>>2)];
      var $cmp350=(($305)>>>(0)) >= (($307)>>>(0));
      var $308 = $cmp350;label = 111; break;
    case 111: 
      var $308;
      var $land_ext353=(($308)&(1));
      var $expval354=($land_ext353);
      var $tobool355=(($expval354)|(0))!=0;
      if ($tobool355) { label = 112; break; } else { label = 113; break; }
    case 112: 
      var $309=$TP250;
      var $310=$F343;
      var $bk357=(($310+12)|0);
      HEAP32[(($bk357)>>2)]=$309;
      var $311=$T;
      var $fd358=(($311+8)|0);
      HEAP32[(($fd358)>>2)]=$309;
      var $312=$F343;
      var $313=$TP250;
      var $fd359=(($313+8)|0);
      HEAP32[(($fd359)>>2)]=$312;
      var $314=$T;
      var $315=$TP250;
      var $bk360=(($315+12)|0);
      HEAP32[(($bk360)>>2)]=$314;
      var $316=$TP250;
      var $parent361=(($316+24)|0);
      HEAP32[(($parent361)>>2)]=0;
      label = 115; break;
    case 113: 
      _abort();
      throw "Reached an unreachable!";
    case 114: 
      label = 102; break;
    case 115: 
      label = 116; break;
    case 116: 
      label = 117; break;
    case 117: 
      label = 118; break;
    case 118: 
      label = 119; break;
    case 119: 
      var $317=$p;
      var $318=$317;
      var $add_ptr368=(($318+8)|0);
      return $add_ptr368;
    default: assert(0, "bad label: " + label);
  }
}
function _add_segment($m, $tbase, $tsize, $mmapped) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $tbase_addr;
      var $tsize_addr;
      var $mmapped_addr;
      var $old_top;
      var $oldsp;
      var $old_end;
      var $ssize;
      var $rawsp;
      var $offset;
      var $asp;
      var $csp;
      var $sp;
      var $ss;
      var $tnext;
      var $p;
      var $nfences;
      var $nextp;
      var $q;
      var $psize;
      var $tn;
      var $I;
      var $B;
      var $F;
      var $TP;
      var $H;
      var $I57;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K105;
      var $C;
      var $F144;
      $m_addr=$m;
      $tbase_addr=$tbase;
      $tsize_addr=$tsize;
      $mmapped_addr=$mmapped;
      var $0=$m_addr;
      var $top=(($0+24)|0);
      var $1=HEAP32[(($top)>>2)];
      var $2=$1;
      $old_top=$2;
      var $3=$m_addr;
      var $4=$old_top;
      var $call=_segment_holding($3, $4);
      $oldsp=$call;
      var $5=$oldsp;
      var $base=(($5)|0);
      var $6=HEAP32[(($base)>>2)];
      var $7=$oldsp;
      var $size=(($7+4)|0);
      var $8=HEAP32[(($size)>>2)];
      var $add_ptr=(($6+$8)|0);
      $old_end=$add_ptr;
      $ssize=24;
      var $9=$old_end;
      var $10=$ssize;
      var $add=((($10)+(16))|0);
      var $add1=((($add)+(7))|0);
      var $idx_neg=(((-$add1))|0);
      var $add_ptr2=(($9+$idx_neg)|0);
      $rawsp=$add_ptr2;
      var $11=$rawsp;
      var $add_ptr3=(($11+8)|0);
      var $12=$add_ptr3;
      var $and=$12 & 7;
      var $cmp=(($and)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 0;label = 5; break;
    case 4: 
      var $13=$rawsp;
      var $add_ptr4=(($13+8)|0);
      var $14=$add_ptr4;
      var $and5=$14 & 7;
      var $sub=(((8)-($and5))|0);
      var $and6=$sub & 7;
      var $cond = $and6;label = 5; break;
    case 5: 
      var $cond;
      $offset=$cond;
      var $15=$rawsp;
      var $16=$offset;
      var $add_ptr7=(($15+$16)|0);
      $asp=$add_ptr7;
      var $17=$asp;
      var $18=$old_top;
      var $add_ptr8=(($18+16)|0);
      var $cmp9=(($17)>>>(0)) < (($add_ptr8)>>>(0));
      if ($cmp9) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $19=$old_top;
      var $cond13 = $19;label = 8; break;
    case 7: 
      var $20=$asp;
      var $cond13 = $20;label = 8; break;
    case 8: 
      var $cond13;
      $csp=$cond13;
      var $21=$csp;
      var $22=$21;
      $sp=$22;
      var $23=$sp;
      var $24=$23;
      var $add_ptr14=(($24+8)|0);
      var $25=$add_ptr14;
      $ss=$25;
      var $26=$sp;
      var $27=$26;
      var $28=$ssize;
      var $add_ptr15=(($27+$28)|0);
      var $29=$add_ptr15;
      $tnext=$29;
      var $30=$tnext;
      $p=$30;
      $nfences=0;
      var $31=$m_addr;
      var $32=$tbase_addr;
      var $33=$32;
      var $34=$tsize_addr;
      var $sub16=((($34)-(40))|0);
      _init_top($31, $33, $sub16);
      var $35=$ssize;
      var $or=$35 | 1;
      var $or17=$or | 2;
      var $36=$sp;
      var $head=(($36+4)|0);
      HEAP32[(($head)>>2)]=$or17;
      var $37=$ss;
      var $38=$m_addr;
      var $seg=(($38+448)|0);
      var $39=$37;
      var $40=$seg;
      assert(16 % 1 === 0);HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];HEAP32[((($39)+(8))>>2)]=HEAP32[((($40)+(8))>>2)];HEAP32[((($39)+(12))>>2)]=HEAP32[((($40)+(12))>>2)];
      var $41=$tbase_addr;
      var $42=$m_addr;
      var $seg18=(($42+448)|0);
      var $base19=(($seg18)|0);
      HEAP32[(($base19)>>2)]=$41;
      var $43=$tsize_addr;
      var $44=$m_addr;
      var $seg20=(($44+448)|0);
      var $size21=(($seg20+4)|0);
      HEAP32[(($size21)>>2)]=$43;
      var $45=$mmapped_addr;
      var $46=$m_addr;
      var $seg22=(($46+448)|0);
      var $sflags=(($seg22+12)|0);
      HEAP32[(($sflags)>>2)]=$45;
      var $47=$ss;
      var $48=$m_addr;
      var $seg23=(($48+448)|0);
      var $next=(($seg23+8)|0);
      HEAP32[(($next)>>2)]=$47;
      label = 9; break;
    case 9: 
      var $49=$p;
      var $50=$49;
      var $add_ptr24=(($50+4)|0);
      var $51=$add_ptr24;
      $nextp=$51;
      var $52=$p;
      var $head25=(($52+4)|0);
      HEAP32[(($head25)>>2)]=7;
      var $53=$nfences;
      var $inc=((($53)+(1))|0);
      $nfences=$inc;
      var $54=$nextp;
      var $head26=(($54+4)|0);
      var $55=$head26;
      var $56=$old_end;
      var $cmp27=(($55)>>>(0)) < (($56)>>>(0));
      if ($cmp27) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $57=$nextp;
      $p=$57;
      label = 12; break;
    case 11: 
      label = 13; break;
    case 12: 
      label = 9; break;
    case 13: 
      var $58=$csp;
      var $59=$old_top;
      var $cmp28=(($58)|(0))!=(($59)|(0));
      if ($cmp28) { label = 14; break; } else { label = 50; break; }
    case 14: 
      var $60=$old_top;
      var $61=$60;
      $q=$61;
      var $62=$csp;
      var $63=$old_top;
      var $sub_ptr_lhs_cast=$62;
      var $sub_ptr_rhs_cast=$63;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $psize=$sub_ptr_sub;
      var $64=$q;
      var $65=$64;
      var $66=$psize;
      var $add_ptr30=(($65+$66)|0);
      var $67=$add_ptr30;
      $tn=$67;
      var $68=$tn;
      var $head31=(($68+4)|0);
      var $69=HEAP32[(($head31)>>2)];
      var $and32=$69 & -2;
      HEAP32[(($head31)>>2)]=$and32;
      var $70=$psize;
      var $or33=$70 | 1;
      var $71=$q;
      var $head34=(($71+4)|0);
      HEAP32[(($head34)>>2)]=$or33;
      var $72=$psize;
      var $73=$q;
      var $74=$73;
      var $75=$psize;
      var $add_ptr35=(($74+$75)|0);
      var $76=$add_ptr35;
      var $prev_foot=(($76)|0);
      HEAP32[(($prev_foot)>>2)]=$72;
      var $77=$psize;
      var $shr=$77 >>> 3;
      var $cmp36=(($shr)>>>(0)) < 32;
      if ($cmp36) { label = 15; break; } else { label = 22; break; }
    case 15: 
      var $78=$psize;
      var $shr38=$78 >>> 3;
      $I=$shr38;
      var $79=$I;
      var $shl=$79 << 1;
      var $80=$m_addr;
      var $smallbins=(($80+40)|0);
      var $arrayidx=(($smallbins+($shl<<2))|0);
      var $81=$arrayidx;
      var $82=$81;
      $B=$82;
      var $83=$B;
      $F=$83;
      var $84=$m_addr;
      var $smallmap=(($84)|0);
      var $85=HEAP32[(($smallmap)>>2)];
      var $86=$I;
      var $shl39=1 << $86;
      var $and40=$85 & $shl39;
      var $tobool=(($and40)|(0))!=0;
      if ($tobool) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $87=$I;
      var $shl42=1 << $87;
      var $88=$m_addr;
      var $smallmap43=(($88)|0);
      var $89=HEAP32[(($smallmap43)>>2)];
      var $or44=$89 | $shl42;
      HEAP32[(($smallmap43)>>2)]=$or44;
      label = 21; break;
    case 17: 
      var $90=$B;
      var $fd=(($90+8)|0);
      var $91=HEAP32[(($fd)>>2)];
      var $92=$91;
      var $93=$m_addr;
      var $least_addr=(($93+16)|0);
      var $94=HEAP32[(($least_addr)>>2)];
      var $cmp46=(($92)>>>(0)) >= (($94)>>>(0));
      var $conv=(($cmp46)&(1));
      var $expval=($conv);
      var $tobool47=(($expval)|(0))!=0;
      if ($tobool47) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $95=$B;
      var $fd49=(($95+8)|0);
      var $96=HEAP32[(($fd49)>>2)];
      $F=$96;
      label = 20; break;
    case 19: 
      _abort();
      throw "Reached an unreachable!";
    case 20: 
      label = 21; break;
    case 21: 
      var $97=$q;
      var $98=$B;
      var $fd53=(($98+8)|0);
      HEAP32[(($fd53)>>2)]=$97;
      var $99=$q;
      var $100=$F;
      var $bk=(($100+12)|0);
      HEAP32[(($bk)>>2)]=$99;
      var $101=$F;
      var $102=$q;
      var $fd54=(($102+8)|0);
      HEAP32[(($fd54)>>2)]=$101;
      var $103=$B;
      var $104=$q;
      var $bk55=(($104+12)|0);
      HEAP32[(($bk55)>>2)]=$103;
      label = 49; break;
    case 22: 
      var $105=$q;
      var $106=$105;
      $TP=$106;
      var $107=$psize;
      var $shr58=$107 >>> 8;
      $X=$shr58;
      var $108=$X;
      var $cmp59=(($108)|(0))==0;
      if ($cmp59) { label = 23; break; } else { label = 24; break; }
    case 23: 
      $I57=0;
      label = 28; break;
    case 24: 
      var $109=$X;
      var $cmp63=(($109)>>>(0)) > 65535;
      if ($cmp63) { label = 25; break; } else { label = 26; break; }
    case 25: 
      $I57=31;
      label = 27; break;
    case 26: 
      var $110=$X;
      $Y=$110;
      var $111=$Y;
      var $sub67=((($111)-(256))|0);
      var $shr68=$sub67 >>> 16;
      var $and69=$shr68 & 8;
      $N=$and69;
      var $112=$N;
      var $113=$Y;
      var $shl70=$113 << $112;
      $Y=$shl70;
      var $sub71=((($shl70)-(4096))|0);
      var $shr72=$sub71 >>> 16;
      var $and73=$shr72 & 4;
      $K=$and73;
      var $114=$K;
      var $115=$N;
      var $add74=((($115)+($114))|0);
      $N=$add74;
      var $116=$K;
      var $117=$Y;
      var $shl75=$117 << $116;
      $Y=$shl75;
      var $sub76=((($shl75)-(16384))|0);
      var $shr77=$sub76 >>> 16;
      var $and78=$shr77 & 2;
      $K=$and78;
      var $118=$N;
      var $add79=((($118)+($and78))|0);
      $N=$add79;
      var $119=$N;
      var $sub80=(((14)-($119))|0);
      var $120=$K;
      var $121=$Y;
      var $shl81=$121 << $120;
      $Y=$shl81;
      var $shr82=$shl81 >>> 15;
      var $add83=((($sub80)+($shr82))|0);
      $K=$add83;
      var $122=$K;
      var $shl84=$122 << 1;
      var $123=$psize;
      var $124=$K;
      var $add85=((($124)+(7))|0);
      var $shr86=$123 >>> (($add85)>>>(0));
      var $and87=$shr86 & 1;
      var $add88=((($shl84)+($and87))|0);
      $I57=$add88;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $125=$I57;
      var $126=$m_addr;
      var $treebins=(($126+304)|0);
      var $arrayidx91=(($treebins+($125<<2))|0);
      $H=$arrayidx91;
      var $127=$I57;
      var $128=$TP;
      var $index=(($128+28)|0);
      HEAP32[(($index)>>2)]=$127;
      var $129=$TP;
      var $child=(($129+16)|0);
      var $arrayidx92=(($child+4)|0);
      HEAP32[(($arrayidx92)>>2)]=0;
      var $130=$TP;
      var $child93=(($130+16)|0);
      var $arrayidx94=(($child93)|0);
      HEAP32[(($arrayidx94)>>2)]=0;
      var $131=$m_addr;
      var $treemap=(($131+4)|0);
      var $132=HEAP32[(($treemap)>>2)];
      var $133=$I57;
      var $shl95=1 << $133;
      var $and96=$132 & $shl95;
      var $tobool97=(($and96)|(0))!=0;
      if ($tobool97) { label = 30; break; } else { label = 29; break; }
    case 29: 
      var $134=$I57;
      var $shl99=1 << $134;
      var $135=$m_addr;
      var $treemap100=(($135+4)|0);
      var $136=HEAP32[(($treemap100)>>2)];
      var $or101=$136 | $shl99;
      HEAP32[(($treemap100)>>2)]=$or101;
      var $137=$TP;
      var $138=$H;
      HEAP32[(($138)>>2)]=$137;
      var $139=$H;
      var $140=$139;
      var $141=$TP;
      var $parent=(($141+24)|0);
      HEAP32[(($parent)>>2)]=$140;
      var $142=$TP;
      var $143=$TP;
      var $bk102=(($143+12)|0);
      HEAP32[(($bk102)>>2)]=$142;
      var $144=$TP;
      var $fd103=(($144+8)|0);
      HEAP32[(($fd103)>>2)]=$142;
      label = 48; break;
    case 30: 
      var $145=$H;
      var $146=HEAP32[(($145)>>2)];
      $T=$146;
      var $147=$psize;
      var $148=$I57;
      var $cmp106=(($148)|(0))==31;
      if ($cmp106) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $cond115 = 0;label = 33; break;
    case 32: 
      var $149=$I57;
      var $shr110=$149 >>> 1;
      var $add111=((($shr110)+(8))|0);
      var $sub112=((($add111)-(2))|0);
      var $sub113=(((31)-($sub112))|0);
      var $cond115 = $sub113;label = 33; break;
    case 33: 
      var $cond115;
      var $shl116=$147 << $cond115;
      $K105=$shl116;
      label = 34; break;
    case 34: 
      var $150=$T;
      var $head118=(($150+4)|0);
      var $151=HEAP32[(($head118)>>2)];
      var $and119=$151 & -8;
      var $152=$psize;
      var $cmp120=(($and119)|(0))!=(($152)|(0));
      if ($cmp120) { label = 35; break; } else { label = 41; break; }
    case 35: 
      var $153=$K105;
      var $shr123=$153 >>> 31;
      var $and124=$shr123 & 1;
      var $154=$T;
      var $child125=(($154+16)|0);
      var $arrayidx126=(($child125+($and124<<2))|0);
      $C=$arrayidx126;
      var $155=$K105;
      var $shl127=$155 << 1;
      $K105=$shl127;
      var $156=$C;
      var $157=HEAP32[(($156)>>2)];
      var $cmp128=(($157)|(0))!=0;
      if ($cmp128) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $158=$C;
      var $159=HEAP32[(($158)>>2)];
      $T=$159;
      label = 40; break;
    case 37: 
      var $160=$C;
      var $161=$160;
      var $162=$m_addr;
      var $least_addr132=(($162+16)|0);
      var $163=HEAP32[(($least_addr132)>>2)];
      var $cmp133=(($161)>>>(0)) >= (($163)>>>(0));
      var $conv134=(($cmp133)&(1));
      var $expval135=($conv134);
      var $tobool136=(($expval135)|(0))!=0;
      if ($tobool136) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $164=$TP;
      var $165=$C;
      HEAP32[(($165)>>2)]=$164;
      var $166=$T;
      var $167=$TP;
      var $parent138=(($167+24)|0);
      HEAP32[(($parent138)>>2)]=$166;
      var $168=$TP;
      var $169=$TP;
      var $bk139=(($169+12)|0);
      HEAP32[(($bk139)>>2)]=$168;
      var $170=$TP;
      var $fd140=(($170+8)|0);
      HEAP32[(($fd140)>>2)]=$168;
      label = 47; break;
    case 39: 
      _abort();
      throw "Reached an unreachable!";
    case 40: 
      label = 46; break;
    case 41: 
      var $171=$T;
      var $fd145=(($171+8)|0);
      var $172=HEAP32[(($fd145)>>2)];
      $F144=$172;
      var $173=$T;
      var $174=$173;
      var $175=$m_addr;
      var $least_addr146=(($175+16)|0);
      var $176=HEAP32[(($least_addr146)>>2)];
      var $cmp147=(($174)>>>(0)) >= (($176)>>>(0));
      if ($cmp147) { label = 42; break; } else { var $181 = 0;label = 43; break; }
    case 42: 
      var $177=$F144;
      var $178=$177;
      var $179=$m_addr;
      var $least_addr149=(($179+16)|0);
      var $180=HEAP32[(($least_addr149)>>2)];
      var $cmp150=(($178)>>>(0)) >= (($180)>>>(0));
      var $181 = $cmp150;label = 43; break;
    case 43: 
      var $181;
      var $land_ext=(($181)&(1));
      var $expval152=($land_ext);
      var $tobool153=(($expval152)|(0))!=0;
      if ($tobool153) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $182=$TP;
      var $183=$F144;
      var $bk155=(($183+12)|0);
      HEAP32[(($bk155)>>2)]=$182;
      var $184=$T;
      var $fd156=(($184+8)|0);
      HEAP32[(($fd156)>>2)]=$182;
      var $185=$F144;
      var $186=$TP;
      var $fd157=(($186+8)|0);
      HEAP32[(($fd157)>>2)]=$185;
      var $187=$T;
      var $188=$TP;
      var $bk158=(($188+12)|0);
      HEAP32[(($bk158)>>2)]=$187;
      var $189=$TP;
      var $parent159=(($189+24)|0);
      HEAP32[(($parent159)>>2)]=0;
      label = 47; break;
    case 45: 
      _abort();
      throw "Reached an unreachable!";
    case 46: 
      label = 34; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _strtod($string, $endPtr) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $string_addr;
      var $endPtr_addr;
      var $sign;
      var $expSign;
      var $fraction;
      var $dblExp;
      var $d;
      var $p;
      var $c;
      var $exp;
      var $fracExp;
      var $mantSize;
      var $decPt;
      var $pExp;
      var $frac1;
      var $frac2;
      $string_addr=$string;
      $endPtr_addr=$endPtr;
      $expSign=0;
      $exp=0;
      $fracExp=0;
      var $0=$string_addr;
      $p=$0;
      label = 3; break;
    case 3: 
      var $1=$p;
      var $2=HEAP8[($1)];
      var $conv=(($2 << 24) >> 24);
      var $call=_isspace($conv);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$p;
      var $add_ptr=(($3+1)|0);
      $p=$add_ptr;
      label = 3; break;
    case 5: 
      var $4=$p;
      var $5=HEAP8[($4)];
      var $conv1=(($5 << 24) >> 24);
      var $cmp=(($conv1)|(0))==45;
      if ($cmp) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $sign=1;
      var $6=$p;
      var $add_ptr3=(($6+1)|0);
      $p=$add_ptr3;
      label = 10; break;
    case 7: 
      var $7=$p;
      var $8=HEAP8[($7)];
      var $conv4=(($8 << 24) >> 24);
      var $cmp5=(($conv4)|(0))==43;
      if ($cmp5) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $9=$p;
      var $add_ptr8=(($9+1)|0);
      $p=$add_ptr8;
      label = 9; break;
    case 9: 
      $sign=0;
      label = 10; break;
    case 10: 
      $decPt=-1;
      $mantSize=0;
      label = 11; break;
    case 11: 
      var $10=$p;
      var $11=HEAP8[($10)];
      var $conv10=(($11 << 24) >> 24);
      $c=$conv10;
      var $12=$c;
      var $call11=_isdigit($12);
      var $tobool12=(($call11)|(0))!=0;
      if ($tobool12) { label = 16; break; } else { label = 12; break; }
    case 12: 
      var $13=$c;
      var $cmp14=(($13)|(0))!=46;
      if ($cmp14) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $14=$decPt;
      var $cmp16=(($14)|(0)) >= 0;
      if ($cmp16) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 18; break;
    case 15: 
      var $15=$mantSize;
      $decPt=$15;
      label = 16; break;
    case 16: 
      var $16=$p;
      var $add_ptr21=(($16+1)|0);
      $p=$add_ptr21;
      label = 17; break;
    case 17: 
      var $17=$mantSize;
      var $add=((($17)+(1))|0);
      $mantSize=$add;
      label = 11; break;
    case 18: 
      var $18=$p;
      $pExp=$18;
      var $19=$mantSize;
      var $20=$p;
      var $idx_neg=(((-$19))|0);
      var $add_ptr22=(($20+$idx_neg)|0);
      $p=$add_ptr22;
      var $21=$decPt;
      var $cmp23=(($21)|(0)) < 0;
      if ($cmp23) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $22=$mantSize;
      $decPt=$22;
      label = 21; break;
    case 20: 
      var $23=$mantSize;
      var $sub=((($23)-(1))|0);
      $mantSize=$sub;
      label = 21; break;
    case 21: 
      var $24=$mantSize;
      var $cmp28=(($24)|(0)) > 18;
      if ($cmp28) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $25=$decPt;
      var $sub31=((($25)-(18))|0);
      $fracExp=$sub31;
      $mantSize=18;
      label = 24; break;
    case 23: 
      var $26=$decPt;
      var $27=$mantSize;
      var $sub33=((($26)-($27))|0);
      $fracExp=$sub33;
      label = 24; break;
    case 24: 
      var $28=$mantSize;
      var $cmp35=(($28)|(0))==0;
      if ($cmp35) { label = 25; break; } else { label = 26; break; }
    case 25: 
      $fraction=0;
      var $29=$string_addr;
      $p=$29;
      label = 68; break;
    case 26: 
      $frac1=0;
      label = 27; break;
    case 27: 
      var $30=$mantSize;
      var $cmp40=(($30)|(0)) > 9;
      if ($cmp40) { label = 28; break; } else { label = 32; break; }
    case 28: 
      var $31=$p;
      var $32=HEAP8[($31)];
      var $conv42=(($32 << 24) >> 24);
      $c=$conv42;
      var $33=$p;
      var $add_ptr43=(($33+1)|0);
      $p=$add_ptr43;
      var $34=$c;
      var $cmp44=(($34)|(0))==46;
      if ($cmp44) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $35=$p;
      var $36=HEAP8[($35)];
      var $conv47=(($36 << 24) >> 24);
      $c=$conv47;
      var $37=$p;
      var $add_ptr48=(($37+1)|0);
      $p=$add_ptr48;
      label = 30; break;
    case 30: 
      var $38=$frac1;
      var $mul=((($38)*(10))&-1);
      var $39=$c;
      var $sub50=((($39)-(48))|0);
      var $add51=((($mul)+($sub50))|0);
      $frac1=$add51;
      label = 31; break;
    case 31: 
      var $40=$mantSize;
      var $sub53=((($40)-(1))|0);
      $mantSize=$sub53;
      label = 27; break;
    case 32: 
      $frac2=0;
      label = 33; break;
    case 33: 
      var $41=$mantSize;
      var $cmp56=(($41)|(0)) > 0;
      if ($cmp56) { label = 34; break; } else { label = 38; break; }
    case 34: 
      var $42=$p;
      var $43=HEAP8[($42)];
      var $conv59=(($43 << 24) >> 24);
      $c=$conv59;
      var $44=$p;
      var $add_ptr60=(($44+1)|0);
      $p=$add_ptr60;
      var $45=$c;
      var $cmp61=(($45)|(0))==46;
      if ($cmp61) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $46=$p;
      var $47=HEAP8[($46)];
      var $conv64=(($47 << 24) >> 24);
      $c=$conv64;
      var $48=$p;
      var $add_ptr65=(($48+1)|0);
      $p=$add_ptr65;
      label = 36; break;
    case 36: 
      var $49=$frac2;
      var $mul67=((($49)*(10))&-1);
      var $50=$c;
      var $sub68=((($50)-(48))|0);
      var $add69=((($mul67)+($sub68))|0);
      $frac2=$add69;
      label = 37; break;
    case 37: 
      var $51=$mantSize;
      var $sub71=((($51)-(1))|0);
      $mantSize=$sub71;
      label = 33; break;
    case 38: 
      var $52=$frac1;
      var $conv73=(($52)|(0));
      var $mul74=($conv73)*(1000000000);
      var $53=$frac2;
      var $conv75=(($53)|(0));
      var $add76=($mul74)+($conv75);
      $fraction=$add76;
      label = 39; break;
    case 39: 
      var $54=$pExp;
      $p=$54;
      var $55=$p;
      var $56=HEAP8[($55)];
      var $conv78=(($56 << 24) >> 24);
      var $cmp79=(($conv78)|(0))==69;
      if ($cmp79) { label = 41; break; } else { label = 40; break; }
    case 40: 
      var $57=$p;
      var $58=HEAP8[($57)];
      var $conv82=(($58 << 24) >> 24);
      var $cmp83=(($conv82)|(0))==101;
      if ($cmp83) { label = 41; break; } else { label = 50; break; }
    case 41: 
      var $59=$p;
      var $add_ptr86=(($59+1)|0);
      $p=$add_ptr86;
      var $60=$p;
      var $61=HEAP8[($60)];
      var $conv87=(($61 << 24) >> 24);
      var $cmp88=(($conv87)|(0))==45;
      if ($cmp88) { label = 42; break; } else { label = 43; break; }
    case 42: 
      $expSign=1;
      var $62=$p;
      var $add_ptr91=(($62+1)|0);
      $p=$add_ptr91;
      label = 46; break;
    case 43: 
      var $63=$p;
      var $64=HEAP8[($63)];
      var $conv93=(($64 << 24) >> 24);
      var $cmp94=(($conv93)|(0))==43;
      if ($cmp94) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $65=$p;
      var $add_ptr97=(($65+1)|0);
      $p=$add_ptr97;
      label = 45; break;
    case 45: 
      $expSign=0;
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $66=$p;
      var $67=HEAP8[($66)];
      var $conv101=(($67 << 24) >> 24);
      var $call102=_isdigit($conv101);
      var $tobool103=(($call102)|(0))!=0;
      if ($tobool103) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $68=$exp;
      var $mul105=((($68)*(10))&-1);
      var $69=$p;
      var $70=HEAP8[($69)];
      var $conv106=(($70 << 24) >> 24);
      var $sub107=((($conv106)-(48))|0);
      var $add108=((($mul105)+($sub107))|0);
      $exp=$add108;
      var $71=$p;
      var $add_ptr109=(($71+1)|0);
      $p=$add_ptr109;
      label = 47; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $72=$expSign;
      var $tobool112=(($72)|(0))!=0;
      if ($tobool112) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $73=$fracExp;
      var $74=$exp;
      var $sub114=((($73)-($74))|0);
      $exp=$sub114;
      label = 53; break;
    case 52: 
      var $75=$fracExp;
      var $76=$exp;
      var $add116=((($75)+($76))|0);
      $exp=$add116;
      label = 53; break;
    case 53: 
      var $77=$exp;
      var $cmp118=(($77)|(0)) < 0;
      if ($cmp118) { label = 54; break; } else { label = 55; break; }
    case 54: 
      $expSign=1;
      var $78=$exp;
      var $sub121=(((-$78))|0);
      $exp=$sub121;
      label = 56; break;
    case 55: 
      $expSign=0;
      label = 56; break;
    case 56: 
      var $79=$exp;
      var $80=HEAP32[((80028)>>2)];
      var $cmp124=(($79)|(0)) > (($80)|(0));
      if ($cmp124) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $81=HEAP32[((80028)>>2)];
      $exp=$81;
      var $call127=___errno_location();
      HEAP32[(($call127)>>2)]=34;
      label = 58; break;
    case 58: 
      $dblExp=1;
      $d=((59908)|0);
      label = 59; break;
    case 59: 
      var $82=$exp;
      var $cmp130=(($82)|(0))!=0;
      if ($cmp130) { label = 60; break; } else { label = 64; break; }
    case 60: 
      var $83=$exp;
      var $and=$83 & 1;
      var $tobool133=(($and)|(0))!=0;
      if ($tobool133) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $84=$d;
      var $85=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($84)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($84)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $86=$dblExp;
      var $mul135=($86)*($85);
      $dblExp=$mul135;
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $87=$exp;
      var $shr=$87 >> 1;
      $exp=$shr;
      var $88=$d;
      var $add_ptr138=(($88+8)|0);
      $d=$add_ptr138;
      label = 59; break;
    case 64: 
      var $89=$expSign;
      var $tobool140=(($89)|(0))!=0;
      if ($tobool140) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $90=$dblExp;
      var $91=$fraction;
      var $div=($91)/($90);
      $fraction=$div;
      label = 67; break;
    case 66: 
      var $92=$dblExp;
      var $93=$fraction;
      var $mul143=($93)*($92);
      $fraction=$mul143;
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $94=$endPtr_addr;
      var $cmp145=(($94)|(0))!=0;
      if ($cmp145) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $95=$p;
      var $96=$endPtr_addr;
      HEAP32[(($96)>>2)]=$95;
      label = 70; break;
    case 70: 
      var $97=$sign;
      var $tobool149=(($97)|(0))!=0;
      if ($tobool149) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $98=$fraction;
      var $sub151=(-$98);
      $retval=$sub151;
      label = 73; break;
    case 72: 
      var $99=$fraction;
      $retval=$99;
      label = 73; break;
    case 73: 
      var $100=$retval;
      return $100;
    default: assert(0, "bad label: " + label);
  }
}
// EMSCRIPTEN_END_FUNCS
// EMSCRIPTEN_END_FUNCS
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(!Module['preRun'] || Module['preRun'].length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  var ret;
  var initialStackTop = STACKTOP;
  try {
    ret = Module['_main'](argc, argv, 0);
  }
  catch(e) {
    if (e.name == 'ExitStatus') {
      return e.status;
    } else if (e == 'SimulateInfiniteLoop') {
      Module['noExitRuntime'] = true;
    } else {
      throw e;
    }
  } finally {
    STACKTOP = initialStackTop;
  }
  return ret;
}
function run(args) {
  args = args || Module['arguments'];
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    var ret = 0;
    calledRun = true;
    if (Module['_main'] && shouldRunNow) {
      ret = Module['callMain'](args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}
(function() {
  function WEBRUBY(opts) {
    if (!(this instanceof WEBRUBY)) {
      // Well, this is not perfect, but it can at least cover some cases.
      return new WEBRUBY(opts);
    }
    opts = opts || {};
    // Default print level is errors only
    this.print_level = opts.print_level || 1;
    this.mrb = _mrb_open();
  };
  WEBRUBY.prototype.close = function() {
    _mrb_close(this.mrb);
  };
  WEBRUBY.prototype.run = function() {
    _webruby_internal_run(this.mrb, this.print_level);
  };
  WEBRUBY.prototype.run_bytecode = function(bc) {
    var stack = Runtime.stackSave();
    var addr = Runtime.stackAlloc(bc.length);
    var ret;
    writeArrayToMemory(bc, addr);
    ret = _webruby_internal_run_bytecode(this.mrb, addr, this.print_level);
    Runtime.stackRestore(stack);
    return ret;
  };
  WEBRUBY.prototype.run_source = function(src) {
    var stack = Runtime.stackSave();
    var addr = Runtime.stackAlloc(src.length);
    var ret;
    writeStringToMemory(src, addr);
    ret = _webruby_internal_run_source(this.mrb, addr, this.print_level);
    Runtime.stackRestore(stack);
    return ret;
  };
  if (typeof window === 'object') {
    window['WEBRUBY'] = WEBRUBY;
  } else {
    global['WEBRUBY'] = WEBRUBY;
  }
}) ();
